{"sha": "9f6d55463889bd019913e71c8a235beed8f29f45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNmQ1NTQ2Mzg4OWJkMDE5OTEzZTcxYzhhMjM1YmVlZDhmMjlmNDU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-02-28T16:40:25Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-03-06T08:58:47Z"}, "message": "Fix export level of plugin and procmacro registrars.", "tree": {"sha": "da78ba09f08110941a150dc59bbb0ab73b7e24fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da78ba09f08110941a150dc59bbb0ab73b7e24fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f6d55463889bd019913e71c8a235beed8f29f45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6d55463889bd019913e71c8a235beed8f29f45", "html_url": "https://github.com/rust-lang/rust/commit/9f6d55463889bd019913e71c8a235beed8f29f45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f6d55463889bd019913e71c8a235beed8f29f45/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bc005c8bb26f8d84066a096780c765ba431d721", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bc005c8bb26f8d84066a096780c765ba431d721", "html_url": "https://github.com/rust-lang/rust/commit/8bc005c8bb26f8d84066a096780c765ba431d721"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "0b50f5c44962b7dfdd766a5fd716bd3751a87527", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6d55463889bd019913e71c8a235beed8f29f45/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6d55463889bd019913e71c8a235beed8f29f45/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=9f6d55463889bd019913e71c8a235beed8f29f45", "patch": "@@ -256,10 +256,9 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         let cnum = cdata.cnum;\n         assert!(cnum != LOCAL_CRATE);\n \n-        // If this crate is a plugin and/or a custom derive crate, then\n-        // we're not even going to link those in so we skip those crates.\n-        if cdata.root.plugin_registrar_fn.is_some() ||\n-           cdata.root.macro_derive_registrar.is_some() {\n+        // If this crate is a custom derive crate, then we're not even going to\n+        // link those in so we skip those crates.\n+        if cdata.root.macro_derive_registrar.is_some() {\n             return Arc::new(Vec::new())\n         }\n "}, {"sha": "7d7665749a7350ff2883cb4b941f98d658882ff7", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9f6d55463889bd019913e71c8a235beed8f29f45/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6d55463889bd019913e71c8a235beed8f29f45/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=9f6d55463889bd019913e71c8a235beed8f29f45", "patch": "@@ -119,7 +119,7 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let special_runtime_crate = tcx.is_panic_runtime(LOCAL_CRATE) ||\n         tcx.is_compiler_builtins(LOCAL_CRATE);\n \n-    let mut reachable_non_generics: DefIdSet = tcx.reachable_set(LOCAL_CRATE).0\n+    let reachable_non_generics: DefIdSet = tcx.reachable_set(LOCAL_CRATE).0\n         .iter()\n         .filter_map(|&node_id| {\n             // We want to ignore some FFI functions that are not exposed from\n@@ -174,14 +174,6 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         })\n         .collect();\n \n-    if let Some(id) = tcx.sess.derive_registrar_fn.get() {\n-        reachable_non_generics.insert(tcx.hir.local_def_id(id));\n-    }\n-\n-    if let Some(id) = tcx.sess.plugin_registrar_fn.get() {\n-        reachable_non_generics.insert(tcx.hir.local_def_id(id));\n-    }\n-\n     let mut symbols: Vec<_> = reachable_non_generics\n         .iter()\n         .map(|&def_id| {\n@@ -211,6 +203,16 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         })\n         .collect();\n \n+    if let Some(id) = tcx.sess.derive_registrar_fn.get() {\n+        let def_id = tcx.hir.local_def_id(id);\n+        symbols.push((ExportedSymbol::NonGeneric(def_id), SymbolExportLevel::C));\n+    }\n+\n+    if let Some(id) = tcx.sess.plugin_registrar_fn.get() {\n+        let def_id = tcx.hir.local_def_id(id);\n+        symbols.push((ExportedSymbol::NonGeneric(def_id), SymbolExportLevel::C));\n+    }\n+\n     if let Some(_) = *tcx.sess.entry_fn.borrow() {\n         let symbol_name = \"main\".to_string();\n         let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(&symbol_name));"}]}