{"sha": "8e0ab0fb5e35c96ba92c586eb9e0aa684fcd567d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMGFiMGZiNWUzNWM5NmJhOTJjNTg2ZWI5ZTBhYTY4NGZjZDU2N2Q=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-12-30T13:00:24Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-12-31T10:38:32Z"}, "message": "bootstrap: use the correct paths during ./x.py install", "tree": {"sha": "73936ab5f730f8c62d412cc0a6900955c7a5f3c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73936ab5f730f8c62d412cc0a6900955c7a5f3c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e0ab0fb5e35c96ba92c586eb9e0aa684fcd567d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl/tqigACgkQPgar6Auq\n8ZyZVg//ZkgeolWM49EYbT9vRb0on8J0+HuMZe1thCJOBFOa3qkxxYupZ9kGCZ+Q\nnVLcUun9benJzsQyDkLZIsRoRS359owjcl2otwTxIVkK4cQRw/upoYBKQSeRn3zG\nZX/7iCeG3Hn4aXZ+lggA7P/CafU3+06qFGRcsWrz/a4+QVKboZKMWQt+ofaFhGH0\nLd/p+y/l6cPLdu0M/vOzRlBvlC3/e4GNNPjgxkj/SpAbt3zzZLY5Gm8WGo9p0EFU\nKSA6dBBfju4IWEF3B+p1wD8iqP6QvsdJwj3QSBwhxYtJWWnLEiZDLFMKWLsJCe23\nFOYUuq0cvxyb+oY5m5XCwTgyEO7LdfQshJaFLzjKVkM1afU7PKkVujtyweeJP1u5\ncBgloPsFlK2YcbshiUzevlq3DJ5teoO/uJVdK7VlQb8zFEebi8oONpQfvejhBvWd\nGwzEdOb3PShSIg/T7lVXH9TKixa219EisDFSdUQOLLfLhGzmgFtH/G5A9BXVdIVC\ntLR/pSmAwKVvCzzBAHLDl16jAVmbxh1IbEbEBNMvePnwciJHFyfQbTg23+TkXEdp\nphOXUPBBHVtVsNRLsH1pt9++Rjlgaldg+Q3NdcoxiqIMcklozGOfBWH82ezZUjw8\nTlPitdlh1T50FNiJVQN0rlzOdFjtTVfBJ+9c1q6zga5371efV14=\n=JiuZ\n-----END PGP SIGNATURE-----", "payload": "tree 73936ab5f730f8c62d412cc0a6900955c7a5f3c0\nparent 1fab57491dbdb739ec940be4169013dc0e9982e1\nauthor Pietro Albini <pietro@pietroalbini.org> 1609333224 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1609411112 +0100\n\nbootstrap: use the correct paths during ./x.py install\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e0ab0fb5e35c96ba92c586eb9e0aa684fcd567d", "html_url": "https://github.com/rust-lang/rust/commit/8e0ab0fb5e35c96ba92c586eb9e0aa684fcd567d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e0ab0fb5e35c96ba92c586eb9e0aa684fcd567d/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fab57491dbdb739ec940be4169013dc0e9982e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fab57491dbdb739ec940be4169013dc0e9982e1", "html_url": "https://github.com/rust-lang/rust/commit/1fab57491dbdb739ec940be4169013dc0e9982e1"}], "stats": {"total": 126, "additions": 45, "deletions": 81}, "files": [{"sha": "daec1656b27cdd00bc08360f4acfbee207ba201b", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e0ab0fb5e35c96ba92c586eb9e0aa684fcd567d/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0ab0fb5e35c96ba92c586eb9e0aa684fcd567d/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=8e0ab0fb5e35c96ba92c586eb9e0aa684fcd567d", "patch": "@@ -1317,10 +1317,10 @@ impl Step for Extended {\n         }\n \n         let tarball = Tarball::new(builder, \"rust\", &target.triple);\n-        let work = tarball.work_dir();\n-        tarball.combine(&tarballs);\n+        let generated = tarball.combine(&tarballs);\n \n         let tmp = tmpdir(builder).join(\"combined-tarball\");\n+        let work = generated.work_dir();\n \n         let mut license = String::new();\n         license += &builder.read(&builder.src.join(\"COPYRIGHT\"));"}, {"sha": "96164947943ba4760926023f19b2595c083f881c", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 31, "deletions": 75, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/8e0ab0fb5e35c96ba92c586eb9e0aa684fcd567d/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0ab0fb5e35c96ba92c586eb9e0aa684fcd567d/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=8e0ab0fb5e35c96ba92c586eb9e0aa684fcd567d", "patch": "@@ -10,60 +10,19 @@ use std::process::Command;\n \n use build_helper::t;\n \n-use crate::dist::{self, pkgname, sanitize_sh, tmpdir};\n+use crate::dist::{self, sanitize_sh};\n+use crate::tarball::GeneratedTarball;\n use crate::Compiler;\n \n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::config::{Config, TargetSelection};\n \n-pub fn install_docs(builder: &Builder<'_>, stage: u32, host: TargetSelection) {\n-    install_sh(builder, \"docs\", \"rust-docs\", stage, Some(host));\n-}\n-\n-pub fn install_std(builder: &Builder<'_>, stage: u32, target: TargetSelection) {\n-    install_sh(builder, \"std\", \"rust-std\", stage, Some(target));\n-}\n-\n-pub fn install_cargo(builder: &Builder<'_>, stage: u32, host: TargetSelection) {\n-    install_sh(builder, \"cargo\", \"cargo\", stage, Some(host));\n-}\n-\n-pub fn install_rls(builder: &Builder<'_>, stage: u32, host: TargetSelection) {\n-    install_sh(builder, \"rls\", \"rls\", stage, Some(host));\n-}\n-\n-pub fn install_rust_analyzer(builder: &Builder<'_>, stage: u32, host: TargetSelection) {\n-    install_sh(builder, \"rust-analyzer\", \"rust-analyzer\", stage, Some(host));\n-}\n-\n-pub fn install_clippy(builder: &Builder<'_>, stage: u32, host: TargetSelection) {\n-    install_sh(builder, \"clippy\", \"clippy\", stage, Some(host));\n-}\n-pub fn install_miri(builder: &Builder<'_>, stage: u32, host: TargetSelection) {\n-    install_sh(builder, \"miri\", \"miri\", stage, Some(host));\n-}\n-\n-pub fn install_rustfmt(builder: &Builder<'_>, stage: u32, host: TargetSelection) {\n-    install_sh(builder, \"rustfmt\", \"rustfmt\", stage, Some(host));\n-}\n-\n-pub fn install_analysis(builder: &Builder<'_>, stage: u32, host: TargetSelection) {\n-    install_sh(builder, \"analysis\", \"rust-analysis\", stage, Some(host));\n-}\n-\n-pub fn install_src(builder: &Builder<'_>, stage: u32) {\n-    install_sh(builder, \"src\", \"rust-src\", stage, None);\n-}\n-pub fn install_rustc(builder: &Builder<'_>, stage: u32, host: TargetSelection) {\n-    install_sh(builder, \"rustc\", \"rustc\", stage, Some(host));\n-}\n-\n fn install_sh(\n     builder: &Builder<'_>,\n     package: &str,\n-    name: &str,\n     stage: u32,\n     host: Option<TargetSelection>,\n+    tarball: &GeneratedTarball,\n ) {\n     builder.info(&format!(\"Install {} stage{} ({:?})\", package, stage, host));\n \n@@ -108,15 +67,10 @@ fn install_sh(\n     let empty_dir = builder.out.join(\"tmp/empty_dir\");\n \n     t!(fs::create_dir_all(&empty_dir));\n-    let package_name = if let Some(host) = host {\n-        format!(\"{}-{}\", pkgname(builder, name), host.triple)\n-    } else {\n-        pkgname(builder, name)\n-    };\n \n     let mut cmd = Command::new(\"sh\");\n     cmd.current_dir(&empty_dir)\n-        .arg(sanitize_sh(&tmpdir(builder).join(&package_name).join(\"install.sh\")))\n+        .arg(sanitize_sh(&tarball.decompressed_output().join(\"install.sh\")))\n         .arg(format!(\"--prefix={}\", sanitize_sh(&prefix)))\n         .arg(format!(\"--sysconfdir={}\", sanitize_sh(&sysconfdir)))\n         .arg(format!(\"--datadir={}\", sanitize_sh(&datadir)))\n@@ -191,75 +145,77 @@ macro_rules! install {\n \n install!((self, builder, _config),\n     Docs, \"src/doc\", _config.docs, only_hosts: false, {\n-        builder.ensure(dist::Docs { host: self.target });\n-        install_docs(builder, self.compiler.stage, self.target);\n+        let tarball = builder.ensure(dist::Docs { host: self.target }).expect(\"missing docs\");\n+        install_sh(builder, \"docs\", self.compiler.stage, Some(self.target), &tarball);\n     };\n     Std, \"library/std\", true, only_hosts: false, {\n         for target in &builder.targets {\n-            builder.ensure(dist::Std {\n+            let tarball = builder.ensure(dist::Std {\n                 compiler: self.compiler,\n                 target: *target\n-            });\n-            install_std(builder, self.compiler.stage, *target);\n+            }).expect(\"missing std\");\n+            install_sh(builder, \"std\", self.compiler.stage, Some(*target), &tarball);\n         }\n     };\n     Cargo, \"cargo\", Self::should_build(_config), only_hosts: true, {\n-        builder.ensure(dist::Cargo { compiler: self.compiler, target: self.target });\n-        install_cargo(builder, self.compiler.stage, self.target);\n+        let tarball = builder.ensure(dist::Cargo { compiler: self.compiler, target: self.target });\n+        install_sh(builder, \"cargo\", self.compiler.stage, Some(self.target), &tarball);\n     };\n     Rls, \"rls\", Self::should_build(_config), only_hosts: true, {\n-        if builder.ensure(dist::Rls { compiler: self.compiler, target: self.target }).is_some() {\n-            install_rls(builder, self.compiler.stage, self.target);\n+        if let Some(tarball) = builder.ensure(dist::Rls { compiler: self.compiler, target: self.target }) {\n+            install_sh(builder, \"rls\", self.compiler.stage, Some(self.target), &tarball);\n         } else {\n             builder.info(\n                 &format!(\"skipping Install RLS stage{} ({})\", self.compiler.stage, self.target),\n             );\n         }\n     };\n     RustAnalyzer, \"rust-analyzer\", Self::should_build(_config), only_hosts: true, {\n-        builder.ensure(dist::RustAnalyzer { compiler: self.compiler, target: self.target });\n-        install_rust_analyzer(builder, self.compiler.stage, self.target);\n+        let tarball = builder\n+            .ensure(dist::RustAnalyzer { compiler: self.compiler, target: self.target })\n+            .expect(\"missing rust-analyzer\");\n+        install_sh(builder, \"rust-analyzer\", self.compiler.stage, Some(self.target), &tarball);\n     };\n     Clippy, \"clippy\", Self::should_build(_config), only_hosts: true, {\n-        builder.ensure(dist::Clippy { compiler: self.compiler, target: self.target });\n-        install_clippy(builder, self.compiler.stage, self.target);\n+        let tarball = builder.ensure(dist::Clippy { compiler: self.compiler, target: self.target });\n+        install_sh(builder, \"clippy\", self.compiler.stage, Some(self.target), &tarball);\n     };\n     Miri, \"miri\", Self::should_build(_config), only_hosts: true, {\n-        if builder.ensure(dist::Miri { compiler: self.compiler, target: self.target }).is_some() {\n-            install_miri(builder, self.compiler.stage, self.target);\n+        if let Some(tarball) = builder.ensure(dist::Miri { compiler: self.compiler, target: self.target }) {\n+            install_sh(builder, \"miri\", self.compiler.stage, Some(self.target), &tarball);\n         } else {\n             builder.info(\n                 &format!(\"skipping Install miri stage{} ({})\", self.compiler.stage, self.target),\n             );\n         }\n     };\n     Rustfmt, \"rustfmt\", Self::should_build(_config), only_hosts: true, {\n-        if builder.ensure(dist::Rustfmt {\n+        if let Some(tarball) = builder.ensure(dist::Rustfmt {\n             compiler: self.compiler,\n             target: self.target\n-        }).is_some() {\n-            install_rustfmt(builder, self.compiler.stage, self.target);\n+        }) {\n+            install_sh(builder, \"rustfmt\", self.compiler.stage, Some(self.target), &tarball);\n         } else {\n             builder.info(\n                 &format!(\"skipping Install Rustfmt stage{} ({})\", self.compiler.stage, self.target),\n             );\n         }\n     };\n     Analysis, \"analysis\", Self::should_build(_config), only_hosts: false, {\n-        builder.ensure(dist::Analysis {\n+        let tarball = builder.ensure(dist::Analysis {\n             // Find the actual compiler (handling the full bootstrap option) which\n             // produced the save-analysis data because that data isn't copied\n             // through the sysroot uplifting.\n             compiler: builder.compiler_for(builder.top_stage, builder.config.build, self.target),\n             target: self.target\n-        });\n-        install_analysis(builder, self.compiler.stage, self.target);\n+        }).expect(\"missing analysis\");\n+        install_sh(builder, \"analysis\", self.compiler.stage, Some(self.target), &tarball);\n     };\n     Rustc, \"src/librustc\", true, only_hosts: true, {\n-        builder.ensure(dist::Rustc {\n+        let tarball = builder.ensure(dist::Rustc {\n             compiler: builder.compiler(builder.top_stage, self.target),\n         });\n-        install_rustc(builder, self.compiler.stage, self.target);\n+        install_sh(builder, \"rustc\", self.compiler.stage, Some(self.target), &tarball);\n     };\n );\n \n@@ -284,7 +240,7 @@ impl Step for Src {\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n-        builder.ensure(dist::Src);\n-        install_src(builder, self.stage);\n+        let tarball = builder.ensure(dist::Src);\n+        install_sh(builder, \"src\", self.stage, None, &tarball);\n     }\n }"}, {"sha": "7fb03056f1bd3ae7a99a1c125c242c51f37b76e4", "filename": "src/bootstrap/tarball.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8e0ab0fb5e35c96ba92c586eb9e0aa684fcd567d/src%2Fbootstrap%2Ftarball.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0ab0fb5e35c96ba92c586eb9e0aa684fcd567d/src%2Fbootstrap%2Ftarball.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftarball.rs?ref=8e0ab0fb5e35c96ba92c586eb9e0aa684fcd567d", "patch": "@@ -196,10 +196,6 @@ impl<'a> Tarball<'a> {\n         self.builder.cp_r(src.as_ref(), &dest);\n     }\n \n-    pub(crate) fn work_dir(&self) -> PathBuf {\n-        self.temp_dir.clone()\n-    }\n-\n     pub(crate) fn generate(self) -> GeneratedTarball {\n         let mut component_name = self.component.clone();\n         if self.is_preview {\n@@ -309,17 +305,29 @@ impl<'a> Tarball<'a> {\n \n         GeneratedTarball {\n             path: crate::dist::distdir(self.builder).join(format!(\"{}.tar.{}\", package_name, ext)),\n+            decompressed_output: self.temp_dir.join(package_name),\n+            work: self.temp_dir,\n         }\n     }\n }\n \n #[derive(Debug, Clone)]\n pub struct GeneratedTarball {\n     path: PathBuf,\n+    decompressed_output: PathBuf,\n+    work: PathBuf,\n }\n \n impl GeneratedTarball {\n     pub(crate) fn tarball(&self) -> &Path {\n         &self.path\n     }\n+\n+    pub(crate) fn decompressed_output(&self) -> &Path {\n+        &self.decompressed_output\n+    }\n+\n+    pub(crate) fn work_dir(&self) -> &Path {\n+        &self.work\n+    }\n }"}]}