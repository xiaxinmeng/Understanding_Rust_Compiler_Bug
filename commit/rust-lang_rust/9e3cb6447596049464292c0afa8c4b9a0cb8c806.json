{"sha": "9e3cb6447596049464292c0afa8c4b9a0cb8c806", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllM2NiNjQ0NzU5NjA0OTQ2NDI5MmMwYWZhOGM0YjlhMGNiOGM4MDY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-25T07:33:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-25T16:33:15Z"}, "message": "rustc_trans: Handle empty dlls on MSVC\n\nIf a dylib doesn't actually export any symbols then link.exe won't emit a\n`foo.lib` file to link against (as one isn't necessary). Detect this case in the\nbackend by omitting the `foo.lib` argument to the linker if it doesn't actually\nexist.", "tree": {"sha": "013e1bf2aea3b944ab3d097c61fe5af35ef81714", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/013e1bf2aea3b944ab3d097c61fe5af35ef81714"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e3cb6447596049464292c0afa8c4b9a0cb8c806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e3cb6447596049464292c0afa8c4b9a0cb8c806", "html_url": "https://github.com/rust-lang/rust/commit/9e3cb6447596049464292c0afa8c4b9a0cb8c806", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e3cb6447596049464292c0afa8c4b9a0cb8c806/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91d799eab0d7f6784fb4366182b5007cf055519d", "url": "https://api.github.com/repos/rust-lang/rust/commits/91d799eab0d7f6784fb4366182b5007cf055519d", "html_url": "https://github.com/rust-lang/rust/commit/91d799eab0d7f6784fb4366182b5007cf055519d"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "cf5feabcc57e2df0fecf0b48e1f260489c0a5c03", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cb6447596049464292c0afa8c4b9a0cb8c806/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cb6447596049464292c0afa8c4b9a0cb8c806/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=9e3cb6447596049464292c0afa8c4b9a0cb8c806", "patch": "@@ -1214,11 +1214,13 @@ fn add_upstream_rust_crates(cmd: &mut Linker, sess: &Session,\n \n         // Just need to tell the linker about where the library lives and\n         // what its name is\n-        if let Some(dir) = cratepath.parent() {\n+        let parent = cratepath.parent();\n+        if let Some(dir) = parent {\n             cmd.include_path(&fix_windows_verbatim_for_gcc(dir));\n         }\n         let filestem = cratepath.file_stem().unwrap().to_str().unwrap();\n-        cmd.link_dylib(&unlib(&sess.target, filestem));\n+        cmd.link_rust_dylib(&unlib(&sess.target, filestem),\n+                            parent.unwrap_or(Path::new(\"\")));\n     }\n }\n "}, {"sha": "7253334d6998989c95104d671e630869565a5cee", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9e3cb6447596049464292c0afa8c4b9a0cb8c806/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e3cb6447596049464292c0afa8c4b9a0cb8c806/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=9e3cb6447596049464292c0afa8c4b9a0cb8c806", "patch": "@@ -11,6 +11,7 @@\n use std::ffi::OsString;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n+use std::fs;\n \n use rustc_back::archive;\n use session::Session;\n@@ -25,6 +26,7 @@ use session::config;\n /// MSVC linker (e.g. `link.exe`) is being used.\n pub trait Linker {\n     fn link_dylib(&mut self, lib: &str);\n+    fn link_rust_dylib(&mut self, lib: &str, path: &Path);\n     fn link_framework(&mut self, framework: &str);\n     fn link_staticlib(&mut self, lib: &str);\n     fn link_rlib(&mut self, lib: &Path);\n@@ -67,6 +69,10 @@ impl<'a> Linker for GnuLinker<'a> {\n     fn position_independent_executable(&mut self) { self.cmd.arg(\"-pie\"); }\n     fn args(&mut self, args: &[String]) { self.cmd.args(args); }\n \n+    fn link_rust_dylib(&mut self, lib: &str, _path: &Path) {\n+        self.cmd.arg(\"-l\").arg(lib);\n+    }\n+\n     fn link_framework(&mut self, framework: &str) {\n         self.cmd.arg(\"-framework\").arg(framework);\n     }\n@@ -189,6 +195,18 @@ impl<'a> Linker for MsvcLinker<'a> {\n     fn link_dylib(&mut self, lib: &str) {\n         self.cmd.arg(&format!(\"{}.lib\", lib));\n     }\n+\n+    fn link_rust_dylib(&mut self, lib: &str, path: &Path) {\n+        // When producing a dll, the MSVC linker may not actually emit a\n+        // `foo.lib` file if the dll doesn't actually export any symbols, so we\n+        // check to see if the file is there and just omit linking to it if it's\n+        // not present.\n+        let name = format!(\"{}.lib\", lib);\n+        if fs::metadata(&path.join(&name)).is_ok() {\n+            self.cmd.arg(name);\n+        }\n+    }\n+\n     fn link_staticlib(&mut self, lib: &str) {\n         self.cmd.arg(&format!(\"{}.lib\", lib));\n     }"}]}