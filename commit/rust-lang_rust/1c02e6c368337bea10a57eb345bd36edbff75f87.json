{"sha": "1c02e6c368337bea10a57eb345bd36edbff75f87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMDJlNmMzNjgzMzdiZWExMGE1N2ViMzQ1YmQzNmVkYmZmNzVmODc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-12T20:04:00Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-12T20:04:00Z"}, "message": "Rustup to rustc 1.43.0-nightly (c20d7eecb 2020-03-11)", "tree": {"sha": "a5ba8e68aca3d36012c2d9bc1095f821c0407f6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5ba8e68aca3d36012c2d9bc1095f821c0407f6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c02e6c368337bea10a57eb345bd36edbff75f87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c02e6c368337bea10a57eb345bd36edbff75f87", "html_url": "https://github.com/rust-lang/rust/commit/1c02e6c368337bea10a57eb345bd36edbff75f87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c02e6c368337bea10a57eb345bd36edbff75f87/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b469bf3b08a1c7def04ed256342a68739d8dd6a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b469bf3b08a1c7def04ed256342a68739d8dd6a7", "html_url": "https://github.com/rust-lang/rust/commit/b469bf3b08a1c7def04ed256342a68739d8dd6a7"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "8ad0a076d3d307d1a850f8e03c3945f222c2e246", "filename": "build_sysroot/alloc_system/lib.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1c02e6c368337bea10a57eb345bd36edbff75f87/build_sysroot%2Falloc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c02e6c368337bea10a57eb345bd36edbff75f87/build_sysroot%2Falloc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Falloc_system%2Flib.rs?ref=1c02e6c368337bea10a57eb345bd36edbff75f87", "patch": "@@ -72,14 +72,16 @@ pub struct System;\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n unsafe impl AllocRef for System {\n     #[inline]\n-    unsafe fn alloc(&mut self, layout: Layout) -> Result<(NonNull<u8>, usize), AllocErr> {\n-        NonNull::new(GlobalAlloc::alloc(self, layout)).ok_or(AllocErr).map(|p| (p, layout.size()))\n+    fn alloc(&mut self, layout: Layout) -> Result<(NonNull<u8>, usize), AllocErr> {\n+        NonNull::new(unsafe { GlobalAlloc::alloc(self, layout) })\n+            .ok_or(AllocErr)\n+            .map(|p| (p, layout.size()))\n     }\n     #[inline]\n-    unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<(NonNull<u8>, usize), AllocErr> {\n-        NonNull::new(GlobalAlloc::alloc_zeroed(self, layout))\n-        .ok_or(AllocErr)\n-        .map(|p| (p, layout.size()))\n+    fn alloc_zeroed(&mut self, layout: Layout) -> Result<(NonNull<u8>, usize), AllocErr> {\n+        NonNull::new(unsafe { GlobalAlloc::alloc_zeroed(self, layout) })\n+            .ok_or(AllocErr)\n+            .map(|p| (p, layout.size()))\n     }\n     #[inline]\n     unsafe fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout) {"}, {"sha": "7b70b3322191a08688d8645bf38755b2e28ab907", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c02e6c368337bea10a57eb345bd36edbff75f87/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/1c02e6c368337bea10a57eb345bd36edbff75f87/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=1c02e6c368337bea10a57eb345bd36edbff75f87", "patch": "@@ -1 +1 @@\n-nightly-2020-03-10\n+nightly-2020-03-12"}, {"sha": "e6093704c112e44d19fb05278eff252791b477cd", "filename": "src/constant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c02e6c368337bea10a57eb345bd36edbff75f87/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c02e6c368337bea10a57eb345bd36edbff75f87/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=1c02e6c368337bea10a57eb345bd36edbff75f87", "patch": "@@ -485,7 +485,6 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n \n     fn assert_panic(\n         _: &mut InterpCx<'mir, 'tcx, Self>,\n-        _: Span,\n         _: &mir::AssertKind<Operand<'tcx>>,\n         _: Option<BasicBlock>,\n     ) -> InterpResult<'tcx> {"}, {"sha": "61a96ac0fe85d059e91418cf3751c3cf671cd21e", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1c02e6c368337bea10a57eb345bd36edbff75f87/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c02e6c368337bea10a57eb345bd36edbff75f87/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=1c02e6c368337bea10a57eb345bd36edbff75f87", "patch": "@@ -813,9 +813,20 @@ pub fn codegen_intrinsic_call<'tcx>(\n             let res = CValue::by_val(swap(&mut fx.bcx, arg), fx.layout_of(T));\n             ret.write_cvalue(fx, res);\n         };\n-        panic_if_uninhabited, <T> () {\n-            if fx.layout_of(T).abi.is_uninhabited() {\n-                crate::trap::trap_panic(fx, \"[panic] Called intrinsic::panic_if_uninhabited for uninhabited type.\");\n+        panic_if_uninhabited | panic_if_zero_invalid | panic_if_any_invalid, <T> () {\n+            let layout = fx.layout_of(T);\n+            if layout.abi.is_uninhabited() {\n+                crate::trap::trap_panic(fx, &format!(\"attempted to instantiate uninhabited type `{}`\", T));\n+                return;\n+            }\n+\n+            if intrinsic == \"panic_if_zero_invalid\" && !layout.might_permit_raw_init(fx, /*zero:*/ true).unwrap() {\n+                crate::trap::trap_panic(fx, &format!(\"attempted to zero-initialize type `{}`, which is invalid\", T));\n+                return;\n+            }\n+\n+            if intrinsic == \"panic_if_any_invalid\" && !layout.might_permit_raw_init(fx, /*zero:*/ false).unwrap() {\n+                crate::trap::trap_panic(fx, &format!(\"attempted to leave type `{}` uninitialized, which is invalid\", T));\n                 return;\n             }\n         };"}]}