{"sha": "f2d7c05db0e4876b9c409a8be8e99aceadc34b1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZDdjMDVkYjBlNDg3NmI5YzQwOWE4YmU4ZTk5YWNlYWRjMzRiMWE=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-12-21T02:07:13Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-12-21T02:10:29Z"}, "message": "Don't try to add nested predicate to Rustdoc auto-trait `ParamEnv`\n\nFixes #80233\n\nWe already have logic in `evaluate_predicates` that tries to add\nunimplemented predicates to our `ParamEnv`. Trying to add a predicate\nthat already holds can lead to errors later on, since projection\nwill prefer trait candidates from the `ParamEnv` to predicates from an\nimpl.", "tree": {"sha": "99c00af04140af1f193d2f641280ab421f6e174e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99c00af04140af1f193d2f641280ab421f6e174e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2d7c05db0e4876b9c409a8be8e99aceadc34b1a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl/gBBUACgkQtAh+UQ6Y\nsWS0Pg//Xf6lqCBeAwYXFJ2WsCZGFg4RQYG7EZ5FlqwLVcv9dwSdSYROohX8Fjjo\nUAynpi0U3IKZsyUfKye9+LUSfLhaiglSRn5ZehCPGjNSOAWteHKKbQAb2bPtlJwv\nclv7Vh+iVOnuH0cdiHzhpQeyMWh8AQfjG1HBZT3IJfwxX1aDWRpIZEC60RaL5DcK\n2lffmCm5q6rXBISEAdLES35M1KxhItpGfJOpzldKbrqX5mtaSfvoYEicxEzK+hpn\nafg7aJw7aL7vzZf64G9nDxaWQxvl9Cvj+LNLyONN4BMFvkBBhIeihRw0sm95EhkZ\nzDeB4i8EXeEJgFxZWiPWVNhO2OcGht2iU0ZMNsXyhuSaPJbMk4/NNBQ/tVMnRciZ\n3zHHRUfwlGvCShUNo6GwonlhwAfQaa9DVusmb+7AIlL/WTbJiJH58qu2t1ehDzgj\n4+5dwgZzaFTT/zeEf80t30qNY92ZKAQrqcUTcEjEFUtEHVnn89iE5cOprGTg0Lif\n2VuTc+u9yNd6xtGoqs2fpkk/+dQLXUQy8rb7igZCm+3Id9xFFiq+a2WIFm7Mo5YT\nnRO7HOzoq3+Zi34ELMnGrfUkddn53lEVxV7k6XBsdbR3xxv4huaVk+8o8FU82MWD\nzqiiITcE9pGSB2DnSvZUY6s/wK/wlYyyHk17CjRn/C6Eh47q9Os=\n=+gDu\n-----END PGP SIGNATURE-----", "payload": "tree 99c00af04140af1f193d2f641280ab421f6e174e\nparent b0e5c7d1fee37f1890455b977495bfe262716701\nauthor Aaron Hill <aa1ronham@gmail.com> 1608516433 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1608516629 -0500\n\nDon't try to add nested predicate to Rustdoc auto-trait `ParamEnv`\n\nFixes #80233\n\nWe already have logic in `evaluate_predicates` that tries to add\nunimplemented predicates to our `ParamEnv`. Trying to add a predicate\nthat already holds can lead to errors later on, since projection\nwill prefer trait candidates from the `ParamEnv` to predicates from an\nimpl.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d7c05db0e4876b9c409a8be8e99aceadc34b1a", "html_url": "https://github.com/rust-lang/rust/commit/f2d7c05db0e4876b9c409a8be8e99aceadc34b1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2d7c05db0e4876b9c409a8be8e99aceadc34b1a/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0e5c7d1fee37f1890455b977495bfe262716701", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0e5c7d1fee37f1890455b977495bfe262716701", "html_url": "https://github.com/rust-lang/rust/commit/b0e5c7d1fee37f1890455b977495bfe262716701"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "d0486264a58f95d93980d5d0244cd6d7186c6b1e", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2d7c05db0e4876b9c409a8be8e99aceadc34b1a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d7c05db0e4876b9c409a8be8e99aceadc34b1a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=f2d7c05db0e4876b9c409a8be8e99aceadc34b1a", "patch": "@@ -642,12 +642,10 @@ impl AutoTraitFinder<'tcx> {\n             let bound_predicate = predicate.bound_atom();\n             match bound_predicate.skip_binder() {\n                 ty::PredicateAtom::Trait(p, _) => {\n-                    if self.is_param_no_infer(p.trait_ref.substs)\n-                        && !only_projections\n-                        && is_new_pred\n-                    {\n-                        self.add_user_pred(computed_preds, predicate);\n-                    }\n+                    // Add this to `predicates` so that we end up calling `select`\n+                    // with it. If this predicate ends up being unimplemented,\n+                    // then `evaluate_predicates` will handle adding it the `ParamEnv`\n+                    // if possible.\n                     predicates.push_back(bound_predicate.rebind(p));\n                 }\n                 ty::PredicateAtom::Projection(p) => {"}, {"sha": "585a0864bb25d5fe529dfbad84a3af930780827f", "filename": "src/test/rustdoc/issue-80233-normalize-auto-trait.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f2d7c05db0e4876b9c409a8be8e99aceadc34b1a/src%2Ftest%2Frustdoc%2Fissue-80233-normalize-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d7c05db0e4876b9c409a8be8e99aceadc34b1a/src%2Ftest%2Frustdoc%2Fissue-80233-normalize-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-80233-normalize-auto-trait.rs?ref=f2d7c05db0e4876b9c409a8be8e99aceadc34b1a", "patch": "@@ -0,0 +1,37 @@\n+// Regression test for issue #80233\n+// Tests that we don't ICE when processing auto traits\n+\n+#![crate_type = \"lib\"]\n+pub trait Trait1 {}\n+\n+pub trait Trait2 {\n+    type Type2;\n+}\n+\n+pub trait Trait3 {\n+    type Type3;\n+}\n+\n+impl Trait2 for Struct1 {\n+    type Type2 = Struct1;\n+}\n+\n+impl<I: Trait2> Trait2 for Vec<I> {\n+    type Type2 = Vec<I::Type2>;\n+}\n+\n+impl<T: Trait1> Trait3 for T {\n+    type Type3 = Struct1;\n+}\n+\n+impl<T: Trait3> Trait3 for Vec<T> {\n+    type Type3 = Vec<T::Type3>;\n+}\n+\n+pub struct Struct1 {}\n+\n+// @has issue_80233_normalize_auto_trait/struct.Question.html\n+// @has - '//code' 'impl<T> Send for Question<T>'\n+pub struct Question<T: Trait1> {\n+    pub ins: <<Vec<T> as Trait3>::Type3 as Trait2>::Type2,\n+}"}]}