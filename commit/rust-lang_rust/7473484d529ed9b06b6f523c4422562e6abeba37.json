{"sha": "7473484d529ed9b06b6f523c4422562e6abeba37", "node_id": "C_kwDOAAsO6NoAKDc0NzM0ODRkNTI5ZWQ5YjA2YjZmNTIzYzQ0MjI1NjJlNmFiZWJhMzc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-14T11:39:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-14T11:39:15Z"}, "message": "Rollup merge of #100115 - obeis:issue-99910, r=cjgillot\n\nSuggest removing `let` if `const let` or `let const` is used\n\nCloses #99910", "tree": {"sha": "c53b81e438db61f056af9dfa4b61876ea4286bff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c53b81e438db61f056af9dfa4b61876ea4286bff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7473484d529ed9b06b6f523c4422562e6abeba37", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi+N7jCRBK7hj4Ov3rIwAA6poIAJFKTX5d4osgCFNslaJvgfH4\n4KL6NIfKLtibXZG+T4IyJLPPJLvVj+Yehgk6JBuEgAS3ppbm2RfFCQJlh+8iJwvO\nFZfw7HprDE2zhhVL+6grtXjPb2DrlU/Edytonw4ebckaapy1ee87UnHidCT8m1EL\nHpTdv3wyGGbKrS6tPyP+f5v1f4hGTOilsGSRyHqfCqQMekNMb3WJubZPWUIJ5IZi\nyBa7CBV+50rlfABQNKoBZYuF/IG6PkBU7YH7r3EpSoONeLPSdlv11gYaalNOxlg0\n0mKlzbrtpf5F3ggIc5zfBOyEV9O7JZSI7m8VozQzMybTrBwgINdDAsebK+MfLOU=\n=NzlK\n-----END PGP SIGNATURE-----\n", "payload": "tree c53b81e438db61f056af9dfa4b61876ea4286bff\nparent 482a6eaf109e6c7f619fdfb68a5b82c1aa0c1aae\nparent b3f32d1e8b3d9cee87358c3e8e31a7a6fcaf42df\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1660477155 +0530\ncommitter GitHub <noreply@github.com> 1660477155 +0530\n\nRollup merge of #100115 - obeis:issue-99910, r=cjgillot\n\nSuggest removing `let` if `const let` or `let const` is used\n\nCloses #99910\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7473484d529ed9b06b6f523c4422562e6abeba37", "html_url": "https://github.com/rust-lang/rust/commit/7473484d529ed9b06b6f523c4422562e6abeba37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7473484d529ed9b06b6f523c4422562e6abeba37/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "482a6eaf109e6c7f619fdfb68a5b82c1aa0c1aae", "url": "https://api.github.com/repos/rust-lang/rust/commits/482a6eaf109e6c7f619fdfb68a5b82c1aa0c1aae", "html_url": "https://github.com/rust-lang/rust/commit/482a6eaf109e6c7f619fdfb68a5b82c1aa0c1aae"}, {"sha": "b3f32d1e8b3d9cee87358c3e8e31a7a6fcaf42df", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f32d1e8b3d9cee87358c3e8e31a7a6fcaf42df", "html_url": "https://github.com/rust-lang/rust/commit/b3f32d1e8b3d9cee87358c3e8e31a7a6fcaf42df"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "83fab0829a106d4a3348db1a91238660dd877bed", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7473484d529ed9b06b6f523c4422562e6abeba37/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7473484d529ed9b06b6f523c4422562e6abeba37/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=7473484d529ed9b06b6f523c4422562e6abeba37", "patch": "@@ -1162,6 +1162,16 @@ impl<'a> Parser<'a> {\n                     Applicability::MaybeIncorrect,\n                 )\n                 .emit();\n+        } else if self.eat_keyword(kw::Let) {\n+            let span = self.prev_token.span;\n+            self.struct_span_err(const_span.to(span), \"`const` and `let` are mutually exclusive\")\n+                .span_suggestion(\n+                    const_span.to(span),\n+                    \"remove `let`\",\n+                    \"const\",\n+                    Applicability::MaybeIncorrect,\n+                )\n+                .emit();\n         }\n     }\n "}, {"sha": "6990d0782b772925dc25f350426d86dbf395c0b7", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7473484d529ed9b06b6f523c4422562e6abeba37/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7473484d529ed9b06b6f523c4422562e6abeba37/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=7473484d529ed9b06b6f523c4422562e6abeba37", "patch": "@@ -247,6 +247,22 @@ impl<'a> Parser<'a> {\n     /// Parses a local variable declaration.\n     fn parse_local(&mut self, attrs: AttrVec) -> PResult<'a, P<Local>> {\n         let lo = self.prev_token.span;\n+\n+        if self.token.is_keyword(kw::Const) && self.look_ahead(1, |t| t.is_ident()) {\n+            self.struct_span_err(\n+                lo.to(self.token.span),\n+                \"`const` and `let` are mutually exclusive\",\n+            )\n+            .span_suggestion(\n+                lo.to(self.token.span),\n+                \"remove `let`\",\n+                \"const\",\n+                Applicability::MaybeIncorrect,\n+            )\n+            .emit();\n+            self.bump();\n+        }\n+\n         let (pat, colon) = self.parse_pat_before_ty(None, RecoverComma::Yes, \"`let` bindings\")?;\n \n         let (err, ty) = if colon {"}, {"sha": "64ab6f62b77f38530d237d02fd24272623c41f05", "filename": "src/test/ui/parser/issue-99910-const-let-mutually-exclusive.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7473484d529ed9b06b6f523c4422562e6abeba37/src%2Ftest%2Fui%2Fparser%2Fissue-99910-const-let-mutually-exclusive.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7473484d529ed9b06b6f523c4422562e6abeba37/src%2Ftest%2Fui%2Fparser%2Fissue-99910-const-let-mutually-exclusive.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-99910-const-let-mutually-exclusive.fixed?ref=7473484d529ed9b06b6f523c4422562e6abeba37", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+fn main() {\n+    const _FOO: i32 = 123;\n+    //~^ ERROR const` and `let` are mutually exclusive\n+    const _BAR: i32 = 123;\n+    //~^ ERROR `const` and `let` are mutually exclusive\n+}"}, {"sha": "50520971ffb32bb6f68cb62c53917b96f33a5ff7", "filename": "src/test/ui/parser/issue-99910-const-let-mutually-exclusive.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7473484d529ed9b06b6f523c4422562e6abeba37/src%2Ftest%2Fui%2Fparser%2Fissue-99910-const-let-mutually-exclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7473484d529ed9b06b6f523c4422562e6abeba37/src%2Ftest%2Fui%2Fparser%2Fissue-99910-const-let-mutually-exclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-99910-const-let-mutually-exclusive.rs?ref=7473484d529ed9b06b6f523c4422562e6abeba37", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+fn main() {\n+    const let _FOO: i32 = 123;\n+    //~^ ERROR const` and `let` are mutually exclusive\n+    let const _BAR: i32 = 123;\n+    //~^ ERROR `const` and `let` are mutually exclusive\n+}"}, {"sha": "72377fc379cac8c525d02399cd95fa6a1af699ac", "filename": "src/test/ui/parser/issue-99910-const-let-mutually-exclusive.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7473484d529ed9b06b6f523c4422562e6abeba37/src%2Ftest%2Fui%2Fparser%2Fissue-99910-const-let-mutually-exclusive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7473484d529ed9b06b6f523c4422562e6abeba37/src%2Ftest%2Fui%2Fparser%2Fissue-99910-const-let-mutually-exclusive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-99910-const-let-mutually-exclusive.stderr?ref=7473484d529ed9b06b6f523c4422562e6abeba37", "patch": "@@ -0,0 +1,14 @@\n+error: `const` and `let` are mutually exclusive\n+  --> $DIR/issue-99910-const-let-mutually-exclusive.rs:4:5\n+   |\n+LL |     const let _FOO: i32 = 123;\n+   |     ^^^^^^^^^ help: remove `let`: `const`\n+\n+error: `const` and `let` are mutually exclusive\n+  --> $DIR/issue-99910-const-let-mutually-exclusive.rs:6:5\n+   |\n+LL |     let const _BAR: i32 = 123;\n+   |     ^^^^^^^^^ help: remove `let`: `const`\n+\n+error: aborting due to 2 previous errors\n+"}]}