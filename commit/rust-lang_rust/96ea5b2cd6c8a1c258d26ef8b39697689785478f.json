{"sha": "96ea5b2cd6c8a1c258d26ef8b39697689785478f", "node_id": "C_kwDOAAsO6NoAKDk2ZWE1YjJjZDZjOGExYzI1OGQyNmVmOGIzOTY5NzY4OTc4NTQ3OGY", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-10-11T22:04:09Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-10-24T20:05:39Z"}, "message": "Fix dogfooding", "tree": {"sha": "d1c61c6fbb7304c5140f56f48681cb4cce856a06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1c61c6fbb7304c5140f56f48681cb4cce856a06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96ea5b2cd6c8a1c258d26ef8b39697689785478f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96ea5b2cd6c8a1c258d26ef8b39697689785478f", "html_url": "https://github.com/rust-lang/rust/commit/96ea5b2cd6c8a1c258d26ef8b39697689785478f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96ea5b2cd6c8a1c258d26ef8b39697689785478f/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "748169deaa3c57e15e3a84bb90e033dddaa64e03", "url": "https://api.github.com/repos/rust-lang/rust/commits/748169deaa3c57e15e3a84bb90e033dddaa64e03", "html_url": "https://github.com/rust-lang/rust/commit/748169deaa3c57e15e3a84bb90e033dddaa64e03"}], "stats": {"total": 21, "additions": 6, "deletions": 15}, "files": [{"sha": "7b5c10db4e1be253329765aec74ede937da6f7f0", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96ea5b2cd6c8a1c258d26ef8b39697689785478f/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ea5b2cd6c8a1c258d26ef8b39697689785478f/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=96ea5b2cd6c8a1c258d26ef8b39697689785478f", "patch": "@@ -274,9 +274,7 @@ impl<'tcx> LateLintPass<'tcx> for Dereferencing<'tcx> {\n         }\n \n         let typeck = cx.typeck_results();\n-        let (kind, sub_expr) = if let Some(x) = try_parse_ref_op(cx.tcx, typeck, expr) {\n-            x\n-        } else {\n+        let Some((kind, sub_expr)) = try_parse_ref_op(cx.tcx, typeck, expr) else {\n             // The whole chain of reference operations has been seen\n             if let Some((state, data)) = self.state.take() {\n                 report(cx, expr, state, data);"}, {"sha": "f01afda72b2c865e52f7dfe3b759b3a1a4f73352", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/96ea5b2cd6c8a1c258d26ef8b39697689785478f/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ea5b2cd6c8a1c258d26ef8b39697689785478f/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=96ea5b2cd6c8a1c258d26ef8b39697689785478f", "patch": "@@ -147,9 +147,8 @@ impl Constant {\n                 _ => None,\n             },\n             (&Self::Vec(ref l), &Self::Vec(ref r)) => {\n-                let cmp_type = match *cmp_type.kind() {\n-                    ty::Array(ty, _) | ty::Slice(ty) => ty,\n-                    _ => return None,\n+                let (ty::Array(cmp_type, _) | ty::Slice(cmp_type)) = *cmp_type.kind() else {\n+                    return None\n                 };\n                 iter::zip(l, r)\n                     .map(|(li, ri)| Self::partial_cmp(tcx, cmp_type, li, ri))\n@@ -401,10 +400,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n         use self::Constant::{Int, F32, F64};\n         match *o {\n             Int(value) => {\n-                let ity = match *ty.kind() {\n-                    ty::Int(ity) => ity,\n-                    _ => return None,\n-                };\n+                let ty::Int(ity) = *ty.kind() else { return None };\n                 // sign extend\n                 let value = sext(self.lcx.tcx, value, ity);\n                 let value = value.checked_neg()?;"}, {"sha": "02b973e5b2785c51ffd442b83c5c98684dd8aa6f", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/96ea5b2cd6c8a1c258d26ef8b39697689785478f/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ea5b2cd6c8a1c258d26ef8b39697689785478f/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=96ea5b2cd6c8a1c258d26ef8b39697689785478f", "patch": "@@ -131,13 +131,10 @@ impl HirEqInterExpr<'_, '_, '_> {\n             ([], None, [], None) => {\n                 // For empty blocks, check to see if the tokens are equal. This will catch the case where a macro\n                 // expanded to nothing, or the cfg attribute was used.\n-                let (left, right) = match (\n+                let (Some(left), Some(right)) = (\n                     snippet_opt(self.inner.cx, left.span),\n                     snippet_opt(self.inner.cx, right.span),\n-                ) {\n-                    (Some(left), Some(right)) => (left, right),\n-                    _ => return true,\n-                };\n+                ) else { return true };\n                 let mut left_pos = 0;\n                 let left = tokenize(&left)\n                     .map(|t| {"}]}