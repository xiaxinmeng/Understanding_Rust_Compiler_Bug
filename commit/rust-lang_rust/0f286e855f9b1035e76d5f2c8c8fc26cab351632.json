{"sha": "0f286e855f9b1035e76d5f2c8c8fc26cab351632", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMjg2ZTg1NWY5YjEwMzVlNzZkNWYyYzhjOGZjMjZjYWIzNTE2MzI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-12-12T01:09:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-12T01:09:24Z"}, "message": "Rollup merge of #67236 - petrochenkov:docerr2, r=matthewjasper\n\nresolve: Always resolve visibilities on impl items\n\nFixes https://github.com/rust-lang/rust/issues/64705.\n\nSimilarly to https://github.com/rust-lang/rust/pull/67106 this was an issue with visitor discipline.\nImpl items were visited as a part of visiting `ast::ItemKind::Impl`, but they should be visit-able in isolation  from their parents as well, because that's how they are visited when they are expanded from macros.\n\nI've checked that all the remaining `resolve_visibility` calls are used correctly.\n\nr? @matthewjasper", "tree": {"sha": "b6cb854632548a4f988f095337420378c60baa65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6cb854632548a4f988f095337420378c60baa65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f286e855f9b1035e76d5f2c8c8fc26cab351632", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd8ZNFCRBK7hj4Ov3rIwAAdHIIAJZkCnH4jHJ/8GmFrVZUGkzS\nyRBJa9RuMLO0Id9oq5YFJQVWqxRU5yt5y+vx5XrpC07UM+1VDKNk3XAjUrIIBvgm\nrj2X2YaUkxlfq0kw3SF/hg+rvboO/ga2T8zB0jLrjGSZtrHH3bXywfZNcRijJ2Jx\ncIwSCg6dlUwqDGDWnJuk2ImY5m5iarm1lgoJ9ZqzuN+4F8McBknS5NT3hSg03LYj\nF2TAwM295SlHpIBnf4xFJKG8T2m4NQ/j2gNYvL7AQ5xptagk6PQcmuJRTS70pD3/\nuvnhkPjTPv/2iBxWB8/lr2yFeaXQQ3WgNsqUV8tkFCdh5nCJbGgQMmSvSlqngBw=\n=7Hyq\n-----END PGP SIGNATURE-----\n", "payload": "tree b6cb854632548a4f988f095337420378c60baa65\nparent 3cf799640fd16d306dd72c97d9e6cf84932b34b7\nparent 914c9aa78d7d43d268690e2cf1ae634795cd29aa\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1576112964 +0900\ncommitter GitHub <noreply@github.com> 1576112964 +0900\n\nRollup merge of #67236 - petrochenkov:docerr2, r=matthewjasper\n\nresolve: Always resolve visibilities on impl items\n\nFixes https://github.com/rust-lang/rust/issues/64705.\n\nSimilarly to https://github.com/rust-lang/rust/pull/67106 this was an issue with visitor discipline.\nImpl items were visited as a part of visiting `ast::ItemKind::Impl`, but they should be visit-able in isolation  from their parents as well, because that's how they are visited when they are expanded from macros.\n\nI've checked that all the remaining `resolve_visibility` calls are used correctly.\n\nr? @matthewjasper\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f286e855f9b1035e76d5f2c8c8fc26cab351632", "html_url": "https://github.com/rust-lang/rust/commit/0f286e855f9b1035e76d5f2c8c8fc26cab351632", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f286e855f9b1035e76d5f2c8c8fc26cab351632/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cf799640fd16d306dd72c97d9e6cf84932b34b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cf799640fd16d306dd72c97d9e6cf84932b34b7", "html_url": "https://github.com/rust-lang/rust/commit/3cf799640fd16d306dd72c97d9e6cf84932b34b7"}, {"sha": "914c9aa78d7d43d268690e2cf1ae634795cd29aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/914c9aa78d7d43d268690e2cf1ae634795cd29aa", "html_url": "https://github.com/rust-lang/rust/commit/914c9aa78d7d43d268690e2cf1ae634795cd29aa"}], "stats": {"total": 58, "additions": 46, "deletions": 12}, "files": [{"sha": "e2578d67e730cea82ff5bf1d4babc3c93d8acb7b", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0f286e855f9b1035e76d5f2c8c8fc26cab351632/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f286e855f9b1035e76d5f2c8c8fc26cab351632/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=0f286e855f9b1035e76d5f2c8c8fc26cab351632", "patch": "@@ -647,8 +647,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 self.r.define(parent, ident, TypeNS, imported_binding);\n             }\n \n-            ItemKind::GlobalAsm(..) => {}\n-\n             ItemKind::Mod(..) if ident.name == kw::Invalid => {} // Crate root\n \n             ItemKind::Mod(..) => {\n@@ -667,9 +665,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 self.parent_scope.module = module;\n             }\n \n-            // Handled in `rustc_metadata::{native_libs,link_args}`\n-            ItemKind::ForeignMod(..) => {}\n-\n             // These items live in the value namespace.\n             ItemKind::Static(..) => {\n                 let res = Res::Def(DefKind::Static, self.r.definitions.local_def_id(item.id));\n@@ -765,12 +760,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 self.insert_field_names_local(def_id, vdata);\n             }\n \n-            ItemKind::Impl(.., ref impl_items) => {\n-                for impl_item in impl_items {\n-                    self.resolve_visibility(&impl_item.vis);\n-                }\n-            }\n-\n             ItemKind::Trait(..) => {\n                 let def_id = self.r.definitions.local_def_id(item.id);\n \n@@ -785,6 +774,9 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 self.parent_scope.module = module;\n             }\n \n+            // These items do not add names to modules.\n+            ItemKind::Impl(..) | ItemKind::ForeignMod(..) | ItemKind::GlobalAsm(..) => {}\n+\n             ItemKind::MacroDef(..) | ItemKind::Mac(_) => unreachable!(),\n         }\n     }\n@@ -1118,7 +1110,6 @@ macro_rules! method {\n }\n \n impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n-    method!(visit_impl_item: ast::ImplItem, ast::ImplItemKind::Macro, walk_impl_item);\n     method!(visit_expr:      ast::Expr,     ast::ExprKind::Mac,       walk_expr);\n     method!(visit_pat:       ast::Pat,      ast::PatKind::Mac,        walk_pat);\n     method!(visit_ty:        ast::Ty,       ast::TyKind::Mac,         walk_ty);\n@@ -1202,6 +1193,15 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         visit::walk_trait_item(self, item);\n     }\n \n+    fn visit_impl_item(&mut self, item: &'b ast::ImplItem) {\n+        if let ast::ImplItemKind::Macro(..) = item.kind {\n+            self.visit_invoc(item.id);\n+        } else {\n+            self.resolve_visibility(&item.vis);\n+            visit::walk_impl_item(self, item);\n+        }\n+    }\n+\n     fn visit_token(&mut self, t: Token) {\n         if let token::Interpolated(nt) = t.kind {\n             if let token::NtExpr(ref expr) = *nt {"}, {"sha": "9b4fe498239b6b32500896f78dc8ceeb3c64062b", "filename": "src/test/ui/resolve/impl-items-vis-unresolved.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0f286e855f9b1035e76d5f2c8c8fc26cab351632/src%2Ftest%2Fui%2Fresolve%2Fimpl-items-vis-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f286e855f9b1035e76d5f2c8c8fc26cab351632/src%2Ftest%2Fui%2Fresolve%2Fimpl-items-vis-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fimpl-items-vis-unresolved.rs?ref=0f286e855f9b1035e76d5f2c8c8fc26cab351632", "patch": "@@ -0,0 +1,25 @@\n+// Visibilities on impl items expanded from macros are resolved (issue #64705).\n+\n+macro_rules! perftools_inline {\n+    ($($item:tt)*) => (\n+        $($item)*\n+    );\n+}\n+\n+mod state {\n+    pub struct RawFloatState;\n+    impl RawFloatState {\n+        perftools_inline! {\n+            pub(super) fn new() {} // OK\n+        }\n+    }\n+}\n+\n+pub struct RawFloatState;\n+impl RawFloatState {\n+    perftools_inline! {\n+        pub(super) fn new() {} //~ ERROR failed to resolve: there are too many initial `super`s\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "8e285e53124007009761f5dde046d9d752b5d651", "filename": "src/test/ui/resolve/impl-items-vis-unresolved.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0f286e855f9b1035e76d5f2c8c8fc26cab351632/src%2Ftest%2Fui%2Fresolve%2Fimpl-items-vis-unresolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f286e855f9b1035e76d5f2c8c8fc26cab351632/src%2Ftest%2Fui%2Fresolve%2Fimpl-items-vis-unresolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fimpl-items-vis-unresolved.stderr?ref=0f286e855f9b1035e76d5f2c8c8fc26cab351632", "patch": "@@ -0,0 +1,9 @@\n+error[E0433]: failed to resolve: there are too many initial `super`s.\n+  --> $DIR/impl-items-vis-unresolved.rs:21:13\n+   |\n+LL |         pub(super) fn new() {}\n+   |             ^^^^^ there are too many initial `super`s.\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}]}