{"sha": "50481f55030f02543e1b3b6ae008d77b1cef3e98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNDgxZjU1MDMwZjAyNTQzZTFiM2I2YWUwMDhkNzdiMWNlZjNlOTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-20T07:51:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-20T07:51:32Z"}, "message": "auto merge of #15784 : dotdash/rust/unreach, r=luqmana\n\n`call_visit_glue` is only ever called from trans_intrinsic, and the\r\nblock won't be unreachable there. Also, the comment doesn't make sense\r\nanymore. When the code was introduced in 38fee9526a the function was\r\nalso responsible for the cleanup glue, which is no longer the case.\r\n\r\nWhile we're at it, also fixed the debug message to output the right\r\nfunction name.", "tree": {"sha": "68d5379ab9d40a057f50cb5bddbfa1ad769dd869", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68d5379ab9d40a057f50cb5bddbfa1ad769dd869"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50481f55030f02543e1b3b6ae008d77b1cef3e98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50481f55030f02543e1b3b6ae008d77b1cef3e98", "html_url": "https://github.com/rust-lang/rust/commit/50481f55030f02543e1b3b6ae008d77b1cef3e98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50481f55030f02543e1b3b6ae008d77b1cef3e98/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "320dbc18d89537b306226b74c3daa452ab828751", "url": "https://api.github.com/repos/rust-lang/rust/commits/320dbc18d89537b306226b74c3daa452ab828751", "html_url": "https://github.com/rust-lang/rust/commit/320dbc18d89537b306226b74c3daa452ab828751"}, {"sha": "d368ffdb26144fd1f451d3d8ba4344b0a8e82f99", "url": "https://api.github.com/repos/rust-lang/rust/commits/d368ffdb26144fd1f451d3d8ba4344b0a8e82f99", "html_url": "https://github.com/rust-lang/rust/commit/d368ffdb26144fd1f451d3d8ba4344b0a8e82f99"}], "stats": {"total": 33, "additions": 6, "deletions": 27}, "files": [{"sha": "7afba95a98b577a267c72bc0977fca1a13741437", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/50481f55030f02543e1b3b6ae008d77b1cef3e98/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50481f55030f02543e1b3b6ae008d77b1cef3e98/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=50481f55030f02543e1b3b6ae008d77b1cef3e98", "patch": "@@ -178,33 +178,12 @@ pub fn lazily_emit_visit_glue(ccx: &CrateContext, ti: &tydesc_info) -> ValueRef\n }\n \n // See [Note-arg-mode]\n-pub fn call_visit_glue(bcx: &Block, v: ValueRef, tydesc: ValueRef,\n-                       static_ti: Option<&tydesc_info>) {\n-    let _icx = push_ctxt(\"call_tydesc_glue_full\");\n-    let ccx = bcx.ccx();\n-    // NB: Don't short-circuit even if this block is unreachable because\n-    // GC-based cleanup needs to the see that the roots are live.\n-    if bcx.unreachable.get() && !ccx.sess().no_landing_pads() { return; }\n-\n-    let static_glue_fn = static_ti.map(|sti| lazily_emit_visit_glue(ccx, sti));\n-\n-    // When static type info is available, avoid casting to a generic pointer.\n-    let llrawptr = if static_glue_fn.is_none() {\n-        PointerCast(bcx, v, Type::i8p(ccx))\n-    } else {\n-        v\n-    };\n+pub fn call_visit_glue(bcx: &Block, v: ValueRef, tydesc: ValueRef) {\n+    let _icx = push_ctxt(\"call_visit_glue\");\n \n-    let llfn = {\n-        match static_glue_fn {\n-            None => {\n-                // Select out the glue function to call from the tydesc\n-                let llfnptr = GEPi(bcx, tydesc, [0u, abi::tydesc_field_visit_glue]);\n-                Load(bcx, llfnptr)\n-            }\n-            Some(sgf) => sgf\n-        }\n-    };\n+    // Select the glue function to call from the tydesc\n+    let llfn = Load(bcx, GEPi(bcx, tydesc, [0u, abi::tydesc_field_visit_glue]));\n+    let llrawptr = PointerCast(bcx, v, Type::i8p(bcx.ccx()));\n \n     Call(bcx, llfn, [llrawptr], []);\n }"}, {"sha": "bf8893904caba29899bfe76e2760bc6e375d68df", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50481f55030f02543e1b3b6ae008d77b1cef3e98/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50481f55030f02543e1b3b6ae008d77b1cef3e98/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=50481f55030f02543e1b3b6ae008d77b1cef3e98", "patch": "@@ -296,7 +296,7 @@ pub fn trans_intrinsic_call<'a>(mut bcx: &'a Block<'a>, node: ast::NodeId,\n             let td = *llargs.get(0);\n             let visitor = *llargs.get(1);\n             let td = PointerCast(bcx, td, ccx.tydesc_type().ptr_to());\n-            glue::call_visit_glue(bcx, visitor, td, None);\n+            glue::call_visit_glue(bcx, visitor, td);\n             C_nil(ccx)\n         }\n         (_, \"offset\") => {"}]}