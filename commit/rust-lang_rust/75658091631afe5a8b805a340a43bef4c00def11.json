{"sha": "75658091631afe5a8b805a340a43bef4c00def11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NjU4MDkxNjMxYWZlNWE4YjgwNWEzNDBhNDNiZWY0YzAwZGVmMTE=", "commit": {"author": {"name": "Ashley Mannix", "email": "kodraus@hey.com", "date": "2020-11-14T23:35:04Z"}, "committer": {"name": "Ashley Mannix", "email": "kodraus@hey.com", "date": "2020-11-14T23:35:04Z"}, "message": "add a canary test for complex repr(simd)", "tree": {"sha": "c56711cdefcacf3f515e2fa1d017a2d5277ae40e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c56711cdefcacf3f515e2fa1d017a2d5277ae40e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75658091631afe5a8b805a340a43bef4c00def11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75658091631afe5a8b805a340a43bef4c00def11", "html_url": "https://github.com/rust-lang/rust/commit/75658091631afe5a8b805a340a43bef4c00def11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75658091631afe5a8b805a340a43bef4c00def11/comments", "author": {"login": "KodrAus", "id": 6721458, "node_id": "MDQ6VXNlcjY3MjE0NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6721458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KodrAus", "html_url": "https://github.com/KodrAus", "followers_url": "https://api.github.com/users/KodrAus/followers", "following_url": "https://api.github.com/users/KodrAus/following{/other_user}", "gists_url": "https://api.github.com/users/KodrAus/gists{/gist_id}", "starred_url": "https://api.github.com/users/KodrAus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KodrAus/subscriptions", "organizations_url": "https://api.github.com/users/KodrAus/orgs", "repos_url": "https://api.github.com/users/KodrAus/repos", "events_url": "https://api.github.com/users/KodrAus/events{/privacy}", "received_events_url": "https://api.github.com/users/KodrAus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KodrAus", "id": 6721458, "node_id": "MDQ6VXNlcjY3MjE0NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6721458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KodrAus", "html_url": "https://github.com/KodrAus", "followers_url": "https://api.github.com/users/KodrAus/followers", "following_url": "https://api.github.com/users/KodrAus/following{/other_user}", "gists_url": "https://api.github.com/users/KodrAus/gists{/gist_id}", "starred_url": "https://api.github.com/users/KodrAus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KodrAus/subscriptions", "organizations_url": "https://api.github.com/users/KodrAus/orgs", "repos_url": "https://api.github.com/users/KodrAus/repos", "events_url": "https://api.github.com/users/KodrAus/events{/privacy}", "received_events_url": "https://api.github.com/users/KodrAus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74f2941a8ebf32a6864ea4596c755a9f65e14f42", "url": "https://api.github.com/repos/rust-lang/rust/commits/74f2941a8ebf32a6864ea4596c755a9f65e14f42", "html_url": "https://github.com/rust-lang/rust/commit/74f2941a8ebf32a6864ea4596c755a9f65e14f42"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "5d57ed9e2f8320651794960be38290be361ae1e8", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75658091631afe5a8b805a340a43bef4c00def11/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75658091631afe5a8b805a340a43bef4c00def11/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=75658091631afe5a8b805a340a43bef4c00def11", "patch": "@@ -1966,7 +1966,13 @@ impl<'tcx> TyS<'tcx> {\n                 let f0_ty = variant.fields[0].ty(tcx, substs);\n \n                 match f0_ty.kind() {\n-                    Array(f0_elem_ty, f0_len) => (f0_len.eval_usize(tcx, ParamEnv::empty()) as u64, f0_elem_ty),\n+                    Array(f0_elem_ty, f0_len) => {\n+                        // FIXME(repr_simd): https://github.com/rust-lang/rust/pull/78863#discussion_r522784112\n+                        // The way we evaluate the `N` in `[T; N]` here only works since we use\n+                        // `simd_size_and_type` post-monomorphization. It will probably start to ICE\n+                        // if we use it in generic code. See the `simd-array-trait` ui test.\n+                        (f0_len.eval_usize(tcx, ParamEnv::empty()) as u64, f0_elem_ty)\n+                    }\n                     _ => (variant.fields.len() as u64, f0_ty),\n                 }\n             }"}, {"sha": "6219e7ca83b169fa1ee107b30440b6ca7556cb4b", "filename": "src/test/ui/simd/simd-array-trait.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/75658091631afe5a8b805a340a43bef4c00def11/src%2Ftest%2Fui%2Fsimd%2Fsimd-array-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75658091631afe5a8b805a340a43bef4c00def11/src%2Ftest%2Fui%2Fsimd%2Fsimd-array-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-array-trait.rs?ref=75658091631afe5a8b805a340a43bef4c00def11", "patch": "@@ -0,0 +1,40 @@\n+// Figuring out the size of a vector type that depends on traits doesn't ICE\n+\n+#![allow(dead_code)]\n+\n+// pretty-expanded FIXME #23616\n+\n+#![feature(repr_simd, platform_intrinsics, const_generics)]\n+#![allow(non_camel_case_types, incomplete_features)]\n+\n+pub trait Simd {\n+    type Lane: Clone + Copy;\n+    const SIZE: usize;\n+}\n+\n+pub struct i32x4;\n+impl Simd for i32x4 {\n+    type Lane = i32;\n+    const SIZE: usize = 4;\n+}\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone)]\n+pub struct T<S: Simd>([S::Lane; S::SIZE]); //~ ERROR constant expression depends on a generic parameter\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_insert<T, E>(x: T, idx: u32, y: E) -> T;\n+    fn simd_extract<T, E>(x: T, idx: u32) -> E;\n+}\n+\n+pub fn main() {\n+    let mut t = T::<i32x4>([0; 4]);\n+    unsafe {\n+        for i in 0_i32..4 {\n+            t = simd_insert(t, i as u32, i);\n+        }\n+        for i in 0_i32..4 {\n+            assert_eq!(i, simd_extract(t, i as u32));\n+        }\n+    }\n+}"}, {"sha": "c100e020c5490a28882efa97cee66eb4d130edff", "filename": "src/test/ui/simd/simd-array-trait.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75658091631afe5a8b805a340a43bef4c00def11/src%2Ftest%2Fui%2Fsimd%2Fsimd-array-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75658091631afe5a8b805a340a43bef4c00def11/src%2Ftest%2Fui%2Fsimd%2Fsimd-array-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-array-trait.stderr?ref=75658091631afe5a8b805a340a43bef4c00def11", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/simd-array-trait.rs:23:23\n+   |\n+LL | pub struct T<S: Simd>([S::Lane; S::SIZE]);\n+   |                       ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}]}