{"sha": "f74fe894fc54ebfeaec03f4df6766489c65fa8c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NGZlODk0ZmM1NGViZmVhZWMwM2Y0ZGY2NzY2NDg5YzY1ZmE4YzU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-11-24T20:49:31Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-11-24T20:52:27Z"}, "message": "[libstd] getopts, now with fewer copies\n\nChange the opt_ functions in getopts to take a reference to a\nMatches, instead of taking a Matches by-value, as suggested in", "tree": {"sha": "7c3a6d8ba5bdf917742d6c415e8f5dc5b67c8fa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c3a6d8ba5bdf917742d6c415e8f5dc5b67c8fa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f74fe894fc54ebfeaec03f4df6766489c65fa8c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f74fe894fc54ebfeaec03f4df6766489c65fa8c5", "html_url": "https://github.com/rust-lang/rust/commit/f74fe894fc54ebfeaec03f4df6766489c65fa8c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e454a47bf2272abfad9987a7be876f0563391e3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e454a47bf2272abfad9987a7be876f0563391e3d", "html_url": "https://github.com/rust-lang/rust/commit/e454a47bf2272abfad9987a7be876f0563391e3d"}], "stats": {"total": 121, "additions": 68, "deletions": 53}, "files": [{"sha": "7ee297f3ffcf816e78c9e31713e1fe4953d39894", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=f74fe894fc54ebfeaec03f4df6766489c65fa8c5", "patch": "@@ -35,12 +35,12 @@ fn parse_config(args: ~[~str]) -> config {\n     assert (vec::is_not_empty(args));\n     let args_ = vec::tail(args);\n     let matches =\n-        match getopts::getopts(args_, opts) {\n+        &match getopts::getopts(args_, opts) {\n           Ok(m) => m,\n           Err(f) => fail getopts::fail_str(f)\n         };\n \n-    fn opt_path(m: getopts::Matches, nm: ~str) -> Path {\n+    fn opt_path(m: &getopts::Matches, nm: ~str) -> Path {\n         Path(getopts::opt_str(m, nm))\n     }\n "}, {"sha": "4ccabdae9e478635ab8ad54d33324e5c8b39f2c9", "filename": "src/libcargo/cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/src%2Flibcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/src%2Flibcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fcargo.rs?ref=f74fe894fc54ebfeaec03f4df6766489c65fa8c5", "patch": "@@ -661,7 +661,7 @@ fn load_source_packages(c: &Cargo, src: @Source) {\n }\n \n fn build_cargo_options(argv: ~[~str]) -> Options {\n-    let matches = match getopts::getopts(argv, opts()) {\n+    let matches = &match getopts::getopts(argv, opts()) {\n         result::Ok(m) => m,\n         result::Err(f) => {\n             fail fmt!(\"%s\", getopts::fail_str(f));"}, {"sha": "3d27c75f548ea1d827fbb97ff6fc094ed5386183", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=f74fe894fc54ebfeaec03f4df6766489c65fa8c5", "patch": "@@ -458,7 +458,7 @@ fn host_triple() -> ~str {\n }\n \n fn build_session_options(binary: ~str,\n-                         matches: getopts::Matches,\n+                         matches: &getopts::Matches,\n                          demitter: diagnostic::emitter) -> @session::options {\n     let crate_type = if opt_present(matches, ~\"lib\") {\n         session::lib_crate\n@@ -807,7 +807,7 @@ mod test {\n     #[test]\n     fn test_switch_implies_cfg_test() {\n         let matches =\n-            match getopts(~[~\"--test\"], optgroups()) {\n+            &match getopts(~[~\"--test\"], optgroups()) {\n               Ok(m) => m,\n               Err(f) => fail ~\"test_switch_implies_cfg_test: \" +\n                              getopts::fail_str(f)\n@@ -824,7 +824,7 @@ mod test {\n     #[test]\n     fn test_switch_implies_cfg_test_unless_cfg_test() {\n         let matches =\n-            match getopts(~[~\"--test\", ~\"--cfg=test\"], optgroups()) {\n+            &match getopts(~[~\"--test\", ~\"--cfg=test\"], optgroups()) {\n               Ok(m) => m,\n               Err(f) => {\n                 fail ~\"test_switch_implies_cfg_test_unless_cfg_test: \" +"}, {"sha": "6ffc509f6a844da62daa2b64a68f4f601aa5c774", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=f74fe894fc54ebfeaec03f4df6766489c65fa8c5", "patch": "@@ -34,7 +34,7 @@ struct RH {\n }\n \n fn setup_env(test_name: &str, source_string: &str) -> Env {\n-    let matches = getopts(~[~\"-Z\", ~\"verbose\"], optgroups()).get();\n+    let matches = &getopts(~[~\"-Z\", ~\"verbose\"], optgroups()).get();\n     let sessopts = build_session_options(~\"rustc\", matches, diagnostic::emit);\n     let sess = build_session(sessopts, diagnostic::emit);\n     let cfg = build_configuration(sess, ~\"whatever\", str_input(~\"\"));"}, {"sha": "8f2b83a8c1c1ad53cc5aba1853857e9fbd38b914", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=f74fe894fc54ebfeaec03f4df6766489c65fa8c5", "patch": "@@ -85,7 +85,7 @@ fn run_compiler(args: &~[~str], demitter: diagnostic::emitter) {\n     if args.is_empty() { usage(binary); return; }\n \n     let matches =\n-        match getopts::groups::getopts(args, optgroups()) {\n+        &match getopts::groups::getopts(args, optgroups()) {\n           Ok(m) => m,\n           Err(f) => {\n             early_error(demitter, getopts::fail_str(f))"}, {"sha": "cf761b9b3b7652177c09645e9249f20c8c108e67", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=f74fe894fc54ebfeaec03f4df6766489c65fa8c5", "patch": "@@ -124,14 +124,14 @@ fn parse_config_(\n     args: &[~str],\n     +program_output: ProgramOutput\n ) -> Result<Config, ~str> {\n-    let args = vec::tail(args);\n+    let args = args.tail();\n     let opts = vec::unzip(opts()).first();\n     match getopts::getopts(args, opts) {\n         result::Ok(matches) => {\n-            if vec::len(matches.free) == 1u {\n+            if matches.free.len() == 1 {\n                 let input_crate = Path(vec::head(matches.free));\n-                config_from_opts(&input_crate, matches, move program_output)\n-            } else if vec::is_empty(matches.free) {\n+                config_from_opts(&input_crate, &matches, move program_output)\n+            } else if matches.free.is_empty() {\n                 result::Err(~\"no crates specified\")\n             } else {\n                 result::Err(~\"multiple crates specified\")\n@@ -145,7 +145,7 @@ fn parse_config_(\n \n fn config_from_opts(\n     input_crate: &Path,\n-    +matches: getopts::Matches,\n+    matches: &getopts::Matches,\n     +program_output: ProgramOutput\n ) -> Result<Config, ~str> {\n "}, {"sha": "897be19ee5096bccd432930bf5b546745f030e84", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=f74fe894fc54ebfeaec03f4df6766489c65fa8c5", "patch": "@@ -518,7 +518,7 @@ pub fn getopts(args: &[~str], opts: &[Opt]) -> Result unsafe {\n                free: free});\n }\n \n-fn opt_vals(mm: Matches, nm: &str) -> ~[Optval] {\n+fn opt_vals(mm: &Matches, nm: &str) -> ~[Optval] {\n     return match find_opt(mm.opts, mkname(nm)) {\n       Some(id) => mm.vals[id],\n       None => {\n@@ -528,27 +528,27 @@ fn opt_vals(mm: Matches, nm: &str) -> ~[Optval] {\n     };\n }\n \n-fn opt_val(mm: Matches, nm: &str) -> Optval { return opt_vals(mm, nm)[0]; }\n+fn opt_val(mm: &Matches, nm: &str) -> Optval { return opt_vals(mm, nm)[0]; }\n \n /// Returns true if an option was matched\n-pub fn opt_present(mm: Matches, nm: &str) -> bool {\n-    return vec::len::<Optval>(opt_vals(mm, nm)) > 0u;\n+pub fn opt_present(mm: &Matches, nm: &str) -> bool {\n+    opt_vals(mm, nm).is_not_empty()\n }\n \n /// Returns the number of times an option was matched\n-pub fn opt_count(mm: Matches, nm: &str) -> uint {\n-    return vec::len::<Optval>(opt_vals(mm, nm));\n+pub fn opt_count(mm: &Matches, nm: &str) -> uint {\n+    opt_vals(mm, nm).len()\n }\n \n /// Returns true if any of several options were matched\n-pub fn opts_present(mm: Matches, names: &[~str]) -> bool {\n+pub fn opts_present(mm: &Matches, names: &[~str]) -> bool {\n     for vec::each(names) |nm| {\n         match find_opt(mm.opts, mkname(*nm)) {\n           Some(_) => return true,\n           None    => ()\n         }\n     }\n-    return false;\n+    false\n }\n \n \n@@ -558,7 +558,7 @@ pub fn opts_present(mm: Matches, names: &[~str]) -> bool {\n  * Fails if the option was not matched or if the match did not take an\n  * argument\n  */\n-pub fn opt_str(mm: Matches, nm: &str) -> ~str {\n+pub fn opt_str(mm: &Matches, nm: &str) -> ~str {\n     return match opt_val(mm, nm) { Val(copy s) => s, _ => fail };\n }\n \n@@ -568,7 +568,7 @@ pub fn opt_str(mm: Matches, nm: &str) -> ~str {\n  * Fails if the no option was provided from the given list, or if the no such\n  * option took an argument\n  */\n-pub fn opts_str(mm: Matches, names: &[~str]) -> ~str {\n+pub fn opts_str(mm: &Matches, names: &[~str]) -> ~str {\n     for vec::each(names) |nm| {\n         match opt_val(mm, *nm) {\n           Val(copy s) => return s,\n@@ -585,7 +585,7 @@ pub fn opts_str(mm: Matches, names: &[~str]) -> ~str {\n  *\n  * Used when an option accepts multiple values.\n  */\n-pub fn opt_strs(mm: Matches, nm: &str) -> ~[~str] {\n+pub fn opt_strs(mm: &Matches, nm: &str) -> ~[~str] {\n     let mut acc: ~[~str] = ~[];\n     for vec::each(opt_vals(mm, nm)) |v| {\n         match *v { Val(copy s) => acc.push(s), _ => () }\n@@ -594,7 +594,7 @@ pub fn opt_strs(mm: Matches, nm: &str) -> ~[~str] {\n }\n \n /// Returns the string argument supplied to a matching option or none\n-pub fn opt_maybe_str(mm: Matches, nm: &str) -> Option<~str> {\n+pub fn opt_maybe_str(mm: &Matches, nm: &str) -> Option<~str> {\n     let vals = opt_vals(mm, nm);\n     if vec::len::<Optval>(vals) == 0u { return None::<~str>; }\n     return match vals[0] {\n@@ -611,7 +611,7 @@ pub fn opt_maybe_str(mm: Matches, nm: &str) -> Option<~str> {\n  * present but no argument was provided, and the argument if the option was\n  * present and an argument was provided.\n  */\n-pub fn opt_default(mm: Matches, nm: &str, def: &str) -> Option<~str> {\n+pub fn opt_default(mm: &Matches, nm: &str, def: &str) -> Option<~str> {\n     let vals = opt_vals(mm, nm);\n     if vec::len::<Optval>(vals) == 0u { return None::<~str>; }\n     return match vals[0] { Val(copy s) => Some::<~str>(s),\n@@ -870,7 +870,7 @@ mod tests {\n         let opts = ~[reqopt(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => {\n+          Ok(ref m) => {\n             assert (opt_present(m, ~\"test\"));\n             assert (opt_str(m, ~\"test\") == ~\"20\");\n           }\n@@ -917,7 +917,7 @@ mod tests {\n         let opts = ~[reqopt(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => {\n+          Ok(ref m) => {\n             assert (opt_present(m, ~\"t\"));\n             assert (opt_str(m, ~\"t\") == ~\"20\");\n           }\n@@ -966,7 +966,7 @@ mod tests {\n         let opts = ~[optopt(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => {\n+          Ok(ref m) => {\n             assert (opt_present(m, ~\"test\"));\n             assert (opt_str(m, ~\"test\") == ~\"20\");\n           }\n@@ -980,7 +980,7 @@ mod tests {\n         let opts = ~[optopt(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => assert (!opt_present(m, ~\"test\")),\n+          Ok(ref m) => assert (!opt_present(m, ~\"test\")),\n           _ => fail\n         }\n     }\n@@ -1013,7 +1013,7 @@ mod tests {\n         let opts = ~[optopt(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => {\n+          Ok(ref m) => {\n             assert (opt_present(m, ~\"t\"));\n             assert (opt_str(m, ~\"t\") == ~\"20\");\n           }\n@@ -1027,7 +1027,7 @@ mod tests {\n         let opts = ~[optopt(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => assert (!opt_present(m, ~\"t\")),\n+          Ok(ref m) => assert (!opt_present(m, ~\"t\")),\n           _ => fail\n         }\n     }\n@@ -1062,7 +1062,7 @@ mod tests {\n         let opts = ~[optflag(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => assert (opt_present(m, ~\"test\")),\n+          Ok(ref m) => assert (opt_present(m, ~\"test\")),\n           _ => fail\n         }\n     }\n@@ -1073,7 +1073,7 @@ mod tests {\n         let opts = ~[optflag(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => assert (!opt_present(m, ~\"test\")),\n+          Ok(ref m) => assert (!opt_present(m, ~\"test\")),\n           _ => fail\n         }\n     }\n@@ -1109,7 +1109,7 @@ mod tests {\n         let opts = ~[optflag(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => assert (opt_present(m, ~\"t\")),\n+          Ok(ref m) => assert (opt_present(m, ~\"t\")),\n           _ => fail\n         }\n     }\n@@ -1120,7 +1120,7 @@ mod tests {\n         let opts = ~[optflag(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => assert (!opt_present(m, ~\"t\")),\n+          Ok(ref m) => assert (!opt_present(m, ~\"t\")),\n           _ => fail\n         }\n     }\n@@ -1158,7 +1158,7 @@ mod tests {\n         let opts = ~[optflagmulti(~\"v\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => {\n+          Ok(ref m) => {\n             assert (opt_count(m, ~\"v\") == 1);\n           }\n           _ => fail\n@@ -1171,7 +1171,7 @@ mod tests {\n         let opts = ~[optflagmulti(~\"v\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => {\n+          Ok(ref m) => {\n             assert (opt_count(m, ~\"v\") == 2);\n           }\n           _ => fail\n@@ -1184,7 +1184,7 @@ mod tests {\n         let opts = ~[optflagmulti(~\"v\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => {\n+          Ok(ref m) => {\n             assert (opt_count(m, ~\"v\") == 2);\n           }\n           _ => fail\n@@ -1197,7 +1197,7 @@ mod tests {\n         let opts = ~[optflagmulti(~\"verbose\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => {\n+          Ok(ref m) => {\n             assert (opt_count(m, ~\"verbose\") == 1);\n           }\n           _ => fail\n@@ -1210,7 +1210,7 @@ mod tests {\n         let opts = ~[optflagmulti(~\"verbose\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => {\n+          Ok(ref m) => {\n             assert (opt_count(m, ~\"verbose\") == 2);\n           }\n           _ => fail\n@@ -1224,7 +1224,7 @@ mod tests {\n         let opts = ~[optmulti(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => {\n+          Ok(ref m) => {\n             assert (opt_present(m, ~\"test\"));\n             assert (opt_str(m, ~\"test\") == ~\"20\");\n           }\n@@ -1238,7 +1238,7 @@ mod tests {\n         let opts = ~[optmulti(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => assert (!opt_present(m, ~\"test\")),\n+          Ok(ref m) => assert (!opt_present(m, ~\"test\")),\n           _ => fail\n         }\n     }\n@@ -1260,7 +1260,7 @@ mod tests {\n         let opts = ~[optmulti(~\"test\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => {\n+          Ok(ref m) => {\n               assert (opt_present(m, ~\"test\"));\n               assert (opt_str(m, ~\"test\") == ~\"20\");\n               let pair = opt_strs(m, ~\"test\");\n@@ -1277,7 +1277,7 @@ mod tests {\n         let opts = ~[optmulti(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => {\n+          Ok(ref m) => {\n             assert (opt_present(m, ~\"t\"));\n             assert (opt_str(m, ~\"t\") == ~\"20\");\n           }\n@@ -1291,7 +1291,7 @@ mod tests {\n         let opts = ~[optmulti(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => assert (!opt_present(m, ~\"t\")),\n+          Ok(ref m) => assert (!opt_present(m, ~\"t\")),\n           _ => fail\n         }\n     }\n@@ -1313,7 +1313,7 @@ mod tests {\n         let opts = ~[optmulti(~\"t\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => {\n+          Ok(ref m) => {\n             assert (opt_present(m, ~\"t\"));\n             assert (opt_str(m, ~\"t\") == ~\"20\");\n             let pair = opt_strs(m, ~\"t\");\n@@ -1358,7 +1358,7 @@ mod tests {\n              optopt(~\"notpresent\")];\n         let rs = getopts(args, opts);\n         match rs {\n-          Ok(copy m) => {\n+          Ok(ref m) => {\n             assert (m.free[0] == ~\"prog\");\n             assert (m.free[1] == ~\"free1\");\n             assert (opt_str(m, ~\"s\") == ~\"20\");\n@@ -1382,7 +1382,7 @@ mod tests {\n     fn test_multi() {\n         let args = ~[~\"-e\", ~\"foo\", ~\"--encrypt\", ~\"foo\"];\n         let opts = ~[optopt(~\"e\"), optopt(~\"encrypt\")];\n-        let matches = match getopts(args, opts) {\n+        let matches = &match getopts(args, opts) {\n           result::Ok(move m) => m,\n           result::Err(_) => fail\n         };\n@@ -1403,7 +1403,7 @@ mod tests {\n     fn test_nospace() {\n         let args = ~[~\"-Lfoo\"];\n         let opts = ~[optmulti(~\"L\")];\n-        let matches = match getopts(args, opts) {\n+        let matches = &match getopts(args, opts) {\n           result::Ok(move m) => m,\n           result::Err(_) => fail\n         };"}, {"sha": "fb3e057392dacb7d28af1ea3c14a0da3bd0ed17e", "filename": "src/libstd/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=f74fe894fc54ebfeaec03f4df6766489c65fa8c5", "patch": "@@ -73,8 +73,8 @@ fn parse_opts(args: &[~str]) -> OptRes {\n             option::Some(matches.free[0])\n         } else { option::None };\n \n-    let run_ignored = getopts::opt_present(matches, ~\"ignored\");\n-    let logfile = getopts::opt_maybe_str(matches, ~\"logfile\");\n+    let run_ignored = getopts::opt_present(&matches, ~\"ignored\");\n+    let logfile = getopts::opt_maybe_str(&matches, ~\"logfile\");\n \n     let test_opts = {filter: filter, run_ignored: run_ignored,\n                      logfile: logfile};"}, {"sha": "32ab7b6248adb38609b560207c2d0d42d6f8bbb0", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=f74fe894fc54ebfeaec03f4df6766489c65fa8c5", "patch": "@@ -53,7 +53,7 @@ fn parse_opts(argv: ~[~str]) -> config {\n     let opt_args = vec::slice(argv, 1u, vec::len(argv));\n \n     match getopts::getopts(opt_args, opts) {\n-      Ok(m) => { return {stress: getopts::opt_present(m, ~\"stress\")} }\n+      Ok(ref m) => { return {stress: getopts::opt_present(m, ~\"stress\")} }\n       Err(_) => { fail; }\n     }\n }"}, {"sha": "48bc054ad37c13c6c1cc1b7aa9f8575721cda42a", "filename": "src/test/run-pass/getopts_ref.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74fe894fc54ebfeaec03f4df6766489c65fa8c5/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs?ref=f74fe894fc54ebfeaec03f4df6766489c65fa8c5", "patch": "@@ -0,0 +1,15 @@\n+extern mod std;\n+\n+use std::getopts::*;\n+\n+fn main() {\n+    let args = ~[];\n+    let opts = ~[optopt(~\"b\")];\n+\n+    match getopts(args, opts) {\n+        result::Ok(ref m)  =>\n+            assert !opt_present(m, \"b\"),\n+        result::Err(f) => fail fail_str(f)\n+    };\n+\n+}\n\\ No newline at end of file"}]}