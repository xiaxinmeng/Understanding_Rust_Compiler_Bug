{"sha": "eaec8a71322a59eb284cbd5a8d502b6da321df3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZWM4YTcxMzIyYTU5ZWIyODRjYmQ1YThkNTAyYjZkYTMyMWRmM2M=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-03T05:06:03Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-16T04:56:54Z"}, "message": "path2: Write a few paragraphs of module documentation", "tree": {"sha": "da9d0be3f937cc27403930bf8e04a52326c1736c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da9d0be3f937cc27403930bf8e04a52326c1736c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaec8a71322a59eb284cbd5a8d502b6da321df3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaec8a71322a59eb284cbd5a8d502b6da321df3c", "html_url": "https://github.com/rust-lang/rust/commit/eaec8a71322a59eb284cbd5a8d502b6da321df3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaec8a71322a59eb284cbd5a8d502b6da321df3c/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e65d33e9ed3057a6afeaea9bf68519eb758f51ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/e65d33e9ed3057a6afeaea9bf68519eb758f51ab", "html_url": "https://github.com/rust-lang/rust/commit/e65d33e9ed3057a6afeaea9bf68519eb758f51ab"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "41fe31daae9a598ddf7a6eacd29b9c6f5e11b36d", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/eaec8a71322a59eb284cbd5a8d502b6da321df3c/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaec8a71322a59eb284cbd5a8d502b6da321df3c/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=eaec8a71322a59eb284cbd5a8d502b6da321df3c", "patch": "@@ -8,7 +8,60 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Cross-platform file path handling (re-write)\n+/*!\n+\n+Cross-platform path support\n+\n+This module implements support for two flavors of paths. `PosixPath` represents\n+a path on any unix-like system, whereas `WindowsPath` represents a path on\n+Windows. This module also exposes a typedef `Path` which is equal to the\n+appropriate platform-specific path variant.\n+\n+Both `PosixPath` and `WindowsPath` implement a trait `GenericPath`, which\n+contains the set of methods that behave the same for both paths. They each also\n+implement some methods that could not be expressed in `GenericPath`, yet behave\n+identically for both path flavors, such as `::from_str()` or\n+`.component_iter()`.\n+\n+The three main design goals of this module are 1) to avoid unnecessary\n+allocation, 2) to behave the same regardless of which flavor of path is being\n+used, and 3) to support paths that cannot be represented in UTF-8 (as Linux has\n+no restriction on paths beyond disallowing NUL).\n+\n+## Usage\n+\n+Usage of this module is fairly straightforward. Unless writing platform-specific\n+code, `Path` should be used to refer to the platform-native path, and methods\n+used should be restricted to those defined in `GenericPath`, and those methods\n+that are declared identically on both `PosixPath` and `WindowsPath`.\n+\n+Creation of a path is typically done with either `Path::from_str(some_str)` or\n+`Path::from_vec(some_vec)`. This path can be modified with `.push()` and\n+`.pop()` (and other setters). The resulting Path can either be passed to another\n+API that expects a path, or can be turned into a &[u8] with `.as_vec()` or a\n+Option<&str> with `.as_str()`. Similarly, attributes of the path can be queried\n+with methods such as `.filename()`. There are also methods that return a new\n+path instead of modifying the receiver, such as `.join()` or `.dir_path()`.\n+\n+When rendering a path to some form of display, there is a method `.display()`\n+which is compatible with the `format!()` parameter `{}`. This will render the\n+path as a string, replacing all non-utf8 sequences with the Replacement\n+Character (U+FFFD). As such it is not suitable for passing to any API that\n+actually operates on the path; it is only intended for display.\n+\n+## Example\n+\n+```rust\n+let mut path = Path::from_str(\"/tmp/path\");\n+debug2!(\"path: {}\", path.display());\n+path.set_filename_str(\"foo\");\n+path.push_str(\"bar\");\n+debug2!(\"new path: {}\", path.display());\n+let b = std::os::path_exists(&path);\n+debug2!(\"path exists: {}\", b);\n+```\n+\n+*/\n \n use container::Container;\n use c_str::CString;"}]}