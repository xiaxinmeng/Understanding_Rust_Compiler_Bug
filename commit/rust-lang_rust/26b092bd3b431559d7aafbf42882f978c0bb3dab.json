{"sha": "26b092bd3b431559d7aafbf42882f978c0bb3dab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2YjA5MmJkM2I0MzE1NTlkN2FhZmJmNDI4ODJmOTc4YzBiYjNkYWI=", "commit": {"author": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-06T18:44:26Z"}, "committer": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-08T17:34:53Z"}, "message": "Resolve textual scoped macros inside item", "tree": {"sha": "194c41ab1320730d7f08823127404056e235cf2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/194c41ab1320730d7f08823127404056e235cf2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26b092bd3b431559d7aafbf42882f978c0bb3dab", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl11O70ACgkQztOS3gxI\nPQBZiw//efkIGhsbWLju7wSk+/Eza3gbBBMl3TvD2U+5HOYHY0/BBXebSgbvHasR\neYWVNGgvlJ/kC91h22/JLKb0doMBGmLW3gy6ci9Vv/pyHH/EJOKNYgr6RmGX4ky5\ng6B6POqi8fUJCNA9RKi4xLU5PxD3ZRdJfdQqNZAtQou2+wLz70aUpbTPFhqDsx3o\nRM3IGNTwsXUPU5pkFrAAUgXSauWMA5IDYPAOqRtfqKg6ku+IsYxf+Mcw0oLDxbmI\nhqngnNZ8jOCfvVmb+MHcSQtz3LvAeBvSv72h1NAyvV7TpI7daRowxoZmyqcdWDJa\nbFJWkKmTHNMZiHcj2/Po9mqIH5CzIleLkdm5zeBysS4VRRka9c9SzBW21N2Eg2iQ\n+PNyhZ1RXRIitbK5U+RUt9JO9xpKc1U77FmQxypFGfImhsS4Y8KgjtuJnpYaDYoP\ntFc5CLZlU+thFa3rJ4eEeiyvnUS+/L1Ilpl51QnEKZ/7tOB7Frglv+i8JnBe4yxp\n2uCcLjbw4Brw6+R+zLN8qUolGWYoXs83cIwHdLCdJnFGaCflTRq2pdrW8FC3XR0A\ntpPbitK0U4lyfpvfQ/EUwFmIUl7kBaTkdVBG8iYLK7dgizVELvSsrDGpL24xRW9C\nTe5qN6svTeeW3oeitiGvGylpfOol33TBcTcWMqj8wvFYpMnFKzI=\n=XL68\n-----END PGP SIGNATURE-----", "payload": "tree 194c41ab1320730d7f08823127404056e235cf2e\nparent e0f305a6bf710f64f789f909da93a8c362823b67\nauthor uHOOCCOOHu <hooccooh1896@gmail.com> 1567795466 +0800\ncommitter uHOOCCOOHu <hooccooh1896@gmail.com> 1567964093 +0800\n\nResolve textual scoped macros inside item\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26b092bd3b431559d7aafbf42882f978c0bb3dab", "html_url": "https://github.com/rust-lang/rust/commit/26b092bd3b431559d7aafbf42882f978c0bb3dab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26b092bd3b431559d7aafbf42882f978c0bb3dab/comments", "author": null, "committer": null, "parents": [{"sha": "e0f305a6bf710f64f789f909da93a8c362823b67", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f305a6bf710f64f789f909da93a8c362823b67", "html_url": "https://github.com/rust-lang/rust/commit/e0f305a6bf710f64f789f909da93a8c362823b67"}], "stats": {"total": 74, "additions": 65, "deletions": 9}, "files": [{"sha": "befbb2a9b3d6cbd19e4d6f049df71bbdd7753ddf", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/26b092bd3b431559d7aafbf42882f978c0bb3dab/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b092bd3b431559d7aafbf42882f978c0bb3dab/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=26b092bd3b431559d7aafbf42882f978c0bb3dab", "patch": "@@ -489,16 +489,21 @@ impl CrateDefMap {\n         name: &Name,\n     ) -> ItemOrMacro {\n         // Resolve in:\n+        //  - textual scoped macros\n         //  - current module / scope\n         //  - extern prelude\n         //  - std prelude\n+        let from_textual_mcro = self[module]\n+            .scope\n+            .get_textual_macro(name)\n+            .map_or_else(|| Either::A(PerNs::none()), Either::B);\n         let from_scope =\n             self[module].scope.get_item_or_macro(name).unwrap_or_else(|| Either::A(PerNs::none()));\n         let from_extern_prelude =\n             self.extern_prelude.get(name).map_or(PerNs::none(), |&it| PerNs::types(it));\n         let from_prelude = self.resolve_in_prelude(db, name);\n \n-        or(from_scope, or(Either::A(from_extern_prelude), from_prelude))\n+        or(from_textual_mcro, or(from_scope, or(Either::A(from_extern_prelude), from_prelude)))\n     }\n \n     fn resolve_name_in_extern_prelude(&self, name: &Name) -> PerNs<ModuleDef> {"}, {"sha": "10c32ffa1c4beea8dd9e256e43fcc5a9f8604249", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26b092bd3b431559d7aafbf42882f978c0bb3dab/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b092bd3b431559d7aafbf42882f978c0bb3dab/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=26b092bd3b431559d7aafbf42882f978c0bb3dab", "patch": "@@ -14,8 +14,8 @@ use crate::{\n         raw, CrateDefMap, CrateModuleId, ItemOrMacro, ModuleData, ModuleDef, PerNs,\n         ReachedFixedPoint, Resolution, ResolveMode,\n     },\n-    AstId, Const, Enum, Function, HirFileId, MacroDef, Module, Name, Path, Static, Struct, Trait,\n-    TypeAlias, Union,\n+    AstId, Const, Enum, Function, HirFileId, MacroDef, Module, Name, Path, PathKind, Static,\n+    Struct, Trait, TypeAlias, Union,\n };\n \n pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n@@ -156,9 +156,6 @@ where\n     /// the definition of current module.\n     /// And also, `macro_use` on a module will import all textual macros visable inside to\n     /// current textual scope, with possible shadowing.\n-    ///\n-    /// In a single module, the order of definition/usage of textual scoped macros matters.\n-    /// But we ignore it here to make it easy to implement.\n     fn define_textual_macro(&mut self, module_id: CrateModuleId, name: Name, macro_id: MacroDefId) {\n         // Always shadowing\n         self.def_map.modules[module_id]\n@@ -700,8 +697,13 @@ where\n             return;\n         }\n \n-        // Case 3: path to a macro from another crate, expand during name resolution\n-        self.def_collector.unexpanded_macros.push((self.module_id, ast_id, mac.path.clone()))\n+        // Case 3: resolve in module scope, expand during name resolution.\n+        // We rewrite simple path `macro_name` to `self::macro_name` to force resolve in module scope only.\n+        let mut path = mac.path.clone();\n+        if path.is_ident() {\n+            path.kind = PathKind::Self_;\n+        }\n+        self.def_collector.unexpanded_macros.push((self.module_id, ast_id, path));\n     }\n \n     fn import_all_textual_macros(&mut self, module_id: CrateModuleId) {"}, {"sha": "a894c68361798bdc95fcc27fb0b9b5409b6cdf0e", "filename": "crates/ra_hir/src/nameres/tests/macros.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/26b092bd3b431559d7aafbf42882f978c0bb3dab/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b092bd3b431559d7aafbf42882f978c0bb3dab/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=26b092bd3b431559d7aafbf42882f978c0bb3dab", "patch": "@@ -279,7 +279,7 @@ fn prelude_cycle() {\n }\n \n #[test]\n-fn plain_macros_are_textual_scoped_between_modules() {\n+fn plain_macros_are_textual_scoped() {\n     let map = def_map(\n         r#\"\n         //- /main.rs\n@@ -310,6 +310,15 @@ fn plain_macros_are_textual_scoped_between_modules() {\n         }\n         foo!(ok_double_macro_use_shadow);\n \n+        baz!(NotFoundBefore);\n+        #[macro_use]\n+        mod m7 {\n+            macro_rules! baz {\n+                ($x:ident) => { struct $x; }\n+            }\n+        }\n+        baz!(OkAfter);\n+\n         //- /m1.rs\n         foo!(NotFoundBeforeInside1);\n         macro_rules! bar {\n@@ -337,14 +346,19 @@ fn plain_macros_are_textual_scoped_between_modules() {\n     assert_snapshot!(map, @r###\"\n    \u22eecrate\n    \u22eeOk: t v\n+   \u22eeOkAfter: t v\n    \u22eeOkShadowStop: t v\n    \u22eefoo: m\n    \u22eem1: t\n    \u22eem2: t\n    \u22eem3: t\n    \u22eem5: t\n+   \u22eem7: t\n    \u22eeok_double_macro_use_shadow: v\n    \u22ee\n+   \u22eecrate::m7\n+   \u22eebaz: m\n+   \u22ee\n    \u22eecrate::m1\n    \u22eebar: m\n    \u22ee"}, {"sha": "f2d5b115e10ef1da4b195da44314c04f4534afd4", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/26b092bd3b431559d7aafbf42882f978c0bb3dab/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26b092bd3b431559d7aafbf42882f978c0bb3dab/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=26b092bd3b431559d7aafbf42882f978c0bb3dab", "patch": "@@ -2803,6 +2803,41 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn infer_textual_scoped_macros_expanded() {\n+    assert_snapshot!(\n+        infer(r#\"\n+struct Foo(Vec<i32>);\n+\n+#[macro_use]\n+mod m {\n+    macro_rules! foo {\n+        ($($item:expr),*) => {\n+            {\n+                Foo(vec![$($item,)*])\n+            }\n+        };\n+    }\n+}\n+\n+fn main() {\n+    let x = foo!(1,2);\n+    let y = crate::foo!(1,2);\n+}\n+\"#),\n+        @r###\"\n+    ![0; 17) '{Foo(v...,2,])}': Foo\n+    ![1; 4) 'Foo': Foo({unknown}) -> Foo\n+    ![1; 16) 'Foo(vec![1,2,])': Foo\n+    ![5; 15) 'vec![1,2,]': {unknown}\n+    [195; 251) '{     ...,2); }': ()\n+    [205; 206) 'x': Foo\n+    [228; 229) 'y': {unknown}\n+    [232; 248) 'crate:...!(1,2)': {unknown}\n+    \"###\n+    );\n+}\n+\n #[ignore]\n #[test]\n fn method_resolution_trait_before_autoref() {"}]}