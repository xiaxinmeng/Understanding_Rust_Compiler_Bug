{"sha": "cc0022a3634dd4a931ac9f68e63017c959bc8be7", "node_id": "C_kwDOAAsO6NoAKGNjMDAyMmEzNjM0ZGQ0YTkzMWFjOWY2OGU2MzAxN2M5NTliYzhiZTc", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-26T03:05:54Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-26T03:43:19Z"}, "message": "Rename some things.\n\n`Cursor` keeps track of the position within the current token. But it\nuses confusing names that don't make it clear that the \"length consumed\"\nis just within the current token.\n\nThis commit renames things to make this clearer.", "tree": {"sha": "f6f7ca6b370a53ee9cba852b6a04cb236470ac4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6f7ca6b370a53ee9cba852b6a04cb236470ac4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc0022a3634dd4a931ac9f68e63017c959bc8be7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc0022a3634dd4a931ac9f68e63017c959bc8be7", "html_url": "https://github.com/rust-lang/rust/commit/cc0022a3634dd4a931ac9f68e63017c959bc8be7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc0022a3634dd4a931ac9f68e63017c959bc8be7/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ceb25d125f98b82fe264e5b9d1b992f0766939a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceb25d125f98b82fe264e5b9d1b992f0766939a8", "html_url": "https://github.com/rust-lang/rust/commit/ceb25d125f98b82fe264e5b9d1b992f0766939a8"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "eceef59802eb951d178d03157b380c2748fa0354", "filename": "compiler/rustc_lexer/src/cursor.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc0022a3634dd4a931ac9f68e63017c959bc8be7/compiler%2Frustc_lexer%2Fsrc%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0022a3634dd4a931ac9f68e63017c959bc8be7/compiler%2Frustc_lexer%2Fsrc%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Fcursor.rs?ref=cc0022a3634dd4a931ac9f68e63017c959bc8be7", "patch": "@@ -5,7 +5,7 @@ use std::str::Chars;\n /// Next characters can be peeked via `first` method,\n /// and position can be shifted forward via `bump` method.\n pub struct Cursor<'a> {\n-    initial_len: usize,\n+    len_remaining: usize,\n     /// Iterator over chars. Slightly faster than a &str.\n     chars: Chars<'a>,\n     #[cfg(debug_assertions)]\n@@ -17,7 +17,7 @@ pub(crate) const EOF_CHAR: char = '\\0';\n impl<'a> Cursor<'a> {\n     pub fn new(input: &'a str) -> Cursor<'a> {\n         Cursor {\n-            initial_len: input.len(),\n+            len_remaining: input.len(),\n             chars: input.chars(),\n             #[cfg(debug_assertions)]\n             prev: EOF_CHAR,\n@@ -61,13 +61,13 @@ impl<'a> Cursor<'a> {\n     }\n \n     /// Returns amount of already consumed symbols.\n-    pub(crate) fn len_consumed(&self) -> u32 {\n-        (self.initial_len - self.chars.as_str().len()) as u32\n+    pub(crate) fn pos_within_token(&self) -> u32 {\n+        (self.len_remaining - self.chars.as_str().len()) as u32\n     }\n \n     /// Resets the number of bytes consumed to 0.\n-    pub(crate) fn reset_len_consumed(&mut self) {\n-        self.initial_len = self.chars.as_str().len();\n+    pub(crate) fn reset_pos_within_token(&mut self) {\n+        self.len_remaining = self.chars.as_str().len();\n     }\n \n     /// Moves to the next character."}, {"sha": "69e772c69243b34161ea316ef60d8f311e3349e7", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cc0022a3634dd4a931ac9f68e63017c959bc8be7/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0022a3634dd4a931ac9f68e63017c959bc8be7/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=cc0022a3634dd4a931ac9f68e63017c959bc8be7", "patch": "@@ -315,7 +315,7 @@ impl Cursor<'_> {\n                 ('#', c1) if is_id_start(c1) => self.raw_ident(),\n                 ('#', _) | ('\"', _) => {\n                     let res = self.raw_double_quoted_string(1);\n-                    let suffix_start = self.len_consumed();\n+                    let suffix_start = self.pos_within_token();\n                     if res.is_ok() {\n                         self.eat_literal_suffix();\n                     }\n@@ -330,7 +330,7 @@ impl Cursor<'_> {\n                 ('\\'', _) => {\n                     self.bump();\n                     let terminated = self.single_quoted_string();\n-                    let suffix_start = self.len_consumed();\n+                    let suffix_start = self.pos_within_token();\n                     if terminated {\n                         self.eat_literal_suffix();\n                     }\n@@ -340,7 +340,7 @@ impl Cursor<'_> {\n                 ('\"', _) => {\n                     self.bump();\n                     let terminated = self.double_quoted_string();\n-                    let suffix_start = self.len_consumed();\n+                    let suffix_start = self.pos_within_token();\n                     if terminated {\n                         self.eat_literal_suffix();\n                     }\n@@ -350,7 +350,7 @@ impl Cursor<'_> {\n                 ('r', '\"') | ('r', '#') => {\n                     self.bump();\n                     let res = self.raw_double_quoted_string(2);\n-                    let suffix_start = self.len_consumed();\n+                    let suffix_start = self.pos_within_token();\n                     if res.is_ok() {\n                         self.eat_literal_suffix();\n                     }\n@@ -367,7 +367,7 @@ impl Cursor<'_> {\n             // Numeric literal.\n             c @ '0'..='9' => {\n                 let literal_kind = self.number(c);\n-                let suffix_start = self.len_consumed();\n+                let suffix_start = self.pos_within_token();\n                 self.eat_literal_suffix();\n                 TokenKind::Literal { kind: literal_kind, suffix_start }\n             }\n@@ -406,7 +406,7 @@ impl Cursor<'_> {\n             // String literal.\n             '\"' => {\n                 let terminated = self.double_quoted_string();\n-                let suffix_start = self.len_consumed();\n+                let suffix_start = self.pos_within_token();\n                 if terminated {\n                     self.eat_literal_suffix();\n                 }\n@@ -419,8 +419,8 @@ impl Cursor<'_> {\n             }\n             _ => Unknown,\n         };\n-        let res = Some(Token::new(token_kind, self.len_consumed()));\n-        self.reset_len_consumed();\n+        let res = Some(Token::new(token_kind, self.pos_within_token()));\n+        self.reset_pos_within_token();\n         res\n     }\n \n@@ -606,7 +606,7 @@ impl Cursor<'_> {\n \n         if !can_be_a_lifetime {\n             let terminated = self.single_quoted_string();\n-            let suffix_start = self.len_consumed();\n+            let suffix_start = self.pos_within_token();\n             if terminated {\n                 self.eat_literal_suffix();\n             }\n@@ -631,7 +631,7 @@ impl Cursor<'_> {\n         if self.first() == '\\'' {\n             self.bump();\n             let kind = Char { terminated: true };\n-            Literal { kind, suffix_start: self.len_consumed() }\n+            Literal { kind, suffix_start: self.pos_within_token() }\n         } else {\n             Lifetime { starts_with_number }\n         }\n@@ -712,7 +712,7 @@ impl Cursor<'_> {\n \n     fn raw_string_unvalidated(&mut self, prefix_len: u32) -> Result<u32, RawStrError> {\n         debug_assert!(self.prev() == 'r');\n-        let start_pos = self.len_consumed();\n+        let start_pos = self.pos_within_token();\n         let mut possible_terminator_offset = None;\n         let mut max_hashes = 0;\n \n@@ -766,7 +766,7 @@ impl Cursor<'_> {\n                 // Keep track of possible terminators to give a hint about\n                 // where there might be a missing terminator\n                 possible_terminator_offset =\n-                    Some(self.len_consumed() - start_pos - n_end_hashes + prefix_len);\n+                    Some(self.pos_within_token() - start_pos - n_end_hashes + prefix_len);\n                 max_hashes = n_end_hashes;\n             }\n         }"}]}