{"sha": "83710b44716cb078fde8992acc4f28839eefbe51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNzEwYjQ0NzE2Y2IwNzhmZGU4OTkyYWNjNGYyODgzOWVlZmJlNTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-09T01:16:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-09T01:20:02Z"}, "message": "permit coercions if `[error]` is found in either type", "tree": {"sha": "b5db47793063bd16387885e3a32de5bc57659078", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5db47793063bd16387885e3a32de5bc57659078"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83710b44716cb078fde8992acc4f28839eefbe51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83710b44716cb078fde8992acc4f28839eefbe51", "html_url": "https://github.com/rust-lang/rust/commit/83710b44716cb078fde8992acc4f28839eefbe51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83710b44716cb078fde8992acc4f28839eefbe51/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3cbfa58be12a3ae0c4efd71c3e8c39554924e08", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3cbfa58be12a3ae0c4efd71c3e8c39554924e08", "html_url": "https://github.com/rust-lang/rust/commit/a3cbfa58be12a3ae0c4efd71c3e8c39554924e08"}], "stats": {"total": 59, "additions": 29, "deletions": 30}, "files": [{"sha": "f91f13f586c41b6ea00c24b82fadbb3f94ce14c7", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/83710b44716cb078fde8992acc4f28839eefbe51/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83710b44716cb078fde8992acc4f28839eefbe51/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=83710b44716cb078fde8992acc4f28839eefbe51", "patch": "@@ -68,7 +68,7 @@ use middle::traits::{predicate_for_trait_def, report_selection_error};\n use middle::ty::adjustment::{AutoAdjustment, AutoDerefRef, AdjustDerefRef};\n use middle::ty::adjustment::{AutoPtr, AutoUnsafe, AdjustReifyFnPointer};\n use middle::ty::adjustment::{AdjustUnsafeFnPointer};\n-use middle::ty::{self, LvaluePreference, TypeAndMut, Ty};\n+use middle::ty::{self, LvaluePreference, TypeAndMut, Ty, HasTypeFlags};\n use middle::ty::error::TypeError;\n use middle::ty::relate::RelateResult;\n use util::common::indent;\n@@ -110,10 +110,15 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                a,\n                b);\n \n+        let a = self.fcx.infcx().shallow_resolve(a);\n+\n+        // Just ignore error types.\n+        if a.references_error() || b.references_error() {\n+            return Ok(None);\n+        }\n+\n         // Consider coercing the subtype to a DST\n-        let unsize = self.unpack_actual_value(a, |a| {\n-            self.coerce_unsized(a, b)\n-        });\n+        let unsize = self.coerce_unsized(a, b);\n         if unsize.is_ok() {\n             return unsize;\n         }\n@@ -124,39 +129,33 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         // See above for details.\n         match b.sty {\n             ty::TyRawPtr(mt_b) => {\n-                return self.unpack_actual_value(a, |a| {\n-                    self.coerce_unsafe_ptr(a, b, mt_b.mutbl)\n-                });\n+                return self.coerce_unsafe_ptr(a, b, mt_b.mutbl);\n             }\n \n             ty::TyRef(_, mt_b) => {\n-                return self.unpack_actual_value(a, |a| {\n-                    self.coerce_borrowed_pointer(expr_a, a, b, mt_b.mutbl)\n-                });\n+                return self.coerce_borrowed_pointer(expr_a, a, b, mt_b.mutbl);\n             }\n \n             _ => {}\n         }\n \n-        self.unpack_actual_value(a, |a| {\n-            match a.sty {\n-                ty::TyBareFn(Some(_), a_f) => {\n-                    // Function items are coercible to any closure\n-                    // type; function pointers are not (that would\n-                    // require double indirection).\n-                    self.coerce_from_fn_item(a, a_f, b)\n-                }\n-                ty::TyBareFn(None, a_f) => {\n-                    // We permit coercion of fn pointers to drop the\n-                    // unsafe qualifier.\n-                    self.coerce_from_fn_pointer(a, a_f, b)\n-                }\n-                _ => {\n-                    // Otherwise, just use subtyping rules.\n-                    self.subtype(a, b)\n-                }\n+        match a.sty {\n+            ty::TyBareFn(Some(_), a_f) => {\n+                // Function items are coercible to any closure\n+                // type; function pointers are not (that would\n+                // require double indirection).\n+                self.coerce_from_fn_item(a, a_f, b)\n             }\n-        })\n+            ty::TyBareFn(None, a_f) => {\n+                // We permit coercion of fn pointers to drop the\n+                // unsafe qualifier.\n+                self.coerce_from_fn_pointer(a, a_f, b)\n+            }\n+            _ => {\n+                // Otherwise, just use subtyping rules.\n+                self.subtype(a, b)\n+            }\n+        }\n     }\n \n     /// Reborrows `&mut A` to `&mut B` and `&(mut) A` to `&B`."}, {"sha": "53ad2416878942e4e6d6a8261f14cab53c5117a3", "filename": "src/test/compile-fail/issue-19692.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83710b44716cb078fde8992acc4f28839eefbe51/src%2Ftest%2Fcompile-fail%2Fissue-19692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83710b44716cb078fde8992acc4f28839eefbe51/src%2Ftest%2Fcompile-fail%2Fissue-19692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19692.rs?ref=83710b44716cb078fde8992acc4f28839eefbe51", "patch": "@@ -12,7 +12,7 @@ struct Homura;\n \n fn akemi(homura: Homura) {\n     let Some(ref madoka) = Some(homura.kaname()); //~ ERROR no method named `kaname` found\n-    madoka.clone();\n+    madoka.clone(); //~ ERROR the type of this value must be known\n }\n \n fn main() { }"}, {"sha": "54eb2a908295568ce1d49356b954d4cd959f02b2", "filename": "src/test/compile-fail/issue-3973.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83710b44716cb078fde8992acc4f28839eefbe51/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83710b44716cb078fde8992acc4f28839eefbe51/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs?ref=83710b44716cb078fde8992acc4f28839eefbe51", "patch": "@@ -31,5 +31,5 @@ impl ToString_ for Point {\n fn main() {\n     let p = Point::new(0.0, 0.0);\n     //~^ ERROR no associated item named `new` found for type `Point` in the current scope\n-    println!(\"{}\", p.to_string());\n+    println!(\"{}\", p.to_string()); //~ ERROR type of this value must be known\n }"}]}