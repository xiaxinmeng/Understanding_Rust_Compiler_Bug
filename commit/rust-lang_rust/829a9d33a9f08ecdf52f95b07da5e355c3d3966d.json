{"sha": "829a9d33a9f08ecdf52f95b07da5e355c3d3966d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyOWE5ZDMzYTlmMDhlY2RmNTJmOTViMDdkYTVlMzU1YzNkMzk2NmQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-11T10:00:59Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-12T11:58:42Z"}, "message": "Use () for entry_fn.", "tree": {"sha": "5e98cd4dfe17a473a121ca6693b392d5b6f2fc59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e98cd4dfe17a473a121ca6693b392d5b6f2fc59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/829a9d33a9f08ecdf52f95b07da5e355c3d3966d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/829a9d33a9f08ecdf52f95b07da5e355c3d3966d", "html_url": "https://github.com/rust-lang/rust/commit/829a9d33a9f08ecdf52f95b07da5e355c3d3966d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "601453a2acef1bc99922bc5aebcb10234bd72f1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/601453a2acef1bc99922bc5aebcb10234bd72f1a", "html_url": "https://github.com/rust-lang/rust/commit/601453a2acef1bc99922bc5aebcb10234bd72f1a"}], "stats": {"total": 46, "additions": 19, "deletions": 27}, "files": [{"sha": "d1958c5f96b86b7be79f1a2c1129e4e57a82f1a6", "filename": "compiler/rustc_codegen_cranelift/src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs?ref=829a9d33a9f08ecdf52f95b07da5e355c3d3966d", "patch": "@@ -15,7 +15,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n     unwind_context: &mut UnwindContext,\n     is_jit: bool,\n ) {\n-    let (main_def_id, is_main_fn) = match tcx.entry_fn(LOCAL_CRATE) {\n+    let (main_def_id, is_main_fn) = match tcx.entry_fn(()) {\n         Some((def_id, entry_ty)) => (\n             def_id,\n             match entry_ty {"}, {"sha": "2b99a2ebad979227ff6b6068f6cf69da962ff8d6", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=829a9d33a9f08ecdf52f95b07da5e355c3d3966d", "patch": "@@ -23,7 +23,7 @@ use rustc_codegen_ssa::mir::debuginfo::{DebugScope, FunctionDebugContext, Variab\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n-use rustc_hir::def_id::{DefId, DefIdMap, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, DefIdMap};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir;\n use rustc_middle::ty::layout::HasTyCtxt;\n@@ -343,7 +343,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         if self.sess().opts.optimize != config::OptLevel::No {\n             spflags |= DISPFlags::SPFlagOptimized;\n         }\n-        if let Some((id, _)) = self.tcx.entry_fn(LOCAL_CRATE) {\n+        if let Some((id, _)) = self.tcx.entry_fn(()) {\n             if id == def_id {\n                 spflags |= DISPFlags::SPFlagMainSubprogram;\n             }"}, {"sha": "b894452250c4af7c062e65e93f9ff37c8b200815", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=829a9d33a9f08ecdf52f95b07da5e355c3d3966d", "patch": "@@ -174,7 +174,7 @@ fn exported_symbols_provider_local(\n         .map(|(&def_id, &level)| (ExportedSymbol::NonGeneric(def_id), level))\n         .collect();\n \n-    if tcx.entry_fn(LOCAL_CRATE).is_some() {\n+    if tcx.entry_fn(()).is_some() {\n         let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, \"main\"));\n \n         symbols.push((exported_symbol, SymbolExportLevel::C));"}, {"sha": "3a3381e377852d25a3ff9119e8a30c21c9d1e58b", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=829a9d33a9f08ecdf52f95b07da5e355c3d3966d", "patch": "@@ -347,7 +347,7 @@ pub fn codegen_instance<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     cx: &'a Bx::CodegenCx,\n ) -> Option<Bx::Function> {\n-    let main_def_id = cx.tcx().entry_fn(LOCAL_CRATE).map(|(def_id, _)| def_id)?;\n+    let (main_def_id, entry_type) = cx.tcx().entry_fn(())?;\n     let main_is_local = main_def_id.is_local();\n     let instance = Instance::mono(cx.tcx(), main_def_id);\n \n@@ -364,10 +364,9 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n     let main_llfn = cx.get_fn_addr(instance);\n \n-    return cx.tcx().entry_fn(LOCAL_CRATE).map(|(_, et)| {\n-        let use_start_lang_item = EntryFnType::Start != et;\n-        create_entry_fn::<Bx>(cx, main_llfn, main_def_id, use_start_lang_item)\n-    });\n+    let use_start_lang_item = EntryFnType::Start != entry_type;\n+    let entry_fn = create_entry_fn::<Bx>(cx, main_llfn, main_def_id, use_start_lang_item);\n+    return Some(entry_fn);\n \n     fn create_entry_fn<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         cx: &'a Bx::CodegenCx,"}, {"sha": "6bf79e1f28db7dad487753ac0b2cc13f37d7407b", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=829a9d33a9f08ecdf52f95b07da5e355c3d3966d", "patch": "@@ -820,8 +820,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n     sess.time(\"misc_checking_1\", || {\n         parallel!(\n             {\n-                entry_point = sess\n-                    .time(\"looking_for_entry_point\", || rustc_passes::entry::find_entry_point(tcx));\n+                entry_point = sess.time(\"looking_for_entry_point\", || tcx.entry_fn(()));\n \n                 sess.time(\"looking_for_plugin_registrar\", || {\n                     plugin::build::find_plugin_registrar(tcx)"}, {"sha": "d04ffb78cd5804807548496180028396cb4ad520", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=829a9d33a9f08ecdf52f95b07da5e355c3d3966d", "patch": "@@ -302,7 +302,7 @@ impl<'tcx> Queries<'tcx> {\n     /// to write UI tests that actually test that compilation succeeds without reporting\n     /// an error.\n     fn check_for_rustc_errors_attr(tcx: TyCtxt<'_>) {\n-        let def_id = match tcx.entry_fn(LOCAL_CRATE) {\n+        let def_id = match tcx.entry_fn(()) {\n             Some((def_id, _)) => def_id,\n             _ => return,\n         };"}, {"sha": "edf2e5397654189cdbb2cdb0eb8a64b4a7b74f4a", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=829a9d33a9f08ecdf52f95b07da5e355c3d3966d", "patch": "@@ -88,7 +88,7 @@ impl<'tcx> MonoItem<'tcx> {\n \n         match *self {\n             MonoItem::Fn(ref instance) => {\n-                let entry_def_id = tcx.entry_fn(LOCAL_CRATE).map(|(id, _)| id);\n+                let entry_def_id = tcx.entry_fn(()).map(|(id, _)| id);\n                 // If this function isn't inlined or otherwise has an extern\n                 // indicator, then we'll be creating a globally shared version.\n                 if tcx.codegen_fn_attrs(instance.def_id()).contains_extern_indicator()"}, {"sha": "b4f4bffdae76330832353aa33de85cfd9836b859", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=829a9d33a9f08ecdf52f95b07da5e355c3d3966d", "patch": "@@ -1201,7 +1201,7 @@ rustc_queries! {\n \n     /// Identifies the entry-point (e.g., the `main` function) for a given\n     /// crate, returning `None` if there is no entry point (such as for library crates).\n-    query entry_fn(_: CrateNum) -> Option<(DefId, EntryFnType)> {\n+    query entry_fn(_: ()) -> Option<(DefId, EntryFnType)> {\n         desc { \"looking up the entry function of a crate\" }\n     }\n     query plugin_registrar_fn(_: CrateNum) -> Option<DefId> {"}, {"sha": "d882174cb42cfb14d415140a4ddd165905ad32f5", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=829a9d33a9f08ecdf52f95b07da5e355c3d3966d", "patch": "@@ -322,7 +322,7 @@ fn collect_roots(tcx: TyCtxt<'_>, mode: MonoItemCollectionMode) -> Vec<MonoItem<\n     let mut roots = Vec::new();\n \n     {\n-        let entry_fn = tcx.entry_fn(LOCAL_CRATE);\n+        let entry_fn = tcx.entry_fn(());\n \n         debug!(\"collect_roots: entry_fn = {:?}\", entry_fn);\n "}, {"sha": "83b1a5d5552a8caa4ee8c45f7fb4e63c6dc42f4d", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=829a9d33a9f08ecdf52f95b07da5e355c3d3966d", "patch": "@@ -472,7 +472,7 @@ fn create_and_seed_worklist<'tcx>(\n         )\n         .chain(\n             // Seed entry point\n-            tcx.entry_fn(LOCAL_CRATE).and_then(|(def_id, _)| {\n+            tcx.entry_fn(()).and_then(|(def_id, _)| {\n                 def_id.as_local().map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id))\n             }),\n         )"}, {"sha": "ca6a7561f3e7743050824efa687a101dd8d521a5", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=829a9d33a9f08ecdf52f95b07da5e355c3d3966d", "patch": "@@ -1,6 +1,6 @@\n use rustc_ast::entry::EntryPointType;\n use rustc_errors::struct_span_err;\n-use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{ForeignItem, HirId, ImplItem, Item, ItemKind, TraitItem, CRATE_HIR_ID};\n use rustc_middle::hir::map::Map;\n@@ -48,9 +48,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n     }\n }\n \n-fn entry_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<(DefId, EntryFnType)> {\n-    assert_eq!(cnum, LOCAL_CRATE);\n-\n+fn entry_fn(tcx: TyCtxt<'_>, (): ()) -> Option<(DefId, EntryFnType)> {\n     let any_exe = tcx.sess.crate_types().iter().any(|ty| *ty == CrateType::Executable);\n     if !any_exe {\n         // No need to find a main function.\n@@ -227,10 +225,6 @@ fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n     err.emit();\n }\n \n-pub fn find_entry_point(tcx: TyCtxt<'_>) -> Option<(DefId, EntryFnType)> {\n-    tcx.entry_fn(LOCAL_CRATE)\n-}\n-\n pub fn provide(providers: &mut Providers) {\n     *providers = Providers { entry_fn, ..*providers };\n }"}, {"sha": "35fffb3b07f0e2683ba9274b238c0fcd872bb3c3", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=829a9d33a9f08ecdf52f95b07da5e355c3d3966d", "patch": "@@ -449,7 +449,7 @@ fn check_start_fn_ty(tcx: TyCtxt<'_>, start_def_id: DefId) {\n }\n \n fn check_for_entry_fn(tcx: TyCtxt<'_>) {\n-    match tcx.entry_fn(LOCAL_CRATE) {\n+    match tcx.entry_fn(()) {\n         Some((def_id, EntryFnType::Main)) => check_main_fn_ty(tcx, def_id),\n         Some((def_id, EntryFnType::Start)) => check_start_fn_ty(tcx, def_id),\n         _ => {}"}, {"sha": "9ac9500b4eb7637208725e9633f18ff793534f02", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/829a9d33a9f08ecdf52f95b07da5e355c3d3966d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=829a9d33a9f08ecdf52f95b07da5e355c3d3966d", "patch": "@@ -60,7 +60,7 @@ use rustc_ast::ast::{self, Attribute, BorrowKind, LitKind};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, walk_expr, ErasedMap, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::LangItem::{ResultErr, ResultOk};\n use rustc_hir::{\n@@ -677,7 +677,7 @@ pub fn method_chain_args<'a>(expr: &'a Expr<'_>, methods: &[&str]) -> Option<Vec\n /// Returns `true` if the provided `def_id` is an entrypoint to a program.\n pub fn is_entrypoint_fn(cx: &LateContext<'_>, def_id: DefId) -> bool {\n     cx.tcx\n-        .entry_fn(LOCAL_CRATE)\n+        .entry_fn(())\n         .map_or(false, |(entry_fn_def_id, _)| def_id == entry_fn_def_id)\n }\n "}]}