{"sha": "c1492fe3039d014809960f91b2a95fe30e5d6b9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNDkyZmUzMDM5ZDAxNDgwOTk2MGY5MWIyYTk1ZmUzMGU1ZDZiOWM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-04-08T12:34:35Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-04-26T21:46:55Z"}, "message": "Add one more prelude layer for extern crate names passed with `--extern`", "tree": {"sha": "24875c2a6c63f14d5d08bd5333e99ad10338bf7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24875c2a6c63f14d5d08bd5333e99ad10338bf7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1492fe3039d014809960f91b2a95fe30e5d6b9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1492fe3039d014809960f91b2a95fe30e5d6b9c", "html_url": "https://github.com/rust-lang/rust/commit/c1492fe3039d014809960f91b2a95fe30e5d6b9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1492fe3039d014809960f91b2a95fe30e5d6b9c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f3444e1baf0d335b4bf379f845dbc28cdd0509c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3444e1baf0d335b4bf379f845dbc28cdd0509c", "html_url": "https://github.com/rust-lang/rust/commit/7f3444e1baf0d335b4bf379f845dbc28cdd0509c"}], "stats": {"total": 212, "additions": 204, "deletions": 8}, "files": [{"sha": "26c0ede48b7b42f8422bf0c45448812da1245962", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c1492fe3039d014809960f91b2a95fe30e5d6b9c", "patch": "@@ -1407,6 +1407,7 @@ pub struct Resolver<'a> {\n     graph_root: Module<'a>,\n \n     prelude: Option<Module<'a>>,\n+    extern_prelude: FxHashSet<Name>,\n \n     /// n.b. This is used only for better diagnostics, not name resolution itself.\n     has_self: FxHashSet<DefId>,\n@@ -1715,6 +1716,7 @@ impl<'a> Resolver<'a> {\n             // AST.\n             graph_root,\n             prelude: None,\n+            extern_prelude: session.opts.externs.iter().map(|kv| Symbol::intern(kv.0)).collect(),\n \n             has_self: FxHashSet(),\n             field_names: FxHashMap(),\n@@ -1970,13 +1972,32 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n-        match self.prelude {\n-            Some(prelude) if !module.no_implicit_prelude => {\n-                self.resolve_ident_in_module_unadjusted(prelude, ident, ns, false, false, path_span)\n-                    .ok().map(LexicalScopeBinding::Item)\n+        if !module.no_implicit_prelude {\n+            // `record_used` means that we don't try to load crates during speculative resolution\n+            if record_used && ns == TypeNS && self.extern_prelude.contains(&ident.name) {\n+                if !self.session.features_untracked().extern_prelude {\n+                    feature_err(&self.session.parse_sess, \"extern_prelude\",\n+                                ident.span, GateIssue::Language,\n+                                \"access to extern crates through prelude is experimental\").emit();\n+                }\n+\n+                let crate_id = self.crate_loader.process_path_extern(ident.name, ident.span);\n+                let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n+                self.populate_module_if_necessary(crate_root);\n+\n+                let binding = (crate_root, ty::Visibility::Public,\n+                               ident.span, Mark::root()).to_name_binding(self.arenas);\n+                return Some(LexicalScopeBinding::Item(binding));\n+            }\n+            if let Some(prelude) = self.prelude {\n+                if let Ok(binding) = self.resolve_ident_in_module_unadjusted(prelude, ident, ns,\n+                                                                        false, false, path_span) {\n+                    return Some(LexicalScopeBinding::Item(binding));\n+                }\n             }\n-            _ => None,\n         }\n+\n+        None\n     }\n \n     fn hygienic_lexical_parent(&mut self, mut module: Module<'a>, span: &mut Span)\n@@ -3587,8 +3608,9 @@ impl<'a> Resolver<'a> {\n                         // We can see through blocks\n                     } else {\n                         // Items from the prelude\n-                        if let Some(prelude) = self.prelude {\n-                            if !module.no_implicit_prelude {\n+                        if !module.no_implicit_prelude {\n+                            names.extend(self.extern_prelude.iter().cloned());\n+                            if let Some(prelude) = self.prelude {\n                                 add_module_candidates(prelude, &mut names);\n                             }\n                         }"}, {"sha": "832e655d3b140c271d7442f1a918e648442a75c3", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=c1492fe3039d014809960f91b2a95fe30e5d6b9c", "patch": "@@ -397,7 +397,7 @@ declare_features! (\n     (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n \n     // Resolve absolute paths as paths from other crates\n-    (active, extern_absolute_paths, \"1.24.0\", Some(44660), None),\n+    (active, extern_absolute_paths, \"1.24.0\", Some(44660), Some(Edition::Edition2018)),\n \n     // `foo.rs` as an alternative to `foo/mod.rs`\n     (active, non_modrs_mods, \"1.24.0\", Some(44660), Some(Edition::Edition2018)),\n@@ -466,6 +466,9 @@ declare_features! (\n \n     // #[doc(alias = \"...\")]\n     (active, doc_alias, \"1.27.0\", Some(50146), None),\n+\n+    // Access to crate names passed via `--extern` through prelude\n+    (active, extern_prelude, \"1.27.0\", Some(44660), Some(Edition::Edition2018)),\n );\n \n declare_features! ("}, {"sha": "aa8158c6eb381a8aa855e8cbf0b8a80edc1fe99d", "filename": "src/test/run-make-fulldeps/extern-prelude/Makefile", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2FMakefile?ref=c1492fe3039d014809960f91b2a95fe30e5d6b9c", "patch": "@@ -0,0 +1,12 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) ep-lib.rs\n+\t$(RUSTC) ep-vec.rs\n+\n+\t$(RUSTC) basic.rs --extern ep_lib=$(TMPDIR)/libep_lib.rlib\n+\t$(RUSTC) shadow-mod.rs --extern ep_lib=$(TMPDIR)/libep_lib.rlib\n+\t$(RUSTC) shadow-prelude.rs --extern Vec=$(TMPDIR)/libep_vec.rlib\n+\t$(RUSTC) feature-gate.rs --extern ep_lib=$(TMPDIR)/libep_lib.rlib 2>&1 | $(CGREP) \"access to extern crates through prelude is experimental\"\n+\t$(RUSTC) relative-only.rs --extern ep_lib=$(TMPDIR)/libep_lib.rlib 2>&1 | $(CGREP) \"unresolved import\"\n+\t$(RUSTC) relative-only.rs --extern ep_lib=$(TMPDIR)/libep_lib.rlib 2>&1 | $(CGREP) \"failed to resolve\""}, {"sha": "b8d6a772e2a98e85865fae0819ad7ad5e7a0af53", "filename": "src/test/run-make-fulldeps/extern-prelude/basic.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fbasic.rs?ref=c1492fe3039d014809960f91b2a95fe30e5d6b9c", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(extern_prelude)]\n+\n+fn main() {\n+    let s = ep_lib::S; // It works\n+    s.external();\n+}"}, {"sha": "dac0a3ce760fab242a20a58832c02455b7447b5c", "filename": "src/test/run-make-fulldeps/extern-prelude/ep-lib.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fep-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fep-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fep-lib.rs?ref=c1492fe3039d014809960f91b2a95fe30e5d6b9c", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+\n+pub struct S;\n+\n+impl S {\n+    pub fn external(&self) {}\n+}"}, {"sha": "f750a26f9e6ff2271537ec532783379937a5a124", "filename": "src/test/run-make-fulldeps/extern-prelude/ep-vec.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fep-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fep-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fep-vec.rs?ref=c1492fe3039d014809960f91b2a95fe30e5d6b9c", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"rlib\"]\n+\n+pub fn new(arg1: f32, arg2: ()) {}"}, {"sha": "49763f3ba6a231d233a736eabdc833375f5e79ae", "filename": "src/test/run-make-fulldeps/extern-prelude/feature-gate.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Ffeature-gate.rs?ref=c1492fe3039d014809960f91b2a95fe30e5d6b9c", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let s = ep_lib::S; // Feature error\n+}"}, {"sha": "0cd56b93de6a0c973ee907aad9cf6613969a191e", "filename": "src/test/run-make-fulldeps/extern-prelude/relative-only.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Frelative-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Frelative-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Frelative-only.rs?ref=c1492fe3039d014809960f91b2a95fe30e5d6b9c", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Extern prelude names are not available by absolute paths\n+\n+#![feature(extern_prelude)]\n+\n+use ep_lib::S;\n+\n+fn main() {\n+    let s = ::ep_lib::S;\n+}"}, {"sha": "52213c8d4f950cf786a37a2945517646e6090d96", "filename": "src/test/run-make-fulldeps/extern-prelude/shadow-mod.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fshadow-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fshadow-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fshadow-mod.rs?ref=c1492fe3039d014809960f91b2a95fe30e5d6b9c", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Local module shadows `ep_lib` from extern prelude\n+\n+mod ep_lib {\n+    pub struct S;\n+\n+    impl S {\n+        pub fn internal(&self) {}\n+    }\n+}\n+\n+fn main() {\n+    let s = ep_lib::S;\n+    s.internal(); // OK\n+}"}, {"sha": "de1c4d16d39bbd830a1ada8d31733754c8a41b99", "filename": "src/test/run-make-fulldeps/extern-prelude/shadow-prelude.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fshadow-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fshadow-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-prelude%2Fshadow-prelude.rs?ref=c1492fe3039d014809960f91b2a95fe30e5d6b9c", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Extern prelude shadows standard library prelude\n+\n+#![feature(extern_prelude)]\n+\n+fn main() {\n+    let x = Vec::new(0f32, ()); // OK\n+}"}, {"sha": "ff3aec439aae07c4ee3f81bbaf1e76ca0626700d", "filename": "src/test/run-pass/extern-prelude-no-speculative.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Frun-pass%2Fextern-prelude-no-speculative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Frun-pass%2Fextern-prelude-no-speculative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-prelude-no-speculative.rs?ref=c1492fe3039d014809960f91b2a95fe30e5d6b9c", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --extern LooksLikeExternCrate=/path/to/nowhere\n+\n+mod m {\n+    pub struct LooksLikeExternCrate;\n+}\n+\n+fn main() {\n+    // OK, speculative resolution for `unused_qualifications` doesn't try\n+    // to resolve this as an extern crate and load that crate\n+    let s = m::LooksLikeExternCrate {};\n+}"}, {"sha": "8d3a30305bdb083e8dd9022b8d9de262b4e61cef", "filename": "src/test/ui/feature-gate-extern_prelude.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Fui%2Ffeature-gate-extern_prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Fui%2Ffeature-gate-extern_prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-extern_prelude.rs?ref=c1492fe3039d014809960f91b2a95fe30e5d6b9c", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+can-only-test-this-in-run-make-fulldeps //~ ERROR expected one of `!` or `::`, found `-`"}, {"sha": "5abf369baf9c0ea1cee63a3fd9fcab4867e6e41a", "filename": "src/test/ui/feature-gate-extern_prelude.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Fui%2Ffeature-gate-extern_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1492fe3039d014809960f91b2a95fe30e5d6b9c/src%2Ftest%2Fui%2Ffeature-gate-extern_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-extern_prelude.stderr?ref=c1492fe3039d014809960f91b2a95fe30e5d6b9c", "patch": "@@ -0,0 +1,8 @@\n+error: expected one of `!` or `::`, found `-`\n+  --> $DIR/feature-gate-extern_prelude.rs:11:4\n+   |\n+LL | can-only-test-this-in-run-make-fulldeps //~ ERROR expected one of `!` or `::`, found `-`\n+   |    ^ expected one of `!` or `::` here\n+\n+error: aborting due to previous error\n+"}]}