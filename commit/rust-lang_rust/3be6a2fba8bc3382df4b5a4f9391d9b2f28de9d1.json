{"sha": "3be6a2fba8bc3382df4b5a4f9391d9b2f28de9d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZTZhMmZiYThiYzMzODJkZjRiNWE0ZjkzOTFkOWIyZjI4ZGU5ZDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-25T17:17:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-25T17:17:43Z"}, "message": "auto merge of #17482 : hoeppnertill/rust/master, r=alexcrichton\n\nIntended to prevent each user to write his own partial_min/max, possibly differing in slight details. @sfackler encouraged to PR this on IRC.\r\n\r\n(Let's hope this works... First PR.)", "tree": {"sha": "d7b8dfb88f021b8b280e4acd58aa51a206b02d67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7b8dfb88f021b8b280e4acd58aa51a206b02d67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3be6a2fba8bc3382df4b5a4f9391d9b2f28de9d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3be6a2fba8bc3382df4b5a4f9391d9b2f28de9d1", "html_url": "https://github.com/rust-lang/rust/commit/3be6a2fba8bc3382df4b5a4f9391d9b2f28de9d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3be6a2fba8bc3382df4b5a4f9391d9b2f28de9d1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f8da69618e9d46d209571cd73686ee0fdc994a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f8da69618e9d46d209571cd73686ee0fdc994a8", "html_url": "https://github.com/rust-lang/rust/commit/3f8da69618e9d46d209571cd73686ee0fdc994a8"}, {"sha": "29c2d3df5269a6538b23d79f56b63903e21e69f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/29c2d3df5269a6538b23d79f56b63903e21e69f4", "html_url": "https://github.com/rust-lang/rust/commit/29c2d3df5269a6538b23d79f56b63903e21e69f4"}], "stats": {"total": 95, "additions": 94, "deletions": 1}, "files": [{"sha": "a567eaa57d57faa33d456157370dec2c0b07d858", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3be6a2fba8bc3382df4b5a4f9391d9b2f28de9d1/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be6a2fba8bc3382df4b5a4f9391d9b2f28de9d1/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=3be6a2fba8bc3382df4b5a4f9391d9b2f28de9d1", "patch": "@@ -39,7 +39,7 @@\n \n #![stable]\n \n-use option::{Option, Some};\n+use option::{Option, Some, None};\n \n /// Trait for values that can be compared for equality and inequality.\n ///\n@@ -268,6 +268,32 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n     if v1 > v2 { v1 } else { v2 }\n }\n \n+/// Compare and return the minimum of two values if there is one.\n+///\n+/// Returns the first argument if the comparison determines them to be equal.\n+#[inline]\n+#[experimental]\n+pub fn partial_min<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n+    match v1.partial_cmp(&v2) {\n+        Some(Less) | Some(Equal) => Some(v1),\n+        Some(Greater) => Some(v2),\n+        None => None\n+    }\n+}\n+\n+/// Compare and return the maximum of two values if there is one.\n+///\n+/// Returns the first argument if the comparison determines them to be equal.\n+#[inline]\n+#[experimental]\n+pub fn partial_max<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n+    match v1.partial_cmp(&v2) {\n+        Some(Less) => Some(v2),\n+        Some(Equal) | Some(Greater) => Some(v1),\n+        None => None\n+    }\n+}\n+\n // Implementation of PartialEq, Eq, PartialOrd and Ord for primitive types\n mod impls {\n     use cmp::{PartialOrd, Ord, PartialEq, Eq, Ordering,"}, {"sha": "4ac3f7e931049ad937dcfce7e9f7cc97db7d6129", "filename": "src/libcoretest/cmp.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/3be6a2fba8bc3382df4b5a4f9391d9b2f28de9d1/src%2Flibcoretest%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3be6a2fba8bc3382df4b5a4f9391d9b2f28de9d1/src%2Flibcoretest%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcmp.rs?ref=3be6a2fba8bc3382df4b5a4f9391d9b2f28de9d1", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use core::cmp::lexical_ordering;\n+use core::cmp::{ partial_min, partial_max };\n \n #[test]\n fn test_int_totalord() {\n@@ -56,6 +57,72 @@ fn test_lexical_ordering() {\n      }\n }\n \n+#[test]\n+fn test_partial_min() {\n+    use core::f64::NAN;\n+    let data_integer = [\n+        // a, b, result\n+        (0i, 0i, Some(0i)),\n+        (1i, 0i, Some(0i)),\n+        (0i, 1i, Some(0i)),\n+        (-1i, 0i, Some(-1i)),\n+        (0i, -1i, Some(-1i))\n+    ];\n+\n+    let data_float = [\n+        // a, b, result\n+        (0.0f64, 0.0f64, Some(0.0f64)),\n+        (1.0f64, 0.0f64, Some(0.0f64)),\n+        (0.0f64, 1.0f64, Some(0.0f64)),\n+        (-1.0f64, 0.0f64, Some(-1.0f64)),\n+        (0.0f64, -1.0f64, Some(-1.0f64)),\n+        (NAN, NAN, None),\n+        (NAN, 1.0f64, None),\n+        (1.0f64, NAN, None)\n+    ];\n+\n+    for &(a, b, result) in data_integer.iter() {\n+        assert!(partial_min(a, b) == result);\n+    }\n+\n+    for &(a, b, result) in data_float.iter() {\n+        assert!(partial_min(a, b) == result);\n+    }\n+}\n+\n+#[test]\n+fn test_partial_max() {\n+    use core::f64::NAN;\n+    let data_integer = [\n+        // a, b, result\n+        (0i, 0i, Some(0i)),\n+        (1i, 0i, Some(1i)),\n+        (0i, 1i, Some(1i)),\n+        (-1i, 0i, Some(0i)),\n+        (0i, -1i, Some(0i))\n+    ];\n+\n+    let data_float = [\n+        // a, b, result\n+        (0.0f64, 0.0f64, Some(0.0f64)),\n+        (1.0f64, 0.0f64, Some(1.0f64)),\n+        (0.0f64, 1.0f64, Some(1.0f64)),\n+        (-1.0f64, 0.0f64, Some(0.0f64)),\n+        (0.0f64, -1.0f64, Some(0.0f64)),\n+        (NAN, NAN, None),\n+        (NAN, 1.0f64, None),\n+        (1.0f64, NAN, None)\n+    ];\n+\n+    for &(a, b, result) in data_integer.iter() {\n+        assert!(partial_max(a, b) == result);\n+    }\n+\n+    for &(a, b, result) in data_float.iter() {\n+        assert!(partial_max(a, b) == result);\n+    }\n+}\n+\n #[test]\n fn test_user_defined_eq() {\n     // Our type."}]}