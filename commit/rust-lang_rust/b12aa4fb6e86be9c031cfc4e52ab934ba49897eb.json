{"sha": "b12aa4fb6e86be9c031cfc4e52ab934ba49897eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMmFhNGZiNmU4NmJlOWMwMzFjZmM0ZTUyYWI5MzRiYTQ5ODk3ZWI=", "commit": {"author": {"name": "Jewoo Lee", "email": "shema7k@gmail.com", "date": "2019-01-24T04:38:46Z"}, "committer": {"name": "Jewoo Lee", "email": "shema7k@gmail.com", "date": "2019-01-24T04:38:46Z"}, "message": "Stabilize no_panic_pow", "tree": {"sha": "ab76328217554768227ecc953886859fa3f0c0d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab76328217554768227ecc953886859fa3f0c0d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b12aa4fb6e86be9c031cfc4e52ab934ba49897eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b12aa4fb6e86be9c031cfc4e52ab934ba49897eb", "html_url": "https://github.com/rust-lang/rust/commit/b12aa4fb6e86be9c031cfc4e52ab934ba49897eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b12aa4fb6e86be9c031cfc4e52ab934ba49897eb/comments", "author": {"login": "milesand", "id": 14255227, "node_id": "MDQ6VXNlcjE0MjU1MjI3", "avatar_url": "https://avatars.githubusercontent.com/u/14255227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/milesand", "html_url": "https://github.com/milesand", "followers_url": "https://api.github.com/users/milesand/followers", "following_url": "https://api.github.com/users/milesand/following{/other_user}", "gists_url": "https://api.github.com/users/milesand/gists{/gist_id}", "starred_url": "https://api.github.com/users/milesand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/milesand/subscriptions", "organizations_url": "https://api.github.com/users/milesand/orgs", "repos_url": "https://api.github.com/users/milesand/repos", "events_url": "https://api.github.com/users/milesand/events{/privacy}", "received_events_url": "https://api.github.com/users/milesand/received_events", "type": "User", "site_admin": false}, "committer": {"login": "milesand", "id": 14255227, "node_id": "MDQ6VXNlcjE0MjU1MjI3", "avatar_url": "https://avatars.githubusercontent.com/u/14255227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/milesand", "html_url": "https://github.com/milesand", "followers_url": "https://api.github.com/users/milesand/followers", "following_url": "https://api.github.com/users/milesand/following{/other_user}", "gists_url": "https://api.github.com/users/milesand/gists{/gist_id}", "starred_url": "https://api.github.com/users/milesand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/milesand/subscriptions", "organizations_url": "https://api.github.com/users/milesand/orgs", "repos_url": "https://api.github.com/users/milesand/repos", "events_url": "https://api.github.com/users/milesand/events{/privacy}", "received_events_url": "https://api.github.com/users/milesand/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19f8958f827e379be9b0ffc93fca580ec8ffac77", "url": "https://api.github.com/repos/rust-lang/rust/commits/19f8958f827e379be9b0ffc93fca580ec8ffac77", "html_url": "https://github.com/rust-lang/rust/commit/19f8958f827e379be9b0ffc93fca580ec8ffac77"}], "stats": {"total": 24, "additions": 8, "deletions": 16}, "files": [{"sha": "423b800d5852f98d3f75826d80c145712d7655e9", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b12aa4fb6e86be9c031cfc4e52ab934ba49897eb/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b12aa4fb6e86be9c031cfc4e52ab934ba49897eb/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=b12aa4fb6e86be9c031cfc4e52ab934ba49897eb", "patch": "@@ -847,13 +847,12 @@ overflow occurred.\n Basic usage:\n \n ```\n-#![feature(no_panic_pow)]\n \", $Feature, \"assert_eq!(8\", stringify!($SelfT), \".checked_pow(2), Some(64));\n assert_eq!(\", stringify!($SelfT), \"::max_value().checked_pow(2), None);\",\n $EndFeature, \"\n ```\"),\n \n-            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n             #[inline]\n             pub fn checked_pow(self, mut exp: u32) -> Option<Self> {\n                 let mut base = self;\n@@ -966,15 +965,14 @@ saturating at the numeric bounds instead of overflowing.\n Basic usage:\n \n ```\n-#![feature(no_panic_pow)]\n \", $Feature, \"use std::\", stringify!($SelfT), \";\n \n assert_eq!((-4\", stringify!($SelfT), \").saturating_pow(3), -64);\n assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_pow(2), \", stringify!($SelfT), \"::MAX);\n assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_pow(3), \", stringify!($SelfT), \"::MIN);\",\n $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n             #[inline]\n             pub fn saturating_pow(self, exp: u32) -> Self {\n                 match self.checked_pow(exp) {\n@@ -1297,13 +1295,12 @@ wrapping around at the boundary of the type.\n Basic usage:\n \n ```\n-#![feature(no_panic_pow)]\n \", $Feature, \"assert_eq!(3\", stringify!($SelfT), \".wrapping_pow(4), 81);\n assert_eq!(3i8.wrapping_pow(5), -13);\n assert_eq!(3i8.wrapping_pow(6), -39);\",\n $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n             #[inline]\n             pub fn wrapping_pow(self, mut exp: u32) -> Self {\n                 let mut base = self;\n@@ -1669,12 +1666,11 @@ whether an overflow happened.\n Basic usage:\n \n ```\n-#![feature(no_panic_pow)]\n \", $Feature, \"assert_eq!(3\", stringify!($SelfT), \".overflowing_pow(4), (81, false));\n assert_eq!(3i8.overflowing_pow(5), (-13, true));\",\n $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n             #[inline]\n             pub fn overflowing_pow(self, mut exp: u32) -> (Self, bool) {\n                 let mut base = self;\n@@ -2789,11 +2785,10 @@ overflow occurred.\n Basic usage:\n \n ```\n-#![feature(no_panic_pow)]\n \", $Feature, \"assert_eq!(2\", stringify!($SelfT), \".checked_pow(5), Some(32));\n assert_eq!(\", stringify!($SelfT), \"::max_value().checked_pow(2), None);\", $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n             #[inline]\n             pub fn checked_pow(self, mut exp: u32) -> Option<Self> {\n                 let mut base = self;\n@@ -2893,14 +2888,13 @@ saturating at the numeric bounds instead of overflowing.\n Basic usage:\n \n ```\n-#![feature(no_panic_pow)]\n \", $Feature, \"use std::\", stringify!($SelfT), \";\n \n assert_eq!(4\", stringify!($SelfT), \".saturating_pow(3), 64);\n assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_pow(2), \", stringify!($SelfT), \"::MAX);\",\n $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n             #[inline]\n             pub fn saturating_pow(self, exp: u32) -> Self {\n                 match self.checked_pow(exp) {\n@@ -3178,11 +3172,10 @@ wrapping around at the boundary of the type.\n Basic usage:\n \n ```\n-#![feature(no_panic_pow)]\n \", $Feature, \"assert_eq!(3\", stringify!($SelfT), \".wrapping_pow(5), 243);\n assert_eq!(3u8.wrapping_pow(6), 217);\", $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n             #[inline]\n             pub fn wrapping_pow(self, mut exp: u32) -> Self {\n                 let mut base = self;\n@@ -3497,11 +3490,10 @@ whether an overflow happened.\n Basic usage:\n \n ```\n-#![feature(no_panic_pow)]\n \", $Feature, \"assert_eq!(3\", stringify!($SelfT), \".overflowing_pow(5), (243, false));\n assert_eq!(3u8.overflowing_pow(6), (217, true));\", $EndFeature, \"\n ```\"),\n-            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[stable(feature = \"no_panic_pow\", since = \"1.34.0\")]\n             #[inline]\n             pub fn overflowing_pow(self, mut exp: u32) -> (Self, bool) {\n                 let mut base = self;"}]}