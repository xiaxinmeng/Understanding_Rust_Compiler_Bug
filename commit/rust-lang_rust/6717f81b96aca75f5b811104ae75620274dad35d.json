{"sha": "6717f81b96aca75f5b811104ae75620274dad35d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MTdmODFiOTZhY2E3NWY1YjgxMTEwNGFlNzU2MjAyNzRkYWQzNWQ=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-07T20:49:47Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-07T20:49:47Z"}, "message": "Also take unions and enums into account", "tree": {"sha": "d0cebc8b22deefcaa6879b877de2d2d5e3a99093", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0cebc8b22deefcaa6879b877de2d2d5e3a99093"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6717f81b96aca75f5b811104ae75620274dad35d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6717f81b96aca75f5b811104ae75620274dad35d", "html_url": "https://github.com/rust-lang/rust/commit/6717f81b96aca75f5b811104ae75620274dad35d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6717f81b96aca75f5b811104ae75620274dad35d/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e642f0a61b2b44cf4c4e2c174256f10520bcea1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e642f0a61b2b44cf4c4e2c174256f10520bcea1", "html_url": "https://github.com/rust-lang/rust/commit/1e642f0a61b2b44cf4c4e2c174256f10520bcea1"}], "stats": {"total": 80, "additions": 61, "deletions": 19}, "files": [{"sha": "20e8b0f6425cee73b752550b58a1a40da46d69e0", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6717f81b96aca75f5b811104ae75620274dad35d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6717f81b96aca75f5b811104ae75620274dad35d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=6717f81b96aca75f5b811104ae75620274dad35d", "patch": "@@ -1124,11 +1124,11 @@ impl<'a> Parser<'a> {\n                 if !this.recover_nested_adt_item(kw::Enum)? {\n                     return Ok((None, TrailingToken::None));\n                 }\n-                let ident = this.parse_ident()?;\n+                let ident = this.parse_field_ident(\"enum\", vlo)?;\n \n                 let struct_def = if this.check(&token::OpenDelim(token::Brace)) {\n                     // Parse a struct variant.\n-                    let (fields, recovered) = this.parse_record_struct_body()?;\n+                    let (fields, recovered) = this.parse_record_struct_body(\"struct\")?;\n                     VariantData::Struct(fields, recovered)\n                 } else if this.check(&token::OpenDelim(token::Paren)) {\n                     VariantData::Tuple(this.parse_tuple_struct_body()?, DUMMY_NODE_ID)\n@@ -1182,15 +1182,15 @@ impl<'a> Parser<'a> {\n                 VariantData::Unit(DUMMY_NODE_ID)\n             } else {\n                 // If we see: `struct Foo<T> where T: Copy { ... }`\n-                let (fields, recovered) = self.parse_record_struct_body()?;\n+                let (fields, recovered) = self.parse_record_struct_body(\"struct\")?;\n                 VariantData::Struct(fields, recovered)\n             }\n         // No `where` so: `struct Foo<T>;`\n         } else if self.eat(&token::Semi) {\n             VariantData::Unit(DUMMY_NODE_ID)\n         // Record-style struct definition\n         } else if self.token == token::OpenDelim(token::Brace) {\n-            let (fields, recovered) = self.parse_record_struct_body()?;\n+            let (fields, recovered) = self.parse_record_struct_body(\"struct\")?;\n             VariantData::Struct(fields, recovered)\n         // Tuple-style struct definition with optional where-clause.\n         } else if self.token == token::OpenDelim(token::Paren) {\n@@ -1220,10 +1220,10 @@ impl<'a> Parser<'a> {\n \n         let vdata = if self.token.is_keyword(kw::Where) {\n             generics.where_clause = self.parse_where_clause()?;\n-            let (fields, recovered) = self.parse_record_struct_body()?;\n+            let (fields, recovered) = self.parse_record_struct_body(\"union\")?;\n             VariantData::Struct(fields, recovered)\n         } else if self.token == token::OpenDelim(token::Brace) {\n-            let (fields, recovered) = self.parse_record_struct_body()?;\n+            let (fields, recovered) = self.parse_record_struct_body(\"union\")?;\n             VariantData::Struct(fields, recovered)\n         } else {\n             let token_str = super::token_descr(&self.token);\n@@ -1236,12 +1236,15 @@ impl<'a> Parser<'a> {\n         Ok((class_name, ItemKind::Union(vdata, generics)))\n     }\n \n-    fn parse_record_struct_body(&mut self) -> PResult<'a, (Vec<FieldDef>, /* recovered */ bool)> {\n+    fn parse_record_struct_body(\n+        &mut self,\n+        adt_ty: &str,\n+    ) -> PResult<'a, (Vec<FieldDef>, /* recovered */ bool)> {\n         let mut fields = Vec::new();\n         let mut recovered = false;\n         if self.eat(&token::OpenDelim(token::Brace)) {\n             while self.token != token::CloseDelim(token::Brace) {\n-                let field = self.parse_field_def().map_err(|e| {\n+                let field = self.parse_field_def(adt_ty).map_err(|e| {\n                     self.consume_block(token::Brace, ConsumeClosingDelim::No);\n                     recovered = true;\n                     e\n@@ -1294,24 +1297,25 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses an element of a struct declaration.\n-    fn parse_field_def(&mut self) -> PResult<'a, FieldDef> {\n+    fn parse_field_def(&mut self, adt_ty: &str) -> PResult<'a, FieldDef> {\n         let attrs = self.parse_outer_attributes()?;\n         self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {\n             let lo = this.token.span;\n             let vis = this.parse_visibility(FollowedByType::No)?;\n-            Ok((this.parse_single_struct_field(lo, vis, attrs)?, TrailingToken::None))\n+            Ok((this.parse_single_struct_field(adt_ty, lo, vis, attrs)?, TrailingToken::None))\n         })\n     }\n \n     /// Parses a structure field declaration.\n     fn parse_single_struct_field(\n         &mut self,\n+        adt_ty: &str,\n         lo: Span,\n         vis: Visibility,\n         attrs: Vec<Attribute>,\n     ) -> PResult<'a, FieldDef> {\n         let mut seen_comma: bool = false;\n-        let a_var = self.parse_name_and_ty(lo, vis, attrs)?;\n+        let a_var = self.parse_name_and_ty(adt_ty, lo, vis, attrs)?;\n         if self.token == token::Comma {\n             seen_comma = true;\n         }\n@@ -1398,11 +1402,12 @@ impl<'a> Parser<'a> {\n     /// Parses a structure field.\n     fn parse_name_and_ty(\n         &mut self,\n+        adt_ty: &str,\n         lo: Span,\n         vis: Visibility,\n         attrs: Vec<Attribute>,\n     ) -> PResult<'a, FieldDef> {\n-        let name = self.parse_field_ident(lo)?;\n+        let name = self.parse_field_ident(adt_ty, lo)?;\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n         Ok(FieldDef {\n@@ -1418,14 +1423,14 @@ impl<'a> Parser<'a> {\n \n     /// Parses a field identifier. Specialized version of `parse_ident_common`\n     /// for better diagnostics and suggestions.\n-    fn parse_field_ident(&mut self, lo: Span) -> PResult<'a, Ident> {\n+    fn parse_field_ident(&mut self, adt_ty: &str, lo: Span) -> PResult<'a, Ident> {\n         let (ident, is_raw) = self.ident_or_err()?;\n         if !is_raw && ident.is_reserved() {\n             let err = if self.check_fn_front_matter(false) {\n                 let _ = self.parse_fn(&mut Vec::new(), |_| true, lo);\n                 let mut err = self.struct_span_err(\n                     lo.to(self.prev_token.span),\n-                    \"functions are not allowed in struct definitions\",\n+                    &format!(\"functions are not allowed in {} definitions\", adt_ty),\n                 );\n                 err.help(\"unlike in C++, Java, and C#, functions are declared in `impl` blocks\");\n                 err.help(\"see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\");"}, {"sha": "5ae1b727dc772f44054ae2a90b00433479216d24", "filename": "src/test/ui/structs/struct-fn-in-definition.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6717f81b96aca75f5b811104ae75620274dad35d/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6717f81b96aca75f5b811104ae75620274dad35d/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.rs?ref=6717f81b96aca75f5b811104ae75620274dad35d", "patch": "@@ -5,10 +5,29 @@\n \n struct S {\n     field: usize,\n-    fn do_something() {}\n+\n+    fn foo() {}\n     //~^ ERROR functions are not allowed in struct definitions\n     //~| HELP unlike in C++, Java, and C#, functions are declared in `impl` blocks\n     //~| HELP see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\n }\n \n+union U {\n+    variant: usize,\n+\n+    fn foo() {}\n+    //~^ ERROR functions are not allowed in union definitions\n+    //~| HELP unlike in C++, Java, and C#, functions are declared in `impl` blocks\n+    //~| HELP see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\n+}\n+\n+enum E {\n+    Variant,\n+\n+    fn foo() {}\n+    //~^ ERROR functions are not allowed in enum definitions\n+    //~| HELP unlike in C++, Java, and C#, functions are declared in `impl` blocks\n+    //~| HELP see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\n+}\n+\n fn main() {}"}, {"sha": "1d7cd5272958659f729c2889b6898367c7db5dcd", "filename": "src/test/ui/structs/struct-fn-in-definition.stderr", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6717f81b96aca75f5b811104ae75620274dad35d/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6717f81b96aca75f5b811104ae75620274dad35d/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-fn-in-definition.stderr?ref=6717f81b96aca75f5b811104ae75620274dad35d", "patch": "@@ -1,11 +1,29 @@\n error: functions are not allowed in struct definitions\n-  --> $DIR/struct-fn-in-definition.rs:5:5\n+  --> $DIR/struct-fn-in-definition.rs:9:5\n    |\n-LL |     fn do_something() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+LL |     fn foo() {}\n+   |     ^^^^^^^^^^^\n    |\n    = help: unlike in C++, Java, and C#, functions are declared in `impl` blocks\n    = help: see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\n \n-error: aborting due to previous error\n+error: functions are not allowed in union definitions\n+  --> $DIR/struct-fn-in-definition.rs:18:5\n+   |\n+LL |     fn foo() {}\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: unlike in C++, Java, and C#, functions are declared in `impl` blocks\n+   = help: see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\n+\n+error: functions are not allowed in enum definitions\n+  --> $DIR/struct-fn-in-definition.rs:27:5\n+   |\n+LL |     fn foo() {}\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: unlike in C++, Java, and C#, functions are declared in `impl` blocks\n+   = help: see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\n+\n+error: aborting due to 3 previous errors\n "}]}