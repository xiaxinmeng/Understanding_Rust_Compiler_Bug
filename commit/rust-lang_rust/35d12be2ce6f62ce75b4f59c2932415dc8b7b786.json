{"sha": "35d12be2ce6f62ce75b4f59c2932415dc8b7b786", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZDEyYmUyY2U2ZjYyY2U3NWI0ZjU5YzI5MzI0MTVkYzhiN2I3ODY=", "commit": {"author": {"name": "Graham Fawcett", "email": "fawcett@uwindsor.ca", "date": "2012-01-18T20:18:26Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-21T21:31:12Z"}, "message": "fix #1352: change param order on vec::init_fn (and vec::init_fn_mut), putting block in final position.", "tree": {"sha": "408b7bd64a8cdfd53a36a88f1867b93514b6928b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/408b7bd64a8cdfd53a36a88f1867b93514b6928b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35d12be2ce6f62ce75b4f59c2932415dc8b7b786", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35d12be2ce6f62ce75b4f59c2932415dc8b7b786", "html_url": "https://github.com/rust-lang/rust/commit/35d12be2ce6f62ce75b4f59c2932415dc8b7b786", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35d12be2ce6f62ce75b4f59c2932415dc8b7b786/comments", "author": {"login": "gmfawcett", "id": 49970, "node_id": "MDQ6VXNlcjQ5OTcw", "avatar_url": "https://avatars.githubusercontent.com/u/49970?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gmfawcett", "html_url": "https://github.com/gmfawcett", "followers_url": "https://api.github.com/users/gmfawcett/followers", "following_url": "https://api.github.com/users/gmfawcett/following{/other_user}", "gists_url": "https://api.github.com/users/gmfawcett/gists{/gist_id}", "starred_url": "https://api.github.com/users/gmfawcett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gmfawcett/subscriptions", "organizations_url": "https://api.github.com/users/gmfawcett/orgs", "repos_url": "https://api.github.com/users/gmfawcett/repos", "events_url": "https://api.github.com/users/gmfawcett/events{/privacy}", "received_events_url": "https://api.github.com/users/gmfawcett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "818b646950e69410c6328a1fe914e7a4edf6de72", "url": "https://api.github.com/repos/rust-lang/rust/commits/818b646950e69410c6328a1fe914e7a4edf6de72", "html_url": "https://github.com/rust-lang/rust/commit/818b646950e69410c6328a1fe914e7a4edf6de72"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "bc6cd6ee14bd8dcc79d2e95d3c7d22cb4bba6cbe", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35d12be2ce6f62ce75b4f59c2932415dc8b7b786/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35d12be2ce6f62ce75b4f59c2932415dc8b7b786/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=35d12be2ce6f62ce75b4f59c2932415dc8b7b786", "patch": "@@ -142,7 +142,7 @@ fn instantiate_path(fcx: @fn_ctxt, pth: @ast::path,\n                     tpt: ty_param_bounds_and_ty, sp: span)\n     -> ty_param_substs_opt_and_ty {\n     let ty_param_count = vec::len(*tpt.bounds);\n-    let vars = vec::init_fn({|_i| next_ty_var(fcx)}, ty_param_count);\n+    let vars = vec::init_fn(ty_param_count, {|_i| next_ty_var(fcx)});\n     let ty_substs_len = vec::len(pth.node.types);\n     if ty_substs_len > 0u {\n         let param_var_len = vec::len(vars);\n@@ -611,9 +611,9 @@ fn compare_impl_method(tcx: ty::ctxt, sp: span, impl_m: ty::method,\n     } else {\n         let impl_fty = ty::mk_fn(tcx, impl_m.fty);\n         // Add dummy substs for the parameters of the impl method\n-        let substs = substs + vec::init_fn({|i|\n+        let substs = substs + vec::init_fn(vec::len(*if_m.tps), {|i|\n             ty::mk_param(tcx, i + impl_tps, {crate: 0, node: 0})\n-        }, vec::len(*if_m.tps));\n+        });\n         let if_fty = ty::substitute_type_params(tcx, substs,\n                                                 ty::mk_fn(tcx, if_m.fty));\n         alt ty::unify::unify(impl_fty, if_fty, ty::unify::precise, tcx) {\n@@ -2334,7 +2334,7 @@ fn next_ty_var(fcx: @fn_ctxt) -> ty::t {\n \n fn bind_params(fcx: @fn_ctxt, tp: ty::t, count: uint)\n     -> {vars: [ty::t], ty: ty::t} {\n-    let vars = vec::init_fn({|_i| next_ty_var(fcx)}, count);\n+    let vars = vec::init_fn(count, {|_i| next_ty_var(fcx)});\n     {vars: vars, ty: ty::substitute_type_params(fcx.ccx.tcx, vars, tp)}\n }\n "}, {"sha": "918b99d1b8a7083d25e69d21abb8d7041f42568f", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/35d12be2ce6f62ce75b4f59c2932415dc8b7b786/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35d12be2ce6f62ce75b4f59c2932415dc8b7b786/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=35d12be2ce6f62ce75b4f59c2932415dc8b7b786", "patch": "@@ -88,7 +88,7 @@ Creates and initializes an immutable vector.\n Creates an immutable vector of size `n_elts` and initializes the elements\n to the value returned by the function `op`.\n */\n-fn init_fn<T>(op: init_op<T>, n_elts: uint) -> [T] {\n+fn init_fn<T>(n_elts: uint, op: init_op<T>) -> [T] {\n     let v = [];\n     reserve(v, n_elts);\n     let i: uint = 0u;\n@@ -105,7 +105,7 @@ Creates and initializes a mutable vector.\n Creates a mutable vector of size `n_elts` and initializes the elements to\n the value returned by the function `op`.\n */\n-fn init_fn_mut<T>(op: init_op<T>, n_elts: uint) -> [mutable T] {\n+fn init_fn_mut<T>(n_elts: uint, op: init_op<T>) -> [mutable T] {\n     let v = [mutable];\n     reserve(v, n_elts);\n     let i: uint = 0u;\n@@ -365,13 +365,13 @@ Function: grow_fn\n Expands a vector in place, initializing the new elements to the result of a\n function\n \n-Function `init_fn` is called `n` times with the values [0..`n`)\n+Function `init_op` is called `n` times with the values [0..`n`)\n \n Parameters:\n \n v - The vector to grow\n n - The number of elements to add\n-init_fn - A function to call to retreive each appended element's value\n+init_op - A function to call to retreive each appended element's value\n */\n fn grow_fn<T>(&v: [T], n: uint, op: init_op<T>) {\n     reserve(v, next_power_of_two(len(v) + n));\n@@ -1026,14 +1026,14 @@ mod tests {\n     #[test]\n     fn test_init_fn() {\n         // Test on-stack init_fn.\n-        let v = init_fn(square, 3u);\n+        let v = init_fn(3u, square);\n         assert (len(v) == 3u);\n         assert (v[0] == 0u);\n         assert (v[1] == 1u);\n         assert (v[2] == 4u);\n \n         // Test on-heap init_fn.\n-        v = init_fn(square, 5u);\n+        v = init_fn(5u, square);\n         assert (len(v) == 5u);\n         assert (v[0] == 0u);\n         assert (v[1] == 1u);"}, {"sha": "8296398c9e6851efcf328680cef063aa385f6b69", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35d12be2ce6f62ce75b4f59c2932415dc8b7b786/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35d12be2ce6f62ce75b4f59c2932415dc8b7b786/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=35d12be2ce6f62ce75b4f59c2932415dc8b7b786", "patch": "@@ -267,7 +267,7 @@ in the resulting vector has either value 0u or 1u.\n */\n fn to_vec(v: t) -> [uint] {\n     let sub = bind init_to_vec(v, _);\n-    ret vec::init_fn::<uint>(sub, v.nbits);\n+    ret vec::init_fn::<uint>(v.nbits, sub);\n }\n \n /*"}, {"sha": "b870dde34c6ec404e17640ecd31a6ed744e3e220", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35d12be2ce6f62ce75b4f59c2932415dc8b7b786/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35d12be2ce6f62ce75b4f59c2932415dc8b7b786/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=35d12be2ce6f62ce75b4f59c2932415dc8b7b786", "patch": "@@ -212,7 +212,7 @@ err(fail_) - On failure. Use <fail_str> to get an error message.\n fn getopts(args: [str], opts: [opt]) -> result {\n     let n_opts = vec::len::<opt>(opts);\n     fn f(_x: uint) -> [optval] { ret []; }\n-    let vals = vec::init_fn_mut::<[optval]>(f, n_opts);\n+    let vals = vec::init_fn_mut::<[optval]>(n_opts, f);\n     let free: [str] = [];\n     let l = vec::len(args);\n     let i = 0u;"}, {"sha": "fce617b8d658f21c4e1ad36a03838c4db2570e06", "filename": "src/test/bench/shootout-fannkuchredux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35d12be2ce6f62ce75b4f59c2932415dc8b7b786/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35d12be2ce6f62ce75b4f59c2932415dc8b7b786/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs?ref=35d12be2ce6f62ce75b4f59c2932415dc8b7b786", "patch": "@@ -7,7 +7,7 @@ fn fannkuch(n: int) -> int {\n     fn perm1init(i: uint) -> int { ret i as int; }\n \n     let perm = vec::init_elt_mut(0, n as uint);\n-    let perm1 = vec::init_fn_mut(perm1init, n as uint);\n+    let perm1 = vec::init_fn_mut(n as uint, perm1init);\n     let count = vec::init_elt_mut(0, n as uint);\n     let f = 0;\n     let i = 0;"}, {"sha": "e656bb650c5ea8eb4a2dad8d0707edf54941e074", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35d12be2ce6f62ce75b4f59c2932415dc8b7b786/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35d12be2ce6f62ce75b4f59c2932415dc8b7b786/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=35d12be2ce6f62ce75b4f59c2932415dc8b7b786", "patch": "@@ -31,7 +31,7 @@ enum grid_t { grid_ctor(grid), }\n fn read_grid(f: io::reader) -> grid_t {\n     assert f.read_line() == \"9,9\"; /* assert first line is exactly \"9,9\" */\n \n-    let g = vec::init_fn({|_i| vec::init_elt_mut(0 as u8, 10u) }, 10u);\n+    let g = vec::init_fn(10u, {|_i| vec::init_elt_mut(0 as u8, 10u) });\n     while !f.eof() {\n         // FIXME: replace with unicode compliant call\n         let comps = str::split(str::trim(f.read_line()), ',' as u8);\n@@ -130,7 +130,7 @@ fn write_grid(f: io::writer, g: grid_t) {\n fn main(args: [str]) {\n     let grid = if vec::len(args) == 1u {\n         // FIXME create sudoku inline since nested vec consts dont work yet\n-        let g = vec::init_fn({|_i| vec::init_elt_mut(0 as u8, 10u) }, 10u);\n+        let g = vec::init_fn(10u, {|_i| vec::init_elt_mut(0 as u8, 10u) });\n         g[0][1] = 4u8;\n         g[0][3] = 6u8;\n         g[0][7] = 3u8;"}]}