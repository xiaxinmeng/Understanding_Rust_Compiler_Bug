{"sha": "b9d85f55b7a0a2159971b42bb5dae71efbfeada4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ZDg1ZjU1YjdhMGEyMTU5OTcxYjQyYmI1ZGFlNzFlZmJmZWFkYTQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-21T12:59:49Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-21T13:00:53Z"}, "message": "Move out completion type position tests", "tree": {"sha": "ebfd374c1ae86a02cb9e51769d36f03fdeaf5977", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebfd374c1ae86a02cb9e51769d36f03fdeaf5977"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9d85f55b7a0a2159971b42bb5dae71efbfeada4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9d85f55b7a0a2159971b42bb5dae71efbfeada4", "html_url": "https://github.com/rust-lang/rust/commit/b9d85f55b7a0a2159971b42bb5dae71efbfeada4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9d85f55b7a0a2159971b42bb5dae71efbfeada4/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f835279b3ae41644e9568187b4468cd9d9e84eca", "url": "https://api.github.com/repos/rust-lang/rust/commits/f835279b3ae41644e9568187b4468cd9d9e84eca", "html_url": "https://github.com/rust-lang/rust/commit/f835279b3ae41644e9568187b4468cd9d9e84eca"}], "stats": {"total": 404, "additions": 198, "deletions": 206}, "files": [{"sha": "1b8997ecf37b9234d16181f616aa5ae6eb7a6095", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/b9d85f55b7a0a2159971b42bb5dae71efbfeada4/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d85f55b7a0a2159971b42bb5dae71efbfeada4/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=b9d85f55b7a0a2159971b42bb5dae71efbfeada4", "patch": "@@ -218,36 +218,6 @@ mod tests {\n         expect.assert_eq(&actual);\n     }\n \n-    #[test]\n-    fn dont_complete_values_in_type_pos() {\n-        check(\n-            r#\"\n-const FOO: () = ();\n-static BAR: () = ();\n-struct Baz;\n-fn foo() {\n-    let _: self::$0;\n-}\n-\"#,\n-            expect![[r#\"\n-                st Baz\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn dont_complete_enum_variants_in_type_pos() {\n-        check(\n-            r#\"\n-enum Foo { Bar }\n-fn foo() {\n-    let _: Foo::$0;\n-}\n-\"#,\n-            expect![[r#\"\"#]],\n-        );\n-    }\n-\n     #[test]\n     fn dont_complete_primitive_in_use() {\n         check_builtin(r#\"use self::$0;\"#, expect![[\"\"]]);\n@@ -258,32 +228,6 @@ fn foo() {\n         check_builtin(r#\"fn foo() { self::$0 }\"#, expect![[\"\"]]);\n     }\n \n-    #[test]\n-    fn completes_primitives() {\n-        check_builtin(\n-            r#\"fn main() { let _: $0 = 92; }\"#,\n-            expect![[r#\"\n-                bt u32\n-                bt bool\n-                bt u8\n-                bt isize\n-                bt u16\n-                bt u64\n-                bt u128\n-                bt f32\n-                bt i128\n-                bt i16\n-                bt str\n-                bt i64\n-                bt char\n-                bt f64\n-                bt i32\n-                bt i8\n-                bt usize\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn completes_enum_variant() {\n         check(\n@@ -749,24 +693,4 @@ fn main() {\n             \"#]],\n         );\n     }\n-\n-    #[test]\n-    fn completes_types_and_const_in_arg_list() {\n-        check(\n-            r#\"\n-mod foo {\n-    pub const CONST: () = ();\n-    pub type Type = ();\n-}\n-\n-struct Foo<T>(t);\n-\n-fn foo(_: Foo<foo::$0>) {}\n-\"#,\n-            expect![[r#\"\n-                ta Type\n-                ct CONST\n-            \"#]],\n-        );\n-    }\n }"}, {"sha": "380c1e07977916d14e05742277be18601ea73e0e", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/b9d85f55b7a0a2159971b42bb5dae71efbfeada4/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d85f55b7a0a2159971b42bb5dae71efbfeada4/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=b9d85f55b7a0a2159971b42bb5dae71efbfeada4", "patch": "@@ -112,28 +112,6 @@ mod tests {\n         expect.assert_eq(&actual)\n     }\n \n-    #[test]\n-    fn dont_complete_values_in_type_pos() {\n-        check(\n-            r#\"\n-const FOO: () = ();\n-static BAR: () = ();\n-enum Foo {\n-    Bar\n-}\n-struct Baz;\n-fn foo() {\n-    let local = ();\n-    let _: $0;\n-}\n-\"#,\n-            expect![[r#\"\n-                en Foo\n-                st Baz\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn completes_bindings_from_let() {\n         check(\n@@ -238,29 +216,6 @@ fn main() {\n         );\n     }\n \n-    #[test]\n-    fn completes_generic_params_in_struct() {\n-        check(\n-            r#\"struct S<T> { x: $0}\"#,\n-            expect![[r#\"\n-                sp Self\n-                tp T\n-                st S<\u2026>\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn completes_self_in_enum() {\n-        check(\n-            r#\"enum X { Y($0) }\"#,\n-            expect![[r#\"\n-                sp Self\n-                en X\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn completes_module_items() {\n         check(\n@@ -314,19 +269,6 @@ mod m {\n         );\n     }\n \n-    #[test]\n-    fn completes_return_type() {\n-        check(\n-            r#\"\n-struct Foo;\n-fn x() -> $0\n-\"#,\n-            expect![[r#\"\n-                st Foo\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn dont_show_both_completions_for_shadowing() {\n         check(\n@@ -508,19 +450,6 @@ fn foo() { $0 }\n         );\n     }\n \n-    #[test]\n-    fn completes_macros_as_type() {\n-        check(\n-            r#\"\n-macro_rules! foo { () => {} }\n-fn main() { let x: $0 }\n-\"#,\n-            expect![[r#\"\n-                ma foo!(\u2026) macro_rules! foo\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn completes_macros_as_stmt() {\n         check(\n@@ -666,30 +595,4 @@ fn f() {}\n             expect![[\"\"]],\n         )\n     }\n-\n-    #[test]\n-    fn completes_types_and_const_in_arg_list() {\n-        check(\n-            r#\"\n-enum Bar {\n-    Baz\n-}\n-trait Foo {\n-    type Bar;\n-}\n-\n-const CONST: () = ();\n-\n-fn foo<T: Foo<$0>, const CONST_PARAM: usize>(_: T) {}\n-\"#,\n-            expect![[r#\"\n-                ta Bar =       type Bar;\n-                tp T\n-                cp CONST_PARAM\n-                tt Foo\n-                en Bar\n-                ct CONST\n-            \"#]],\n-        );\n-    }\n }"}, {"sha": "97298ff27d05e4bdf0ffbf7100a8794f510fc0eb", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b9d85f55b7a0a2159971b42bb5dae71efbfeada4/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d85f55b7a0a2159971b42bb5dae71efbfeada4/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=b9d85f55b7a0a2159971b42bb5dae71efbfeada4", "patch": "@@ -8,6 +8,9 @@ mod item_list;\n mod use_tree;\n mod items;\n mod pattern;\n+mod type_pos;\n+\n+use std::mem;\n \n use hir::{PrefixKind, Semantics};\n use ide_db::{\n@@ -46,7 +49,16 @@ pub(crate) fn completion_list(code: &str) -> String {\n }\n \n fn completion_list_with_config(config: CompletionConfig, code: &str) -> String {\n-    render_completion_list(get_all_items(config, code))\n+    // filter out all but one builtintype completion for smaller test outputs\n+    let items = get_all_items(config, code);\n+    let mut bt_seen = false;\n+    let items = items\n+        .into_iter()\n+        .filter(|it| {\n+            it.completion_kind != CompletionKind::BuiltinType || !mem::replace(&mut bt_seen, true)\n+        })\n+        .collect();\n+    render_completion_list(items)\n }\n \n /// Creates analysis from a multi-file fixture, returns positions marked with $0."}, {"sha": "b98baffd6cea47dd60ad7a65ddcb6b32a163cb77", "filename": "crates/ide_completion/src/tests/items.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b9d85f55b7a0a2159971b42bb5dae71efbfeada4/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d85f55b7a0a2159971b42bb5dae71efbfeada4/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs?ref=b9d85f55b7a0a2159971b42bb5dae71efbfeada4", "patch": "@@ -35,22 +35,6 @@ impl Tra$0\n             ma foo!(\u2026) #[macro_export] macro_rules! foo\n             ma foo!(\u2026) #[macro_export] macro_rules! foo\n             bt u32\n-            bt bool\n-            bt u8\n-            bt isize\n-            bt u16\n-            bt u64\n-            bt u128\n-            bt f32\n-            bt i128\n-            bt i16\n-            bt str\n-            bt i64\n-            bt char\n-            bt f64\n-            bt i32\n-            bt i8\n-            bt usize\n         \"##]],\n     )\n }\n@@ -69,22 +53,6 @@ impl Trait for Str$0\n             ma foo!(\u2026) #[macro_export] macro_rules! foo\n             ma foo!(\u2026) #[macro_export] macro_rules! foo\n             bt u32\n-            bt bool\n-            bt u8\n-            bt isize\n-            bt u16\n-            bt u64\n-            bt u128\n-            bt f32\n-            bt i128\n-            bt i16\n-            bt str\n-            bt i64\n-            bt char\n-            bt f64\n-            bt i32\n-            bt i8\n-            bt usize\n         \"##]],\n     )\n }"}, {"sha": "2bfecdd081f7a743f5777ce9f4cbbfe25c8996a7", "filename": "crates/ide_completion/src/tests/type_pos.rs", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/b9d85f55b7a0a2159971b42bb5dae71efbfeada4/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d85f55b7a0a2159971b42bb5dae71efbfeada4/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=b9d85f55b7a0a2159971b42bb5dae71efbfeada4", "patch": "@@ -0,0 +1,185 @@\n+//! Completions tests for type position.\n+use expect_test::{expect, Expect};\n+\n+use crate::tests::completion_list;\n+\n+fn check_with(ra_fixture: &str, expect: Expect) {\n+    let base = r#\"\n+enum Enum { TupleV(u32), RecordV { field: u32 }, UnitV }\n+use self::Enum::TupleV;\n+mod module {}\n+\n+trait Trait {}\n+static STATIC: Unit = Unit;\n+const CONST: Unit = Unit;\n+struct Record { field: u32 }\n+struct Tuple(u32);\n+struct Unit\n+macro_rules! makro {}\n+\"#;\n+    let actual = completion_list(&format!(\"{}\\n{}\", base, ra_fixture));\n+    expect.assert_eq(&actual)\n+}\n+\n+#[test]\n+fn record_field_ty() {\n+    // FIXME: pub shouldnt show up here\n+    check_with(\n+        r#\"\n+struct Foo<'lt, T, const C: usize> {\n+    f: $0\n+}\n+\"#,\n+        expect![[r#\"\n+            kw pub(crate)\n+            kw pub\n+            sp Self\n+            tp T\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            st Foo<\u2026>\n+            st Unit\n+            ma makro!(\u2026)  macro_rules! makro\n+            bt u32\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn tuple_struct_field() {\n+    // FIXME: pub should show up here\n+    check_with(\n+        r#\"\n+struct Foo<'lt, T, const C: usize>(f$0);\n+\"#,\n+        expect![[r#\"\n+            sp Self\n+            tp T\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            st Foo<\u2026>\n+            st Unit\n+            ma makro!(\u2026) macro_rules! makro\n+            bt u32\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn fn_return_type() {\n+    // FIXME: return shouldnt show up here\n+    check_with(\n+        r#\"\n+fn x<'lt, T, const C: usize>() -> $0\n+\"#,\n+        expect![[r#\"\n+            kw return\n+            tp T\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            st Unit\n+            ma makro!(\u2026) macro_rules! makro\n+            bt u32\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn body_type_pos() {\n+    // FIXME: return shouldnt show up here\n+    check_with(\n+        r#\"\n+fn foo<'lt, T, const C: usize>() {\n+    let local = ();\n+    let _: $0;\n+}\n+\"#,\n+        expect![[r#\"\n+            kw return\n+            tp T\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            st Unit\n+            ma makro!(\u2026) macro_rules! makro\n+            bt u32\n+        \"#]],\n+    );\n+    check_with(\n+        r#\"\n+fn foo<'lt, T, const C: usize>() {\n+    let local = ();\n+    let _: self::$0;\n+}\n+\"#,\n+        expect![[r#\"\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            st Unit\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn completes_types_and_const_in_arg_list() {\n+    // FIXME: return shouldnt show up here\n+    // FIXME: we should complete the lifetime here for now\n+    check_with(\n+        r#\"\n+trait Trait2 {\n+    type Foo;\n+}\n+\n+fn foo<'lt, T: Trait2<$0>, const CONST_PARAM: usize>(_: T) {}\n+\"#,\n+        expect![[r#\"\n+            kw return\n+            ta Foo =       type Foo;\n+            tp T\n+            cp CONST_PARAM\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            tt Trait2\n+            md module\n+            st Unit\n+            ct CONST\n+            ma makro!(\u2026)   macro_rules! makro\n+            bt u32\n+        \"#]],\n+    );\n+    check_with(\n+        r#\"\n+trait Trait2 {\n+    type Foo;\n+}\n+\n+fn foo<'lt, T: Trait2<self::$0>, const CONST_PARAM: usize>(_: T) {}\n+    \"#,\n+        expect![[r#\"\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            tt Trait2\n+            md module\n+            st Unit\n+            ct CONST\n+        \"#]],\n+    );\n+}"}]}