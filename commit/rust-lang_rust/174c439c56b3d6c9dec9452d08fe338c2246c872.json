{"sha": "174c439c56b3d6c9dec9452d08fe338c2246c872", "node_id": "C_kwDOAAsO6NoAKDE3NGM0MzljNTZiM2Q2YzlkZWM5NDUyZDA4ZmUzMzhjMjI0NmM4NzI", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-01-02T16:03:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2022-01-02T16:03:38Z"}, "message": "minor: drop dead code", "tree": {"sha": "a06f648b83ba1f5b850bd73b70eadd29141db89c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a06f648b83ba1f5b850bd73b70eadd29141db89c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/174c439c56b3d6c9dec9452d08fe338c2246c872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/174c439c56b3d6c9dec9452d08fe338c2246c872", "html_url": "https://github.com/rust-lang/rust/commit/174c439c56b3d6c9dec9452d08fe338c2246c872", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/174c439c56b3d6c9dec9452d08fe338c2246c872/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e34a5e2e997c7478a6b97897c6c603a50ed5f39", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e34a5e2e997c7478a6b97897c6c603a50ed5f39", "html_url": "https://github.com/rust-lang/rust/commit/2e34a5e2e997c7478a6b97897c6c603a50ed5f39"}], "stats": {"total": 19, "additions": 3, "deletions": 16}, "files": [{"sha": "c88b5639f06329487f13d1f105534f5ff7ba28bf", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/174c439c56b3d6c9dec9452d08fe338c2246c872/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/174c439c56b3d6c9dec9452d08fe338c2246c872/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=174c439c56b3d6c9dec9452d08fe338c2246c872", "patch": "@@ -215,6 +215,8 @@ fn parse_or_expand(db: &dyn AstDatabase, file_id: HirFileId) -> Option<SyntaxNod\n     match file_id.0 {\n         HirFileIdRepr::FileId(file_id) => Some(db.parse(file_id).tree().syntax().clone()),\n         HirFileIdRepr::MacroFile(macro_file) => {\n+            // FIXME: Note how we convert from `Parse` to `SyntaxNode` here,\n+            // forgetting about parse errors.\n             db.parse_macro_expansion(macro_file).value.map(|(it, _)| it.syntax_node())\n         }\n     }"}, {"sha": "172ef26724ad7e5669fc5ffa7404362a7bf7c14f", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/174c439c56b3d6c9dec9452d08fe338c2246c872/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/174c439c56b3d6c9dec9452d08fe338c2246c872/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=174c439c56b3d6c9dec9452d08fe338c2246c872", "patch": "@@ -1,7 +1,7 @@\n //! Conversions between [`SyntaxNode`] and [`tt::TokenTree`].\n \n use rustc_hash::{FxHashMap, FxHashSet};\n-use stdx::{never, non_empty_vec::NonEmptyVec};\n+use stdx::non_empty_vec::NonEmptyVec;\n use syntax::{\n     ast::{self, make::tokens::doc_comment},\n     AstToken, Parse, PreorderWithTokens, SmolStr, SyntaxElement, SyntaxKind,\n@@ -66,10 +66,6 @@ pub fn token_tree_to_syntax_node(\n             parser::Step::Error { msg } => tree_sink.error(msg.to_string()),\n         }\n     }\n-    if never!(tree_sink.roots.len() != 1) {\n-        return Err(ExpandError::ConversionError);\n-    }\n-    //FIXME: would be cool to report errors\n     let (parse, range_map) = tree_sink.finish();\n     Ok((parse, range_map))\n }\n@@ -614,10 +610,6 @@ struct TtTreeSink<'a> {\n     text_pos: TextSize,\n     inner: SyntaxTreeBuilder,\n     token_map: TokenMap,\n-\n-    // Number of roots\n-    // Use for detect ill-form tree which is not single root\n-    roots: smallvec::SmallVec<[usize; 1]>,\n }\n \n impl<'a> TtTreeSink<'a> {\n@@ -628,7 +620,6 @@ impl<'a> TtTreeSink<'a> {\n             open_delims: FxHashMap::default(),\n             text_pos: 0.into(),\n             inner: SyntaxTreeBuilder::default(),\n-            roots: smallvec::SmallVec::new(),\n             token_map: TokenMap::default(),\n         }\n     }\n@@ -733,16 +724,10 @@ impl<'a> TtTreeSink<'a> {\n \n     fn start_node(&mut self, kind: SyntaxKind) {\n         self.inner.start_node(kind);\n-\n-        match self.roots.last_mut() {\n-            None | Some(0) => self.roots.push(1),\n-            Some(n) => *n += 1,\n-        };\n     }\n \n     fn finish_node(&mut self) {\n         self.inner.finish_node();\n-        *self.roots.last_mut().unwrap() -= 1;\n     }\n \n     fn error(&mut self, error: String) {"}]}