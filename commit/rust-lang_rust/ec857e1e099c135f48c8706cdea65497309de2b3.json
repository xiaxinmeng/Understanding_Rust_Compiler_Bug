{"sha": "ec857e1e099c135f48c8706cdea65497309de2b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjODU3ZTFlMDk5YzEzNWY0OGM4NzA2Y2RlYTY1NDk3MzA5ZGUyYjM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-29T09:32:11Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:13Z"}, "message": "Deduplicate code in rustdoc", "tree": {"sha": "7396cc88eca58636e93429a25d423d3c1f3140bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7396cc88eca58636e93429a25d423d3c1f3140bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec857e1e099c135f48c8706cdea65497309de2b3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53UACgkQpp+NIls6\n19lQFRAAt2KnA7fVyY+On8DTSQw7+6alU5xDB0uUN3mBrvDr0pJ2poFeVHb5qYAg\nRPYUNExmKKa86AI9vpCkNW0EmSx/ZIpOlkxnlGWLzohLDGNRdrpdvKUmJhLyVOtu\nuZXScJD8kbr1cQp1XsInoKUZkXX8zLAFy2zascJtfAK+v2x8PxDymoBiPHFcAvKv\neqqrAoVLKnGtoI8OcXSEMhM2VuyPMhWwNcs8iQ/GqXw9vPE7IK+sfVKDxVPFj3jr\nV+blr9H1FQ+m3jY4uBVfkDc+LK/CNR1XRRii1S+FWccyziPo/ejTCeZlSV+37g2e\nAk0e4IFgz//lgHE3wUlBY9rwRLVy6NS3Z5/ntUxDeQwofDBOP4FWEfw7zgSN2Ela\nm+mm4ZD1SJzDunMNtXEEZrRz3aOv/8a3Vw2Vglgy9zTH3Cvt4O6sdxYFO3WVQhtf\n/Ydbn11iwuhUvwF1IPrOedZkJG7RC3/E1a2WYg2vP68C+wmcoYIRj2ZnFfNEn9rD\nGIoKKGS9CqgCRlQ7D+TxtifqGKlrbjl5XRc4cCM3AIIKGa0rjGn9bgMWBYhldOpM\nKX53Qom15+V5AM+i072MGRWZsAGSRmLm1+XrN/qXMhDp5KrAycryL880ll0uaXD/\nedglZTfm3ZOUX1so9yX3sNVE0jnrFn00Dj3z6CFG2dptsvbS/jU=\n=afSD\n-----END PGP SIGNATURE-----", "payload": "tree 7396cc88eca58636e93429a25d423d3c1f3140bf\nparent d57a109203526c2aa1c4bf88984726a82dd4bec8\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1517218331 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494453 +0100\n\nDeduplicate code in rustdoc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec857e1e099c135f48c8706cdea65497309de2b3", "html_url": "https://github.com/rust-lang/rust/commit/ec857e1e099c135f48c8706cdea65497309de2b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec857e1e099c135f48c8706cdea65497309de2b3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d57a109203526c2aa1c4bf88984726a82dd4bec8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d57a109203526c2aa1c4bf88984726a82dd4bec8", "html_url": "https://github.com/rust-lang/rust/commit/d57a109203526c2aa1c4bf88984726a82dd4bec8"}], "stats": {"total": 62, "additions": 24, "deletions": 38}, "files": [{"sha": "5d4addce2c43992174793767c6f694f7ede4ea26", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 24, "deletions": 38, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ec857e1e099c135f48c8706cdea65497309de2b3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec857e1e099c135f48c8706cdea65497309de2b3/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ec857e1e099c135f48c8706cdea65497309de2b3", "patch": "@@ -2511,25 +2511,7 @@ impl Clean<Type> for hir::Ty {\n                         ty: cx.tcx.types.usize\n                     })\n                 });\n-                let n = match n.val {\n-                    ConstVal::Unevaluated(def_id, _) => {\n-                        if let Some(node_id) = cx.tcx.hir.as_local_node_id(def_id) {\n-                            print_const_expr(cx, cx.tcx.hir.body_owned_by(node_id))\n-                        } else {\n-                            inline::print_inlined_const(cx, def_id)\n-                        }\n-                    },\n-                    ConstVal::Value(val) => {\n-                        let mut s = String::new();\n-                        ::rustc::mir::print_miri_value(val, n.ty, &mut s).unwrap();\n-                        // array lengths are obviously usize\n-                        if s.ends_with(\"usize\") {\n-                            let n = s.len() - \"usize\".len();\n-                            s.truncate(n);\n-                        }\n-                        s\n-                    },\n-                };\n+                let n = print_const(cx, n);\n                 Array(box ty.clean(cx), n)\n             },\n             TyTup(ref tys) => Tuple(tys.clean(cx)),\n@@ -2656,25 +2638,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                         n = new_n;\n                     }\n                 };\n-                let n = match n.val {\n-                    ConstVal::Unevaluated(def_id, _) => {\n-                        if let Some(node_id) = cx.tcx.hir.as_local_node_id(def_id) {\n-                            print_const_expr(cx, cx.tcx.hir.body_owned_by(node_id))\n-                        } else {\n-                            inline::print_inlined_const(cx, def_id)\n-                        }\n-                    },\n-                    ConstVal::Value(val) => {\n-                        let mut s = String::new();\n-                        ::rustc::mir::print_miri_value(val, n.ty, &mut s).unwrap();\n-                        // array lengths are obviously usize\n-                        if s.ends_with(\"usize\") {\n-                            let n = s.len() - \"usize\".len();\n-                            s.truncate(n);\n-                        }\n-                        s\n-                    },\n-                };\n+                let n = print_const(cx, n);\n                 Array(box ty.clean(cx), n)\n             }\n             ty::TyRawPtr(mt) => RawPointer(mt.mutbl.clean(cx), box mt.ty.clean(cx)),\n@@ -3658,6 +3622,28 @@ fn name_from_pat(p: &hir::Pat) -> String {\n     }\n }\n \n+fn print_const(cx: &DocContext, n: &ty::Const) -> String {\n+    match n.val {\n+        ConstVal::Unevaluated(def_id, _) => {\n+            if let Some(node_id) = cx.tcx.hir.as_local_node_id(def_id) {\n+                print_const_expr(cx, cx.tcx.hir.body_owned_by(node_id))\n+            } else {\n+                inline::print_inlined_const(cx, def_id)\n+            }\n+        },\n+        ConstVal::Value(val) => {\n+            let mut s = String::new();\n+            ::rustc::mir::print_miri_value(val, n.ty, &mut s).unwrap();\n+            // array lengths are obviously usize\n+            if s.ends_with(\"usize\") {\n+                let n = s.len() - \"usize\".len();\n+                s.truncate(n);\n+            }\n+            s\n+        },\n+    }\n+}\n+\n fn print_const_expr(cx: &DocContext, body: hir::BodyId) -> String {\n     cx.tcx.hir.node_to_pretty_string(body.node_id)\n }"}]}