{"sha": "160eb73baab57cbe0dbb221f5220fc4475ccd1da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MGViNzNiYWFiNTdjYmUwZGJiMjIxZjUyMjBmYzQ0NzVjY2QxZGE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-02-14T21:07:19Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-02-14T21:07:19Z"}, "message": "reviewer changes", "tree": {"sha": "5f11bb5b1f22e991c25885235cca6a9ba3fbd480", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f11bb5b1f22e991c25885235cca6a9ba3fbd480"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/160eb73baab57cbe0dbb221f5220fc4475ccd1da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/160eb73baab57cbe0dbb221f5220fc4475ccd1da", "html_url": "https://github.com/rust-lang/rust/commit/160eb73baab57cbe0dbb221f5220fc4475ccd1da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/160eb73baab57cbe0dbb221f5220fc4475ccd1da/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d86cfb357aef2d70e67e616f60ca587bd12def62", "url": "https://api.github.com/repos/rust-lang/rust/commits/d86cfb357aef2d70e67e616f60ca587bd12def62", "html_url": "https://github.com/rust-lang/rust/commit/d86cfb357aef2d70e67e616f60ca587bd12def62"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "a5f0982321220275c061b408ad2397bdcd718d6c", "filename": "src/patterns.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/160eb73baab57cbe0dbb221f5220fc4475ccd1da/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/160eb73baab57cbe0dbb221f5220fc4475ccd1da/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=160eb73baab57cbe0dbb221f5220fc4475ccd1da", "patch": "@@ -31,8 +31,10 @@ impl Rewrite for Pat {\n \n                 let sub_pat = match *sub_pat {\n                     Some(ref p) => {\n+                        // 3 - ` @ `.\n                         let width = try_opt!(width.checked_sub(prefix.len() + mut_infix.len() +\n-                                                               id_str.len()));\n+                                                               id_str.len() +\n+                                                               3));\n                         format!(\" @ {}\", try_opt!(p.rewrite(context, width, offset)))\n                     }\n                     None => \"\".to_owned(),\n@@ -105,17 +107,16 @@ impl Rewrite for Pat {\n                 let suffix = suffix.iter().map(|p| p.rewrite(context, width, offset));\n \n                 // Munge them together.\n-                let pats = prefix.chain(slice_pat.into_iter()).chain(suffix);\n+                let pats: Option<Vec<String>> = prefix.chain(slice_pat.into_iter())\n+                                                      .chain(suffix)\n+                                                      .collect();\n \n                 // Check that all the rewrites succeeded, and if not return None.\n-                let (somes, nones) = pats.partition::<Vec<Option<String>>, _>(Option::is_some);\n-                if nones.len() > 0 {\n-                    return None;\n-                }\n+                let pats = try_opt!(pats);\n \n                 // Unwrap all the sub-strings and join them with commas.\n-                let pats = somes.into_iter().map(|p| p.unwrap()).collect::<Vec<_>>().join(\", \");\n-                Some(format!(\"[{}]\", pats))\n+                let result = format!(\"[{}]\", pats.join(\", \"));\n+                wrap_str(result, context.config.max_width, width, offset)\n             }\n             Pat_::PatStruct(ref path, ref fields, elipses) => {\n                 let path = try_opt!(rewrite_path(context, true, None, path, width, offset));\n@@ -126,10 +127,12 @@ impl Rewrite for Pat {\n                     (\"\", \"}\")\n                 };\n \n+                // 5 = `{` plus space before and after plus `}` plus space before.\n                 let budget = try_opt!(width.checked_sub(path.len() + 5 + elipses_str.len()));\n                 // FIXME Using visual indenting, should use block or visual to match\n                 // struct lit preference (however, in practice I think it is rare\n                 // for struct patterns to be multi-line).\n+                // 3 = `{` plus space before and after.\n                 let offset = offset + path.len() + 3;\n \n                 let items = itemize_list(context.codemap,\n@@ -157,7 +160,7 @@ impl Rewrite for Pat {\n                     }\n                 }\n \n-                if field_string.len() == 0 {\n+                if field_string.is_empty() {\n                     Some(format!(\"{} {{}}\", path))\n                 } else {\n                     Some(format!(\"{} {{ {} }}\", path, field_string))\n@@ -180,7 +183,10 @@ impl Rewrite for FieldPat {\n         if self.is_shorthand {\n             pat\n         } else {\n-            Some(format!(\"{}: {}\", self.ident.to_string(), try_opt!(pat)))\n+            wrap_str(format!(\"{}: {}\", self.ident.to_string(), try_opt!(pat)),\n+                     context.config.max_width,\n+                     width,\n+                     offset)\n         }\n     }\n }"}]}