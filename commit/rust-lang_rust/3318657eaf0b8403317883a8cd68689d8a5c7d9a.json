{"sha": "3318657eaf0b8403317883a8cd68689d8a5c7d9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMTg2NTdlYWYwYjg0MDMzMTc4ODNhOGNkNjg2ODlkOGE1YzdkOWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-02T06:15:52Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-02T06:15:52Z"}, "message": "test Ref/RefMut protector interactions", "tree": {"sha": "9e204dcc5af6b1f7526a2d99facace78c8d94725", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e204dcc5af6b1f7526a2d99facace78c8d94725"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3318657eaf0b8403317883a8cd68689d8a5c7d9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3318657eaf0b8403317883a8cd68689d8a5c7d9a", "html_url": "https://github.com/rust-lang/rust/commit/3318657eaf0b8403317883a8cd68689d8a5c7d9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3318657eaf0b8403317883a8cd68689d8a5c7d9a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4c2716f4e92550d20f6bec1c21f7ee90ddb5848", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4c2716f4e92550d20f6bec1c21f7ee90ddb5848", "html_url": "https://github.com/rust-lang/rust/commit/c4c2716f4e92550d20f6bec1c21f7ee90ddb5848"}], "stats": {"total": 101, "additions": 68, "deletions": 33}, "files": [{"sha": "93cef1572a3e13d5c88b4e1315ecfe0357c2ec7e", "filename": "tests/run-pass/refcell.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c4c2716f4e92550d20f6bec1c21f7ee90ddb5848/tests%2Frun-pass%2Frefcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c2716f4e92550d20f6bec1c21f7ee90ddb5848/tests%2Frun-pass%2Frefcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frefcell.rs?ref=c4c2716f4e92550d20f6bec1c21f7ee90ddb5848", "patch": "@@ -1,33 +0,0 @@\n-use std::cell::RefCell;\n-\n-fn main() {\n-    let c = RefCell::new(42);\n-    {\n-        let s1 = c.borrow();\n-        let _x: i32 = *s1;\n-        let s2 = c.borrow();\n-        let _x: i32 = *s1;\n-        let _y: i32 = *s2;\n-        let _x: i32 = *s1;\n-        let _y: i32 = *s2;\n-    }\n-    {\n-        let mut m = c.borrow_mut();\n-        let _z: i32 = *m;\n-        {\n-            let s: &i32 = &*m;\n-            let _x = *s;\n-        }\n-        *m = 23;\n-        let _z: i32 = *m;\n-    }\n-    {\n-        let s1 = c.borrow();\n-        let _x: i32 = *s1;\n-        let s2 = c.borrow();\n-        let _x: i32 = *s1;\n-        let _y: i32 = *s2;\n-        let _x: i32 = *s1;\n-        let _y: i32 = *s2;\n-    }\n-}"}, {"sha": "0939a666193e87ab1bbe71da31466dfa964eb06a", "filename": "tests/run-pass/stacked-borrows/refcell.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/3318657eaf0b8403317883a8cd68689d8a5c7d9a/tests%2Frun-pass%2Fstacked-borrows%2Frefcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3318657eaf0b8403317883a8cd68689d8a5c7d9a/tests%2Frun-pass%2Fstacked-borrows%2Frefcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstacked-borrows%2Frefcell.rs?ref=3318657eaf0b8403317883a8cd68689d8a5c7d9a", "patch": "@@ -0,0 +1,68 @@\n+use std::cell::{RefCell, Ref, RefMut};\n+\n+fn main() {\n+    basic();\n+    ref_protector();\n+    ref_mut_protector();\n+}\n+\n+fn basic() {\n+    let c = RefCell::new(42);\n+    {\n+        let s1 = c.borrow();\n+        let _x: i32 = *s1;\n+        let s2 = c.borrow();\n+        let _x: i32 = *s1;\n+        let _y: i32 = *s2;\n+        let _x: i32 = *s1;\n+        let _y: i32 = *s2;\n+    }\n+    {\n+        let mut m = c.borrow_mut();\n+        let _z: i32 = *m;\n+        {\n+            let s: &i32 = &*m;\n+            let _x = *s;\n+        }\n+        *m = 23;\n+        let _z: i32 = *m;\n+    }\n+    {\n+        let s1 = c.borrow();\n+        let _x: i32 = *s1;\n+        let s2 = c.borrow();\n+        let _x: i32 = *s1;\n+        let _y: i32 = *s2;\n+        let _x: i32 = *s1;\n+        let _y: i32 = *s2;\n+    }\n+}\n+\n+// Adding a Stacked Borrows protector for `Ref` would break this\n+fn ref_protector() {\n+    fn break_it(rc: &RefCell<i32>, r: Ref<'_, i32>) {\n+        // `r` has a shared reference, it is passed in as argument and hence\n+        // a protector is added that marks this memory as read-only for the entire\n+        // duration of this function.\n+        drop(r);\n+        // *oops* here we can mutate that memory.\n+        *rc.borrow_mut() = 2;\n+    }\n+\n+    let rc = RefCell::new(0);\n+    break_it(&rc, rc.borrow())\n+}\n+\n+fn ref_mut_protector() {\n+    fn break_it(rc: &RefCell<i32>, r: RefMut<'_, i32>) {\n+        // `r` has a shared reference, it is passed in as argument and hence\n+        // a protector is added that marks this memory as inaccessible for the entire\n+        // duration of this function\n+        drop(r);\n+        // *oops* here we can mutate that memory.\n+        *rc.borrow_mut() = 2;\n+    }\n+\n+    let rc = RefCell::new(0);\n+    break_it(&rc, rc.borrow_mut())\n+}"}]}