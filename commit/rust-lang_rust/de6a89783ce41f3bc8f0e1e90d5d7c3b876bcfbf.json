{"sha": "de6a89783ce41f3bc8f0e1e90d5d7c3b876bcfbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNmE4OTc4M2NlNDFmM2JjOGYwZTFlOTBkNWQ3YzNiODc2YmNmYmY=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-08-14T22:38:41Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-09-20T10:42:31Z"}, "message": "pull impl generics from HIR if available", "tree": {"sha": "3d150e71154179013ea62fb86e57c63c82e97495", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d150e71154179013ea62fb86e57c63c82e97495"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de6a89783ce41f3bc8f0e1e90d5d7c3b876bcfbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de6a89783ce41f3bc8f0e1e90d5d7c3b876bcfbf", "html_url": "https://github.com/rust-lang/rust/commit/de6a89783ce41f3bc8f0e1e90d5d7c3b876bcfbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de6a89783ce41f3bc8f0e1e90d5d7c3b876bcfbf/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe26efe748dfbd89c0b49079e7301735c9e72411", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe26efe748dfbd89c0b49079e7301735c9e72411", "html_url": "https://github.com/rust-lang/rust/commit/fe26efe748dfbd89c0b49079e7301735c9e72411"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "12a33228cb2131f3558de2f3d33e6eb4c742584c", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/de6a89783ce41f3bc8f0e1e90d5d7c3b876bcfbf/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de6a89783ce41f3bc8f0e1e90d5d7c3b876bcfbf/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=de6a89783ce41f3bc8f0e1e90d5d7c3b876bcfbf", "patch": "@@ -335,23 +335,29 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n     }\n \n     let predicates = tcx.predicates_of(did);\n-    let trait_items = if let Some(nodeid) = tcx.hir.as_local_node_id(did) {\n+    let (trait_items, generics) = if let Some(nodeid) = tcx.hir.as_local_node_id(did) {\n         match tcx.hir.expect_item(nodeid).node {\n-            hir::ItemKind::Impl(.., ref item_ids) => {\n-                item_ids.iter()\n-                        .map(|ii| tcx.hir.impl_item(ii.id).clean(cx))\n-                        .collect::<Vec<_>>()\n+            hir::ItemKind::Impl(.., ref gen, _, _, ref item_ids) => {\n+                (\n+                    item_ids.iter()\n+                            .map(|ii| tcx.hir.impl_item(ii.id).clean(cx))\n+                            .collect::<Vec<_>>(),\n+                    gen.clean(cx),\n+                )\n             }\n             _ => panic!(\"did given to build_impl was not an impl\"),\n         }\n     } else {\n-        tcx.associated_items(did).filter_map(|item| {\n-            if associated_trait.is_some() || item.vis == ty::Visibility::Public {\n-                Some(item.clean(cx))\n-            } else {\n-                None\n-            }\n-        }).collect::<Vec<_>>()\n+        (\n+            tcx.associated_items(did).filter_map(|item| {\n+                if associated_trait.is_some() || item.vis == ty::Visibility::Public {\n+                    Some(item.clean(cx))\n+                } else {\n+                    None\n+                }\n+            }).collect::<Vec<_>>(),\n+            (tcx.generics_of(did), &predicates).clean(cx),\n+        )\n     };\n     let polarity = tcx.impl_polarity(did);\n     let trait_ = associated_trait.clean(cx).map(|bound| {\n@@ -379,7 +385,7 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n     ret.push(clean::Item {\n         inner: clean::ImplItem(clean::Impl {\n             unsafety: hir::Unsafety::Normal,\n-            generics: (tcx.generics_of(did), &predicates).clean(cx),\n+            generics,\n             provided_trait_methods: provided,\n             trait_,\n             for_,"}]}