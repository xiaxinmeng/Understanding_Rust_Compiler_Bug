{"sha": "fabf502a7a24dfd2dfbc33030cb3d4bad7496b81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYmY1MDJhN2EyNGRmZDJkZmJjMzMwMzBjYjNkNGJhZDc0OTZiODE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-20T23:47:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-20T23:47:48Z"}, "message": "Auto merge of #87168 - the8472:flatten-len, r=scottmcm\n\nimplement TrustedLen for Flatten/FlatMap if the U: IntoIterator == [T; N]\n\nThis only works if arrays are passed directly instead of array iterators\nbecause we need to be sure that they have not been advanced before\nFlatten does its size calculation.\n\nresolves #87094", "tree": {"sha": "45cf4d9c708e8ab22da67088798fd69910e84938", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45cf4d9c708e8ab22da67088798fd69910e84938"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fabf502a7a24dfd2dfbc33030cb3d4bad7496b81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fabf502a7a24dfd2dfbc33030cb3d4bad7496b81", "html_url": "https://github.com/rust-lang/rust/commit/fabf502a7a24dfd2dfbc33030cb3d4bad7496b81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fabf502a7a24dfd2dfbc33030cb3d4bad7496b81/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b41936b92cd8463020207cb2f62a4247942ef2e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b41936b92cd8463020207cb2f62a4247942ef2e4", "html_url": "https://github.com/rust-lang/rust/commit/b41936b92cd8463020207cb2f62a4247942ef2e4"}, {"sha": "c3ac8d8b8683fdb7f247e9107397ec8948ad4568", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ac8d8b8683fdb7f247e9107397ec8948ad4568", "html_url": "https://github.com/rust-lang/rust/commit/c3ac8d8b8683fdb7f247e9107397ec8948ad4568"}], "stats": {"total": 134, "additions": 133, "deletions": 1}, "files": [{"sha": "48880a4d91a57c9e42ca28c9d9898ba5b3062d30", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 93, "deletions": 1, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/fabf502a7a24dfd2dfbc33030cb3d4bad7496b81/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabf502a7a24dfd2dfbc33030cb3d4bad7496b81/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=fabf502a7a24dfd2dfbc33030cb3d4bad7496b81", "patch": "@@ -1,5 +1,5 @@\n use crate::fmt;\n-use crate::iter::{DoubleEndedIterator, Fuse, FusedIterator, Iterator, Map};\n+use crate::iter::{DoubleEndedIterator, Fuse, FusedIterator, Iterator, Map, TrustedLen};\n use crate::ops::Try;\n \n /// An iterator that maps each element to an iterator, and yields the elements\n@@ -114,6 +114,30 @@ where\n {\n }\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<T, I, F, const N: usize> TrustedLen for FlatMap<I, [T; N], F>\n+where\n+    I: TrustedLen,\n+    F: FnMut(I::Item) -> [T; N],\n+{\n+}\n+\n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<'a, T, I, F, const N: usize> TrustedLen for FlatMap<I, &'a [T; N], F>\n+where\n+    I: TrustedLen,\n+    F: FnMut(I::Item) -> &'a [T; N],\n+{\n+}\n+\n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<'a, T, I, F, const N: usize> TrustedLen for FlatMap<I, &'a mut [T; N], F>\n+where\n+    I: TrustedLen,\n+    F: FnMut(I::Item) -> &'a mut [T; N],\n+{\n+}\n+\n /// An iterator that flattens one level of nesting in an iterator of things\n /// that can be turned into iterators.\n ///\n@@ -230,6 +254,14 @@ where\n {\n }\n \n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<I> TrustedLen for Flatten<I>\n+where\n+    I: TrustedLen,\n+    <I as Iterator>::Item: TrustedConstSize,\n+{\n+}\n+\n /// Real logic of both `Flatten` and `FlatMap` which simply delegate to\n /// this type.\n #[derive(Clone, Debug)]\n@@ -282,6 +314,17 @@ where\n         let (flo, fhi) = self.frontiter.as_ref().map_or((0, Some(0)), U::size_hint);\n         let (blo, bhi) = self.backiter.as_ref().map_or((0, Some(0)), U::size_hint);\n         let lo = flo.saturating_add(blo);\n+\n+        if let Some(fixed_size) = <<I as Iterator>::Item as ConstSizeIntoIterator>::size() {\n+            let (lower, upper) = self.iter.size_hint();\n+\n+            let lower = lower.saturating_mul(fixed_size).saturating_add(lo);\n+            let upper =\n+                try { fhi?.checked_add(bhi?)?.checked_add(fixed_size.checked_mul(upper?)?)? };\n+\n+            return (lower, upper);\n+        }\n+\n         match (self.iter.size_hint(), fhi, bhi) {\n             ((0, Some(0)), Some(a), Some(b)) => (lo, a.checked_add(b)),\n             _ => (lo, None),\n@@ -444,3 +487,52 @@ where\n         init\n     }\n }\n+\n+trait ConstSizeIntoIterator: IntoIterator {\n+    // FIXME(#31844): convert to an associated const once specialization supports that\n+    fn size() -> Option<usize>;\n+}\n+\n+impl<T> ConstSizeIntoIterator for T\n+where\n+    T: IntoIterator,\n+{\n+    #[inline]\n+    default fn size() -> Option<usize> {\n+        None\n+    }\n+}\n+\n+impl<T, const N: usize> ConstSizeIntoIterator for [T; N] {\n+    #[inline]\n+    fn size() -> Option<usize> {\n+        Some(N)\n+    }\n+}\n+\n+impl<T, const N: usize> ConstSizeIntoIterator for &[T; N] {\n+    #[inline]\n+    fn size() -> Option<usize> {\n+        Some(N)\n+    }\n+}\n+\n+impl<T, const N: usize> ConstSizeIntoIterator for &mut [T; N] {\n+    #[inline]\n+    fn size() -> Option<usize> {\n+        Some(N)\n+    }\n+}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"std_internals\", issue = \"none\")]\n+// FIXME(#20400): Instead of this helper trait there should be multiple impl TrustedLen for Flatten<>\n+//   blocks with different bounds on Iterator::Item but the compiler erroneously considers them overlapping\n+pub unsafe trait TrustedConstSize: IntoIterator {}\n+\n+#[unstable(feature = \"std_internals\", issue = \"none\")]\n+unsafe impl<T, const N: usize> TrustedConstSize for [T; N] {}\n+#[unstable(feature = \"std_internals\", issue = \"none\")]\n+unsafe impl<T, const N: usize> TrustedConstSize for &'_ [T; N] {}\n+#[unstable(feature = \"std_internals\", issue = \"none\")]\n+unsafe impl<T, const N: usize> TrustedConstSize for &'_ mut [T; N] {}"}, {"sha": "aaac39c297933f240d386f9e5123e9bfcd9da815", "filename": "library/core/tests/iter/adapters/flatten.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fabf502a7a24dfd2dfbc33030cb3d4bad7496b81/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabf502a7a24dfd2dfbc33030cb3d4bad7496b81/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs?ref=fabf502a7a24dfd2dfbc33030cb3d4bad7496b81", "patch": "@@ -1,4 +1,5 @@\n use super::*;\n+use core::array;\n use core::iter::*;\n \n #[test]\n@@ -109,3 +110,42 @@ fn test_double_ended_flatten() {\n     assert_eq!(it.next(), None);\n     assert_eq!(it.next_back(), None);\n }\n+\n+#[test]\n+fn test_trusted_len_flatten() {\n+    fn assert_trusted_len<T: TrustedLen>(_: &T) {}\n+    let mut iter = array::IntoIter::new([[0; 3]; 4]).flatten();\n+    assert_trusted_len(&iter);\n+\n+    assert_eq!(iter.size_hint(), (12, Some(12)));\n+    iter.next();\n+    assert_eq!(iter.size_hint(), (11, Some(11)));\n+    iter.next_back();\n+    assert_eq!(iter.size_hint(), (10, Some(10)));\n+\n+    let iter = array::IntoIter::new([[(); usize::MAX]; 1]).flatten();\n+    assert_eq!(iter.size_hint(), (usize::MAX, Some(usize::MAX)));\n+\n+    let iter = array::IntoIter::new([[(); usize::MAX]; 2]).flatten();\n+    assert_eq!(iter.size_hint(), (usize::MAX, None));\n+\n+    let mut a = [(); 10];\n+    let mut b = [(); 10];\n+\n+    let iter = array::IntoIter::new([&mut a, &mut b]).flatten();\n+    assert_trusted_len(&iter);\n+    assert_eq!(iter.size_hint(), (20, Some(20)));\n+    core::mem::drop(iter);\n+\n+    let iter = array::IntoIter::new([&a, &b]).flatten();\n+    assert_trusted_len(&iter);\n+    assert_eq!(iter.size_hint(), (20, Some(20)));\n+\n+    let iter = [(), (), ()].iter().flat_map(|_| [(); 1000]);\n+    assert_trusted_len(&iter);\n+    assert_eq!(iter.size_hint(), (3000, Some(3000)));\n+\n+    let iter = [(), ()].iter().flat_map(|_| &a);\n+    assert_trusted_len(&iter);\n+    assert_eq!(iter.size_hint(), (20, Some(20)));\n+}"}]}