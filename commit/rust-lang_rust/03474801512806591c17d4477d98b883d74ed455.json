{"sha": "03474801512806591c17d4477d98b883d74ed455", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNDc0ODAxNTEyODA2NTkxYzE3ZDQ0NzdkOThiODgzZDc0ZWQ0NTU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-10T20:59:21Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-11T14:36:46Z"}, "message": "Don't store all traits in DocContext\n\nThis is already a query so we're just needlessly copying the data\naround.", "tree": {"sha": "b38ecf78031f859ac4f49c22c74efa52c726e052", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b38ecf78031f859ac4f49c22c74efa52c726e052"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03474801512806591c17d4477d98b883d74ed455", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03474801512806591c17d4477d98b883d74ed455", "html_url": "https://github.com/rust-lang/rust/commit/03474801512806591c17d4477d98b883d74ed455", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03474801512806591c17d4477d98b883d74ed455/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00319519bba1fa1c2036aef70607428da9519155", "url": "https://api.github.com/repos/rust-lang/rust/commits/00319519bba1fa1c2036aef70607428da9519155", "html_url": "https://github.com/rust-lang/rust/commit/00319519bba1fa1c2036aef70607428da9519155"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "490d4107c51abf325cb65d0212b663d3a68f7008", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03474801512806591c17d4477d98b883d74ed455/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03474801512806591c17d4477d98b883d74ed455/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=03474801512806591c17d4477d98b883d74ed455", "patch": "@@ -3,6 +3,7 @@ use rustc::traits;\n use rustc::ty::ToPredicate;\n use rustc::ty::subst::Subst;\n use rustc::infer::InferOk;\n+use rustc::hir::def_id::LOCAL_CRATE;\n use syntax_pos::DUMMY_SP;\n \n use super::*;\n@@ -27,7 +28,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n \n         debug!(\"get_blanket_impls({:?})\", ty);\n         let mut impls = Vec::new();\n-        for &trait_def_id in self.cx.all_traits.iter() {\n+        for &trait_def_id in self.cx.tcx.all_traits(LOCAL_CRATE).iter() {\n             if !self.cx.renderinfo.borrow().access_levels.is_public(trait_def_id) ||\n                self.cx.generated_synthetics\n                       .borrow_mut()"}, {"sha": "c7695fbd8d2616b607bff484c9a4cb669d97d899", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03474801512806591c17d4477d98b883d74ed455/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03474801512806591c17d4477d98b883d74ed455/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=03474801512806591c17d4477d98b883d74ed455", "patch": "@@ -68,7 +68,6 @@ pub struct DocContext<'tcx> {\n     /// Auto-trait or blanket impls processed so far, as `(self_ty, trait_def_id)`.\n     // FIXME(eddyb) make this a `ty::TraitRef<'tcx>` set.\n     pub generated_synthetics: RefCell<FxHashSet<(Ty<'tcx>, DefId)>>,\n-    pub all_traits: Vec<DefId>,\n     pub auto_traits: Vec<DefId>,\n }\n \n@@ -364,7 +363,6 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             let mut renderinfo = RenderInfo::default();\n             renderinfo.access_levels = access_levels;\n \n-            let all_traits = tcx.all_traits(LOCAL_CRATE).to_vec();\n             let ctxt = DocContext {\n                 tcx,\n                 resolver,\n@@ -379,10 +377,9 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                 fake_def_ids: Default::default(),\n                 all_fake_def_ids: Default::default(),\n                 generated_synthetics: Default::default(),\n-                auto_traits: all_traits.iter().cloned().filter(|trait_def_id| {\n+                auto_traits: tcx.all_traits(LOCAL_CRATE).iter().cloned().filter(|trait_def_id| {\n                     tcx.trait_is_auto(*trait_def_id)\n                 }).collect(),\n-                all_traits,\n             };\n             debug!(\"crate: {:?}\", tcx.hir().krate());\n "}, {"sha": "86e4e9fd95637c208fe02c2b1a269774b2f75f67", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03474801512806591c17d4477d98b883d74ed455/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03474801512806591c17d4477d98b883d74ed455/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=03474801512806591c17d4477d98b883d74ed455", "patch": "@@ -4,7 +4,7 @@ use crate::fold::DocFolder;\n use super::Pass;\n \n use rustc::util::nodemap::FxHashSet;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{LOCAL_CRATE, DefId};\n use syntax::symbol::sym;\n \n pub const COLLECT_TRAIT_IMPLS: Pass = Pass {\n@@ -116,7 +116,7 @@ pub fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n \n     // `tcx.crates()` doesn't include the local crate, and `tcx.all_trait_implementations`\n     // doesn't work with it anyway, so pull them from the HIR map instead\n-    for &trait_did in cx.all_traits.iter() {\n+    for &trait_did in cx.tcx.all_traits(LOCAL_CRATE).iter() {\n         for &impl_node in cx.tcx.hir().trait_impls(trait_did) {\n             let impl_did = cx.tcx.hir().local_def_id(impl_node);\n             inline::build_impl(cx, impl_did, None, &mut new_items);"}]}