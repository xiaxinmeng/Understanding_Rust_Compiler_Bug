{"sha": "175d325ccbaccf40907a8bb8184ee65a5f62ca8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NWQzMjVjY2JhY2NmNDA5MDdhOGJiODE4NGVlNjVhNWY2MmNhOGE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-17T16:08:06Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-24T17:51:33Z"}, "message": "rustc_metadata: Move some code around\n\nPlugin search doesn't need a crate loader, only crate locator", "tree": {"sha": "5369b51784e5c73bd52eaf57a3895c0d74b53922", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5369b51784e5c73bd52eaf57a3895c0d74b53922"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/175d325ccbaccf40907a8bb8184ee65a5f62ca8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/175d325ccbaccf40907a8bb8184ee65a5f62ca8a", "html_url": "https://github.com/rust-lang/rust/commit/175d325ccbaccf40907a8bb8184ee65a5f62ca8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/175d325ccbaccf40907a8bb8184ee65a5f62ca8a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cda75c48f48022690f142b63969660b12536cee", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cda75c48f48022690f142b63969660b12536cee", "html_url": "https://github.com/rust-lang/rust/commit/2cda75c48f48022690f142b63969660b12536cee"}], "stats": {"total": 182, "additions": 84, "deletions": 98}, "files": [{"sha": "2eaf7536a70adfdb2ff606b0ed8c787d3f6d7474", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 95, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/175d325ccbaccf40907a8bb8184ee65a5f62ca8a/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175d325ccbaccf40907a8bb8184ee65a5f62ca8a/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=175d325ccbaccf40907a8bb8184ee65a5f62ca8a", "patch": "@@ -14,20 +14,20 @@ use rustc::session::{Session, CrateDisambiguator};\n use rustc::session::config::{Sanitizer, self};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n use rustc::session::search_paths::PathKind;\n-use rustc::middle::cstore::{CrateSource, ExternCrate, ExternCrateSource, MetadataLoader};\n+use rustc::middle::cstore::{CrateSource, ExternCrate, ExternCrateSource};\n use rustc::util::common::record_time;\n use rustc::util::nodemap::FxHashSet;\n use rustc::hir::map::Definitions;\n use rustc::hir::def_id::LOCAL_CRATE;\n \n-use std::path::{Path, PathBuf};\n+use std::path::Path;\n use std::{cmp, fs};\n \n use syntax::ast;\n use syntax::attr;\n use syntax_expand::allocator::{global_allocator_spans, AllocatorKind};\n use syntax::symbol::{Symbol, sym};\n-use syntax::{span_err, span_fatal};\n+use syntax::span_fatal;\n use syntax_pos::{Span, DUMMY_SP};\n use log::{debug, info, log_enabled};\n use proc_macro::bridge::client::ProcMacro;\n@@ -471,62 +471,7 @@ impl<'a> CrateLoader<'a> {\n             self.resolve_crate(dep.name, span, dep_kind, Some((root, &dep))).0\n         })).collect()\n     }\n-}\n-\n-    fn read_extension_crate(\n-        sess: &Session,\n-        metadata_loader: &dyn MetadataLoader,\n-        name: Symbol,\n-        span: Span,\n-    ) -> (Library, bool) {\n-        info!(\"read extension crate `{}`\", name);\n-        let target_triple = sess.opts.target_triple.clone();\n-        let host_triple = TargetTriple::from_triple(config::host_triple());\n-        let is_cross = target_triple != host_triple;\n-        let mut target_only = false;\n-        let mut locate_ctxt = locator::Context {\n-            sess,\n-            span,\n-            crate_name: name,\n-            hash: None,\n-            extra_filename: None,\n-            filesearch: sess.host_filesearch(PathKind::Crate),\n-            target: &sess.host,\n-            triple: host_triple,\n-            root: None,\n-            rejected_via_hash: vec![],\n-            rejected_via_triple: vec![],\n-            rejected_via_kind: vec![],\n-            rejected_via_version: vec![],\n-            rejected_via_filename: vec![],\n-            should_match_name: true,\n-            is_proc_macro: None,\n-            metadata_loader,\n-        };\n-\n-        let library = locate_ctxt.maybe_load_library_crate().or_else(|| {\n-            if !is_cross {\n-                return None\n-            }\n-            // Try loading from target crates. This will abort later if we\n-            // try to load a plugin registrar function,\n-            target_only = true;\n-\n-            locate_ctxt.target = &sess.target.target;\n-            locate_ctxt.triple = target_triple;\n-            locate_ctxt.filesearch = sess.target_filesearch(PathKind::Crate);\n-\n-            locate_ctxt.maybe_load_library_crate()\n-        });\n-        let library = match library {\n-            Some(l) => l,\n-            None => locate_ctxt.report_errs(),\n-        };\n \n-        (library, target_only)\n-    }\n-\n-impl<'a> CrateLoader<'a> {\n     fn dlsym_proc_macros(&self,\n                          path: &Path,\n                          disambiguator: CrateDisambiguator,\n@@ -557,44 +502,7 @@ impl<'a> CrateLoader<'a> {\n \n         decls\n     }\n-}\n-\n-    /// Look for a plugin registrar. Returns library path, crate\n-    /// SVH and DefIndex of the registrar function.\n-    pub fn find_plugin_registrar(sess: &Session,\n-                                 metadata_loader: &dyn MetadataLoader,\n-                                 span: Span,\n-                                 name: Symbol)\n-                                 -> Option<(PathBuf, CrateDisambiguator)> {\n-        let (library, target_only) = read_extension_crate(sess, metadata_loader, name, span);\n-\n-        if target_only {\n-            // Need to abort before syntax expansion.\n-            let message = format!(\"plugin `{}` is not available for triple `{}` \\\n-                                   (only found {})\",\n-                                  name,\n-                                  config::host_triple(),\n-                                  sess.opts.target_triple);\n-            span_fatal!(sess, span, E0456, \"{}\", &message);\n-        }\n-\n-        match library.source.dylib {\n-            Some(dylib) => {\n-                Some((dylib.0, library.metadata.get_root().disambiguator))\n-            }\n-            None => {\n-                span_err!(sess, span, E0457,\n-                          \"plugin `{}` only found in rlib format, but must be available \\\n-                           in dylib format\",\n-                          name);\n-                // No need to abort because the loading code will just ignore this\n-                // empty dylib.\n-                None\n-            }\n-        }\n-    }\n \n-impl<'a> CrateLoader<'a> {\n     fn inject_panic_runtime(&self, krate: &ast::Crate) {\n         // If we're only compiling an rlib, then there's no need to select a\n         // panic runtime, so we just skip this section entirely."}, {"sha": "a5298402dd4115b95839ce89a65d2704d422bf92", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/175d325ccbaccf40907a8bb8184ee65a5f62ca8a/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175d325ccbaccf40907a8bb8184ee65a5f62ca8a/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=175d325ccbaccf40907a8bb8184ee65a5f62ca8a", "patch": "@@ -220,12 +220,13 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n use rustc::middle::cstore::{CrateSource, MetadataLoader};\n-use rustc::session::{config, Session};\n+use rustc::session::{config, Session, CrateDisambiguator};\n use rustc::session::filesearch::{FileSearch, FileMatches, FileDoesntMatch};\n use rustc::session::search_paths::PathKind;\n use rustc::util::nodemap::FxHashMap;\n \n use errors::DiagnosticBuilder;\n+use syntax::{span_err, span_fatal};\n use syntax::symbol::{Symbol, sym};\n use syntax::struct_span_err;\n use syntax_pos::Span;\n@@ -911,6 +912,83 @@ fn get_metadata_section_imp(target: &Target,\n     }\n }\n \n+/// Look for a plugin registrar. Returns its library path and crate disambiguator.\n+pub fn find_plugin_registrar(\n+    sess: &Session,\n+    metadata_loader: &dyn MetadataLoader,\n+    span: Span,\n+    name: Symbol,\n+) -> Option<(PathBuf, CrateDisambiguator)> {\n+    info!(\"find plugin registrar `{}`\", name);\n+    let target_triple = sess.opts.target_triple.clone();\n+    let host_triple = TargetTriple::from_triple(config::host_triple());\n+    let is_cross = target_triple != host_triple;\n+    let mut target_only = false;\n+    let mut locate_ctxt = Context {\n+        sess,\n+        span,\n+        crate_name: name,\n+        hash: None,\n+        extra_filename: None,\n+        filesearch: sess.host_filesearch(PathKind::Crate),\n+        target: &sess.host,\n+        triple: host_triple,\n+        root: None,\n+        rejected_via_hash: vec![],\n+        rejected_via_triple: vec![],\n+        rejected_via_kind: vec![],\n+        rejected_via_version: vec![],\n+        rejected_via_filename: vec![],\n+        should_match_name: true,\n+        is_proc_macro: None,\n+        metadata_loader,\n+    };\n+\n+    let library = locate_ctxt.maybe_load_library_crate().or_else(|| {\n+        if !is_cross {\n+            return None\n+        }\n+        // Try loading from target crates. This will abort later if we\n+        // try to load a plugin registrar function,\n+        target_only = true;\n+\n+        locate_ctxt.target = &sess.target.target;\n+        locate_ctxt.triple = target_triple;\n+        locate_ctxt.filesearch = sess.target_filesearch(PathKind::Crate);\n+\n+        locate_ctxt.maybe_load_library_crate()\n+    });\n+    let library = match library {\n+        Some(l) => l,\n+        None => locate_ctxt.report_errs(),\n+    };\n+\n+    if target_only {\n+        // Need to abort before syntax expansion.\n+        let message = format!(\"plugin `{}` is not available for triple `{}` \\\n+                                (only found {})\",\n+                                name,\n+                                config::host_triple(),\n+                                sess.opts.target_triple);\n+        span_fatal!(sess, span, E0456, \"{}\", &message);\n+    }\n+\n+    match library.source.dylib {\n+        Some(dylib) => {\n+            Some((dylib.0, library.metadata.get_root().disambiguator))\n+        }\n+        None => {\n+            span_err!(sess, span, E0457,\n+                        \"plugin `{}` only found in rlib format, but must be available \\\n+                        in dylib format\",\n+                        name);\n+            // No need to abort because the loading code will just ignore this\n+            // empty dylib.\n+            None\n+        }\n+    }\n+}\n+\n /// A diagnostic function for dumping crate metadata to an output stream.\n pub fn list_file_metadata(target: &Target,\n                           path: &Path,"}, {"sha": "8ceb56b0fd2b4c4004f2d809664499e95bbf133a", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/175d325ccbaccf40907a8bb8184ee65a5f62ca8a/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/175d325ccbaccf40907a8bb8184ee65a5f62ca8a/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=175d325ccbaccf40907a8bb8184ee65a5f62ca8a", "patch": "@@ -2,7 +2,7 @@\n \n use rustc::middle::cstore::MetadataLoader;\n use rustc::session::Session;\n-use rustc_metadata::creader;\n+use rustc_metadata::locator;\n use crate::registry::Registry;\n \n use std::borrow::ToOwned;\n@@ -80,7 +80,7 @@ pub fn load_plugins(sess: &Session,\n \n impl<'a> PluginLoader<'a> {\n     fn load_plugin(&mut self, span: Span, name: Symbol, args: Vec<ast::NestedMetaItem>) {\n-        let registrar = creader::find_plugin_registrar(self.sess, self.metadata_loader, span, name);\n+        let registrar = locator::find_plugin_registrar(self.sess, self.metadata_loader, span, name);\n \n         if let Some((lib, disambiguator)) = registrar {\n             let symbol = self.sess.generate_plugin_registrar_symbol(disambiguator);"}]}