{"sha": "69d95e232af0fe81de85e1e4a1f8dc73d7b0f16c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZDk1ZTIzMmFmMGZlODFkZTg1ZTFlNGExZjhkYzczZDdiMGYxNmM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-04T14:56:38Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-04T14:58:50Z"}, "message": "Improve Debug implementations of OccupiedError.", "tree": {"sha": "69c9db32f2d8377a2345f3b5788430f0c2ea9778", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69c9db32f2d8377a2345f3b5788430f0c2ea9778"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69d95e232af0fe81de85e1e4a1f8dc73d7b0f16c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69d95e232af0fe81de85e1e4a1f8dc73d7b0f16c", "html_url": "https://github.com/rust-lang/rust/commit/69d95e232af0fe81de85e1e4a1f8dc73d7b0f16c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69d95e232af0fe81de85e1e4a1f8dc73d7b0f16c/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6fe24aab36814ee31ad9dd46fbefe1017670ece", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6fe24aab36814ee31ad9dd46fbefe1017670ece", "html_url": "https://github.com/rust-lang/rust/commit/f6fe24aab36814ee31ad9dd46fbefe1017670ece"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "cc508f30a614ae905ff00352f70fb37ef90594df", "filename": "library/alloc/src/collections/btree/map/entry.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69d95e232af0fe81de85e1e4a1f8dc73d7b0f16c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d95e232af0fe81de85e1e4a1f8dc73d7b0f16c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Fentry.rs?ref=69d95e232af0fe81de85e1e4a1f8dc73d7b0f16c", "patch": "@@ -86,8 +86,9 @@ pub struct OccupiedError<'a, K: 'a, V: 'a> {\n impl<K: Debug + Ord, V: Debug> Debug for OccupiedError<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"OccupiedError\")\n-            .field(\"entry\", &self.entry)\n-            .field(\"value\", &self.value)\n+            .field(\"key\", self.entry.key())\n+            .field(\"old_value\", self.entry.get())\n+            .field(\"new_value\", &self.value)\n             .finish()\n     }\n }"}, {"sha": "7a50b49007cb019032e0d81ea6beb5b8567938c8", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69d95e232af0fe81de85e1e4a1f8dc73d7b0f16c/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d95e232af0fe81de85e1e4a1f8dc73d7b0f16c/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=69d95e232af0fe81de85e1e4a1f8dc73d7b0f16c", "patch": "@@ -1889,14 +1889,24 @@ impl<K: Debug, V> Debug for VacantEntry<'_, K, V> {\n ///\n /// Contains the occupied entry, and the value that was not inserted.\n #[unstable(feature = \"map_try_insert\", issue = \"none\")]\n-#[derive(Debug)]\n pub struct OccupiedError<'a, K: 'a, V: 'a> {\n     /// The entry in the map that was already occupied.\n     pub entry: OccupiedEntry<'a, K, V>,\n     /// The value which was not inserted, because the entry was already occupied.\n     pub value: V,\n }\n \n+#[unstable(feature = \"map_try_insert\", issue = \"none\")]\n+impl<K: Debug, V: Debug> Debug for OccupiedError<'_, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"OccupiedError\")\n+            .field(\"key\", self.entry.key())\n+            .field(\"old_value\", self.entry.get())\n+            .field(\"new_value\", &self.value)\n+            .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V, S> IntoIterator for &'a HashMap<K, V, S> {\n     type Item = (&'a K, &'a V);"}]}