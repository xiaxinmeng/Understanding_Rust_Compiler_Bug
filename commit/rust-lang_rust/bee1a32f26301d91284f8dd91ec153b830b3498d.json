{"sha": "bee1a32f26301d91284f8dd91ec153b830b3498d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZTFhMzJmMjYzMDFkOTEyODRmOGRkOTFlYzE1M2I4MzBiMzQ5OGQ=", "commit": {"author": {"name": "rchaser53", "email": "tayoshizawa29@gmail.com", "date": "2019-05-21T15:06:15Z"}, "committer": {"name": "rchaser53", "email": "tayoshizawa29@gmail.com", "date": "2019-05-21T15:07:56Z"}, "message": "add the handling for vec! with paren inside macro", "tree": {"sha": "b4673400fb3a170f1875a6d069aff31d6d0447ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4673400fb3a170f1875a6d069aff31d6d0447ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bee1a32f26301d91284f8dd91ec153b830b3498d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bee1a32f26301d91284f8dd91ec153b830b3498d", "html_url": "https://github.com/rust-lang/rust/commit/bee1a32f26301d91284f8dd91ec153b830b3498d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bee1a32f26301d91284f8dd91ec153b830b3498d/comments", "author": {"login": "rchaser53", "id": 9676954, "node_id": "MDQ6VXNlcjk2NzY5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9676954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rchaser53", "html_url": "https://github.com/rchaser53", "followers_url": "https://api.github.com/users/rchaser53/followers", "following_url": "https://api.github.com/users/rchaser53/following{/other_user}", "gists_url": "https://api.github.com/users/rchaser53/gists{/gist_id}", "starred_url": "https://api.github.com/users/rchaser53/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rchaser53/subscriptions", "organizations_url": "https://api.github.com/users/rchaser53/orgs", "repos_url": "https://api.github.com/users/rchaser53/repos", "events_url": "https://api.github.com/users/rchaser53/events{/privacy}", "received_events_url": "https://api.github.com/users/rchaser53/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rchaser53", "id": 9676954, "node_id": "MDQ6VXNlcjk2NzY5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9676954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rchaser53", "html_url": "https://github.com/rchaser53", "followers_url": "https://api.github.com/users/rchaser53/followers", "following_url": "https://api.github.com/users/rchaser53/following{/other_user}", "gists_url": "https://api.github.com/users/rchaser53/gists{/gist_id}", "starred_url": "https://api.github.com/users/rchaser53/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rchaser53/subscriptions", "organizations_url": "https://api.github.com/users/rchaser53/orgs", "repos_url": "https://api.github.com/users/rchaser53/repos", "events_url": "https://api.github.com/users/rchaser53/events{/privacy}", "received_events_url": "https://api.github.com/users/rchaser53/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ef2144c82fbba72411c8cce105a60866e2fa53d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ef2144c82fbba72411c8cce105a60866e2fa53d", "html_url": "https://github.com/rust-lang/rust/commit/0ef2144c82fbba72411c8cce105a60866e2fa53d"}], "stats": {"total": 110, "additions": 69, "deletions": 41}, "files": [{"sha": "a42b839f9c5072476d27bd70fc612f11faa46e2d", "filename": "src/macros.rs", "status": "modified", "additions": 66, "deletions": 41, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/bee1a32f26301d91284f8dd91ec153b830b3498d/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee1a32f26301d91284f8dd91ec153b830b3498d/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=bee1a32f26301d91284f8dd91ec153b830b3498d", "patch": "@@ -361,51 +361,35 @@ fn rewrite_macro_inner(\n \n     match style {\n         DelimToken::Paren => {\n-            // Format macro invocation as function call, preserve the trailing\n-            // comma because not all macros support them.\n-            overflow::rewrite_with_parens(\n-                context,\n-                &macro_name,\n-                arg_vec.iter(),\n-                shape,\n-                mac.span,\n-                context.config.width_heuristics().fn_call_width,\n-                if trailing_comma {\n-                    Some(SeparatorTactic::Always)\n-                } else {\n-                    Some(SeparatorTactic::Never)\n-                },\n-            )\n-            .map(|rw| match position {\n-                MacroPosition::Item => format!(\"{};\", rw),\n-                _ => rw,\n-            })\n+            // Handle special case: `vec!(expr; expr)`\n+            if vec_with_semi {\n+                handle_vec_semi(context, shape, arg_vec, macro_name, style)\n+            } else {\n+                // Format macro invocation as function call, preserve the trailing\n+                // comma because not all macros support them.\n+                overflow::rewrite_with_parens(\n+                    context,\n+                    &macro_name,\n+                    arg_vec.iter(),\n+                    shape,\n+                    mac.span,\n+                    context.config.width_heuristics().fn_call_width,\n+                    if trailing_comma {\n+                        Some(SeparatorTactic::Always)\n+                    } else {\n+                        Some(SeparatorTactic::Never)\n+                    },\n+                )\n+                .map(|rw| match position {\n+                    MacroPosition::Item => format!(\"{};\", rw),\n+                    _ => rw,\n+                })\n+            }\n         }\n         DelimToken::Bracket => {\n             // Handle special case: `vec![expr; expr]`\n             if vec_with_semi {\n-                let mac_shape = shape.offset_left(macro_name.len())?;\n-                // 8 = `vec![]` + `; `\n-                let total_overhead = 8;\n-                let nested_shape = mac_shape.block_indent(context.config.tab_spaces());\n-                let lhs = arg_vec[0].rewrite(context, nested_shape)?;\n-                let rhs = arg_vec[1].rewrite(context, nested_shape)?;\n-                if !lhs.contains('\\n')\n-                    && !rhs.contains('\\n')\n-                    && lhs.len() + rhs.len() + total_overhead <= shape.width\n-                {\n-                    Some(format!(\"{}[{}; {}]\", macro_name, lhs, rhs))\n-                } else {\n-                    Some(format!(\n-                        \"{}[{}{};{}{}{}]\",\n-                        macro_name,\n-                        nested_shape.indent.to_string_with_newline(context.config),\n-                        lhs,\n-                        nested_shape.indent.to_string_with_newline(context.config),\n-                        rhs,\n-                        shape.indent.to_string_with_newline(context.config),\n-                    ))\n-                }\n+                handle_vec_semi(context, shape, arg_vec, macro_name, style)\n             } else {\n                 // If we are rewriting `vec!` macro or other special macros,\n                 // then we can rewrite this as an usual array literal.\n@@ -453,6 +437,47 @@ fn rewrite_macro_inner(\n     }\n }\n \n+fn handle_vec_semi(\n+    context: &RewriteContext<'_>,\n+    shape: Shape,\n+    arg_vec: Vec<MacroArg>,\n+    macro_name: String,\n+    delim_token: DelimToken,\n+) -> Option<String> {\n+    let (left, right) = match delim_token {\n+        DelimToken::Paren => (\"(\", \")\"),\n+        DelimToken::Bracket => (\"[\", \"]\"),\n+        _ => unreachable!(),\n+    };\n+\n+    let mac_shape = shape.offset_left(macro_name.len())?;\n+    // 8 = `vec![]` + `; ` or `vec!()` + `; `\n+    let total_overhead = 8;\n+    let nested_shape = mac_shape.block_indent(context.config.tab_spaces());\n+    let lhs = arg_vec[0].rewrite(context, nested_shape)?;\n+    let rhs = arg_vec[1].rewrite(context, nested_shape)?;\n+    if !lhs.contains('\\n')\n+        && !rhs.contains('\\n')\n+        && lhs.len() + rhs.len() + total_overhead <= shape.width\n+    {\n+        // macro_name(lhs; rhs) or macro_name[lhs; rhs]\n+        Some(format!(\"{}{}{}; {}{}\", macro_name, left, lhs, rhs, right))\n+    } else {\n+        // macro_name(\\nlhs;\\nrhs\\n) or macro_name[\\nlhs;\\nrhs\\n]\n+        Some(format!(\n+            \"{}{}{}{};{}{}{}{}\",\n+            macro_name,\n+            left,\n+            nested_shape.indent.to_string_with_newline(context.config),\n+            lhs,\n+            nested_shape.indent.to_string_with_newline(context.config),\n+            rhs,\n+            shape.indent.to_string_with_newline(context.config),\n+            right\n+        ))\n+    }\n+}\n+\n pub(crate) fn rewrite_macro_def(\n     context: &RewriteContext<'_>,\n     shape: Shape,"}, {"sha": "3cf08628db0ba9f5a6d86fe74977b52da9849737", "filename": "tests/target/issue-3567.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bee1a32f26301d91284f8dd91ec153b830b3498d/tests%2Ftarget%2Fissue-3567.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee1a32f26301d91284f8dd91ec153b830b3498d/tests%2Ftarget%2Fissue-3567.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3567.rs?ref=bee1a32f26301d91284f8dd91ec153b830b3498d", "patch": "@@ -0,0 +1,3 @@\n+fn check() {\n+    vec![vec!(0; 10); 10];\n+}"}]}