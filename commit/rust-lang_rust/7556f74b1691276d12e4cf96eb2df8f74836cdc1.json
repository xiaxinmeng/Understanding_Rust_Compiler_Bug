{"sha": "7556f74b1691276d12e4cf96eb2df8f74836cdc1", "node_id": "C_kwDOAAsO6NoAKDc1NTZmNzRiMTY5MTI3NmQxMmU0Y2Y5NmViMmRmOGY3NDgzNmNkYzE", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-10-02T12:13:30Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-10-02T17:40:12Z"}, "message": "Remove hack", "tree": {"sha": "42ae494194288eb5a1132f571c3ad0c142d1005b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42ae494194288eb5a1132f571c3ad0c142d1005b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7556f74b1691276d12e4cf96eb2df8f74836cdc1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmM5zPwACgkQ4laYqTBY\nYXFtTw/+Ie+4T0r2GO4Aw+XzFV/eq+OvmDq5rCtNlhrIVC5uMnvns0UlHewMfdYA\nWI3DycL7Oe+L5zcko1b99e+E/QGO+28QAeahttxrmXhFgjYbr6dWh9zJzPXpgKFQ\nuoMYq3YZuzo0XOpAJ+67C67E0bo3EuXBi/m2zKx3X2mNDWPpc/X5RK0iBx8lMwOB\nHLOJvSgYswEs/gLyslJqwQm5lWyFiRTae6rA9hE8k0NkDqVktb/THT3QXgTAl+eg\nzYMYcRH5sBXn6K/C9heJL+WJpt6aX0tgnKAkvNFJYoSEwer+wLidwiLBE1hzCar4\nQA17cRrgCRvJO+qzj02wpBI4Ov7X1PkLymZMszPp06pLMaH/xnaeq+AO0JLBm5+L\n+wKZivYlI7LH9WE0NaF+pTUtCMfu2dKytHbgTd0d16XsYH8rb2htoVlus6lv3dZZ\n4XYgfk6Mh0UJ2uKiq/7pWF0yBNWYmBzjL4T68piAzGG3lVfMDcRw8P1VhrbWH+Sx\nXPBQqAOVT3oQHQW6mMNtUwbg/Fab74YX7OpwWVVGKeL+vCtQRYxYOdo3yI05T+9j\nI/JqiqYEsLs3ojdGEAnhd1VmiGD0eHNF0QtRve9f5s48gIppR6JxpdTeka8BECiO\n1qcyn3VpP5aktLn9G9jx/wpn3A/tJyE8Sgalcq2zDv2ZaXYlMrU=\n=BysD\n-----END PGP SIGNATURE-----", "payload": "tree 42ae494194288eb5a1132f571c3ad0c142d1005b\nparent 78977cd86cd17e008f94f8579d6a5aaebe46e69b\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1664712810 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1664732412 +0900\n\nRemove hack\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7556f74b1691276d12e4cf96eb2df8f74836cdc1", "html_url": "https://github.com/rust-lang/rust/commit/7556f74b1691276d12e4cf96eb2df8f74836cdc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7556f74b1691276d12e4cf96eb2df8f74836cdc1/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78977cd86cd17e008f94f8579d6a5aaebe46e69b", "url": "https://api.github.com/repos/rust-lang/rust/commits/78977cd86cd17e008f94f8579d6a5aaebe46e69b", "html_url": "https://github.com/rust-lang/rust/commit/78977cd86cd17e008f94f8579d6a5aaebe46e69b"}], "stats": {"total": 54, "additions": 10, "deletions": 44}, "files": [{"sha": "16ba3dd6e3c97a87953df6f9103af984c2a98121", "filename": "crates/hir-ty/src/tests/regression.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7556f74b1691276d12e4cf96eb2df8f74836cdc1/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7556f74b1691276d12e4cf96eb2df8f74836cdc1/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fregression.rs?ref=7556f74b1691276d12e4cf96eb2df8f74836cdc1", "patch": "@@ -1488,7 +1488,6 @@ fn regression_11688_4() {\n \n #[test]\n fn gat_crash_1() {\n-    cov_mark::check!(ignore_gats);\n     check_no_mismatches(\n         r#\"\n trait ATrait {}\n@@ -1527,30 +1526,22 @@ unsafe impl Storage for InlineStorage {\n \n #[test]\n fn gat_crash_3() {\n-    // FIXME: This test currently crashes rust analyzer in a debug build but not in a\n-    // release build (i.e. for the user). With the assumption that tests will always be run\n-    // in debug mode, we catch the unwind and expect that it panicked. See the\n-    // [`crate::utils::generics`] function for more information.\n-    cov_mark::check!(ignore_gats);\n-    std::panic::catch_unwind(|| {\n-        check_no_mismatches(\n-            r#\"\n+    check_no_mismatches(\n+        r#\"\n trait Collection {\n-    type Item;\n-    type Member<T>: Collection<Item = T>;\n-    fn add(&mut self, value: Self::Item) -> Result<(), Self::Error>;\n+type Item;\n+type Member<T>: Collection<Item = T>;\n+fn add(&mut self, value: Self::Item) -> Result<(), Self::Error>;\n }\n struct ConstGen<T, const N: usize> {\n-    data: [T; N],\n+data: [T; N],\n }\n impl<T, const N: usize> Collection for ConstGen<T, N> {\n-    type Item = T;\n-    type Member<U> = ConstGen<U, N>;\n+type Item = T;\n+type Member<U> = ConstGen<U, N>;\n }\n-        \"#,\n-        );\n-    })\n-    .expect_err(\"must panic\");\n+    \"#,\n+    );\n }\n \n #[test]"}, {"sha": "e54bcb421a222222b8a21be500079c034ce737f2", "filename": "crates/hir-ty/src/utils.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7556f74b1691276d12e4cf96eb2df8f74836cdc1/crates%2Fhir-ty%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7556f74b1691276d12e4cf96eb2df8f74836cdc1/crates%2Fhir-ty%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Futils.rs?ref=7556f74b1691276d12e4cf96eb2df8f74836cdc1", "patch": "@@ -173,31 +173,6 @@ pub(super) fn associated_type_by_name_including_super_traits(\n \n pub(crate) fn generics(db: &dyn DefDatabase, def: GenericDefId) -> Generics {\n     let parent_generics = parent_generic_def(db, def).map(|def| Box::new(generics(db, def)));\n-    if parent_generics.is_some() && matches!(def, GenericDefId::TypeAliasId(_)) {\n-        let params = db.generic_params(def);\n-        let parent_params = &parent_generics.as_ref().unwrap().params;\n-        let has_consts =\n-            params.iter().any(|(_, x)| matches!(x, TypeOrConstParamData::ConstParamData(_)));\n-        let parent_has_consts =\n-            parent_params.iter().any(|(_, x)| matches!(x, TypeOrConstParamData::ConstParamData(_)));\n-        return if has_consts || parent_has_consts {\n-            // XXX: treat const generic associated types as not existing to avoid crashes\n-            // (#11769)\n-            //\n-            // Note: Also crashes when the parent has const generics (also even if the GAT\n-            // doesn't use them), see `tests::regression::gat_crash_3` for an example.\n-            // Avoids that by disabling GATs when the parent (i.e. `impl` block) has\n-            // const generics (#12193).\n-            //\n-            // Chalk expects the inner associated type's parameters to come\n-            // *before*, not after the trait's generics as we've always done it.\n-            // Adapting to this requires a larger refactoring\n-            cov_mark::hit!(ignore_gats);\n-            Generics { def, params: Interned::new(Default::default()), parent_generics }\n-        } else {\n-            Generics { def, params, parent_generics }\n-        };\n-    }\n     Generics { def, params: db.generic_params(def), parent_generics }\n }\n "}]}