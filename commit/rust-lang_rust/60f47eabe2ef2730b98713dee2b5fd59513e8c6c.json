{"sha": "60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZjQ3ZWFiZTJlZjI3MzBiOTg3MTNkZWUyYjVmZDU5NTEzZThjNmM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-07T01:54:20Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-07T01:55:24Z"}, "message": "rustc: Parse and stub (broken) typechecking for bounded function types", "tree": {"sha": "cf491427dd1bfac38de4fd93d934702db9669fda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf491427dd1bfac38de4fd93d934702db9669fda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "html_url": "https://github.com/rust-lang/rust/commit/60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0f7ed68e235b61a2e9710864a2283f554bb470d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0f7ed68e235b61a2e9710864a2283f554bb470d", "html_url": "https://github.com/rust-lang/rust/commit/c0f7ed68e235b61a2e9710864a2283f554bb470d"}], "stats": {"total": 187, "additions": 117, "deletions": 70}, "files": [{"sha": "9bd6a5ccf7d4502d341ac26f2ff7d540562f9efc", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "patch": "@@ -558,7 +558,7 @@ enum ty_ {\n     ty_ptr(mt),\n     ty_rptr(@region, mt),\n     ty_rec(~[ty_field]),\n-    ty_fn(proto, fn_decl),\n+    ty_fn(proto, @~[ty_param_bound], fn_decl),\n     ty_tup(~[@ty]),\n     ty_path(@path, node_id),\n     ty_fixed_length(@ty, option<uint>),"}, {"sha": "346b1cf5b599c29f09211a0fcc0f27a1a853f23e", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "patch": "@@ -186,10 +186,12 @@ impl helpers of ext_ctxt_helpers for ext_ctxt {\n         };\n \n         @{id: self.next_id(),\n-          node: ast::ty_fn(ast::proto_block, {inputs: args,\n-                                              output: output,\n-                                              purity: ast::impure_fn,\n-                                              cf: ast::return_val}),\n+          node: ast::ty_fn(ast::proto_block,\n+                           @~[],\n+                           {inputs: args,\n+                            output: output,\n+                            purity: ast::impure_fn,\n+                            cf: ast::return_val}),\n           span: span}\n     }\n \n@@ -441,7 +443,7 @@ fn ser_ty(cx: ext_ctxt, tps: ser_tps_map,\n         ~[#ast[stmt]{$(s).emit_rec($(fld_lambda));}]\n       }\n \n-      ast::ty_fn(_, _) => {\n+      ast::ty_fn(*) => {\n         cx.span_err(ty.span, ~\"cannot serialize function types\");\n         ~[]\n       }\n@@ -681,7 +683,7 @@ fn deser_ty(cx: ext_ctxt, tps: deser_tps_map,\n         #ast{ $(d).read_rec($(fld_lambda)) }\n       }\n \n-      ast::ty_fn(_, _) => {\n+      ast::ty_fn(*) => {\n         #ast{ fail }\n       }\n "}, {"sha": "7f2c2509f8103112da935ccb82e07263636d7ff4", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "patch": "@@ -514,7 +514,10 @@ fn noop_fold_ty(t: ty_, fld: ast_fold) -> ty_ {\n       ty_ptr(mt) => ty_ptr(fold_mt(mt, fld)),\n       ty_rptr(region, mt) => ty_rptr(region, fold_mt(mt, fld)),\n       ty_rec(fields) => ty_rec(vec::map(fields, |f| fold_field(f, fld))),\n-      ty_fn(proto, decl) => ty_fn(proto, fold_fn_decl(decl, fld)),\n+      ty_fn(proto, bounds, decl) =>\n+        ty_fn(proto, @vec::map(*bounds,\n+                               |x| fold_ty_param_bound(x, fld)),\n+                               fold_fn_decl(decl, fld)),\n       ty_tup(tys) => ty_tup(vec::map(tys, |ty| fld.fold_ty(ty))),\n       ty_path(path, id) => ty_path(fld.fold_path(path), fld.new_id(id)),\n       ty_fixed_length(t, vs) => ty_fixed_length(fld.fold_ty(t), vs),"}, {"sha": "5b889b4ad9661df5098ad53b99996f13dea39a0a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "patch": "@@ -50,10 +50,10 @@ import ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              stmt_semi, subtract, sty_box, sty_by_ref, sty_region, sty_uniq,\n              sty_value, token_tree, trait_method, trait_ref, tt_delim, tt_seq,\n              tt_tok, tt_nonterminal, ty, ty_, ty_bot, ty_box, ty_field, ty_fn,\n-             ty_infer, ty_mac, ty_method, ty_nil, ty_param, ty_path, ty_ptr,\n-             ty_rec, ty_rptr, ty_tup, ty_u32, ty_uniq, ty_vec,\n-             ty_fixed_length, unchecked_blk, uniq, unsafe_blk, unsafe_fn,\n-             variant, view_item, view_item_, view_item_export,\n+             ty_infer, ty_mac, ty_method, ty_nil, ty_param, ty_param_bound,\n+             ty_path, ty_ptr, ty_rec, ty_rptr, ty_tup, ty_u32, ty_uniq,\n+             ty_vec, ty_fixed_length, unchecked_blk, uniq, unsafe_blk,\n+             unsafe_fn, variant, view_item, view_item_, view_item_export,\n              view_item_import, view_item_use, view_path, view_path_glob,\n              view_path_list, view_path_simple, visibility, vstore, vstore_box,\n              vstore_fixed, vstore_slice, vstore_uniq};\n@@ -240,14 +240,17 @@ class parser {\n     fn get_id() -> node_id { next_node_id(self.sess) }\n \n     fn parse_ty_fn(purity: ast::purity) -> ty_ {\n-        let proto = if self.eat_keyword(~\"extern\") {\n+        let proto, bounds;\n+        if self.eat_keyword(~\"extern\") {\n             self.expect_keyword(~\"fn\");\n-            ast::proto_bare\n+            proto = ast::proto_bare;\n+            bounds = @~[];\n         } else {\n             self.expect_keyword(~\"fn\");\n-            self.parse_fn_ty_proto()\n+            proto = self.parse_fn_ty_proto();\n+            bounds = self.parse_optional_ty_param_bounds();\n         };\n-        ty_fn(proto, self.parse_ty_fn_decl(purity))\n+        ty_fn(proto, bounds, self.parse_ty_fn_decl(purity))\n     }\n \n     fn parse_ty_fn_decl(purity: ast::purity) -> fn_decl {\n@@ -467,7 +470,7 @@ class parser {\n             self.parse_ty_fn(ast::impure_fn)\n         } else if self.eat_keyword(~\"extern\") {\n             self.expect_keyword(~\"fn\");\n-            ty_fn(proto_bare, self.parse_ty_fn_decl(ast::impure_fn))\n+            ty_fn(proto_bare, @~[], self.parse_ty_fn_decl(ast::impure_fn))\n         } else if self.token == token::MOD_SEP || is_ident(self.token) {\n             let path = self.parse_path_with_tps(colons_before_params);\n             ty_path(path, self.get_id())\n@@ -2125,11 +2128,10 @@ class parser {\n         return spanned(lo, hi, bloc);\n     }\n \n-    fn parse_ty_param() -> ty_param {\n+    fn parse_optional_ty_param_bounds() -> @~[ty_param_bound] {\n         let mut bounds = ~[];\n-        let ident = self.parse_ident();\n         if self.eat(token::COLON) {\n-            while self.token != token::COMMA && self.token != token::GT {\n+            while is_ident(self.token) {\n                 if self.eat_keyword(~\"send\") {\n                     push(bounds, bound_send); }\n                 else if self.eat_keyword(~\"copy\") {\n@@ -2139,10 +2141,17 @@ class parser {\n                 } else if self.eat_keyword(~\"owned\") {\n                     push(bounds, bound_owned);\n                 } else {\n-                    push(bounds, bound_trait(self.parse_ty(false))); }\n+                    push(bounds, bound_trait(self.parse_ty(false)));\n+                }\n             }\n         }\n-        return {ident: ident, id: self.get_id(), bounds: @bounds};\n+        return @move bounds;\n+    }\n+\n+    fn parse_ty_param() -> ty_param {\n+        let ident = self.parse_ident();\n+        let bounds = self.parse_optional_ty_param_bounds();\n+        return {ident: ident, id: self.get_id(), bounds: bounds};\n     }\n \n     fn parse_ty_params() -> ~[ty_param] {"}, {"sha": "b31e63a9f684ec9a2a57d5bb1d255c80398e7ad7", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "patch": "@@ -399,8 +399,8 @@ fn print_type_ex(s: ps, &&ty: @ast::ty, print_colons: bool) {\n         commasep(s, inconsistent, elts, print_type);\n         pclose(s);\n       }\n-      ast::ty_fn(proto, d) => {\n-        print_ty_fn(s, some(proto), d, none, none);\n+      ast::ty_fn(proto, bounds, d) => {\n+        print_ty_fn(s, some(proto), bounds, d, none, none);\n       }\n       ast::ty_path(path, _) => print_path(s, path, print_colons),\n       ast::ty_fixed_length(t, v) => {\n@@ -702,7 +702,7 @@ fn print_ty_method(s: ps, m: ast::ty_method) {\n     hardbreak_if_not_bol(s);\n     maybe_print_comment(s, m.span.lo);\n     print_outer_attributes(s, m.attrs);\n-    print_ty_fn(s, none, m.decl, some(m.ident), some(m.tps));\n+    print_ty_fn(s, none, @~[], m.decl, some(m.ident), some(m.tps));\n     word(s.s, ~\";\");\n }\n \n@@ -1645,10 +1645,12 @@ fn print_arg(s: ps, input: ast::arg) {\n }\n \n fn print_ty_fn(s: ps, opt_proto: option<ast::proto>,\n+               bounds: @~[ast::ty_param_bound],\n                decl: ast::fn_decl, id: option<ast::ident>,\n                tps: option<~[ast::ty_param]>) {\n     ibox(s, indent_unit);\n     word(s.s, opt_proto_to_str(opt_proto));\n+    print_bounds(s, bounds);\n     match id { some(id) => { word(s.s, ~\" \"); word(s.s, *id); } _ => () }\n     match tps { some(tps) => print_type_params(s, tps), _ => () }\n     zerobreak(s.s);"}, {"sha": "08572e83f6e7586d484b273d121693c1797198d2", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "patch": "@@ -195,8 +195,9 @@ fn visit_ty<E>(t: @ty, e: E, v: vt<E>) {\n       ty_tup(ts) => for ts.each |tt| {\n         v.visit_ty(tt, e, v);\n       }\n-      ty_fn(_, decl) => {\n+      ty_fn(_, bounds, decl) => {\n         for decl.inputs.each |a| { v.visit_ty(a.ty, e, v); }\n+        visit_ty_param_bounds(bounds, e, v);\n         v.visit_ty(decl.output, e, v);\n       }\n       ty_path(p, _) => visit_path(p, e, v),\n@@ -251,14 +252,18 @@ fn visit_foreign_item<E>(ni: @foreign_item, e: E, v: vt<E>) {\n     }\n }\n \n+fn visit_ty_param_bounds<E>(bounds: @~[ty_param_bound], e: E, v: vt<E>) {\n+    for vec::each(*bounds) |bound| {\n+        match bound {\n+          bound_trait(t) => v.visit_ty(t, e, v),\n+          bound_copy | bound_send | bound_const | bound_owned => ()\n+        }\n+    }\n+}\n+\n fn visit_ty_params<E>(tps: ~[ty_param], e: E, v: vt<E>) {\n     for tps.each |tp| {\n-        for vec::each(*tp.bounds) |bound| {\n-            match bound {\n-              bound_trait(t) => v.visit_ty(t, e, v),\n-              bound_copy | bound_send | bound_const | bound_owned => ()\n-            }\n-        }\n+        visit_ty_param_bounds(tp.bounds, e, v);\n     }\n }\n "}, {"sha": "e66d0cef71ba45538c8b7068fca21eae17a0947d", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "patch": "@@ -362,6 +362,7 @@ fn parse_purity(c: char) -> purity {\n fn parse_ty_fn(st: @pstate, conv: conv_did) -> ty::fn_ty {\n     let proto = parse_proto(next(st));\n     let purity = parse_purity(next(st));\n+    let bounds = parse_bounds(st, conv);\n     assert (next(st) == '[');\n     let mut inputs: ~[ty::arg] = ~[];\n     while peek(st) != ']' {\n@@ -377,8 +378,8 @@ fn parse_ty_fn(st: @pstate, conv: conv_did) -> ty::fn_ty {\n     }\n     st.pos += 1u; // eat the ']'\n     let (ret_style, ret_ty) = parse_ret_ty(st, conv);\n-    return {purity: purity, proto: proto, inputs: inputs, output: ret_ty,\n-         ret_style: ret_style};\n+    return {purity: purity, proto: proto, bounds: bounds, inputs: inputs,\n+            output: ret_ty, ret_style: ret_style};\n }\n \n "}, {"sha": "9e67157b1811681ca47100f4b788807b3433b548", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "patch": "@@ -337,6 +337,7 @@ fn enc_purity(w: io::writer, p: purity) {\n fn enc_ty_fn(w: io::writer, cx: @ctxt, ft: ty::fn_ty) {\n     enc_proto(w, ft.proto);\n     enc_purity(w, ft.purity);\n+    enc_bounds(w, cx, ft.bounds);\n     w.write_char('[');\n     for ft.inputs.each |arg| {\n         enc_mode(w, cx, arg.mode);"}, {"sha": "16c08641e17a1d9789a360b89dfe17ef64bc9976", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "patch": "@@ -1982,13 +1982,15 @@ fn normalize_for_monomorphization(tcx: ty::ctxt, ty: ty::t) -> option<ty::t> {\n       ty::ty_fn(fty) => {\n         some(ty::mk_fn(tcx, {purity: ast::impure_fn,\n                              proto: fty.proto,\n+                             bounds: @~[],\n                              inputs: ~[],\n                              output: ty::mk_nil(tcx),\n                              ret_style: ast::return_val}))\n       }\n       ty::ty_trait(_, _) => {\n         some(ty::mk_fn(tcx, {purity: ast::impure_fn,\n                              proto: ast::proto_box,\n+                             bounds: @~[],\n                              inputs: ~[],\n                              output: ty::mk_nil(tcx),\n                              ret_style: ast::return_val}))"}, {"sha": "27f7c8c01833e48f8a237af9187fc053ef4a2ea2", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "patch": "@@ -961,6 +961,7 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::foreign_item,\n         let fty = ty::mk_fn(bcx.tcx(), {\n             purity: ast::impure_fn,\n             proto: ast::proto_block,\n+            bounds: @~[],\n             inputs: ~[{\n                 mode: ast::expl(ast::by_val),\n                 ty: ty::mk_imm_ptr("}, {"sha": "91eb030ec039e67304825245e66d543c2a785942", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "patch": "@@ -316,11 +316,13 @@ enum closure_kind {\n ///\n /// - `purity` is the function's effect (pure, impure, unsafe).\n /// - `proto` is the protocol (fn@, fn~, etc).\n+/// - `bound` is the parameter bounds on the function's upvars.\n /// - `inputs` is the list of arguments and their modes.\n /// - `output` is the return type.\n-/// - `ret_style`indicates whether the function returns a value or fails.\n+/// - `ret_style` indicates whether the function returns a value or fails.\n type fn_ty = {purity: ast::purity,\n               proto: ast::proto,\n+              bounds: @~[param_bound],\n               inputs: ~[arg],\n               output: t,\n               ret_style: ret_style};"}, {"sha": "c91607bc9d144fcf501d1603e5ae1429ac827c25", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "patch": "@@ -246,7 +246,7 @@ fn check_main_fn_ty(ccx: @crate_ctxt,\n     let tcx = ccx.tcx;\n     let main_t = ty::node_id_to_type(tcx, main_id);\n     match ty::get(main_t).struct {\n-      ty::ty_fn({purity: ast::impure_fn, proto: ast::proto_bare,\n+      ty::ty_fn({purity: ast::impure_fn, proto: ast::proto_bare, bounds,\n                  inputs, output, ret_style: ast::return_val}) => {\n         match tcx.items.find(main_id) {\n          some(ast_map::node_item(it,_)) => {"}, {"sha": "c9008bc13891982819d209f3900e4e322f862eb0", "filename": "src/rustc/middle/typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "patch": "@@ -261,8 +261,10 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope copy owned>(\n         };\n         ty::mk_rec(tcx, flds)\n       }\n-      ast::ty_fn(proto, decl) => {\n-        ty::mk_fn(tcx, ty_of_fn_decl(self, rscope, proto, decl, none))\n+      ast::ty_fn(proto, ast_bounds, decl) => {\n+        let bounds = collect::compute_bounds(self.ccx(), ast_bounds);\n+        let fn_decl = ty_of_fn_decl(self, rscope, proto, bounds, decl, none);\n+        ty::mk_fn(tcx, fn_decl)\n       }\n       ast::ty_path(path, id) => {\n         let a_def = match tcx.def_map.find(id) {\n@@ -398,6 +400,7 @@ type expected_tys = option<{inputs: ~[ty::arg],\n fn ty_of_fn_decl<AC: ast_conv, RS: region_scope copy owned>(\n     self: AC, rscope: RS,\n     proto: ast::proto,\n+    bounds: @~[ty::param_bound],\n     decl: ast::fn_decl,\n     expected_tys: expected_tys) -> ty::fn_ty {\n \n@@ -423,7 +426,7 @@ fn ty_of_fn_decl<AC: ast_conv, RS: region_scope copy owned>(\n           _ => ast_ty_to_ty(self, rb, decl.output)\n         };\n \n-        {purity: decl.purity, proto: proto, inputs: input_tys,\n+        {purity: decl.purity, proto: proto, bounds: bounds, inputs: input_tys,\n          output: output_ty, ret_style: decl.cf}\n     }\n }"}, {"sha": "2c6be53601c53ed8713061ef9c70bd50faceec1a", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "patch": "@@ -1135,7 +1135,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         };\n \n         // construct the function type\n-        let fn_ty = astconv::ty_of_fn_decl(fcx, fcx, proto,\n+        let fn_ty = astconv::ty_of_fn_decl(fcx, fcx, proto, @~[],\n                                            decl, expected_tys);\n         let fty = ty::mk_fn(tcx, fn_ty);\n \n@@ -2401,6 +2401,7 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n         let fty = ty::mk_fn(ccx.tcx, {\n             purity: ast::impure_fn,\n             proto: ast::proto_block,\n+            bounds: @~[],\n             inputs: ~[{\n                 mode: ast::expl(ast::by_val),\n                 ty: ty::mk_imm_ptr(\n@@ -2420,6 +2421,7 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n     };\n     let fty = ty::mk_fn(tcx, {purity: ast::impure_fn,\n                               proto: ast::proto_bare,\n+                              bounds: @~[],\n                               inputs: inputs, output: output,\n                               ret_style: ast::return_val});\n     let i_ty = ty::lookup_item_type(ccx.tcx, local_def(it.id));"}, {"sha": "ce41330d25d7e3e8650becdb6960fe78ca30bac3", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 36, "deletions": 30, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "patch": "@@ -125,6 +125,7 @@ fn get_enum_variant_types(ccx: @crate_ctxt,\n             });\n             ty::mk_fn(tcx, {purity: ast::pure_fn,\n                             proto: ast::proto_box,\n+                            bounds: @~[],\n                             inputs: args,\n                             output: enum_ty,\n                             ret_style: ast::return_val})\n@@ -396,6 +397,7 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n             let t_ctor = ty::mk_fn(\n                 tcx, {purity: ast::impure_fn,\n                       proto: ast::proto_block,\n+                      bounds: @~[],\n                       inputs: t_args,\n                       output: t_res,\n                       ret_style: ast::return_val});\n@@ -410,7 +412,7 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n             // Write the dtor type\n             let t_dtor = ty::mk_fn(\n                 tcx,\n-                ty_of_fn_decl(ccx, type_rscope(rp), ast::proto_block,\n+                ty_of_fn_decl(ccx, type_rscope(rp), ast::proto_block, @~[],\n                               ast_util::dtor_dec(), none));\n             write_ty_to_tcx(tcx, dtor.node.id, t_dtor);\n             tcx.tcache.insert(local_def(dtor.node.id),\n@@ -460,9 +462,10 @@ fn convert_foreign(ccx: @crate_ctxt, i: @ast::foreign_item) {\n fn ty_of_method(ccx: @crate_ctxt,\n                 m: @ast::method,\n                 rp: bool) -> ty::method {\n+    // XXX: Are the bounds correct here?\n     {ident: m.ident,\n      tps: ty_param_bounds(ccx, m.tps),\n-     fty: ty_of_fn_decl(ccx, type_rscope(rp), ast::proto_bare,\n+     fty: ty_of_fn_decl(ccx, type_rscope(rp), ast::proto_bare, @~[],\n                         m.decl, none),\n      self_ty: m.self_ty.node,\n      purity: m.decl.purity,\n@@ -474,8 +477,8 @@ fn ty_of_ty_method(self: @crate_ctxt,\n                    rp: bool) -> ty::method {\n     {ident: m.ident,\n      tps: ty_param_bounds(self, m.tps),\n-     fty: ty_of_fn_decl(self, type_rscope(rp), ast::proto_bare,\n-                                 m.decl, none),\n+     fty: ty_of_fn_decl(self, type_rscope(rp), ast::proto_bare, @~[], m.decl,\n+                        none),\n      // assume public, because this is only invoked on trait methods\n      self_ty: m.self_ty.node,\n      purity: m.decl.purity, vis: ast::public}\n@@ -528,8 +531,8 @@ fn ty_of_item(ccx: @crate_ctxt, it: @ast::item)\n       }\n       ast::item_fn(decl, tps, _) => {\n         let bounds = ty_param_bounds(ccx, tps);\n-        let tofd = ty_of_fn_decl(ccx, empty_rscope, ast::proto_bare,\n-                                          decl, none);\n+        let tofd = ty_of_fn_decl(ccx, empty_rscope, ast::proto_bare, @~[],\n+                                 decl, none);\n         let tpt = {bounds: bounds,\n                    rp: false, // functions do not have a self\n                    ty: ty::mk_fn(ccx.tcx, tofd)};\n@@ -599,40 +602,42 @@ fn ty_of_foreign_item(ccx: @crate_ctxt, it: @ast::foreign_item)\n       }\n     }\n }\n-fn ty_param_bounds(ccx: @crate_ctxt,\n-                   params: ~[ast::ty_param]) -> @~[ty::param_bounds] {\n \n-    fn compute_bounds(ccx: @crate_ctxt,\n-                      param: ast::ty_param) -> ty::param_bounds {\n-        @do vec::flat_map(*param.bounds) |b| {\n-            match b {\n-              ast::bound_send => ~[ty::bound_send],\n-              ast::bound_copy => ~[ty::bound_copy],\n-              ast::bound_const => ~[ty::bound_const],\n-              ast::bound_owned => ~[ty::bound_owned],\n-              ast::bound_trait(t) => {\n-                let ity = ast_ty_to_ty(ccx, empty_rscope, t);\n-                match ty::get(ity).struct {\n-                  ty::ty_trait(*) => {\n-                    ~[ty::bound_trait(ity)]\n-                  }\n-                  _ => {\n-                    ccx.tcx.sess.span_err(\n-                        t.span, ~\"type parameter bounds must be \\\n-                                  trait types\");\n-                    ~[]\n-                  }\n-                }\n+fn compute_bounds(ccx: @crate_ctxt,\n+                  ast_bounds: @~[ast::ty_param_bound]) -> ty::param_bounds {\n+    @do vec::flat_map(*ast_bounds) |b| {\n+        match b {\n+          ast::bound_send => ~[ty::bound_send],\n+          ast::bound_copy => ~[ty::bound_copy],\n+          ast::bound_const => ~[ty::bound_const],\n+          ast::bound_owned => ~[ty::bound_owned],\n+          ast::bound_trait(t) => {\n+            let ity = ast_ty_to_ty(ccx, empty_rscope, t);\n+            match ty::get(ity).struct {\n+              ty::ty_trait(*) => {\n+                ~[ty::bound_trait(ity)]\n+              }\n+              _ => {\n+                ccx.tcx.sess.span_err(\n+                    t.span, ~\"type parameter bounds must be \\\n+                              trait types\");\n+                ~[]\n               }\n             }\n+          }\n         }\n     }\n+}\n+\n+fn ty_param_bounds(ccx: @crate_ctxt,\n+                   params: ~[ast::ty_param]) -> @~[ty::param_bounds] {\n+\n \n     @do params.map |param| {\n         match ccx.tcx.ty_param_bounds.find(param.id) {\n           some(bs) => bs,\n           none => {\n-            let bounds = compute_bounds(ccx, param);\n+            let bounds = compute_bounds(ccx, param.bounds);\n             ccx.tcx.ty_param_bounds.insert(param.id, bounds);\n             bounds\n           }\n@@ -652,6 +657,7 @@ fn ty_of_foreign_fn_decl(ccx: @crate_ctxt,\n \n     let t_fn = ty::mk_fn(ccx.tcx, {purity: decl.purity,\n                                    proto: ast::proto_bare,\n+                                   bounds: @~[],\n                                    inputs: input_tys,\n                                    output: output_ty,\n                                    ret_style: ast::return_val});"}, {"sha": "42291ea30c7105917d73743a19e56f8370d52736", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "patch": "@@ -1717,6 +1717,7 @@ fn super_fns<C:combine>(\n                     //                         b_f.constraints).then {||\n                         ok({purity: purity,\n                             proto: p,\n+                            bounds: a_f.bounds, // XXX: This is wrong!\n                             inputs: inputs,\n                             output: output,\n                             ret_style: rs})"}, {"sha": "b21050f4d43e99c7ec5e563fe072d9125be766ef", "filename": "src/test/run-pass/bounded-fn-type.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Ftest%2Frun-pass%2Fbounded-fn-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f47eabe2ef2730b98713dee2b5fd59513e8c6c/src%2Ftest%2Frun-pass%2Fbounded-fn-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbounded-fn-type.rs?ref=60f47eabe2ef2730b98713dee2b5fd59513e8c6c", "patch": "@@ -0,0 +1,7 @@\n+fn ignore<T>(_x: T) {}\n+\n+fn main() {\n+    let f: fn@:send() = ||();\n+    ignore(f);\n+}\n+"}]}