{"sha": "427952e8088233576102a1cc32f67183d22e922b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNzk1MmU4MDg4MjMzNTc2MTAyYTFjYzMyZjY3MTgzZDIyZTkyMmI=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2019-11-06T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2019-11-10T20:01:02Z"}, "message": "Make error and warning annotations mandatory in UI tests\n\nThis change makes error and warning annotations mandatory in UI tests.\nThe only exception are tests that use error patterns to match compiler\noutput and don't have any annotations.", "tree": {"sha": "80f687c95da6288d388dbe8b73f1d76cecab77d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80f687c95da6288d388dbe8b73f1d76cecab77d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/427952e8088233576102a1cc32f67183d22e922b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/427952e8088233576102a1cc32f67183d22e922b", "html_url": "https://github.com/rust-lang/rust/commit/427952e8088233576102a1cc32f67183d22e922b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/427952e8088233576102a1cc32f67183d22e922b/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70b146c2cb435880c8a1f05384611e6de50ec2a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/70b146c2cb435880c8a1f05384611e6de50ec2a3", "html_url": "https://github.com/rust-lang/rust/commit/70b146c2cb435880c8a1f05384611e6de50ec2a3"}], "stats": {"total": 706, "additions": 380, "deletions": 326}, "files": [{"sha": "c936fe0550ac98568e07efcee78f360cd4c405b1", "filename": "src/test/ui/associated-type-bounds/dyn-lcsit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(associated_type_bounds)]\n #![feature(impl_trait_in_bindings)]\n-\n+//~^ WARNING `impl_trait_in_bindings` is incomplete\n #![allow(non_upper_case_globals)]\n \n use std::ops::Add;"}, {"sha": "497205f9f189ac56d2ca11a2bb9837e6ac5fa6a8", "filename": "src/test/ui/associated-type-bounds/lcsit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(associated_type_bounds)]\n #![feature(impl_trait_in_bindings)]\n-\n+//~^ WARNING `impl_trait_in_bindings` is incomplete\n #![allow(non_upper_case_globals)]\n \n use std::ops::Add;"}, {"sha": "f74c5ff1eddfc1c0df9531599e7121295dbd96df", "filename": "src/test/ui/associated-type-bounds/type-alias.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftype-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftype-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftype-alias.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,19 +1,19 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(associated_type_bounds)]\n \n-type _TaWhere1<T> where T: Iterator<Item: Copy> = T;\n-type _TaWhere2<T> where T: Iterator<Item: 'static> = T;\n-type _TaWhere3<T> where T: Iterator<Item: 'static> = T;\n-type _TaWhere4<T> where T: Iterator<Item: 'static + Copy + Send> = T;\n-type _TaWhere5<T> where T: Iterator<Item: for<'a> Into<&'a u8>> = T;\n-type _TaWhere6<T> where T: Iterator<Item: Iterator<Item: Copy>> = T;\n+type _TaWhere1<T> where T: Iterator<Item: Copy> = T; //~ WARNING type_alias_bounds\n+type _TaWhere2<T> where T: Iterator<Item: 'static> = T; //~ WARNING type_alias_bounds\n+type _TaWhere3<T> where T: Iterator<Item: 'static> = T; //~ WARNING type_alias_bounds\n+type _TaWhere4<T> where T: Iterator<Item: 'static + Copy + Send> = T; //~ WARNING type_alias_bounds\n+type _TaWhere5<T> where T: Iterator<Item: for<'a> Into<&'a u8>> = T; //~ WARNING type_alias_bounds\n+type _TaWhere6<T> where T: Iterator<Item: Iterator<Item: Copy>> = T; //~ WARNING type_alias_bounds\n \n-type _TaInline1<T: Iterator<Item: Copy>> = T;\n-type _TaInline2<T: Iterator<Item: 'static>> = T;\n-type _TaInline3<T: Iterator<Item: 'static>> = T;\n-type _TaInline4<T: Iterator<Item: 'static + Copy + Send>> = T;\n-type _TaInline5<T: Iterator<Item: for<'a> Into<&'a u8>>> = T;\n-type _TaInline6<T: Iterator<Item: Iterator<Item: Copy>>> = T;\n+type _TaInline1<T: Iterator<Item: Copy>> = T; //~ WARNING type_alias_bounds\n+type _TaInline2<T: Iterator<Item: 'static>> = T; //~ WARNING type_alias_bounds\n+type _TaInline3<T: Iterator<Item: 'static>> = T; //~ WARNING type_alias_bounds\n+type _TaInline4<T: Iterator<Item: 'static + Copy + Send>> = T; //~ WARNING type_alias_bounds\n+type _TaInline5<T: Iterator<Item: for<'a> Into<&'a u8>>> = T; //~ WARNING type_alias_bounds\n+type _TaInline6<T: Iterator<Item: Iterator<Item: Copy>>> = T; //~ WARNING type_alias_bounds\n \n fn main() {}"}, {"sha": "c2840d7386f9829d72f3788044002cfa0ef2e671", "filename": "src/test/ui/async-await/issues/issue-54752-async-block.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -4,3 +4,4 @@\n // pp-exact\n \n fn main() { let _a = (async  { }); }\n+//~^ WARNING unnecessary parentheses around assigned value"}, {"sha": "13b2fe9c3d1a9266bcd2e4e11e931311eeb36171", "filename": "src/test/ui/block-expr-precedence.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fblock-expr-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fblock-expr-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-expr-precedence.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -58,4 +58,5 @@ pub fn main() {\n   if (true) { 12; } {-num};\n   if (true) { 12; }; {-num};\n   if (true) { 12; };;; -num;\n+  //~^ WARNING unnecessary trailing semicolons\n }"}, {"sha": "3994d3186817d004e4e4df3e11332b7cfcb33fc0", "filename": "src/test/ui/codemap_tests/unicode_3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_3.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,6 +1,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n \n fn main() {\n-    let s = \"Z\u0368A\u0351\u0366\u0352\u034b\u0364\u0351\u031aL\u0304\u0351\u034bG\u0302\u0368\u0365\u033f\u0352\u033d\u0344O\u0365\u035b\u036d!\u030f\"; while true { break; }\n+    let s = \"Z\u0368A\u0351\u0366\u0352\u034b\u0364\u0351\u031aL\u0304\u0351\u034bG\u0302\u0368\u0365\u033f\u0352\u033d\u0344O\u0365\u035b\u036d!\u030f\"; while true { break; } //~ WARNING while_true\n     println!(\"{}\", s);\n }"}, {"sha": "9b94b45f52264c44057c78d0e0e7036d7bfc57f8", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -6,18 +6,18 @@ fn double(x: usize) -> usize { x * 2 }\n const fn double_const(x: usize) -> usize { x * 2 }\n \n const X: fn(usize) -> usize = double;\n-const X_const: fn(usize) -> usize = double_const;\n+const X_CONST: fn(usize) -> usize = double_const;\n \n const fn bar(x: usize) -> usize {\n-    X(x)\n+    X(x) //~ WARNING skipping const checks\n }\n \n const fn bar_const(x: usize) -> usize {\n-    X_const(x)\n+    X_CONST(x) //~ WARNING skipping const checks\n }\n \n const fn foo(x: fn(usize) -> usize, y: usize)  -> usize {\n-    x(y)\n+    x(y) //~ WARNING skipping const checks\n }\n \n fn main() {"}, {"sha": "19fa39603460bb9fd676c6ae887452956e5646b5", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -7,7 +7,7 @@ LL |     X(x)\n warning: skipping const checks\n   --> $DIR/const_fn_ptr.rs:16:5\n    |\n-LL |     X_const(x)\n+LL |     X_CONST(x)\n    |     ^^^^^^^^^^\n \n warning: skipping const checks\n@@ -16,11 +16,3 @@ warning: skipping const checks\n LL |     x(y)\n    |     ^^^^\n \n-warning: constant `X_const` should have an upper case name\n-  --> $DIR/const_fn_ptr.rs:9:7\n-   |\n-LL | const X_const: fn(usize) -> usize = double_const;\n-   |       ^^^^^^^ help: convert the identifier to upper case: `X_CONST`\n-   |\n-   = note: `#[warn(non_upper_case_globals)]` on by default\n-"}, {"sha": "ba530438f9a1d223ac3495d92b4a5571ea60ab01", "filename": "src/test/ui/consts/const-eval/issue-64970.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-64970.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-64970.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-64970.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -10,6 +10,6 @@ fn foo(mut n: i32) {\n     }\n \n     if n > 0i32 {\n-        1i32 / n;\n+        let _ = 1i32 / n;\n     }\n }"}, {"sha": "2c44b68cbd1d1921213f1cf1533f0d05dd5e5b89", "filename": "src/test/ui/consts/const-eval/issue-64970.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70b146c2cb435880c8a1f05384611e6de50ec2a3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-64970.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70b146c2cb435880c8a1f05384611e6de50ec2a3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-64970.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-64970.stderr?ref=70b146c2cb435880c8a1f05384611e6de50ec2a3", "patch": "@@ -1,8 +0,0 @@\n-warning: unused arithmetic operation that must be used\n-  --> $DIR/issue-64970.rs:13:9\n-   |\n-LL |         1i32 / n;\n-   |         ^^^^^^^^\n-   |\n-   = note: `#[warn(unused_must_use)]` on by default\n-"}, {"sha": "623fa2a1547c84579bde45536cf1caf121d3cc9b", "filename": "src/test/ui/consts/miri_unleashed/enum_discriminants.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fenum_discriminants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fenum_discriminants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fenum_discriminants.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -20,9 +20,9 @@ const OVERFLOW: usize = {\n         C(WithWraparoundInvalidValues),\n     }\n \n-    let x = Foo::B;\n+    let x = Foo::B; //~ WARNING skipping const checks\n     match x {\n-        Foo::B => 0,\n+        Foo::B => 0, //~ WARNING skipping const checks\n         _ => panic!(),\n     }\n };\n@@ -86,6 +86,8 @@ const MORE_OVERFLOW: usize = {\n     }\n \n     if let E1::V2 { .. } = (E1::V1 { f: true }) {\n+        //~^ WARNING skipping const checks\n+        //~| WARNING skipping const checks\n         unreachable!()\n     }\n     if let E1::V1 { .. } = (E1::V1 { f: true }) {"}, {"sha": "370fec6fbd4be312cd2d7ecab963d8e5a75578b0", "filename": "src/test/ui/consts/packed_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fconsts%2Fpacked_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fconsts%2Fpacked_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpacked_pattern.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -13,7 +13,7 @@ const FOO: Foo = Foo {\n fn main() {\n     match FOO {\n         Foo { field: (5, 6, 7, 8) } => {},\n-        FOO => unreachable!(),\n+        FOO => unreachable!(), //~ WARNING unreachable pattern\n         _ => unreachable!(),\n     }\n }"}, {"sha": "ef68d9e513aae756f5ceea80e2ee44d248e60cee", "filename": "src/test/ui/consts/packed_pattern2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fconsts%2Fpacked_pattern2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fconsts%2Fpacked_pattern2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpacked_pattern2.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -21,7 +21,7 @@ const FOO: Bar = Bar {\n fn main() {\n     match FOO {\n         Bar { a: Foo { field: (5, 6) } } => {},\n-        FOO => unreachable!(),\n+        FOO => unreachable!(), //~ WARNING unreachable pattern\n         _ => unreachable!(),\n     }\n }"}, {"sha": "bfeab49548f0e769a9651ba723a866f2b1fc9a35", "filename": "src/test/ui/deprecation/deprecation-in-future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-future.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -7,6 +7,7 @@ pub fn deprecated_future() {}\n \n fn test() {\n     deprecated_future(); // ok; deprecated_in_future only applies to rustc_deprecated\n+    //~^ WARNING use of deprecated item 'deprecated_future': text [deprecated]\n }\n \n fn main() {}"}, {"sha": "56206425f84c2aa7e33bdc35c6fb0bb96e4e35ab", "filename": "src/test/ui/extern/extern-prelude-core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fextern%2Fextern-prelude-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fextern%2Fextern-prelude-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-prelude-core.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(extern_prelude, lang_items, start)]\n+#![feature(lang_items, start)]\n #![no_std]\n \n extern crate std as other;"}, {"sha": "f90eb933d3fd8a7fbf1259ffab9e41104f9997be", "filename": "src/test/ui/extern/extern-prelude-core.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70b146c2cb435880c8a1f05384611e6de50ec2a3/src%2Ftest%2Fui%2Fextern%2Fextern-prelude-core.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70b146c2cb435880c8a1f05384611e6de50ec2a3/src%2Ftest%2Fui%2Fextern%2Fextern-prelude-core.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-prelude-core.stderr?ref=70b146c2cb435880c8a1f05384611e6de50ec2a3", "patch": "@@ -1,8 +0,0 @@\n-warning: the feature `extern_prelude` has been stable since 1.30.0 and no longer requires an attribute to enable\n-  --> $DIR/extern-prelude-core.rs:2:12\n-   |\n-LL | #![feature(extern_prelude, lang_items, start)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(stable_features)]` on by default\n-"}, {"sha": "b5627fad960b26626863ce825dd78f9d139f4aeb", "filename": "src/test/ui/extern/extern-prelude-std.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fextern%2Fextern-prelude-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fextern%2Fextern-prelude-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-prelude-std.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(extern_prelude)]\n \n mod foo {\n     pub fn test() {"}, {"sha": "73b1dcfd5e1b830b0847722e16746a36b8681b72", "filename": "src/test/ui/extern/extern-prelude-std.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70b146c2cb435880c8a1f05384611e6de50ec2a3/src%2Ftest%2Fui%2Fextern%2Fextern-prelude-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70b146c2cb435880c8a1f05384611e6de50ec2a3/src%2Ftest%2Fui%2Fextern%2Fextern-prelude-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-prelude-std.stderr?ref=70b146c2cb435880c8a1f05384611e6de50ec2a3", "patch": "@@ -1,8 +0,0 @@\n-warning: the feature `extern_prelude` has been stable since 1.30.0 and no longer requires an attribute to enable\n-  --> $DIR/extern-prelude-std.rs:2:12\n-   |\n-LL | #![feature(extern_prelude)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(stable_features)]` on by default\n-"}, {"sha": "eb176fed87c0041203c2c95c96fa5c07b66dfcf7", "filename": "src/test/ui/hygiene/dollar-crate-modern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fhygiene%2Fdollar-crate-modern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fhygiene%2Fdollar-crate-modern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fdollar-crate-modern.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -3,7 +3,7 @@\n // check-pass\n // aux-build:intercrate.rs\n \n-#![feature(decl_macro, crate_in_paths)]\n+#![feature(decl_macro)]\n \n extern crate intercrate;\n "}, {"sha": "cd40df16ba7d1329ba16d4c1a528fb9dd4c51658", "filename": "src/test/ui/hygiene/dollar-crate-modern.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70b146c2cb435880c8a1f05384611e6de50ec2a3/src%2Ftest%2Fui%2Fhygiene%2Fdollar-crate-modern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70b146c2cb435880c8a1f05384611e6de50ec2a3/src%2Ftest%2Fui%2Fhygiene%2Fdollar-crate-modern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fdollar-crate-modern.stderr?ref=70b146c2cb435880c8a1f05384611e6de50ec2a3", "patch": "@@ -1,8 +0,0 @@\n-warning: the feature `crate_in_paths` has been stable since 1.30.0 and no longer requires an attribute to enable\n-  --> $DIR/dollar-crate-modern.rs:6:24\n-   |\n-LL | #![feature(decl_macro, crate_in_paths)]\n-   |                        ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(stable_features)]` on by default\n-"}, {"sha": "d319ae6403fc5d709bc093d5be237981b47b196a", "filename": "src/test/ui/hygiene/generic_params.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -4,6 +4,7 @@\n // ignore-pretty pretty-printing is unhygienic\n \n #![feature(decl_macro, rustc_attrs, const_generics)]\n+//~^ WARNING the feature `const_generics` is incomplete\n \n mod type_params {\n     macro m($T:ident) {"}, {"sha": "5d22cf857b7a17677bc3cbdfbfc4443d6f14be81", "filename": "src/test/ui/hygiene/hygienic-labels-in-let.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -13,20 +13,36 @@ macro_rules! loop_x {\n     ($e: expr) => {\n         // $e shouldn't be able to interact with this 'x\n         'x: loop { $e }\n+        //~^ WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n     }\n }\n \n macro_rules! while_true {\n     ($e: expr) => {\n         // $e shouldn't be able to interact with this 'x\n         'x: while 1 + 1 == 2 { $e }\n+        //~^ WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n     }\n }\n \n macro_rules! run_once {\n     ($e: expr) => {\n         // ditto\n         'x: for _ in 0..1 { $e }\n+        //~^ WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n     }\n }\n \n@@ -45,6 +61,8 @@ pub fn main() {\n \n     let k: isize = {\n         'x: for _ in 0..1 {\n+            //~^ WARNING shadows a label name that is already in scope\n+            //~| WARNING shadows a label name that is already in scope\n             // ditto\n             loop_x!(break 'x);\n             i += 1;\n@@ -55,6 +73,10 @@ pub fn main() {\n \n     let l: isize = {\n         'x: for _ in 0..1 {\n+            //~^ WARNING shadows a label name that is already in scope\n+            //~| WARNING shadows a label name that is already in scope\n+            //~| WARNING shadows a label name that is already in scope\n+            //~| WARNING shadows a label name that is already in scope\n             // ditto\n             while_true!(break 'x);\n             i += 1;\n@@ -65,6 +87,12 @@ pub fn main() {\n \n     let n: isize = {\n         'x: for _ in 0..1 {\n+            //~^ WARNING shadows a label name that is already in scope\n+            //~| WARNING shadows a label name that is already in scope\n+            //~| WARNING shadows a label name that is already in scope\n+            //~| WARNING shadows a label name that is already in scope\n+            //~| WARNING shadows a label name that is already in scope\n+            //~| WARNING shadows a label name that is already in scope\n             // ditto\n             run_once!(continue 'x);\n             i += 1;"}, {"sha": "d88470f32a3e00e89b66c5c7b3a1e6a490926b89", "filename": "src/test/ui/hygiene/hygienic-labels-in-let.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.stderr?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -11,7 +11,7 @@ LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:47:9\n+  --> $DIR/hygienic-labels-in-let.rs:63:9\n    |\n LL |         'x: loop {\n    |         -- first declared here\n@@ -20,7 +20,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:47:9\n+  --> $DIR/hygienic-labels-in-let.rs:63:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -60,12 +60,12 @@ LL |         'x: loop { $e }\n ...\n LL |         'x: for _ in 0..1 {\n    |         -- first declared here\n-LL |             // ditto\n+...\n LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:57:9\n+  --> $DIR/hygienic-labels-in-let.rs:75:9\n    |\n LL |         'x: loop {\n    |         -- first declared here\n@@ -74,7 +74,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:57:9\n+  --> $DIR/hygienic-labels-in-let.rs:75:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -83,7 +83,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:57:9\n+  --> $DIR/hygienic-labels-in-let.rs:75:9\n    |\n LL |         'x: for _ in 0..1 {\n    |         -- first declared here\n@@ -92,7 +92,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:57:9\n+  --> $DIR/hygienic-labels-in-let.rs:75:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -101,7 +101,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:22:9\n+  --> $DIR/hygienic-labels-in-let.rs:26:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -113,7 +113,7 @@ LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:22:9\n+  --> $DIR/hygienic-labels-in-let.rs:26:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -125,7 +125,7 @@ LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:22:9\n+  --> $DIR/hygienic-labels-in-let.rs:26:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -137,7 +137,7 @@ LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:22:9\n+  --> $DIR/hygienic-labels-in-let.rs:26:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -149,19 +149,19 @@ LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:22:9\n+  --> $DIR/hygienic-labels-in-let.rs:26:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         ^^ lifetime 'x already in scope\n ...\n LL |         'x: for _ in 0..1 {\n    |         -- first declared here\n-LL |             // ditto\n+...\n LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:67:9\n+  --> $DIR/hygienic-labels-in-let.rs:89:9\n    |\n LL |         'x: loop {\n    |         -- first declared here\n@@ -170,7 +170,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:67:9\n+  --> $DIR/hygienic-labels-in-let.rs:89:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -179,7 +179,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:67:9\n+  --> $DIR/hygienic-labels-in-let.rs:89:9\n    |\n LL |         'x: for _ in 0..1 {\n    |         -- first declared here\n@@ -188,7 +188,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:67:9\n+  --> $DIR/hygienic-labels-in-let.rs:89:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -197,7 +197,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:67:9\n+  --> $DIR/hygienic-labels-in-let.rs:89:9\n    |\n LL |         'x: for _ in 0..1 {\n    |         -- first declared here\n@@ -206,7 +206,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:67:9\n+  --> $DIR/hygienic-labels-in-let.rs:89:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         -- first declared here\n@@ -215,7 +215,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:29:9\n+  --> $DIR/hygienic-labels-in-let.rs:38:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -227,7 +227,7 @@ LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:29:9\n+  --> $DIR/hygienic-labels-in-let.rs:38:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -239,7 +239,7 @@ LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:29:9\n+  --> $DIR/hygienic-labels-in-let.rs:38:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -251,7 +251,7 @@ LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:29:9\n+  --> $DIR/hygienic-labels-in-let.rs:38:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -263,7 +263,7 @@ LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:29:9\n+  --> $DIR/hygienic-labels-in-let.rs:38:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -275,7 +275,7 @@ LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:29:9\n+  --> $DIR/hygienic-labels-in-let.rs:38:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         -- first declared here\n@@ -287,14 +287,14 @@ LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:29:9\n+  --> $DIR/hygienic-labels-in-let.rs:38:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n ...\n LL |         'x: for _ in 0..1 {\n    |         -- first declared here\n-LL |             // ditto\n+...\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n "}, {"sha": "8eafb4c8d215a237cecfdec67926ce5a3b8fba37", "filename": "src/test/ui/hygiene/hygienic-labels.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -10,20 +10,36 @@ macro_rules! loop_x {\n     ($e: expr) => {\n         // $e shouldn't be able to interact with this 'x\n         'x: loop { $e }\n+        //~^ WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n     }\n }\n \n macro_rules! run_once {\n     ($e: expr) => {\n         // ditto\n         'x: for _ in 0..1 { $e }\n+        //~^ WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n     }\n }\n \n macro_rules! while_x {\n     ($e: expr) => {\n         // ditto\n         'x: while 1 + 1 == 2 { $e }\n+        //~^ WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n     }\n }\n \n@@ -35,17 +51,32 @@ pub fn main() {\n     }\n \n     'x: loop {\n+        //~^ WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+\n         // ditto\n         loop_x!(break 'x);\n         panic!(\"break doesn't act hygienically inside infinite loop\");\n     }\n \n     'x: while 1 + 1 == 2 {\n+        //~^ WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+\n         while_x!(break 'x);\n         panic!(\"break doesn't act hygienically inside infinite while loop\");\n     }\n \n     'x: for _ in 0..1 {\n+        //~^ WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+        //~| WARNING shadows a label name that is already in scope\n+\n         // ditto\n         run_once!(continue 'x);\n         panic!(\"continue doesn't act hygienically inside for loop\");"}, {"sha": "285e9037e977d809f8791e380f2c852d4f8243fe", "filename": "src/test/ui/hygiene/hygienic-labels.stderr", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.stderr?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -11,7 +11,7 @@ LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:37:5\n+  --> $DIR/hygienic-labels.rs:53:5\n    |\n LL |     'x: for _ in 0..1 {\n    |     -- first declared here\n@@ -20,7 +20,7 @@ LL |     'x: loop {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:37:5\n+  --> $DIR/hygienic-labels.rs:53:5\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -60,12 +60,12 @@ LL |         'x: loop { $e }\n ...\n LL |     'x: loop {\n    |     -- first declared here\n-LL |         // ditto\n+...\n LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:43:5\n+  --> $DIR/hygienic-labels.rs:62:5\n    |\n LL |     'x: for _ in 0..1 {\n    |     -- first declared here\n@@ -74,7 +74,7 @@ LL |     'x: while 1 + 1 == 2 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:43:5\n+  --> $DIR/hygienic-labels.rs:62:5\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -83,7 +83,7 @@ LL |     'x: while 1 + 1 == 2 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:43:5\n+  --> $DIR/hygienic-labels.rs:62:5\n    |\n LL |     'x: loop {\n    |     -- first declared here\n@@ -92,7 +92,7 @@ LL |     'x: while 1 + 1 == 2 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:43:5\n+  --> $DIR/hygienic-labels.rs:62:5\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -101,7 +101,7 @@ LL |     'x: while 1 + 1 == 2 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:26:9\n+  --> $DIR/hygienic-labels.rs:37:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -113,7 +113,7 @@ LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:26:9\n+  --> $DIR/hygienic-labels.rs:37:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -125,7 +125,7 @@ LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:26:9\n+  --> $DIR/hygienic-labels.rs:37:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -137,7 +137,7 @@ LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:26:9\n+  --> $DIR/hygienic-labels.rs:37:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -149,18 +149,19 @@ LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:26:9\n+  --> $DIR/hygienic-labels.rs:37:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         ^^ lifetime 'x already in scope\n ...\n LL |     'x: while 1 + 1 == 2 {\n    |     -- first declared here\n+...\n LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:48:5\n+  --> $DIR/hygienic-labels.rs:72:5\n    |\n LL |     'x: for _ in 0..1 {\n    |     -- first declared here\n@@ -169,7 +170,7 @@ LL |     'x: for _ in 0..1 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:48:5\n+  --> $DIR/hygienic-labels.rs:72:5\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -178,7 +179,7 @@ LL |     'x: for _ in 0..1 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:48:5\n+  --> $DIR/hygienic-labels.rs:72:5\n    |\n LL |     'x: loop {\n    |     -- first declared here\n@@ -187,7 +188,7 @@ LL |     'x: for _ in 0..1 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:48:5\n+  --> $DIR/hygienic-labels.rs:72:5\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -196,7 +197,7 @@ LL |     'x: for _ in 0..1 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:48:5\n+  --> $DIR/hygienic-labels.rs:72:5\n    |\n LL |     'x: while 1 + 1 == 2 {\n    |     -- first declared here\n@@ -205,7 +206,7 @@ LL |     'x: for _ in 0..1 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:48:5\n+  --> $DIR/hygienic-labels.rs:72:5\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         -- first declared here\n@@ -214,7 +215,7 @@ LL |     'x: for _ in 0..1 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:19:9\n+  --> $DIR/hygienic-labels.rs:23:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -226,7 +227,7 @@ LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:19:9\n+  --> $DIR/hygienic-labels.rs:23:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -238,7 +239,7 @@ LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:19:9\n+  --> $DIR/hygienic-labels.rs:23:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -250,7 +251,7 @@ LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:19:9\n+  --> $DIR/hygienic-labels.rs:23:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -262,7 +263,7 @@ LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:19:9\n+  --> $DIR/hygienic-labels.rs:23:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -274,7 +275,7 @@ LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:19:9\n+  --> $DIR/hygienic-labels.rs:23:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -286,14 +287,14 @@ LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:19:9\n+  --> $DIR/hygienic-labels.rs:23:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n ...\n LL |     'x: for _ in 0..1 {\n    |     -- first declared here\n-LL |         // ditto\n+...\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n "}, {"sha": "81e9b1b36e0641a8a5c1f5cadb51122f2fadda75", "filename": "src/test/ui/hygiene/issue-61574-const-parameters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fhygiene%2Fissue-61574-const-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fhygiene%2Fissue-61574-const-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fissue-61574-const-parameters.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -3,7 +3,7 @@\n \n // check-pass\n \n-#![feature(const_generics)]\n+#![feature(const_generics)] //~ WARNING `const_generics` is incomplete\n \n use std::ops::Add;\n "}, {"sha": "6bb0141848af418fd1d1943c936e32f9fddabc3b", "filename": "src/test/ui/if-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fif-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fif-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-ret.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -3,6 +3,6 @@\n #![allow(unused_parens)]\n // pretty-expanded FIXME #23616\n \n-fn foo() { if (return) { } }\n+fn foo() { if (return) { } } //~ WARNING unreachable block in `if` expression\n \n pub fn main() { foo(); }"}, {"sha": "1d508e8e820ce4c375f472ba4962cda3a472bb93", "filename": "src/test/ui/inference/inference-variable-behind-raw-pointer.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,9 +1,11 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n // tests that the following code compiles, but produces a future-compatibility warning\n \n fn main() {\n     let data = std::ptr::null();\n     let _ = &data as *const *const ();\n     if data.is_null() {}\n+    //~^ WARNING type annotations needed\n+    //~| WARNING this was previously accepted by the compiler but is being phased out\n }"}, {"sha": "46b68f1c9fe07821b32f4b195d4e19216a1db1b4", "filename": "src/test/ui/issues/issue-33140-traitobject-crate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -83,9 +83,15 @@ unsafe impl<T> Trait for dyn (::std::iter::Iterator<Item=T>) + Send + Sync { }\n unsafe impl Trait for dyn (::std::marker::Send) + Send { }\n unsafe impl Trait for dyn (::std::marker::Send) + Sync { }\n unsafe impl Trait for dyn (::std::marker::Send) + Send + Sync { }\n+//~^ WARNING conflicting implementations of trait `Trait` for type\n+//~| WARNING this was previously accepted by the compiler but is being phased out\n unsafe impl Trait for dyn (::std::marker::Sync) + Send { }\n+//~^ WARNING conflicting implementations of trait `Trait` for type\n+//~| WARNING this was previously accepted by the compiler but is being phased out\n unsafe impl Trait for dyn (::std::marker::Sync) + Sync { }\n unsafe impl Trait for dyn (::std::marker::Sync) + Send + Sync { }\n+//~^ WARNING conflicting implementations of trait `Trait` for type\n+//~| WARNING this was previously accepted by the compiler but is being phased out\n unsafe impl Trait for dyn (::std::ops::Drop) + Send { }\n unsafe impl Trait for dyn (::std::ops::Drop) + Sync { }\n unsafe impl Trait for dyn (::std::ops::Drop) + Send + Sync { }"}, {"sha": "f31ea9391ab4bc908f312bcba41082b99f705cfe", "filename": "src/test/ui/issues/issue-33140-traitobject-crate.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140-traitobject-crate.stderr?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -15,22 +15,23 @@ LL | #![warn(order_dependent_trait_objects)]\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n \n warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n-  --> $DIR/issue-33140-traitobject-crate.rs:86:1\n+  --> $DIR/issue-33140-traitobject-crate.rs:88:1\n    |\n LL | unsafe impl Trait for dyn (::std::marker::Send) + Send + Sync { }\n    | ------------------------------------------------------------- first implementation here\n+...\n LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n \n warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n-  --> $DIR/issue-33140-traitobject-crate.rs:88:1\n+  --> $DIR/issue-33140-traitobject-crate.rs:92:1\n    |\n LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send { }\n    | ------------------------------------------------------ first implementation here\n-LL | unsafe impl Trait for dyn (::std::marker::Sync) + Sync { }\n+...\n LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send + Sync { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n    |"}, {"sha": "1a4775fc9600f136a09619e6f0511c8968e768ae", "filename": "src/test/ui/issues/issue-39720.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fissues%2Fissue-39720.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fissues%2Fissue-39720.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39720.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -5,12 +5,12 @@\n \n #![feature(repr_simd, platform_intrinsics)]\n \n-#[repr(C)]\n+#[repr(C)] //~ WARNING conflicting representation hints\n #[repr(simd)]\n #[derive(Copy, Clone, Debug)]\n pub struct char3(pub i8, pub i8, pub i8);\n \n-#[repr(C)]\n+#[repr(C)]  //~ WARNING conflicting representation hints\n #[repr(simd)]\n #[derive(Copy, Clone, Debug)]\n pub struct short3(pub i16, pub i16, pub i16);"}, {"sha": "98f49fe8f5507d8d40a17c635ad4d374d257f825", "filename": "src/test/ui/issues/issue-52057.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fissues%2Fissue-52057.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fissues%2Fissue-52057.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52057.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -7,7 +7,6 @@\n pub trait Parser {\n     type Input;\n \n-    #[inline(always)]\n     fn parse_first(input: &mut Self::Input);\n }\n "}, {"sha": "33b79dba73e0eb087d0ba3ee125b12d43c701344", "filename": "src/test/ui/issues/issue-52057.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70b146c2cb435880c8a1f05384611e6de50ec2a3/src%2Ftest%2Fui%2Fissues%2Fissue-52057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70b146c2cb435880c8a1f05384611e6de50ec2a3/src%2Ftest%2Fui%2Fissues%2Fissue-52057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52057.stderr?ref=70b146c2cb435880c8a1f05384611e6de50ec2a3", "patch": "@@ -1,8 +0,0 @@\n-warning: `#[inline]` is ignored on function prototypes\n-  --> $DIR/issue-52057.rs:10:5\n-   |\n-LL |     #[inline(always)]\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(unused_attributes)]` on by default\n-"}, {"sha": "c7fe40e7b506c0844de58064cd7ed7812b08946e", "filename": "src/test/ui/issues/issue-57399-self-return-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fissues%2Fissue-57399-self-return-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fissues%2Fissue-57399-self-return-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57399-self-return-impl-trait.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,4 +1,4 @@\n-// run-pass\n+// check-pass\n \n trait T {\n     type T;"}, {"sha": "5c71410a8275c4a40ebc54baaa2588f6205df72c", "filename": "src/test/ui/issues/issue-57399-self-return-impl-trait.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70b146c2cb435880c8a1f05384611e6de50ec2a3/src%2Ftest%2Fui%2Fissues%2Fissue-57399-self-return-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70b146c2cb435880c8a1f05384611e6de50ec2a3/src%2Ftest%2Fui%2Fissues%2Fissue-57399-self-return-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57399-self-return-impl-trait.stderr?ref=70b146c2cb435880c8a1f05384611e6de50ec2a3", "patch": "@@ -1,8 +0,0 @@\n-warning: field is never used: `a`\n-  --> $DIR/issue-57399-self-return-impl-trait.rs:12:5\n-   |\n-LL |     a: A,\n-   |     ^^^^\n-   |\n-   = note: `#[warn(dead_code)]` on by default\n-"}, {"sha": "f4536f9c9e2189f97aaf1e9b8f652218b87e647e", "filename": "src/test/ui/lint/command-line-lint-group-warn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fcommand-line-lint-group-warn.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,6 +1,7 @@\n // compile-flags: -W bad-style\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n fn main() {\n     let _InappropriateCamelCasing = true;\n+    //~^ WARNING should have a snake case name\n }"}, {"sha": "0ad014e3361b785d85c0d88a6d8c74efcfe9f7ad", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -23,28 +23,33 @@ enum Large {\n struct Tuple(Large, ());\n \n fn main() {\n-    let i_think_continually = 2;\n+    let i_think_continually = 2; //~ WARNING unused variable: `i_think_continually`\n     let who_from_the_womb_remembered = SoulHistory {\n         corridors_of_light: 5,\n         hours_are_suns: true,\n         endless_and_singing: true\n     };\n \n     let mut mut_unused_var = 1;\n+    //~^ WARNING unused variable: `mut_unused_var`\n+    //~| WARNING variable does not need to be mutable\n \n     let (mut var, unused_var) = (1, 2);\n+    //~^ WARNING unused variable: `var`\n+    //~| WARNING unused variable: `unused_var`\n+    //~| WARNING variable does not need to be mutable\n     // NOTE: `var` comes after `unused_var` lexicographically yet the warning\n     // for `var` will be emitted before the one for `unused_var`. We use an\n     // `IndexMap` to ensure this is the case instead of a `BTreeMap`.\n \n-    if let SoulHistory { corridors_of_light,\n-                         mut hours_are_suns,\n+    if let SoulHistory { corridors_of_light, //~ WARNING unused variable: `corridors_of_light`\n+                         mut hours_are_suns, //~ WARNING `hours_are_suns` is assigned to, but\n                          endless_and_singing: true } = who_from_the_womb_remembered {\n-        hours_are_suns = false;\n+        hours_are_suns = false; //~ WARNING unused_assignments\n     }\n \n     let the_spirit = LovelyAmbition { lips: 1, fire: 2 };\n-    let LovelyAmbition { lips, fire } = the_spirit;\n+    let LovelyAmbition { lips, fire } = the_spirit; //~ WARNING unused variable: `fire`\n     println!(\"{}\", lips);\n \n     let bag = Large::Suit {\n@@ -53,31 +58,31 @@ fn main() {\n \n     // Plain struct\n     match bag {\n-        Large::Suit { case } => {}\n+        Large::Suit { case } => {} //~ WARNING unused variable: `case`\n     };\n \n     // Referenced struct\n     match &bag {\n-        &Large::Suit { case } => {}\n+        &Large::Suit { case } => {} //~ WARNING unused variable: `case`\n     };\n \n     // Boxed struct\n     match box bag {\n-        box Large::Suit { case } => {}\n+        box Large::Suit { case } => {} //~ WARNING unused variable: `case`\n     };\n \n     // Tuple with struct\n     match (bag,) {\n-        (Large::Suit { case },) => {}\n+        (Large::Suit { case },) => {} //~ WARNING unused variable: `case`\n     };\n \n     // Slice with struct\n     match [bag] {\n-        [Large::Suit { case }] => {}\n+        [Large::Suit { case }] => {} //~ WARNING unused variable: `case`\n     };\n \n     // Tuple struct with struct\n     match Tuple(bag, ()) {\n-        Tuple(Large::Suit { case }, ()) => {}\n+        Tuple(Large::Suit { case }, ()) => {} //~ WARNING unused variable: `case`\n     };\n }"}, {"sha": "0e18abc03fac07e629f98ebfdf00b99dcee306a3", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -18,33 +18,33 @@ LL |     let mut mut_unused_var = 1;\n    |             ^^^^^^^^^^^^^^ help: consider prefixing with an underscore: `_mut_unused_var`\n \n warning: unused variable: `var`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:35:14\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:37:14\n    |\n LL |     let (mut var, unused_var) = (1, 2);\n    |              ^^^ help: consider prefixing with an underscore: `_var`\n \n warning: unused variable: `unused_var`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:35:19\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:37:19\n    |\n LL |     let (mut var, unused_var) = (1, 2);\n    |                   ^^^^^^^^^^ help: consider prefixing with an underscore: `_unused_var`\n \n warning: unused variable: `corridors_of_light`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:40:26\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:45:26\n    |\n LL |     if let SoulHistory { corridors_of_light,\n    |                          ^^^^^^^^^^^^^^^^^^ help: try ignoring the field: `corridors_of_light: _`\n \n warning: variable `hours_are_suns` is assigned to, but never used\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:41:30\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:46:30\n    |\n LL |                          mut hours_are_suns,\n    |                              ^^^^^^^^^^^^^^\n    |\n    = note: consider using `_hours_are_suns` instead\n \n warning: value assigned to `hours_are_suns` is never read\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:43:9\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:48:9\n    |\n LL |         hours_are_suns = false;\n    |         ^^^^^^^^^^^^^^\n@@ -58,43 +58,43 @@ LL | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n    = help: maybe it is overwritten before being read?\n \n warning: unused variable: `fire`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:47:32\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:52:32\n    |\n LL |     let LovelyAmbition { lips, fire } = the_spirit;\n    |                                ^^^^ help: try ignoring the field: `fire: _`\n \n warning: unused variable: `case`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:56:23\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:61:23\n    |\n LL |         Large::Suit { case } => {}\n    |                       ^^^^ help: try ignoring the field: `case: _`\n \n warning: unused variable: `case`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:61:24\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:66:24\n    |\n LL |         &Large::Suit { case } => {}\n    |                        ^^^^ help: try ignoring the field: `case: _`\n \n warning: unused variable: `case`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:66:27\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:71:27\n    |\n LL |         box Large::Suit { case } => {}\n    |                           ^^^^ help: try ignoring the field: `case: _`\n \n warning: unused variable: `case`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:71:24\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:76:24\n    |\n LL |         (Large::Suit { case },) => {}\n    |                        ^^^^ help: try ignoring the field: `case: _`\n \n warning: unused variable: `case`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:76:24\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:81:24\n    |\n LL |         [Large::Suit { case }] => {}\n    |                        ^^^^ help: try ignoring the field: `case: _`\n \n warning: unused variable: `case`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:81:29\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:86:29\n    |\n LL |         Tuple(Large::Suit { case }, ()) => {}\n    |                             ^^^^ help: try ignoring the field: `case: _`\n@@ -115,7 +115,7 @@ LL | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n    = note: `#[warn(unused_mut)]` implied by `#[warn(unused)]`\n \n warning: variable does not need to be mutable\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:35:10\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:37:10\n    |\n LL |     let (mut var, unused_var) = (1, 2);\n    |          ----^^^"}, {"sha": "3e425727e7829f86516fe38584f0078e25381830", "filename": "src/test/ui/lint/must-use-ops.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Fmust-use-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Fmust-use-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust-use-ops.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,6 +1,6 @@\n // Issue #50124 - Test warning for unused operator expressions\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![warn(unused_must_use)]\n \n@@ -9,33 +9,33 @@ fn main() {\n     let val_pointer = &val;\n \n // Comparison Operators\n-    val == 1;\n-    val < 1;\n-    val <= 1;\n-    val != 1;\n-    val >= 1;\n-    val > 1;\n+    val == 1; //~ WARNING unused comparison\n+    val < 1; //~ WARNING unused comparison\n+    val <= 1; //~ WARNING unused comparison\n+    val != 1; //~ WARNING unused comparison\n+    val >= 1; //~ WARNING unused comparison\n+    val > 1; //~ WARNING unused comparison\n \n // Arithmetic Operators\n-    val + 2;\n-    val - 2;\n-    val / 2;\n-    val * 2;\n-    val % 2;\n+    val + 2; //~ WARNING unused arithmetic operation\n+    val - 2; //~ WARNING unused arithmetic operation\n+    val / 2; //~ WARNING unused arithmetic operation\n+    val * 2; //~ WARNING unused arithmetic operation\n+    val % 2; //~ WARNING unused arithmetic operation\n \n // Logical Operators\n-    true && true;\n-    false || true;\n+    true && true; //~ WARNING unused logical operation\n+    false || true; //~ WARNING unused logical operation\n \n // Bitwise Operators\n-    5 ^ val;\n-    5 & val;\n-    5 | val;\n-    5 << val;\n-    5 >> val;\n+    5 ^ val; //~ WARNING unused bitwise operation\n+    5 & val; //~ WARNING unused bitwise operation\n+    5 | val; //~ WARNING unused bitwise operation\n+    5 << val; //~ WARNING unused bitwise operation\n+    5 >> val; //~ WARNING unused bitwise operation\n \n // Unary Operators\n-    !val;\n-    -val;\n-    *val_pointer;\n+    !val; //~ WARNING unused unary operation\n+    -val; //~ WARNING unused unary operation\n+    *val_pointer; //~ WARNING unused unary operation\n }"}, {"sha": "de120b6e084b8c71b94d8300ed3a7862e52c1c43", "filename": "src/test/ui/lint/not_found.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Fnot_found.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Fnot_found.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnot_found.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,13 +1,21 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n // this tests the `unknown_lint` lint, especially the suggestions\n \n // the suggestion only appears if a lint with the lowercase name exists\n #[allow(FOO_BAR)]\n+//~^ WARNING unknown lint\n+\n // the suggestion appears on all-uppercase names\n #[warn(DEAD_CODE)]\n+//~^ WARNING unknown lint\n+//~| HELP did you mean\n+\n // the suggestion appears also on mixed-case names\n #[deny(Warnings)]\n+//~^ WARNING unknown lint\n+//~| HELP did you mean\n+\n fn main() {\n     unimplemented!();\n }"}, {"sha": "5a651e9ce0f3a0a881fd7ca4d78db3f153747164", "filename": "src/test/ui/lint/not_found.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Fnot_found.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Fnot_found.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fnot_found.stderr?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -7,13 +7,13 @@ LL | #[allow(FOO_BAR)]\n    = note: `#[warn(unknown_lints)]` on by default\n \n warning: unknown lint: `DEAD_CODE`\n-  --> $DIR/not_found.rs:8:8\n+  --> $DIR/not_found.rs:10:8\n    |\n LL | #[warn(DEAD_CODE)]\n    |        ^^^^^^^^^ help: did you mean: `dead_code`\n \n warning: unknown lint: `Warnings`\n-  --> $DIR/not_found.rs:10:8\n+  --> $DIR/not_found.rs:15:8\n    |\n LL | #[deny(Warnings)]\n    |        ^^^^^^^^ help: did you mean (notice the capitalization): `warnings`"}, {"sha": "94f79d69751f12f2c4e07e5176d8d846bbde9e3b", "filename": "src/test/ui/lint/unreachable_pub-pub_crate.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -4,44 +4,45 @@\n // suggestions to use `crate` given when it is on). When that feature becomes\n // stable, this test can be deleted.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n \n-#![allow(unused)]\n #![warn(unreachable_pub)]\n \n mod private_mod {\n     // non-leaked `pub` items in private module should be linted\n-    pub use std::fmt;\n+    pub use std::fmt; //~ WARNING unreachable_pub\n     pub use std::env::{Args}; // braced-use has different item spans than unbraced\n+    //~^ WARNING unreachable_pub\n \n-    pub struct Hydrogen {\n+    pub struct Hydrogen { //~ WARNING unreachable_pub\n         // `pub` struct fields, too\n-        pub neutrons: usize,\n+        pub neutrons: usize, //~ WARNING unreachable_pub\n         // (... but not more-restricted fields)\n         pub(crate) electrons: usize\n     }\n     impl Hydrogen {\n         // impls, too\n-        pub fn count_neutrons(&self) -> usize { self.neutrons }\n+        pub fn count_neutrons(&self) -> usize { self.neutrons } //~ WARNING unreachable_pub\n         pub(crate) fn count_electrons(&self) -> usize { self.electrons }\n     }\n \n-    pub enum Helium {}\n-    pub union Lithium { c1: usize, c2: u8 }\n-    pub fn beryllium() {}\n-    pub trait Boron {}\n-    pub const CARBON: usize = 1;\n-    pub static NITROGEN: usize = 2;\n-    pub type Oxygen = bool;\n+    pub enum Helium {} //~ WARNING unreachable_pub\n+    pub union Lithium { c1: usize, c2: u8 } //~ WARNING unreachable_pub\n+    pub fn beryllium() {} //~ WARNING unreachable_pub\n+    pub trait Boron {} //~ WARNING unreachable_pub\n+    pub const CARBON: usize = 1; //~ WARNING unreachable_pub\n+    pub static NITROGEN: usize = 2; //~ WARNING unreachable_pub\n+    pub type Oxygen = bool; //~ WARNING unreachable_pub\n \n     macro_rules! define_empty_struct_with_visibility {\n         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n+        //~^ WARNING unreachable_pub\n     }\n     define_empty_struct_with_visibility!(pub, Fluorine);\n \n     extern {\n-        pub fn catalyze() -> bool;\n+        pub fn catalyze() -> bool; //~ WARNING unreachable_pub\n     }\n \n     // items leaked through signatures (see `get_neon` below) are OK"}, {"sha": "da21c2ac4ab875328c59329c2940b228d37ad248", "filename": "src/test/ui/lint/unreachable_pub-pub_crate.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,20 +1,20 @@\n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:15:5\n+  --> $DIR/unreachable_pub-pub_crate.rs:14:5\n    |\n LL |     pub use std::fmt;\n    |     ---^^^^^^^^^^^^^^\n    |     |\n    |     help: consider restricting its visibility: `pub(crate)`\n    |\n note: lint level defined here\n-  --> $DIR/unreachable_pub-pub_crate.rs:11:9\n+  --> $DIR/unreachable_pub-pub_crate.rs:10:9\n    |\n LL | #![warn(unreachable_pub)]\n    |         ^^^^^^^^^^^^^^^\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:16:24\n+  --> $DIR/unreachable_pub-pub_crate.rs:15:24\n    |\n LL |     pub use std::env::{Args}; // braced-use has different item spans than unbraced\n    |     ---                ^^^^\n@@ -124,7 +124,7 @@ warning: unreachable `pub` item\n    |\n LL |         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^\n-LL |     }\n+...\n LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n    |     ----------------------------------------------------\n    |     |                                    |\n@@ -134,7 +134,7 @@ LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub-pub_crate.rs:44:9\n+  --> $DIR/unreachable_pub-pub_crate.rs:45:9\n    |\n LL |         pub fn catalyze() -> bool;\n    |         ---^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a4c149701396412d9b808c2b968ae230b3bd7732", "filename": "src/test/ui/lint/unreachable_pub.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(crate_visibility_modifier)]\n \n@@ -7,36 +7,38 @@\n \n mod private_mod {\n     // non-leaked `pub` items in private module should be linted\n-    pub use std::fmt;\n+    pub use std::fmt; //~ WARNING unreachable_pub\n     pub use std::env::{Args}; // braced-use has different item spans than unbraced\n+    //~^ WARNING unreachable_pub\n \n-    pub struct Hydrogen {\n+    pub struct Hydrogen { //~ WARNING unreachable_pub\n         // `pub` struct fields, too\n-        pub neutrons: usize,\n+        pub neutrons: usize, //~ WARNING unreachable_pub\n         // (... but not more-restricted fields)\n         crate electrons: usize\n     }\n     impl Hydrogen {\n         // impls, too\n-        pub fn count_neutrons(&self) -> usize { self.neutrons }\n+        pub fn count_neutrons(&self) -> usize { self.neutrons } //~ WARNING unreachable_pub\n         crate fn count_electrons(&self) -> usize { self.electrons }\n     }\n \n-    pub enum Helium {}\n-    pub union Lithium { c1: usize, c2: u8 }\n-    pub fn beryllium() {}\n-    pub trait Boron {}\n-    pub const CARBON: usize = 1;\n-    pub static NITROGEN: usize = 2;\n-    pub type Oxygen = bool;\n+    pub enum Helium {} //~ WARNING unreachable_pub\n+    pub union Lithium { c1: usize, c2: u8 } //~ WARNING unreachable_pub\n+    pub fn beryllium() {} //~ WARNING unreachable_pub\n+    pub trait Boron {} //~ WARNING unreachable_pub\n+    pub const CARBON: usize = 1; //~ WARNING unreachable_pub\n+    pub static NITROGEN: usize = 2; //~ WARNING unreachable_pub\n+    pub type Oxygen = bool; //~ WARNING unreachable_pub\n \n     macro_rules! define_empty_struct_with_visibility {\n         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n+        //~^ WARNING unreachable_pub\n     }\n     define_empty_struct_with_visibility!(pub, Fluorine);\n \n     extern {\n-        pub fn catalyze() -> bool;\n+        pub fn catalyze() -> bool; //~ WARNING unreachable_pub\n     }\n \n     // items leaked through signatures (see `get_neon` below) are OK"}, {"sha": "2cb27a770edcded0c11320fab7be326c8b7423b7", "filename": "src/test/ui/lint/unreachable_pub.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -24,7 +24,7 @@ LL |     pub use std::env::{Args}; // braced-use has different item spans than u\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:13:5\n+  --> $DIR/unreachable_pub.rs:14:5\n    |\n LL |     pub struct Hydrogen {\n    |     ---^^^^^^^^^^^^^^^^\n@@ -34,23 +34,23 @@ LL |     pub struct Hydrogen {\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` field\n-  --> $DIR/unreachable_pub.rs:15:9\n+  --> $DIR/unreachable_pub.rs:16:9\n    |\n LL |         pub neutrons: usize,\n    |         ---^^^^^^^^^^^^^^^^\n    |         |\n    |         help: consider restricting its visibility: `crate`\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:21:9\n+  --> $DIR/unreachable_pub.rs:22:9\n    |\n LL |         pub fn count_neutrons(&self) -> usize { self.neutrons }\n    |         ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         help: consider restricting its visibility: `crate`\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:25:5\n+  --> $DIR/unreachable_pub.rs:26:5\n    |\n LL |     pub enum Helium {}\n    |     ---^^^^^^^^^^^^\n@@ -60,7 +60,7 @@ LL |     pub enum Helium {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:26:5\n+  --> $DIR/unreachable_pub.rs:27:5\n    |\n LL |     pub union Lithium { c1: usize, c2: u8 }\n    |     ---^^^^^^^^^^^^^^\n@@ -70,7 +70,7 @@ LL |     pub union Lithium { c1: usize, c2: u8 }\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:27:5\n+  --> $DIR/unreachable_pub.rs:28:5\n    |\n LL |     pub fn beryllium() {}\n    |     ---^^^^^^^^^^^^^^^\n@@ -80,7 +80,7 @@ LL |     pub fn beryllium() {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:28:5\n+  --> $DIR/unreachable_pub.rs:29:5\n    |\n LL |     pub trait Boron {}\n    |     ---^^^^^^^^^^^^\n@@ -90,7 +90,7 @@ LL |     pub trait Boron {}\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:29:5\n+  --> $DIR/unreachable_pub.rs:30:5\n    |\n LL |     pub const CARBON: usize = 1;\n    |     ---^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -100,7 +100,7 @@ LL |     pub const CARBON: usize = 1;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:30:5\n+  --> $DIR/unreachable_pub.rs:31:5\n    |\n LL |     pub static NITROGEN: usize = 2;\n    |     ---^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -110,7 +110,7 @@ LL |     pub static NITROGEN: usize = 2;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:31:5\n+  --> $DIR/unreachable_pub.rs:32:5\n    |\n LL |     pub type Oxygen = bool;\n    |     ---^^^^^^^^^^^^^^^^^^^^\n@@ -120,11 +120,11 @@ LL |     pub type Oxygen = bool;\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:34:47\n+  --> $DIR/unreachable_pub.rs:35:47\n    |\n LL |         ($visibility: vis, $name: ident) => { $visibility struct $name {} }\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^\n-LL |     }\n+...\n LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n    |     ----------------------------------------------------\n    |     |                                    |\n@@ -134,7 +134,7 @@ LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n    = help: or consider exporting it for use by other crates\n \n warning: unreachable `pub` item\n-  --> $DIR/unreachable_pub.rs:39:9\n+  --> $DIR/unreachable_pub.rs:41:9\n    |\n LL |         pub fn catalyze() -> bool;\n    |         ---^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "5ae4828634091cfe9d4eef14091c2868a06b0252", "filename": "src/test/ui/lint/unused_import_warning_issue_45268.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Funused_import_warning_issue_45268.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Flint%2Funused_import_warning_issue_45268.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_import_warning_issue_45268.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -24,6 +24,7 @@ mod test {\n }\n \n use test::Unused;   // This is really unused, so warning is OK\n+                    //~^ WARNING unused import\n use test::A;        // This is used by the test2::func() through import of super::*\n use test::B;        // This is used by the test2::func() through import of super::*\n "}, {"sha": "86a3e9f44c38f83c1045efb22cf54039a638750b", "filename": "src/test/ui/macros/macro-lifetime-used-with-labels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -18,7 +18,7 @@ macro_rules! br {\n }\n macro_rules! br2 {\n     ($b:lifetime) => {\n-        'b: loop {\n+        'b: loop { //~ WARNING `'b` shadows a label name that is already in scope\n             break $b; // this $b should refer to the outer loop.\n         }\n     }"}, {"sha": "7cf346286eadf5f483a867d0e51ce2d44d9792f7", "filename": "src/test/ui/macros/macro-path-prelude-pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-pass.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,6 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n-\n-#![feature(extern_prelude)]\n+// check-pass\n \n mod m {\n     fn check() {"}, {"sha": "c6e7fd77cd91496cd9002ce57bf5aed9ec6f3d3f", "filename": "src/test/ui/macros/macro-path-prelude-pass.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70b146c2cb435880c8a1f05384611e6de50ec2a3/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70b146c2cb435880c8a1f05384611e6de50ec2a3/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-path-prelude-pass.stderr?ref=70b146c2cb435880c8a1f05384611e6de50ec2a3", "patch": "@@ -1,8 +0,0 @@\n-warning: the feature `extern_prelude` has been stable since 1.30.0 and no longer requires an attribute to enable\n-  --> $DIR/macro-path-prelude-pass.rs:3:12\n-   |\n-LL | #![feature(extern_prelude)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(stable_features)]` on by default\n-"}, {"sha": "c8bd44008b081a1dff7daac8e981c4f24fc8daf0", "filename": "src/test/ui/macros/macro-use-all-and-none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-all-and-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-all-and-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-use-all-and-none.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -4,7 +4,7 @@\n #![warn(unused_attributes)]\n \n #[macro_use]\n-#[macro_use()]\n+#[macro_use()] //~ WARNING unused attribute\n extern crate two_macros_rpass;\n \n pub fn main() {"}, {"sha": "73c1477c281a89f8094b530b773c64f84792b39c", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -3,7 +3,7 @@\n \n // check-pass\n \n-#![feature(or_patterns)]\n+#![feature(or_patterns)] //~ WARNING the feature `or_patterns` is incomplete\n \n fn main() {}\n "}, {"sha": "8dbd0395b97bd012d6af16b416acb4198e253bb4", "filename": "src/test/ui/removing-extern-crate.fixed", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fremoving-extern-crate.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fremoving-extern-crate.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fremoving-extern-crate.fixed?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,17 +1,16 @@\n // edition:2018\n // aux-build:removing-extern-crate.rs\n // run-rustfix\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![warn(rust_2018_idioms)]\n-#![allow(unused_imports)]\n-\n-\n \n+ //~ WARNING unused extern crate\n+ //~ WARNING unused extern crate\n \n mod another {\n-    \n-    \n+     //~ WARNING unused extern crate\n+     //~ WARNING unused extern crate\n }\n \n fn main() {}"}, {"sha": "465e1360c2ad1f247e5021b52ac568a7fe5d5ec7", "filename": "src/test/ui/removing-extern-crate.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fremoving-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fremoving-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fremoving-extern-crate.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,17 +1,16 @@\n // edition:2018\n // aux-build:removing-extern-crate.rs\n // run-rustfix\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![warn(rust_2018_idioms)]\n-#![allow(unused_imports)]\n \n-extern crate removing_extern_crate as foo;\n-extern crate core;\n+extern crate removing_extern_crate as foo; //~ WARNING unused extern crate\n+extern crate core; //~ WARNING unused extern crate\n \n mod another {\n-    extern crate removing_extern_crate as foo;\n-    extern crate core;\n+    extern crate removing_extern_crate as foo; //~ WARNING unused extern crate\n+    extern crate core; //~ WARNING unused extern crate\n }\n \n fn main() {}"}, {"sha": "20d5564c16d1516f3aa301fb70d511e2eef542a3", "filename": "src/test/ui/removing-extern-crate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fremoving-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Fremoving-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fremoving-extern-crate.stderr?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,5 +1,5 @@\n warning: unused extern crate\n-  --> $DIR/removing-extern-crate.rs:9:1\n+  --> $DIR/removing-extern-crate.rs:8:1\n    |\n LL | extern crate removing_extern_crate as foo;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n@@ -12,19 +12,19 @@ LL | #![warn(rust_2018_idioms)]\n    = note: `#[warn(unused_extern_crates)]` implied by `#[warn(rust_2018_idioms)]`\n \n warning: unused extern crate\n-  --> $DIR/removing-extern-crate.rs:10:1\n+  --> $DIR/removing-extern-crate.rs:9:1\n    |\n LL | extern crate core;\n    | ^^^^^^^^^^^^^^^^^^ help: remove it\n \n warning: unused extern crate\n-  --> $DIR/removing-extern-crate.rs:13:5\n+  --> $DIR/removing-extern-crate.rs:12:5\n    |\n LL |     extern crate removing_extern_crate as foo;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n \n warning: unused extern crate\n-  --> $DIR/removing-extern-crate.rs:14:5\n+  --> $DIR/removing-extern-crate.rs:13:5\n    |\n LL |     extern crate core;\n    |     ^^^^^^^^^^^^^^^^^^ help: remove it"}, {"sha": "442983671884ee48532d372d6a05696beff81a9c", "filename": "src/test/ui/rfc-2497-if-let-chains/protect-precedences.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fprotect-precedences.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -10,7 +10,7 @@ fn main() {\n \n     fn _f1() -> bool {\n         // Should associate as `(let _ = (return (true && false)))`.\n-        if let _ = return true && false {};\n+        if let _ = return true && false {}; //~ WARNING unreachable_code\n     }\n     assert!(!_f1());\n }"}, {"sha": "2e10d5555908ba973f92480efa4811502c4c8af3", "filename": "src/test/ui/rust-2018/remove-extern-crate.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.fixed?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -6,7 +6,7 @@\n \n #![warn(rust_2018_idioms)]\n \n-\n+ //~ WARNING unused extern crate\n // Shouldn't suggest changing to `use`, as `another_name`\n // would no longer be added to the prelude which could cause\n // compilation errors for imports that use `another_name` in other\n@@ -29,7 +29,7 @@ fn main() {\n }\n \n mod another {\n-    use core;\n+    use core; //~ WARNING `extern crate` is not idiomatic\n     use remove_extern_crate;\n \n     pub fn foo() {"}, {"sha": "9b04f901310ea8cc39e4a92495ec0e1d2ec32a4e", "filename": "src/test/ui/rust-2018/remove-extern-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fremove-extern-crate.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -6,7 +6,7 @@\n \n #![warn(rust_2018_idioms)]\n \n-extern crate core;\n+extern crate core; //~ WARNING unused extern crate\n // Shouldn't suggest changing to `use`, as `another_name`\n // would no longer be added to the prelude which could cause\n // compilation errors for imports that use `another_name` in other\n@@ -29,7 +29,7 @@ fn main() {\n }\n \n mod another {\n-    extern crate core;\n+    extern crate core; //~ WARNING `extern crate` is not idiomatic\n     use remove_extern_crate;\n \n     pub fn foo() {"}, {"sha": "f285b2c0ee6fab0a0c8a92e2054993ac84b7ac6e", "filename": "src/test/ui/rust-2018/try-ident.fixed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.fixed?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -5,7 +5,11 @@\n \n fn main() {\n     r#try();\n+    //~^ WARNING `try` is a keyword in the 2018 edition\n+    //~| WARNING it will become a hard error in the 2018 edition!\n }\n \n fn r#try() {\n+    //~^ WARNING `try` is a keyword in the 2018 edition\n+    //~| WARNING it will become a hard error in the 2018 edition!\n }"}, {"sha": "d740801b562c89cb3f3e9688213a13eff6a553a2", "filename": "src/test/ui/rust-2018/try-ident.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -5,7 +5,11 @@\n \n fn main() {\n     try();\n+    //~^ WARNING `try` is a keyword in the 2018 edition\n+    //~| WARNING it will become a hard error in the 2018 edition!\n }\n \n fn try() {\n+    //~^ WARNING `try` is a keyword in the 2018 edition\n+    //~| WARNING it will become a hard error in the 2018 edition!\n }"}, {"sha": "29cc68c439e9d775f88edcdfc397c70df34daaf5", "filename": "src/test/ui/rust-2018/try-ident.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.stderr?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -14,7 +14,7 @@ LL | #![warn(rust_2018_compatibility)]\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n warning: `try` is a keyword in the 2018 edition\n-  --> $DIR/try-ident.rs:10:4\n+  --> $DIR/try-ident.rs:12:4\n    |\n LL | fn try() {\n    |    ^^^ help: you can use a raw identifier to stay compatible: `r#try`"}, {"sha": "5c899378b943fe7690d6181187c57a9353481512", "filename": "src/test/ui/rust-2018/try-macro.fixed", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.fixed?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,16 +1,17 @@\n // Test that `try!` macros are rewritten.\n \n // run-rustfix\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![warn(rust_2018_compatibility)]\n-#![allow(unused_variables)]\n #![allow(dead_code)]\n #![allow(deprecated)]\n \n fn foo() -> Result<usize, ()> {\n     let x: Result<usize, ()> = Ok(22);\n     r#try!(x);\n+    //~^ WARNING `try` is a keyword in the 2018 edition\n+    //~| WARNING this was previously accepted\n     Ok(44)\n }\n "}, {"sha": "db8a198d282cc4ec313944ba3c4586ed4aa15999", "filename": "src/test/ui/rust-2018/try-macro.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,16 +1,17 @@\n // Test that `try!` macros are rewritten.\n \n // run-rustfix\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![warn(rust_2018_compatibility)]\n-#![allow(unused_variables)]\n #![allow(dead_code)]\n #![allow(deprecated)]\n \n fn foo() -> Result<usize, ()> {\n     let x: Result<usize, ()> = Ok(22);\n     try!(x);\n+    //~^ WARNING `try` is a keyword in the 2018 edition\n+    //~| WARNING this was previously accepted\n     Ok(44)\n }\n "}, {"sha": "eb65d4150642a47d5293eb272bb5ddeedd07cb84", "filename": "src/test/ui/rust-2018/try-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.stderr?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,5 +1,5 @@\n warning: `try` is a keyword in the 2018 edition\n-  --> $DIR/try-macro.rs:13:5\n+  --> $DIR/try-macro.rs:12:5\n    |\n LL |     try!(x);\n    |     ^^^ help: you can use a raw identifier to stay compatible: `r#try`"}, {"sha": "0667364d13cd499ef721f1c1777006fad0708ab3", "filename": "src/test/ui/test-attrs/test-on-macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-on-macro.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n // compile-flags:--test\n \n #![deny(warnings)]\n@@ -8,6 +8,6 @@ macro_rules! foo {\n }\n \n #[test]\n-foo!();\n+foo!(); //~ WARNING `#[test]` attribute should not be used on macros\n \n fn main(){}"}, {"sha": "3416503b851fbcaad43d5011a9b42be5ff31bbf1", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-copy.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,26 +1,26 @@\n-// run-pass\n+// check-pass\n // Check tautalogically false `Copy` bounds\n #![feature(trivial_bounds)]\n-#![allow(unused)]\n \n-fn copy_string(t: String) -> String where String: Copy {\n+fn copy_string(t: String) -> String where String: Copy { //~ WARNING trivial_bounds\n     is_copy(&t);\n     let x = t;\n     drop(t);\n     t\n }\n \n-fn copy_out_string(t: &String) -> String where String: Copy {\n+fn copy_out_string(t: &String) -> String where String: Copy { //~ WARNING trivial_bounds\n     *t\n }\n \n-fn copy_string_with_param<T>(x: String) where String: Copy {\n+fn copy_string_with_param<T>(x: String) where String: Copy { //~ WARNING trivial_bounds\n     let y = x;\n     let z = x;\n }\n \n // Check that no reborrowing occurs\n fn copy_mut<'a>(t: &&'a mut i32) -> &'a mut i32 where for<'b> &'b mut i32: Copy {\n+    //~^ WARNING trivial_bounds\n     is_copy(t);\n     let x = *t;\n     drop(x);"}, {"sha": "17389a8731332f1d69aba44da49d76bf184f62c4", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-copy.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-copy.stderr?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -1,25 +1,25 @@\n warning: Trait bound std::string::String: std::marker::Copy does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent-copy.rs:6:51\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:5:51\n    |\n LL | fn copy_string(t: String) -> String where String: Copy {\n    |                                                   ^^^^\n    |\n    = note: `#[warn(trivial_bounds)]` on by default\n \n warning: Trait bound std::string::String: std::marker::Copy does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent-copy.rs:13:56\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:12:56\n    |\n LL | fn copy_out_string(t: &String) -> String where String: Copy {\n    |                                                        ^^^^\n \n warning: Trait bound std::string::String: std::marker::Copy does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent-copy.rs:17:55\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:16:55\n    |\n LL | fn copy_string_with_param<T>(x: String) where String: Copy {\n    |                                                       ^^^^\n \n warning: Trait bound for<'b> &'b mut i32: std::marker::Copy does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent-copy.rs:23:76\n+  --> $DIR/trivial-bounds-inconsistent-copy.rs:22:76\n    |\n LL | fn copy_mut<'a>(t: &&'a mut i32) -> &'a mut i32 where for<'b> &'b mut i32: Copy {\n    |                                                                            ^^^^"}, {"sha": "b13956673d2313772db63b63e5ad9bb07e2d8f81", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-projection.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -18,35 +18,39 @@ impl A for B {\n \n fn underspecified_bound() -> u8\n where\n-    B: A\n+    B: A //~ WARNING trivial_bounds\n {\n     B::get_x()\n }\n \n fn inconsistent_bound() -> i32\n where\n-    B: A<X = i32>\n+    B: A<X = i32> //~ WARNING trivial_bounds\n {\n     B::get_x()\n }\n \n fn redundant_bound() -> u8\n where\n-    B: A<X = u8>\n+    B: A<X = u8> //~ WARNING trivial_bounds\n {\n     B::get_x()\n }\n \n fn inconsistent_dup_bound() -> i32\n where\n     B: A<X = i32> + A\n+    //~^ WARNING trivial_bounds\n+    //~| WARNING trivial_bounds\n {\n     B::get_x()\n }\n \n fn redundant_dup_bound() -> u8\n where\n     B: A<X = u8> + A\n+    //~^ WARNING trivial_bounds\n+    //~| WARNING trivial_bounds\n {\n     B::get_x()\n }"}, {"sha": "dc685cbf6b37e1409a4fb0e4239ca87931c4ca8e", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-projection.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection.stderr?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -31,13 +31,13 @@ LL |     B: A<X = i32> + A\n    |                     ^\n \n warning: Trait bound B: A does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent-projection.rs:49:8\n+  --> $DIR/trivial-bounds-inconsistent-projection.rs:51:8\n    |\n LL |     B: A<X = u8> + A\n    |        ^^^^^^^^^\n \n warning: Trait bound B: A does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent-projection.rs:49:20\n+  --> $DIR/trivial-bounds-inconsistent-projection.rs:51:20\n    |\n LL |     B: A<X = u8> + A\n    |                    ^"}, {"sha": "bfa083655c4fa06997ef84bf741a5e9466264aab", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-sized.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-sized.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -12,12 +12,15 @@ struct T<X: ?Sized> {\n }\n \n struct S(str, str) where str: Sized;\n+//~^ WARNING Sized does not depend on any type or lifetime\n \n fn unsized_local() where for<'a> T<dyn A + 'a>: Sized {\n+    //~^ WARNING Sized does not depend on any type or lifetime\n     let x: T<dyn A> = *(Box::new(T { x: 1 }) as Box<T<dyn A>>);\n }\n \n fn return_str() -> str where str: Sized {\n+    //~^ WARNING Sized does not depend on any type or lifetime\n     *\"Sized\".to_string().into_boxed_str()\n }\n "}, {"sha": "d4fa698c7375fa2e3dec0dcf8ff92858d7661424", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-sized.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-sized.stderr?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -7,13 +7,13 @@ LL | struct S(str, str) where str: Sized;\n    = note: `#[warn(trivial_bounds)]` on by default\n \n warning: Trait bound for<'a> T<(dyn A + 'a)>: std::marker::Sized does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent-sized.rs:16:49\n+  --> $DIR/trivial-bounds-inconsistent-sized.rs:17:49\n    |\n LL | fn unsized_local() where for<'a> T<dyn A + 'a>: Sized {\n    |                                                 ^^^^^\n \n warning: Trait bound str: std::marker::Sized does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent-sized.rs:20:35\n+  --> $DIR/trivial-bounds-inconsistent-sized.rs:22:35\n    |\n LL | fn return_str() -> str where str: Sized {\n    |                                   ^^^^^"}, {"sha": "9efa22b10717f9a8ac8e0555341c9040e2a06448", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-well-formed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-well-formed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-well-formed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-well-formed.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -5,6 +5,8 @@\n use std::fmt::Debug;\n \n pub fn foo() where Vec<str>: Debug, str: Copy {\n+    //~^ WARNING Debug does not depend on any type or lifetime\n+    //~| WARNING Copy does not depend on any type or lifetime\n     let x = vec![*\"1\"];\n     println!(\"{:?}\", x);\n }"}, {"sha": "7148f5d6da05b8abcdcad4f9d86c710b90468363", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -11,32 +11,34 @@ pub trait Foo {\n \n fn generic_function<X: Foo>(x: X) {}\n \n-enum E where i32: Foo { V }\n+enum E where i32: Foo { V } //~ WARNING trivial_bounds\n \n-struct S where i32: Foo;\n+struct S where i32: Foo; //~ WARNING trivial_bounds\n \n-trait T where i32: Foo {}\n+trait T where i32: Foo {} //~ WARNING trivial_bounds\n \n-union U where i32: Foo { f: i32 }\n+union U where i32: Foo { f: i32 } //~ WARNING trivial_bounds\n \n type Y where i32: Foo = ();\n+//~^ WARNING type_alias_bounds\n+//~| WARNING trivial_bounds\n \n-impl Foo for () where i32: Foo {\n+impl Foo for () where i32: Foo { //~ WARNING trivial_bounds\n     fn test(&self) {\n         3i32.test();\n         Foo::test(&4i32);\n         generic_function(5i32);\n     }\n }\n \n-fn f() where i32: Foo {\n+fn f() where i32: Foo { //~ WARNING trivial_bounds\n     let s = S;\n     3i32.test();\n     Foo::test(&4i32);\n     generic_function(5i32);\n }\n \n-fn g() where &'static str: Foo {\n+fn g() where &'static str: Foo { //~ WARNING trivial_bounds\n     \"Foo\".test();\n     Foo::test(&\"Foo\");\n     generic_function(\"Foo\");\n@@ -50,21 +52,22 @@ struct Dst<X: ?Sized> {\n     x: X,\n }\n \n-struct TwoStrs(str, str) where str: Sized;\n+struct TwoStrs(str, str) where str: Sized; //~ WARNING trivial_bounds\n \n-fn unsized_local() where for<'a> Dst<dyn A + 'a>: Sized {\n+fn unsized_local() where for<'a> Dst<dyn A + 'a>: Sized { //~ WARNING trivial_bounds\n     let x: Dst<dyn A> = *(Box::new(Dst { x: 1 }) as Box<Dst<dyn A>>);\n }\n \n-fn return_str() -> str where str: Sized {\n+fn return_str() -> str where str: Sized { //~ WARNING trivial_bounds\n     *\"Sized\".to_string().into_boxed_str()\n }\n \n fn use_op(s: String) -> String where String: ::std::ops::Neg<Output=String> {\n+    //~^ WARNING trivial_bounds\n     -s\n }\n \n-fn use_for() where i32: Iterator {\n+fn use_for() where i32: Iterator { //~ WARNING trivial_bounds\n     for _ in 2i32 {}\n }\n "}, {"sha": "156d38e3df58d3e388eb1b71a69eccf553e5c95d", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.stderr?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -43,49 +43,49 @@ LL | type Y where i32: Foo = ();\n    |                   ^^^\n \n warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent.rs:24:28\n+  --> $DIR/trivial-bounds-inconsistent.rs:26:28\n    |\n LL | impl Foo for () where i32: Foo {\n    |                            ^^^\n \n warning: Trait bound i32: Foo does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent.rs:32:19\n+  --> $DIR/trivial-bounds-inconsistent.rs:34:19\n    |\n LL | fn f() where i32: Foo {\n    |                   ^^^\n \n warning: Trait bound &'static str: Foo does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent.rs:39:28\n+  --> $DIR/trivial-bounds-inconsistent.rs:41:28\n    |\n LL | fn g() where &'static str: Foo {\n    |                            ^^^\n \n warning: Trait bound str: std::marker::Sized does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent.rs:53:37\n+  --> $DIR/trivial-bounds-inconsistent.rs:55:37\n    |\n LL | struct TwoStrs(str, str) where str: Sized;\n    |                                     ^^^^^\n \n warning: Trait bound for<'a> Dst<(dyn A + 'a)>: std::marker::Sized does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent.rs:55:51\n+  --> $DIR/trivial-bounds-inconsistent.rs:57:51\n    |\n LL | fn unsized_local() where for<'a> Dst<dyn A + 'a>: Sized {\n    |                                                   ^^^^^\n \n warning: Trait bound str: std::marker::Sized does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent.rs:59:35\n+  --> $DIR/trivial-bounds-inconsistent.rs:61:35\n    |\n LL | fn return_str() -> str where str: Sized {\n    |                                   ^^^^^\n \n warning: Trait bound std::string::String: std::ops::Neg does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent.rs:63:46\n+  --> $DIR/trivial-bounds-inconsistent.rs:65:46\n    |\n LL | fn use_op(s: String) -> String where String: ::std::ops::Neg<Output=String> {\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: Trait bound i32: std::iter::Iterator does not depend on any type or lifetime parameters\n-  --> $DIR/trivial-bounds-inconsistent.rs:67:25\n+  --> $DIR/trivial-bounds-inconsistent.rs:70:25\n    |\n LL | fn use_for() where i32: Iterator {\n    |                         ^^^^^^^^"}, {"sha": "e1d82ea360dc6294866dd78072a438882771e026", "filename": "src/test/ui/try-block/try-block-unreachable-code-lint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -43,14 +43,14 @@ fn test_try_block_after_divergent_stmt() {\n                 err()?;\n             }\n         }\n-        // ~^^^^^ WARNING unreachable expression\n+        //~^^^^^ WARNING unreachable expression\n     };\n }\n \n fn test_wrapped_divergent_expr() {\n     let _: Result<u32, ()> = {\n         Err(return)\n-        // ~^ WARNING unreachable call\n+        //~^ WARNING unreachable call\n     };\n }\n \n@@ -61,7 +61,7 @@ fn test_expr_after_divergent_stmt_in_try_block() {\n         }\n \n         42\n-        // ~^ WARNING unreachable expression\n+        //~^ WARNING unreachable expression\n     };\n     println!(\"res: {:?}\", res);\n }"}, {"sha": "28b6d2c1d016db258904f0c83ec3b2c2bc396ad2", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/427952e8088233576102a1cc32f67183d22e922b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/427952e8088233576102a1cc32f67183d22e922b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=427952e8088233576102a1cc32f67183d22e922b", "patch": "@@ -3148,11 +3148,20 @@ impl<'test> TestCx<'test> {\n                explicit, self.config.compare_mode, expected_errors, proc_res.status,\n                self.props.error_patterns);\n         if !explicit && self.config.compare_mode.is_none() {\n-            if !self.should_run() && !self.props.error_patterns.is_empty() {\n+            let check_patterns =\n+                !self.should_run() &&\n+                !self.props.error_patterns.is_empty();\n+\n+            let check_annotations =\n+                !check_patterns ||\n+                !expected_errors.is_empty();\n+\n+            if check_patterns {\n                 // \"// error-pattern\" comments\n                 self.check_error_patterns(&proc_res.stderr, &proc_res);\n             }\n-            if !expected_errors.is_empty() {\n+\n+            if check_annotations {\n                 // \"//~ERROR comments\"\n                 self.check_expected_errors(expected_errors, &proc_res);\n             }"}]}