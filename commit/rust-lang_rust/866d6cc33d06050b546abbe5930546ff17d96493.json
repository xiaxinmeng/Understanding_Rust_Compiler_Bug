{"sha": "866d6cc33d06050b546abbe5930546ff17d96493", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NmQ2Y2MzM2QwNjA1MGI1NDZhYmJlNTkzMDU0NmZmMTdkOTY0OTM=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2014-02-12T23:38:14Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-13T20:54:01Z"}, "message": "Add documentation for conditional-compilation\n\nThis documents in-source conditions using #[cfg(...)] and configurations\npre-defined by the compiler.\n\nFix #7962.", "tree": {"sha": "fa061f28f00f71bf9d0442dab43bd6f3a6279096", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa061f28f00f71bf9d0442dab43bd6f3a6279096"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/866d6cc33d06050b546abbe5930546ff17d96493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/866d6cc33d06050b546abbe5930546ff17d96493", "html_url": "https://github.com/rust-lang/rust/commit/866d6cc33d06050b546abbe5930546ff17d96493", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/866d6cc33d06050b546abbe5930546ff17d96493/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "957fcb3f54d4a3ee2d9ed67a532bb48e34753094", "url": "https://api.github.com/repos/rust-lang/rust/commits/957fcb3f54d4a3ee2d9ed67a532bb48e34753094", "html_url": "https://github.com/rust-lang/rust/commit/957fcb3f54d4a3ee2d9ed67a532bb48e34753094"}], "stats": {"total": 84, "additions": 74, "deletions": 10}, "files": [{"sha": "fe0fd8bd84d5c4f916ba6806a64a26bffd535291", "filename": "src/doc/rust.md", "status": "modified", "additions": 74, "deletions": 10, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/866d6cc33d06050b546abbe5930546ff17d96493/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/866d6cc33d06050b546abbe5930546ff17d96493/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=866d6cc33d06050b546abbe5930546ff17d96493", "patch": "@@ -1725,31 +1725,95 @@ mod bar {\n pub type int8_t = i8;\n ~~~~\n \n-> **Note:** In future versions of Rust, user-provided extensions to the compiler will be able to interpret attributes.\n-> When this facility is provided, the compiler will distinguish between language-reserved and user-available attributes.\n+> **Note:** In future versions of Rust, user-provided extensions to the compiler\n+> will be able to interpret attributes.  When this facility is provided, the\n+> compiler will distinguish between language-reserved and user-available\n+> attributes.\n \n-At present, only the Rust compiler interprets attributes, so all attribute\n-names are effectively reserved. Some significant attributes include:\n+At present, only the Rust compiler interprets attributes, so all attribute names\n+are effectively reserved. Some significant attributes include:\n \n * The `doc` attribute, for documenting code in-place.\n-* The `cfg` attribute, for conditional-compilation by build-configuration.\n+* The `cfg` attribute, for conditional-compilation by build-configuration (see\n+  [Conditional compilation](#conditional-compilation)).\n * The `crate_id` attribute, for describing the package ID of a crate.\n * The `lang` attribute, for custom definitions of traits and functions that are\n   known to the Rust compiler (see [Language items](#language-items)).\n * The `link` attribute, for describing linkage metadata for a extern blocks.\n * The `test` attribute, for marking functions as unit tests.\n * The `allow`, `warn`, `forbid`, and `deny` attributes, for\n   controlling lint checks (see [Lint check attributes](#lint-check-attributes)).\n-* The `deriving` attribute, for automatically generating\n-  implementations of certain traits.\n+* The `deriving` attribute, for automatically generating implementations of\n+  certain traits.\n * The `inline` attribute, for expanding functions at caller location (see\n   [Inline attributes](#inline-attributes)).\n-* The `static_assert` attribute, for asserting that a static bool is true at compiletime\n-* The `thread_local` attribute, for defining a `static mut` as a thread-local. Note that this is\n-  only a low-level building block, and is not local to a *task*, nor does it provide safety.\n+* The `static_assert` attribute, for asserting that a static bool is true at\n+  compiletime.\n+* The `thread_local` attribute, for defining a `static mut` as a thread-local.\n+  Note that this is only a low-level building block, and is not local to a\n+  *task*, nor does it provide safety.\n \n Other attributes may be added or removed during development of the language.\n \n+### Conditional compilation\n+\n+Sometimes one wants to have different compiler outputs from the same code,\n+depending on build target, such as targeted operating system, or to enable\n+release builds.\n+\n+There are two kinds of configuration options, one that is either defined or not\n+(`#[cfg(foo)]`), and the other that contains a string that can be checked\n+against (`#[cfg(bar = \"baz\")]` (currently only compiler-defined configuration\n+options can have the latter form).\n+\n+~~~~\n+// The function is only included in the build when compiling for OSX\n+#[cfg(target_os = \"macos\")]\n+fn macos_only() {\n+  // ...\n+}\n+\n+// This function is only included when either foo or bar is defined\n+#[cfg(foo)]\n+#[cfg(bar)]\n+fn needs_foo_or_bar() {\n+  // ...\n+}\n+\n+// This function is only included when compiling for a unixish OS with a 32-bit\n+// architecture\n+#[cfg(unix, target_word_size = \"32\")]\n+fn on_32bit_unix() {\n+  // ...\n+}\n+~~~~\n+\n+This illustrates some conditional compilation can be achieved using the\n+`#[cfg(...)]` attribute. Note that `#[cfg(foo, bar)]` is a condition that needs\n+both `foo` and `bar` to be defined while `#[cfg(foo)] #[cfg(bar)]` only needs\n+one of `foo` and `bar` to be defined (this resembles in the disjunctive normal\n+form). Additionally, one can reverse a condition by enclosing it in a\n+`not(...)`, like e. g. `#[cfg(not(target_os = \"win32\"))]`.\n+\n+To pass a configuration option which triggers a `#[cfg(identifier)]` one can use\n+`rustc --cfg identifier`. In addition to that, the following configurations are\n+pre-defined by the compiler:\n+\n+ * `target_arch = \"...\"`. Target CPU architecture, such as `\"x86\"`, `\"x86_64\"`\n+   `\"mips\"`, or `\"arm\"`.\n+ * `target_endian = \"...\"`. Endianness of the target CPU, either `\"little\"` or\n+   `\"big\"`.\n+ * `target_family = \"...\"`. Operating system family of the target, e. g.\n+   `\"unix\"` or `\"windows\"`. The value of this configuration option is defined as\n+   a configuration itself, like `unix` or `windows`.\n+ * `target_os = \"...\"`. Operating system of the target, examples include\n+   `\"win32\"`, `\"macos\"`, `\"linux\"`, `\"android\"` or `\"freebsd\"`.\n+ * `target_word_size = \"...\"`. Target word size in bits. This is set to `\"32\"`\n+   for 32-bit CPU targets, and likewise set to `\"64\"` for 64-bit CPU targets.\n+ * `test`. Only set in test builds (`rustc --test`).\n+ * `unix`. See `target_family`.\n+ * `windows`. See `target_family`.\n+\n ### Lint check attributes\n \n A lint check names a potentially undesirable coding pattern, such as"}]}