{"sha": "242be3631e6f2c581614b362ff1a572c7ffb8ff6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MmJlMzYzMWU2ZjJjNTgxNjE0YjM2MmZmMWE1NzJjN2ZmYjhmZjY=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-12-23T15:53:35Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-12-23T16:30:25Z"}, "message": "Omit closure parameters", "tree": {"sha": "b5f8adb7377db39fec7b39153bde2bc3f4268560", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5f8adb7377db39fec7b39153bde2bc3f4268560"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/242be3631e6f2c581614b362ff1a572c7ffb8ff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/242be3631e6f2c581614b362ff1a572c7ffb8ff6", "html_url": "https://github.com/rust-lang/rust/commit/242be3631e6f2c581614b362ff1a572c7ffb8ff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/242be3631e6f2c581614b362ff1a572c7ffb8ff6/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "527027d32e674850e62c5348933ec68d8d3ddf60", "url": "https://api.github.com/repos/rust-lang/rust/commits/527027d32e674850e62c5348933ec68d8d3ddf60", "html_url": "https://github.com/rust-lang/rust/commit/527027d32e674850e62c5348933ec68d8d3ddf60"}], "stats": {"total": 80, "additions": 62, "deletions": 18}, "files": [{"sha": "37def7c03580db0336c671382bcd5aa963136d32", "filename": "crates/ra_hir_ty/src/display.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/242be3631e6f2c581614b362ff1a572c7ffb8ff6/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242be3631e6f2c581614b362ff1a572c7ffb8ff6/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs?ref=242be3631e6f2c581614b362ff1a572c7ffb8ff6", "patch": "@@ -10,7 +10,7 @@ pub struct HirFormatter<'a, 'b, DB> {\n     buf: String,\n     curr_size: usize,\n     max_size: Option<usize>,\n-    should_display_default_types: bool,\n+    omit_verbose_types: bool,\n }\n \n pub trait HirDisplay {\n@@ -20,7 +20,7 @@ pub trait HirDisplay {\n     where\n         Self: Sized,\n     {\n-        HirDisplayWrapper(db, self, None, true)\n+        HirDisplayWrapper(db, self, None, false)\n     }\n \n     fn display_truncated<'a, DB>(\n@@ -31,7 +31,7 @@ pub trait HirDisplay {\n     where\n         Self: Sized,\n     {\n-        HirDisplayWrapper(db, self, max_size, false)\n+        HirDisplayWrapper(db, self, max_size, true)\n     }\n }\n \n@@ -74,8 +74,8 @@ where\n         }\n     }\n \n-    pub fn should_display_default_types(&self) -> bool {\n-        self.should_display_default_types\n+    pub fn omit_verbose_types(&self) -> bool {\n+        self.omit_verbose_types\n     }\n }\n \n@@ -93,7 +93,7 @@ where\n             buf: String::with_capacity(20),\n             curr_size: 0,\n             max_size: self.2,\n-            should_display_default_types: self.3,\n+            omit_verbose_types: self.3,\n         })\n     }\n }"}, {"sha": "55b6dd836c96a40158a44f6991bb1974ea6895e1", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/242be3631e6f2c581614b362ff1a572c7ffb8ff6/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242be3631e6f2c581614b362ff1a572c7ffb8ff6/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=242be3631e6f2c581614b362ff1a572c7ffb8ff6", "patch": "@@ -821,6 +821,8 @@ impl TypeWalk for Ty {\n     }\n }\n \n+const TYPE_HINT_TRUNCATION: &str = \"\u2026\";\n+\n impl HirDisplay for &Ty {\n     fn hir_fmt(&self, f: &mut HirFormatter<impl HirDatabase>) -> fmt::Result {\n         HirDisplay::hir_fmt(*self, f)\n@@ -830,7 +832,7 @@ impl HirDisplay for &Ty {\n impl HirDisplay for ApplicationTy {\n     fn hir_fmt(&self, f: &mut HirFormatter<impl HirDatabase>) -> fmt::Result {\n         if f.should_truncate() {\n-            return write!(f, \"\u2026\");\n+            return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n         }\n \n         match self.ctor {\n@@ -908,9 +910,7 @@ impl HirDisplay for ApplicationTy {\n                     write!(f, \"<\")?;\n \n                     let mut non_default_parameters = Vec::with_capacity(self.parameters.len());\n-                    let parameters_to_write = if f.should_display_default_types() {\n-                        self.parameters.0.as_ref()\n-                    } else {\n+                    let parameters_to_write = if f.omit_verbose_types() {\n                         match self\n                             .ctor\n                             .as_generic_def()\n@@ -935,6 +935,8 @@ impl HirDisplay for ApplicationTy {\n                                 &non_default_parameters\n                             }\n                         }\n+                    } else {\n+                        self.parameters.0.as_ref()\n                     };\n \n                     f.write_joined(parameters_to_write, \", \")?;\n@@ -959,9 +961,16 @@ impl HirDisplay for ApplicationTy {\n                 let sig = self.parameters[0]\n                     .callable_sig(f.db)\n                     .expect(\"first closure parameter should contain signature\");\n-                write!(f, \"|\")?;\n-                f.write_joined(sig.params(), \", \")?;\n-                write!(f, \"| -> {}\", sig.ret().display(f.db))?;\n+                let return_type_hint = sig.ret().display(f.db);\n+                if sig.params().is_empty() {\n+                    write!(f, \"|| -> {}\", return_type_hint)?;\n+                } else if f.omit_verbose_types() {\n+                    write!(f, \"|{}| -> {}\", TYPE_HINT_TRUNCATION, return_type_hint)?;\n+                } else {\n+                    write!(f, \"|\")?;\n+                    f.write_joined(sig.params(), \", \")?;\n+                    write!(f, \"| -> {}\", return_type_hint)?;\n+                };\n             }\n         }\n         Ok(())\n@@ -971,7 +980,7 @@ impl HirDisplay for ApplicationTy {\n impl HirDisplay for ProjectionTy {\n     fn hir_fmt(&self, f: &mut HirFormatter<impl HirDatabase>) -> fmt::Result {\n         if f.should_truncate() {\n-            return write!(f, \"\u2026\");\n+            return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n         }\n \n         let trait_name = f.db.trait_data(self.trait_(f.db)).name.clone();\n@@ -989,7 +998,7 @@ impl HirDisplay for ProjectionTy {\n impl HirDisplay for Ty {\n     fn hir_fmt(&self, f: &mut HirFormatter<impl HirDatabase>) -> fmt::Result {\n         if f.should_truncate() {\n-            return write!(f, \"\u2026\");\n+            return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n         }\n \n         match self {\n@@ -1074,7 +1083,7 @@ impl HirDisplay for Ty {\n impl TraitRef {\n     fn hir_fmt_ext(&self, f: &mut HirFormatter<impl HirDatabase>, use_as: bool) -> fmt::Result {\n         if f.should_truncate() {\n-            return write!(f, \"\u2026\");\n+            return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n         }\n \n         self.substs[0].hir_fmt(f)?;\n@@ -1108,7 +1117,7 @@ impl HirDisplay for &GenericPredicate {\n impl HirDisplay for GenericPredicate {\n     fn hir_fmt(&self, f: &mut HirFormatter<impl HirDatabase>) -> fmt::Result {\n         if f.should_truncate() {\n-            return write!(f, \"\u2026\");\n+            return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n         }\n \n         match self {"}, {"sha": "977aafc51f3ad0dbd159000e2a4b4fc53c3729dc", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/242be3631e6f2c581614b362ff1a572c7ffb8ff6/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/242be3631e6f2c581614b362ff1a572c7ffb8ff6/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=242be3631e6f2c581614b362ff1a572c7ffb8ff6", "patch": "@@ -293,14 +293,19 @@ fn main() {\n     }\n \n     #[test]\n-    fn closure_parameter() {\n+    fn closure_parameters() {\n         let (analysis, file_id) = single_file(\n             r#\"\n fn main() {\n     let mut start = 0;\n     (0..2).for_each(|increment| {\n         start += increment;\n     })\n+\n+    let multiply = |a, b, c, d| a * b * c * d;\n+    let _: i32 = multiply(1, 2, 3, 4);\n+\n+    let return_42 = || 42;\n }\"#,\n         );\n \n@@ -316,6 +321,36 @@ fn main() {\n                 kind: TypeHint,\n                 label: \"i32\",\n             },\n+            InlayHint {\n+                range: [114; 122),\n+                kind: TypeHint,\n+                label: \"|\u2026| -> i32\",\n+            },\n+            InlayHint {\n+                range: [126; 127),\n+                kind: TypeHint,\n+                label: \"i32\",\n+            },\n+            InlayHint {\n+                range: [129; 130),\n+                kind: TypeHint,\n+                label: \"i32\",\n+            },\n+            InlayHint {\n+                range: [132; 133),\n+                kind: TypeHint,\n+                label: \"i32\",\n+            },\n+            InlayHint {\n+                range: [135; 136),\n+                kind: TypeHint,\n+                label: \"i32\",\n+            },\n+            InlayHint {\n+                range: [201; 210),\n+                kind: TypeHint,\n+                label: \"|| -> i32\",\n+            },\n         ]\n         \"###\n         );"}]}