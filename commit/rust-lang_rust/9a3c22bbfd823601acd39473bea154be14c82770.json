{"sha": "9a3c22bbfd823601acd39473bea154be14c82770", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhM2MyMmJiZmQ4MjM2MDFhY2QzOTQ3M2JlYTE1NGJlMTRjODI3NzA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-11T10:56:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-11T10:56:44Z"}, "message": "Make slow test parallel", "tree": {"sha": "7967ef344927c416c7613722299f5b1c1e921c3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7967ef344927c416c7613722299f5b1c1e921c3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a3c22bbfd823601acd39473bea154be14c82770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a3c22bbfd823601acd39473bea154be14c82770", "html_url": "https://github.com/rust-lang/rust/commit/9a3c22bbfd823601acd39473bea154be14c82770", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a3c22bbfd823601acd39473bea154be14c82770/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c4919c9fdfb2333fd798cd7d531f4264c939322", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c4919c9fdfb2333fd798cd7d531f4264c939322", "html_url": "https://github.com/rust-lang/rust/commit/8c4919c9fdfb2333fd798cd7d531f4264c939322"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "09909b60a881690abd8c24e97a0b332333b6470f", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a3c22bbfd823601acd39473bea154be14c82770/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9a3c22bbfd823601acd39473bea154be14c82770/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9a3c22bbfd823601acd39473bea154be14c82770", "patch": "@@ -1267,6 +1267,7 @@ dependencies = [\n  \"once_cell\",\n  \"ra_parser\",\n  \"ra_text_edit\",\n+ \"rayon\",\n  \"rowan\",\n  \"rustc-ap-rustc_lexer\",\n  \"rustc-hash\","}, {"sha": "57cc09854b55a6537cc2674eb94df7d6a0fdba97", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a3c22bbfd823601acd39473bea154be14c82770/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9a3c22bbfd823601acd39473bea154be14c82770/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=9a3c22bbfd823601acd39473bea154be14c82770", "patch": "@@ -33,3 +33,4 @@ serde = { version = \"1.0.106\", features = [\"derive\"] }\n test_utils = { path = \"../test_utils\" }\n expect = { path = \"../expect\" }\n walkdir = \"2.3.1\"\n+rayon = \"1\""}, {"sha": "8447dcad70591d6c1b23804e001c61f4abed50dd", "filename": "crates/ra_syntax/src/tests.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9a3c22bbfd823601acd39473bea154be14c82770/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3c22bbfd823601acd39473bea154be14c82770/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ftests.rs?ref=9a3c22bbfd823601acd39473bea154be14c82770", "patch": "@@ -1,10 +1,11 @@\n use std::{\n     fmt::Write,\n     fs,\n-    path::{Component, Path, PathBuf},\n+    path::{Path, PathBuf},\n };\n \n use expect::expect_file;\n+use rayon::prelude::*;\n use test_utils::project_dir;\n \n use crate::{fuzz, tokenize, SourceFile, SyntaxError, TextRange, TextSize, Token};\n@@ -121,33 +122,43 @@ fn reparse_fuzz_tests() {\n /// FIXME: Use this as a benchmark\n #[test]\n fn self_hosting_parsing() {\n-    use std::ffi::OsStr;\n     let dir = project_dir().join(\"crates\");\n-    let mut count = 0;\n-    for entry in walkdir::WalkDir::new(dir)\n+    let files = walkdir::WalkDir::new(dir)\n         .into_iter()\n         .filter_entry(|entry| {\n-            !entry.path().components().any(|component| {\n-                // Get all files which are not in the crates/ra_syntax/test_data folder\n-                component == Component::Normal(OsStr::new(\"test_data\"))\n-            })\n+            // Get all files which are not in the crates/ra_syntax/test_data folder\n+            !entry.path().components().any(|component| component.as_os_str() == \"test_data\")\n         })\n         .map(|e| e.unwrap())\n         .filter(|entry| {\n             // Get all `.rs ` files\n-            !entry.path().is_dir() && (entry.path().extension() == Some(OsStr::new(\"rs\")))\n+            !entry.path().is_dir() && (entry.path().extension().unwrap_or_default() == \"rs\")\n         })\n-    {\n-        count += 1;\n-        let text = read_text(entry.path());\n-        if let Err(errors) = SourceFile::parse(&text).ok() {\n-            panic!(\"Parsing errors:\\n{:?}\\n{}\\n\", errors, entry.path().display());\n-        }\n-    }\n+        .map(|entry| entry.into_path())\n+        .collect::<Vec<_>>();\n     assert!(\n-        count > 30,\n+        files.len() > 100,\n         \"self_hosting_parsing found too few files - is it running in the right directory?\"\n-    )\n+    );\n+\n+    let errors = files\n+        .into_par_iter()\n+        .filter_map(|file| {\n+            let text = read_text(&file);\n+            match SourceFile::parse(&text).ok() {\n+                Ok(_) => None,\n+                Err(err) => Some((file, err)),\n+            }\n+        })\n+        .collect::<Vec<_>>();\n+\n+    if !errors.is_empty() {\n+        let errors = errors\n+            .into_iter()\n+            .map(|(path, err)| format!(\"{}: {:?}\\n\", path.display(), err))\n+            .collect::<String>();\n+        panic!(\"Parsing errors:\\n{}\\n\", errors);\n+    }\n }\n \n fn test_data_dir() -> PathBuf {"}]}