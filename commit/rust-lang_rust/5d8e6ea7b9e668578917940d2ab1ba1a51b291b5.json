{"sha": "5d8e6ea7b9e668578917940d2ab1ba1a51b291b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkOGU2ZWE3YjllNjY4NTc4OTE3OTQwZDJhYjFiYTFhNTFiMjkxYjU=", "commit": {"author": {"name": "Ali\u00e9nore Bouttefeux", "email": "alienore.bouttefeux@gmail.com", "date": "2021-05-25T14:55:30Z"}, "committer": {"name": "Ali\u00e9nore Bouttefeux", "email": "alienore.bouttefeux@gmail.com", "date": "2021-05-25T14:55:30Z"}, "message": "show list of candidates", "tree": {"sha": "a9572b0983195350624886bd491436d087a0013d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9572b0983195350624886bd491436d087a0013d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d8e6ea7b9e668578917940d2ab1ba1a51b291b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d8e6ea7b9e668578917940d2ab1ba1a51b291b5", "html_url": "https://github.com/rust-lang/rust/commit/5d8e6ea7b9e668578917940d2ab1ba1a51b291b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d8e6ea7b9e668578917940d2ab1ba1a51b291b5/comments", "author": {"login": "ABouttefeux", "id": 77335613, "node_id": "MDQ6VXNlcjc3MzM1NjEz", "avatar_url": "https://avatars.githubusercontent.com/u/77335613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ABouttefeux", "html_url": "https://github.com/ABouttefeux", "followers_url": "https://api.github.com/users/ABouttefeux/followers", "following_url": "https://api.github.com/users/ABouttefeux/following{/other_user}", "gists_url": "https://api.github.com/users/ABouttefeux/gists{/gist_id}", "starred_url": "https://api.github.com/users/ABouttefeux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ABouttefeux/subscriptions", "organizations_url": "https://api.github.com/users/ABouttefeux/orgs", "repos_url": "https://api.github.com/users/ABouttefeux/repos", "events_url": "https://api.github.com/users/ABouttefeux/events{/privacy}", "received_events_url": "https://api.github.com/users/ABouttefeux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ABouttefeux", "id": 77335613, "node_id": "MDQ6VXNlcjc3MzM1NjEz", "avatar_url": "https://avatars.githubusercontent.com/u/77335613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ABouttefeux", "html_url": "https://github.com/ABouttefeux", "followers_url": "https://api.github.com/users/ABouttefeux/followers", "following_url": "https://api.github.com/users/ABouttefeux/following{/other_user}", "gists_url": "https://api.github.com/users/ABouttefeux/gists{/gist_id}", "starred_url": "https://api.github.com/users/ABouttefeux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ABouttefeux/subscriptions", "organizations_url": "https://api.github.com/users/ABouttefeux/orgs", "repos_url": "https://api.github.com/users/ABouttefeux/repos", "events_url": "https://api.github.com/users/ABouttefeux/events{/privacy}", "received_events_url": "https://api.github.com/users/ABouttefeux/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "120691c590c4309fda31994931b9a561b4249c33", "url": "https://api.github.com/repos/rust-lang/rust/commits/120691c590c4309fda31994931b9a561b4249c33", "html_url": "https://github.com/rust-lang/rust/commit/120691c590c4309fda31994931b9a561b4249c33"}], "stats": {"total": 57, "additions": 35, "deletions": 22}, "files": [{"sha": "569e871922732f4c04db740ad64ad764cdf93f23", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5d8e6ea7b9e668578917940d2ab1ba1a51b291b5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d8e6ea7b9e668578917940d2ab1ba1a51b291b5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=5d8e6ea7b9e668578917940d2ab1ba1a51b291b5", "patch": "@@ -517,21 +517,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             if inherent_impls_candidate.len() > 0 {\n                                 inherent_impls_candidate.sort();\n                                 inherent_impls_candidate.dedup();\n+\n+                                // number of type to shows at most.\n+                                let limit = if inherent_impls_candidate.len() == 5 { 5 } else { 4 };\n                                 let type_candidates = inherent_impls_candidate\n                                     .iter()\n-                                    .map(|impl_item| self.tcx.at(span).type_of(*impl_item))\n-                                    .collect::<Vec<_>>();\n-                                // number of type to shows at most.\n-                                let limit = if type_candidates.len() == 4 { 4 } else { 3 };\n-                                for ty in type_candidates.iter().take(limit) {\n-                                    err.note(&format!(\"the {item_kind} was found for {}\", ty));\n-                                }\n-                                if type_candidates.len() > limit {\n-                                    err.note(&format!(\n-                                        \"the {item_kind} was found for {} more types\",\n-                                        type_candidates.len() - limit\n-                                    ));\n-                                }\n+                                    .take(limit)\n+                                    .map(|impl_item| {\n+                                        format!(\"- `{}`\", self.tcx.at(span).type_of(*impl_item))\n+                                    })\n+                                    .collect::<Vec<_>>()\n+                                    .join(\"\\n\");\n+                                let additional_types = if inherent_impls_candidate.len() > limit {\n+                                    format!(\n+                                        \"\\nand {} more types\",\n+                                        inherent_impls_candidate.len() - limit\n+                                    )\n+                                } else {\n+                                    \"\".to_string()\n+                                };\n+                                err.note(&format!(\n+                                    \"the {item_kind} was found for\\n{}{}\",\n+                                    type_candidates, additional_types\n+                                ));\n                             }\n                         }\n                     } else {"}, {"sha": "e9d934332f171f6402a5f296c5bc780903aef40a", "filename": "src/test/ui/issues/issue-30123.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d8e6ea7b9e668578917940d2ab1ba1a51b291b5/src%2Ftest%2Fui%2Fissues%2Fissue-30123.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d8e6ea7b9e668578917940d2ab1ba1a51b291b5/src%2Ftest%2Fui%2Fissues%2Fissue-30123.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30123.stderr?ref=5d8e6ea7b9e668578917940d2ab1ba1a51b291b5", "patch": "@@ -4,7 +4,8 @@ error[E0599]: no function or associated item named `new_undirected` found for st\n LL |     let ug = Graph::<i32, i32>::new_undirected();\n    |                                 ^^^^^^^^^^^^^^ function or associated item not found in `issue_30123_aux::Graph<i32, i32>`\n    |\n-   = note: the function or associated item was found for issue_30123_aux::Graph<N, E, Undirected>\n+   = note: the function or associated item was found for\n+           - `issue_30123_aux::Graph<N, E, Undirected>`\n \n error: aborting due to previous error\n "}, {"sha": "1671e5e5e64c81d97a9802349d580053c765a01d", "filename": "src/test/ui/methods/method-not-found-generic-arg-elision.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5d8e6ea7b9e668578917940d2ab1ba1a51b291b5/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d8e6ea7b9e668578917940d2ab1ba1a51b291b5/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr?ref=5d8e6ea7b9e668578917940d2ab1ba1a51b291b5", "patch": "@@ -7,7 +7,8 @@ LL | struct Point<T> {\n LL |     let d = point_i32.distance();\n    |                       ^^^^^^^^ method not found in `Point<i32>`\n    |\n-   = note: the method was found for Point<f64>\n+   = note: the method was found for\n+           - `Point<f64>`\n \n error[E0599]: no method named `other` found for struct `Point` in the current scope\n   --> $DIR/method-not-found-generic-arg-elision.rs:84:23\n@@ -33,10 +34,12 @@ LL | struct Wrapper<T>(T);\n LL |     wrapper.method();\n    |             ^^^^^^ method not found in `Wrapper<bool>`\n    |\n-   = note: the method was found for Wrapper<i8>\n-   = note: the method was found for Wrapper<i16>\n-   = note: the method was found for Wrapper<i32>\n-   = note: the method was found for 3 more types\n+   = note: the method was found for\n+           - `Wrapper<i8>`\n+           - `Wrapper<i16>`\n+           - `Wrapper<i32>`\n+           - `Wrapper<i64>`\n+           and 2 more types\n \n error[E0599]: no method named `other` found for struct `Wrapper` in the current scope\n   --> $DIR/method-not-found-generic-arg-elision.rs:92:13\n@@ -56,9 +59,10 @@ LL | struct Wrapper2<'a, T, const C: usize> {\n LL |     wrapper.method();\n    |             ^^^^^^ method not found in `Wrapper2<'_, bool, 3_usize>`\n    |\n-   = note: the method was found for Wrapper2<'a, i8, C>\n-   = note: the method was found for Wrapper2<'a, i16, C>\n-   = note: the method was found for Wrapper2<'a, i32, C>\n+   = note: the method was found for\n+           - `Wrapper2<'a, i8, C>`\n+           - `Wrapper2<'a, i16, C>`\n+           - `Wrapper2<'a, i32, C>`\n \n error[E0599]: no method named `other` found for struct `Wrapper2` in the current scope\n   --> $DIR/method-not-found-generic-arg-elision.rs:98:13"}]}