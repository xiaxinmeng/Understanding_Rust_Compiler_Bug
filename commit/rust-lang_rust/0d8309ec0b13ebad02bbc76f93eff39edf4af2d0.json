{"sha": "0d8309ec0b13ebad02bbc76f93eff39edf4af2d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkODMwOWVjMGIxM2ViYWQwMmJiYzc2ZjkzZWZmMzllZGY0YWYyZDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-25T17:06:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-25T17:06:48Z"}, "message": "Auto merge of #24813 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #24649, #24806, #24809, #24811\r\n- Manual merges: #24812", "tree": {"sha": "c9c57c7b7b33d9fcb150af5d4299b51b1ec4a709", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9c57c7b7b33d9fcb150af5d4299b51b1ec4a709"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0", "html_url": "https://github.com/rust-lang/rust/commit/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83263b48c39ef0e21cc9872191f4ce4877f4e05f", "url": "https://api.github.com/repos/rust-lang/rust/commits/83263b48c39ef0e21cc9872191f4ce4877f4e05f", "html_url": "https://github.com/rust-lang/rust/commit/83263b48c39ef0e21cc9872191f4ce4877f4e05f"}, {"sha": "3e67b6bb6c5383674f58a637f93d6740bca6a7d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e67b6bb6c5383674f58a637f93d6740bca6a7d7", "html_url": "https://github.com/rust-lang/rust/commit/3e67b6bb6c5383674f58a637f93d6740bca6a7d7"}], "stats": {"total": 58, "additions": 34, "deletions": 24}, "files": [{"sha": "964ef7ca5200ffc2021784cea35b7ab6a9d623b2", "filename": "src/doc/reference.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=0d8309ec0b13ebad02bbc76f93eff39edf4af2d0", "patch": "@@ -68,12 +68,14 @@ explicit code point lists. [^inputformat]\n ## Special Unicode Productions\n \n The following productions in the Rust grammar are defined in terms of Unicode\n-properties: `ident`, `non_null`, `non_star`, `non_eol`, `non_slash_or_star`,\n-`non_single_quote` and `non_double_quote`.\n+properties: `ident`, `non_null`, `non_eol`, `non_single_quote` and `non_double_quote`.\n \n ### Identifiers\n \n-The `ident` production is any nonempty Unicode string of the following form:\n+The `ident` production is any nonempty Unicode[^non_ascii_idents] string of the following form:\n+\n+[^non_ascii_idents]: Non-ASCII characters in identifiers are currently feature\n+  gated. This is expected to improve soon.\n \n - The first character has property `XID_start`\n - The remaining characters have property `XID_continue`\n@@ -90,8 +92,6 @@ Some productions are defined by exclusion of particular Unicode characters:\n \n - `non_null` is any single Unicode character aside from `U+0000` (null)\n - `non_eol` is `non_null` restricted to exclude `U+000A` (`'\\n'`)\n-- `non_star` is `non_null` restricted to exclude `U+002A` (`*`)\n-- `non_slash_or_star` is `non_null` restricted to exclude `U+002F` (`/`) and `U+002A` (`*`)\n - `non_single_quote` is `non_null` restricted to exclude `U+0027`  (`'`)\n - `non_double_quote` is `non_null` restricted to exclude `U+0022` (`\"`)\n \n@@ -1977,7 +1977,7 @@ For any lint check `C`:\n \n The lint checks supported by the compiler can be found via `rustc -W help`,\n along with their default settings.  [Compiler\n-plugins](book/plugins.html#lint-plugins) can provide additional lint checks.\n+plugins](book/compiler-plugins.html#lint-plugins) can provide additional lint checks.\n \n ```{.ignore}\n mod m1 {\n@@ -3647,4 +3647,4 @@ that have since been removed):\n   pattern syntax\n \n [ffi]: book/ffi.html\n-[plugin]: book/plugins.html\n+[plugin]: book/compiler-plugins.html"}, {"sha": "a892f67d571af9bd9c7cb221c74be5c15177ed4d", "filename": "src/doc/trpl/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Ftrpl%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Ftrpl%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FREADME.md?ref=0d8309ec0b13ebad02bbc76f93eff39edf4af2d0", "patch": "@@ -8,7 +8,7 @@ good at: embedding in other languages, programs with specific space and time\n requirements, and writing low-level code, like device drivers and operating\n systems. It improves on current languages targeting this space by having a\n number of compile-time safety checks that produce no runtime overhead, while\n-eliminating all data races. Rust also aims to achieve \u2018zero-cost abstrations\u2019\n+eliminating all data races. Rust also aims to achieve \u2018zero-cost abstractions\u2019\n even though some of these abstractions feel like those of a high-level\n language. Even then, Rust still allows precise control like a low-level\n language would."}, {"sha": "d7fa84761e5271e770d29d671b46c23f555e0ac5", "filename": "src/doc/trpl/closures.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Ftrpl%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Ftrpl%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fclosures.md?ref=0d8309ec0b13ebad02bbc76f93eff39edf4af2d0", "patch": "@@ -294,7 +294,7 @@ is `Fn(i32) -> i32`.\n \n There\u2019s one other key point here: because we\u2019re bounding a generic with a\n trait, this will get monomorphized, and therefore, we\u2019ll be doing static\n-dispatch into the closure. That\u2019s pretty neat. In many langauges, closures are\n+dispatch into the closure. That\u2019s pretty neat. In many languages, closures are\n inherently heap allocated, and will always involve dynamic dispatch. In Rust,\n we can stack allocate our closure environment, and statically dispatch the\n call. This happens quite often with iterators and their adapters, which often"}, {"sha": "b28343e7fb94c75f7acd8d654bad07c4098720b1", "filename": "src/doc/trpl/documentation.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdocumentation.md?ref=0d8309ec0b13ebad02bbc76f93eff39edf4af2d0", "patch": "@@ -556,7 +556,7 @@ This sets a few different options, with a logo, favicon, and a root URL.\n \n ## Generation options\n \n-`rustdoc` also contains a few other options on the command line, for further customiziation:\n+`rustdoc` also contains a few other options on the command line, for further customization:\n \n - `--html-in-header FILE`: includes the contents of FILE at the end of the\n   `<head>...</head>` section."}, {"sha": "d0825e543f2c288c678515ad8115d17b28ed1b0d", "filename": "src/doc/trpl/getting-started.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Ftrpl%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Ftrpl%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fgetting-started.md?ref=0d8309ec0b13ebad02bbc76f93eff39edf4af2d0", "patch": "@@ -1,5 +1,5 @@\n % Getting Started\n \n This first section of the book will get you going with Rust and its tooling.\n-First, we\u2019ll install Rust. Then: the classic \u2018Hello World\u2019 program. Finally,\n+First, we\u2019ll install Rust. Then, the classic \u2018Hello World\u2019 program. Finally,\n we\u2019ll talk about Cargo, Rust\u2019s build system and package manager."}, {"sha": "9845fcbdcd173ec3d6b3543bb2fba9689cf5727e", "filename": "src/doc/trpl/glossary.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Ftrpl%2Fglossary.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Ftrpl%2Fglossary.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fglossary.md?ref=0d8309ec0b13ebad02bbc76f93eff39edf4af2d0", "patch": "@@ -19,7 +19,7 @@ In the example above `x` and `y` have arity 2. `z` has arity 3.\n \n When a compiler is compiling your program, it does a number of different\n things. One of the things that it does is turn the text of your program into an\n-'abstract syntax tree,' or 'AST.' This tree is a representation of the\n+\u2018abstract syntax tree\u2019, or\u2018AST\u2019. This tree is a representation of the\n structure of your program. For example, `2 + 3` can be turned into a tree:\n \n ```text"}, {"sha": "816bfb17970619374a2147deddecc16fad7cb920", "filename": "src/doc/trpl/mutability.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Ftrpl%2Fmutability.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Ftrpl%2Fmutability.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmutability.md?ref=0d8309ec0b13ebad02bbc76f93eff39edf4af2d0", "patch": "@@ -129,7 +129,7 @@ about it first.\n \n ## Field-level mutability\n \n-Mutabilty is a property of either a borrow (`&mut`) or a binding (`let mut`).\n+Mutability is a property of either a borrow (`&mut`) or a binding (`let mut`).\n This means that, for example, you cannot have a [`struct`][struct] with\n some fields mutable and some immutable:\n "}, {"sha": "aca6e327c3bce07f5d0626faaa162b9ba7623d40", "filename": "src/doc/trpl/primitive-types.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Ftrpl%2Fprimitive-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Ftrpl%2Fprimitive-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fprimitive-types.md?ref=0d8309ec0b13ebad02bbc76f93eff39edf4af2d0", "patch": "@@ -62,14 +62,14 @@ let y = 1.0; // y has type f64\n Here\u2019s a list of the different numeric types, with links to their documentation\n in the standard library:\n \n+* [i8](../std/primitive.i8.html)\n * [i16](../std/primitive.i16.html)\n * [i32](../std/primitive.i32.html)\n * [i64](../std/primitive.i64.html)\n-* [i8](../std/primitive.i8.html)\n+* [u8](../std/primitive.u8.html)\n * [u16](../std/primitive.u16.html)\n * [u32](../std/primitive.u32.html)\n * [u64](../std/primitive.u64.html)\n-* [u8](../std/primitive.u8.html)\n * [isize](../std/primitive.isize.html)\n * [usize](../std/primitive.usize.html)\n * [f32](../std/primitive.f32.html)\n@@ -82,12 +82,12 @@ Let\u2019s go over them by category:\n Integer types come in two varieties: signed and unsigned. To understand the\n difference, let\u2019s consider a number with four bits of size. A signed, four-bit\n number would let you store numbers from `-8` to `+7`. Signed numbers use\n-\u2018two\u2019s compliment representation\u2019. An unsigned four bit number, since it does\n+\u201ctwo\u2019s compliment representation\u201d. An unsigned four bit number, since it does\n not need to store negatives, can store values from `0` to `+15`.\n \n Unsigned types use a `u` for their category, and signed types use `i`. The `i`\n is for \u2018integer\u2019. So `u8` is an eight-bit unsigned number, and `i8` is an\n-eight-bit signed number. \n+eight-bit signed number.\n \n ## Fixed size types\n \n@@ -103,7 +103,7 @@ and unsigned varieties. This makes for two types: `isize` and `usize`.\n \n ## Floating-point types\n \n-Rust also two floating point types: `f32` and `f64`. These correspond to \n+Rust also has two floating point types: `f32` and `f64`. These correspond to\n IEEE-754 single and double precision numbers.\n \n # Arrays\n@@ -241,8 +241,8 @@ println!(\"x is {}\", x);\n Remember [before][let] when I said the left-hand side of a `let` statement was more\n powerful than just assigning a binding? Here we are. We can put a pattern on\n the left-hand side of the `let`, and if it matches up to the right-hand side,\n-we can assign multiple bindings at once. In this case, `let` \"destructures,\"\n-or \"breaks up,\" the tuple, and assigns the bits to three bindings.\n+we can assign multiple bindings at once. In this case, `let` \u201cdestructures\u201d\n+or \u201cbreaks up\u201d the tuple, and assigns the bits to three bindings.\n \n [let]: variable-bindings.html\n "}, {"sha": "c01129057418cf1af9db4d73fb37ed52d4133f19", "filename": "src/doc/trpl/trait-objects.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Ftrpl%2Ftrait-objects.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Ftrpl%2Ftrait-objects.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftrait-objects.md?ref=0d8309ec0b13ebad02bbc76f93eff39edf4af2d0", "patch": "@@ -155,7 +155,7 @@ A function that takes a trait object is not specialized to each of the types\n that implements `Foo`: only one copy is generated, often (but not always)\n resulting in less code bloat. However, this comes at the cost of requiring\n slower virtual function calls, and effectively inhibiting any chance of\n-inlining and related optimisations from occurring.\n+inlining and related optimizations from occurring.\n \n ### Why pointers?\n "}, {"sha": "ea5d2ed711fed0f0aac66be1db7c909014ff5339", "filename": "src/doc/trpl/traits.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Ftrpl%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Ftrpl%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftraits.md?ref=0d8309ec0b13ebad02bbc76f93eff39edf4af2d0", "patch": "@@ -184,7 +184,7 @@ won\u2019t have its methods:\n ```rust,ignore\n let mut f = std::fs::File::open(\"foo.txt\").ok().expect(\"Couldn\u2019t open foo.txt\");\n let result = f.write(\"whatever\".as_bytes());\n-# result.unwrap(); // ignore the erorr\n+# result.unwrap(); // ignore the error\n ```\n \n Here\u2019s the error:\n@@ -203,7 +203,7 @@ use std::io::Write;\n \n let mut f = std::fs::File::open(\"foo.txt\").ok().expect(\"Couldn\u2019t open foo.txt\");\n let result = f.write(\"whatever\".as_bytes());\n-# result.unwrap(); // ignore the erorr\n+# result.unwrap(); // ignore the error\n ```\n \n This will compile without error."}, {"sha": "2166c046897f0a56da8c299dbd95a737a3dda291", "filename": "src/doc/trpl/variable-bindings.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Ftrpl%2Fvariable-bindings.md", "raw_url": "https://github.com/rust-lang/rust/raw/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Fdoc%2Ftrpl%2Fvariable-bindings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fvariable-bindings.md?ref=0d8309ec0b13ebad02bbc76f93eff39edf4af2d0", "patch": "@@ -1,6 +1,6 @@\n % Variable Bindings\n \n-Vitually every non-\u2019Hello World\u2019 Rust program uses *variable bindings*. They\n+Virtually every non-'Hello World\u2019 Rust program uses *variable bindings*. They\n look like this:\n \n ```rust"}, {"sha": "2ceb60cc3aa9f7132b518f4708eb5f2fb7b982a9", "filename": "src/libstd/path.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d8309ec0b13ebad02bbc76f93eff39edf4af2d0/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=0d8309ec0b13ebad02bbc76f93eff39edf4af2d0", "patch": "@@ -1241,6 +1241,16 @@ impl Path {\n     ///\n     /// Path::new(\"foo.txt\");\n     /// ```\n+    ///\n+    /// You can create `Path`s from `String`s, or even other `Path`s:\n+    ///\n+    /// ```\n+    /// use std::path::Path;\n+    ///\n+    /// let s = String::from(\"bar.txt\");\n+    /// let p = Path::new(&s);\n+    /// Path::new(&p);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new<S: AsRef<OsStr> + ?Sized>(s: &S) -> &Path {\n         unsafe { mem::transmute(s.as_ref()) }"}]}