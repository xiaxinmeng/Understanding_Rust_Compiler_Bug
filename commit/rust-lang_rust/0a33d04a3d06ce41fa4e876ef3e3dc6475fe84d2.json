{"sha": "0a33d04a3d06ce41fa4e876ef3e3dc6475fe84d2", "node_id": "C_kwDOAAsO6NoAKDBhMzNkMDRhM2QwNmNlNDFmYTRlODc2ZWYzZTNkYzY0NzVmZTg0ZDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-18T11:17:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-18T11:17:40Z"}, "message": "Auto merge of #13053 - lowr:fix/pat-sole-Self, r=Veykril\n\nfix: resolve path `Self` alone in value namespace\n\nFixes #12968", "tree": {"sha": "537a36d8953080137d369b9578c32e50e3f7711a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/537a36d8953080137d369b9578c32e50e3f7711a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a33d04a3d06ce41fa4e876ef3e3dc6475fe84d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a33d04a3d06ce41fa4e876ef3e3dc6475fe84d2", "html_url": "https://github.com/rust-lang/rust/commit/0a33d04a3d06ce41fa4e876ef3e3dc6475fe84d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a33d04a3d06ce41fa4e876ef3e3dc6475fe84d2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5543dd88c98eca686d63fc032ae927a0565565b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5543dd88c98eca686d63fc032ae927a0565565b8", "html_url": "https://github.com/rust-lang/rust/commit/5543dd88c98eca686d63fc032ae927a0565565b8"}, {"sha": "dac27679f75725c8a3e8ff5fc009f3bc59ce3523", "url": "https://api.github.com/repos/rust-lang/rust/commits/dac27679f75725c8a3e8ff5fc009f3bc59ce3523", "html_url": "https://github.com/rust-lang/rust/commit/dac27679f75725c8a3e8ff5fc009f3bc59ce3523"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "5df48e5fdcbaf40502d0aa11f3b9bd666132b771", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a33d04a3d06ce41fa4e876ef3e3dc6475fe84d2/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a33d04a3d06ce41fa4e876ef3e3dc6475fe84d2/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=0a33d04a3d06ce41fa4e876ef3e3dc6475fe84d2", "patch": "@@ -734,6 +734,7 @@ impl<'a> InferenceContext<'a> {\n                         let ty = self.insert_type_vars(ty.substitute(Interner, &substs));\n                         return (ty, Some(strukt.into()));\n                     }\n+                    ValueNs::ImplSelf(impl_id) => (TypeNs::SelfType(impl_id), None),\n                     _ => return (self.err_ty(), None),\n                 },\n                 Some(ResolveValueResult::Partial(typens, unresolved)) => (typens, Some(unresolved)),"}, {"sha": "eb04bf87783b40dc8a0c9ef78b7b42044b407a7e", "filename": "crates/hir-ty/src/tests/patterns.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0a33d04a3d06ce41fa4e876ef3e3dc6475fe84d2/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a33d04a3d06ce41fa4e876ef3e3dc6475fe84d2/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=0a33d04a3d06ce41fa4e876ef3e3dc6475fe84d2", "patch": "@@ -488,6 +488,42 @@ fn infer_adt_pattern() {\n     );\n }\n \n+#[test]\n+fn tuple_struct_destructured_with_self() {\n+    check_infer(\n+        r#\"\n+struct Foo(usize,);\n+impl Foo {\n+    fn f() {\n+        let Self(s,) = &Foo(0,);\n+        let Self(s,) = &mut Foo(0,);\n+        let Self(s,) = Foo(0,);\n+    }\n+}\n+        \"#,\n+        expect![[r#\"\n+            42..151 '{     ...     }': ()\n+            56..64 'Self(s,)': Foo\n+            61..62 's': &usize\n+            67..75 '&Foo(0,)': &Foo\n+            68..71 'Foo': Foo(usize) -> Foo\n+            68..75 'Foo(0,)': Foo\n+            72..73 '0': usize\n+            89..97 'Self(s,)': Foo\n+            94..95 's': &mut usize\n+            100..112 '&mut Foo(0,)': &mut Foo\n+            105..108 'Foo': Foo(usize) -> Foo\n+            105..112 'Foo(0,)': Foo\n+            109..110 '0': usize\n+            126..134 'Self(s,)': Foo\n+            131..132 's': usize\n+            137..140 'Foo': Foo(usize) -> Foo\n+            137..144 'Foo(0,)': Foo\n+            141..142 '0': usize\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn enum_variant_through_self_in_pattern() {\n     check_infer("}]}