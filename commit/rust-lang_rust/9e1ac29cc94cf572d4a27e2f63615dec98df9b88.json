{"sha": "9e1ac29cc94cf572d4a27e2f63615dec98df9b88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMWFjMjljYzk0Y2Y1NzJkNGEyN2UyZjYzNjE1ZGVjOThkZjliODg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-06T18:56:51Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-06T20:29:11Z"}, "message": "Fix ICE (part 2)", "tree": {"sha": "396a8a9f3d800586b7bf9482284cbc2064f70f14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/396a8a9f3d800586b7bf9482284cbc2064f70f14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e1ac29cc94cf572d4a27e2f63615dec98df9b88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e1ac29cc94cf572d4a27e2f63615dec98df9b88", "html_url": "https://github.com/rust-lang/rust/commit/9e1ac29cc94cf572d4a27e2f63615dec98df9b88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e1ac29cc94cf572d4a27e2f63615dec98df9b88/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4da67855f13e2bb0f46b4b221c61311fd826f1de", "url": "https://api.github.com/repos/rust-lang/rust/commits/4da67855f13e2bb0f46b4b221c61311fd826f1de", "html_url": "https://github.com/rust-lang/rust/commit/4da67855f13e2bb0f46b4b221c61311fd826f1de"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "ad635016a913672fd3bcae690efa78fbc28b4071", "filename": "src/discriminant.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9e1ac29cc94cf572d4a27e2f63615dec98df9b88/src%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e1ac29cc94cf572d4a27e2f63615dec98df9b88/src%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiscriminant.rs?ref=9e1ac29cc94cf572d4a27e2f63615dec98df9b88", "patch": "@@ -26,15 +26,20 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n             variants: _,\n         } => {\n             let ptr = place.place_field(fx, mir::Field::new(tag_field));\n-            let to = ty::ScalarInt::try_from_uint(\n-                layout\n-                    .ty\n-                    .discriminant_for_variant(fx.tcx, variant_index)\n-                    .unwrap()\n-                    .val,\n-                ptr.layout().size,\n-            )\n-            .unwrap();\n+            let to = layout\n+                .ty\n+                .discriminant_for_variant(fx.tcx, variant_index)\n+                .unwrap()\n+                .val;\n+            let to = if ptr.layout().abi.is_signed() {\n+                ty::ScalarInt::try_from_int(\n+                    ptr.layout().size.sign_extend(to) as i128,\n+                    ptr.layout().size,\n+                )\n+                .unwrap()\n+            } else {\n+                ty::ScalarInt::try_from_uint(to, ptr.layout().size).unwrap()\n+            };\n             let discr = CValue::const_val(fx, ptr.layout(), to);\n             ptr.write_cvalue(fx, discr);\n         }\n@@ -52,8 +57,12 @@ pub(crate) fn codegen_set_discriminant<'tcx>(\n             if variant_index != dataful_variant {\n                 let niche = place.place_field(fx, mir::Field::new(tag_field));\n                 let niche_value = variant_index.as_u32() - niche_variants.start().as_u32();\n-                let niche_value = u128::from(niche_value).wrapping_add(niche_start);\n-                let niche_llval = CValue::const_val(fx, niche.layout(), niche_value.into());\n+                let niche_value = ty::ScalarInt::try_from_uint(\n+                    u128::from(niche_value).wrapping_add(niche_start),\n+                    niche.layout().size,\n+                )\n+                .unwrap();\n+                let niche_llval = CValue::const_val(fx, niche.layout(), niche_value);\n                 niche.write_cvalue(fx, niche_llval);\n             }\n         }\n@@ -81,7 +90,16 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n                 .ty\n                 .discriminant_for_variant(fx.tcx, *index)\n                 .map_or(u128::from(index.as_u32()), |discr| discr.val);\n-            return CValue::const_val(fx, dest_layout, discr_val.into());\n+            let discr_val = if dest_layout.abi.is_signed() {\n+                ty::ScalarInt::try_from_int(\n+                    dest_layout.size.sign_extend(discr_val) as i128,\n+                    dest_layout.size,\n+                )\n+                .unwrap()\n+            } else {\n+                ty::ScalarInt::try_from_uint(discr_val, dest_layout.size).unwrap()\n+            };\n+            return CValue::const_val(fx, dest_layout, discr_val);\n         }\n         Variants::Multiple {\n             tag,"}]}