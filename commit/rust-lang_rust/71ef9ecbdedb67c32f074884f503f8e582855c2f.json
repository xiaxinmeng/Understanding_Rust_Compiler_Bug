{"sha": "71ef9ecbdedb67c32f074884f503f8e582855c2f", "node_id": "C_kwDOAAsO6NoAKDcxZWY5ZWNiZGVkYjY3YzMyZjA3NDg4NGY1MDNmOGU1ODI4NTVjMmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-14T08:08:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-14T08:08:52Z"}, "message": "Auto merge of #110311 - matthiaskrgr:rollup-kn2k5bq, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #109225 (Clarify that RUST_MIN_STACK may be internally cached)\n - #109800 (Improve safe transmute error reporting)\n - #110158 (Remove obsolete test case)\n - #110180 (don't uniquify regions when canonicalizing)\n - #110207 (Assemble `Unpin` candidates specially for generators in new solver)\n - #110276 (Remove all but one of the spans in `BoundRegionKind::BrAnon`)\n - #110279 (rustdoc: Correctly handle built-in compiler proc-macros as proc-macro and not macro)\n - #110298 (Cover edge cases for {f32, f64}.hypot() docs)\n - #110299 (Switch to `EarlyBinder` for `impl_subject` query)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e61297d4b14543e091f452f9cad9b84a453b7cd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e61297d4b14543e091f452f9cad9b84a453b7cd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71ef9ecbdedb67c32f074884f503f8e582855c2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71ef9ecbdedb67c32f074884f503f8e582855c2f", "html_url": "https://github.com/rust-lang/rust/commit/71ef9ecbdedb67c32f074884f503f8e582855c2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71ef9ecbdedb67c32f074884f503f8e582855c2f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edcbb295c9827ce38cbef4093e2c3d184923f362", "url": "https://api.github.com/repos/rust-lang/rust/commits/edcbb295c9827ce38cbef4093e2c3d184923f362", "html_url": "https://github.com/rust-lang/rust/commit/edcbb295c9827ce38cbef4093e2c3d184923f362"}, {"sha": "610bc6867588ae74d28932fc77c003ba3377634a", "url": "https://api.github.com/repos/rust-lang/rust/commits/610bc6867588ae74d28932fc77c003ba3377634a", "html_url": "https://github.com/rust-lang/rust/commit/610bc6867588ae74d28932fc77c003ba3377634a"}], "stats": {"total": 1848, "additions": 758, "deletions": 1090}, "files": [{"sha": "f3971080443332490a928ac749f293e8847f07a1", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -239,8 +239,7 @@ pub fn resolve_interior<'a, 'tcx>(\n             // typeck had previously found constraints that would cause them to be related.\n \n             let mut counter = 0;\n-            let mut mk_bound_region = |span| {\n-                let kind = ty::BrAnon(span);\n+            let mut mk_bound_region = |kind| {\n                 let var = ty::BoundVar::from_u32(counter);\n                 counter += 1;\n                 ty::BoundRegion { var, kind }\n@@ -252,24 +251,23 @@ pub fn resolve_interior<'a, 'tcx>(\n                         let origin = fcx.region_var_origin(vid);\n                         match origin {\n                             RegionVariableOrigin::EarlyBoundRegion(span, _) => {\n-                                mk_bound_region(Some(span))\n+                                mk_bound_region(ty::BrAnon(Some(span)))\n                             }\n-                            _ => mk_bound_region(None),\n+                            _ => mk_bound_region(ty::BrAnon(None)),\n                         }\n                     }\n-                    // FIXME: these should use `BrNamed`\n                     ty::ReEarlyBound(region) => {\n-                        mk_bound_region(Some(fcx.tcx.def_span(region.def_id)))\n+                        mk_bound_region(ty::BrNamed(region.def_id, region.name))\n                     }\n                     ty::ReLateBound(_, ty::BoundRegion { kind, .. })\n                     | ty::ReFree(ty::FreeRegion { bound_region: kind, .. }) => match kind {\n-                        ty::BoundRegionKind::BrAnon(span) => mk_bound_region(span),\n-                        ty::BoundRegionKind::BrNamed(def_id, _) => {\n-                            mk_bound_region(Some(fcx.tcx.def_span(def_id)))\n+                        ty::BoundRegionKind::BrAnon(span) => mk_bound_region(ty::BrAnon(span)),\n+                        ty::BoundRegionKind::BrNamed(def_id, sym) => {\n+                            mk_bound_region(ty::BrNamed(def_id, sym))\n                         }\n-                        ty::BoundRegionKind::BrEnv => mk_bound_region(None),\n+                        ty::BoundRegionKind::BrEnv => mk_bound_region(ty::BrAnon(None)),\n                     },\n-                    _ => mk_bound_region(None),\n+                    _ => mk_bound_region(ty::BrAnon(None)),\n                 };\n                 let r = fcx.tcx.mk_re_late_bound(current_depth, br);\n                 r\n@@ -293,10 +291,7 @@ pub fn resolve_interior<'a, 'tcx>(\n             type_causes,\n             FnMutDelegate {\n                 regions: &mut |br| {\n-                    let kind = match br.kind {\n-                        ty::BrAnon(span) => ty::BrAnon(span),\n-                        _ => br.kind,\n-                    };\n+                    let kind = br.kind;\n                     let var = ty::BoundVar::from_usize(bound_vars.len());\n                     bound_vars.push(ty::BoundVariableKind::Region(kind));\n                     counter += 1;"}, {"sha": "7770a5e47641886a23e8ade279984e8b2cd6f03e", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -7,7 +7,7 @@ pub mod nested_filter;\n pub mod place;\n \n use crate::ty::query::Providers;\n-use crate::ty::{ImplSubject, TyCtxt};\n+use crate::ty::{EarlyBinder, ImplSubject, TyCtxt};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -104,11 +104,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.parent_module_from_def_id(id.owner.def_id)\n     }\n \n-    pub fn impl_subject(self, def_id: DefId) -> ImplSubject<'tcx> {\n-        self.impl_trait_ref(def_id)\n-            .map(|t| t.subst_identity())\n-            .map(ImplSubject::Trait)\n-            .unwrap_or_else(|| ImplSubject::Inherent(self.type_of(def_id).subst_identity()))\n+    pub fn impl_subject(self, def_id: DefId) -> EarlyBinder<ImplSubject<'tcx>> {\n+        match self.impl_trait_ref(def_id) {\n+            Some(t) => t.map_bound(ImplSubject::Trait),\n+            None => self.type_of(def_id).map_bound(ImplSubject::Inherent),\n+        }\n     }\n }\n "}, {"sha": "c8a78ec03d94777e8ce7611785a2c73a4c9a662c", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -708,10 +708,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         ty::EarlyBinder(self.explicit_item_bounds(def_id))\n     }\n \n-    pub fn bound_impl_subject(self, def_id: DefId) -> ty::EarlyBinder<ty::ImplSubject<'tcx>> {\n-        ty::EarlyBinder(self.impl_subject(def_id))\n-    }\n-\n     /// Returns names of captured upvars for closures and generators.\n     ///\n     /// Here are some examples:"}, {"sha": "10d817f75ac77e1ac6cc0fd616b53a807467fe42", "filename": "compiler/rustc_trait_selection/src/solve/assembly/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -348,6 +348,14 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n     ) {\n         let lang_items = self.tcx().lang_items();\n         let trait_def_id = goal.predicate.trait_def_id(self.tcx());\n+\n+        // N.B. When assembling built-in candidates for lang items that are also\n+        // `auto` traits, then the auto trait candidate that is assembled in\n+        // `consider_auto_trait_candidate` MUST be disqualified to remain sound.\n+        //\n+        // Instead of adding the logic here, it's a better idea to add it in\n+        // `EvalCtxt::disqualify_auto_trait_candidate_due_to_possible_impl` in\n+        // `solve::trait_goals` instead.\n         let result = if self.tcx().trait_is_auto(trait_def_id) {\n             G::consider_auto_trait_candidate(self, goal)\n         } else if self.tcx().trait_is_alias(trait_def_id) {"}, {"sha": "976849696e33a92b68b016e2759696c29822fc54", "filename": "compiler/rustc_trait_selection/src/solve/canonicalize.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -125,8 +125,9 @@ impl<'a, 'tcx> Canonicalizer<'a, 'tcx> {\n         // - var_infos: [E0, U1, E1, U1, E1, E6, U6], curr_compressed_uv: 1, next_orig_uv: 6\n         // - var_infos: [E0, U1, E1, U1, E1, E2, U2], curr_compressed_uv: 2, next_orig_uv: -\n         //\n-        // This algorithm runs in `O(n\u00b2)` where `n` is the number of different universe\n-        // indices in the input. This should be fine as `n` is expected to be small.\n+        // This algorithm runs in `O(nm)` where `n` is the number of different universe\n+        // indices in the input and `m` is the number of canonical variables.\n+        // This should be fine as both `n` and `m` are expected to be small.\n         let mut curr_compressed_uv = ty::UniverseIndex::ROOT;\n         let mut existential_in_new_uv = false;\n         let mut next_orig_uv = Some(ty::UniverseIndex::ROOT);\n@@ -245,18 +246,14 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n             ty::ReError(_) => return r,\n         };\n \n-        let existing_bound_var = match self.canonicalize_mode {\n-            CanonicalizeMode::Input => None,\n-            CanonicalizeMode::Response { .. } => {\n-                self.variables.iter().position(|&v| v == r.into()).map(ty::BoundVar::from)\n-            }\n-        };\n-        let var = existing_bound_var.unwrap_or_else(|| {\n-            let var = ty::BoundVar::from(self.variables.len());\n-            self.variables.push(r.into());\n-            self.primitive_var_infos.push(CanonicalVarInfo { kind });\n-            var\n-        });\n+        let var = ty::BoundVar::from(\n+            self.variables.iter().position(|&v| v == r.into()).unwrap_or_else(|| {\n+                let var = self.variables.len();\n+                self.variables.push(r.into());\n+                self.primitive_var_infos.push(CanonicalVarInfo { kind });\n+                var\n+            }),\n+        );\n         let br = ty::BoundRegion { var, kind: BrAnon(None) };\n         self.interner().mk_re_late_bound(self.binder_index, br)\n     }"}, {"sha": "abd11a15ac23a4437fde18bc8822fa3ff357ac14", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 94, "deletions": 61, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -3,7 +3,7 @@\n use super::assembly::{self, structural_traits};\n use super::{EvalCtxt, SolverMode};\n use rustc_hir::def_id::DefId;\n-use rustc_hir::LangItem;\n+use rustc_hir::{LangItem, Movability};\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::util::supertraits;\n use rustc_middle::traits::solve::{CanonicalResponse, Certainty, Goal, QueryResult};\n@@ -147,66 +147,8 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n-        let self_ty = goal.predicate.self_ty();\n-        match *self_ty.kind() {\n-            // Stall int and float vars until they are resolved to a concrete\n-            // numerical type. That's because the check for impls below treats\n-            // int vars as matching any impl. Even if we filtered such impls,\n-            // we probably don't want to treat an `impl !AutoTrait for i32` as\n-            // disqualifying the built-in auto impl for `i64: AutoTrait` either.\n-            ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {\n-                return ecx.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS);\n-            }\n-\n-            // These types cannot be structurally decomposed into constitutent\n-            // types, and therefore have no builtin impl.\n-            ty::Dynamic(..)\n-            | ty::Param(..)\n-            | ty::Foreign(..)\n-            | ty::Alias(ty::Projection, ..)\n-            | ty::Placeholder(..) => return Err(NoSolution),\n-\n-            ty::Infer(_) | ty::Bound(_, _) => bug!(\"unexpected type `{self_ty}`\"),\n-\n-            // For rigid types, we only register a builtin auto implementation\n-            // if there is no implementation that could ever apply to the self\n-            // type.\n-            //\n-            // This differs from the current stable behavior and fixes #84857.\n-            // Due to breakage found via crater, we currently instead lint\n-            // patterns which can be used to exploit this unsoundness on stable,\n-            // see #93367 for more details.\n-            ty::Bool\n-            | ty::Char\n-            | ty::Int(_)\n-            | ty::Uint(_)\n-            | ty::Float(_)\n-            | ty::Str\n-            | ty::Array(_, _)\n-            | ty::Slice(_)\n-            | ty::RawPtr(_)\n-            | ty::Ref(_, _, _)\n-            | ty::FnDef(_, _)\n-            | ty::FnPtr(_)\n-            | ty::Closure(_, _)\n-            | ty::Generator(_, _, _)\n-            | ty::GeneratorWitness(_)\n-            | ty::GeneratorWitnessMIR(_, _)\n-            | ty::Never\n-            | ty::Tuple(_)\n-            | ty::Error(_)\n-            | ty::Adt(_, _)\n-            | ty::Alias(ty::Opaque, _) => {\n-                if let Some(def_id) = ecx.tcx().find_map_relevant_impl(\n-                    goal.predicate.def_id(),\n-                    goal.predicate.self_ty(),\n-                    TreatProjections::NextSolverLookup,\n-                    Some,\n-                ) {\n-                    debug!(?def_id, ?goal, \"disqualified auto-trait implementation\");\n-                    return Err(NoSolution);\n-                }\n-            }\n+        if let Some(result) = ecx.disqualify_auto_trait_candidate_due_to_possible_impl(goal) {\n+            return result;\n         }\n \n         ecx.probe_and_evaluate_goal_for_constituent_tys(\n@@ -630,6 +572,97 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {\n+    // Return `Some` if there is an impl (built-in or user provided) that may\n+    // hold for the self type of the goal, which for coherence and soundness\n+    // purposes must disqualify the built-in auto impl assembled by considering\n+    // the type's constituent types.\n+    fn disqualify_auto_trait_candidate_due_to_possible_impl(\n+        &mut self,\n+        goal: Goal<'tcx, TraitPredicate<'tcx>>,\n+    ) -> Option<QueryResult<'tcx>> {\n+        let self_ty = goal.predicate.self_ty();\n+        match *self_ty.kind() {\n+            // Stall int and float vars until they are resolved to a concrete\n+            // numerical type. That's because the check for impls below treats\n+            // int vars as matching any impl. Even if we filtered such impls,\n+            // we probably don't want to treat an `impl !AutoTrait for i32` as\n+            // disqualifying the built-in auto impl for `i64: AutoTrait` either.\n+            ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {\n+                Some(self.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS))\n+            }\n+\n+            // These types cannot be structurally decomposed into constitutent\n+            // types, and therefore have no built-in auto impl.\n+            ty::Dynamic(..)\n+            | ty::Param(..)\n+            | ty::Foreign(..)\n+            | ty::Alias(ty::Projection, ..)\n+            | ty::Placeholder(..) => Some(Err(NoSolution)),\n+\n+            ty::Infer(_) | ty::Bound(_, _) => bug!(\"unexpected type `{self_ty}`\"),\n+\n+            // Generators have one special built-in candidate, `Unpin`, which\n+            // takes precedence over the structural auto trait candidate being\n+            // assembled.\n+            ty::Generator(_, _, movability)\n+                if Some(goal.predicate.def_id()) == self.tcx().lang_items().unpin_trait() =>\n+            {\n+                match movability {\n+                    Movability::Static => Some(Err(NoSolution)),\n+                    Movability::Movable => {\n+                        Some(self.evaluate_added_goals_and_make_canonical_response(Certainty::Yes))\n+                    }\n+                }\n+            }\n+\n+            // For rigid types, any possible implementation that could apply to\n+            // the type (even if after unification and processing nested goals\n+            // it does not hold) will disqualify the built-in auto impl.\n+            //\n+            // This differs from the current stable behavior and fixes #84857.\n+            // Due to breakage found via crater, we currently instead lint\n+            // patterns which can be used to exploit this unsoundness on stable,\n+            // see #93367 for more details.\n+            ty::Bool\n+            | ty::Char\n+            | ty::Int(_)\n+            | ty::Uint(_)\n+            | ty::Float(_)\n+            | ty::Str\n+            | ty::Array(_, _)\n+            | ty::Slice(_)\n+            | ty::RawPtr(_)\n+            | ty::Ref(_, _, _)\n+            | ty::FnDef(_, _)\n+            | ty::FnPtr(_)\n+            | ty::Closure(_, _)\n+            | ty::Generator(_, _, _)\n+            | ty::GeneratorWitness(_)\n+            | ty::GeneratorWitnessMIR(_, _)\n+            | ty::Never\n+            | ty::Tuple(_)\n+            | ty::Adt(_, _)\n+            // FIXME: Handling opaques here is kinda sus. Especially because we\n+            // simplify them to PlaceholderSimplifiedType.\n+            | ty::Alias(ty::Opaque, _) => {\n+                if let Some(def_id) = self.tcx().find_map_relevant_impl(\n+                    goal.predicate.def_id(),\n+                    goal.predicate.self_ty(),\n+                    TreatProjections::NextSolverLookup,\n+                    Some,\n+                ) {\n+                    debug!(?def_id, ?goal, \"disqualified auto-trait implementation\");\n+                    // No need to actually consider the candidate here,\n+                    // since we do that in `consider_impl_candidate`.\n+                    return Some(Err(NoSolution));\n+                } else {\n+                    None\n+                }\n+            }\n+            ty::Error(_) => None,\n+        }\n+    }\n+\n     /// Convenience function for traits that are structural, i.e. that only\n     /// have nested subgoals that only change the self type. Unlike other\n     /// evaluate-like helpers, this does a probe, so it doesn't need to be"}, {"sha": "20c2605f219a7b262b9319e0a806adf44a7d36b6", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -306,7 +306,7 @@ fn negative_impl(tcx: TyCtxt<'_>, impl1_def_id: DefId, impl2_def_id: DefId) -> b\n         &infcx,\n         ObligationCause::dummy(),\n         impl_env,\n-        tcx.impl_subject(impl1_def_id),\n+        tcx.impl_subject(impl1_def_id).subst_identity(),\n     ) {\n         Ok(s) => s,\n         Err(err) => {"}, {"sha": "1b741b7302b67f1a1b98c03e039f11362722832a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 104, "deletions": 24, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -673,6 +673,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             return;\n                         }\n                         let trait_ref = trait_predicate.to_poly_trait_ref();\n+\n                         let (post_message, pre_message, type_def) = self\n                             .get_parent_trait_ref(obligation.cause.code())\n                             .map(|(t, s)| {\n@@ -712,33 +713,45 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             (message, note, append_const_msg)\n                         };\n \n-                        let mut err = struct_span_err!(\n-                            self.tcx.sess,\n-                            span,\n-                            E0277,\n-                            \"{}\",\n-                            message\n-                                .and_then(|cannot_do_this| {\n-                                    match (predicate_is_const, append_const_msg) {\n-                                        // do nothing if predicate is not const\n-                                        (false, _) => Some(cannot_do_this),\n-                                        // suggested using default post message\n-                                        (true, Some(None)) => {\n-                                            Some(format!(\"{cannot_do_this} in const contexts\"))\n-                                        }\n-                                        // overridden post message\n-                                        (true, Some(Some(post_message))) => {\n-                                            Some(format!(\"{cannot_do_this}{post_message}\"))\n-                                        }\n-                                        // fallback to generic message\n-                                        (true, None) => None,\n+                        let err_msg = message\n+                            .and_then(|cannot_do_this| {\n+                                match (predicate_is_const, append_const_msg) {\n+                                    // do nothing if predicate is not const\n+                                    (false, _) => Some(cannot_do_this),\n+                                    // suggested using default post message\n+                                    (true, Some(None)) => {\n+                                        Some(format!(\"{cannot_do_this} in const contexts\"))\n+                                    }\n+                                    // overridden post message\n+                                    (true, Some(Some(post_message))) => {\n+                                        Some(format!(\"{cannot_do_this}{post_message}\"))\n                                     }\n-                                })\n-                                .unwrap_or_else(|| format!(\n+                                    // fallback to generic message\n+                                    (true, None) => None,\n+                                }\n+                            })\n+                            .unwrap_or_else(|| {\n+                                format!(\n                                     \"the trait bound `{}` is not satisfied{}\",\n                                     trait_predicate, post_message,\n-                                ))\n-                        );\n+                                )\n+                            });\n+\n+                        let (err_msg, safe_transmute_explanation) = if Some(trait_ref.def_id())\n+                            == self.tcx.lang_items().transmute_trait()\n+                        {\n+                            // Recompute the safe transmute reason and use that for the error reporting\n+                            self.get_safe_transmute_error_and_reason(\n+                                trait_predicate,\n+                                obligation.clone(),\n+                                trait_ref,\n+                                span,\n+                            )\n+                        } else {\n+                            (err_msg, None)\n+                        };\n+\n+                        let mut err = struct_span_err!(self.tcx.sess, span, E0277, \"{}\", err_msg);\n \n                         if is_try_conversion && let Some(ret_span) = self.return_type_span(&obligation) {\n                             err.span_label(\n@@ -828,6 +841,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 // at the type param with a label to suggest constraining it.\n                                 err.help(&explanation);\n                             }\n+                        } else if let Some(custom_explanation) = safe_transmute_explanation {\n+                            err.span_label(span, custom_explanation);\n                         } else {\n                             err.span_label(span, explanation);\n                         }\n@@ -1611,6 +1626,14 @@ trait InferCtxtPrivExt<'tcx> {\n         obligated_types: &mut Vec<Ty<'tcx>>,\n         cause_code: &ObligationCauseCode<'tcx>,\n     ) -> bool;\n+\n+    fn get_safe_transmute_error_and_reason(\n+        &self,\n+        trait_predicate: ty::Binder<'tcx, ty::TraitPredicate<'tcx>>,\n+        obligation: Obligation<'tcx, ty::Predicate<'tcx>>,\n+        trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n+        span: Span,\n+    ) -> (String, Option<String>);\n }\n \n impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n@@ -2895,6 +2918,63 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         }\n         false\n     }\n+\n+    fn get_safe_transmute_error_and_reason(\n+        &self,\n+        trait_predicate: ty::Binder<'tcx, ty::TraitPredicate<'tcx>>,\n+        obligation: Obligation<'tcx, ty::Predicate<'tcx>>,\n+        trait_ref: ty::Binder<'tcx, ty::TraitRef<'tcx>>,\n+        span: Span,\n+    ) -> (String, Option<String>) {\n+        let src_and_dst = trait_predicate.map_bound(|p| rustc_transmute::Types {\n+            dst: p.trait_ref.substs.type_at(0),\n+            src: p.trait_ref.substs.type_at(1),\n+        });\n+        let scope = trait_ref.skip_binder().substs.type_at(2);\n+        let Some(assume) =\n+            rustc_transmute::Assume::from_const(self.infcx.tcx, obligation.param_env, trait_ref.skip_binder().substs.const_at(3)) else {\n+                span_bug!(span, \"Unable to construct rustc_transmute::Assume where it was previously possible\");\n+            };\n+        match rustc_transmute::TransmuteTypeEnv::new(self.infcx).is_transmutable(\n+            obligation.cause,\n+            src_and_dst,\n+            scope,\n+            assume,\n+        ) {\n+            rustc_transmute::Answer::No(reason) => {\n+                let dst = trait_ref.skip_binder().substs.type_at(0);\n+                let src = trait_ref.skip_binder().substs.type_at(1);\n+                let custom_err_msg = format!(\"`{src}` cannot be safely transmuted into `{dst}` in the defining scope of `{scope}`\").to_string();\n+                let reason_msg = match reason {\n+                    rustc_transmute::Reason::SrcIsUnspecified => {\n+                        format!(\"`{src}` does not have a well-specified layout\").to_string()\n+                    }\n+                    rustc_transmute::Reason::DstIsUnspecified => {\n+                        format!(\"`{dst}` does not have a well-specified layout\").to_string()\n+                    }\n+                    rustc_transmute::Reason::DstIsBitIncompatible => {\n+                        format!(\"At least one value of `{src}` isn't a bit-valid value of `{dst}`\")\n+                            .to_string()\n+                    }\n+                    rustc_transmute::Reason::DstIsPrivate => format!(\n+                        \"`{dst}` is or contains a type or field that is not visible in that scope\"\n+                    )\n+                    .to_string(),\n+                    // FIXME(bryangarza): Include the number of bytes of src and dst\n+                    rustc_transmute::Reason::DstIsTooBig => {\n+                        format!(\"The size of `{src}` is smaller than the size of `{dst}`\")\n+                    }\n+                };\n+                (custom_err_msg, Some(reason_msg))\n+            }\n+            // Should never get a Yes at this point! We already ran it before, and did not get a Yes.\n+            rustc_transmute::Answer::Yes => span_bug!(\n+                span,\n+                \"Inconsistent rustc_transmute::is_transmutable(...) result, got Yes\",\n+            ),\n+            _ => span_bug!(span, \"Unsupported rustc_transmute::Reason variant\"),\n+        }\n+    }\n }\n \n /// Crude way of getting back an `Expr` from a `Span`."}, {"sha": "20357d4d2501a9795a66c10fa5d846c6d29d27e8", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -198,7 +198,7 @@ pub fn impl_subject_and_oblig<'a, 'tcx>(\n     impl_def_id: DefId,\n     impl_substs: SubstsRef<'tcx>,\n ) -> (ImplSubject<'tcx>, impl Iterator<Item = PredicateObligation<'tcx>>) {\n-    let subject = selcx.tcx().bound_impl_subject(impl_def_id);\n+    let subject = selcx.tcx().impl_subject(impl_def_id);\n     let subject = subject.subst(selcx.tcx(), impl_substs);\n \n     let InferOk { value: subject, obligations: normalization_obligations1 } ="}, {"sha": "2a89494c80b0415ab85762a109a7927207f222d1", "filename": "compiler/rustc_transmute/src/layout/tree.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -167,31 +167,31 @@ where\n     }\n }\n \n-#[derive(Debug, Copy, Clone)]\n-pub(crate) enum Err {\n-    /// The layout of the type is unspecified.\n-    Unspecified,\n-    /// This error will be surfaced elsewhere by rustc, so don't surface it.\n-    Unknown,\n-}\n-\n #[cfg(feature = \"rustc\")]\n pub(crate) mod rustc {\n-    use super::{Err, Tree};\n+    use super::Tree;\n     use crate::layout::rustc::{Def, Ref};\n \n-    use rustc_middle::ty;\n     use rustc_middle::ty::layout::LayoutError;\n     use rustc_middle::ty::util::Discr;\n     use rustc_middle::ty::AdtDef;\n     use rustc_middle::ty::ParamEnv;\n     use rustc_middle::ty::SubstsRef;\n-    use rustc_middle::ty::Ty;\n-    use rustc_middle::ty::TyCtxt;\n     use rustc_middle::ty::VariantDef;\n+    use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n+    use rustc_span::ErrorGuaranteed;\n     use rustc_target::abi::Align;\n     use std::alloc;\n \n+    #[derive(Debug, Copy, Clone)]\n+    pub(crate) enum Err {\n+        /// The layout of the type is unspecified.\n+        Unspecified,\n+        /// This error will be surfaced elsewhere by rustc, so don't surface it.\n+        Unknown,\n+        TypeError(ErrorGuaranteed),\n+    }\n+\n     impl<'tcx> From<LayoutError<'tcx>> for Err {\n         fn from(err: LayoutError<'tcx>) -> Self {\n             match err {\n@@ -261,6 +261,10 @@ pub(crate) mod rustc {\n             use rustc_middle::ty::UintTy::*;\n             use rustc_target::abi::HasDataLayout;\n \n+            if let Err(e) = ty.error_reported() {\n+                return Err(Err::TypeError(e));\n+            }\n+\n             let target = tcx.data_layout();\n \n             match ty.kind() {"}, {"sha": "2e2fb90e71c1a18838a2c06e87fbc32f03d071a0", "filename": "compiler/rustc_transmute/src/maybe_transmutable/mod.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -56,7 +56,7 @@ where\n #[cfg(feature = \"rustc\")]\n mod rustc {\n     use super::*;\n-    use crate::layout::tree::Err;\n+    use crate::layout::tree::rustc::Err;\n \n     use rustc_middle::ty::Ty;\n     use rustc_middle::ty::TyCtxt;\n@@ -71,19 +71,20 @@ mod rustc {\n                 // representations. If these conversions fail, conclude that the transmutation is\n                 // unacceptable; the layouts of both the source and destination types must be\n                 // well-defined.\n-                let src = Tree::from_ty(src, context).map_err(|err| match err {\n-                    // Answer `Yes` here, because \"Unknown Type\" will already be reported by\n-                    // rustc. No need to spam the user with more errors.\n-                    Err::Unknown => Answer::Yes,\n-                    Err::Unspecified => Answer::No(Reason::SrcIsUnspecified),\n-                })?;\n+                let src = Tree::from_ty(src, context);\n+                let dst = Tree::from_ty(dst, context);\n \n-                let dst = Tree::from_ty(dst, context).map_err(|err| match err {\n-                    Err::Unknown => Answer::Yes,\n-                    Err::Unspecified => Answer::No(Reason::DstIsUnspecified),\n-                })?;\n-\n-                Ok((src, dst))\n+                match (src, dst) {\n+                    // Answer `Yes` here, because 'unknown layout' and type errors will already\n+                    // be reported by rustc. No need to spam the user with more errors.\n+                    (Err(Err::TypeError(_)), _) => Err(Answer::Yes),\n+                    (_, Err(Err::TypeError(_))) => Err(Answer::Yes),\n+                    (Err(Err::Unknown), _) => Err(Answer::Yes),\n+                    (_, Err(Err::Unknown)) => Err(Answer::Yes),\n+                    (Err(Err::Unspecified), _) => Err(Answer::No(Reason::SrcIsUnspecified)),\n+                    (_, Err(Err::Unspecified)) => Err(Answer::No(Reason::DstIsUnspecified)),\n+                    (Ok(src), Ok(dst)) => Ok((src, dst)),\n+                }\n             });\n \n             match query_or_answer {"}, {"sha": "a8675f4ae37d8a2703dbf5ccd414af24c415ff4d", "filename": "compiler/rustc_transmute/src/maybe_transmutable/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Ftests.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,6 +1,6 @@\n use super::query_context::test::{Def, UltraMinimal};\n use crate::maybe_transmutable::MaybeTransmutableQuery;\n-use crate::{layout, Answer, Reason, Set};\n+use crate::{layout, Answer, Reason};\n use itertools::Itertools;\n \n mod bool {\n@@ -48,9 +48,9 @@ mod bool {\n \n         let into_set = |alts: Vec<_>| {\n             #[cfg(feature = \"rustc\")]\n-            let mut set = Set::default();\n+            let mut set = crate::Set::default();\n             #[cfg(not(feature = \"rustc\"))]\n-            let mut set = Set::new();\n+            let mut set = std::collections::HashSet::new();\n             set.extend(alts);\n             set\n         };"}, {"sha": "b53a330fa560b4e77f3fe32212cbb3768a87c5a6", "filename": "library/core/src/mem/transmutability.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -5,10 +5,6 @@\n /// notwithstanding whatever safety checks you have asked the compiler to [`Assume`] are satisfied.\n #[unstable(feature = \"transmutability\", issue = \"99571\")]\n #[lang = \"transmute_trait\"]\n-#[rustc_on_unimplemented(\n-    message = \"`{Src}` cannot be safely transmuted into `{Self}` in the defining scope of `{Context}`.\",\n-    label = \"`{Src}` cannot be safely transmuted into `{Self}` in the defining scope of `{Context}`.\"\n-)]\n pub unsafe trait BikeshedIntrinsicFrom<Src, Context, const ASSUME: Assume = { Assume::NOTHING }>\n where\n     Src: ?Sized,"}, {"sha": "874e0ec7093c7542fa0f141c67b2ebe82b03bdf2", "filename": "library/core/tests/num/dec2flt/mod.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/library%2Fcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/library%2Fcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -127,14 +127,3 @@ fn massive_exponent() {\n     assert_eq!(format!(\"1e-{max}000\").parse(), Ok(0.0));\n     assert_eq!(format!(\"1e{max}000\").parse(), Ok(f64::INFINITY));\n }\n-\n-#[test]\n-fn borderline_overflow() {\n-    let mut s = \"0.\".to_string();\n-    for _ in 0..375 {\n-        s.push('3');\n-    }\n-    // At the time of this writing, this returns Err(..), but this is a bug that should be fixed.\n-    // It makes no sense to enshrine that in a test, the important part is that it doesn't panic.\n-    let _ = s.parse::<f64>();\n-}"}, {"sha": "408244b2ce9eb11262d507d450a0b1c1bb9a5159", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -581,8 +581,10 @@ impl f32 {\n         unsafe { cmath::cbrtf(self) }\n     }\n \n-    /// Calculates the length of the hypotenuse of a right-angle triangle given\n-    /// legs of length `x` and `y`.\n+    /// Compute the distance between the origin and a point (`x`, `y`) on the\n+    /// Euclidean plane. Equivalently, compute the length of the hypotenuse of a\n+    /// right-angle triangle with other sides having length `x.abs()` and\n+    /// `y.abs()`.\n     ///\n     /// # Examples\n     ///"}, {"sha": "6782b861f110b45b62e537334b66df61f7fdd056", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -583,8 +583,10 @@ impl f64 {\n         unsafe { cmath::cbrt(self) }\n     }\n \n-    /// Calculates the length of the hypotenuse of a right-angle triangle given\n-    /// legs of length `x` and `y`.\n+    /// Compute the distance between the origin and a point (`x`, `y`) on the\n+    /// Euclidean plane. Equivalently, compute the length of the hypotenuse of a\n+    /// right-angle triangle with other sides having length `x.abs()` and\n+    /// `y.abs()`.\n     ///\n     /// # Examples\n     ///"}, {"sha": "13b845b25c92d1c45afdd84e54957696e7e9c0e2", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -131,7 +131,8 @@\n //!\n //! * Build the thread with [`Builder`] and pass the desired stack size to [`Builder::stack_size`].\n //! * Set the `RUST_MIN_STACK` environment variable to an integer representing the desired stack\n-//!   size (in bytes). Note that setting [`Builder::stack_size`] will override this.\n+//!   size (in bytes). Note that setting [`Builder::stack_size`] will override this. Be aware that\n+//!   changes to `RUST_MIN_STACK` may be ignored after program start.\n //!\n //! Note that the stack size of the main thread is *not* determined by Rust.\n //!"}, {"sha": "cc5d13808b2f5437905a90012fbeaaf95cf337c3", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -111,7 +111,7 @@ pub(crate) fn try_inline(\n             clean::ConstantItem(build_const(cx, did))\n         }\n         Res::Def(DefKind::Macro(kind), did) => {\n-            let mac = build_macro(cx, did, name, import_def_id);\n+            let mac = build_macro(cx, did, name, import_def_id, kind);\n \n             let type_kind = match kind {\n                 MacroKind::Bang => ItemType::Macro,\n@@ -651,18 +651,24 @@ fn build_macro(\n     def_id: DefId,\n     name: Symbol,\n     import_def_id: Option<DefId>,\n+    macro_kind: MacroKind,\n ) -> clean::ItemKind {\n     match CStore::from_tcx(cx.tcx).load_macro_untracked(def_id, cx.sess()) {\n-        LoadedMacro::MacroDef(item_def, _) => {\n-            if let ast::ItemKind::MacroDef(ref def) = item_def.kind {\n-                let vis = cx.tcx.visibility(import_def_id.unwrap_or(def_id));\n-                clean::MacroItem(clean::Macro {\n-                    source: utils::display_macro_source(cx, name, def, def_id, vis),\n-                })\n-            } else {\n-                unreachable!()\n+        LoadedMacro::MacroDef(item_def, _) => match macro_kind {\n+            MacroKind::Bang => {\n+                if let ast::ItemKind::MacroDef(ref def) = item_def.kind {\n+                    let vis = cx.tcx.visibility(import_def_id.unwrap_or(def_id));\n+                    clean::MacroItem(clean::Macro {\n+                        source: utils::display_macro_source(cx, name, def, def_id, vis),\n+                    })\n+                } else {\n+                    unreachable!()\n+                }\n             }\n-        }\n+            MacroKind::Derive | MacroKind::Attr => {\n+                clean::ProcMacroItem(clean::ProcMacro { kind: macro_kind, helpers: Vec::new() })\n+            }\n+        },\n         LoadedMacro::ProcMacro(ext) => clean::ProcMacroItem(clean::ProcMacro {\n             kind: ext.macro_kind(),\n             helpers: ext.helper_attrs,"}, {"sha": "6ceba1b1f8e2224f10086c696d191e08d806a0f0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -909,6 +909,38 @@ fn clean_ty_generics<'tcx>(\n     }\n }\n \n+fn clean_proc_macro<'tcx>(\n+    item: &hir::Item<'tcx>,\n+    name: &mut Symbol,\n+    kind: MacroKind,\n+    cx: &mut DocContext<'tcx>,\n+) -> ItemKind {\n+    let attrs = cx.tcx.hir().attrs(item.hir_id());\n+    if kind == MacroKind::Derive &&\n+        let Some(derive_name) = attrs\n+            .lists(sym::proc_macro_derive)\n+            .find_map(|mi| mi.ident())\n+    {\n+        *name = derive_name.name;\n+    }\n+\n+    let mut helpers = Vec::new();\n+    for mi in attrs.lists(sym::proc_macro_derive) {\n+        if !mi.has_name(sym::attributes) {\n+            continue;\n+        }\n+\n+        if let Some(list) = mi.meta_item_list() {\n+            for inner_mi in list {\n+                if let Some(ident) = inner_mi.ident() {\n+                    helpers.push(ident.name);\n+                }\n+            }\n+        }\n+    }\n+    ProcMacroItem(ProcMacro { kind, helpers })\n+}\n+\n fn clean_fn_or_proc_macro<'tcx>(\n     item: &hir::Item<'tcx>,\n     sig: &hir::FnSig<'tcx>,\n@@ -930,31 +962,7 @@ fn clean_fn_or_proc_macro<'tcx>(\n         }\n     });\n     match macro_kind {\n-        Some(kind) => {\n-            if kind == MacroKind::Derive {\n-                *name = attrs\n-                    .lists(sym::proc_macro_derive)\n-                    .find_map(|mi| mi.ident())\n-                    .expect(\"proc-macro derives require a name\")\n-                    .name;\n-            }\n-\n-            let mut helpers = Vec::new();\n-            for mi in attrs.lists(sym::proc_macro_derive) {\n-                if !mi.has_name(sym::attributes) {\n-                    continue;\n-                }\n-\n-                if let Some(list) = mi.meta_item_list() {\n-                    for inner_mi in list {\n-                        if let Some(ident) = inner_mi.ident() {\n-                            helpers.push(ident.name);\n-                        }\n-                    }\n-                }\n-            }\n-            ProcMacroItem(ProcMacro { kind, helpers })\n-        }\n+        Some(kind) => clean_proc_macro(item, name, kind, cx),\n         None => {\n             let mut func = clean_function(cx, sig, generics, FunctionArgs::Body(body_id));\n             clean_fn_decl_legacy_const_generics(&mut func, attrs);\n@@ -2247,16 +2255,17 @@ fn clean_maybe_renamed_item<'tcx>(\n                 fields: variant_data.fields().iter().map(|x| clean_field(x, cx)).collect(),\n             }),\n             ItemKind::Impl(impl_) => return clean_impl(impl_, item.owner_id.def_id, cx),\n-            // proc macros can have a name set by attributes\n-            ItemKind::Fn(ref sig, generics, body_id) => {\n-                clean_fn_or_proc_macro(item, sig, generics, body_id, &mut name, cx)\n-            }\n-            ItemKind::Macro(ref macro_def, _) => {\n+            ItemKind::Macro(ref macro_def, MacroKind::Bang) => {\n                 let ty_vis = cx.tcx.visibility(def_id);\n                 MacroItem(Macro {\n                     source: display_macro_source(cx, name, macro_def, def_id, ty_vis),\n                 })\n             }\n+            ItemKind::Macro(_, macro_kind) => clean_proc_macro(item, &mut name, macro_kind, cx),\n+            // proc macros can have a name set by attributes\n+            ItemKind::Fn(ref sig, generics, body_id) => {\n+                clean_fn_or_proc_macro(item, sig, generics, body_id, &mut name, cx)\n+            }\n             ItemKind::Trait(_, _, generics, bounds, item_ids) => {\n                 let items = item_ids\n                     .iter()"}, {"sha": "489ec924c1fcf15e10c6ed7648ee686680e7edee", "filename": "tests/rustdoc/compiler-derive-proc-macro.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Frustdoc%2Fcompiler-derive-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Frustdoc%2Fcompiler-derive-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fcompiler-derive-proc-macro.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -0,0 +1,15 @@\n+// This test ensures that compiler builtin proc-macros are considered as such.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/index.html'\n+// Each compiler builtin proc-macro has a trait equivalent so we should have\n+// a trait section as well.\n+// @count - '//*[@id=\"main-content\"]//*[@class=\"small-section-header\"]' 2\n+// @has - '//*[@id=\"main-content\"]//*[@class=\"small-section-header\"]' 'Traits'\n+// @has - '//*[@id=\"main-content\"]//*[@class=\"small-section-header\"]' 'Derive Macros'\n+\n+// Now checking the correct file is generated as well.\n+// @has 'foo/derive.Clone.html'\n+// @!has 'foo/macro.Clone.html'\n+pub use std::clone::Clone;"}, {"sha": "42f760cff6a7ca574bac16673ddf5b4d65131ef2", "filename": "tests/rustdoc/macro_pub_in_module.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Frustdoc%2Fmacro_pub_in_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Frustdoc%2Fmacro_pub_in_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fmacro_pub_in_module.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -7,22 +7,26 @@\n #![crate_name = \"krate\"]\n #![no_core]\n \n- // @has external_crate/some_module/macro.external_macro.html\n-  // @!has external_crate/macro.external_macro.html\n+// @has external_crate/some_module/macro.external_macro.html\n+// @!has external_crate/macro.external_macro.html\n extern crate external_crate;\n \n pub mod inner {\n     // @has krate/inner/macro.raw_const.html\n     // @!has krate/macro.raw_const.html\n     pub macro raw_const() {}\n \n-    // @has krate/inner/macro.test.html\n+    // @has krate/inner/attr.test.html\n     // @!has krate/macro.test.html\n+    // @!has krate/inner/macro.test.html\n+    // @!has krate/attr.test.html\n     #[rustc_builtin_macro]\n     pub macro test($item:item) {}\n \n-    // @has krate/inner/macro.Clone.html\n+    // @has krate/inner/derive.Clone.html\n+    // @!has krate/inner/macro.Clone.html\n     // @!has krate/macro.Clone.html\n+    // @!has krate/derive.Clone.html\n     #[rustc_builtin_macro]\n     pub macro Clone($item:item) {}\n "}, {"sha": "17e23f5bcd2faf50bf8cc2537f75ef04a3be675d", "filename": "tests/ui/generator/non-static-is-unpin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fnon-static-is-unpin.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,3 +1,5 @@\n+// revisions: current next\n+//[next] compile-flags: -Ztrait-solver=next\n // run-pass\n \n #![feature(generators, generator_trait)]"}, {"sha": "ecd8ca60c6f2c4ee8148df9ccf321eef9ba762fd", "filename": "tests/ui/generator/static-not-unpin.current.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.current.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,15 +1,15 @@\n-error[E0277]: `[static generator@$DIR/static-not-unpin.rs:11:25: 11:34]` cannot be unpinned\n-  --> $DIR/static-not-unpin.rs:14:18\n+error[E0277]: `[static generator@$DIR/static-not-unpin.rs:14:25: 14:34]` cannot be unpinned\n+  --> $DIR/static-not-unpin.rs:17:18\n    |\n LL |     assert_unpin(generator);\n-   |     ------------ ^^^^^^^^^ the trait `Unpin` is not implemented for `[static generator@$DIR/static-not-unpin.rs:11:25: 11:34]`\n+   |     ------------ ^^^^^^^^^ the trait `Unpin` is not implemented for `[static generator@$DIR/static-not-unpin.rs:14:25: 14:34]`\n    |     |\n    |     required by a bound introduced by this call\n    |\n    = note: consider using the `pin!` macro\n            consider using `Box::pin` if you need to access the pinned value outside of the current scope\n note: required by a bound in `assert_unpin`\n-  --> $DIR/static-not-unpin.rs:7:20\n+  --> $DIR/static-not-unpin.rs:10:20\n    |\n LL | fn assert_unpin<T: Unpin>(_: T) {\n    |                    ^^^^^ required by this bound in `assert_unpin`", "previous_filename": "tests/ui/generator/static-not-unpin.stderr"}, {"sha": "ecd8ca60c6f2c4ee8148df9ccf321eef9ba762fd", "filename": "tests/ui/generator/static-not-unpin.next.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.next.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: `[static generator@$DIR/static-not-unpin.rs:14:25: 14:34]` cannot be unpinned\n+  --> $DIR/static-not-unpin.rs:17:18\n+   |\n+LL |     assert_unpin(generator);\n+   |     ------------ ^^^^^^^^^ the trait `Unpin` is not implemented for `[static generator@$DIR/static-not-unpin.rs:14:25: 14:34]`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = note: consider using the `pin!` macro\n+           consider using `Box::pin` if you need to access the pinned value outside of the current scope\n+note: required by a bound in `assert_unpin`\n+  --> $DIR/static-not-unpin.rs:10:20\n+   |\n+LL | fn assert_unpin<T: Unpin>(_: T) {\n+   |                    ^^^^^ required by this bound in `assert_unpin`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "30d3f29187096bf2538f835e785f2ffb48dce36d", "filename": "tests/ui/generator/static-not-unpin.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fstatic-not-unpin.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,3 +1,6 @@\n+// revisions: current next\n+//[next] compile-flags: -Ztrait-solver=next\n+\n #![feature(generators)]\n \n // normalize-stderr-test \"std::pin::Unpin\" -> \"std::marker::Unpin\""}, {"sha": "86dbad84d99d8930a245fd10532bc66328f038a0", "filename": "tests/ui/generic-associated-types/bugs/issue-100013.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -28,12 +28,12 @@ LL | |         async {}.await; // a yield point\n LL | |     }\n    | |_____^\n    |\n-note: the lifetime defined here...\n+note: the lifetime `'b` defined here...\n   --> $DIR/issue-100013.rs:21:14\n    |\n LL | fn call2<'a, 'b, I: FutureIterator>() -> impl Send {\n    |              ^^\n-note: ...must outlive the lifetime defined here\n+note: ...must outlive the lifetime `'a` defined here\n   --> $DIR/issue-100013.rs:21:10\n    |\n LL | fn call2<'a, 'b, I: FutureIterator>() -> impl Send {\n@@ -62,12 +62,12 @@ LL | |         async {}.await; // a yield point\n LL | |     }\n    | |_____^\n    |\n-note: the lifetime defined here...\n+note: the lifetime `'b` defined here...\n   --> $DIR/issue-100013.rs:28:18\n    |\n LL | fn call3<'a: 'b, 'b, I: FutureIterator>() -> impl Send {\n    |                  ^^\n-note: ...must outlive the lifetime defined here\n+note: ...must outlive the lifetime `'a` defined here\n   --> $DIR/issue-100013.rs:28:10\n    |\n LL | fn call3<'a: 'b, 'b, I: FutureIterator>() -> impl Send {"}, {"sha": "6449337eea4e7ee1978dfa0b2faa654027b1054f", "filename": "tests/ui/regions/issue-2718.rs", "status": "removed", "additions": 0, "deletions": 327, "changes": 327, "blob_url": "https://github.com/rust-lang/rust/blob/edcbb295c9827ce38cbef4093e2c3d184923f362/tests%2Fui%2Fregions%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edcbb295c9827ce38cbef4093e2c3d184923f362/tests%2Fui%2Fregions%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fissue-2718.rs?ref=edcbb295c9827ce38cbef4093e2c3d184923f362", "patch": "@@ -1,327 +0,0 @@\n-// run-pass\n-#![allow(dead_code)]\n-#![allow(unused_unsafe)]\n-#![allow(unused_imports)]\n-#![allow(non_camel_case_types)]\n-\n-pub type Task = isize;\n-\n-// tjc: I don't know why\n-pub mod pipes {\n-    use self::state::{empty, full, blocked, terminated};\n-    use super::Task;\n-    use std::mem::{forget, transmute};\n-    use std::mem::{replace, swap};\n-    use std::mem;\n-    use std::thread;\n-    use std::marker::Send;\n-\n-    pub struct Stuff<T> {\n-        state: state,\n-        blocked_task: Option<Task>,\n-        payload: Option<T>\n-    }\n-\n-    #[derive(PartialEq, Debug)]\n-    #[repr(isize)]\n-    pub enum state {\n-        empty,\n-        full,\n-        blocked,\n-        terminated\n-    }\n-\n-    pub struct packet<T> {\n-        state: state,\n-        blocked_task: Option<Task>,\n-        payload: Option<T>\n-    }\n-\n-    unsafe impl<T:Send> Send for packet<T> {}\n-\n-    pub fn packet<T:Send>() -> *const packet<T> {\n-        unsafe {\n-            let p: *const packet<T> = mem::transmute(Box::new(Stuff{\n-                state: empty,\n-                blocked_task: None::<Task>,\n-                payload: None::<T>\n-            }));\n-            p\n-        }\n-    }\n-\n-    mod rusti {\n-      pub fn atomic_xchg(_dst: &mut isize, _src: isize) -> isize { panic!(); }\n-      pub fn atomic_xchg_acq(_dst: &mut isize, _src: isize) -> isize { panic!(); }\n-      pub fn atomic_xchg_rel(_dst: &mut isize, _src: isize) -> isize { panic!(); }\n-    }\n-\n-    // We should consider moving this to ::std::unsafe, although I\n-    // suspect graydon would want us to use void pointers instead.\n-    pub unsafe fn uniquify<T>(x: *const T) -> Box<T> {\n-        mem::transmute(x)\n-    }\n-\n-    pub fn swap_state_acq(dst: &mut state, src: state) -> state {\n-        unsafe {\n-            transmute(rusti::atomic_xchg_acq(transmute(dst), src as isize))\n-        }\n-    }\n-\n-    pub fn swap_state_rel(dst: &mut state, src: state) -> state {\n-        unsafe {\n-            transmute(rusti::atomic_xchg_rel(transmute(dst), src as isize))\n-        }\n-    }\n-\n-    pub fn send<T:Send>(mut p: send_packet<T>, payload: T) {\n-        let p = p.unwrap();\n-        let mut p = unsafe { uniquify(p) };\n-        assert!((*p).payload.is_none());\n-        (*p).payload = Some(payload);\n-        let old_state = swap_state_rel(&mut (*p).state, full);\n-        match old_state {\n-          empty => {\n-            // Yay, fastpath.\n-\n-            // The receiver will eventually clean this up.\n-            unsafe { forget(p); }\n-          }\n-          full => { panic!(\"duplicate send\") }\n-          blocked => {\n-\n-            // The receiver will eventually clean this up.\n-            unsafe { forget(p); }\n-          }\n-          terminated => {\n-            // The receiver will never receive this. Rely on drop_glue\n-            // to clean everything up.\n-          }\n-        }\n-    }\n-\n-    pub fn recv<T:Send>(mut p: recv_packet<T>) -> Option<T> {\n-        let p = p.unwrap();\n-        let mut p = unsafe { uniquify(p) };\n-        loop {\n-            let old_state = swap_state_acq(&mut (*p).state,\n-                                           blocked);\n-            match old_state {\n-              empty | blocked => { thread::yield_now(); }\n-              full => {\n-                let payload = replace(&mut p.payload, None);\n-                return Some(payload.unwrap())\n-              }\n-              terminated => {\n-                assert_eq!(old_state, terminated);\n-                return None;\n-              }\n-            }\n-        }\n-    }\n-\n-    pub fn sender_terminate<T:Send>(p: *const packet<T>) {\n-        let mut p = unsafe { uniquify(p) };\n-        match swap_state_rel(&mut (*p).state, terminated) {\n-          empty | blocked => {\n-            // The receiver will eventually clean up.\n-            unsafe { forget(p) }\n-          }\n-          full => {\n-            // This is impossible\n-            panic!(\"you dun goofed\")\n-          }\n-          terminated => {\n-            // I have to clean up, use drop_glue\n-          }\n-        }\n-    }\n-\n-    pub fn receiver_terminate<T:Send>(p: *const packet<T>) {\n-        let mut p = unsafe { uniquify(p) };\n-        match swap_state_rel(&mut (*p).state, terminated) {\n-          empty => {\n-            // the sender will clean up\n-            unsafe { forget(p) }\n-          }\n-          blocked => {\n-            // this shouldn't happen.\n-            panic!(\"terminating a blocked packet\")\n-          }\n-          terminated | full => {\n-            // I have to clean up, use drop_glue\n-          }\n-        }\n-    }\n-\n-    pub struct send_packet<T:Send> {\n-        p: Option<*const packet<T>>,\n-    }\n-\n-    impl<T:Send> Drop for send_packet<T> {\n-        fn drop(&mut self) {\n-            unsafe {\n-                if self.p != None {\n-                    let self_p: &mut Option<*const packet<T>> =\n-                        mem::transmute(&mut self.p);\n-                    let p = replace(self_p, None);\n-                    sender_terminate(p.unwrap())\n-                }\n-            }\n-        }\n-    }\n-\n-    impl<T:Send> send_packet<T> {\n-        pub fn unwrap(&mut self) -> *const packet<T> {\n-            replace(&mut self.p, None).unwrap()\n-        }\n-    }\n-\n-    pub fn send_packet<T:Send>(p: *const packet<T>) -> send_packet<T> {\n-        send_packet {\n-            p: Some(p)\n-        }\n-    }\n-\n-    pub struct recv_packet<T:Send> {\n-        p: Option<*const packet<T>>,\n-    }\n-\n-    impl<T:Send> Drop for recv_packet<T> {\n-        fn drop(&mut self) {\n-            unsafe {\n-                if self.p != None {\n-                    let self_p: &mut Option<*const packet<T>> =\n-                        mem::transmute(&mut self.p);\n-                    let p = replace(self_p, None);\n-                    receiver_terminate(p.unwrap())\n-                }\n-            }\n-        }\n-    }\n-\n-    impl<T:Send> recv_packet<T> {\n-        pub fn unwrap(&mut self) -> *const packet<T> {\n-            replace(&mut self.p, None).unwrap()\n-        }\n-    }\n-\n-    pub fn recv_packet<T:Send>(p: *const packet<T>) -> recv_packet<T> {\n-        recv_packet {\n-            p: Some(p)\n-        }\n-    }\n-\n-    pub fn entangle<T:Send>() -> (send_packet<T>, recv_packet<T>) {\n-        let p = packet();\n-        (send_packet(p), recv_packet(p))\n-    }\n-}\n-\n-pub mod pingpong {\n-    use std::mem;\n-\n-    pub struct ping(::pipes::send_packet<pong>);\n-\n-    unsafe impl Send for ping {}\n-\n-    pub struct pong(::pipes::send_packet<ping>);\n-\n-    unsafe impl Send for pong {}\n-\n-    pub fn liberate_ping(p: ping) -> ::pipes::send_packet<pong> {\n-        unsafe {\n-            let _addr : *const ::pipes::send_packet<pong> = match &p {\n-              &ping(ref x) => { mem::transmute(x) }\n-            };\n-            panic!()\n-        }\n-    }\n-\n-    pub fn liberate_pong(p: pong) -> ::pipes::send_packet<ping> {\n-        unsafe {\n-            let _addr : *const ::pipes::send_packet<ping> = match &p {\n-              &pong(ref x) => { mem::transmute(x) }\n-            };\n-            panic!()\n-        }\n-    }\n-\n-    pub fn init() -> (client::ping, server::ping) {\n-        ::pipes::entangle()\n-    }\n-\n-    pub mod client {\n-        use pingpong;\n-\n-        pub type ping = ::pipes::send_packet<pingpong::ping>;\n-        pub type pong = ::pipes::recv_packet<pingpong::pong>;\n-\n-        pub fn do_ping(c: ping) -> pong {\n-            let (sp, rp) = ::pipes::entangle();\n-\n-            ::pipes::send(c, pingpong::ping(sp));\n-            rp\n-        }\n-\n-        pub fn do_pong(c: pong) -> (ping, ()) {\n-            let packet = ::pipes::recv(c);\n-            if packet.is_none() {\n-                panic!(\"sender closed the connection\")\n-            }\n-            (pingpong::liberate_pong(packet.unwrap()), ())\n-        }\n-    }\n-\n-    pub mod server {\n-        use pingpong;\n-\n-        pub type ping = ::pipes::recv_packet<pingpong::ping>;\n-        pub type pong = ::pipes::send_packet<pingpong::pong>;\n-\n-        pub fn do_ping(c: ping) -> (pong, ()) {\n-            let packet = ::pipes::recv(c);\n-            if packet.is_none() {\n-                panic!(\"sender closed the connection\")\n-            }\n-            (pingpong::liberate_ping(packet.unwrap()), ())\n-        }\n-\n-        pub fn do_pong(c: pong) -> ping {\n-            let (sp, rp) = ::pipes::entangle();\n-            ::pipes::send(c, pingpong::pong(sp));\n-            rp\n-        }\n-    }\n-}\n-\n-fn client(chan: pingpong::client::ping) {\n-    let chan = pingpong::client::do_ping(chan);\n-    println!(\"Sent ping\");\n-    let (_chan, _data) = pingpong::client::do_pong(chan);\n-    println!(\"Received pong\");\n-}\n-\n-fn server(chan: pingpong::server::ping) {\n-    let (chan, _data) = pingpong::server::do_ping(chan);\n-    println!(\"Received ping\");\n-    let _chan = pingpong::server::do_pong(chan);\n-    println!(\"Sent pong\");\n-}\n-\n-pub fn main() {\n-  /*\n-//    Commented out because of option::get error\n-\n-    let (client_, server_) = pingpong::init();\n-\n-    task::spawn {|client_|\n-        let client__ = client_.take();\n-        client(client__);\n-    };\n-    task::spawn {|server_|\n-        let server__ = server_.take();\n-        server(server_\u02ca);\n-    };\n-  */\n-}"}, {"sha": "8fb62323aa5a7637136396d833a0f25d2481d5fd", "filename": "tests/ui/traits/new-solver/iter-filter-projection.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftraits%2Fnew-solver%2Fiter-filter-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftraits%2Fnew-solver%2Fiter-filter-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fiter-filter-projection.rs?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+use std::{iter, slice};\n+\n+struct Attr;\n+\n+fn test<'a, T: Iterator<Item = &'a Attr>>() {}\n+\n+fn main() {\n+    test::<iter::Filter<slice::Iter<'_, Attr>, fn(&&Attr) -> bool>>();\n+}"}, {"sha": "1a0a5d3ae9462c2444ade582dbed183760a7cada", "filename": "tests/ui/transmutability/arrays/should_require_well_defined_layout.stderr", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `[String; 0]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `[String; 0]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:26:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `[String; 0]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `[String; 0]` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<[String; 0], assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -20,13 +19,12 @@ LL | |                 .and(Assume::VALIDITY)\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `[String; 0]` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `[String; 0]` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:27:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `[String; 0]` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `[String; 0]` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `[String; 0]`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -42,13 +40,12 @@ LL | |                 .and(Assume::VALIDITY)\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `[String; 1]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `[String; 1]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:32:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `[String; 1]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `[String; 1]` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<[String; 1], assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -64,13 +61,12 @@ LL | |                 .and(Assume::VALIDITY)\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `[String; 1]` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `[String; 1]` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:33:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `[String; 1]` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `[String; 1]` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `[String; 1]`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -86,13 +82,12 @@ LL | |                 .and(Assume::VALIDITY)\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `[String; 2]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `[String; 2]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:38:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `[String; 2]` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `[String; 2]` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<[String; 2], assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -108,13 +103,12 @@ LL | |                 .and(Assume::VALIDITY)\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `[String; 2]` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `[String; 2]` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:39:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `[String; 2]` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `[String; 2]` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `[String; 2]`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |"}, {"sha": "9877a6606a9fa5530335e753e86962b6718d4d5b", "filename": "tests/ui/transmutability/enums/repr/primitive_reprs_should_have_correct_length.stderr", "status": "modified", "additions": 40, "deletions": 60, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `Zst` cannot be safely transmuted into `V0i8` in the defining scope of `n8::Context`.\n+error[E0277]: `Zst` cannot be safely transmuted into `V0i8` in the defining scope of `n8::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:48:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ `Zst` cannot be safely transmuted into `V0i8` in the defining scope of `n8::Context`.\n+   |                                            ^^^^^^^ The size of `Zst` is smaller than the size of `V0i8`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Zst, n8::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0i8`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -21,13 +20,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `V0i8` cannot be safely transmuted into `u16` in the defining scope of `n8::Context`.\n+error[E0277]: `V0i8` cannot be safely transmuted into `u16` in the defining scope of `n8::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:50:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ `V0i8` cannot be safely transmuted into `u16` in the defining scope of `n8::Context`.\n+   |                                            ^^^^^^ The size of `V0i8` is smaller than the size of `u16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0i8, n8::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -44,13 +42,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `Zst` cannot be safely transmuted into `V0u8` in the defining scope of `n8::Context`.\n+error[E0277]: `Zst` cannot be safely transmuted into `V0u8` in the defining scope of `n8::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:56:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ `Zst` cannot be safely transmuted into `V0u8` in the defining scope of `n8::Context`.\n+   |                                            ^^^^^^^ The size of `Zst` is smaller than the size of `V0u8`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Zst, n8::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0u8`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -67,13 +64,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `V0u8` cannot be safely transmuted into `u16` in the defining scope of `n8::Context`.\n+error[E0277]: `V0u8` cannot be safely transmuted into `u16` in the defining scope of `n8::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:58:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ `V0u8` cannot be safely transmuted into `u16` in the defining scope of `n8::Context`.\n+   |                                            ^^^^^^ The size of `V0u8` is smaller than the size of `u16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0u8, n8::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -90,13 +86,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `V0i16` in the defining scope of `n16::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `V0i16` in the defining scope of `n16::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:72:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ `u8` cannot be safely transmuted into `V0i16` in the defining scope of `n16::Context`.\n+   |                                            ^^^^^^^ At least one value of `u8` isn't a bit-valid value of `V0i16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, n16::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0i16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -113,13 +108,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `V0i16` cannot be safely transmuted into `u32` in the defining scope of `n16::Context`.\n+error[E0277]: `V0i16` cannot be safely transmuted into `u32` in the defining scope of `n16::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:74:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ `V0i16` cannot be safely transmuted into `u32` in the defining scope of `n16::Context`.\n+   |                                            ^^^^^^ The size of `V0i16` is smaller than the size of `u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0i16, n16::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -136,13 +130,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `V0u16` in the defining scope of `n16::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `V0u16` in the defining scope of `n16::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:80:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ `u8` cannot be safely transmuted into `V0u16` in the defining scope of `n16::Context`.\n+   |                                            ^^^^^^^ At least one value of `u8` isn't a bit-valid value of `V0u16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, n16::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -159,13 +152,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `V0u16` cannot be safely transmuted into `u32` in the defining scope of `n16::Context`.\n+error[E0277]: `V0u16` cannot be safely transmuted into `u32` in the defining scope of `n16::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:82:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ `V0u16` cannot be safely transmuted into `u32` in the defining scope of `n16::Context`.\n+   |                                            ^^^^^^ The size of `V0u16` is smaller than the size of `u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0u16, n16::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -182,13 +174,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `V0i32` in the defining scope of `n32::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `V0i32` in the defining scope of `n32::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:96:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ `u16` cannot be safely transmuted into `V0i32` in the defining scope of `n32::Context`.\n+   |                                            ^^^^^^^ At least one value of `u16` isn't a bit-valid value of `V0i32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, n32::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -205,13 +196,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `V0i32` cannot be safely transmuted into `u64` in the defining scope of `n32::Context`.\n+error[E0277]: `V0i32` cannot be safely transmuted into `u64` in the defining scope of `n32::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:98:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ `V0i32` cannot be safely transmuted into `u64` in the defining scope of `n32::Context`.\n+   |                                            ^^^^^^ The size of `V0i32` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0i32, n32::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -228,13 +218,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `V0u32` in the defining scope of `n32::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `V0u32` in the defining scope of `n32::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:104:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ `u16` cannot be safely transmuted into `V0u32` in the defining scope of `n32::Context`.\n+   |                                            ^^^^^^^ At least one value of `u16` isn't a bit-valid value of `V0u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, n32::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -251,13 +240,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `V0u32` cannot be safely transmuted into `u64` in the defining scope of `n32::Context`.\n+error[E0277]: `V0u32` cannot be safely transmuted into `u64` in the defining scope of `n32::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:106:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ `V0u32` cannot be safely transmuted into `u64` in the defining scope of `n32::Context`.\n+   |                                            ^^^^^^ The size of `V0u32` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0u32, n32::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -274,13 +262,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `V0i64` in the defining scope of `n64::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `V0i64` in the defining scope of `n64::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:120:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ `u32` cannot be safely transmuted into `V0i64` in the defining scope of `n64::Context`.\n+   |                                            ^^^^^^^ At least one value of `u32` isn't a bit-valid value of `V0i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, n64::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -297,13 +284,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `V0i64` cannot be safely transmuted into `u128` in the defining scope of `n64::Context`.\n+error[E0277]: `V0i64` cannot be safely transmuted into `u128` in the defining scope of `n64::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:122:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ `V0i64` cannot be safely transmuted into `u128` in the defining scope of `n64::Context`.\n+   |                                            ^^^^^^ The size of `V0i64` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0i64, n64::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -320,13 +306,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `V0u64` in the defining scope of `n64::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `V0u64` in the defining scope of `n64::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:128:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ `u32` cannot be safely transmuted into `V0u64` in the defining scope of `n64::Context`.\n+   |                                            ^^^^^^^ At least one value of `u32` isn't a bit-valid value of `V0u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, n64::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -343,13 +328,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `V0u64` cannot be safely transmuted into `u128` in the defining scope of `n64::Context`.\n+error[E0277]: `V0u64` cannot be safely transmuted into `u128` in the defining scope of `n64::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:130:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ `V0u64` cannot be safely transmuted into `u128` in the defining scope of `n64::Context`.\n+   |                                            ^^^^^^ The size of `V0u64` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0u64, n64::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -366,13 +350,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `V0isize` in the defining scope of `nsize::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `V0isize` in the defining scope of `nsize::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:144:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ `u8` cannot be safely transmuted into `V0isize` in the defining scope of `nsize::Context`.\n+   |                                            ^^^^^^^ At least one value of `u8` isn't a bit-valid value of `V0isize`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, nsize::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0isize`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -389,13 +372,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `V0isize` cannot be safely transmuted into `[usize; 2]` in the defining scope of `nsize::Context`.\n+error[E0277]: `V0isize` cannot be safely transmuted into `[usize; 2]` in the defining scope of `nsize::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:146:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ `V0isize` cannot be safely transmuted into `[usize; 2]` in the defining scope of `nsize::Context`.\n+   |                                            ^^^^^^ The size of `V0isize` is smaller than the size of `[usize; 2]`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0isize, nsize::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `[usize; 2]`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -412,13 +394,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `V0usize` in the defining scope of `nsize::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `V0usize` in the defining scope of `nsize::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:152:44\n    |\n LL |         assert::is_transmutable::<Smaller, Current, Context>();\n-   |                                            ^^^^^^^ `u8` cannot be safely transmuted into `V0usize` in the defining scope of `nsize::Context`.\n+   |                                            ^^^^^^^ At least one value of `u8` isn't a bit-valid value of `V0usize`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, nsize::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `V0usize`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n@@ -435,13 +416,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_transmutable`\n \n-error[E0277]: `V0usize` cannot be safely transmuted into `[usize; 2]` in the defining scope of `nsize::Context`.\n+error[E0277]: `V0usize` cannot be safely transmuted into `[usize; 2]` in the defining scope of `nsize::Context`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:154:44\n    |\n LL |         assert::is_transmutable::<Current, Larger, Context>();\n-   |                                            ^^^^^^ `V0usize` cannot be safely transmuted into `[usize; 2]` in the defining scope of `nsize::Context`.\n+   |                                            ^^^^^^ The size of `V0usize` is smaller than the size of `[usize; 2]`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<V0usize, nsize::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `[usize; 2]`\n note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |"}, {"sha": "1612b6b3661ef057feaa5f5ab3706621573f8ceb", "filename": "tests/ui/transmutability/enums/repr/should_require_well_defined_layout.stderr", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `void::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `void::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:28:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `void::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `void::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<void::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n@@ -21,13 +20,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `void::repr_rust` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `void::repr_rust` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:29:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `void::repr_rust` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `void::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `void::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n@@ -44,13 +42,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `singleton::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `singleton::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:34:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `singleton::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `singleton::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<singleton::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n@@ -67,13 +64,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `singleton::repr_rust` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `singleton::repr_rust` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:35:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `singleton::repr_rust` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `singleton::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `singleton::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n@@ -90,13 +86,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `duplex::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `duplex::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:40:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `duplex::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `duplex::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<duplex::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n@@ -113,13 +108,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `duplex::repr_rust` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `duplex::repr_rust` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:41:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `duplex::repr_rust` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `duplex::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `duplex::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |"}, {"sha": "bfbef8b25fcf486f11d85e737c93264cb796e634", "filename": "tests/ui/transmutability/enums/should_pad_variants.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `should_pad_variants::Context`.\n+error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `should_pad_variants::Context`\n   --> $DIR/should_pad_variants.rs:44:36\n    |\n LL |     assert::is_transmutable::<Src, Dst, Context>();\n-   |                                    ^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `should_pad_variants::Context`.\n+   |                                    ^^^ The size of `Src` is smaller than the size of `Dst`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, should_pad_variants::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_pad_variants.rs:13:14\n    |"}, {"sha": "e59301a8ce9e229eb2bca3e2f64033f4080d36e5", "filename": "tests/ui/transmutability/enums/should_respect_endianness.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `Src` cannot be safely transmuted into `Unexpected` in the defining scope of `assert::Context`.\n+error[E0277]: `Src` cannot be safely transmuted into `Unexpected` in the defining scope of `assert::Context`\n   --> $DIR/should_respect_endianness.rs:36:36\n    |\n LL |     assert::is_transmutable::<Src, Unexpected>();\n-   |                                    ^^^^^^^^^^ `Src` cannot be safely transmuted into `Unexpected` in the defining scope of `assert::Context`.\n+   |                                    ^^^^^^^^^^ At least one value of `Src` isn't a bit-valid value of `Unexpected`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `Unexpected`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_respect_endianness.rs:14:14\n    |"}, {"sha": "47c8438a251c2dedb2fcc0f8f6b1045549ac0f58", "filename": "tests/ui/transmutability/primitives/bool.current.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.current.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`\n   --> $DIR/bool.rs:24:35\n    |\n LL |     assert::is_transmutable::<u8, bool>();\n-   |                                   ^^^^ `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`.\n+   |                                   ^^^^ At least one value of `u8` isn't a bit-valid value of `bool`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: false }>` is not implemented for `bool`\n note: required by a bound in `is_transmutable`\n   --> $DIR/bool.rs:14:14\n    |"}, {"sha": "47c8438a251c2dedb2fcc0f8f6b1045549ac0f58", "filename": "tests/ui/transmutability/primitives/bool.next.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.next.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`\n   --> $DIR/bool.rs:24:35\n    |\n LL |     assert::is_transmutable::<u8, bool>();\n-   |                                   ^^^^ `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`.\n+   |                                   ^^^^ At least one value of `u8` isn't a bit-valid value of `bool`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: false }>` is not implemented for `bool`\n note: required by a bound in `is_transmutable`\n   --> $DIR/bool.rs:14:14\n    |"}, {"sha": "d12e172971c38f754dcbaf61f1e7cbfc1266fb86", "filename": "tests/ui/transmutability/primitives/numbers.current.stderr", "status": "modified", "additions": 114, "deletions": 171, "changes": 285, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.current.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:65:40\n    |\n LL |     assert::is_transmutable::<   i8,   i16>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `i16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -14,13 +13,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:66:40\n    |\n LL |     assert::is_transmutable::<   i8,   u16>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `u16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -30,13 +28,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:67:40\n    |\n LL |     assert::is_transmutable::<   i8,   i32>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `i32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -46,13 +43,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:68:40\n    |\n LL |     assert::is_transmutable::<   i8,   f32>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `f32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -62,13 +58,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:69:40\n    |\n LL |     assert::is_transmutable::<   i8,   u32>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -78,13 +73,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:70:40\n    |\n LL |     assert::is_transmutable::<   i8,   u64>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -94,13 +88,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:71:40\n    |\n LL |     assert::is_transmutable::<   i8,   i64>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -110,13 +103,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:72:40\n    |\n LL |     assert::is_transmutable::<   i8,   f64>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -126,13 +118,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:73:39\n    |\n LL |     assert::is_transmutable::<   i8,  u128>();\n-   |                                       ^^^^ `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i8` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -142,13 +133,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:74:39\n    |\n LL |     assert::is_transmutable::<   i8,  i128>();\n-   |                                       ^^^^ `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i8` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -158,13 +148,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:76:40\n    |\n LL |     assert::is_transmutable::<   u8,   i16>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `i16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -174,13 +163,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:77:40\n    |\n LL |     assert::is_transmutable::<   u8,   u16>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `u16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -190,13 +178,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:78:40\n    |\n LL |     assert::is_transmutable::<   u8,   i32>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `i32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -206,13 +193,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:79:40\n    |\n LL |     assert::is_transmutable::<   u8,   f32>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `f32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -222,13 +208,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:80:40\n    |\n LL |     assert::is_transmutable::<   u8,   u32>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -238,13 +223,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:81:40\n    |\n LL |     assert::is_transmutable::<   u8,   u64>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -254,13 +238,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:82:40\n    |\n LL |     assert::is_transmutable::<   u8,   i64>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -270,13 +253,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:83:40\n    |\n LL |     assert::is_transmutable::<   u8,   f64>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -286,13 +268,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:84:39\n    |\n LL |     assert::is_transmutable::<   u8,  u128>();\n-   |                                       ^^^^ `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u8` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -302,13 +283,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:85:39\n    |\n LL |     assert::is_transmutable::<   u8,  i128>();\n-   |                                       ^^^^ `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u8` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -318,13 +298,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:87:40\n    |\n LL |     assert::is_transmutable::<  i16,   i32>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `i32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -334,13 +313,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:88:40\n    |\n LL |     assert::is_transmutable::<  i16,   f32>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `f32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -350,13 +328,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:89:40\n    |\n LL |     assert::is_transmutable::<  i16,   u32>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -366,13 +343,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:90:40\n    |\n LL |     assert::is_transmutable::<  i16,   u64>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -382,13 +358,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:91:40\n    |\n LL |     assert::is_transmutable::<  i16,   i64>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -398,13 +373,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:92:40\n    |\n LL |     assert::is_transmutable::<  i16,   f64>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -414,13 +388,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:93:39\n    |\n LL |     assert::is_transmutable::<  i16,  u128>();\n-   |                                       ^^^^ `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i16` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -430,13 +403,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:94:39\n    |\n LL |     assert::is_transmutable::<  i16,  i128>();\n-   |                                       ^^^^ `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i16` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -446,13 +418,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:96:40\n    |\n LL |     assert::is_transmutable::<  u16,   i32>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `i32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -462,13 +433,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:97:40\n    |\n LL |     assert::is_transmutable::<  u16,   f32>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `f32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -478,13 +448,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:98:40\n    |\n LL |     assert::is_transmutable::<  u16,   u32>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -494,13 +463,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:99:40\n    |\n LL |     assert::is_transmutable::<  u16,   u64>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -510,13 +478,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:100:40\n    |\n LL |     assert::is_transmutable::<  u16,   i64>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -526,13 +493,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:101:40\n    |\n LL |     assert::is_transmutable::<  u16,   f64>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -542,13 +508,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:102:39\n    |\n LL |     assert::is_transmutable::<  u16,  u128>();\n-   |                                       ^^^^ `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u16` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -558,13 +523,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:103:39\n    |\n LL |     assert::is_transmutable::<  u16,  i128>();\n-   |                                       ^^^^ `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u16` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -574,13 +538,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:105:40\n    |\n LL |     assert::is_transmutable::<  i32,   u64>();\n-   |                                        ^^^ `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i32` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -590,13 +553,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:106:40\n    |\n LL |     assert::is_transmutable::<  i32,   i64>();\n-   |                                        ^^^ `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i32` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -606,13 +568,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:107:40\n    |\n LL |     assert::is_transmutable::<  i32,   f64>();\n-   |                                        ^^^ `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i32` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -622,13 +583,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:108:39\n    |\n LL |     assert::is_transmutable::<  i32,  u128>();\n-   |                                       ^^^^ `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i32` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -638,13 +598,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:109:39\n    |\n LL |     assert::is_transmutable::<  i32,  i128>();\n-   |                                       ^^^^ `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i32` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -654,13 +613,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:111:40\n    |\n LL |     assert::is_transmutable::<  f32,   u64>();\n-   |                                        ^^^ `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `f32` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -670,13 +628,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:112:40\n    |\n LL |     assert::is_transmutable::<  f32,   i64>();\n-   |                                        ^^^ `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `f32` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -686,13 +643,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:113:40\n    |\n LL |     assert::is_transmutable::<  f32,   f64>();\n-   |                                        ^^^ `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `f32` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -702,13 +658,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:114:39\n    |\n LL |     assert::is_transmutable::<  f32,  u128>();\n-   |                                       ^^^^ `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `f32` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -718,13 +673,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:115:39\n    |\n LL |     assert::is_transmutable::<  f32,  i128>();\n-   |                                       ^^^^ `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `f32` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -734,13 +688,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:117:40\n    |\n LL |     assert::is_transmutable::<  u32,   u64>();\n-   |                                        ^^^ `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u32` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -750,13 +703,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:118:40\n    |\n LL |     assert::is_transmutable::<  u32,   i64>();\n-   |                                        ^^^ `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u32` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -766,13 +718,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:119:40\n    |\n LL |     assert::is_transmutable::<  u32,   f64>();\n-   |                                        ^^^ `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u32` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -782,13 +733,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:120:39\n    |\n LL |     assert::is_transmutable::<  u32,  u128>();\n-   |                                       ^^^^ `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u32` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -798,13 +748,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:121:39\n    |\n LL |     assert::is_transmutable::<  u32,  i128>();\n-   |                                       ^^^^ `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u32` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -814,13 +763,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:123:39\n    |\n LL |     assert::is_transmutable::<  u64,  u128>();\n-   |                                       ^^^^ `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u64` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -830,13 +778,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:124:39\n    |\n LL |     assert::is_transmutable::<  u64,  i128>();\n-   |                                       ^^^^ `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u64` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -846,13 +793,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:126:39\n    |\n LL |     assert::is_transmutable::<  i64,  u128>();\n-   |                                       ^^^^ `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i64` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -862,13 +808,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:127:39\n    |\n LL |     assert::is_transmutable::<  i64,  i128>();\n-   |                                       ^^^^ `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i64` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -878,13 +823,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:129:39\n    |\n LL |     assert::is_transmutable::<  f64,  u128>();\n-   |                                       ^^^^ `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `f64` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -894,13 +838,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:130:39\n    |\n LL |     assert::is_transmutable::<  f64,  i128>();\n-   |                                       ^^^^ `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `f64` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |"}, {"sha": "d12e172971c38f754dcbaf61f1e7cbfc1266fb86", "filename": "tests/ui/transmutability/primitives/numbers.next.stderr", "status": "modified", "additions": 114, "deletions": 171, "changes": 285, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.next.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:65:40\n    |\n LL |     assert::is_transmutable::<   i8,   i16>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `i16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -14,13 +13,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:66:40\n    |\n LL |     assert::is_transmutable::<   i8,   u16>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `u16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -30,13 +28,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:67:40\n    |\n LL |     assert::is_transmutable::<   i8,   i32>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `i32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -46,13 +43,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:68:40\n    |\n LL |     assert::is_transmutable::<   i8,   f32>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `f32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -62,13 +58,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:69:40\n    |\n LL |     assert::is_transmutable::<   i8,   u32>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -78,13 +73,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:70:40\n    |\n LL |     assert::is_transmutable::<   i8,   u64>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -94,13 +88,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:71:40\n    |\n LL |     assert::is_transmutable::<   i8,   i64>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -110,13 +103,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:72:40\n    |\n LL |     assert::is_transmutable::<   i8,   f64>();\n-   |                                        ^^^ `i8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i8` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -126,13 +118,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:73:39\n    |\n LL |     assert::is_transmutable::<   i8,  u128>();\n-   |                                       ^^^^ `i8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i8` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -142,13 +133,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:74:39\n    |\n LL |     assert::is_transmutable::<   i8,  i128>();\n-   |                                       ^^^^ `i8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i8` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -158,13 +148,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:76:40\n    |\n LL |     assert::is_transmutable::<   u8,   i16>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `i16` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `i16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -174,13 +163,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:77:40\n    |\n LL |     assert::is_transmutable::<   u8,   u16>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `u16` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `u16`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u16`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -190,13 +178,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:78:40\n    |\n LL |     assert::is_transmutable::<   u8,   i32>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `i32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -206,13 +193,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:79:40\n    |\n LL |     assert::is_transmutable::<   u8,   f32>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `f32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -222,13 +208,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:80:40\n    |\n LL |     assert::is_transmutable::<   u8,   u32>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -238,13 +223,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:81:40\n    |\n LL |     assert::is_transmutable::<   u8,   u64>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -254,13 +238,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:82:40\n    |\n LL |     assert::is_transmutable::<   u8,   i64>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -270,13 +253,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:83:40\n    |\n LL |     assert::is_transmutable::<   u8,   f64>();\n-   |                                        ^^^ `u8` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u8` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -286,13 +268,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:84:39\n    |\n LL |     assert::is_transmutable::<   u8,  u128>();\n-   |                                       ^^^^ `u8` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u8` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -302,13 +283,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:85:39\n    |\n LL |     assert::is_transmutable::<   u8,  i128>();\n-   |                                       ^^^^ `u8` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u8` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u8, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -318,13 +298,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:87:40\n    |\n LL |     assert::is_transmutable::<  i16,   i32>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `i32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -334,13 +313,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:88:40\n    |\n LL |     assert::is_transmutable::<  i16,   f32>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `f32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -350,13 +328,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:89:40\n    |\n LL |     assert::is_transmutable::<  i16,   u32>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -366,13 +343,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:90:40\n    |\n LL |     assert::is_transmutable::<  i16,   u64>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -382,13 +358,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:91:40\n    |\n LL |     assert::is_transmutable::<  i16,   i64>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -398,13 +373,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:92:40\n    |\n LL |     assert::is_transmutable::<  i16,   f64>();\n-   |                                        ^^^ `i16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i16` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -414,13 +388,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:93:39\n    |\n LL |     assert::is_transmutable::<  i16,  u128>();\n-   |                                       ^^^^ `i16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i16` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -430,13 +403,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:94:39\n    |\n LL |     assert::is_transmutable::<  i16,  i128>();\n-   |                                       ^^^^ `i16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i16` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -446,13 +418,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:96:40\n    |\n LL |     assert::is_transmutable::<  u16,   i32>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `i32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `i32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -462,13 +433,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:97:40\n    |\n LL |     assert::is_transmutable::<  u16,   f32>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `f32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `f32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -478,13 +448,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:98:40\n    |\n LL |     assert::is_transmutable::<  u16,   u32>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `u32` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `u32`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u32`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -494,13 +463,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:99:40\n    |\n LL |     assert::is_transmutable::<  u16,   u64>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -510,13 +478,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:100:40\n    |\n LL |     assert::is_transmutable::<  u16,   i64>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -526,13 +493,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:101:40\n    |\n LL |     assert::is_transmutable::<  u16,   f64>();\n-   |                                        ^^^ `u16` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u16` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -542,13 +508,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:102:39\n    |\n LL |     assert::is_transmutable::<  u16,  u128>();\n-   |                                       ^^^^ `u16` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u16` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -558,13 +523,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:103:39\n    |\n LL |     assert::is_transmutable::<  u16,  i128>();\n-   |                                       ^^^^ `u16` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u16` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u16, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -574,13 +538,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:105:40\n    |\n LL |     assert::is_transmutable::<  i32,   u64>();\n-   |                                        ^^^ `i32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i32` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -590,13 +553,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:106:40\n    |\n LL |     assert::is_transmutable::<  i32,   i64>();\n-   |                                        ^^^ `i32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i32` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -606,13 +568,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:107:40\n    |\n LL |     assert::is_transmutable::<  i32,   f64>();\n-   |                                        ^^^ `i32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `i32` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -622,13 +583,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:108:39\n    |\n LL |     assert::is_transmutable::<  i32,  u128>();\n-   |                                       ^^^^ `i32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i32` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -638,13 +598,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:109:39\n    |\n LL |     assert::is_transmutable::<  i32,  i128>();\n-   |                                       ^^^^ `i32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i32` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -654,13 +613,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:111:40\n    |\n LL |     assert::is_transmutable::<  f32,   u64>();\n-   |                                        ^^^ `f32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `f32` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -670,13 +628,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:112:40\n    |\n LL |     assert::is_transmutable::<  f32,   i64>();\n-   |                                        ^^^ `f32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `f32` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -686,13 +643,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:113:40\n    |\n LL |     assert::is_transmutable::<  f32,   f64>();\n-   |                                        ^^^ `f32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `f32` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -702,13 +658,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:114:39\n    |\n LL |     assert::is_transmutable::<  f32,  u128>();\n-   |                                       ^^^^ `f32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `f32` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -718,13 +673,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:115:39\n    |\n LL |     assert::is_transmutable::<  f32,  i128>();\n-   |                                       ^^^^ `f32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `f32` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -734,13 +688,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:117:40\n    |\n LL |     assert::is_transmutable::<  u32,   u64>();\n-   |                                        ^^^ `u32` cannot be safely transmuted into `u64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u32` is smaller than the size of `u64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -750,13 +703,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:118:40\n    |\n LL |     assert::is_transmutable::<  u32,   i64>();\n-   |                                        ^^^ `u32` cannot be safely transmuted into `i64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u32` is smaller than the size of `i64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -766,13 +718,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:119:40\n    |\n LL |     assert::is_transmutable::<  u32,   f64>();\n-   |                                        ^^^ `u32` cannot be safely transmuted into `f64` in the defining scope of `assert::Context`.\n+   |                                        ^^^ The size of `u32` is smaller than the size of `f64`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `f64`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -782,13 +733,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:120:39\n    |\n LL |     assert::is_transmutable::<  u32,  u128>();\n-   |                                       ^^^^ `u32` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u32` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -798,13 +748,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:121:39\n    |\n LL |     assert::is_transmutable::<  u32,  i128>();\n-   |                                       ^^^^ `u32` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u32` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u32, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -814,13 +763,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:123:39\n    |\n LL |     assert::is_transmutable::<  u64,  u128>();\n-   |                                       ^^^^ `u64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u64` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -830,13 +778,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:124:39\n    |\n LL |     assert::is_transmutable::<  u64,  i128>();\n-   |                                       ^^^^ `u64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `u64` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -846,13 +793,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:126:39\n    |\n LL |     assert::is_transmutable::<  i64,  u128>();\n-   |                                       ^^^^ `i64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i64` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -862,13 +808,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:127:39\n    |\n LL |     assert::is_transmutable::<  i64,  i128>();\n-   |                                       ^^^^ `i64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `i64` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<i64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -878,13 +823,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+error[E0277]: `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:129:39\n    |\n LL |     assert::is_transmutable::<  f64,  u128>();\n-   |                                       ^^^^ `f64` cannot be safely transmuted into `u128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `f64` is smaller than the size of `u128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `u128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |\n@@ -894,13 +838,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+error[E0277]: `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`\n   --> $DIR/numbers.rs:130:39\n    |\n LL |     assert::is_transmutable::<  f64,  i128>();\n-   |                                       ^^^^ `f64` cannot be safely transmuted into `i128` in the defining scope of `assert::Context`.\n+   |                                       ^^^^ The size of `f64` is smaller than the size of `i128`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<f64, assert::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `i128`\n note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:15:14\n    |"}, {"sha": "c49eb6097bd0cc4143bd407412a05c9aa5fef2cc", "filename": "tests/ui/transmutability/primitives/unit.current.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.current.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`.\n+error[E0277]: `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`\n   --> $DIR/unit.rs:31:35\n    |\n LL |     assert::is_transmutable::<(), u8, Context>();\n-   |                                   ^^ `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`.\n+   |                                   ^^ The size of `()` is smaller than the size of `u8`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<(), should_have_correct_size::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u8`\n note: required by a bound in `is_transmutable`\n   --> $DIR/unit.rs:15:14\n    |"}, {"sha": "c49eb6097bd0cc4143bd407412a05c9aa5fef2cc", "filename": "tests/ui/transmutability/primitives/unit.next.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.next.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`.\n+error[E0277]: `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`\n   --> $DIR/unit.rs:31:35\n    |\n LL |     assert::is_transmutable::<(), u8, Context>();\n-   |                                   ^^ `()` cannot be safely transmuted into `u8` in the defining scope of `should_have_correct_size::Context`.\n+   |                                   ^^ The size of `()` is smaller than the size of `u8`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<(), should_have_correct_size::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `u8`\n note: required by a bound in `is_transmutable`\n   --> $DIR/unit.rs:15:14\n    |"}, {"sha": "ecb095354a512b25c3fd8fd0b80e6fc147353d7d", "filename": "tests/ui/transmutability/references.current.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Freferences.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Freferences.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences.current.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n+error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`\n   --> $DIR/references.rs:29:52\n    |\n LL |     assert::is_maybe_transmutable::<&'static Unit, &'static Unit>();\n-   |                                                    ^^^^^^^^^^^^^ `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n+   |                                                    ^^^^^^^^^^^^^ `&'static Unit` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<&'static Unit, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `&'static Unit`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/references.rs:16:14\n    |"}, {"sha": "ecb095354a512b25c3fd8fd0b80e6fc147353d7d", "filename": "tests/ui/transmutability/references.next.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Freferences.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Freferences.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences.next.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n+error[E0277]: `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`\n   --> $DIR/references.rs:29:52\n    |\n LL |     assert::is_maybe_transmutable::<&'static Unit, &'static Unit>();\n-   |                                                    ^^^^^^^^^^^^^ `&'static Unit` cannot be safely transmuted into `&'static Unit` in the defining scope of `assert::Context`.\n+   |                                                    ^^^^^^^^^^^^^ `&'static Unit` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<&'static Unit, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `&'static Unit`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/references.rs:16:14\n    |"}, {"sha": "4c5062cd3b303f055e6fdafe9c64bfaad4ab1378", "filename": "tests/ui/transmutability/structs/repr/should_require_well_defined_layout.stderr", "status": "modified", "additions": 24, "deletions": 36, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `should_reject_repr_rust::unit::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `should_reject_repr_rust::unit::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:28:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `should_reject_repr_rust::unit::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `should_reject_repr_rust::unit::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::unit::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -21,13 +20,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::unit::repr_rust` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::unit::repr_rust` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:29:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `should_reject_repr_rust::unit::repr_rust` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `should_reject_repr_rust::unit::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `should_reject_repr_rust::unit::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -44,13 +42,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `should_reject_repr_rust::tuple::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `should_reject_repr_rust::tuple::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:34:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `should_reject_repr_rust::tuple::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `should_reject_repr_rust::tuple::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::tuple::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -67,13 +64,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::tuple::repr_rust` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::tuple::repr_rust` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:35:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `should_reject_repr_rust::tuple::repr_rust` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `should_reject_repr_rust::tuple::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `should_reject_repr_rust::tuple::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -90,13 +86,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `should_reject_repr_rust::braces::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `should_reject_repr_rust::braces::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:40:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `should_reject_repr_rust::braces::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `should_reject_repr_rust::braces::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::braces::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -113,13 +108,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::braces::repr_rust` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::braces::repr_rust` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:41:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `should_reject_repr_rust::braces::repr_rust` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `should_reject_repr_rust::braces::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `should_reject_repr_rust::braces::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -136,13 +130,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `aligned::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `aligned::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:46:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `aligned::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `aligned::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<aligned::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -159,13 +152,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `aligned::repr_rust` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `aligned::repr_rust` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:47:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `aligned::repr_rust` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `aligned::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `aligned::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -182,13 +174,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `packed::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `packed::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:52:52\n    |\n LL |         assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                    ^^ `packed::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                    ^^ `packed::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<packed::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -205,13 +196,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `packed::repr_rust` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `packed::repr_rust` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:53:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                               ^^^^^^^^^ `u128` cannot be safely transmuted into `packed::repr_rust` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^^^^ `packed::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `packed::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -228,13 +218,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `nested::repr_c` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `nested::repr_c` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:59:49\n    |\n LL |         assert::is_maybe_transmutable::<repr_c, ()>();\n-   |                                                 ^^ `nested::repr_c` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                 ^^ `nested::repr_c` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<nested::repr_c, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -251,13 +240,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `nested::repr_c` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `nested::repr_c` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:60:47\n    |\n LL |         assert::is_maybe_transmutable::<u128, repr_c>();\n-   |                                               ^^^^^^ `u128` cannot be safely transmuted into `nested::repr_c` in the defining scope of `assert::Context`.\n+   |                                               ^^^^^^ `nested::repr_c` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `nested::repr_c`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |"}, {"sha": "4293d34f47b23aa4cdfab37b8209ff53e93ae405", "filename": "tests/ui/transmutability/unions/repr/should_require_well_defined_layout.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `should_reject_repr_rust::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+error[E0277]: `should_reject_repr_rust::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:30:48\n    |\n LL |     assert::is_maybe_transmutable::<repr_rust, ()>();\n-   |                                                ^^ `should_reject_repr_rust::repr_rust` cannot be safely transmuted into `()` in the defining scope of `assert::Context`.\n+   |                                                ^^ `should_reject_repr_rust::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<should_reject_repr_rust::repr_rust, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `()`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n@@ -21,13 +20,12 @@ LL | |             }\n LL | |         }>\n    | |__________^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::repr_rust` in the defining scope of `assert::Context`.\n+error[E0277]: `u128` cannot be safely transmuted into `should_reject_repr_rust::repr_rust` in the defining scope of `assert::Context`\n   --> $DIR/should_require_well_defined_layout.rs:31:43\n    |\n LL |     assert::is_maybe_transmutable::<u128, repr_rust>();\n-   |                                           ^^^^^^^^^ `u128` cannot be safely transmuted into `should_reject_repr_rust::repr_rust` in the defining scope of `assert::Context`.\n+   |                                           ^^^^^^^^^ `should_reject_repr_rust::repr_rust` does not have a well-specified layout\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<u128, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `should_reject_repr_rust::repr_rust`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |"}, {"sha": "bfbef8b25fcf486f11d85e737c93264cb796e634", "filename": "tests/ui/transmutability/unions/should_pad_variants.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `should_pad_variants::Context`.\n+error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `should_pad_variants::Context`\n   --> $DIR/should_pad_variants.rs:44:36\n    |\n LL |     assert::is_transmutable::<Src, Dst, Context>();\n-   |                                    ^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `should_pad_variants::Context`.\n+   |                                    ^^^ The size of `Src` is smaller than the size of `Dst`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, should_pad_variants::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_pad_variants.rs:13:14\n    |"}, {"sha": "553f655a10ac0f8b063de943b5498e5136cc0d9e", "filename": "tests/ui/transmutability/unions/should_reject_contraction.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `Superset` cannot be safely transmuted into `Subset` in the defining scope of `assert::Context`.\n+error[E0277]: `Superset` cannot be safely transmuted into `Subset` in the defining scope of `assert::Context`\n   --> $DIR/should_reject_contraction.rs:35:41\n    |\n LL |     assert::is_transmutable::<Superset, Subset>();\n-   |                                         ^^^^^^ `Superset` cannot be safely transmuted into `Subset` in the defining scope of `assert::Context`.\n+   |                                         ^^^^^^ At least one value of `Superset` isn't a bit-valid value of `Subset`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Superset, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: false }>` is not implemented for `Subset`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_contraction.rs:13:14\n    |"}, {"sha": "178ae6f08c495801bbcdfa1eda582b412d58a9f1", "filename": "tests/ui/transmutability/unions/should_reject_disjoint.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`.\n+error[E0277]: `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`\n   --> $DIR/should_reject_disjoint.rs:33:40\n    |\n LL |     assert::is_maybe_transmutable::<A, B>();\n-   |                                        ^ `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`.\n+   |                                        ^ At least one value of `A` isn't a bit-valid value of `B`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<A, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: true }>` is not implemented for `B`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_reject_disjoint.rs:13:14\n    |\n@@ -14,13 +13,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY.and(Assume::VALIDITY) }>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n \n-error[E0277]: `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.\n+error[E0277]: `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`\n   --> $DIR/should_reject_disjoint.rs:34:40\n    |\n LL |     assert::is_maybe_transmutable::<B, A>();\n-   |                                        ^ `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.\n+   |                                        ^ At least one value of `B` isn't a bit-valid value of `A`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<B, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: true }>` is not implemented for `A`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_reject_disjoint.rs:13:14\n    |"}, {"sha": "73c29ab1c970d88a477da0a1c35d6820f6dbfd9b", "filename": "tests/ui/transmutability/unions/should_reject_intersecting.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`.\n+error[E0277]: `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`\n   --> $DIR/should_reject_intersecting.rs:36:34\n    |\n LL |     assert::is_transmutable::<A, B>();\n-   |                                  ^ `A` cannot be safely transmuted into `B` in the defining scope of `assert::Context`.\n+   |                                  ^ At least one value of `A` isn't a bit-valid value of `B`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<A, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: false }>` is not implemented for `B`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_intersecting.rs:14:14\n    |\n@@ -14,13 +13,12 @@ LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n \n-error[E0277]: `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.\n+error[E0277]: `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`\n   --> $DIR/should_reject_intersecting.rs:37:34\n    |\n LL |     assert::is_transmutable::<B, A>();\n-   |                                  ^ `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.\n+   |                                  ^ At least one value of `B` isn't a bit-valid value of `A`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<B, assert::Context, Assume { alignment: false, lifetimes: false, safety: true, validity: false }>` is not implemented for `A`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_intersecting.rs:14:14\n    |"}, {"sha": "863ada3c2c44ce7a72bcf862bbf520604424c8e8", "filename": "tests/ui/transmutability/visibility/should_reject_if_dst_has_private_field.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n+error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`\n   --> $DIR/should_reject_if_dst_has_private_field.rs:35:41\n    |\n LL |     assert::is_transmutable::<src::Src, dst::Dst, Context>();\n-   |                                         ^^^^^^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n+   |                                         ^^^^^^^^ `Dst` is or contains a type or field that is not visible in that scope\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, test::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_if_dst_has_private_field.rs:13:14\n    |"}, {"sha": "7b0f1b4d56ec6b42c66a180504a1d4007fefa444", "filename": "tests/ui/transmutability/visibility/should_reject_if_dst_has_private_variant.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n+error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`\n   --> $DIR/should_reject_if_dst_has_private_variant.rs:36:41\n    |\n LL |     assert::is_transmutable::<src::Src, dst::Dst, Context>();\n-   |                                         ^^^^^^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n+   |                                         ^^^^^^^^ `Dst` is or contains a type or field that is not visible in that scope\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, test::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_if_dst_has_private_variant.rs:13:14\n    |"}, {"sha": "df19477ef269781e17bb1a841be4cda974250bad", "filename": "tests/ui/transmutability/visibility/should_reject_if_dst_has_unreachable_field.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n+error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`\n   --> $DIR/should_reject_if_dst_has_unreachable_field.rs:37:41\n    |\n LL |     assert::is_transmutable::<src::Src, dst::Dst, Context>();\n-   |                                         ^^^^^^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n+   |                                         ^^^^^^^^ `Dst` is or contains a type or field that is not visible in that scope\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, test::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_if_dst_has_unreachable_field.rs:15:14\n    |"}, {"sha": "ea488980cdd14105fd8819e17a6b5a454721ec0e", "filename": "tests/ui/transmutability/visibility/should_reject_if_dst_has_unreachable_ty.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -10,13 +10,12 @@ note: the struct `Dst` is defined here\n LL |     #[repr(C)] pub(self) struct Dst {\n    |                ^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n+error[E0277]: `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`\n   --> $DIR/should_reject_if_dst_has_unreachable_ty.rs:38:41\n    |\n LL |     assert::is_transmutable::<src::Src, dst::Dst, Context>();\n-   |                                         ^^^^^^^^ `Src` cannot be safely transmuted into `Dst` in the defining scope of `test::Context`.\n+   |                                         ^^^^^^^^ `Dst` is or contains a type or field that is not visible in that scope\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<Src, test::Context, Assume { alignment: false, lifetimes: false, safety: false, validity: false }>` is not implemented for `Dst`\n note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_if_dst_has_unreachable_ty.rs:15:14\n    |"}, {"sha": "f5480e0b9fb8217c3ee254a6e02b9ffce042e7b8", "filename": "tests/ui/transmute/transmute-padding-ice.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmute%2Ftransmute-padding-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71ef9ecbdedb67c32f074884f503f8e582855c2f/tests%2Fui%2Ftransmute%2Ftransmute-padding-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute%2Ftransmute-padding-ice.stderr?ref=71ef9ecbdedb67c32f074884f503f8e582855c2f", "patch": "@@ -1,10 +1,9 @@\n-error[E0277]: `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.\n+error[E0277]: `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`\n   --> $DIR/transmute-padding-ice.rs:27:40\n    |\n LL |     assert::is_maybe_transmutable::<B, A>();\n-   |                                        ^ `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`.\n+   |                                        ^ The size of `B` is smaller than the size of `A`\n    |\n-   = help: the trait `BikeshedIntrinsicFrom<B, assert::Context, Assume { alignment: true, lifetimes: true, safety: true, validity: true }>` is not implemented for `A`\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/transmute-padding-ice.rs:11:14\n    |"}]}