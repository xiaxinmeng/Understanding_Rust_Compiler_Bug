{"sha": "37007a4d01c487a4fbd21306796a118c125a8906", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MDA3YTRkMDFjNDg3YTRmYmQyMTMwNjc5NmExMThjMTI1YTg5MDY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-11T20:02:51Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-11T20:02:51Z"}, "message": "rustc: Populate the upvar environment when calling iterator bodies. Un-XFAIL test/run-pass/iter-range.rs.", "tree": {"sha": "bc92a97a3d3315ccfc42e6df75d0d1139f9c8505", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc92a97a3d3315ccfc42e6df75d0d1139f9c8505"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37007a4d01c487a4fbd21306796a118c125a8906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37007a4d01c487a4fbd21306796a118c125a8906", "html_url": "https://github.com/rust-lang/rust/commit/37007a4d01c487a4fbd21306796a118c125a8906", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37007a4d01c487a4fbd21306796a118c125a8906/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "336f22db61c6c582b4ef019fcfa739e813668fe1", "url": "https://api.github.com/repos/rust-lang/rust/commits/336f22db61c6c582b4ef019fcfa739e813668fe1", "html_url": "https://github.com/rust-lang/rust/commit/336f22db61c6c582b4ef019fcfa739e813668fe1"}], "stats": {"total": 77, "additions": 71, "deletions": 6}, "files": [{"sha": "ccb099904184087c71bc6f535c5a12777b556eed", "filename": "src/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37007a4d01c487a4fbd21306796a118c125a8906/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/37007a4d01c487a4fbd21306796a118c125a8906/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=37007a4d01c487a4fbd21306796a118c125a8906", "patch": "@@ -454,7 +454,6 @@ TEST_XFAILS_RUSTC := $(addprefix test/run-pass/, \\\n                         foreach-put-structured.rs \\\n                         foreach-simple-outer-slot.rs \\\n                         generic-iter-frame.rs \\\n-                        iter-range.rs \\\n                         iter-ret.rs \\\n                         lazychan.rs \\\n                         lib-bitv.rs \\"}, {"sha": "17ec85c762143ffdf7b0c687f472057c0bc6a876", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 71, "deletions": 5, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/37007a4d01c487a4fbd21306796a118c125a8906/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37007a4d01c487a4fbd21306796a118c125a8906/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=37007a4d01c487a4fbd21306796a118c125a8906", "patch": "@@ -3008,12 +3008,49 @@ fn trans_for_each(@block_ctxt cx,\n     }\n \n     auto upvars = collect_upvars(cx, body, decl_id);\n-    if (_vec.len[ast.def_id](upvars) > 0u) {\n-        cx.fcx.ccx.sess.unimpl(\"upvars in for each\");\n-        fail;\n+    auto upvar_count = _vec.len[ast.def_id](upvars);\n+\n+    auto llbindingsptr;\n+    if (upvar_count > 0u) {\n+        // Gather up the upvars.\n+        let vec[ValueRef] llbindings = vec();\n+        let vec[TypeRef] llbindingtys = vec();\n+        for (ast.def_id did in upvars) {\n+            auto llbinding;\n+            alt (cx.fcx.lllocals.find(did)) {\n+                case (none[ValueRef]) {\n+                    llbinding = cx.fcx.llupvars.get(did);\n+                }\n+                case (some[ValueRef](?llval)) { llbinding = llval; }\n+            }\n+            llbindings += vec(llbinding);\n+            llbindingtys += vec(val_ty(llbinding));\n+        }\n+\n+        // Create an array of bindings and copy in aliases to the upvars.\n+        llbindingsptr = cx.build.Alloca(T_struct(llbindingtys));\n+        auto i = 0u;\n+        while (i < upvar_count) {\n+            auto llbindingptr = cx.build.GEP(llbindingsptr,\n+                                             vec(C_int(0), C_int(i as int)));\n+            cx.build.Store(llbindings.(i), llbindingptr);\n+            i += 1u;\n+        }\n+    } else {\n+        // Null bindings.\n+        llbindingsptr = C_null(T_ptr(T_i8()));\n     }\n \n-    auto env_ty = T_opaque_closure_ptr(cx.fcx.ccx.tn);\n+    // Create an environment and populate it with the bindings.\n+    auto llenvptrty = T_closure_ptr(cx.fcx.ccx.tn, T_ptr(T_nil()),\n+                                    val_ty(llbindingsptr), 0u);\n+    auto llenvptr = cx.build.Alloca(llvm.LLVMGetElementType(llenvptrty));\n+\n+    auto llbindingsptrptr = cx.build.GEP(llenvptr,\n+                                         vec(C_int(0),\n+                                             C_int(abi.box_rc_field_body),\n+                                             C_int(2)));\n+    cx.build.Store(llbindingsptr, llbindingsptrptr);\n \n     // Step 2: Declare foreach body function.\n \n@@ -3041,7 +3078,30 @@ fn trans_for_each(@block_ctxt cx,\n     auto fcx = new_fn_ctxt(cx.fcx.ccx, lliterbody);\n     auto bcx = new_top_block_ctxt(fcx);\n \n-    // FIXME: populate lllocals from llenv here.\n+    // Populate the upvars from the environment.\n+    auto llremoteenvptr = bcx.build.PointerCast(fcx.llenv, llenvptrty);\n+    auto llremotebindingsptrptr = bcx.build.GEP(llremoteenvptr,\n+        vec(C_int(0), C_int(abi.box_rc_field_body), C_int(2)));\n+    auto llremotebindingsptr = bcx.build.Load(llremotebindingsptrptr);\n+\n+    auto i = 0u;\n+    while (i < upvar_count) {\n+        auto upvar_id = upvars.(i);\n+        auto llupvarptrptr = bcx.build.GEP(llremotebindingsptr,\n+                                           vec(C_int(0), C_int(i as int)));\n+        auto llupvarptr = bcx.build.Load(llupvarptrptr);\n+        fcx.llupvars.insert(upvar_id, llupvarptr);\n+\n+        i += 1u;\n+    }\n+\n+    // Treat the loop variable as an upvar as well. We copy it to an alloca\n+    // as usual.\n+    auto lllvar = llvm.LLVMGetParam(fcx.llfn, 3u);\n+    auto lllvarptr = bcx.build.Alloca(val_ty(lllvar));\n+    bcx.build.Store(lllvar, lllvarptr);\n+    fcx.llupvars.insert(decl_id, lllvarptr);\n+\n     auto res = trans_block(bcx, body);\n     res.bcx.build.RetVoid();\n \n@@ -3059,6 +3119,12 @@ fn trans_for_each(@block_ctxt cx,\n                                               C_int(abi.fn_field_code)));\n             cx.build.Store(lliterbody, code_cell);\n \n+            auto env_cell = cx.build.GEP(pair, vec(C_int(0),\n+                                                   C_int(abi.fn_field_box)));\n+            auto llenvblobptr = cx.build.PointerCast(llenvptr,\n+                T_opaque_closure_ptr(cx.fcx.ccx.tn));\n+            cx.build.Store(llenvblobptr, env_cell);\n+\n             // log \"lliterbody: \" + val_str(cx.fcx.ccx.tn, lliterbody);\n             ret trans_call(cx, f,\n                            some[ValueRef](cx.build.Load(pair)),"}]}