{"sha": "747dd57e0f2eafc4c632f8698525e45db2f3e5ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0N2RkNTdlMGYyZWFmYzRjNjMyZjg2OTg1MjVlNDVkYjJmM2U1ZWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-04T21:50:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-04T21:50:11Z"}, "message": "Auto merge of #60415 - jespersm:pr_unused_import_45268, r=petrochenkov\n\nFix #45268 by saving all NodeId's for resolved traits.\n\nThis fixes #45268 by saving all NodeId's for resolved traits.\n\nI've verifies this against master (but only on MacOS). However, with some recent changes in master, it appears that there are some failures on my machine. They are unrelated to my changes, anyway.", "tree": {"sha": "c7eefcae787ca6596cdf3a4d54a02bc6d1534d48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7eefcae787ca6596cdf3a4d54a02bc6d1534d48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/747dd57e0f2eafc4c632f8698525e45db2f3e5ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/747dd57e0f2eafc4c632f8698525e45db2f3e5ec", "html_url": "https://github.com/rust-lang/rust/commit/747dd57e0f2eafc4c632f8698525e45db2f3e5ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dd4aae9a83964cc08505da92d07ec68a3a2341d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dd4aae9a83964cc08505da92d07ec68a3a2341d", "html_url": "https://github.com/rust-lang/rust/commit/8dd4aae9a83964cc08505da92d07ec68a3a2341d"}, {"sha": "f5b5ca8b2351791fd3c29223d3e663760b5065ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5b5ca8b2351791fd3c29223d3e663760b5065ae", "html_url": "https://github.com/rust-lang/rust/commit/f5b5ca8b2351791fd3c29223d3e663760b5065ae"}], "stats": {"total": 175, "additions": 127, "deletions": 48}, "files": [{"sha": "ffa33393c3025590a1f06ec7db1fc138f29fbdf5", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=747dd57e0f2eafc4c632f8698525e45db2f3e5ec", "patch": "@@ -2957,6 +2957,7 @@ dependencies = [\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_metadata 0.0.0\",\n+ \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]"}, {"sha": "9ce300ce0484aed49e7ac0360bb4927bd494a2eb", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=747dd57e0f2eafc4c632f8698525e45db2f3e5ec", "patch": "@@ -37,6 +37,7 @@ use rustc_macros::HashStable;\n use serialize::{self, Encoder, Encodable, Decoder, Decodable};\n use std::collections::{BTreeSet, BTreeMap};\n use std::fmt;\n+use smallvec::SmallVec;\n \n /// HIR doesn't commit to a concrete storage type and has its own alias for a vector.\n /// It can be `Vec`, `P<[T]>` or potentially `Box<[T]>`, or some other container with similar\n@@ -2505,10 +2506,13 @@ pub type FreevarMap = NodeMap<Vec<Freevar<ast::NodeId>>>;\n \n pub type CaptureModeMap = NodeMap<CaptureClause>;\n \n+ // The TraitCandidate's import_ids is empty if the trait is defined in the same module, and\n+ // has length > 0 if the trait is found through an chain of imports, starting with the\n+ // import/use statement in the scope where the trait is used.\n #[derive(Clone, Debug)]\n pub struct TraitCandidate {\n     pub def_id: DefId,\n-    pub import_id: Option<NodeId>,\n+    pub import_ids: SmallVec<[NodeId; 1]>,\n }\n \n // Trait method resolution"}, {"sha": "5b2a1e783c03983dbdcf9bbc9d4e847cfb60d36a", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=747dd57e0f2eafc4c632f8698525e45db2f3e5ec", "patch": "@@ -7,6 +7,7 @@ use crate::hir::def_id::{DefId, LocalDefId, CrateNum, CRATE_DEF_INDEX};\n use crate::ich::{StableHashingContext, NodeIdHashingMode, Fingerprint};\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey,\n                                            StableHasher, StableHasherResult};\n+use smallvec::SmallVec;\n use std::mem;\n use syntax::ast;\n use syntax::attr;\n@@ -393,30 +394,30 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::TraitCandidate {\n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n             let hir::TraitCandidate {\n                 def_id,\n-                import_id,\n-            } = *self;\n+                import_ids,\n+            } = self;\n \n             def_id.hash_stable(hcx, hasher);\n-            import_id.hash_stable(hcx, hasher);\n+            import_ids.hash_stable(hcx, hasher);\n         });\n     }\n }\n \n impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::TraitCandidate {\n-    type KeyType = (DefPathHash, Option<(DefPathHash, hir::ItemLocalId)>);\n+    type KeyType = (DefPathHash, SmallVec<[(DefPathHash, hir::ItemLocalId); 1]>);\n \n     fn to_stable_hash_key(&self,\n                           hcx: &StableHashingContext<'a>)\n                           -> Self::KeyType {\n         let hir::TraitCandidate {\n             def_id,\n-            import_id,\n-        } = *self;\n+            import_ids,\n+        } = self;\n \n-        let import_id = import_id.map(|node_id| hcx.node_to_hir_id(node_id))\n-                                 .map(|hir_id| (hcx.local_def_path_hash(hir_id.owner),\n-                                                hir_id.local_id));\n-        (hcx.def_path_hash(def_id), import_id)\n+        let import_keys = import_ids.iter().map(|node_id| hcx.node_to_hir_id(*node_id))\n+                                           .map(|hir_id| (hcx.local_def_path_hash(hir_id.owner),\n+                                                          hir_id.local_id)).collect();\n+        (hcx.def_path_hash(*def_id), import_keys)\n     }\n }\n "}, {"sha": "fa573907d4c735a68752bc5c59076b67e3c0c676", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=747dd57e0f2eafc4c632f8698525e45db2f3e5ec", "patch": "@@ -1,6 +1,7 @@\n use std::hash::{Hash, Hasher, BuildHasher};\n use std::marker::PhantomData;\n use std::mem;\n+use smallvec::SmallVec;\n use crate::sip128::SipHasher128;\n use crate::indexed_vec;\n use crate::bit_set;\n@@ -318,6 +319,15 @@ impl<T: HashStable<CTX>, CTX> HashStable<CTX> for Vec<T> {\n     }\n }\n \n+impl<A, CTX> HashStable<CTX> for SmallVec<[A; 1]> where A: HashStable<CTX> {\n+    #[inline]\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          ctx: &mut CTX,\n+                                          hasher: &mut StableHasher<W>) {\n+        (&self[..]).hash_stable(ctx, hasher);\n+    }\n+}\n+\n impl<T: ?Sized + HashStable<CTX>, CTX> HashStable<CTX> for Box<T> {\n     #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,"}, {"sha": "968a45e241e84b4b860a14845bde74819ee28d33", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=747dd57e0f2eafc4c632f8698525e45db2f3e5ec", "patch": "@@ -20,3 +20,4 @@ errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n+smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "c439ad9c315eebed972d7207d5b4ae4799b884c4", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=747dd57e0f2eafc4c632f8698525e45db2f3e5ec", "patch": "@@ -17,6 +17,7 @@ pub use rustc::hir::def::{Namespace, PerNS};\n \n use GenericParameters::*;\n use RibKind::*;\n+use smallvec::smallvec;\n \n use rustc::hir::map::{Definitions, DefCollector};\n use rustc::hir::{self, PrimTy, Bool, Char, Float, Int, Uint, Str};\n@@ -66,6 +67,7 @@ use std::collections::BTreeSet;\n use std::mem::replace;\n use rustc_data_structures::ptr_key::PtrKey;\n use rustc_data_structures::sync::Lrc;\n+use smallvec::SmallVec;\n \n use diagnostics::{find_span_of_binding_until_next_binding, extend_span_to_previous_binding};\n use resolve_imports::{ImportDirective, ImportDirectiveSubclass, NameResolution, ImportResolver};\n@@ -4582,7 +4584,7 @@ impl<'a> Resolver<'a> {\n                 module.span,\n             ).is_ok() {\n                 let def_id = module.def_id().unwrap();\n-                found_traits.push(TraitCandidate { def_id: def_id, import_id: None });\n+                found_traits.push(TraitCandidate { def_id: def_id, import_ids: smallvec![] });\n             }\n         }\n \n@@ -4641,37 +4643,34 @@ impl<'a> Resolver<'a> {\n                     false,\n                     module.span,\n                 ).is_ok() {\n-                    let import_id = match binding.kind {\n-                        NameBindingKind::Import { directive, .. } => {\n-                            self.maybe_unused_trait_imports.insert(directive.id);\n-                            self.add_to_glob_map(&directive, trait_name);\n-                            Some(directive.id)\n-                        }\n-                        _ => None,\n-                    };\n+                    let import_ids = self.find_transitive_imports(&binding.kind, trait_name);\n                     let trait_def_id = module.def_id().unwrap();\n-                    found_traits.push(TraitCandidate { def_id: trait_def_id, import_id });\n+                    found_traits.push(TraitCandidate { def_id: trait_def_id, import_ids });\n                 }\n             } else if let Res::Def(DefKind::TraitAlias, _) = binding.res() {\n                 // For now, just treat all trait aliases as possible candidates, since we don't\n                 // know if the ident is somewhere in the transitive bounds.\n-\n-                let import_id = match binding.kind {\n-                    NameBindingKind::Import { directive, .. } => {\n-                        self.maybe_unused_trait_imports.insert(directive.id);\n-                        self.add_to_glob_map(&directive, trait_name);\n-                        Some(directive.id)\n-                    }\n-                    _ => None,\n-                };\n+                let import_ids = self.find_transitive_imports(&binding.kind, trait_name);\n                 let trait_def_id = binding.res().def_id();\n-                found_traits.push(TraitCandidate { def_id: trait_def_id, import_id });\n+                found_traits.push(TraitCandidate { def_id: trait_def_id, import_ids });\n             } else {\n                 bug!(\"candidate is not trait or trait alias?\")\n             }\n         }\n     }\n \n+    fn find_transitive_imports(&mut self, mut kind: &NameBindingKind<'_>,\n+                               trait_name: Ident) -> SmallVec<[NodeId; 1]> {\n+        let mut import_ids = smallvec![];\n+        while let NameBindingKind::Import { directive, binding, .. } = kind {\n+            self.maybe_unused_trait_imports.insert(directive.id);\n+            self.add_to_glob_map(&directive, trait_name);\n+            import_ids.push(directive.id);\n+            kind = &binding.kind;\n+        };\n+        import_ids\n+    }\n+\n     fn lookup_import_candidates_from_module<FilterFn>(&mut self,\n                                           lookup_ident: Ident,\n                                           namespace: Namespace,"}, {"sha": "a4b1687ea53012e7f2aed116b495e0e85dca8dc4", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=747dd57e0f2eafc4c632f8698525e45db2f3e5ec", "patch": "@@ -195,8 +195,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             ProbeScope::TraitsInScope\n         )?;\n \n-        if let Some(import_id) = pick.import_id {\n-            let import_def_id = self.tcx.hir().local_def_id_from_hir_id(import_id);\n+        for import_id in &pick.import_ids {\n+            let import_def_id = self.tcx.hir().local_def_id_from_hir_id(*import_id);\n             debug!(\"used_trait_import: {:?}\", import_def_id);\n             Lrc::get_mut(&mut self.tables.borrow_mut().used_trait_imports)\n                 .unwrap().insert(import_def_id);\n@@ -434,7 +434,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let pick = self.probe_for_name(span, probe::Mode::Path, method_name, IsSuggestion(false),\n                                        self_ty, expr_id, ProbeScope::TraitsInScope)?;\n         debug!(\"resolve_ufcs: pick={:?}\", pick);\n-        if let Some(import_id) = pick.import_id {\n+        for import_id in pick.import_ids {\n             let import_def_id = tcx.hir().local_def_id_from_hir_id(import_id);\n             debug!(\"resolve_ufcs: used_trait_import: {:?}\", import_def_id);\n             Lrc::get_mut(&mut self.tables.borrow_mut().used_trait_imports)"}, {"sha": "314f7e97cd28d921d2e633fe5d0b27f4f499ae8e", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=747dd57e0f2eafc4c632f8698525e45db2f3e5ec", "patch": "@@ -35,6 +35,8 @@ use std::mem;\n use std::ops::Deref;\n use std::cmp::max;\n \n+use smallvec::{smallvec, SmallVec};\n+\n use self::CandidateKind::*;\n pub use self::PickKind::*;\n \n@@ -121,7 +123,7 @@ struct Candidate<'tcx> {\n     xform_ret_ty: Option<Ty<'tcx>>,\n     item: ty::AssociatedItem,\n     kind: CandidateKind<'tcx>,\n-    import_id: Option<hir::HirId>,\n+    import_ids: SmallVec<[hir::HirId; 1]>,\n }\n \n #[derive(Debug)]\n@@ -146,7 +148,7 @@ enum ProbeResult {\n pub struct Pick<'tcx> {\n     pub item: ty::AssociatedItem,\n     pub kind: PickKind<'tcx>,\n-    pub import_id: Option<hir::HirId>,\n+    pub import_ids: SmallVec<[hir::HirId; 1]>,\n \n     // Indicates that the source expression should be autoderef'd N times\n     //\n@@ -716,7 +718,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             self.push_candidate(Candidate {\n                 xform_self_ty, xform_ret_ty, item,\n                 kind: InherentImplCandidate(impl_substs, obligations),\n-                import_id: None\n+                import_ids: smallvec![]\n             }, true);\n         }\n     }\n@@ -750,7 +752,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             this.push_candidate(Candidate {\n                 xform_self_ty, xform_ret_ty, item,\n                 kind: ObjectCandidate,\n-                import_id: None\n+                import_ids: smallvec![]\n             }, true);\n         });\n     }\n@@ -799,7 +801,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             this.push_candidate(Candidate {\n                 xform_self_ty, xform_ret_ty, item,\n                 kind: WhereClauseCandidate(poly_trait_ref),\n-                import_id: None\n+                import_ids: smallvec![]\n             }, true);\n         });\n     }\n@@ -838,9 +840,10 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             for trait_candidate in applicable_traits.iter() {\n                 let trait_did = trait_candidate.def_id;\n                 if duplicates.insert(trait_did) {\n-                    let import_id = trait_candidate.import_id.map(|node_id|\n-                        self.fcx.tcx.hir().node_to_hir_id(node_id));\n-                    let result = self.assemble_extension_candidates_for_trait(import_id, trait_did);\n+                    let import_ids = trait_candidate.import_ids.iter().map(|node_id|\n+                        self.fcx.tcx.hir().node_to_hir_id(*node_id)).collect();\n+                    let result = self.assemble_extension_candidates_for_trait(import_ids,\n+                                                                              trait_did);\n                     result?;\n                 }\n             }\n@@ -852,7 +855,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         let mut duplicates = FxHashSet::default();\n         for trait_info in suggest::all_traits(self.tcx) {\n             if duplicates.insert(trait_info.def_id) {\n-                self.assemble_extension_candidates_for_trait(None, trait_info.def_id)?;\n+                self.assemble_extension_candidates_for_trait(smallvec![], trait_info.def_id)?;\n             }\n         }\n         Ok(())\n@@ -890,7 +893,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     }\n \n     fn assemble_extension_candidates_for_trait(&mut self,\n-                                               import_id: Option<hir::HirId>,\n+                                               import_ids: SmallVec<[hir::HirId; 1]>,\n                                                trait_def_id: DefId)\n                                                -> Result<(), MethodError<'tcx>> {\n         debug!(\"assemble_extension_candidates_for_trait(trait_def_id={:?})\",\n@@ -907,7 +910,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 let (xform_self_ty, xform_ret_ty) =\n                     this.xform_self_ty(&item, new_trait_ref.self_ty(), new_trait_ref.substs);\n                 this.push_candidate(Candidate {\n-                    xform_self_ty, xform_ret_ty, item, import_id,\n+                    xform_self_ty, xform_ret_ty, item, import_ids: import_ids.clone(),\n                     kind: TraitCandidate(new_trait_ref),\n                 }, true);\n             });\n@@ -924,7 +927,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 let (xform_self_ty, xform_ret_ty) =\n                     self.xform_self_ty(&item, trait_ref.self_ty(), trait_substs);\n                 self.push_candidate(Candidate {\n-                    xform_self_ty, xform_ret_ty, item, import_id,\n+                    xform_self_ty, xform_ret_ty, item, import_ids: import_ids.clone(),\n                     kind: TraitCandidate(trait_ref),\n                 }, false);\n             }\n@@ -1413,7 +1416,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         Some(Pick {\n             item: probes[0].0.item.clone(),\n             kind: TraitPick,\n-            import_id: probes[0].0.import_id,\n+            import_ids: probes[0].0.import_ids.clone(),\n             autoderefs: 0,\n             autoref: None,\n             unsize: None,\n@@ -1652,7 +1655,7 @@ impl<'tcx> Candidate<'tcx> {\n                     WhereClausePick(trait_ref.clone())\n                 }\n             },\n-            import_id: self.import_id,\n+            import_ids: self.import_ids.clone(),\n             autoderefs: 0,\n             autoref: None,\n             unsize: None,"}, {"sha": "0bd775111359389932281fd6355f34832ad77aef", "filename": "src/test/ui/lint/unused_import_warning_issue_45268.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/src%2Ftest%2Fui%2Flint%2Funused_import_warning_issue_45268.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/src%2Ftest%2Fui%2Flint%2Funused_import_warning_issue_45268.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_import_warning_issue_45268.rs?ref=747dd57e0f2eafc4c632f8698525e45db2f3e5ec", "patch": "@@ -0,0 +1,48 @@\n+// compile-pass\n+\n+#![warn(unused_imports)] // Warning explanation here, it's OK\n+\n+mod test {\n+    pub trait A {\n+        fn a();\n+    }\n+\n+    impl A for () {\n+        fn a() { }\n+    }\n+\n+    pub trait B {\n+        fn b(self);\n+    }\n+\n+    impl B for () {\n+        fn b(self) { }\n+    }\n+\n+    pub trait Unused {\n+    }\n+}\n+\n+use test::Unused;   // This is really unused, so warning is OK\n+use test::A;        // This is used by the test2::func() through import of super::*\n+use test::B;        // This is used by the test2::func() through import of super::*\n+\n+mod test2 {\n+    use super::*;\n+    pub fn func() {\n+        let _ = <()>::a();\n+        let _ = ().b();\n+        test3::inner_func();\n+    }\n+    mod test3 {\n+        use super::*;\n+        pub fn inner_func() {\n+            let _ = <()>::a();\n+            let _ = ().b();\n+        }\n+    }\n+}\n+\n+fn main() {\n+    test2::func();\n+}"}, {"sha": "7392e99f7aef3298468dc2d3a4c9092eca29f389", "filename": "src/test/ui/lint/unused_import_warning_issue_45268.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/src%2Ftest%2Fui%2Flint%2Funused_import_warning_issue_45268.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/src%2Ftest%2Fui%2Flint%2Funused_import_warning_issue_45268.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_import_warning_issue_45268.stderr?ref=747dd57e0f2eafc4c632f8698525e45db2f3e5ec", "patch": "@@ -0,0 +1,12 @@\n+warning: unused import: `test::Unused`\n+  --> $DIR/unused_import_warning_issue_45268.rs:26:5\n+   |\n+LL | use test::Unused;   // This is really unused, so warning is OK\n+   |     ^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/unused_import_warning_issue_45268.rs:3:9\n+   |\n+LL | #![warn(unused_imports)] // Warning explanation here, it's OK\n+   |         ^^^^^^^^^^^^^^\n+"}]}