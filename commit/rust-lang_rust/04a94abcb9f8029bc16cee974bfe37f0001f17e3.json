{"sha": "04a94abcb9f8029bc16cee974bfe37f0001f17e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YTk0YWJjYjlmODAyOWJjMTZjZWU5NzRiZmUzN2YwMDAxZjE3ZTM=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-10-05T00:23:02Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-10-05T00:23:55Z"}, "message": "Remove `DefId` from `MirBorrowckCtxt`", "tree": {"sha": "8fab9f6b8916ef466138b142035aa02e51017e81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fab9f6b8916ef466138b142035aa02e51017e81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04a94abcb9f8029bc16cee974bfe37f0001f17e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04a94abcb9f8029bc16cee974bfe37f0001f17e3", "html_url": "https://github.com/rust-lang/rust/commit/04a94abcb9f8029bc16cee974bfe37f0001f17e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04a94abcb9f8029bc16cee974bfe37f0001f17e3/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fff3b7596af4e8c40dd54be2fb0648327244f097", "url": "https://api.github.com/repos/rust-lang/rust/commits/fff3b7596af4e8c40dd54be2fb0648327244f097", "html_url": "https://github.com/rust-lang/rust/commit/fff3b7596af4e8c40dd54be2fb0648327244f097"}], "stats": {"total": 53, "additions": 27, "deletions": 26}, "files": [{"sha": "dca0d6d7790d495b54b936867e62ced70616768a", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/04a94abcb9f8029bc16cee974bfe37f0001f17e3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a94abcb9f8029bc16cee974bfe37f0001f17e3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=04a94abcb9f8029bc16cee974bfe37f0001f17e3", "patch": "@@ -336,10 +336,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 };\n                 if let ty::Param(param_ty) = ty.kind() {\n                     let tcx = self.infcx.tcx;\n-                    let generics = tcx.generics_of(self.mir_def_id);\n+                    let generics = tcx.generics_of(self.mir_def_id());\n                     let param = generics.type_param(&param_ty, tcx);\n-                    if let Some(generics) =\n-                        tcx.hir().get_generics(tcx.closure_base_def_id(self.mir_def_id.to_def_id()))\n+                    if let Some(generics) = tcx\n+                        .hir()\n+                        .get_generics(tcx.closure_base_def_id(self.mir_def_id().to_def_id()))\n                     {\n                         suggest_constraining_type_param(\n                             tcx,\n@@ -1004,7 +1005,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 format!(\"`{}` would have to be valid for `{}`...\", name, region_name),\n             );\n \n-            let fn_hir_id = self.infcx.tcx.hir().local_def_id_to_hir_id(self.mir_def_id);\n+            let fn_hir_id = self.mir_hir_id();\n             err.span_label(\n                 drop_span,\n                 format!(\n@@ -1019,7 +1020,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             match &self\n                                 .infcx\n                                 .tcx\n-                                .typeck(self.mir_def_id)\n+                                .typeck(self.mir_def_id())\n                                 .node_type(fn_hir_id)\n                                 .kind()\n                             {\n@@ -1369,7 +1370,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ) -> DiagnosticBuilder<'cx> {\n         let tcx = self.infcx.tcx;\n \n-        let (_, escapes_from) = tcx.article_and_description(self.mir_def_id.to_def_id());\n+        let (_, escapes_from) = tcx.article_and_description(self.mir_def_id().to_def_id());\n \n         let mut err =\n             borrowck_errors::borrowed_data_escapes_closure(tcx, escape_span, escapes_from);\n@@ -1708,15 +1709,15 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ) -> Option<AnnotatedBorrowFnSignature<'tcx>> {\n         // Define a fallback for when we can't match a closure.\n         let fallback = || {\n-            let is_closure = self.infcx.tcx.is_closure(self.mir_def_id.to_def_id());\n+            let is_closure = self.infcx.tcx.is_closure(self.mir_def_id().to_def_id());\n             if is_closure {\n                 None\n             } else {\n-                let ty = self.infcx.tcx.type_of(self.mir_def_id);\n+                let ty = self.infcx.tcx.type_of(self.mir_def_id());\n                 match ty.kind() {\n                     ty::FnDef(_, _) | ty::FnPtr(_) => self.annotate_fn_sig(\n-                        self.mir_def_id.to_def_id(),\n-                        self.infcx.tcx.fn_sig(self.mir_def_id),\n+                        self.mir_def_id().to_def_id(),\n+                        self.infcx.tcx.fn_sig(self.mir_def_id()),\n                     ),\n                     _ => None,\n                 }"}, {"sha": "b1cebbd1f381bef796bac88a9dd35b378c6ee0e8", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04a94abcb9f8029bc16cee974bfe37f0001f17e3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a94abcb9f8029bc16cee974bfe37f0001f17e3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=04a94abcb9f8029bc16cee974bfe37f0001f17e3", "patch": "@@ -331,7 +331,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 self.cannot_move_out_of_interior_noncopy(span, ty, None)\n             }\n             ty::Closure(def_id, closure_substs)\n-                if def_id.as_local() == Some(self.mir_def_id) && upvar_field.is_some() =>\n+                if def_id.as_local() == Some(self.mir_def_id()) && upvar_field.is_some() =>\n             {\n                 let closure_kind_ty = closure_substs.as_closure().kind_ty();\n                 let closure_kind = closure_kind_ty.to_opt_closure_kind();"}, {"sha": "9728662c98494bb8ec14c65ddb2946f4045deb40", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04a94abcb9f8029bc16cee974bfe37f0001f17e3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a94abcb9f8029bc16cee974bfe37f0001f17e3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=04a94abcb9f8029bc16cee974bfe37f0001f17e3", "patch": "@@ -492,7 +492,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         err.span_label(sp, format!(\"cannot {}\", act));\n \n         let hir = self.infcx.tcx.hir();\n-        let closure_id = hir.local_def_id_to_hir_id(self.mir_def_id);\n+        let closure_id = self.mir_hir_id();\n         let fn_call_id = hir.get_parent_node(closure_id);\n         let node = hir.get(fn_call_id);\n         let item_id = hir.enclosing_body_owner(fn_call_id);"}, {"sha": "b145e1d5fa33310ede6a24cc184bcbc29dd0e9f9", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04a94abcb9f8029bc16cee974bfe37f0001f17e3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a94abcb9f8029bc16cee974bfe37f0001f17e3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=04a94abcb9f8029bc16cee974bfe37f0001f17e3", "patch": "@@ -515,7 +515,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let mut diag =\n             self.infcx.tcx.sess.struct_span_err(*span, \"lifetime may not live long enough\");\n \n-        let (_, mir_def_name) = self.infcx.tcx.article_and_description(self.mir_def_id.to_def_id());\n+        let (_, mir_def_name) =\n+            self.infcx.tcx.article_and_description(self.mir_def_id().to_def_id());\n \n         let fr_name = self.give_region_a_name(*fr).unwrap();\n         fr_name.highlight_region_name(&mut diag);"}, {"sha": "2e5a231fef057d3123022230261673ca78057f31", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/04a94abcb9f8029bc16cee974bfe37f0001f17e3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a94abcb9f8029bc16cee974bfe37f0001f17e3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=04a94abcb9f8029bc16cee974bfe37f0001f17e3", "patch": "@@ -147,6 +147,14 @@ impl Display for RegionName {\n }\n \n impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n+    crate fn mir_def_id(&self) -> hir::def_id::LocalDefId {\n+        self.body.source.def_id().as_local().unwrap()\n+    }\n+\n+    crate fn mir_hir_id(&self) -> hir::HirId {\n+        self.infcx.tcx.hir().local_def_id_to_hir_id(self.mir_def_id())\n+    }\n+\n     /// Generate a synthetic region named `'N`, where `N` is the next value of the counter. Then,\n     /// increment the counter.\n     ///\n@@ -266,12 +274,11 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                 }\n \n                 ty::BoundRegion::BrEnv => {\n-                    let mir_hir_id = self.infcx.tcx.hir().local_def_id_to_hir_id(self.mir_def_id);\n                     let def_ty = self.regioncx.universal_regions().defining_ty;\n \n                     if let DefiningTy::Closure(_, substs) = def_ty {\n                         let args_span = if let hir::ExprKind::Closure(_, _, _, span, _) =\n-                            tcx.hir().expect_expr(mir_hir_id).kind\n+                            tcx.hir().expect_expr(self.mir_hir_id()).kind\n                         {\n                             span\n                         } else {\n@@ -361,8 +368,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         &self,\n         argument_index: usize,\n     ) -> Option<&hir::Ty<'tcx>> {\n-        let mir_hir_id = self.infcx.tcx.hir().local_def_id_to_hir_id(self.mir_def_id);\n-        let fn_decl = self.infcx.tcx.hir().fn_decl_by_hir_id(mir_hir_id)?;\n+        let fn_decl = self.infcx.tcx.hir().fn_decl_by_hir_id(self.mir_hir_id())?;\n         let argument_hir_ty: &hir::Ty<'_> = fn_decl.inputs.get(argument_index)?;\n         match argument_hir_ty.kind {\n             // This indicates a variable with no type annotation, like\n@@ -649,9 +655,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         let type_name =\n             self.infcx.extract_inference_diagnostics_data(return_ty.into(), Some(highlight)).name;\n \n-        let mir_hir_id = tcx.hir().local_def_id_to_hir_id(self.mir_def_id);\n-\n-        let (return_span, mir_description) = match tcx.hir().get(mir_hir_id) {\n+        let (return_span, mir_description) = match tcx.hir().get(self.mir_hir_id()) {\n             hir::Node::Expr(hir::Expr {\n                 kind: hir::ExprKind::Closure(_, return_ty, _, span, gen_move),\n                 ..\n@@ -702,9 +706,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         let type_name =\n             self.infcx.extract_inference_diagnostics_data(yield_ty.into(), Some(highlight)).name;\n \n-        let mir_hir_id = tcx.hir().local_def_id_to_hir_id(self.mir_def_id);\n-\n-        let yield_span = match tcx.hir().get(mir_hir_id) {\n+        let yield_span = match tcx.hir().get(self.mir_hir_id()) {\n             hir::Node::Expr(hir::Expr {\n                 kind: hir::ExprKind::Closure(_, _, _, span, _), ..\n             }) => (tcx.sess.source_map().end_point(*span)),"}, {"sha": "9b34db1de403f51b352d44ca3a77aa61a5d7adf6", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04a94abcb9f8029bc16cee974bfe37f0001f17e3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a94abcb9f8029bc16cee974bfe37f0001f17e3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=04a94abcb9f8029bc16cee974bfe37f0001f17e3", "patch": "@@ -285,7 +285,6 @@ fn do_mir_borrowck<'a, 'tcx>(\n                 infcx,\n                 param_env,\n                 body: promoted_body,\n-                mir_def_id: def.did,\n                 move_data: &move_data,\n                 location_table: &LocationTable::new(promoted_body),\n                 movable_generator,\n@@ -319,7 +318,6 @@ fn do_mir_borrowck<'a, 'tcx>(\n         infcx,\n         param_env,\n         body,\n-        mir_def_id: def.did,\n         move_data: &mdpe.move_data,\n         location_table,\n         movable_generator,\n@@ -473,7 +471,6 @@ crate struct MirBorrowckCtxt<'cx, 'tcx> {\n     crate infcx: &'cx InferCtxt<'cx, 'tcx>,\n     param_env: ParamEnv<'tcx>,\n     body: &'cx Body<'tcx>,\n-    mir_def_id: LocalDefId,\n     move_data: &'cx MoveData<'tcx>,\n \n     /// Map from MIR `Location` to `LocationIndex`; created"}]}