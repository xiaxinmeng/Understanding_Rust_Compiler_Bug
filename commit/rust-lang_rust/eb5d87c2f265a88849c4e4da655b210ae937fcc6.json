{"sha": "eb5d87c2f265a88849c4e4da655b210ae937fcc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNWQ4N2MyZjI2NWE4ODg0OWM0ZTRkYTY1NWIyMTBhZTkzN2ZjYzY=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-05-06T14:53:18Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-05-06T14:53:18Z"}, "message": "Merge pull request #903 from oli-obk/master\n\nuse remark-lint to check README.md", "tree": {"sha": "6ba30a53ed8ef4d94ed4ead5eeef956c568b197c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ba30a53ed8ef4d94ed4ead5eeef956c568b197c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb5d87c2f265a88849c4e4da655b210ae937fcc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb5d87c2f265a88849c4e4da655b210ae937fcc6", "html_url": "https://github.com/rust-lang/rust/commit/eb5d87c2f265a88849c4e4da655b210ae937fcc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb5d87c2f265a88849c4e4da655b210ae937fcc6/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c1d3272dd368267838669274b488bb183d9ce32", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c1d3272dd368267838669274b488bb183d9ce32", "html_url": "https://github.com/rust-lang/rust/commit/3c1d3272dd368267838669274b488bb183d9ce32"}, {"sha": "3ec1b9a40a2d91eae106632d5a75899766ef89ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ec1b9a40a2d91eae106632d5a75899766ef89ed", "html_url": "https://github.com/rust-lang/rust/commit/3ec1b9a40a2d91eae106632d5a75899766ef89ed"}], "stats": {"total": 103, "additions": 75, "deletions": 28}, "files": [{"sha": "22bae13ccf8850d433afcec8a850480bcdddf974", "filename": ".remarkrc.json", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb5d87c2f265a88849c4e4da655b210ae937fcc6/.remarkrc.json", "raw_url": "https://github.com/rust-lang/rust/raw/eb5d87c2f265a88849c4e4da655b210ae937fcc6/.remarkrc.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.remarkrc.json?ref=eb5d87c2f265a88849c4e4da655b210ae937fcc6", "patch": "@@ -0,0 +1,12 @@\n+{\n+  \"plugins\": {\n+    \"lint\": {\n+      \"table-pipes\": false,\n+      \"table-pipe-alignment\": false,\n+      \"maximum-line-length\": 120\n+    }\n+  },\n+  \"settings\": {\n+    \"commonmark\": true\n+  }\n+}"}, {"sha": "012d6045cd23db7eb4e949b9b63d9db7066f2d6f", "filename": ".travis.yml", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eb5d87c2f265a88849c4e4da655b210ae937fcc6/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/eb5d87c2f265a88849c4e4da655b210ae937fcc6/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=eb5d87c2f265a88849c4e4da655b210ae937fcc6", "patch": "@@ -7,7 +7,15 @@ env:\n    # TRAVIS_TOKEN_CLIPPY_SERVICE\n    secure: dj8SwwuRGuzbo2wZq5z7qXIf7P3p7cbSGs1I3pvXQmB6a58gkLiRn/qBcIIegdt/nzXs+Z0Nug+DdesYVeUPxk1hIa/eeU8p6mpyTtZ+30H4QVgVzd0VCthB5F/NUiPVxTgpGpEgCM9/p72xMwTn7AAJfsGqk7AJ4FS5ZZKhqFI=\n \n+install:\n+  - . $HOME/.nvm/nvm.sh\n+  - nvm install stable\n+  - nvm use stable\n+  - npm install remark remark-lint\n+\n script:\n+ - set -e\n+ - remark -f README.md > /dev/null\n  - python util/update_lints.py -c\n  - cargo build --features debugging\n  - rm -rf target/ Cargo.lock"}, {"sha": "17c0ce5235ef412edc2a8e8a7a261d7c25158dec", "filename": "README.md", "status": "modified", "additions": 53, "deletions": 26, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/eb5d87c2f265a88849c4e4da655b210ae937fcc6/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/eb5d87c2f265a88849c4e4da655b210ae937fcc6/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=eb5d87c2f265a88849c4e4da655b210ae937fcc6", "patch": "@@ -1,4 +1,5 @@\n-#rust-clippy\n+# rust-clippy\n+\n [![Build Status](https://travis-ci.org/Manishearth/rust-clippy.svg?branch=master)](https://travis-ci.org/Manishearth/rust-clippy)\n [![Clippy Linting Result](http://clippy.bashy.io/github/Manishearth/rust-clippy/master/badge.svg)](http://clippy.bashy.io/github/Manishearth/rust-clippy/master/log)\n [![Current Version](http://meritbadge.herokuapp.com/clippy)](https://crates.io/crates/clippy)\n@@ -7,13 +8,15 @@\n A collection of lints to catch common mistakes and improve your Rust code.\n \n Table of contents:\n-* [Lint list](#lints)\n-* [Usage instructions](#usage)\n-* [Configuration](#configuration)\n-* [*clippy-service*](#link-with-clippy-service)\n-* [License](#license)\n \n-##Lints\n+*   [Lint list](#lints)\n+*   [Usage instructions](#usage)\n+*   [Configuration](#configuration)\n+*   [*clippy-service*](#link-with-clippy-service)\n+*   [License](#license)\n+\n+## Lints\n+\n There are 146 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n@@ -27,7 +30,7 @@ name\n [block_in_if_condition_stmt](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_stmt)             | warn    | avoid complex blocks in conditions, instead move the block higher and bind it with 'let'; e.g: `if { let x = true; x } ...`\n [bool_comparison](https://github.com/Manishearth/rust-clippy/wiki#bool_comparison)                                   | warn    | comparing a variable to a boolean, e.g. `if x == true`\n [box_vec](https://github.com/Manishearth/rust-clippy/wiki#box_vec)                                                   | warn    | usage of `Box<Vec<T>>`, vector elements are already on the heap\n-[boxed_local](https://github.com/Manishearth/rust-clippy/wiki#boxed_local)                                           | warn    | using Box<T> where unnecessary\n+[boxed_local](https://github.com/Manishearth/rust-clippy/wiki#boxed_local)                                           | warn    | using `Box<T>` where unnecessary\n [cast_possible_truncation](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_truncation)                 | allow   | casts that may cause truncation of the value, e.g `x as u8` where `x: u32`, or `x as i32` where `x: f32`\n [cast_possible_wrap](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_wrap)                             | allow   | casts that may cause wrapping around the value, e.g `x as i32` where `x: u32` and `x > i32::MAX`\n [cast_precision_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_precision_loss)                           | allow   | casts that cause loss of precision, e.g `x as f32` where `x: u64`\n@@ -145,7 +148,7 @@ name\n [transmute_ptr_to_ref](https://github.com/Manishearth/rust-clippy/wiki#transmute_ptr_to_ref)                         | warn    | transmutes from a pointer to a reference type\n [trivial_regex](https://github.com/Manishearth/rust-clippy/wiki#trivial_regex)                                       | warn    | finds trivial regular expressions in `Regex::new(_)` invocations\n [type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                                   | warn    | usage of very complex types; recommends factoring out parts into `type` definitions\n-[unicode_not_nfc](https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc)                                   | allow   | using a unicode literal not in NFC normal form (see http://www.unicode.org/reports/tr15/ for further information)\n+[unicode_not_nfc](https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc)                                   | allow   | using a unicode literal not in NFC normal form (see [unicode tr15](http://www.unicode.org/reports/tr15/) for further information)\n [unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                                 | warn    | comparing unit values (which is always `true` or `false`, respectively)\n [unnecessary_mut_passed](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_mut_passed)                     | warn    | an argument is passed as a mutable reference although the function/method only demands an immutable reference\n [unneeded_field_pattern](https://github.com/Manishearth/rust-clippy/wiki#unneeded_field_pattern)                     | warn    | Struct fields are bound to a wildcard instead of using `..`\n@@ -167,19 +170,25 @@ name\n \n More to come, please [file an issue](https://github.com/Manishearth/rust-clippy/issues) if you have ideas!\n \n-##Usage\n+## Usage\n \n-Compiler plugins are highly unstable and will only work with a nightly Rust for now. Since stable Rust is backwards compatible, you should be able to compile your stable programs with nightly Rust with clippy plugged in to circumvent this.\n+Compiler plugins are highly unstable and will only work with a nightly Rust for now.\n+Since stable Rust is backwards compatible, you should be able to compile\n+your stable programs with nightly Rust with clippy plugged in to circumvent\n+this.\n \n Add in your `Cargo.toml`:\n+\n ```toml\n [dependencies]\n clippy = \"*\"\n ```\n \n-You then need to add `#![feature(plugin)]` and `#![plugin(clippy)]` to the top of your crate entry point (`main.rs` or `lib.rs`).\n+You then need to add `#![feature(plugin)]` and `#![plugin(clippy)]` to the top\n+of your crate entry point (`main.rs` or `lib.rs`).\n \n Sample `main.rs`:\n+\n ```rust\n #![feature(plugin)]\n \n@@ -196,7 +205,8 @@ fn main(){\n ```\n \n Produces this warning:\n-```\n+\n+```terminal\n src/main.rs:8:5: 11:6 warning: you seem to be trying to use match for destructuring a single type. Consider using `if let`, #[warn(single_match)] on by default\n src/main.rs:8     match x {\n src/main.rs:9         Some(y) => println!(\"{:?}\", y),\n@@ -206,29 +216,37 @@ src/main.rs:8:5: 11:6 help: Try\n if let Some(y) = x { println!(\"{:?}\", y) }\n ```\n \n-\n-An alternate way to use clippy is by compiling and using [`cargo clippy`](https://github.com/arcnmx/cargo-clippy), a custom cargo subcommand that runs clippy on a given project.\n+An alternate way to use clippy is by compiling and using [`cargo clippy`](https://github.com/arcnmx/cargo-clippy),\n+a custom cargo subcommand that runs clippy on a given project.\n \n You can add options  to `allow`/`warn`/`deny`:\n-- the whole set of `Warn` lints using the `clippy` lint group (`#![deny(clippy)]`)\n-- all lints using both the `clippy` and `clippy_pedantic` lint groups (`#![deny(clippy)]`, `#![deny(clippy_pedantic)]`). Note that `clippy_pedantic` contains some very aggressive lints prone to false positives.\n-- only some lints (`#![deny(single_match, box_vec)]`, etc)\n-- `allow`/`warn`/`deny` can be limited to a single function or module using `#[allow(...)]`, etc\n+\n+*   the whole set of `Warn` lints using the `clippy` lint group (`#![deny(clippy)]`)\n+\n+*   all lints using both the `clippy` and `clippy_pedantic` lint groups (`#![deny(clippy)]`,\n+    `#![deny(clippy_pedantic)]`). Note that `clippy_pedantic` contains some very aggressive\n+    lints prone to false positives.\n+\n+*   only some lints (`#![deny(single_match, box_vec)]`, etc)\n+\n+*   `allow`/`warn`/`deny` can be limited to a single function or module using `#[allow(...)]`, etc\n \n Note: `deny` produces errors instead of warnings\n \n To have cargo compile your crate with clippy without needing `#![plugin(clippy)]`\n in your code, you can use:\n \n-```\n+```terminal\n cargo rustc -- -L /path/to/clippy_so -Z extra-plugins=clippy\n ```\n \n-*[Note](https://github.com/Manishearth/rust-clippy/wiki#a-word-of-warning):* Be sure that clippy was compiled with the same version of rustc that cargo invokes here!\n+*[Note](https://github.com/Manishearth/rust-clippy/wiki#a-word-of-warning):*\n+Be sure that clippy was compiled with the same version of rustc that cargo invokes here!\n \n If you want to make clippy an optional dependency, you can do the following:\n \n In your `Cargo.toml`:\n+\n ```toml\n [dependencies]\n clippy = {version = \"*\", optional = true}\n@@ -245,9 +263,13 @@ And, in your `main.rs` or `lib.rs`:\n #![cfg_attr(feature=\"clippy\", plugin(clippy))]\n ```\n \n-Instead of adding the `cfg_attr` attributes you can also run clippy on demand: `cargo rustc --features clippy -- -Z no-trans -Z extra-plugins=clippy` (the `-Z no trans`, while not neccessary, will stop the compilation process after typechecking (and lints) have completed, which can significantly reduce the runtime).\n+Instead of adding the `cfg_attr` attributes you can also run clippy on demand:\n+`cargo rustc --features clippy -- -Z no-trans -Z extra-plugins=clippy`\n+(the `-Z no trans`, while not neccessary, will stop the compilation process after\n+typechecking (and lints) have completed, which can significantly reduce the runtime).\n \n ## Configuration\n+\n Some lints can be configured in a `clippy.toml` file. It contains basic `variable = value` mapping eg.\n \n ```toml\n@@ -259,16 +281,21 @@ See the wiki for more information about which lints can be configured and the\n meaning of the variables.\n \n You can also specify the path to the configuration file with:\n+\n ```rust\n #![plugin(clippy(conf_file=\"path/to/clippy's/configuration\"))]\n ```\n \n-##Link with clippy service\n+## Link with clippy service\n+\n `clippy-service` is a rust web initiative providing `rust-clippy` as a web service.\n \n-Both projects are independent and maintained by different people (even if some `clippy-service`'s contributions are authored by some `rust-clippy` members).\n+Both projects are independent and maintained by different people\n+(even if some `clippy-service`'s contributions are authored by some `rust-clippy` members).\n \n You can check out this great service at [clippy.bashy.io](https://clippy.bashy.io/).\n \n-##License\n-Licensed under [MPL](https://www.mozilla.org/MPL/2.0/). If you're having issues with the license, let me know and I'll try to change it to something more permissive.\n+## License\n+\n+Licensed under [MPL](https://www.mozilla.org/MPL/2.0/).\n+If you're having issues with the license, let me know and I'll try to change it to something more permissive."}, {"sha": "ff841b18066818d288605eb48132fca525c3bf0a", "filename": "src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb5d87c2f265a88849c4e4da655b210ae937fcc6/src%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5d87c2f265a88849c4e4da655b210ae937fcc6/src%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fescape.rs?ref=eb5d87c2f265a88849c4e4da655b210ae937fcc6", "patch": "@@ -31,7 +31,7 @@ pub struct EscapePass;\n /// }\n /// ```\n declare_lint! {\n-    pub BOXED_LOCAL, Warn, \"using Box<T> where unnecessary\"\n+    pub BOXED_LOCAL, Warn, \"using `Box<T>` where unnecessary\"\n }\n \n fn is_non_trait_box(ty: ty::Ty) -> bool {"}, {"sha": "8271fd3ed661b190ab96fbf86f9930edc55c5c2d", "filename": "src/unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb5d87c2f265a88849c4e4da655b210ae937fcc6/src%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5d87c2f265a88849c4e4da655b210ae937fcc6/src%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funicode.rs?ref=eb5d87c2f265a88849c4e4da655b210ae937fcc6", "patch": "@@ -40,7 +40,7 @@ declare_lint! {\n declare_lint! {\n     pub UNICODE_NOT_NFC, Allow,\n     \"using a unicode literal not in NFC normal form (see \\\n-     http://www.unicode.org/reports/tr15/ for further information)\"\n+     [unicode tr15](http://www.unicode.org/reports/tr15/) for further information)\"\n }\n \n "}]}