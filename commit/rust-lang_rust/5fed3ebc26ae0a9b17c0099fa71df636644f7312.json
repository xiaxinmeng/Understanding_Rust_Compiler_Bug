{"sha": "5fed3ebc26ae0a9b17c0099fa71df636644f7312", "node_id": "C_kwDOAAsO6NoAKDVmZWQzZWJjMjZhZTBhOWIxN2MwMDk5ZmE3MWRmNjM2NjQ0ZjczMTI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-03T01:17:35Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-07T01:40:31Z"}, "message": "adjust code for copy_op changes", "tree": {"sha": "18da97a0ea5461d529db82dfce09148a01ccabef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18da97a0ea5461d529db82dfce09148a01ccabef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fed3ebc26ae0a9b17c0099fa71df636644f7312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fed3ebc26ae0a9b17c0099fa71df636644f7312", "html_url": "https://github.com/rust-lang/rust/commit/5fed3ebc26ae0a9b17c0099fa71df636644f7312", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fed3ebc26ae0a9b17c0099fa71df636644f7312/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9176c747e626383e37832514130d078b611f995", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9176c747e626383e37832514130d078b611f995", "html_url": "https://github.com/rust-lang/rust/commit/e9176c747e626383e37832514130d078b611f995"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "12df9e271fb961d9d91c62b4194fc189dcdab2ad", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fed3ebc26ae0a9b17c0099fa71df636644f7312/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fed3ebc26ae0a9b17c0099fa71df636644f7312/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=5fed3ebc26ae0a9b17c0099fa71df636644f7312", "patch": "@@ -169,7 +169,7 @@ impl Provenance for Tag {\n                 write!(f, \"{:?}\", sb)?;\n             }\n             Tag::Wildcard => {\n-                write!(f, \"[Wildcard]\")?;\n+                write!(f, \"[wildcard]\")?;\n             }\n         }\n "}, {"sha": "ab79438c734de429bb79a1075d6087c75fbb4e54", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fed3ebc26ae0a9b17c0099fa71df636644f7312/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fed3ebc26ae0a9b17c0099fa71df636644f7312/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=5fed3ebc26ae0a9b17c0099fa71df636644f7312", "patch": "@@ -68,12 +68,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"volatile_load\" => {\n                 let [place] = check_arg_count(args)?;\n                 let place = this.deref_operand(place)?;\n-                this.copy_op(&place.into(), dest)?;\n+                this.copy_op(&place.into(), dest, /*allow_transmute*/ false)?;\n             }\n             \"volatile_store\" => {\n                 let [place, dest] = check_arg_count(args)?;\n                 let place = this.deref_operand(place)?;\n-                this.copy_op(dest, &place.into())?;\n+                this.copy_op(dest, &place.into(), /*allow_transmute*/ false)?;\n             }\n \n             \"write_bytes\" | \"volatile_set_memory\" => {"}, {"sha": "b752e5504d4c922ef838f1614dca74a9d6fe981d", "filename": "tests/pass/transmute_fat.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5fed3ebc26ae0a9b17c0099fa71df636644f7312/tests%2Fpass%2Ftransmute_fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fed3ebc26ae0a9b17c0099fa71df636644f7312/tests%2Fpass%2Ftransmute_fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Ftransmute_fat.rs?ref=5fed3ebc26ae0a9b17c0099fa71df636644f7312", "patch": "@@ -3,6 +3,7 @@\n \n fn main() {\n     // If we are careful, we can exploit data layout...\n+    // This is a tricky case since we are transmuting a ScalarPair type to a non-ScalarPair type.\n     let raw = unsafe { std::mem::transmute::<&[u8], [*const u8; 2]>(&[42]) };\n     let ptr: *const u8 = unsafe { std::mem::transmute_copy(&raw) };\n     assert_eq!(unsafe { *ptr }, 42);"}]}