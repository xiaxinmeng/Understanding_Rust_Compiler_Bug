{"sha": "80ed505c41319f2fbbc7e97189e62b38c47b5a70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwZWQ1MDVjNDEzMTlmMmZiYmM3ZTk3MTg5ZTYyYjM4YzQ3YjVhNzA=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-04T19:47:05Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-04T19:47:05Z"}, "message": "Use single-char patter on {ends,starts}_with and remove clone on copy type.\n\nThese were introduced since I last fixed most of these occurences. (clippy::clone_on_copy, clippy::single_char_pattern)", "tree": {"sha": "c02fa46f66014a07df55694a22cbe07b46716b7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c02fa46f66014a07df55694a22cbe07b46716b7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80ed505c41319f2fbbc7e97189e62b38c47b5a70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80ed505c41319f2fbbc7e97189e62b38c47b5a70", "html_url": "https://github.com/rust-lang/rust/commit/80ed505c41319f2fbbc7e97189e62b38c47b5a70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80ed505c41319f2fbbc7e97189e62b38c47b5a70/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8d2004c6ffb8b66eac90e75aa23012130adf9f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d2004c6ffb8b66eac90e75aa23012130adf9f9", "html_url": "https://github.com/rust-lang/rust/commit/d8d2004c6ffb8b66eac90e75aa23012130adf9f9"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "32700c6500bc86619a05fd1d09a546c7d64c6885", "filename": "src/librustc_errors/registry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80ed505c41319f2fbbc7e97189e62b38c47b5a70/src%2Flibrustc_errors%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ed505c41319f2fbbc7e97189e62b38c47b5a70/src%2Flibrustc_errors%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fregistry.rs?ref=80ed505c41319f2fbbc7e97189e62b38c47b5a70", "patch": "@@ -27,6 +27,6 @@ impl Registry {\n         if !self.long_descriptions.contains_key(code) {\n             return Err(InvalidErrorCode);\n         }\n-        Ok(self.long_descriptions.get(code).unwrap().clone())\n+        Ok(*self.long_descriptions.get(code).unwrap())\n     }\n }"}, {"sha": "fd62c802934255a7a85c961eb4601507601ab4e6", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/80ed505c41319f2fbbc7e97189e62b38c47b5a70/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ed505c41319f2fbbc7e97189e62b38c47b5a70/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=80ed505c41319f2fbbc7e97189e62b38c47b5a70", "patch": "@@ -1086,7 +1086,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     for param in params {\n                         if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(param.span)\n                         {\n-                            if snippet.starts_with(\"&\") && !snippet.starts_with(\"&'\") {\n+                            if snippet.starts_with('&') && !snippet.starts_with(\"&'\") {\n                                 introduce_suggestion\n                                     .push((param.span, format!(\"&'a {}\", &snippet[1..])));\n                             } else if snippet.starts_with(\"&'_ \") {\n@@ -1118,7 +1118,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                 (1, Some(name), Some(\"'_\")) => {\n                     suggest_existing(err, name.to_string());\n                 }\n-                (1, Some(name), Some(snippet)) if !snippet.ends_with(\">\") => {\n+                (1, Some(name), Some(snippet)) if !snippet.ends_with('>') => {\n                     suggest_existing(err, format!(\"{}<{}>\", snippet, name));\n                 }\n                 (0, _, Some(\"&\")) => {\n@@ -1127,7 +1127,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                 (0, _, Some(\"'_\")) => {\n                     suggest_new(err, \"'a\");\n                 }\n-                (0, _, Some(snippet)) if !snippet.ends_with(\">\") => {\n+                (0, _, Some(snippet)) if !snippet.ends_with('>') => {\n                     suggest_new(err, &format!(\"{}<'a>\", snippet));\n                 }\n                 _ => {"}]}