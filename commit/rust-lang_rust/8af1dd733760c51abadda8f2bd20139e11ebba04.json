{"sha": "8af1dd733760c51abadda8f2bd20139e11ebba04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZjFkZDczMzc2MGM1MWFiYWRkYThmMmJkMjAxMzllMTFlYmJhMDQ=", "commit": {"author": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-10-08T02:22:57Z"}, "committer": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-10-08T02:22:57Z"}, "message": "Rebase fixes", "tree": {"sha": "a8e2e671fa701b78b792b31833b897ed4bbdf2c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8e2e671fa701b78b792b31833b897ed4bbdf2c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8af1dd733760c51abadda8f2bd20139e11ebba04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8af1dd733760c51abadda8f2bd20139e11ebba04", "html_url": "https://github.com/rust-lang/rust/commit/8af1dd733760c51abadda8f2bd20139e11ebba04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8af1dd733760c51abadda8f2bd20139e11ebba04/comments", "author": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2c68809ea3243ca68811e9b2e0f1592e2dc33fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c68809ea3243ca68811e9b2e0f1592e2dc33fe", "html_url": "https://github.com/rust-lang/rust/commit/d2c68809ea3243ca68811e9b2e0f1592e2dc33fe"}], "stats": {"total": 20, "additions": 6, "deletions": 14}, "files": [{"sha": "9989b9b56f68d11343b1d83b07af70d8aa9b92ff", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8af1dd733760c51abadda8f2bd20139e11ebba04/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af1dd733760c51abadda8f2bd20139e11ebba04/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=8af1dd733760c51abadda8f2bd20139e11ebba04", "patch": "@@ -35,7 +35,7 @@ use hir_ty::{\n     traits::SolutionVariables,\n     ApplicationTy, BoundVar, CallableDefId, Canonical, DebruijnIndex, FnSig, GenericPredicate,\n     InEnvironment, Obligation, ProjectionPredicate, ProjectionTy, Substs, TraitEnvironment, Ty,\n-    TyDefId, TyKind, TypeCtor, TyLoweringContext, TypeCtor,\n+    TyDefId, TyKind, TypeCtor, TyLoweringContext,\n };\n use rustc_hash::FxHashSet;\n use stdx::impl_from;"}, {"sha": "5ef708647954edbb804ee38119cac63e120d7816", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8af1dd733760c51abadda8f2bd20139e11ebba04/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af1dd733760c51abadda8f2bd20139e11ebba04/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=8af1dd733760c51abadda8f2bd20139e11ebba04", "patch": "@@ -7,11 +7,9 @@ use pulldown_cmark_to_cmark::{cmark_with_options, Options as CmarkOptions};\n use pulldown_cmark::{CowStr, Event, LinkType, Options, Parser, Tag};\n use url::Url;\n \n-use ide_db::{defs::Definition, RootDatabase};\n-\n use hir::{\n     db::{DefDatabase, HirDatabase},\n-    Adt, AsName, AssocItem, Crate, Field, HasAttrs, ItemInNs, MethodOwner, ModuleDef, AssocItemContainer, AsAssocItem\n+    Adt, AsName, AssocItem, Crate, Field, HasAttrs, ItemInNs, ModuleDef, AssocItemContainer, AsAssocItem\n };\n use ide_db::{\n     defs::{classify_name, classify_name_ref, Definition},\n@@ -95,12 +93,6 @@ pub fn remove_links(markdown: &str) -> String {\n     out\n }\n \n-pub fn get_doc_link<T: Resolvable + Clone>(db: &dyn HirDatabase, definition: &T) -> Option<String> {\n-    let module_def = definition.clone().try_into_module_def()?;\n-\n-    get_doc_link_impl(db, &module_def)\n-}\n-\n // FIXME:\n // BUG: For Option::Some\n // Returns https://doc.rust-lang.org/nightly/core/prelude/v1/enum.Option.html#variant.Some\n@@ -129,8 +121,8 @@ fn get_doc_link(db: &RootDatabase, definition: Definition) -> Option<String> {\n     let module = definition.module(db)?;\n     let krate = module.krate();\n     let import_map = db.import_map(krate.into());\n-    let base = once(krate.display_name(db)?)\n-        .chain(import_map.path_of(ns)?.segments.iter().map(|name| format!(\"{}\", name)))\n+    let base = once(krate.declaration_name(db)?.to_string())\n+        .chain(import_map.path_of(ns)?.segments.iter().map(|name| name.to_string()))\n         .join(\"/\");\n \n     let filename = get_symbol_filename(db, &target_def);\n@@ -433,10 +425,10 @@ fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::mock_analysis::analysis_and_position;\n+    use crate::fixture;\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let (analysis, position) = fixture::position(ra_fixture);\n         let url = analysis.external_docs(position).unwrap().expect(\"could not find url for symbol\");\n \n         expect.assert_eq(&url)"}]}