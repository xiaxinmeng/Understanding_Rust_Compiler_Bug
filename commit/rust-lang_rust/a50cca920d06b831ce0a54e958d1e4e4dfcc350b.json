{"sha": "a50cca920d06b831ce0a54e958d1e4e4dfcc350b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MGNjYTkyMGQwNmI4MzFjZTBhNTRlOTU4ZDFlNGU0ZGZjYzM1MGI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-03-26T02:53:03Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-03-26T02:53:03Z"}, "message": "Convert a chained if-else to a match.\n\nIt makes things a little clearer.", "tree": {"sha": "71963dd9cd706a8e57e70d8ed3fde48532b56e32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71963dd9cd706a8e57e70d8ed3fde48532b56e32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a50cca920d06b831ce0a54e958d1e4e4dfcc350b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a50cca920d06b831ce0a54e958d1e4e4dfcc350b", "html_url": "https://github.com/rust-lang/rust/commit/a50cca920d06b831ce0a54e958d1e4e4dfcc350b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a50cca920d06b831ce0a54e958d1e4e4dfcc350b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87ef16c9dc7b4ebb46c1db3363e1a00586a819d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/87ef16c9dc7b4ebb46c1db3363e1a00586a819d8", "html_url": "https://github.com/rust-lang/rust/commit/87ef16c9dc7b4ebb46c1db3363e1a00586a819d8"}], "stats": {"total": 75, "additions": 42, "deletions": 33}, "files": [{"sha": "1557630fc7afdaeb5cde12d33a9ee5536497f04e", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 42, "deletions": 33, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/a50cca920d06b831ce0a54e958d1e4e4dfcc350b/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a50cca920d06b831ce0a54e958d1e4e4dfcc350b/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=a50cca920d06b831ce0a54e958d1e4e4dfcc350b", "patch": "@@ -751,44 +751,53 @@ pub(crate) unsafe fn codegen(\n             })?;\n         }\n \n-        if config_emit_object_code {\n-            if !config.no_integrated_as {\n-                let _timer = cgcx\n-                    .prof\n-                    .generic_activity_with_arg(\"LLVM_module_codegen_emit_obj\", &module.name[..]);\n-                with_codegen(tm, llmod, config.no_builtins, |cpm| {\n-                    write_output_file(\n-                        diag_handler,\n-                        tm,\n-                        cpm,\n-                        llmod,\n-                        &obj_out,\n-                        llvm::FileType::ObjectFile,\n-                    )\n-                })?;\n-            } else {\n-                let _timer = cgcx\n-                    .prof\n-                    .generic_activity_with_arg(\"LLVM_module_codegen_asm_to_obj\", &module.name[..]);\n-                let assembly = cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n-                run_assembler(cgcx, diag_handler, &assembly, &obj_out);\n-\n-                if !config.emit_asm && !cgcx.save_temps {\n-                    drop(fs::remove_file(&assembly));\n+        match config.emit_obj {\n+            EmitObj::ObjectCode(_) => {\n+                if !config.no_integrated_as {\n+                    let _timer = cgcx.prof.generic_activity_with_arg(\n+                        \"LLVM_module_codegen_emit_obj\",\n+                        &module.name[..],\n+                    );\n+                    with_codegen(tm, llmod, config.no_builtins, |cpm| {\n+                        write_output_file(\n+                            diag_handler,\n+                            tm,\n+                            cpm,\n+                            llmod,\n+                            &obj_out,\n+                            llvm::FileType::ObjectFile,\n+                        )\n+                    })?;\n+                } else {\n+                    let _timer = cgcx.prof.generic_activity_with_arg(\n+                        \"LLVM_module_codegen_asm_to_obj\",\n+                        &module.name[..],\n+                    );\n+                    let assembly =\n+                        cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);\n+                    run_assembler(cgcx, diag_handler, &assembly, &obj_out);\n+\n+                    if !config.emit_asm && !cgcx.save_temps {\n+                        drop(fs::remove_file(&assembly));\n+                    }\n                 }\n             }\n-        } else if config.emit_obj == EmitObj::Bitcode {\n-            debug!(\"copying bitcode {:?} to obj {:?}\", bc_out, obj_out);\n-            if let Err(e) = link_or_copy(&bc_out, &obj_out) {\n-                diag_handler.err(&format!(\"failed to copy bitcode to object file: {}\", e));\n-            }\n \n-            if !config.emit_bc {\n-                debug!(\"removing_bitcode {:?}\", bc_out);\n-                if let Err(e) = fs::remove_file(&bc_out) {\n-                    diag_handler.err(&format!(\"failed to remove bitcode: {}\", e));\n+            EmitObj::Bitcode => {\n+                debug!(\"copying bitcode {:?} to obj {:?}\", bc_out, obj_out);\n+                if let Err(e) = link_or_copy(&bc_out, &obj_out) {\n+                    diag_handler.err(&format!(\"failed to copy bitcode to object file: {}\", e));\n+                }\n+\n+                if !config.emit_bc {\n+                    debug!(\"removing_bitcode {:?}\", bc_out);\n+                    if let Err(e) = fs::remove_file(&bc_out) {\n+                        diag_handler.err(&format!(\"failed to remove bitcode: {}\", e));\n+                    }\n                 }\n             }\n+\n+            EmitObj::None => {}\n         }\n \n         drop(handlers);"}]}