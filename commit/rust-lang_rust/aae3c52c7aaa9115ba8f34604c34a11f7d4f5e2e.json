{"sha": "aae3c52c7aaa9115ba8f34604c34a11f7d4f5e2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZTNjNTJjN2FhYTkxMTViYThmMzQ2MDRjMzRhMTFmN2Q0ZjVlMmU=", "commit": {"author": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2020-03-25T17:42:31Z"}, "committer": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2020-03-26T16:12:57Z"}, "message": "Remove the note on the internal capacity field in `RawVec`", "tree": {"sha": "12f1dd16016ced561a0a94c0fec636708c681d18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12f1dd16016ced561a0a94c0fec636708c681d18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aae3c52c7aaa9115ba8f34604c34a11f7d4f5e2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aae3c52c7aaa9115ba8f34604c34a11f7d4f5e2e", "html_url": "https://github.com/rust-lang/rust/commit/aae3c52c7aaa9115ba8f34604c34a11f7d4f5e2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aae3c52c7aaa9115ba8f34604c34a11f7d4f5e2e/comments", "author": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba26a9e9579f4906a782635f3261781935dadee2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba26a9e9579f4906a782635f3261781935dadee2", "html_url": "https://github.com/rust-lang/rust/commit/ba26a9e9579f4906a782635f3261781935dadee2"}], "stats": {"total": 4, "additions": 1, "deletions": 3}, "files": [{"sha": "ba810bf5faf98011fc41d4f384077ffbed8a6861", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aae3c52c7aaa9115ba8f34604c34a11f7d4f5e2e/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae3c52c7aaa9115ba8f34604c34a11f7d4f5e2e/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=aae3c52c7aaa9115ba8f34604c34a11f7d4f5e2e", "patch": "@@ -41,9 +41,7 @@ mod tests;\n ///\n /// Note that the excess of a zero-sized types is always infinite, so `capacity()` always returns\n /// `usize::MAX`. This means that you need to be careful when round-tripping this type with a\n-/// `Box<[T]>`, since `capacity()` won't yield the length. However, `with_capacity`,\n-/// `shrink_to_fit`, and `from_box` will actually set `RawVec`'s private capacity field. This allows\n-/// zero-sized types to not be special-cased by consumers of this type.\n+/// `Box<[T]>`, since `capacity()` won't yield the length.\n #[allow(missing_debug_implementations)]\n pub struct RawVec<T, A: AllocRef = Global> {\n     ptr: Unique<T>,"}]}