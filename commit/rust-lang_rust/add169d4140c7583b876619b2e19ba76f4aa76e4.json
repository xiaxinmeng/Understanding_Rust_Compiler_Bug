{"sha": "add169d4140c7583b876619b2e19ba76f4aa76e4", "node_id": "C_kwDOAAsO6NoAKGFkZDE2OWQ0MTQwYzc1ODNiODc2NjE5YjJlMTliYTc2ZjRhYTc2ZTQ", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-03-04T19:03:24Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-03-04T19:03:24Z"}, "message": "Distinguish binding assignments, use Ty::needs_drop\n\nThis better captures the actual behavior, rather than using hacks around\nwhether the assignment has any projections.", "tree": {"sha": "fbbc435505e56ab98944b00e11d11b843a734276", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbbc435505e56ab98944b00e11d11b843a734276"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/add169d4140c7583b876619b2e19ba76f4aa76e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/add169d4140c7583b876619b2e19ba76f4aa76e4", "html_url": "https://github.com/rust-lang/rust/commit/add169d4140c7583b876619b2e19ba76f4aa76e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/add169d4140c7583b876619b2e19ba76f4aa76e4/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c12c92286375dd91e283a6b0cbfc32f67d045b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c12c92286375dd91e283a6b0cbfc32f67d045b3", "html_url": "https://github.com/rust-lang/rust/commit/1c12c92286375dd91e283a6b0cbfc32f67d045b3"}], "stats": {"total": 65, "additions": 48, "deletions": 17}, "files": [{"sha": "40ee6d863b5a7043fed064be998a6b635ae87159", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/add169d4140c7583b876619b2e19ba76f4aa76e4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add169d4140c7583b876619b2e19ba76f4aa76e4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=add169d4140c7583b876619b2e19ba76f4aa76e4", "patch": "@@ -6,14 +6,14 @@ use crate::{\n use hir::{def_id::DefId, Body, HirId, HirIdMap};\n use rustc_data_structures::stable_set::FxHashSet;\n use rustc_hir as hir;\n-use rustc_middle::hir::map::Map;\n+use rustc_middle::ty::{ParamEnv, TyCtxt};\n \n pub(super) fn find_consumed_and_borrowed<'a, 'tcx>(\n     fcx: &'a FnCtxt<'a, 'tcx>,\n     def_id: DefId,\n     body: &'tcx Body<'tcx>,\n ) -> ConsumedAndBorrowedPlaces {\n-    let mut expr_use_visitor = ExprUseDelegate::new(fcx.tcx.hir());\n+    let mut expr_use_visitor = ExprUseDelegate::new(fcx.tcx, fcx.param_env);\n     expr_use_visitor.consume_body(fcx, def_id, body);\n     expr_use_visitor.places\n }\n@@ -36,14 +36,16 @@ pub(super) struct ConsumedAndBorrowedPlaces {\n /// Interesting values are those that are either dropped or borrowed. For dropped values, we also\n /// record the parent expression, which is the point where the drop actually takes place.\n struct ExprUseDelegate<'tcx> {\n-    hir: Map<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ParamEnv<'tcx>,\n     places: ConsumedAndBorrowedPlaces,\n }\n \n impl<'tcx> ExprUseDelegate<'tcx> {\n-    fn new(hir: Map<'tcx>) -> Self {\n+    fn new(tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> Self {\n         Self {\n-            hir,\n+            tcx,\n+            param_env,\n             places: ConsumedAndBorrowedPlaces {\n                 consumed: <_>::default(),\n                 borrowed: <_>::default(),\n@@ -77,7 +79,7 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n         place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n         diag_expr_id: HirId,\n     ) {\n-        let parent = match self.hir.find_parent_node(place_with_id.hir_id) {\n+        let parent = match self.tcx.hir().find_parent_node(place_with_id.hir_id) {\n             Some(parent) => parent,\n             None => place_with_id.hir_id,\n         };\n@@ -108,20 +110,23 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n         diag_expr_id: HirId,\n     ) {\n         debug!(\"mutate {assignee_place:?}; diag_expr_id={diag_expr_id:?}\");\n-        // Count mutations as a borrow when done through a projection.\n-        //\n-        // The goal here is to catch cases such as `x.y = 42`, since MIR will count this\n-        // as a borrow of `x`, and we need to match that behavior.\n-        //\n-        // FIXME(eholk): this is probably still more conservative than we need to be. For example,\n-        // we may need to count `*x = 42` as a borrow of `x`, since it overwrites all of `x`.\n-        if !assignee_place.place.projections.is_empty() {\n+        // If the type being assigned needs dropped, then the mutation counts as a borrow\n+        // since it is essentially doing `Drop::drop(&mut x); x = new_value;`.\n+        if assignee_place.place.base_ty.needs_drop(self.tcx, self.param_env) {\n             self.places\n                 .borrowed\n                 .insert(TrackedValue::from_place_with_projections_allowed(assignee_place));\n         }\n     }\n \n+    fn bind(\n+        &mut self,\n+        binding_place: &expr_use_visitor::PlaceWithHirId<'tcx>,\n+        diag_expr_id: HirId,\n+    ) {\n+        debug!(\"bind {binding_place:?}; diag_expr_id={diag_expr_id:?}\");\n+    }\n+\n     fn fake_read(\n         &mut self,\n         _place: expr_use_visitor::Place<'tcx>,"}, {"sha": "8c19bbd3214eea75bec1513f8aa9ea23656010eb", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/add169d4140c7583b876619b2e19ba76f4aa76e4/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add169d4140c7583b876619b2e19ba76f4aa76e4/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=add169d4140c7583b876619b2e19ba76f4aa76e4", "patch": "@@ -51,6 +51,15 @@ pub trait Delegate<'tcx> {\n     /// `diag_expr_id` is the id used for diagnostics (see `consume` for more details).\n     fn mutate(&mut self, assignee_place: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId);\n \n+    /// The path at `binding_place` is a binding that is being initialized.\n+    ///\n+    /// This covers cases such as `let x = 42;`\n+    fn bind(&mut self, binding_place: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId) {\n+        // Bindings can normally be treated as a regular assignment, so by default we\n+        // forward this to the mutate callback.\n+        self.mutate(binding_place, diag_expr_id)\n+    }\n+\n     /// The `place` should be a fake read because of specified `cause`.\n     fn fake_read(&mut self, place: Place<'tcx>, cause: FakeReadCause, diag_expr_id: hir::HirId);\n }\n@@ -648,11 +657,9 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                     let pat_ty = return_if_err!(mc.node_ty(pat.hir_id));\n                     debug!(\"walk_pat: pat_ty={:?}\", pat_ty);\n \n-                    // Each match binding is effectively an assignment to the\n-                    // binding being produced.\n                     let def = Res::Local(canonical_id);\n                     if let Ok(ref binding_place) = mc.cat_res(pat.hir_id, pat.span, pat_ty, def) {\n-                        delegate.mutate(binding_place, binding_place.hir_id);\n+                        delegate.bind(binding_place, binding_place.hir_id);\n                     }\n \n                     // It is also a borrow or copy/move of the value being matched."}, {"sha": "fa3f3303677daa204b6f607faa962a8f4301ca1c", "filename": "src/test/ui/async-await/drop-and-assign.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/add169d4140c7583b876619b2e19ba76f4aa76e4/src%2Ftest%2Fui%2Fasync-await%2Fdrop-and-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add169d4140c7583b876619b2e19ba76f4aa76e4/src%2Ftest%2Fui%2Fasync-await%2Fdrop-and-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-and-assign.rs?ref=add169d4140c7583b876619b2e19ba76f4aa76e4", "patch": "@@ -0,0 +1,19 @@\n+// edition:2021\n+// compile-flags: -Zdrop-tracking\n+// build-pass\n+\n+struct A;\n+impl Drop for A { fn drop(&mut self) {} }\n+\n+pub async fn f() {\n+    let mut a = A;\n+    a = A;\n+    drop(a);\n+    async {}.await;\n+}\n+\n+fn assert_send<T: Send>(_: T) {}\n+\n+fn main() {\n+    let _ = f();\n+}"}]}