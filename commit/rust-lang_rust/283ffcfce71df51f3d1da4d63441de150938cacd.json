{"sha": "283ffcfce71df51f3d1da4d63441de150938cacd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4M2ZmY2ZjZTcxZGY1MWYzZDFkYTRkNjM0NDFkZTE1MDkzOGNhY2Q=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-02-11T21:09:47Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-02-13T21:53:38Z"}, "message": "Check the self-type of inherent associated constants", "tree": {"sha": "5ca34f6220c252534f4f0460f37c3132bed9a062", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ca34f6220c252534f4f0460f37c3132bed9a062"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/283ffcfce71df51f3d1da4d63441de150938cacd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/283ffcfce71df51f3d1da4d63441de150938cacd", "html_url": "https://github.com/rust-lang/rust/commit/283ffcfce71df51f3d1da4d63441de150938cacd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/283ffcfce71df51f3d1da4d63441de150938cacd/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de111e6367b065fd5f8cee59b64eefefd8272f44", "url": "https://api.github.com/repos/rust-lang/rust/commits/de111e6367b065fd5f8cee59b64eefefd8272f44", "html_url": "https://github.com/rust-lang/rust/commit/de111e6367b065fd5f8cee59b64eefefd8272f44"}], "stats": {"total": 104, "additions": 74, "deletions": 30}, "files": [{"sha": "8d027b07188cc9d6aa6ddc17614e60ff01f42d76", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/283ffcfce71df51f3d1da4d63441de150938cacd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/283ffcfce71df51f3d1da4d63441de150938cacd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=283ffcfce71df51f3d1da4d63441de150938cacd", "patch": "@@ -2236,7 +2236,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             hir_id, def_id, substs, user_self_ty, self.tag(),\n         );\n \n-        if !substs.is_noop() {\n+        if Self::can_contain_user_lifetime_bounds((substs, user_self_ty)) {\n             let canonicalized = self.infcx.canonicalize_user_type_annotation(\n                 &UserType::TypeOf(def_id, UserSubsts {\n                     substs,\n@@ -2431,15 +2431,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let ty = self.to_ty(ast_ty);\n         debug!(\"to_ty_saving_user_provided_ty: ty={:?}\", ty);\n \n-        // If the type given by the user has free regions, save it for\n-        // later, since NLL would like to enforce those. Also pass in\n-        // types that involve projections, since those can resolve to\n-        // `'static` bounds (modulo #54940, which hopefully will be\n-        // fixed by the time you see this comment, dear reader,\n-        // although I have my doubts). Also pass in types with inference\n-        // types, because they may be repeated. Other sorts of things\n-        // are already sufficiently enforced with erased regions. =)\n-        if ty.has_free_regions() || ty.has_projections() || ty.has_infer_types() {\n+        if Self::can_contain_user_lifetime_bounds(ty) {\n             let c_ty = self.infcx.canonicalize_response(&UserType::Ty(ty));\n             debug!(\"to_ty_saving_user_provided_ty: c_ty={:?}\", c_ty);\n             self.tables.borrow_mut().user_provided_types_mut().insert(ast_ty.hir_id, c_ty);\n@@ -2448,6 +2440,20 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         ty\n     }\n \n+    // If the type given by the user has free regions, save it for later, since\n+    // NLL would like to enforce those. Also pass in types that involve\n+    // projections, since those can resolve to `'static` bounds (modulo #54940,\n+    // which hopefully will be fixed by the time you see this comment, dear\n+    // reader, although I have my doubts). Also pass in types with inference\n+    // types, because they may be repeated. Other sorts of things are already\n+    // sufficiently enforced with erased regions. =)\n+    fn can_contain_user_lifetime_bounds<T>(t: T) -> bool\n+    where\n+        T: TypeFoldable<'tcx>\n+    {\n+        t.has_free_regions() || t.has_projections() || t.has_infer_types()\n+    }\n+\n     pub fn node_ty(&self, id: hir::HirId) -> Ty<'tcx> {\n         match self.tables.borrow().node_types().get(id) {\n             Some(&t) => t,"}, {"sha": "45f56836d18b539f4d9eb2122a6b44782e469021", "filename": "src/test/ui/nll/user-annotations/dump-adt-brace-struct.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/283ffcfce71df51f3d1da4d63441de150938cacd/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/283ffcfce71df51f3d1da4d63441de150938cacd/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.rs?ref=283ffcfce71df51f3d1da4d63441de150938cacd", "patch": "@@ -15,5 +15,7 @@ fn main() {\n \n     SomeStruct::<_> { t: 22 }; // Nothing interesting given, no annotation.\n \n-    SomeStruct::<u32> { t: 22 }; //~ ERROR [u32]\n+    SomeStruct::<u32> { t: 22 }; // No lifetime bounds given.\n+\n+    SomeStruct::<&'static u32> { t: &22 }; //~ ERROR [&ReStatic u32]\n }"}, {"sha": "6e24da094e0d2fb36bbfb4a36e51eca664d9207b", "filename": "src/test/ui/nll/user-annotations/dump-adt-brace-struct.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/283ffcfce71df51f3d1da4d63441de150938cacd/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/283ffcfce71df51f3d1da4d63441de150938cacd/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-adt-brace-struct.stderr?ref=283ffcfce71df51f3d1da4d63441de150938cacd", "patch": "@@ -1,8 +1,8 @@\n-error: user substs: UserSubsts { substs: [u32], user_self_ty: None }\n-  --> $DIR/dump-adt-brace-struct.rs:18:5\n+error: user substs: UserSubsts { substs: [&ReStatic u32], user_self_ty: None }\n+  --> $DIR/dump-adt-brace-struct.rs:20:5\n    |\n-LL |     SomeStruct::<u32> { t: 22 }; //~ ERROR [u32]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     SomeStruct::<&'static u32> { t: &22 }; //~ ERROR [&ReStatic u32]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b689f18c2259319f12043c07e931189862495b74", "filename": "src/test/ui/nll/user-annotations/dump-fn-method.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/283ffcfce71df51f3d1da4d63441de150938cacd/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/283ffcfce71df51f3d1da4d63441de150938cacd/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.rs?ref=283ffcfce71df51f3d1da4d63441de150938cacd", "patch": "@@ -11,7 +11,7 @@ trait Bazoom<T> {\n     fn method<U>(&self, arg: T, arg2: U) { }\n }\n \n-impl<T, U> Bazoom<U> for T {\n+impl<S, T> Bazoom<T> for S {\n }\n \n fn foo<'a, T>(_: T) { }\n@@ -22,20 +22,29 @@ fn main() {\n     let x = foo;\n     x(22);\n \n-    // Here: `u32` is given.\n-    let x = foo::<u32>; //~ ERROR [u32]\n+    // Here: `u32` is given, which doesn't contain any lifetimes, so we don't\n+    // have any annotation.\n+    let x = foo::<u32>;\n     x(22);\n \n+    let x = foo::<&'static u32>; //~ ERROR [&ReStatic u32]\n+    x(&22);\n+\n     // Here: we only want the `T` to be given, the rest should be variables.\n     //\n     // (`T` refers to the declaration of `Bazoom`)\n     let x = <_ as Bazoom<u32>>::method::<_>; //~ ERROR [^0, u32, ^1]\n     x(&22, 44, 66);\n \n-    // Here: all are given\n-    let x = <u8 as Bazoom<u16>>::method::<u32>; //~ ERROR [u8, u16, u32]\n+    // Here: all are given and definitely contain no lifetimes, so we\n+    // don't have any annotation.\n+    let x = <u8 as Bazoom<u16>>::method::<u32>;\n     x(&22, 44, 66);\n \n+    // Here: all are given and we have a lifetime.\n+    let x = <u8 as Bazoom<&'static u16>>::method::<u32>; //~ ERROR [u8, &ReStatic u16, u32]\n+    x(&22, &44, 66);\n+\n     // Here: we want in particular that *only* the method `U`\n     // annotation is given, the rest are variables.\n     //"}, {"sha": "04ceb8e5f84953a77dee83d965827fd729a3c332", "filename": "src/test/ui/nll/user-annotations/dump-fn-method.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/283ffcfce71df51f3d1da4d63441de150938cacd/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/283ffcfce71df51f3d1da4d63441de150938cacd/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.stderr?ref=283ffcfce71df51f3d1da4d63441de150938cacd", "patch": "@@ -1,23 +1,23 @@\n-error: user substs: UserSubsts { substs: [u32], user_self_ty: None }\n-  --> $DIR/dump-fn-method.rs:26:13\n+error: user substs: UserSubsts { substs: [&ReStatic u32], user_self_ty: None }\n+  --> $DIR/dump-fn-method.rs:30:13\n    |\n-LL |     let x = foo::<u32>; //~ ERROR [u32]\n-   |             ^^^^^^^^^^\n+LL |     let x = foo::<&'static u32>; //~ ERROR [&ReStatic u32]\n+   |             ^^^^^^^^^^^^^^^^^^^\n \n error: user substs: UserSubsts { substs: [^0, u32, ^1], user_self_ty: None }\n-  --> $DIR/dump-fn-method.rs:32:13\n+  --> $DIR/dump-fn-method.rs:36:13\n    |\n LL |     let x = <_ as Bazoom<u32>>::method::<_>; //~ ERROR [^0, u32, ^1]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: user substs: UserSubsts { substs: [u8, u16, u32], user_self_ty: None }\n-  --> $DIR/dump-fn-method.rs:36:13\n+error: user substs: UserSubsts { substs: [u8, &ReStatic u16, u32], user_self_ty: None }\n+  --> $DIR/dump-fn-method.rs:45:13\n    |\n-LL |     let x = <u8 as Bazoom<u16>>::method::<u32>; //~ ERROR [u8, u16, u32]\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let x = <u8 as Bazoom<&'static u16>>::method::<u32>; //~ ERROR [u8, &ReStatic u16, u32]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: user substs: UserSubsts { substs: [^0, ^1, u32], user_self_ty: None }\n-  --> $DIR/dump-fn-method.rs:44:5\n+  --> $DIR/dump-fn-method.rs:53:5\n    |\n LL |     y.method::<u32>(44, 66); //~ ERROR [^0, ^1, u32]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "2490187605ac1ecae4d2d137a72419b352b86f79", "filename": "src/test/ui/nll/user-annotations/inherent-associated-constants.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/283ffcfce71df51f3d1da4d63441de150938cacd/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Finherent-associated-constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/283ffcfce71df51f3d1da4d63441de150938cacd/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Finherent-associated-constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Finherent-associated-constants.rs?ref=283ffcfce71df51f3d1da4d63441de150938cacd", "patch": "@@ -0,0 +1,17 @@\n+#![feature(nll)]\n+\n+struct A<'a>(&'a ());\n+\n+impl A<'static> {\n+    const IC: i32 = 10;\n+}\n+\n+fn non_wf_associated_const<'a>(x: i32) {\n+    A::<'a>::IC; //~ ERROR lifetime may not live long enough\n+}\n+\n+fn wf_associated_const<'a>(x: i32) {\n+    A::<'static>::IC;\n+}\n+\n+fn main() {}"}, {"sha": "785b39ec887a0c75baef99ec6bbed1ea623ed009", "filename": "src/test/ui/nll/user-annotations/inherent-associated-constants.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/283ffcfce71df51f3d1da4d63441de150938cacd/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Finherent-associated-constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/283ffcfce71df51f3d1da4d63441de150938cacd/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Finherent-associated-constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Finherent-associated-constants.stderr?ref=283ffcfce71df51f3d1da4d63441de150938cacd", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/inherent-associated-constants.rs:10:5\n+   |\n+LL | fn non_wf_associated_const<'a>(x: i32) {\n+   |                            -- lifetime `'a` defined here\n+LL |     A::<'a>::IC; //~ ERROR lifetime may not live long enough\n+   |     ^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}]}