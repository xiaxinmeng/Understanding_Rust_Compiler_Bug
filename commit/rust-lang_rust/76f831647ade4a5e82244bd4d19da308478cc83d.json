{"sha": "76f831647ade4a5e82244bd4d19da308478cc83d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZjgzMTY0N2FkZTRhNWU4MjI0NGJkNGQxOWRhMzA4NDc4Y2M4M2Q=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2017-12-21T21:16:29Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-22T09:51:28Z"}, "message": "add a rustc_resolve::Resolver to DocContext", "tree": {"sha": "eadeb45ec493e9c9f16562564aed55a105edd099", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eadeb45ec493e9c9f16562564aed55a105edd099"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76f831647ade4a5e82244bd4d19da308478cc83d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76f831647ade4a5e82244bd4d19da308478cc83d", "html_url": "https://github.com/rust-lang/rust/commit/76f831647ade4a5e82244bd4d19da308478cc83d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76f831647ade4a5e82244bd4d19da308478cc83d/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9c1a17eecf7539368e541958f95562a81fd600a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9c1a17eecf7539368e541958f95562a81fd600a", "html_url": "https://github.com/rust-lang/rust/commit/d9c1a17eecf7539368e541958f95562a81fd600a"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "6b58decd0b5d810277a6708543c6658f20e12cd3", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76f831647ade4a5e82244bd4d19da308478cc83d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f831647ade4a5e82244bd4d19da308478cc83d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=76f831647ade4a5e82244bd4d19da308478cc83d", "patch": "@@ -124,7 +124,7 @@ pub struct Crate {\n     pub masked_crates: FxHashSet<CrateNum>,\n }\n \n-impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'rcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx, 'rcx> {\n     fn clean(&self, cx: &DocContext) -> Crate {\n         use ::visit_lib::LibEmbargoVisitor;\n "}, {"sha": "b094567b15ea5f143c98359d8b0e480b59422a31", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/76f831647ade4a5e82244bd4d19da308478cc83d/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f831647ade4a5e82244bd4d19da308478cc83d/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=76f831647ade4a5e82244bd4d19da308478cc83d", "patch": "@@ -20,6 +20,7 @@ use rustc::lint;\n use rustc::util::nodemap::FxHashMap;\n use rustc_trans;\n use rustc_resolve as resolve;\n+use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::CStore;\n \n use syntax::codemap;\n@@ -43,8 +44,9 @@ pub use rustc::session::search_paths::SearchPaths;\n \n pub type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n \n-pub struct DocContext<'a, 'tcx: 'a> {\n+pub struct DocContext<'a, 'tcx: 'a, 'rcx> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    pub resolver: resolve::Resolver<'rcx>,\n     pub populated_all_crate_impls: Cell<bool>,\n     // Note that external items for which `doc(hidden)` applies to are shown as\n     // non-reachable while local items aren't. This is because we're reusing\n@@ -67,7 +69,7 @@ pub struct DocContext<'a, 'tcx: 'a> {\n     pub lt_substs: RefCell<FxHashMap<DefId, clean::Lifetime>>,\n }\n \n-impl<'a, 'tcx> DocContext<'a, 'tcx> {\n+impl<'a, 'tcx, 'rcx> DocContext<'a, 'tcx, 'rcx> {\n     pub fn sess(&self) -> &session::Session {\n         &self.tcx.sess\n     }\n@@ -160,7 +162,13 @@ pub fn run_core(search_paths: SearchPaths,\n \n     let name = ::rustc_trans_utils::link::find_crate_name(Some(&sess), &krate.attrs, &input);\n \n-    let driver::ExpansionResult { defs, analysis, resolutions, mut hir_forest, .. } = {\n+    let driver::ExpansionResult {\n+        expanded_crate,\n+        defs,\n+        analysis,\n+        resolutions,\n+        mut hir_forest\n+    } = {\n         let result = driver::phase_2_configure_and_expand(&sess,\n                                                           &cstore,\n                                                           krate,\n@@ -173,6 +181,8 @@ pub fn run_core(search_paths: SearchPaths,\n     };\n \n     let arenas = AllArenas::new();\n+    let mut crate_loader = CrateLoader::new(&sess, &cstore, &name);\n+    let resolver_arenas = resolve::Resolver::arenas();\n     let hir_map = hir_map::map_crate(&sess, &*cstore, &mut hir_forest, &defs);\n     let output_filenames = driver::build_output_filenames(&input,\n                                                           &None,\n@@ -205,8 +215,19 @@ pub fn run_core(search_paths: SearchPaths,\n                                   .collect()\n         };\n \n+        // Set up a Resolver so that the doc cleaning can look up paths in the docs\n+        let mut resolver = resolve::Resolver::new(&sess,\n+                                                  &*cstore,\n+                                                  &expanded_crate,\n+                                                  &name,\n+                                                  resolve::MakeGlobMap::No,\n+                                                  &mut crate_loader,\n+                                                  &resolver_arenas);\n+        resolver.resolve_crate(&expanded_crate);\n+\n         let ctxt = DocContext {\n             tcx,\n+            resolver,\n             populated_all_crate_impls: Cell::new(false),\n             access_levels: RefCell::new(access_levels),\n             external_traits: Default::default(),"}, {"sha": "23a2208292a360eb5cf8002cd655d3dddca9b93c", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76f831647ade4a5e82244bd4d19da308478cc83d/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f831647ade4a5e82244bd4d19da308478cc83d/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=76f831647ade4a5e82244bd4d19da308478cc83d", "patch": "@@ -40,21 +40,21 @@ use doctree::*;\n // also, is there some reason that this doesn't use the 'visit'\n // framework from syntax?\n \n-pub struct RustdocVisitor<'a, 'tcx: 'a> {\n+pub struct RustdocVisitor<'a, 'tcx: 'a, 'rcx: 'a> {\n     cstore: &'tcx CrateStore,\n     pub module: Module,\n     pub attrs: hir::HirVec<ast::Attribute>,\n-    pub cx: &'a core::DocContext<'a, 'tcx>,\n+    pub cx: &'a core::DocContext<'a, 'tcx, 'rcx>,\n     view_item_stack: FxHashSet<ast::NodeId>,\n     inlining: bool,\n     /// Is the current module and all of its parents public?\n     inside_public_path: bool,\n     reexported_macros: FxHashSet<DefId>,\n }\n \n-impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n+impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n     pub fn new(cstore: &'tcx CrateStore,\n-               cx: &'a core::DocContext<'a, 'tcx>) -> RustdocVisitor<'a, 'tcx> {\n+               cx: &'a core::DocContext<'a, 'tcx, 'rcx>) -> RustdocVisitor<'a, 'tcx, 'rcx> {\n         // If the root is re-exported, terminate all recursion.\n         let mut stack = FxHashSet();\n         stack.insert(ast::CRATE_NODE_ID);"}, {"sha": "7da0a7bfe6ea815190b3b9d1d44ab401456caea8", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76f831647ade4a5e82244bd4d19da308478cc83d/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f831647ade4a5e82244bd4d19da308478cc83d/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=76f831647ade4a5e82244bd4d19da308478cc83d", "patch": "@@ -22,8 +22,8 @@ use clean::{AttributesExt, NestedAttributesExt};\n \n /// Similar to `librustc_privacy::EmbargoVisitor`, but also takes\n /// specific rustdoc annotations into account (i.e. `doc(hidden)`)\n-pub struct LibEmbargoVisitor<'a, 'b: 'a, 'tcx: 'b> {\n-    cx: &'a ::core::DocContext<'b, 'tcx>,\n+pub struct LibEmbargoVisitor<'a, 'b: 'a, 'tcx: 'b, 'rcx: 'a> {\n+    cx: &'a ::core::DocContext<'b, 'tcx, 'rcx>,\n     // Accessibility levels for reachable nodes\n     access_levels: RefMut<'a, AccessLevels<DefId>>,\n     // Previous accessibility level, None means unreachable\n@@ -32,8 +32,8 @@ pub struct LibEmbargoVisitor<'a, 'b: 'a, 'tcx: 'b> {\n     visited_mods: FxHashSet<DefId>,\n }\n \n-impl<'a, 'b, 'tcx> LibEmbargoVisitor<'a, 'b, 'tcx> {\n-    pub fn new(cx: &'a ::core::DocContext<'b, 'tcx>) -> LibEmbargoVisitor<'a, 'b, 'tcx> {\n+impl<'a, 'b, 'tcx, 'rcx> LibEmbargoVisitor<'a, 'b, 'tcx, 'rcx> {\n+    pub fn new(cx: &'a ::core::DocContext<'b, 'tcx, 'rcx>) -> LibEmbargoVisitor<'a, 'b, 'tcx, 'rcx> {\n         LibEmbargoVisitor {\n             cx,\n             access_levels: cx.access_levels.borrow_mut(),"}]}