{"sha": "7841b77676662ed657da7b8911dd0989ac743ca0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NDFiNzc2NzY2NjJlZDY1N2RhN2I4OTExZGQwOTg5YWM3NDNjYTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-27T17:20:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-27T17:20:52Z"}, "message": "auto merge of #8772 : thestinger/rust/option, r=anasazi\n\nCloses #6002 \r\n\r\nThere is consensus that the current implementation should be changed or\r\nremoved, so removing it seems like the right decision for now.", "tree": {"sha": "3ebd9a2e9b8ad7d54ce6ffae5570d33ff78cb655", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ebd9a2e9b8ad7d54ce6ffae5570d33ff78cb655"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7841b77676662ed657da7b8911dd0989ac743ca0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7841b77676662ed657da7b8911dd0989ac743ca0", "html_url": "https://github.com/rust-lang/rust/commit/7841b77676662ed657da7b8911dd0989ac743ca0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7841b77676662ed657da7b8911dd0989ac743ca0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0baa92707aed3812a7464a891869a40ba4921cbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0baa92707aed3812a7464a891869a40ba4921cbb", "html_url": "https://github.com/rust-lang/rust/commit/0baa92707aed3812a7464a891869a40ba4921cbb"}, {"sha": "9a63be1dbd41bdd6f164a70fcc49ca4e19e9ed89", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a63be1dbd41bdd6f164a70fcc49ca4e19e9ed89", "html_url": "https://github.com/rust-lang/rust/commit/9a63be1dbd41bdd6f164a70fcc49ca4e19e9ed89"}], "stats": {"total": 38, "additions": 0, "deletions": 38}, "files": [{"sha": "f99a595f2eb866eea22d7a1cab787e37182379b5", "filename": "src/libstd/option.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7841b77676662ed657da7b8911dd0989ac743ca0/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7841b77676662ed657da7b8911dd0989ac743ca0/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=7841b77676662ed657da7b8911dd0989ac743ca0", "patch": "@@ -43,7 +43,6 @@ let unwrapped_msg = match msg {\n \n use clone::Clone;\n use cmp::{Eq,Ord};\n-use ops::Add;\n use util;\n use num::Zero;\n use iterator;\n@@ -77,18 +76,6 @@ impl<T: Eq + Ord> Ord for Option<T> {\n     }\n }\n \n-impl<T: Add<T, T>> Add<Option<T>, Option<T>> for Option<T> {\n-    #[inline]\n-    fn add(&self, other: &Option<T>) -> Option<T> {\n-        match (&*self, &*other) {\n-            (&None, &None) => None,\n-            (_, &None) => None,\n-            (&None, _) => None,\n-            (&Some(ref lhs), &Some(ref rhs)) => Some(*lhs + *rhs)\n-        }\n-    }\n-}\n-\n // FIXME: #8242 implementing manually because deriving doesn't work for some reason\n impl<T: ToStr> ToStr for Option<T> {\n     fn to_str(&self) -> ~str {"}, {"sha": "8af173150a06dceee7c93cddfbf1485c2ce9964d", "filename": "src/test/run-pass/option_addition.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0baa92707aed3812a7464a891869a40ba4921cbb/src%2Ftest%2Frun-pass%2Foption_addition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0baa92707aed3812a7464a891869a40ba4921cbb/src%2Ftest%2Frun-pass%2Foption_addition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption_addition.rs?ref=0baa92707aed3812a7464a891869a40ba4921cbb", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub fn main() {\n-    let foo: int = 1;\n-    let bar: int = 2;\n-    let foobar = foo + bar;\n-\n-    let nope = None::<int> + None::<int>;\n-    let somefoo = Some(foo) + None::<int>;\n-    let somebar = None::<int> + Some(bar);\n-    let somefoobar = Some(foo) + Some(bar);\n-\n-    assert_eq!(nope, None::<int>);\n-    assert_eq!(somefoo, None::<int>);\n-    assert_eq!(somebar, None::<int>);\n-    assert_eq!(foobar, somefoobar.unwrap());\n-}"}]}