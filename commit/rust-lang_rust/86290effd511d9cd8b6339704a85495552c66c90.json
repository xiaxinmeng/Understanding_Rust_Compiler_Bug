{"sha": "86290effd511d9cd8b6339704a85495552c66c90", "node_id": "C_kwDOAAsO6NoAKDg2MjkwZWZmZDUxMWQ5Y2Q4YjYzMzk3MDRhODU0OTU1NTJjNjZjOTA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-10T10:18:55Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-21T21:56:17Z"}, "message": "Perform wf checking per module.", "tree": {"sha": "f4dc8add8d8ea6e1dd4f3f1d1c5ccf8673ce0598", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4dc8add8d8ea6e1dd4f3f1d1c5ccf8673ce0598"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86290effd511d9cd8b6339704a85495552c66c90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86290effd511d9cd8b6339704a85495552c66c90", "html_url": "https://github.com/rust-lang/rust/commit/86290effd511d9cd8b6339704a85495552c66c90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86290effd511d9cd8b6339704a85495552c66c90/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42289ff931334f5f82cec0b3e0252ce326ca165c", "url": "https://api.github.com/repos/rust-lang/rust/commits/42289ff931334f5f82cec0b3e0252ce326ca165c", "html_url": "https://github.com/rust-lang/rust/commit/42289ff931334f5f82cec0b3e0252ce326ca165c"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "7a5a39919bfca2c1b6fed994cfa1ac3658812b5b", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86290effd511d9cd8b6339704a85495552c66c90/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86290effd511d9cd8b6339704a85495552c66c90/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=86290effd511d9cd8b6339704a85495552c66c90", "patch": "@@ -826,6 +826,10 @@ rustc_queries! {\n         desc { |tcx| \"checking that impls are well-formed in {}\", describe_as_module(key, tcx) }\n     }\n \n+    query check_mod_type_wf(key: LocalDefId) -> () {\n+        desc { |tcx| \"checking that types are well-formed in {}\", describe_as_module(key, tcx) }\n+    }\n+\n     query collect_mod_item_types(key: LocalDefId) -> () {\n         desc { |tcx| \"collecting item types in {}\", describe_as_module(key, tcx) }\n     }"}, {"sha": "0ede9ef775631cd0de056b63b3587f2504afcddf", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86290effd511d9cd8b6339704a85495552c66c90/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86290effd511d9cd8b6339704a85495552c66c90/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=86290effd511d9cd8b6339704a85495552c66c90", "patch": "@@ -99,8 +99,6 @@ pub use expectation::Expectation;\n pub use fn_ctxt::*;\n use hir::def::CtorOf;\n pub use inherited::{Inherited, InheritedBuilder};\n-use wfcheck::check_well_formed;\n-pub(crate) use wfcheck::check_wf_new;\n \n use crate::astconv::AstConv;\n use crate::check::gather_locals::GatherLocalsVisitor;\n@@ -243,6 +241,7 @@ impl<'tcx> EnclosingBreakables<'tcx> {\n \n pub fn provide(providers: &mut Providers) {\n     method::provide(providers);\n+    wfcheck::provide(providers);\n     *providers = Providers {\n         typeck_item_bodies,\n         typeck_const_arg,\n@@ -251,7 +250,6 @@ pub fn provide(providers: &mut Providers) {\n         has_typeck_results,\n         adt_destructor,\n         used_trait_imports,\n-        check_well_formed,\n         check_mod_item_types,\n         region_scope_tree,\n         ..*providers"}, {"sha": "8676db61bf82360d1c61e540f33b27ab85ee848f", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86290effd511d9cd8b6339704a85495552c66c90/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86290effd511d9cd8b6339704a85495552c66c90/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=86290effd511d9cd8b6339704a85495552c66c90", "patch": "@@ -14,6 +14,7 @@ use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::outlives::obligations::TypeOutlives;\n use rustc_infer::infer::region_constraints::GenericKind;\n use rustc_infer::infer::{self, InferCtxt, TyCtxtInferExt};\n+use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts, Subst};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{\n@@ -67,7 +68,7 @@ impl<'tcx> CheckWfFcxBuilder<'tcx> {\n     }\n }\n \n-pub(crate) fn check_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n+fn check_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let node = tcx.hir().expect_owner(def_id);\n     match node {\n         hir::OwnerNode::Crate(_) => {}\n@@ -1858,8 +1859,8 @@ fn check_false_global_bounds(fcx: &FnCtxt<'_, '_>, mut span: Span, id: hir::HirI\n     fcx.select_all_obligations_or_error();\n }\n \n-pub(crate) fn check_wf_new(tcx: TyCtxt<'_>) {\n-    let items = tcx.hir_crate_items(());\n+fn check_mod_type_wf(tcx: TyCtxt<'_>, module: LocalDefId) {\n+    let items = tcx.hir_module_items(module);\n     par_for_each_in(items.items(), |item| tcx.ensure().check_well_formed(item.def_id));\n     par_for_each_in(items.impl_items(), |item| tcx.ensure().check_well_formed(item.def_id));\n     par_for_each_in(items.trait_items(), |item| tcx.ensure().check_well_formed(item.def_id));\n@@ -1948,3 +1949,7 @@ fn error_392(\n     err.span_label(span, \"unused parameter\");\n     err\n }\n+\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers { check_mod_type_wf, check_well_formed, ..*providers };\n+}"}, {"sha": "94eb24514c2c8bc871ba25e67e2dd46768ff105b", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86290effd511d9cd8b6339704a85495552c66c90/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86290effd511d9cd8b6339704a85495552c66c90/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=86290effd511d9cd8b6339704a85495552c66c90", "patch": "@@ -525,7 +525,9 @@ pub fn check_crate(tcx: TyCtxt<'_>) -> Result<(), ErrorGuaranteed> {\n     }\n \n     tcx.sess.track_errors(|| {\n-        tcx.sess.time(\"wf_checking\", || check::check_wf_new(tcx));\n+        tcx.sess.time(\"wf_checking\", || {\n+            tcx.hir().par_for_each_module(|module| tcx.ensure().check_mod_type_wf(module))\n+        });\n     })?;\n \n     // NOTE: This is copy/pasted in librustdoc/core.rs and should be kept in sync."}, {"sha": "138a235e675e375f588bf4bc3d27bcc606023249", "filename": "src/test/ui/issues/issue-20413.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86290effd511d9cd8b6339704a85495552c66c90/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86290effd511d9cd8b6339704a85495552c66c90/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs?ref=86290effd511d9cd8b6339704a85495552c66c90", "patch": "@@ -1,5 +1,5 @@\n trait Foo {\n-  fn answer(self);\n+    fn answer(self);\n }\n \n struct NoData<T>;\n@@ -13,11 +13,11 @@ impl<T> Foo for T where NoData<T>: Foo {\n }\n \n trait Bar {\n-  fn answer(self);\n+    fn answer(self);\n }\n \n trait Baz {\n-  fn answer(self);\n+    fn answer(self);\n }\n \n struct AlmostNoData<T>(Option<T>);"}]}