{"sha": "b9c5cd4dc420b90874784b253bcb8fd4ac72441a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YzVjZDRkYzQyMGI5MDg3NDc4NGIyNTNiY2I4ZmQ0YWM3MjQ0MWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-19T17:39:10Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-19T18:35:21Z"}, "message": "Use the expected type to decide whether `||` is an unboxed or boxed closure.", "tree": {"sha": "d852e43c7d0d1a239faba01a99d75788ae336cf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d852e43c7d0d1a239faba01a99d75788ae336cf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9c5cd4dc420b90874784b253bcb8fd4ac72441a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c5cd4dc420b90874784b253bcb8fd4ac72441a", "html_url": "https://github.com/rust-lang/rust/commit/b9c5cd4dc420b90874784b253bcb8fd4ac72441a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9c5cd4dc420b90874784b253bcb8fd4ac72441a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e2929d3623dd4c4d601a31e55e9d36dba7afe88", "html_url": "https://github.com/rust-lang/rust/commit/3e2929d3623dd4c4d601a31e55e9d36dba7afe88"}], "stats": {"total": 146, "additions": 97, "deletions": 49}, "files": [{"sha": "51636f00c391ad2171fb9022e2f5d85e9ed05f53", "filename": "src/librustc/middle/typeck/check/closure.rs", "status": "modified", "additions": 59, "deletions": 49, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5cd4dc420b90874784b253bcb8fd4ac72441a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5cd4dc420b90874784b253bcb8fd4ac72441a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fclosure.rs?ref=b9c5cd4dc420b90874784b253bcb8fd4ac72441a", "patch": "@@ -32,59 +32,62 @@ pub fn check_expr_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n                                    decl: &ast::FnDecl,\n                                    body: &ast::Block,\n                                    expected: Expectation<'tcx>) {\n+    debug!(\"check_expr_closure(expr={},expected={})\",\n+           expr.repr(fcx.tcx()),\n+           expected.repr(fcx.tcx()));\n+\n     match opt_kind {\n-        None => { // old-school boxed closure\n-            let region = astconv::opt_ast_region_to_region(fcx,\n-                                                           fcx.infcx(),\n-                                                           expr.span,\n-                                                           &None);\n-            check_boxed_closure(fcx,\n-                                expr,\n-                                ty::RegionTraitStore(region, ast::MutMutable),\n-                                decl,\n-                                body,\n-                                expected);\n+        None => {\n+            // If users didn't specify what sort of closure they want,\n+            // examine the expected type. For now, if we see explicit\n+            // evidence than an unboxed closure is desired, we'll use\n+            // that, otherwise we'll fall back to boxed closures.\n+            match deduce_unboxed_closure_expectations_from_expectation(fcx, expected) {\n+                None => { // doesn't look like an unboxed closure\n+                    let region = astconv::opt_ast_region_to_region(fcx,\n+                                                                   fcx.infcx(),\n+                                                                   expr.span,\n+                                                                   &None);\n+                    check_boxed_closure(fcx,\n+                                        expr,\n+                                        ty::RegionTraitStore(region, ast::MutMutable),\n+                                        decl,\n+                                        body,\n+                                        expected);\n+                }\n+                Some((sig, kind)) => {\n+                    check_unboxed_closure(fcx, expr, kind, decl, body, Some(sig));\n+                }\n+            }\n         }\n \n         Some(kind) => {\n-            check_unboxed_closure(fcx, expr, kind, decl, body, expected)\n+            let kind = match kind {\n+                ast::FnUnboxedClosureKind => ty::FnUnboxedClosureKind,\n+                ast::FnMutUnboxedClosureKind => ty::FnMutUnboxedClosureKind,\n+                ast::FnOnceUnboxedClosureKind => ty::FnOnceUnboxedClosureKind,\n+            };\n+\n+            let expected_sig =\n+                deduce_unboxed_closure_expectations_from_expectation(fcx, expected)\n+                .map(|t| t.0);\n+\n+            check_unboxed_closure(fcx, expr, kind, decl, body, expected_sig);\n         }\n     }\n }\n \n fn check_unboxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n                                   expr: &ast::Expr,\n-                                  kind: ast::UnboxedClosureKind,\n+                                  kind: ty::UnboxedClosureKind,\n                                   decl: &ast::FnDecl,\n                                   body: &ast::Block,\n-                                  expected: Expectation<'tcx>) {\n+                                  expected_sig: Option<ty::FnSig<'tcx>>) {\n     let expr_def_id = ast_util::local_def(expr.id);\n \n-    let expected_sig_and_kind = match expected.resolve(fcx) {\n-        NoExpectation => None,\n-        ExpectCastableToType(t) | ExpectHasType(t) => {\n-            deduce_unboxed_closure_expectations_from_expected_type(fcx, t)\n-        }\n-    };\n-\n-    let (expected_sig, expected_kind) = match expected_sig_and_kind {\n-        None => (None, None),\n-        Some((sig, kind)) => {\n-            // Avoid accidental capture of bound regions by renaming\n-            // them to fresh names, basically.\n-            let sig =\n-                ty::replace_late_bound_regions(\n-                    fcx.tcx(),\n-                    &sig,\n-                    |_, debruijn| fcx.inh.infcx.fresh_bound_region(debruijn)).0;\n-            (Some(sig), Some(kind))\n-        }\n-    };\n-\n-    debug!(\"check_unboxed_closure expected={} expected_sig={} expected_kind={}\",\n-           expected.repr(fcx.tcx()),\n-           expected_sig.repr(fcx.tcx()),\n-           expected_kind);\n+    debug!(\"check_unboxed_closure kind={} expected_sig={}\",\n+           kind,\n+           expected_sig.repr(fcx.tcx()));\n \n     let mut fn_ty = astconv::ty_of_closure(\n         fcx,\n@@ -130,12 +133,6 @@ fn check_unboxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n     // the `unboxed_closures` table.\n     fn_ty.sig.inputs = vec![ty::mk_tup(fcx.tcx(), fn_ty.sig.inputs)];\n \n-    let kind = match kind {\n-        ast::FnUnboxedClosureKind => ty::FnUnboxedClosureKind,\n-        ast::FnMutUnboxedClosureKind => ty::FnMutUnboxedClosureKind,\n-        ast::FnOnceUnboxedClosureKind => ty::FnOnceUnboxedClosureKind,\n-    };\n-\n     debug!(\"unboxed_closure for {} --> sig={} kind={}\",\n            expr_def_id.repr(fcx.tcx()),\n            fn_ty.sig.repr(fcx.tcx()),\n@@ -152,10 +149,23 @@ fn check_unboxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n         .insert(expr_def_id, unboxed_closure);\n }\n \n-fn deduce_unboxed_closure_expectations_from_expected_type<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n-                                                                   expected_ty: Ty<'tcx>)\n-                                                                   -> Option<(ty::FnSig<'tcx>,\n-                                                                              ty::UnboxedClosureKind)>\n+fn deduce_unboxed_closure_expectations_from_expectation<'a,'tcx>(\n+    fcx: &FnCtxt<'a,'tcx>,\n+    expected: Expectation<'tcx>)\n+    -> Option<(ty::FnSig<'tcx>,ty::UnboxedClosureKind)>\n+{\n+    match expected.resolve(fcx) {\n+        NoExpectation => None,\n+        ExpectCastableToType(t) | ExpectHasType(t) => {\n+            deduce_unboxed_closure_expectations_from_expected_type(fcx, t)\n+        }\n+    }\n+}\n+\n+fn deduce_unboxed_closure_expectations_from_expected_type<'a,'tcx>(\n+    fcx: &FnCtxt<'a,'tcx>,\n+    expected_ty: Ty<'tcx>)\n+    -> Option<(ty::FnSig<'tcx>,ty::UnboxedClosureKind)>\n {\n     match expected_ty.sty {\n         ty::ty_trait(ref object_type) => {"}, {"sha": "0cb719ecd7ff9ce4578ded24e363e161b09d8a41", "filename": "src/test/run-pass/unboxed-closures-infer-kind.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b9c5cd4dc420b90874784b253bcb8fd4ac72441a/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c5cd4dc420b90874784b253bcb8fd4ac72441a/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-kind.rs?ref=b9c5cd4dc420b90874784b253bcb8fd4ac72441a", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we can infer the \"kind\" of an unboxed closure based on\n+// the expected type.\n+\n+#![feature(unboxed_closures)]\n+\n+// Test by-ref capture of environment in unboxed closure types\n+\n+fn call_fn<F: Fn()>(f: F) {\n+    f()\n+}\n+\n+fn call_fn_mut<F: FnMut()>(mut f: F) {\n+    f()\n+}\n+\n+fn call_fn_once<F: FnOnce()>(f: F) {\n+    f()\n+}\n+\n+fn main() {\n+    let mut x = 0u;\n+    let y = 2u;\n+\n+    call_fn(|| assert_eq!(x, 0));\n+    call_fn_mut(|| x += y);\n+    call_fn_once(|| x += y);\n+    assert_eq!(x, y * 2);\n+}"}]}