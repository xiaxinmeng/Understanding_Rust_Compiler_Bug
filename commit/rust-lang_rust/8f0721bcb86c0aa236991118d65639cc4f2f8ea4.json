{"sha": "8f0721bcb86c0aa236991118d65639cc4f2f8ea4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMDcyMWJjYjg2YzBhYTIzNjk5MTExOGQ2NTYzOWNjNGYyZjhlYTQ=", "commit": {"author": {"name": "Eric Reed", "email": "ecreed@cs.washington.edu", "date": "2013-09-05T23:49:38Z"}, "committer": {"name": "Eric Reed", "email": "ecreed@cs.washington.edu", "date": "2013-09-06T12:30:41Z"}, "message": "Fix Acceptor iterator ending early if a connection attempt fails", "tree": {"sha": "3fb0af4ec5de8c02760d1148a77c67ccac68b16a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fb0af4ec5de8c02760d1148a77c67ccac68b16a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f0721bcb86c0aa236991118d65639cc4f2f8ea4", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f0721bcb86c0aa236991118d65639cc4f2f8ea4", "html_url": "https://github.com/rust-lang/rust/commit/8f0721bcb86c0aa236991118d65639cc4f2f8ea4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f0721bcb86c0aa236991118d65639cc4f2f8ea4/comments", "author": {"login": "anasazi", "id": 591682, "node_id": "MDQ6VXNlcjU5MTY4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/591682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anasazi", "html_url": "https://github.com/anasazi", "followers_url": "https://api.github.com/users/anasazi/followers", "following_url": "https://api.github.com/users/anasazi/following{/other_user}", "gists_url": "https://api.github.com/users/anasazi/gists{/gist_id}", "starred_url": "https://api.github.com/users/anasazi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anasazi/subscriptions", "organizations_url": "https://api.github.com/users/anasazi/orgs", "repos_url": "https://api.github.com/users/anasazi/repos", "events_url": "https://api.github.com/users/anasazi/events{/privacy}", "received_events_url": "https://api.github.com/users/anasazi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anasazi", "id": 591682, "node_id": "MDQ6VXNlcjU5MTY4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/591682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anasazi", "html_url": "https://github.com/anasazi", "followers_url": "https://api.github.com/users/anasazi/followers", "following_url": "https://api.github.com/users/anasazi/following{/other_user}", "gists_url": "https://api.github.com/users/anasazi/gists{/gist_id}", "starred_url": "https://api.github.com/users/anasazi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anasazi/subscriptions", "organizations_url": "https://api.github.com/users/anasazi/orgs", "repos_url": "https://api.github.com/users/anasazi/repos", "events_url": "https://api.github.com/users/anasazi/events{/privacy}", "received_events_url": "https://api.github.com/users/anasazi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed695d470bf1568b896f2944815f4723905ab66e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed695d470bf1568b896f2944815f4723905ab66e", "html_url": "https://github.com/rust-lang/rust/commit/ed695d470bf1568b896f2944815f4723905ab66e"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "37c53de09e615b3fd31038ddaa59b1ecf104f87a", "filename": "src/libstd/rt/io/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8f0721bcb86c0aa236991118d65639cc4f2f8ea4/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f0721bcb86c0aa236991118d65639cc4f2f8ea4/src%2Flibstd%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fmod.rs?ref=8f0721bcb86c0aa236991118d65639cc4f2f8ea4", "patch": "@@ -493,21 +493,26 @@ pub trait Acceptor<T> {\n     /// then `accept` returns `None`.\n     fn accept(&mut self) -> Option<T>;\n \n-    /// Create an iterator over incoming connections\n+    /// Create an iterator over incoming connection attempts\n     fn incoming<'r>(&'r mut self) -> IncomingIterator<'r, Self> {\n         IncomingIterator { inc: self }\n     }\n }\n \n /// An infinite iterator over incoming connection attempts.\n /// Calling `next` will block the task until a connection is attempted.\n+///\n+/// Since connection attempts can continue forever, this iterator always returns Some.\n+/// The Some contains another Option representing whether the connection attempt was succesful.\n+/// A successful connection will be wrapped in Some.\n+/// A failed connection is represented as a None and raises a condition.\n struct IncomingIterator<'self, A> {\n     priv inc: &'self mut A,\n }\n \n-impl<'self, T, A: Acceptor<T>> Iterator<T> for IncomingIterator<'self, A> {\n-    fn next(&mut self) -> Option<T> {\n-        self.inc.accept()\n+impl<'self, T, A: Acceptor<T>> Iterator<Option<T>> for IncomingIterator<'self, A> {\n+    fn next(&mut self) -> Option<Option<T>> {\n+        Some(self.inc.accept())\n     }\n }\n "}]}