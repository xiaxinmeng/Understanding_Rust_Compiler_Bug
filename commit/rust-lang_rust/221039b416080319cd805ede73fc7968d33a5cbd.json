{"sha": "221039b416080319cd805ede73fc7968d33a5cbd", "node_id": "C_kwDOAAsO6NoAKDIyMTAzOWI0MTYwODAzMTljZDgwNWVkZTczZmM3OTY4ZDMzYTVjYmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-23T17:53:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-23T17:53:41Z"}, "message": "Rollup merge of #111486 - fmease:pp-inh-proj, r=petrochenkov\n\nPretty-print inherent projections correctly\n\nPreviously, we were trying to pretty-print inherent projections with `Printer::print_def_path` which is incorrect since\nit expects the substitutions to be of a certain format (parents substs followed by own substs) which doesn't hold for\ninherent projections (self type subst followed by own substs).\nNow we print inherent projections manually.\n\nFixes #111390.\nFixes #111397.\n\nLacking tests! Is there a test suite / compiletest flags for the pretty-printer? In most if not all cases,\ninherent projections are normalized away before they get the chance to appear in diagnostics.\n\nIf I were to create regression tests for linked issues, they would need to be `mir-opt` tests to exercise\n`-Zdump-mir=all` (right?) which doesn't feel quite adequate to me.\n\n`@rustbot` label F-inherent_associated_types", "tree": {"sha": "2344c26fb9e871fef5f339dc89a81d3332c38e0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2344c26fb9e871fef5f339dc89a81d3332c38e0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/221039b416080319cd805ede73fc7968d33a5cbd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkbP2lCRBK7hj4Ov3rIwAA8JcIADq5WY6Oh+pEYcI39jlzuu0s\nYarMvXyaw5jZCRarMLE7d7UbAZCOxMLbt4aZOjLZuak+g9gnu8MVCMqeEjMAhwmw\nKRtOMk//BWHfe9ctlRNAbKv0Ut2bcLlj7oXecgzP/K+9hqKdOoD8OF36RnNx0PGf\niYT4EO9f4fm0hfKbPNSMKjmo6SlciR90ThanwsfrxJ/ViPwV/8Y/eI4YZKNM5P04\nKeaNvcDCvaCM9gHij8EBDkmU30dS+XVbK0/yWPM+a2ZpcacxD0Wtnl6fUZQ7+kLx\nh73mL2ehUnrFek8Mrj7FOVp8M0w/VTFbwhuH9hJqvzfzaa56zOpyy0p8J8DO4II=\n=oZRg\n-----END PGP SIGNATURE-----\n", "payload": "tree 2344c26fb9e871fef5f339dc89a81d3332c38e0c\nparent d1e9910abf8cfc67ec4acc08cef21b871eaab842\nparent 778abc7a00dff4271b48a5cd0fa256b9c28965f3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1684864421 +0200\ncommitter GitHub <noreply@github.com> 1684864421 +0200\n\nRollup merge of #111486 - fmease:pp-inh-proj, r=petrochenkov\n\nPretty-print inherent projections correctly\n\nPreviously, we were trying to pretty-print inherent projections with `Printer::print_def_path` which is incorrect since\nit expects the substitutions to be of a certain format (parents substs followed by own substs) which doesn't hold for\ninherent projections (self type subst followed by own substs).\nNow we print inherent projections manually.\n\nFixes #111390.\nFixes #111397.\n\nLacking tests! Is there a test suite / compiletest flags for the pretty-printer? In most if not all cases,\ninherent projections are normalized away before they get the chance to appear in diagnostics.\n\nIf I were to create regression tests for linked issues, they would need to be `mir-opt` tests to exercise\n`-Zdump-mir=all` (right?) which doesn't feel quite adequate to me.\n\n`@rustbot` label F-inherent_associated_types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/221039b416080319cd805ede73fc7968d33a5cbd", "html_url": "https://github.com/rust-lang/rust/commit/221039b416080319cd805ede73fc7968d33a5cbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/221039b416080319cd805ede73fc7968d33a5cbd/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1e9910abf8cfc67ec4acc08cef21b871eaab842", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e9910abf8cfc67ec4acc08cef21b871eaab842", "html_url": "https://github.com/rust-lang/rust/commit/d1e9910abf8cfc67ec4acc08cef21b871eaab842"}, {"sha": "778abc7a00dff4271b48a5cd0fa256b9c28965f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/778abc7a00dff4271b48a5cd0fa256b9c28965f3", "html_url": "https://github.com/rust-lang/rust/commit/778abc7a00dff4271b48a5cd0fa256b9c28965f3"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "11ad5b49df2ef24d766123e3d0bdaa52570f3648", "filename": "compiler/rustc_const_eval/src/util/type_name.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/221039b416080319cd805ede73fc7968d33a5cbd/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221039b416080319cd805ede73fc7968d33a5cbd/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs?ref=221039b416080319cd805ede73fc7968d33a5cbd", "patch": "@@ -58,11 +58,12 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             // Types with identity (print the module path).\n             ty::Adt(ty::AdtDef(Interned(&ty::AdtDefData { did: def_id, .. }, _)), substs)\n             | ty::FnDef(def_id, substs)\n-            | ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+            | ty::Alias(ty::Projection | ty::Opaque, ty::AliasTy { def_id, substs, .. })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n             ty::Foreign(def_id) => self.print_def_path(def_id, &[]),\n \n+            ty::Alias(ty::Inherent, _) => bug!(\"type_name: unexpected inherent projection\"),\n             ty::GeneratorWitness(_) => bug!(\"type_name: unexpected `GeneratorWitness`\"),\n             ty::GeneratorWitnessMIR(..) => bug!(\"type_name: unexpected `GeneratorWitnessMIR`\"),\n         }"}, {"sha": "a064174e2616b6514c798309bfcf7809e3fd99b4", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/221039b416080319cd805ede73fc7968d33a5cbd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221039b416080319cd805ede73fc7968d33a5cbd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=221039b416080319cd805ede73fc7968d33a5cbd", "patch": "@@ -1164,6 +1164,22 @@ pub trait PrettyPrinter<'tcx>:\n         traits.entry(trait_ref).or_default().extend(proj_ty);\n     }\n \n+    fn pretty_print_inherent_projection(\n+        self,\n+        alias_ty: &ty::AliasTy<'tcx>,\n+    ) -> Result<Self::Path, Self::Error> {\n+        let def_key = self.tcx().def_key(alias_ty.def_id);\n+        self.path_generic_args(\n+            |cx| {\n+                cx.path_append(\n+                    |cx| cx.path_qualified(alias_ty.self_ty(), None),\n+                    &def_key.disambiguated_data,\n+                )\n+            },\n+            &alias_ty.substs[1..],\n+        )\n+    }\n+\n     fn ty_infer_name(&self, _: ty::TyVid) -> Option<Symbol> {\n         None\n     }\n@@ -2821,7 +2837,11 @@ define_print_and_forward_display! {\n     }\n \n     ty::AliasTy<'tcx> {\n-        p!(print_def_path(self.def_id, self.substs));\n+        if let DefKind::Impl { of_trait: false } = cx.tcx().def_kind(cx.tcx().parent(self.def_id)) {\n+            p!(pretty_print_inherent_projection(self))\n+        } else {\n+            p!(print_def_path(self.def_id, self.substs));\n+        }\n     }\n \n     ty::ClosureKind {"}, {"sha": "254ede4e6a00af65133353711f580d2a300b4060", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/221039b416080319cd805ede73fc7968d33a5cbd/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221039b416080319cd805ede73fc7968d33a5cbd/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=221039b416080319cd805ede73fc7968d33a5cbd", "patch": "@@ -220,7 +220,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n         match *ty.kind() {\n             // Print all nominal types as paths (unlike `pretty_print_type`).\n             ty::FnDef(def_id, substs)\n-            | ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+            | ty::Alias(ty::Projection | ty::Opaque, ty::AliasTy { def_id, substs, .. })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n \n@@ -241,6 +241,8 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n                 Ok(self)\n             }\n \n+            ty::Alias(ty::Inherent, _) => panic!(\"unexpected inherent projection\"),\n+\n             _ => self.pretty_print_type(ty),\n         }\n     }"}, {"sha": "4cccc6398927c331f1b2347bb5ab0c29cb4e8cc6", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/221039b416080319cd805ede73fc7968d33a5cbd/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221039b416080319cd805ede73fc7968d33a5cbd/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=221039b416080319cd805ede73fc7968d33a5cbd", "patch": "@@ -433,7 +433,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n             // Mangle all nominal types as paths.\n             ty::Adt(ty::AdtDef(Interned(&ty::AdtDefData { did: def_id, .. }, _)), substs)\n             | ty::FnDef(def_id, substs)\n-            | ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+            | ty::Alias(ty::Projection | ty::Opaque, ty::AliasTy { def_id, substs, .. })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => {\n                 self = self.print_def_path(def_id, substs)?;\n@@ -482,6 +482,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                 self = r.print(self)?;\n             }\n \n+            ty::Alias(ty::Inherent, _) => bug!(\"symbol_names: unexpected inherent projection\"),\n             ty::GeneratorWitness(_) => bug!(\"symbol_names: unexpected `GeneratorWitness`\"),\n             ty::GeneratorWitnessMIR(..) => bug!(\"symbol_names: unexpected `GeneratorWitnessMIR`\"),\n         }"}]}