{"sha": "c8190e8de79b22843c4d0976def95aee120f0329", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MTkwZThkZTc5YjIyODQzYzRkMDk3NmRlZjk1YWVlMTIwZjAzMjk=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2019-12-26T18:30:04Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2019-12-27T00:31:59Z"}, "message": "rename metadata struct", "tree": {"sha": "30b803018d23e700a11d62734ad4d31be5bedd40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30b803018d23e700a11d62734ad4d31be5bedd40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8190e8de79b22843c4d0976def95aee120f0329", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niI4EABYIADYWIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXgVRABgcZ2l0QGNocmlz\ndGlhbnBvdmVkYS54eXoACgkQJ1Je9edCClAL1gEA3z2NzYaLpPEHRE4LvK0PURHj\nTzodoPNxDX8XLha9UcgA/2mGVfM/Pok99q00PtMuID5roKWibeTA14EsEz8vqn4G\n=eMt3\n-----END PGP SIGNATURE-----", "payload": "tree 30b803018d23e700a11d62734ad4d31be5bedd40\nparent 2151e958ceba1fcbe906eebf0b42855a0a20178f\nauthor Christian Poveda <git@christianpoveda.xyz> 1577385004 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1577406719 -0500\n\nrename metadata struct\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8190e8de79b22843c4d0976def95aee120f0329", "html_url": "https://github.com/rust-lang/rust/commit/c8190e8de79b22843c4d0976def95aee120f0329", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8190e8de79b22843c4d0976def95aee120f0329/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2151e958ceba1fcbe906eebf0b42855a0a20178f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2151e958ceba1fcbe906eebf0b42855a0a20178f", "html_url": "https://github.com/rust-lang/rust/commit/2151e958ceba1fcbe906eebf0b42855a0a20178f"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "63aa750bdd54897eb3793f95a791ae6bcde78bdf", "filename": "src/shims/fs.rs", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c8190e8de79b22843c4d0976def95aee120f0329/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8190e8de79b22843c4d0976def95aee120f0329/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=c8190e8de79b22843c4d0976def95aee120f0329", "patch": "@@ -269,25 +269,26 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n \n         if this.tcx.sess.target.target.target_os.to_lowercase() != \"macos\" {\n-            throw_unsup_format!(\"The `stat` shim is only only available for `macos` targets.\")\n+            throw_unsup_format!(\"The `stat` shim is only available for `macos` targets.\")\n         }\n \n         let path_scalar = this.read_scalar(path_op)?.not_undef()?;\n         let path: PathBuf = this.read_os_str_from_c_str(path_scalar)?.into();\n \n         let buf = this.deref_operand(buf_op)?;\n \n-        let status = match FileStatus::new(this, path, false)? {\n-            Some(status) => status,\n+        // `stat` always follows symlinks. `lstat` is used to get symlink metadata.\n+        let metadata = match FileMetadata::new(this, path, true)? {\n+            Some(metadata) => metadata,\n             None => return Ok(-1),\n         };\n \n         // FIXME: use Scalar::to_u16\n-        let mode: u16 = status.mode.to_bits(Size::from_bits(16))? as u16;\n+        let mode: u16 = metadata.mode.to_bits(Size::from_bits(16))? as u16;\n \n-        let (access_sec, access_nsec) = status.accessed.unwrap_or((0, 0));\n-        let (created_sec, created_nsec) = status.created.unwrap_or((0, 0));\n-        let (modified_sec, modified_nsec) = status.modified.unwrap_or((0, 0));\n+        let (access_sec, access_nsec) = metadata.accessed.unwrap_or((0, 0));\n+        let (created_sec, created_nsec) = metadata.created.unwrap_or((0, 0));\n+        let (modified_sec, modified_nsec) = metadata.modified.unwrap_or((0, 0));\n \n         let dev_t_layout = this.libc_ty_layout(\"dev_t\")?;\n         let mode_t_layout = this.libc_ty_layout(\"mode_t\")?;\n@@ -302,7 +303,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let blksize_t_layout = this.libc_ty_layout(\"blksize_t\")?;\n         let uint32_t_layout = this.libc_ty_layout(\"uint32_t\")?;\n \n-        // We need to add 32 bits of padding after `st_rdev` if we are in a 64-bit platform.\n+        // We need to add 32 bits of padding after `st_rdev` if we are on a 64-bit platform.\n         let pad_layout = if this.tcx.sess.target.ptr_width == 64 {\n             uint32_t_layout\n         } else {\n@@ -326,7 +327,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             immty_from_uint_checked(0u128, long_layout)?, // st_ctime_nsec\n             immty_from_uint_checked(created_sec, time_t_layout)?, // st_birthtime\n             immty_from_uint_checked(created_nsec, long_layout)?, // st_birthtime_nsec\n-            immty_from_uint_checked(status.size, off_t_layout)?, // st_size\n+            immty_from_uint_checked(metadata.size, off_t_layout)?, // st_size\n             immty_from_uint_checked(0u128, blkcnt_t_layout)?, // st_blocks\n             immty_from_uint_checked(0u128, blksize_t_layout)?, // st_blksize\n             immty_from_uint_checked(0u128, uint32_t_layout)?, // st_flags\n@@ -351,7 +352,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.check_no_isolation(\"statx\")?;\n \n         if this.tcx.sess.target.target.target_os.to_lowercase() != \"linux\" {\n-            throw_unsup_format!(\"The `statx` shim is only only available for `linux` targets.\")\n+            throw_unsup_format!(\"The `statx` shim is only available for `linux` targets.\")\n         }\n \n         let statxbuf_scalar = this.read_scalar(statxbuf_op)?.not_undef()?;\n@@ -413,34 +414,34 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // symbolic links.\n         let follow_symlink = flags & this.eval_libc(\"AT_SYMLINK_NOFOLLOW\")?.to_i32()? == 0;\n \n-        let status = match FileStatus::new(this, path, follow_symlink)? {\n-            Some(status) => status,\n+        let metadata = match FileMetadata::new(this, path, follow_symlink)? {\n+            Some(metadata) => metadata,\n             None => return Ok(-1),\n         };\n \n         // The `mode` field specifies the type of the file and the permissions over the file for\n         // the owner, its group and other users. Given that we can only provide the file type\n         // without using platform specific methods, we only set the bits corresponding to the file\n         // type. This should be an `__u16` but `libc` provides its values as `u32`.\n-        let mode: u16 = status\n+        let mode: u16 = metadata\n             .mode\n             .to_u32()?\n             .try_into()\n             .unwrap_or_else(|_| bug!(\"libc contains bad value for constant\"));\n \n         // We need to set the corresponding bits of `mask` if the access, creation and modification\n         // times were available. Otherwise we let them be zero.\n-        let (access_sec, access_nsec) = status.accessed.map(|tup| {\n+        let (access_sec, access_nsec) = metadata.accessed.map(|tup| {\n             mask |= this.eval_libc(\"STATX_ATIME\")?.to_u32()?;\n             InterpResult::Ok(tup)\n         }).unwrap_or(Ok((0, 0)))?;\n \n-        let (created_sec, created_nsec) = status.created.map(|tup| {\n+        let (created_sec, created_nsec) = metadata.created.map(|tup| {\n             mask |= this.eval_libc(\"STATX_BTIME\")?.to_u32()?;\n             InterpResult::Ok(tup)\n         }).unwrap_or(Ok((0, 0)))?;\n \n-        let (modified_sec, modified_nsec) = status.modified.map(|tup| {\n+        let (modified_sec, modified_nsec) = metadata.modified.map(|tup| {\n             mask |= this.eval_libc(\"STATX_MTIME\")?.to_u32()?;\n             InterpResult::Ok(tup)\n         }).unwrap_or(Ok((0, 0)))?;\n@@ -461,7 +462,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             immty_from_uint_checked(mode, __u16_layout)?, // stx_mode\n             immty_from_uint_checked(0u128, __u16_layout)?, // statx padding\n             immty_from_uint_checked(0u128, __u64_layout)?, // stx_ino\n-            immty_from_uint_checked(status.size, __u64_layout)?, // stx_size\n+            immty_from_uint_checked(metadata.size, __u64_layout)?, // stx_size\n             immty_from_uint_checked(0u128, __u64_layout)?, // stx_blocks\n             immty_from_uint_checked(0u128, __u64_layout)?, // stx_attributes\n             immty_from_uint_checked(access_sec, __u64_layout)?, // stx_atime.tv_sec\n@@ -511,25 +512,27 @@ fn extract_sec_and_nsec<'tcx>(\n     }).transpose()\n }\n \n-struct FileStatus {\n+/// Stores a file's metadata in order to avoid code duplication in the different metadata related\n+/// shims.\n+struct FileMetadata {\n     mode: Scalar<Tag>,\n     size: u64,\n     created: Option<(u64, u32)>,\n     accessed: Option<(u64, u32)>,\n     modified: Option<(u64, u32)>,\n }\n \n-impl FileStatus {\n+impl FileMetadata {\n     fn new<'tcx, 'mir>(\n         ecx: &mut MiriEvalContext<'mir, 'tcx>,\n         path: PathBuf,\n         follow_symlink: bool\n-    ) -> InterpResult<'tcx, Option<FileStatus>> {\n+    ) -> InterpResult<'tcx, Option<FileMetadata>> {\n         let metadata = if follow_symlink {\n+            std::fs::metadata(path)\n+        } else {\n             // FIXME: metadata for symlinks need testing.\n             std::fs::symlink_metadata(path)\n-        } else {\n-            std::fs::metadata(path)\n         };\n \n         let metadata = match metadata {\n@@ -559,6 +562,6 @@ impl FileStatus {\n         let modified = extract_sec_and_nsec(metadata.modified())?;\n \n         // FIXME: Provide more fields using platform specific methods.\n-        Ok(Some(FileStatus { mode, size, created, accessed, modified }))\n+        Ok(Some(FileMetadata { mode, size, created, accessed, modified }))\n     }\n }"}]}