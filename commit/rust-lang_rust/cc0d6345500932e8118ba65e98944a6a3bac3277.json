{"sha": "cc0d6345500932e8118ba65e98944a6a3bac3277", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMGQ2MzQ1NTAwOTMyZTgxMThiYTY1ZTk4OTQ0YTZhM2JhYzMyNzc=", "commit": {"author": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-07-02T04:13:17Z"}, "committer": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-08-10T10:13:55Z"}, "message": "Liballoc IntoIter limit unsafe to pointer arithmethic", "tree": {"sha": "bfc9a04c4bca728967965bc5e2cc88c57c3fd7e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfc9a04c4bca728967965bc5e2cc88c57c3fd7e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc0d6345500932e8118ba65e98944a6a3bac3277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc0d6345500932e8118ba65e98944a6a3bac3277", "html_url": "https://github.com/rust-lang/rust/commit/cc0d6345500932e8118ba65e98944a6a3bac3277", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc0d6345500932e8118ba65e98944a6a3bac3277/comments", "author": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b7f87b5fa43336ed1237747f60fd9095a41ea3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b7f87b5fa43336ed1237747f60fd9095a41ea3d", "html_url": "https://github.com/rust-lang/rust/commit/2b7f87b5fa43336ed1237747f60fd9095a41ea3d"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "aefcbf5ad5ddd77082d8c84e6063217bf3f0e60d", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cc0d6345500932e8118ba65e98944a6a3bac3277/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc0d6345500932e8118ba65e98944a6a3bac3277/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=cc0d6345500932e8118ba65e98944a6a3bac3277", "patch": "@@ -2697,25 +2697,21 @@ impl<T> Iterator for IntoIter<T> {\n \n     #[inline]\n     fn next(&mut self) -> Option<T> {\n-        unsafe {\n-            if self.ptr as *const _ == self.end {\n-                None\n-            } else {\n-                if mem::size_of::<T>() == 0 {\n-                    // purposefully don't use 'ptr.offset' because for\n-                    // vectors with 0-size elements this would return the\n-                    // same pointer.\n-                    self.ptr = arith_offset(self.ptr as *const T, 1) as *mut T;\n-\n-                    // Make up a value of this ZST.\n-                    Some(mem::zeroed())\n-                } else {\n-                    let old = self.ptr;\n-                    self.ptr = self.ptr.offset(1);\n+        if self.ptr as *const _ == self.end {\n+            None\n+        } else if mem::size_of::<T>() == 0 {\n+            // purposefully don't use 'ptr.offset' because for\n+            // vectors with 0-size elements this would return the\n+            // same pointer.\n+            self.ptr = unsafe { arith_offset(self.ptr as *const T, 1) as *mut T };\n+\n+            // Make up a value of this ZST.\n+            Some(unsafe { mem::zeroed() })\n+        } else {\n+            let old = self.ptr;\n+            self.ptr = unsafe { self.ptr.offset(1) };\n \n-                    Some(ptr::read(old))\n-                }\n-            }\n+            Some(unsafe { ptr::read(old) })\n         }\n     }\n "}]}