{"sha": "068c92b2cc0620d18eee1066cd3460f37c9ed9f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2OGM5MmIyY2MwNjIwZDE4ZWVlMTA2NmNkMzQ2MGYzN2M5ZWQ5ZjM=", "commit": {"author": {"name": "Sebastian Dr\u00f6ge", "email": "sebastian@centricular.com", "date": "2018-09-25T05:56:48Z"}, "committer": {"name": "Sebastian Dr\u00f6ge", "email": "sebastian@centricular.com", "date": "2018-09-25T05:56:48Z"}, "message": "Also rename ExactChunks iterator name to ChunksExact", "tree": {"sha": "cb2d15f34a7ed059a74f171f2219b560939a6334", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb2d15f34a7ed059a74f171f2219b560939a6334"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/068c92b2cc0620d18eee1066cd3460f37c9ed9f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/068c92b2cc0620d18eee1066cd3460f37c9ed9f3", "html_url": "https://github.com/rust-lang/rust/commit/068c92b2cc0620d18eee1066cd3460f37c9ed9f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/068c92b2cc0620d18eee1066cd3460f37c9ed9f3/comments", "author": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e09e45041b5cab9d849b554824c6683de6372e41", "url": "https://api.github.com/repos/rust-lang/rust/commits/e09e45041b5cab9d849b554824c6683de6372e41", "html_url": "https://github.com/rust-lang/rust/commit/e09e45041b5cab9d849b554824c6683de6372e41"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "33d28bef2d707fb618d9b50091ee14e5660cf58d", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/068c92b2cc0620d18eee1066cd3460f37c9ed9f3/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068c92b2cc0620d18eee1066cd3460f37c9ed9f3/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=068c92b2cc0620d18eee1066cd3460f37c9ed9f3", "patch": "@@ -124,7 +124,7 @@ pub use core::slice::{from_ref, from_mut};\n #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n pub use core::slice::SliceIndex;\n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-pub use core::slice::{ExactChunks, ExactChunksMut};\n+pub use core::slice::{ChunksExact, ChunksExactMut};\n \n ////////////////////////////////////////////////////////////////////////////////\n // Basic slice extension methods"}, {"sha": "b3f90e3eee88ef411db0b7ff88c77a9c8c14134b", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/068c92b2cc0620d18eee1066cd3460f37c9ed9f3/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/068c92b2cc0620d18eee1066cd3460f37c9ed9f3/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=068c92b2cc0620d18eee1066cd3460f37c9ed9f3", "patch": "@@ -714,12 +714,12 @@ impl<T> [T] {\n     /// [`chunks`]: #method.chunks\n     #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n     #[inline]\n-    pub fn chunks_exact(&self, chunk_size: usize) -> ExactChunks<T> {\n+    pub fn chunks_exact(&self, chunk_size: usize) -> ChunksExact<T> {\n         assert!(chunk_size != 0);\n         let rem = self.len() % chunk_size;\n         let len = self.len() - rem;\n         let (fst, snd) = self.split_at(len);\n-        ExactChunks { v: fst, rem: snd, chunk_size }\n+        ChunksExact { v: fst, rem: snd, chunk_size }\n     }\n \n     /// Returns an iterator over `chunk_size` elements of the slice at a time.\n@@ -756,12 +756,12 @@ impl<T> [T] {\n     /// [`chunks_mut`]: #method.chunks_mut\n     #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n     #[inline]\n-    pub fn chunks_exact_mut(&mut self, chunk_size: usize) -> ExactChunksMut<T> {\n+    pub fn chunks_exact_mut(&mut self, chunk_size: usize) -> ChunksExactMut<T> {\n         assert!(chunk_size != 0);\n         let rem = self.len() % chunk_size;\n         let len = self.len() - rem;\n         let (fst, snd) = self.split_at_mut(len);\n-        ExactChunksMut { v: fst, rem: snd, chunk_size }\n+        ChunksExactMut { v: fst, rem: snd, chunk_size }\n     }\n \n     /// Divides one slice into two at an index.\n@@ -3660,18 +3660,18 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksMut<'a, T> {\n /// This struct is created by the [`chunks_exact`] method on [slices].\n ///\n /// [`chunks_exact`]: ../../std/primitive.slice.html#method.chunks_exact\n-/// [`remainder`]: ../../std/slice/struct.ExactChunks.html#method.remainder\n+/// [`remainder`]: ../../std/slice/struct.ChunksExact.html#method.remainder\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-pub struct ExactChunks<'a, T:'a> {\n+pub struct ChunksExact<'a, T:'a> {\n     v: &'a [T],\n     rem: &'a [T],\n     chunk_size: usize\n }\n \n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> ExactChunks<'a, T> {\n+impl<'a, T> ChunksExact<'a, T> {\n     /// Return the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n@@ -3682,9 +3682,9 @@ impl<'a, T> ExactChunks<'a, T> {\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> Clone for ExactChunks<'a, T> {\n-    fn clone(&self) -> ExactChunks<'a, T> {\n-        ExactChunks {\n+impl<'a, T> Clone for ChunksExact<'a, T> {\n+    fn clone(&self) -> ChunksExact<'a, T> {\n+        ChunksExact {\n             v: self.v,\n             rem: self.rem,\n             chunk_size: self.chunk_size,\n@@ -3693,7 +3693,7 @@ impl<'a, T> Clone for ExactChunks<'a, T> {\n }\n \n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> Iterator for ExactChunks<'a, T> {\n+impl<'a, T> Iterator for ChunksExact<'a, T> {\n     type Item = &'a [T];\n \n     #[inline]\n@@ -3738,7 +3738,7 @@ impl<'a, T> Iterator for ExactChunks<'a, T> {\n }\n \n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> DoubleEndedIterator for ExactChunks<'a, T> {\n+impl<'a, T> DoubleEndedIterator for ChunksExact<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a [T]> {\n         if self.v.len() < self.chunk_size {\n@@ -3752,20 +3752,20 @@ impl<'a, T> DoubleEndedIterator for ExactChunks<'a, T> {\n }\n \n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> ExactSizeIterator for ExactChunks<'a, T> {\n+impl<'a, T> ExactSizeIterator for ChunksExact<'a, T> {\n     fn is_empty(&self) -> bool {\n         self.v.is_empty()\n     }\n }\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for ExactChunks<'a, T> {}\n+unsafe impl<'a, T> TrustedLen for ChunksExact<'a, T> {}\n \n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> FusedIterator for ExactChunks<'a, T> {}\n+impl<'a, T> FusedIterator for ChunksExact<'a, T> {}\n \n #[doc(hidden)]\n-unsafe impl<'a, T> TrustedRandomAccess for ExactChunks<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for ChunksExact<'a, T> {\n     unsafe fn get_unchecked(&mut self, i: usize) -> &'a [T] {\n         let start = i * self.chunk_size;\n         from_raw_parts(self.v.as_ptr().add(start), self.chunk_size)\n@@ -3783,18 +3783,18 @@ unsafe impl<'a, T> TrustedRandomAccess for ExactChunks<'a, T> {\n /// This struct is created by the [`chunks_exact_mut`] method on [slices].\n ///\n /// [`chunks_exact_mut`]: ../../std/primitive.slice.html#method.chunks_exact_mut\n-/// [`into_remainder`]: ../../std/slice/struct.ExactChunksMut.html#method.into_remainder\n+/// [`into_remainder`]: ../../std/slice/struct.ChunksExactMut.html#method.into_remainder\n /// [slices]: ../../std/primitive.slice.html\n #[derive(Debug)]\n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-pub struct ExactChunksMut<'a, T:'a> {\n+pub struct ChunksExactMut<'a, T:'a> {\n     v: &'a mut [T],\n     rem: &'a mut [T],\n     chunk_size: usize\n }\n \n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> ExactChunksMut<'a, T> {\n+impl<'a, T> ChunksExactMut<'a, T> {\n     /// Return the remainder of the original slice that is not going to be\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n@@ -3804,7 +3804,7 @@ impl<'a, T> ExactChunksMut<'a, T> {\n }\n \n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> Iterator for ExactChunksMut<'a, T> {\n+impl<'a, T> Iterator for ChunksExactMut<'a, T> {\n     type Item = &'a mut [T];\n \n     #[inline]\n@@ -3851,7 +3851,7 @@ impl<'a, T> Iterator for ExactChunksMut<'a, T> {\n }\n \n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> DoubleEndedIterator for ExactChunksMut<'a, T> {\n+impl<'a, T> DoubleEndedIterator for ChunksExactMut<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a mut [T]> {\n         if self.v.len() < self.chunk_size {\n@@ -3867,20 +3867,20 @@ impl<'a, T> DoubleEndedIterator for ExactChunksMut<'a, T> {\n }\n \n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> ExactSizeIterator for ExactChunksMut<'a, T> {\n+impl<'a, T> ExactSizeIterator for ChunksExactMut<'a, T> {\n     fn is_empty(&self) -> bool {\n         self.v.is_empty()\n     }\n }\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for ExactChunksMut<'a, T> {}\n+unsafe impl<'a, T> TrustedLen for ChunksExactMut<'a, T> {}\n \n #[unstable(feature = \"chunks_exact\", issue = \"47115\")]\n-impl<'a, T> FusedIterator for ExactChunksMut<'a, T> {}\n+impl<'a, T> FusedIterator for ChunksExactMut<'a, T> {}\n \n #[doc(hidden)]\n-unsafe impl<'a, T> TrustedRandomAccess for ExactChunksMut<'a, T> {\n+unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {\n     unsafe fn get_unchecked(&mut self, i: usize) -> &'a mut [T] {\n         let start = i * self.chunk_size;\n         from_raw_parts_mut(self.v.as_mut_ptr().add(start), self.chunk_size)"}]}