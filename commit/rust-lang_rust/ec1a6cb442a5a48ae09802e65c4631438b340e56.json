{"sha": "ec1a6cb442a5a48ae09802e65c4631438b340e56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMWE2Y2I0NDJhNWE0OGFlMDk4MDJlNjVjNDYzMTQzOGIzNDBlNTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-14T08:16:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-14T08:16:51Z"}, "message": "Auto merge of #3658 - detrumi:add-several-run-rustfix-annotations, r=phansch\n\nAdd several run rustfix annotations\n\nAdds `run-rustfix` to 18 of the tests from the tracking issue #3630.\nEach test has its own commit, to make reviewing easier (hopefully this is easier to review than 18 separate PRs).\n\n## Changes\n- `cfg_attr_rustfmt`: Custom inner attributes are unstable. Let's disable the lint for inner attributes until [#54726](https://github.com/rust-lang/rust/issues/54726) stabilizes\n- `collapsible_if`: unrelated cyclomatic_complexity warning that can be ignored\n- `duration_subsec`: Simply needed `#![allow(dead_code)]`\n- `excessive_precision`: Fixed by `#!allow(dead_code,unused_variables)`\n- `explicit_write`: Fixed by `#![allow(unused_imports)]`\n- `inconsistent_digit_grouping`: Avoid triggering `clippy::excessive_precision` lint\n- `infallible_destructuring_match`: Fixed by `#![allow(dead_code, unreachable_code, unused_variables)]`\n- `into_iter_on_ref`: Triggered unrelated `clippy::useless_vec` lint\n- `large_digit_groups`: Avoid triggering `clippy::excessive_precision` lint\n- `map_clone`: Fixed by `#![allow(clippy::iter_cloned_collect)]`\n- `mem_replace`: Suggestion causes import to be unused, fixed by `#![allow(unused_imports)]`\n- `precedence`: Allow some unrelated lints, and change out-of-range `0b1111_1111i8` literal\n- `redundant_field_names`: Allow dead code, and remove stabilized feature toggles\n- `replace_consts`: Fixed by `#![allow(unused_variables)]`\n- `starts_ends_with`: Fixed by `#![allow(unused_must_use)]`\n- `types`: Fixed by `#![allow(dead_code, unused_variables)]`\n- `unit_arg`: Fixed by `#[allow(unused_must_use)]`\n- `unnecessary_fold`: Fixed by adding type annotations and adding `#![allow(dead_code)]`", "tree": {"sha": "71c48c0beb928adb9bcda00256724fbd1b6af5a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71c48c0beb928adb9bcda00256724fbd1b6af5a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec1a6cb442a5a48ae09802e65c4631438b340e56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec1a6cb442a5a48ae09802e65c4631438b340e56", "html_url": "https://github.com/rust-lang/rust/commit/ec1a6cb442a5a48ae09802e65c4631438b340e56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec1a6cb442a5a48ae09802e65c4631438b340e56/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac10c56c71087541ae8b9c55e21a0e1f490b2e32", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac10c56c71087541ae8b9c55e21a0e1f490b2e32", "html_url": "https://github.com/rust-lang/rust/commit/ac10c56c71087541ae8b9c55e21a0e1f490b2e32"}, {"sha": "51c0dd427b63faf6d3a3810ebd7942aae9a62065", "url": "https://api.github.com/repos/rust-lang/rust/commits/51c0dd427b63faf6d3a3810ebd7942aae9a62065", "html_url": "https://github.com/rust-lang/rust/commit/51c0dd427b63faf6d3a3810ebd7942aae9a62065"}], "stats": {"total": 1339, "additions": 1137, "deletions": 202}, "files": [{"sha": "a3f2cc6a23b9e18aafbef5f579ff1ce7691a37d0", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -511,18 +511,17 @@ impl EarlyLintPass for CfgAttrPass {\n             // check for `rustfmt_skip` and `rustfmt::skip`\n             if let Some(skip_item) = &items[1].meta_item();\n             if skip_item.name() == \"rustfmt_skip\" || skip_item.name() == \"skip\";\n+            // Only lint outer attributes, because custom inner attributes are unstable\n+            // Tracking issue: https://github.com/rust-lang/rust/issues/54726\n+            if let AttrStyle::Outer = attr.style;\n             then {\n-                let attr_style = match attr.style {\n-                    AttrStyle::Outer => \"#[\",\n-                    AttrStyle::Inner => \"#![\",\n-                };\n                 span_lint_and_sugg(\n                     cx,\n                     DEPRECATED_CFG_ATTR,\n                     attr.span,\n                     \"`cfg_attr` is deprecated for rustfmt and got replaced by tool_attributes\",\n                     \"use\",\n-                    format!(\"{}rustfmt::skip]\", attr_style),\n+                    \"#[rustfmt::skip]\".to_string(),\n                     Applicability::MachineApplicable,\n                 );\n             }"}, {"sha": "4e583a25b94c2a517555585caf76f5631e263847", "filename": "tests/ui/cfg_attr_rustfmt.fixed", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fcfg_attr_rustfmt.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fcfg_attr_rustfmt.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg_attr_rustfmt.fixed?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+#![feature(stmt_expr_attributes)]\n+\n+#![allow(unused, clippy::no_effect)]\n+#![warn(clippy::deprecated_cfg_attr)]\n+\n+// This doesn't get linted, see known problems\n+#![cfg_attr(rustfmt, rustfmt_skip)]\n+\n+#[rustfmt::skip]\n+trait Foo\n+{\n+fn foo(\n+);\n+}\n+\n+fn skip_on_statements() {\n+    #[rustfmt::skip]\n+    5+3;\n+}\n+\n+#[rustfmt::skip]\n+fn main() {\n+    foo::f();\n+}\n+\n+mod foo {\n+    #![cfg_attr(rustfmt, rustfmt_skip)]\n+\n+    pub fn f() {}\n+}"}, {"sha": "9c0fcf6fb454c4ac00a89b8bcb1b5b34aa58e2cf", "filename": "tests/ui/cfg_attr_rustfmt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fcfg_attr_rustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fcfg_attr_rustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg_attr_rustfmt.rs?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,5 +1,7 @@\n+// run-rustfix\n #![feature(stmt_expr_attributes)]\n \n+#![allow(unused, clippy::no_effect)]\n #![warn(clippy::deprecated_cfg_attr)]\n \n // This doesn't get linted, see known problems"}, {"sha": "09971caceea89de25315756b306e18adaca94d10", "filename": "tests/ui/cfg_attr_rustfmt.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fcfg_attr_rustfmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fcfg_attr_rustfmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg_attr_rustfmt.stderr?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,22 +1,16 @@\n error: `cfg_attr` is deprecated for rustfmt and got replaced by tool_attributes\n-  --> $DIR/cfg_attr_rustfmt.rs:16:5\n+  --> $DIR/cfg_attr_rustfmt.rs:18:5\n    |\n LL |     #[cfg_attr(rustfmt, rustfmt::skip)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `#[rustfmt::skip]`\n    |\n    = note: `-D clippy::deprecated-cfg-attr` implied by `-D warnings`\n \n error: `cfg_attr` is deprecated for rustfmt and got replaced by tool_attributes\n-  --> $DIR/cfg_attr_rustfmt.rs:20:1\n+  --> $DIR/cfg_attr_rustfmt.rs:22:1\n    |\n LL | #[cfg_attr(rustfmt, rustfmt_skip)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `#[rustfmt::skip]`\n \n-error: `cfg_attr` is deprecated for rustfmt and got replaced by tool_attributes\n-  --> $DIR/cfg_attr_rustfmt.rs:26:5\n-   |\n-LL |     #![cfg_attr(rustfmt, rustfmt_skip)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `#![rustfmt::skip]`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "2c6dd95a637990a03965fde79a6f0b2eedaccf93", "filename": "tests/ui/collapsible_if.fixed", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fcollapsible_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fcollapsible_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.fixed?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -0,0 +1,175 @@\n+// run-rustfix\n+#![allow(clippy::cyclomatic_complexity)]\n+\n+#[rustfmt::skip]\n+#[warn(clippy::collapsible_if)]\n+fn main() {\n+    let x = \"hello\";\n+    let y = \"world\";\n+    if x == \"hello\" && y == \"world\" {\n+    println!(\"Hello world!\");\n+}\n+\n+    if (x == \"hello\" || x == \"world\") && (y == \"world\" || y == \"hello\") {\n+    println!(\"Hello world!\");\n+}\n+\n+    if x == \"hello\" && x == \"world\" && (y == \"world\" || y == \"hello\") {\n+    println!(\"Hello world!\");\n+}\n+\n+    if (x == \"hello\" || x == \"world\") && y == \"world\" && y == \"hello\" {\n+    println!(\"Hello world!\");\n+}\n+\n+    if x == \"hello\" && x == \"world\" && y == \"world\" && y == \"hello\" {\n+    println!(\"Hello world!\");\n+}\n+\n+    if 42 == 1337 && 'a' != 'A' {\n+    println!(\"world!\")\n+}\n+\n+    // Collapse `else { if .. }` to `else if ..`\n+    if x == \"hello\" {\n+        print!(\"Hello \");\n+    } else if y == \"world\" {\n+    println!(\"world!\")\n+}\n+\n+    if x == \"hello\" {\n+        print!(\"Hello \");\n+    } else if let Some(42) = Some(42) {\n+    println!(\"world!\")\n+}\n+\n+    if x == \"hello\" {\n+        print!(\"Hello \");\n+    } else if y == \"world\" {\n+    println!(\"world\")\n+}\n+else {\n+    println!(\"!\")\n+}\n+\n+    if x == \"hello\" {\n+        print!(\"Hello \");\n+    } else if let Some(42) = Some(42) {\n+    println!(\"world\")\n+}\n+else {\n+    println!(\"!\")\n+}\n+\n+    if let Some(42) = Some(42) {\n+        print!(\"Hello \");\n+    } else if let Some(42) = Some(42) {\n+    println!(\"world\")\n+}\n+else {\n+    println!(\"!\")\n+}\n+\n+    if let Some(42) = Some(42) {\n+        print!(\"Hello \");\n+    } else if x == \"hello\" {\n+    println!(\"world\")\n+}\n+else {\n+    println!(\"!\")\n+}\n+\n+    if let Some(42) = Some(42) {\n+        print!(\"Hello \");\n+    } else if let Some(42) = Some(42) {\n+    println!(\"world\")\n+}\n+else {\n+    println!(\"!\")\n+}\n+\n+    // Works because any if with an else statement cannot be collapsed.\n+    if x == \"hello\" {\n+        if y == \"world\" {\n+            println!(\"Hello world!\");\n+        }\n+    } else {\n+        println!(\"Not Hello world\");\n+    }\n+\n+    if x == \"hello\" {\n+        if y == \"world\" {\n+            println!(\"Hello world!\");\n+        } else {\n+            println!(\"Hello something else\");\n+        }\n+    }\n+\n+    if x == \"hello\" {\n+        print!(\"Hello \");\n+        if y == \"world\" {\n+            println!(\"world!\")\n+        }\n+    }\n+\n+    if true {\n+    } else {\n+        assert!(true); // assert! is just an `if`\n+    }\n+\n+\n+    // The following tests check for the fix of https://github.com/rust-lang/rust-clippy/issues/798\n+    if x == \"hello\" {// Not collapsible\n+        if y == \"world\" {\n+            println!(\"Hello world!\");\n+        }\n+    }\n+\n+    if x == \"hello\" { // Not collapsible\n+        if y == \"world\" {\n+            println!(\"Hello world!\");\n+        }\n+    }\n+\n+    if x == \"hello\" {\n+        // Not collapsible\n+        if y == \"world\" {\n+            println!(\"Hello world!\");\n+        }\n+    }\n+\n+    if x == \"hello\" && y == \"world\" { // Collapsible\n+    println!(\"Hello world!\");\n+}\n+\n+    if x == \"hello\" {\n+        print!(\"Hello \");\n+    } else {\n+        // Not collapsible\n+        if y == \"world\" {\n+            println!(\"world!\")\n+        }\n+    }\n+\n+    if x == \"hello\" {\n+        print!(\"Hello \");\n+    } else {\n+        // Not collapsible\n+        if let Some(42) = Some(42) {\n+            println!(\"world!\")\n+        }\n+    }\n+\n+    if x == \"hello\" {\n+        /* Not collapsible */\n+        if y == \"world\" {\n+            println!(\"Hello world!\");\n+        }\n+    }\n+\n+    if x == \"hello\" { /* Not collapsible */\n+        if y == \"world\" {\n+            println!(\"Hello world!\");\n+        }\n+    }\n+}"}, {"sha": "f482d7704def92b7103bc9dafb6251944feb84c2", "filename": "tests/ui/collapsible_if.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.rs?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,3 +1,6 @@\n+// run-rustfix\n+#![allow(clippy::cyclomatic_complexity)]\n+\n #[rustfmt::skip]\n #[warn(clippy::collapsible_if)]\n fn main() {"}, {"sha": "d6d0b9d5d4eaa276de835167837ef68718173354", "filename": "tests/ui/collapsible_if.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fcollapsible_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fcollapsible_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.stderr?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,5 +1,5 @@\n error: this if statement can be collapsed\n-  --> $DIR/collapsible_if.rs:6:5\n+  --> $DIR/collapsible_if.rs:9:5\n    |\n LL | /     if x == \"hello\" {\n LL | |         if y == \"world\" {\n@@ -17,7 +17,7 @@ LL | }\n    |\n \n error: this if statement can be collapsed\n-  --> $DIR/collapsible_if.rs:12:5\n+  --> $DIR/collapsible_if.rs:15:5\n    |\n LL | /     if x == \"hello\" || x == \"world\" {\n LL | |         if y == \"world\" || y == \"hello\" {\n@@ -33,7 +33,7 @@ LL | }\n    |\n \n error: this if statement can be collapsed\n-  --> $DIR/collapsible_if.rs:18:5\n+  --> $DIR/collapsible_if.rs:21:5\n    |\n LL | /     if x == \"hello\" && x == \"world\" {\n LL | |         if y == \"world\" || y == \"hello\" {\n@@ -49,7 +49,7 @@ LL | }\n    |\n \n error: this if statement can be collapsed\n-  --> $DIR/collapsible_if.rs:24:5\n+  --> $DIR/collapsible_if.rs:27:5\n    |\n LL | /     if x == \"hello\" || x == \"world\" {\n LL | |         if y == \"world\" && y == \"hello\" {\n@@ -65,7 +65,7 @@ LL | }\n    |\n \n error: this if statement can be collapsed\n-  --> $DIR/collapsible_if.rs:30:5\n+  --> $DIR/collapsible_if.rs:33:5\n    |\n LL | /     if x == \"hello\" && x == \"world\" {\n LL | |         if y == \"world\" && y == \"hello\" {\n@@ -81,7 +81,7 @@ LL | }\n    |\n \n error: this if statement can be collapsed\n-  --> $DIR/collapsible_if.rs:36:5\n+  --> $DIR/collapsible_if.rs:39:5\n    |\n LL | /     if 42 == 1337 {\n LL | |         if 'a' != 'A' {\n@@ -97,7 +97,7 @@ LL | }\n    |\n \n error: this `else { if .. }` block can be collapsed\n-  --> $DIR/collapsible_if.rs:45:12\n+  --> $DIR/collapsible_if.rs:48:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -114,7 +114,7 @@ LL | }\n    |\n \n error: this `else { if .. }` block can be collapsed\n-  --> $DIR/collapsible_if.rs:53:12\n+  --> $DIR/collapsible_if.rs:56:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -131,7 +131,7 @@ LL | }\n    |\n \n error: this `else { if .. }` block can be collapsed\n-  --> $DIR/collapsible_if.rs:61:12\n+  --> $DIR/collapsible_if.rs:64:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -153,7 +153,7 @@ LL | }\n    |\n \n error: this `else { if .. }` block can be collapsed\n-  --> $DIR/collapsible_if.rs:72:12\n+  --> $DIR/collapsible_if.rs:75:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -175,7 +175,7 @@ LL | }\n    |\n \n error: this `else { if .. }` block can be collapsed\n-  --> $DIR/collapsible_if.rs:83:12\n+  --> $DIR/collapsible_if.rs:86:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -197,7 +197,7 @@ LL | }\n    |\n \n error: this `else { if .. }` block can be collapsed\n-  --> $DIR/collapsible_if.rs:94:12\n+  --> $DIR/collapsible_if.rs:97:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -219,7 +219,7 @@ LL | }\n    |\n \n error: this `else { if .. }` block can be collapsed\n-  --> $DIR/collapsible_if.rs:105:12\n+  --> $DIR/collapsible_if.rs:108:12\n    |\n LL |       } else {\n    |  ____________^\n@@ -241,7 +241,7 @@ LL | }\n    |\n \n error: this if statement can be collapsed\n-  --> $DIR/collapsible_if.rs:164:5\n+  --> $DIR/collapsible_if.rs:167:5\n    |\n LL | /     if x == \"hello\" {\n LL | |         if y == \"world\" { // Collapsible"}, {"sha": "ee5c7863effcb84b34a893e18dbc7710be5673b0", "filename": "tests/ui/duration_subsec.fixed", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fduration_subsec.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fduration_subsec.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduration_subsec.fixed?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -0,0 +1,29 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+#![warn(clippy::duration_subsec)]\n+\n+use std::time::Duration;\n+\n+fn main() {\n+    let dur = Duration::new(5, 0);\n+\n+    let bad_millis_1 = dur.subsec_millis();\n+    let bad_millis_2 = dur.subsec_millis();\n+    let good_millis = dur.subsec_millis();\n+    assert_eq!(bad_millis_1, good_millis);\n+    assert_eq!(bad_millis_2, good_millis);\n+\n+    let bad_micros = dur.subsec_micros();\n+    let good_micros = dur.subsec_micros();\n+    assert_eq!(bad_micros, good_micros);\n+\n+    // Handle refs\n+    let _ = (&dur).subsec_micros();\n+\n+    // Handle constants\n+    const NANOS_IN_MICRO: u32 = 1_000;\n+    let _ = dur.subsec_micros();\n+\n+    // Other literals aren't linted\n+    let _ = dur.subsec_nanos() / 699;\n+}"}, {"sha": "3c9d2a286211017854d57039166bf80bb18976b7", "filename": "tests/ui/duration_subsec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduration_subsec.rs?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+#![allow(dead_code)]\n #![warn(clippy::duration_subsec)]\n \n use std::time::Duration;"}, {"sha": "bd8adc2c57055b20e0b515c9f24c33dbcaab902d", "filename": "tests/ui/duration_subsec.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fduration_subsec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fduration_subsec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduration_subsec.stderr?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,31 +1,31 @@\n error: Calling `subsec_millis()` is more concise than this calculation\n-  --> $DIR/duration_subsec.rs:8:24\n+  --> $DIR/duration_subsec.rs:10:24\n    |\n LL |     let bad_millis_1 = dur.subsec_micros() / 1_000;\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_millis()`\n    |\n    = note: `-D clippy::duration-subsec` implied by `-D warnings`\n \n error: Calling `subsec_millis()` is more concise than this calculation\n-  --> $DIR/duration_subsec.rs:9:24\n+  --> $DIR/duration_subsec.rs:11:24\n    |\n LL |     let bad_millis_2 = dur.subsec_nanos() / 1_000_000;\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_millis()`\n \n error: Calling `subsec_micros()` is more concise than this calculation\n-  --> $DIR/duration_subsec.rs:14:22\n+  --> $DIR/duration_subsec.rs:16:22\n    |\n LL |     let bad_micros = dur.subsec_nanos() / 1_000;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_micros()`\n \n error: Calling `subsec_micros()` is more concise than this calculation\n-  --> $DIR/duration_subsec.rs:19:13\n+  --> $DIR/duration_subsec.rs:21:13\n    |\n LL |     let _ = (&dur).subsec_nanos() / 1_000;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(&dur).subsec_micros()`\n \n error: Calling `subsec_micros()` is more concise than this calculation\n-  --> $DIR/duration_subsec.rs:23:13\n+  --> $DIR/duration_subsec.rs:25:13\n    |\n LL |     let _ = dur.subsec_nanos() / NANOS_IN_MICRO;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_micros()`"}, {"sha": "1646dff9064df4d9fb27a785db979418f747488c", "filename": "tests/ui/excessive_precision.fixed", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fexcessive_precision.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fexcessive_precision.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.fixed?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -0,0 +1,63 @@\n+// run-rustfix\n+#![warn(clippy::excessive_precision)]\n+#![allow(dead_code, unused_variables, clippy::print_literal)]\n+\n+fn main() {\n+    // Consts\n+    const GOOD32: f32 = 0.123_456;\n+    const GOOD32_SM: f32 = 0.000_000_000_1;\n+    const GOOD32_DOT: f32 = 10_000_000_000.0;\n+    const GOOD32_EDGE: f32 = 1.000_000_8;\n+    const GOOD64: f64 = 0.123_456_789_012;\n+    const GOOD64_SM: f32 = 0.000_000_000_000_000_1;\n+    const GOOD64_DOT: f32 = 10_000_000_000_000_000.0;\n+\n+    const BAD32_1: f32 = 0.123_456_79;\n+    const BAD32_2: f32 = 0.123_456_79;\n+    const BAD32_3: f32 = 0.1;\n+    const BAD32_EDGE: f32 = 1.000_001;\n+\n+    const BAD64_1: f64 = 0.123_456_789_012_345_66;\n+    const BAD64_2: f64 = 0.123_456_789_012_345_66;\n+    const BAD64_3: f64 = 0.1;\n+\n+    // Literal as param\n+    println!(\"{:?}\", 8.888_888_888_888_89);\n+\n+    // // TODO add inferred type tests for f32\n+    // Locals\n+    let good32: f32 = 0.123_456_f32;\n+    let good32_2: f32 = 0.123_456;\n+\n+    let good64: f64 = 0.123_456_789_012;\n+    let good64_suf: f64 = 0.123_456_789_012f64;\n+    let good64_inf = 0.123_456_789_012;\n+\n+    let bad32: f32 = 1.123_456_8;\n+    let bad32_suf: f32 = 1.123_456_8;\n+    let bad32_inf = 1.123_456_8;\n+\n+    let bad64: f64 = 0.123_456_789_012_345_66;\n+    let bad64_suf: f64 = 0.123_456_789_012_345_66;\n+    let bad64_inf = 0.123_456_789_012_345_66;\n+\n+    // Vectors\n+    let good_vec32: Vec<f32> = vec![0.123_456];\n+    let good_vec64: Vec<f64> = vec![0.123_456_789];\n+\n+    let bad_vec32: Vec<f32> = vec![0.123_456_79];\n+    let bad_vec64: Vec<f64> = vec![0.123_456_789_123_456_78];\n+\n+    // Exponential float notation\n+    let good_e32: f32 = 1e-10;\n+    let bad_e32: f32 = 1.123_456_8e-10;\n+\n+    let good_bige32: f32 = 1E-10;\n+    let bad_bige32: f32 = 1.123_456_8E-10;\n+\n+    // Inferred type\n+    let good_inferred: f32 = 1f32 * 1_000_000_000.;\n+\n+    // issue #2840\n+    let num = 0.000_000_000_01e-10f64;\n+}"}, {"sha": "ce4722a90f9002edd571d1d2123861905f5726c3", "filename": "tests/ui/excessive_precision.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.rs?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,5 +1,6 @@\n+// run-rustfix\n #![warn(clippy::excessive_precision)]\n-#![allow(clippy::print_literal)]\n+#![allow(dead_code, unused_variables, clippy::print_literal)]\n \n fn main() {\n     // Consts"}, {"sha": "12f8a61b75c5a0f25420b142c2074c460d706c4c", "filename": "tests/ui/excessive_precision.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fexcessive_precision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fexcessive_precision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.stderr?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,109 +1,109 @@\n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:14:26\n+  --> $DIR/excessive_precision.rs:15:26\n    |\n LL |     const BAD32_1: f32 = 0.123_456_789_f32;\n    |                          ^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_79`\n    |\n    = note: `-D clippy::excessive-precision` implied by `-D warnings`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:15:26\n+  --> $DIR/excessive_precision.rs:16:26\n    |\n LL |     const BAD32_2: f32 = 0.123_456_789;\n    |                          ^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_79`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:16:26\n+  --> $DIR/excessive_precision.rs:17:26\n    |\n LL |     const BAD32_3: f32 = 0.100_000_000_000_1;\n    |                          ^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.1`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:17:29\n+  --> $DIR/excessive_precision.rs:18:29\n    |\n LL |     const BAD32_EDGE: f32 = 1.000_000_9;\n    |                             ^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.000_001`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:19:26\n+  --> $DIR/excessive_precision.rs:20:26\n    |\n LL |     const BAD64_1: f64 = 0.123_456_789_012_345_67f64;\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_789_012_345_66`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:20:26\n+  --> $DIR/excessive_precision.rs:21:26\n    |\n LL |     const BAD64_2: f64 = 0.123_456_789_012_345_67;\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_789_012_345_66`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:21:26\n+  --> $DIR/excessive_precision.rs:22:26\n    |\n LL |     const BAD64_3: f64 = 0.100_000_000_000_000_000_1;\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.1`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:24:22\n+  --> $DIR/excessive_precision.rs:25:22\n    |\n LL |     println!(\"{:?}\", 8.888_888_888_888_888_888_888);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `8.888_888_888_888_89`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:35:22\n+  --> $DIR/excessive_precision.rs:36:22\n    |\n LL |     let bad32: f32 = 1.123_456_789;\n    |                      ^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.123_456_8`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:36:26\n+  --> $DIR/excessive_precision.rs:37:26\n    |\n LL |     let bad32_suf: f32 = 1.123_456_789_f32;\n    |                          ^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.123_456_8`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:37:21\n+  --> $DIR/excessive_precision.rs:38:21\n    |\n LL |     let bad32_inf = 1.123_456_789_f32;\n    |                     ^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.123_456_8`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:39:22\n+  --> $DIR/excessive_precision.rs:40:22\n    |\n LL |     let bad64: f64 = 0.123_456_789_012_345_67;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_789_012_345_66`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:40:26\n+  --> $DIR/excessive_precision.rs:41:26\n    |\n LL |     let bad64_suf: f64 = 0.123_456_789_012_345_67f64;\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_789_012_345_66`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:41:21\n+  --> $DIR/excessive_precision.rs:42:21\n    |\n LL |     let bad64_inf = 0.123_456_789_012_345_67;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_789_012_345_66`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:47:36\n+  --> $DIR/excessive_precision.rs:48:36\n    |\n LL |     let bad_vec32: Vec<f32> = vec![0.123_456_789];\n    |                                    ^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_79`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:48:36\n+  --> $DIR/excessive_precision.rs:49:36\n    |\n LL |     let bad_vec64: Vec<f64> = vec![0.123_456_789_123_456_789];\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `0.123_456_789_123_456_78`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:52:24\n+  --> $DIR/excessive_precision.rs:53:24\n    |\n LL |     let bad_e32: f32 = 1.123_456_788_888e-10;\n    |                        ^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.123_456_8e-10`\n \n error: float has excessive precision\n-  --> $DIR/excessive_precision.rs:55:27\n+  --> $DIR/excessive_precision.rs:56:27\n    |\n LL |     let bad_bige32: f32 = 1.123_456_788_888E-10;\n    |                           ^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.123_456_8E-10`"}, {"sha": "692d2ca675f91ac6712d46be511934876151e9bd", "filename": "tests/ui/explicit_write.fixed", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fexplicit_write.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fexplicit_write.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_write.fixed?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -0,0 +1,51 @@\n+// run-rustfix\n+#![allow(unused_imports)]\n+#![warn(clippy::explicit_write)]\n+\n+fn stdout() -> String {\n+    String::new()\n+}\n+\n+fn stderr() -> String {\n+    String::new()\n+}\n+\n+fn main() {\n+    // these should warn\n+    {\n+        use std::io::Write;\n+        print!(\"test\");\n+        eprint!(\"test\");\n+        println!(\"test\");\n+        eprintln!(\"test\");\n+        print!(\"test\");\n+        eprint!(\"test\");\n+\n+        // including newlines\n+        println!(\"test\\ntest\");\n+        eprintln!(\"test\\ntest\");\n+    }\n+    // these should not warn, different destination\n+    {\n+        use std::fmt::Write;\n+        let mut s = String::new();\n+        write!(s, \"test\").unwrap();\n+        write!(s, \"test\").unwrap();\n+        writeln!(s, \"test\").unwrap();\n+        writeln!(s, \"test\").unwrap();\n+        s.write_fmt(format_args!(\"test\")).unwrap();\n+        s.write_fmt(format_args!(\"test\")).unwrap();\n+        write!(stdout(), \"test\").unwrap();\n+        write!(stderr(), \"test\").unwrap();\n+        writeln!(stdout(), \"test\").unwrap();\n+        writeln!(stderr(), \"test\").unwrap();\n+        stdout().write_fmt(format_args!(\"test\")).unwrap();\n+        stderr().write_fmt(format_args!(\"test\")).unwrap();\n+    }\n+    // these should not warn, no unwrap\n+    {\n+        use std::io::Write;\n+        std::io::stdout().write_fmt(format_args!(\"test\")).expect(\"no stdout\");\n+        std::io::stderr().write_fmt(format_args!(\"test\")).expect(\"no stderr\");\n+    }\n+}"}, {"sha": "455c5ef55d05c4209be525017565edc7706f26be", "filename": "tests/ui/explicit_write.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_write.rs?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+#![allow(unused_imports)]\n #![warn(clippy::explicit_write)]\n \n fn stdout() -> String {"}, {"sha": "9feef9c0dc8443cb0ef33f4df01e59a9110bea1c", "filename": "tests/ui/explicit_write.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fexplicit_write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fexplicit_write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_write.stderr?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,49 +1,49 @@\n error: use of `write!(stdout(), ...).unwrap()`\n-  --> $DIR/explicit_write.rs:15:9\n+  --> $DIR/explicit_write.rs:17:9\n    |\n LL |         write!(std::io::stdout(), \"test\").unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `print!(\"test\")`\n    |\n    = note: `-D clippy::explicit-write` implied by `-D warnings`\n \n error: use of `write!(stderr(), ...).unwrap()`\n-  --> $DIR/explicit_write.rs:16:9\n+  --> $DIR/explicit_write.rs:18:9\n    |\n LL |         write!(std::io::stderr(), \"test\").unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprint!(\"test\")`\n \n error: use of `writeln!(stdout(), ...).unwrap()`\n-  --> $DIR/explicit_write.rs:17:9\n+  --> $DIR/explicit_write.rs:19:9\n    |\n LL |         writeln!(std::io::stdout(), \"test\").unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `println!(\"test\")`\n \n error: use of `writeln!(stderr(), ...).unwrap()`\n-  --> $DIR/explicit_write.rs:18:9\n+  --> $DIR/explicit_write.rs:20:9\n    |\n LL |         writeln!(std::io::stderr(), \"test\").unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprintln!(\"test\")`\n \n error: use of `stdout().write_fmt(...).unwrap()`\n-  --> $DIR/explicit_write.rs:19:9\n+  --> $DIR/explicit_write.rs:21:9\n    |\n LL |         std::io::stdout().write_fmt(format_args!(\"test\")).unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `print!(\"test\")`\n \n error: use of `stderr().write_fmt(...).unwrap()`\n-  --> $DIR/explicit_write.rs:20:9\n+  --> $DIR/explicit_write.rs:22:9\n    |\n LL |         std::io::stderr().write_fmt(format_args!(\"test\")).unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprint!(\"test\")`\n \n error: use of `writeln!(stdout(), ...).unwrap()`\n-  --> $DIR/explicit_write.rs:23:9\n+  --> $DIR/explicit_write.rs:25:9\n    |\n LL |         writeln!(std::io::stdout(), \"test/ntest\").unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `println!(\"test/ntest\")`\n \n error: use of `writeln!(stderr(), ...).unwrap()`\n-  --> $DIR/explicit_write.rs:24:9\n+  --> $DIR/explicit_write.rs:26:9\n    |\n LL |         writeln!(std::io::stderr(), \"test/ntest\").unwrap();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `eprintln!(\"test/ntest\")`"}, {"sha": "f25be70737bc2859e011e1051f8013f7172ec336", "filename": "tests/ui/inconsistent_digit_grouping.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Finconsistent_digit_grouping.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Finconsistent_digit_grouping.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.fixed?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+#[warn(clippy::inconsistent_digit_grouping)]\n+#[allow(unused_variables, clippy::excessive_precision)]\n+fn main() {\n+    let good = (\n+        123,\n+        1_234,\n+        1_2345_6789,\n+        123_f32,\n+        1_234.12_f32,\n+        1_234.123_4_f32,\n+        1.123_456_7_f32,\n+    );\n+    let bad = (123_456, 12_345_678, 1_234_567, 1_234.567_8_f32, 1.234_567_8_f32);\n+}"}, {"sha": "206fac8d3e3fd9469d663fc4efcddc6297c07b2e", "filename": "tests/ui/inconsistent_digit_grouping.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Finconsistent_digit_grouping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Finconsistent_digit_grouping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.rs?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,5 +1,6 @@\n+// run-rustfix\n #[warn(clippy::inconsistent_digit_grouping)]\n-#[allow(unused_variables)]\n+#[allow(unused_variables, clippy::excessive_precision)]\n fn main() {\n     let good = (\n         123,"}, {"sha": "9fc1f424dc6ae82a4ec3e5c30f84648c7d7e37c4", "filename": "tests/ui/inconsistent_digit_grouping.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Finconsistent_digit_grouping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Finconsistent_digit_grouping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.stderr?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,31 +1,31 @@\n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:13:16\n+  --> $DIR/inconsistent_digit_grouping.rs:14:16\n    |\n LL |     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n    |                ^^^^^^^^ help: consider: `123_456`\n    |\n    = note: `-D clippy::inconsistent-digit-grouping` implied by `-D warnings`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:13:26\n+  --> $DIR/inconsistent_digit_grouping.rs:14:26\n    |\n LL |     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n    |                          ^^^^^^^^^^ help: consider: `12_345_678`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:13:38\n+  --> $DIR/inconsistent_digit_grouping.rs:14:38\n    |\n LL |     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n    |                                      ^^^^^^^^ help: consider: `1_234_567`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:13:48\n+  --> $DIR/inconsistent_digit_grouping.rs:14:48\n    |\n LL |     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n    |                                                ^^^^^^^^^^^^^^ help: consider: `1_234.567_8_f32`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:13:64\n+  --> $DIR/inconsistent_digit_grouping.rs:14:64\n    |\n LL |     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n    |                                                                ^^^^^^^^^^^^^^ help: consider: `1.234_567_8_f32`"}, {"sha": "f16f0fd00197b90695cc58adcb1a2d00465bbd76", "filename": "tests/ui/infallible_destructuring_match.fixed", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Finfallible_destructuring_match.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Finfallible_destructuring_match.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfallible_destructuring_match.fixed?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -0,0 +1,79 @@\n+// run-rustfix\n+#![feature(exhaustive_patterns, never_type)]\n+#![allow(dead_code, unreachable_code, unused_variables)]\n+#![allow(clippy::let_and_return)]\n+\n+enum SingleVariantEnum {\n+    Variant(i32),\n+}\n+\n+struct TupleStruct(i32);\n+\n+enum EmptyEnum {}\n+\n+fn infallible_destructuring_match_enum() {\n+    let wrapper = SingleVariantEnum::Variant(0);\n+\n+    // This should lint!\n+    let SingleVariantEnum::Variant(data) = wrapper;\n+\n+    // This shouldn't!\n+    let data = match wrapper {\n+        SingleVariantEnum::Variant(_) => -1,\n+    };\n+\n+    // Neither should this!\n+    let data = match wrapper {\n+        SingleVariantEnum::Variant(i) => -1,\n+    };\n+\n+    let SingleVariantEnum::Variant(data) = wrapper;\n+}\n+\n+fn infallible_destructuring_match_struct() {\n+    let wrapper = TupleStruct(0);\n+\n+    // This should lint!\n+    let TupleStruct(data) = wrapper;\n+\n+    // This shouldn't!\n+    let data = match wrapper {\n+        TupleStruct(_) => -1,\n+    };\n+\n+    // Neither should this!\n+    let data = match wrapper {\n+        TupleStruct(i) => -1,\n+    };\n+\n+    let TupleStruct(data) = wrapper;\n+}\n+\n+fn never_enum() {\n+    let wrapper: Result<i32, !> = Ok(23);\n+\n+    // This should lint!\n+    let Ok(data) = wrapper;\n+\n+    // This shouldn't!\n+    let data = match wrapper {\n+        Ok(_) => -1,\n+    };\n+\n+    // Neither should this!\n+    let data = match wrapper {\n+        Ok(i) => -1,\n+    };\n+\n+    let Ok(data) = wrapper;\n+}\n+\n+impl EmptyEnum {\n+    fn match_on(&self) -> ! {\n+        // The lint shouldn't pick this up, as `let` won't work here!\n+        let data = match *self {};\n+        data\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a4823ad60ad3dc9496a155bb7a16c7e71c3b1541", "filename": "tests/ui/infallible_destructuring_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Finfallible_destructuring_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Finfallible_destructuring_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfallible_destructuring_match.rs?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,4 +1,6 @@\n+// run-rustfix\n #![feature(exhaustive_patterns, never_type)]\n+#![allow(dead_code, unreachable_code, unused_variables)]\n #![allow(clippy::let_and_return)]\n \n enum SingleVariantEnum {"}, {"sha": "e3693d44e9a1397ce724eab08d0a4df3d315520f", "filename": "tests/ui/infallible_destructuring_match.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Finfallible_destructuring_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Finfallible_destructuring_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfallible_destructuring_match.stderr?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,5 +1,5 @@\n error: you seem to be trying to use match to destructure a single infallible pattern. Consider using `let`\n-  --> $DIR/infallible_destructuring_match.rs:16:5\n+  --> $DIR/infallible_destructuring_match.rs:18:5\n    |\n LL | /     let data = match wrapper {\n LL | |         SingleVariantEnum::Variant(i) => i,\n@@ -9,15 +9,15 @@ LL | |     };\n    = note: `-D clippy::infallible-destructuring-match` implied by `-D warnings`\n \n error: you seem to be trying to use match to destructure a single infallible pattern. Consider using `let`\n-  --> $DIR/infallible_destructuring_match.rs:37:5\n+  --> $DIR/infallible_destructuring_match.rs:39:5\n    |\n LL | /     let data = match wrapper {\n LL | |         TupleStruct(i) => i,\n LL | |     };\n    | |______^ help: try this: `let TupleStruct(data) = wrapper;`\n \n error: you seem to be trying to use match to destructure a single infallible pattern. Consider using `let`\n-  --> $DIR/infallible_destructuring_match.rs:58:5\n+  --> $DIR/infallible_destructuring_match.rs:60:5\n    |\n LL | /     let data = match wrapper {\n LL | |         Ok(i) => i,"}, {"sha": "f5342be631b04888fb1ceddd7fe49fa3ff6f16a4", "filename": "tests/ui/into_iter_on_ref.fixed", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Finto_iter_on_ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Finto_iter_on_ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.fixed?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -0,0 +1,46 @@\n+// run-rustfix\n+#![allow(clippy::useless_vec)]\n+#![warn(clippy::into_iter_on_ref)]\n+#![deny(clippy::into_iter_on_array)]\n+\n+struct X;\n+use std::collections::*;\n+\n+fn main() {\n+    for _ in &[1, 2, 3] {}\n+    for _ in vec![X, X] {}\n+    for _ in &vec![X, X] {}\n+    for _ in [1, 2, 3].iter() {} //~ ERROR equivalent to .iter()\n+\n+    let _ = [1, 2, 3].iter(); //~ ERROR equivalent to .iter()\n+    let _ = vec![1, 2, 3].into_iter();\n+    let _ = (&vec![1, 2, 3]).iter(); //~ WARN equivalent to .iter()\n+    let _ = vec![1, 2, 3].into_boxed_slice().iter(); //~ WARN equivalent to .iter()\n+    let _ = std::rc::Rc::from(&[X][..]).iter(); //~ WARN equivalent to .iter()\n+    let _ = std::sync::Arc::from(&[X][..]).iter(); //~ WARN equivalent to .iter()\n+\n+    let _ = (&&&&&&&[1, 2, 3]).iter(); //~ ERROR equivalent to .iter()\n+    let _ = (&&&&mut &&&[1, 2, 3]).iter(); //~ ERROR equivalent to .iter()\n+    let _ = (&mut &mut &mut [1, 2, 3]).iter_mut(); //~ ERROR equivalent to .iter_mut()\n+\n+    let _ = (&Some(4)).iter(); //~ WARN equivalent to .iter()\n+    let _ = (&mut Some(5)).iter_mut(); //~ WARN equivalent to .iter_mut()\n+    let _ = (&Ok::<_, i32>(6)).iter(); //~ WARN equivalent to .iter()\n+    let _ = (&mut Err::<i32, _>(7)).iter_mut(); //~ WARN equivalent to .iter_mut()\n+    let _ = (&Vec::<i32>::new()).iter(); //~ WARN equivalent to .iter()\n+    let _ = (&mut Vec::<i32>::new()).iter_mut(); //~ WARN equivalent to .iter_mut()\n+    let _ = (&BTreeMap::<i32, u64>::new()).iter(); //~ WARN equivalent to .iter()\n+    let _ = (&mut BTreeMap::<i32, u64>::new()).iter_mut(); //~ WARN equivalent to .iter_mut()\n+    let _ = (&VecDeque::<i32>::new()).iter(); //~ WARN equivalent to .iter()\n+    let _ = (&mut VecDeque::<i32>::new()).iter_mut(); //~ WARN equivalent to .iter_mut()\n+    let _ = (&LinkedList::<i32>::new()).iter(); //~ WARN equivalent to .iter()\n+    let _ = (&mut LinkedList::<i32>::new()).iter_mut(); //~ WARN equivalent to .iter_mut()\n+    let _ = (&HashMap::<i32, u64>::new()).iter(); //~ WARN equivalent to .iter()\n+    let _ = (&mut HashMap::<i32, u64>::new()).iter_mut(); //~ WARN equivalent to .iter_mut()\n+\n+    let _ = (&BTreeSet::<i32>::new()).iter(); //~ WARN equivalent to .iter()\n+    let _ = (&BinaryHeap::<i32>::new()).iter(); //~ WARN equivalent to .iter()\n+    let _ = (&HashSet::<i32>::new()).iter(); //~ WARN equivalent to .iter()\n+    let _ = std::path::Path::new(\"12/34\").iter(); //~ WARN equivalent to .iter()\n+    let _ = std::path::PathBuf::from(\"12/34\").iter(); //~ ERROR equivalent to .iter()\n+}"}, {"sha": "5ec64dcf733a1c9a41c0c70de67f5593f8545d5b", "filename": "tests/ui/into_iter_on_ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Finto_iter_on_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Finto_iter_on_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.rs?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+#![allow(clippy::useless_vec)]\n #![warn(clippy::into_iter_on_ref)]\n #![deny(clippy::into_iter_on_array)]\n "}, {"sha": "931e4880f938b47c0ffb6277a75f3d01f1b41d62", "filename": "tests/ui/into_iter_on_ref.stderr", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Finto_iter_on_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Finto_iter_on_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.stderr?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,175 +1,175 @@\n error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:11:24\n+  --> $DIR/into_iter_on_ref.rs:13:24\n    |\n LL |     for _ in [1, 2, 3].into_iter() {} //~ ERROR equivalent to .iter()\n    |                        ^^^^^^^^^ help: call directly: `iter`\n    |\n note: lint level defined here\n-  --> $DIR/into_iter_on_ref.rs:2:9\n+  --> $DIR/into_iter_on_ref.rs:4:9\n    |\n LL | #![deny(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:13:23\n+  --> $DIR/into_iter_on_ref.rs:15:23\n    |\n LL |     let _ = [1, 2, 3].into_iter(); //~ ERROR equivalent to .iter()\n    |                       ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Vec\n-  --> $DIR/into_iter_on_ref.rs:15:30\n+  --> $DIR/into_iter_on_ref.rs:17:30\n    |\n LL |     let _ = (&vec![1, 2, 3]).into_iter(); //~ WARN equivalent to .iter()\n    |                              ^^^^^^^^^ help: call directly: `iter`\n    |\n    = note: `-D clippy::into-iter-on-ref` implied by `-D warnings`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the slice\n-  --> $DIR/into_iter_on_ref.rs:16:46\n+  --> $DIR/into_iter_on_ref.rs:18:46\n    |\n LL |     let _ = vec![1, 2, 3].into_boxed_slice().into_iter(); //~ WARN equivalent to .iter()\n    |                                              ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the slice\n-  --> $DIR/into_iter_on_ref.rs:17:41\n+  --> $DIR/into_iter_on_ref.rs:19:41\n    |\n LL |     let _ = std::rc::Rc::from(&[X][..]).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the slice\n-  --> $DIR/into_iter_on_ref.rs:18:44\n+  --> $DIR/into_iter_on_ref.rs:20:44\n    |\n LL |     let _ = std::sync::Arc::from(&[X][..]).into_iter(); //~ WARN equivalent to .iter()\n    |                                            ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:20:32\n+  --> $DIR/into_iter_on_ref.rs:22:32\n    |\n LL |     let _ = (&&&&&&&[1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter()\n    |                                ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:21:36\n+  --> $DIR/into_iter_on_ref.rs:23:36\n    |\n LL |     let _ = (&&&&mut &&&[1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter()\n    |                                    ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the array\n-  --> $DIR/into_iter_on_ref.rs:22:40\n+  --> $DIR/into_iter_on_ref.rs:24:40\n    |\n LL |     let _ = (&mut &mut &mut [1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter_mut()\n    |                                        ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Option\n-  --> $DIR/into_iter_on_ref.rs:24:24\n+  --> $DIR/into_iter_on_ref.rs:26:24\n    |\n LL |     let _ = (&Some(4)).into_iter(); //~ WARN equivalent to .iter()\n    |                        ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the Option\n-  --> $DIR/into_iter_on_ref.rs:25:28\n+  --> $DIR/into_iter_on_ref.rs:27:28\n    |\n LL |     let _ = (&mut Some(5)).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                            ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Result\n-  --> $DIR/into_iter_on_ref.rs:26:32\n+  --> $DIR/into_iter_on_ref.rs:28:32\n    |\n LL |     let _ = (&Ok::<_, i32>(6)).into_iter(); //~ WARN equivalent to .iter()\n    |                                ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the Result\n-  --> $DIR/into_iter_on_ref.rs:27:37\n+  --> $DIR/into_iter_on_ref.rs:29:37\n    |\n LL |     let _ = (&mut Err::<i32, _>(7)).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                     ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Vec\n-  --> $DIR/into_iter_on_ref.rs:28:34\n+  --> $DIR/into_iter_on_ref.rs:30:34\n    |\n LL |     let _ = (&Vec::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                  ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the Vec\n-  --> $DIR/into_iter_on_ref.rs:29:38\n+  --> $DIR/into_iter_on_ref.rs:31:38\n    |\n LL |     let _ = (&mut Vec::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                      ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the BTreeMap\n-  --> $DIR/into_iter_on_ref.rs:30:44\n+  --> $DIR/into_iter_on_ref.rs:32:44\n    |\n LL |     let _ = (&BTreeMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                            ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the BTreeMap\n-  --> $DIR/into_iter_on_ref.rs:31:48\n+  --> $DIR/into_iter_on_ref.rs:33:48\n    |\n LL |     let _ = (&mut BTreeMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                                ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the VecDeque\n-  --> $DIR/into_iter_on_ref.rs:32:39\n+  --> $DIR/into_iter_on_ref.rs:34:39\n    |\n LL |     let _ = (&VecDeque::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                       ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the VecDeque\n-  --> $DIR/into_iter_on_ref.rs:33:43\n+  --> $DIR/into_iter_on_ref.rs:35:43\n    |\n LL |     let _ = (&mut VecDeque::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                           ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the LinkedList\n-  --> $DIR/into_iter_on_ref.rs:34:41\n+  --> $DIR/into_iter_on_ref.rs:36:41\n    |\n LL |     let _ = (&LinkedList::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the LinkedList\n-  --> $DIR/into_iter_on_ref.rs:35:45\n+  --> $DIR/into_iter_on_ref.rs:37:45\n    |\n LL |     let _ = (&mut LinkedList::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                             ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the HashMap\n-  --> $DIR/into_iter_on_ref.rs:36:43\n+  --> $DIR/into_iter_on_ref.rs:38:43\n    |\n LL |     let _ = (&HashMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                           ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter_mut() and will not move the HashMap\n-  --> $DIR/into_iter_on_ref.rs:37:47\n+  --> $DIR/into_iter_on_ref.rs:39:47\n    |\n LL |     let _ = (&mut HashMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                               ^^^^^^^^^ help: call directly: `iter_mut`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the BTreeSet\n-  --> $DIR/into_iter_on_ref.rs:39:39\n+  --> $DIR/into_iter_on_ref.rs:41:39\n    |\n LL |     let _ = (&BTreeSet::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                       ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the BinaryHeap\n-  --> $DIR/into_iter_on_ref.rs:40:41\n+  --> $DIR/into_iter_on_ref.rs:42:41\n    |\n LL |     let _ = (&BinaryHeap::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the HashSet\n-  --> $DIR/into_iter_on_ref.rs:41:38\n+  --> $DIR/into_iter_on_ref.rs:43:38\n    |\n LL |     let _ = (&HashSet::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                      ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the Path\n-  --> $DIR/into_iter_on_ref.rs:42:43\n+  --> $DIR/into_iter_on_ref.rs:44:43\n    |\n LL |     let _ = std::path::Path::new(\"12/34\").into_iter(); //~ WARN equivalent to .iter()\n    |                                           ^^^^^^^^^ help: call directly: `iter`\n \n error: this .into_iter() call is equivalent to .iter() and will not move the PathBuf\n-  --> $DIR/into_iter_on_ref.rs:43:47\n+  --> $DIR/into_iter_on_ref.rs:45:47\n    |\n LL |     let _ = std::path::PathBuf::from(\"12/34\").into_iter(); //~ ERROR equivalent to .iter()\n    |                                               ^^^^^^^^^ help: call directly: `iter`"}, {"sha": "cf8b36a499b5d56d9ea30200ca1c8c4e8bfbbe54", "filename": "tests/ui/large_digit_groups.fixed", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Flarge_digit_groups.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Flarge_digit_groups.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_digit_groups.fixed?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+#[warn(clippy::large_digit_groups)]\n+#[allow(unused_variables)]\n+fn main() {\n+    let good = (\n+        0b1011_i64,\n+        0o1_234_u32,\n+        0x1_234_567,\n+        1_2345_6789,\n+        1234_f32,\n+        1_234.12_f32,\n+        1_234.123_f32,\n+        1.123_4_f32,\n+    );\n+    let bad = (\n+        0b11_0110_i64,\n+        0x0123_4567_8901_usize,\n+        123_456_f32,\n+        123_456.12_f32,\n+        123_456.123_45_f64,\n+        123_456.123_456_f64,\n+    );\n+}"}, {"sha": "5b9aa8c58d8f4c3b6eebaaaf157f5a194f2b8d5a", "filename": "tests/ui/large_digit_groups.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Flarge_digit_groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Flarge_digit_groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_digit_groups.rs?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n #[warn(clippy::large_digit_groups)]\n #[allow(unused_variables)]\n fn main() {\n@@ -16,7 +17,7 @@ fn main() {\n         0x1_23456_78901_usize,\n         1_23456_f32,\n         1_23456.12_f32,\n-        1_23456.12345_f32,\n-        1_23456.12345_6_f32,\n+        1_23456.12345_f64,\n+        1_23456.12345_6_f64,\n     );\n }"}, {"sha": "4b5d0bd1a9f644138a8b3246e5e94767d893072b", "filename": "tests/ui/large_digit_groups.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Flarge_digit_groups.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Flarge_digit_groups.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_digit_groups.stderr?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,40 +1,40 @@\n error: digit groups should be smaller\n-  --> $DIR/large_digit_groups.rs:15:9\n+  --> $DIR/large_digit_groups.rs:16:9\n    |\n LL |         0b1_10110_i64,\n    |         ^^^^^^^^^^^^^ help: consider: `0b11_0110_i64`\n    |\n    = note: `-D clippy::large-digit-groups` implied by `-D warnings`\n \n error: digit groups should be smaller\n-  --> $DIR/large_digit_groups.rs:16:9\n+  --> $DIR/large_digit_groups.rs:17:9\n    |\n LL |         0x1_23456_78901_usize,\n    |         ^^^^^^^^^^^^^^^^^^^^^ help: consider: `0x0123_4567_8901_usize`\n \n error: digit groups should be smaller\n-  --> $DIR/large_digit_groups.rs:17:9\n+  --> $DIR/large_digit_groups.rs:18:9\n    |\n LL |         1_23456_f32,\n    |         ^^^^^^^^^^^ help: consider: `123_456_f32`\n \n error: digit groups should be smaller\n-  --> $DIR/large_digit_groups.rs:18:9\n+  --> $DIR/large_digit_groups.rs:19:9\n    |\n LL |         1_23456.12_f32,\n    |         ^^^^^^^^^^^^^^ help: consider: `123_456.12_f32`\n \n error: digit groups should be smaller\n-  --> $DIR/large_digit_groups.rs:19:9\n+  --> $DIR/large_digit_groups.rs:20:9\n    |\n-LL |         1_23456.12345_f32,\n-   |         ^^^^^^^^^^^^^^^^^ help: consider: `123_456.123_45_f32`\n+LL |         1_23456.12345_f64,\n+   |         ^^^^^^^^^^^^^^^^^ help: consider: `123_456.123_45_f64`\n \n error: digit groups should be smaller\n-  --> $DIR/large_digit_groups.rs:20:9\n+  --> $DIR/large_digit_groups.rs:21:9\n    |\n-LL |         1_23456.12345_6_f32,\n-   |         ^^^^^^^^^^^^^^^^^^^ help: consider: `123_456.123_456_f32`\n+LL |         1_23456.12345_6_f64,\n+   |         ^^^^^^^^^^^^^^^^^^^ help: consider: `123_456.123_456_f64`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "5c41948828663b4520d1652c41ffd8b40ec6ad62", "filename": "tests/ui/map_clone.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fmap_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fmap_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.fixed?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+#![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::iter_cloned_collect)]\n+#![allow(clippy::missing_docs_in_private_items)]\n+\n+fn main() {\n+    let _: Vec<i8> = vec![5_i8; 6].iter().cloned().collect();\n+    let _: Vec<String> = vec![String::new()].iter().cloned().collect();\n+    let _: Vec<u32> = vec![42, 43].iter().cloned().collect();\n+    let _: Option<u64> = Some(Box::new(16)).map(|b| *b);\n+}"}, {"sha": "96a615ae54c8c2dc9066edd8baf5fa08a91eea9d", "filename": "tests/ui/map_clone.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.rs?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,4 +1,6 @@\n+// run-rustfix\n #![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::iter_cloned_collect)]\n #![allow(clippy::missing_docs_in_private_items)]\n \n fn main() {"}, {"sha": "63889055aa0e9dab2846753502736ea973b812e5", "filename": "tests/ui/map_clone.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fmap_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fmap_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.stderr?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,19 +1,19 @@\n error: You are using an explicit closure for cloning elements\n-  --> $DIR/map_clone.rs:5:22\n+  --> $DIR/map_clone.rs:7:22\n    |\n LL |     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![5_i8; 6].iter().cloned()`\n    |\n    = note: `-D clippy::map-clone` implied by `-D warnings`\n \n error: You are using an explicit closure for cloning elements\n-  --> $DIR/map_clone.rs:6:26\n+  --> $DIR/map_clone.rs:8:26\n    |\n LL |     let _: Vec<String> = vec![String::new()].iter().map(|x| x.clone()).collect();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![String::new()].iter().cloned()`\n \n error: You are using an explicit closure for cloning elements\n-  --> $DIR/map_clone.rs:7:23\n+  --> $DIR/map_clone.rs:9:23\n    |\n LL |     let _: Vec<u32> = vec![42, 43].iter().map(|&x| x).collect();\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![42, 43].iter().cloned()`"}, {"sha": "4e47ac95d82d30f1e87292ad567fe8d3f6cff0d4", "filename": "tests/ui/mem_replace.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fmem_replace.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fmem_replace.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.fixed?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014-2019 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+#![allow(unused_imports)]\n+#![warn(clippy::all, clippy::style, clippy::mem_replace_option_with_none)]\n+\n+use std::mem;\n+\n+fn main() {\n+    let mut an_option = Some(1);\n+    let _ = an_option.take();\n+    let an_option = &mut Some(1);\n+    let _ = an_option.take();\n+}"}, {"sha": "6824ab18e7faac7bf455e7bf982216e2306b48a3", "filename": "tests/ui/mem_replace.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.rs?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -7,6 +7,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+#![allow(unused_imports)]\n #![warn(clippy::all, clippy::style, clippy::mem_replace_option_with_none)]\n \n use std::mem;"}, {"sha": "791c4d71dbfc8485f3d803f5f4bd791f51a5ab79", "filename": "tests/ui/mem_replace.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fmem_replace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fmem_replace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.stderr?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,13 +1,13 @@\n error: replacing an `Option` with `None`\n-  --> $DIR/mem_replace.rs:16:13\n+  --> $DIR/mem_replace.rs:18:13\n    |\n LL |     let _ = mem::replace(&mut an_option, None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n    |\n    = note: `-D clippy::mem-replace-option-with-none` implied by `-D warnings`\n \n error: replacing an `Option` with `None`\n-  --> $DIR/mem_replace.rs:18:13\n+  --> $DIR/mem_replace.rs:20:13\n    |\n LL |     let _ = mem::replace(an_option, None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`"}, {"sha": "0ec85bc47e7d0e995e4f073ec6e63d3acc6ad880", "filename": "tests/ui/precedence.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fprecedence.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fprecedence.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.fixed?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+#![warn(clippy::precedence)]\n+#![allow(unused_must_use, clippy::no_effect, clippy::unnecessary_operation)]\n+#![allow(clippy::identity_op)]\n+#![allow(clippy::eq_op)]\n+\n+macro_rules! trip {\n+    ($a:expr) => {\n+        match $a & 0b1111_1111u8 {\n+            0 => println!(\"a is zero ({})\", $a),\n+            _ => println!(\"a is {}\", $a),\n+        }\n+    };\n+}\n+\n+fn main() {\n+    1 << (2 + 3);\n+    (1 + 2) << 3;\n+    4 >> (1 + 1);\n+    (1 + 3) >> 2;\n+    1 ^ (1 - 1);\n+    3 | (2 - 1);\n+    3 & (5 - 2);\n+    -(1i32.abs());\n+    -(1f32.abs());\n+\n+    // These should not trigger an error\n+    let _ = (-1i32).abs();\n+    let _ = (-1f32).abs();\n+    let _ = -(1i32).abs();\n+    let _ = -(1f32).abs();\n+    let _ = -(1i32.abs());\n+    let _ = -(1f32.abs());\n+\n+    let b = 3;\n+    trip!(b * 8);\n+}"}, {"sha": "4ef771c314f51e22c1785d3bad5e0f0fc5071bbd", "filename": "tests/ui/precedence.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.rs?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,10 +1,12 @@\n-#[warn(clippy::precedence)]\n-#[allow(clippy::identity_op)]\n-#[allow(clippy::eq_op)]\n+// run-rustfix\n+#![warn(clippy::precedence)]\n+#![allow(unused_must_use, clippy::no_effect, clippy::unnecessary_operation)]\n+#![allow(clippy::identity_op)]\n+#![allow(clippy::eq_op)]\n \n macro_rules! trip {\n     ($a:expr) => {\n-        match $a & 0b1111_1111i8 {\n+        match $a & 0b1111_1111u8 {\n             0 => println!(\"a is zero ({})\", $a),\n             _ => println!(\"a is {}\", $a),\n         }"}, {"sha": "a2ed5392bfc7c643593dbf24434ab8c05d1d3c93", "filename": "tests/ui/precedence.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fprecedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fprecedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.stderr?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,55 +1,55 @@\n error: operator precedence can trip the unwary\n-  --> $DIR/precedence.rs:15:5\n+  --> $DIR/precedence.rs:17:5\n    |\n LL |     1 << 2 + 3;\n    |     ^^^^^^^^^^ help: consider parenthesizing your expression: `1 << (2 + 3)`\n    |\n    = note: `-D clippy::precedence` implied by `-D warnings`\n \n error: operator precedence can trip the unwary\n-  --> $DIR/precedence.rs:16:5\n+  --> $DIR/precedence.rs:18:5\n    |\n LL |     1 + 2 << 3;\n    |     ^^^^^^^^^^ help: consider parenthesizing your expression: `(1 + 2) << 3`\n \n error: operator precedence can trip the unwary\n-  --> $DIR/precedence.rs:17:5\n+  --> $DIR/precedence.rs:19:5\n    |\n LL |     4 >> 1 + 1;\n    |     ^^^^^^^^^^ help: consider parenthesizing your expression: `4 >> (1 + 1)`\n \n error: operator precedence can trip the unwary\n-  --> $DIR/precedence.rs:18:5\n+  --> $DIR/precedence.rs:20:5\n    |\n LL |     1 + 3 >> 2;\n    |     ^^^^^^^^^^ help: consider parenthesizing your expression: `(1 + 3) >> 2`\n \n error: operator precedence can trip the unwary\n-  --> $DIR/precedence.rs:19:5\n+  --> $DIR/precedence.rs:21:5\n    |\n LL |     1 ^ 1 - 1;\n    |     ^^^^^^^^^ help: consider parenthesizing your expression: `1 ^ (1 - 1)`\n \n error: operator precedence can trip the unwary\n-  --> $DIR/precedence.rs:20:5\n+  --> $DIR/precedence.rs:22:5\n    |\n LL |     3 | 2 - 1;\n    |     ^^^^^^^^^ help: consider parenthesizing your expression: `3 | (2 - 1)`\n \n error: operator precedence can trip the unwary\n-  --> $DIR/precedence.rs:21:5\n+  --> $DIR/precedence.rs:23:5\n    |\n LL |     3 & 5 - 2;\n    |     ^^^^^^^^^ help: consider parenthesizing your expression: `3 & (5 - 2)`\n \n error: unary minus has lower precedence than method call\n-  --> $DIR/precedence.rs:22:5\n+  --> $DIR/precedence.rs:24:5\n    |\n LL |     -1i32.abs();\n    |     ^^^^^^^^^^^ help: consider adding parentheses to clarify your intent: `-(1i32.abs())`\n \n error: unary minus has lower precedence than method call\n-  --> $DIR/precedence.rs:23:5\n+  --> $DIR/precedence.rs:25:5\n    |\n LL |     -1f32.abs();\n    |     ^^^^^^^^^^^ help: consider adding parentheses to clarify your intent: `-(1f32.abs())`"}, {"sha": "5b4b8eeedd4696162ea63ca250f8cd1e5b61eb0d", "filename": "tests/ui/redundant_field_names.fixed", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fredundant_field_names.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fredundant_field_names.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.fixed?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -0,0 +1,71 @@\n+// run-rustfix\n+#![warn(clippy::redundant_field_names)]\n+#![allow(clippy::no_effect, dead_code, unused_variables)]\n+\n+#[macro_use]\n+extern crate derive_new;\n+\n+use std::ops::{Range, RangeFrom, RangeInclusive, RangeTo, RangeToInclusive};\n+\n+mod foo {\n+    pub const BAR: u8 = 0;\n+}\n+\n+struct Person {\n+    gender: u8,\n+    age: u8,\n+    name: u8,\n+    buzz: u64,\n+    foo: u8,\n+}\n+\n+#[derive(new)]\n+pub struct S {\n+    v: String,\n+}\n+\n+fn main() {\n+    let gender: u8 = 42;\n+    let age = 0;\n+    let fizz: u64 = 0;\n+    let name: u8 = 0;\n+\n+    let me = Person {\n+        gender,\n+        age,\n+\n+        name,          //should be ok\n+        buzz: fizz,    //should be ok\n+        foo: foo::BAR, //should be ok\n+    };\n+\n+    // Range expressions\n+    let (start, end) = (0, 0);\n+\n+    let _ = start..;\n+    let _ = ..end;\n+    let _ = start..end;\n+\n+    let _ = ..=end;\n+    let _ = start..=end;\n+\n+    // Issue #2799\n+    let _: Vec<_> = (start..end).collect();\n+\n+    // hand-written Range family structs are linted\n+    let _ = RangeFrom { start };\n+    let _ = RangeTo { end };\n+    let _ = Range { start, end };\n+    let _ = RangeInclusive::new(start, end);\n+    let _ = RangeToInclusive { end };\n+}\n+\n+fn issue_3476() {\n+    fn foo<T>() {}\n+\n+    struct S {\n+        foo: fn(),\n+    }\n+\n+    S { foo: foo::<i32> };\n+}"}, {"sha": "3f97b80c56828c3842c451bb9b616bb3103e1eec", "filename": "tests/ui/redundant_field_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.rs?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,6 +1,6 @@\n+// run-rustfix\n #![warn(clippy::redundant_field_names)]\n-#![allow(unused_variables)]\n-#![feature(inclusive_range, inclusive_range_fields, inclusive_range_methods)]\n+#![allow(clippy::no_effect, dead_code, unused_variables)]\n \n #[macro_use]\n extern crate derive_new;"}, {"sha": "96a1281e478c89a4ad6fcd058aa33f9fb80985f5", "filename": "tests/ui/replace_consts.fixed", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Freplace_consts.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Freplace_consts.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.fixed?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -0,0 +1,100 @@\n+// run-rustfix\n+#![feature(integer_atomics)]\n+#![allow(unused_variables, clippy::blacklisted_name)]\n+#![deny(clippy::replace_consts)]\n+\n+use std::sync::atomic::*;\n+use std::sync::{Once, ONCE_INIT};\n+\n+#[rustfmt::skip]\n+fn bad() {\n+    // Once\n+    { let foo = ONCE_INIT; };\n+    // Atomic\n+    { let foo = AtomicBool::new(false); };\n+    { let foo = AtomicIsize::new(0); };\n+    { let foo = AtomicI8::new(0); };\n+    { let foo = AtomicI16::new(0); };\n+    { let foo = AtomicI32::new(0); };\n+    { let foo = AtomicI64::new(0); };\n+    { let foo = AtomicUsize::new(0); };\n+    { let foo = AtomicU8::new(0); };\n+    { let foo = AtomicU16::new(0); };\n+    { let foo = AtomicU32::new(0); };\n+    { let foo = AtomicU64::new(0); };\n+    // Min\n+    { let foo = isize::min_value(); };\n+    { let foo = i8::min_value(); };\n+    { let foo = i16::min_value(); };\n+    { let foo = i32::min_value(); };\n+    { let foo = i64::min_value(); };\n+    { let foo = i128::min_value(); };\n+    { let foo = usize::min_value(); };\n+    { let foo = u8::min_value(); };\n+    { let foo = u16::min_value(); };\n+    { let foo = u32::min_value(); };\n+    { let foo = u64::min_value(); };\n+    { let foo = u128::min_value(); };\n+    // Max\n+    { let foo = isize::max_value(); };\n+    { let foo = i8::max_value(); };\n+    { let foo = i16::max_value(); };\n+    { let foo = i32::max_value(); };\n+    { let foo = i64::max_value(); };\n+    { let foo = i128::max_value(); };\n+    { let foo = usize::max_value(); };\n+    { let foo = u8::max_value(); };\n+    { let foo = u16::max_value(); };\n+    { let foo = u32::max_value(); };\n+    { let foo = u64::max_value(); };\n+    { let foo = u128::max_value(); };\n+}\n+\n+#[rustfmt::skip]\n+fn good() {\n+    // Once\n+    { let foo = Once::new(); };\n+    // Atomic\n+    { let foo = AtomicBool::new(false); };\n+    { let foo = AtomicIsize::new(0); };\n+    { let foo = AtomicI8::new(0); };\n+    { let foo = AtomicI16::new(0); };\n+    { let foo = AtomicI32::new(0); };\n+    { let foo = AtomicI64::new(0); };\n+    { let foo = AtomicUsize::new(0); };\n+    { let foo = AtomicU8::new(0); };\n+    { let foo = AtomicU16::new(0); };\n+    { let foo = AtomicU32::new(0); };\n+    { let foo = AtomicU64::new(0); };\n+    // Min\n+    { let foo = isize::min_value(); };\n+    { let foo = i8::min_value(); };\n+    { let foo = i16::min_value(); };\n+    { let foo = i32::min_value(); };\n+    { let foo = i64::min_value(); };\n+    { let foo = i128::min_value(); };\n+    { let foo = usize::min_value(); };\n+    { let foo = u8::min_value(); };\n+    { let foo = u16::min_value(); };\n+    { let foo = u32::min_value(); };\n+    { let foo = u64::min_value(); };\n+    { let foo = u128::min_value(); };\n+    // Max\n+    { let foo = isize::max_value(); };\n+    { let foo = i8::max_value(); };\n+    { let foo = i16::max_value(); };\n+    { let foo = i32::max_value(); };\n+    { let foo = i64::max_value(); };\n+    { let foo = i128::max_value(); };\n+    { let foo = usize::max_value(); };\n+    { let foo = u8::max_value(); };\n+    { let foo = u16::max_value(); };\n+    { let foo = u32::max_value(); };\n+    { let foo = u64::max_value(); };\n+    { let foo = u128::max_value(); };\n+}\n+\n+fn main() {\n+    bad();\n+    good();\n+}"}, {"sha": "b61293cc6e911f1b41c0b57acb8db54652bc02b2", "filename": "tests/ui/replace_consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.rs?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,5 +1,6 @@\n+// run-rustfix\n #![feature(integer_atomics)]\n-#![allow(clippy::blacklisted_name)]\n+#![allow(unused_variables, clippy::blacklisted_name)]\n #![deny(clippy::replace_consts)]\n \n use std::sync::atomic::*;"}, {"sha": "6f2155406cd2fa4d5d4597d2c572045ddd9aeefa", "filename": "tests/ui/replace_consts.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Freplace_consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Freplace_consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.stderr?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,215 +1,215 @@\n error: using `ATOMIC_BOOL_INIT`\n-  --> $DIR/replace_consts.rs:13:17\n+  --> $DIR/replace_consts.rs:14:17\n    |\n LL |     { let foo = ATOMIC_BOOL_INIT; };\n    |                 ^^^^^^^^^^^^^^^^ help: try this: `AtomicBool::new(false)`\n    |\n note: lint level defined here\n-  --> $DIR/replace_consts.rs:3:9\n+  --> $DIR/replace_consts.rs:4:9\n    |\n LL | #![deny(clippy::replace_consts)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error: using `ATOMIC_ISIZE_INIT`\n-  --> $DIR/replace_consts.rs:14:17\n+  --> $DIR/replace_consts.rs:15:17\n    |\n LL |     { let foo = ATOMIC_ISIZE_INIT; };\n    |                 ^^^^^^^^^^^^^^^^^ help: try this: `AtomicIsize::new(0)`\n \n error: using `ATOMIC_I8_INIT`\n-  --> $DIR/replace_consts.rs:15:17\n+  --> $DIR/replace_consts.rs:16:17\n    |\n LL |     { let foo = ATOMIC_I8_INIT; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `AtomicI8::new(0)`\n \n error: using `ATOMIC_I16_INIT`\n-  --> $DIR/replace_consts.rs:16:17\n+  --> $DIR/replace_consts.rs:17:17\n    |\n LL |     { let foo = ATOMIC_I16_INIT; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicI16::new(0)`\n \n error: using `ATOMIC_I32_INIT`\n-  --> $DIR/replace_consts.rs:17:17\n+  --> $DIR/replace_consts.rs:18:17\n    |\n LL |     { let foo = ATOMIC_I32_INIT; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicI32::new(0)`\n \n error: using `ATOMIC_I64_INIT`\n-  --> $DIR/replace_consts.rs:18:17\n+  --> $DIR/replace_consts.rs:19:17\n    |\n LL |     { let foo = ATOMIC_I64_INIT; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicI64::new(0)`\n \n error: using `ATOMIC_USIZE_INIT`\n-  --> $DIR/replace_consts.rs:19:17\n+  --> $DIR/replace_consts.rs:20:17\n    |\n LL |     { let foo = ATOMIC_USIZE_INIT; };\n    |                 ^^^^^^^^^^^^^^^^^ help: try this: `AtomicUsize::new(0)`\n \n error: using `ATOMIC_U8_INIT`\n-  --> $DIR/replace_consts.rs:20:17\n+  --> $DIR/replace_consts.rs:21:17\n    |\n LL |     { let foo = ATOMIC_U8_INIT; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `AtomicU8::new(0)`\n \n error: using `ATOMIC_U16_INIT`\n-  --> $DIR/replace_consts.rs:21:17\n+  --> $DIR/replace_consts.rs:22:17\n    |\n LL |     { let foo = ATOMIC_U16_INIT; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicU16::new(0)`\n \n error: using `ATOMIC_U32_INIT`\n-  --> $DIR/replace_consts.rs:22:17\n+  --> $DIR/replace_consts.rs:23:17\n    |\n LL |     { let foo = ATOMIC_U32_INIT; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicU32::new(0)`\n \n error: using `ATOMIC_U64_INIT`\n-  --> $DIR/replace_consts.rs:23:17\n+  --> $DIR/replace_consts.rs:24:17\n    |\n LL |     { let foo = ATOMIC_U64_INIT; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicU64::new(0)`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:25:17\n+  --> $DIR/replace_consts.rs:26:17\n    |\n LL |     { let foo = std::isize::MIN; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `isize::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:26:17\n+  --> $DIR/replace_consts.rs:27:17\n    |\n LL |     { let foo = std::i8::MIN; };\n    |                 ^^^^^^^^^^^^ help: try this: `i8::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:27:17\n+  --> $DIR/replace_consts.rs:28:17\n    |\n LL |     { let foo = std::i16::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i16::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:28:17\n+  --> $DIR/replace_consts.rs:29:17\n    |\n LL |     { let foo = std::i32::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i32::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:29:17\n+  --> $DIR/replace_consts.rs:30:17\n    |\n LL |     { let foo = std::i64::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i64::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:30:17\n+  --> $DIR/replace_consts.rs:31:17\n    |\n LL |     { let foo = std::i128::MIN; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `i128::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:31:17\n+  --> $DIR/replace_consts.rs:32:17\n    |\n LL |     { let foo = std::usize::MIN; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `usize::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:32:17\n+  --> $DIR/replace_consts.rs:33:17\n    |\n LL |     { let foo = std::u8::MIN; };\n    |                 ^^^^^^^^^^^^ help: try this: `u8::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:33:17\n+  --> $DIR/replace_consts.rs:34:17\n    |\n LL |     { let foo = std::u16::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u16::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:34:17\n+  --> $DIR/replace_consts.rs:35:17\n    |\n LL |     { let foo = std::u32::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u32::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:35:17\n+  --> $DIR/replace_consts.rs:36:17\n    |\n LL |     { let foo = std::u64::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u64::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:36:17\n+  --> $DIR/replace_consts.rs:37:17\n    |\n LL |     { let foo = std::u128::MIN; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `u128::min_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:38:17\n+  --> $DIR/replace_consts.rs:39:17\n    |\n LL |     { let foo = std::isize::MAX; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `isize::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:39:17\n+  --> $DIR/replace_consts.rs:40:17\n    |\n LL |     { let foo = std::i8::MAX; };\n    |                 ^^^^^^^^^^^^ help: try this: `i8::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:40:17\n+  --> $DIR/replace_consts.rs:41:17\n    |\n LL |     { let foo = std::i16::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i16::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:41:17\n+  --> $DIR/replace_consts.rs:42:17\n    |\n LL |     { let foo = std::i32::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i32::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:42:17\n+  --> $DIR/replace_consts.rs:43:17\n    |\n LL |     { let foo = std::i64::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i64::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:43:17\n+  --> $DIR/replace_consts.rs:44:17\n    |\n LL |     { let foo = std::i128::MAX; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `i128::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:44:17\n+  --> $DIR/replace_consts.rs:45:17\n    |\n LL |     { let foo = std::usize::MAX; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `usize::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:45:17\n+  --> $DIR/replace_consts.rs:46:17\n    |\n LL |     { let foo = std::u8::MAX; };\n    |                 ^^^^^^^^^^^^ help: try this: `u8::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:46:17\n+  --> $DIR/replace_consts.rs:47:17\n    |\n LL |     { let foo = std::u16::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u16::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:47:17\n+  --> $DIR/replace_consts.rs:48:17\n    |\n LL |     { let foo = std::u32::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u32::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:48:17\n+  --> $DIR/replace_consts.rs:49:17\n    |\n LL |     { let foo = std::u64::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u64::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:49:17\n+  --> $DIR/replace_consts.rs:50:17\n    |\n LL |     { let foo = std::u128::MAX; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `u128::max_value()`"}, {"sha": "7dfcf9c91e486a8b4bd7273660f4b358b99611c1", "filename": "tests/ui/starts_ends_with.fixed", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fstarts_ends_with.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fstarts_ends_with.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstarts_ends_with.fixed?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -0,0 +1,46 @@\n+// run-rustfix\n+#![allow(dead_code, unused_must_use)]\n+\n+fn main() {}\n+\n+#[allow(clippy::unnecessary_operation)]\n+fn starts_with() {\n+    \"\".starts_with(' ');\n+    !\"\".starts_with(' ');\n+}\n+\n+fn chars_cmp_with_unwrap() {\n+    let s = String::from(\"foo\");\n+    if s.starts_with('f') {\n+        // s.starts_with('f')\n+        // Nothing here\n+    }\n+    if s.ends_with('o') {\n+        // s.ends_with('o')\n+        // Nothing here\n+    }\n+    if s.ends_with('o') {\n+        // s.ends_with('o')\n+        // Nothing here\n+    }\n+    if !s.starts_with('f') {\n+        // !s.starts_with('f')\n+        // Nothing here\n+    }\n+    if !s.ends_with('o') {\n+        // !s.ends_with('o')\n+        // Nothing here\n+    }\n+    if !s.ends_with('o') {\n+        // !s.ends_with('o')\n+        // Nothing here\n+    }\n+}\n+\n+#[allow(clippy::unnecessary_operation)]\n+fn ends_with() {\n+    \"\".ends_with(' ');\n+    !\"\".ends_with(' ');\n+    \"\".ends_with(' ');\n+    !\"\".ends_with(' ');\n+}"}, {"sha": "e48a4246354391000da93003a6347b02bafbd0cc", "filename": "tests/ui/starts_ends_with.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fstarts_ends_with.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fstarts_ends_with.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstarts_ends_with.rs?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,4 +1,5 @@\n-#![allow(dead_code)]\n+// run-rustfix\n+#![allow(dead_code, unused_must_use)]\n \n fn main() {}\n "}, {"sha": "7c726d0e010263ffca9352d1c41325cb042e9e86", "filename": "tests/ui/starts_ends_with.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fstarts_ends_with.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Fstarts_ends_with.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstarts_ends_with.stderr?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,75 +1,75 @@\n error: you should use the `starts_with` method\n-  --> $DIR/starts_ends_with.rs:7:5\n+  --> $DIR/starts_ends_with.rs:8:5\n    |\n LL |     \"\".chars().next() == Some(' ');\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `\"\".starts_with(' ')`\n    |\n    = note: `-D clippy::chars-next-cmp` implied by `-D warnings`\n \n error: you should use the `starts_with` method\n-  --> $DIR/starts_ends_with.rs:8:5\n+  --> $DIR/starts_ends_with.rs:9:5\n    |\n LL |     Some(' ') != \"\".chars().next();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".starts_with(' ')`\n \n error: you should use the `starts_with` method\n-  --> $DIR/starts_ends_with.rs:13:8\n+  --> $DIR/starts_ends_with.rs:14:8\n    |\n LL |     if s.chars().next().unwrap() == 'f' {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `s.starts_with('f')`\n \n error: you should use the `ends_with` method\n-  --> $DIR/starts_ends_with.rs:17:8\n+  --> $DIR/starts_ends_with.rs:18:8\n    |\n LL |     if s.chars().next_back().unwrap() == 'o' {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `s.ends_with('o')`\n    |\n    = note: `-D clippy::chars-last-cmp` implied by `-D warnings`\n \n error: you should use the `ends_with` method\n-  --> $DIR/starts_ends_with.rs:21:8\n+  --> $DIR/starts_ends_with.rs:22:8\n    |\n LL |     if s.chars().last().unwrap() == 'o' {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `s.ends_with('o')`\n \n error: you should use the `starts_with` method\n-  --> $DIR/starts_ends_with.rs:25:8\n+  --> $DIR/starts_ends_with.rs:26:8\n    |\n LL |     if s.chars().next().unwrap() != 'f' {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!s.starts_with('f')`\n \n error: you should use the `ends_with` method\n-  --> $DIR/starts_ends_with.rs:29:8\n+  --> $DIR/starts_ends_with.rs:30:8\n    |\n LL |     if s.chars().next_back().unwrap() != 'o' {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!s.ends_with('o')`\n \n error: you should use the `ends_with` method\n-  --> $DIR/starts_ends_with.rs:33:8\n+  --> $DIR/starts_ends_with.rs:34:8\n    |\n LL |     if s.chars().last().unwrap() != 'o' {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!s.ends_with('o')`\n \n error: you should use the `ends_with` method\n-  --> $DIR/starts_ends_with.rs:41:5\n+  --> $DIR/starts_ends_with.rs:42:5\n    |\n LL |     \"\".chars().last() == Some(' ');\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `\"\".ends_with(' ')`\n \n error: you should use the `ends_with` method\n-  --> $DIR/starts_ends_with.rs:42:5\n+  --> $DIR/starts_ends_with.rs:43:5\n    |\n LL |     Some(' ') != \"\".chars().last();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".ends_with(' ')`\n \n error: you should use the `ends_with` method\n-  --> $DIR/starts_ends_with.rs:43:5\n+  --> $DIR/starts_ends_with.rs:44:5\n    |\n LL |     \"\".chars().next_back() == Some(' ');\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `\"\".ends_with(' ')`\n \n error: you should use the `ends_with` method\n-  --> $DIR/starts_ends_with.rs:44:5\n+  --> $DIR/starts_ends_with.rs:45:5\n    |\n LL |     Some(' ') != \"\".chars().next_back();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `!\"\".ends_with(' ')`"}, {"sha": "a71a9ec81247b23e526eff67a4a9f330cbb444dc", "filename": "tests/ui/types.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Ftypes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Ftypes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypes.fixed?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+#![allow(dead_code, unused_variables)]\n+\n+// should not warn on lossy casting in constant types\n+// because not supported yet\n+const C: i32 = 42;\n+const C_I64: i64 = C as i64;\n+\n+fn main() {\n+    // should suggest i64::from(c)\n+    let c: i32 = 42;\n+    let c_i64: i64 = i64::from(c);\n+}"}, {"sha": "6f48080ceddb7f023e3dd7a902b5031233a262b1", "filename": "tests/ui/types.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypes.rs?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,3 +1,7 @@\n+// run-rustfix\n+\n+#![allow(dead_code, unused_variables)]\n+\n // should not warn on lossy casting in constant types\n // because not supported yet\n const C: i32 = 42;"}, {"sha": "f85e27a24ec045a252823eb78a97c9eee9d1f4d7", "filename": "tests/ui/types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Ftypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Ftypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypes.stderr?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,5 +1,5 @@\n error: casting i32 to i64 may become silently lossy if types change\n-  --> $DIR/types.rs:9:22\n+  --> $DIR/types.rs:13:22\n    |\n LL |     let c_i64: i64 = c as i64;\n    |                      ^^^^^^^^ help: try: `i64::from(c)`"}, {"sha": "d8f3e854ca9e338b18e5f5db94e7f9536e4a8384", "filename": "tests/ui/unit_arg.fixed", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Funit_arg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Funit_arg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.fixed?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -0,0 +1,53 @@\n+// run-rustfix\n+#![warn(clippy::unit_arg)]\n+#![allow(clippy::no_effect, unused_must_use)]\n+\n+use std::fmt::Debug;\n+\n+fn foo<T: Debug>(t: T) {\n+    println!(\"{:?}\", t);\n+}\n+\n+fn foo3<T1: Debug, T2: Debug, T3: Debug>(t1: T1, t2: T2, t3: T3) {\n+    println!(\"{:?}, {:?}, {:?}\", t1, t2, t3);\n+}\n+\n+struct Bar;\n+\n+impl Bar {\n+    fn bar<T: Debug>(&self, t: T) {\n+        println!(\"{:?}\", t);\n+    }\n+}\n+\n+fn bad() {\n+    foo(());\n+    foo(());\n+    foo(());\n+    foo(());\n+    foo3((), 2, 2);\n+    let b = Bar;\n+    b.bar(());\n+}\n+\n+fn ok() {\n+    foo(());\n+    foo(1);\n+    foo({ 1 });\n+    foo3(\"a\", 3, vec![3]);\n+    let b = Bar;\n+    b.bar({ 1 });\n+    b.bar(());\n+    question_mark();\n+}\n+\n+fn question_mark() -> Result<(), ()> {\n+    Ok(Ok(())?)?;\n+    Ok(Ok(()))??;\n+    Ok(())\n+}\n+\n+fn main() {\n+    bad();\n+    ok();\n+}"}, {"sha": "1403870eacfebc43b7e1962c8d5b5d40e99e2f7a", "filename": "tests/ui/unit_arg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.rs?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,5 +1,6 @@\n+// run-rustfix\n #![warn(clippy::unit_arg)]\n-#![allow(clippy::no_effect)]\n+#![allow(clippy::no_effect, unused_must_use)]\n \n use std::fmt::Debug;\n "}, {"sha": "862534b18ecbb20c0e89f260e070a71b8890dc1b", "filename": "tests/ui/unit_arg.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Funit_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Funit_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.stderr?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,5 +1,5 @@\n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:23:9\n+  --> $DIR/unit_arg.rs:24:9\n    |\n LL |     foo({});\n    |         ^^\n@@ -11,7 +11,7 @@ LL |     foo(());\n    |         ^^\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:24:9\n+  --> $DIR/unit_arg.rs:25:9\n    |\n LL |       foo({\n    |  _________^\n@@ -24,7 +24,7 @@ LL |     foo(());\n    |         ^^\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:27:9\n+  --> $DIR/unit_arg.rs:28:9\n    |\n LL |     foo(foo(1));\n    |         ^^^^^^\n@@ -34,7 +34,7 @@ LL |     foo(());\n    |         ^^\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:28:9\n+  --> $DIR/unit_arg.rs:29:9\n    |\n LL |       foo({\n    |  _________^\n@@ -48,7 +48,7 @@ LL |     foo(());\n    |         ^^\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:32:10\n+  --> $DIR/unit_arg.rs:33:10\n    |\n LL |     foo3({}, 2, 2);\n    |          ^^\n@@ -58,7 +58,7 @@ LL |     foo3((), 2, 2);\n    |          ^^\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:34:11\n+  --> $DIR/unit_arg.rs:35:11\n    |\n LL |       b.bar({\n    |  ___________^"}, {"sha": "5f12d72a76ae1911a8a3468ed804b48aecd4bc9a", "filename": "tests/ui/unnecessary_fold.fixed", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Funnecessary_fold.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Funnecessary_fold.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_fold.fixed?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -0,0 +1,44 @@\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+/// Calls which should trigger the `UNNECESSARY_FOLD` lint\n+fn unnecessary_fold() {\n+    // Can be replaced by .any\n+    let _ = (0..3).any(|x| x > 2);\n+    // Can be replaced by .all\n+    let _ = (0..3).all(|x| x > 2);\n+    // Can be replaced by .sum\n+    let _: i32 = (0..3).sum();\n+    // Can be replaced by .product\n+    let _: i32 = (0..3).product();\n+}\n+\n+/// Should trigger the `UNNECESSARY_FOLD` lint, with an error span including exactly `.fold(...)`\n+fn unnecessary_fold_span_for_multi_element_chain() {\n+    let _: bool = (0..3).map(|x| 2 * x).any(|x| x > 2);\n+}\n+\n+/// Calls which should not trigger the `UNNECESSARY_FOLD` lint\n+fn unnecessary_fold_should_ignore() {\n+    let _ = (0..3).fold(true, |acc, x| acc || x > 2);\n+    let _ = (0..3).fold(false, |acc, x| acc && x > 2);\n+    let _ = (0..3).fold(1, |acc, x| acc + x);\n+    let _ = (0..3).fold(0, |acc, x| acc * x);\n+    let _ = (0..3).fold(0, |acc, x| 1 + acc + x);\n+\n+    // We only match against an accumulator on the left\n+    // hand side. We could lint for .sum and .product when\n+    // it's on the right, but don't for now (and this wouldn't\n+    // be valid if we extended the lint to cover arbitrary numeric\n+    // types).\n+    let _ = (0..3).fold(false, |acc, x| x > 2 || acc);\n+    let _ = (0..3).fold(true, |acc, x| x > 2 && acc);\n+    let _ = (0..3).fold(0, |acc, x| x + acc);\n+    let _ = (0..3).fold(1, |acc, x| x * acc);\n+\n+    let _ = [(0..2), (0..3)].iter().fold(0, |a, b| a + b.len());\n+    let _ = [(0..2), (0..3)].iter().fold(1, |a, b| a * b.len());\n+}\n+\n+fn main() {}"}, {"sha": "ae667d1ac06326660af6ff5fb148c5fe5f757f49", "filename": "tests/ui/unnecessary_fold.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_fold.rs?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,18 +1,22 @@\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n /// Calls which should trigger the `UNNECESSARY_FOLD` lint\n fn unnecessary_fold() {\n     // Can be replaced by .any\n     let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n     // Can be replaced by .all\n     let _ = (0..3).fold(true, |acc, x| acc && x > 2);\n     // Can be replaced by .sum\n-    let _ = (0..3).fold(0, |acc, x| acc + x);\n+    let _: i32 = (0..3).fold(0, |acc, x| acc + x);\n     // Can be replaced by .product\n-    let _ = (0..3).fold(1, |acc, x| acc * x);\n+    let _: i32 = (0..3).fold(1, |acc, x| acc * x);\n }\n \n /// Should trigger the `UNNECESSARY_FOLD` lint, with an error span including exactly `.fold(...)`\n fn unnecessary_fold_span_for_multi_element_chain() {\n-    let _ = (0..3).map(|x| 2 * x).fold(false, |acc, x| acc || x > 2);\n+    let _: bool = (0..3).map(|x| 2 * x).fold(false, |acc, x| acc || x > 2);\n }\n \n /// Calls which should not trigger the `UNNECESSARY_FOLD` lint"}, {"sha": "f9911d4a3dcbef05116df8587f811ea35d492de1", "filename": "tests/ui/unnecessary_fold.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Funnecessary_fold.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a6cb442a5a48ae09802e65c4631438b340e56/tests%2Fui%2Funnecessary_fold.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_fold.stderr?ref=ec1a6cb442a5a48ae09802e65c4631438b340e56", "patch": "@@ -1,34 +1,34 @@\n error: this `.fold` can be written more succinctly using another method\n-  --> $DIR/unnecessary_fold.rs:4:19\n+  --> $DIR/unnecessary_fold.rs:8:19\n    |\n LL |     let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n    |\n    = note: `-D clippy::unnecessary-fold` implied by `-D warnings`\n \n error: this `.fold` can be written more succinctly using another method\n-  --> $DIR/unnecessary_fold.rs:6:19\n+  --> $DIR/unnecessary_fold.rs:10:19\n    |\n LL |     let _ = (0..3).fold(true, |acc, x| acc && x > 2);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.all(|x| x > 2)`\n \n error: this `.fold` can be written more succinctly using another method\n-  --> $DIR/unnecessary_fold.rs:8:19\n+  --> $DIR/unnecessary_fold.rs:12:24\n    |\n-LL |     let _ = (0..3).fold(0, |acc, x| acc + x);\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.sum()`\n+LL |     let _: i32 = (0..3).fold(0, |acc, x| acc + x);\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.sum()`\n \n error: this `.fold` can be written more succinctly using another method\n-  --> $DIR/unnecessary_fold.rs:10:19\n+  --> $DIR/unnecessary_fold.rs:14:24\n    |\n-LL |     let _ = (0..3).fold(1, |acc, x| acc * x);\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.product()`\n+LL |     let _: i32 = (0..3).fold(1, |acc, x| acc * x);\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.product()`\n \n error: this `.fold` can be written more succinctly using another method\n-  --> $DIR/unnecessary_fold.rs:15:34\n+  --> $DIR/unnecessary_fold.rs:19:40\n    |\n-LL |     let _ = (0..3).map(|x| 2 * x).fold(false, |acc, x| acc || x > 2);\n-   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n+LL |     let _: bool = (0..3).map(|x| 2 * x).fold(false, |acc, x| acc || x > 2);\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n \n error: aborting due to 5 previous errors\n "}]}