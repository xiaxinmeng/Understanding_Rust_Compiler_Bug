{"sha": "762915826ac6893036f8b5cd5e63677ed862f6d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MjkxNTgyNmFjNjg5MzAzNmY4YjVjZDVlNjM2NzdlZDg2MmY2ZDk=", "commit": {"author": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2019-12-05T13:19:27Z"}, "committer": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2019-12-05T13:19:27Z"}, "message": "Reduce visibility, use struct instead of tuples", "tree": {"sha": "3e8e70b95341f82fc2754d72d5377c94e37fbf24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e8e70b95341f82fc2754d72d5377c94e37fbf24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/762915826ac6893036f8b5cd5e63677ed862f6d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/762915826ac6893036f8b5cd5e63677ed862f6d9", "html_url": "https://github.com/rust-lang/rust/commit/762915826ac6893036f8b5cd5e63677ed862f6d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/762915826ac6893036f8b5cd5e63677ed862f6d9/comments", "author": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "088f50c0ab351d5ac072547a47c1ce7eeae029f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/088f50c0ab351d5ac072547a47c1ce7eeae029f3", "html_url": "https://github.com/rust-lang/rust/commit/088f50c0ab351d5ac072547a47c1ce7eeae029f3"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "01d67777d6d389f85740d451eecc9acb02aaf1b8", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/762915826ac6893036f8b5cd5e63677ed862f6d9/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762915826ac6893036f8b5cd5e63677ed862f6d9/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=762915826ac6893036f8b5cd5e63677ed862f6d9", "patch": "@@ -107,8 +107,13 @@ pub enum ModuleOrigin {\n     /// It should not be `None` after collecting definitions.\n     Root(Option<FileId>),\n     /// Note that non-inline modules, by definition, live inside non-macro file.\n-    File(AstId<ast::Module>, FileId),\n-    Inline(AstId<ast::Module>),\n+    File {\n+        declaration: AstId<ast::Module>,\n+        definition: FileId,\n+    },\n+    Inline {\n+        definition: AstId<ast::Module>,\n+    },\n }\n \n impl Default for ModuleOrigin {\n@@ -118,49 +123,47 @@ impl Default for ModuleOrigin {\n }\n \n impl ModuleOrigin {\n-    pub fn root(file_id: FileId) -> Self {\n+    fn root(file_id: FileId) -> Self {\n         ModuleOrigin::Root(Some(file_id))\n     }\n \n-    pub fn not_sure_file(file: Option<FileId>, module: AstId<ast::Module>) -> Self {\n+    pub(crate) fn not_sure_file(file: Option<FileId>, declaration: AstId<ast::Module>) -> Self {\n         match file {\n-            None => ModuleOrigin::Inline(module),\n-            Some(file) => ModuleOrigin::File(module, file),\n+            None => ModuleOrigin::Inline { definition: declaration },\n+            Some(definition) => ModuleOrigin::File { declaration, definition },\n         }\n     }\n \n-    pub fn not_sure_mod(file: FileId, module: Option<AstId<ast::Module>>) -> Self {\n-        match module {\n-            None => ModuleOrigin::root(file),\n-            Some(module) => ModuleOrigin::File(module, file),\n-        }\n-    }\n-\n-    pub fn declaration(&self) -> Option<AstId<ast::Module>> {\n+    fn declaration(&self) -> Option<AstId<ast::Module>> {\n         match self {\n-            ModuleOrigin::File(m, _) | ModuleOrigin::Inline(m) => Some(*m),\n+            ModuleOrigin::File { declaration: module, .. }\n+            | ModuleOrigin::Inline { definition: module, .. } => Some(*module),\n             ModuleOrigin::Root(_) => None,\n         }\n     }\n \n-    pub fn file_id(&self) -> Option<FileId> {\n+    pub(crate) fn file_id(&self) -> Option<FileId> {\n         match self {\n-            ModuleOrigin::File(_, file_id) | ModuleOrigin::Root(Some(file_id)) => Some(*file_id),\n+            ModuleOrigin::File { definition: file_id, .. } | ModuleOrigin::Root(Some(file_id)) => {\n+                Some(*file_id)\n+            }\n             _ => None,\n         }\n     }\n \n     /// Returns a node which defines this module.\n     /// That is, a file or a `mod foo {}` with items.\n-    pub fn definition_source(&self, db: &impl DefDatabase) -> InFile<ModuleSource> {\n+    fn definition_source(&self, db: &impl DefDatabase) -> InFile<ModuleSource> {\n         match self {\n-            ModuleOrigin::File(_, file_id) | ModuleOrigin::Root(Some(file_id)) => {\n+            ModuleOrigin::File { definition: file_id, .. } | ModuleOrigin::Root(Some(file_id)) => {\n                 let file_id = *file_id;\n                 let sf = db.parse(file_id).tree();\n                 return InFile::new(file_id.into(), ModuleSource::SourceFile(sf));\n             }\n             ModuleOrigin::Root(None) => unreachable!(),\n-            ModuleOrigin::Inline(m) => InFile::new(m.file_id, ModuleSource::Module(m.to_node(db))),\n+            ModuleOrigin::Inline { definition } => {\n+                InFile::new(definition.file_id, ModuleSource::Module(definition.to_node(db)))\n+            }\n         }\n     }\n }"}]}