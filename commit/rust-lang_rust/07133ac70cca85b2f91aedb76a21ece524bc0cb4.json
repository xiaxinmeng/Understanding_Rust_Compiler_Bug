{"sha": "07133ac70cca85b2f91aedb76a21ece524bc0cb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MTMzYWM3MGNjYTg1YjJmOTFhZWRiNzZhMjFlY2U1MjRiYzBjYjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-15T16:24:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-15T16:24:19Z"}, "message": "Auto merge of #59991 - Centril:rollup-bqxt4w3, r=Centril\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #59648 (Add must_use annotations to Result::is_ok and is_err)\n - #59748 (Add summary and reference to Rust trademark guide)\n - #59779 (Uplift `get_def_path` from Clippy)\n - #59955 (bump stdsimd; make intra_doc_link_resolution_failure an error again; make lints more consistent)\n - #59978 (rustdoc: Remove default keyword from re-exported trait methods)\n - #59989 (Fix links to Atomic* in RELEASES.md)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "cfebf7d3b0fee04927f6274b02d2a78d3c00bb62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfebf7d3b0fee04927f6274b02d2a78d3c00bb62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07133ac70cca85b2f91aedb76a21ece524bc0cb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07133ac70cca85b2f91aedb76a21ece524bc0cb4", "html_url": "https://github.com/rust-lang/rust/commit/07133ac70cca85b2f91aedb76a21ece524bc0cb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07133ac70cca85b2f91aedb76a21ece524bc0cb4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9217fe0e2f04d61dd29c9aaebee2c993705e1d26", "url": "https://api.github.com/repos/rust-lang/rust/commits/9217fe0e2f04d61dd29c9aaebee2c993705e1d26", "html_url": "https://github.com/rust-lang/rust/commit/9217fe0e2f04d61dd29c9aaebee2c993705e1d26"}, {"sha": "6434fe9ef58fbb59b23fa9bc667d98fb5c91ab0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6434fe9ef58fbb59b23fa9bc667d98fb5c91ab0f", "html_url": "https://github.com/rust-lang/rust/commit/6434fe9ef58fbb59b23fa9bc667d98fb5c91ab0f"}], "stats": {"total": 203, "additions": 155, "deletions": 48}, "files": [{"sha": "f6f796911b8fa57a5f702e71cc9d2dd27ed96349", "filename": "README.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/07133ac70cca85b2f91aedb76a21ece524bc0cb4/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/07133ac70cca85b2f91aedb76a21ece524bc0cb4/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=07133ac70cca85b2f91aedb76a21ece524bc0cb4", "patch": "@@ -261,3 +261,19 @@ BSD-like licenses.\n \n See [LICENSE-APACHE](LICENSE-APACHE), [LICENSE-MIT](LICENSE-MIT), and\n [COPYRIGHT](COPYRIGHT) for details.\n+\n+## Trademark\n+[trademark]: #trademark\n+\n+The Rust programming language is an open source, community project governed\n+by a core team. It is also sponsored by the Mozilla Foundation (\u201cMozilla\u201d),\n+which owns and protects the Rust and Cargo trademarks and logos\n+(the \u201cRust Trademarks\u201d).\n+\n+If you want to use these names or brands, please read the [media guide][media-guide].\n+\n+Third-party logos may be subject to third-party copyrights and trademarks. See\n+[Licenses][policies-licenses] for details.\n+\n+[media-guide]: https://www.rust-lang.org/policies/media-guide\n+[policies-licenses]: https://www.rust-lang.org/policies/licenses"}, {"sha": "24461742ad898304efb2d1cccebb67ff55f39e25", "filename": "RELEASES.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/07133ac70cca85b2f91aedb76a21ece524bc0cb4/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/07133ac70cca85b2f91aedb76a21ece524bc0cb4/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=07133ac70cca85b2f91aedb76a21ece524bc0cb4", "patch": "@@ -113,15 +113,15 @@ Compatibility Notes\n [56470]: https://github.com/rust-lang/rust/pull/56470/\n [cargo/6654]: https://github.com/rust-lang/cargo/pull/6654/\n [`Any::type_id`]: https://doc.rust-lang.org/std/any/trait.Any.html#tymethod.type_id\n-[`Error::type_id`]: https://doc.rust-lang.org/std/error/trait.Error.html#tymethod.type_id\n-[`atomic::AtomicI16`]: https://doc.rust-lang.org/std/atomic/struct.AtomicI16.html\n-[`atomic::AtomicI32`]: https://doc.rust-lang.org/std/atomic/struct.AtomicI32.html\n-[`atomic::AtomicI64`]: https://doc.rust-lang.org/std/atomic/struct.AtomicI64.html\n-[`atomic::AtomicI8`]: https://doc.rust-lang.org/std/atomic/struct.AtomicI8.html\n-[`atomic::AtomicU16`]: https://doc.rust-lang.org/std/atomic/struct.AtomicU16.html\n-[`atomic::AtomicU32`]: https://doc.rust-lang.org/std/atomic/struct.AtomicU32.html\n-[`atomic::AtomicU64`]: https://doc.rust-lang.org/std/atomic/struct.AtomicU64.html\n-[`atomic::AtomicU8`]: https://doc.rust-lang.org/std/atomic/struct.AtomicU8.html\n+[`Error::type_id`]: https://doc.rust-lang.org/std/error/trait.Error.html#method.type_id\n+[`atomic::AtomicI16`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicI16.html\n+[`atomic::AtomicI32`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicI32.html\n+[`atomic::AtomicI64`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicI64.html\n+[`atomic::AtomicI8`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicI8.html\n+[`atomic::AtomicU16`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU16.html\n+[`atomic::AtomicU32`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU32.html\n+[`atomic::AtomicU64`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU64.html\n+[`atomic::AtomicU8`]: https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU8.html\n [`convert::Infallible`]: https://doc.rust-lang.org/std/convert/enum.Infallible.html\n [`convert::TryFrom`]: https://doc.rust-lang.org/std/convert/trait.TryFrom.html\n [`convert::TryInto`]: https://doc.rust-lang.org/std/convert/trait.TryInto.html"}, {"sha": "d5e15b3719c2e6cb89cb377c7515730ff8e80698", "filename": "src/liballoc/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Fliballoc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Fliballoc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fborrow.rs?ref=07133ac70cca85b2f91aedb76a21ece524bc0cb4", "patch": "@@ -32,6 +32,7 @@ impl<'a, B: ?Sized> Borrow<B> for Cow<'a, B>\n /// from any borrow of a given type.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ToOwned {\n+    /// The resulting type after obtaining ownership.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Owned: Borrow<Self>;\n "}, {"sha": "8a3950718d7d26d8cb85e2ca065fb4924f9c1d2a", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=07133ac70cca85b2f91aedb76a21ece524bc0cb4", "patch": "@@ -760,6 +760,7 @@ impl<A, F: Fn<A> + ?Sized> Fn<A> for Box<F> {\n #[unstable(feature = \"fnbox\",\n            reason = \"will be deprecated if and when `Box<FnOnce>` becomes usable\", issue = \"28796\")]\n pub trait FnBox<A>: FnOnce<A> {\n+    /// Performs the call operation.\n     fn call_box(self: Box<Self>, args: A) -> Self::Output;\n }\n "}, {"sha": "63b3fbbdaefe1fcbd4676407a46829e076de55a1", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=07133ac70cca85b2f91aedb76a21ece524bc0cb4", "patch": "@@ -58,12 +58,13 @@\n #![no_std]\n #![needs_allocator]\n \n-#![deny(rust_2018_idioms)]\n-#![allow(explicit_outlives_requirements)]\n-\n #![warn(deprecated_in_future)]\n-#![warn(intra_doc_link_resolution_failure)]\n+#![warn(missing_docs)]\n #![warn(missing_debug_implementations)]\n+#![deny(intra_doc_link_resolution_failure)] // rustdoc is run without -D warnings\n+\n+#![deny(rust_2018_idioms)]\n+#![allow(explicit_outlives_requirements)]\n \n #![cfg_attr(not(test), feature(generator_trait))]\n #![cfg_attr(test, feature(test))]"}, {"sha": "6eac848740106b63c17d7f43dd2f9349c9e71d0c", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=07133ac70cca85b2f91aedb76a21ece524bc0cb4", "patch": "@@ -570,6 +570,16 @@ pub trait SliceConcatExt<T: ?Sized> {\n     #[stable(feature = \"rename_connect_to_join\", since = \"1.3.0\")]\n     fn join(&self, sep: &T) -> Self::Output;\n \n+    /// Flattens a slice of `T` into a single value `Self::Output`, placing a\n+    /// given separator between each.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![allow(deprecated)]\n+    /// assert_eq!([\"hello\", \"world\"].connect(\" \"), \"hello world\");\n+    /// assert_eq!([[1, 2], [3, 4]].connect(&0), [1, 2, 0, 3, 4]);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.3.0\", reason = \"renamed to join\")]\n     fn connect(&self, sep: &T) -> Self::Output;"}, {"sha": "615549f47bbd6516350341bcba4f0f58c4c10fc9", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=07133ac70cca85b2f91aedb76a21ece524bc0cb4", "patch": "@@ -60,8 +60,8 @@\n \n #![warn(deprecated_in_future)]\n #![warn(missing_docs)]\n-#![warn(intra_doc_link_resolution_failure)]\n #![warn(missing_debug_implementations)]\n+#![deny(intra_doc_link_resolution_failure)] // rustdoc is run without -D warnings\n \n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]"}, {"sha": "68ef087d84b90f3ed3246ac725fb3e7f5bb684df", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=07133ac70cca85b2f91aedb76a21ece524bc0cb4", "patch": "@@ -178,6 +178,7 @@ impl<T> Option<T> {\n     /// ```\n     ///\n     /// [`Some`]: #variant.Some\n+    #[must_use]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_some(&self) -> bool {\n@@ -200,6 +201,7 @@ impl<T> Option<T> {\n     /// ```\n     ///\n     /// [`None`]: #variant.None\n+    #[must_use]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_none(&self) -> bool {"}, {"sha": "e22a9ebbca4c3918c80c414ed221e9cb677861ec", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=07133ac70cca85b2f91aedb76a21ece524bc0cb4", "patch": "@@ -277,6 +277,7 @@ impl<T, E> Result<T, E> {\n     /// let x: Result<i32, &str> = Err(\"Some error message\");\n     /// assert_eq!(x.is_ok(), false);\n     /// ```\n+    #[must_use]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_ok(&self) -> bool {\n@@ -301,6 +302,7 @@ impl<T, E> Result<T, E> {\n     /// let x: Result<i32, &str> = Err(\"Some error message\");\n     /// assert_eq!(x.is_err(), true);\n     /// ```\n+    #[must_use]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_err(&self) -> bool {"}, {"sha": "4b615345a26f392849e1be884731bfaa95cbca5e", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=07133ac70cca85b2f91aedb76a21ece524bc0cb4", "patch": "@@ -755,8 +755,31 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n     }\n \n     /// Check if a `DefId`'s path matches the given absolute type path usage.\n+    ///\n+    /// # Examples\n+    /// ```rust,ignore (no `cx` or `def_id` available)\n+    /// if cx.match_def_path(def_id, &[\"core\", \"option\", \"Option\"]) {\n+    ///     // The given `def_id` is that of an `Option` type\n+    /// }\n+    /// ```\n     // Uplifted from rust-lang/rust-clippy\n-    pub fn match_path(&self, def_id: DefId, path: &[&str]) -> bool {\n+    pub fn match_def_path(&self, def_id: DefId, path: &[&str]) -> bool {\n+        let names = self.get_def_path(def_id);\n+\n+        names.len() == path.len() && names.into_iter().zip(path.iter()).all(|(a, &b)| *a == *b)\n+    }\n+\n+    /// Gets the absolute path of `def_id` as a vector of `&str`.\n+    ///\n+    /// # Examples\n+    /// ```rust,ignore (no `cx` or `def_id` available)\n+    /// let def_path = cx.get_def_path(def_id);\n+    /// if let &[\"core\", \"option\", \"Option\"] = &def_path[..] {\n+    ///     // The given `def_id` is that of an `Option` type\n+    /// }\n+    /// ```\n+    // Uplifted from rust-lang/rust-clippy\n+    pub fn get_def_path(&self, def_id: DefId) -> Vec<LocalInternedString> {\n         pub struct AbsolutePathPrinter<'a, 'tcx> {\n             pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n@@ -856,10 +879,9 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n             }\n         }\n \n-        let names = AbsolutePathPrinter { tcx: self.tcx }.print_def_path(def_id, &[]).unwrap();\n-\n-        names.len() == path.len()\n-            && names.into_iter().zip(path.iter()).all(|(a, &b)| *a == *b)\n+        AbsolutePathPrinter { tcx: self.tcx }\n+            .print_def_path(def_id, &[])\n+            .unwrap()\n     }\n }\n "}, {"sha": "91f1bee26de3275a62c22c6bb0782f55f385d736", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=07133ac70cca85b2f91aedb76a21ece524bc0cb4", "patch": "@@ -100,7 +100,7 @@ fn lint_ty_kind_usage(cx: &LateContext<'_, '_>, segment: &PathSegment) -> bool {\n     if segment.ident.as_str() == \"TyKind\" {\n         if let Some(def) = segment.def {\n             if let Some(did) = def.opt_def_id() {\n-                return cx.match_path(did, &[\"rustc\", \"ty\", \"sty\", \"TyKind\"]);\n+                return cx.match_def_path(did, &[\"rustc\", \"ty\", \"sty\", \"TyKind\"]);\n             }\n         }\n     }"}, {"sha": "0301891c9b292df8738eb58ab91df0a577aa2160", "filename": "src/librustc_data_structures/owning_ref/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs?ref=07133ac70cca85b2f91aedb76a21ece524bc0cb4", "patch": "@@ -1471,7 +1471,7 @@ mod tests {\n             let x = Box::new(123_i32);\n             let y: Box<dyn Any> = x;\n \n-            OwningRef::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_ok();\n+            assert!(OwningRef::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_ok());\n         }\n \n         #[test]\n@@ -1481,7 +1481,7 @@ mod tests {\n             let x = Box::new(123_i32);\n             let y: Box<dyn Any> = x;\n \n-            OwningRef::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_err();\n+            assert!(!OwningRef::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_err());\n         }\n     }\n \n@@ -1868,7 +1868,7 @@ mod tests {\n             let x = Box::new(123_i32);\n             let y: Box<dyn Any> = x;\n \n-            OwningRefMut::new(y).try_map_mut(|x| x.downcast_mut::<i32>().ok_or(())).is_ok();\n+            assert!(OwningRefMut::new(y).try_map_mut(|x| x.downcast_mut::<i32>().ok_or(())).is_ok());\n         }\n \n         #[test]\n@@ -1878,7 +1878,7 @@ mod tests {\n             let x = Box::new(123_i32);\n             let y: Box<dyn Any> = x;\n \n-            OwningRefMut::new(y).try_map_mut(|x| x.downcast_mut::<i32>().ok_or(())).is_err();\n+            assert!(!OwningRefMut::new(y).try_map_mut(|x| x.downcast_mut::<i32>().ok_or(())).is_err());\n         }\n \n         #[test]\n@@ -1888,7 +1888,7 @@ mod tests {\n             let x = Box::new(123_i32);\n             let y: Box<dyn Any> = x;\n \n-            OwningRefMut::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_ok();\n+            assert!(OwningRefMut::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_ok());\n         }\n \n         #[test]\n@@ -1898,7 +1898,7 @@ mod tests {\n             let x = Box::new(123_i32);\n             let y: Box<dyn Any> = x;\n \n-            OwningRefMut::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_err();\n+            assert!(!OwningRefMut::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_err());\n         }\n \n         #[test]"}, {"sha": "80e796b0af73216047fa42c5ee6ec5eccc056a77", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=07133ac70cca85b2f91aedb76a21ece524bc0cb4", "patch": "@@ -2325,6 +2325,10 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                     } else {\n                         hir::Constness::NotConst\n                     };\n+                    let defaultness = match self.container {\n+                        ty::ImplContainer(_) => Some(self.defaultness),\n+                        ty::TraitContainer(_) => None,\n+                    };\n                     MethodItem(Method {\n                         generics,\n                         decl,\n@@ -2334,7 +2338,7 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                             constness,\n                             asyncness: hir::IsAsync::NotAsync,\n                         },\n-                        defaultness: Some(self.defaultness),\n+                        defaultness,\n                         all_types,\n                         ret_types,\n                     })"}, {"sha": "62bc1991cc93c8e48bf829f7dd04d205d2d29437", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=07133ac70cca85b2f91aedb76a21ece524bc0cb4", "patch": "@@ -205,9 +205,10 @@\n // Don't link to std. We are std.\n #![no_std]\n \n-#![deny(missing_docs)]\n-#![deny(intra_doc_link_resolution_failure)]\n-#![deny(missing_debug_implementations)]\n+//#![warn(deprecated_in_future)] // FIXME: std still has quite a few uses of `mem::uninitialized`\n+#![warn(missing_docs)]\n+#![warn(missing_debug_implementations)]\n+#![deny(intra_doc_link_resolution_failure)] // rustdoc is run without -D warnings\n \n #![deny(rust_2018_idioms)]\n #![allow(explicit_outlives_requirements)]"}, {"sha": "685c7909ff294a87b6c84923b91896191b1a532b", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=07133ac70cca85b2f91aedb76a21ece524bc0cb4", "patch": "@@ -1005,7 +1005,7 @@ impl<T> SyncSender<T> {\n     /// thread::spawn(move || {\n     ///     // This will return an error and send\n     ///     // no message if the buffer is full\n-    ///     sync_sender2.try_send(3).is_err();\n+    ///     let _ = sync_sender2.try_send(3);\n     /// });\n     ///\n     /// let mut msg;"}, {"sha": "2323a858f060a0d2a39786a619885608017d538f", "filename": "src/stdsimd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdsimd?ref=07133ac70cca85b2f91aedb76a21ece524bc0cb4", "patch": "@@ -1 +1 @@\n-Subproject commit 2792b45c975880038240d477adb0d66f760ac048\n+Subproject commit 2323a858f060a0d2a39786a619885608017d538f"}, {"sha": "3d15c9980c352681745065eff4a878c15f1dc94e", "filename": "src/test/run-pass/issues/issue-18353.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18353.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18353.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-18353.rs?ref=07133ac70cca85b2f91aedb76a21ece524bc0cb4", "patch": "@@ -11,5 +11,5 @@ struct Str {\n \n fn main() {\n     let str: Option<&Str> = None;\n-    str.is_some();\n+    let _ = str.is_some();\n }"}, {"sha": "3d6ebef5a1d5b095ddd5618200c50ceaac024463", "filename": "src/test/rustdoc/default-trait-method.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Ftest%2Frustdoc%2Fdefault-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Ftest%2Frustdoc%2Fdefault-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdefault-trait-method.rs?ref=07133ac70cca85b2f91aedb76a21ece524bc0cb4", "patch": "@@ -0,0 +1,26 @@\n+#![feature(specialization)]\n+\n+// @has default_trait_method/trait.Item.html\n+// @has - '//*[@id=\"tymethod.foo\"]' 'fn foo()'\n+// @!has - '//*[@id=\"tymethod.foo\"]' 'default fn foo()'\n+// @has - '//*[@id=\"tymethod.bar\"]' 'fn bar()'\n+// @!has - '//*[@id=\"tymethod.bar\"]' 'default fn bar()'\n+// @has - '//*[@id=\"method.baz\"]' 'fn baz()'\n+// @!has - '//*[@id=\"method.baz\"]' 'default fn baz()'\n+pub trait Item {\n+    fn foo();\n+    fn bar();\n+    fn baz() {}\n+}\n+\n+// @has default_trait_method/struct.Foo.html\n+// @has - '//*[@id=\"method.foo\"]' 'default fn foo()'\n+// @has - '//*[@id=\"method.bar\"]' 'fn bar()'\n+// @!has - '//*[@id=\"method.bar\"]' 'default fn bar()'\n+// @has - '//*[@id=\"method.baz\"]' 'fn baz()'\n+// @!has - '//*[@id=\"method.baz\"]' 'default fn baz()'\n+pub struct Foo;\n+impl Item for Foo {\n+    default fn foo() {}\n+    fn bar() {}\n+}"}, {"sha": "dfbd8f2210fa4ef912e28cf413e5755c7a771855", "filename": "src/test/rustdoc/default_trait_method.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Ftest%2Frustdoc%2Fdefault_trait_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9217fe0e2f04d61dd29c9aaebee2c993705e1d26/src%2Ftest%2Frustdoc%2Fdefault_trait_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdefault_trait_method.rs?ref=9217fe0e2f04d61dd29c9aaebee2c993705e1d26", "patch": "@@ -1,15 +0,0 @@\n-#![feature(specialization)]\n-\n-pub trait Item {\n-    fn foo();\n-    fn bar();\n-}\n-\n-// @has default_trait_method/trait.Item.html\n-// @has - '//*[@id=\"method.foo\"]' 'default fn foo()'\n-// @has - '//*[@id=\"method.bar\"]' 'fn bar()'\n-// @!has - '//*[@id=\"method.bar\"]' 'default fn bar()'\n-impl<T: ?Sized> Item for T {\n-    default fn foo() {}\n-    fn bar() {}\n-}"}, {"sha": "ce60bbfb4b0de0e6f07e6a343a585cd2fdc33a08", "filename": "src/test/rustdoc/inline_cross/auxiliary/default-trait-method.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fdefault-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fdefault-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fdefault-trait-method.rs?ref=07133ac70cca85b2f91aedb76a21ece524bc0cb4", "patch": "@@ -0,0 +1,16 @@\n+#![feature(specialization)]\n+\n+#![crate_name = \"foo\"]\n+\n+pub trait Item {\n+    fn foo();\n+    fn bar();\n+    fn baz() {}\n+}\n+\n+pub struct Foo;\n+\n+impl Item for Foo {\n+    default fn foo() {}\n+    fn bar() {}\n+}"}, {"sha": "a4ec73a127d4e34a61cfdf74024e87afd2a89aee", "filename": "src/test/rustdoc/inline_cross/default-trait-method.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Ftest%2Frustdoc%2Finline_cross%2Fdefault-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07133ac70cca85b2f91aedb76a21ece524bc0cb4/src%2Ftest%2Frustdoc%2Finline_cross%2Fdefault-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fdefault-trait-method.rs?ref=07133ac70cca85b2f91aedb76a21ece524bc0cb4", "patch": "@@ -0,0 +1,20 @@\n+// aux-build:default-trait-method.rs\n+\n+extern crate foo;\n+\n+// @has default_trait_method/trait.Item.html\n+// @has - '//*[@id=\"tymethod.foo\"]' 'fn foo()'\n+// @!has - '//*[@id=\"tymethod.foo\"]' 'default fn foo()'\n+// @has - '//*[@id=\"tymethod.bar\"]' 'fn bar()'\n+// @!has - '//*[@id=\"tymethod.bar\"]' 'default fn bar()'\n+// @has - '//*[@id=\"method.baz\"]' 'fn baz()'\n+// @!has - '//*[@id=\"method.baz\"]' 'default fn baz()'\n+pub use foo::Item;\n+\n+// @has default_trait_method/struct.Foo.html\n+// @has - '//*[@id=\"method.foo\"]' 'default fn foo()'\n+// @has - '//*[@id=\"method.bar\"]' 'fn bar()'\n+// @!has - '//*[@id=\"method.bar\"]' 'default fn bar()'\n+// @has - '//*[@id=\"method.baz\"]' 'fn baz()'\n+// @!has - '//*[@id=\"method.baz\"]' 'default fn baz()'\n+pub use foo::Foo;"}]}