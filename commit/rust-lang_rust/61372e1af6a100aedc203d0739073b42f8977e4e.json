{"sha": "61372e1af6a100aedc203d0739073b42f8977e4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMzcyZTFhZjZhMTAwYWVkYzIwM2QwNzM5MDczYjQyZjg5NzdlNGU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-19T14:03:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-19T14:03:21Z"}, "message": "Rollup merge of #82846 - GuillaumeGomez:doc-alias-list, r=jyn514\n\nrustdoc: allow list syntax for #[doc(alias)] attributes\n\nFixes https://github.com/rust-lang/rust/issues/81205.\n\nIt now allows to have:\n\n```rust\n#[doc(alias = \"x\")]\n// and:\n#[doc(alias(\"y\", \"z\"))]\n```\n\ncc ``@jplatte``\nr? ``@jyn514``", "tree": {"sha": "e03d9ecf658034f333855d44b9904a445f6c0c76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e03d9ecf658034f333855d44b9904a445f6c0c76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61372e1af6a100aedc203d0739073b42f8977e4e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgVK8pCRBK7hj4Ov3rIwAAdHIIAHDKZYgiOlGM2QkD/PGE0N3n\nFYQv5nYG2t9xncdt6qBoBONWU+yRFyOZ5LXMT/vsPTpKIlIYxQUeVU5tp1o+1Ott\nvyn7JfhiryX9k4bfMfacTbwQM87XR6fDL33rSUUqduQob20tzB/4pLKBEGU+WpIi\nc2uinATJxsfaz+Ljx+xoIgelR8dHxzhBKsxqFsApLgD0768lPCanHiHwBSGefUtY\n+AoNHQNnCQIaCjPlFa4VxsCMU86dlGbovCMmbp/+Kv84vaLSAVC1OU7qyb+pP9lK\nqXJh/Wo6THlGj4e+9bF/0eqaN8RMUWUYocoeS3pvTQCFlTbg1xy/ekrfdWUU1Ak=\n=rQJz\n-----END PGP SIGNATURE-----\n", "payload": "tree e03d9ecf658034f333855d44b9904a445f6c0c76\nparent 29609711a58312fc105a589e353d2ae197532fd5\nparent 1d26e6b632c78dedff2dd19d93d0687b2c97717d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1616162601 +0100\ncommitter GitHub <noreply@github.com> 1616162601 +0100\n\nRollup merge of #82846 - GuillaumeGomez:doc-alias-list, r=jyn514\n\nrustdoc: allow list syntax for #[doc(alias)] attributes\n\nFixes https://github.com/rust-lang/rust/issues/81205.\n\nIt now allows to have:\n\n```rust\n#[doc(alias = \"x\")]\n// and:\n#[doc(alias(\"y\", \"z\"))]\n```\n\ncc ``@jplatte``\nr? ``@jyn514``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61372e1af6a100aedc203d0739073b42f8977e4e", "html_url": "https://github.com/rust-lang/rust/commit/61372e1af6a100aedc203d0739073b42f8977e4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61372e1af6a100aedc203d0739073b42f8977e4e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29609711a58312fc105a589e353d2ae197532fd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/29609711a58312fc105a589e353d2ae197532fd5", "html_url": "https://github.com/rust-lang/rust/commit/29609711a58312fc105a589e353d2ae197532fd5"}, {"sha": "1d26e6b632c78dedff2dd19d93d0687b2c97717d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d26e6b632c78dedff2dd19d93d0687b2c97717d", "html_url": "https://github.com/rust-lang/rust/commit/1d26e6b632c78dedff2dd19d93d0687b2c97717d"}], "stats": {"total": 315, "additions": 255, "deletions": 60}, "files": [{"sha": "d91d0e1765bbf8486bb7618519a5fdc42b65c2d2", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 83, "deletions": 30, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/61372e1af6a100aedc203d0739073b42f8977e4e/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61372e1af6a100aedc203d0739073b42f8977e4e/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=61372e1af6a100aedc203d0739073b42f8977e4e", "patch": "@@ -394,33 +394,50 @@ impl CheckAttrVisitor<'tcx> {\n             .emit();\n     }\n \n-    fn check_doc_alias(&self, meta: &NestedMetaItem, hir_id: HirId, target: Target) -> bool {\n-        let doc_alias = meta.value_str().map(|s| s.to_string()).unwrap_or_else(String::new);\n+    fn check_doc_alias_value(\n+        &self,\n+        meta: &NestedMetaItem,\n+        doc_alias: &str,\n+        hir_id: HirId,\n+        target: Target,\n+        is_list: bool,\n+    ) -> bool {\n+        let tcx = self.tcx;\n+        let err_fn = move |span: Span, msg: &str| {\n+            tcx.sess.span_err(\n+                span,\n+                &format!(\n+                    \"`#[doc(alias{})]` {}\",\n+                    if is_list { \"(\\\"...\\\")\" } else { \" = \\\"...\\\"\" },\n+                    msg,\n+                ),\n+            );\n+            false\n+        };\n         if doc_alias.is_empty() {\n-            self.doc_attr_str_error(meta, \"alias\");\n-            return false;\n+            return err_fn(\n+                meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n+                \"attribute cannot have empty value\",\n+            );\n         }\n         if let Some(c) =\n             doc_alias.chars().find(|&c| c == '\"' || c == '\\'' || (c.is_whitespace() && c != ' '))\n         {\n-            self.tcx\n-                .sess\n-                .struct_span_err(\n-                    meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n-                    &format!(\"{:?} character isn't allowed in `#[doc(alias = \\\"...\\\")]`\", c),\n-                )\n-                .emit();\n+            self.tcx.sess.span_err(\n+                meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n+                &format!(\n+                    \"{:?} character isn't allowed in `#[doc(alias{})]`\",\n+                    c,\n+                    if is_list { \"(\\\"...\\\")\" } else { \" = \\\"...\\\"\" },\n+                ),\n+            );\n             return false;\n         }\n         if doc_alias.starts_with(' ') || doc_alias.ends_with(' ') {\n-            self.tcx\n-                .sess\n-                .struct_span_err(\n-                    meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n-                    \"`#[doc(alias = \\\"...\\\")]` cannot start or end with ' '\",\n-                )\n-                .emit();\n-            return false;\n+            return err_fn(\n+                meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n+                \"cannot start or end with ' '\",\n+            );\n         }\n         if let Some(err) = match target {\n             Target::Impl => Some(\"implementation block\"),\n@@ -446,27 +463,63 @@ impl CheckAttrVisitor<'tcx> {\n             }\n             _ => None,\n         } {\n-            self.tcx\n-                .sess\n-                .struct_span_err(\n-                    meta.span(),\n-                    &format!(\"`#[doc(alias = \\\"...\\\")]` isn't allowed on {}\", err),\n-                )\n-                .emit();\n-            return false;\n+            return err_fn(meta.span(), &format!(\"isn't allowed on {}\", err));\n         }\n         let item_name = self.tcx.hir().name(hir_id);\n         if &*item_name.as_str() == doc_alias {\n+            return err_fn(meta.span(), \"is the same as the item's name\");\n+        }\n+        true\n+    }\n+\n+    fn check_doc_alias(&self, meta: &NestedMetaItem, hir_id: HirId, target: Target) -> bool {\n+        if let Some(values) = meta.meta_item_list() {\n+            let mut errors = 0;\n+            for v in values {\n+                match v.literal() {\n+                    Some(l) => match l.kind {\n+                        LitKind::Str(s, _) => {\n+                            if !self.check_doc_alias_value(v, &s.as_str(), hir_id, target, true) {\n+                                errors += 1;\n+                            }\n+                        }\n+                        _ => {\n+                            self.tcx\n+                                .sess\n+                                .struct_span_err(\n+                                    v.span(),\n+                                    \"`#[doc(alias(\\\"a\\\"))]` expects string literals\",\n+                                )\n+                                .emit();\n+                            errors += 1;\n+                        }\n+                    },\n+                    None => {\n+                        self.tcx\n+                            .sess\n+                            .struct_span_err(\n+                                v.span(),\n+                                \"`#[doc(alias(\\\"a\\\"))]` expects string literals\",\n+                            )\n+                            .emit();\n+                        errors += 1;\n+                    }\n+                }\n+            }\n+            errors == 0\n+        } else if let Some(doc_alias) = meta.value_str().map(|s| s.to_string()) {\n+            self.check_doc_alias_value(meta, &doc_alias, hir_id, target, false)\n+        } else {\n             self.tcx\n                 .sess\n                 .struct_span_err(\n                     meta.span(),\n-                    &format!(\"`#[doc(alias = \\\"...\\\")]` is the same as the item's name\"),\n+                    \"doc alias attribute expects a string `#[doc(alias = \\\"a\\\")]` or a list of \\\n+                     strings `#[doc(alias(\\\"a\\\", \\\"b\\\"))]`\",\n                 )\n                 .emit();\n-            return false;\n+            false\n         }\n-        true\n     }\n \n     fn check_doc_keyword(&self, meta: &NestedMetaItem, hir_id: HirId) -> bool {"}, {"sha": "6147bd0a97a968e7234517d271405a290243ee60", "filename": "src/doc/rustdoc/src/advanced-features.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61372e1af6a100aedc203d0739073b42f8977e4e/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/61372e1af6a100aedc203d0739073b42f8977e4e/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md?ref=61372e1af6a100aedc203d0739073b42f8977e4e", "patch": "@@ -81,3 +81,10 @@ Then, when looking for it through the `rustdoc` search, if you enter \"x\" or\n \"big\", search will show the `BigX` struct first.\n \n There are some limitations on the doc alias names though: you can't use `\"` or whitespace.\n+\n+You can add multiple aliases at the same time by using a list:\n+\n+```rust,no_run\n+#[doc(alias(\"x\", \"big\"))]\n+pub struct BigX;\n+```"}, {"sha": "840a42c2b8aab1f874a32471913d4d7cd5fac7ee", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/61372e1af6a100aedc203d0739073b42f8977e4e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61372e1af6a100aedc203d0739073b42f8977e4e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=61372e1af6a100aedc203d0739073b42f8977e4e", "patch": "@@ -910,12 +910,23 @@ impl Attributes {\n     }\n \n     crate fn get_doc_aliases(&self) -> FxHashSet<String> {\n-        self.other_attrs\n-            .lists(sym::doc)\n-            .filter(|a| a.has_name(sym::alias))\n-            .filter_map(|a| a.value_str().map(|s| s.to_string()))\n-            .filter(|v| !v.is_empty())\n-            .collect::<FxHashSet<_>>()\n+        let mut aliases = FxHashSet::default();\n+\n+        for attr in self.other_attrs.lists(sym::doc).filter(|a| a.has_name(sym::alias)) {\n+            if let Some(values) = attr.meta_item_list() {\n+                for l in values {\n+                    match l.literal().unwrap().kind {\n+                        ast::LitKind::Str(s, _) => {\n+                            aliases.insert(s.as_str().to_string());\n+                        }\n+                        _ => unreachable!(),\n+                    }\n+                }\n+            } else {\n+                aliases.insert(attr.value_str().map(|s| s.to_string()).unwrap());\n+            }\n+        }\n+        aliases\n     }\n }\n "}, {"sha": "719b98604c4978953562946341538c9d3a7f53df", "filename": "src/test/rustdoc-ui/check-doc-alias-attr.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/61372e1af6a100aedc203d0739073b42f8977e4e/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61372e1af6a100aedc203d0739073b42f8977e4e/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.rs?ref=61372e1af6a100aedc203d0739073b42f8977e4e", "patch": "@@ -1,16 +1,28 @@\n #![crate_type = \"lib\"]\n \n #[doc(alias = \"foo\")] // ok!\n+#[doc(alias(\"bar\", \"baz\"))] // ok!\n pub struct Bar;\n \n #[doc(alias)] //~ ERROR\n #[doc(alias = 0)] //~ ERROR\n-#[doc(alias(\"bar\"))] //~ ERROR\n #[doc(alias = \"\\\"\")] //~ ERROR\n #[doc(alias = \"\\n\")] //~ ERROR\n #[doc(alias = \"\n \")] //~^ ERROR\n #[doc(alias = \"\\t\")] //~ ERROR\n #[doc(alias = \" hello\")] //~ ERROR\n #[doc(alias = \"hello \")] //~ ERROR\n+#[doc(alias = \"\")] //~ ERROR\n pub struct Foo;\n+\n+#[doc(alias(0))] //~ ERROR\n+#[doc(alias(\"\\\"\"))] //~ ERROR\n+#[doc(alias(\"\\n\"))] //~ ERROR\n+#[doc(alias(\"\n+\"))] //~^ ERROR\n+#[doc(alias(\"\\t\"))] //~ ERROR\n+#[doc(alias(\" hello\"))] //~ ERROR\n+#[doc(alias(\"hello \"))] //~ ERROR\n+#[doc(alias(\"\"))] //~ ERROR\n+pub struct Foo2;"}, {"sha": "f99d69dc101b68e1c164d0dcd1f24f7e00d96745", "filename": "src/test/rustdoc-ui/check-doc-alias-attr.stderr", "status": "modified", "additions": 61, "deletions": 11, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/61372e1af6a100aedc203d0739073b42f8977e4e/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61372e1af6a100aedc203d0739073b42f8977e4e/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-doc-alias-attr.stderr?ref=61372e1af6a100aedc203d0739073b42f8977e4e", "patch": "@@ -1,21 +1,15 @@\n-error: doc alias attribute expects a string: #[doc(alias = \"a\")]\n-  --> $DIR/check-doc-alias-attr.rs:6:7\n+error: doc alias attribute expects a string `#[doc(alias = \"a\")]` or a list of strings `#[doc(alias(\"a\", \"b\"))]`\n+  --> $DIR/check-doc-alias-attr.rs:7:7\n    |\n LL | #[doc(alias)]\n    |       ^^^^^\n \n-error: doc alias attribute expects a string: #[doc(alias = \"a\")]\n-  --> $DIR/check-doc-alias-attr.rs:7:7\n+error: doc alias attribute expects a string `#[doc(alias = \"a\")]` or a list of strings `#[doc(alias(\"a\", \"b\"))]`\n+  --> $DIR/check-doc-alias-attr.rs:8:7\n    |\n LL | #[doc(alias = 0)]\n    |       ^^^^^^^^^\n \n-error: doc alias attribute expects a string: #[doc(alias = \"a\")]\n-  --> $DIR/check-doc-alias-attr.rs:8:7\n-   |\n-LL | #[doc(alias(\"bar\"))]\n-   |       ^^^^^^^^^^^^\n-\n error: '\\\"' character isn't allowed in `#[doc(alias = \"...\")]`\n   --> $DIR/check-doc-alias-attr.rs:9:15\n    |\n@@ -54,5 +48,61 @@ error: `#[doc(alias = \"...\")]` cannot start or end with ' '\n LL | #[doc(alias = \"hello \")]\n    |               ^^^^^^^^\n \n-error: aborting due to 9 previous errors\n+error: `#[doc(alias = \"...\")]` attribute cannot have empty value\n+  --> $DIR/check-doc-alias-attr.rs:16:15\n+   |\n+LL | #[doc(alias = \"\")]\n+   |               ^^\n+\n+error: `#[doc(alias(\"a\"))]` expects string literals\n+  --> $DIR/check-doc-alias-attr.rs:19:13\n+   |\n+LL | #[doc(alias(0))]\n+   |             ^\n+\n+error: '\\\"' character isn't allowed in `#[doc(alias(\"...\"))]`\n+  --> $DIR/check-doc-alias-attr.rs:20:13\n+   |\n+LL | #[doc(alias(\"\\\"\"))]\n+   |             ^^^^\n+\n+error: '\\n' character isn't allowed in `#[doc(alias(\"...\"))]`\n+  --> $DIR/check-doc-alias-attr.rs:21:13\n+   |\n+LL | #[doc(alias(\"\\n\"))]\n+   |             ^^^^\n+\n+error: '\\n' character isn't allowed in `#[doc(alias(\"...\"))]`\n+  --> $DIR/check-doc-alias-attr.rs:22:13\n+   |\n+LL |   #[doc(alias(\"\n+   |  _____________^\n+LL | | \"))]\n+   | |_^\n+\n+error: '\\t' character isn't allowed in `#[doc(alias(\"...\"))]`\n+  --> $DIR/check-doc-alias-attr.rs:24:13\n+   |\n+LL | #[doc(alias(\"\\t\"))]\n+   |             ^^^^\n+\n+error: `#[doc(alias(\"...\"))]` cannot start or end with ' '\n+  --> $DIR/check-doc-alias-attr.rs:25:13\n+   |\n+LL | #[doc(alias(\" hello\"))]\n+   |             ^^^^^^^^\n+\n+error: `#[doc(alias(\"...\"))]` cannot start or end with ' '\n+  --> $DIR/check-doc-alias-attr.rs:26:13\n+   |\n+LL | #[doc(alias(\"hello \"))]\n+   |             ^^^^^^^^\n+\n+error: `#[doc(alias(\"...\"))]` attribute cannot have empty value\n+  --> $DIR/check-doc-alias-attr.rs:27:13\n+   |\n+LL | #[doc(alias(\"\"))]\n+   |             ^^\n+\n+error: aborting due to 17 previous errors\n "}, {"sha": "719b98604c4978953562946341538c9d3a7f53df", "filename": "src/test/ui/rustdoc/check-doc-alias-attr.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/61372e1af6a100aedc203d0739073b42f8977e4e/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61372e1af6a100aedc203d0739073b42f8977e4e/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr.rs?ref=61372e1af6a100aedc203d0739073b42f8977e4e", "patch": "@@ -1,16 +1,28 @@\n #![crate_type = \"lib\"]\n \n #[doc(alias = \"foo\")] // ok!\n+#[doc(alias(\"bar\", \"baz\"))] // ok!\n pub struct Bar;\n \n #[doc(alias)] //~ ERROR\n #[doc(alias = 0)] //~ ERROR\n-#[doc(alias(\"bar\"))] //~ ERROR\n #[doc(alias = \"\\\"\")] //~ ERROR\n #[doc(alias = \"\\n\")] //~ ERROR\n #[doc(alias = \"\n \")] //~^ ERROR\n #[doc(alias = \"\\t\")] //~ ERROR\n #[doc(alias = \" hello\")] //~ ERROR\n #[doc(alias = \"hello \")] //~ ERROR\n+#[doc(alias = \"\")] //~ ERROR\n pub struct Foo;\n+\n+#[doc(alias(0))] //~ ERROR\n+#[doc(alias(\"\\\"\"))] //~ ERROR\n+#[doc(alias(\"\\n\"))] //~ ERROR\n+#[doc(alias(\"\n+\"))] //~^ ERROR\n+#[doc(alias(\"\\t\"))] //~ ERROR\n+#[doc(alias(\" hello\"))] //~ ERROR\n+#[doc(alias(\"hello \"))] //~ ERROR\n+#[doc(alias(\"\"))] //~ ERROR\n+pub struct Foo2;"}, {"sha": "f99d69dc101b68e1c164d0dcd1f24f7e00d96745", "filename": "src/test/ui/rustdoc/check-doc-alias-attr.stderr", "status": "modified", "additions": 61, "deletions": 11, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/61372e1af6a100aedc203d0739073b42f8977e4e/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61372e1af6a100aedc203d0739073b42f8977e4e/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fcheck-doc-alias-attr.stderr?ref=61372e1af6a100aedc203d0739073b42f8977e4e", "patch": "@@ -1,21 +1,15 @@\n-error: doc alias attribute expects a string: #[doc(alias = \"a\")]\n-  --> $DIR/check-doc-alias-attr.rs:6:7\n+error: doc alias attribute expects a string `#[doc(alias = \"a\")]` or a list of strings `#[doc(alias(\"a\", \"b\"))]`\n+  --> $DIR/check-doc-alias-attr.rs:7:7\n    |\n LL | #[doc(alias)]\n    |       ^^^^^\n \n-error: doc alias attribute expects a string: #[doc(alias = \"a\")]\n-  --> $DIR/check-doc-alias-attr.rs:7:7\n+error: doc alias attribute expects a string `#[doc(alias = \"a\")]` or a list of strings `#[doc(alias(\"a\", \"b\"))]`\n+  --> $DIR/check-doc-alias-attr.rs:8:7\n    |\n LL | #[doc(alias = 0)]\n    |       ^^^^^^^^^\n \n-error: doc alias attribute expects a string: #[doc(alias = \"a\")]\n-  --> $DIR/check-doc-alias-attr.rs:8:7\n-   |\n-LL | #[doc(alias(\"bar\"))]\n-   |       ^^^^^^^^^^^^\n-\n error: '\\\"' character isn't allowed in `#[doc(alias = \"...\")]`\n   --> $DIR/check-doc-alias-attr.rs:9:15\n    |\n@@ -54,5 +48,61 @@ error: `#[doc(alias = \"...\")]` cannot start or end with ' '\n LL | #[doc(alias = \"hello \")]\n    |               ^^^^^^^^\n \n-error: aborting due to 9 previous errors\n+error: `#[doc(alias = \"...\")]` attribute cannot have empty value\n+  --> $DIR/check-doc-alias-attr.rs:16:15\n+   |\n+LL | #[doc(alias = \"\")]\n+   |               ^^\n+\n+error: `#[doc(alias(\"a\"))]` expects string literals\n+  --> $DIR/check-doc-alias-attr.rs:19:13\n+   |\n+LL | #[doc(alias(0))]\n+   |             ^\n+\n+error: '\\\"' character isn't allowed in `#[doc(alias(\"...\"))]`\n+  --> $DIR/check-doc-alias-attr.rs:20:13\n+   |\n+LL | #[doc(alias(\"\\\"\"))]\n+   |             ^^^^\n+\n+error: '\\n' character isn't allowed in `#[doc(alias(\"...\"))]`\n+  --> $DIR/check-doc-alias-attr.rs:21:13\n+   |\n+LL | #[doc(alias(\"\\n\"))]\n+   |             ^^^^\n+\n+error: '\\n' character isn't allowed in `#[doc(alias(\"...\"))]`\n+  --> $DIR/check-doc-alias-attr.rs:22:13\n+   |\n+LL |   #[doc(alias(\"\n+   |  _____________^\n+LL | | \"))]\n+   | |_^\n+\n+error: '\\t' character isn't allowed in `#[doc(alias(\"...\"))]`\n+  --> $DIR/check-doc-alias-attr.rs:24:13\n+   |\n+LL | #[doc(alias(\"\\t\"))]\n+   |             ^^^^\n+\n+error: `#[doc(alias(\"...\"))]` cannot start or end with ' '\n+  --> $DIR/check-doc-alias-attr.rs:25:13\n+   |\n+LL | #[doc(alias(\" hello\"))]\n+   |             ^^^^^^^^\n+\n+error: `#[doc(alias(\"...\"))]` cannot start or end with ' '\n+  --> $DIR/check-doc-alias-attr.rs:26:13\n+   |\n+LL | #[doc(alias(\"hello \"))]\n+   |             ^^^^^^^^\n+\n+error: `#[doc(alias(\"...\"))]` attribute cannot have empty value\n+  --> $DIR/check-doc-alias-attr.rs:27:13\n+   |\n+LL | #[doc(alias(\"\"))]\n+   |             ^^\n+\n+error: aborting due to 17 previous errors\n "}]}