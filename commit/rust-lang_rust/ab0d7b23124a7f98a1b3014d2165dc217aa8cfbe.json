{"sha": "ab0d7b23124a7f98a1b3014d2165dc217aa8cfbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMGQ3YjIzMTI0YTdmOThhMWIzMDE0ZDIxNjVkYzIxN2FhOGNmYmU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T00:54:48Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:26Z"}, "message": "librustc: De-`@mut` the `ast_ty_to_ty_cache`.", "tree": {"sha": "6bd8a5bd3166fa81defd5da85c40812658ba6d04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bd8a5bd3166fa81defd5da85c40812658ba6d04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab0d7b23124a7f98a1b3014d2165dc217aa8cfbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab0d7b23124a7f98a1b3014d2165dc217aa8cfbe", "html_url": "https://github.com/rust-lang/rust/commit/ab0d7b23124a7f98a1b3014d2165dc217aa8cfbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab0d7b23124a7f98a1b3014d2165dc217aa8cfbe/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b941677ea3175ea0bba14bb6ced050c8e8fca3cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b941677ea3175ea0bba14bb6ced050c8e8fca3cf", "html_url": "https://github.com/rust-lang/rust/commit/b941677ea3175ea0bba14bb6ced050c8e8fca3cf"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "932e8c5c2c2c91826be4f29e089c1e292ff3287b", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab0d7b23124a7f98a1b3014d2165dc217aa8cfbe/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0d7b23124a7f98a1b3014d2165dc217aa8cfbe/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ab0d7b23124a7f98a1b3014d2165dc217aa8cfbe", "patch": "@@ -310,7 +310,7 @@ struct ctxt_ {\n     short_names_cache: RefCell<HashMap<t, @str>>,\n     needs_unwind_cleanup_cache: RefCell<HashMap<t, bool>>,\n     tc_cache: RefCell<HashMap<uint, TypeContents>>,\n-    ast_ty_to_ty_cache: @mut HashMap<NodeId, ast_ty_to_ty_cache_entry>,\n+    ast_ty_to_ty_cache: RefCell<HashMap<NodeId, ast_ty_to_ty_cache_entry>>,\n     enum_var_cache: @mut HashMap<DefId, @~[@VariantInfo]>,\n     ty_param_defs: @mut HashMap<ast::NodeId, TypeParameterDef>,\n     adjustments: @mut HashMap<ast::NodeId, @AutoAdjustment>,\n@@ -996,7 +996,7 @@ pub fn mk_ctxt(s: session::Session,\n         short_names_cache: RefCell::new(HashMap::new()),\n         needs_unwind_cleanup_cache: RefCell::new(HashMap::new()),\n         tc_cache: RefCell::new(HashMap::new()),\n-        ast_ty_to_ty_cache: @mut HashMap::new(),\n+        ast_ty_to_ty_cache: RefCell::new(HashMap::new()),\n         enum_var_cache: @mut HashMap::new(),\n         methods: RefCell::new(HashMap::new()),\n         trait_method_def_ids: RefCell::new(HashMap::new()),"}, {"sha": "709791689d686cf3c9b8f8ed6a1342a819e01682", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ab0d7b23124a7f98a1b3014d2165dc217aa8cfbe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab0d7b23124a7f98a1b3014d2165dc217aa8cfbe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=ab0d7b23124a7f98a1b3014d2165dc217aa8cfbe", "patch": "@@ -383,16 +383,22 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n \n     let tcx = this.tcx();\n \n-    match tcx.ast_ty_to_ty_cache.find(&ast_ty.id) {\n-      Some(&ty::atttce_resolved(ty)) => return ty,\n-      Some(&ty::atttce_unresolved) => {\n-        tcx.sess.span_fatal(ast_ty.span, \"illegal recursive type; \\\n-                                          insert an enum in the cycle, if this is desired\");\n-      }\n-      None => { /* go on */ }\n+    {\n+        let mut ast_ty_to_ty_cache = tcx.ast_ty_to_ty_cache.borrow_mut();\n+        match ast_ty_to_ty_cache.get().find(&ast_ty.id) {\n+            Some(&ty::atttce_resolved(ty)) => return ty,\n+            Some(&ty::atttce_unresolved) => {\n+                tcx.sess.span_fatal(ast_ty.span,\n+                                    \"illegal recursive type; insert an enum \\\n+                                     or struct in the cycle, if this is \\\n+                                     desired\");\n+            }\n+            None => { /* go on */ }\n+        }\n+        ast_ty_to_ty_cache.get().insert(ast_ty.id, ty::atttce_unresolved);\n     }\n \n-    tcx.ast_ty_to_ty_cache.insert(ast_ty.id, ty::atttce_unresolved);\n+\n     let typ = match ast_ty.node {\n       ast::ty_nil => ty::mk_nil(),\n       ast::ty_bot => ty::mk_bot(),\n@@ -576,7 +582,8 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n       }\n     };\n \n-    tcx.ast_ty_to_ty_cache.insert(ast_ty.id, ty::atttce_resolved(typ));\n+    let mut ast_ty_to_ty_cache = tcx.ast_ty_to_ty_cache.borrow_mut();\n+    ast_ty_to_ty_cache.get().insert(ast_ty.id, ty::atttce_resolved(typ));\n     return typ;\n }\n "}]}