{"sha": "c749fe223bf5a41709a4bc91d0f56dafc4201658", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NDlmZTIyM2JmNWE0MTcwOWE0YmM5MWQwZjU2ZGFmYzQyMDE2NTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-24T09:31:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-24T09:31:30Z"}, "message": "Remove duplication", "tree": {"sha": "0ed66d422a10a9f192a039565ac70b85dbdf80f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ed66d422a10a9f192a039565ac70b85dbdf80f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c749fe223bf5a41709a4bc91d0f56dafc4201658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c749fe223bf5a41709a4bc91d0f56dafc4201658", "html_url": "https://github.com/rust-lang/rust/commit/c749fe223bf5a41709a4bc91d0f56dafc4201658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c749fe223bf5a41709a4bc91d0f56dafc4201658/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6795fb83a850dde6ac0b08decf108c0c3aa452a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6795fb83a850dde6ac0b08decf108c0c3aa452a", "html_url": "https://github.com/rust-lang/rust/commit/c6795fb83a850dde6ac0b08decf108c0c3aa452a"}], "stats": {"total": 75, "additions": 34, "deletions": 41}, "files": [{"sha": "a6bdf1c9de7baf421cdade07189827ffc4ff2988", "filename": "crates/ra_ide/src/call_info.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c749fe223bf5a41709a4bc91d0f56dafc4201658/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c749fe223bf5a41709a4bc91d0f56dafc4201658/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_info.rs?ref=c749fe223bf5a41709a4bc91d0f56dafc4201658", "patch": "@@ -215,7 +215,7 @@ impl CallInfo {\n mod tests {\n     use test_utils::mark;\n \n-    use crate::mock_analysis::single_file_with_position;\n+    use crate::mock_analysis::analysis_and_position;\n \n     use super::*;\n \n@@ -231,7 +231,7 @@ mod tests {\n     }\n \n     fn call_info_helper(text: &str) -> Option<CallInfo> {\n-        let (analysis, position) = single_file_with_position(text);\n+        let (analysis, position) = analysis_and_position(text);\n         analysis.call_info(position).unwrap()\n     }\n \n@@ -530,7 +530,7 @@ By default this method stops actor's `Context`.\"#\n     #[test]\n     fn call_info_bad_offset() {\n         mark::check!(call_info_bad_offset);\n-        let (analysis, position) = single_file_with_position(\n+        let (analysis, position) = analysis_and_position(\n             r#\"fn foo(x: u32, y: u32) -> u32 {x + y}\n                fn bar() { foo <|> (3, ); }\"#,\n         );"}, {"sha": "a1b7c11934014cc4610d8125015f2d5347d1d2d3", "filename": "crates/ra_ide/src/completion/test_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c749fe223bf5a41709a4bc91d0f56dafc4201658/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c749fe223bf5a41709a4bc91d0f56dafc4201658/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=c749fe223bf5a41709a4bc91d0f56dafc4201658", "patch": "@@ -2,7 +2,7 @@\n \n use crate::{\n     completion::{completion_item::CompletionKind, CompletionConfig},\n-    mock_analysis::{analysis_and_position, single_file_with_position},\n+    mock_analysis::analysis_and_position,\n     CompletionItem,\n };\n use hir::Semantics;\n@@ -33,7 +33,7 @@ fn get_all_completion_items(code: &str, options: &CompletionConfig) -> Vec<Compl\n     let (analysis, position) = if code.contains(\"//-\") {\n         analysis_and_position(code)\n     } else {\n-        single_file_with_position(code)\n+        analysis_and_position(code)\n     };\n     analysis.completions(options, position).unwrap().unwrap().into()\n }\n@@ -55,7 +55,7 @@ pub(crate) fn completion_list_with_options(\n }\n \n pub(crate) fn check_pattern_is_applicable(code: &str, check: fn(SyntaxElement) -> bool) {\n-    let (analysis, pos) = single_file_with_position(code);\n+    let (analysis, pos) = analysis_and_position(code);\n     analysis\n         .with_db(|db| {\n             let sema = Semantics::new(db);"}, {"sha": "8a6b3ea9904ab3fa32de922bb169619ae2d8452e", "filename": "crates/ra_ide/src/extend_selection.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c749fe223bf5a41709a4bc91d0f56dafc4201658/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c749fe223bf5a41709a4bc91d0f56dafc4201658/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs?ref=c749fe223bf5a41709a4bc91d0f56dafc4201658", "patch": "@@ -315,12 +315,12 @@ fn adj_comments(comment: &ast::Comment, dir: Direction) -> ast::Comment {\n \n #[cfg(test)]\n mod tests {\n-    use crate::mock_analysis::single_file_with_position;\n+    use crate::mock_analysis::analysis_and_position;\n \n     use super::*;\n \n     fn do_check(before: &str, afters: &[&str]) {\n-        let (analysis, position) = single_file_with_position(&before);\n+        let (analysis, position) = analysis_and_position(&before);\n         let before = analysis.file_text(position.file_id).unwrap();\n         let range = TextRange::empty(position.offset);\n         let mut frange = FileRange { file_id: position.file_id, range };"}, {"sha": "c3e36a387a51f1c92c95ff55b6587b763d90cc99", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c749fe223bf5a41709a4bc91d0f56dafc4201658/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c749fe223bf5a41709a4bc91d0f56dafc4201658/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=c749fe223bf5a41709a4bc91d0f56dafc4201658", "patch": "@@ -399,7 +399,7 @@ mod tests {\n     use ra_db::FileLoader;\n     use ra_syntax::TextRange;\n \n-    use crate::mock_analysis::{analysis_and_position, single_file_with_position};\n+    use crate::mock_analysis::analysis_and_position;\n \n     fn trim_markup(s: &str) -> &str {\n         s.trim_start_matches(\"```rust\\n\").trim_end_matches(\"\\n```\")\n@@ -442,7 +442,7 @@ mod tests {\n \n     #[test]\n     fn hover_shows_type_of_an_expression() {\n-        let (analysis, position) = single_file_with_position(\n+        let (analysis, position) = analysis_and_position(\n             r#\"\n pub fn foo() -> u32 { 1 }\n \n@@ -641,7 +641,7 @@ fn main() {\n \n     #[test]\n     fn hover_some() {\n-        let (analysis, position) = single_file_with_position(\n+        let (analysis, position) = analysis_and_position(\n             \"\n             enum Option<T> { Some(T) }\n             use Option::Some;\n@@ -654,7 +654,7 @@ fn main() {\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Option\\n```\\n\\n```rust\\nSome\"));\n \n-        let (analysis, position) = single_file_with_position(\n+        let (analysis, position) = analysis_and_position(\n             \"\n             enum Option<T> { Some(T) }\n             use Option::Some;\n@@ -720,21 +720,21 @@ The Some variant\n \n     #[test]\n     fn hover_for_local_variable() {\n-        let (analysis, position) = single_file_with_position(\"fn func(foo: i32) { fo<|>o; }\");\n+        let (analysis, position) = analysis_and_position(\"fn func(foo: i32) { fo<|>o; }\");\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n     }\n \n     #[test]\n     fn hover_for_local_variable_pat() {\n-        let (analysis, position) = single_file_with_position(\"fn func(fo<|>o: i32) {}\");\n+        let (analysis, position) = analysis_and_position(\"fn func(fo<|>o: i32) {}\");\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n     }\n \n     #[test]\n     fn hover_local_var_edge() {\n-        let (analysis, position) = single_file_with_position(\n+        let (analysis, position) = analysis_and_position(\n             \"\n fn func(foo: i32) { if true { <|>foo; }; }\n \",\n@@ -745,14 +745,14 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn hover_for_param_edge() {\n-        let (analysis, position) = single_file_with_position(\"fn func(<|>foo: i32) {}\");\n+        let (analysis, position) = analysis_and_position(\"fn func(<|>foo: i32) {}\");\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n     }\n \n     #[test]\n     fn test_hover_infer_associated_method_result() {\n-        let (analysis, position) = single_file_with_position(\n+        let (analysis, position) = analysis_and_position(\n             \"\n             struct Thing { x: u32 }\n \n@@ -773,7 +773,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn test_hover_infer_associated_method_exact() {\n-        let (analysis, position) = single_file_with_position(\n+        let (analysis, position) = analysis_and_position(\n             \"\n             mod wrapper {\n                 struct Thing { x: u32 }\n@@ -799,7 +799,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn test_hover_infer_associated_const_in_pattern() {\n-        let (analysis, position) = single_file_with_position(\n+        let (analysis, position) = analysis_and_position(\n             \"\n             struct X;\n             impl X {\n@@ -821,7 +821,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn test_hover_self() {\n-        let (analysis, position) = single_file_with_position(\n+        let (analysis, position) = analysis_and_position(\n             \"\n             struct Thing { x: u32 }\n             impl Thing {\n@@ -835,7 +835,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Thing\"));\n \n         /* FIXME: revive these tests\n-                let (analysis, position) = single_file_with_position(\n+                let (analysis, position) = analysis_and_position(\n                     \"\n                     struct Thing { x: u32 }\n                     impl Thing {\n@@ -849,7 +849,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 let hover = analysis.hover(position).unwrap().unwrap();\n                 assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Thing\"));\n \n-                let (analysis, position) = single_file_with_position(\n+                let (analysis, position) = analysis_and_position(\n                     \"\n                     enum Thing { A }\n                     impl Thing {\n@@ -862,7 +862,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n                 let hover = analysis.hover(position).unwrap().unwrap();\n                 assert_eq!(trim_markup_opt(hover.info.first()), Some(\"enum Thing\"));\n \n-                let (analysis, position) = single_file_with_position(\n+                let (analysis, position) = analysis_and_position(\n                     \"\n                     enum Thing { A }\n                     impl Thing {\n@@ -878,7 +878,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn test_hover_shadowing_pat() {\n-        let (analysis, position) = single_file_with_position(\n+        let (analysis, position) = analysis_and_position(\n             \"\n             fn x() {}\n \n@@ -894,7 +894,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn test_hover_macro_invocation() {\n-        let (analysis, position) = single_file_with_position(\n+        let (analysis, position) = analysis_and_position(\n             \"\n             macro_rules! foo {\n                 () => {}\n@@ -911,7 +911,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn test_hover_tuple_field() {\n-        let (analysis, position) = single_file_with_position(\n+        let (analysis, position) = analysis_and_position(\n             \"\n             struct TS(String, i32<|>);\n             \","}, {"sha": "e99c2b0a334663e2b2da96c0ad82a8a73dbe64ee", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c749fe223bf5a41709a4bc91d0f56dafc4201658/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c749fe223bf5a41709a4bc91d0f56dafc4201658/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=c749fe223bf5a41709a4bc91d0f56dafc4201658", "patch": "@@ -221,11 +221,6 @@ pub fn single_file(ra_fixture: &str) -> (Analysis, FileId) {\n     (mock.analysis(), file_id)\n }\n \n-/// Creates analysis for a single file, returns position marked with <|>.\n-pub fn single_file_with_position(ra_fixture: &str) -> (Analysis, FilePosition) {\n-    analysis_and_position(ra_fixture)\n-}\n-\n /// Creates analysis for a single file, returns range marked with a pair of <|>.\n pub fn single_file_with_range(ra_fixture: &str) -> (Analysis, FileRange) {\n     let mut mock = MockAnalysis::new();"}, {"sha": "3433fdae39015b86d2d4f75f004c8178d0e3f3d4", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c749fe223bf5a41709a4bc91d0f56dafc4201658/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c749fe223bf5a41709a4bc91d0f56dafc4201658/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=c749fe223bf5a41709a4bc91d0f56dafc4201658", "patch": "@@ -191,7 +191,7 @@ fn get_struct_def_name_for_struct_literal_search(\n #[cfg(test)]\n mod tests {\n     use crate::{\n-        mock_analysis::{analysis_and_position, single_file_with_position, MockAnalysis},\n+        mock_analysis::{analysis_and_position, MockAnalysis},\n         Declaration, Reference, ReferenceSearchResult, SearchScope,\n     };\n \n@@ -653,7 +653,7 @@ fn main() {\n     }\n \n     fn get_all_refs(ra_fixture: &str) -> ReferenceSearchResult {\n-        let (analysis, position) = single_file_with_position(ra_fixture);\n+        let (analysis, position) = analysis_and_position(ra_fixture);\n         analysis.find_all_refs(position, None).unwrap().unwrap()\n     }\n "}, {"sha": "7ebc0adcf9bd7aeeb515376fe383999d8757cbd2", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c749fe223bf5a41709a4bc91d0f56dafc4201658/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c749fe223bf5a41709a4bc91d0f56dafc4201658/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=c749fe223bf5a41709a4bc91d0f56dafc4201658", "patch": "@@ -271,12 +271,10 @@ fn rename_reference(\n mod tests {\n     use insta::assert_debug_snapshot;\n     use ra_text_edit::TextEditBuilder;\n+    use stdx::trim_indent;\n     use test_utils::{assert_eq_text, mark};\n \n-    use crate::{\n-        mock_analysis::analysis_and_position, mock_analysis::single_file_with_position, FileId,\n-    };\n-    use stdx::trim_indent;\n+    use crate::{mock_analysis::analysis_and_position, FileId};\n \n     #[test]\n     fn test_rename_to_underscore() {\n@@ -310,7 +308,7 @@ mod tests {\n \n     #[test]\n     fn test_rename_to_invalid_identifier() {\n-        let (analysis, position) = single_file_with_position(\n+        let (analysis, position) = analysis_and_position(\n             \"\n     fn main() {\n         let i<|> = 1;\n@@ -1056,7 +1054,7 @@ pub mod foo<|>;\n \n     fn test_rename(ra_fixture_before: &str, new_name: &str, ra_fixture_after: &str) {\n         let ra_fixture_after = &trim_indent(ra_fixture_after);\n-        let (analysis, position) = single_file_with_position(ra_fixture_before);\n+        let (analysis, position) = analysis_and_position(ra_fixture_before);\n         let source_change = analysis.rename(position, new_name).unwrap();\n         let mut text_edit_builder = TextEditBuilder::default();\n         let mut file_id: Option<FileId> = None;"}, {"sha": "2faaa8ff071f0103a5d1612d6a78b8619ee9349f", "filename": "crates/ra_ide/src/typing/on_enter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c749fe223bf5a41709a4bc91d0f56dafc4201658/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c749fe223bf5a41709a4bc91d0f56dafc4201658/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs?ref=c749fe223bf5a41709a4bc91d0f56dafc4201658", "patch": "@@ -77,11 +77,11 @@ fn node_indent(file: &SourceFile, token: &SyntaxToken) -> Option<SmolStr> {\n mod tests {\n     use test_utils::assert_eq_text;\n \n-    use crate::mock_analysis::single_file_with_position;\n+    use crate::mock_analysis::analysis_and_position;\n     use stdx::trim_indent;\n \n     fn apply_on_enter(before: &str) -> Option<String> {\n-        let (analysis, position) = single_file_with_position(&before);\n+        let (analysis, position) = analysis_and_position(&before);\n         let result = analysis.on_enter(position).unwrap()?;\n \n         let mut actual = analysis.file_text(position.file_id).unwrap().to_string();"}]}