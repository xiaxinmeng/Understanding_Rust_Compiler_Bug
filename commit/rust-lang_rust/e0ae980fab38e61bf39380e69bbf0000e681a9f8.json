{"sha": "e0ae980fab38e61bf39380e69bbf0000e681a9f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYWU5ODBmYWIzOGU2MWJmMzkzODBlNjliYmYwMDAwZTY4MWE5Zjg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-01-25T22:35:57Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-01-25T22:35:57Z"}, "message": "Better suggestion span", "tree": {"sha": "78289de3c14275dbfd5d25791749211241c83b2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78289de3c14275dbfd5d25791749211241c83b2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0ae980fab38e61bf39380e69bbf0000e681a9f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0ae980fab38e61bf39380e69bbf0000e681a9f8", "html_url": "https://github.com/rust-lang/rust/commit/e0ae980fab38e61bf39380e69bbf0000e681a9f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0ae980fab38e61bf39380e69bbf0000e681a9f8/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65d003a1128e9234730a66c79065afdabb31afa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/65d003a1128e9234730a66c79065afdabb31afa0", "html_url": "https://github.com/rust-lang/rust/commit/65d003a1128e9234730a66c79065afdabb31afa0"}], "stats": {"total": 43, "additions": 16, "deletions": 27}, "files": [{"sha": "32b1299efce91d1fe44fdbac532f1ecf52dbd3c0", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 16, "deletions": 27, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e0ae980fab38e61bf39380e69bbf0000e681a9f8/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ae980fab38e61bf39380e69bbf0000e681a9f8/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=e0ae980fab38e61bf39380e69bbf0000e681a9f8", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{indent_of, snippet_opt, span_lint_and_help, span_lint_and_then};\n+use crate::utils::{indent_of, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind};\n@@ -80,33 +80,22 @@ impl LateLintPass<'_> for ExhaustiveItems {\n                 } else {\n                     (EXHAUSTIVE_STRUCTS, \"exported structs should not be exhaustive\")\n                 };\n-                let suggestion_span = item.span.until(item.ident.span);\n+                let suggestion_span = item.span.shrink_to_lo();\n+                let indent = \" \".repeat(indent_of(cx, item.span).unwrap_or(0));\n+                span_lint_and_then(\n+                    cx,\n+                    lint,\n+                    item.span,\n+                    msg,\n+                    |diag| {\n+                        let sugg = format!(\"#[non_exhaustive]\\n{}\", indent);\n+                        diag.span_suggestion(suggestion_span,\n+                                             \"try adding #[non_exhaustive]\",\n+                                             sugg,\n+                                             Applicability::MaybeIncorrect);\n+                    }\n+                );\n \n-                if let Some(snippet) = snippet_opt(cx, suggestion_span) {\n-                    let indent = \" \".repeat(indent_of(cx, item.span).unwrap_or(0));\n-                    span_lint_and_then(\n-                        cx,\n-                        lint,\n-                        item.span,\n-                        msg,\n-                        |diag| {\n-                            let sugg = format!(\"#[non_exhaustive]\\n{}{}\", indent, snippet);\n-                            diag.span_suggestion(suggestion_span,\n-                                                 \"try adding #[non_exhaustive]\",\n-                                                 sugg,\n-                                                 Applicability::MaybeIncorrect);\n-                        }\n-                    );\n-                } else {\n-                    span_lint_and_help(\n-                        cx,\n-                        lint,\n-                        item.span,\n-                        msg,\n-                        None,\n-                        \"try adding #[non_exhaustive]\",\n-                    );\n-                }\n             }\n         }\n     }"}]}