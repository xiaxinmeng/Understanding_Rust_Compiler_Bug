{"sha": "8e3e13f3a41b311c82fa5859c5bfebbbcd82cad4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlM2UxM2YzYTQxYjMxMWM4MmZhNTg1OWM1YmZlYmJiY2Q4MmNhZDQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-02T18:47:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-02T18:47:25Z"}, "message": "Merge #8298\n\n8298: Stop using an upgradeable read lock in interning r=jonas-schievink a=jonas-schievink\n\nOnly one upgradeable read lock can be handed out at the same time, and\r\nwe never acquire a non-upgradeable read lock, so this has no benefit\r\nover just using a write lock in the first place.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "8541571011ca81bcb2536374f43873fdc049295e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8541571011ca81bcb2536374f43873fdc049295e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e3e13f3a41b311c82fa5859c5bfebbbcd82cad4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZ2a9CRBK7hj4Ov3rIwAAdHIIACYl697lkkyRWQpoOoVBDiqq\nsPpw6Qg3g208PqQDN6WqKppWjZdiLn4c3sE0Qvx/k8iasb5HTVQR+VD6AT/lvZ5q\nQW96wB6MRs/dnmHRDen63jU4leGjZ32BRYEEjIqvgpla6xp4N15DIYUdiJ+T18gK\nTN9gyMaoFzDnlOas61RMB4QXPq7HJ0RuEUHP1V9c7iJidDzUEdr6q7drggKdqWQ6\nBDlCi2yOuRuiqWDAp6cY3cY/Lj0Rume7ZX4vLfIhseezNmghRLsVEO/UPNiRgj0L\nqhOiQyHL0BKMD10tyJe3hfxz31QZJPZx+gjKuCbAuN9coTcfl/wk6MdLNPby0Gc=\n=zGdl\n-----END PGP SIGNATURE-----\n", "payload": "tree 8541571011ca81bcb2536374f43873fdc049295e\nparent 0129628a0f497834a544fa981078b43321c9020a\nparent e73d26fa62c61602e0bceb7d9cf7c661badee57b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617389245 +0000\ncommitter GitHub <noreply@github.com> 1617389245 +0000\n\nMerge #8298\n\n8298: Stop using an upgradeable read lock in interning r=jonas-schievink a=jonas-schievink\n\nOnly one upgradeable read lock can be handed out at the same time, and\r\nwe never acquire a non-upgradeable read lock, so this has no benefit\r\nover just using a write lock in the first place.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e3e13f3a41b311c82fa5859c5bfebbbcd82cad4", "html_url": "https://github.com/rust-lang/rust/commit/8e3e13f3a41b311c82fa5859c5bfebbbcd82cad4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e3e13f3a41b311c82fa5859c5bfebbbcd82cad4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0129628a0f497834a544fa981078b43321c9020a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0129628a0f497834a544fa981078b43321c9020a", "html_url": "https://github.com/rust-lang/rust/commit/0129628a0f497834a544fa981078b43321c9020a"}, {"sha": "e73d26fa62c61602e0bceb7d9cf7c661badee57b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e73d26fa62c61602e0bceb7d9cf7c661badee57b", "html_url": "https://github.com/rust-lang/rust/commit/e73d26fa62c61602e0bceb7d9cf7c661badee57b"}], "stats": {"total": 7, "additions": 2, "deletions": 5}, "files": [{"sha": "bc0307dbc9acd786731eb304e3f295699cb25495", "filename": "crates/hir_def/src/intern.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e3e13f3a41b311c82fa5859c5bfebbbcd82cad4/crates%2Fhir_def%2Fsrc%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3e13f3a41b311c82fa5859c5bfebbbcd82cad4/crates%2Fhir_def%2Fsrc%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fintern.rs?ref=8e3e13f3a41b311c82fa5859c5bfebbbcd82cad4", "patch": "@@ -25,7 +25,7 @@ impl<T: Internable> Interned<T> {\n         let storage = T::storage().get();\n         let shard_idx = storage.determine_map(&obj);\n         let shard = &storage.shards()[shard_idx];\n-        let shard = shard.upgradeable_read();\n+        let mut shard = shard.write();\n \n         // Atomically,\n         // - check if `obj` is already in the map\n@@ -43,10 +43,7 @@ impl<T: Internable> Interned<T> {\n         let arc = Arc::new(obj);\n         let arc2 = arc.clone();\n \n-        {\n-            let mut shard = shard.upgrade();\n-            shard.insert(arc2, SharedValue::new(()));\n-        }\n+        shard.insert(arc2, SharedValue::new(()));\n \n         Self { arc }\n     }"}]}