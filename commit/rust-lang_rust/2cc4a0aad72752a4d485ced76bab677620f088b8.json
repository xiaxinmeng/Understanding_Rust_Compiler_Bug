{"sha": "2cc4a0aad72752a4d485ced76bab677620f088b8", "node_id": "C_kwDOAAsO6NoAKDJjYzRhMGFhZDcyNzUyYTRkNDg1Y2VkNzZiYWI2Nzc2MjBmMDg4Yjg", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-10-18T13:34:41Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-10-19T15:59:05Z"}, "message": "rustdoc: render bounds of cross-crate GAT params", "tree": {"sha": "0eb9d893fb6a556ce825d14d1d74336bce477304", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0eb9d893fb6a556ce825d14d1d74336bce477304"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cc4a0aad72752a4d485ced76bab677620f088b8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE/neO4LLiv/pSFQJbzXXjHOLP19kFAmNQHsoACgkQzXXjHOLP\n19nB7RAAoDwpkSg9JLcY0yJsqG+5BxBwe9yJV2m0k5Iit+07xgOC78pBrgfEaag0\nRwMugVQds5oEzSe8P23l1juN2vpRsZFfSMBNwkjMuiA+fGM4Vmr9bEwLfcxvzlXk\nq8aVAZeomPK603JGkg+J5u62zCBGK3NpUTi73SzkYJDFrUUek6GFSBmLQnfB5xB5\nLuy9T4qHOcgjMliHdaalemXYieWa+a4ikSomy0ciKRhxMt7xTtEK+iE5AZpVg0q7\nJbGYAiv2rTYLm/GOeA4n43ZV8jAgkk0r81k3BKr6BJYEw3XMjRvjW0ZIufDGoKkU\nPKrWpuFI+Pc7yyPDRxgcAXpYGYrN8HE+gKHCImwMdFNB5x5H+/X64wDM/gpGkn2w\n+xd1IA+6Mbt++4gLYme341uq++mG4EX6SI4yHMmTMswHlq61RRfxtjO7I5ksro+p\n9+1NI/7D4WA78MMAhDJwqBXbVd4wU8suo+Ww/Cmxw4LWffOhVLgYt82ZAlVU93OR\nwusec8LJYwfhglYLZRMhFHJ01eCPfPSzkdEeGcOVuDIeDpZMHyWGvB/BqmWhvZZh\nO+6hFVn3lswF6PRfIbxd6Tep4aszCv03yLsXV93S4UVAkRAEtlIBVrZSSWZTDdih\nY943AduBcSztF+vGcivUkSJdFjuEtLkQ2QLwAWBD+l1JmYRqasg=\n=lSgb\n-----END PGP SIGNATURE-----", "payload": "tree 0eb9d893fb6a556ce825d14d1d74336bce477304\nparent d7dd01fe8b071602510eaac9f676acc0e3cf8e4a\nauthor Le\u00f3n Orell Valerian Liehr <liehr.exchange@gmx.net> 1666100081 +0200\ncommitter Le\u00f3n Orell Valerian Liehr <liehr.exchange@gmx.net> 1666195145 +0200\n\nrustdoc: render bounds of cross-crate GAT params\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cc4a0aad72752a4d485ced76bab677620f088b8", "html_url": "https://github.com/rust-lang/rust/commit/2cc4a0aad72752a4d485ced76bab677620f088b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cc4a0aad72752a4d485ced76bab677620f088b8/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7dd01fe8b071602510eaac9f676acc0e3cf8e4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7dd01fe8b071602510eaac9f676acc0e3cf8e4a", "html_url": "https://github.com/rust-lang/rust/commit/d7dd01fe8b071602510eaac9f676acc0e3cf8e4a"}], "stats": {"total": 63, "additions": 41, "deletions": 22}, "files": [{"sha": "13d63ffa0ee3cc18163b9b6dd7fb8a5f71ae0712", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2cc4a0aad72752a4d485ced76bab677620f088b8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc4a0aad72752a4d485ced76bab677620f088b8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2cc4a0aad72752a4d485ced76bab677620f088b8", "patch": "@@ -1201,21 +1201,19 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n             }\n \n             if let ty::TraitContainer = assoc_item.container {\n-                // FIXME(fmease): `tcx.explicit_item_bounds` does not contain the bounds of GATs,\n-                //                e.g. the bounds `Copy`, `Display` & (implicitly) `Sized` in\n-                //                `type Assoc<T: Copy> where T: Display`. This also means that we\n-                //                later incorrectly render `where T: ?Sized`.\n-                //\n-                //                The result of `tcx.explicit_predicates_of` *does* contain them but\n-                //                it does not contain the other bounds / predicates we need.\n-                //                Either merge those two interned lists somehow or refactor\n-                //                `clean_ty_generics` to call `explicit_item_bounds` by itself.\n                 let bounds = tcx.explicit_item_bounds(assoc_item.def_id);\n-                let predicates = ty::GenericPredicates { parent: None, predicates: bounds };\n-                let mut generics =\n-                    clean_ty_generics(cx, tcx.generics_of(assoc_item.def_id), predicates);\n-                // Filter out the bounds that are (likely?) directly attached to the associated type,\n-                // as opposed to being located in the where clause.\n+                let predicates = tcx.explicit_predicates_of(assoc_item.def_id).predicates;\n+                let predicates =\n+                    tcx.arena.alloc_from_iter(bounds.into_iter().chain(predicates).copied());\n+                let mut generics = clean_ty_generics(\n+                    cx,\n+                    tcx.generics_of(assoc_item.def_id),\n+                    ty::GenericPredicates { parent: None, predicates },\n+                );\n+                // Move bounds that are (likely) directly attached to the associated type\n+                // from the where clause to the associated type.\n+                // There is no guarantee that this is what the user actually wrote but we have\n+                // no way of knowing.\n                 let mut bounds = generics\n                     .where_predicates\n                     .drain_filter(|pred| match *pred {\n@@ -1273,6 +1271,24 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n                     }\n                     None => bounds.push(GenericBound::maybe_sized(cx)),\n                 }\n+                // Move bounds that are (likely) directly attached to the parameters of the\n+                // (generic) associated type from the where clause to the respective parameter.\n+                // There is no guarantee that this is what the user actually wrote but we have\n+                // no way of knowing.\n+                let mut where_predicates = Vec::new();\n+                for mut pred in generics.where_predicates {\n+                    if let WherePredicate::BoundPredicate { ty: Generic(arg), bounds, .. } = &mut pred\n+                    && let Some(GenericParamDef {\n+                        kind: GenericParamDefKind::Type { bounds: param_bounds, .. },\n+                        ..\n+                    }) = generics.params.iter_mut().find(|param| &param.name == arg)\n+                    {\n+                        param_bounds.extend(mem::take(bounds));\n+                    } else {\n+                        where_predicates.push(pred);\n+                    }\n+                }\n+                generics.where_predicates = where_predicates;\n \n                 if tcx.impl_defaultness(assoc_item.def_id).has_value() {\n                     AssocTypeItem("}, {"sha": "8934bc1ee339cb92742f33da4edeb3e2a088d148", "filename": "src/test/rustdoc/inline_cross/assoc_item_trait_bounds.out0.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2cc4a0aad72752a4d485ced76bab677620f088b8/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds.out0.html", "raw_url": "https://github.com/rust-lang/rust/raw/2cc4a0aad72752a4d485ced76bab677620f088b8/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds.out0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds.out0.html?ref=2cc4a0aad72752a4d485ced76bab677620f088b8", "patch": "@@ -0,0 +1 @@\n+<h4 class=\"code-header\">type <a href=\"#associatedtype.Out0\" class=\"associatedtype\">Out0</a>: <a class=\"trait\" href=\"../assoc_item_trait_bounds/trait.Support.html\" title=\"trait assoc_item_trait_bounds::Support\">Support</a>&lt;Item = <a class=\"primitive\" href=\"{{channel}}/std/primitive.unit.html\">()</a>&gt;</h4>\n\\ No newline at end of file"}, {"sha": "bf330670ed0fa596839ac4eafd6b6bd1725b9bca", "filename": "src/test/rustdoc/inline_cross/assoc_item_trait_bounds.out2.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2cc4a0aad72752a4d485ced76bab677620f088b8/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds.out2.html", "raw_url": "https://github.com/rust-lang/rust/raw/2cc4a0aad72752a4d485ced76bab677620f088b8/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds.out2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds.out2.html?ref=2cc4a0aad72752a4d485ced76bab677620f088b8", "patch": "@@ -0,0 +1 @@\n+<h4 class=\"code-header\">type <a href=\"#associatedtype.Out2\" class=\"associatedtype\">Out2</a>&lt;T&gt;: <a class=\"trait\" href=\"../assoc_item_trait_bounds/trait.Support.html\" title=\"trait assoc_item_trait_bounds::Support\">Support</a>&lt;Item = T&gt;</h4>\n\\ No newline at end of file"}, {"sha": "69d84e1b2c14e88ab373bb4989caa78b30f5d209", "filename": "src/test/rustdoc/inline_cross/assoc_item_trait_bounds.out9.html", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2cc4a0aad72752a4d485ced76bab677620f088b8/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds.out9.html", "raw_url": "https://github.com/rust-lang/rust/raw/2cc4a0aad72752a4d485ced76bab677620f088b8/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds.out9.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds.out9.html?ref=2cc4a0aad72752a4d485ced76bab677620f088b8", "previous_filename": "src/test/rustdoc/inline_cross/assoc_item_trait_bounds_with_bindings.out9.html"}, {"sha": "5f4712aab5b19efd916b9d240885f7144346dda1", "filename": "src/test/rustdoc/inline_cross/assoc_item_trait_bounds.rs", "status": "renamed", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2cc4a0aad72752a4d485ced76bab677620f088b8/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc4a0aad72752a4d485ced76bab677620f088b8/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds.rs?ref=2cc4a0aad72752a4d485ced76bab677620f088b8", "patch": "@@ -1,13 +1,10 @@\n // Regression test for issues #77763, #84579 and #102142.\n #![crate_name = \"main\"]\n \n-// aux-build:assoc_item_trait_bounds_with_bindings.rs\n+// aux-build:assoc_item_trait_bounds.rs\n // build-aux-docs\n // ignore-cross-compile\n-extern crate assoc_item_trait_bounds_with_bindings as aux;\n-\n-// FIXME(fmease): Don't render an incorrect `T: ?Sized` where-clause for parameters\n-//                of GATs like `Main::Out{2,4}`. Add a snapshot test once it's fixed.\n+extern crate assoc_item_trait_bounds as aux;\n \n // @has main/trait.Main.html\n // @has - '//*[@id=\"associatedtype.Out0\"]' 'type Out0: Support<Item = ()>'\n@@ -24,11 +21,15 @@ extern crate assoc_item_trait_bounds_with_bindings as aux;\n // @has - '//*[@id=\"associatedtype.Out11\"]' \"type Out11: for<'r, 's> Helper<A<'s> = &'s (), B<'r> = ()>\"\n // @has - '//*[@id=\"associatedtype.Out12\"]' \"type Out12: for<'w> Helper<B<'w> = Cow<'w, str>, A<'w> = bool>\"\n // @has - '//*[@id=\"associatedtype.Out13\"]' \"type Out13: for<'fst, 'snd> Aid<'snd, Result<'fst> = &'fst mut str>\"\n+// @has - '//*[@id=\"associatedtype.Out14\"]' \"type Out14<P: Copy + Eq, Q: ?Sized>\"\n //\n-// Snapshots: Check that we do not render any where-clauses for those associated types since all of\n-// the trait bounds contained within were moved to the bounds of the respective item.\n+// Snapshots:\n+// Check that we don't render any where-clauses for the following associated types since\n+// all corresponding projection equality predicates should have already been re-sugared\n+// to associated type bindings:\n //\n // @snapshot out0 - '//*[@id=\"associatedtype.Out0\"]/*[@class=\"code-header\"]'\n+// @snapshot out2 - '//*[@id=\"associatedtype.Out2\"]/*[@class=\"code-header\"]'\n // @snapshot out9 - '//*[@id=\"associatedtype.Out9\"]/*[@class=\"code-header\"]'\n //\n // @has - '//*[@id=\"tymethod.make\"]' \\", "previous_filename": "src/test/rustdoc/inline_cross/assoc_item_trait_bounds_with_bindings.rs"}, {"sha": "927a1a42a1f784bf77870265537784d3c59284c2", "filename": "src/test/rustdoc/inline_cross/assoc_item_trait_bounds_with_bindings.out0.html", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7dd01fe8b071602510eaac9f676acc0e3cf8e4a/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.out0.html", "raw_url": "https://github.com/rust-lang/rust/raw/d7dd01fe8b071602510eaac9f676acc0e3cf8e4a/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.out0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.out0.html?ref=d7dd01fe8b071602510eaac9f676acc0e3cf8e4a", "patch": "@@ -1 +0,0 @@\n-<h4 class=\"code-header\">type <a href=\"#associatedtype.Out0\" class=\"associatedtype\">Out0</a>: <a class=\"trait\" href=\"../assoc_item_trait_bounds_with_bindings/trait.Support.html\" title=\"trait assoc_item_trait_bounds_with_bindings::Support\">Support</a>&lt;Item = <a class=\"primitive\" href=\"{{channel}}/std/primitive.unit.html\">()</a>&gt;</h4>\n\\ No newline at end of file"}, {"sha": "d326e61daea2608c0835d8474e4d59c8bdec5a7c", "filename": "src/test/rustdoc/inline_cross/auxiliary/assoc_item_trait_bounds.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2cc4a0aad72752a4d485ced76bab677620f088b8/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc_item_trait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc4a0aad72752a4d485ced76bab677620f088b8/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc_item_trait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc_item_trait_bounds.rs?ref=2cc4a0aad72752a4d485ced76bab677620f088b8", "patch": "@@ -15,6 +15,7 @@ pub trait Main {\n     type Out11: for<'r, 's> Helper<A<'s> = &'s (), B<'r> = ()>;\n     type Out12: for<'w> Helper<B<'w> = std::borrow::Cow<'w, str>, A<'w> = bool>;\n     type Out13: for<'fst, 'snd> Aid<'snd, Result<'fst> = &'fst mut str>;\n+    type Out14<P: Copy + Eq, Q: ?Sized>;\n \n     fn make<F>(_: F, _: impl FnMut(&str) -> bool)\n     where", "previous_filename": "src/test/rustdoc/inline_cross/auxiliary/assoc_item_trait_bounds_with_bindings.rs"}]}