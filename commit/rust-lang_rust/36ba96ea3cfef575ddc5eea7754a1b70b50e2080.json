{"sha": "36ba96ea3cfef575ddc5eea7754a1b70b50e2080", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YmE5NmVhM2NmZWY1NzVkZGM1ZWVhNzc1NGExYjcwYjUwZTIwODA=", "commit": {"author": {"name": "nwin", "email": "nwin@users.noreply.github.com", "date": "2015-02-20T12:09:29Z"}, "committer": {"name": "nwin", "email": "nwin@users.noreply.github.com", "date": "2015-02-26T09:18:13Z"}, "message": "Implement `Debug` for `RwLock`, `arc::Weak` and `Mutex`", "tree": {"sha": "afab6aecaf1a531545cdeab04c88ae52d717c9d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afab6aecaf1a531545cdeab04c88ae52d717c9d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36ba96ea3cfef575ddc5eea7754a1b70b50e2080", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36ba96ea3cfef575ddc5eea7754a1b70b50e2080", "html_url": "https://github.com/rust-lang/rust/commit/36ba96ea3cfef575ddc5eea7754a1b70b50e2080", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36ba96ea3cfef575ddc5eea7754a1b70b50e2080/comments", "author": {"login": "nwin", "id": 949560, "node_id": "MDQ6VXNlcjk0OTU2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/949560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nwin", "html_url": "https://github.com/nwin", "followers_url": "https://api.github.com/users/nwin/followers", "following_url": "https://api.github.com/users/nwin/following{/other_user}", "gists_url": "https://api.github.com/users/nwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/nwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nwin/subscriptions", "organizations_url": "https://api.github.com/users/nwin/orgs", "repos_url": "https://api.github.com/users/nwin/repos", "events_url": "https://api.github.com/users/nwin/events{/privacy}", "received_events_url": "https://api.github.com/users/nwin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nwin", "id": 949560, "node_id": "MDQ6VXNlcjk0OTU2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/949560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nwin", "html_url": "https://github.com/nwin", "followers_url": "https://api.github.com/users/nwin/followers", "following_url": "https://api.github.com/users/nwin/following{/other_user}", "gists_url": "https://api.github.com/users/nwin/gists{/gist_id}", "starred_url": "https://api.github.com/users/nwin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nwin/subscriptions", "organizations_url": "https://api.github.com/users/nwin/orgs", "repos_url": "https://api.github.com/users/nwin/repos", "events_url": "https://api.github.com/users/nwin/events{/privacy}", "received_events_url": "https://api.github.com/users/nwin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "522d09dfecbeca1595f25ac58c6d0178bbd21d7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/522d09dfecbeca1595f25ac58c6d0178bbd21d7d", "html_url": "https://github.com/rust-lang/rust/commit/522d09dfecbeca1595f25ac58c6d0178bbd21d7d"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "8cd27125646c82739d8cf1b2fe5518dcf74c52bc", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36ba96ea3cfef575ddc5eea7754a1b70b50e2080/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ba96ea3cfef575ddc5eea7754a1b70b50e2080/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=36ba96ea3cfef575ddc5eea7754a1b70b50e2080", "patch": "@@ -139,6 +139,13 @@ pub struct Weak<T> {\n unsafe impl<T: Sync + Send> Send for Weak<T> { }\n unsafe impl<T: Sync + Send> Sync for Weak<T> { }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: fmt::Debug> fmt::Debug for Weak<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"(Weak)\")\n+    }\n+}\n+\n struct ArcInner<T> {\n     strong: atomic::AtomicUsize,\n     weak: atomic::AtomicUsize,"}, {"sha": "e875bab5d911971d976aa88b7e6831a7f830c2fc", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/36ba96ea3cfef575ddc5eea7754a1b70b50e2080/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ba96ea3cfef575ddc5eea7754a1b70b50e2080/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=36ba96ea3cfef575ddc5eea7754a1b70b50e2080", "patch": "@@ -15,6 +15,7 @@ use marker;\n use ops::{Deref, DerefMut};\n use sync::poison::{self, TryLockError, TryLockResult, LockResult};\n use sys_common::mutex as sys;\n+use fmt;\n \n /// A mutual exclusion primitive useful for protecting shared data\n ///\n@@ -252,6 +253,19 @@ impl<T: Send + 'static> Drop for Mutex<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: fmt::Debug + Send + 'static> fmt::Debug for Mutex<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match self.try_lock() {\n+            Ok(guard) => write!(f, \"Mutex {{ data: {:?} }}\", *guard),\n+            Err(TryLockError::Poisoned(err)) => {\n+                write!(f, \"Mutex {{ data: Poisoned({:?}) }}\", **err.get_ref())\n+            },\n+            Err(TryLockError::WouldBlock) => write!(f, \"Mutex {{ <locked> }}\")\n+        }\n+    }\n+}\n+\n struct Dummy(UnsafeCell<()>);\n unsafe impl Sync for Dummy {}\n static DUMMY: Dummy = Dummy(UnsafeCell { value: () });"}, {"sha": "672ea1b1f6238294215db4abe5787d2c12a770f9", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/36ba96ea3cfef575ddc5eea7754a1b70b50e2080/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ba96ea3cfef575ddc5eea7754a1b70b50e2080/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=36ba96ea3cfef575ddc5eea7754a1b70b50e2080", "patch": "@@ -15,6 +15,7 @@ use marker;\n use ops::{Deref, DerefMut};\n use sync::poison::{self, LockResult, TryLockError, TryLockResult};\n use sys_common::rwlock as sys;\n+use fmt;\n \n /// A reader-writer lock\n ///\n@@ -258,6 +259,19 @@ impl<T> Drop for RwLock<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: fmt::Debug + Send + Sync> fmt::Debug for RwLock<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match self.try_read() {\n+            Ok(guard) => write!(f, \"RwLock {{ data: {:?} }}\", *guard),\n+            Err(TryLockError::Poisoned(err)) => {\n+                write!(f, \"RwLock {{ data: Poisoned({:?}) }}\", **err.get_ref())\n+            },\n+            Err(TryLockError::WouldBlock) => write!(f, \"RwLock {{ <locked> }}\")\n+        }\n+    }\n+}\n+\n struct Dummy(UnsafeCell<()>);\n unsafe impl Sync for Dummy {}\n static DUMMY: Dummy = Dummy(UnsafeCell { value: () });"}]}