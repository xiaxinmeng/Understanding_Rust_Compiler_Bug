{"sha": "d0566d633e042e3e2a3695b438005e4646bf795a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNTY2ZDYzM2UwNDJlM2UyYTM2OTViNDM4MDA1ZTQ2NDZiZjc5NWE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-22T22:33:38Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-26T00:37:27Z"}, "message": "Fix fallout in tests", "tree": {"sha": "af53d88bf0ad9d675cfbbcfb33aa6c69602dd73b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af53d88bf0ad9d675cfbbcfb33aa6c69602dd73b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0566d633e042e3e2a3695b438005e4646bf795a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0566d633e042e3e2a3695b438005e4646bf795a", "html_url": "https://github.com/rust-lang/rust/commit/d0566d633e042e3e2a3695b438005e4646bf795a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0566d633e042e3e2a3695b438005e4646bf795a/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b20d567c2b9b279fff049f087b725b6c75126156", "url": "https://api.github.com/repos/rust-lang/rust/commits/b20d567c2b9b279fff049f087b725b6c75126156", "html_url": "https://github.com/rust-lang/rust/commit/b20d567c2b9b279fff049f087b725b6c75126156"}], "stats": {"total": 114, "additions": 46, "deletions": 68}, "files": [{"sha": "4ba0ccdba9bf744ceb064b22c2240bdabf7efeac", "filename": "src/test/auxiliary/ambig_impl_2_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fauxiliary%2Fambig_impl_2_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fauxiliary%2Fambig_impl_2_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fambig_impl_2_lib.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait me {\n+pub trait me {\n     fn me(&self) -> usize;\n }\n impl me for usize { fn me(&self) -> usize { *self } }"}, {"sha": "5fea97da03ee38f5cdf2107610c6d979d8f31338", "filename": "src/test/auxiliary/struct_field_privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fauxiliary%2Fstruct_field_privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fauxiliary%2Fstruct_field_privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstruct_field_privacy.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-struct A {\n+pub struct A {\n     a: isize,\n     pub b: isize,\n }"}, {"sha": "930f769771d58275ad0be5a47fd3ad3d5ebb1fe5", "filename": "src/test/compile-fail/blind-item-block-middle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fblind-item-block-middle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fblind-item-block-middle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblind-item-block-middle.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-mod foo { struct bar; }\n+mod foo { pub struct bar; }\n \n fn main() {\n     let bar = 5;"}, {"sha": "bc395af9622c5e6bc74e79896f00310fddcb8c5b", "filename": "src/test/compile-fail/const-pattern-irrefutable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fconst-pattern-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fconst-pattern-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-pattern-irrefutable.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n mod foo {\n-    const b: u8 = 2; //~ NOTE constant defined here\n-    const d: u8 = 2; //~ NOTE constant defined here\n+    pub const b: u8 = 2; //~ NOTE constant defined here\n+    pub const d: u8 = 2; //~ NOTE constant defined here\n }\n \n use foo::b as c; //~ NOTE constant imported here"}, {"sha": "7b915647884f2ac169a6e45f43b1b1f0083c8c2d", "filename": "src/test/compile-fail/double-import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fdouble-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fdouble-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdouble-import.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -14,11 +14,11 @@\n // when reporting the error.\n \n mod sub1 {\n-    fn foo() {} // implementation 1\n+    pub fn foo() {} // implementation 1\n }\n \n mod sub2 {\n-    fn foo() {} // implementation 2\n+    pub fn foo() {} // implementation 2\n }\n \n use sub1::foo; //~ NOTE previous import of `foo` here"}, {"sha": "b6e8cf71ddd6c0550849e04ed982fb711102f06d", "filename": "src/test/compile-fail/export-tag-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fexport-tag-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fexport-tag-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport-tag-variant.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -14,4 +14,4 @@ mod foo {\n     enum y { y1, }\n }\n \n-fn main() { let z = foo::y::y1; } //~ ERROR: is inaccessible\n+fn main() { let z = foo::y::y1; } //~ ERROR: enum `y` is private"}, {"sha": "7dccd7811066e3843393d6354f16dc8adc5620f0", "filename": "src/test/compile-fail/issue-11680.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fissue-11680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fissue-11680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11680.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -14,8 +14,8 @@ extern crate issue_11680 as other;\n \n fn main() {\n     let _b = other::Foo::Bar(1);\n-    //~^ ERROR: variant `Bar` is private\n+    //~^ ERROR: enum `Foo` is private\n \n     let _b = other::test::Foo::Bar(1);\n-    //~^ ERROR: variant `Bar` is private\n+    //~^ ERROR: enum `Foo` is private\n }"}, {"sha": "afb2e867f45c6057e60336534eefb316e4148cc7", "filename": "src/test/compile-fail/issue-13407.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fissue-13407.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fissue-13407.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13407.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -16,4 +16,5 @@ fn main() {\n     A::C = 1;\n     //~^ ERROR: invalid left-hand side expression\n     //~| ERROR: mismatched types\n+    //~| ERROR: struct `C` is private\n }"}, {"sha": "3b690e08f6143042e6cc05cfeca424a036f4330c", "filename": "src/test/compile-fail/issue-13641.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fissue-13641.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fissue-13641.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13641.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -17,9 +17,7 @@ mod a {\n \n fn main() {\n     a::Foo::new();\n-    //~^ ERROR: method `new` is inaccessible\n-    //~^^ NOTE: struct `Foo` is private\n+    //~^ ERROR: struct `Foo` is private\n     a::Bar::new();\n-    //~^ ERROR: method `new` is inaccessible\n-    //~^^ NOTE: enum `Bar` is private\n+    //~^ ERROR: enum `Bar` is private\n }"}, {"sha": "205d3251cc2df939521aeb858f4b28334c3fe01d", "filename": "src/test/compile-fail/issue-16538.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n mod Y {\n-    type X = usize;\n+    pub type X = usize;\n     extern {\n-        static x: *const usize;\n+        pub static x: *const usize;\n     }\n-    fn foo(value: *const X) -> *const X {\n+    pub fn foo(value: *const X) -> *const X {\n         value\n     }\n }"}, {"sha": "8c2c27694d903b97af06e9c8a191a0ed0c9bf8b4", "filename": "src/test/compile-fail/issue-21221-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fissue-21221-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fissue-21221-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21221-2.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -13,7 +13,7 @@ pub mod foo {\n         // note: trait T is not public, but being in the current\n         // crate, it's fine to show it, since the programmer can\n         // decide to make it public based on the suggestion ...\n-        trait T {}\n+        pub trait T {}\n     }\n     // imports should be ignored:\n     use self::bar::T;"}, {"sha": "ec77e6ebd7cf38af1b9861b2ca53cc074671d6c9", "filename": "src/test/compile-fail/issue-25396.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fissue-25396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fissue-25396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25396.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -32,6 +32,6 @@ mod foo {\n mod bar {\n     pub mod baz {}\n     pub type Quux = i32;\n-    struct blah { x: i8 }\n+    pub struct blah { x: i8 }\n     pub const WOMP: i8 = -5;\n }"}, {"sha": "f7453c45be645d7bd0d3bcbb97ab1eba65f35cef", "filename": "src/test/compile-fail/issue-29161.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fissue-29161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fissue-29161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-29161.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -13,7 +13,6 @@ mod a {\n \n     impl Default for A {\n         pub fn default() -> A {\n-            //~^ ERROR E0449\n             A;\n         }\n     }\n@@ -22,5 +21,5 @@ mod a {\n \n fn main() {\n     a::A::default();\n-    //~^ ERROR method `default` is inaccessible\n+    //~^ ERROR struct `A` is private\n  }"}, {"sha": "bf296220d2a2b601d2cb38bce3f6e5dba8621526", "filename": "src/test/compile-fail/privacy-ns2.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -25,14 +25,13 @@ pub mod foo1 {\n }\n \n fn test_single1() {\n-    // In an ideal world, these would be private instead of inaccessible.\n-    use foo1::Bar;  //~ ERROR `Bar` is inaccessible\n+    use foo1::Bar;  //~ ERROR function `Bar` is private\n \n     Bar();\n }\n \n fn test_list1() {\n-    use foo1::{Bar,Baz};  //~ ERROR `Bar` is inaccessible\n+    use foo1::{Bar,Baz};  //~ ERROR `Bar` is private\n \n     Bar();\n }\n@@ -47,7 +46,7 @@ pub mod foo2 {\n }\n \n fn test_single2() {\n-    use foo2::Bar;  //~ ERROR `Bar` is private\n+    use foo2::Bar;  //~ ERROR trait `Bar` is private\n \n     let _x : Box<Bar>;\n }"}, {"sha": "28c1a003e39f0b731f43a1e97fae218c51cbac46", "filename": "src/test/compile-fail/privacy-ufcs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fprivacy-ufcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fprivacy-ufcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-ufcs.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -19,6 +19,5 @@ mod foo {\n }\n \n fn main() {\n-    <i32 as ::foo::Bar>::baz(); //~ERROR method `baz` is inaccessible\n-                                //~^NOTE: trait `Bar` is private\n+    <i32 as ::foo::Bar>::baz(); //~ERROR trait `Bar` is private\n }"}, {"sha": "9b11eafaa63c36cee1dd2582c9ee0e2b85eed632", "filename": "src/test/compile-fail/privacy1.rs", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -72,7 +72,6 @@ mod bar {\n         self::baz::A::foo();\n         self::baz::A::bar(); //~ ERROR: method `bar` is private\n         self::baz::A.foo2();\n-        self::baz::A.bar2(); //~ ERROR: method `bar2` is private\n \n         // this used to cause an ICE in privacy traversal.\n         super::gpub();\n@@ -91,27 +90,21 @@ fn lol() {\n     bar::A::foo();\n     bar::A::bar(); //~ ERROR: method `bar` is private\n     bar::A.foo2();\n-    bar::A.bar2(); //~ ERROR: method `bar2` is private\n }\n \n mod foo {\n     fn test() {\n         ::bar::A::foo();\n         ::bar::A::bar();        //~ ERROR: method `bar` is private\n         ::bar::A.foo2();\n-        ::bar::A.bar2();        //~ ERROR: method `bar2` is private\n-        ::bar::baz::A::foo();   //~ ERROR: method `foo` is inaccessible\n-                                //~^ NOTE: module `baz` is private\n-        ::bar::baz::A::bar();   //~ ERROR: method `bar` is private\n-        ::bar::baz::A.foo2();   //~ ERROR: struct `A` is inaccessible\n-                                //~^ NOTE: module `baz` is private\n-        ::bar::baz::A.bar2();   //~ ERROR: struct `A` is inaccessible\n-                                //~^ ERROR: method `bar2` is private\n-                                //~^^ NOTE: module `baz` is private\n+        ::bar::baz::A::foo();   //~ ERROR: module `baz` is private\n+        ::bar::baz::A::bar();   //~ ERROR: module `baz` is private\n+                                //~^ ERROR: method `bar` is private\n+        ::bar::baz::A.foo2();   //~ ERROR: module `baz` is private\n+        ::bar::baz::A.bar2();   //~ ERROR: module `baz` is private\n \n         let _: isize =\n-        ::bar::B::foo();        //~ ERROR: method `foo` is inaccessible\n-                                //~^ NOTE: trait `B` is private\n+        ::bar::B::foo();        //~ ERROR: trait `B` is private\n         ::lol();\n \n         ::bar::Enum::Pub;\n@@ -126,19 +119,14 @@ mod foo {\n \n         ::bar::gpub();\n \n-        ::bar::baz::foo(); //~ ERROR: function `foo` is inaccessible\n-                           //~^ NOTE: module `baz` is private\n-        ::bar::baz::bar(); //~ ERROR: function `bar` is inaccessible\n-                           //~^ NOTE: module `baz` is private\n+        ::bar::baz::foo(); //~ ERROR: module `baz` is private\n+        ::bar::baz::bar(); //~ ERROR: module `baz` is private\n     }\n \n     fn test2() {\n         use bar::baz::{foo, bar};\n-        //~^ ERROR: function `foo` is inaccessible\n-        //~| NOTE: module `baz` is private\n-        //~| ERROR: function `bar` is inaccessible\n-        //~| NOTE: module `baz` is private\n-\n+        //~^ ERROR: module `baz` is private\n+        //~| ERROR: module `baz` is private\n \n         foo();\n         bar();\n@@ -169,8 +157,7 @@ pub mod mytest {\n     // Even though the inner `A` struct is a publicly exported item (usable from\n     // external crates through `foo::foo`, it should not be accessible through\n     // its definition path (which has the private `i` module).\n-    use self::foo::i::A; //~ ERROR: struct `A` is inaccessible\n-                         //~^ NOTE: module `i` is private\n+    use self::foo::i::A; //~ ERROR: module `i` is private\n \n     pub mod foo {\n         pub use self::i::A as foo;"}, {"sha": "abf702204d16baef221f412b22dd0e3ecc0b8004", "filename": "src/test/compile-fail/privacy2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -16,7 +16,7 @@\n mod bar {\n     pub use self::glob::*;\n \n-    mod glob {\n+    pub mod glob {\n         use foo;\n     }\n }"}, {"sha": "d9f767442845cd7fc95ee8c2d65531d27b008e8a", "filename": "src/test/compile-fail/privacy4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -28,7 +28,7 @@ mod bar {\n pub fn foo() {}\n \n fn test2() {\n-    use bar::glob::gpriv; //~ ERROR: function `gpriv` is private\n+    use bar::glob::gpriv; //~ ERROR: module `glob` is private\n     gpriv();\n }\n "}, {"sha": "1dd8ec0136ef5bf34d432de7b84055911878c886", "filename": "src/test/compile-fail/struct-field-privacy.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -17,7 +17,7 @@ struct A {\n }\n \n mod inner {\n-    struct A {\n+    pub struct A {\n         a: isize,\n         pub b: isize,\n     }\n@@ -28,9 +28,6 @@ mod inner {\n }\n \n fn test(a: A, b: inner::A, c: inner::B, d: xc::A, e: xc::B) {\n-    //~^ ERROR: struct `A` is private\n-    //~^^ ERROR: struct `A` is private\n-\n     a.a;\n     b.a; //~ ERROR: field `a` of struct `inner::A` is private\n     b.b;"}, {"sha": "8507acd26cebec14456e6ff1ca1b81e4a115e961", "filename": "src/test/compile-fail/struct-variant-privacy-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy-xc.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -13,7 +13,7 @@ extern crate struct_variant_privacy;\n \n fn f(b: struct_variant_privacy::Bar) { //~ ERROR enum `Bar` is private\n     match b {\n-        struct_variant_privacy::Bar::Baz { a: _a } => {} //~ ERROR variant `Baz` is private\n+        struct_variant_privacy::Bar::Baz { a: _a } => {} //~ ERROR enum `Bar` is private\n     }\n }\n "}, {"sha": "7de4ca62555a24ad6e66b702ac27789fc193ebef", "filename": "src/test/compile-fail/struct-variant-privacy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -15,8 +15,7 @@ mod foo {\n \n fn f(b: foo::Bar) { //~ ERROR enum `Bar` is private\n     match b {\n-        foo::Bar::Baz { a: _a } => {} //~ ERROR variant `Baz` is inaccessible\n-        // ^~ ERROR enum `Bar` is private\n+        foo::Bar::Baz { a: _a } => {} //~ ERROR enum `Bar` is private\n     }\n }\n "}, {"sha": "65801a5704b97fe20dbef9bc058025766e9dfad0", "filename": "src/test/compile-fail/task-rng-isnt-sendable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -10,7 +10,7 @@\n \n // ensure that the ThreadRng isn't/doesn't become accidentally sendable.\n \n-use std::rand;\n+use std::rand; //~ ERROR: module `rand` is private\n \n fn test_send<S: Send>() {}\n "}, {"sha": "cce500800caca0f842c8354f923482fa9a87d076", "filename": "src/test/compile-fail/use-mod-3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fuse-mod-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fuse-mod-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-mod-3.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -12,8 +12,7 @@ use foo::bar::{\n     self //~ ERROR module `bar` is private\n };\n use foo::bar::{\n-    Bar //~ ERROR type `Bar` is inaccessible\n-    //~^ NOTE module `bar` is private\n+    Bar //~ ERROR module `bar` is private\n };\n \n mod foo {"}, {"sha": "3bd4c780625a42db1cb9096385b5d36b4cf04121", "filename": "src/test/compile-fail/xcrate-private-by-default.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fxcrate-private-by-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0566d633e042e3e2a3695b438005e4646bf795a/src%2Ftest%2Fcompile-fail%2Fxcrate-private-by-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fxcrate-private-by-default.rs?ref=d0566d633e042e3e2a3695b438005e4646bf795a", "patch": "@@ -43,13 +43,13 @@ fn main() {\n \n     // public items in a private mod should be inaccessible\n     static_priv_by_default::foo::a;\n-    //~^ ERROR: static `a` is private\n+    //~^ ERROR: module `foo` is private\n     static_priv_by_default::foo::b;\n-    //~^ ERROR: function `b` is private\n+    //~^ ERROR: module `foo` is private\n     static_priv_by_default::foo::c;\n-    //~^ ERROR: struct `c` is private\n+    //~^ ERROR: module `foo` is private\n     foo::<static_priv_by_default::foo::d>();\n-    //~^ ERROR: enum `d` is private\n+    //~^ ERROR: module `foo` is private\n     foo::<static_priv_by_default::foo::e>();\n-    //~^ ERROR: type `e` is private\n+    //~^ ERROR: module `foo` is private\n }"}]}