{"sha": "838042aa4e9f7b313cd79420d7613dc5af5343e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzODA0MmFhNGU5ZjdiMzEzY2Q3OTQyMGQ3NjEzZGM1YWY1MzQzZTU=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-08-01T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-08-04T13:51:30Z"}, "message": "Prepare struct_gep for opaque pointers\n\nImlement struct_gep using LLVMBuildStructGEP2 which takes an explicit\ntype argument instead of deriving it from a pointer type.", "tree": {"sha": "ff64a23593b07c0d2a675b5b29e08a21acdd418d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff64a23593b07c0d2a675b5b29e08a21acdd418d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/838042aa4e9f7b313cd79420d7613dc5af5343e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/838042aa4e9f7b313cd79420d7613dc5af5343e5", "html_url": "https://github.com/rust-lang/rust/commit/838042aa4e9f7b313cd79420d7613dc5af5343e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/838042aa4e9f7b313cd79420d7613dc5af5343e5/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87d713ff2b000e3827ebb8be974b280188fac783", "url": "https://api.github.com/repos/rust-lang/rust/commits/87d713ff2b000e3827ebb8be974b280188fac783", "html_url": "https://github.com/rust-lang/rust/commit/87d713ff2b000e3827ebb8be974b280188fac783"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "0e2c4ddc2a39118695855df66c34faa65a6c005f", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/838042aa4e9f7b313cd79420d7613dc5af5343e5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838042aa4e9f7b313cd79420d7613dc5af5343e5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=838042aa4e9f7b313cd79420d7613dc5af5343e5", "patch": "@@ -497,9 +497,10 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n             OperandValue::Immediate(self.to_immediate(llval, place.layout))\n         } else if let abi::Abi::ScalarPair(ref a, ref b) = place.layout.abi {\n             let b_offset = a.value.size(self).align_to(b.value.align(self).abi);\n+            let pair_ty = place.layout.llvm_type(self);\n \n             let mut load = |i, scalar: &abi::Scalar, align| {\n-                let llptr = self.struct_gep(place.llval, i as u64);\n+                let llptr = self.struct_gep(pair_ty, place.llval, i as u64);\n                 let llty = place.layout.scalar_pair_element_llvm_type(self, i, false);\n                 let load = self.load(llty, llptr, align);\n                 scalar_load_metadata(self, load, scalar);\n@@ -663,9 +664,9 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn struct_gep(&mut self, ptr: &'ll Value, idx: u64) -> &'ll Value {\n+    fn struct_gep(&mut self, ty: &'ll Type, ptr: &'ll Value, idx: u64) -> &'ll Value {\n         assert_eq!(idx as c_uint as u64, idx);\n-        unsafe { llvm::LLVMBuildStructGEP(self.llbuilder, ptr, idx as c_uint, UNNAMED) }\n+        unsafe { llvm::LLVMBuildStructGEP2(self.llbuilder, ty, ptr, idx as c_uint, UNNAMED) }\n     }\n \n     /* Casts */"}, {"sha": "c0c9a2183d31d5b3c125ede0899de3f6819fbf64", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/838042aa4e9f7b313cd79420d7613dc5af5343e5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838042aa4e9f7b313cd79420d7613dc5af5343e5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=838042aa4e9f7b313cd79420d7613dc5af5343e5", "patch": "@@ -1408,8 +1408,9 @@ extern \"C\" {\n         NumIndices: c_uint,\n         Name: *const c_char,\n     ) -> &'a Value;\n-    pub fn LLVMBuildStructGEP(\n+    pub fn LLVMBuildStructGEP2(\n         B: &Builder<'a>,\n+        Ty: &'a Type,\n         Pointer: &'a Value,\n         Idx: c_uint,\n         Name: *const c_char,"}, {"sha": "c9ce618b5768399ee5fdf16900abae1567f1594e", "filename": "compiler/rustc_codegen_llvm/src/va_arg.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/838042aa4e9f7b313cd79420d7613dc5af5343e5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838042aa4e9f7b313cd79420d7613dc5af5343e5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs?ref=838042aa4e9f7b313cd79420d7613dc5af5343e5", "patch": "@@ -98,6 +98,7 @@ fn emit_aapcs_va_arg(\n     // Implementation of the AAPCS64 calling convention for va_args see\n     // https://github.com/ARM-software/abi-aa/blob/master/aapcs64/aapcs64.rst\n     let va_list_addr = list.immediate();\n+    let va_list_ty = list.deref(bx.cx).layout.llvm_type(bx);\n     let layout = bx.cx.layout_of(target_ty);\n \n     let mut maybe_reg = bx.build_sibling_block(\"va_arg.maybe_reg\");\n@@ -109,11 +110,11 @@ fn emit_aapcs_va_arg(\n \n     let gr_type = target_ty.is_any_ptr() || target_ty.is_integral();\n     let (reg_off, reg_top_index, slot_size) = if gr_type {\n-        let gr_offs = bx.struct_gep(va_list_addr, 7);\n+        let gr_offs = bx.struct_gep(va_list_ty, va_list_addr, 7);\n         let nreg = (layout.size.bytes() + 7) / 8;\n         (gr_offs, 3, nreg * 8)\n     } else {\n-        let vr_off = bx.struct_gep(va_list_addr, 9);\n+        let vr_off = bx.struct_gep(va_list_ty, va_list_addr, 9);\n         let nreg = (layout.size.bytes() + 15) / 16;\n         (vr_off, 5, nreg * 16)\n     };\n@@ -141,7 +142,7 @@ fn emit_aapcs_va_arg(\n     maybe_reg.cond_br(use_stack, &on_stack.llbb(), &in_reg.llbb());\n \n     let top_type = bx.type_i8p();\n-    let top = in_reg.struct_gep(va_list_addr, reg_top_index);\n+    let top = in_reg.struct_gep(va_list_ty, va_list_addr, reg_top_index);\n     let top = in_reg.load(top_type, top, bx.tcx().data_layout.pointer_align.abi);\n \n     // reg_value = *(@top + reg_off_v);"}, {"sha": "cfb2befdf913752ffe89b4acd0faf8538badf4e0", "filename": "compiler/rustc_codegen_ssa/src/mir/operand.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/838042aa4e9f7b313cd79420d7613dc5af5343e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838042aa4e9f7b313cd79420d7613dc5af5343e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Foperand.rs?ref=838042aa4e9f7b313cd79420d7613dc5af5343e5", "patch": "@@ -311,14 +311,15 @@ impl<'a, 'tcx, V: CodegenObject> OperandValue<V> {\n                     Abi::ScalarPair(ref a, ref b) => (a, b),\n                     _ => bug!(\"store_with_flags: invalid ScalarPair layout: {:#?}\", dest.layout),\n                 };\n+                let ty = bx.backend_type(dest.layout);\n                 let b_offset = a_scalar.value.size(bx).align_to(b_scalar.value.align(bx).abi);\n \n-                let llptr = bx.struct_gep(dest.llval, 0);\n+                let llptr = bx.struct_gep(ty, dest.llval, 0);\n                 let val = bx.from_immediate(a);\n                 let align = dest.align;\n                 bx.store_with_flags(val, llptr, align, flags);\n \n-                let llptr = bx.struct_gep(dest.llval, 1);\n+                let llptr = bx.struct_gep(ty, dest.llval, 1);\n                 let val = bx.from_immediate(b);\n                 let align = dest.align.restrict_for_offset(b_offset);\n                 bx.store_with_flags(val, llptr, align, flags);"}, {"sha": "b8940245400a5b9cf2f0fce49ce369232095fc91", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/838042aa4e9f7b313cd79420d7613dc5af5343e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838042aa4e9f7b313cd79420d7613dc5af5343e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=838042aa4e9f7b313cd79420d7613dc5af5343e5", "patch": "@@ -103,7 +103,8 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n                     if offset == a.value.size(bx.cx()).align_to(b.value.align(bx.cx()).abi) =>\n                 {\n                     // Offset matches second field.\n-                    bx.struct_gep(self.llval, 1)\n+                    let ty = bx.backend_type(self.layout);\n+                    bx.struct_gep(ty, self.llval, 1)\n                 }\n                 Abi::Scalar(_) | Abi::ScalarPair(..) | Abi::Vector { .. } if field.is_zst() => {\n                     // ZST fields are not included in Scalar, ScalarPair, and Vector layouts, so manually offset the pointer.\n@@ -119,7 +120,10 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n                         self.layout\n                     );\n                 }\n-                _ => bx.struct_gep(self.llval, bx.cx().backend_field_index(self.layout, ix)),\n+                _ => {\n+                    let ty = bx.backend_type(self.layout);\n+                    bx.struct_gep(ty, self.llval, bx.cx().backend_field_index(self.layout, ix))\n+                }\n             };\n             PlaceRef {\n                 // HACK(eddyb): have to bitcast pointers until LLVM removes pointee types."}, {"sha": "6c3f52b1b19f90414bf24d680127c158944e61f2", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/838042aa4e9f7b313cd79420d7613dc5af5343e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838042aa4e9f7b313cd79420d7613dc5af5343e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=838042aa4e9f7b313cd79420d7613dc5af5343e5", "patch": "@@ -178,7 +178,7 @@ pub trait BuilderMethods<'a, 'tcx>:\n \n     fn gep(&mut self, ptr: Self::Value, indices: &[Self::Value]) -> Self::Value;\n     fn inbounds_gep(&mut self, ptr: Self::Value, indices: &[Self::Value]) -> Self::Value;\n-    fn struct_gep(&mut self, ptr: Self::Value, idx: u64) -> Self::Value;\n+    fn struct_gep(&mut self, ty: Self::Type, ptr: Self::Value, idx: u64) -> Self::Value;\n \n     fn trunc(&mut self, val: Self::Value, dest_ty: Self::Type) -> Self::Value;\n     fn sext(&mut self, val: Self::Value, dest_ty: Self::Type) -> Self::Value;"}]}