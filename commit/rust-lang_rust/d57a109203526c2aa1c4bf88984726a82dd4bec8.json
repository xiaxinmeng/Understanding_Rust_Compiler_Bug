{"sha": "d57a109203526c2aa1c4bf88984726a82dd4bec8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1N2ExMDkyMDM1MjZjMmFhMWM0YmY4ODk4NDcyNmE4MmRkNGJlYzg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-29T09:29:10Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:13Z"}, "message": "Adjust tests to more aggressive const err linting", "tree": {"sha": "dbdc80dfc904e30651095a73020ba36fae5d65fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbdc80dfc904e30651095a73020ba36fae5d65fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d57a109203526c2aa1c4bf88984726a82dd4bec8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53UACgkQpp+NIls6\n19nNChAAgXq63MNCIlsccAbCHBMtkNrZJ2ukPkjgxPTSywIUzs/MEc0un1MO37l8\n2vZdD18MyVwuSjuJsOoGVCynES6G4B6z35ywmZy7TTiLpovNMdL3UvyflemoTfWP\nunJgbU4RjHTMmmNrrU8Er33omNKkYeRROT+9xIjuOBOR0SVkIhyo4dwwqboJG1BH\nnfEpVYnuJjk/s6VV7/1JTJ+rhk1/rpR8xPsBlMJ26NlEmbdEukyGvLDshe3kqDkh\nwhRB8DQrx39oaJtRY3S3/ljLG3evQzeDCYOPKA6M9eAZD9aJabXrbiHZv017M9K/\nBKyX4cWZya1ssjdsZpHxkE89rACs7DtbOo0HykDPzy5RgKsg6Nw3LMjz6zZpLB2K\nQp5oWj0CSaQ85ri7Gu1UENIuU6uiW0TZM++x7xQIhfR7P9fxnsRh+wG1/ELHJhRa\ndx1/LeJfHK/KqbIUNMJmuFC/PWZoJOKpDcxzaqdFR53q0jcY8EnGcLwh7SLcYmKB\nnJ3ZQYa04wvuPPWJKjmXiNBI/bMBmw9ayPwmfcMvpuNlLMEXjhwNHoszRoxjCb2b\nuHeGK3u8vEk8ldyoMNFIFaD7V1gCSxZh0k8A1V8f7rBPqjSYFrqJq0MV3rMaZXvR\nN3Eb+0sn7l5xV9dy42bBZbZj/TEIcsoxUiI1RyYWsYRB+/b8mqk=\n=kRDu\n-----END PGP SIGNATURE-----", "payload": "tree dbdc80dfc904e30651095a73020ba36fae5d65fc\nparent 21554b96aff27d2d4ac2742bc4b00b52982933ca\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1517218150 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494453 +0100\n\nAdjust tests to more aggressive const err linting\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d57a109203526c2aa1c4bf88984726a82dd4bec8", "html_url": "https://github.com/rust-lang/rust/commit/d57a109203526c2aa1c4bf88984726a82dd4bec8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d57a109203526c2aa1c4bf88984726a82dd4bec8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21554b96aff27d2d4ac2742bc4b00b52982933ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/21554b96aff27d2d4ac2742bc4b00b52982933ca", "html_url": "https://github.com/rust-lang/rust/commit/21554b96aff27d2d4ac2742bc4b00b52982933ca"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "2e19de0a27960c369e6d408ab3ffa62325cf0d82", "filename": "src/test/compile-fail/const-err-early.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d57a109203526c2aa1c4bf88984726a82dd4bec8/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d57a109203526c2aa1c4bf88984726a82dd4bec8/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs?ref=d57a109203526c2aa1c4bf88984726a82dd4bec8", "patch": "@@ -14,6 +14,7 @@\n pub const A: i8 = -std::i8::MIN; //~ ERROR E0080\n //~^ ERROR attempt to negate with overflow\n //~| ERROR const_err\n+//~| ERROR const_err\n pub const B: u8 = 200u8 + 200u8; //~ ERROR E0080\n pub const C: u8 = 200u8 * 4; //~ ERROR E0080\n pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR E0080"}, {"sha": "5fa31e05322b39fec222333aa8eebc146f82df2d", "filename": "src/test/compile-fail/const-err-multi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d57a109203526c2aa1c4bf88984726a82dd4bec8/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d57a109203526c2aa1c4bf88984726a82dd4bec8/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs?ref=d57a109203526c2aa1c4bf88984726a82dd4bec8", "patch": "@@ -13,6 +13,7 @@\n pub const A: i8 = -std::i8::MIN; //~ ERROR attempt to negate with overflow\n //~^ ERROR E0080\n //~| ERROR const_err\n+//~| ERROR const_err\n pub const B: i8 = A;\n //~^ ERROR E0080\n pub const C: u8 = A as u8;"}, {"sha": "469618407d8f921263e0a063772ef1c63f95f230", "filename": "src/test/compile-fail/eval-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d57a109203526c2aa1c4bf88984726a82dd4bec8/src%2Ftest%2Fcompile-fail%2Feval-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d57a109203526c2aa1c4bf88984726a82dd4bec8/src%2Ftest%2Fcompile-fail%2Feval-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Feval-enum.rs?ref=d57a109203526c2aa1c4bf88984726a82dd4bec8", "patch": "@@ -13,10 +13,12 @@ enum Test {\n     //~^ attempt to divide by zero\n     //~| ERROR constant evaluation error\n     //~| WARN constant evaluation error\n+    //~| WARN constant evaluation error\n     RemZero = 1%0,\n     //~^ attempt to calculate the remainder with a divisor of zero\n     //~| ERROR constant evaluation error\n     //~| WARN constant evaluation error\n+    //~| WARN constant evaluation error\n }\n \n fn main() {}"}, {"sha": "e2cf88d5774f75ca5084f29540003489034a4a2c", "filename": "src/test/compile-fail/issue-8460-const.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d57a109203526c2aa1c4bf88984726a82dd4bec8/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d57a109203526c2aa1c4bf88984726a82dd4bec8/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs?ref=d57a109203526c2aa1c4bf88984726a82dd4bec8", "patch": "@@ -17,61 +17,81 @@ fn main() {\n     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n     //~| ERROR constant evaluation error\n+    //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n     //~| ERROR constant evaluation error\n+    //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n     //~| ERROR constant evaluation error\n+    //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n     //~| ERROR constant evaluation error\n+    //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n     //~| ERROR constant evaluation error\n+    //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n     //~| ERROR constant evaluation error\n+    //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n     //~| ERROR constant evaluation error\n+    //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n     //~| ERROR constant evaluation error\n+    //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n     //~| ERROR constant evaluation error\n+    //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n     //~| ERROR constant evaluation error\n+    //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n     //~| ERROR constant evaluation error\n+    //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n     //~| ERROR constant evaluation error\n+    //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n     //~| ERROR constant evaluation error\n+    //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n     //~| ERROR constant evaluation error\n+    //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n     //~| ERROR constant evaluation error\n+    //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n     //~| ERROR constant evaluation error\n+    //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n     //~| ERROR constant evaluation error\n+    //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n     //~| ERROR constant evaluation error\n+    //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n     //~| ERROR constant evaluation error\n+    //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n     //~| ERROR constant evaluation error\n+    //~| ERROR constant evaluation error\n }"}, {"sha": "c8e425711284e529bfc4bb2d4184a677a1344b32", "filename": "src/test/ui/error-codes/E0080.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d57a109203526c2aa1c4bf88984726a82dd4bec8/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d57a109203526c2aa1c4bf88984726a82dd4bec8/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs?ref=d57a109203526c2aa1c4bf88984726a82dd4bec8", "patch": "@@ -13,6 +13,8 @@ enum Enum {\n     //~| shift left with overflow\n     Y = (1 / 0) //~ ERROR E0080\n     //~| const_err\n+    //~| const_err\n+    //~| const_err\n     //~| divide by zero\n }\n "}]}