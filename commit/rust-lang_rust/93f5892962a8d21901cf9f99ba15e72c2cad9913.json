{"sha": "93f5892962a8d21901cf9f99ba15e72c2cad9913", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZjU4OTI5NjJhOGQyMTkwMWNmOWY5OWJhMTVlNzJjMmNhZDk5MTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-01T20:59:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-01T20:59:17Z"}, "message": "Auto merge of #815 - RalfJung:memory-audit, r=RalfJung\n\ndon't call Memory::get without checking the pointer first\n\nAlso avoid Memory::get if we just need to know align/size.\n\nI audited all uses of `alloc_id`; the rest should be fine (and we can kill a bunch of them once https://github.com/rust-lang/rust/pull/62257 lands).", "tree": {"sha": "d34d5802b6edd072ed5130298fe07d6a4d11fbe7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d34d5802b6edd072ed5130298fe07d6a4d11fbe7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93f5892962a8d21901cf9f99ba15e72c2cad9913", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93f5892962a8d21901cf9f99ba15e72c2cad9913", "html_url": "https://github.com/rust-lang/rust/commit/93f5892962a8d21901cf9f99ba15e72c2cad9913", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93f5892962a8d21901cf9f99ba15e72c2cad9913/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10af3871c93ffa371c7ab4276f46a79d7e86836a", "url": "https://api.github.com/repos/rust-lang/rust/commits/10af3871c93ffa371c7ab4276f46a79d7e86836a", "html_url": "https://github.com/rust-lang/rust/commit/10af3871c93ffa371c7ab4276f46a79d7e86836a"}, {"sha": "4135441137ca02168522c24c0f5a3fbbf3af8741", "url": "https://api.github.com/repos/rust-lang/rust/commits/4135441137ca02168522c24c0f5a3fbbf3af8741", "html_url": "https://github.com/rust-lang/rust/commit/4135441137ca02168522c24c0f5a3fbbf3af8741"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "d3af1f0db0e02b5909b12b666cb384256e55f8e8", "filename": "src/operator.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93f5892962a8d21901cf9f99ba15e72c2cad9913/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f5892962a8d21901cf9f99ba15e72c2cad9913/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=93f5892962a8d21901cf9f99ba15e72c2cad9913", "patch": "@@ -206,7 +206,7 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n                     // on read hardware this can easily happen. Thus for comparisons we require\n                     // both pointers to be live.\n                     if self.pointer_inbounds(left).is_ok() && self.pointer_inbounds(right).is_ok() {\n-                        // Two in-bounds pointers in different allocations are different.\n+                        // Two in-bounds (and hence live) pointers in different allocations are different.\n                         false\n                     } else {\n                         return err!(InvalidPointerMath);\n@@ -303,7 +303,9 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n                 map_to_primval(left.overflowing_offset(Size::from_bytes(right as u64), self)),\n \n             BitAnd if !signed => {\n-                let ptr_base_align = self.memory().get(left.alloc_id)?.align.bytes();\n+                let ptr_base_align = self.memory().get_size_and_align(left.alloc_id, AllocCheck::MaybeDead)\n+                    .expect(\"alloc info with MaybeDead cannot fail\")\n+                    .1.bytes();\n                 let base_mask = {\n                     // FIXME: use `interpret::truncate`, once that takes a `Size` instead of a `Layout`.\n                     let shift = 128 - self.memory().pointer_size().bits();\n@@ -337,7 +339,9 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n             Rem if !signed => {\n                 // Doing modulo a divisor of the alignment is allowed.\n                 // (Intuition: modulo a divisor leaks less information.)\n-                let ptr_base_align = self.memory().get(left.alloc_id)?.align.bytes();\n+                let ptr_base_align = self.memory().get_size_and_align(left.alloc_id, AllocCheck::MaybeDead)\n+                    .expect(\"alloc info with MaybeDead cannot fail\")\n+                    .1.bytes();\n                 let right = right as u64;\n                 let ptr_size = self.memory().pointer_size();\n                 if right == 1 {"}, {"sha": "c9b10e02c978a77e8934f8e28b12fc8d12cba107", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/93f5892962a8d21901cf9f99ba15e72c2cad9913/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93f5892962a8d21901cf9f99ba15e72c2cad9913/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=93f5892962a8d21901cf9f99ba15e72c2cad9913", "patch": "@@ -227,9 +227,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         Align::from_bytes(align).unwrap(),\n                         MiriMemoryKind::Rust.into()\n                     );\n+                // We just allocated this, the access cannot fail\n                 this.memory_mut()\n-                    .get_mut(ptr.alloc_id)?\n-                    .write_repeat(tcx, ptr, 0, Size::from_bytes(size))?;\n+                    .get_mut(ptr.alloc_id).unwrap()\n+                    .write_repeat(tcx, ptr, 0, Size::from_bytes(size)).unwrap();\n                 this.write_scalar(Scalar::Ptr(ptr), dest)?;\n             }\n             \"__rust_dealloc\" => {\n@@ -469,15 +470,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         Align::from_bytes(1).unwrap(),\n                         MiriMemoryKind::Env.into(),\n                     );\n-                    {\n-                        let alloc = this.memory_mut().get_mut(value_copy.alloc_id)?;\n-                        alloc.write_bytes(tcx, value_copy, &value)?;\n-                        let trailing_zero_ptr = value_copy.offset(\n-                            Size::from_bytes(value.len() as u64),\n-                            tcx,\n-                        )?;\n-                        alloc.write_bytes(tcx, trailing_zero_ptr, &[0])?;\n-                    }\n+                    // We just allocated these, so the write cannot fail.\n+                    let alloc = this.memory_mut().get_mut(value_copy.alloc_id).unwrap();\n+                    alloc.write_bytes(tcx, value_copy, &value).unwrap();\n+                    let trailing_zero_ptr = value_copy.offset(\n+                        Size::from_bytes(value.len() as u64),\n+                        tcx,\n+                    ).unwrap();\n+                    alloc.write_bytes(tcx, trailing_zero_ptr, &[0]).unwrap();\n+\n                     if let Some(var) = this.machine.env_vars.insert(\n                         name.to_owned(),\n                         value_copy,\n@@ -814,7 +815,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             },\n             \"GetSystemInfo\" => {\n                 let system_info = this.deref_operand(args[0])?;\n-                let system_info_ptr = system_info.ptr.to_ptr()?;\n+                let (system_info_ptr, align) = system_info.to_scalar_ptr_align();\n+                let system_info_ptr = this.memory()\n+                    .check_ptr_access(\n+                        system_info_ptr,\n+                        system_info.layout.size,\n+                        align,\n+                    )?\n+                    .expect(\"cannot be a ZST\");\n                 // Initialize with `0`.\n                 this.memory_mut().get_mut(system_info_ptr.alloc_id)?\n                     .write_repeat(tcx, system_info_ptr, 0, system_info.layout.size)?;"}]}