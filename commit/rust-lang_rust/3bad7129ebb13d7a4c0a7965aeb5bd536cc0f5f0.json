{"sha": "3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYWQ3MTI5ZWJiMTNkN2E0YzBhNzk2NWFlYjViZDUzNmNjMGY1ZjA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-06-24T04:12:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-06-29T15:36:25Z"}, "message": "Remove mutability from unique boxes in the AST", "tree": {"sha": "7c3ae5ff601a9cae33459eccaddc7d12cc76f6e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c3ae5ff601a9cae33459eccaddc7d12cc76f6e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0", "html_url": "https://github.com/rust-lang/rust/commit/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b29c36867418ea551b23c767f45454eea4623d79", "url": "https://api.github.com/repos/rust-lang/rust/commits/b29c36867418ea551b23c767f45454eea4623d79", "html_url": "https://github.com/rust-lang/rust/commit/b29c36867418ea551b23c767f45454eea4623d79"}], "stats": {"total": 58, "additions": 30, "deletions": 28}, "files": [{"sha": "b08186349319dae602073a72c16dffaf862c9bf5", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0", "patch": "@@ -786,7 +786,7 @@ fn get_explicit_self(item: ebml::Doc) -> ast::explicit_self_ {\n         's' => { return ast::sty_static; }\n         'v' => { return ast::sty_value; }\n         '@' => { return ast::sty_box(get_mutability(string[1])); }\n-        '~' => { return ast::sty_uniq(get_mutability(string[1])); }\n+        '~' => { return ast::sty_uniq; }\n         '&' => {\n             // FIXME(#4846) expl. region\n             return ast::sty_region(None, get_mutability(string[1]));"}, {"sha": "7735a7e39561f13cb872abf54bcf68738a682b6c", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0", "patch": "@@ -630,9 +630,8 @@ fn encode_explicit_self(ebml_w: &mut writer::Encoder, explicit_self: ast::explic\n             ebml_w.writer.write(&[ '@' as u8 ]);\n             encode_mutability(ebml_w, m);\n         }\n-        sty_uniq(m) => {\n+        sty_uniq => {\n             ebml_w.writer.write(&[ '~' as u8 ]);\n-            encode_mutability(ebml_w, m);\n         }\n     }\n "}, {"sha": "8ad61fe1f61cd0f535c1a8355234674bdc54af00", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0", "patch": "@@ -92,7 +92,7 @@ pub fn check_expr(sess: Session,\n     if is_const {\n         match e.node {\n           expr_unary(_, deref, _) => { }\n-          expr_unary(_, box(_), _) | expr_unary(_, uniq(_), _) => {\n+          expr_unary(_, box(_), _) | expr_unary(_, uniq, _) => {\n             sess.span_err(e.span,\n                           \"disallowed operator in constant expression\");\n             return;"}, {"sha": "e431784f1e63ad3264ac35678455e601756d5353", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0", "patch": "@@ -368,7 +368,7 @@ fn visit_fn(fk: &visit::fn_kind,\n     match *fk {\n         fk_method(_, _, method) => {\n             match method.explicit_self.node {\n-                sty_value | sty_region(*) | sty_box(_) | sty_uniq(_) => {\n+                sty_value | sty_region(*) | sty_box(_) | sty_uniq => {\n                     fn_maps.add_variable(Arg(method.self_id,\n                                              special_idents::self_));\n                 }"}, {"sha": "6780c51e5062aa6de6a677fb1f082da3a0330a5b", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0", "patch": "@@ -340,7 +340,7 @@ fn const_expr_unadjusted(cx: @mut CrateContext, e: &ast::expr) -> ValueRef {\n             let is_float = ty::type_is_fp(ty);\n             return match u {\n               ast::box(_)  |\n-              ast::uniq(_) |\n+              ast::uniq |\n               ast::deref  => {\n                 let (dv, _dt) = const_deref(cx, te, ty, true);\n                 dv"}, {"sha": "297a466c7cb0a19cc6a3f88f5df962aa459dae6e", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0", "patch": "@@ -1314,7 +1314,7 @@ fn trans_unary_datum(bcx: block,\n             trans_boxed_expr(bcx, un_ty, sub_expr, sub_ty,\n                              heap_managed)\n         }\n-        ast::uniq(_) => {\n+        ast::uniq => {\n             let heap  = heap_for_unique(bcx, un_ty);\n             trans_boxed_expr(bcx, un_ty, sub_expr, sub_ty, heap)\n         }"}, {"sha": "75e9dbe48619d4b953391aee8dfb34c4383b43e8", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0", "patch": "@@ -532,7 +532,7 @@ pub fn trans_trait_callee(bcx: block,\n     let llpair = match explicit_self {\n         ast::sty_region(*) => Load(bcx, llpair),\n         ast::sty_static | ast::sty_value |\n-        ast::sty_box(_) | ast::sty_uniq(_) => llpair\n+        ast::sty_box(_) | ast::sty_uniq => llpair\n     };\n \n     let callee_ty = node_id_type(bcx, callee_id);\n@@ -622,7 +622,7 @@ pub fn trans_trait_callee_from_llval(bcx: block,\n \n             self_mode = ty::ByRef;\n         }\n-        ast::sty_uniq(_) => {\n+        ast::sty_uniq => {\n             // Pass the unique pointer.\n             match store {\n                 ty::UniqTraitStore => llself = llbox,"}, {"sha": "d8d539764620367aef31a1b95d9304a8657bd8d0", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0", "patch": "@@ -278,7 +278,7 @@ pub fn mark_for_method_call(cx: &Context, e_id: node_id, callee_id: node_id) {\n pub fn mark_for_expr(cx: &Context, e: &expr) {\n     match e.node {\n       expr_vstore(_, _) | expr_vec(_, _) | expr_struct(*) | expr_tup(_) |\n-      expr_unary(_, box(_), _) | expr_unary(_, uniq(_), _) |\n+      expr_unary(_, box(_), _) | expr_unary(_, uniq, _) |\n       expr_binary(_, add, _, _) | expr_copy(_) | expr_repeat(*) => {\n         node_type_needs(cx, use_repr, e.id);\n       }"}, {"sha": "1e236c620a0e52eb7e17a7a5e56f26de298c2bb2", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0", "patch": "@@ -662,10 +662,10 @@ fn ty_of_method_or_bare_fn<AC:AstConv,RS:region_scope + Copy + 'static>(\n                                 ty::mt {ty: self_info.untransformed_self_ty,\n                                         mutbl: mutability}))\n             }\n-            ast::sty_uniq(mutability) => {\n+            ast::sty_uniq => {\n                 Some(ty::mk_uniq(this.tcx(),\n                                  ty::mt {ty: self_info.untransformed_self_ty,\n-                                         mutbl: mutability}))\n+                                         mutbl: ast::m_imm}))\n             }\n         }\n     }"}, {"sha": "7489882ab768c01c137256cc782d762326832afe", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0", "patch": "@@ -1123,11 +1123,11 @@ impl<'self> LookupContext<'self> {\n                 }\n             }\n \n-            sty_uniq(m) => {\n+            sty_uniq => {\n                 debug!(\"(is relevant?) explicit self is a unique pointer\");\n                 match ty::get(rcvr_ty).sty {\n                     ty::ty_uniq(mt) => {\n-                        mutability_matches(mt.mutbl, m) &&\n+                        mutability_matches(mt.mutbl, ast::m_imm) &&\n                         self.fcx.can_mk_subty(mt.ty, candidate.rcvr_ty).is_ok()\n                     }\n "}, {"sha": "0cd9aac379892c1904351921df16178be245c53a", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0", "patch": "@@ -2301,7 +2301,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n       ast::expr_unary(callee_id, unop, oprnd) => {\n         let exp_inner = do unpack_expected(fcx, expected) |sty| {\n             match unop {\n-              ast::box(_) | ast::uniq(_) => match *sty {\n+              ast::box(_) | ast::uniq => match *sty {\n                 ty::ty_box(ref mt) | ty::ty_uniq(ref mt) => Some(mt.ty),\n                 _ => None\n               },\n@@ -2318,9 +2318,10 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                     oprnd_t = ty::mk_box(tcx,\n                                          ty::mt {ty: oprnd_t, mutbl: mutbl});\n                 }\n-                ast::uniq(mutbl) => {\n+                ast::uniq => {\n                     oprnd_t = ty::mk_uniq(tcx,\n-                                          ty::mt {ty: oprnd_t, mutbl: mutbl});\n+                                          ty::mt {ty: oprnd_t,\n+                                                  mutbl: ast::m_imm});\n                 }\n                 ast::deref => {\n                     let sty = structure_of(fcx, expr.span, oprnd_t);"}, {"sha": "2603cbb2dd7c519c91f1db72e27b8606b76a87b5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0", "patch": "@@ -333,7 +333,7 @@ pub enum binop {\n #[deriving(Eq, Encodable, Decodable,IterBytes)]\n pub enum unop {\n     box(mutability),\n-    uniq(mutability),\n+    uniq,\n     deref,\n     not,\n     neg\n@@ -805,7 +805,7 @@ pub enum explicit_self_ {\n     sty_value,                                 // `self`\n     sty_region(Option<@Lifetime>, mutability), // `&'lt self`\n     sty_box(mutability),                       // `@self`\n-    sty_uniq(mutability)                       // `~self`\n+    sty_uniq                                   // `~self`\n }\n \n pub type explicit_self = spanned<explicit_self_>;"}, {"sha": "ee7c7180f8db2d3e5ca1a8c3b4706eca3d7d19e9", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0", "patch": "@@ -135,7 +135,7 @@ pub fn is_shift_binop(b: binop) -> bool {\n pub fn unop_to_str(op: unop) -> ~str {\n     match op {\n       box(mt) => if mt == m_mutbl { ~\"@mut \" } else { ~\"@\" },\n-      uniq(mt) => if mt == m_mutbl { ~\"~mut \" } else { ~\"~\" },\n+      uniq => ~\"~\",\n       deref => ~\"*\",\n       not => ~\"!\",\n       neg => ~\"-\""}, {"sha": "e210853bfb4dcbd886290b1bb3bf753f119d5ef8", "filename": "src/libsyntax/ext/deriving/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs?ref=3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0", "patch": "@@ -248,7 +248,7 @@ pub fn get_explicit_self(cx: @ExtCtxt, span: span, self_ptr: &Option<PtrTy>)\n             let self_ty = respan(\n                 span,\n                 match *ptr {\n-                    Send => ast::sty_uniq(ast::m_imm),\n+                    Send => ast::sty_uniq,\n                     Managed(mutbl) => ast::sty_box(mutbl),\n                     Borrowed(ref lt, mutbl) => {\n                         let lt = lt.map(|s| @cx.lifetime(span,"}, {"sha": "cc0baa28e20d75a076ffafcc53c7d2102ca7f2e9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0", "patch": "@@ -2071,9 +2071,8 @@ impl Parser {\n             ex = match e.node {\n               expr_vec(*) |\n               expr_lit(@codemap::spanned { node: lit_str(_), span: _}) |\n-              expr_repeat(*)\n-              if m == m_imm => expr_vstore(e, expr_vstore_uniq),\n-              _ => self.mk_unary(uniq(m), e)\n+              expr_repeat(*) => expr_vstore(e, expr_vstore_uniq),\n+              _ => self.mk_unary(uniq, e)\n             };\n           }\n           _ => return self.parse_dot_or_call_expr()\n@@ -3366,7 +3365,12 @@ impl Parser {\n             maybe_parse_explicit_self(sty_box, self)\n           }\n           token::TILDE => {\n-            maybe_parse_explicit_self(sty_uniq, self)\n+            maybe_parse_explicit_self(|mutability| {\n+                if mutability != m_imm {\n+                    self.obsolete(*self.last_span, ObsoleteMutOwnedPointer);\n+                }\n+                sty_uniq\n+            }, self)\n           }\n           token::IDENT(*) if self.is_self_ident() => {\n             self.bump();"}, {"sha": "978561eaa67c6056fec39ee0524f8d675c931fae", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=3bad7129ebb13d7a4c0a7965aeb5bd536cc0f5f0", "patch": "@@ -1653,6 +1653,7 @@ pub fn print_explicit_self(s: @ps, explicit_self: ast::explicit_self_) -> bool {\n     match explicit_self {\n         ast::sty_static => { return false; }\n         ast::sty_value => { word(s.s, \"self\"); }\n+        ast::sty_uniq => { word(s.s, \"~self\"); }\n         ast::sty_region(lt, m) => {\n             word(s.s, \"&\");\n             print_opt_lifetime(s, lt);\n@@ -1662,9 +1663,6 @@ pub fn print_explicit_self(s: @ps, explicit_self: ast::explicit_self_) -> bool {\n         ast::sty_box(m) => {\n             word(s.s, \"@\"); print_mutability(s, m); word(s.s, \"self\");\n         }\n-        ast::sty_uniq(m) => {\n-            word(s.s, \"~\"); print_mutability(s, m); word(s.s, \"self\");\n-        }\n     }\n     return true;\n }"}]}