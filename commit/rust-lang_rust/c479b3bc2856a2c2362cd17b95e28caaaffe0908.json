{"sha": "c479b3bc2856a2c2362cd17b95e28caaaffe0908", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NzliM2JjMjg1NmEyYzIzNjJjZDE3Yjk1ZTI4Y2FhYWZmZTA5MDg=", "commit": {"author": {"name": "Shea Newton", "email": "shnewto@gmail.com", "date": "2018-06-19T21:30:43Z"}, "committer": {"name": "Shea Newton", "email": "shnewto@gmail.com", "date": "2018-06-19T21:30:43Z"}, "message": "Removing lint for constant `usize` array indexing\n\nThis commit removes the logic in this PR that linted out-of-bounds constant `usize` indexing on arrays. That case is already handled by rustc's `const_err` lint. Beyond removing the linting logic, the test file and its associated stderr were updated to verify that const `usize` indexing operations on arrays are no longer handled by this `indexing_slicing` lint.", "tree": {"sha": "a8121565b5a970257c6016642403c2d833c93c6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8121565b5a970257c6016642403c2d833c93c6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c479b3bc2856a2c2362cd17b95e28caaaffe0908", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJbKXYIAAoJEBfrkSLclYZDo5QP/iGhR+C5L1F5C24k8u3TfXvX\nxcF7k/mls0jFh7eq+/FZ+oCpHbKEkG1uxpXByFIU6etdtpV9/n/HFGTHi154w4r4\nIE+Ae0R/rmrF2TDtFgxrt0SkKqnH/ZSiB0hEZeFjJZQVVNNnRExEonAnVtuXas/t\nTM47+VE4CaXYfwcLToxRlk+9FOacSH3ATks528h9xGfir6piqxDxmvdsfa2Y2Pf+\n27ackdch236kf4MQegnCsOcnodCRd0it7QqHScL4OmLi1a/Ff64mws3N5Hd36/G2\nZLtsGUoFrc9PLjMv3F5vPNTDNNl/uoOkf6ellf3YTFhs6XOo7tNwJArrh8xuVQ1y\nMCAPAby6Y05y4NijmODG8LsKV5OMZMfbZih6pITz/iiq8KkahIFhKzZosqFNQesF\njTGuXF/+npO9OWjK1egHCLC1Z6qFjl+GJXOd9lmDL07kskikuHS4LhxoxE3chUnu\nPmlTV5MmY+TyAJ/iF9JKDn4D5GYncgElBNF3F20Sv8hx8f682D5Lp0/IfxXhY4S8\nVYyWKrjBrZ6omUDx75yqP050RKb0bs+EtYqzYFZjUQYF+q4Phd4Wc4UgJNyFeBRf\nUay4B0Vso/cbLb39SBfncN0P35UzRgy9oBfE2LTItXloQb8HrL7GR0pmuveMGu5K\npbFrCBhQOf70/p6kM2hL\n=2r/7\n-----END PGP SIGNATURE-----", "payload": "tree a8121565b5a970257c6016642403c2d833c93c6f\nparent e63f5dfedbb004afc6e9ca303b12f1c8f8cbea0d\nauthor Shea Newton <shnewto@gmail.com> 1529443843 +0000\ncommitter Shea Newton <shnewto@gmail.com> 1529443843 +0000\n\nRemoving lint for constant `usize` array indexing\n\nThis commit removes the logic in this PR that linted out-of-bounds constant `usize` indexing on arrays. That case is already handled by rustc's `const_err` lint. Beyond removing the linting logic, the test file and its associated stderr were updated to verify that const `usize` indexing operations on arrays are no longer handled by this `indexing_slicing` lint.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c479b3bc2856a2c2362cd17b95e28caaaffe0908", "html_url": "https://github.com/rust-lang/rust/commit/c479b3bc2856a2c2362cd17b95e28caaaffe0908", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c479b3bc2856a2c2362cd17b95e28caaaffe0908/comments", "author": {"login": "shnewto", "id": 5607902, "node_id": "MDQ6VXNlcjU2MDc5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5607902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shnewto", "html_url": "https://github.com/shnewto", "followers_url": "https://api.github.com/users/shnewto/followers", "following_url": "https://api.github.com/users/shnewto/following{/other_user}", "gists_url": "https://api.github.com/users/shnewto/gists{/gist_id}", "starred_url": "https://api.github.com/users/shnewto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shnewto/subscriptions", "organizations_url": "https://api.github.com/users/shnewto/orgs", "repos_url": "https://api.github.com/users/shnewto/repos", "events_url": "https://api.github.com/users/shnewto/events{/privacy}", "received_events_url": "https://api.github.com/users/shnewto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shnewto", "id": 5607902, "node_id": "MDQ6VXNlcjU2MDc5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5607902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shnewto", "html_url": "https://github.com/shnewto", "followers_url": "https://api.github.com/users/shnewto/followers", "following_url": "https://api.github.com/users/shnewto/following{/other_user}", "gists_url": "https://api.github.com/users/shnewto/gists{/gist_id}", "starred_url": "https://api.github.com/users/shnewto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shnewto/subscriptions", "organizations_url": "https://api.github.com/users/shnewto/orgs", "repos_url": "https://api.github.com/users/shnewto/repos", "events_url": "https://api.github.com/users/shnewto/events{/privacy}", "received_events_url": "https://api.github.com/users/shnewto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e63f5dfedbb004afc6e9ca303b12f1c8f8cbea0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e63f5dfedbb004afc6e9ca303b12f1c8f8cbea0d", "html_url": "https://github.com/rust-lang/rust/commit/e63f5dfedbb004afc6e9ca303b12f1c8f8cbea0d"}], "stats": {"total": 62, "additions": 13, "deletions": 49}, "files": [{"sha": "7dd72a5383cd5123e561578446d7b7071b87ac23", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c479b3bc2856a2c2362cd17b95e28caaaffe0908/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c479b3bc2856a2c2362cd17b95e28caaaffe0908/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=c479b3bc2856a2c2362cd17b95e28caaaffe0908", "patch": "@@ -34,9 +34,9 @@ declare_clippy_lint! {\n     \"out of bounds constant indexing\"\n }\n \n-/// **What it does:** Checks for usage of indexing or slicing. Does not report\n-/// on arrays if we can tell that the indexing or slicing operations are in\n-/// bounds.\n+/// **What it does:** Checks for usage of indexing or slicing. Arrays are special cased, this lint\n+/// does report on arrays if we can tell that slicing operations are in bounds and does not\n+/// lint on constant `usize` indexing on arrays because that is handled by rustc's `const_err` lint.\n ///\n /// **Why is this bad?** Indexing and slicing can panic at runtime and there are\n /// safe alternatives.\n@@ -64,13 +64,11 @@ declare_clippy_lint! {\n /// let y = [0, 1, 2, 3];\n ///\n /// // Bad\n-/// y[10];\n /// &y[10..100];\n /// &y[10..];\n /// &y[..100];\n ///\n /// // Good\n-/// y[2];\n /// &y[2..];\n /// &y[..2];\n /// &y[0..3];\n@@ -132,20 +130,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {\n                 );\n             } else {\n                 // Catchall non-range index, i.e. [n] or [n << m]\n-                if let ty::TyArray(_, s) = ty.sty {\n-                    let size: u128 = s.assert_usize(cx.tcx).unwrap().into();\n+                if let ty::TyArray(..) = ty.sty {\n                     // Index is a constant uint.\n-                    if let Some((Constant::Int(const_index), _)) = constant(cx, cx.tables, index) {\n-                        if size <= const_index {\n-                            utils::span_lint(\n-                                cx,\n-                                OUT_OF_BOUNDS_INDEXING,\n-                                expr.span,\n-                                \"const index is out of bounds\",\n-                            );\n-                        }\n-                        // Else index is in bounds, ok.\n-\n+                    if let Some(..) = constant(cx, cx.tables, index) {\n+                        // Let rustc's `const_err` lint handle constant `usize` indexing on arrays.\n                         return;\n                     }\n                 }"}, {"sha": "e39dc92367c8ecc5c9ddfa3e9a518da13f237e20", "filename": "tests/ui/indexing_slicing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c479b3bc2856a2c2362cd17b95e28caaaffe0908/tests%2Fui%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c479b3bc2856a2c2362cd17b95e28caaaffe0908/tests%2Fui%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.rs?ref=c479b3bc2856a2c2362cd17b95e28caaaffe0908", "patch": "@@ -13,8 +13,8 @@ fn main() {\n     &x[..index];\n     &x[index_from..index_to];\n     &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n-    x[4];\n-    x[1 << 3];\n+    x[4]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n+    x[1 << 3]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n     &x[..=4];\n     &x[1..5];\n     &x[5..][..10]; // Two lint reports, one for [5..] and another for [..10].\n@@ -44,7 +44,7 @@ fn main() {\n     &y[..]; // Ok, should not produce stderr.\n \n     let empty: [i8; 0] = [];\n-    empty[0];\n+    empty[0]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n     &empty[1..5];\n     &empty[0..=4];\n     &empty[..=4];\n@@ -75,7 +75,7 @@ fn main() {\n \n     const N: usize = 15; // Out of bounds\n     const M: usize = 3; // In bounds\n-    x[N];\n+    x[N]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n     x[M]; // Ok, should not produce stderr.\n     v[N];\n     v[M];"}, {"sha": "ee11dce6d1c2c164e917e9d10df577be72245d31", "filename": "tests/ui/indexing_slicing.stderr", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c479b3bc2856a2c2362cd17b95e28caaaffe0908/tests%2Fui%2Findexing_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c479b3bc2856a2c2362cd17b95e28caaaffe0908/tests%2Fui%2Findexing_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.stderr?ref=c479b3bc2856a2c2362cd17b95e28caaaffe0908", "patch": "@@ -47,25 +47,13 @@ error: slicing may panic.\n    |\n    = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n \n-error: const index is out of bounds\n-  --> $DIR/indexing_slicing.rs:16:5\n-   |\n-16 |     x[4];\n-   |     ^^^^\n-   |\n-   = note: `-D out-of-bounds-indexing` implied by `-D warnings`\n-\n-error: const index is out of bounds\n-  --> $DIR/indexing_slicing.rs:17:5\n-   |\n-17 |     x[1 << 3];\n-   |     ^^^^^^^^^\n-\n error: range is out of bounds\n   --> $DIR/indexing_slicing.rs:18:6\n    |\n 18 |     &x[..=4];\n    |      ^^^^^^^\n+   |\n+   = note: `-D out-of-bounds-indexing` implied by `-D warnings`\n \n error: range is out of bounds\n   --> $DIR/indexing_slicing.rs:19:6\n@@ -159,12 +147,6 @@ error: slicing may panic.\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n-error: const index is out of bounds\n-  --> $DIR/indexing_slicing.rs:47:5\n-   |\n-47 |     empty[0];\n-   |     ^^^^^^^^\n-\n error: range is out of bounds\n   --> $DIR/indexing_slicing.rs:48:6\n    |\n@@ -269,12 +251,6 @@ error: slicing may panic.\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n-error: const index is out of bounds\n-  --> $DIR/indexing_slicing.rs:78:5\n-   |\n-78 |     x[N];\n-   |     ^^^^\n-\n error: indexing may panic.\n   --> $DIR/indexing_slicing.rs:80:5\n    |\n@@ -291,5 +267,5 @@ error: indexing may panic.\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: aborting due to 41 previous errors\n+error: aborting due to 37 previous errors\n "}]}