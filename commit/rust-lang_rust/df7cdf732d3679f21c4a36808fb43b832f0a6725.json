{"sha": "df7cdf732d3679f21c4a36808fb43b832f0a6725", "node_id": "C_kwDOAAsO6NoAKGRmN2NkZjczMmQzNjc5ZjIxYzRhMzY4MDhmYjQzYjgzMmYwYTY3MjU", "commit": {"author": {"name": "Tyler Weaver", "email": "maybe@tylerjw.dev", "date": "2023-01-31T00:29:17Z"}, "committer": {"name": "Tyler Weaver", "email": "maybe@tylerjw.dev", "date": "2023-01-31T00:29:29Z"}, "message": "Pull the is_external test out of the loop", "tree": {"sha": "048e0fc96bac2592dab3be2f6f8fee75a973707a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/048e0fc96bac2592dab3be2f6f8fee75a973707a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df7cdf732d3679f21c4a36808fb43b832f0a6725", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAg7SOvb1XvVqyndOg/aB6xzqcLku\ncJTkLKCfEUxpSDkY0AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQDWPGBZVsrPBan5B26JaBwMX60FLI74xAdxOUnmBnC6FxhvHaSHAmTUqs/YhYQ/fh7\nitQ41jtJy8b8guH4RgUQs=\n-----END SSH SIGNATURE-----", "payload": "tree 048e0fc96bac2592dab3be2f6f8fee75a973707a\nparent c531b09eb85e4dff966b6bfb93e7fbf128fdfba0\nauthor Tyler Weaver <maybe@tylerjw.dev> 1675124957 -0700\ncommitter Tyler Weaver <maybe@tylerjw.dev> 1675124969 -0700\n\nPull the is_external test out of the loop\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df7cdf732d3679f21c4a36808fb43b832f0a6725", "html_url": "https://github.com/rust-lang/rust/commit/df7cdf732d3679f21c4a36808fb43b832f0a6725", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df7cdf732d3679f21c4a36808fb43b832f0a6725/comments", "author": {"login": "tylerjw", "id": 2490389, "node_id": "MDQ6VXNlcjI0OTAzODk=", "avatar_url": "https://avatars.githubusercontent.com/u/2490389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tylerjw", "html_url": "https://github.com/tylerjw", "followers_url": "https://api.github.com/users/tylerjw/followers", "following_url": "https://api.github.com/users/tylerjw/following{/other_user}", "gists_url": "https://api.github.com/users/tylerjw/gists{/gist_id}", "starred_url": "https://api.github.com/users/tylerjw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tylerjw/subscriptions", "organizations_url": "https://api.github.com/users/tylerjw/orgs", "repos_url": "https://api.github.com/users/tylerjw/repos", "events_url": "https://api.github.com/users/tylerjw/events{/privacy}", "received_events_url": "https://api.github.com/users/tylerjw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tylerjw", "id": 2490389, "node_id": "MDQ6VXNlcjI0OTAzODk=", "avatar_url": "https://avatars.githubusercontent.com/u/2490389?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tylerjw", "html_url": "https://github.com/tylerjw", "followers_url": "https://api.github.com/users/tylerjw/followers", "following_url": "https://api.github.com/users/tylerjw/following{/other_user}", "gists_url": "https://api.github.com/users/tylerjw/gists{/gist_id}", "starred_url": "https://api.github.com/users/tylerjw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tylerjw/subscriptions", "organizations_url": "https://api.github.com/users/tylerjw/orgs", "repos_url": "https://api.github.com/users/tylerjw/repos", "events_url": "https://api.github.com/users/tylerjw/events{/privacy}", "received_events_url": "https://api.github.com/users/tylerjw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c531b09eb85e4dff966b6bfb93e7fbf128fdfba0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c531b09eb85e4dff966b6bfb93e7fbf128fdfba0", "html_url": "https://github.com/rust-lang/rust/commit/c531b09eb85e4dff966b6bfb93e7fbf128fdfba0"}], "stats": {"total": 18, "additions": 5, "deletions": 13}, "files": [{"sha": "3126b590180e67621371c3dc30088c40dba31c3e", "filename": "clippy_lints/src/matches/match_wild_enum.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/df7cdf732d3679f21c4a36808fb43b832f0a6725/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7cdf732d3679f21c4a36808fb43b832f0a6725/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs?ref=df7cdf732d3679f21c4a36808fb43b832f0a6725", "patch": "@@ -3,7 +3,6 @@ use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::{is_refutable, peel_hir_pat_refs, recurse_or_patterns};\n use rustc_errors::Applicability;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n-use rustc_hir::def_id::DefId;\n use rustc_hir::{Arm, Expr, PatKind, PathSegment, QPath, Ty, TyKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, VariantDef};\n@@ -46,11 +45,12 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n \n     // Accumulate the variants which should be put in place of the wildcard because they're not\n     // already covered.\n-    let has_hidden_external = adt_def.variants().iter().any(|x| is_external_and_hidden(cx, x));\n+    let is_external = adt_def.did().as_local().is_none();\n+    let has_external_hidden = is_external && adt_def.variants().iter().any(|x| is_hidden(cx, x));\n     let mut missing_variants: Vec<_> = adt_def\n         .variants()\n         .iter()\n-        .filter(|x| !is_external_and_hidden(cx, x))\n+        .filter(|x| !(is_external && is_hidden(cx, x)))\n         .collect();\n \n     let mut path_prefix = CommonPrefixSearcher::None;\n@@ -138,7 +138,7 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n \n     match missing_variants.as_slice() {\n         [] => (),\n-        [x] if !adt_def.is_variant_list_non_exhaustive() && !has_hidden_external => span_lint_and_sugg(\n+        [x] if !adt_def.is_variant_list_non_exhaustive() && !has_external_hidden => span_lint_and_sugg(\n             cx,\n             MATCH_WILDCARD_FOR_SINGLE_VARIANTS,\n             wildcard_span,\n@@ -149,7 +149,7 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n         ),\n         variants => {\n             let mut suggestions: Vec<_> = variants.iter().copied().map(format_suggestion).collect();\n-            let message = if adt_def.is_variant_list_non_exhaustive() || has_hidden_external {\n+            let message = if adt_def.is_variant_list_non_exhaustive() || has_external_hidden {\n                 suggestions.push(\"_\".into());\n                 \"wildcard matches known variants and will also match future added variants\"\n             } else {\n@@ -196,14 +196,6 @@ impl<'a> CommonPrefixSearcher<'a> {\n     }\n }\n \n-fn is_external_and_hidden(cx: &LateContext<'_>, variant_def: &VariantDef) -> bool {\n-    is_external(variant_def.def_id) && is_hidden(cx, variant_def)\n-}\n-\n fn is_hidden(cx: &LateContext<'_>, variant_def: &VariantDef) -> bool {\n     cx.tcx.is_doc_hidden(variant_def.def_id) || cx.tcx.has_attr(variant_def.def_id, sym::unstable)\n }\n-\n-fn is_external(def_id: DefId) -> bool {\n-    def_id.as_local().is_none()\n-}"}]}