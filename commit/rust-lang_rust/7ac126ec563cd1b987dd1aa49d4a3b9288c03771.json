{"sha": "7ac126ec563cd1b987dd1aa49d4a3b9288c03771", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYzEyNmVjNTYzY2QxYjk4N2RkMWFhNDlkNGEzYjkyODhjMDM3NzE=", "commit": {"author": {"name": "Josh Stone", "email": "cuviper@gmail.com", "date": "2020-08-20T17:07:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-20T17:07:24Z"}, "message": "Rollup merge of #75703 - tmiasko:stack-overflow-musl, r=cuviper\n\nEnable stack-overflow detection on musl for non-main threads", "tree": {"sha": "11f0af299e67172cd5567d042a30266d4d51896f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11f0af299e67172cd5567d042a30266d4d51896f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ac126ec563cd1b987dd1aa49d4a3b9288c03771", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfPq3NCRBK7hj4Ov3rIwAAdHIIAEZklxfd6Wl4nJO7ldpvyZfU\nr630LUx89r+17QdlVPiaPoRO6v4H1GHUBrVW4eDOHyy574a60FiE28FozdGHUHCj\nV0y9/IyIwdUcJvRcLG3+PxdDmdwrSWepmd1sRwH0zkrUGhQ/NkjSNRl/Z3FNLVWV\nJTuXdTlFjKTjCWW41dIE0feqdCtbXQWgkYtnnUjONhi920yEoOqTRYEVtqs6AStS\n6dJx63GeYdME8jcdNARzAWGOWwAJpuQD4lc1YSYHpDrgyeFT//uzHA7+d6Nt6/Yz\nljp9TrwydV5+CuDNVXzP1P/P4AwV6SsxJQl+L0LooEnDMLCS4oS77LH5Hpq6t/g=\n=fE4V\n-----END PGP SIGNATURE-----\n", "payload": "tree 11f0af299e67172cd5567d042a30266d4d51896f\nparent ba104d291a40f5242c56b672763a1941ac23b52d\nparent 6a80b1387fe01b6a350d123a7ad0c7a8130827cc\nauthor Josh Stone <cuviper@gmail.com> 1597943244 -0700\ncommitter GitHub <noreply@github.com> 1597943244 -0700\n\nRollup merge of #75703 - tmiasko:stack-overflow-musl, r=cuviper\n\nEnable stack-overflow detection on musl for non-main threads\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac126ec563cd1b987dd1aa49d4a3b9288c03771", "html_url": "https://github.com/rust-lang/rust/commit/7ac126ec563cd1b987dd1aa49d4a3b9288c03771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ac126ec563cd1b987dd1aa49d4a3b9288c03771/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba104d291a40f5242c56b672763a1941ac23b52d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba104d291a40f5242c56b672763a1941ac23b52d", "html_url": "https://github.com/rust-lang/rust/commit/ba104d291a40f5242c56b672763a1941ac23b52d"}, {"sha": "6a80b1387fe01b6a350d123a7ad0c7a8130827cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a80b1387fe01b6a350d123a7ad0c7a8130827cc", "html_url": "https://github.com/rust-lang/rust/commit/6a80b1387fe01b6a350d123a7ad0c7a8130827cc"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "04da9812ddc45f7ede86e500816855873cf7d679", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7ac126ec563cd1b987dd1aa49d4a3b9288c03771/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac126ec563cd1b987dd1aa49d4a3b9288c03771/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=7ac126ec563cd1b987dd1aa49d4a3b9288c03771", "patch": "@@ -213,7 +213,7 @@ impl Drop for Thread {\n }\n \n #[cfg(all(\n-    not(all(target_os = \"linux\", not(target_env = \"musl\"))),\n+    not(target_os = \"linux\"),\n     not(target_os = \"freebsd\"),\n     not(target_os = \"macos\"),\n     not(all(target_os = \"netbsd\", not(target_vendor = \"rumprun\"))),\n@@ -233,7 +233,7 @@ pub mod guard {\n }\n \n #[cfg(any(\n-    all(target_os = \"linux\", not(target_env = \"musl\")),\n+    target_os = \"linux\",\n     target_os = \"freebsd\",\n     target_os = \"macos\",\n     all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n@@ -333,9 +333,7 @@ pub mod guard {\n         let page_size = os::page_size();\n         PAGE_SIZE.store(page_size, Ordering::Relaxed);\n \n-        let stackaddr = get_stack_start_aligned()?;\n-\n-        if cfg!(target_os = \"linux\") {\n+        if cfg!(all(target_os = \"linux\", not(target_env = \"musl\"))) {\n             // Linux doesn't allocate the whole stack right away, and\n             // the kernel has its own stack-guard mechanism to fault\n             // when growing too close to an existing mapping.  If we map\n@@ -346,8 +344,15 @@ pub mod guard {\n             // Instead, we'll just note where we expect rlimit to start\n             // faulting, so our handler can report \"stack overflow\", and\n             // trust that the kernel's own stack guard will work.\n+            let stackaddr = get_stack_start_aligned()?;\n             let stackaddr = stackaddr as usize;\n             Some(stackaddr - page_size..stackaddr)\n+        } else if cfg!(all(target_os = \"linux\", target_env = \"musl\")) {\n+            // For the main thread, the musl's pthread_attr_getstack\n+            // returns the current stack size, rather than maximum size\n+            // it can eventually grow to. It cannot be used to determine\n+            // the position of kernel's stack guard.\n+            None\n         } else {\n             // Reallocate the last page of the stack.\n             // This ensures SIGBUS will be raised on\n@@ -357,6 +362,7 @@ pub mod guard {\n             // than the initial mmap() used, so we mmap() here with\n             // read/write permissions and only then mprotect() it to\n             // no permissions at all. See issue #50313.\n+            let stackaddr = get_stack_start_aligned()?;\n             let result = mmap(\n                 stackaddr,\n                 page_size,\n@@ -406,7 +412,14 @@ pub mod guard {\n             let mut guardsize = 0;\n             assert_eq!(libc::pthread_attr_getguardsize(&attr, &mut guardsize), 0);\n             if guardsize == 0 {\n-                panic!(\"there is no guard page\");\n+                if cfg!(all(target_os = \"linux\", target_env = \"musl\")) {\n+                    // musl versions before 1.1.19 always reported guard\n+                    // size obtained from pthread_attr_get_np as zero.\n+                    // Use page size as a fallback.\n+                    guardsize = PAGE_SIZE.load(Ordering::Relaxed);\n+                } else {\n+                    panic!(\"there is no guard page\");\n+                }\n             }\n             let mut stackaddr = crate::ptr::null_mut();\n             let mut size = 0;\n@@ -419,6 +432,8 @@ pub mod guard {\n                 Some(guardaddr - PAGE_SIZE.load(Ordering::Relaxed)..guardaddr)\n             } else if cfg!(target_os = \"netbsd\") {\n                 Some(stackaddr - guardsize..stackaddr)\n+            } else if cfg!(all(target_os = \"linux\", target_env = \"musl\")) {\n+                Some(stackaddr - guardsize..stackaddr)\n             } else if cfg!(all(target_os = \"linux\", target_env = \"gnu\")) {\n                 // glibc used to include the guard area within the stack, as noted in the BUGS\n                 // section of `man pthread_attr_getguardsize`.  This has been corrected starting"}, {"sha": "a52c285f9f0b4279f65a37448937b88a33f3ff28", "filename": "src/test/ui/abi/stack-probes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ac126ec563cd1b987dd1aa49d4a3b9288c03771/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac126ec563cd1b987dd1aa49d4a3b9288c03771/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs?ref=7ac126ec563cd1b987dd1aa49d4a3b9288c03771", "patch": "@@ -11,7 +11,6 @@\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes\n-// ignore-musl FIXME #31506\n \n use std::mem::MaybeUninit;\n use std::process::Command;"}, {"sha": "6beafc0732ba3174774ea77af304818508b213c8", "filename": "src/test/ui/out-of-stack.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ac126ec563cd1b987dd1aa49d4a3b9288c03771/src%2Ftest%2Fui%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac126ec563cd1b987dd1aa49d4a3b9288c03771/src%2Ftest%2Fui%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fout-of-stack.rs?ref=7ac126ec563cd1b987dd1aa49d4a3b9288c03771", "patch": "@@ -3,7 +3,6 @@\n #![allow(unused_must_use)]\n #![allow(unconditional_recursion)]\n // ignore-android: FIXME (#20004)\n-// ignore-musl\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-sgx no processes"}]}