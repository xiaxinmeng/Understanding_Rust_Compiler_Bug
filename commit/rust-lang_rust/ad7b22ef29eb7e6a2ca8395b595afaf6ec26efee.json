{"sha": "ad7b22ef29eb7e6a2ca8395b595afaf6ec26efee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkN2IyMmVmMjllYjdlNmEyY2E4Mzk1YjU5NWFmYWY2ZWMyNmVmZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-06T23:29:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-06T23:29:56Z"}, "message": "Auto merge of #54005 - eddyb:uniform-paths-self-resolve, r=petrochenkov\n\nrustc_resolve: allow `use crate_name;` under `uniform_paths`.\n\nSpecifically, `use crate_name;` and `use crate_name::{self, ...};` are now allowed, whereas previously there would produce a (false positive) ambiguity error, as the ambiguity detection code was seeing the `crate_name` import as a locally-available definition to conflict with the crate.\n\nr? @petrochenkov cc @aturon @joshtriplett @Centril", "tree": {"sha": "e1a70231d7cd80059df4a641c959269e0cab0693", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1a70231d7cd80059df4a641c959269e0cab0693"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad7b22ef29eb7e6a2ca8395b595afaf6ec26efee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad7b22ef29eb7e6a2ca8395b595afaf6ec26efee", "html_url": "https://github.com/rust-lang/rust/commit/ad7b22ef29eb7e6a2ca8395b595afaf6ec26efee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad7b22ef29eb7e6a2ca8395b595afaf6ec26efee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8c11d216b04abe21a03220b344f1415e1d6ebd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8c11d216b04abe21a03220b344f1415e1d6ebd1", "html_url": "https://github.com/rust-lang/rust/commit/a8c11d216b04abe21a03220b344f1415e1d6ebd1"}, {"sha": "31fce914b27497addbbc9f8235fdecc0962f2f98", "url": "https://api.github.com/repos/rust-lang/rust/commits/31fce914b27497addbbc9f8235fdecc0962f2f98", "html_url": "https://github.com/rust-lang/rust/commit/31fce914b27497addbbc9f8235fdecc0962f2f98"}], "stats": {"total": 71, "additions": 39, "deletions": 32}, "files": [{"sha": "37868a83e342168727f1623c8f2b0e7c5724cca4", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ad7b22ef29eb7e6a2ca8395b595afaf6ec26efee/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad7b22ef29eb7e6a2ca8395b595afaf6ec26efee/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=ad7b22ef29eb7e6a2ca8395b595afaf6ec26efee", "patch": "@@ -181,6 +181,23 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     self.session.features_untracked().uniform_paths);\n \n             let source = module_path[0];\n+\n+            // HACK(eddyb) For `use x::{self, ...};`, use the ID of the\n+            // `self` nested import for the canary. This allows the\n+            // ambiguity reporting scope to ignore false positives\n+            // in the same way it does for `use x;` (by comparing IDs).\n+            let mut canary_id = id;\n+            if let ast::UseTreeKind::Nested(ref items) = use_tree.kind {\n+                for &(ref use_tree, id) in items {\n+                    if let ast::UseTreeKind::Simple(..) = use_tree.kind {\n+                        if use_tree.ident().name == keywords::SelfValue.name() {\n+                            canary_id = id;\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+\n             // Helper closure to emit a canary with the given base path.\n             let emit = |this: &mut Self, base: Option<Ident>| {\n                 let subclass = SingleImport {\n@@ -200,7 +217,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     base.into_iter().collect(),\n                     subclass.clone(),\n                     source.span,\n-                    id,\n+                    canary_id,\n                     root_use_tree.span,\n                     root_id,\n                     ty::Visibility::Invisible,"}, {"sha": "73c9af0d11c47f155046f52d018720fd4b2a6aee", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ad7b22ef29eb7e6a2ca8395b595afaf6ec26efee/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad7b22ef29eb7e6a2ca8395b595afaf6ec26efee/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=ad7b22ef29eb7e6a2ca8395b595afaf6ec26efee", "patch": "@@ -664,6 +664,14 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n \n                 self.per_ns(|_, ns| {\n                     if let Some(result) = result[ns].get().ok() {\n+                        if let NameBindingKind::Import { directive, .. } = result.kind {\n+                            // Skip canaries that resolve to the import itself.\n+                            // These come from `use crate_name;`, which isn't really\n+                            // ambiguous, as the import can't actually shadow itself.\n+                            if directive.id == import.id {\n+                                return;\n+                            }\n+                        }\n                         if has_explicit_self {\n                             // There should only be one `self::x` (module-scoped) canary.\n                             assert_eq!(canary_results[ns].module_scope, None);\n@@ -718,22 +726,6 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n \n                 errors = true;\n \n-                // Special-case the error when `self::x` finds its own `use x;`.\n-                if has_external_crate &&\n-                   results.module_scope == Some(span) &&\n-                   results.block_scopes.is_empty() {\n-                    let msg = format!(\"`{}` import is redundant\", name);\n-                    this.session.struct_span_err(span, &msg)\n-                        .span_label(span,\n-                            format!(\"refers to external crate `::{}`\", name))\n-                        .span_label(span,\n-                            format!(\"defines `self::{}`, shadowing itself\", name))\n-                        .help(&format!(\"remove or write `::{}` explicitly instead\", name))\n-                        .note(\"relative `use` paths enabled by `#![feature(uniform_paths)]`\")\n-                        .emit();\n-                    return;\n-                }\n-\n                 let msg = format!(\"`{}` import is ambiguous\", name);\n                 let mut err = this.session.struct_span_err(span, &msg);\n                 let mut suggestion_choices = String::new();"}, {"sha": "39bd3160695e32d9217bf50bc0b54a1412e255f6", "filename": "src/test/run-pass/redundant.rs", "status": "renamed", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ad7b22ef29eb7e6a2ca8395b595afaf6ec26efee/src%2Ftest%2Frun-pass%2Fredundant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad7b22ef29eb7e6a2ca8395b595afaf6ec26efee/src%2Ftest%2Frun-pass%2Fredundant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fredundant.rs?ref=ad7b22ef29eb7e6a2ca8395b595afaf6ec26efee", "patch": "@@ -14,4 +14,16 @@\n \n use std;\n \n-fn main() {}\n+mod foo {\n+    pub use std as my_std;\n+}\n+\n+mod bar {\n+    pub use std::{self};\n+}\n+\n+fn main() {\n+    self::std::io::stdout();\n+    foo::my_std::io::stdout();\n+    bar::std::io::stdout();\n+}", "previous_filename": "src/test/ui/rust-2018/uniform-paths/redundant.rs"}, {"sha": "dd38407e1646b660fc5302f189da85e1cdbf4e99", "filename": "src/test/ui/rust-2018/uniform-paths/redundant.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fredundant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8c11d216b04abe21a03220b344f1415e1d6ebd1/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fredundant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fredundant.stderr?ref=a8c11d216b04abe21a03220b344f1415e1d6ebd1", "patch": "@@ -1,14 +0,0 @@\n-error: `std` import is redundant\n-  --> $DIR/redundant.rs:15:5\n-   |\n-LL | use std;\n-   |     ^^^\n-   |     |\n-   |     refers to external crate `::std`\n-   |     defines `self::std`, shadowing itself\n-   |\n-   = help: remove or write `::std` explicitly instead\n-   = note: relative `use` paths enabled by `#![feature(uniform_paths)]`\n-\n-error: aborting due to previous error\n-"}]}