{"sha": "fa9b85d4df05291956e7957f6dc819925a90e7b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhOWI4NWQ0ZGYwNTI5MTk1NmU3OTU3ZjZkYzgxOTkyNWE5MGU3Yjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-04T08:09:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-04T08:09:43Z"}, "message": "Auto merge of #4881 - krishna-veerareddy:issue-4871-use-mem-take, r=flip1995\n\nUse `mem::take` instead of `mem::replace` when applicable\n\n`std::mem::take` can be used to replace a value of type `T` with `T::default()` instead of `std::mem::replace`.\n\nFixes issue #4871\n\nchangelog: Added lint for [`mem_replace_with_default`]", "tree": {"sha": "9ea255b4b45f5e223b5999c6b08dbcedf644e07e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ea255b4b45f5e223b5999c6b08dbcedf644e07e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa9b85d4df05291956e7957f6dc819925a90e7b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa9b85d4df05291956e7957f6dc819925a90e7b9", "html_url": "https://github.com/rust-lang/rust/commit/fa9b85d4df05291956e7957f6dc819925a90e7b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa9b85d4df05291956e7957f6dc819925a90e7b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "611bd898c036e5b990d07a1ab2b3475544e9f7e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/611bd898c036e5b990d07a1ab2b3475544e9f7e7", "html_url": "https://github.com/rust-lang/rust/commit/611bd898c036e5b990d07a1ab2b3475544e9f7e7"}, {"sha": "42e4595d3ab7844d840ab4ef3fa8eb80116484f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/42e4595d3ab7844d840ab4ef3fa8eb80116484f6", "html_url": "https://github.com/rust-lang/rust/commit/42e4595d3ab7844d840ab4ef3fa8eb80116484f6"}], "stats": {"total": 323, "additions": 249, "deletions": 74}, "files": [{"sha": "05d437d3598c9d9c5ebab2ba6a2d1b84c4966970", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa9b85d4df05291956e7957f6dc819925a90e7b9/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/fa9b85d4df05291956e7957f6dc819925a90e7b9/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=fa9b85d4df05291956e7957f6dc819925a90e7b9", "patch": "@@ -1173,6 +1173,7 @@ Released 2018-09-13\n [`mem_discriminant_non_enum`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_discriminant_non_enum\n [`mem_forget`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_forget\n [`mem_replace_option_with_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_option_with_none\n+[`mem_replace_with_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default\n [`mem_replace_with_uninit`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_uninit\n [`min_max`]: https://rust-lang.github.io/rust-clippy/master/index.html#min_max\n [`misaligned_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#misaligned_transmute"}, {"sha": "215ad6f5630125cf23447dd77ff705b5a388db74", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa9b85d4df05291956e7957f6dc819925a90e7b9/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/fa9b85d4df05291956e7957f6dc819925a90e7b9/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=fa9b85d4df05291956e7957f6dc819925a90e7b9", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 342 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 343 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "3aace11716e7d9d7505b18d0f13953986e6bcdfb", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fa9b85d4df05291956e7957f6dc819925a90e7b9/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9b85d4df05291956e7957f6dc819925a90e7b9/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=fa9b85d4df05291956e7957f6dc819925a90e7b9", "patch": "@@ -599,6 +599,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &mem_discriminant::MEM_DISCRIMINANT_NON_ENUM,\n         &mem_forget::MEM_FORGET,\n         &mem_replace::MEM_REPLACE_OPTION_WITH_NONE,\n+        &mem_replace::MEM_REPLACE_WITH_DEFAULT,\n         &mem_replace::MEM_REPLACE_WITH_UNINIT,\n         &methods::CHARS_LAST_CMP,\n         &methods::CHARS_NEXT_CMP,\n@@ -1182,6 +1183,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&matches::SINGLE_MATCH),\n         LintId::of(&mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n         LintId::of(&mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n+        LintId::of(&mem_replace::MEM_REPLACE_WITH_DEFAULT),\n         LintId::of(&mem_replace::MEM_REPLACE_WITH_UNINIT),\n         LintId::of(&methods::CHARS_LAST_CMP),\n         LintId::of(&methods::CHARS_NEXT_CMP),\n@@ -1369,6 +1371,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&matches::MATCH_WILD_ERR_ARM),\n         LintId::of(&matches::SINGLE_MATCH),\n         LintId::of(&mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n+        LintId::of(&mem_replace::MEM_REPLACE_WITH_DEFAULT),\n         LintId::of(&methods::CHARS_LAST_CMP),\n         LintId::of(&methods::INTO_ITER_ON_REF),\n         LintId::of(&methods::ITER_CLONED_COLLECT),"}, {"sha": "5a1e3b73ded7ecfc078811d45b3839068a2dd213", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 132, "deletions": 65, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/fa9b85d4df05291956e7957f6dc819925a90e7b9/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9b85d4df05291956e7957f6dc819925a90e7b9/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=fa9b85d4df05291956e7957f6dc819925a90e7b9", "patch": "@@ -1,12 +1,14 @@\n use crate::utils::{\n-    match_def_path, match_qpath, paths, snippet_with_applicability, span_help_and_lint, span_lint_and_sugg,\n+    in_macro, match_def_path, match_qpath, paths, snippet, snippet_with_applicability, span_help_and_lint,\n+    span_lint_and_sugg, span_lint_and_then,\n };\n use if_chain::if_chain;\n use rustc::declare_lint_pass;\n use rustc::hir::{BorrowKind, Expr, ExprKind, Mutability, QPath};\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintPass};\n use rustc_errors::Applicability;\n use rustc_session::declare_tool_lint;\n+use syntax::source_map::Span;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `mem::replace()` on an `Option` with\n@@ -67,80 +69,145 @@ declare_clippy_lint! {\n     \"`mem::replace(&mut _, mem::uninitialized())` or `mem::replace(&mut _, mem::zeroed())`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `std::mem::replace` on a value of type\n+    /// `T` with `T::default()`.\n+    ///\n+    /// **Why is this bad?** `std::mem` module already has the method `take` to\n+    /// take the current value and replace it with the default value of that type.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// let mut text = String::from(\"foo\");\n+    /// let replaced = std::mem::replace(&mut text, String::default());\n+    /// ```\n+    /// Is better expressed with:\n+    /// ```rust\n+    /// let mut text = String::from(\"foo\");\n+    /// let taken = std::mem::take(&mut text);\n+    /// ```\n+    pub MEM_REPLACE_WITH_DEFAULT,\n+    style,\n+    \"replacing a value of type `T` with `T::default()` instead of using `std::mem::take`\"\n+}\n+\n declare_lint_pass!(MemReplace =>\n-    [MEM_REPLACE_OPTION_WITH_NONE, MEM_REPLACE_WITH_UNINIT]);\n+    [MEM_REPLACE_OPTION_WITH_NONE, MEM_REPLACE_WITH_UNINIT, MEM_REPLACE_WITH_DEFAULT]);\n+\n+fn check_replace_option_with_none(cx: &LateContext<'_, '_>, src: &Expr<'_>, dest: &Expr<'_>, expr_span: Span) {\n+    if let ExprKind::Path(ref replacement_qpath) = src.kind {\n+        // Check that second argument is `Option::None`\n+        if match_qpath(replacement_qpath, &paths::OPTION_NONE) {\n+            // Since this is a late pass (already type-checked),\n+            // and we already know that the second argument is an\n+            // `Option`, we do not need to check the first\n+            // argument's type. All that's left is to get\n+            // replacee's path.\n+            let replaced_path = match dest.kind {\n+                ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mut, ref replaced) => {\n+                    if let ExprKind::Path(QPath::Resolved(None, ref replaced_path)) = replaced.kind {\n+                        replaced_path\n+                    } else {\n+                        return;\n+                    }\n+                },\n+                ExprKind::Path(QPath::Resolved(None, ref replaced_path)) => replaced_path,\n+                _ => return,\n+            };\n+\n+            let mut applicability = Applicability::MachineApplicable;\n+            span_lint_and_sugg(\n+                cx,\n+                MEM_REPLACE_OPTION_WITH_NONE,\n+                expr_span,\n+                \"replacing an `Option` with `None`\",\n+                \"consider `Option::take()` instead\",\n+                format!(\n+                    \"{}.take()\",\n+                    snippet_with_applicability(cx, replaced_path.span, \"\", &mut applicability)\n+                ),\n+                applicability,\n+            );\n+        }\n+    }\n+}\n+\n+fn check_replace_with_uninit(cx: &LateContext<'_, '_>, src: &Expr<'_>, expr_span: Span) {\n+    if let ExprKind::Call(ref repl_func, ref repl_args) = src.kind {\n+        if_chain! {\n+            if repl_args.is_empty();\n+            if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n+            if let Some(repl_def_id) = cx.tables.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n+            then {\n+                if match_def_path(cx, repl_def_id, &paths::MEM_UNINITIALIZED) {\n+                    span_help_and_lint(\n+                        cx,\n+                        MEM_REPLACE_WITH_UNINIT,\n+                        expr_span,\n+                        \"replacing with `mem::uninitialized()`\",\n+                        \"consider using the `take_mut` crate instead\",\n+                    );\n+                } else if match_def_path(cx, repl_def_id, &paths::MEM_ZEROED) &&\n+                        !cx.tables.expr_ty(src).is_primitive() {\n+                    span_help_and_lint(\n+                        cx,\n+                        MEM_REPLACE_WITH_UNINIT,\n+                        expr_span,\n+                        \"replacing with `mem::zeroed()`\",\n+                        \"consider using a default value or the `take_mut` crate instead\",\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn check_replace_with_default(cx: &LateContext<'_, '_>, src: &Expr<'_>, dest: &Expr<'_>, expr_span: Span) {\n+    if let ExprKind::Call(ref repl_func, _) = src.kind {\n+        if_chain! {\n+            if !in_external_macro(cx.tcx.sess, expr_span);\n+            if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n+            if let Some(repl_def_id) = cx.tables.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n+            if match_def_path(cx, repl_def_id, &paths::DEFAULT_TRAIT_METHOD);\n+            then {\n+                span_lint_and_then(\n+                    cx,\n+                    MEM_REPLACE_WITH_DEFAULT,\n+                    expr_span,\n+                    \"replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\",\n+                    |db| {\n+                        if !in_macro(expr_span) {\n+                            let suggestion = format!(\"std::mem::take({})\", snippet(cx, dest.span, \"\"));\n+\n+                            db.span_suggestion(\n+                                expr_span,\n+                                \"consider using\",\n+                                suggestion,\n+                                Applicability::MachineApplicable\n+                            );\n+                        }\n+                    }\n+                );\n+            }\n+        }\n+    }\n+}\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemReplace {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n             // Check that `expr` is a call to `mem::replace()`\n             if let ExprKind::Call(ref func, ref func_args) = expr.kind;\n-            if func_args.len() == 2;\n             if let ExprKind::Path(ref func_qpath) = func.kind;\n             if let Some(def_id) = cx.tables.qpath_res(func_qpath, func.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::MEM_REPLACE);\n-\n-            // Check that second argument is `Option::None`\n+            if let [dest, src] = &**func_args;\n             then {\n-                if let ExprKind::Path(ref replacement_qpath) = func_args[1].kind {\n-                    if match_qpath(replacement_qpath, &paths::OPTION_NONE) {\n-\n-                        // Since this is a late pass (already type-checked),\n-                        // and we already know that the second argument is an\n-                        // `Option`, we do not need to check the first\n-                        // argument's type. All that's left is to get\n-                        // replacee's path.\n-                        let replaced_path = match func_args[0].kind {\n-                            ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mut, ref replaced) => {\n-                                if let ExprKind::Path(QPath::Resolved(None, ref replaced_path)) = replaced.kind {\n-                                    replaced_path\n-                                } else {\n-                                    return\n-                                }\n-                            },\n-                            ExprKind::Path(QPath::Resolved(None, ref replaced_path)) => replaced_path,\n-                            _ => return,\n-                        };\n-\n-                        let mut applicability = Applicability::MachineApplicable;\n-                        span_lint_and_sugg(\n-                            cx,\n-                            MEM_REPLACE_OPTION_WITH_NONE,\n-                            expr.span,\n-                            \"replacing an `Option` with `None`\",\n-                            \"consider `Option::take()` instead\",\n-                            format!(\"{}.take()\", snippet_with_applicability(cx, replaced_path.span, \"\", &mut applicability)),\n-                            applicability,\n-                        );\n-                    }\n-                }\n-                if let ExprKind::Call(ref repl_func, ref repl_args) = func_args[1].kind {\n-                    if_chain! {\n-                        if repl_args.is_empty();\n-                        if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n-                        if let Some(repl_def_id) = cx.tables.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n-                        then {\n-                            if match_def_path(cx, repl_def_id, &paths::MEM_UNINITIALIZED) {\n-                                span_help_and_lint(\n-                                    cx,\n-                                    MEM_REPLACE_WITH_UNINIT,\n-                                    expr.span,\n-                                    \"replacing with `mem::uninitialized()`\",\n-                                    \"consider using the `take_mut` crate instead\",\n-                                );\n-                            } else if match_def_path(cx, repl_def_id, &paths::MEM_ZEROED) &&\n-                                    !cx.tables.expr_ty(&func_args[1]).is_primitive() {\n-                                span_help_and_lint(\n-                                    cx,\n-                                    MEM_REPLACE_WITH_UNINIT,\n-                                    expr.span,\n-                                    \"replacing with `mem::zeroed()`\",\n-                                    \"consider using a default value or the `take_mut` crate instead\",\n-                                );\n-                            }\n-                        }\n-                    }\n-                }\n+                check_replace_option_with_none(cx, src, dest, expr.span);\n+                check_replace_with_uninit(cx, src, expr.span);\n+                check_replace_with_default(cx, src, dest, expr.span);\n             }\n         }\n     }"}, {"sha": "cd3336bdb37845af6a5754b42da8583c74961d8c", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fa9b85d4df05291956e7957f6dc819925a90e7b9/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9b85d4df05291956e7957f6dc819925a90e7b9/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=fa9b85d4df05291956e7957f6dc819925a90e7b9", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 342] = [\n+pub const ALL_LINTS: [Lint; 343] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1099,6 +1099,13 @@ pub const ALL_LINTS: [Lint; 342] = [\n         deprecation: None,\n         module: \"mem_replace\",\n     },\n+    Lint {\n+        name: \"mem_replace_with_default\",\n+        group: \"style\",\n+        desc: \"replacing a value of type `T` with `T::default()` instead of using `std::mem::take`\",\n+        deprecation: None,\n+        module: \"mem_replace\",\n+    },\n     Lint {\n         name: \"mem_replace_with_uninit\",\n         group: \"correctness\","}, {"sha": "eafc68bd6bcf45d7377a20555f07635f7aee7ecb", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fa9b85d4df05291956e7957f6dc819925a90e7b9/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9b85d4df05291956e7957f6dc819925a90e7b9/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=fa9b85d4df05291956e7957f6dc819925a90e7b9", "patch": "@@ -39,3 +39,10 @@ macro_rules! string_add {\n         let z = y + \"...\";\n     };\n }\n+\n+#[macro_export]\n+macro_rules! take_external {\n+    ($s:expr) => {\n+        std::mem::replace($s, Default::default())\n+    };\n+}"}, {"sha": "58657b934fbfeb08e74e5d80569bff16afe4a9cc", "filename": "tests/ui/mem_replace.fixed", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fa9b85d4df05291956e7957f6dc819925a90e7b9/tests%2Fui%2Fmem_replace.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fa9b85d4df05291956e7957f6dc819925a90e7b9/tests%2Fui%2Fmem_replace.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.fixed?ref=fa9b85d4df05291956e7957f6dc819925a90e7b9", "patch": "@@ -9,13 +9,31 @@\n \n // run-rustfix\n #![allow(unused_imports)]\n-#![warn(clippy::all, clippy::style, clippy::mem_replace_option_with_none)]\n+#![warn(\n+    clippy::all,\n+    clippy::style,\n+    clippy::mem_replace_option_with_none,\n+    clippy::mem_replace_with_default\n+)]\n \n use std::mem;\n \n-fn main() {\n+fn replace_option_with_none() {\n     let mut an_option = Some(1);\n     let _ = an_option.take();\n     let an_option = &mut Some(1);\n     let _ = an_option.take();\n }\n+\n+fn replace_with_default() {\n+    let mut s = String::from(\"foo\");\n+    let _ = std::mem::take(&mut s);\n+    let s = &mut String::from(\"foo\");\n+    let _ = std::mem::take(s);\n+    let _ = std::mem::take(s);\n+}\n+\n+fn main() {\n+    replace_option_with_none();\n+    replace_with_default();\n+}"}, {"sha": "eac0ce586a088836dff42cec25bd9b7d736b0607", "filename": "tests/ui/mem_replace.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fa9b85d4df05291956e7957f6dc819925a90e7b9/tests%2Fui%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9b85d4df05291956e7957f6dc819925a90e7b9/tests%2Fui%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.rs?ref=fa9b85d4df05291956e7957f6dc819925a90e7b9", "patch": "@@ -9,13 +9,31 @@\n \n // run-rustfix\n #![allow(unused_imports)]\n-#![warn(clippy::all, clippy::style, clippy::mem_replace_option_with_none)]\n+#![warn(\n+    clippy::all,\n+    clippy::style,\n+    clippy::mem_replace_option_with_none,\n+    clippy::mem_replace_with_default\n+)]\n \n use std::mem;\n \n-fn main() {\n+fn replace_option_with_none() {\n     let mut an_option = Some(1);\n     let _ = mem::replace(&mut an_option, None);\n     let an_option = &mut Some(1);\n     let _ = mem::replace(an_option, None);\n }\n+\n+fn replace_with_default() {\n+    let mut s = String::from(\"foo\");\n+    let _ = std::mem::replace(&mut s, String::default());\n+    let s = &mut String::from(\"foo\");\n+    let _ = std::mem::replace(s, String::default());\n+    let _ = std::mem::replace(s, Default::default());\n+}\n+\n+fn main() {\n+    replace_option_with_none();\n+    replace_with_default();\n+}"}, {"sha": "d5dc66873b2fe4d00ee9d329983bd5028f13cc94", "filename": "tests/ui/mem_replace.stderr", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fa9b85d4df05291956e7957f6dc819925a90e7b9/tests%2Fui%2Fmem_replace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa9b85d4df05291956e7957f6dc819925a90e7b9/tests%2Fui%2Fmem_replace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.stderr?ref=fa9b85d4df05291956e7957f6dc819925a90e7b9", "patch": "@@ -1,16 +1,36 @@\n error: replacing an `Option` with `None`\n-  --> $DIR/mem_replace.rs:18:13\n+  --> $DIR/mem_replace.rs:23:13\n    |\n LL |     let _ = mem::replace(&mut an_option, None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n    |\n    = note: `-D clippy::mem-replace-option-with-none` implied by `-D warnings`\n \n error: replacing an `Option` with `None`\n-  --> $DIR/mem_replace.rs:20:13\n+  --> $DIR/mem_replace.rs:25:13\n    |\n LL |     let _ = mem::replace(an_option, None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n \n-error: aborting due to 2 previous errors\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:30:13\n+   |\n+LL |     let _ = std::mem::replace(&mut s, String::default());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut s)`\n+   |\n+   = note: `-D clippy::mem-replace-with-default` implied by `-D warnings`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:32:13\n+   |\n+LL |     let _ = std::mem::replace(s, String::default());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(s)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:33:13\n+   |\n+LL |     let _ = std::mem::replace(s, Default::default());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(s)`\n+\n+error: aborting due to 5 previous errors\n "}, {"sha": "0c09344b80d10b7f85d0e5495bc26abcc853a559", "filename": "tests/ui/mem_replace_macro.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fa9b85d4df05291956e7957f6dc819925a90e7b9/tests%2Fui%2Fmem_replace_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9b85d4df05291956e7957f6dc819925a90e7b9/tests%2Fui%2Fmem_replace_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace_macro.rs?ref=fa9b85d4df05291956e7957f6dc819925a90e7b9", "patch": "@@ -0,0 +1,21 @@\n+// aux-build:macro_rules.rs\n+#![warn(clippy::mem_replace_with_default)]\n+\n+#[macro_use]\n+extern crate macro_rules;\n+\n+macro_rules! take {\n+    ($s:expr) => {\n+        std::mem::replace($s, Default::default())\n+    };\n+}\n+\n+fn replace_with_default() {\n+    let s = &mut String::from(\"foo\");\n+    take!(s);\n+    take_external!(s);\n+}\n+\n+fn main() {\n+    replace_with_default();\n+}"}, {"sha": "a0872b1a6bf4e23deb3c2401c86c8f1eb2f92d94", "filename": "tests/ui/mem_replace_macro.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fa9b85d4df05291956e7957f6dc819925a90e7b9/tests%2Fui%2Fmem_replace_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa9b85d4df05291956e7957f6dc819925a90e7b9/tests%2Fui%2Fmem_replace_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace_macro.stderr?ref=fa9b85d4df05291956e7957f6dc819925a90e7b9", "patch": "@@ -0,0 +1,13 @@\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace_macro.rs:9:9\n+   |\n+LL |         std::mem::replace($s, Default::default())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     take!(s);\n+   |     --------- in this macro invocation\n+   |\n+   = note: `-D clippy::mem-replace-with-default` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}