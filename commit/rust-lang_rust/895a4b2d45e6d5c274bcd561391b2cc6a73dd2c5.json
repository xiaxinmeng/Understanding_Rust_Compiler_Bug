{"sha": "895a4b2d45e6d5c274bcd561391b2cc6a73dd2c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NWE0YjJkNDVlNmQ1YzI3NGJjZDU2MTM5MWIyY2M2YTczZGQyYzU=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-10-21T14:47:01Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-10-23T02:45:36Z"}, "message": "Remove the `suite_index` parameter of the `run_passes!()` macro\n\nThis can be obtained via the `$mir_phase` value.", "tree": {"sha": "3861b7ed9da5253962303d372c4356b49117ea75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3861b7ed9da5253962303d372c4356b49117ea75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/895a4b2d45e6d5c274bcd561391b2cc6a73dd2c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/895a4b2d45e6d5c274bcd561391b2cc6a73dd2c5", "html_url": "https://github.com/rust-lang/rust/commit/895a4b2d45e6d5c274bcd561391b2cc6a73dd2c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/895a4b2d45e6d5c274bcd561391b2cc6a73dd2c5/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37e1d2975e1002f0718552554055647392e46f0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/37e1d2975e1002f0718552554055647392e46f0d", "html_url": "https://github.com/rust-lang/rust/commit/37e1d2975e1002f0718552554055647392e46f0d"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "e53def65886de3351316e446c52b1a38c5beb42d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/895a4b2d45e6d5c274bcd561391b2cc6a73dd2c5/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895a4b2d45e6d5c274bcd561391b2cc6a73dd2c5/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=895a4b2d45e6d5c274bcd561391b2cc6a73dd2c5", "patch": "@@ -80,6 +80,18 @@ pub enum MirPhase {\n     Optimized,\n }\n \n+impl MirPhase {\n+    /// Gets the index of the current MirPhase within the set of all MirPhases.\n+    pub fn phase_index(&self) -> usize {\n+        match self {\n+            MirPhase::Build => 0,\n+            MirPhase::Const => 1,\n+            MirPhase::Validated => 2,\n+            MirPhase::Optimized => 3,\n+        }\n+    }\n+}\n+\n /// Lowered representation of a single function.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Mir<'tcx> {"}, {"sha": "ff85d780a4ce307138851dd780ba1aa56281f315", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/895a4b2d45e6d5c274bcd561391b2cc6a73dd2c5/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895a4b2d45e6d5c274bcd561391b2cc6a73dd2c5/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=895a4b2d45e6d5c274bcd561391b2cc6a73dd2c5", "patch": "@@ -159,11 +159,11 @@ pub macro run_passes(\n     $tcx:ident,\n     $mir:ident,\n     $def_id:ident,\n-    $suite_index:expr,\n     $mir_phase:expr;\n     $($pass:expr,)*\n ) {{\n-    let suite_index: usize = $suite_index;\n+    let phase_index = $mir_phase.phase_index();\n+\n     let run_passes = |mir: &mut _, promoted| {\n         let mir: &mut Mir<'_> = mir;\n \n@@ -178,7 +178,7 @@ pub macro run_passes(\n         let mut index = 0;\n         let mut run_pass = |pass: &dyn MirPass| {\n             let run_hooks = |mir: &_, index, is_after| {\n-                dump_mir::on_mir_pass($tcx, &format_args!(\"{:03}-{:03}\", suite_index, index),\n+                dump_mir::on_mir_pass($tcx, &format_args!(\"{:03}-{:03}\", phase_index, index),\n                                       &pass.name(), source, mir, is_after);\n             };\n             run_hooks(mir, index, false);\n@@ -207,7 +207,7 @@ fn mir_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx Stea\n     let _ = tcx.unsafety_check_result(def_id);\n \n     let mut mir = tcx.mir_built(def_id).steal();\n-    run_passes![tcx, mir, def_id, 0, MirPhase::Const;\n+    run_passes![tcx, mir, def_id, MirPhase::Const;\n         // Remove all `EndRegion` statements that are not involved in borrows.\n         cleanup_post_borrowck::CleanEndRegions,\n \n@@ -229,7 +229,7 @@ fn mir_validated<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n     }\n \n     let mut mir = tcx.mir_const(def_id).steal();\n-    run_passes![tcx, mir, def_id, 1, MirPhase::Validated;\n+    run_passes![tcx, mir, def_id, MirPhase::Validated;\n         // What we need to run borrowck etc.\n         qualify_consts::QualifyAndPromoteConstants,\n         simplify::SimplifyCfg::new(\"qualify-consts\"),\n@@ -247,7 +247,7 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n     }\n \n     let mut mir = tcx.mir_validated(def_id).steal();\n-    run_passes![tcx, mir, def_id, 2, MirPhase::Optimized;\n+    run_passes![tcx, mir, def_id, MirPhase::Optimized;\n         // Remove all things not needed by analysis\n         no_landing_pads::NoLandingPads,\n         simplify_branches::SimplifyBranches::new(\"initial\"),"}]}