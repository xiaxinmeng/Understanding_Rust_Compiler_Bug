{"sha": "ed3164baf010592dda34da57c28fa8ae5e6c2ca6", "node_id": "C_kwDOAAsO6NoAKGVkMzE2NGJhZjAxMDU5MmRkYTM0ZGE1N2MyOGZhOGFlNWU2YzJjYTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-08T14:10:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-08T14:10:12Z"}, "message": "Auto merge of #96770 - flip1995:fix-trait-type-in-bounds, r=cjgillot\n\nTrack if a where bound comes from a impl Trait desugar\n\nWith https://github.com/rust-lang/rust/pull/93803 `impl Trait` function arguments get desugared to hidden where bounds. However, Clippy needs to know if a bound was originally a `impl Trait` or an actual bound. This adds a field to the `WhereBoundPredicate` struct to keep track of this information during AST->HIR lowering.\n\nr? `@cjgillot`\n\ncc `@estebank` (as the reviewer of #93803)", "tree": {"sha": "23856ce2b2ca2384a8436c64770187144b14fef5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23856ce2b2ca2384a8436c64770187144b14fef5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed3164baf010592dda34da57c28fa8ae5e6c2ca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed3164baf010592dda34da57c28fa8ae5e6c2ca6", "html_url": "https://github.com/rust-lang/rust/commit/ed3164baf010592dda34da57c28fa8ae5e6c2ca6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fbd92d0b95d847c68948d8dbbfaccb470db4f92", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fbd92d0b95d847c68948d8dbbfaccb470db4f92", "html_url": "https://github.com/rust-lang/rust/commit/8fbd92d0b95d847c68948d8dbbfaccb470db4f92"}, {"sha": "dd1ff405e3a059836ffceee8490a630c4b9078d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd1ff405e3a059836ffceee8490a630c4b9078d3", "html_url": "https://github.com/rust-lang/rust/commit/dd1ff405e3a059836ffceee8490a630c4b9078d3"}], "stats": {"total": 74, "additions": 40, "deletions": 34}, "files": [{"sha": "cf97b270ed8f9779fb7d3c001b6ef3d5b0197abe", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=ed3164baf010592dda34da57c28fa8ae5e6c2ca6", "patch": "@@ -11,6 +11,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n+use rustc_hir::PredicateOrigin;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_session::utils::NtToTokenstream;\n use rustc_session::Session;\n@@ -1346,7 +1347,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let mut predicates = SmallVec::new();\n         predicates.extend(generics.params.iter().filter_map(|param| {\n             let bounds = self.lower_param_bounds(&param.bounds, itctx.reborrow());\n-            self.lower_generic_bound_predicate(param.ident, param.id, &param.kind, bounds)\n+            self.lower_generic_bound_predicate(\n+                param.ident,\n+                param.id,\n+                &param.kind,\n+                bounds,\n+                PredicateOrigin::GenericParam,\n+            )\n         }));\n         predicates.extend(\n             generics\n@@ -1380,6 +1387,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         id: NodeId,\n         kind: &GenericParamKind,\n         bounds: &'hir [hir::GenericBound<'hir>],\n+        origin: PredicateOrigin,\n     ) -> Option<hir::WherePredicate<'hir>> {\n         // Do not create a clause if we do not have anything inside it.\n         if bounds.is_empty() {\n@@ -1419,7 +1427,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     bounds,\n                     span,\n                     bound_generic_params: &[],\n-                    in_where_clause: false,\n+                    origin,\n                 }))\n             }\n             GenericParamKind::Lifetime => {\n@@ -1458,7 +1466,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     )\n                 })),\n                 span: self.lower_span(span),\n-                in_where_clause: true,\n+                origin: PredicateOrigin::WhereClause,\n             }),\n             WherePredicate::RegionPredicate(WhereRegionPredicate {\n                 ref lifetime,"}, {"sha": "c143266f6c1de7921a52101ee312e2a243f041db", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=ed3164baf010592dda34da57c28fa8ae5e6c2ca6", "patch": "@@ -1298,6 +1298,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             def_node_id,\n                             &GenericParamKind::Type { default: None },\n                             hir_bounds,\n+                            hir::PredicateOrigin::ImplTrait,\n                         ) {\n                             in_band_ty_bounds.push(preds)\n                         }"}, {"sha": "4d4d4a28499af439e1a881202a6b305a2a1f4993", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=ed3164baf010592dda34da57c28fa8ae5e6c2ca6", "patch": "@@ -706,7 +706,7 @@ impl<'hir> WherePredicate<'hir> {\n \n     pub fn in_where_clause(&self) -> bool {\n         match self {\n-            WherePredicate::BoundPredicate(p) => p.in_where_clause,\n+            WherePredicate::BoundPredicate(p) => p.origin == PredicateOrigin::WhereClause,\n             WherePredicate::RegionPredicate(p) => p.in_where_clause,\n             WherePredicate::EqPredicate(_) => false,\n         }\n@@ -721,11 +721,19 @@ impl<'hir> WherePredicate<'hir> {\n     }\n }\n \n+#[derive(Debug, HashStable_Generic, PartialEq, Eq)]\n+pub enum PredicateOrigin {\n+    WhereClause,\n+    GenericParam,\n+    ImplTrait,\n+}\n+\n /// A type bound (e.g., `for<'c> Foo: Send + Clone + 'c`).\n #[derive(Debug, HashStable_Generic)]\n pub struct WhereBoundPredicate<'hir> {\n     pub span: Span,\n-    pub in_where_clause: bool,\n+    /// Origin of the predicate.\n+    pub origin: PredicateOrigin,\n     /// Any generics from a `for` binding.\n     pub bound_generic_params: &'hir [GenericParam<'hir>],\n     /// The type being bounded."}, {"sha": "524fb6556b99546c5e3b8595c69e0fb88eec284f", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=ed3164baf010592dda34da57c28fa8ae5e6c2ca6", "patch": "@@ -36,7 +36,7 @@ use rustc_feature::{deprecated_attributes, AttributeGate, BuiltinAttribute, Gate\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, LocalDefIdSet, CRATE_DEF_ID};\n-use rustc_hir::{ForeignItemKind, GenericParamKind, HirId, PatKind};\n+use rustc_hir::{ForeignItemKind, GenericParamKind, HirId, PatKind, PredicateOrigin};\n use rustc_index::vec::Idx;\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::ty::layout::{LayoutError, LayoutOf};\n@@ -2226,7 +2226,7 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n                                     Self::lifetimes_outliving_type(inferred_outlives, index),\n                                     &predicate.bounds,\n                                     predicate.span,\n-                                    predicate.in_where_clause,\n+                                    predicate.origin == PredicateOrigin::WhereClause,\n                                 )\n                             }\n                             _ => {"}, {"sha": "7cc96183d6da48cb4eb6bc41b946023b29a66133", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ed3164baf010592dda34da57c28fa8ae5e6c2ca6", "patch": "@@ -16,6 +16,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::PredicateOrigin;\n use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n use rustc_middle::middle::resolve_lifetime as rl;\n use rustc_middle::ty::fold::TypeFolder;\n@@ -493,7 +494,7 @@ fn clean_generic_param(\n             let bounds = if let Some(generics) = generics {\n                 generics\n                     .bounds_for_param(did)\n-                    .filter(|bp| !bp.in_where_clause)\n+                    .filter(|bp| bp.origin != PredicateOrigin::WhereClause)\n                     .flat_map(|bp| bp.bounds)\n                     .filter_map(|x| x.clean(cx))\n                     .collect()"}, {"sha": "34d1555049da58bbe21e562bec1cd0b3c123a9a6", "filename": "src/tools/clippy/clippy_lints/src/lib.register_nursery.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_nursery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_nursery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_nursery.rs?ref=ed3164baf010592dda34da57c28fa8ae5e6c2ca6", "patch": "@@ -29,8 +29,6 @@ store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n     LintId::of(strings::STRING_LIT_AS_BYTES),\n     LintId::of(suspicious_operation_groupings::SUSPICIOUS_OPERATION_GROUPINGS),\n     LintId::of(trailing_empty_array::TRAILING_EMPTY_ARRAY),\n-    LintId::of(trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS),\n-    LintId::of(trait_bounds::TYPE_REPETITION_IN_BOUNDS),\n     LintId::of(transmute::TRANSMUTE_UNDEFINED_REPR),\n     LintId::of(transmute::USELESS_TRANSMUTE),\n     LintId::of(use_self::USE_SELF),"}, {"sha": "63232fd41130538765c6b4f547c8c9ba7e9d9ab8", "filename": "src/tools/clippy/clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=ed3164baf010592dda34da57c28fa8ae5e6c2ca6", "patch": "@@ -84,6 +84,8 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED),\n     LintId::of(stable_sort_primitive::STABLE_SORT_PRIMITIVE),\n     LintId::of(strings::STRING_ADD_ASSIGN),\n+    LintId::of(trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS),\n+    LintId::of(trait_bounds::TYPE_REPETITION_IN_BOUNDS),\n     LintId::of(transmute::TRANSMUTE_PTR_TO_PTR),\n     LintId::of(types::LINKEDLIST),\n     LintId::of(types::OPTION_OPTION),"}, {"sha": "51d5b510ab93053e155d1b6ec3cbb0ade5ceb101", "filename": "src/tools/clippy/clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs?ref=ed3164baf010592dda34da57c28fa8ae5e6c2ca6", "patch": "@@ -9,8 +9,8 @@ use rustc_hir::intravisit::{\n use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n     BareFnTy, BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, Impl, ImplItem,\n-    ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, ParamName, PolyTraitRef, TraitBoundModifier,\n-    TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n+    ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, ParamName, PolyTraitRef, PredicateOrigin,\n+    TraitBoundModifier, TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter as middle_nested_filter;\n@@ -145,7 +145,7 @@ fn check_fn_inner<'tcx>(\n         .filter(|param| matches!(param.kind, GenericParamKind::Type { .. }));\n     for typ in types {\n         for pred in generics.bounds_for_param(cx.tcx.hir().local_def_id(typ.hir_id)) {\n-            if pred.in_where_clause {\n+            if pred.origin == PredicateOrigin::WhereClause {\n                 // has_where_lifetimes checked that this predicate contains no lifetime.\n                 continue;\n             }"}, {"sha": "911da3997ae451160af7106915e89e3a1243c093", "filename": "src/tools/clippy/clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=ed3164baf010592dda34da57c28fa8ae5e6c2ca6", "patch": "@@ -8,7 +8,8 @@ use rustc_data_structures::unhash::UnhashMap;\n use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n use rustc_hir::{\n-    GenericBound, Generics, Item, ItemKind, Node, Path, PathSegment, QPath, TraitItem, Ty, TyKind, WherePredicate,\n+    GenericBound, Generics, Item, ItemKind, Node, Path, PathSegment, PredicateOrigin, QPath, TraitItem, Ty, TyKind,\n+    WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -35,7 +36,7 @@ declare_clippy_lint! {\n     /// ```\n     #[clippy::version = \"1.38.0\"]\n     pub TYPE_REPETITION_IN_BOUNDS,\n-    nursery,\n+    pedantic,\n     \"Types are repeated unnecessary in trait bounds use `+` instead of using `T: _, T: _`\"\n }\n \n@@ -65,7 +66,7 @@ declare_clippy_lint! {\n     /// ```\n     #[clippy::version = \"1.47.0\"]\n     pub TRAIT_DUPLICATION_IN_BOUNDS,\n-    nursery,\n+    pedantic,\n     \"Check if the same trait bounds are specified twice during a function declaration\"\n }\n \n@@ -95,6 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n         for predicate in item.generics.predicates {\n             if_chain! {\n                 if let WherePredicate::BoundPredicate(ref bound_predicate) = predicate;\n+                if bound_predicate.origin != PredicateOrigin::ImplTrait;\n                 if !bound_predicate.span.from_expansion();\n                 if let TyKind::Path(QPath::Resolved(_, Path { segments, .. })) = bound_predicate.bounded_ty.kind;\n                 if let Some(PathSegment {\n@@ -168,6 +170,7 @@ impl TraitBounds {\n         for bound in gen.predicates {\n             if_chain! {\n                 if let WherePredicate::BoundPredicate(ref p) = bound;\n+                if p.origin != PredicateOrigin::ImplTrait;\n                 if p.bounds.len() as u64 <= self.max_trait_bounds;\n                 if !p.span.from_expansion();\n                 if let Some(ref v) = map.insert(\n@@ -223,6 +226,7 @@ fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n     for predicate in gen.predicates {\n         if_chain! {\n             if let WherePredicate::BoundPredicate(ref bound_predicate) = predicate;\n+            if bound_predicate.origin != PredicateOrigin::ImplTrait;\n             if !bound_predicate.span.from_expansion();\n             if let TyKind::Path(QPath::Resolved(_, Path { segments, .. })) = bound_predicate.bounded_ty.kind;\n             if let Some(segment) = segments.first();"}, {"sha": "6f8c8e47dfbf1fe56589a06f80017513e69167e8", "filename": "src/tools/clippy/tests/ui/trait_duplication_in_bounds.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftrait_duplication_in_bounds.stderr?ref=ed3164baf010592dda34da57c28fa8ae5e6c2ca6", "patch": "@@ -67,13 +67,5 @@ LL |         Self: Iterator<Item = Foo>,\n    |\n    = help: consider removing this trait bound\n \n-error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds.rs:99:23\n-   |\n-LL | fn impl_trait(_: impl AsRef<str>, _: impl AsRef<str>) {}\n-   |                       ^^^^^^^^^^\n-   |\n-   = help: consider removing this trait bound\n-\n-error: aborting due to 9 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "148c19c7d0701dc2910de718d175a03122d26e03", "filename": "src/tools/clippy/tests/ui/type_repetition_in_bounds.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftype_repetition_in_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed3164baf010592dda34da57c28fa8ae5e6c2ca6/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftype_repetition_in_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftype_repetition_in_bounds.stderr?ref=ed3164baf010592dda34da57c28fa8ae5e6c2ca6", "patch": "@@ -19,13 +19,5 @@ LL |     Self: Copy + Default + Ord,\n    |\n    = help: consider combining the bounds: `Self: Clone + Copy + Default + Ord`\n \n-error: this type has already been used as a bound predicate\n-  --> $DIR/type_repetition_in_bounds.rs:83:43\n-   |\n-LL | fn impl_trait(_: impl AsRef<str>, _: impl AsRef<str>) {}\n-   |                                           ^^^^^^^^^^\n-   |\n-   = help: consider combining the bounds: `impl AsRef<str>: AsRef<str> + AsRef<str>`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}]}