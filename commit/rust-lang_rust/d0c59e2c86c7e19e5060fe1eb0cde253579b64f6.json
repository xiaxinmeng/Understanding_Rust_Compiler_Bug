{"sha": "d0c59e2c86c7e19e5060fe1eb0cde253579b64f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYzU5ZTJjODZjN2UxOWU1MDYwZmUxZWIwY2RlMjUzNTc5YjY0ZjY=", "commit": {"author": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-06-11T23:29:12Z"}, "committer": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-06-12T12:04:09Z"}, "message": "add tests for $crate in QSelf paths", "tree": {"sha": "89460d8c0885c0e6f577411230b8a726868829c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89460d8c0885c0e6f577411230b8a726868829c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0c59e2c86c7e19e5060fe1eb0cde253579b64f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0c59e2c86c7e19e5060fe1eb0cde253579b64f6", "html_url": "https://github.com/rust-lang/rust/commit/d0c59e2c86c7e19e5060fe1eb0cde253579b64f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0c59e2c86c7e19e5060fe1eb0cde253579b64f6/comments", "author": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b202bebdeea73c32c69592fcb60ff2afaa93d354", "url": "https://api.github.com/repos/rust-lang/rust/commits/b202bebdeea73c32c69592fcb60ff2afaa93d354", "html_url": "https://github.com/rust-lang/rust/commit/b202bebdeea73c32c69592fcb60ff2afaa93d354"}], "stats": {"total": 105, "additions": 101, "deletions": 4}, "files": [{"sha": "a6c9817f24714ad30d066ef0f6caa0c2909e3f53", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/double.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0c59e2c86c7e19e5060fe1eb0cde253579b64f6/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fdouble.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0c59e2c86c7e19e5060fe1eb0cde253579b64f6/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fdouble.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fdouble.rs?ref=d0c59e2c86c7e19e5060fe1eb0cde253579b64f6", "patch": "@@ -16,6 +16,8 @@ extern crate proc_macro;\n \n use proc_macro::TokenStream;\n \n+// Outputs another copy of the struct.  Useful for testing the tokens\n+// seen by the proc_macro.\n #[proc_macro_derive(Double)]\n pub fn derive(input: TokenStream) -> TokenStream {\n     format!(\"mod foo {{ {} }}\", input.to_string()).parse().unwrap()"}, {"sha": "030c53b3e6f320bf5ab8542192bbb0c71a067159", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/external-crate-var.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d0c59e2c86c7e19e5060fe1eb0cde253579b64f6/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fexternal-crate-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0c59e2c86c7e19e5060fe1eb0cde253579b64f6/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fexternal-crate-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fexternal-crate-var.rs?ref=d0c59e2c86c7e19e5060fe1eb0cde253579b64f6", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct ExternFoo;\n+\n+pub trait ExternTrait {\n+    const CONST: u32;\n+    type Assoc;\n+}\n+\n+impl ExternTrait for ExternFoo {\n+    const CONST: u32 = 0;\n+    type Assoc = ExternFoo;\n+}\n+\n+#[macro_export]\n+macro_rules! external { () => {\n+    mod bar {\n+        #[derive(Double)]\n+        struct Bar($crate::ExternFoo);\n+    }\n+\n+    mod qself {\n+        #[derive(Double)]\n+        struct QSelf(<$crate::ExternFoo as $crate::ExternTrait>::Assoc);\n+    }\n+\n+    mod qself_recurse {\n+        #[derive(Double)]\n+        struct QSelfRecurse(<\n+            <$crate::ExternFoo as $crate::ExternTrait>::Assoc\n+            as $crate::ExternTrait>::Assoc\n+        );\n+    }\n+\n+    mod qself_in_const {\n+        #[derive(Double)]\n+        #[repr(u32)]\n+        enum QSelfInConst {\n+            Variant = <$crate::ExternFoo as $crate::ExternTrait>::CONST,\n+        }\n+    }\n+} }\n+"}, {"sha": "41c15195bc8402e5e667b734fee17806db2abc29", "filename": "src/test/run-pass-fulldeps/proc-macro/crate-var.rs", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d0c59e2c86c7e19e5060fe1eb0cde253579b64f6/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcrate-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0c59e2c86c7e19e5060fe1eb0cde253579b64f6/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcrate-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fcrate-var.rs?ref=d0c59e2c86c7e19e5060fe1eb0cde253579b64f6", "patch": "@@ -9,19 +9,63 @@\n // except according to those terms.\n \n // aux-build:double.rs\n+// aux-build:external-crate-var.rs\n // ignore-stage1\n \n #![allow(unused)]\n \n #[macro_use]\n extern crate double;\n+#[macro_use]\n+extern crate external_crate_var;\n \n struct Foo;\n \n-macro_rules! m { () => {\n-    #[derive(Double)]\n-    struct Bar($crate::Foo);\n+trait Trait {\n+    const CONST: u32;\n+    type Assoc;\n+}\n+\n+impl Trait for Foo {\n+    const CONST: u32 = 0;\n+    type Assoc = Foo;\n+}\n+\n+macro_rules! local { () => {\n+    // derive_Double outputs secondary copies of each definition\n+    // to test what the proc_macro sees.\n+    mod bar {\n+        #[derive(Double)]\n+        struct Bar($crate::Foo);\n+    }\n+\n+    mod qself {\n+        #[derive(Double)]\n+        struct QSelf(<::Foo as $crate::Trait>::Assoc);\n+    }\n+\n+    mod qself_recurse {\n+        #[derive(Double)]\n+        struct QSelfRecurse(<<$crate::Foo as $crate::Trait>::Assoc as $crate::Trait>::Assoc);\n+    }\n+\n+    mod qself_in_const {\n+        #[derive(Double)]\n+        #[repr(u32)]\n+        enum QSelfInConst {\n+            Variant = <::Foo as $crate::Trait>::CONST,\n+        }\n+    }\n } }\n-m!();\n+\n+mod local {\n+    local!();\n+}\n+\n+// and now repeat the above tests, using a macro defined in another crate\n+\n+mod external {\n+    external!{}\n+}\n \n fn main() {}"}]}