{"sha": "707cd0281da28596f6f4b5e9cdf0af4f17bf50f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwN2NkMDI4MWRhMjg1OTZmNmY0YjVlOWNkZjBhZjRmMTdiZjUwZjA=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-04-22T18:08:47Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-28T20:26:19Z"}, "message": "Fixed bug in typeck that wasn't filling in anns for stmts\n\n(needed for typestate_check).\n\nAlso changed a (log; fail) to (log_err; fail) in typestate_check,\nand added some more logging funs in util.common.", "tree": {"sha": "ee8a3221c24c1069e738ef6a02d59018c4e87f09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee8a3221c24c1069e738ef6a02d59018c4e87f09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/707cd0281da28596f6f4b5e9cdf0af4f17bf50f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/707cd0281da28596f6f4b5e9cdf0af4f17bf50f0", "html_url": "https://github.com/rust-lang/rust/commit/707cd0281da28596f6f4b5e9cdf0af4f17bf50f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/707cd0281da28596f6f4b5e9cdf0af4f17bf50f0/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0190ebfe0748f28c290eb4759a03ffbd416cbeac", "url": "https://api.github.com/repos/rust-lang/rust/commits/0190ebfe0748f28c290eb4759a03ffbd416cbeac", "html_url": "https://github.com/rust-lang/rust/commit/0190ebfe0748f28c290eb4759a03ffbd416cbeac"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "0f96c3eb6b76740539debd1ae36fdb081dfd69f6", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/707cd0281da28596f6f4b5e9cdf0af4f17bf50f0/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707cd0281da28596f6f4b5e9cdf0af4f17bf50f0/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=707cd0281da28596f6f4b5e9cdf0af4f17bf50f0", "patch": "@@ -2623,22 +2623,25 @@ fn check_stmt(&@fn_ctxt fcx, &@ast.stmt stmt) -> @ast.stmt {\n                 case (ast.decl_local(_)) {\n                     auto decl_1 = check_decl_local(fcx, decl);\n                     ret @fold.respan[ast.stmt_](stmt.span,\n-                                                ast.stmt_decl(decl_1, a));\n+                           ast.stmt_decl(decl_1, plain_ann(fcx.ccx.tystore)));\n                 }\n \n                 case (ast.decl_item(_)) {\n                     // Ignore for now. We'll return later.\n+                    ret @fold.respan[ast.stmt_](stmt.span,\n+                           ast.stmt_decl(decl, plain_ann(fcx.ccx.tystore)));\n                 }\n             }\n \n-            ret stmt;\n+            //         ret stmt;\n         }\n \n         case (ast.stmt_expr(?expr,?a)) {\n             auto expr_t = check_expr(fcx, expr);\n             expr_t = Pushdown.pushdown_expr(fcx, expr_ty(fcx.ccx.tcx, expr_t),\n                                             expr_t);\n-            ret @fold.respan[ast.stmt_](stmt.span, ast.stmt_expr(expr_t, a));\n+            ret @fold.respan[ast.stmt_](stmt.span,\n+                   ast.stmt_expr(expr_t, plain_ann(fcx.ccx.tystore)));\n         }\n     }\n "}, {"sha": "7ddfa94b1d055bc3453e58eefb5841f7384370f4", "filename": "src/comp/middle/typestate_check.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/707cd0281da28596f6f4b5e9cdf0af4f17bf50f0/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707cd0281da28596f6f4b5e9cdf0af4f17bf50f0/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs?ref=707cd0281da28596f6f4b5e9cdf0af4f17bf50f0", "patch": "@@ -105,6 +105,8 @@ import util.common.log_expr_err;\n import util.common.log_stmt;\n import util.common.log_block;\n import util.common.log_stmt_err;\n+import util.common.log_fn_err;\n+import util.common.log_fn;\n import util.common.log_block_err;\n import util.common.has_nonlocal_exits;\n import util.common.decl_lhs;\n@@ -889,11 +891,11 @@ fn find_pre_post_expr(&fn_info_map fm, &fn_info enclosing, &expr e) -> () {\n     fn pp_one(&@expr e) -> pre_and_post {\n         ret expr_pp(*e);\n     }\n-    /*\n+    \n         log(\"find_pre_post_expr (num_locals =\" +\n              uistr(num_local_vars) + \"):\");\n-          log_expr(e);\n-    */\n+        log_expr(e);\n+    \n     alt (e.node) {\n         case (expr_call(?operator, ?operands, ?a)) {\n             auto args = _vec.clone[@expr](operands);\n@@ -1201,6 +1203,9 @@ fn gen_poststate(&fn_info enclosing, &ann a, def_id id) -> bool {\n \n fn find_pre_post_stmt(fn_info_map fm, &fn_info enclosing, &ast.stmt s)\n     -> () {\n+    log(\"stmt =\");\n+    log_stmt(s);\n+\n   auto num_local_vars = num_locals(enclosing);\n   alt(s.node) {\n     case(ast.stmt_decl(?adecl, ?a)) {\n@@ -1311,6 +1316,9 @@ fn find_pre_post_fn(&fn_info_map fm, &fn_info fi, &_fn f) -> () {\n fn check_item_fn(&fn_info_map fm, &span sp, ident i, &ast._fn f,\n                  vec[ast.ty_param] ty_params, def_id id, ann a) -> @item {\n \n+    log(\"check_item_fn:\");\n+    log_fn(f, i, ty_params);\n+\n   check (fm.contains_key(id));\n   find_pre_post_fn(fm, fm.get(id), f);  \n \n@@ -1413,7 +1421,7 @@ fn set_pre_and_post(&ann a, pre_and_post pp) -> () {\n             set_postcondition(t, pp.postcondition);\n         }\n         case (ann_none) {\n-            log(\"set_pre_and_post: expected an ann_type here\");\n+            log_err(\"set_pre_and_post: expected an ann_type here\");\n             fail;\n         }\n     }\n@@ -1749,7 +1757,7 @@ fn find_pre_post_state_expr(&fn_info_map fm, &fn_info enclosing,\n                 changed = find_pre_post_state_block(fm, enclosing, e_post,\n                                                     an_alt.block) || changed;\n                 changed = intersect(a_post, block_poststate(an_alt.block))\n-                    || changed;\n+                    || changed; \n             }\n         }\n         else {"}, {"sha": "7484b4cf76f49412a664c74cbc157d4460618dec", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/707cd0281da28596f6f4b5e9cdf0af4f17bf50f0/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707cd0281da28596f6f4b5e9cdf0af4f17bf50f0/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=707cd0281da28596f6f4b5e9cdf0af4f17bf50f0", "patch": "@@ -16,6 +16,7 @@ import std.io.string_writer;\n import pretty.pprust.print_block;\n import pretty.pprust.print_expr;\n import pretty.pprust.print_decl;\n+import pretty.pprust.print_fn;\n import pretty.pp.mkstate;\n \n type filename = str;\n@@ -169,6 +170,25 @@ fn log_ann(&ast.ann a) -> () {\n     }\n }\n \n+fn fun_to_str(&ast._fn f, str name, vec[ast.ty_param] params) -> str {\n+ let str_writer s = string_writer();\n+  auto out_ = mkstate(s.get_writer(), 80u);\n+  auto out = @rec(s=out_,\n+                  comments=none[vec[front.lexer.cmnt]],\n+                  mutable cur_cmnt=0u);\n+\n+  print_fn(out, f.decl, name, params);\n+  ret s.get_str();\n+}\n+\n+fn log_fn(&ast._fn f, str name, vec[ast.ty_param] params) -> () {\n+    log(fun_to_str(f, name, params));\n+}\n+\n+fn log_fn_err(&ast._fn f, str name, vec[ast.ty_param] params) -> () {\n+    log_err(fun_to_str(f, name, params));\n+}\n+\n fn stmt_to_str(&ast.stmt st) -> str {\n   let str_writer s = string_writer();\n   auto out_ = mkstate(s.get_writer(), 80u);"}]}