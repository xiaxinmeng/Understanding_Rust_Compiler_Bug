{"sha": "4ab7c4d99b469ae75a03ac0f987896022b218581", "node_id": "C_kwDOAAsO6NoAKDRhYjdjNGQ5OWI0NjlhZTc1YTAzYWMwZjk4Nzg5NjAyMmIyMTg1ODE", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-22T11:46:41Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-22T12:08:32Z"}, "message": "removed prints", "tree": {"sha": "97eea102c126c36076d02040cf378a1c481d3a42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97eea102c126c36076d02040cf378a1c481d3a42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ab7c4d99b469ae75a03ac0f987896022b218581", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ab7c4d99b469ae75a03ac0f987896022b218581", "html_url": "https://github.com/rust-lang/rust/commit/4ab7c4d99b469ae75a03ac0f987896022b218581", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ab7c4d99b469ae75a03ac0f987896022b218581/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96ab4c6e6cad30b8ae2fd3db07cb5eea764db011", "url": "https://api.github.com/repos/rust-lang/rust/commits/96ab4c6e6cad30b8ae2fd3db07cb5eea764db011", "html_url": "https://github.com/rust-lang/rust/commit/96ab4c6e6cad30b8ae2fd3db07cb5eea764db011"}], "stats": {"total": 37, "additions": 6, "deletions": 31}, "files": [{"sha": "3ceffbba97f68e881e7fbaa77048cecb982d9419", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4ab7c4d99b469ae75a03ac0f987896022b218581/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab7c4d99b469ae75a03ac0f987896022b218581/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=4ab7c4d99b469ae75a03ac0f987896022b218581", "patch": "@@ -69,16 +69,12 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext) -> Option\n         return None;\n     }\n \n-    println!(\"initial node: {:?}\", node);\n-\n     let node = match node {\n         syntax::NodeOrToken::Node(n) => n,\n         syntax::NodeOrToken::Token(t) => t.parent()?,\n     };\n \n-    println!(\"next node: {:?}\", node);\n     let body = extraction_target(&node, range)?;\n-    println!(\"body: {:?}\", body);\n     let container_info = body.analyze_container(&ctx.sema)?;\n \n     let (locals_used, self_param) = body.analyze(&ctx.sema);\n@@ -187,8 +183,6 @@ fn extraction_target(node: &SyntaxNode, selection_range: TextRange) -> Option<Fu\n         };\n     }\n \n-    println!(\"node: {:?}\", node);\n-\n     // Covering element returned the parent block of one or multiple statements that have been selected\n     if let Some(stmt_list) = ast::StmtList::cast(node.clone()) {\n         if let Some(block_expr) = stmt_list.syntax().parent().and_then(ast::BlockExpr::cast) {\n@@ -198,8 +192,6 @@ fn extraction_target(node: &SyntaxNode, selection_range: TextRange) -> Option<Fu\n         }\n \n         // Extract the full statements.\n-        println!(\"stmt_list: {:?}\", stmt_list);\n-        println!(\"selection_range: {:?}\", selection_range);\n         return Some(FunctionBody::from_range(stmt_list, selection_range));\n     }\n \n@@ -486,16 +478,12 @@ impl FunctionBody {\n \n     fn from_range(parent: ast::StmtList, selected: TextRange) -> FunctionBody {\n         let full_body = parent.syntax().children_with_tokens();\n-        for st in parent.syntax().children_with_tokens() {\n-            println!(\"Statement: {:?}\", &st);\n-        }\n \n         let mut text_range = full_body\n             .map(|stmt| stmt.text_range())\n             .filter(|&stmt| selected.intersect(stmt).filter(|it| !it.is_empty()).is_some())\n             .reduce(|acc, stmt| acc.cover(stmt));\n \n-        println!(\"from_range text_range first: {:?}\", text_range);\n         if let Some(tail_range) = parent\n             .tail_expr()\n             .map(|it| it.syntax().text_range())\n@@ -505,8 +493,6 @@ impl FunctionBody {\n                 Some(text_range) => text_range.cover(tail_range),\n                 None => tail_range,\n             });\n-\n-            println!(\"from_range text_range second: {:?}\", text_range);\n         }\n         Self::Span { parent, text_range: text_range.unwrap_or(selected) }\n     }\n@@ -1438,7 +1424,6 @@ fn make_body(\n         FlowHandler::from_ret_ty(fun, &ret_ty)\n     };\n \n-    println!(\"making body: {:?}\", fun.body);\n     let block = match &fun.body {\n         FunctionBody::Expr(expr) => {\n             let expr = rewrite_body_segment(ctx, &fun.params, &handler, expr.syntax());\n@@ -1462,17 +1447,11 @@ fn make_body(\n                 .syntax()\n                 .children_with_tokens()\n                 .filter(|it| text_range.contains_range(it.text_range()))\n-                .map(|it| match it {\n-                    syntax::NodeOrToken::Node(n) => {\n-                        println!(\"Found node: {:?}\", n);\n-                        let node_rewritten = rewrite_body_segment(ctx, &fun.params, &handler, &n);\n-\n-                        syntax::NodeOrToken::Node(node_rewritten)\n-                    }\n-                    syntax::NodeOrToken::Token(t) => {\n-                        println!(\"Found token: {:?}\", t);\n-                        syntax::NodeOrToken::Token(t)\n-                    }\n+                .map(|it| match &it {\n+                    syntax::NodeOrToken::Node(n) => syntax::NodeOrToken::Node(\n+                        rewrite_body_segment(ctx, &fun.params, &handler, &n),\n+                    ),\n+                    syntax::NodeOrToken::Token(_) => it,\n                 })\n                 .collect();\n \n@@ -1520,10 +1499,6 @@ fn make_body(\n                 .collect::<Vec<SyntaxElement>>();\n             let tail_expr = tail_expr.map(|expr| expr.dedent(old_indent).indent(body_indent));\n \n-            for element in &elements {\n-                println!(\"element: {:?}\", element);\n-            }\n-\n             make::hacky_block_expr_with_comments(elements, tail_expr)\n         }\n     };"}, {"sha": "8a1bcebbf678467f8ad2283e31791afcfcb7a479", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ab7c4d99b469ae75a03ac0f987896022b218581/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ab7c4d99b469ae75a03ac0f987896022b218581/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=4ab7c4d99b469ae75a03ac0f987896022b218581", "patch": "@@ -331,7 +331,7 @@ pub fn block_expr(\n \n /// Ideally this function wouldn't exist since it involves manual indenting.\n /// It differs from `make::block_expr` by also supporting comments.\n-/// \n+///\n /// FIXME: replace usages of this with the mutable syntax tree API\n pub fn hacky_block_expr_with_comments(\n     elements: impl IntoIterator<Item = crate::SyntaxElement>,"}]}