{"sha": "ba09ed520864b5c64f56aa2311ee18fa72a3ceb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMDllZDUyMDg2NGI1YzY0ZjU2YWEyMzExZWUxOGZhNzJhM2NlYjY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-11-04T17:36:30Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-11-04T17:36:30Z"}, "message": "Update test to force error under NLL.\n\nIn each of the three cases in this test, there is a mutable borrow\nof some field of the union and then a shared borrow of some other field\nimmediately following.\n\nUnder NLL, the mutable borrow is killed straight away as it isn't\nused later - therefore not causing a conflict with the shared borrow.\nThis commit adds a use of the first mutable borrow to force the intended\nerrors to appear under NLL.", "tree": {"sha": "4ab647f5dbda73f6ee811e8636e5a12ed5afae09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ab647f5dbda73f6ee811e8636e5a12ed5afae09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba09ed520864b5c64f56aa2311ee18fa72a3ceb6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlvfLowACgkQAXYLT59T\n8VQiCg//W7YyGZZa7RvFrP0ikZA7nJ2M1J69Qnp3qtqx9omXnlh7pFZt03JzNXJY\nHxsh04M+GiL5/wrM/WdfsUCr8Xh/lk5iEavBy6Ppi0c5CpY8TLm1Hd1P7oX2rg4e\na+DB+3e11G6UUGTHb42gwvFv9Cbcv9tUE0rQZDTqrReyfriMDWp8AtXENkCT/0+p\nu3juV8M4Rf+VYvry5bPmZHQKh8dOhtfCnayC/J+danlqQ6OUWa7A5lTtZk5YCzZw\nsiUdSZa6TT2HYfaw5w6DhvpDycey+VGlGdMIz9FO8KklzBBRjv1iuGk54vDrPy0l\nDUeaMTvvlr0Lar6K/sRTHk+KsefLwSbYgNBN4otdkoKDGkJJXARp/eC5Ism4mlBW\nrx/S/O8zbKfz2BfkalCO7++FM6ydL0sNbenvV8/H62PFhOzpUn6BYXPymECBFRGv\nr9kLXsVKRRGxWblovW0/0X5YKacfvfaxEQGaCq5jKXVHFs/GDKuL7BaPU8yc2IkI\nZXkX14IdTwwJlveDkDlwTv42ooj3c6EVGCzQSyylviFTol0HGFVcbPmR+qKMxDnD\nKkRrR9LwfbflGSfkFXpeV6lQeD8ySEBjfb1/9pL7e2BBVCt54s/k3OKwUCBZcGvD\nSC315A6h5i+D9t4CnEKQZm7f5GWazaskm4e8GsB+2QAuaa1bV+Q=\n=A4OA\n-----END PGP SIGNATURE-----", "payload": "tree 4ab647f5dbda73f6ee811e8636e5a12ed5afae09\nparent 1854dde30a56a7fa135ec4f0be435d8de11ff1c1\nauthor David Wood <david@davidtw.co> 1541352990 +0100\ncommitter David Wood <david@davidtw.co> 1541352990 +0100\n\nUpdate test to force error under NLL.\n\nIn each of the three cases in this test, there is a mutable borrow\nof some field of the union and then a shared borrow of some other field\nimmediately following.\n\nUnder NLL, the mutable borrow is killed straight away as it isn't\nused later - therefore not causing a conflict with the shared borrow.\nThis commit adds a use of the first mutable borrow to force the intended\nerrors to appear under NLL.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba09ed520864b5c64f56aa2311ee18fa72a3ceb6", "html_url": "https://github.com/rust-lang/rust/commit/ba09ed520864b5c64f56aa2311ee18fa72a3ceb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba09ed520864b5c64f56aa2311ee18fa72a3ceb6/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1854dde30a56a7fa135ec4f0be435d8de11ff1c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1854dde30a56a7fa135ec4f0be435d8de11ff1c1", "html_url": "https://github.com/rust-lang/rust/commit/1854dde30a56a7fa135ec4f0be435d8de11ff1c1"}], "stats": {"total": 91, "additions": 65, "deletions": 26}, "files": [{"sha": "6b18aff9f6b830caa18e310f006a2a0832d78c69", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.nll.stderr", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ba09ed520864b5c64f56aa2311ee18fa72a3ceb6/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba09ed520864b5c64f56aa2311ee18fa72a3ceb6/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.nll.stderr?ref=ba09ed520864b5c64f56aa2311ee18fa72a3ceb6", "patch": "@@ -1,33 +1,64 @@\n+error[E0502]: cannot borrow `u.y` as immutable because it is also borrowed as mutable\n+  --> $DIR/union-borrow-move-parent-sibling.rs:25:13\n+   |\n+LL |     let a = &mut u.x.0;\n+   |             ---------- mutable borrow occurs here\n+LL |     let b = &u.y; //~ ERROR cannot borrow `u.y`\n+   |             ^^^^ immutable borrow occurs here\n+LL |     use_borrow(a);\n+   |                - mutable borrow later used here\n+\n error[E0382]: use of moved value: `u`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:29:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:32:13\n    |\n LL |     let a = u.x.0;\n    |             ----- value moved here\n-LL |     let a = u.y; //~ ERROR use of moved value: `u.y`\n+LL |     let b = u.y; //~ ERROR use of moved value: `u.y`\n    |             ^^^ value used here after move\n    |\n    = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait\n \n+error[E0502]: cannot borrow `u.y` as immutable because it is also borrowed as mutable\n+  --> $DIR/union-borrow-move-parent-sibling.rs:38:13\n+   |\n+LL |     let a = &mut (u.x.0).0;\n+   |             -------------- mutable borrow occurs here\n+LL |     let b = &u.y; //~ ERROR cannot borrow `u.y`\n+   |             ^^^^ immutable borrow occurs here\n+LL |     use_borrow(a);\n+   |                - mutable borrow later used here\n+\n error[E0382]: use of moved value: `u`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:41:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:45:13\n    |\n LL |     let a = (u.x.0).0;\n    |             --------- value moved here\n-LL |     let a = u.y; //~ ERROR use of moved value: `u.y`\n+LL |     let b = u.y; //~ ERROR use of moved value: `u.y`\n    |             ^^^ value used here after move\n    |\n    = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait\n \n+error[E0502]: cannot borrow `u.x` as immutable because it is also borrowed as mutable\n+  --> $DIR/union-borrow-move-parent-sibling.rs:51:13\n+   |\n+LL |     let a = &mut *u.y;\n+   |             --------- mutable borrow occurs here\n+LL |     let b = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n+   |             ^^^^ immutable borrow occurs here\n+LL |     use_borrow(a);\n+   |                - mutable borrow later used here\n+\n error[E0382]: use of moved value: `u`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:53:13\n+  --> $DIR/union-borrow-move-parent-sibling.rs:58:13\n    |\n LL |     let a = *u.y;\n    |             ---- value moved here\n-LL |     let a = u.x; //~ ERROR use of moved value: `u.x`\n+LL |     let b = u.x; //~ ERROR use of moved value: `u.x`\n    |             ^^^ value used here after move\n    |\n    = note: move occurs because `u` has type `U`, which does not implement the `Copy` trait\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0382`.\n+Some errors occurred: E0382, E0502.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "99a073b838ca91482e91eff5f9ad4174e8acd929", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ba09ed520864b5c64f56aa2311ee18fa72a3ceb6/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba09ed520864b5c64f56aa2311ee18fa72a3ceb6/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.rs?ref=ba09ed520864b5c64f56aa2311ee18fa72a3ceb6", "patch": "@@ -17,40 +17,45 @@ union U {\n     y: Box<Vec<u8>>,\n }\n \n+fn use_borrow<T>(_: &T) {}\n+\n unsafe fn parent_sibling_borrow() {\n     let mut u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n     let a = &mut u.x.0;\n-    let a = &u.y; //~ ERROR cannot borrow `u.y`\n+    let b = &u.y; //~ ERROR cannot borrow `u.y`\n+    use_borrow(a);\n }\n \n unsafe fn parent_sibling_move() {\n     let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n     let a = u.x.0;\n-    let a = u.y; //~ ERROR use of moved value: `u.y`\n+    let b = u.y; //~ ERROR use of moved value: `u.y`\n }\n \n unsafe fn grandparent_sibling_borrow() {\n     let mut u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n     let a = &mut (u.x.0).0;\n-    let a = &u.y; //~ ERROR cannot borrow `u.y`\n+    let b = &u.y; //~ ERROR cannot borrow `u.y`\n+    use_borrow(a);\n }\n \n unsafe fn grandparent_sibling_move() {\n     let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n     let a = (u.x.0).0;\n-    let a = u.y; //~ ERROR use of moved value: `u.y`\n+    let b = u.y; //~ ERROR use of moved value: `u.y`\n }\n \n unsafe fn deref_sibling_borrow() {\n     let mut u = U { y: Box::default() };\n     let a = &mut *u.y;\n-    let a = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n+    let b = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n+    use_borrow(a);\n }\n \n unsafe fn deref_sibling_move() {\n     let u = U { x: ((Vec::new(), Vec::new()), Vec::new()) };\n     let a = *u.y;\n-    let a = u.x; //~ ERROR use of moved value: `u.x`\n+    let b = u.x; //~ ERROR use of moved value: `u.x`\n }\n \n "}, {"sha": "daf5a4f4fccaa4262b9dcf91fb22352e6118cf4b", "filename": "src/test/ui/union/union-borrow-move-parent-sibling.stderr", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ba09ed520864b5c64f56aa2311ee18fa72a3ceb6/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba09ed520864b5c64f56aa2311ee18fa72a3ceb6/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-borrow-move-parent-sibling.stderr?ref=ba09ed520864b5c64f56aa2311ee18fa72a3ceb6", "patch": "@@ -1,59 +1,62 @@\n error[E0502]: cannot borrow `u.y` as immutable because `u.x.0` is also borrowed as mutable\n-  --> $DIR/union-borrow-move-parent-sibling.rs:23:14\n+  --> $DIR/union-borrow-move-parent-sibling.rs:25:14\n    |\n LL |     let a = &mut u.x.0;\n    |                  ----- mutable borrow occurs here\n-LL |     let a = &u.y; //~ ERROR cannot borrow `u.y`\n+LL |     let b = &u.y; //~ ERROR cannot borrow `u.y`\n    |              ^^^ immutable borrow occurs here\n+LL |     use_borrow(a);\n LL | }\n    | - mutable borrow ends here\n \n error[E0382]: use of moved value: `u.y`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:29:9\n+  --> $DIR/union-borrow-move-parent-sibling.rs:32:9\n    |\n LL |     let a = u.x.0;\n    |         - value moved here\n-LL |     let a = u.y; //~ ERROR use of moved value: `u.y`\n+LL |     let b = u.y; //~ ERROR use of moved value: `u.y`\n    |         ^ value used here after move\n    |\n    = note: move occurs because `u.y` has type `[type error]`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `u.y` as immutable because `u.x.0.0` is also borrowed as mutable\n-  --> $DIR/union-borrow-move-parent-sibling.rs:35:14\n+  --> $DIR/union-borrow-move-parent-sibling.rs:38:14\n    |\n LL |     let a = &mut (u.x.0).0;\n    |                  --------- mutable borrow occurs here\n-LL |     let a = &u.y; //~ ERROR cannot borrow `u.y`\n+LL |     let b = &u.y; //~ ERROR cannot borrow `u.y`\n    |              ^^^ immutable borrow occurs here\n+LL |     use_borrow(a);\n LL | }\n    | - mutable borrow ends here\n \n error[E0382]: use of moved value: `u.y`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:41:9\n+  --> $DIR/union-borrow-move-parent-sibling.rs:45:9\n    |\n LL |     let a = (u.x.0).0;\n    |         - value moved here\n-LL |     let a = u.y; //~ ERROR use of moved value: `u.y`\n+LL |     let b = u.y; //~ ERROR use of moved value: `u.y`\n    |         ^ value used here after move\n    |\n    = note: move occurs because `u.y` has type `[type error]`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `u` (via `u.x`) as immutable because `u` is also borrowed as mutable (via `*u.y`)\n-  --> $DIR/union-borrow-move-parent-sibling.rs:47:14\n+  --> $DIR/union-borrow-move-parent-sibling.rs:51:14\n    |\n LL |     let a = &mut *u.y;\n    |                  ---- mutable borrow occurs here (via `*u.y`)\n-LL |     let a = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n+LL |     let b = &u.x; //~ ERROR cannot borrow `u` (via `u.x`)\n    |              ^^^ immutable borrow occurs here (via `u.x`)\n+LL |     use_borrow(a);\n LL | }\n    | - mutable borrow ends here\n \n error[E0382]: use of moved value: `u.x`\n-  --> $DIR/union-borrow-move-parent-sibling.rs:53:9\n+  --> $DIR/union-borrow-move-parent-sibling.rs:58:9\n    |\n LL |     let a = *u.y;\n    |         - value moved here\n-LL |     let a = u.x; //~ ERROR use of moved value: `u.x`\n+LL |     let b = u.x; //~ ERROR use of moved value: `u.x`\n    |         ^ value used here after move\n    |\n    = note: move occurs because `u.x` has type `[type error]`, which does not implement the `Copy` trait"}]}