{"sha": "e55797f59d47153651661588e9ff09ffb75c6e67", "node_id": "C_kwDOAAsO6NoAKGU1NTc5N2Y1OWQ0NzE1MzY1MTY2MTU4OGU5ZmYwOWZmYjc1YzZlNjc", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T11:21:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T11:21:47Z"}, "message": "move tests", "tree": {"sha": "f0cf3b2bd02a82faced1660dc3ab90e8ec6c8df2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0cf3b2bd02a82faced1660dc3ab90e8ec6c8df2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e55797f59d47153651661588e9ff09ffb75c6e67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e55797f59d47153651661588e9ff09ffb75c6e67", "html_url": "https://github.com/rust-lang/rust/commit/e55797f59d47153651661588e9ff09ffb75c6e67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e55797f59d47153651661588e9ff09ffb75c6e67/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8997d742dc9ed677352d751e3c09b22ec0a9f4b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8997d742dc9ed677352d751e3c09b22ec0a9f4b5", "html_url": "https://github.com/rust-lang/rust/commit/8997d742dc9ed677352d751e3c09b22ec0a9f4b5"}], "stats": {"total": 169, "additions": 105, "deletions": 64}, "files": [{"sha": "7d9d7f39d050c0ba1bc97f5846dea073833934a8", "filename": "crates/hir_def/src/macro_expansion_tests.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e55797f59d47153651661588e9ff09ffb75c6e67/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55797f59d47153651661588e9ff09ffb75c6e67/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs?ref=e55797f59d47153651661588e9ff09ffb75c6e67", "patch": "@@ -144,7 +144,9 @@ fn pretty_print_macro_expansion(expn: SyntaxNode) -> String {\n             (T![>], _) if curr_kind.is_keyword() => \" \",\n             (T![->], _) | (_, T![->]) => \" \",\n             (T![&&], _) | (_, T![&&]) => \" \",\n-            (T![,] | T![:], _) => \" \",\n+            (T![,], _) => \" \",\n+            (T![:], IDENT | T!['(']) => \" \",\n+            (T![:], _) if curr_kind.is_keyword() => \" \",\n             (T![fn], T!['(']) => \"\",\n             (T![']'], _) if curr_kind.is_keyword() => \" \",\n             (T![']'], T![#]) => \"\\n\","}, {"sha": "ac09c23cd3e0284023ca432e24029b6bd792c893", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/regression.rs", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/e55797f59d47153651661588e9ff09ffb75c6e67/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55797f59d47153651661588e9ff09ffb75c6e67/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs?ref=e55797f59d47153651661588e9ff09ffb75c6e67", "patch": "@@ -375,3 +375,105 @@ ok!();\n \"##]],\n     );\n }\n+\n+#[test]\n+fn test_cfg_if_items() {\n+    // From <https://github.com/rust-lang/rust/blob/33fe1131cadba69d317156847be9a402b89f11bb/src/libstd/macros.rs#L986>.\n+    check(\n+        r#\"\n+macro_rules! __cfg_if_items {\n+    (($($not:meta,)*) ; ) => {};\n+    (($($not:meta,)*) ; ( ($($m:meta),*) ($($it:item)*) ), $($rest:tt)*) => {\n+            __cfg_if_items! { ($($not,)* $($m,)*) ; $($rest)* }\n+    }\n+}\n+__cfg_if_items! {\n+    (rustdoc,);\n+    ( () (\n+           #[ cfg(any(target_os = \"redox\", unix))]\n+           #[ stable(feature = \"rust1\", since = \"1.0.0\")]\n+           pub use sys::ext as unix;\n+\n+           #[cfg(windows)]\n+           #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+           pub use sys::ext as windows;\n+\n+           #[cfg(any(target_os = \"linux\", target_os = \"l4re\"))]\n+           pub mod linux;\n+    )),\n+}\n+\"#,\n+        expect![[r#\"\n+macro_rules! __cfg_if_items {\n+    (($($not:meta,)*) ; ) => {};\n+    (($($not:meta,)*) ; ( ($($m:meta),*) ($($it:item)*) ), $($rest:tt)*) => {\n+            __cfg_if_items! { ($($not,)* $($m,)*) ; $($rest)* }\n+    }\n+}\n+__cfg_if_items! {\n+    (rustdoc, );\n+}\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_cfg_if_main() {\n+    // From <https://github.com/rust-lang/rust/blob/3d211248393686e0f73851fc7548f6605220fbe1/src/libpanic_unwind/macros.rs#L9>.\n+    check(\n+        r#\"\n+macro_rules! cfg_if {\n+    ($(if #[cfg($($meta:meta),*)] { $($it:item)* } )else* else { $($it2:item)* })\n+    => {\n+        __cfg_if_items! {\n+            () ;\n+            $( ( ($($meta),*) ($($it)*) ), )*\n+            ( () ($($it2)*) ),\n+        }\n+    };\n+\n+    // Internal macro to Apply a cfg attribute to a list of items\n+    (@__apply $m:meta, $($it:item)*) => { $(#[$m] $it)* };\n+}\n+\n+cfg_if! {\n+    if #[cfg(target_env = \"msvc\")] {\n+        // no extra unwinder support needed\n+    } else if #[cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))] {\n+        // no unwinder on the system!\n+    } else {\n+        mod libunwind;\n+        pub use libunwind::*;\n+    }\n+}\n+\n+cfg_if! {\n+    @__apply cfg(all(not(any(not(any(target_os = \"solaris\", target_os = \"illumos\")))))),\n+}\n+\"#,\n+        expect![[r##\"\n+macro_rules! cfg_if {\n+    ($(if #[cfg($($meta:meta),*)] { $($it:item)* } )else* else { $($it2:item)* })\n+    => {\n+        __cfg_if_items! {\n+            () ;\n+            $( ( ($($meta),*) ($($it)*) ), )*\n+            ( () ($($it2)*) ),\n+        }\n+    };\n+\n+    // Internal macro to Apply a cfg attribute to a list of items\n+    (@__apply $m:meta, $($it:item)*) => { $(#[$m] $it)* };\n+}\n+\n+__cfg_if_items! {\n+    ();\n+    ((target_env = \"msvc\")()), ((all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))()), (()(mod libunwind;\n+    pub use libunwind::*;\n+    )),\n+}\n+\n+\n+\"##]],\n+    );\n+}"}, {"sha": "1287b3ea9b96e2f5285cf5feba4b384b4f2a44a0", "filename": "crates/mbe/src/tests/expand.rs", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e55797f59d47153651661588e9ff09ffb75c6e67/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55797f59d47153651661588e9ff09ffb75c6e67/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs?ref=e55797f59d47153651661588e9ff09ffb75c6e67", "patch": "@@ -98,69 +98,6 @@ fn test_attr_to_token_tree() {\n     );\n }\n \n-#[test]\n-fn test_cfg_if_items() {\n-    // from https://github.com/rust-lang/rust/blob/33fe1131cadba69d317156847be9a402b89f11bb/src/libstd/macros.rs#L986\n-    parse_macro(\n-        r#\"\n-        macro_rules! __cfg_if_items {\n-            (($($not:meta,)*) ; ) => {};\n-            (($($not:meta,)*) ; ( ($($m:meta),*) ($($it:item)*) ), $($rest:tt)*) => {\n-                 __cfg_if_items! { ($($not,)* $($m,)*) ; $($rest)* }\n-            }\n-        }\n-\"#,\n-    ).assert_expand_items(\n-        r#\"__cfg_if_items ! { ( rustdoc , ) ; ( ( ) ( # [ cfg ( any ( target_os = \"redox\" , unix ) ) ] # [ stable ( feature = \"rust1\" , since = \"1.0.0\" ) ] pub use sys :: ext as unix ; # [ cfg ( windows ) ] # [ stable ( feature = \"rust1\" , since = \"1.0.0\" ) ] pub use sys :: ext as windows ; # [ cfg ( any ( target_os = \"linux\" , target_os = \"l4re\" ) ) ] pub mod linux ; ) ) , }\"#,\n-        \"__cfg_if_items ! {(rustdoc ,) ;}\",\n-    );\n-}\n-\n-#[test]\n-fn test_cfg_if_main() {\n-    // from https://github.com/rust-lang/rust/blob/3d211248393686e0f73851fc7548f6605220fbe1/src/libpanic_unwind/macros.rs#L9\n-    parse_macro(\n-        r#\"\n-        macro_rules! cfg_if {\n-            ($(\n-                if #[cfg($($meta:meta),*)] { $($it:item)* }\n-            ) else * else {\n-                $($it2:item)*\n-            }) => {\n-                __cfg_if_items! {\n-                    () ;\n-                    $( ( ($($meta),*) ($($it)*) ), )*\n-                    ( () ($($it2)*) ),\n-                }\n-            };\n-\n-            // Internal macro to Apply a cfg attribute to a list of items\n-            (@__apply $m:meta, $($it:item)*) => {\n-                $(#[$m] $it)*\n-            };\n-        }\n-\"#,\n-    ).assert_expand_items(r#\"\n-cfg_if !   {\n-     if   # [ cfg ( target_env   =   \"msvc\" ) ]   {\n-         // no extra unwinder support needed\n-     }   else   if   # [ cfg ( all ( target_arch   =   \"wasm32\" ,   not ( target_os   =   \"emscripten\" ) ) ) ]   {\n-         // no unwinder on the system!\n-     }   else   {\n-         mod   libunwind ;\n-         pub   use   libunwind :: * ;\n-     }\n- }\n-\"#,\n-        \"__cfg_if_items ! {() ; ((target_env = \\\"msvc\\\") ()) , ((all (target_arch = \\\"wasm32\\\" , not (target_os = \\\"emscripten\\\"))) ()) , (() (mod libunwind ; pub use libunwind :: * ;)) ,}\"\n-    ).assert_expand_items(\n-        r#\"\n-cfg_if ! { @ __apply cfg ( all ( not ( any ( not ( any ( target_os = \"solaris\" , target_os = \"illumos\" ) ) ) ) ) ) , }\n-\"#,\n-        \"\",\n-    );\n-}\n-\n #[test]\n fn test_proptest_arbitrary() {\n     // from https://github.com/AltSysrq/proptest/blob/d1c4b049337d2f75dd6f49a095115f7c532e5129/proptest/src/arbitrary/macros.rs#L16"}]}