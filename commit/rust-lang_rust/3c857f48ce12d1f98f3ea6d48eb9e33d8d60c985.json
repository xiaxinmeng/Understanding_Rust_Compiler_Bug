{"sha": "3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "node_id": "C_kwDOAAsO6NoAKDNjODU3ZjQ4Y2UxMmQxZjk4ZjNlYTZkNDhlYjllMzNkOGQ2MGM5ODU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-09T00:55:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-09T00:55:49Z"}, "message": "Auto merge of #91677 - matthiaskrgr:rollup-yiczced, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #91245 (suggest casting between i/u32 and char)\n - #91337 (Add a suggestion if `macro_rules` is misspelled)\n - #91534 (Make rustdoc headings black, and markdown blue)\n - #91637 (Add test for packed drops in generators)\n - #91667 (Fix indent of itemTypes in search.js)\n\nFailed merges:\n\n - #91568 (Pretty print break and continue without redundant space)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5db0b310af238377cfbde5bdd3ac75aad19dbb06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5db0b310af238377cfbde5bdd3ac75aad19dbb06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "html_url": "https://github.com/rust-lang/rust/commit/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6b883c74f49f32cb5d1cbad3457f2b8805a4a38", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b883c74f49f32cb5d1cbad3457f2b8805a4a38", "html_url": "https://github.com/rust-lang/rust/commit/e6b883c74f49f32cb5d1cbad3457f2b8805a4a38"}, {"sha": "40c6606b789122f1584a4e06556b858d543bef6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/40c6606b789122f1584a4e06556b858d543bef6b", "html_url": "https://github.com/rust-lang/rust/commit/40c6606b789122f1584a4e06556b858d543bef6b"}], "stats": {"total": 254, "additions": 215, "deletions": 39}, "files": [{"sha": "516e301ec3ae458b6f44b92e95795d17c68bb1e6", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "patch": "@@ -15,6 +15,7 @@ use rustc_ast::{MacArgs, MacCall, MacDelimiter};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, PResult, StashKey};\n use rustc_span::edition::{Edition, LATEST_STABLE_EDITION};\n+use rustc_span::lev_distance::lev_distance;\n use rustc_span::source_map::{self, Span};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n \n@@ -410,10 +411,30 @@ impl<'a> Parser<'a> {\n     fn parse_item_macro(&mut self, vis: &Visibility) -> PResult<'a, MacCall> {\n         let path = self.parse_path(PathStyle::Mod)?; // `foo::bar`\n         self.expect(&token::Not)?; // `!`\n-        let args = self.parse_mac_args()?; // `( .. )` or `[ .. ]` (followed by `;`), or `{ .. }`.\n-        self.eat_semi_for_macro_if_needed(&args);\n-        self.complain_if_pub_macro(vis, false);\n-        Ok(MacCall { path, args, prior_type_ascription: self.last_type_ascription })\n+        match self.parse_mac_args() {\n+            // `( .. )` or `[ .. ]` (followed by `;`), or `{ .. }`.\n+            Ok(args) => {\n+                self.eat_semi_for_macro_if_needed(&args);\n+                self.complain_if_pub_macro(vis, false);\n+                Ok(MacCall { path, args, prior_type_ascription: self.last_type_ascription })\n+            }\n+\n+            Err(mut err) => {\n+                // Maybe the user misspelled `macro_rules` (issue #91227)\n+                if self.token.is_ident()\n+                    && path.segments.len() == 1\n+                    && lev_distance(\"macro_rules\", &path.segments[0].ident.to_string()) <= 3\n+                {\n+                    err.span_suggestion(\n+                        path.span,\n+                        \"perhaps you meant to define a macro\",\n+                        \"macro_rules\".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+                Err(err)\n+            }\n+        }\n     }\n \n     /// Recover if we parsed attributes and expected an item but there was none."}, {"sha": "b7e276b69656f84d397f0c74e6d0f67f618868f8", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "patch": "@@ -1264,6 +1264,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n                 true\n             }\n+            (\n+                &ty::Uint(ty::UintTy::U32 | ty::UintTy::U64 | ty::UintTy::U128)\n+                | &ty::Int(ty::IntTy::I32 | ty::IntTy::I64 | ty::IntTy::I128),\n+                &ty::Char,\n+            ) => {\n+                err.multipart_suggestion_verbose(\n+                    &format!(\"{}, since a `char` always occupies 4 bytes\", cast_msg,),\n+                    cast_suggestion,\n+                    Applicability::MachineApplicable,\n+                );\n+                true\n+            }\n             _ => false,\n         }\n     }"}, {"sha": "1691de93bdda2c9bd399063ef70772961871d6bd", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "patch": "@@ -296,7 +296,7 @@ fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[cl\n             let (short, name) = item_ty_to_strs(myty.unwrap());\n             write!(\n                 w,\n-                \"<h2 id=\\\"{id}\\\" class=\\\"section-header\\\">\\\n+                \"<h2 id=\\\"{id}\\\" class=\\\"small-section-header\\\">\\\n                     <a href=\\\"#{id}\\\">{name}</a>\\\n                  </h2>\\n{}\",\n                 ITEM_TABLE_OPEN,"}, {"sha": "dea6d08396f319e31c572e371aae23dc7448a477", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "patch": "@@ -219,7 +219,7 @@ a {\n a.srclink,\n a#toggle-all-docs,\n a.anchor,\n-.section-header a,\n+.small-section-header a,\n #source-sidebar a,\n pre.rust a,\n .sidebar a,"}, {"sha": "6e2cbbecbf712469068bf1de28743025f89472bd", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "patch": "@@ -181,7 +181,7 @@ a {\n a.srclink,\n a#toggle-all-docs,\n a.anchor,\n-.section-header a,\n+.small-section-header a,\n #source-sidebar a,\n pre.rust a,\n .sidebar a,"}, {"sha": "4bf411d459a352ccdfdf57627c17802006800541", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "patch": "@@ -176,7 +176,7 @@ a {\n a.srclink,\n a#toggle-all-docs,\n a.anchor,\n-.section-header a,\n+.small-section-header a,\n #source-sidebar a,\n pre.rust a,\n .sidebar a,"}, {"sha": "7c55d10836c45f50e6c800c75701935a3ed2594c", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "patch": "@@ -4,32 +4,34 @@\n (function() {\n // This mapping table should match the discriminants of\n // `rustdoc::html::item_type::ItemType` type in Rust.\n-var itemTypes = [\"mod\",\n-                    \"externcrate\",\n-                    \"import\",\n-                    \"struct\",\n-                    \"enum\",\n-                    \"fn\",\n-                    \"type\",\n-                    \"static\",\n-                    \"trait\",\n-                    \"impl\",\n-                    \"tymethod\",\n-                    \"method\",\n-                    \"structfield\",\n-                    \"variant\",\n-                    \"macro\",\n-                    \"primitive\",\n-                    \"associatedtype\",\n-                    \"constant\",\n-                    \"associatedconstant\",\n-                    \"union\",\n-                    \"foreigntype\",\n-                    \"keyword\",\n-                    \"existential\",\n-                    \"attr\",\n-                    \"derive\",\n-                    \"traitalias\"];\n+var itemTypes = [\n+    \"mod\",\n+    \"externcrate\",\n+    \"import\",\n+    \"struct\",\n+    \"enum\",\n+    \"fn\",\n+    \"type\",\n+    \"static\",\n+    \"trait\",\n+    \"impl\",\n+    \"tymethod\",\n+    \"method\",\n+    \"structfield\",\n+    \"variant\",\n+    \"macro\",\n+    \"primitive\",\n+    \"associatedtype\",\n+    \"constant\",\n+    \"associatedconstant\",\n+    \"union\",\n+    \"foreigntype\",\n+    \"keyword\",\n+    \"existential\",\n+    \"attr\",\n+    \"derive\",\n+    \"traitalias\",\n+];\n \n // used for special search precedence\n var TY_PRIMITIVE = itemTypes.indexOf(\"primitive\");"}, {"sha": "03b10e3f78d431ffb8630a9d0778a5b5ff53e165", "filename": "src/test/rustdoc-gui/headers-color.goml", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml?ref=3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "patch": "@@ -18,7 +18,10 @@ goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.must_use\n assert-css: (\"#method\\.must_use\", {\"color\": \"rgb(197, 197, 197)\", \"background-color\": \"rgba(255, 236, 164, 0.06)\"}, ALL)\n \n goto: file://|DOC_PATH|/test_docs/index.html\n-assert-css: (\".section-header a\", {\"color\": \"rgb(197, 197, 197)\"}, ALL)\n+assert-css: (\".small-section-header a\", {\"color\": \"rgb(197, 197, 197)\"}, ALL)\n+\n+goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n+assert-css: (\".section-header a\", {\"color\": \"rgb(57, 175, 215)\"}, ALL)\n \n // Dark theme\n local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-preferred-dark-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n@@ -34,7 +37,10 @@ goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.must_use\n assert-css: (\"#method\\.must_use\", {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(73, 74, 61)\"}, ALL)\n \n goto: file://|DOC_PATH|/test_docs/index.html\n-assert-css: (\".section-header a\", {\"color\": \"rgb(221, 221, 221)\"}, ALL)\n+assert-css: (\".small-section-header a\", {\"color\": \"rgb(221, 221, 221)\"}, ALL)\n+\n+goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n+assert-css: (\".section-header a\", {\"color\": \"rgb(210, 153, 29)\"}, ALL)\n \n // Light theme\n local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n@@ -52,4 +58,7 @@ goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.must_use\n assert-css: (\"#method\\.must_use\", {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(253, 255, 211)\"}, ALL)\n \n goto: file://|DOC_PATH|/test_docs/index.html\n-assert-css: (\".section-header a\", {\"color\": \"rgb(0, 0, 0)\"}, ALL)\n+assert-css: (\".small-section-header a\", {\"color\": \"rgb(0, 0, 0)\"}, ALL)\n+\n+goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n+assert-css: (\".section-header a\", {\"color\": \"rgb(56, 115, 173)\"}, ALL)"}, {"sha": "379956968bd564eecf6e835a3d4de49891676945", "filename": "src/test/ui/cast/cast-int-to-char.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.rs?ref=3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "patch": "@@ -0,0 +1,9 @@\n+fn foo<T>(_t: T) {}\n+\n+fn main() {\n+    foo::<u32>('0');  //~ ERROR\n+    foo::<i32>('0');  //~ ERROR\n+    foo::<u64>('0');  //~ ERROR\n+    foo::<i64>('0');  //~ ERROR\n+    foo::<char>(0u32);  //~ ERROR\n+}"}, {"sha": "55b9462db8df818e73bc23836bb26fa184ce2c81", "filename": "src/test/ui/cast/cast-int-to-char.stderr", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-int-to-char.stderr?ref=3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "patch": "@@ -0,0 +1,53 @@\n+error[E0308]: mismatched types\n+  --> $DIR/cast-int-to-char.rs:4:16\n+   |\n+LL |     foo::<u32>('0');\n+   |                ^^^ expected `u32`, found `char`\n+   |\n+help: you can cast a `char` to a `u32`, since a `char` always occupies 4 bytes\n+   |\n+LL |     foo::<u32>('0' as u32);\n+   |                    ++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/cast-int-to-char.rs:5:16\n+   |\n+LL |     foo::<i32>('0');\n+   |                ^^^ expected `i32`, found `char`\n+   |\n+help: you can cast a `char` to an `i32`, since a `char` always occupies 4 bytes\n+   |\n+LL |     foo::<i32>('0' as i32);\n+   |                    ++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/cast-int-to-char.rs:6:16\n+   |\n+LL |     foo::<u64>('0');\n+   |                ^^^ expected `u64`, found `char`\n+   |\n+help: you can cast a `char` to a `u64`, since a `char` always occupies 4 bytes\n+   |\n+LL |     foo::<u64>('0' as u64);\n+   |                    ++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/cast-int-to-char.rs:7:16\n+   |\n+LL |     foo::<i64>('0');\n+   |                ^^^ expected `i64`, found `char`\n+   |\n+help: you can cast a `char` to an `i64`, since a `char` always occupies 4 bytes\n+   |\n+LL |     foo::<i64>('0' as i64);\n+   |                    ++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/cast-int-to-char.rs:8:17\n+   |\n+LL |     foo::<char>(0u32);\n+   |                 ^^^^ expected `char`, found `u32`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "1cfe7ce1ed726f5416ad4ef3fa78e2f842b06907", "filename": "src/test/ui/match/match-type-err-first-arm.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr?ref=3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "patch": "@@ -6,6 +6,11 @@ LL | fn test_func1(n: i32) -> i32 {\n LL |     match n {\n LL |         12 => 'b',\n    |               ^^^ expected `i32`, found `char`\n+   |\n+help: you can cast a `char` to an `i32`, since a `char` always occupies 4 bytes\n+   |\n+LL |         12 => 'b' as i32,\n+   |                   ++++++\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-type-err-first-arm.rs:18:14"}, {"sha": "b95cdbbbaad3b2e857774c69c96df9c64fb76950", "filename": "src/test/ui/packed/packed-struct-drop-aligned.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fpacked-struct-drop-aligned.rs?ref=3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "patch": "@@ -1,6 +1,10 @@\n // run-pass\n+#![feature(generators)]\n+#![feature(generator_trait)]\n use std::cell::Cell;\n use std::mem;\n+use std::ops::Generator;\n+use std::pin::Pin;\n \n struct Aligned<'a> {\n     drop_count: &'a Cell<usize>\n@@ -19,15 +23,35 @@ impl<'a> Drop for Aligned<'a> {\n     }\n }\n \n+#[repr(transparent)]\n+struct NotCopy(u8);\n+\n #[repr(packed)]\n-struct Packed<'a>(u8, Aligned<'a>);\n+struct Packed<'a>(NotCopy, Aligned<'a>);\n \n fn main() {\n     let drop_count = &Cell::new(0);\n     {\n-        let mut p = Packed(0, Aligned { drop_count });\n+        let mut p = Packed(NotCopy(0), Aligned { drop_count });\n         p.1 = Aligned { drop_count };\n         assert_eq!(drop_count.get(), 1);\n     }\n     assert_eq!(drop_count.get(), 2);\n+\n+    let drop_count = &Cell::new(0);\n+    let mut g = || {\n+        let mut p = Packed(NotCopy(0), Aligned { drop_count });\n+        let _ = &p;\n+        p.1 = Aligned { drop_count };\n+        assert_eq!(drop_count.get(), 1);\n+        // Test that a generator drop function moves a value from a packed\n+        // struct to a separate local before dropping it. We move out the\n+        // first field to generate and open drop for the second field.\n+        drop(p.0);\n+        yield;\n+    };\n+    Pin::new(&mut g).resume(());\n+    assert_eq!(drop_count.get(), 1);\n+    drop(g);\n+    assert_eq!(drop_count.get(), 2);\n }"}, {"sha": "62be913d85f05ade39c94663b3288d058d67acac", "filename": "src/test/ui/parser/misspelled-macro-rules.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Ftest%2Fui%2Fparser%2Fmisspelled-macro-rules.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Ftest%2Fui%2Fparser%2Fmisspelled-macro-rules.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmisspelled-macro-rules.fixed?ref=3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "patch": "@@ -0,0 +1,13 @@\n+// Regression test for issue #91227.\n+\n+// run-rustfix\n+\n+#![allow(unused_macros)]\n+\n+macro_rules! thing {\n+//~^ ERROR: expected one of\n+//~| HELP: perhaps you meant to define a macro\n+    () => {}\n+}\n+\n+fn main() {}"}, {"sha": "4290e6e5e4cb912be2b815fdf0f5043411df3033", "filename": "src/test/ui/parser/misspelled-macro-rules.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Ftest%2Fui%2Fparser%2Fmisspelled-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Ftest%2Fui%2Fparser%2Fmisspelled-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmisspelled-macro-rules.rs?ref=3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "patch": "@@ -0,0 +1,13 @@\n+// Regression test for issue #91227.\n+\n+// run-rustfix\n+\n+#![allow(unused_macros)]\n+\n+marco_rules! thing {\n+//~^ ERROR: expected one of\n+//~| HELP: perhaps you meant to define a macro\n+    () => {}\n+}\n+\n+fn main() {}"}, {"sha": "56df712381920741c48021d05f6c6948a0adfc8e", "filename": "src/test/ui/parser/misspelled-macro-rules.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Ftest%2Fui%2Fparser%2Fmisspelled-macro-rules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Ftest%2Fui%2Fparser%2Fmisspelled-macro-rules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmisspelled-macro-rules.stderr?ref=3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "patch": "@@ -0,0 +1,10 @@\n+error: expected one of `(`, `[`, or `{`, found `thing`\n+  --> $DIR/misspelled-macro-rules.rs:7:14\n+   |\n+LL | marco_rules! thing {\n+   | -----------  ^^^^^ expected one of `(`, `[`, or `{`\n+   | |\n+   | help: perhaps you meant to define a macro: `macro_rules`\n+\n+error: aborting due to previous error\n+"}, {"sha": "d3516375291b97546ee218f4f5a1dd58ab6ceb74", "filename": "src/test/ui/proc-macro/macro-brackets.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.stderr?ref=3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "patch": "@@ -3,6 +3,11 @@ error[E0308]: mismatched types\n    |\n LL | id![static X: u32 = 'a';];\n    |                     ^^^ expected `u32`, found `char`\n+   |\n+help: you can cast a `char` to a `u32`, since a `char` always occupies 4 bytes\n+   |\n+LL | id![static X: u32 = 'a' as u32;];\n+   |                         ++++++\n \n error: aborting due to previous error\n "}]}