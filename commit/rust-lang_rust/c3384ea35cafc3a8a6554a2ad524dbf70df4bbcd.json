{"sha": "c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd", "node_id": "C_kwDOAAsO6NoAKGMzMzg0ZWEzNWNhZmMzYThhNjU1NGEyYWQ1MjRkYmY3MGRmNGJiY2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-04T02:10:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-04T02:10:35Z"}, "message": "Auto merge of #97717 - matthiaskrgr:rollup-lalaii2, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #97446 (Make hir().get_generics and generics_of consistent.)\n - #97656 (Add a suggestion to replace parentheses with angle brackets on associated trait constraint)\n - #97692 (Add `#T-types/nominated` zulip notification)\n - #97696 (Do not ICE when failing to normalize during inlining.)\n - #97702 (Remove useless LocalDefId in ImplTraitContext::Universal.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ca537e207d9c0854f2e7667d2b1384e1c7fb7352", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca537e207d9c0854f2e7667d2b1384e1c7fb7352"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd", "html_url": "https://github.com/rust-lang/rust/commit/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f15370b4e44988ad5d228b25e939650c0a6c2ec7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f15370b4e44988ad5d228b25e939650c0a6c2ec7", "html_url": "https://github.com/rust-lang/rust/commit/f15370b4e44988ad5d228b25e939650c0a6c2ec7"}, {"sha": "a88d94b072c02f2360ee5b9a905c96848954ffbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a88d94b072c02f2360ee5b9a905c96848954ffbd", "html_url": "https://github.com/rust-lang/rust/commit/a88d94b072c02f2360ee5b9a905c96848954ffbd"}], "stats": {"total": 263, "additions": 156, "deletions": 107}, "files": [{"sha": "dab4d76857a50a18752673bdaa650c70c4b38eae", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd", "patch": "@@ -266,7 +266,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let body_id =\n                         this.lower_maybe_async_body(span, &decl, asyncness, body.as_deref());\n \n-                    let itctx = ImplTraitContext::Universal(this.current_hir_id_owner);\n+                    let itctx = ImplTraitContext::Universal;\n                     let (generics, decl) = this.lower_generics(generics, id, itctx, |this| {\n                         let ret_id = asyncness.opt_return_id();\n                         this.lower_fn_decl(&decl, Some(id), FnDeclKind::Fn, ret_id)\n@@ -385,7 +385,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // method, it will not be considered an in-band\n                 // lifetime to be added, but rather a reference to a\n                 // parent lifetime.\n-                let itctx = ImplTraitContext::Universal(self.current_hir_id_owner);\n+                let itctx = ImplTraitContext::Universal;\n                 let (generics, (trait_ref, lowered_ty)) =\n                     self.lower_generics(ast_generics, id, itctx, |this| {\n                         let trait_ref = trait_ref.as_ref().map(|trait_ref| {\n@@ -655,7 +655,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             kind: match i.kind {\n                 ForeignItemKind::Fn(box Fn { ref sig, ref generics, .. }) => {\n                     let fdec = &sig.decl;\n-                    let itctx = ImplTraitContext::Universal(self.current_hir_id_owner);\n+                    let itctx = ImplTraitContext::Universal;\n                     let (generics, (fn_dec, fn_args)) =\n                         self.lower_generics(generics, i.id, itctx, |this| {\n                             (\n@@ -1237,7 +1237,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         is_async: Option<NodeId>,\n     ) -> (&'hir hir::Generics<'hir>, hir::FnSig<'hir>) {\n         let header = self.lower_fn_header(sig.header);\n-        let itctx = ImplTraitContext::Universal(self.current_hir_id_owner);\n+        let itctx = ImplTraitContext::Universal;\n         let (generics, decl) = self.lower_generics(generics, id, itctx, |this| {\n             this.lower_fn_decl(&sig.decl, Some(id), kind, is_async)\n         });"}, {"sha": "51e5c3384a7919701a8afe1a664ae74fc4e443b1", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 45, "deletions": 21, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd", "patch": "@@ -46,7 +46,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sorted_map::SortedMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::struct_span_err;\n+use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{DefId, DefPathHash, LocalDefId, CRATE_DEF_ID};\n@@ -253,7 +253,7 @@ enum ImplTraitContext {\n     /// equivalent to a fresh universal parameter like `fn foo<T: Debug>(x: T)`.\n     ///\n     /// Newly generated parameters should be inserted into the given `Vec`.\n-    Universal(LocalDefId),\n+    Universal,\n \n     /// Treat `impl Trait` as shorthand for a new opaque type.\n     /// Example: `fn foo() -> impl Debug`, where `impl Debug` is conceptually\n@@ -857,20 +857,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         itctx: ImplTraitContext,\n     ) -> hir::TypeBinding<'hir> {\n         debug!(\"lower_assoc_ty_constraint(constraint={:?}, itctx={:?})\", constraint, itctx);\n-\n         // lower generic arguments of identifier in constraint\n         let gen_args = if let Some(ref gen_args) = constraint.gen_args {\n             let gen_args_ctor = match gen_args {\n                 GenericArgs::AngleBracketed(ref data) => {\n                     self.lower_angle_bracketed_parameter_data(data, ParamMode::Explicit, itctx).0\n                 }\n                 GenericArgs::Parenthesized(ref data) => {\n-                    let mut err = self.sess.struct_span_err(\n-                        gen_args.span(),\n-                        \"parenthesized generic arguments cannot be used in associated type constraints\"\n-                    );\n-                    // FIXME: try to write a suggestion here\n-                    err.emit();\n+                    self.assoc_ty_contraint_param_error_emit(data);\n                     self.lower_angle_bracketed_parameter_data(\n                         &data.as_angle_bracketed_args(),\n                         ParamMode::Explicit,\n@@ -893,7 +887,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 hir::TypeBindingKind::Equality { term }\n             }\n             AssocConstraintKind::Bound { ref bounds } => {\n-                let mut parent_def_id = self.current_hir_id_owner;\n                 // Piggy-back on the `impl Trait` context to figure out the correct behavior.\n                 let (desugar_to_impl_trait, itctx) = match itctx {\n                     // We are in the return position:\n@@ -913,10 +906,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // so desugar to\n                     //\n                     //     fn foo(x: dyn Iterator<Item = impl Debug>)\n-                    ImplTraitContext::Universal(parent) if self.is_in_dyn_type => {\n-                        parent_def_id = parent;\n-                        (true, itctx)\n-                    }\n+                    ImplTraitContext::Universal if self.is_in_dyn_type => (true, itctx),\n \n                     // In `type Foo = dyn Iterator<Item: Debug>` we desugar to\n                     // `type Foo = dyn Iterator<Item = impl Debug>` but we have to override the\n@@ -942,6 +932,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // Desugar `AssocTy: Bounds` into `AssocTy = impl Bounds`. We do this by\n                     // constructing the HIR for `impl bounds...` and then lowering that.\n \n+                    let parent_def_id = self.current_hir_id_owner;\n                     let impl_trait_node_id = self.resolver.next_node_id();\n                     self.resolver.create_def(\n                         parent_def_id,\n@@ -984,6 +975,42 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n+    fn assoc_ty_contraint_param_error_emit(&self, data: &ParenthesizedArgs) -> () {\n+        let mut err = self.sess.struct_span_err(\n+            data.span,\n+            \"parenthesized generic arguments cannot be used in associated type constraints\",\n+        );\n+        // Suggest removing empty parentheses: \"Trait()\" -> \"Trait\"\n+        if data.inputs.is_empty() {\n+            let parentheses_span =\n+                data.inputs_span.shrink_to_lo().to(data.inputs_span.shrink_to_hi());\n+            err.multipart_suggestion(\n+                \"remove these parentheses\",\n+                vec![(parentheses_span, String::new())],\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+        // Suggest replacing parentheses with angle brackets `Trait(params...)` to `Trait<params...>`\n+        else {\n+            // Start of parameters to the 1st argument\n+            let open_param = data.inputs_span.shrink_to_lo().to(data\n+                .inputs\n+                .first()\n+                .unwrap()\n+                .span\n+                .shrink_to_lo());\n+            // End of last argument to end of parameters\n+            let close_param =\n+                data.inputs.last().unwrap().span.shrink_to_hi().to(data.inputs_span.shrink_to_hi());\n+            err.multipart_suggestion(\n+                &format!(\"use angle brackets instead\",),\n+                vec![(open_param, String::from(\"<\")), (close_param, String::from(\">\"))],\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+        err.emit();\n+    }\n+\n     fn lower_generic_arg(\n         &mut self,\n         arg: &ast::GenericArg,\n@@ -1184,12 +1211,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             |this| this.lower_param_bounds(bounds, nested_itctx),\n                         )\n                     }\n-                    ImplTraitContext::Universal(parent_def_id) => {\n+                    ImplTraitContext::Universal => {\n                         // Add a definition for the in-band `Param`.\n                         let def_id = self.resolver.local_def_id(def_node_id);\n \n-                        let hir_bounds = self\n-                            .lower_param_bounds(bounds, ImplTraitContext::Universal(parent_def_id));\n+                        let hir_bounds =\n+                            self.lower_param_bounds(bounds, ImplTraitContext::Universal);\n                         // Set the name to `impl Bound1 + Bound2`.\n                         let ident = Ident::from_str_and_span(&pprust::ty_to_string(t), span);\n                         let param = hir::GenericParam {\n@@ -1399,10 +1426,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n         let inputs = self.arena.alloc_from_iter(inputs.iter().map(|param| {\n             if fn_node_id.is_some() {\n-                self.lower_ty_direct(\n-                    &param.ty,\n-                    ImplTraitContext::Universal(self.current_hir_id_owner),\n-                )\n+                self.lower_ty_direct(&param.ty, ImplTraitContext::Universal)\n             } else {\n                 self.lower_ty_direct(\n                     &param.ty,"}, {"sha": "cb2e66090e7c393317c45563b4ad6a8add3d45db", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd", "patch": "@@ -3004,13 +3004,12 @@ impl ItemKind<'_> {\n         Some(match *self {\n             ItemKind::Fn(_, ref generics, _)\n             | ItemKind::TyAlias(_, ref generics)\n-            | ItemKind::OpaqueTy(OpaqueTy {\n-                ref generics, origin: OpaqueTyOrigin::TyAlias, ..\n-            })\n+            | ItemKind::OpaqueTy(OpaqueTy { ref generics, .. })\n             | ItemKind::Enum(_, ref generics)\n             | ItemKind::Struct(_, ref generics)\n             | ItemKind::Union(_, ref generics)\n             | ItemKind::Trait(_, _, ref generics, _, _)\n+            | ItemKind::TraitAlias(ref generics, _)\n             | ItemKind::Impl(Impl { ref generics, .. }) => generics,\n             _ => return None,\n         })\n@@ -3210,13 +3209,8 @@ impl<'hir> OwnerNode<'hir> {\n         }\n     }\n \n-    pub fn generics(&self) -> Option<&'hir Generics<'hir>> {\n-        match self {\n-            OwnerNode::TraitItem(TraitItem { generics, .. })\n-            | OwnerNode::ImplItem(ImplItem { generics, .. }) => Some(generics),\n-            OwnerNode::Item(item) => item.kind.generics(),\n-            _ => None,\n-        }\n+    pub fn generics(self) -> Option<&'hir Generics<'hir>> {\n+        Node::generics(self.into())\n     }\n \n     pub fn def_id(self) -> LocalDefId {\n@@ -3403,9 +3397,12 @@ impl<'hir> Node<'hir> {\n         }\n     }\n \n-    pub fn generics(&self) -> Option<&'hir Generics<'hir>> {\n+    pub fn generics(self) -> Option<&'hir Generics<'hir>> {\n         match self {\n-            Node::TraitItem(TraitItem { generics, .. })\n+            Node::ForeignItem(ForeignItem {\n+                kind: ForeignItemKind::Fn(_, _, generics), ..\n+            })\n+            | Node::TraitItem(TraitItem { generics, .. })\n             | Node::ImplItem(ImplItem { generics, .. }) => Some(generics),\n             Node::Item(item) => item.kind.generics(),\n             _ => None,"}, {"sha": "779af7a382765f08f45144107174edf0ee8c2d7a", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd", "patch": "@@ -361,27 +361,7 @@ impl<'hir> Map<'hir> {\n \n     pub fn get_generics(self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {\n         let node = self.tcx.hir_owner(id)?;\n-        match node.node {\n-            OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),\n-            OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),\n-            OwnerNode::ForeignItem(ForeignItem {\n-                kind: ForeignItemKind::Fn(_, _, generics),\n-                ..\n-            })\n-            | OwnerNode::Item(Item {\n-                kind:\n-                    ItemKind::Fn(_, generics, _)\n-                    | ItemKind::TyAlias(_, generics)\n-                    | ItemKind::Enum(_, generics)\n-                    | ItemKind::Struct(_, generics)\n-                    | ItemKind::Union(_, generics)\n-                    | ItemKind::Trait(_, _, generics, ..)\n-                    | ItemKind::TraitAlias(generics, _)\n-                    | ItemKind::Impl(Impl { generics, .. }),\n-                ..\n-            }) => Some(generics),\n-            _ => None,\n-        }\n+        node.node.generics()\n     }\n \n     pub fn item(self, id: ItemId) -> &'hir Item<'hir> {"}, {"sha": "a1490d77ccb5b7436d089bcb90f4535cd227f2e0", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd", "patch": "@@ -158,11 +158,13 @@ impl<'tcx> Inliner<'tcx> {\n             return Err(\"optimization fuel exhausted\");\n         }\n \n-        let callee_body = callsite.callee.subst_mir_and_normalize_erasing_regions(\n+        let Ok(callee_body) = callsite.callee.try_subst_mir_and_normalize_erasing_regions(\n             self.tcx,\n             self.param_env,\n             callee_body.clone(),\n-        );\n+        ) else {\n+            return Err(\"failed to normalize callee body\");\n+        };\n \n         let old_blocks = caller_body.basic_blocks().next_index();\n         self.inline_call(caller_body, &callsite, callee_body);\n@@ -253,7 +255,7 @@ impl<'tcx> Inliner<'tcx> {\n             let func_ty = func.ty(caller_body, self.tcx);\n             if let ty::FnDef(def_id, substs) = *func_ty.kind() {\n                 // To resolve an instance its substs have to be fully normalized.\n-                let substs = self.tcx.normalize_erasing_regions(self.param_env, substs);\n+                let substs = self.tcx.try_normalize_erasing_regions(self.param_env, substs).ok()?;\n                 let callee =\n                     Instance::resolve(self.tcx, self.param_env, def_id, substs).ok().flatten()?;\n \n@@ -408,14 +410,17 @@ impl<'tcx> Inliner<'tcx> {\n                     if let ty::FnDef(def_id, substs) =\n                         *callsite.callee.subst_mir(self.tcx, &f.literal.ty()).kind()\n                     {\n-                        let substs = self.tcx.normalize_erasing_regions(self.param_env, substs);\n-                        if let Ok(Some(instance)) =\n-                            Instance::resolve(self.tcx, self.param_env, def_id, substs)\n+                        if let Ok(substs) =\n+                            self.tcx.try_normalize_erasing_regions(self.param_env, substs)\n                         {\n-                            if callsite.callee.def_id() == instance.def_id() {\n-                                return Err(\"self-recursion\");\n-                            } else if self.history.contains(&instance) {\n-                                return Err(\"already inlined\");\n+                            if let Ok(Some(instance)) =\n+                                Instance::resolve(self.tcx, self.param_env, def_id, substs)\n+                            {\n+                                if callsite.callee.def_id() == instance.def_id() {\n+                                    return Err(\"self-recursion\");\n+                                } else if self.history.contains(&instance) {\n+                                    return Err(\"already inlined\");\n+                                }\n                             }\n                         }\n                         // Don't give intrinsics the extra penalty for calls"}, {"sha": "838980e08aa0459687fe5baa6372dafde0f2a88a", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 13, "deletions": 38, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd", "patch": "@@ -1588,41 +1588,20 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n         _ => None,\n     };\n \n-    let mut opt_self = None;\n-    let mut allow_defaults = false;\n-\n     let no_generics = hir::Generics::empty();\n-    let ast_generics = match node {\n-        Node::TraitItem(item) => &item.generics,\n-\n-        Node::ImplItem(item) => &item.generics,\n-\n+    let ast_generics = node.generics().unwrap_or(&no_generics);\n+    let (opt_self, allow_defaults) = match node {\n         Node::Item(item) => {\n             match item.kind {\n-                ItemKind::Fn(.., ref generics, _)\n-                | ItemKind::Impl(hir::Impl { ref generics, .. }) => generics,\n-\n-                ItemKind::TyAlias(_, ref generics)\n-                | ItemKind::Enum(_, ref generics)\n-                | ItemKind::Struct(_, ref generics)\n-                | ItemKind::OpaqueTy(hir::OpaqueTy { ref generics, .. })\n-                | ItemKind::Union(_, ref generics) => {\n-                    allow_defaults = true;\n-                    generics\n-                }\n-\n-                ItemKind::Trait(_, _, ref generics, ..)\n-                | ItemKind::TraitAlias(ref generics, ..) => {\n+                ItemKind::Trait(..) | ItemKind::TraitAlias(..) => {\n                     // Add in the self type parameter.\n                     //\n                     // Something of a hack: use the node id for the trait, also as\n                     // the node id for the Self type parameter.\n-                    let param_id = item.def_id;\n-\n-                    opt_self = Some(ty::GenericParamDef {\n+                    let opt_self = Some(ty::GenericParamDef {\n                         index: 0,\n                         name: kw::SelfUpper,\n-                        def_id: param_id.to_def_id(),\n+                        def_id,\n                         pure_wrt_drop: false,\n                         kind: ty::GenericParamDefKind::Type {\n                             has_default: false,\n@@ -1631,21 +1610,17 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                         },\n                     });\n \n-                    allow_defaults = true;\n-                    generics\n+                    (opt_self, true)\n                 }\n-\n-                _ => &no_generics,\n+                ItemKind::TyAlias(..)\n+                | ItemKind::Enum(..)\n+                | ItemKind::Struct(..)\n+                | ItemKind::OpaqueTy(..)\n+                | ItemKind::Union(..) => (None, true),\n+                _ => (None, false),\n             }\n         }\n-\n-        Node::ForeignItem(item) => match item.kind {\n-            ForeignItemKind::Static(..) => &no_generics,\n-            ForeignItemKind::Fn(_, _, ref generics) => generics,\n-            ForeignItemKind::Type => &no_generics,\n-        },\n-\n-        _ => &no_generics,\n+        _ => (None, false),\n     };\n \n     let has_self = opt_self.is_some();"}, {"sha": "c55b0530c9da89030b20455159b3c0765007a800", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs?ref=c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd", "patch": "@@ -10,4 +10,9 @@ fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n   //~| ERROR this associated type takes 0 generic arguments but 1 generic argument\n   //~| ERROR this associated type takes 1 lifetime argument but 0 lifetime arguments\n \n+\n+fn bar<'a>(arg: Box<dyn X<Y() = ()>>) {}\n+  //~^ ERROR: parenthesized generic arguments cannot be used\n+  //~| ERROR this associated type takes 1 lifetime argument but 0 lifetime arguments\n+\n fn main() {}"}, {"sha": "162214063e7d28851193fb38d220ec673bcfab84", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd", "patch": "@@ -9,6 +9,19 @@ error: parenthesized generic arguments cannot be used in associated type constra\n    |\n LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                           ^^^^^\n+   |\n+help: use angle brackets instead\n+   |\n+LL | fn foo<'a>(arg: Box<dyn X<Y<'a> = &'a ()>>) {}\n+   |                            ~  ~\n+\n+error: parenthesized generic arguments cannot be used in associated type constraints\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:14:27\n+   |\n+LL | fn bar<'a>(arg: Box<dyn X<Y() = ()>>) {}\n+   |                           ^--\n+   |                            |\n+   |                            help: remove these parentheses\n \n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n   --> $DIR/gat-trait-path-parenthesised-args.rs:7:27\n@@ -40,6 +53,22 @@ note: associated type defined here, with 0 generic parameters\n LL |   type Y<'a>;\n    |        ^\n \n-error: aborting due to 4 previous errors\n+error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:14:27\n+   |\n+LL | fn bar<'a>(arg: Box<dyn X<Y() = ()>>) {}\n+   |                           ^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:4:8\n+   |\n+LL |   type Y<'a>;\n+   |        ^ --\n+help: add missing lifetime argument\n+   |\n+LL | fn bar<'a>(arg: Box<dyn X<Y('a) = ()>>) {}\n+   |                             ++\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0107`."}, {"sha": "213605b51142cc98463d2a1ea05142c8a3c92321", "filename": "src/test/ui/traits/issue-97695-double-trivial-bound.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/src%2Ftest%2Fui%2Ftraits%2Fissue-97695-double-trivial-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/src%2Ftest%2Fui%2Ftraits%2Fissue-97695-double-trivial-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-97695-double-trivial-bound.rs?ref=c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -Zinline-mir --emit=mir\n+// build-pass\n+\n+pub trait Associate {\n+    type Associated;\n+}\n+\n+pub struct Wrap<'a> {\n+    pub field: &'a i32,\n+}\n+\n+pub trait Create<T> {\n+    fn create() -> Self;\n+}\n+\n+pub fn oh_no<'a, T>()\n+where\n+    Wrap<'a>: Associate,\n+    <Wrap<'a> as Associate>::Associated: Create<T>,\n+{\n+    <Wrap<'a> as Associate>::Associated::create();\n+}\n+\n+pub fn main() {}"}, {"sha": "25e2c384624e9a89e0b5b3e926edf1cf3e263c1f", "filename": "triagebot.toml", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=c3384ea35cafc3a8a6554a2ad524dbf70df4bbcd", "patch": "@@ -183,6 +183,16 @@ message_on_add = \"\"\"\\\n \"\"\"\n message_on_remove = \"Issue #{number}'s nomination request has been removed.\"\n \n+[notify-zulip.\"I-types-nominated\"]\n+zulip_stream = 326866 # #T-types/nominated\n+topic = \"#{number}: {title}\"\n+message_on_add = \"\"\"\\\n+@*T-types* issue #{number} \"{title}\" has been nominated for team discussion.\n+\"\"\"\n+message_on_remove = \"Issue #{number}'s nomination has been removed. Thanks all for participating!\"\n+message_on_close = \"Issue #{number} has been closed. Thanks for participating!\"\n+message_on_reopen = \"Issue #{number} has been reopened. Pinging @*T-types*.\"\n+\n [notify-zulip.\"A-edition-2021\"]\n required_labels = [\"C-bug\"]\n zulip_stream = 268952 # #edition 2021"}]}