{"sha": "7356e28abbd56ff600dff1d34553b5bebcfc8767", "node_id": "C_kwDOAAsO6NoAKDczNTZlMjhhYmJkNTZmZjYwMGRmZjFkMzQ1NTNiNWJlYmNmYzg3Njc", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-01-20T04:09:46Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2022-01-20T04:09:46Z"}, "message": "Tweak `expr.await` desugaring `Span`\n\nFix #93074", "tree": {"sha": "b7af82d5852bfe08acb3569571f7e5d45c14d09b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7af82d5852bfe08acb3569571f7e5d45c14d09b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7356e28abbd56ff600dff1d34553b5bebcfc8767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7356e28abbd56ff600dff1d34553b5bebcfc8767", "html_url": "https://github.com/rust-lang/rust/commit/7356e28abbd56ff600dff1d34553b5bebcfc8767", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7356e28abbd56ff600dff1d34553b5bebcfc8767/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e57faa78aa7661c6000204591558f6665f11abc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e57faa78aa7661c6000204591558f6665f11abc", "html_url": "https://github.com/rust-lang/rust/commit/5e57faa78aa7661c6000204591558f6665f11abc"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "9c3945efe502d87f7312e14720f564f822436b50", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7356e28abbd56ff600dff1d34553b5bebcfc8767/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7356e28abbd56ff600dff1d34553b5bebcfc8767/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=7356e28abbd56ff600dff1d34553b5bebcfc8767", "patch": "@@ -630,18 +630,18 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     ///     }\n     /// }\n     /// ```\n-    fn lower_expr_await(&mut self, await_span: Span, expr: &Expr) -> hir::ExprKind<'hir> {\n-        let dot_await_span = expr.span.shrink_to_hi().to(await_span);\n+    fn lower_expr_await(&mut self, dot_await_span: Span, expr: &Expr) -> hir::ExprKind<'hir> {\n+        let full_span = expr.span.to(dot_await_span);\n         match self.generator_kind {\n             Some(hir::GeneratorKind::Async(_)) => {}\n             Some(hir::GeneratorKind::Gen) | None => {\n                 let mut err = struct_span_err!(\n                     self.sess,\n-                    await_span,\n+                    dot_await_span,\n                     E0728,\n                     \"`await` is only allowed inside `async` functions and blocks\"\n                 );\n-                err.span_label(await_span, \"only allowed inside `async` functions and blocks\");\n+                err.span_label(dot_await_span, \"only allowed inside `async` functions and blocks\");\n                 if let Some(item_sp) = self.current_item {\n                     err.span_label(item_sp, \"this is not `async`\");\n                 }\n@@ -651,7 +651,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let span = self.mark_span_with_reason(DesugaringKind::Await, dot_await_span, None);\n         let gen_future_span = self.mark_span_with_reason(\n             DesugaringKind::Await,\n-            await_span,\n+            full_span,\n             self.allow_gen_future.clone(),\n         );\n         let expr = self.lower_expr_mut(expr);\n@@ -704,9 +704,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let loop_hir_id = self.lower_node_id(loop_node_id);\n         let ready_arm = {\n             let x_ident = Ident::with_dummy_span(sym::result);\n-            let (x_pat, x_pat_hid) = self.pat_ident(span, x_ident);\n-            let x_expr = self.expr_ident(span, x_ident, x_pat_hid);\n-            let ready_field = self.single_pat_field(span, x_pat);\n+            let (x_pat, x_pat_hid) = self.pat_ident(gen_future_span, x_ident);\n+            let x_expr = self.expr_ident(gen_future_span, x_ident, x_pat_hid);\n+            let ready_field = self.single_pat_field(gen_future_span, x_pat);\n             let ready_pat = self.pat_lang_item_variant(\n                 span,\n                 hir::LangItem::PollReady,\n@@ -716,7 +716,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             let break_x = self.with_loop_scope(loop_node_id, move |this| {\n                 let expr_break =\n                     hir::ExprKind::Break(this.lower_loop_destination(None), Some(x_expr));\n-                this.arena.alloc(this.expr(span, expr_break, ThinVec::new()))\n+                this.arena.alloc(this.expr(gen_future_span, expr_break, ThinVec::new()))\n             });\n             self.arm(ready_pat, break_x)\n         };\n@@ -788,7 +788,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // `match ::std::future::IntoFuture::into_future(<expr>) { ... }`\n         let into_future_span = self.mark_span_with_reason(\n             DesugaringKind::Await,\n-            await_span,\n+            dot_await_span,\n             self.allow_into_future.clone(),\n         );\n         let into_future_expr = self.expr_call_lang_item_fn("}, {"sha": "1f1e1184dcc022e8991968208970709e1be3fde3", "filename": "src/test/ui/async-await/proper-span-for-type-error.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7356e28abbd56ff600dff1d34553b5bebcfc8767/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7356e28abbd56ff600dff1d34553b5bebcfc8767/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.fixed?ref=7356e28abbd56ff600dff1d34553b5bebcfc8767", "patch": "@@ -0,0 +1,11 @@\n+// edition:2021\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+async fn a() {}\n+\n+async fn foo() -> Result<(), i32> {\n+    Ok(a().await) //~ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "00ccde1bf99628bf9f7d9ad8d65f1feffcfc8a6c", "filename": "src/test/ui/async-await/proper-span-for-type-error.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7356e28abbd56ff600dff1d34553b5bebcfc8767/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7356e28abbd56ff600dff1d34553b5bebcfc8767/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.rs?ref=7356e28abbd56ff600dff1d34553b5bebcfc8767", "patch": "@@ -0,0 +1,11 @@\n+// edition:2021\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+async fn a() {}\n+\n+async fn foo() -> Result<(), i32> {\n+    a().await //~ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "611dc0407bf96daa4e7fc1f1e08fb6a0359d5de2", "filename": "src/test/ui/async-await/proper-span-for-type-error.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7356e28abbd56ff600dff1d34553b5bebcfc8767/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7356e28abbd56ff600dff1d34553b5bebcfc8767/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.stderr?ref=7356e28abbd56ff600dff1d34553b5bebcfc8767", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: mismatched types\n+  --> $DIR/proper-span-for-type-error.rs:8:5\n+   |\n+LL |     a().await\n+   |     ^^^^^^^^^ expected enum `Result`, found `()`\n+   |\n+   = note:   expected enum `Result<(), i32>`\n+           found unit type `()`\n+help: try wrapping the expression in `Ok`\n+   |\n+LL |     Ok(a().await)\n+   |     +++         +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}