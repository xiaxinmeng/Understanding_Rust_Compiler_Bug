{"sha": "b22c9c01fb4d4276e301a1ae0504a798a4f39fce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMmM5YzAxZmI0ZDQyNzZlMzAxYTFhZTA1MDRhNzk4YTRmMzlmY2U=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-04-13T16:31:15Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-04-19T07:01:27Z"}, "message": "Sign extend constants in range patterns", "tree": {"sha": "e86c4111185dcfc82bacc66de77fede2761fd1fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e86c4111185dcfc82bacc66de77fede2761fd1fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b22c9c01fb4d4276e301a1ae0504a798a4f39fce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlrYPsgACgkQpp+NIls6\n19ncPA/+IUUoC9IuQHjaqW/08ws1TZIolPY+x5Y0fEG8uoZYXHVzU5oSCsNWhkh8\nUTQeV33cM0QoCoN4va5Bv5XXljLRtxayLXO7nM7Cwx7OmlGwidbLM7uVMbWMV8GH\nAtc9uQSl5X5NCv2/DhK80tXF5DRz+sAOvvrGiXWxnxS82a28VK60fKilz7Rg98rJ\nUytSIfRT/HS+Fzn82iRic+OyP7c4Ce/sgwhuQXYTjmXw9nvKjU0i87fRPQSGb/iK\nsjCuuKQGu4b7dUlqMy+gUOavD3CobrO34ixfQkMoEOm7ECvpjpcohm0F9S1Y0XYD\nrXr2VxOihxtsBwMRVR/UzLj5xrnSHaEmfNLnr0/c0KuOkfTkKgc9Qk75sCigecgn\nzJtJ68KWC3vxnlx0qwG2ABMdUB2O1YXZF+zKFRKjoHqHp/yX3/SLTTaboRI/iknQ\nGOlLyhXmkxzG/BPbNIFwtoxpZ1rEMSBdcyCrri49G7jUBhX6mqKlOQSp4nnKrJoI\nDTTu61+4haw2Xe0ihLu8wDWfQvBVxNcClC9VEVsPBZEZ1WVuUpC9IrsOW6GG/SA8\nKk01jnLQlHFFI3irRttSHXybz8JW4d5XHYZN0eIfYvGaGZ9cEbG8lpDHINTx7pxt\n4U/WIDqA0LB4bfKrRF8z2+xf82lmjLZHg6D9vO9b1np+DKt1vkw=\n=pKFq\n-----END PGP SIGNATURE-----", "payload": "tree e86c4111185dcfc82bacc66de77fede2761fd1fa\nparent 883bf4ba2ed8c63ed2c3201576bca1ec10488624\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1523637075 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1524121287 +0200\n\nSign extend constants in range patterns\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b22c9c01fb4d4276e301a1ae0504a798a4f39fce", "html_url": "https://github.com/rust-lang/rust/commit/b22c9c01fb4d4276e301a1ae0504a798a4f39fce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b22c9c01fb4d4276e301a1ae0504a798a4f39fce/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "883bf4ba2ed8c63ed2c3201576bca1ec10488624", "url": "https://api.github.com/repos/rust-lang/rust/commits/883bf4ba2ed8c63ed2c3201576bca1ec10488624", "html_url": "https://github.com/rust-lang/rust/commit/883bf4ba2ed8c63ed2c3201576bca1ec10488624"}], "stats": {"total": 92, "additions": 69, "deletions": 23}, "files": [{"sha": "ff7b4f9e0fd70e00580e03fd804a38c9d2b20bf9", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b22c9c01fb4d4276e301a1ae0504a798a4f39fce/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22c9c01fb4d4276e301a1ae0504a798a4f39fce/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=b22c9c01fb4d4276e301a1ae0504a798a4f39fce", "patch": "@@ -985,15 +985,17 @@ fn slice_pat_covered_by_constructor(tcx: TyCtxt, _span: Span,\n     Ok(true)\n }\n \n-fn constructor_covered_by_range(ctor: &Constructor,\n-                                from: &ConstVal, to: &ConstVal,\n-                                end: RangeEnd,\n-                                ty: Ty)\n-                                -> Result<bool, ErrorReported> {\n+fn constructor_covered_by_range<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    ctor: &Constructor,\n+    from: &ConstVal, to: &ConstVal,\n+    end: RangeEnd,\n+    ty: Ty<'tcx>,\n+) -> Result<bool, ErrorReported> {\n     trace!(\"constructor_covered_by_range {:#?}, {:#?}, {:#?}, {}\", ctor, from, to, ty);\n-    let cmp_from = |c_from| compare_const_vals(c_from, from, ty)\n+    let cmp_from = |c_from| compare_const_vals(tcx, c_from, from, ty)\n         .map(|res| res != Ordering::Less);\n-    let cmp_to = |c_to| compare_const_vals(c_to, to, ty);\n+    let cmp_to = |c_to| compare_const_vals(tcx, c_to, to, ty);\n     macro_rules! some_or_ok {\n         ($e:expr) => {\n             match $e {\n@@ -1105,6 +1107,7 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n                 },\n                 _ => {\n                     match constructor_covered_by_range(\n+                        cx.tcx,\n                         constructor, &value.val, &value.val, RangeEnd::Included,\n                         value.ty,\n                             ) {\n@@ -1118,6 +1121,7 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n \n         PatternKind::Range { lo, hi, ref end } => {\n             match constructor_covered_by_range(\n+                cx.tcx,\n                 constructor, &lo.val, &hi.val, end.clone(), lo.ty,\n             ) {\n                 Ok(true) => Some(vec![]),"}, {"sha": "9f17af8b16f1d7501cf00a0248c02495aa2509c1", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b22c9c01fb4d4276e301a1ae0504a798a4f39fce/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22c9c01fb4d4276e301a1ae0504a798a4f39fce/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=b22c9c01fb4d4276e301a1ae0504a798a4f39fce", "patch": "@@ -16,7 +16,7 @@ mod check_match;\n pub use self::check_match::check_crate;\n pub(crate) use self::check_match::check_match;\n \n-use interpret::{const_val_field, const_discr};\n+use interpret::{const_val_field, const_discr, self};\n \n use rustc::middle::const_val::ConstVal;\n use rustc::mir::{Field, BorrowKind, Mutability};\n@@ -372,7 +372,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                     (PatternKind::Constant { value: lo },\n                      PatternKind::Constant { value: hi }) => {\n                         use std::cmp::Ordering;\n-                        match (end, compare_const_vals(&lo.val, &hi.val, ty).unwrap()) {\n+                        match (end, compare_const_vals(self.tcx, &lo.val, &hi.val, ty).unwrap()) {\n                             (RangeEnd::Excluded, Ordering::Less) =>\n                                 PatternKind::Range { lo, hi, end },\n                             (RangeEnd::Excluded, _) => {\n@@ -1076,7 +1076,12 @@ impl<'tcx> PatternFoldable<'tcx> for PatternKind<'tcx> {\n     }\n }\n \n-pub fn compare_const_vals(a: &ConstVal, b: &ConstVal, ty: Ty) -> Option<Ordering> {\n+pub fn compare_const_vals<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    a: &ConstVal,\n+    b: &ConstVal,\n+    ty: Ty<'tcx>,\n+) -> Option<Ordering> {\n     use rustc_const_math::ConstFloat;\n     trace!(\"compare_const_vals: {:?}, {:?}\", a, b);\n     use rustc::mir::interpret::{Value, PrimVal};\n@@ -1096,7 +1101,11 @@ pub fn compare_const_vals(a: &ConstVal, b: &ConstVal, ty: Ty) -> Option<Ordering\n                     // FIXME(oli-obk): report cmp errors?\n                     l.try_cmp(r).ok()\n                 },\n-                ty::TyInt(_) => Some((a as i128).cmp(&(b as i128))),\n+                ty::TyInt(_) => {\n+                    let a = interpret::sign_extend(tcx, a, ty).expect(\"layout error for TyInt\");\n+                    let b = interpret::sign_extend(tcx, b, ty).expect(\"layout error for TyInt\");\n+                    Some((a as i128).cmp(&(b as i128)))\n+                },\n                 _ => Some(a.cmp(&b)),\n             }\n         },"}, {"sha": "c5ff14e606968adb84f5c59efb8a777ca4d0aa86", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b22c9c01fb4d4276e301a1ae0504a798a4f39fce/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22c9c01fb4d4276e301a1ae0504a798a4f39fce/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=b22c9c01fb4d4276e301a1ae0504a798a4f39fce", "patch": "@@ -1679,21 +1679,11 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n     }\n \n     pub fn sign_extend(&self, value: u128, ty: Ty<'tcx>) -> EvalResult<'tcx, u128> {\n-        let layout = self.layout_of(ty)?;\n-        let size = layout.size.bits();\n-        assert!(layout.abi.is_signed());\n-        // sign extend\n-        let amt = 128 - size;\n-        // shift the unsigned value to the left\n-        // and back to the right as signed (essentially fills with FF on the left)\n-        Ok((((value << amt) as i128) >> amt) as u128)\n+        super::sign_extend(self.tcx.tcx, value, ty)\n     }\n \n     pub fn truncate(&self, value: u128, ty: Ty<'tcx>) -> EvalResult<'tcx, u128> {\n-        let size = self.layout_of(ty)?.size.bits();\n-        let amt = 128 - size;\n-        // truncate (shift left to drop out leftover values, shift right to fill with zeroes)\n-        Ok((value << amt) >> amt)\n+        super::truncate(self.tcx.tcx, value, ty)\n     }\n }\n "}, {"sha": "147db3bdc0e7a41f082f167434d61c5ce3a36f1f", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b22c9c01fb4d4276e301a1ae0504a798a4f39fce/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22c9c01fb4d4276e301a1ae0504a798a4f39fce/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=b22c9c01fb4d4276e301a1ae0504a798a4f39fce", "patch": "@@ -31,3 +31,27 @@ pub use self::const_eval::{\n pub use self::machine::Machine;\n \n pub use self::memory::{write_target_uint, write_target_int, read_target_uint};\n+\n+use rustc::mir::interpret::{EvalResult, EvalErrorKind};\n+use rustc::ty::{Ty, TyCtxt, ParamEnv};\n+\n+pub fn sign_extend<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, value: u128, ty: Ty<'tcx>) -> EvalResult<'tcx, u128> {\n+    let param_env = ParamEnv::empty();\n+    let layout = tcx.layout_of(param_env.and(ty)).map_err(|layout| EvalErrorKind::Layout(layout))?;\n+    let size = layout.size.bits();\n+    assert!(layout.abi.is_signed());\n+    // sign extend\n+    let amt = 128 - size;\n+    // shift the unsigned value to the left\n+    // and back to the right as signed (essentially fills with FF on the left)\n+    Ok((((value << amt) as i128) >> amt) as u128)\n+}\n+\n+pub fn truncate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, value: u128, ty: Ty<'tcx>) -> EvalResult<'tcx, u128> {\n+    let param_env = ParamEnv::empty();\n+    let layout = tcx.layout_of(param_env.and(ty)).map_err(|layout| EvalErrorKind::Layout(layout))?;\n+    let size = layout.size.bits();\n+    let amt = 128 - size;\n+    // truncate (shift left to drop out leftover values, shift right to fill with zeroes)\n+    Ok((value << amt) >> amt)\n+}"}, {"sha": "f53d6f3fa0a153fe132ba608bc00f66352c31d49", "filename": "src/test/ui/const-eval/const_signed_pat.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b22c9c01fb4d4276e301a1ae0504a798a4f39fce/src%2Ftest%2Fui%2Fconst-eval%2Fconst_signed_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b22c9c01fb4d4276e301a1ae0504a798a4f39fce/src%2Ftest%2Fui%2Fconst-eval%2Fconst_signed_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_signed_pat.rs?ref=b22c9c01fb4d4276e301a1ae0504a798a4f39fce", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+fn main() {\n+    const MIN: i8 = -5;\n+    match 5i8 {\n+        MIN...-1 => {},\n+        _ => {},\n+    }\n+}"}]}