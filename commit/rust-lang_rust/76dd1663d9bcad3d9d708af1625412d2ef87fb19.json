{"sha": "76dd1663d9bcad3d9d708af1625412d2ef87fb19", "node_id": "C_kwDOAAsO6NoAKDc2ZGQxNjYzZDliY2FkM2Q5ZDcwOGFmMTYyNTQxMmQyZWY4N2ZiMTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-16T04:05:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-16T04:05:59Z"}, "message": "Rollup merge of #100590 - TaKO8Ki:suggest-adding-array-length, r=compiler-errors\n\nSuggest adding an array length if possible\n\nfixes #100448", "tree": {"sha": "21481c463c974640ac88ef9580438e999785d700", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21481c463c974640ac88ef9580438e999785d700"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76dd1663d9bcad3d9d708af1625412d2ef87fb19", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi+xenCRBK7hj4Ov3rIwAAy5QIAGybne3Pbql/5k0JjduJWhLR\nnbJhaTewSUlm8V3lb9fNyMqJYRcJPry43WFoCo0ln6tzIJegH8RkCLBN/4roG5NX\nahy2ySNaHuij0EX2iXblsRUwI0SsqQ1222QgjrgBUOYlUXdx2C/TSnYRYyRHkNo/\ndRu6bhlh/D+RNDkgiwS9JE7gaD5cV7TvLViaafVkm5ASjEUTH9yPjaZX3CU+8WAI\niDtI7DUbE/RedJK14K4Vg1ZXMzQfqw7phr8oIwLtamFzeZBAMcStXwBZIbwKxu5s\nUOz0E5JhbfO13I68wB6UkQY3KKiIYMXxaqHLlAVfCXNCBdDuqC175k4/saTnWX4=\n=o1SE\n-----END PGP SIGNATURE-----\n", "payload": "tree 21481c463c974640ac88ef9580438e999785d700\nparent fc735b05b88d9310db779ba7d2bf8829b7268623\nparent 12e609ba3cb7a395601c3b6762682248b0a325ad\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660622759 +0200\ncommitter GitHub <noreply@github.com> 1660622759 +0200\n\nRollup merge of #100590 - TaKO8Ki:suggest-adding-array-length, r=compiler-errors\n\nSuggest adding an array length if possible\n\nfixes #100448\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76dd1663d9bcad3d9d708af1625412d2ef87fb19", "html_url": "https://github.com/rust-lang/rust/commit/76dd1663d9bcad3d9d708af1625412d2ef87fb19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76dd1663d9bcad3d9d708af1625412d2ef87fb19/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc735b05b88d9310db779ba7d2bf8829b7268623", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc735b05b88d9310db779ba7d2bf8829b7268623", "html_url": "https://github.com/rust-lang/rust/commit/fc735b05b88d9310db779ba7d2bf8829b7268623"}, {"sha": "12e609ba3cb7a395601c3b6762682248b0a325ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/12e609ba3cb7a395601c3b6762682248b0a325ad", "html_url": "https://github.com/rust-lang/rust/commit/12e609ba3cb7a395601c3b6762682248b0a325ad"}], "stats": {"total": 164, "additions": 138, "deletions": 26}, "files": [{"sha": "c1c7a7ddd9179d1a58e981e999e97b6f65c73dc0", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76dd1663d9bcad3d9d708af1625412d2ef87fb19/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76dd1663d9bcad3d9d708af1625412d2ef87fb19/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=76dd1663d9bcad3d9d708af1625412d2ef87fb19", "patch": "@@ -48,7 +48,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sorted_map::SortedMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{struct_span_err, Applicability, Handler};\n+use rustc_errors::{struct_span_err, Applicability, Handler, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, LifetimeRes, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n@@ -2235,7 +2235,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         c.value.span,\n                         \"using `_` for array lengths is unstable\",\n                     )\n-                    .emit();\n+                    .stash(c.value.span, StashKey::UnderscoreForArrayLengths);\n                     hir::ArrayLen::Body(self.lower_anon_const(c))\n                 }\n             }"}, {"sha": "395bf5aad01b60cf47a67e016f11df7104829987", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76dd1663d9bcad3d9d708af1625412d2ef87fb19/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76dd1663d9bcad3d9d708af1625412d2ef87fb19/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=76dd1663d9bcad3d9d708af1625412d2ef87fb19", "patch": "@@ -457,6 +457,7 @@ struct HandlerInner {\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n pub enum StashKey {\n     ItemNoType,\n+    UnderscoreForArrayLengths,\n }\n \n fn default_track_diagnostic(_: &Diagnostic) {}"}, {"sha": "9c2fdd875164f3822a3b6a6168c08e5b884383e9", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/76dd1663d9bcad3d9d708af1625412d2ef87fb19/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76dd1663d9bcad3d9d708af1625412d2ef87fb19/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=76dd1663d9bcad3d9d708af1625412d2ef87fb19", "patch": "@@ -28,7 +28,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{\n     pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId,\n-    ErrorGuaranteed,\n+    ErrorGuaranteed, StashKey,\n };\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n@@ -1307,7 +1307,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 span: expr.span,\n             })\n         };\n-        self.tcx.mk_array(element_ty, args.len() as u64)\n+        let array_len = args.len() as u64;\n+        self.suggest_array_len(expr, array_len);\n+        self.tcx.mk_array(element_ty, array_len)\n+    }\n+\n+    fn suggest_array_len(&self, expr: &'tcx hir::Expr<'tcx>, array_len: u64) {\n+        if let Some(parent_hir_id) = self.tcx.hir().find_parent_node(expr.hir_id) {\n+            let ty = match self.tcx.hir().find(parent_hir_id) {\n+                Some(\n+                    hir::Node::Local(hir::Local { ty: Some(ty), .. })\n+                    | hir::Node::Item(hir::Item { kind: hir::ItemKind::Const(ty, _), .. }),\n+                ) => Some(ty),\n+                _ => None,\n+            };\n+            if let Some(ty) = ty\n+                && let hir::TyKind::Array(_, length) = ty.kind\n+                && let hir::ArrayLen::Body(hir::AnonConst { hir_id, .. }) = length\n+                && let Some(span) = self.tcx.hir().opt_span(hir_id)\n+            {\n+                match self.tcx.sess.diagnostic().steal_diagnostic(span, StashKey::UnderscoreForArrayLengths) {\n+                    Some(mut err) => {\n+                        err.span_suggestion(\n+                            span,\n+                            \"consider specifying the array length\",\n+                            array_len,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                        err.emit();\n+                    }\n+                    None => ()\n+                }\n+            }\n+        }\n     }\n \n     fn check_expr_const_block(\n@@ -1333,10 +1365,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         element: &'tcx hir::Expr<'tcx>,\n         count: &'tcx hir::ArrayLen,\n         expected: Expectation<'tcx>,\n-        _expr: &'tcx hir::Expr<'tcx>,\n+        expr: &'tcx hir::Expr<'tcx>,\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n         let count = self.array_length_to_const(count);\n+        if let Some(count) = count.try_eval_usize(tcx, self.param_env) {\n+            self.suggest_array_len(expr, count);\n+        }\n \n         let uty = match expected {\n             ExpectHasType(uty) => match *uty.kind() {"}, {"sha": "bae3ab74af676db8da8f3786edeff26580e41a3a", "filename": "src/test/ui/array-slice-vec/suggest-array-length.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76dd1663d9bcad3d9d708af1625412d2ef87fb19/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/76dd1663d9bcad3d9d708af1625412d2ef87fb19/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.fixed?ref=76dd1663d9bcad3d9d708af1625412d2ef87fb19", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+#![allow(unused_variables, dead_code, non_upper_case_globals)]\n+\n+fn main() {\n+    const Foo: [i32; 3] = [1, 2, 3];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n+    let foo: [i32; 3] = [1, 2, 3];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n+    let bar: [i32; 3] = [0; 3];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n+}"}, {"sha": "b0867f4e39676f033b83cf0f984629c5fe3ea72b", "filename": "src/test/ui/array-slice-vec/suggest-array-length.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76dd1663d9bcad3d9d708af1625412d2ef87fb19/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76dd1663d9bcad3d9d708af1625412d2ef87fb19/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.rs?ref=76dd1663d9bcad3d9d708af1625412d2ef87fb19", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+#![allow(unused_variables, dead_code, non_upper_case_globals)]\n+\n+fn main() {\n+    const Foo: [i32; _] = [1, 2, 3];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n+    let foo: [i32; _] = [1, 2, 3];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n+    let bar: [i32; _] = [0; 3];\n+    //~^ ERROR in expressions, `_` can only be used on the left-hand side of an assignment\n+    //~| ERROR using `_` for array lengths is unstable\n+}"}, {"sha": "9000f71602850453b4c8c2c50a0b019ac990092c", "filename": "src/test/ui/array-slice-vec/suggest-array-length.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/76dd1663d9bcad3d9d708af1625412d2ef87fb19/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76dd1663d9bcad3d9d708af1625412d2ef87fb19/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fsuggest-array-length.stderr?ref=76dd1663d9bcad3d9d708af1625412d2ef87fb19", "patch": "@@ -0,0 +1,48 @@\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/suggest-array-length.rs:8:20\n+   |\n+LL |     let foo: [i32; _] = [1, 2, 3];\n+   |                    ^ `_` not allowed here\n+\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/suggest-array-length.rs:11:20\n+   |\n+LL |     let bar: [i32; _] = [0; 3];\n+   |                    ^ `_` not allowed here\n+\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/suggest-array-length.rs:5:22\n+   |\n+LL |     const Foo: [i32; _] = [1, 2, 3];\n+   |                      ^ `_` not allowed here\n+\n+error[E0658]: using `_` for array lengths is unstable\n+  --> $DIR/suggest-array-length.rs:5:22\n+   |\n+LL |     const Foo: [i32; _] = [1, 2, 3];\n+   |                      ^ help: consider specifying the array length: `3`\n+   |\n+   = note: see issue #85077 <https://github.com/rust-lang/rust/issues/85077> for more information\n+   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n+\n+error[E0658]: using `_` for array lengths is unstable\n+  --> $DIR/suggest-array-length.rs:8:20\n+   |\n+LL |     let foo: [i32; _] = [1, 2, 3];\n+   |                    ^ help: consider specifying the array length: `3`\n+   |\n+   = note: see issue #85077 <https://github.com/rust-lang/rust/issues/85077> for more information\n+   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n+\n+error[E0658]: using `_` for array lengths is unstable\n+  --> $DIR/suggest-array-length.rs:11:20\n+   |\n+LL |     let bar: [i32; _] = [0; 3];\n+   |                    ^ help: consider specifying the array length: `3`\n+   |\n+   = note: see issue #85077 <https://github.com/rust-lang/rust/issues/85077> for more information\n+   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "29aebb719d66f506e61e68bb13c871be8456263e", "filename": "src/test/ui/async-await/issues/issue-95307.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/76dd1663d9bcad3d9d708af1625412d2ef87fb19/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-95307.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76dd1663d9bcad3d9d708af1625412d2ef87fb19/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-95307.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-95307.stderr?ref=76dd1663d9bcad3d9d708af1625412d2ef87fb19", "patch": "@@ -9,6 +9,12 @@ LL |     async fn new() -> [u8; _];\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/issue-95307.rs:7:28\n+   |\n+LL |     async fn new() -> [u8; _];\n+   |                            ^ `_` not allowed here\n+\n error[E0658]: using `_` for array lengths is unstable\n   --> $DIR/issue-95307.rs:7:28\n    |\n@@ -18,12 +24,6 @@ LL |     async fn new() -> [u8; _];\n    = note: see issue #85077 <https://github.com/rust-lang/rust/issues/85077> for more information\n    = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n \n-error: in expressions, `_` can only be used on the left-hand side of an assignment\n-  --> $DIR/issue-95307.rs:7:28\n-   |\n-LL |     async fn new() -> [u8; _];\n-   |                            ^ `_` not allowed here\n-\n error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0658, E0706."}, {"sha": "56123a983b34f8c02f7432ff8e6579db60e4e75a", "filename": "src/test/ui/feature-gates/feature-gate-generic_arg_infer.normal.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/76dd1663d9bcad3d9d708af1625412d2ef87fb19/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76dd1663d9bcad3d9d708af1625412d2ef87fb19/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.normal.stderr?ref=76dd1663d9bcad3d9d708af1625412d2ef87fb19", "patch": "@@ -1,33 +1,24 @@\n-error[E0658]: using `_` for array lengths is unstable\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n   --> $DIR/feature-gate-generic_arg_infer.rs:11:27\n    |\n LL |     let _x: [u8; 3] = [0; _];\n-   |                           ^\n-   |\n-   = note: see issue #85077 <https://github.com/rust-lang/rust/issues/85077> for more information\n-   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n+   |                           ^ `_` not allowed here\n \n error: in expressions, `_` can only be used on the left-hand side of an assignment\n-  --> $DIR/feature-gate-generic_arg_infer.rs:11:27\n+  --> $DIR/feature-gate-generic_arg_infer.rs:14:18\n    |\n-LL |     let _x: [u8; 3] = [0; _];\n-   |                           ^ `_` not allowed here\n+LL |     let _y: [u8; _] = [0; 3];\n+   |                  ^ `_` not allowed here\n \n error[E0658]: using `_` for array lengths is unstable\n   --> $DIR/feature-gate-generic_arg_infer.rs:14:18\n    |\n LL |     let _y: [u8; _] = [0; 3];\n-   |                  ^\n+   |                  ^ help: consider specifying the array length: `3`\n    |\n    = note: see issue #85077 <https://github.com/rust-lang/rust/issues/85077> for more information\n    = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n \n-error: in expressions, `_` can only be used on the left-hand side of an assignment\n-  --> $DIR/feature-gate-generic_arg_infer.rs:14:18\n-   |\n-LL |     let _y: [u8; _] = [0; 3];\n-   |                  ^ `_` not allowed here\n-\n error[E0747]: type provided when a constant was expected\n   --> $DIR/feature-gate-generic_arg_infer.rs:20:20\n    |\n@@ -37,6 +28,15 @@ LL |     let _x = foo::<_>([1,2]);\n    = help: const arguments cannot yet be inferred with `_`\n    = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n \n+error[E0658]: using `_` for array lengths is unstable\n+  --> $DIR/feature-gate-generic_arg_infer.rs:11:27\n+   |\n+LL |     let _x: [u8; 3] = [0; _];\n+   |                           ^\n+   |\n+   = note: see issue #85077 <https://github.com/rust-lang/rust/issues/85077> for more information\n+   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n+\n error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0658, E0747."}]}