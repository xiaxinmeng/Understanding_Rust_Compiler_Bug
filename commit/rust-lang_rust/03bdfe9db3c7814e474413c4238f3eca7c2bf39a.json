{"sha": "03bdfe9db3c7814e474413c4238f3eca7c2bf39a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYmRmZTlkYjNjNzgxNGU0NzQ0MTNjNDIzOGYzZWNhN2MyYmYzOWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-09T03:06:33Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-11T06:42:26Z"}, "message": "move logic to LintLevelsBuilder", "tree": {"sha": "febce3ed69326383f42e4f78aee689634ec5fa73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/febce3ed69326383f42e4f78aee689634ec5fa73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03bdfe9db3c7814e474413c4238f3eca7c2bf39a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03bdfe9db3c7814e474413c4238f3eca7c2bf39a", "html_url": "https://github.com/rust-lang/rust/commit/03bdfe9db3c7814e474413c4238f3eca7c2bf39a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03bdfe9db3c7814e474413c4238f3eca7c2bf39a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f1a79cabe011c7487652e61130275a2940c47bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f1a79cabe011c7487652e61130275a2940c47bc", "html_url": "https://github.com/rust-lang/rust/commit/6f1a79cabe011c7487652e61130275a2940c47bc"}], "stats": {"total": 93, "additions": 39, "deletions": 54}, "files": [{"sha": "779077f1ff44d8a7f169f5afb0fdd93b80f6c6d7", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03bdfe9db3c7814e474413c4238f3eca7c2bf39a/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03bdfe9db3c7814e474413c4238f3eca7c2bf39a/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=03bdfe9db3c7814e474413c4238f3eca7c2bf39a", "patch": "@@ -17,7 +17,7 @@\n use self::TargetLint::*;\n \n use crate::hir::map::definitions::{DefPathData, DisambiguatedDefPathData};\n-use crate::lint::levels::{LintLevelSets, LintLevelsBuilder};\n+use crate::lint::levels::LintLevelsBuilder;\n use crate::lint::{EarlyLintPassObject, LateLintPassObject};\n use crate::middle::privacy::AccessLevels;\n use crate::middle::stability;\n@@ -674,7 +674,7 @@ impl<'a> EarlyContext<'a> {\n             sess,\n             krate,\n             lint_store,\n-            builder: LintLevelSets::builder(sess, warn_about_weird_lints, lint_store),\n+            builder: LintLevelsBuilder::new(sess, warn_about_weird_lints, lint_store),\n             buffered,\n         }\n     }"}, {"sha": "04028c03d436463e27339cc33bc55342d36bf3e0", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 34, "deletions": 46, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/03bdfe9db3c7814e474413c4238f3eca7c2bf39a/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03bdfe9db3c7814e474413c4238f3eca7c2bf39a/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=03bdfe9db3c7814e474413c4238f3eca7c2bf39a", "patch": "@@ -37,44 +37,8 @@ enum LintSet {\n }\n \n impl LintLevelSets {\n-    pub fn new(sess: &Session, lint_store: &LintStore) -> LintLevelSets {\n-        let mut me = LintLevelSets { list: Vec::new(), lint_cap: Level::Forbid };\n-        me.process_command_line(sess, lint_store);\n-        return me;\n-    }\n-\n-    pub fn builder<'a>(\n-        sess: &'a Session,\n-        warn_about_weird_lints: bool,\n-        store: &LintStore,\n-    ) -> LintLevelsBuilder<'a> {\n-        LintLevelsBuilder::new(sess, warn_about_weird_lints, LintLevelSets::new(sess, store))\n-    }\n-\n-    fn process_command_line(&mut self, sess: &Session, store: &LintStore) {\n-        let mut specs = FxHashMap::default();\n-        self.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);\n-\n-        for &(ref lint_name, level) in &sess.opts.lint_opts {\n-            store.check_lint_name_cmdline(sess, &lint_name, level);\n-\n-            // If the cap is less than this specified level, e.g., if we've got\n-            // `--cap-lints allow` but we've also got `-D foo` then we ignore\n-            // this specification as the lint cap will set it to allow anyway.\n-            let level = cmp::min(level, self.lint_cap);\n-\n-            let lint_flag_val = Symbol::intern(lint_name);\n-            let ids = match store.find_lints(&lint_name) {\n-                Ok(ids) => ids,\n-                Err(_) => continue, // errors handled in check_lint_name_cmdline above\n-            };\n-            for id in ids {\n-                let src = LintSource::CommandLine(lint_flag_val);\n-                specs.insert(id, (level, src));\n-            }\n-        }\n-\n-        self.list.push(LintSet::CommandLine { specs: specs });\n+    fn new() -> Self {\n+        LintLevelSets { list: Vec::new(), lint_cap: Level::Forbid }\n     }\n \n     fn get_lint_level(\n@@ -159,19 +123,43 @@ pub struct BuilderPush {\n }\n \n impl<'a> LintLevelsBuilder<'a> {\n-    pub fn new(\n-        sess: &'a Session,\n-        warn_about_weird_lints: bool,\n-        sets: LintLevelSets,\n-    ) -> LintLevelsBuilder<'a> {\n-        assert_eq!(sets.list.len(), 1);\n-        LintLevelsBuilder {\n+    pub fn new(sess: &'a Session, warn_about_weird_lints: bool, store: &LintStore) -> Self {\n+        let mut builder = LintLevelsBuilder {\n             sess,\n-            sets,\n+            sets: LintLevelSets::new(),\n             cur: 0,\n             id_to_set: Default::default(),\n             warn_about_weird_lints,\n+        };\n+        builder.process_command_line(sess, store);\n+        assert_eq!(builder.sets.list.len(), 1);\n+        builder\n+    }\n+\n+    fn process_command_line(&mut self, sess: &Session, store: &LintStore) {\n+        let mut specs = FxHashMap::default();\n+        self.sets.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);\n+\n+        for &(ref lint_name, level) in &sess.opts.lint_opts {\n+            store.check_lint_name_cmdline(sess, &lint_name, level);\n+\n+            // If the cap is less than this specified level, e.g., if we've got\n+            // `--cap-lints allow` but we've also got `-D foo` then we ignore\n+            // this specification as the lint cap will set it to allow anyway.\n+            let level = cmp::min(level, self.sets.lint_cap);\n+\n+            let lint_flag_val = Symbol::intern(lint_name);\n+            let ids = match store.find_lints(&lint_name) {\n+                Ok(ids) => ids,\n+                Err(_) => continue, // errors handled in check_lint_name_cmdline above\n+            };\n+            for id in ids {\n+                let src = LintSource::CommandLine(lint_flag_val);\n+                specs.insert(id, (level, src));\n+            }\n         }\n+\n+        self.sets.list.push(LintSet::CommandLine { specs });\n     }\n \n     /// Pushes a list of AST lint attributes onto this context."}, {"sha": "46ea04e5ccfca8c49762e82c5e63734a2830ca27", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/03bdfe9db3c7814e474413c4238f3eca7c2bf39a/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03bdfe9db3c7814e474413c4238f3eca7c2bf39a/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=03bdfe9db3c7814e474413c4238f3eca7c2bf39a", "patch": "@@ -1,6 +1,6 @@\n use super::late::unerased_lint_store;\n use rustc::hir::map::Map;\n-use rustc::lint::{LintLevelMap, LintLevelSets, LintLevelsBuilder, LintStore};\n+use rustc::lint::{LintLevelMap, LintLevelsBuilder, LintStore};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_hir as hir;\n@@ -13,11 +13,8 @@ pub use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintId};\n fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> &LintLevelMap {\n     assert_eq!(cnum, LOCAL_CRATE);\n     let store = unerased_lint_store(tcx);\n-    let mut builder = LintLevelMapBuilder {\n-        levels: LintLevelSets::builder(tcx.sess, false, &store),\n-        tcx: tcx,\n-        store,\n-    };\n+    let levels = LintLevelsBuilder::new(tcx.sess, false, &store);\n+    let mut builder = LintLevelMapBuilder { levels, tcx, store };\n     let krate = tcx.hir().krate();\n \n     let push = builder.levels.push(&krate.attrs, &store);"}]}