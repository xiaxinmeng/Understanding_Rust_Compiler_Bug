{"sha": "304c8b1edabcd6758600a525b7aaa3505800511a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNGM4YjFlZGFiY2Q2NzU4NjAwYTUyNWI3YWFhMzUwNTgwMDUxMWE=", "commit": {"author": {"name": "Virgil Palanciuc", "email": "virgilp@adobe.com", "date": "2017-10-28T17:39:00Z"}, "committer": {"name": "Virgil Palanciuc", "email": "virgilp@adobe.com", "date": "2017-10-28T17:39:00Z"}, "message": "implemented code review", "tree": {"sha": "4a8d4eb0d7c05adfafab70497e7841b56a383f9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a8d4eb0d7c05adfafab70497e7841b56a383f9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/304c8b1edabcd6758600a525b7aaa3505800511a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/304c8b1edabcd6758600a525b7aaa3505800511a", "html_url": "https://github.com/rust-lang/rust/commit/304c8b1edabcd6758600a525b7aaa3505800511a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/304c8b1edabcd6758600a525b7aaa3505800511a/comments", "author": null, "committer": null, "parents": [{"sha": "52d0e514731f185026d0fdf7807cb97ab9f60218", "url": "https://api.github.com/repos/rust-lang/rust/commits/52d0e514731f185026d0fdf7807cb97ab9f60218", "html_url": "https://github.com/rust-lang/rust/commit/52d0e514731f185026d0fdf7807cb97ab9f60218"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "b30d5e384884e7701df9a0d5f938fb168d8249f6", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/304c8b1edabcd6758600a525b7aaa3505800511a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/304c8b1edabcd6758600a525b7aaa3505800511a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=304c8b1edabcd6758600a525b7aaa3505800511a", "patch": "@@ -18,6 +18,7 @@ use hir::def::Def;\n use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n use ty::{self, TyCtxt};\n use middle::privacy::AccessLevels;\n+use session::DiagnosticMessageId;\n use syntax::symbol::Symbol;\n use syntax_pos::{Span, MultiSpan, DUMMY_SP};\n use syntax::ast;\n@@ -601,27 +602,25 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n                 let msp: MultiSpan = span.into();\n                 let cm = &self.sess.parse_sess.codemap();\n-                let span_key =\n-                    msp.primary_span().and_then(|sp:Span|\n-                        if sp != DUMMY_SP {\n-                            let fname = cm.lookup_char_pos(sp.lo()).file.as_ref().name.clone();\n-                            if fname.starts_with(\"<\") && fname.ends_with(\" macros>\") {\n-                                None\n-                            } else {\n-                                Some(span)\n-                            }\n-                        } else {\n+                let span_key = msp.primary_span().and_then(|sp: Span|\n+                    if sp != DUMMY_SP {\n+                        let file = cm.lookup_char_pos(sp.lo()).file;\n+                        if file.name.starts_with(\"<\") && file.name.ends_with(\" macros>\") {\n                             None\n+                        } else {\n+                            Some(span)\n                         }\n-                    );\n+                    } else {\n+                        None\n+                    }\n+                );\n \n-                let tuple = (None, span_key, msg.clone());\n-                let fresh = self.sess.one_time_diagnostics.borrow_mut().insert(tuple);\n+                let error_id = (DiagnosticMessageId::StabilityId(issue), span_key, msg.clone());\n+                let fresh = self.sess.one_time_diagnostics.borrow_mut().insert(error_id);\n                 if fresh {\n                     emit_feature_err(&self.sess.parse_sess, &feature.as_str(), span,\n                                      GateIssue::Library(Some(issue)), &msg);\n                 }\n-\n             }\n             Some(_) => {\n                 // Stable APIs are always ok to call and deprecated APIs are"}, {"sha": "9254b2e3364b1ee13888a999546e73bf3fbe4a71", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/304c8b1edabcd6758600a525b7aaa3505800511a/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/304c8b1edabcd6758600a525b7aaa3505800511a/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=304c8b1edabcd6758600a525b7aaa3505800511a", "patch": "@@ -75,10 +75,10 @@ pub struct Session {\n     pub working_dir: (String, bool),\n     pub lint_store: RefCell<lint::LintStore>,\n     pub buffered_lints: RefCell<Option<lint::LintBuffer>>,\n-    /// Set of (LintId, Option<Span>, message) tuples tracking lint\n+    /// Set of (DiagnosticId, Option<Span>, message) tuples tracking\n     /// (sub)diagnostics that have been set once, but should not be set again,\n-    /// in order to avoid redundantly verbose output (Issue #24690).\n-    pub one_time_diagnostics: RefCell<FxHashSet<(Option<lint::LintId>, Option<Span>, String)>>,\n+    /// in order to avoid redundantly verbose output (Issue #24690, #44953).\n+    pub one_time_diagnostics: RefCell<FxHashSet<(DiagnosticMessageId, Option<Span>, String)>>,\n     pub plugin_llvm_passes: RefCell<Vec<String>>,\n     pub plugin_attributes: RefCell<Vec<(String, AttributeType)>>,\n     pub crate_types: RefCell<Vec<config::CrateType>>,\n@@ -164,6 +164,13 @@ enum DiagnosticBuilderMethod {\n     // add more variants as needed to support one-time diagnostics\n }\n \n+/// Diagnostic message id - used in order to avoid emitting the same message more than once\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum DiagnosticMessageId {\n+    LintId(lint::LintId),\n+    StabilityId(u32)\n+}\n+\n impl Session {\n     pub fn local_crate_disambiguator(&self) -> CrateDisambiguator {\n         match *self.crate_disambiguator.borrow() {\n@@ -361,7 +368,7 @@ impl Session {\n             },\n             _ => {\n                 let lint_id = lint::LintId::of(lint);\n-                let id_span_message = (Some(lint_id), span, message.to_owned());\n+                let id_span_message = (DiagnosticMessageId::LintId(lint_id), span, message.to_owned());\n                 let fresh = self.one_time_diagnostics.borrow_mut().insert(id_span_message);\n                 if fresh {\n                     do_method()"}]}