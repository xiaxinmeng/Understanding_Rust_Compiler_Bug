{"sha": "a0c61a904482129989f5c1e5cb9f1008efb76f7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYzYxYTkwNDQ4MjEyOTk4OWY1YzFlNWNiOWYxMDA4ZWZiNzZmN2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-03T22:54:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-03T22:54:55Z"}, "message": "Auto merge of #71631 - RalfJung:miri-unleash-the-gates, r=oli-obk\n\nMiri: unleash all feature gates\n\nIMO it is silly to unleash features that do not even have a feature gate yet, but not unleash features that do. The only thing this achieves is making unleashed mode annoying to use as we have to figure out the feature flags to enable (and not always do the error messages say what that flag is).\n\nGiven that the point of `-Z unleash-the-miri-inside-of-you` is to debug the Miri internals, I see no good reason for this extra hurdle. I cannot imagine a situation where we'd use that flag, realize the program also requires some feature gate, and then be like \"oh I guess if this feature is unstable I will do something else\". Instead, we'll always just add that flag to the code as well, so requiring the flag achieves nothing.\n\nr? @oli-obk @ecstatic-morse\nFixes https://github.com/rust-lang/rust/issues/71630", "tree": {"sha": "a917faba4deb07e508d9dae797da04317a9f61a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a917faba4deb07e508d9dae797da04317a9f61a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0c61a904482129989f5c1e5cb9f1008efb76f7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0c61a904482129989f5c1e5cb9f1008efb76f7f", "html_url": "https://github.com/rust-lang/rust/commit/a0c61a904482129989f5c1e5cb9f1008efb76f7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0c61a904482129989f5c1e5cb9f1008efb76f7f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65b448273dd280401cd440a6740a7cd891525ba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/65b448273dd280401cd440a6740a7cd891525ba3", "html_url": "https://github.com/rust-lang/rust/commit/65b448273dd280401cd440a6740a7cd891525ba3"}, {"sha": "182133f8c842cff0b737f0e322156a9d6497b05c", "url": "https://api.github.com/repos/rust-lang/rust/commits/182133f8c842cff0b737f0e322156a9d6497b05c", "html_url": "https://github.com/rust-lang/rust/commit/182133f8c842cff0b737f0e322156a9d6497b05c"}], "stats": {"total": 614, "additions": 385, "deletions": 229}, "files": [{"sha": "55f825e150e5eb117d0a3ed9ff1827b0d9c96d43", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -193,7 +193,7 @@ pub fn run_compiler_in_existing_thread_pool<R>(\n \n     let r = {\n         let _sess_abort_error = OnDrop(|| {\n-            compiler.sess.diagnostic().print_error_count(registry);\n+            compiler.sess.finish_diagnostics(registry);\n         });\n \n         f(&compiler)"}, {"sha": "3fd9131d5db76234f1341b98afb9daafe1f9f025", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -247,12 +247,12 @@ impl Validator<'mir, 'tcx> {\n             return;\n         }\n \n-        // If an operation is supported in miri (and is not already controlled by a feature gate) it\n-        // can be turned on with `-Zunleash-the-miri-inside-of-you`.\n-        let is_unleashable = O::IS_SUPPORTED_IN_MIRI && O::feature_gate().is_none();\n+        // If an operation is supported in miri it can be turned on with\n+        // `-Zunleash-the-miri-inside-of-you`.\n+        let is_unleashable = O::IS_SUPPORTED_IN_MIRI;\n \n         if is_unleashable && self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n-            self.tcx.sess.span_warn(span, \"skipping const checks\");\n+            self.tcx.sess.miri_unleashed_feature(span, O::feature_gate());\n             return;\n         }\n "}, {"sha": "93a1315c6b59f3fb1f7410e83d9064d5d6080cfa", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -18,10 +18,11 @@ use rustc_data_structures::sync::{\n use rustc_errors::annotate_snippet_emitter_writer::AnnotateSnippetEmitterWriter;\n use rustc_errors::emitter::{Emitter, EmitterWriter, HumanReadableErrorType};\n use rustc_errors::json::JsonEmitter;\n+use rustc_errors::registry::Registry;\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId, ErrorReported};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{self, FileLoader, MultiSpan, RealFileLoader, SourceMap, Span};\n-use rustc_span::SourceFileHashAlgorithm;\n+use rustc_span::{SourceFileHashAlgorithm, Symbol};\n use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel, Target, TargetTriple, TlsModel};\n \n use std::cell::{self, RefCell};\n@@ -142,6 +143,12 @@ pub struct Session {\n     /// and immediately printing the backtrace to stderr.\n     pub ctfe_backtrace: Lock<CtfeBacktrace>,\n \n+    /// This tracks where `-Zunleash-the-miri-inside-of-you` was used to get around a\n+    /// const check, optionally with the relevant feature gate.  We use this to\n+    /// warn about unleashing, but with a single diagnostic instead of dozens that\n+    /// drown everything else in noise.\n+    miri_unleashed_features: Lock<Vec<(Span, Option<Symbol>)>>,\n+\n     /// Base directory containing the `src/` for the Rust standard library, and\n     /// potentially `rustc` as well, if we can can find it. Right now it's always\n     /// `$sysroot/lib/rustlib/src/rust` (i.e. the `rustup` `rust-src` component).\n@@ -189,6 +196,44 @@ impl From<&'static lint::Lint> for DiagnosticMessageId {\n }\n \n impl Session {\n+    pub fn miri_unleashed_feature(&self, span: Span, feature_gate: Option<Symbol>) {\n+        self.miri_unleashed_features.lock().push((span, feature_gate));\n+    }\n+\n+    fn check_miri_unleashed_features(&self) {\n+        let unleashed_features = self.miri_unleashed_features.lock();\n+        if !unleashed_features.is_empty() {\n+            let mut must_err = false;\n+            // Create a diagnostic pointing at where things got unleashed.\n+            let mut diag = self.struct_warn(\"skipping const checks\");\n+            for &(span, feature_gate) in unleashed_features.iter() {\n+                // FIXME: `span_label` doesn't do anything, so we use \"help\" as a hack.\n+                if let Some(feature_gate) = feature_gate {\n+                    diag.span_help(span, &format!(\"skipping check for `{}` feature\", feature_gate));\n+                    // The unleash flag must *not* be used to just \"hack around\" feature gates.\n+                    must_err = true;\n+                } else {\n+                    diag.span_help(span, \"skipping check that does not even have a feature gate\");\n+                }\n+            }\n+            diag.emit();\n+            // If we should err, make sure we did.\n+            if must_err && !self.has_errors() {\n+                // We have skipped a feature gate, and not run into other errors... reject.\n+                self.err(\n+                    \"`-Zunleash-the-miri-inside-of-you` may not be used to circumvent feature \\\n+                     gates, except when testing error paths in the CTFE engine\",\n+                );\n+            }\n+        }\n+    }\n+\n+    /// Invoked all the way at the end to finish off diagnostics printing.\n+    pub fn finish_diagnostics(&self, registry: &Registry) {\n+        self.check_miri_unleashed_features();\n+        self.diagnostic().print_error_count(registry);\n+    }\n+\n     pub fn local_crate_disambiguator(&self) -> CrateDisambiguator {\n         *self.crate_disambiguator.get()\n     }\n@@ -1139,6 +1184,7 @@ pub fn build_session_with_source_map(\n         confused_type_with_std_module: Lock::new(Default::default()),\n         system_library_path: OneThread::new(RefCell::new(Default::default())),\n         ctfe_backtrace,\n+        miri_unleashed_features: Lock::new(Default::default()),\n         real_rust_source_base_dir,\n     };\n "}, {"sha": "045fe9ad11a91cd830f5c06d3320c5018ac1c248", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -9,15 +9,15 @@ const X: fn(usize) -> usize = double;\n const X_CONST: fn(usize) -> usize = double_const;\n \n const fn bar(x: usize) -> usize {\n-    X(x) //~ WARNING skipping const checks\n+    X(x)\n }\n \n const fn bar_const(x: usize) -> usize {\n-    X_CONST(x) //~ WARNING skipping const checks\n+    X_CONST(x)\n }\n \n const fn foo(x: fn(usize) -> usize, y: usize)  -> usize {\n-    x(y) //~ WARNING skipping const checks\n+    x(y)\n }\n \n fn main() {"}, {"sha": "d0ae94079da2eaa4923dcd245628f37ef81e6ec3", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,20 +1,20 @@\n warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n   --> $DIR/const_fn_ptr.rs:12:5\n    |\n LL |     X(x)\n    |     ^^^^\n-\n-warning: skipping const checks\n+help: skipping check that does not even have a feature gate\n   --> $DIR/const_fn_ptr.rs:16:5\n    |\n LL |     X_CONST(x)\n    |     ^^^^^^^^^^\n-\n-warning: skipping const checks\n+help: skipping check that does not even have a feature gate\n   --> $DIR/const_fn_ptr.rs:20:5\n    |\n LL |     x(y)\n    |     ^^^^\n \n-warning: 3 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "14bd6558e7f898fb4d575ccdc7319c3db0ee9b24", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -8,7 +8,6 @@ const X: fn(usize) -> usize = double;\n \n const fn bar(x: usize) -> usize {\n     X(x) // FIXME: this should error someday\n-    //~^ WARN: skipping const checks\n }\n \n fn main() {}"}, {"sha": "0a7182fd39c6872b71f67880029f43ece3bbb459", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.stderr?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,4 +1,6 @@\n warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n   --> $DIR/const_fn_ptr_fail.rs:10:5\n    |\n LL |     X(x) // FIXME: this should error someday"}, {"sha": "f67871e6142ef0eb420adab2c4892bd48969e85f", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -10,7 +10,7 @@ fn double(x: usize) -> usize {\n const X: fn(usize) -> usize = double;\n \n const fn bar(x: fn(usize) -> usize, y: usize) -> usize {\n-    x(y) //~ WARN skipping const checks\n+    x(y)\n }\n \n const Y: usize = bar(X, 2); // FIXME: should fail to typeck someday"}, {"sha": "90ee2afa315d815a965c51f6f1ddf8289fa62dc2", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,9 +1,3 @@\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr_fail2.rs:13:5\n-   |\n-LL |     x(y)\n-   |     ^^^^\n-\n error[E0080]: evaluation of constant expression failed\n   --> $DIR/const_fn_ptr_fail2.rs:20:5\n    |\n@@ -24,6 +18,14 @@ LL |     assert_eq!(Z, 4);\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_fn_ptr_fail2.rs:13:5\n+   |\n+LL |     x(y)\n+   |     ^^^^\n+\n error: aborting due to 2 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "7087b6e6a6764eab2b8d4041c1b05697250e738a", "filename": "src/test/ui/consts/const-points-to-static.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -3,8 +3,9 @@\n #![allow(dead_code)]\n \n const TEST: &u8 = &MY_STATIC;\n-//~^ skipping const checks\n-//~| it is undefined behavior to use this value\n+//~^ ERROR it is undefined behavior to use this value\n+//~| NOTE  encountered a reference pointing to a static variable\n+//~| NOTE\n \n static MY_STATIC: u8 = 4;\n "}, {"sha": "465537fb3d5eac5987274314f0c8d6ea8533deb6", "filename": "src/test/ui/consts/const-points-to-static.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.stderr?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,9 +1,3 @@\n-warning: skipping const checks\n-  --> $DIR/const-points-to-static.rs:5:20\n-   |\n-LL | const TEST: &u8 = &MY_STATIC;\n-   |                    ^^^^^^^^^\n-\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-points-to-static.rs:5:1\n    |\n@@ -12,6 +6,14 @@ LL | const TEST: &u8 = &MY_STATIC;\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const-points-to-static.rs:5:20\n+   |\n+LL | const TEST: &u8 = &MY_STATIC;\n+   |                    ^^^^^^^^^\n+\n error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "13b1b2d14125b77883f559ef5fa303bb278ace38", "filename": "src/test/ui/consts/const-prop-read-static-in-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -3,7 +3,6 @@\n #![allow(dead_code)]\n \n const TEST: u8 = MY_STATIC; //~ ERROR any use of this value will cause an error\n-//~^ skipping const checks\n \n static MY_STATIC: u8 = 4;\n "}, {"sha": "7a517d1d7b3638820dfb1c15f5238ba9f68ca3af", "filename": "src/test/ui/consts/const-prop-read-static-in-const.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,9 +1,3 @@\n-warning: skipping const checks\n-  --> $DIR/const-prop-read-static-in-const.rs:5:18\n-   |\n-LL | const TEST: u8 = MY_STATIC;\n-   |                  ^^^^^^^^^\n-\n error: any use of this value will cause an error\n   --> $DIR/const-prop-read-static-in-const.rs:5:18\n    |\n@@ -14,5 +8,13 @@ LL | const TEST: u8 = MY_STATIC;\n    |\n    = note: `#[deny(const_err)]` on by default\n \n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const-prop-read-static-in-const.rs:5:18\n+   |\n+LL | const TEST: u8 = MY_STATIC;\n+   |                  ^^^^^^^^^\n+\n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "ae440d4f8f7b57881049d77fd6177209d9e75978", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -8,14 +8,12 @@ const extern \"C\" fn c_fn() {}\n \n const fn call_rust_fn(my_fn: extern \"Rust\" fn()) {\n     my_fn();\n-    //~^ WARN skipping const checks\n-    //~| ERROR could not evaluate static initializer\n+    //~^ ERROR could not evaluate static initializer\n     //~| NOTE calling a function with ABI C using caller ABI Rust\n     //~| NOTE inside `call_rust_fn`\n }\n \n static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n-//~^ WARN skipping const checks\n-//~| NOTE inside `VAL`\n+//~^ NOTE inside `VAL`\n \n fn main() {}"}, {"sha": "d55090c75e614ebcb4871d23168dfb31caa16473", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.stderr", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,27 +1,28 @@\n-warning: skipping const checks\n+error[E0080]: could not evaluate static initializer\n   --> $DIR/abi-mismatch.rs:10:5\n    |\n LL |     my_fn();\n    |     ^^^^^^^\n+   |     |\n+   |     calling a function with ABI C using caller ABI Rust\n+   |     inside `call_rust_fn` at $DIR/abi-mismatch.rs:10:5\n+...\n+LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n+   |                  --------------------------------------------------------------------- inside `VAL` at $DIR/abi-mismatch.rs:16:18\n \n warning: skipping const checks\n-  --> $DIR/abi-mismatch.rs:17:40\n    |\n-LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0080]: could not evaluate static initializer\n+help: skipping check that does not even have a feature gate\n   --> $DIR/abi-mismatch.rs:10:5\n    |\n LL |     my_fn();\n    |     ^^^^^^^\n-   |     |\n-   |     calling a function with ABI C using caller ABI Rust\n-   |     inside `call_rust_fn` at $DIR/abi-mismatch.rs:10:5\n-...\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/abi-mismatch.rs:16:40\n+   |\n LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n-   |                  --------------------------------------------------------------------- inside `VAL` at $DIR/abi-mismatch.rs:17:18\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "5f520c2cfdbce18dee90b886cc880d35bf4e112e", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -11,7 +11,7 @@ trait Foo<T> {\n }\n \n trait Bar<T, U: Foo<T>> {\n-    const F: u32 = (U::X, 42).1; //~ WARN skipping const checks\n+    const F: u32 = (U::X, 42).1;\n }\n \n impl Foo<u32> for () {"}, {"sha": "193a49bb2666f4f458567869bd90a625d4e297a8", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,15 +1,17 @@\n-warning: skipping const checks\n-  --> $DIR/assoc_const.rs:14:20\n-   |\n-LL |     const F: u32 = (U::X, 42).1;\n-   |                    ^^^^^^^^^^\n-\n error[E0080]: erroneous constant used\n   --> $DIR/assoc_const.rs:31:13\n    |\n LL |     let y = <String as Bar<Vec<u32>, String>>::F;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/assoc_const.rs:14:20\n+   |\n+LL |     const F: u32 = (U::X, 42).1;\n+   |                    ^^^^^^^^^^\n+\n error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "1f0b7f7e78a69dc17766139d0b3dee7df4ccc99d", "filename": "src/test/ui/consts/miri_unleashed/box.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n-#![feature(const_mut_refs, box_syntax)]\n+#![feature(box_syntax)]\n #![allow(const_err)]\n \n use std::mem::ManuallyDrop;\n@@ -8,7 +8,6 @@ fn main() {}\n \n static TEST_BAD: &mut i32 = {\n     &mut *(box 0)\n-    //~^ WARN skipping const check\n-    //~| ERROR could not evaluate static initializer\n+    //~^ ERROR could not evaluate static initializer\n     //~| NOTE heap allocations\n };"}, {"sha": "768b795ca5b392b8c93b345150bd85b65879ec17", "filename": "src/test/ui/consts/miri_unleashed/box.stderr", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,14 +1,31 @@\n-warning: skipping const checks\n+error[E0080]: could not evaluate static initializer\n   --> $DIR/box.rs:10:11\n    |\n LL |     &mut *(box 0)\n-   |           ^^^^^^^\n+   |           ^^^^^^^ \"heap allocations via `box` keyword\" needs an rfc before being allowed inside constants\n \n-error[E0080]: could not evaluate static initializer\n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n   --> $DIR/box.rs:10:11\n    |\n LL |     &mut *(box 0)\n-   |           ^^^^^^^ \"heap allocations via `box` keyword\" needs an rfc before being allowed inside constants\n+   |           ^^^^^^^\n+help: skipping check for `const_mut_refs` feature\n+  --> $DIR/box.rs:10:16\n+   |\n+LL |     &mut *(box 0)\n+   |                ^\n+help: skipping check for `const_mut_refs` feature\n+  --> $DIR/box.rs:10:5\n+   |\n+LL |     &mut *(box 0)\n+   |     ^^^^^^^^^^^^^\n+help: skipping check for `const_mut_refs` feature\n+  --> $DIR/box.rs:10:5\n+   |\n+LL |     &mut *(box 0)\n+   |     ^^^^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "c9dc1de515b90d74298821198f356735aadb586c", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -2,8 +2,6 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n #![allow(const_err)]\n \n-#![feature(const_raw_ptr_deref)]\n-\n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering;\n \n@@ -13,20 +11,15 @@ use std::sync::atomic::Ordering;\n const MUTATE_INTERIOR_MUT: usize = {\n     static FOO: AtomicUsize = AtomicUsize::new(0);\n     FOO.fetch_add(1, Ordering::Relaxed)\n-    //~^ WARN skipping const checks\n-    //~| WARN skipping const checks\n };\n \n const READ_INTERIOR_MUT: usize = {\n     static FOO: AtomicUsize = AtomicUsize::new(0);\n     unsafe { *(&FOO as *const _ as *const usize) }\n-    //~^ WARN skipping const checks\n };\n \n static mut MUTABLE: u32 = 0;\n const READ_MUT: u32 = unsafe { MUTABLE };\n-//~^ WARN skipping const checks\n-//~| WARN skipping const checks\n \n fn main() {\n     MUTATE_INTERIOR_MUT;"}, {"sha": "e5cd86b3d6c2f316c2020761013db9c5cb7b3530", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.stderr", "status": "modified", "additions": 35, "deletions": 32, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,51 +1,54 @@\n+error[E0080]: erroneous constant used\n+  --> $DIR/const_refers_to_static.rs:25:5\n+   |\n+LL |     MUTATE_INTERIOR_MUT;\n+   |     ^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const_refers_to_static.rs:27:5\n+   |\n+LL |     READ_INTERIOR_MUT;\n+   |     ^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const_refers_to_static.rs:29:5\n+   |\n+LL |     READ_MUT;\n+   |     ^^^^^^^^ referenced constant has errors\n+\n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:15:5\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:13:5\n    |\n LL |     FOO.fetch_add(1, Ordering::Relaxed)\n    |     ^^^\n-\n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:15:5\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:13:5\n    |\n LL |     FOO.fetch_add(1, Ordering::Relaxed)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:22:17\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:18:17\n    |\n LL |     unsafe { *(&FOO as *const _ as *const usize) }\n    |                 ^^^\n-\n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:27:32\n+help: skipping check for `const_raw_ptr_deref` feature\n+  --> $DIR/const_refers_to_static.rs:18:14\n+   |\n+LL |     unsafe { *(&FOO as *const _ as *const usize) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:22:32\n    |\n LL | const READ_MUT: u32 = unsafe { MUTABLE };\n    |                                ^^^^^^^\n-\n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:27:32\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:22:32\n    |\n LL | const READ_MUT: u32 = unsafe { MUTABLE };\n    |                                ^^^^^^^\n \n-error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:32:5\n-   |\n-LL |     MUTATE_INTERIOR_MUT;\n-   |     ^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:34:5\n-   |\n-LL |     READ_INTERIOR_MUT;\n-   |     ^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:36:5\n-   |\n-LL |     READ_MUT;\n-   |     ^^^^^^^^ referenced constant has errors\n-\n-error: aborting due to 3 previous errors; 5 warnings emitted\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "b5db685ef2c060d4c903b4ee034cffed0b699d68", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,8 +1,6 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n #![allow(const_err)]\n \n-#![feature(const_raw_ptr_deref)]\n-\n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering;\n \n@@ -14,7 +12,6 @@ const REF_INTERIOR_MUT: &usize = { //~ ERROR undefined behavior to use this valu\n //~| NOTE\n     static FOO: AtomicUsize = AtomicUsize::new(0);\n     unsafe { &*(&FOO as *const _ as *const usize) }\n-    //~^ WARN skipping const checks\n };\n \n // ok some day perhaps\n@@ -23,7 +20,6 @@ const READ_IMMUT: &usize = { //~ ERROR it is undefined behavior to use this valu\n //~| NOTE\n     static FOO: usize = 0;\n     &FOO\n-    //~^ WARN skipping const checks\n };\n \n fn main() {}"}, {"sha": "2e40b38dac76847bed70ef20f519bc5eb2610bc4", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.stderr", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.stderr?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,43 +1,47 @@\n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static2.rs:16:18\n-   |\n-LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n-   |                  ^^^\n-\n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static2.rs:25:6\n-   |\n-LL |     &FOO\n-   |      ^^^\n-\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static2.rs:12:1\n+  --> $DIR/const_refers_to_static2.rs:10:1\n    |\n LL | / const REF_INTERIOR_MUT: &usize = {\n LL | |\n LL | |\n LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n LL | |     unsafe { &*(&FOO as *const _ as *const usize) }\n-LL | |\n LL | | };\n    | |__^ type validation failed: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static2.rs:21:1\n+  --> $DIR/const_refers_to_static2.rs:18:1\n    |\n LL | / const READ_IMMUT: &usize = {\n LL | |\n LL | |\n LL | |     static FOO: usize = 0;\n LL | |     &FOO\n-LL | |\n LL | | };\n    | |__^ type validation failed: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n-error: aborting due to 2 previous errors; 2 warnings emitted\n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static2.rs:14:18\n+   |\n+LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n+   |                  ^^^\n+help: skipping check for `const_raw_ptr_deref` feature\n+  --> $DIR/const_refers_to_static2.rs:14:14\n+   |\n+LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static2.rs:22:6\n+   |\n+LL |     &FOO\n+   |      ^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "52f6536b5ea67c545be92817aafe36e75fcfbce8", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,8 +1,9 @@\n-// compile-flags: -Zunleash-the-miri-inside-of-you -Zdeduplicate-diagnostics\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n // aux-build:static_cross_crate.rs\n #![allow(const_err)]\n \n-#![feature(exclusive_range_pattern, half_open_range_patterns, const_if_match, const_panic)]\n+// `const_if_match` is a HIR check and thus needed even when unleashed.\n+#![feature(exclusive_range_pattern, half_open_range_patterns, const_if_match)]\n \n extern crate static_cross_crate;\n \n@@ -12,36 +13,33 @@ const SLICE_MUT: &[u8; 1] = { //~ ERROR undefined behavior to use this value\n //~| NOTE encountered a reference pointing to a static variable\n //~| NOTE\n     unsafe { &static_cross_crate::ZERO }\n-    //~^ WARN skipping const checks\n };\n \n const U8_MUT: &u8 = { //~ ERROR undefined behavior to use this value\n //~| NOTE encountered a reference pointing to a static variable\n //~| NOTE\n     unsafe { &static_cross_crate::ZERO[0] }\n-    //~^ WARN skipping const checks\n };\n \n // Also test indirection that reads from other static. This causes a const_err.\n #[warn(const_err)] //~ NOTE\n const U8_MUT2: &u8 = { //~ NOTE\n     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n-    //~^ WARN skipping const checks\n-    //~| WARN [const_err]\n+    //~^ WARN [const_err]\n     //~| NOTE constant accesses static\n };\n #[warn(const_err)] //~ NOTE\n const U8_MUT3: &u8 = { //~ NOTE\n     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n-    //~^ WARN skipping const checks\n-    //~| WARN [const_err]\n+    //~^ WARN [const_err]\n     //~| NOTE constant accesses static\n };\n \n pub fn test(x: &[u8; 1]) -> bool {\n     match x {\n         SLICE_MUT => true,\n         //~^ ERROR could not evaluate constant pattern\n+        //~| ERROR could not evaluate constant pattern\n         &[1..] => false,\n     }\n }\n@@ -50,6 +48,7 @@ pub fn test2(x: &u8) -> bool {\n     match x {\n         U8_MUT => true,\n         //~^ ERROR could not evaluate constant pattern\n+        //~| ERROR could not evaluate constant pattern\n         &(1..) => false,\n     }\n }\n@@ -60,13 +59,15 @@ pub fn test3(x: &u8) -> bool {\n     match x {\n         U8_MUT2 => true,\n         //~^ ERROR could not evaluate constant pattern\n+        //~| ERROR could not evaluate constant pattern\n         &(1..) => false,\n     }\n }\n pub fn test4(x: &u8) -> bool {\n     match x {\n         U8_MUT3 => true,\n         //~^ ERROR could not evaluate constant pattern\n+        //~| ERROR could not evaluate constant pattern\n         &(1..) => false,\n     }\n }"}, {"sha": "9d1e88a811f2f4267e0ca9b98ec06406bfe1d740", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.stderr", "status": "modified", "additions": 92, "deletions": 37, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,103 +1,75 @@\n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static_cross_crate.rs:14:15\n-   |\n-LL |     unsafe { &static_cross_crate::ZERO }\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static_cross_crate.rs:11:1\n+  --> $DIR/const_refers_to_static_cross_crate.rs:12:1\n    |\n LL | / const SLICE_MUT: &[u8; 1] = {\n LL | |\n LL | |\n LL | |     unsafe { &static_cross_crate::ZERO }\n-LL | |\n LL | | };\n    | |__^ type validation failed: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:43:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static_cross_crate.rs:21:15\n-   |\n-LL |     unsafe { &static_cross_crate::ZERO[0] }\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static_cross_crate.rs:18:1\n    |\n LL | / const U8_MUT: &u8 = {\n LL | |\n LL | |\n LL | |     unsafe { &static_cross_crate::ZERO[0] }\n-LL | |\n LL | | };\n    | |__^ type validation failed: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:51:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static_cross_crate.rs:28:17\n-   |\n-LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:28:14\n+  --> $DIR/const_refers_to_static_cross_crate.rs:27:14\n    |\n LL | / const U8_MUT2: &u8 = {\n LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    | |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n LL | |\n LL | |\n-LL | |\n LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:26:8\n+  --> $DIR/const_refers_to_static_cross_crate.rs:25:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:61:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static_cross_crate.rs:35:20\n-   |\n-LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:35:51\n+  --> $DIR/const_refers_to_static_cross_crate.rs:33:51\n    |\n LL | / const U8_MUT3: &u8 = {\n LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    | |                                                   ^^^^^^^^^^^ constant accesses static\n LL | |\n LL | |\n-LL | |\n LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:33:8\n+  --> $DIR/const_refers_to_static_cross_crate.rs:31:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n@@ -108,6 +80,89 @@ error: could not evaluate constant pattern\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n-error: aborting due to 6 previous errors; 6 warnings emitted\n+error: could not evaluate constant pattern\n+  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n+   |\n+LL |         SLICE_MUT => true,\n+   |         ^^^^^^^^^\n+\n+error: could not evaluate constant pattern\n+  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n+   |\n+LL |         U8_MUT => true,\n+   |         ^^^^^^\n+\n+error: could not evaluate constant pattern\n+  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n+   |\n+LL |         U8_MUT2 => true,\n+   |         ^^^^^^^\n+\n+error: could not evaluate constant pattern\n+  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n+   |\n+LL |         U8_MUT3 => true,\n+   |         ^^^^^^^\n+\n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:15:15\n+   |\n+LL |     unsafe { &static_cross_crate::ZERO }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:15:15\n+   |\n+LL |     unsafe { &static_cross_crate::ZERO }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:21:15\n+   |\n+LL |     unsafe { &static_cross_crate::ZERO[0] }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:21:15\n+   |\n+LL |     unsafe { &static_cross_crate::ZERO[0] }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:21:15\n+   |\n+LL |     unsafe { &static_cross_crate::ZERO[0] }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:27:17\n+   |\n+LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:33:20\n+   |\n+LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:33:20\n+   |\n+LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:33:20\n+   |\n+LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check for `const_panic` feature\n+  --> $DIR/const_refers_to_static_cross_crate.rs:33:77\n+   |\n+LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   |                                                                             ^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:33:20\n+   |\n+LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 10 previous errors; 3 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "9bd56e81cbf8ea8492c279350b6cfaf44d67149f", "filename": "src/test/ui/consts/miri_unleashed/drop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -15,5 +15,4 @@ static TEST_OK: () = {\n // The actual error is tested by the error-pattern above.\n static TEST_BAD: () = {\n     let _v: Vec<i32> = Vec::new();\n-    //~^ WARN skipping const check\n };"}, {"sha": "34ab5155e22d0ef1d7cc36abd61c9bd8b59f1e5f", "filename": "src/test/ui/consts/miri_unleashed/drop.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,9 +1,3 @@\n-warning: skipping const checks\n-  --> $DIR/drop.rs:17:9\n-   |\n-LL |     let _v: Vec<i32> = Vec::new();\n-   |         ^^\n-\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n    |\n@@ -17,10 +11,18 @@ LL | | }\n    | |_calling non-const function `<std::vec::Vec<i32> as std::ops::Drop>::drop`\n    |   inside `std::intrinsics::drop_in_place::<std::vec::Vec<i32>> - shim(Some(std::vec::Vec<i32>))` at $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n    | \n-  ::: $DIR/drop.rs:19:1\n+  ::: $DIR/drop.rs:18:1\n    |\n LL |   };\n-   |   - inside `TEST_BAD` at $DIR/drop.rs:19:1\n+   |   - inside `TEST_BAD` at $DIR/drop.rs:18:1\n+\n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/drop.rs:17:9\n+   |\n+LL |     let _v: Vec<i32> = Vec::new();\n+   |         ^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "7b2b1ed4965f265706aadc38c9b262b2e5447202", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -9,8 +9,7 @@ fn main() {}\n static TEST_BAD: () = {\n     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n     //~^ ERROR could not evaluate static initializer\n-    //~| NOTE in this expansion of llvm_asm!\n     //~| NOTE inline assembly is not supported\n-    //~| WARN skipping const checks\n+    //~| NOTE in this expansion of llvm_asm!\n     //~| NOTE in this expansion of llvm_asm!\n };"}, {"sha": "0f5ee5de39634c044b430f8a439ba0d1575ef5be", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,18 +1,19 @@\n-warning: skipping const checks\n+error[E0080]: could not evaluate static initializer\n   --> $DIR/inline_asm.rs:10:14\n    |\n LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ inline assembly is not supported\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0080]: could not evaluate static initializer\n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n   --> $DIR/inline_asm.rs:10:14\n    |\n LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ inline assembly is not supported\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "f8aa652827381c32d29b9394c1443394c641972b", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,8 +1,6 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n // normalize-stderr-test \"alloc[0-9]+\" -> \"allocN\"\n \n-#![feature(const_raw_ptr_deref)]\n-#![feature(const_mut_refs)]\n #![deny(const_err)] // The `allow` variant is tested by `mutable_const2`.\n //~^ NOTE lint level\n // Here we check that even though `MUTABLE_BEHIND_RAW` is created from a mutable\n@@ -13,7 +11,6 @@ use std::cell::UnsafeCell;\n \n // make sure we do not just intern this as mutable\n const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n-//~^ WARN: skipping const checks\n \n const MUTATING_BEHIND_RAW: () = { //~ NOTE\n     // Test that `MUTABLE_BEHIND_RAW` is actually immutable, by doing this at const time."}, {"sha": "4772baf9d9a019a7bb254dd4256816c165430f39", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.stderr", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,11 +1,5 @@\n-warning: skipping const checks\n-  --> $DIR/mutable_const.rs:15:38\n-   |\n-LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n-   |                                      ^^^^^^^^^^^^^^^^^^^^\n-\n error: any use of this value will cause an error\n-  --> $DIR/mutable_const.rs:21:9\n+  --> $DIR/mutable_const.rs:18:9\n    |\n LL | / const MUTATING_BEHIND_RAW: () = {\n LL | |     // Test that `MUTABLE_BEHIND_RAW` is actually immutable, by doing this at const time.\n@@ -18,10 +12,28 @@ LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/mutable_const.rs:6:9\n+  --> $DIR/mutable_const.rs:4:9\n    |\n LL | #![deny(const_err)] // The `allow` variant is tested by `mutable_const2`.\n    |         ^^^^^^^^^\n \n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/mutable_const.rs:13:38\n+   |\n+LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n+   |                                      ^^^^^^^^^^^^^^^^^^^^\n+help: skipping check for `const_raw_ptr_deref` feature\n+  --> $DIR/mutable_const.rs:18:9\n+   |\n+LL |         *MUTABLE_BEHIND_RAW = 99\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check for `const_mut_refs` feature\n+  --> $DIR/mutable_const.rs:18:9\n+   |\n+LL |         *MUTABLE_BEHIND_RAW = 99\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "867091af7ba762335a31e9f7a2ee2b9070b191a1", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -5,15 +5,12 @@\n // normalize-stderr-test \"note: compiler flags: .*\" -> \"note: compiler flags: FLAGS\"\n // normalize-stderr-test \"interpret/intern.rs:[0-9]+:[0-9]+\" -> \"interpret/intern.rs:LL:CC\"\n \n-#![feature(const_raw_ptr_deref)]\n-#![feature(const_mut_refs)]\n #![allow(const_err)]\n \n use std::cell::UnsafeCell;\n \n // make sure we do not just intern this as mutable\n const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n-//~^ WARN: skipping const checks\n-//~| ERROR: mutable allocation in constant\n+//~^ ERROR: mutable allocation in constant\n \n fn main() {}"}, {"sha": "98a1c8bdd8967d881efd94a8800947cda3251b0d", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,13 +1,15 @@\n warning: skipping const checks\n-  --> $DIR/mutable_const2.rs:15:38\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/mutable_const2.rs:13:38\n    |\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n    |                                      ^^^^^^^^^^^^^^^^^^^^\n \n warning: 1 warning emitted\n \n error: internal compiler error: mutable allocation in constant\n-  --> $DIR/mutable_const2.rs:15:1\n+  --> $DIR/mutable_const2.rs:13:1\n    |\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "ed2ca86ba2c6b5714a4bb12693d772c7b818d528", "filename": "src/test/ui/consts/miri_unleashed/mutable_references.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n-#![feature(const_mut_refs)]\n #![allow(const_err)]\n \n use std::cell::UnsafeCell;\n@@ -26,7 +25,6 @@ unsafe impl Sync for Meh {}\n \n static MEH: Meh = Meh {\n     x: &UnsafeCell::new(42),\n-    //~^ WARN: skipping const checks\n };\n \n // this is fine for the same reason as `BAR`."}, {"sha": "83c4e0ceba0de4b430515af36272fc5a3a6fb163", "filename": "src/test/ui/consts/miri_unleashed/mutable_references.stderr", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,14 +1,36 @@\n+error[E0594]: cannot assign to `*OH_YES`, as `OH_YES` is an immutable static item\n+  --> $DIR/mutable_references.rs:37:5\n+   |\n+LL |     *OH_YES = 99;\n+   |     ^^^^^^^^^^^^ cannot assign\n+\n warning: skipping const checks\n-  --> $DIR/mutable_references.rs:28:8\n+   |\n+help: skipping check for `const_mut_refs` feature\n+  --> $DIR/mutable_references.rs:9:26\n+   |\n+LL | static FOO: &&mut u32 = &&mut 42;\n+   |                          ^^^^^^^\n+help: skipping check for `const_mut_refs` feature\n+  --> $DIR/mutable_references.rs:13:23\n+   |\n+LL | static BAR: &mut () = &mut ();\n+   |                       ^^^^^^^\n+help: skipping check for `const_mut_refs` feature\n+  --> $DIR/mutable_references.rs:18:28\n+   |\n+LL | static BOO: &mut Foo<()> = &mut Foo(());\n+   |                            ^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/mutable_references.rs:27:8\n    |\n LL |     x: &UnsafeCell::new(42),\n    |        ^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0594]: cannot assign to `*OH_YES`, as `OH_YES` is an immutable static item\n-  --> $DIR/mutable_references.rs:39:5\n+help: skipping check for `const_mut_refs` feature\n+  --> $DIR/mutable_references.rs:31:27\n    |\n-LL |     *OH_YES = 99;\n-   |     ^^^^^^^^^^^^ cannot assign\n+LL | static OH_YES: &mut i32 = &mut 42;\n+   |                           ^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "7388aad2a9e53c05b90bb5910f40f3ff1a7aa732", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -19,7 +19,7 @@ unsafe impl Sync for Meh {}\n \n // the following will never be ok!\n const MUH: Meh = Meh {\n-    x: &UnsafeCell::new(42), //~ WARN: skipping const checks\n+    x: &UnsafeCell::new(42),\n };\n \n fn main() {"}, {"sha": "7ddf77af4d3af645a272acd7b0fff0cb82aa296a", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_ice.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,9 +1,3 @@\n-warning: skipping const checks\n-  --> $DIR/mutable_references_ice.rs:22:8\n-   |\n-LL |     x: &UnsafeCell::new(42),\n-   |        ^^^^^^^^^^^^^^^^^^^^\n-\n thread 'rustc' panicked at 'assertion failed: `(left != right)`\n   left: `Const`,\n  right: `Const`: UnsafeCells are not allowed behind references in constants. This should have been prevented statically by const qualification. If this were allowed one would be able to change a constant at one use site and other use sites could observe that mutation.', src/librustc_mir/interpret/intern.rs:LL:CC\n@@ -19,5 +13,13 @@ note: rustc VERSION running on TARGET\n \n note: compiler flags: FLAGS\n \n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/mutable_references_ice.rs:22:8\n+   |\n+LL |     x: &UnsafeCell::new(42),\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+\n warning: 1 warning emitted\n "}, {"sha": "70da94df7a2653a2d4acc6949b21dc13dc370ba9", "filename": "src/test/ui/consts/miri_unleashed/non_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -6,7 +6,7 @@\n \n fn foo() {}\n \n-static C: () = foo(); //~ WARN: skipping const checks\n+static C: () = foo();\n //~^ ERROR could not evaluate static initializer\n //~| NOTE calling non-const function `foo`\n "}, {"sha": "3e9658ad88ec035a11071b2c99c2e566d6a4953b", "filename": "src/test/ui/consts/miri_unleashed/non_const_fn.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,14 +1,16 @@\n-warning: skipping const checks\n+error[E0080]: could not evaluate static initializer\n   --> $DIR/non_const_fn.rs:9:16\n    |\n LL | static C: () = foo();\n-   |                ^^^^^\n+   |                ^^^^^ calling non-const function `foo`\n \n-error[E0080]: could not evaluate static initializer\n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n   --> $DIR/non_const_fn.rs:9:16\n    |\n LL | static C: () = foo();\n-   |                ^^^^^ calling non-const function `foo`\n+   |                ^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "c18227e0f5515bedfc98402003ad8d47a90789c1", "filename": "src/test/ui/consts/read_from_static_mut_ref.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fread_from_static_mut_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Fconsts%2Fread_from_static_mut_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fread_from_static_mut_ref.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// compile-flags: -Zunleash-the-miri-inside-of-you\n #![feature(const_mut_refs)]\n #![allow(const_err)]\n ", "previous_filename": "src/test/ui/consts/miri_unleashed/read_from_static.rs"}, {"sha": "edf9ba2c41a15ea46b86e526b05e0e4e67171cf6", "filename": "src/test/ui/rfc-2091-track-caller/caller-location-fnptr-rt-ctfe-equiv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.rs?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -18,7 +18,7 @@ const fn attributed() -> L {\n const fn calling_attributed() -> L {\n     // We need `-Z unleash-the-miri-inside-of-you` for this as we don't have `const fn` pointers.\n     let ptr: fn() -> L = attributed;\n-    ptr() //~ WARN skipping const checks\n+    ptr()\n }\n \n fn main() {"}, {"sha": "cf8ca57714c29e5b7ee68115a578ae3e32ed8a11", "filename": "src/test/ui/rfc-2091-track-caller/caller-location-fnptr-rt-ctfe-equiv.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a0c61a904482129989f5c1e5cb9f1008efb76f7f/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.stderr?ref=a0c61a904482129989f5c1e5cb9f1008efb76f7f", "patch": "@@ -1,4 +1,6 @@\n warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n   --> $DIR/caller-location-fnptr-rt-ctfe-equiv.rs:21:5\n    |\n LL |     ptr()"}]}