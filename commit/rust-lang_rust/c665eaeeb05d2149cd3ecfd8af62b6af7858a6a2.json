{"sha": "c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NjVlYWVlYjA1ZDIxNDljZDNlY2ZkOGFmNjJiNmFmNzg1OGE2YTI=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-04-01T15:20:27Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-04-02T09:50:08Z"}, "message": "add `STILL_FURTHER_SPECIALIZABLE` flag\n\nThis commit adds a STILL_FURTHER_SPECIALIZABLE flag to `TypeFlags`\nwhich replaces `needs_infer` and `needs_subst` in `Instance::resolve`\nand `assemble_candidates_from_impls.`\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "eb6dd4296f9cb7edebe884c76d7126608f37ea6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb6dd4296f9cb7edebe884c76d7126608f37ea6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl6FtVEACgkQJZLnbIc4\nH9kcYRAAlj5NftwG8kPmu2a0x7GWGWide8wOJZwXdY4gGlJz1fWU6xsbsn5/KZ4/\noUOF7XRBCh0SEG2RrK1SbhB7PH+e2a0b1i1qhC6hh8rMIeoewy+K958nBjQZMgLI\nLGd2rj2VkPWZJoyXc1Jq+xchZJdlnJZTc4r2ItTDqm0nilRW9h+YY51I6WOi2CJq\nsWuIvMF82gXwbmDQgIpy5zsxdYELxpJmzikHkSfCHGjmihx6bMfIIIUQNFc23hXe\nVbRJOOYDLX8OILApSNFE+vk4PO0hgi2NUASxmT0ar517nXwWtb2o6P9JNh96W/QP\nxNiFZ+iDnG88UVnW0K2JsJ2eZk7rHmVwriAiEkG5CNR0M1mcn/POs/hWoRs3OnMs\nHqCgDxvqYxPDvibzDGfqhTwQWAadPYh/Q3XBvI2X0gx8XkuxsZKbUwkd6tUpCvhj\nSR0exJvIZe6GJgRVHQ8/+8R7OSCHaiIEmCWD0zAKWpusMnWk+OfRqYOuC4ZHxQ92\n4E+ywbzH6PoVHI/RfXhfh7uQ5dPGGJshTK8EWcJElKOTyCuGE0LxaENWnaPU46WZ\nrLEUgR3I9JqcQ0o8UWNNKwYkuKlXfwP+Df8CuFykdQKYVe37qfR3YyA1bFnCRPvE\n9TcnH/T5yHgKcVu6Z4IhrP8KgSRomXxGLawPmH5GuqFSe6Ej8uA=\n=4Ib0\n-----END PGP SIGNATURE-----", "payload": "tree eb6dd4296f9cb7edebe884c76d7126608f37ea6f\nparent b793f403bdfbcc0ff3e15ed8177a81d79ba4a29b\nauthor David Wood <david@davidtw.co> 1585754427 +0100\ncommitter David Wood <david@davidtw.co> 1585821008 +0100\n\nadd `STILL_FURTHER_SPECIALIZABLE` flag\n\nThis commit adds a STILL_FURTHER_SPECIALIZABLE flag to `TypeFlags`\nwhich replaces `needs_infer` and `needs_subst` in `Instance::resolve`\nand `assemble_candidates_from_impls.`\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2", "html_url": "https://github.com/rust-lang/rust/commit/c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b793f403bdfbcc0ff3e15ed8177a81d79ba4a29b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b793f403bdfbcc0ff3e15ed8177a81d79ba4a29b", "html_url": "https://github.com/rust-lang/rust/commit/b793f403bdfbcc0ff3e15ed8177a81d79ba4a29b"}], "stats": {"total": 143, "additions": 86, "deletions": 57}, "files": [{"sha": "99a6511b297acff58ac56216f88666edf735de9c", "filename": "src/librustc_middle/ty/flags.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2/src%2Flibrustc_middle%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2/src%2Flibrustc_middle%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fflags.rs?ref=c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2", "patch": "@@ -1,4 +1,4 @@\n-use crate::ty::subst::{GenericArgKind, SubstsRef};\n+use crate::ty::subst::{GenericArg, GenericArgKind};\n use crate::ty::{self, InferConst, Ty, TypeFlags};\n \n #[derive(Debug)]\n@@ -81,6 +81,7 @@ impl FlagComputation {\n \n             &ty::Param(_) => {\n                 self.add_flags(TypeFlags::HAS_TY_PARAM);\n+                self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n             }\n \n             &ty::Generator(_, ref substs, _) => {\n@@ -99,14 +100,17 @@ impl FlagComputation {\n \n             &ty::Bound(debruijn, _) => {\n                 self.add_binder(debruijn);\n+                self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n             }\n \n             &ty::Placeholder(..) => {\n                 self.add_flags(TypeFlags::HAS_TY_PLACEHOLDER);\n+                self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n             }\n \n             &ty::Infer(infer) => {\n                 self.add_flags(TypeFlags::HAS_TY_INFER);\n+                self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n                 match infer {\n                     ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_) => {}\n \n@@ -218,17 +222,23 @@ impl FlagComputation {\n             }\n             ty::ConstKind::Infer(infer) => {\n                 self.add_flags(TypeFlags::HAS_CT_INFER);\n+                self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n                 match infer {\n                     InferConst::Fresh(_) => {}\n                     InferConst::Var(_) => self.add_flags(TypeFlags::KEEP_IN_LOCAL_TCX),\n                 }\n             }\n-            ty::ConstKind::Bound(debruijn, _) => self.add_binder(debruijn),\n+            ty::ConstKind::Bound(debruijn, _) => {\n+                self.add_binder(debruijn);\n+                self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n+            }\n             ty::ConstKind::Param(_) => {\n                 self.add_flags(TypeFlags::HAS_CT_PARAM);\n+                self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n             }\n             ty::ConstKind::Placeholder(_) => {\n                 self.add_flags(TypeFlags::HAS_CT_PLACEHOLDER);\n+                self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n             }\n             ty::ConstKind::Value(_) => {}\n         }\n@@ -243,7 +253,7 @@ impl FlagComputation {\n         self.add_substs(projection_ty.substs);\n     }\n \n-    fn add_substs(&mut self, substs: SubstsRef<'_>) {\n+    fn add_substs(&mut self, substs: &[GenericArg<'_>]) {\n         for kind in substs {\n             match kind.unpack() {\n                 GenericArgKind::Type(ty) => self.add_ty(ty),"}, {"sha": "a3d611a13259226c22493a565bd4f3c089d2caee", "filename": "src/librustc_middle/ty/fold.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2/src%2Flibrustc_middle%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2/src%2Flibrustc_middle%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ffold.rs?ref=c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2", "patch": "@@ -142,6 +142,13 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n         self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)\n     }\n \n+    /// Indicates whether this value still has parameters/placeholders/inference variables\n+    /// which could be replaced later, in a way that would change the results of `impl`\n+    /// specialization.\n+    fn still_further_specializable(&self) -> bool {\n+        self.has_type_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE)\n+    }\n+\n     /// A visitor that does not recurse into types, works like `fn walk_shallow` in `Ty`.\n     fn visit_tys_shallow(&self, visit: impl FnMut(Ty<'tcx>) -> bool) -> bool {\n         pub struct Visitor<F>(F);"}, {"sha": "2585de07a5b4f2965fb46433df65b9164b2790d4", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 57, "deletions": 52, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2", "patch": "@@ -524,101 +524,106 @@ bitflags! {\n         // Does this have parameters? Used to determine whether substitution is\n         // required.\n         /// Does this have [Param]?\n-        const HAS_TY_PARAM              = 1 << 0;\n+        const HAS_TY_PARAM                = 1 << 0;\n         /// Does this have [ReEarlyBound]?\n-        const HAS_RE_PARAM              = 1 << 1;\n+        const HAS_RE_PARAM                = 1 << 1;\n         /// Does this have [ConstKind::Param]?\n-        const HAS_CT_PARAM              = 1 << 2;\n+        const HAS_CT_PARAM                = 1 << 2;\n \n-        const NEEDS_SUBST               = TypeFlags::HAS_TY_PARAM.bits\n-                                        | TypeFlags::HAS_RE_PARAM.bits\n-                                        | TypeFlags::HAS_CT_PARAM.bits;\n+        const NEEDS_SUBST                 = TypeFlags::HAS_TY_PARAM.bits\n+                                          | TypeFlags::HAS_RE_PARAM.bits\n+                                          | TypeFlags::HAS_CT_PARAM.bits;\n \n         /// Does this have [Infer]?\n-        const HAS_TY_INFER              = 1 << 3;\n+        const HAS_TY_INFER                = 1 << 3;\n         /// Does this have [ReVar]?\n-        const HAS_RE_INFER              = 1 << 4;\n+        const HAS_RE_INFER                = 1 << 4;\n         /// Does this have [ConstKind::Infer]?\n-        const HAS_CT_INFER              = 1 << 5;\n+        const HAS_CT_INFER                = 1 << 5;\n \n         /// Does this have inference variables? Used to determine whether\n         /// inference is required.\n-        const NEEDS_INFER               = TypeFlags::HAS_TY_INFER.bits\n-                                        | TypeFlags::HAS_RE_INFER.bits\n-                                        | TypeFlags::HAS_CT_INFER.bits;\n+        const NEEDS_INFER                 = TypeFlags::HAS_TY_INFER.bits\n+                                          | TypeFlags::HAS_RE_INFER.bits\n+                                          | TypeFlags::HAS_CT_INFER.bits;\n \n         /// Does this have [Placeholder]?\n-        const HAS_TY_PLACEHOLDER        = 1 << 6;\n+        const HAS_TY_PLACEHOLDER          = 1 << 6;\n         /// Does this have [RePlaceholder]?\n-        const HAS_RE_PLACEHOLDER        = 1 << 7;\n+        const HAS_RE_PLACEHOLDER          = 1 << 7;\n         /// Does this have [ConstKind::Placeholder]?\n-        const HAS_CT_PLACEHOLDER        = 1 << 8;\n+        const HAS_CT_PLACEHOLDER          = 1 << 8;\n \n         /// `true` if there are \"names\" of regions and so forth\n         /// that are local to a particular fn/inferctxt\n-        const HAS_FREE_LOCAL_REGIONS    = 1 << 9;\n+        const HAS_FREE_LOCAL_REGIONS      = 1 << 9;\n \n         /// `true` if there are \"names\" of types and regions and so forth\n         /// that are local to a particular fn\n-        const HAS_FREE_LOCAL_NAMES      = TypeFlags::HAS_TY_PARAM.bits\n-                                        | TypeFlags::HAS_CT_PARAM.bits\n-                                        | TypeFlags::HAS_TY_INFER.bits\n-                                        | TypeFlags::HAS_CT_INFER.bits\n-                                        | TypeFlags::HAS_TY_PLACEHOLDER.bits\n-                                        | TypeFlags::HAS_CT_PLACEHOLDER.bits\n-                                        | TypeFlags::HAS_FREE_LOCAL_REGIONS.bits;\n+        const HAS_FREE_LOCAL_NAMES        = TypeFlags::HAS_TY_PARAM.bits\n+                                          | TypeFlags::HAS_CT_PARAM.bits\n+                                          | TypeFlags::HAS_TY_INFER.bits\n+                                          | TypeFlags::HAS_CT_INFER.bits\n+                                          | TypeFlags::HAS_TY_PLACEHOLDER.bits\n+                                          | TypeFlags::HAS_CT_PLACEHOLDER.bits\n+                                          | TypeFlags::HAS_FREE_LOCAL_REGIONS.bits;\n \n         /// Does this have [Projection] or [UnnormalizedProjection]?\n-        const HAS_TY_PROJECTION         = 1 << 10;\n+        const HAS_TY_PROJECTION           = 1 << 10;\n         /// Does this have [Opaque]?\n-        const HAS_TY_OPAQUE             = 1 << 11;\n+        const HAS_TY_OPAQUE               = 1 << 11;\n         /// Does this have [ConstKind::Unevaluated]?\n-        const HAS_CT_PROJECTION         = 1 << 12;\n+        const HAS_CT_PROJECTION           = 1 << 12;\n \n         /// Could this type be normalized further?\n-        const HAS_PROJECTION            = TypeFlags::HAS_TY_PROJECTION.bits\n-                                        | TypeFlags::HAS_TY_OPAQUE.bits\n-                                        | TypeFlags::HAS_CT_PROJECTION.bits;\n+        const HAS_PROJECTION              = TypeFlags::HAS_TY_PROJECTION.bits\n+                                          | TypeFlags::HAS_TY_OPAQUE.bits\n+                                          | TypeFlags::HAS_CT_PROJECTION.bits;\n \n         /// Present if the type belongs in a local type context.\n         /// Set for placeholders and inference variables that are not \"Fresh\".\n-        const KEEP_IN_LOCAL_TCX         = 1 << 13;\n+        const KEEP_IN_LOCAL_TCX           = 1 << 13;\n \n         /// Is an error type reachable?\n-        const HAS_TY_ERR                = 1 << 14;\n+        const HAS_TY_ERR                  = 1 << 14;\n \n         /// Does this have any region that \"appears free\" in the type?\n         /// Basically anything but [ReLateBound] and [ReErased].\n-        const HAS_FREE_REGIONS          = 1 << 15;\n+        const HAS_FREE_REGIONS            = 1 << 15;\n \n         /// Does this have any [ReLateBound] regions? Used to check\n         /// if a global bound is safe to evaluate.\n-        const HAS_RE_LATE_BOUND         = 1 << 16;\n+        const HAS_RE_LATE_BOUND           = 1 << 16;\n \n         /// Does this have any [ReErased] regions?\n-        const HAS_RE_ERASED             = 1 << 17;\n+        const HAS_RE_ERASED               = 1 << 17;\n+\n+        /// Does this value have parameters/placeholders/inference variables which could be\n+        /// replaced later, in a way that would change the results of `impl` specialization?\n+        const STILL_FURTHER_SPECIALIZABLE = 1 << 18;\n \n         /// Flags representing the nominal content of a type,\n         /// computed by FlagsComputation. If you add a new nominal\n         /// flag, it should be added here too.\n-        const NOMINAL_FLAGS             = TypeFlags::HAS_TY_PARAM.bits\n-                                        | TypeFlags::HAS_RE_PARAM.bits\n-                                        | TypeFlags::HAS_CT_PARAM.bits\n-                                        | TypeFlags::HAS_TY_INFER.bits\n-                                        | TypeFlags::HAS_RE_INFER.bits\n-                                        | TypeFlags::HAS_CT_INFER.bits\n-                                        | TypeFlags::HAS_TY_PLACEHOLDER.bits\n-                                        | TypeFlags::HAS_RE_PLACEHOLDER.bits\n-                                        | TypeFlags::HAS_CT_PLACEHOLDER.bits\n-                                        | TypeFlags::HAS_FREE_LOCAL_REGIONS.bits\n-                                        | TypeFlags::HAS_TY_PROJECTION.bits\n-                                        | TypeFlags::HAS_TY_OPAQUE.bits\n-                                        | TypeFlags::HAS_CT_PROJECTION.bits\n-                                        | TypeFlags::KEEP_IN_LOCAL_TCX.bits\n-                                        | TypeFlags::HAS_TY_ERR.bits\n-                                        | TypeFlags::HAS_FREE_REGIONS.bits\n-                                        | TypeFlags::HAS_RE_LATE_BOUND.bits\n-                                        | TypeFlags::HAS_RE_ERASED.bits;\n+        const NOMINAL_FLAGS               = TypeFlags::HAS_TY_PARAM.bits\n+                                          | TypeFlags::HAS_RE_PARAM.bits\n+                                          | TypeFlags::HAS_CT_PARAM.bits\n+                                          | TypeFlags::HAS_TY_INFER.bits\n+                                          | TypeFlags::HAS_RE_INFER.bits\n+                                          | TypeFlags::HAS_CT_INFER.bits\n+                                          | TypeFlags::HAS_TY_PLACEHOLDER.bits\n+                                          | TypeFlags::HAS_RE_PLACEHOLDER.bits\n+                                          | TypeFlags::HAS_CT_PLACEHOLDER.bits\n+                                          | TypeFlags::HAS_FREE_LOCAL_REGIONS.bits\n+                                          | TypeFlags::HAS_TY_PROJECTION.bits\n+                                          | TypeFlags::HAS_TY_OPAQUE.bits\n+                                          | TypeFlags::HAS_CT_PROJECTION.bits\n+                                          | TypeFlags::KEEP_IN_LOCAL_TCX.bits\n+                                          | TypeFlags::HAS_TY_ERR.bits\n+                                          | TypeFlags::HAS_FREE_REGIONS.bits\n+                                          | TypeFlags::HAS_RE_LATE_BOUND.bits\n+                                          | TypeFlags::HAS_RE_ERASED.bits\n+                                          | TypeFlags::STILL_FURTHER_SPECIALIZABLE.bits;\n     }\n }\n "}, {"sha": "e98ea097c901e2319b2a088a2cc72a11688801db", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2", "patch": "@@ -1623,16 +1623,19 @@ impl RegionKind {\n                 flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;\n                 flags = flags | TypeFlags::HAS_RE_INFER;\n                 flags = flags | TypeFlags::KEEP_IN_LOCAL_TCX;\n+                flags = flags | TypeFlags::STILL_FURTHER_SPECIALIZABLE;\n             }\n             ty::RePlaceholder(..) => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n                 flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;\n                 flags = flags | TypeFlags::HAS_RE_PLACEHOLDER;\n+                flags = flags | TypeFlags::STILL_FURTHER_SPECIALIZABLE;\n             }\n             ty::ReEarlyBound(..) => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n                 flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;\n                 flags = flags | TypeFlags::HAS_RE_PARAM;\n+                flags = flags | TypeFlags::STILL_FURTHER_SPECIALIZABLE;\n             }\n             ty::ReFree { .. } | ty::ReScope { .. } => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;"}, {"sha": "3057b79547dc05aa0565019e3211687b3abd5690", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2", "patch": "@@ -1028,7 +1028,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                         // assume `poly_trait_ref` isn't monomorphic, if it contains any.\n                         let poly_trait_ref =\n                             selcx.infcx().resolve_vars_if_possible(&poly_trait_ref);\n-                        !poly_trait_ref.needs_infer() && !poly_trait_ref.needs_subst()\n+                        !poly_trait_ref.still_further_specializable()\n                     } else {\n                         debug!(\n                             \"assemble_candidates_from_impls: not eligible due to default: \\"}, {"sha": "e845cc9a15869b6d15f05d968017e2699b450774", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=c665eaeeb05d2149cd3ecfd8af62b6af7858a6a2", "patch": "@@ -127,7 +127,11 @@ fn resolve_associated_item<'tcx>(\n                 // and the obligation is monomorphic, otherwise passes such as\n                 // transmute checking and polymorphic MIR optimizations could\n                 // get a result which isn't correct for all monomorphizations.\n-                if param_env.reveal == Reveal::All { !trait_ref.needs_subst() } else { false }\n+                if param_env.reveal == Reveal::All {\n+                    !trait_ref.still_further_specializable()\n+                } else {\n+                    false\n+                }\n             };\n \n             if !eligible {"}]}