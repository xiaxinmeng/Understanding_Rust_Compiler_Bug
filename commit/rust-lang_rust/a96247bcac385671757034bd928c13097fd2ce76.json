{"sha": "a96247bcac385671757034bd928c13097fd2ce76", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NjI0N2JjYWMzODU2NzE3NTcwMzRiZDkyOGMxMzA5N2ZkMmNlNzY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-06T19:06:01Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-06T19:06:04Z"}, "message": "Set possibility to hide attributes", "tree": {"sha": "fcc3f30bb0f490f9d848ca88e10874847aadb5f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcc3f30bb0f490f9d848ca88e10874847aadb5f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a96247bcac385671757034bd928c13097fd2ce76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a96247bcac385671757034bd928c13097fd2ce76", "html_url": "https://github.com/rust-lang/rust/commit/a96247bcac385671757034bd928c13097fd2ce76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a96247bcac385671757034bd928c13097fd2ce76/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1a3f88e5501521548ddea4e918d55cc1c777187", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1a3f88e5501521548ddea4e918d55cc1c777187", "html_url": "https://github.com/rust-lang/rust/commit/b1a3f88e5501521548ddea4e918d55cc1c777187"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "aa1fd63082f98cac8baec57d29c4215a75ce9831", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a96247bcac385671757034bd928c13097fd2ce76/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96247bcac385671757034bd928c13097fd2ce76/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=a96247bcac385671757034bd928c13097fd2ce76", "patch": "@@ -2493,24 +2493,24 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n }\n \n fn attribute_without_value(s: &str) -> bool {\n-    vec!(\"must_use\", \"no_mangle\", \"unsafe_destructor_blind_to_params\").iter().any(|x| x == &s)\n+    [\"must_use\", \"no_mangle\", \"unsafe_destructor_blind_to_params\"].iter().any(|x| x == &s)\n }\n \n fn attribute_with_value(s: &str) -> bool {\n-    vec!(\"export_name\", \"lang\", \"link_section\", \"must_use\").iter().any(|x| x == &s)\n+    [\"export_name\", \"lang\", \"link_section\", \"must_use\"].iter().any(|x| x == &s)\n }\n \n fn attribute_with_values(s: &str) -> bool {\n-    vec!(\"repr\").iter().any(|x| x == &s)\n+    [\"repr\"].iter().any(|x| x == &s)\n }\n \n-fn render_attribute(attr: &clean::Attribute, recurse: bool) -> String {\n+fn render_attribute(attr: &clean::Attribute, recurse: bool) -> Option<String> {\n     match *attr {\n         clean::Word(ref s) if attribute_without_value(&*s) || recurse => {\n-            format!(\"{}\", s)\n+            Some(format!(\"{}\", s))\n         }\n         clean::NameValue(ref k, ref v) if attribute_with_value(&*k) => {\n-            format!(\"{} = \\\"{}\\\"\", k, v)\n+            Some(format!(\"{} = \\\"{}\\\"\", k, v))\n         }\n         clean::List(ref k, ref values) if attribute_with_values(&*k) => {\n             let mut display = Vec::new();\n@@ -2521,21 +2521,25 @@ fn render_attribute(attr: &clean::Attribute, recurse: bool) -> String {\n                     display.push(format!(\"{}\", s));\n                 }\n             }\n-            format!(\"{}({})\", k, display.join(\", \"))\n+            Some(format!(\"{}({})\", k, display.join(\", \")))\n         }\n         _ => {\n-            String::new()\n+            None\n         }\n     }\n }\n \n fn render_attributes(w: &mut fmt::Formatter, it: &clean::Item) -> fmt::Result {\n+    let mut attrs = String::new();\n+\n     for attr in &it.attrs {\n-        let s = render_attribute(attr, false);\n-        if s.len() > 0 {\n-            write!(w, \"#[{}]\\n\", s)?;\n+        if let Some(s) = render_attribute(attr, false) {\n+            attrs.push_str(&format!(\"#[{}]\\n\", s));\n         }\n     }\n+    if attrs.len() > 0 {\n+        write!(w, \"<div class=\\\"docblock\\\">{}</div>\", &attrs)?;\n+    }\n     Ok(())\n }\n "}]}