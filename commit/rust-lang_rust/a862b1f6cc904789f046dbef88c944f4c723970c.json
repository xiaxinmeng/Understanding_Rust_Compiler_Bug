{"sha": "a862b1f6cc904789f046dbef88c944f4c723970c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NjJiMWY2Y2M5MDQ3ODlmMDQ2ZGJlZjg4Yzk0NGY0YzcyMzk3MGM=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2021-05-17T23:14:13Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2021-05-17T23:14:13Z"}, "message": "Adjust linker_is_gnu branches for cases that don't work on windows.", "tree": {"sha": "74193466a8d8f34f2c5ca8451d0e6a50ed4c60a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74193466a8d8f34f2c5ca8451d0e6a50ed4c60a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a862b1f6cc904789f046dbef88c944f4c723970c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a862b1f6cc904789f046dbef88c944f4c723970c", "html_url": "https://github.com/rust-lang/rust/commit/a862b1f6cc904789f046dbef88c944f4c723970c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a862b1f6cc904789f046dbef88c944f4c723970c/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45225d24bff4bec2eec55f89695876454daa23e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/45225d24bff4bec2eec55f89695876454daa23e2", "html_url": "https://github.com/rust-lang/rust/commit/45225d24bff4bec2eec55f89695876454daa23e2"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "dfcb3fe94f63069486875eac785924b935b7227e", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a862b1f6cc904789f046dbef88c944f4c723970c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a862b1f6cc904789f046dbef88c944f4c723970c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=a862b1f6cc904789f046dbef88c944f4c723970c", "patch": "@@ -276,18 +276,27 @@ impl<'a> Linker for GccLinker<'a> {\n     fn set_output_kind(&mut self, output_kind: LinkOutputKind, out_filename: &Path) {\n         match output_kind {\n             LinkOutputKind::DynamicNoPicExe => {\n-                if !self.is_ld && self.sess.target.linker_is_gnu {\n+                if !self.is_ld\n+                    && self.sess.target.linker_is_gnu\n+                    && !self.sess.target.is_like_windows\n+                {\n                     self.cmd.arg(\"-no-pie\");\n                 }\n             }\n             LinkOutputKind::DynamicPicExe => {\n-                // `-pie` works for both gcc wrapper and ld.\n-                self.cmd.arg(\"-pie\");\n+                // noop on windows w/ gcc & ld, error w/ lld\n+                if !self.sess.target.is_like_windows {\n+                    // `-pie` works for both gcc wrapper and ld\n+                    self.cmd.arg(\"-pie\");\n+                }\n             }\n             LinkOutputKind::StaticNoPicExe => {\n                 // `-static` works for both gcc wrapper and ld.\n                 self.cmd.arg(\"-static\");\n-                if !self.is_ld && self.sess.target.linker_is_gnu {\n+                if !self.is_ld\n+                    && self.sess.target.linker_is_gnu\n+                    && !self.sess.target.is_like_windows\n+                {\n                     self.cmd.arg(\"-no-pie\");\n                 }\n             }\n@@ -347,7 +356,7 @@ impl<'a> Linker for GccLinker<'a> {\n                 // has -needed-l{} / -needed_library {}\n                 // but we have no way to detect that here.\n                 self.sess.warn(\"`as-needed` modifier not implemented yet for ld64\");\n-            } else if self.sess.target.linker_is_gnu {\n+            } else if self.sess.target.linker_is_gnu && !self.sess.target.is_like_windows {\n                 self.linker_arg(\"--no-as-needed\");\n             } else {\n                 self.sess.warn(\"`as-needed` modifier not supported for current linker\");\n@@ -358,7 +367,7 @@ impl<'a> Linker for GccLinker<'a> {\n         if !as_needed {\n             if self.sess.target.is_like_osx {\n                 // See above FIXME comment\n-            } else if self.sess.target.linker_is_gnu {\n+            } else if self.sess.target.linker_is_gnu && !self.sess.target.is_like_windows {\n                 self.linker_arg(\"--as-needed\");\n             }\n         }\n@@ -690,7 +699,7 @@ impl<'a> Linker for GccLinker<'a> {\n     }\n \n     fn add_as_needed(&mut self) {\n-        if self.sess.target.linker_is_gnu {\n+        if self.sess.target.linker_is_gnu && !self.sess.target.is_like_windows {\n             self.linker_arg(\"--as-needed\");\n         } else if self.sess.target.is_like_solaris {\n             // -z ignore is the Solaris equivalent to the GNU ld --as-needed option"}]}