{"sha": "a35cf79fcb961d43828aa9f010e7109b60633f52", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNWNmNzlmY2I5NjFkNDM4MjhhYTlmMDEwZTcxMDliNjA2MzNmNTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-29T23:45:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-29T23:45:45Z"}, "message": "Auto merge of #56843 - csmoe:non-copy, r=davidtwco\n\nAdd a note describing the type of the non-Copy moved variable\n\nCloses #56654\nr?@davidtwco", "tree": {"sha": "e95a2be7fa48bbc7f4a4a6f2276514bdc9003033", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e95a2be7fa48bbc7f4a4a6f2276514bdc9003033"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a35cf79fcb961d43828aa9f010e7109b60633f52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a35cf79fcb961d43828aa9f010e7109b60633f52", "html_url": "https://github.com/rust-lang/rust/commit/a35cf79fcb961d43828aa9f010e7109b60633f52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a35cf79fcb961d43828aa9f010e7109b60633f52/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59183180f718fc2212828e180f2f856f0db1bb9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/59183180f718fc2212828e180f2f856f0db1bb9c", "html_url": "https://github.com/rust-lang/rust/commit/59183180f718fc2212828e180f2f856f0db1bb9c"}, {"sha": "48de0ff3332660568c9371c5c750b337ca168f33", "url": "https://api.github.com/repos/rust-lang/rust/commits/48de0ff3332660568c9371c5c750b337ca168f33", "html_url": "https://github.com/rust-lang/rust/commit/48de0ff3332660568c9371c5c750b337ca168f33"}], "stats": {"total": 189, "additions": 94, "deletions": 95}, "files": [{"sha": "6a5b5d172bbe42d994f01efc79070c4bea7ff3c1", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 29, "deletions": 47, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -181,38 +181,36 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 );\n             }\n \n-            if let Some(ty) = self.retrieve_type_for_place(used_place) {\n-                let needs_note = match ty.sty {\n-                    ty::Closure(id, _) => {\n-                        let tables = self.infcx.tcx.typeck_tables_of(id);\n-                        let node_id = self.infcx.tcx.hir().as_local_node_id(id).unwrap();\n-                        let hir_id = self.infcx.tcx.hir().node_to_hir_id(node_id);\n-\n-                        tables.closure_kind_origins().get(hir_id).is_none()\n-                    }\n-                    _ => true,\n-                };\n+            let ty = used_place.ty(self.mir, self.infcx.tcx).to_ty(self.infcx.tcx);\n+            let needs_note = match ty.sty {\n+                ty::Closure(id, _) => {\n+                    let tables = self.infcx.tcx.typeck_tables_of(id);\n+                    let node_id = self.infcx.tcx.hir().as_local_node_id(id).unwrap();\n+                    let hir_id = self.infcx.tcx.hir().node_to_hir_id(node_id);\n \n-                if needs_note {\n-                    let mpi = self.move_data.moves[move_out_indices[0]].path;\n-                    let place = &self.move_data.move_paths[mpi].place;\n-\n-                    if let Some(ty) = self.retrieve_type_for_place(place) {\n-                        let note_msg = match self.describe_place_with_options(\n-                            place,\n-                            IncludingDowncast(true),\n-                        ) {\n-                            Some(name) => format!(\"`{}`\", name),\n-                            None => \"value\".to_owned(),\n-                        };\n-\n-                        err.note(&format!(\n-                            \"move occurs because {} has type `{}`, \\\n-                             which does not implement the `Copy` trait\",\n-                            note_msg, ty\n-                        ));\n-                    }\n+                    tables.closure_kind_origins().get(hir_id).is_none()\n                 }\n+                _ => true,\n+            };\n+\n+            if needs_note {\n+                let mpi = self.move_data.moves[move_out_indices[0]].path;\n+                let place = &self.move_data.move_paths[mpi].place;\n+\n+                let ty = place.ty(self.mir, self.infcx.tcx).to_ty(self.infcx.tcx);\n+                let note_msg = match self.describe_place_with_options(\n+                    place,\n+                    IncludingDowncast(true),\n+                ) {\n+                    Some(name) => format!(\"`{}`\", name),\n+                    None => \"value\".to_owned(),\n+                };\n+\n+                err.note(&format!(\n+                    \"move occurs because {} has type `{}`, \\\n+                     which does not implement the `Copy` trait\",\n+                    note_msg, ty\n+                ));\n             }\n \n             if let Some((_, mut old_err)) = self.move_error_reported\n@@ -1558,7 +1556,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         )?;\n                         buf.push_str(\"[\");\n                         if self.append_local_to_string(index, buf).is_err() {\n-                            buf.push_str(\"..\");\n+                            buf.push_str(\"_\");\n                         }\n                         buf.push_str(\"]\");\n                     }\n@@ -1663,22 +1661,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// Retrieve type of a place for the current MIR representation\n-    fn retrieve_type_for_place(&self, place: &Place<'tcx>) -> Option<ty::Ty> {\n-        match place {\n-            Place::Local(local) => {\n-                let local = &self.mir.local_decls[*local];\n-                Some(local.ty)\n-            }\n-            Place::Promoted(ref prom) => Some(prom.1),\n-            Place::Static(ref st) => Some(st.ty),\n-            Place::Projection(ref proj) => match proj.elem {\n-                ProjectionElem::Field(_, ty) => Some(ty),\n-                _ => None,\n-            },\n-        }\n-    }\n-\n     /// Check if a place is a thread-local static.\n     pub fn is_place_thread_local(&self, place: &Place<'tcx>) -> bool {\n         if let Place::Static(statik) = place {"}, {"sha": "24467faa90ca97c4b758b359b6e478048db4f2c3", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -316,7 +316,7 @@ LL |         v[0].y;\n LL |         drop(x);\n    |              - borrow later used here\n \n-error[E0503]: cannot use `v[..].y` because it was mutably borrowed\n+error[E0503]: cannot use `v[_].y` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:261:9\n    |\n LL |         let x = &mut v;"}, {"sha": "279548f870fd042945721d26f1fae0f5ab21870d", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.mir.stderr?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -316,7 +316,7 @@ LL |         v[0].y;\n LL |         drop(x);\n    |              - borrow later used here\n \n-error[E0503]: cannot use `v[..].y` because it was mutably borrowed\n+error[E0503]: cannot use `v[_].y` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:261:9\n    |\n LL |         let x = &mut v;"}, {"sha": "eb622ac10addf0abfccd917b86463b5b0af4ca9a", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -260,7 +260,7 @@ fn main() {\n         let x = &mut v;\n         v[0].y;\n         //[ast]~^ ERROR cannot use `v[..].y` because it was mutably borrowed\n-        //[mir]~^^ ERROR cannot use `v[..].y` because it was mutably borrowed\n+        //[mir]~^^ ERROR cannot use `v[_].y` because it was mutably borrowed\n         //[mir]~| ERROR cannot use `*v` because it was mutably borrowed\n         drop(x);\n     }"}, {"sha": "25a9a112044301750377cb1806fdb6864b5218b9", "filename": "src/test/ui/borrowck/borrowck-field-sensitivity.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.nll.stderr?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -5,6 +5,8 @@ LL |     drop(x.b);\n    |          --- value moved here\n LL |     drop(*x.b); //~ ERROR use of moved value: `*x.b`\n    |          ^^^^ value used here after move\n+   |\n+   = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `x.b`\n   --> $DIR/borrowck-field-sensitivity.rs:14:10\n@@ -13,6 +15,8 @@ LL |     let y = A { a: 3, .. x };\n    |             ---------------- value moved here\n LL |     drop(*x.b); //~ ERROR use of moved value: `*x.b`\n    |          ^^^^ value used here after move\n+   |\n+   = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x.b`\n   --> $DIR/borrowck-field-sensitivity.rs:20:13"}, {"sha": "2e5477c573bbea1521a160960289a39bb6879f11", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array.ast.nll.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/59183180f718fc2212828e180f2f856f0db1bb9c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59183180f718fc2212828e180f2f856f0db1bb9c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.ast.nll.stderr?ref=59183180f718fc2212828e180f2f856f0db1bb9c", "patch": "@@ -1,19 +0,0 @@\n-error[E0382]: use of moved value: `a[..]`\n-  --> $DIR/borrowck-move-out-from-array.rs:10:14\n-   |\n-LL |     let [_, _x] = a;\n-   |             -- value moved here\n-LL |     let [.., _y] = a; //[ast]~ ERROR [E0382]\n-   |              ^^ value used here after move\n-\n-error[E0382]: use of moved value: `a[..]`\n-  --> $DIR/borrowck-move-out-from-array.rs:17:10\n-   |\n-LL |     let [_x, _] = a;\n-   |          -- value moved here\n-LL |     let [_y..] = a; //[ast]~ ERROR [E0382]\n-   |          ^^ value used here after move\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0382`."}, {"sha": "f866ff9e9bae11c5dab08fe72b52dfc96ca325cd", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array.mir.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.mir.stderr?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -5,6 +5,8 @@ LL |     let [_, _x] = a;\n    |             -- value moved here\n LL |     let [.., _y] = a; //[ast]~ ERROR [E0382]\n    |              ^^ value used here after move\n+   |\n+   = note: move occurs because `a[..]` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array.rs:17:10\n@@ -13,6 +15,8 @@ LL |     let [_x, _] = a;\n    |          -- value moved here\n LL |     let [_y..] = a; //[ast]~ ERROR [E0382]\n    |          ^^ value used here after move\n+   |\n+   = note: move occurs because `a[..]` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6dc2778892d2ec91470de7f3f6485a8ca171f75f", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-move-tail.ast.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.ast.nll.stderr?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -1,11 +1,11 @@\n-error[E0506]: cannot assign to `a[..]` because it is borrowed\n+error[E0506]: cannot assign to `a[_]` because it is borrowed\n   --> $DIR/borrowck-vec-pattern-move-tail.rs:16:5\n    |\n LL |         [1, 2, ref tail..] => tail,\n-   |                -------- borrow of `a[..]` occurs here\n+   |                -------- borrow of `a[_]` occurs here\n ...\n LL |     a[2] = 0; //[ast]~ ERROR cannot assign to `a[..]` because it is borrowed\n-   |     ^^^^^^^^ assignment to borrowed `a[..]` occurs here\n+   |     ^^^^^^^^ assignment to borrowed `a[_]` occurs here\n ...\n LL |     println!(\"t[0]: {}\", t[0]);\n    |                          ---- borrow later used here"}, {"sha": "6eb9eac760f008410f456978b0d67fdfacd63c9e", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-move-tail.cmp.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.cmp.stderr?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -7,14 +7,14 @@ LL |         [1, 2, ref tail..] => tail,\n LL |     a[2] = 0; //[ast]~ ERROR cannot assign to `a[..]` because it is borrowed\n    |     ^^^^^^^^ assignment to borrowed `a[..]` occurs here\n \n-error[E0506]: cannot assign to `a[..]` because it is borrowed (Mir)\n+error[E0506]: cannot assign to `a[_]` because it is borrowed (Mir)\n   --> $DIR/borrowck-vec-pattern-move-tail.rs:16:5\n    |\n LL |         [1, 2, ref tail..] => tail,\n-   |                -------- borrow of `a[..]` occurs here\n+   |                -------- borrow of `a[_]` occurs here\n ...\n LL |     a[2] = 0; //[ast]~ ERROR cannot assign to `a[..]` because it is borrowed\n-   |     ^^^^^^^^ assignment to borrowed `a[..]` occurs here\n+   |     ^^^^^^^^ assignment to borrowed `a[_]` occurs here\n ...\n LL |     println!(\"t[0]: {}\", t[0]);\n    |                          ---- borrow later used here"}, {"sha": "e14ecd90d56fb52e66ac31869739c026925704e9", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-move-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-move-tail.rs?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -15,7 +15,7 @@ fn main() {\n     println!(\"t[0]: {}\", t[0]);\n     a[2] = 0; //[ast]~ ERROR cannot assign to `a[..]` because it is borrowed\n               //[cmp]~^ ERROR cannot assign to `a[..]` because it is borrowed (Ast)\n-              //[cmp]~| ERROR cannot assign to `a[..]` because it is borrowed (Mir)\n+              //[cmp]~| ERROR cannot assign to `a[_]` because it is borrowed (Mir)\n     println!(\"t[0]: {}\", t[0]);\n     t[0];\n }"}, {"sha": "018a3173af1b0d6ef33d6c85a3d28f52a9caf861", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.nll.stderr?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -1,23 +1,23 @@\n-error[E0506]: cannot assign to `vec[..]` because it is borrowed\n+error[E0506]: cannot assign to `vec[_]` because it is borrowed\n   --> $DIR/borrowck-vec-pattern-nesting.rs:10:13\n    |\n LL |         [box ref _a, _, _] => {\n-   |              ------ borrow of `vec[..]` occurs here\n+   |              ------ borrow of `vec[_]` occurs here\n LL |         //~^ borrow of `vec[..]` occurs here\n LL |             vec[0] = box 4; //~ ERROR cannot assign\n-   |             ^^^^^^ assignment to borrowed `vec[..]` occurs here\n+   |             ^^^^^^ assignment to borrowed `vec[_]` occurs here\n LL |             //~^ assignment to borrowed `vec[..]` occurs here\n LL |             _a.use_ref();\n    |             -- borrow later used here\n \n-error[E0506]: cannot assign to `vec[..]` because it is borrowed\n+error[E0506]: cannot assign to `vec[_]` because it is borrowed\n   --> $DIR/borrowck-vec-pattern-nesting.rs:23:13\n    |\n LL |         &mut [ref _b..] => {\n-   |               ------ borrow of `vec[..]` occurs here\n+   |               ------ borrow of `vec[_]` occurs here\n LL |         //~^ borrow of `vec[..]` occurs here\n LL |             vec[0] = box 4; //~ ERROR cannot assign\n-   |             ^^^^^^ assignment to borrowed `vec[..]` occurs here\n+   |             ^^^^^^ assignment to borrowed `vec[_]` occurs here\n LL |             //~^ assignment to borrowed `vec[..]` occurs here\n LL |             _b.use_ref();\n    |             -- borrow later used here"}, {"sha": "0e99e158eda027a6fde6c9ffce0b01f02c8bcabf", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.ast.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.ast.nll.stderr?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -14,6 +14,8 @@ LL |         f(f(10));\n    |         - ^ value used here after move\n    |         |\n    |         value moved here\n+   |\n+   = note: move occurs because `*f` has type `F`, which does not implement the `Copy` trait\n \n error[E0499]: cannot borrow `*f` as mutable more than once at a time\n   --> $DIR/two-phase-nonrecv-autoref.rs:76:11\n@@ -43,6 +45,8 @@ LL |         f(f(10));\n    |         - ^ value used here after move\n    |         |\n    |         value moved here\n+   |\n+   = note: move occurs because `*f` has type `dyn std::ops::FnOnce(i32) -> i32`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable\n   --> $DIR/two-phase-nonrecv-autoref.rs:129:27"}, {"sha": "0e99e158eda027a6fde6c9ffce0b01f02c8bcabf", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -14,6 +14,8 @@ LL |         f(f(10));\n    |         - ^ value used here after move\n    |         |\n    |         value moved here\n+   |\n+   = note: move occurs because `*f` has type `F`, which does not implement the `Copy` trait\n \n error[E0499]: cannot borrow `*f` as mutable more than once at a time\n   --> $DIR/two-phase-nonrecv-autoref.rs:76:11\n@@ -43,6 +45,8 @@ LL |         f(f(10));\n    |         - ^ value used here after move\n    |         |\n    |         value moved here\n+   |\n+   = note: move occurs because `*f` has type `dyn std::ops::FnOnce(i32) -> i32`, which does not implement the `Copy` trait\n \n error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable\n   --> $DIR/two-phase-nonrecv-autoref.rs:129:27"}, {"sha": "8ea2bdb693d31499883050b254bd98d0ace2e2cd", "filename": "src/test/ui/issues/issue-27282-move-match-input-into-guard.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.stderr?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -8,6 +8,8 @@ LL |         _ if { (|| { let bar = b; *bar = false; })();\n LL |                      false } => { },\n LL |         &mut true => { println!(\"You might think we should get here\"); },\n    |              ^^^^ value used here after move\n+   |\n+   = note: move occurs because `b` has type `&mut bool`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "9770d26fb12d8eb36d58154b05e0046a587a7fe0", "filename": "src/test/ui/issues/issue-42344.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fissues%2Fissue-42344.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fissues%2Fissue-42344.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42344.nll.stderr?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -1,4 +1,4 @@\n-error[E0596]: cannot borrow `*TAB[..]` as mutable, as `TAB` is an immutable static item\n+error[E0596]: cannot borrow `*TAB[_]` as mutable, as `TAB` is an immutable static item\n   --> $DIR/issue-42344.rs:4:5\n    |\n LL |     TAB[0].iter_mut(); //~ ERROR cannot borrow data mutably in a `&` reference [E0389]"}, {"sha": "4f73a0f9d541dfc7ac4879e56ffa79e417fc1cca", "filename": "src/test/ui/issues/issue-46604.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fissues%2Fissue-46604.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fissues%2Fissue-46604.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46604.ast.nll.stderr?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -4,7 +4,7 @@ error[E0017]: references in statics may only refer to immutable values\n LL | static buf: &mut [u8] = &mut [1u8,2,3,4,5,7];   //[ast]~ ERROR E0017\n    |                         ^^^^^^^^^^^^^^^^^^^^ statics require immutable values\n \n-error[E0594]: cannot assign to `buf[..]`, as `buf` is an immutable static item\n+error[E0594]: cannot assign to `buf[_]`, as `buf` is an immutable static item\n   --> $DIR/issue-46604.rs:10:5\n    |\n LL |     buf[0]=2;                                   //[ast]~ ERROR E0389"}, {"sha": "4f73a0f9d541dfc7ac4879e56ffa79e417fc1cca", "filename": "src/test/ui/issues/issue-46604.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fissues%2Fissue-46604.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fissues%2Fissue-46604.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46604.mir.stderr?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -4,7 +4,7 @@ error[E0017]: references in statics may only refer to immutable values\n LL | static buf: &mut [u8] = &mut [1u8,2,3,4,5,7];   //[ast]~ ERROR E0017\n    |                         ^^^^^^^^^^^^^^^^^^^^ statics require immutable values\n \n-error[E0594]: cannot assign to `buf[..]`, as `buf` is an immutable static item\n+error[E0594]: cannot assign to `buf[_]`, as `buf` is an immutable static item\n   --> $DIR/issue-46604.rs:10:5\n    |\n LL |     buf[0]=2;                                   //[ast]~ ERROR E0389"}, {"sha": "45fd43687f39b3801f36e72fd95df186b131c103", "filename": "src/test/ui/liveness/liveness-use-after-move.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.nll.stderr?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -5,6 +5,8 @@ LL |     let y = x;\n    |             - value moved here\n LL |     println!(\"{}\", *x); //~ ERROR use of moved value: `*x`\n    |                    ^^ value borrowed here after move\n+   |\n+   = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "23f7f6c265e2f19d176987887d3bd4692fcea37d", "filename": "src/test/ui/nll/drop-no-may-dangle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.rs?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -17,10 +17,10 @@ fn main() {\n         use_x(*p.value);\n     } else {\n         use_x(22);\n-        v[0] += 1; //~ ERROR cannot assign to `v[..]` because it is borrowed\n+        v[0] += 1; //~ ERROR cannot assign to `v[_]` because it is borrowed\n     }\n \n-    v[0] += 1; //~ ERROR cannot assign to `v[..]` because it is borrowed\n+    v[0] += 1; //~ ERROR cannot assign to `v[_]` because it is borrowed\n }\n \n struct WrapMayNotDangle<T> {"}, {"sha": "efa825be295f2dfce15b32ef142159a87be5cf1c", "filename": "src/test/ui/nll/drop-no-may-dangle.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.stderr?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -1,23 +1,23 @@\n-error[E0506]: cannot assign to `v[..]` because it is borrowed\n+error[E0506]: cannot assign to `v[_]` because it is borrowed\n   --> $DIR/drop-no-may-dangle.rs:20:9\n    |\n LL |     let p: WrapMayNotDangle<&usize> = WrapMayNotDangle { value: &v[0] };\n-   |                                                                 ----- borrow of `v[..]` occurs here\n+   |                                                                 ----- borrow of `v[_]` occurs here\n ...\n-LL |         v[0] += 1; //~ ERROR cannot assign to `v[..]` because it is borrowed\n-   |         ^^^^^^^^^ assignment to borrowed `v[..]` occurs here\n+LL |         v[0] += 1; //~ ERROR cannot assign to `v[_]` because it is borrowed\n+   |         ^^^^^^^^^ assignment to borrowed `v[_]` occurs here\n ...\n LL | }\n    | - borrow might be used here, when `p` is dropped and runs the `Drop` code for type `WrapMayNotDangle`\n \n-error[E0506]: cannot assign to `v[..]` because it is borrowed\n+error[E0506]: cannot assign to `v[_]` because it is borrowed\n   --> $DIR/drop-no-may-dangle.rs:23:5\n    |\n LL |     let p: WrapMayNotDangle<&usize> = WrapMayNotDangle { value: &v[0] };\n-   |                                                                 ----- borrow of `v[..]` occurs here\n+   |                                                                 ----- borrow of `v[_]` occurs here\n ...\n-LL |     v[0] += 1; //~ ERROR cannot assign to `v[..]` because it is borrowed\n-   |     ^^^^^^^^^ assignment to borrowed `v[..]` occurs here\n+LL |     v[0] += 1; //~ ERROR cannot assign to `v[_]` because it is borrowed\n+   |     ^^^^^^^^^ assignment to borrowed `v[_]` occurs here\n LL | }\n    | - borrow might be used here, when `p` is dropped and runs the `Drop` code for type `WrapMayNotDangle`\n "}, {"sha": "18cba2047356a18040dd5578278b489135e0e95f", "filename": "src/test/ui/unsized-locals/borrow-after-move.nll.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.nll.stderr?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -6,6 +6,8 @@ LL |         let y = *x;\n LL |         drop_unsized(y);\n LL |         println!(\"{}\", &x);\n    |                        ^^ value borrowed here after move\n+   |\n+   = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `y`\n   --> $DIR/borrow-after-move.rs:22:24\n@@ -26,6 +28,8 @@ LL |         let y = *x;\n LL |         y.foo();\n LL |         println!(\"{}\", &x);\n    |                        ^^ value borrowed here after move\n+   |\n+   = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `y`\n   --> $DIR/borrow-after-move.rs:32:24\n@@ -45,6 +49,8 @@ LL |         x.foo();\n    |         - value moved here\n LL |         println!(\"{}\", &x);\n    |                        ^^ value borrowed here after move\n+   |\n+   = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n \n error: aborting due to 5 previous errors\n "}, {"sha": "bbe6da70fb112aae7b26e345ead0d4136c43a0e7", "filename": "src/test/ui/unsized-locals/double-move.nll.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.nll.stderr?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -15,6 +15,8 @@ LL |         let _y = *x;\n    |                  -- value moved here\n LL |         drop_unsized(x); //~ERROR use of moved value\n    |                      ^ value used here after move\n+   |\n+   = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `*x`\n   --> $DIR/double-move.rs:32:18\n@@ -23,6 +25,8 @@ LL |         drop_unsized(x);\n    |                      - value moved here\n LL |         let _y = *x; //~ERROR use of moved value\n    |                  ^^ value used here after move\n+   |\n+   = note: move occurs because `x` has type `std::boxed::Box<str>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `y`\n   --> $DIR/double-move.rs:39:9\n@@ -41,6 +45,8 @@ LL |         let _y = *x;\n    |                  -- value moved here\n LL |         x.foo(); //~ERROR use of moved value\n    |         ^ value used here after move\n+   |\n+   = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `*x`\n   --> $DIR/double-move.rs:51:18\n@@ -49,6 +55,8 @@ LL |         x.foo();\n    |         - value moved here\n LL |         let _y = *x; //~ERROR use of moved value\n    |                  ^^ value used here after move\n+   |\n+   = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n \n error: aborting due to 6 previous errors\n "}, {"sha": "3e11e94e993f5e8796b030b32a7ac418c05b174d", "filename": "src/test/ui/use/use-after-move-self.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a35cf79fcb961d43828aa9f010e7109b60633f52/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.nll.stderr?ref=a35cf79fcb961d43828aa9f010e7109b60633f52", "patch": "@@ -5,6 +5,8 @@ LL |         self.bar();\n    |         ---- value moved here\n LL |         return *self.x;  //~ ERROR use of moved value: `*self.x`\n    |                ^^^^^^^ value used here after move\n+   |\n+   = note: move occurs because `self` has type `S`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}]}