{"sha": "c8af03f4750f81069e9915643d771e4aebae1b80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4YWYwM2Y0NzUwZjgxMDY5ZTk5MTU2NDNkNzcxZTRhZWJhZTFiODA=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-10T02:30:47Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-10T02:31:45Z"}, "message": "Block formatting for tuple structs\n\nFollows the fn_args_layout option", "tree": {"sha": "dcfe525c1b57a03485a5fe7113a008d0fa405d65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcfe525c1b57a03485a5fe7113a008d0fa405d65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8af03f4750f81069e9915643d771e4aebae1b80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8af03f4750f81069e9915643d771e4aebae1b80", "html_url": "https://github.com/rust-lang/rust/commit/c8af03f4750f81069e9915643d771e4aebae1b80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8af03f4750f81069e9915643d771e4aebae1b80/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b901130cb4718dcebfd5e361a9a045117222cbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b901130cb4718dcebfd5e361a9a045117222cbf", "html_url": "https://github.com/rust-lang/rust/commit/7b901130cb4718dcebfd5e361a9a045117222cbf"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "446bbab9e0e454b8b7da9336fc2f05d98eb1c142", "filename": "src/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8af03f4750f81069e9915643d771e4aebae1b80/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8af03f4750f81069e9915643d771e4aebae1b80/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=c8af03f4750f81069e9915643d771e4aebae1b80", "patch": "@@ -362,7 +362,8 @@ create_config! {\n         \"Location of return type in function declaration\";\n     fn_args_paren_newline: bool, true, \"If function argument parenthesis goes on a newline\";\n     fn_args_density: Density, Density::Tall, \"Argument density in functions\";\n-    fn_args_layout: FnArgLayoutStyle, FnArgLayoutStyle::Visual, \"Layout of function arguments\";\n+    fn_args_layout: FnArgLayoutStyle, FnArgLayoutStyle::Visual,\n+        \"Layout of function arguments and tuple structs\";\n     fn_arg_indent: BlockIndentStyle, BlockIndentStyle::Visual, \"Indent on function arguments\";\n     type_punctuation_density: TypeDensity, TypeDensity::Wide,\n         \"Determines if '+' or '=' are wrapped in spaces in the punctuation of types\";"}, {"sha": "5d1e034b3897bc76434b346f3808eba927a808bb", "filename": "src/items.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c8af03f4750f81069e9915643d771e4aebae1b80/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8af03f4750f81069e9915643d771e4aebae1b80/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=c8af03f4750f81069e9915643d771e4aebae1b80", "patch": "@@ -15,7 +15,7 @@ use codemap::SpanUtils;\n use utils::{format_mutability, format_visibility, contains_skip, end_typaram, wrap_str,\n             last_line_width, format_unsafety, trim_newlines, stmt_expr, semicolon_for_expr,\n             trimmed_last_line_width};\n-use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic,\n+use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic, list_helper,\n             DefinitiveListTactic, ListTactic, definitive_tactic, format_item_list};\n use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs, type_annotation_separator};\n use comment::{FindUncommented, contains_comment};\n@@ -1013,9 +1013,19 @@ fn format_tuple_struct(context: &RewriteContext,\n         }\n         None => \"\".to_owned(),\n     };\n-    result.push('(');\n \n-    let item_indent = offset.block_only() + result.len();\n+    let (tactic, item_indent) = match context.config.fn_args_layout {\n+        FnArgLayoutStyle::Visual => {\n+            result.push('(');\n+            (ListTactic::HorizontalVertical, offset.block_only() + result.len())\n+        }\n+        FnArgLayoutStyle::Block | FnArgLayoutStyle::BlockAlways => {\n+            let indent = offset.block_only().block_indent(&context.config);\n+            result.push_str(\"(\\n\");\n+            result.push_str(&indent.to_string(&context.config));\n+            (ListTactic::Vertical, indent)\n+        }\n+    };\n     // 2 = \");\"\n     let item_budget = try_opt!(context.config.max_width.checked_sub(item_indent.width() + 2));\n \n@@ -1035,9 +1045,10 @@ fn format_tuple_struct(context: &RewriteContext,\n                      |field| field.rewrite(context, Shape::legacy(item_budget, item_indent)),\n                      context.codemap.span_after(span, \"(\"),\n                      span.hi);\n-    let body = try_opt!(format_item_list(items,\n-                                         Shape::legacy(item_budget, item_indent),\n-                                         context.config));\n+    let body = try_opt!(list_helper(items,\n+                                    Shape::legacy(item_budget, item_indent),\n+                                    context.config,\n+                                    tactic));\n \n     if context.config.spaces_within_parens && body.len() > 0 {\n         result.push(' ');\n@@ -1049,13 +1060,22 @@ fn format_tuple_struct(context: &RewriteContext,\n         result.push(' ');\n     }\n \n-    result.push(')');\n+    match context.config.fn_args_layout {\n+        FnArgLayoutStyle::Visual => {\n+            result.push(')');\n+        }\n+        FnArgLayoutStyle::Block | FnArgLayoutStyle::BlockAlways => {\n+            result.push('\\n');\n+            result.push_str(&offset.block_only().to_string(&context.config));\n+            result.push(')');\n+        }\n+    }\n \n     if !where_clause_str.is_empty() && !where_clause_str.contains('\\n') &&\n        (result.contains('\\n') ||\n         offset.block_indent + result.len() + where_clause_str.len() + 1 >\n         context.config.max_width) {\n-        // We need to put the where clause on a new line, but we didn'to_string\n+        // We need to put the where clause on a new line, but we didn't\n         // know that earlier, so the where clause will not be indented properly.\n         result.push('\\n');\n         result.push_str(&(offset.block_only() + (context.config.tab_spaces - 1))"}]}