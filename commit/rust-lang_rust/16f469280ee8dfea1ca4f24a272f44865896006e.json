{"sha": "16f469280ee8dfea1ca4f24a272f44865896006e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZjQ2OTI4MGVlOGRmZWExY2E0ZjI0YTI3MmY0NDg2NTg5NjAwNmU=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-05-29T22:09:46Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-05-29T22:10:54Z"}, "message": "Address review comments", "tree": {"sha": "4e95b447b7846d16b82771df237797ebc1292254", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e95b447b7846d16b82771df237797ebc1292254"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16f469280ee8dfea1ca4f24a272f44865896006e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmCyu+8ACgkQtAh+UQ6Y\nsWR4UQ//an4+sZpP0jG0lITjJdCuRwNS802lXzoMi7tCQG18MpODLXWfg/EX5RsS\nqmmiR9Bp3+1QlQthHMiP/M6vF4xNF6FHlx+cJziEr1nlc6FhrvjsrlKDES/E5C4H\nvHtSrL4lTNNeilcFKyRj2l+cy/y8p9LGj+aZoiMCp4xZO8pyP/13LhWRDZLF4zZV\n95RS/qfWCL5l5zVM8/evELZ4isHQi1FYqrURo/kKLdObrRAl89gtK6ddalJzlEy3\naOuckYTcVkuTZxU7VmQ0dyQfyUMSH3hAZ30X4h65iby6ijvAJVp/DQv4H/hpyL/4\nwumgq23BV+BYziOPS58qJRHzcAvSf2LMWaisoCtfj7vVWyEPOazk2IKEdqA6Kjll\nz2PNBZEF5n5JU6NbH05eyf2aA/3A3n94PkMgWne00LUcmOq1q8OHZGuYjzOLBb2M\nV5F8UaM7AubDem09deGDML4ghbkDA9O+ew199nryP94wE7qj5GMapjNRTExks5fZ\n6B6cv60mUmEGnICCKLRwXXpMkseKhLlKnH+bjdnRni7JBTahXIVfv/XE2XKcNJCD\nhB3ef30TEqrwZV6Oowmv9Dq8G/f4GO26LRt6FE75M7Q3utjkGiLzf0XPjRbW/Q1X\nocJ5to99QBFabcLJfXuP9B/DqSAMv0RJ/8Rqw3knBkEeJw2m+aU=\n=zaKr\n-----END PGP SIGNATURE-----", "payload": "tree 4e95b447b7846d16b82771df237797ebc1292254\nparent 2166eaed90a9f94e5078bd470b5cd8cbdccc7543\nauthor Aaron Hill <aa1ronham@gmail.com> 1622326186 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1622326254 -0500\n\nAddress review comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16f469280ee8dfea1ca4f24a272f44865896006e", "html_url": "https://github.com/rust-lang/rust/commit/16f469280ee8dfea1ca4f24a272f44865896006e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16f469280ee8dfea1ca4f24a272f44865896006e/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2166eaed90a9f94e5078bd470b5cd8cbdccc7543", "url": "https://api.github.com/repos/rust-lang/rust/commits/2166eaed90a9f94e5078bd470b5cd8cbdccc7543", "html_url": "https://github.com/rust-lang/rust/commit/2166eaed90a9f94e5078bd470b5cd8cbdccc7543"}], "stats": {"total": 52, "additions": 29, "deletions": 23}, "files": [{"sha": "e728dc07b92860ecacd990267c4a73df05c93b87", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/16f469280ee8dfea1ca4f24a272f44865896006e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/16f469280ee8dfea1ca4f24a272f44865896006e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=16f469280ee8dfea1ca4f24a272f44865896006e", "patch": "@@ -214,8 +214,9 @@ dependencies = [\n \n [[package]]\n name = \"measureme\"\n-version = \"9.1.1\"\n-source = \"git+https://github.com/rust-lang/measureme?rev=501d6a3c192beee5e633a6c5f79130bedfdadcb5#501d6a3c192beee5e633a6c5f79130bedfdadcb5\"\n+version = \"9.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"78f7a41bc6f856a2cf0e95094ad5121f82500e2d9a0f3c0171d98f6566d8117d\"\n dependencies = [\n  \"log\",\n  \"memmap2\","}, {"sha": "7ee96f7e99e682604ca48c7da0d3863beec2ff1a", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16f469280ee8dfea1ca4f24a272f44865896006e/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/16f469280ee8dfea1ca4f24a272f44865896006e/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=16f469280ee8dfea1ca4f24a272f44865896006e", "patch": "@@ -18,7 +18,6 @@ test = false # we have no unit tests\n doctest = false # and no doc tests\n \n [dependencies]\n-measureme = { git = \"https://github.com/rust-lang/measureme\", rev = \"501d6a3c192beee5e633a6c5f79130bedfdadcb5\" }\n getrandom = { version = \"0.2\", features = [\"std\"] }\n env_logger = \"0.8\"\n log = \"0.4\"\n@@ -31,6 +30,7 @@ smallvec = \"1.4.2\"\n # See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`\n # for more information.\n rustc-workspace-hack = \"1.0.0\"\n+measureme = \"9.1.2\"\n \n # Enable some feature flags that dev-dependencies need but dependencies\n # do not.  This makes `./miri install` after `./miri build` faster."}, {"sha": "b214ab6d09c1296ce747111d3738093b1680c129", "filename": "README.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16f469280ee8dfea1ca4f24a272f44865896006e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/16f469280ee8dfea1ca4f24a272f44865896006e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=16f469280ee8dfea1ca4f24a272f44865896006e", "patch": "@@ -222,6 +222,10 @@ environment variable:\n   times to exclude several variables.  On Windows, the `TERM` environment\n   variable is excluded by default.\n * `-Zmiri-ignore-leaks` disables the memory leak checker.\n+* `-Zmiri-measureme=<name>` enables `measureme` profiling for the interpreted program.\n+   This can be used to find which parts of your program are executing slowly under Miri.\n+   The profile is written out to a file with the prefix `<name>`, and can be processed\n+   using the tools in the repository https://github.com/rust-lang/measureme.\n * `-Zmiri-seed=<hex>` configures the seed of the RNG that Miri uses to resolve\n   non-determinism.  This RNG is used to pick base addresses for allocations.\n   When isolation is enabled (the default), this is also used to emulate system\n@@ -258,10 +262,6 @@ environment variable:\n   this pointer. Note that it is not currently guaranteed that code that works\n   with `-Zmiri-track-raw-pointers` also works without\n   `-Zmiri-track-raw-pointers`, but for the vast majority of code, this will be the case.\n-* `-Zmiri-measureme=<name>` enables `measureme` profiling for the interpreted program.\n-   This can be used to find which parts of your program are executing slowly under Miri.\n-   The profile is written out to a file with the prefix `<name>`, and can be processed\n-   using the tools in the repository https://github.com/rust-lang/measureme\n \n Some native rustc `-Z` flags are also very relevant for Miri:\n "}, {"sha": "52e554f57d7e1a84f3e48ec3b8c30602a52bb55f", "filename": "src/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16f469280ee8dfea1ca4f24a272f44865896006e/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f469280ee8dfea1ca4f24a272f44865896006e/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=16f469280ee8dfea1ca4f24a272f44865896006e", "patch": "@@ -54,8 +54,8 @@ pub struct MiriConfig {\n     /// Rate of spurious failures for compare_exchange_weak atomic operations,\n     /// between 0.0 and 1.0, defaulting to 0.8 (80% chance of failure).\n     pub cmpxchg_weak_failure_rate: f64,\n-    /// If `Some`, enable the `measureme` profiler, writing results to the specified\n-    /// directory.\n+    /// If `Some`, enable the `measureme` profiler, writing results to a file\n+    /// with the specified prefix.\n     pub measureme_out: Option<String>,\n }\n "}, {"sha": "4ed2fba43c1420f4bd7dc7175bafd9d4f78be1a1", "filename": "src/machine.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/16f469280ee8dfea1ca4f24a272f44865896006e/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f469280ee8dfea1ca4f24a272f44865896006e/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=16f469280ee8dfea1ca4f24a272f44865896006e", "patch": "@@ -10,7 +10,6 @@ use std::time::Instant;\n use log::trace;\n use rand::rngs::StdRng;\n use rand::SeedableRng;\n-use std::collections::hash_map::Entry;\n use measureme::{Profiler, StringId, EventId, DetachedTiming};\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -45,6 +44,9 @@ pub struct FrameData<'tcx> {\n     /// we stop unwinding, use the `CatchUnwindData` to handle catching.\n     pub catch_unwind: Option<CatchUnwindData<'tcx>>,\n \n+    /// If `measureme` profiling is enabled, holds timing information\n+    /// for the start of this frame. When we finish executing this frame,\n+    /// we use this to register a completed event with `measureme`.\n     pub timing: Option<DetachedTiming>,\n }\n \n@@ -274,7 +276,11 @@ pub struct Evaluator<'mir, 'tcx> {\n     /// Allocations that are considered roots of static memory (that may leak).\n     pub(crate) static_roots: Vec<AllocId>,\n \n+    /// The `measureme` profiler used to record timing information about\n+    /// the emulated program.\n     profiler: Option<Profiler>,\n+    /// Used with `profiler` to cache the `StringId`s for event names\n+    /// uesd with `measureme`.\n     string_cache: FxHashMap<String, StringId>,\n }\n \n@@ -607,29 +613,28 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n         frame: Frame<'mir, 'tcx, Tag>,\n     ) -> InterpResult<'tcx, Frame<'mir, 'tcx, Tag, FrameData<'tcx>>> {\n-        let stacked_borrows = ecx.memory.extra.stacked_borrows.as_ref();\n-        let call_id = stacked_borrows.map_or(NonZeroU64::new(1).unwrap(), |stacked_borrows| {\n-            stacked_borrows.borrow_mut().new_call()\n-        });\n+        // Start recording our event before doing anything else\n         let timing = if let Some(profiler) = ecx.machine.profiler.as_ref() {\n             let fn_name = frame.instance.to_string();\n             let entry = ecx.machine.string_cache.entry(fn_name.clone());\n-            let name = match entry {\n-                Entry::Occupied(e) => *e.get(),\n-                Entry::Vacant(e) => {\n-                    *e.insert(profiler.alloc_string(&*fn_name))\n-                }\n-            };\n+            let name = entry.or_insert_with(|| {\n+                profiler.alloc_string(&*fn_name)\n+            });\n \n             Some(profiler.start_recording_interval_event_detached(\n-                name,\n-                EventId::from_label(name),\n-                ecx.get_active_thread().to_u32()\n+                *name,\n+                EventId::from_label(*name),\n+                ecx.get_active_thread().to_u32(),\n             ))\n         } else {\n             None\n         };\n \n+        let stacked_borrows = ecx.memory.extra.stacked_borrows.as_ref();\n+        let call_id = stacked_borrows.map_or(NonZeroU64::new(1).unwrap(), |stacked_borrows| {\n+            stacked_borrows.borrow_mut().new_call()\n+        });\n+\n         let extra = FrameData { call_id, catch_unwind: None, timing };\n         Ok(frame.with_extra(extra))\n     }"}]}