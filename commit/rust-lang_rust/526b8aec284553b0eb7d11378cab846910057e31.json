{"sha": "526b8aec284553b0eb7d11378cab846910057e31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNmI4YWVjMjg0NTUzYjBlYjdkMTEzNzhjYWI4NDY5MTAwNTdlMzE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-15T09:01:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-15T09:01:34Z"}, "message": "Merge pull request #623 from RalfJung/fat-ptr-eq\n\nFix comparing fat pointers", "tree": {"sha": "99606ff4a7c230be89de9225bbb19020c21a8aef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99606ff4a7c230be89de9225bbb19020c21a8aef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/526b8aec284553b0eb7d11378cab846910057e31", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcZn/uCRBK7hj4Ov3rIwAAdHIIADFCcci2id7iBK+RtNyWTCcd\ndqfU1txzxXaOnKQtlooonJXQS7bErCW0t9fT2oLgWxZ0rkEa0ur3yOaNA96L2a8q\nz4eiZoQoepWCazmEFfVE0qhEElpUZNQ4VDmISV1nhxGhvioaJdFx5CtAYqyyqXTu\nyxAHOJRivYQ9AR25Vqs5lT0yG8a6xcF6Bihk9ZtxhecCbSBoPDYkaZLVjxL//c3K\nl5A7fsKSefVg2lXsB8nx5/o6U/z7Ww/I3rfUKQBU/ll1MA7nnQZ6xIJJc3byc9Gt\n4pGR6upF5pU8Rh9mjTeEWDyAQIK+tk+esT+76xbPGpY6FxH2JInFIDHFPU3NGnU=\n=kepF\n-----END PGP SIGNATURE-----\n", "payload": "tree 99606ff4a7c230be89de9225bbb19020c21a8aef\nparent b468789f9b44000b898715409c484bf71a139ba4\nparent e630175867b00a81e4125ece04e5f14cc88d9970\nauthor Ralf Jung <post@ralfj.de> 1550221294 +0100\ncommitter GitHub <noreply@github.com> 1550221294 +0100\n\nMerge pull request #623 from RalfJung/fat-ptr-eq\n\nFix comparing fat pointers"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/526b8aec284553b0eb7d11378cab846910057e31", "html_url": "https://github.com/rust-lang/rust/commit/526b8aec284553b0eb7d11378cab846910057e31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/526b8aec284553b0eb7d11378cab846910057e31/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b468789f9b44000b898715409c484bf71a139ba4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b468789f9b44000b898715409c484bf71a139ba4", "html_url": "https://github.com/rust-lang/rust/commit/b468789f9b44000b898715409c484bf71a139ba4"}, {"sha": "e630175867b00a81e4125ece04e5f14cc88d9970", "url": "https://api.github.com/repos/rust-lang/rust/commits/e630175867b00a81e4125ece04e5f14cc88d9970", "html_url": "https://github.com/rust-lang/rust/commit/e630175867b00a81e4125ece04e5f14cc88d9970"}], "stats": {"total": 120, "additions": 73, "deletions": 47}, "files": [{"sha": "cb6d9f177dded2af9d2351ec824b8f51f78e2199", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/526b8aec284553b0eb7d11378cab846910057e31/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/526b8aec284553b0eb7d11378cab846910057e31/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=526b8aec284553b0eb7d11378cab846910057e31", "patch": "@@ -1 +1 @@\n-nightly-2019-02-14\n+nightly-2019-02-15"}, {"sha": "0de835f45d0a809daee495d6aeea2dfab3ad44d7", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/526b8aec284553b0eb7d11378cab846910057e31/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526b8aec284553b0eb7d11378cab846910057e31/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=526b8aec284553b0eb7d11378cab846910057e31", "patch": "@@ -266,7 +266,7 @@ path = \"lib.rs\"\n     let sysroot = if is_host { dir.join(\"HOST\") } else { PathBuf::from(dir) };\n     std::env::set_var(\"MIRI_SYSROOT\", &sysroot);\n     if !ask_user {\n-        println!(\"A libstd for miri is now available in `{}`\", sysroot.display());\n+        println!(\"A libstd for Miri is now available in `{}`\", sysroot.display());\n     }\n }\n "}, {"sha": "5a9939db2e7da6b3651e6d33e5d4e7f190a1477e", "filename": "src/intrinsic.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/526b8aec284553b0eb7d11378cab846910057e31/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526b8aec284553b0eb7d11378cab846910057e31/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=526b8aec284553b0eb7d11378cab846910057e31", "patch": "@@ -5,7 +5,7 @@ use rustc::ty;\n use rustc::mir::interpret::{EvalResult, PointerArithmetic};\n \n use crate::{\n-    PlaceTy, OpTy, Immediate, Scalar, ScalarMaybeUndef, Borrow,\n+    PlaceTy, OpTy, ImmTy, Immediate, Scalar, ScalarMaybeUndef, Borrow,\n     OperatorEvalContextExt\n };\n \n@@ -80,11 +80,11 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n \n             _ if intrinsic_name.starts_with(\"atomic_cxchg\") => {\n                 let ptr = this.deref_operand(args[0])?;\n-                let expect_old = this.read_immediate(args[1])?; // read as immediate for the sake of `binary_op_imm()`\n+                let expect_old = this.read_immediate(args[1])?; // read as immediate for the sake of `binary_op()`\n                 let new = this.read_scalar(args[2])?;\n-                let old = this.read_immediate(ptr.into())?; // read as immediate for the sake of `binary_op_imm()`\n-                // binary_op_imm will bail if either of them is not a scalar\n-                let (eq, _) = this.binary_op_imm(mir::BinOp::Eq, old, expect_old)?;\n+                let old = this.read_immediate(ptr.into())?; // read as immediate for the sake of `binary_op()`\n+                // binary_op will bail if either of them is not a scalar\n+                let (eq, _) = this.binary_op(mir::BinOp::Eq, old, expect_old)?;\n                 let res = Immediate::ScalarPair(old.to_scalar_or_undef(), eq.into());\n                 this.write_immediate(res, dest)?; // old value is returned\n                 // update ptr depending on comparison\n@@ -140,9 +140,9 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                     _ => bug!(),\n                 };\n                 // Atomics wrap around on overflow.\n-                let (val, _overflowed) = this.binary_op_imm(op, old, rhs)?;\n+                let (val, _overflowed) = this.binary_op(op, old, rhs)?;\n                 let val = if neg {\n-                    this.unary_op(mir::UnOp::Not, val, old.layout)?\n+                    this.unary_op(mir::UnOp::Not, ImmTy::from_scalar(val, old.layout))?\n                 } else {\n                     val\n                 };\n@@ -239,7 +239,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 let a = this.read_immediate(args[0])?;\n                 let b = this.read_immediate(args[1])?;\n                 // check x % y != 0\n-                if this.binary_op_imm(mir::BinOp::Rem, a, b)?.0.to_bits(dest.layout.size)? != 0 {\n+                if this.binary_op(mir::BinOp::Rem, a, b)?.0.to_bits(dest.layout.size)? != 0 {\n                     return err!(ValidationFailure(format!(\"exact_div: {:?} cannot be divided by {:?}\", a, b)));\n                 }\n                 this.binop_ignore_overflow(mir::BinOp::Div, a, b, dest)?;"}, {"sha": "1608bc1f3028b9280970896a78005673d35e82f7", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/526b8aec284553b0eb7d11378cab846910057e31/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526b8aec284553b0eb7d11378cab846910057e31/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=526b8aec284553b0eb7d11378cab846910057e31", "patch": "@@ -17,7 +17,7 @@ use std::collections::HashMap;\n use std::borrow::Cow;\n \n use rustc::ty::{self, TyCtxt, query::TyCtxtAt};\n-use rustc::ty::layout::{TyLayout, LayoutOf, Size, Align};\n+use rustc::ty::layout::{LayoutOf, Size, Align};\n use rustc::hir::{self, def_id::DefId};\n use rustc::mir;\n \n@@ -406,12 +406,10 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     fn ptr_op(\n         ecx: &rustc_mir::interpret::EvalContext<'a, 'mir, 'tcx, Self>,\n         bin_op: mir::BinOp,\n-        left: Scalar<Borrow>,\n-        left_layout: TyLayout<'tcx>,\n-        right: Scalar<Borrow>,\n-        right_layout: TyLayout<'tcx>,\n+        left: ImmTy<'tcx, Borrow>,\n+        right: ImmTy<'tcx, Borrow>,\n     ) -> EvalResult<'tcx, (Scalar<Borrow>, bool)> {\n-        ecx.ptr_op(bin_op, left, left_layout, right, right_layout)\n+        ecx.ptr_op(bin_op, left, right)\n     }\n \n     fn box_alloc("}, {"sha": "b64ccf5462d6a017c09a7547eac8010b3aef50df", "filename": "src/operator.rs", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/526b8aec284553b0eb7d11378cab846910057e31/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526b8aec284553b0eb7d11378cab846910057e31/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=526b8aec284553b0eb7d11378cab846910057e31", "patch": "@@ -1,4 +1,4 @@\n-use rustc::ty::{Ty, layout::TyLayout};\n+use rustc::ty::Ty;\n use rustc::mir;\n \n use crate::*;\n@@ -7,10 +7,8 @@ pub trait EvalContextExt<'tcx> {\n     fn ptr_op(\n         &self,\n         bin_op: mir::BinOp,\n-        left: Scalar<Borrow>,\n-        left_layout: TyLayout<'tcx>,\n-        right: Scalar<Borrow>,\n-        right_layout: TyLayout<'tcx>,\n+        left: ImmTy<'tcx, Borrow>,\n+        right: ImmTy<'tcx, Borrow>,\n     ) -> EvalResult<'tcx, (Scalar<Borrow>, bool)>;\n \n     fn ptr_int_arithmetic(\n@@ -25,7 +23,6 @@ pub trait EvalContextExt<'tcx> {\n         &self,\n         left: Scalar<Borrow>,\n         right: Scalar<Borrow>,\n-        size: Size,\n     ) -> EvalResult<'tcx, bool>;\n \n     fn pointer_offset_inbounds(\n@@ -40,14 +37,34 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n     fn ptr_op(\n         &self,\n         bin_op: mir::BinOp,\n-        left: Scalar<Borrow>,\n-        left_layout: TyLayout<'tcx>,\n-        right: Scalar<Borrow>,\n-        right_layout: TyLayout<'tcx>,\n+        left: ImmTy<'tcx, Borrow>,\n+        right: ImmTy<'tcx, Borrow>,\n     ) -> EvalResult<'tcx, (Scalar<Borrow>, bool)> {\n         use rustc::mir::BinOp::*;\n \n-        trace!(\"ptr_op: {:?} {:?} {:?}\", left, bin_op, right);\n+        trace!(\"ptr_op: {:?} {:?} {:?}\", *left, bin_op, *right);\n+\n+        // Operations that support fat pointers\n+        match bin_op {\n+            Eq | Ne => {\n+                let eq = match (*left, *right) {\n+                    (Immediate::Scalar(left), Immediate::Scalar(right)) =>\n+                        self.ptr_eq(left.not_undef()?, right.not_undef()?)?,\n+                    (Immediate::ScalarPair(left1, left2), Immediate::ScalarPair(right1, right2)) =>\n+                        self.ptr_eq(left1.not_undef()?, right1.not_undef()?)? &&\n+                        self.ptr_eq(left2.not_undef()?, right2.not_undef()?)?,\n+                    _ => bug!(\"Type system should not allow comparing Scalar with ScalarPair\"),\n+                };\n+                return Ok((Scalar::from_bool(if bin_op == Eq { eq } else { !eq }), false));\n+            }\n+            _ => {},\n+        }\n+\n+        // Now we expect no more fat pointers\n+        let left_layout = left.layout;\n+        let left = left.to_scalar()?;\n+        let right_layout = right.layout;\n+        let right = right.to_scalar()?;\n         debug_assert!(left.is_ptr() || right.is_ptr() || bin_op == Offset);\n \n         match bin_op {\n@@ -63,11 +80,6 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                 )?;\n                 Ok((ptr, false))\n             }\n-            // These work on anything\n-            Eq =>\n-                Ok((Scalar::from_bool(self.ptr_eq(left, right, left_layout.size)?), false)),\n-            Ne =>\n-                Ok((Scalar::from_bool(!self.ptr_eq(left, right, left_layout.size)?), false)),\n             // These need both to be pointer, and fail if they are not in the same location\n             Lt | Le | Gt | Ge | Sub if left.is_ptr() && right.is_ptr() => {\n                 let left = left.to_ptr().expect(\"we checked is_ptr\");\n@@ -85,8 +97,8 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                             let layout = self.layout_of(self.tcx.types.usize)?;\n                             return self.binary_op(\n                                 Sub,\n-                                left_offset, layout,\n-                                right_offset, layout,\n+                                ImmTy::from_scalar(left_offset, layout),\n+                                ImmTy::from_scalar(right_offset, layout),\n                             )\n                         }\n                         _ => bug!(\"We already established it has to be one of these operators.\"),\n@@ -126,8 +138,8 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n         &self,\n         left: Scalar<Borrow>,\n         right: Scalar<Borrow>,\n-        size: Size,\n     ) -> EvalResult<'tcx, bool> {\n+        let size = self.pointer_size();\n         Ok(match (left, right) {\n             (Scalar::Bits { .. }, Scalar::Bits { .. }) =>\n                 left.to_bits(size)? == right.to_bits(size)?,"}, {"sha": "48f8fc1223c945ae9653cef65d199c131ea98488", "filename": "tests/run-pass/async-fn.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/526b8aec284553b0eb7d11378cab846910057e31/tests%2Frun-pass%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526b8aec284553b0eb7d11378cab846910057e31/tests%2Frun-pass%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fasync-fn.rs?ref=526b8aec284553b0eb7d11378cab846910057e31", "patch": "@@ -4,7 +4,8 @@\n     futures_api,\n )]\n \n-use std::{future::Future, pin::Pin, task::Poll};\n+use std::{future::Future, pin::Pin, task::Poll, ptr};\n+use std::task::{Waker, RawWaker, RawWakerVTable};\n \n // See if we can run a basic `async fn`\n pub async fn foo(x: &u32, y: u32) -> u32 {\n@@ -17,18 +18,23 @@ pub async fn foo(x: &u32, y: u32) -> u32 {\n     *x + y + *a\n }\n \n-fn main() {\n-    use std::{sync::Arc, task::{Wake, local_waker}};\n+fn raw_waker_clone(_this: *const ()) -> RawWaker {\n+    panic!(\"unimplemented\");\n+}\n+fn raw_waker_wake(_this: *const ()) {\n+    panic!(\"unimplemented\");\n+}\n+fn raw_waker_drop(_this: *const ()) {}\n \n-    struct NoWake;\n-    impl Wake for NoWake {\n-        fn wake(_arc_self: &Arc<Self>) {\n-            panic!();\n-        }\n-    }\n+static RAW_WAKER: RawWakerVTable = RawWakerVTable {\n+    clone: raw_waker_clone,\n+    wake: raw_waker_wake,\n+    drop: raw_waker_drop,\n+};\n \n-    let lw = unsafe { local_waker(Arc::new(NoWake)) };\n+fn main() {\n     let x = 5;\n     let mut fut = foo(&x, 7);\n-    assert_eq!(unsafe { Pin::new_unchecked(&mut fut) }.poll(&lw), Poll::Ready(31));\n+    let waker = unsafe { Waker::new_unchecked(RawWaker::new(ptr::null(), &RAW_WAKER)) };\n+    assert_eq!(unsafe { Pin::new_unchecked(&mut fut) }.poll(&waker), Poll::Ready(31));\n }"}, {"sha": "d89a5ab535f64699d84563b653dd79a127752813", "filename": "tests/run-pass/hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/526b8aec284553b0eb7d11378cab846910057e31/tests%2Frun-pass%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526b8aec284553b0eb7d11378cab846910057e31/tests%2Frun-pass%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fhashmap.rs?ref=526b8aec284553b0eb7d11378cab846910057e31", "patch": "@@ -21,5 +21,5 @@ fn main() {\n     }\n     assert_eq!(map.values().fold(0, |x, y| x+y), num*(num-1)/2);\n \n-    // TODO: Test Entry API\n+    // TODO: Test Entry API, Iterators, ...\n }"}, {"sha": "164842ab4d976e0b27b69ac263b41aa8947bb312", "filename": "tests/run-pass/rc.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/526b8aec284553b0eb7d11378cab846910057e31/tests%2Frun-pass%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526b8aec284553b0eb7d11378cab846910057e31/tests%2Frun-pass%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frc.rs?ref=526b8aec284553b0eb7d11378cab846910057e31", "patch": "@@ -1,6 +1,7 @@\n use std::cell::{Cell, RefCell};\n use std::rc::Rc;\n use std::sync::Arc;\n+use std::fmt::Debug;\n \n fn rc_refcell() {\n     let r = Rc::new(RefCell::new(42));\n@@ -60,7 +61,16 @@ fn rc_from() {\n     check_unique_rc::<str>(Rc::from(\"Hello, World!\"));\n }\n \n+fn rc_fat_ptr_eq() {\n+    let p = Rc::new(1) as Rc<Debug>;\n+    let a: *const Debug = &*p;\n+    let r = Rc::into_raw(p);\n+    assert!(a == r);\n+    drop(unsafe { Rc::from_raw(r) });\n+}\n+\n fn main() {\n+    rc_fat_ptr_eq();\n     rc_refcell();\n     rc_refcell2();\n     rc_cell();"}]}