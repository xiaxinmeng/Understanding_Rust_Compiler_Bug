{"sha": "d01f7ae125c05d93ac8d1f70ad770c11c82a6d68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMWY3YWUxMjVjMDVkOTNhYzhkMWY3MGFkNzcwYzExYzgyYTZkNjg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-05T11:07:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-05T11:07:05Z"}, "message": "Rollup merge of #72996 - marmeladema:remove-hir-map-nodeid-apis, r=ecstatic-morse\n\nRemove unsused `NodeId` related APIs in hir map\n\ncc #50928\n\nr? @ecstatic-morse", "tree": {"sha": "d583d260247f701a058c1a6dbe454d1afb7c7dab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d583d260247f701a058c1a6dbe454d1afb7c7dab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d01f7ae125c05d93ac8d1f70ad770c11c82a6d68", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe2idZCRBK7hj4Ov3rIwAAdHIIAJ2J9pJMs64qlEIX2nDTSUmn\n4d0HRJbxNU5PM6yh1HW9kew7AvwjAj8QSI0uE003W8pKbUE7K0ZhuOIE1V5kEJPb\nww8n8PNI2ZIvXN5FtSI8k5C81mMXpoTMyIXvFC6lyKp7DSrZ5KCu4o5gmBXKTWsn\nSvESZBOfeZC4P6ZYX8V0EYakAWum5LTk5A+Dpu3iHkpNCqGYGwDZO6JqKYQngmPJ\nwRBfTAf7brKgdN7/hU2heONgm4hJkcyp4uYZDRBDnGrFTFCx6LXFLIDruODqmh6m\nGPKQWh0mXjk/v0HG8p9Yr6CMkJkhVO1yj/uU32yXZ2mepLjMeMzrKdBJ8SKQF44=\n=59Bk\n-----END PGP SIGNATURE-----\n", "payload": "tree d583d260247f701a058c1a6dbe454d1afb7c7dab\nparent 14dc34dd89604e68e33c38a237dbdeeaf50be33f\nparent d0fccb552b87fa88c4c15c912e5012ffbb54f98e\nauthor Dylan DPC <dylan.dpc@gmail.com> 1591355225 +0200\ncommitter GitHub <noreply@github.com> 1591355225 +0200\n\nRollup merge of #72996 - marmeladema:remove-hir-map-nodeid-apis, r=ecstatic-morse\n\nRemove unsused `NodeId` related APIs in hir map\n\ncc #50928\n\nr? @ecstatic-morse\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d01f7ae125c05d93ac8d1f70ad770c11c82a6d68", "html_url": "https://github.com/rust-lang/rust/commit/d01f7ae125c05d93ac8d1f70ad770c11c82a6d68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d01f7ae125c05d93ac8d1f70ad770c11c82a6d68/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14dc34dd89604e68e33c38a237dbdeeaf50be33f", "url": "https://api.github.com/repos/rust-lang/rust/commits/14dc34dd89604e68e33c38a237dbdeeaf50be33f", "html_url": "https://github.com/rust-lang/rust/commit/14dc34dd89604e68e33c38a237dbdeeaf50be33f"}, {"sha": "d0fccb552b87fa88c4c15c912e5012ffbb54f98e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0fccb552b87fa88c4c15c912e5012ffbb54f98e", "html_url": "https://github.com/rust-lang/rust/commit/d0fccb552b87fa88c4c15c912e5012ffbb54f98e"}], "stats": {"total": 43, "additions": 8, "deletions": 35}, "files": [{"sha": "2dd5e27ead2658b79dd7c11aeb41a8bd3add30e6", "filename": "src/librustc_hir/definitions.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d01f7ae125c05d93ac8d1f70ad770c11c82a6d68/src%2Flibrustc_hir%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01f7ae125c05d93ac8d1f70ad770c11c82a6d68/src%2Flibrustc_hir%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdefinitions.rs?ref=d01f7ae125c05d93ac8d1f70ad770c11c82a6d68", "patch": "@@ -364,6 +364,12 @@ impl Definitions {\n         self.node_id_to_hir_id[node_id]\n     }\n \n+    #[inline]\n+    pub fn opt_hir_id_to_local_def_id(&self, hir_id: hir::HirId) -> Option<LocalDefId> {\n+        let node_id = self.hir_id_to_node_id(hir_id);\n+        self.opt_local_def_id(node_id)\n+    }\n+\n     /// Retrieves the span of the given `DefId` if `DefId` is in the local crate.\n     #[inline]\n     pub fn opt_span(&self, def_id: DefId) -> Option<Span> {"}, {"sha": "53e88787323f4c9e16f472f9928f70132ad7b49b", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 35, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d01f7ae125c05d93ac8d1f70ad770c11c82a6d68/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01f7ae125c05d93ac8d1f70ad770c11c82a6d68/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=d01f7ae125c05d93ac8d1f70ad770c11c82a6d68", "patch": "@@ -3,7 +3,7 @@ use self::collector::NodeCollector;\n use crate::hir::{Owner, OwnerNodes};\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n-use rustc_ast::ast::{self, NodeId};\n+use rustc_ast::ast::{self};\n use rustc_data_structures::svh::Svh;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -157,18 +157,6 @@ impl<'hir> Map<'hir> {\n         self.tcx.definitions.def_path(def_id)\n     }\n \n-    #[inline]\n-    pub fn local_def_id_from_node_id(&self, node: NodeId) -> LocalDefId {\n-        self.opt_local_def_id_from_node_id(node).unwrap_or_else(|| {\n-            let hir_id = self.node_id_to_hir_id(node);\n-            bug!(\n-                \"local_def_id_from_node_id: no entry for `{}`, which has a map of `{:?}`\",\n-                node,\n-                self.find_entry(hir_id)\n-            )\n-        })\n-    }\n-\n     #[inline]\n     pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {\n         self.opt_local_def_id(hir_id).unwrap_or_else(|| {\n@@ -182,35 +170,14 @@ impl<'hir> Map<'hir> {\n \n     #[inline]\n     pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {\n-        let node_id = self.hir_id_to_node_id(hir_id);\n-        self.opt_local_def_id_from_node_id(node_id)\n-    }\n-\n-    #[inline]\n-    pub fn opt_local_def_id_from_node_id(&self, node: NodeId) -> Option<LocalDefId> {\n-        self.tcx.definitions.opt_local_def_id(node)\n+        self.tcx.definitions.opt_hir_id_to_local_def_id(hir_id)\n     }\n \n     #[inline]\n     pub fn as_local_hir_id(&self, def_id: LocalDefId) -> HirId {\n         self.tcx.definitions.as_local_hir_id(def_id)\n     }\n \n-    #[inline]\n-    pub fn hir_id_to_node_id(&self, hir_id: HirId) -> NodeId {\n-        self.tcx.definitions.hir_id_to_node_id(hir_id)\n-    }\n-\n-    #[inline]\n-    pub fn node_id_to_hir_id(&self, node_id: NodeId) -> HirId {\n-        self.tcx.definitions.node_id_to_hir_id(node_id)\n-    }\n-\n-    #[inline]\n-    pub fn opt_node_id_to_hir_id(&self, node_id: NodeId) -> Option<HirId> {\n-        self.tcx.definitions.opt_node_id_to_hir_id(node_id)\n-    }\n-\n     #[inline]\n     pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {\n         self.tcx.definitions.local_def_id_to_hir_id(def_id)"}]}