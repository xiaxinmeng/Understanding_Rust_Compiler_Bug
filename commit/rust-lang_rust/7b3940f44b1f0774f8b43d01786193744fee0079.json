{"sha": "7b3940f44b1f0774f8b43d01786193744fee0079", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMzk0MGY0NGIxZjA3NzRmOGI0M2QwMTc4NjE5Mzc0NGZlZTAwNzk=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-06-16T12:27:44Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-06-25T12:51:56Z"}, "message": "Address PR feedback", "tree": {"sha": "f4054ba67c2a107834f3e523dd561adbc9513274", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4054ba67c2a107834f3e523dd561adbc9513274"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b3940f44b1f0774f8b43d01786193744fee0079", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3940f44b1f0774f8b43d01786193744fee0079", "html_url": "https://github.com/rust-lang/rust/commit/7b3940f44b1f0774f8b43d01786193744fee0079", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b3940f44b1f0774f8b43d01786193744fee0079/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23176f60e75f7f7b55cb1cc34b667705d1d10032", "url": "https://api.github.com/repos/rust-lang/rust/commits/23176f60e75f7f7b55cb1cc34b667705d1d10032", "html_url": "https://github.com/rust-lang/rust/commit/23176f60e75f7f7b55cb1cc34b667705d1d10032"}], "stats": {"total": 622, "additions": 307, "deletions": 315}, "files": [{"sha": "14ffbbc35ebf03232700ed076a1918949004a2e1", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -39,7 +39,6 @@ declare_lint! {\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #66145 <https://github.com/rust-lang/rust/issues/66145>\",\n         reason: FutureIncompatibilityReason::EditionSemanticsChange(Edition::Edition2021),\n-        custom_explanation: Some(\"This will continue to compile in Rust 2021 but it will behave slightly differently!\")\n     };\n }\n "}, {"sha": "b3d98747dcfa2cd60362ed3bae7ae6e0bd608ab3", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -149,16 +149,14 @@ pub struct FutureIncompatibleInfo {\n     /// be emitted in JSON messages to be displayed by Cargo\n     /// for upstream deps\n     pub future_breakage: Option<FutureBreakage>,\n-    /// Provide a custom explanation message for diagnostics\n-    /// if the default explanation message is not appropriate\n-    pub custom_explanation: Option<&'static str>,\n }\n \n /// The reason for future incompatibility\n #[derive(Copy, Clone, Debug)]\n pub enum FutureIncompatibilityReason {\n-    /// We're fixing a bug which will impact all editions\n-    BugFix,\n+    /// This will be an error in a future release\n+    /// for all editions\n+    FutureReleaseError,\n     /// Previously accepted code that will become an\n     /// error in the provided edition\n     EditionError(Edition),\n@@ -186,9 +184,8 @@ impl FutureIncompatibleInfo {\n     pub const fn default_fields_for_macro() -> Self {\n         FutureIncompatibleInfo {\n             reference: \"\",\n-            reason: FutureIncompatibilityReason::BugFix,\n+            reason: FutureIncompatibilityReason::FutureReleaseError,\n             future_breakage: None,\n-            custom_explanation: None,\n         }\n     }\n }"}, {"sha": "8180d853f6073e6195b6d4ff1a9df5e56b1c9cef", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -386,7 +386,7 @@ pub fn struct_lint_level<'s, 'd>(\n             {\n                 let current_edition = sess.edition();\n                 format!(\n-                    \"this is valid in the current edition (Rust {}) but is not accepted in the Rust {} edition!\",\n+                    \"this is accepted in the current edition (Rust {}) but is a hard error in Rust {}!\",\n                     current_edition, edition\n                 )\n             } else if let FutureIncompatibilityReason::EditionSemanticsChange(edition) ="}, {"sha": "c09e20770846e313f26fd4e87f345cf7df7728b9", "filename": "src/test/ui/anon-params/anon-params-deprecated.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.fixed?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -7,13 +7,13 @@\n \n trait T {\n     fn foo(_: i32); //~ WARNING anonymous parameters are deprecated\n-                 //~| WARNING this is valid in the current edition\n+                 //~| WARNING this is accepted in the current edition\n \n     fn bar_with_default_impl(_: String, _: String) {}\n     //~^ WARNING anonymous parameters are deprecated\n-    //~| WARNING this is valid in the current edition\n+    //~| WARNING this is accepted in the current edition\n     //~| WARNING anonymous parameters are deprecated\n-    //~| WARNING this is valid in the current edition\n+    //~| WARNING this is accepted in the current edition\n }\n \n fn main() {}"}, {"sha": "6f7385da040c552282c49ed9c092a90acd941d00", "filename": "src/test/ui/anon-params/anon-params-deprecated.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -7,13 +7,13 @@\n \n trait T {\n     fn foo(i32); //~ WARNING anonymous parameters are deprecated\n-                 //~| WARNING this is valid in the current edition\n+                 //~| WARNING this is accepted in the current edition\n \n     fn bar_with_default_impl(String, String) {}\n     //~^ WARNING anonymous parameters are deprecated\n-    //~| WARNING this is valid in the current edition\n+    //~| WARNING this is accepted in the current edition\n     //~| WARNING anonymous parameters are deprecated\n-    //~| WARNING this is valid in the current edition\n+    //~| WARNING this is accepted in the current edition\n }\n \n fn main() {}"}, {"sha": "98d52d659a9d387da6ba8720af72848bcccecb36", "filename": "src/test/ui/anon-params/anon-params-deprecated.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-deprecated.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(anonymous_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n warning: anonymous parameters are deprecated and will be removed in the next edition.\n@@ -18,7 +18,7 @@ warning: anonymous parameters are deprecated and will be removed in the next edi\n LL |     fn bar_with_default_impl(String, String) {}\n    |                              ^^^^^^ help: try naming the parameter or explicitly ignoring it: `_: String`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n warning: anonymous parameters are deprecated and will be removed in the next edition.\n@@ -27,7 +27,7 @@ warning: anonymous parameters are deprecated and will be removed in the next edi\n LL |     fn bar_with_default_impl(String, String) {}\n    |                                      ^^^^^^ help: try naming the parameter or explicitly ignoring it: `_: String`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n warning: 3 warnings emitted"}, {"sha": "50c1639996ee54865d794eedb933ee062436a784", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-various-positions.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -3,36 +3,36 @@\n \n mod outer_mod {\n     pub mod await { //~ ERROR `await` is a keyword in the 2018 edition\n-    //~^ WARN this is valid in the current edition\n+    //~^ WARN this is accepted in the current edition\n         pub struct await; //~ ERROR `await` is a keyword in the 2018 edition\n-        //~^ WARN this is valid in the current edition\n+        //~^ WARN this is accepted in the current edition\n     }\n }\n use outer_mod::await::await; //~ ERROR `await` is a keyword in the 2018 edition\n //~^ ERROR `await` is a keyword in the 2018 edition\n-//~^^ WARN this is valid in the current edition\n-//~^^^ WARN this is valid in the current edition\n+//~^^ WARN this is accepted in the current edition\n+//~^^^ WARN this is accepted in the current edition\n \n struct Foo { await: () }\n //~^ ERROR `await` is a keyword in the 2018 edition\n-//~^^ WARN this is valid in the current edition\n+//~^^ WARN this is accepted in the current edition\n \n impl Foo { fn await() {} }\n //~^ ERROR `await` is a keyword in the 2018 edition\n-//~^^ WARN this is valid in the current edition\n+//~^^ WARN this is accepted in the current edition\n \n macro_rules! await {\n //~^ ERROR `await` is a keyword in the 2018 edition\n-//~^^ WARN this is valid in the current edition\n+//~^^ WARN this is accepted in the current edition\n     () => {}\n }\n \n fn main() {\n     await!(); //~ ERROR `await` is a keyword in the 2018 edition\n-    //~^ WARN this is valid in the current edition\n+    //~^ WARN this is accepted in the current edition\n \n     match await { await => {} } //~ ERROR `await` is a keyword in the 2018 edition\n     //~^ ERROR `await` is a keyword in the 2018 edition\n-    //~^^ WARN this is valid in the current edition\n-    //~^^^ WARN this is valid in the current edition\n+    //~^^ WARN this is accepted in the current edition\n+    //~^^^ WARN this is accepted in the current edition\n }"}, {"sha": "50a82c08c3f85372f63346942f8fd02c7dbb82d3", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-various-positions.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -18,7 +18,7 @@ error: `await` is a keyword in the 2018 edition\n LL |         pub struct await;\n    |                    ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -27,7 +27,7 @@ error: `await` is a keyword in the 2018 edition\n LL | use outer_mod::await::await;\n    |                ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -36,7 +36,7 @@ error: `await` is a keyword in the 2018 edition\n LL | use outer_mod::await::await;\n    |                       ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -45,7 +45,7 @@ error: `await` is a keyword in the 2018 edition\n LL | struct Foo { await: () }\n    |              ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -54,7 +54,7 @@ error: `await` is a keyword in the 2018 edition\n LL | impl Foo { fn await() {} }\n    |               ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -63,7 +63,7 @@ error: `await` is a keyword in the 2018 edition\n LL | macro_rules! await {\n    |              ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -72,7 +72,7 @@ error: `await` is a keyword in the 2018 edition\n LL |     await!();\n    |     ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -81,7 +81,7 @@ error: `await` is a keyword in the 2018 edition\n LL |     match await { await => {} }\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -90,7 +90,7 @@ error: `await` is a keyword in the 2018 edition\n LL |     match await { await => {} }\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: aborting due to 10 previous errors"}, {"sha": "117495e130f925193d46da47e47d4107177226d2", "filename": "src/test/ui/async-await/await-keyword/2015-edition-warning.fixed", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.fixed?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -6,22 +6,22 @@\n mod outer_mod {\n     pub mod r#await {\n //~^ ERROR `await` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n         pub struct r#await;\n //~^ ERROR `await` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n     }\n }\n use outer_mod::r#await::r#await;\n //~^ ERROR `await` is a keyword\n //~| ERROR `await` is a keyword\n-//~| WARN this is valid in the current edition\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n+//~| WARN this is accepted in the current edition\n \n fn main() {\n     match r#await { r#await => {} }\n //~^ ERROR `await` is a keyword\n //~| ERROR `await` is a keyword\n-//~| WARN this is valid in the current edition\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n+//~| WARN this is accepted in the current edition\n }"}, {"sha": "b3c64895c6dd68f01f2eb5e7e2ceff20200e16f4", "filename": "src/test/ui/async-await/await-keyword/2015-edition-warning.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -6,22 +6,22 @@\n mod outer_mod {\n     pub mod await {\n //~^ ERROR `await` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n         pub struct await;\n //~^ ERROR `await` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n     }\n }\n use outer_mod::await::await;\n //~^ ERROR `await` is a keyword\n //~| ERROR `await` is a keyword\n-//~| WARN this is valid in the current edition\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n+//~| WARN this is accepted in the current edition\n \n fn main() {\n     match await { await => {} }\n //~^ ERROR `await` is a keyword\n //~| ERROR `await` is a keyword\n-//~| WARN this is valid in the current edition\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n+//~| WARN this is accepted in the current edition\n }"}, {"sha": "1c4c19ea45f72b5276d78ccdfd65995d5797a071", "filename": "src/test/ui/async-await/await-keyword/2015-edition-warning.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-warning.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -18,7 +18,7 @@ error: `await` is a keyword in the 2018 edition\n LL |         pub struct await;\n    |                    ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -27,7 +27,7 @@ error: `await` is a keyword in the 2018 edition\n LL | use outer_mod::await::await;\n    |                ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -36,7 +36,7 @@ error: `await` is a keyword in the 2018 edition\n LL | use outer_mod::await::await;\n    |                       ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -45,7 +45,7 @@ error: `await` is a keyword in the 2018 edition\n LL |     match await { await => {} }\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n@@ -54,7 +54,7 @@ error: `await` is a keyword in the 2018 edition\n LL |     match await { await => {} }\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: aborting due to 6 previous errors"}, {"sha": "ae8863c567d0fdd28a54426d3e0695dd5ac15551", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -13,7 +13,7 @@ fn b() {\n     //~| ERROR expected trait, found constant `BAR`\n     //~| ERROR type provided when a constant was expected\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n fn c() {\n     foo::<3 + 3>(); //~ ERROR expressions must be enclosed in braces"}, {"sha": "b93bd6c6fa064b26b998c9ac61e0807af11830f9", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -138,7 +138,7 @@ LL |     foo::<BAR + BAR>();\n    |           ^^^^^^^^^ help: use `dyn`: `dyn BAR + BAR`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0747]: type provided when a constant was expected"}, {"sha": "c815080fc4ab6f563bbdc63ec43578e91d69c568", "filename": "src/test/ui/dyn-keyword/dyn-2015-edition-keyword-ident-lint.fixed", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.fixed?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -13,27 +13,27 @@\n mod outer_mod {\n     pub mod r#dyn {\n //~^ ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n         pub struct r#dyn;\n //~^ ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n     }\n }\n use outer_mod::r#dyn::r#dyn;\n //~^ ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n \n fn main() {\n     match r#dyn { r#dyn => {} }\n //~^ ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n     macro_defn::r#dyn();\n //~^ ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n \n     macro_defn::boxed();\n }\n@@ -43,31 +43,31 @@ mod macro_defn {\n \n     macro_rules! r#dyn {\n //~^ ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n \n         // Note that we do not lint nor fix occurrences under macros\n         ($dyn:tt) => { (Box<dyn Trait>, Box<$dyn Trait>) }\n     }\n \n     pub fn r#dyn() -> ::outer_mod::r#dyn::r#dyn {\n //~^ ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n         ::outer_mod::r#dyn::r#dyn\n //~^ ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n     }\n \n \n \n     pub fn boxed() -> r#dyn!(\n         //~^ ERROR `dyn` is a keyword\n-        //~| WARN this is valid in the current edition\n+        //~| WARN this is accepted in the current edition\n \n             // Note that we do not lint nor fix occurrences under macros\n             dyn"}, {"sha": "6cdc70714942527174f726caa582b3912de618ac", "filename": "src/test/ui/dyn-keyword/dyn-2015-edition-keyword-ident-lint.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -13,27 +13,27 @@\n mod outer_mod {\n     pub mod dyn {\n //~^ ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n         pub struct dyn;\n //~^ ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n     }\n }\n use outer_mod::dyn::dyn;\n //~^ ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n \n fn main() {\n     match dyn { dyn => {} }\n //~^ ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n     macro_defn::dyn();\n //~^ ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n \n     macro_defn::boxed();\n }\n@@ -43,31 +43,31 @@ mod macro_defn {\n \n     macro_rules! dyn {\n //~^ ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n \n         // Note that we do not lint nor fix occurrences under macros\n         ($dyn:tt) => { (Box<dyn Trait>, Box<$dyn Trait>) }\n     }\n \n     pub fn dyn() -> ::outer_mod::dyn::dyn {\n //~^ ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n         ::outer_mod::dyn::dyn\n //~^ ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n //~| ERROR `dyn` is a keyword\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n     }\n \n \n \n     pub fn boxed() -> dyn!(\n         //~^ ERROR `dyn` is a keyword\n-        //~| WARN this is valid in the current edition\n+        //~| WARN this is accepted in the current edition\n \n             // Note that we do not lint nor fix occurrences under macros\n             dyn"}, {"sha": "3eb5bb7b26d426b821baf6dc7dfffaa928ec6445", "filename": "src/test/ui/dyn-keyword/dyn-2015-edition-keyword-ident-lint.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2015-edition-keyword-ident-lint.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -18,7 +18,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |         pub struct dyn;\n    |                    ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -27,7 +27,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL | use outer_mod::dyn::dyn;\n    |                ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -36,7 +36,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL | use outer_mod::dyn::dyn;\n    |                     ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -45,7 +45,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     match dyn { dyn => {} }\n    |           ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -54,7 +54,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     match dyn { dyn => {} }\n    |                 ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -63,7 +63,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     macro_defn::dyn();\n    |                 ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -72,7 +72,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     macro_rules! dyn {\n    |                  ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -81,7 +81,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n    |            ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -90,7 +90,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n    |                                  ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -99,7 +99,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     pub fn dyn() -> ::outer_mod::dyn::dyn {\n    |                                       ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -108,7 +108,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |         ::outer_mod::dyn::dyn\n    |                      ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -117,7 +117,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |         ::outer_mod::dyn::dyn\n    |                           ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `dyn` is a keyword in the 2018 edition\n@@ -126,7 +126,7 @@ error: `dyn` is a keyword in the 2018 edition\n LL |     pub fn boxed() -> dyn!(\n    |                       ^^^ help: you can use a raw identifier to stay compatible: `r#dyn`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: aborting due to 14 previous errors"}, {"sha": "23ca36b71e00f7ac22904f6d19420862bea29cdc", "filename": "src/test/ui/dyn-keyword/dyn-2018-edition-lint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -3,12 +3,12 @@\n \n fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     //~| ERROR trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     let _x: &SomeTrait = todo!();\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n \n trait SomeTrait {}"}, {"sha": "30f09e22792167ea0a9151c9a4430713810fb8c0", "filename": "src/test/ui/dyn-keyword/dyn-2018-edition-lint.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #[deny(bare_trait_objects)]\n    |        ^^^^^^^^^^^^^^^^^^\n-   = warning: this is valid in the current edition (Rust 2018) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: trait objects without an explicit `dyn` are deprecated\n@@ -18,7 +18,7 @@ error: trait objects without an explicit `dyn` are deprecated\n LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n    |                                   ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n    |\n-   = warning: this is valid in the current edition (Rust 2018) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: trait objects without an explicit `dyn` are deprecated\n@@ -27,7 +27,7 @@ error: trait objects without an explicit `dyn` are deprecated\n LL |     let _x: &SomeTrait = todo!();\n    |              ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n    |\n-   = warning: this is valid in the current edition (Rust 2018) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to 3 previous errors"}, {"sha": "fcfe493c1a228b7bf877414dd97a5c4eefba8545", "filename": "src/test/ui/editions/edition-raw-pointer-method-2015.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -8,5 +8,5 @@ fn main() {\n     let y = &x as *const _;\n     let _ = y.is_null();\n     //~^ error: type annotations needed [tyvar_behind_raw_pointer]\n-    //~^^ warning: this is valid in the current edition\n+    //~^^ warning: this is accepted in the current edition\n }"}, {"sha": "417daf36fca7dd3ad678c2d73d635782f342d847", "filename": "src/test/ui/editions/edition-raw-pointer-method-2015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-raw-pointer-method-2015.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #[deny(warnings)]\n    |        ^^^^^^^^\n    = note: `#[deny(tyvar_behind_raw_pointer)]` implied by `#[deny(warnings)]`\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n \n error: aborting due to previous error"}, {"sha": "ce158043e54d505b57f9a4d8019d32d9cf4b2d66", "filename": "src/test/ui/future-incompatible-lint-group.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -2,7 +2,7 @@\n \n trait Tr {\n     fn f(u8) {} //~ ERROR anonymous parameters are deprecated\n-                //~^ WARN this is valid in the current edition\n+                //~^ WARN this is accepted in the current edition\n }\n \n fn main() {}"}, {"sha": "16028261eb1d1762bfe74a2ad25b00a223252c83", "filename": "src/test/ui/future-incompatible-lint-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![deny(future_incompatible)]\n    |         ^^^^^^^^^^^^^^^^^^^\n    = note: `#[deny(anonymous_parameters)]` implied by `#[deny(future_incompatible)]`\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n error: aborting due to previous error"}, {"sha": "b656382bced34bddfae1cca6f1da2c60745f8234", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -11,6 +11,6 @@ fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n   //~| ERROR this associated type takes 0 generic arguments but 1 generic argument\n   //~| ERROR this associated type takes 1 lifetime argument but 0 lifetime arguments\n   //~| WARNING: trait objects without an explicit `dyn` are deprecated\n-  //~| WARNING: this is valid in the current edition\n+  //~| WARNING: this is accepted in the current edition\n \n fn main() {}"}, {"sha": "34554d38520cfdacff1b2aa33a3b3f8663eb3f07", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -26,7 +26,7 @@ LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |                             ^^ help: use `dyn`: `dyn 'a`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied"}, {"sha": "6662e46b1c7e26a3d2f153969448b6bc1a188f63", "filename": "src/test/ui/inference/inference-variable-behind-raw-pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let _ = &data as *const *const ();\n     if data.is_null() {}\n     //~^ WARNING type annotations needed\n-    //~| WARNING this is valid in the current edition\n+    //~| WARNING this is accepted in the current edition\n }"}, {"sha": "c38f57912adff57827fef07ddfd7d5b5b809d753", "filename": "src/test/ui/inference/inference-variable-behind-raw-pointer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference-variable-behind-raw-pointer.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -5,7 +5,7 @@ LL |     if data.is_null() {}\n    |             ^^^^^^^\n    |\n    = note: `#[warn(tyvar_behind_raw_pointer)]` on by default\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #46906 <https://github.com/rust-lang/rust/issues/46906>\n \n warning: 1 warning emitted"}, {"sha": "0a7c5a8dbd10b44b374fd8d1b67eddd049389c63", "filename": "src/test/ui/lint/bare-trait-objects-path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -13,12 +13,12 @@ impl Assoc for dyn Dyn {}\n fn main() {\n     Dyn::func();\n     //~^ WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     ::Dyn::func();\n     //~^ WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     Dyn::CONST;\n     //~^ WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     let _: Dyn::Ty; //~ ERROR ambiguous associated type\n }"}, {"sha": "40fafc4b3b59b7085334612994de57150f5c2b5f", "filename": "src/test/ui/lint/bare-trait-objects-path.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -11,7 +11,7 @@ LL |     Dyn::func();\n    |     ^^^ help: use `dyn`: `<dyn Dyn>`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n@@ -20,7 +20,7 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL |     ::Dyn::func();\n    |     ^^^^^ help: use `dyn`: `<dyn (::Dyn)>`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n@@ -29,7 +29,7 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL |     Dyn::CONST;\n    |     ^^^ help: use `dyn`: `<dyn Dyn>`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to previous error; 3 warnings emitted"}, {"sha": "b4c2c505aa560dae2499c2955ceeaf34b866e038", "filename": "src/test/ui/lint/force-warn/force-lint-in-allowed-group.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -7,6 +7,6 @@ pub trait SomeTrait {}\n \n pub fn function(_x: Box<SomeTrait>) {}\n //~^ WARN trait objects without an explicit `dyn` are deprecated\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n \n fn main() {}"}, {"sha": "8ecfe3a15b8f6cf9ed34c86f5a91ff3b3666c4d2", "filename": "src/test/ui/lint/force-warn/force-lint-in-allowed-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -5,7 +5,7 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n    |\n    = note: warning forced by `force-warns` commandline option\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: 1 warning emitted"}, {"sha": "83a1c078f062f5bec33de0fe76f30c9b3f5bfa6a", "filename": "src/test/ui/lint/force-warn/force-warn-group-allow-warning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -7,6 +7,6 @@ pub trait SomeTrait {}\n \n pub fn function(_x: Box<SomeTrait>) {}\n //~^ WARN trait objects without an explicit `dyn` are deprecated\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n \n fn main() {}"}, {"sha": "232edf4f1ef25b06902aaaf2dfd3b6aa5d1428cb", "filename": "src/test/ui/lint/force-warn/force-warn-group-allow-warning.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -5,7 +5,7 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n    |\n    = note: warning forced by `force-warns` commandline option\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: 1 warning emitted"}, {"sha": "5e5fda973d54e7fcfd7234e61151b88d84f3e7c9", "filename": "src/test/ui/lint/force-warn/force-warn-group.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -7,6 +7,6 @@ pub trait SomeTrait {}\n \n pub fn function(_x: Box<SomeTrait>) {}\n //~^ WARN trait objects without an explicit `dyn` are deprecated\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n \n fn main() {}"}, {"sha": "82781984f0cea55a781695cdb156c1f51165a2b1", "filename": "src/test/ui/lint/force-warn/force-warn-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -5,7 +5,7 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n    |\n    = note: warning forced by `force-warns` commandline option\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: 1 warning emitted"}, {"sha": "bee5d4ae4b1b330553f1857d936b8e14ea112639", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.fixed?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -8,14 +8,14 @@ fn main() {\n     match despondency {\n         1..=2 => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this is valid in the current edition\n+        //~| WARN this is accepted in the current edition\n         _ => {}\n     }\n \n     match &despondency {\n         &(1..=2) => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this is valid in the current edition\n+        //~| WARN this is accepted in the current edition\n         _ => {}\n     }\n }"}, {"sha": "d98c10c26c7cfd96e22e7850bf439bbed5d011b5", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -8,14 +8,14 @@ fn main() {\n     match despondency {\n         1...2 => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this is valid in the current edition\n+        //~| WARN this is accepted in the current edition\n         _ => {}\n     }\n \n     match &despondency {\n         &1...2 => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this is valid in the current edition\n+        //~| WARN this is accepted in the current edition\n         _ => {}\n     }\n }"}, {"sha": "efa684a24e3d393c5fcba1e45cdc0d03ec21521d", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: `...` range patterns are deprecated\n@@ -18,7 +18,7 @@ warning: `...` range patterns are deprecated\n LL |         &1...2 => {}\n    |         ^^^^^^ help: use `..=` for an inclusive range: `&(1..=2)`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: 2 warnings emitted"}, {"sha": "3355bb4e4ff402042bdf9a708d7d4de0db5d6161", "filename": "src/test/ui/lint/lint-pre-expansion-extern-module.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-pre-expansion-extern-module.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -5,7 +5,7 @@ LL | pub fn try() {}\n    |        ^^^ help: you can use a raw identifier to stay compatible: `r#try`\n    |\n    = note: `-W keyword-idents` implied by `-W rust-2018-compatibility`\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n warning: 1 warning emitted"}, {"sha": "0a6e26acfc77f2d21c6740f68ae8d1af0be5f83d", "filename": "src/test/ui/parser/issue-68890-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -4,4 +4,4 @@ type X<'a> = (?'a) +;\n //~^ ERROR `?` may only modify trait bounds, not lifetime bounds\n //~| ERROR at least one trait is required for an object type\n //~| WARN trait objects without an explicit `dyn` are deprecated\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition"}, {"sha": "dce03e1a9635cf5e66b0f937fafdbda442503de8", "filename": "src/test/ui/parser/issue-68890-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -11,7 +11,7 @@ LL | type X<'a> = (?'a) +;\n    |              ^^^^^^^ help: use `dyn`: `dyn (?'a) +`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0224]: at least one trait is required for an object type"}, {"sha": "e68ee747cfdb5bbbbe3585f6973c3c033fa40b48", "filename": "src/test/ui/parser/issue-73568-lifetime-after-mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -14,10 +14,10 @@ mac!('a);\n fn y<'a>(y: &mut 'a + Send) {\n     //~^ ERROR expected a path on the left-hand side of `+`, not `&mut 'a`\n     //~| WARNING trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     //~| ERROR at least one trait is required for an object type\n     let z = y as &mut 'a + Send;\n     //~^ ERROR expected value, found trait `Send`\n     //~| WARNING trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }"}, {"sha": "c10037d44e30d9f92b30431fb0dbb6b7e182efdd", "filename": "src/test/ui/parser/issue-73568-lifetime-after-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -34,7 +34,7 @@ LL | fn y<'a>(y: &mut 'a + Send) {\n    |                  ^^ help: use `dyn`: `dyn 'a`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n@@ -43,7 +43,7 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL |     let z = y as &mut 'a + Send;\n    |                       ^^ help: use `dyn`: `dyn 'a`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0224]: at least one trait is required for an object type"}, {"sha": "663739f235a438340521d585fb98219411ec008a", "filename": "src/test/ui/parser/macro/trait-object-macro-matcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -12,5 +12,5 @@ fn main() {\n     //~^ ERROR lifetime in trait object type must be followed by `+`\n     //~| ERROR at least one trait is required for an object type\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }"}, {"sha": "caca84f695d76d67a52890939974fb867e0bad78", "filename": "src/test/ui/parser/macro/trait-object-macro-matcher.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -11,7 +11,7 @@ LL |     m!('static);\n    |        ^^^^^^^ help: use `dyn`: `dyn 'static`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0224]: at least one trait is required for an object type"}, {"sha": "2e5a991543ff93341909f2b9306e81498af88d37", "filename": "src/test/ui/parser/recover-range-pats.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -41,30 +41,30 @@ fn inclusive_from_to() {\n fn inclusive2_from_to() {\n     if let 0...3 = 0 {}\n     //~^ ERROR `...` range patterns are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     if let 0...Y = 0 {}\n     //~^ ERROR `...` range patterns are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     if let X...3 = 0 {}\n     //~^ ERROR `...` range patterns are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     if let X...Y = 0 {}\n     //~^ ERROR `...` range patterns are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     if let true...Y = 0 {} //~ ERROR only `char` and numeric types\n     //~^ ERROR `...` range patterns are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     if let X...true = 0 {} //~ ERROR only `char` and numeric types\n     //~^ ERROR `...` range patterns are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     if let .0...Y = 0 {} //~ ERROR mismatched types\n     //~^ ERROR float literals must have an integer part\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     //~| ERROR `...` range patterns are deprecated\n     if let X... .0 = 0 {} //~ ERROR mismatched types\n     //~^ ERROR float literals must have an integer part\n     //~| ERROR `...` range patterns are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n \n fn exclusive_from() {\n@@ -137,7 +137,7 @@ fn with_macro_expr_var() {\n             let $e1..$e2;\n             let $e1...$e2;\n             //~^ ERROR `...` range patterns are deprecated\n-            //~| WARN this is valid in the current edition\n+            //~| WARN this is accepted in the current edition\n             let $e1..=$e2;\n         }\n     }"}, {"sha": "2d8088432a257a1890965432224e7851eb9fe537", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -204,7 +204,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -213,7 +213,7 @@ error: `...` range patterns are deprecated\n LL |     if let 0...Y = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -222,7 +222,7 @@ error: `...` range patterns are deprecated\n LL |     if let X...3 = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -231,7 +231,7 @@ error: `...` range patterns are deprecated\n LL |     if let X...Y = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -240,7 +240,7 @@ error: `...` range patterns are deprecated\n LL |     if let true...Y = 0 {}\n    |                ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -249,7 +249,7 @@ error: `...` range patterns are deprecated\n LL |     if let X...true = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -258,7 +258,7 @@ error: `...` range patterns are deprecated\n LL |     if let .0...Y = 0 {}\n    |              ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -267,7 +267,7 @@ error: `...` range patterns are deprecated\n LL |     if let X... .0 = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: `...` range patterns are deprecated\n@@ -279,7 +279,7 @@ LL |             let $e1...$e2;\n LL |     mac2!(0, 1);\n    |     ------------ in this macro invocation\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n    = note: this error originates in the macro `mac2` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "438034bc38aa45d38e1d85468df92f61b62d57e1", "filename": "src/test/ui/parser/trait-object-trait-parens.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -9,15 +9,15 @@ fn main() {\n     //~^ ERROR `?Trait` is not permitted in trait object types\n     //~| ERROR only auto traits can be used as additional traits\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n     //~^ ERROR `?Trait` is not permitted in trait object types\n     //~| ERROR only auto traits can be used as additional traits\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n     //~^ ERROR `?Trait` is not permitted in trait object types\n     //~| ERROR only auto traits can be used as additional traits\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }"}, {"sha": "9bfc4943fe9414c3338a82c66e522f357d885456", "filename": "src/test/ui/parser/trait-object-trait-parens.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -23,7 +23,7 @@ LL |     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn (Obj) + (?Sized) + (for<'a> Trait<'a>)`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n@@ -32,7 +32,7 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL |     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn ?Sized + (for<'a> Trait<'a>) + (Obj)`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n warning: trait objects without an explicit `dyn` are deprecated\n@@ -41,7 +41,7 @@ warning: trait objects without an explicit `dyn` are deprecated\n LL |     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> Trait<'a> + (Obj) + (?Sized)`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object"}, {"sha": "8a4b8fc38e37a5c6df74149648a03d4f54ec4edb", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.fixed?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -10,7 +10,7 @@ pub fn main() {\n     match &12 {\n         &(0..=9) => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this is valid in the current edition\n+        //~| WARN this is accepted in the current edition\n         //~| HELP use `..=` for an inclusive range\n         &(10 ..=15) => {}\n         //~^ ERROR the range pattern here has ambiguous interpretation"}, {"sha": "b294e436fa65457fa5364c405188a212976921cf", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -10,7 +10,7 @@ pub fn main() {\n     match &12 {\n         &0...9 => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this is valid in the current edition\n+        //~| WARN this is accepted in the current edition\n         //~| HELP use `..=` for an inclusive range\n         &10..=15 => {}\n         //~^ ERROR the range pattern here has ambiguous interpretation"}, {"sha": "3330ced1ebf341aeebb65ee6b145b741de95542a", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -15,7 +15,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to previous error; 1 warning emitted"}, {"sha": "bede9c579766fea4541fc490d00a612b8c9c6e9e", "filename": "src/test/ui/range/range-inclusive-pattern-precedence2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -9,7 +9,7 @@ fn main() {\n         // FIXME: can we add suggestions like `&(0..=9)`?\n         box 0...9 => {}\n         //~^ WARN `...` range patterns are deprecated\n-        //~| WARN this is valid in the current edition\n+        //~| WARN this is accepted in the current edition\n         //~| HELP use `..=` for an inclusive range\n         box 10..=15 => {}\n         //~^ ERROR the range pattern here has ambiguous interpretation"}, {"sha": "90a4aa68222f64f16a58bd56e3f3d335d2eae893", "filename": "src/test/ui/range/range-inclusive-pattern-precedence2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -15,7 +15,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to previous error; 1 warning emitted"}, {"sha": "8efcfbb7074240c12a247b7bd77811c9d2ea5cc0", "filename": "src/test/ui/rust-2018/async-ident-allowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -7,5 +7,5 @@\n \n fn main() {\n     let async = 3; //~ ERROR: is a keyword\n-    //~^ WARN this is valid in the current edition\n+    //~^ WARN this is accepted in the current edition\n }"}, {"sha": "5b63eab8e466dcff64911874b21627728506680d", "filename": "src/test/ui/rust-2018/async-ident-allowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![deny(rust_2018_compatibility)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: `#[deny(keyword_idents)]` implied by `#[deny(rust_2018_compatibility)]`\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: aborting due to previous error"}, {"sha": "f4ae518c71d2727fdd2a5003c84c02b483868cc5", "filename": "src/test/ui/rust-2018/async-ident.fixed", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -5,20 +5,20 @@\n // run-rustfix\n \n fn r#async() {} //~ ERROR async\n-//~^ WARN this is valid in the current edition\n+//~^ WARN this is accepted in the current edition\n \n macro_rules! foo {\n     ($foo:ident) => {};\n     ($r#async:expr, r#async) => {};\n     //~^ ERROR async\n     //~| ERROR async\n-    //~| WARN this is valid in the current edition\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n \n foo!(r#async);\n     //~^ ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n \n mod dont_lint_raw {\n     fn r#async() {}\n@@ -27,53 +27,53 @@ mod dont_lint_raw {\n mod async_trait {\n     trait r#async {}\n     //~^ ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     struct MyStruct;\n     impl r#async for MyStruct {}\n     //~^ ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n \n mod async_static {\n     static r#async: u32 = 0;\n     //~^ ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n \n mod async_const {\n     const r#async: u32 = 0;\n     //~^ ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n \n struct Foo;\n impl Foo { fn r#async() {} }\n     //~^ ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n \n fn main() {\n     struct r#async {}\n     //~^ ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     let r#async: r#async = r#async {};\n     //~^ ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     //~| ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     //~| ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n \n #[macro_export]\n macro_rules! produces_async {\n     () => (pub fn r#async() {})\n     //~^ ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n \n #[macro_export]\n macro_rules! consumes_async {\n     (r#async) => (1)\n     //~^ ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }"}, {"sha": "79c73dafac7a3391f33f9a0261385fafef38eee0", "filename": "src/test/ui/rust-2018/async-ident.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -5,20 +5,20 @@\n // run-rustfix\n \n fn async() {} //~ ERROR async\n-//~^ WARN this is valid in the current edition\n+//~^ WARN this is accepted in the current edition\n \n macro_rules! foo {\n     ($foo:ident) => {};\n     ($async:expr, async) => {};\n     //~^ ERROR async\n     //~| ERROR async\n-    //~| WARN this is valid in the current edition\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n \n foo!(async);\n     //~^ ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n \n mod dont_lint_raw {\n     fn r#async() {}\n@@ -27,53 +27,53 @@ mod dont_lint_raw {\n mod async_trait {\n     trait async {}\n     //~^ ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     struct MyStruct;\n     impl async for MyStruct {}\n     //~^ ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n \n mod async_static {\n     static async: u32 = 0;\n     //~^ ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n \n mod async_const {\n     const async: u32 = 0;\n     //~^ ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n \n struct Foo;\n impl Foo { fn async() {} }\n     //~^ ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n \n fn main() {\n     struct async {}\n     //~^ ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     let async: async = async {};\n     //~^ ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     //~| ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     //~| ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n \n #[macro_export]\n macro_rules! produces_async {\n     () => (pub fn async() {})\n     //~^ ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n \n #[macro_export]\n macro_rules! consumes_async {\n     (async) => (1)\n     //~^ ERROR async\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }"}, {"sha": "6396e9deee228e945e6bd3723a8eeeea45a693e8", "filename": "src/test/ui/rust-2018/async-ident.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -18,7 +18,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     ($async:expr, async) => {};\n    |       ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -27,7 +27,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     ($async:expr, async) => {};\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -36,7 +36,7 @@ error: `async` is a keyword in the 2018 edition\n LL | foo!(async);\n    |      ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -45,7 +45,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     trait async {}\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -54,7 +54,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     impl async for MyStruct {}\n    |          ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -63,7 +63,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     static async: u32 = 0;\n    |            ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -72,7 +72,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     const async: u32 = 0;\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -81,7 +81,7 @@ error: `async` is a keyword in the 2018 edition\n LL | impl Foo { fn async() {} }\n    |               ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -90,7 +90,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     struct async {}\n    |            ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -99,7 +99,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     let async: async = async {};\n    |         ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -108,7 +108,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     let async: async = async {};\n    |                ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -117,7 +117,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     let async: async = async {};\n    |                        ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -126,7 +126,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     () => (pub fn async() {})\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `async` is a keyword in the 2018 edition\n@@ -135,7 +135,7 @@ error: `async` is a keyword in the 2018 edition\n LL |     (async) => (1)\n    |      ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: aborting due to 15 previous errors"}, {"sha": "044824cbbd3677fd89f0c93bda3faac47b888785", "filename": "src/test/ui/rust-2018/dyn-keyword.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.fixed?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -6,5 +6,5 @@\n \n fn main() {\n     let r#dyn = (); //~ ERROR dyn\n-    //~^ WARN this is valid in the current edition\n+    //~^ WARN this is accepted in the current edition\n }"}, {"sha": "5989cfa1c799a7a192431656cc971c0633bd583d", "filename": "src/test/ui/rust-2018/dyn-keyword.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -6,5 +6,5 @@\n \n fn main() {\n     let dyn = (); //~ ERROR dyn\n-    //~^ WARN this is valid in the current edition\n+    //~^ WARN this is accepted in the current edition\n }"}, {"sha": "699242f2dcb01a0da333399ba6ee63a7e32459a0", "filename": "src/test/ui/rust-2018/dyn-keyword.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fdyn-keyword.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: aborting due to previous error"}, {"sha": "37847a98ac7826cb000583abd06614dafd0ae42d", "filename": "src/test/ui/rust-2018/edition-lint-fully-qualified-paths.fixed", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.fixed?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -8,20 +8,19 @@ mod foo {\n         type Bar;\n     }\n \n-    crate struct Baz { }\n+    crate struct Baz {}\n \n     impl Foo for Baz {\n         type Bar = ();\n     }\n }\n \n-\n fn main() {\n     let _: <foo::Baz as crate::foo::Foo>::Bar = ();\n     //~^ ERROR absolute paths must start with\n-    //~| this is valid in the current edition\n+    //~| this is accepted in the current edition\n \n     let _: <crate::foo::Baz as foo::Foo>::Bar = ();\n     //~^ ERROR absolute paths must start with\n-    //~| this is valid in the current edition\n+    //~| this is accepted in the current edition\n }"}, {"sha": "36efa14601d184532556cc821a5501a1a7d11ae0", "filename": "src/test/ui/rust-2018/edition-lint-fully-qualified-paths.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -8,20 +8,19 @@ mod foo {\n         type Bar;\n     }\n \n-    crate struct Baz { }\n+    crate struct Baz {}\n \n     impl Foo for Baz {\n         type Bar = ();\n     }\n }\n \n-\n fn main() {\n     let _: <foo::Baz as ::foo::Foo>::Bar = ();\n     //~^ ERROR absolute paths must start with\n-    //~| this is valid in the current edition\n+    //~| this is accepted in the current edition\n \n     let _: <::foo::Baz as foo::Foo>::Bar = ();\n     //~^ ERROR absolute paths must start with\n-    //~| this is valid in the current edition\n+    //~| this is accepted in the current edition\n }"}, {"sha": "6f529fa9114bc76b4521bde195b6084a77d7117d", "filename": "src/test/ui/rust-2018/edition-lint-fully-qualified-paths.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-fully-qualified-paths.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -1,5 +1,5 @@\n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-fully-qualified-paths.rs:20:25\n+  --> $DIR/edition-lint-fully-qualified-paths.rs:19:25\n    |\n LL |     let _: <foo::Baz as ::foo::Foo>::Bar = ();\n    |                         ^^^^^^^^^^ help: use `crate`: `crate::foo::Foo`\n@@ -9,16 +9,16 @@ note: the lint level is defined here\n    |\n LL | #![deny(absolute_paths_not_starting_with_crate)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-fully-qualified-paths.rs:24:13\n+  --> $DIR/edition-lint-fully-qualified-paths.rs:23:13\n    |\n LL |     let _: <::foo::Baz as foo::Foo>::Bar = ();\n    |             ^^^^^^^^^^ help: use `crate`: `crate::foo::Baz`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: aborting due to 2 previous errors"}, {"sha": "03d15cea280f6bf84c342526754730bf69e08231", "filename": "src/test/ui/rust-2018/edition-lint-nested-empty-paths.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.fixed?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -16,15 +16,15 @@ crate mod foo {\n \n use crate::foo::{bar::{baz::{}}};\n //~^ ERROR absolute paths must start with\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n \n use crate::foo::{bar::{XX, baz::{}}};\n //~^ ERROR absolute paths must start with\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n \n use crate::foo::{bar::{baz::{}, baz1::{}}};\n //~^ ERROR absolute paths must start with\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n \n fn main() {\n }"}, {"sha": "d898daaba59cafad7a23fd810284b4ada2e56358", "filename": "src/test/ui/rust-2018/edition-lint-nested-empty-paths.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -16,15 +16,15 @@ crate mod foo {\n \n use foo::{bar::{baz::{}}};\n //~^ ERROR absolute paths must start with\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n \n use foo::{bar::{XX, baz::{}}};\n //~^ ERROR absolute paths must start with\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n \n use foo::{bar::{baz::{}, baz1::{}}};\n //~^ ERROR absolute paths must start with\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n \n fn main() {\n }"}, {"sha": "54a4fed5cf9b8293d14f17a8aec5e52785899bbf", "filename": "src/test/ui/rust-2018/edition-lint-nested-empty-paths.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-empty-paths.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(absolute_paths_not_starting_with_crate)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n@@ -18,7 +18,7 @@ error: absolute paths must start with `self`, `super`, `crate`, or an external c\n LL | use foo::{bar::{XX, baz::{}}};\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{bar::{XX, baz::{}}}`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n@@ -27,7 +27,7 @@ error: absolute paths must start with `self`, `super`, `crate`, or an external c\n LL | use foo::{bar::{baz::{}, baz1::{}}};\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{bar::{baz::{}, baz1::{}}}`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: aborting due to 3 previous errors"}, {"sha": "7c6e4a71a37e356fd4aaf69d00097a6ee2964fb0", "filename": "src/test/ui/rust-2018/edition-lint-nested-paths.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.fixed?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -5,7 +5,7 @@\n \n use crate::foo::{a, b};\n //~^ ERROR absolute paths must start with\n-//~| this is valid in the current edition\n+//~| this is accepted in the current edition\n \n mod foo {\n     crate fn a() {}\n@@ -20,7 +20,7 @@ fn main() {\n     {\n         use crate::foo::{self as x, c};\n         //~^ ERROR absolute paths must start with\n-        //~| this is valid in the current edition\n+        //~| this is accepted in the current edition\n         x::a();\n         c();\n     }"}, {"sha": "3925f76391ab81895802c22a72fecbdde7fe659d", "filename": "src/test/ui/rust-2018/edition-lint-nested-paths.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -5,7 +5,7 @@\n \n use foo::{a, b};\n //~^ ERROR absolute paths must start with\n-//~| this is valid in the current edition\n+//~| this is accepted in the current edition\n \n mod foo {\n     crate fn a() {}\n@@ -20,7 +20,7 @@ fn main() {\n     {\n         use foo::{self as x, c};\n         //~^ ERROR absolute paths must start with\n-        //~| this is valid in the current edition\n+        //~| this is accepted in the current edition\n         x::a();\n         c();\n     }"}, {"sha": "c2f91e342f56a7f5417333add6cff71920026bed", "filename": "src/test/ui/rust-2018/edition-lint-nested-paths.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(absolute_paths_not_starting_with_crate)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n@@ -18,7 +18,7 @@ error: absolute paths must start with `self`, `super`, `crate`, or an external c\n LL |         use foo::{self as x, c};\n    |             ^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::{self as x, c}`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: aborting due to 2 previous errors"}, {"sha": "f91405929ee115e4cc7852f5d33501179c9f92c8", "filename": "src/test/ui/rust-2018/edition-lint-paths.fixed", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -11,30 +11,29 @@ pub mod foo {\n     use edition_lint_paths;\n     use crate::bar::Bar;\n     //~^ ERROR absolute\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     use super::bar::Bar2;\n     use crate::bar::Bar3;\n \n     use crate::bar;\n     //~^ ERROR absolute\n-    //~| WARN this is valid in the current edition\n-    use crate::{bar as something_else};\n+    //~| WARN this is accepted in the current edition\n+    use crate::bar as something_else;\n \n-    use crate::{Bar as SomethingElse, main};\n+    use crate::{main, Bar as SomethingElse};\n     //~^ ERROR absolute\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n \n-    use crate::{Bar as SomethingElse2, main as another_main};\n+    use crate::{main as another_main, Bar as SomethingElse2};\n \n-    pub fn test() {\n-    }\n+    pub fn test() {}\n \n-    pub trait SomeTrait { }\n+    pub trait SomeTrait {}\n }\n \n use crate::bar::Bar;\n //~^ ERROR absolute\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n \n pub mod bar {\n     use edition_lint_paths as foo;\n@@ -46,17 +45,17 @@ pub mod bar {\n mod baz {\n     use crate::*;\n     //~^ ERROR absolute\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n \n-impl crate::foo::SomeTrait for u32 { }\n+impl crate::foo::SomeTrait for u32 {}\n //~^ ERROR absolute\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n \n fn main() {\n     let x = crate::bar::Bar;\n     //~^ ERROR absolute\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     let x = bar::Bar;\n     let x = crate::bar::Bar;\n     let x = self::bar::Bar;"}, {"sha": "52c97c7a25393e7b3061b7a056930c495af367c7", "filename": "src/test/ui/rust-2018/edition-lint-paths.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -9,32 +9,31 @@ extern crate edition_lint_paths;\n \n pub mod foo {\n     use edition_lint_paths;\n-    use ::bar::Bar;\n+    use bar::Bar;\n     //~^ ERROR absolute\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     use super::bar::Bar2;\n     use crate::bar::Bar3;\n \n     use bar;\n     //~^ ERROR absolute\n-    //~| WARN this is valid in the current edition\n-    use crate::{bar as something_else};\n+    //~| WARN this is accepted in the current edition\n+    use crate::bar as something_else;\n \n-    use {Bar as SomethingElse, main};\n+    use {main, Bar as SomethingElse};\n     //~^ ERROR absolute\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n \n-    use crate::{Bar as SomethingElse2, main as another_main};\n+    use crate::{main as another_main, Bar as SomethingElse2};\n \n-    pub fn test() {\n-    }\n+    pub fn test() {}\n \n-    pub trait SomeTrait { }\n+    pub trait SomeTrait {}\n }\n \n use bar::Bar;\n //~^ ERROR absolute\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n \n pub mod bar {\n     use edition_lint_paths as foo;\n@@ -46,17 +45,17 @@ pub mod bar {\n mod baz {\n     use *;\n     //~^ ERROR absolute\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n \n-impl ::foo::SomeTrait for u32 { }\n+impl ::foo::SomeTrait for u32 {}\n //~^ ERROR absolute\n-//~| WARN this is valid in the current edition\n+//~| WARN this is accepted in the current edition\n \n fn main() {\n     let x = ::bar::Bar;\n     //~^ ERROR absolute\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     let x = bar::Bar;\n     let x = crate::bar::Bar;\n     let x = self::bar::Bar;"}, {"sha": "23deeda14a4d0d7a266e66e19ea28225e129a622", "filename": "src/test/ui/rust-2018/edition-lint-paths.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -1,15 +1,15 @@\n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n   --> $DIR/edition-lint-paths.rs:12:9\n    |\n-LL |     use ::bar::Bar;\n-   |         ^^^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n+LL |     use bar::Bar;\n+   |         ^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n    |\n note: the lint level is defined here\n   --> $DIR/edition-lint-paths.rs:5:9\n    |\n LL | #![deny(absolute_paths_not_starting_with_crate)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n@@ -18,52 +18,52 @@ error: absolute paths must start with `self`, `super`, `crate`, or an external c\n LL |     use bar;\n    |         ^^^ help: use `crate`: `crate::bar`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n   --> $DIR/edition-lint-paths.rs:23:9\n    |\n-LL |     use {Bar as SomethingElse, main};\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::{Bar as SomethingElse, main}`\n+LL |     use {main, Bar as SomethingElse};\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `crate`: `crate::{main, Bar as SomethingElse}`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:35:5\n+  --> $DIR/edition-lint-paths.rs:34:5\n    |\n LL | use bar::Bar;\n    |     ^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:47:9\n+  --> $DIR/edition-lint-paths.rs:46:9\n    |\n LL |     use *;\n    |         ^ help: use `crate`: `crate::*`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:52:6\n+  --> $DIR/edition-lint-paths.rs:51:6\n    |\n-LL | impl ::foo::SomeTrait for u32 { }\n+LL | impl ::foo::SomeTrait for u32 {}\n    |      ^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::SomeTrait`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:57:13\n+  --> $DIR/edition-lint-paths.rs:56:13\n    |\n LL |     let x = ::bar::Bar;\n    |             ^^^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: aborting due to 7 previous errors"}, {"sha": "ea832ef3e7d70b52387367238f5eef453ef73303", "filename": "src/test/ui/rust-2018/extern-crate-rename.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.fixed?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -11,7 +11,7 @@ extern crate edition_lint_paths as my_crate;\n \n use crate::my_crate::foo;\n //~^ ERROR absolute paths must start\n-//~| WARNING this is valid in the current edition\n+//~| WARNING this is accepted in the current edition\n \n fn main() {\n     foo();"}, {"sha": "b1f617dd8847844b6f74eb4509ab1b5d2b0efb20", "filename": "src/test/ui/rust-2018/extern-crate-rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -11,7 +11,7 @@ extern crate edition_lint_paths as my_crate;\n \n use my_crate::foo;\n //~^ ERROR absolute paths must start\n-//~| WARNING this is valid in the current edition\n+//~| WARNING this is accepted in the current edition\n \n fn main() {\n     foo();"}, {"sha": "4bccbc51223f3b5c9ca2fb809d433ff8e920a162", "filename": "src/test/ui/rust-2018/extern-crate-rename.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-rename.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(absolute_paths_not_starting_with_crate)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: aborting due to previous error"}, {"sha": "9b0b0dd8ee1d43f810691719bb340c9b3da11f37", "filename": "src/test/ui/rust-2018/extern-crate-submod.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.fixed?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -18,7 +18,7 @@ mod m {\n // *could* rewrite it to `use edition_lint_paths::foo`\n use crate::m::edition_lint_paths::foo;\n //~^ ERROR absolute paths must start\n-//~| WARNING this is valid in the current edition\n+//~| WARNING this is accepted in the current edition\n \n fn main() {\n     foo();"}, {"sha": "dfce9128c51148494f86cd73af5fc9506ee0f42b", "filename": "src/test/ui/rust-2018/extern-crate-submod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -18,7 +18,7 @@ mod m {\n // *could* rewrite it to `use edition_lint_paths::foo`\n use m::edition_lint_paths::foo;\n //~^ ERROR absolute paths must start\n-//~| WARNING this is valid in the current edition\n+//~| WARNING this is accepted in the current edition\n \n fn main() {\n     foo();"}, {"sha": "3c75319aedaedfc320dc904d13bab8f1528ec851", "filename": "src/test/ui/rust-2018/extern-crate-submod.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fextern-crate-submod.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(absolute_paths_not_starting_with_crate)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #53130 <https://github.com/rust-lang/rust/issues/53130>\n \n error: aborting due to previous error"}, {"sha": "985348665c9081c7fc6390d3d3d66148d32701b1", "filename": "src/test/ui/rust-2018/try-ident.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.fixed?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -6,10 +6,10 @@\n fn main() {\n     r#try();\n     //~^ WARNING `try` is a keyword in the 2018 edition\n-    //~| WARNING this is valid in the current edition\n+    //~| WARNING this is accepted in the current edition\n }\n \n fn r#try() {\n     //~^ WARNING `try` is a keyword in the 2018 edition\n-    //~| WARNING this is valid in the current edition\n+    //~| WARNING this is accepted in the current edition\n }"}, {"sha": "2c02b75960ec7ec9d8a40f9e5338f2dac3de1aae", "filename": "src/test/ui/rust-2018/try-ident.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -6,10 +6,10 @@\n fn main() {\n     try();\n     //~^ WARNING `try` is a keyword in the 2018 edition\n-    //~| WARNING this is valid in the current edition\n+    //~| WARNING this is accepted in the current edition\n }\n \n fn try() {\n     //~^ WARNING `try` is a keyword in the 2018 edition\n-    //~| WARNING this is valid in the current edition\n+    //~| WARNING this is accepted in the current edition\n }"}, {"sha": "3d93b433cf28047340224f3367b0d923272a0100", "filename": "src/test/ui/rust-2018/try-ident.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![warn(rust_2018_compatibility)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: `#[warn(keyword_idents)]` implied by `#[warn(rust_2018_compatibility)]`\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n warning: `try` is a keyword in the 2018 edition\n@@ -19,7 +19,7 @@ warning: `try` is a keyword in the 2018 edition\n LL | fn try() {\n    |    ^^^ help: you can use a raw identifier to stay compatible: `r#try`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n warning: 2 warnings emitted"}, {"sha": "3308870f654c97d1192f9090d3a54e55767120dd", "filename": "src/test/ui/rust-2018/try-macro.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.fixed?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -11,8 +11,8 @@ fn foo() -> Result<usize, ()> {\n     let x: Result<usize, ()> = Ok(22);\n     r#try!(x);\n     //~^ WARNING `try` is a keyword in the 2018 edition\n-    //~| WARNING this is valid in the current edition\n+    //~| WARNING this is accepted in the current edition\n     Ok(44)\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "69e87a1ff621cc3414f06587e215285b3504224e", "filename": "src/test/ui/rust-2018/try-macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -11,8 +11,8 @@ fn foo() -> Result<usize, ()> {\n     let x: Result<usize, ()> = Ok(22);\n     try!(x);\n     //~^ WARNING `try` is a keyword in the 2018 edition\n-    //~| WARNING this is valid in the current edition\n+    //~| WARNING this is accepted in the current edition\n     Ok(44)\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "f315b4d4a9eb9eb274f05926342f6a213c4cb4c9", "filename": "src/test/ui/rust-2018/try-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-macro.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![warn(rust_2018_compatibility)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: `#[warn(keyword_idents)]` implied by `#[warn(rust_2018_compatibility)]`\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2018 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n warning: 1 warning emitted"}, {"sha": "d31ed01b1916be31cb3d3fbaedd596581472277e", "filename": "src/test/ui/suggestions/issue-61963.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -17,11 +17,11 @@ pub struct Qux<T>(T);\n #[dom_struct]\n pub struct Foo {\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n     qux: Qux<Qux<Baz>>,\n     bar: Box<Bar>,\n     //~^ ERROR trait objects without an explicit `dyn` are deprecated [bare_trait_objects]\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n \n fn main() {}"}, {"sha": "6282a693855af778e1f86fb0ef67f14a37eb034f", "filename": "src/test/ui/suggestions/issue-61963.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(bare_trait_objects)]\n    |         ^^^^^^^^^^^^^^^^^^\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: trait objects without an explicit `dyn` are deprecated\n@@ -18,7 +18,7 @@ error: trait objects without an explicit `dyn` are deprecated\n LL | pub struct Foo {\n    | ^^^ help: use `dyn`: `dyn pub`\n    |\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error: aborting due to 2 previous errors"}, {"sha": "daf18c6702e4695066197af2257326425389af72", "filename": "src/test/ui/traits/bound/not-on-bare-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.rs?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -7,7 +7,7 @@ trait Foo {\n fn foo(_x: Foo + Send) {\n     //~^ ERROR the size for values of type\n     //~| WARN trait objects without an explicit `dyn` are deprecated\n-    //~| WARN this is valid in the current edition\n+    //~| WARN this is accepted in the current edition\n }\n \n fn main() {}"}, {"sha": "e65b8989e0b1ec47f1c5e9517db88551e8af54e5", "filename": "src/test/ui/traits/bound/not-on-bare-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b3940f44b1f0774f8b43d01786193744fee0079/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr?ref=7b3940f44b1f0774f8b43d01786193744fee0079", "patch": "@@ -5,7 +5,7 @@ LL | fn foo(_x: Foo + Send) {\n    |            ^^^^^^^^^^ help: use `dyn`: `dyn Foo + Send`\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n-   = warning: this is valid in the current edition (Rust 2015) but is not accepted in the Rust 2021 edition!\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n \n error[E0277]: the size for values of type `(dyn Foo + Send + 'static)` cannot be known at compilation time"}]}