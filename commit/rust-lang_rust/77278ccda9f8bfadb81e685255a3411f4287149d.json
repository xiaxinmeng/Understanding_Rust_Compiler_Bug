{"sha": "77278ccda9f8bfadb81e685255a3411f4287149d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3Mjc4Y2NkYTlmOGJmYWRiODFlNjg1MjU1YTM0MTFmNDI4NzE0OWQ=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-08-10T04:01:15Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-08-10T04:01:15Z"}, "message": "Fix `wrong_self_convention` issue\n\nResolves #4293", "tree": {"sha": "2eb18639df1e93f924becf51fa9c99a136902277", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2eb18639df1e93f924becf51fa9c99a136902277"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77278ccda9f8bfadb81e685255a3411f4287149d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77278ccda9f8bfadb81e685255a3411f4287149d", "html_url": "https://github.com/rust-lang/rust/commit/77278ccda9f8bfadb81e685255a3411f4287149d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77278ccda9f8bfadb81e685255a3411f4287149d/comments", "author": null, "committer": null, "parents": [{"sha": "170d4861c6d210cb788a7aa00381c54a794f8a14", "url": "https://api.github.com/repos/rust-lang/rust/commits/170d4861c6d210cb788a7aa00381c54a794f8a14", "html_url": "https://github.com/rust-lang/rust/commit/170d4861c6d210cb788a7aa00381c54a794f8a14"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "ec8108e3807de0f034536f2450079b60ef4645c2", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/77278ccda9f8bfadb81e685255a3411f4287149d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77278ccda9f8bfadb81e685255a3411f4287149d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=77278ccda9f8bfadb81e685255a3411f4287149d", "patch": "@@ -2547,6 +2547,22 @@ enum SelfKind {\n \n impl SelfKind {\n     fn matches<'a>(self, cx: &LateContext<'_, 'a>, parent_ty: Ty<'a>, ty: Ty<'a>) -> bool {\n+        fn matches_value(parent_ty: Ty<'_>, ty: Ty<'_>) -> bool {\n+            if ty == parent_ty {\n+                true\n+            } else if ty.is_box() {\n+                ty.boxed_ty() == parent_ty\n+            } else if ty.is_rc() || ty.is_arc() {\n+                if let ty::Adt(_, substs) = ty.sty {\n+                    substs.types().next().map_or(false, |t| t == parent_ty)\n+                } else {\n+                    false\n+                }\n+            } else {\n+                false\n+            }\n+        }\n+\n         fn matches_ref<'a>(\n             cx: &LateContext<'_, 'a>,\n             mutability: hir::Mutability,\n@@ -2567,7 +2583,7 @@ impl SelfKind {\n         }\n \n         match self {\n-            Self::Value => ty == parent_ty,\n+            Self::Value => matches_value(parent_ty, ty),\n             Self::Ref => {\n                 matches_ref(cx, hir::Mutability::MutImmutable, parent_ty, ty) || ty == parent_ty && is_copy(cx, ty)\n             },"}, {"sha": "7567fa7158cb0b3666211a91628c50c2855051ac", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/77278ccda9f8bfadb81e685255a3411f4287149d/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77278ccda9f8bfadb81e685255a3411f4287149d/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=77278ccda9f8bfadb81e685255a3411f4287149d", "patch": "@@ -56,3 +56,22 @@ impl Bar {\n     fn from_(self) {}\n     fn to_mut(&mut self) {}\n }\n+\n+// Allow Box<Self>, Rc<Self>, Arc<Self> for methods that take conventionally take Self by value\n+#[allow(clippy::boxed_local)]\n+mod issue4293 {\n+    use std::rc::Rc;\n+    use std::sync::Arc;\n+\n+    struct T;\n+\n+    impl T {\n+        fn into_s1(self: Box<Self>) {}\n+        fn into_s2(self: Rc<Self>) {}\n+        fn into_s3(self: Arc<Self>) {}\n+\n+        fn into_t1(self: Box<T>) {}\n+        fn into_t2(self: Rc<T>) {}\n+        fn into_t3(self: Arc<T>) {}\n+    }\n+}"}]}