{"sha": "f975d0511690c1dabe2e9df0dde189b90bec587f", "node_id": "C_kwDOAAsO6NoAKGY5NzVkMDUxMTY5MGMxZGFiZTJlOWRmMGRkZTE4OWI5MGJlYzU4N2Y", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-07T20:35:38Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-13T15:46:06Z"}, "message": "rename visit item-like methods\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "46ec1aef093ff11af1d3211fd3fe5ed642bb1d1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46ec1aef093ff11af1d3211fd3fe5ed642bb1d1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f975d0511690c1dabe2e9df0dde189b90bec587f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f975d0511690c1dabe2e9df0dde189b90bec587f", "html_url": "https://github.com/rust-lang/rust/commit/f975d0511690c1dabe2e9df0dde189b90bec587f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f975d0511690c1dabe2e9df0dde189b90bec587f/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e44078e9a12179b17a357da7e06c353036f68b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e44078e9a12179b17a357da7e06c353036f68b9", "html_url": "https://github.com/rust-lang/rust/commit/7e44078e9a12179b17a357da7e06c353036f68b9"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "1254d3a1618562b51787d667c6d2afada44dac21", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=f975d0511690c1dabe2e9df0dde189b90bec587f", "patch": "@@ -19,7 +19,7 @@\n //!    - Example: Examine each expression to look for its type and do some check or other.\n //!    - How: Implement `intravisit::Visitor` and override the `NestedFilter` type to\n //!      `nested_filter::OnlyBodies` (and implement `nested_visit_map`), and use\n-//!      `tcx.hir().visit_all_item_likes(&mut visitor)`. Within your\n+//!      `tcx.hir().deep_visit_all_item_likes(&mut visitor)`. Within your\n //!      `intravisit::Visitor` impl, implement methods like `visit_expr()` (don't forget to invoke\n //!      `intravisit::walk_expr()` to keep walking the subparts).\n //!    - Pro: Visitor methods for any kind of HIR node, not just item-like things."}, {"sha": "a89b9eafaa62d6e24825306622e6aeff2ed9c939", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=f975d0511690c1dabe2e9df0dde189b90bec587f", "patch": "@@ -75,7 +75,7 @@ pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n             let mut visitor =\n                 IfThisChanged { tcx, if_this_changed: vec![], then_this_would_need: vec![] };\n             visitor.process_attrs(hir::CRATE_HIR_ID);\n-            tcx.hir().visit_all_item_likes(&mut visitor);\n+            tcx.hir().deep_visit_all_item_likes(&mut visitor);\n             (visitor.if_this_changed, visitor.then_this_would_need)\n         };\n "}, {"sha": "ebf6a5521702b75a0c6ff85384d556bd63b151e9", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=f975d0511690c1dabe2e9df0dde189b90bec587f", "patch": "@@ -452,7 +452,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             return;\n         }\n \n-        self.tcx.hir().visit_all_item_likes(self);\n+        self.tcx.hir().deep_visit_all_item_likes(self);\n     }\n \n     fn encode_def_path_table(&mut self) {"}, {"sha": "b0a0131536bc0806a66dffa4943f6c0c743c0b53", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=f975d0511690c1dabe2e9df0dde189b90bec587f", "patch": "@@ -606,14 +606,14 @@ impl<'hir> Map<'hir> {\n     }\n \n     /// Visits all items in the crate in some deterministic (but\n-    /// unspecified) order. If you just need to process every item,\n-    /// but don't care about nesting, this method is the best choice.\n+    /// unspecified) order. If you need to process every item,\n+    /// and care about nesting -- usually because your algorithm\n+    /// follows lexical scoping rules -- then this method is the best choice.\n+    /// If you don't care about nesting, you should use the `tcx.hir_crate_items()` query\n+    /// or `items()` instead.\n     ///\n-    /// If you do care about nesting -- usually because your algorithm\n-    /// follows lexical scoping rules -- then you want a different\n-    /// approach. You should override `visit_nested_item` in your\n-    /// visitor and then call `intravisit::walk_crate` instead.\n-    pub fn visit_all_item_likes<V>(self, visitor: &mut V)\n+    /// Please see the notes in `intravisit.rs` for more information.\n+    pub fn deep_visit_all_item_likes<V>(self, visitor: &mut V)\n     where\n         V: Visitor<'hir>,\n     {\n@@ -646,7 +646,10 @@ impl<'hir> Map<'hir> {\n         })\n     }\n \n-    pub fn visit_item_likes_in_module<V>(self, module: LocalDefId, visitor: &mut V)\n+    /// If you don't care about nesting, you should use the\n+    /// `tcx.hir_module_items()` query or `module_items()` instead.\n+    /// Please see notes in `deep_visit_all_item_likes`.\n+    pub fn deep_visit_item_likes_in_module<V>(self, module: LocalDefId, visitor: &mut V)\n     where\n         V: Visitor<'hir>,\n     {"}, {"sha": "d08382700a80ab9d3a8827a251691f0785008429", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=f975d0511690c1dabe2e9df0dde189b90bec587f", "patch": "@@ -170,7 +170,7 @@ fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxIndexSet<LocalDefId> {\n             intravisit::walk_struct_def(self, v)\n         }\n     }\n-    tcx.hir().visit_all_item_likes(&mut GatherCtors { tcx, set: &mut set });\n+    tcx.hir().deep_visit_all_item_likes(&mut GatherCtors { tcx, set: &mut set });\n \n     set\n }"}, {"sha": "3aa1d5f20493d1f556dcb5bc2cd2a714ed66751e", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=f975d0511690c1dabe2e9df0dde189b90bec587f", "patch": "@@ -2384,7 +2384,7 @@ fn check_non_exported_macro_for_invalid_attrs(tcx: TyCtxt<'_>, item: &Item<'_>)\n \n fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     let check_attr_visitor = &mut CheckAttrVisitor { tcx };\n-    tcx.hir().visit_item_likes_in_module(module_def_id, check_attr_visitor);\n+    tcx.hir().deep_visit_item_likes_in_module(module_def_id, check_attr_visitor);\n     if module_def_id.is_top_level_module() {\n         check_attr_visitor.check_attributes(CRATE_HIR_ID, DUMMY_SP, Target::Mod, None);\n         check_invalid_crate_level_attr(tcx, tcx.hir().krate_attrs());"}, {"sha": "95f6f7ef864a210c9952954371b8ae2f43435507", "filename": "compiler/rustc_passes/src/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fintrinsicck.rs?ref=f975d0511690c1dabe2e9df0dde189b90bec587f", "patch": "@@ -17,7 +17,7 @@ use rustc_target::asm::{InlineAsmRegOrRegClass, InlineAsmType};\n use rustc_target::spec::abi::Abi::RustIntrinsic;\n \n fn check_mod_intrinsics(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().visit_item_likes_in_module(module_def_id, &mut ItemVisitor { tcx });\n+    tcx.hir().deep_visit_item_likes_in_module(module_def_id, &mut ItemVisitor { tcx });\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "ce5253adf10d83d6da4b53081237d7cf1d230fe1", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=f975d0511690c1dabe2e9df0dde189b90bec587f", "patch": "@@ -140,7 +140,7 @@ fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt<'_>) -> String {\n }\n \n fn check_mod_liveness(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().visit_item_likes_in_module(module_def_id, &mut IrMaps::new(tcx));\n+    tcx.hir().deep_visit_item_likes_in_module(module_def_id, &mut IrMaps::new(tcx));\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "e0dac09870df74637365e5d8c607241d66c05889", "filename": "compiler/rustc_passes/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Floops.rs?ref=f975d0511690c1dabe2e9df0dde189b90bec587f", "patch": "@@ -31,7 +31,7 @@ struct CheckLoopVisitor<'a, 'hir> {\n }\n \n fn check_mod_loops(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().visit_item_likes_in_module(\n+    tcx.hir().deep_visit_item_likes_in_module(\n         module_def_id,\n         &mut CheckLoopVisitor { sess: &tcx.sess, hir_map: tcx.hir(), cx: Normal },\n     );"}, {"sha": "5d7768c8240def357cffa30570cafbd93c2363e7", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=f975d0511690c1dabe2e9df0dde189b90bec587f", "patch": "@@ -14,7 +14,7 @@ use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n \n fn check_mod_naked_functions(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckNakedFunctions { tcx });\n+    tcx.hir().deep_visit_item_likes_in_module(module_def_id, &mut CheckNakedFunctions { tcx });\n }\n \n crate fn provide(providers: &mut Providers) {"}, {"sha": "58195fce281975b5e0245c204214c6e5cbc955a0", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=f975d0511690c1dabe2e9df0dde189b90bec587f", "patch": "@@ -661,7 +661,7 @@ fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n /// Cross-references the feature names of unstable APIs with enabled\n /// features and possibly prints errors.\n fn check_mod_unstable_api_usage(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().visit_item_likes_in_module(module_def_id, &mut Checker { tcx });\n+    tcx.hir().deep_visit_item_likes_in_module(module_def_id, &mut Checker { tcx });\n }\n \n pub(crate) fn provide(providers: &mut Providers) {\n@@ -837,7 +837,7 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n         let mut missing = MissingStabilityAnnotations { tcx, access_levels };\n         missing.check_missing_stability(CRATE_DEF_ID, tcx.hir().span(CRATE_HIR_ID));\n         tcx.hir().walk_toplevel_module(&mut missing);\n-        tcx.hir().visit_all_item_likes(&mut missing);\n+        tcx.hir().deep_visit_all_item_likes(&mut missing);\n     }\n \n     let declared_lang_features = &tcx.features().declared_lang_features;"}, {"sha": "29134bd168cf9da95cde21ccc1dbce5c967ad13e", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f975d0511690c1dabe2e9df0dde189b90bec587f/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=f975d0511690c1dabe2e9df0dde189b90bec587f", "patch": "@@ -59,7 +59,7 @@ struct OnlySelfBounds(bool);\n // Main entry point\n \n fn collect_mod_item_types(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().visit_item_likes_in_module(module_def_id, &mut CollectItemTypesVisitor { tcx });\n+    tcx.hir().deep_visit_item_likes_in_module(module_def_id, &mut CollectItemTypesVisitor { tcx });\n }\n \n pub fn provide(providers: &mut Providers) {"}]}