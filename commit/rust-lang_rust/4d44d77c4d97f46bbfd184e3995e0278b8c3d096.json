{"sha": "4d44d77c4d97f46bbfd184e3995e0278b8c3d096", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNDRkNzdjNGQ5N2Y0NmJiZmQxODRlMzk5NWUwMjc4YjhjM2QwOTY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-14T07:44:33Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-14T07:48:13Z"}, "message": "Use default git pager instead of hard-coding `delta`", "tree": {"sha": "2d1638ce20ce6355f3430dd0cfc34a33c69eed6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d1638ce20ce6355f3430dd0cfc34a33c69eed6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d44d77c4d97f46bbfd184e3995e0278b8c3d096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d44d77c4d97f46bbfd184e3995e0278b8c3d096", "html_url": "https://github.com/rust-lang/rust/commit/4d44d77c4d97f46bbfd184e3995e0278b8c3d096", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d44d77c4d97f46bbfd184e3995e0278b8c3d096/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6e4a0ab63edb18d28e7de57b10e80f95ffd7666", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6e4a0ab63edb18d28e7de57b10e80f95ffd7666", "html_url": "https://github.com/rust-lang/rust/commit/e6e4a0ab63edb18d28e7de57b10e80f95ffd7666"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "46bf007c64956562dff8b8557c0b994dc7671d6a", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4d44d77c4d97f46bbfd184e3995e0278b8c3d096/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d44d77c4d97f46bbfd184e3995e0278b8c3d096/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=4d44d77c4d97f46bbfd184e3995e0278b8c3d096", "patch": "@@ -2358,6 +2358,7 @@ impl<'test> TestCx<'test> {\n         let suffix =\n             self.safe_revision().map_or(\"nightly\".into(), |path| path.to_owned() + \"-nightly\");\n         let compare_dir = output_base_dir(self.config, self.testpaths, Some(&suffix));\n+        // Don't give an error if the directory didn't already exist\n         let _ = fs::remove_dir_all(&compare_dir);\n         create_dir_all(&compare_dir).unwrap();\n \n@@ -2406,18 +2407,28 @@ impl<'test> TestCx<'test> {\n             self.fatal(\"failed to run tidy\");\n         }\n \n-        let has_delta = Command::new(\"delta\")\n-            .arg(\"--version\")\n-            .stdout(Stdio::null())\n-            .status()\n-            .map_or(false, |status| status.success());\n+        let pager = {\n+            let output = Command::new(\"git\").args(&[\"config\", \"--get\", \"core.pager\"]).output().ok();\n+            output.and_then(|out| {\n+                if out.status.success() {\n+                    Some(String::from_utf8(out.stdout).expect(\"invalid UTF8 in git pager\"))\n+                } else {\n+                    None\n+                }\n+            })\n+        };\n         let mut diff = Command::new(\"diff\");\n         diff.args(&[\"-u\", \"-r\"]).args(&[out_dir, &compare_dir]);\n \n-        let output = if has_delta {\n+        let output = if let Some(pager) = pager {\n             let diff_pid = diff.stdout(Stdio::piped()).spawn().expect(\"failed to run `diff`\");\n-            let output = Command::new(\"delta\")\n-                .arg(\"--paging=never\")\n+            let pager = pager.trim();\n+            if self.config.verbose {\n+                eprintln!(\"using pager {}\", pager);\n+            }\n+            let output = Command::new(pager)\n+                // disable paging; we want this to be non-interactive\n+                .env(\"PAGER\", \"\")\n                 .stdin(diff_pid.stdout.unwrap())\n                 // Capture output and print it explicitly so it will in turn be\n                 // captured by libtest.\n@@ -2426,7 +2437,10 @@ impl<'test> TestCx<'test> {\n             assert!(output.status.success());\n             output\n         } else {\n-            eprintln!(\"warning: `delta` not installed, falling back to `diff --color`\");\n+            eprintln!(\"warning: no pager configured, falling back to `diff --color`\");\n+            eprintln!(\n+                \"help: try configuring a git pager (e.g. `delta`) with `git config --global core.pager delta`\"\n+            );\n             let output = diff.arg(\"--color\").output().unwrap();\n             assert!(output.status.success() || output.status.code() == Some(1));\n             output"}]}