{"sha": "b0c703304204f21ab6964d4b37776e7e5015cf7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwYzcwMzMwNDIwNGYyMWFiNjk2NGQ0YjM3Nzc2ZTdlNTAxNWNmN2I=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-27T10:04:56Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-30T14:11:53Z"}, "message": "print enum variant fields in docs", "tree": {"sha": "1059eaffa3b554b210eb960222e77af17344cdcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1059eaffa3b554b210eb960222e77af17344cdcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0c703304204f21ab6964d4b37776e7e5015cf7b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXTEopAAoJEFbW7qD8Z6xGWAAP/j3YwPLMbzFjQRPKjiSqisCZ\n4hUa6iRlYZrWAqr0zwrveTqU7r4lBsTyaSQ2JpCB3U8FGSE4ZPbz2xAW/ksP1m6Y\n90Gx11cDn0kFLCT7KTTttiZl1OriFpDw8c05mk43VsVusK0I13Jgwz3lL/13mQVN\nbPg/CpB7UpHr1gGNQTwGjhSFYBFub7TFCPlAW0OoDxLdyAIVIhYAy4vohjXb3S64\ncohdt7MlDhWJGm96srN6ZSGSXmjb1QKFQ9nx/EeJ3CwqIdWIYHRo1mjqm/t7A1Ar\nenAtDKEX8YkcpwyL+fLZ9Q8YKgJHYIbrU6HDZqxCfuZ1FPT8yhze9Y/AOhcjPqjQ\nJZD5IycPDMQIYu8frwZsQdYIaq3eyFj96N9dYU9+sk2asHRR+GvCLW2uZCyET+XI\n8XkPTI7AsnNN6i28q4R3vE+xL/0Gp06gSQ2v+VQGhn8Fxtt76b3EFucGyPJRZGXd\nQTYpz9ZmpmzAcWzasMcpo6I2S4EfDq7XuCcMdhhsCf/YZh7ghNzb4MyLN+ohxPdU\n0j0TcY+ujAcEhiPTwN2vL0wU/i88BBRlVyy/r5mAAtLQNeAIDXs6Sik8L2N53ngy\nXTGGFe/ku4ilWs7EhutYt8wQsduUhb/e54qVVR5/cjt8NOtJwuK5vlvbKXLYvZfo\ntY2q64+7ND4v8fGhRxFn\n=oVVA\n-----END PGP SIGNATURE-----", "payload": "tree 1059eaffa3b554b210eb960222e77af17344cdcb\nparent dd6e8d45e183861d44ed91a99f0a50403b2776a3\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464343496 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464617513 +0200\n\nprint enum variant fields in docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0c703304204f21ab6964d4b37776e7e5015cf7b", "html_url": "https://github.com/rust-lang/rust/commit/b0c703304204f21ab6964d4b37776e7e5015cf7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0c703304204f21ab6964d4b37776e7e5015cf7b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd6e8d45e183861d44ed91a99f0a50403b2776a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd6e8d45e183861d44ed91a99f0a50403b2776a3", "html_url": "https://github.com/rust-lang/rust/commit/dd6e8d45e183861d44ed91a99f0a50403b2776a3"}], "stats": {"total": 105, "additions": 65, "deletions": 40}, "files": [{"sha": "a5449b748dd5e98c2434bb2d86774f21bd9a62d4", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0c703304204f21ab6964d4b37776e7e5015cf7b/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/b0c703304204f21ab6964d4b37776e7e5015cf7b/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=b0c703304204f21ab6964d4b37776e7e5015cf7b", "patch": "@@ -117,6 +117,7 @@\n from htmlentitydefs import entitydefs\n entitydefs['larrb'] = u'\\u21e4'\n entitydefs['rarrb'] = u'\\u21e5'\n+entitydefs['nbsp'] = ' '\n \n # \"void elements\" (no closing tag) from the HTML Standard section 12.1.2\n VOID_ELEMENTS = set(['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen',"}, {"sha": "92401a5c55ffd058c06c963648d2d9d1589b9f7d", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b0c703304204f21ab6964d4b37776e7e5015cf7b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0c703304204f21ab6964d4b37776e7e5015cf7b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=b0c703304204f21ab6964d4b37776e7e5015cf7b", "patch": "@@ -111,27 +111,27 @@ impl fmt::Display for clean::Generics {\n \n         for (i, life) in self.lifetimes.iter().enumerate() {\n             if i > 0 {\n-                f.write_str(\", \")?;\n+                f.write_str(\",&nbsp;\")?;\n             }\n             write!(f, \"{}\", *life)?;\n         }\n \n         if !self.type_params.is_empty() {\n             if !self.lifetimes.is_empty() {\n-                f.write_str(\", \")?;\n+                f.write_str(\",&nbsp;\")?;\n             }\n             for (i, tp) in self.type_params.iter().enumerate() {\n                 if i > 0 {\n-                    f.write_str(\", \")?\n+                    f.write_str(\",&nbsp;\")?\n                 }\n                 f.write_str(&tp.name)?;\n \n                 if !tp.bounds.is_empty() {\n-                    write!(f, \": {}\", TyParamBounds(&tp.bounds))?;\n+                    write!(f, \":&nbsp;{}\", TyParamBounds(&tp.bounds))?;\n                 }\n \n                 match tp.default {\n-                    Some(ref ty) => { write!(f, \" = {}\", ty)?; },\n+                    Some(ref ty) => { write!(f, \"&nbsp;=&nbsp;{}\", ty)?; },\n                     None => {}\n                 };\n             }\n@@ -229,21 +229,21 @@ impl fmt::Display for clean::PathParameters {\n                     let mut comma = false;\n                     for lifetime in lifetimes {\n                         if comma {\n-                            f.write_str(\", \")?;\n+                            f.write_str(\",&nbsp;\")?;\n                         }\n                         comma = true;\n                         write!(f, \"{}\", *lifetime)?;\n                     }\n                     for ty in types {\n                         if comma {\n-                            f.write_str(\", \")?;\n+                            f.write_str(\",&nbsp;\")?;\n                         }\n                         comma = true;\n                         write!(f, \"{}\", *ty)?;\n                     }\n                     for binding in bindings {\n                         if comma {\n-                            f.write_str(\", \")?;\n+                            f.write_str(\",&nbsp;\")?;\n                         }\n                         comma = true;\n                         write!(f, \"{}\", *binding)?;"}, {"sha": "396f71173f83451a24d43b3c071f06299dafe30f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 37, "deletions": 32, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/b0c703304204f21ab6964d4b37776e7e5015cf7b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0c703304204f21ab6964d4b37776e7e5015cf7b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b0c703304204f21ab6964d4b37776e7e5015cf7b", "patch": "@@ -2243,26 +2243,24 @@ fn item_struct(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     write!(w, \"</pre>\")?;\n \n     document(w, cx, it)?;\n-    let mut fields = s.fields.iter().filter(|f| {\n+    let mut fields = s.fields.iter().filter_map(|f| {\n         match f.inner {\n-            clean::StructFieldItem(..) => true,\n-            _ => false,\n+            clean::StructFieldItem(ref ty) => Some((f, ty)),\n+            _ => None,\n         }\n     }).peekable();\n     if let doctree::Plain = s.struct_type {\n         if fields.peek().is_some() {\n-            write!(w, \"<h2 class='fields'>Fields</h2>\\n<table>\")?;\n-            for field in fields {\n-                write!(w, \"<tr class='stab {stab}'>\n-                             <td id='{shortty}.{name}'>\\\n-                               <code>{name}</code></td><td>\",\n+            write!(w, \"<h2 class='fields'>Fields</h2>\")?;\n+            for (field, ty) in fields {\n+                write!(w, \"<span id='{shortty}.{name}'><code>{name}: {ty}</code></span>\n+                           <span class='stab {stab}'></span>\",\n                        shortty = ItemType::StructField,\n                        stab = field.stability_class(),\n-                       name = field.name.as_ref().unwrap())?;\n+                       name = field.name.as_ref().unwrap(),\n+                       ty = ty)?;\n                 document(w, cx, field)?;\n-                write!(w, \"</td></tr>\")?;\n             }\n-            write!(w, \"</table>\")?;\n         }\n     }\n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n@@ -2292,7 +2290,7 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                             write!(w, \"{}(\", name)?;\n                             for (i, ty) in tys.iter().enumerate() {\n                                 if i > 0 {\n-                                    write!(w, \", \")?\n+                                    write!(w, \",&nbsp;\")?\n                                 }\n                                 write!(w, \"{}\", *ty)?;\n                             }\n@@ -2324,40 +2322,47 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n     document(w, cx, it)?;\n     if !e.variants.is_empty() {\n-        write!(w, \"<h2 class='variants'>Variants</h2>\\n<table class='variants_table'>\")?;\n+        write!(w, \"<h2 class='variants'>Variants</h2>\\n\")?;\n         for variant in &e.variants {\n-            write!(w, \"<tr><td id='{shortty}.{name}'><code>{name}</code></td><td>\",\n+            write!(w, \"<span id='{shortty}.{name}' class='variant'><code>{name}\",\n                    shortty = ItemType::Variant,\n                    name = variant.name.as_ref().unwrap())?;\n+            if let clean::VariantItem(ref var) = variant.inner {\n+                if let clean::TupleVariant(ref tys) = var.kind {\n+                    write!(w, \"(\")?;\n+                    for (i, ty) in tys.iter().enumerate() {\n+                        if i > 0 {\n+                            write!(w, \",&nbsp;\")?;\n+                        }\n+                        write!(w, \"{}\", *ty)?;\n+                    }\n+                    write!(w, \")\")?;\n+                }\n+            }\n+            write!(w, \"</code></span>\")?;\n             document(w, cx, variant)?;\n \n             use clean::{Variant, StructVariant};\n             if let clean::VariantItem( Variant { kind: StructVariant(ref s) } ) = variant.inner {\n-                let fields = s.fields.iter().filter(|f| {\n-                    match f.inner {\n-                        clean::StructFieldItem(..) => true,\n-                        _ => false,\n-                    }\n-                });\n                 write!(w, \"<h3 class='fields'>Fields</h3>\\n\n                            <table>\")?;\n-                for field in fields {\n-                    write!(w, \"<tr><td \\\n-                               id='{shortty}.{v}.field.{f}'>\\\n-                               <code>{f}</code></td><td>\",\n-                           shortty = ItemType::Variant,\n-                           v = variant.name.as_ref().unwrap(),\n-                           f = field.name.as_ref().unwrap())?;\n-                    document(w, cx, field)?;\n-                    write!(w, \"</td></tr>\")?;\n+                for field in &s.fields {\n+                    use clean::StructFieldItem;\n+                    if let StructFieldItem(ref ty) = field.inner {\n+                        write!(w, \"<tr><td \\\n+                                   id='variant.{v}.field.{f}'>\\\n+                                   <code>{f}:&nbsp;{t}</code></td><td>\",\n+                               v = variant.name.as_ref().unwrap(),\n+                               f = field.name.as_ref().unwrap(),\n+                               t = *ty)?;\n+                        document(w, cx, field)?;\n+                        write!(w, \"</td></tr>\")?;\n+                    }\n                 }\n                 write!(w, \"</table>\")?;\n             }\n-            write!(w, \"</td><td>\")?;\n             render_stability_since(w, variant, it)?;\n-            write!(w, \"</td></tr>\")?;\n         }\n-        write!(w, \"</table>\")?;\n     }\n     render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)?;\n     Ok(())"}, {"sha": "bfe3f7b8dd69d9bc55440b8cea402d11a34ce51f", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b0c703304204f21ab6964d4b37776e7e5015cf7b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/b0c703304204f21ab6964d4b37776e7e5015cf7b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=b0c703304204f21ab6964d4b37776e7e5015cf7b", "patch": "@@ -265,6 +265,10 @@ nav.sub {\n .docblock h2 { font-size: 1.15em; }\n .docblock h3, .docblock h4, .docblock h5 { font-size: 1em; }\n \n+.docblock {\n+    margin-left: 24px;\n+}\n+\n .content .out-of-band {\n     font-size: 23px;\n     margin: 0px;\n@@ -640,6 +644,21 @@ span.since {\n     margin-right: 5px;\n }\n \n+.enum > .toggle-wrapper > .collapse-toggle, .struct > .toggle-wrapper > .collapse-toggle {\n+    left: 0;\n+    margin-top: 5px;\n+}\n+\n+.enum > .toggle-wrapper + .docblock, .struct > .toggle-wrapper + .docblock {\n+    margin-left: 30px;\n+    margin-bottom: 20px;\n+    margin-top: 5px;\n+}\n+\n+.enum > .collapsed, .struct > .collapsed {\n+    margin-bottom: 25px;\n+}\n+\n :target > code {\n    background: #FDFFD3;\n }"}]}