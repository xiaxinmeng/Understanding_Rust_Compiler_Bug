{"sha": "1e435e332efcd9230255c6fba960c7db23d641d2", "node_id": "C_kwDOAAsO6NoAKDFlNDM1ZTMzMmVmY2Q5MjMwMjU1YzZmYmE5NjBjN2RiMjNkNjQxZDI", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-21T18:27:58Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-22T19:21:26Z"}, "message": "Use revisions for NLL in const-generics and match", "tree": {"sha": "39da1469c3a0163ee0cb4e5827255ee2dcfbcfa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39da1469c3a0163ee0cb4e5827255ee2dcfbcfa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e435e332efcd9230255c6fba960c7db23d641d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e435e332efcd9230255c6fba960c7db23d641d2", "html_url": "https://github.com/rust-lang/rust/commit/1e435e332efcd9230255c6fba960c7db23d641d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e435e332efcd9230255c6fba960c7db23d641d2/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1a7f9ab40ba4fe063cfedbd67e8828a880c5ffc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1a7f9ab40ba4fe063cfedbd67e8828a880c5ffc", "html_url": "https://github.com/rust-lang/rust/commit/f1a7f9ab40ba4fe063cfedbd67e8828a880c5ffc"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "255900e19bb4b932bc182a4b8dd276ae1a3f6759", "filename": "src/test/ui/const-generics/invariant.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e435e332efcd9230255c6fba960c7db23d641d2/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e435e332efcd9230255c6fba960c7db23d641d2/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.base.stderr?ref=1e435e332efcd9230255c6fba960c7db23d641d2", "patch": "@@ -1,5 +1,5 @@\n warning: conflicting implementations of trait `SadBee` for type `for<'a> fn(&'a ())`\n-  --> $DIR/invariant.rs:14:1\n+  --> $DIR/invariant.rs:18:1\n    |\n LL | impl SadBee for for<'a> fn(&'a ()) {\n    | ---------------------------------- first implementation here\n@@ -13,7 +13,7 @@ LL | impl SadBee for fn(&'static ()) {\n    = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n \n error[E0308]: mismatched types\n-  --> $DIR/invariant.rs:27:5\n+  --> $DIR/invariant.rs:31:5\n    |\n LL |     v\n    |     ^ one type is more general than the other", "previous_filename": "src/test/ui/const-generics/invariant.stderr"}, {"sha": "f684f7fddc8f51e15dffc30b31a7f30f476526de", "filename": "src/test/ui/const-generics/invariant.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e435e332efcd9230255c6fba960c7db23d641d2/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e435e332efcd9230255c6fba960c7db23d641d2/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.nll.stderr?ref=1e435e332efcd9230255c6fba960c7db23d641d2", "patch": "@@ -1,5 +1,5 @@\n warning: conflicting implementations of trait `SadBee` for type `for<'a> fn(&'a ())`\n-  --> $DIR/invariant.rs:14:1\n+  --> $DIR/invariant.rs:18:1\n    |\n LL | impl SadBee for for<'a> fn(&'a ()) {\n    | ---------------------------------- first implementation here\n@@ -13,7 +13,7 @@ LL | impl SadBee for fn(&'static ()) {\n    = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n \n error[E0308]: mismatched types\n-  --> $DIR/invariant.rs:27:5\n+  --> $DIR/invariant.rs:31:5\n    |\n LL |     v\n    |     ^ one type is more general than the other"}, {"sha": "65d1ee9420c3df832c67ffffc41d942c609b0d67", "filename": "src/test/ui/const-generics/invariant.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e435e332efcd9230255c6fba960c7db23d641d2/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e435e332efcd9230255c6fba960c7db23d641d2/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvariant.rs?ref=1e435e332efcd9230255c6fba960c7db23d641d2", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n use std::marker::PhantomData;"}, {"sha": "060c8237974846fdbb39d9ab91355f4596ad610f", "filename": "src/test/ui/match/match-ref-mut-invariance.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e435e332efcd9230255c6fba960c7db23d641d2/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e435e332efcd9230255c6fba960c7db23d641d2/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.base.stderr?ref=1e435e332efcd9230255c6fba960c7db23d641d2", "patch": "@@ -1,18 +1,18 @@\n error[E0308]: mismatched types\n-  --> $DIR/match-ref-mut-invariance.rs:10:37\n+  --> $DIR/match-ref-mut-invariance.rs:14:37\n    |\n LL |         match self.0 { ref mut x => x }\n    |                                     ^ lifetime mismatch\n    |\n    = note: expected mutable reference `&'a mut &'a i32`\n               found mutable reference `&'a mut &'b i32`\n note: the lifetime `'a` as defined here...\n-  --> $DIR/match-ref-mut-invariance.rs:9:12\n+  --> $DIR/match-ref-mut-invariance.rs:13:12\n    |\n LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n    |            ^^\n note: ...does not necessarily outlive the lifetime `'b` as defined here\n-  --> $DIR/match-ref-mut-invariance.rs:8:6\n+  --> $DIR/match-ref-mut-invariance.rs:12:6\n    |\n LL | impl<'b> S<'b> {\n    |      ^^", "previous_filename": "src/test/ui/match/match-ref-mut-invariance.stderr"}, {"sha": "b98539d91b695917348019e48574b4202db9a35e", "filename": "src/test/ui/match/match-ref-mut-invariance.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e435e332efcd9230255c6fba960c7db23d641d2/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e435e332efcd9230255c6fba960c7db23d641d2/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr?ref=1e435e332efcd9230255c6fba960c7db23d641d2", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/match-ref-mut-invariance.rs:10:9\n+  --> $DIR/match-ref-mut-invariance.rs:14:9\n    |\n LL | impl<'b> S<'b> {\n    |      -- lifetime `'b` defined here"}, {"sha": "f876a4e2498feee0983f459e080322321929d2b5", "filename": "src/test/ui/match/match-ref-mut-invariance.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e435e332efcd9230255c6fba960c7db23d641d2/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e435e332efcd9230255c6fba960c7db23d641d2/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.rs?ref=1e435e332efcd9230255c6fba960c7db23d641d2", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n // Check that when making a ref mut binding with type `&mut T`, the\n // type `T` must match precisely the type `U` of the value being\n // matched, and in particular cannot be some supertype of `U`. Issue\n@@ -7,7 +11,9 @@\n struct S<'b>(&'b i32);\n impl<'b> S<'b> {\n     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n-        match self.0 { ref mut x => x } //~ ERROR mismatched types\n+        match self.0 { ref mut x => x }\n+        //[base]~^ ERROR mismatched types\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "7b6dd5af539ef9183e4a09d70997c72f174534d4", "filename": "src/test/ui/match/match-ref-mut-let-invariance.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e435e332efcd9230255c6fba960c7db23d641d2/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e435e332efcd9230255c6fba960c7db23d641d2/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.base.stderr?ref=1e435e332efcd9230255c6fba960c7db23d641d2", "patch": "@@ -1,18 +1,18 @@\n error[E0308]: mismatched types\n-  --> $DIR/match-ref-mut-let-invariance.rs:11:9\n+  --> $DIR/match-ref-mut-let-invariance.rs:15:9\n    |\n LL |         x\n    |         ^ lifetime mismatch\n    |\n    = note: expected mutable reference `&'a mut &'a i32`\n               found mutable reference `&'a mut &'b i32`\n note: the lifetime `'a` as defined here...\n-  --> $DIR/match-ref-mut-let-invariance.rs:9:12\n+  --> $DIR/match-ref-mut-let-invariance.rs:13:12\n    |\n LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n    |            ^^\n note: ...does not necessarily outlive the lifetime `'b` as defined here\n-  --> $DIR/match-ref-mut-let-invariance.rs:8:6\n+  --> $DIR/match-ref-mut-let-invariance.rs:12:6\n    |\n LL | impl<'b> S<'b> {\n    |      ^^", "previous_filename": "src/test/ui/match/match-ref-mut-let-invariance.stderr"}, {"sha": "4b8bdd157c204fc4ca7a0f9275141226ef33ca0d", "filename": "src/test/ui/match/match-ref-mut-let-invariance.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e435e332efcd9230255c6fba960c7db23d641d2/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e435e332efcd9230255c6fba960c7db23d641d2/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr?ref=1e435e332efcd9230255c6fba960c7db23d641d2", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/match-ref-mut-let-invariance.rs:11:9\n+  --> $DIR/match-ref-mut-let-invariance.rs:15:9\n    |\n LL | impl<'b> S<'b> {\n    |      -- lifetime `'b` defined here"}, {"sha": "0a8daed569ff7bb38387d4651c157089a002b441", "filename": "src/test/ui/match/match-ref-mut-let-invariance.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e435e332efcd9230255c6fba960c7db23d641d2/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e435e332efcd9230255c6fba960c7db23d641d2/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.rs?ref=1e435e332efcd9230255c6fba960c7db23d641d2", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n // Check that when making a ref mut binding with type `&mut T`, the\n // type `T` must match precisely the type `U` of the value being\n // matched, and in particular cannot be some supertype of `U`. Issue\n@@ -8,7 +12,9 @@ struct S<'b>(&'b i32);\n impl<'b> S<'b> {\n     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n         let ref mut x = self.0;\n-        x //~ ERROR mismatched types\n+        x\n+        //[base]~^ ERROR mismatched types\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n "}]}