{"sha": "8179b2e5f8ab3524aa7860d8b34897949dde4b65", "node_id": "C_kwDOAAsO6NoAKDgxNzliMmU1ZjhhYjM1MjRhYTc4NjBkOGIzNDg5Nzk0OWRkZTRiNjU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-08T14:41:37Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-08T14:42:21Z"}, "message": "Remove useless parameter to operand_from_scalar.", "tree": {"sha": "8be9cda7d5d8bbc0d790197cda101ffd835ebb9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8be9cda7d5d8bbc0d790197cda101ffd835ebb9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8179b2e5f8ab3524aa7860d8b34897949dde4b65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8179b2e5f8ab3524aa7860d8b34897949dde4b65", "html_url": "https://github.com/rust-lang/rust/commit/8179b2e5f8ab3524aa7860d8b34897949dde4b65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8179b2e5f8ab3524aa7860d8b34897949dde4b65/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d94ec3091ecc663ef30f288ac859694e2512f31b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d94ec3091ecc663ef30f288ac859694e2512f31b", "html_url": "https://github.com/rust-lang/rust/commit/d94ec3091ecc663ef30f288ac859694e2512f31b"}], "stats": {"total": 19, "additions": 5, "deletions": 14}, "files": [{"sha": "6c5202549ead448b64751635719d0e85689025c9", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8179b2e5f8ab3524aa7860d8b34897949dde4b65/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8179b2e5f8ab3524aa7860d8b34897949dde4b65/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=8179b2e5f8ab3524aa7860d8b34897949dde4b65", "patch": "@@ -458,11 +458,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                         scalar,\n                     )) = *value\n                     {\n-                        *operand = self.operand_from_scalar(\n-                            scalar,\n-                            value.layout.ty,\n-                            DUMMY_SP,\n-                        );\n+                        *operand = self.operand_from_scalar(scalar, value.layout.ty);\n                     }\n                 }\n             }\n@@ -587,9 +583,9 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n \n     /// Creates a new `Operand::Constant` from a `Scalar` value\n-    fn operand_from_scalar(&self, scalar: Scalar, ty: Ty<'tcx>, span: Span) -> Operand<'tcx> {\n+    fn operand_from_scalar(&self, scalar: Scalar, ty: Ty<'tcx>) -> Operand<'tcx> {\n         Operand::Constant(Box::new(Constant {\n-            span,\n+            span: DUMMY_SP,\n             user_ty: None,\n             literal: ConstantKind::from_scalar(self.tcx, scalar, ty),\n         }))\n@@ -634,8 +630,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         if let Some(Right(imm)) = imm {\n             match *imm {\n                 interpret::Immediate::Scalar(scalar) => {\n-                    *rval =\n-                        Rvalue::Use(self.operand_from_scalar(scalar, value.layout.ty, DUMMY_SP));\n+                    *rval = Rvalue::Use(self.operand_from_scalar(scalar, value.layout.ty));\n                 }\n                 Immediate::ScalarPair(..) => {\n                     // Found a value represented as a pair. For now only do const-prop if the type\n@@ -933,11 +928,7 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n                     && self.should_const_prop(value)\n                 {\n                     trace!(\"assertion on {:?} should be {:?}\", value, expected);\n-                    *cond = self.operand_from_scalar(\n-                        value_const,\n-                        self.tcx.types.bool,\n-                        DUMMY_SP,\n-                    );\n+                    *cond = self.operand_from_scalar(value_const, self.tcx.types.bool);\n                 }\n             }\n             TerminatorKind::SwitchInt { ref mut discr, .. } => {"}]}