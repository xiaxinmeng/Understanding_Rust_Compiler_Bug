{"sha": "a0e123eb6e2c0a971dd4e9e2c49e2ceed0d73672", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZTEyM2ViNmUyYzBhOTcxZGQ0ZTllMmM0OWUyY2VlZDBkNzM2NzI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-12T04:51:13Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-13T01:54:13Z"}, "message": "syntax: add #[deriving(Default)] syntax extension", "tree": {"sha": "eb7e9454e47fb5a582cc739e25b676f46cf44ae1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb7e9454e47fb5a582cc739e25b676f46cf44ae1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0e123eb6e2c0a971dd4e9e2c49e2ceed0d73672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e123eb6e2c0a971dd4e9e2c49e2ceed0d73672", "html_url": "https://github.com/rust-lang/rust/commit/a0e123eb6e2c0a971dd4e9e2c49e2ceed0d73672", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0e123eb6e2c0a971dd4e9e2c49e2ceed0d73672/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca47eebb44431c1ded5cc5c412d95210f3955ef4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca47eebb44431c1ded5cc5c412d95210f3955ef4", "html_url": "https://github.com/rust-lang/rust/commit/ca47eebb44431c1ded5cc5c412d95210f3955ef4"}], "stats": {"total": 125, "additions": 123, "deletions": 2}, "files": [{"sha": "2811b939cc21dab875248eb7d4bf79dbc987b802", "filename": "src/libextra/glob.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a0e123eb6e2c0a971dd4e9e2c49e2ceed0d73672/src%2Flibextra%2Fglob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e123eb6e2c0a971dd4e9e2c49e2ceed0d73672/src%2Flibextra%2Fglob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fglob.rs?ref=a0e123eb6e2c0a971dd4e9e2c49e2ceed0d73672", "patch": "@@ -137,7 +137,17 @@ fn list_dir_sorted(path: &Path) -> ~[Path] {\n /**\n  * A compiled Unix shell style pattern.\n  */\n-#[deriving(Clone, Eq, TotalEq, Ord, TotalOrd, IterBytes, Zero)]\n+#[cfg(stage0)]\n+#[deriving(Clone, Eq, TotalEq, Ord, TotalOrd, IterBytes)]\n+pub struct Pattern {\n+    priv tokens: ~[PatternToken]\n+}\n+\n+/**\n+ * A compiled Unix shell style pattern.\n+ */\n+#[cfg(not(stage0))]\n+#[deriving(Clone, Eq, TotalEq, Ord, TotalOrd, IterBytes, Default)]\n pub struct Pattern {\n     priv tokens: ~[PatternToken]\n }\n@@ -458,7 +468,37 @@ fn is_sep(c: char) -> bool {\n /**\n  * Configuration options to modify the behaviour of `Pattern::matches_with(..)`\n  */\n-#[deriving(Clone, Eq, TotalEq, Ord, TotalOrd, IterBytes, Zero)]\n+#[cfg(stage0)]\n+#[deriving(Clone, Eq, TotalEq, Ord, TotalOrd, IterBytes)]\n+pub struct MatchOptions {\n+\n+    /**\n+     * Whether or not patterns should be matched in a case-sensitive manner. This\n+     * currently only considers upper/lower case relationships between ASCII characters,\n+     * but in future this might be extended to work with Unicode.\n+     */\n+    case_sensitive: bool,\n+\n+    /**\n+     * If this is true then path-component separator characters (e.g. `/` on Posix)\n+     * must be matched by a literal `/`, rather than by `*` or `?` or `[...]`\n+     */\n+    require_literal_separator: bool,\n+\n+    /**\n+     * If this is true then paths that contain components that start with a `.` will\n+     * not match unless the `.` appears literally in the pattern: `*`, `?` or `[...]`\n+     * will not match. This is useful because such files are conventionally considered\n+     * hidden on Unix systems and it might be desirable to skip them when listing files.\n+     */\n+    require_literal_leading_dot: bool\n+}\n+\n+/**\n+ * Configuration options to modify the behaviour of `Pattern::matches_with(..)`\n+ */\n+#[cfg(not(stage0))]\n+#[deriving(Clone, Eq, TotalEq, Ord, TotalOrd, IterBytes, Default)]\n pub struct MatchOptions {\n \n     /**"}, {"sha": "0c7bbefc690157138e7173f0222baa09a241d178", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/a0e123eb6e2c0a971dd4e9e2c49e2ceed0d73672/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e123eb6e2c0a971dd4e9e2c49e2ceed0d73672/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=a0e123eb6e2c0a971dd4e9e2c49e2ceed0d73672", "patch": "@@ -0,0 +1,79 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use ast::{MetaItem, item, Expr};\n+use codemap::Span;\n+use ext::base::ExtCtxt;\n+use ext::build::AstBuilder;\n+use ext::deriving::generic::*;\n+\n+use std::vec;\n+\n+pub fn expand_deriving_default(cx: @ExtCtxt,\n+                            span: Span,\n+                            mitem: @MetaItem,\n+                            in_items: ~[@item])\n+    -> ~[@item] {\n+    let trait_def = TraitDef {\n+        path: Path::new(~[\"std\", \"default\", \"Default\"]),\n+        additional_bounds: ~[],\n+        generics: LifetimeBounds::empty(),\n+        methods: ~[\n+            MethodDef {\n+                name: \"default\",\n+                generics: LifetimeBounds::empty(),\n+                explicit_self: None,\n+                args: ~[],\n+                ret_ty: Self,\n+                const_nonmatching: false,\n+                combine_substructure: default_substructure\n+            },\n+        ]\n+    };\n+    trait_def.expand(cx, span, mitem, in_items)\n+}\n+\n+fn default_substructure(cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n+    let default_ident = ~[\n+        cx.ident_of(\"std\"),\n+        cx.ident_of(\"default\"),\n+        cx.ident_of(\"Default\"),\n+        cx.ident_of(\"default\")\n+    ];\n+    let default_call = || {\n+        cx.expr_call_global(span, default_ident.clone(), ~[])\n+    };\n+\n+    return match *substr.fields {\n+        StaticStruct(_, ref summary) => {\n+            match *summary {\n+                Left(count) => {\n+                    if count == 0 {\n+                        cx.expr_ident(span, substr.type_ident)\n+                    } else {\n+                        let exprs = vec::from_fn(count, |_| default_call());\n+                        cx.expr_call_ident(span, substr.type_ident, exprs)\n+                    }\n+                }\n+                Right(ref fields) => {\n+                    let default_fields = do fields.map |ident| {\n+                        cx.field_imm(span, *ident, default_call())\n+                    };\n+                    cx.expr_struct_ident(span, substr.type_ident, default_fields)\n+                }\n+            }\n+        }\n+        StaticEnum(*) => {\n+            cx.span_fatal(span, \"`Default` cannot be derived for enums, \\\n+                                 only structs\")\n+        }\n+        _ => cx.bug(\"Non-static method in `deriving(Default)`\")\n+    };\n+}"}, {"sha": "dfd4f79cd9e3e5a2c5055853230556a080a1ef45", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0e123eb6e2c0a971dd4e9e2c49e2ceed0d73672/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e123eb6e2c0a971dd4e9e2c49e2ceed0d73672/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=a0e123eb6e2c0a971dd4e9e2c49e2ceed0d73672", "patch": "@@ -31,6 +31,7 @@ pub mod decodable;\n pub mod rand;\n pub mod to_str;\n pub mod zero;\n+pub mod default;\n \n #[path=\"cmp/eq.rs\"]\n pub mod eq;\n@@ -97,6 +98,7 @@ pub fn expand_meta_deriving(cx: @ExtCtxt,\n \n                             \"ToStr\" => expand!(to_str::expand_deriving_to_str),\n                             \"Zero\" => expand!(zero::expand_deriving_zero),\n+                            \"Default\" => expand!(default::expand_deriving_default),\n \n                             ref tname => {\n                                 cx.span_err(titem.span, fmt!(\"unknown \\"}]}