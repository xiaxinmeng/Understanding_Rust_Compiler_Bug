{"sha": "71ecf5d359bf750cc171e124779a46985633439d", "node_id": "C_kwDOAAsO6NoAKDcxZWNmNWQzNTliZjc1MGNjMTcxZTEyNDc3OWE0Njk4NTYzMzQzOWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-18T23:53:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-18T23:53:22Z"}, "message": "Auto merge of #98851 - klensy:encode_symbols, r=cjgillot\n\nrustc_metadata: dedupe strings to prevent multiple copies in rmeta/query cache blow file size\n\nr? `@cjgillot`\n\nEncodes strings in rmeta/query cache so duplicated ones will be encoded as offsets to first strings, reducing file size.", "tree": {"sha": "d0c3e7aeea857d9dfddc1456d714b87c26750c9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0c3e7aeea857d9dfddc1456d714b87c26750c9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71ecf5d359bf750cc171e124779a46985633439d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71ecf5d359bf750cc171e124779a46985633439d", "html_url": "https://github.com/rust-lang/rust/commit/71ecf5d359bf750cc171e124779a46985633439d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71ecf5d359bf750cc171e124779a46985633439d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b79f758c9aa6646606662a6d623a0752286cd17", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b79f758c9aa6646606662a6d623a0752286cd17", "html_url": "https://github.com/rust-lang/rust/commit/0b79f758c9aa6646606662a6d623a0752286cd17"}, {"sha": "adba4691f6577b35b2d48ebbe6c8e993eea09978", "url": "https://api.github.com/repos/rust-lang/rust/commits/adba4691f6577b35b2d48ebbe6c8e993eea09978", "html_url": "https://github.com/rust-lang/rust/commit/adba4691f6577b35b2d48ebbe6c8e993eea09978"}], "stats": {"total": 116, "additions": 113, "deletions": 3}, "files": [{"sha": "b0d9e4a63f5640707da0f180ca01126bd4aec31c", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/71ecf5d359bf750cc171e124779a46985633439d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ecf5d359bf750cc171e124779a46985633439d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=71ecf5d359bf750cc171e124779a46985633439d", "patch": "@@ -637,6 +637,35 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {\n     }\n }\n \n+impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Symbol {\n+    fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {\n+        let tag = d.read_u8();\n+\n+        match tag {\n+            SYMBOL_STR => {\n+                let s = d.read_str();\n+                Symbol::intern(s)\n+            }\n+            SYMBOL_OFFSET => {\n+                // read str offset\n+                let pos = d.read_usize();\n+                let old_pos = d.opaque.position();\n+\n+                // move to str ofset and read\n+                d.opaque.set_position(pos);\n+                let s = d.read_str();\n+                let sym = Symbol::intern(s);\n+\n+                // restore position\n+                d.opaque.set_position(old_pos);\n+\n+                sym\n+            }\n+            _ => unreachable!(),\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [ty::abstract_const::Node<'tcx>] {\n     fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {\n         ty::codec::RefDecodable::decode(d)"}, {"sha": "13436af09b7efa5bf6a69a2b8322cc122afb7b9f", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/71ecf5d359bf750cc171e124779a46985633439d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ecf5d359bf750cc171e124779a46985633439d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=71ecf5d359bf750cc171e124779a46985633439d", "patch": "@@ -39,6 +39,7 @@ use rustc_span::{\n };\n use rustc_target::abi::VariantIdx;\n use std::borrow::Borrow;\n+use std::collections::hash_map::Entry;\n use std::hash::Hash;\n use std::io::{Read, Seek, Write};\n use std::iter;\n@@ -75,6 +76,7 @@ pub(super) struct EncodeContext<'a, 'tcx> {\n     required_source_files: Option<GrowableBitSet<usize>>,\n     is_proc_macro: bool,\n     hygiene_ctxt: &'a HygieneEncodeContext,\n+    symbol_table: FxHashMap<Symbol, usize>,\n }\n \n /// If the current crate is a proc-macro, returns early with `Lazy:empty()`.\n@@ -307,6 +309,24 @@ impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for Span {\n     }\n }\n \n+impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for Symbol {\n+    fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) {\n+        match s.symbol_table.entry(*self) {\n+            Entry::Vacant(o) => {\n+                s.opaque.emit_u8(SYMBOL_STR);\n+                let pos = s.opaque.position();\n+                o.insert(pos);\n+                s.emit_str(self.as_str());\n+            }\n+            Entry::Occupied(o) => {\n+                let x = o.get().clone();\n+                s.emit_u8(SYMBOL_OFFSET);\n+                s.emit_usize(x);\n+            }\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx> TyEncoder for EncodeContext<'a, 'tcx> {\n     const CLEAR_CROSS_CRATE: bool = true;\n \n@@ -2259,6 +2279,7 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>, path: &Path) {\n         required_source_files,\n         is_proc_macro: tcx.sess.crate_types().contains(&CrateType::ProcMacro),\n         hygiene_ctxt: &hygiene_ctxt,\n+        symbol_table: Default::default(),\n     };\n \n     // Encode the rustc version string in a predictable location."}, {"sha": "2bdb1feb6776b6c8066c8cc4a208cfa94a13e428", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71ecf5d359bf750cc171e124779a46985633439d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ecf5d359bf750cc171e124779a46985633439d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=71ecf5d359bf750cc171e124779a46985633439d", "patch": "@@ -445,6 +445,10 @@ const TAG_VALID_SPAN_LOCAL: u8 = 0;\n const TAG_VALID_SPAN_FOREIGN: u8 = 1;\n const TAG_PARTIAL_SPAN: u8 = 2;\n \n+// Tags for encoding Symbol's\n+const SYMBOL_STR: u8 = 0;\n+const SYMBOL_OFFSET: u8 = 1;\n+\n pub fn provide(providers: &mut Providers) {\n     encoder::provide(providers);\n     decoder::provide(providers);"}, {"sha": "6711dd3d5c5e7d439a399de1868c52fb19de04c4", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/71ecf5d359bf750cc171e124779a46985633439d/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ecf5d359bf750cc171e124779a46985633439d/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=71ecf5d359bf750cc171e124779a46985633439d", "patch": "@@ -22,8 +22,9 @@ use rustc_span::hygiene::{\n     ExpnId, HygieneDecodeContext, HygieneEncodeContext, SyntaxContext, SyntaxContextData,\n };\n use rustc_span::source_map::{SourceMap, StableSourceFileId};\n-use rustc_span::CachingSourceMapView;\n use rustc_span::{BytePos, ExpnData, ExpnHash, Pos, SourceFile, Span};\n+use rustc_span::{CachingSourceMapView, Symbol};\n+use std::collections::hash_map::Entry;\n use std::io;\n use std::mem;\n \n@@ -38,6 +39,10 @@ const TAG_RELATIVE_SPAN: u8 = 2;\n const TAG_SYNTAX_CONTEXT: u8 = 0;\n const TAG_EXPN_DATA: u8 = 1;\n \n+// Tags for encoding Symbol's\n+const SYMBOL_STR: u8 = 0;\n+const SYMBOL_OFFSET: u8 = 1;\n+\n /// Provides an interface to incremental compilation data cached from the\n /// previous compilation session. This data will eventually include the results\n /// of a few selected queries (like `typeck` and `mir_optimized`) and\n@@ -254,6 +259,7 @@ impl<'sess> rustc_middle::ty::OnDiskCache<'sess> for OnDiskCache<'sess> {\n                 source_map: CachingSourceMapView::new(tcx.sess.source_map()),\n                 file_to_file_index,\n                 hygiene_context: &hygiene_encode_context,\n+                symbol_table: Default::default(),\n             };\n \n             // Encode query results.\n@@ -714,6 +720,36 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for Span {\n     }\n }\n \n+// copy&paste impl from rustc_metadata\n+impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for Symbol {\n+    fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Self {\n+        let tag = d.read_u8();\n+\n+        match tag {\n+            SYMBOL_STR => {\n+                let s = d.read_str();\n+                Symbol::intern(s)\n+            }\n+            SYMBOL_OFFSET => {\n+                // read str offset\n+                let pos = d.read_usize();\n+                let old_pos = d.opaque.position();\n+\n+                // move to str ofset and read\n+                d.opaque.set_position(pos);\n+                let s = d.read_str();\n+                let sym = Symbol::intern(s);\n+\n+                // restore position\n+                d.opaque.set_position(old_pos);\n+\n+                sym\n+            }\n+            _ => unreachable!(),\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for CrateNum {\n     fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Self {\n         let stable_id = StableCrateId::decode(d);\n@@ -815,6 +851,7 @@ pub struct CacheEncoder<'a, 'tcx> {\n     source_map: CachingSourceMapView<'tcx>,\n     file_to_file_index: FxHashMap<*const SourceFile, SourceFileIndex>,\n     hygiene_context: &'a HygieneEncodeContext,\n+    symbol_table: FxHashMap<Symbol, usize>,\n }\n \n impl<'a, 'tcx> CacheEncoder<'a, 'tcx> {\n@@ -899,6 +936,25 @@ impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx>> for Span {\n     }\n }\n \n+// copy&paste impl from rustc_metadata\n+impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx>> for Symbol {\n+    fn encode(&self, s: &mut CacheEncoder<'a, 'tcx>) {\n+        match s.symbol_table.entry(*self) {\n+            Entry::Vacant(o) => {\n+                s.encoder.emit_u8(SYMBOL_STR);\n+                let pos = s.encoder.position();\n+                o.insert(pos);\n+                s.emit_str(self.as_str());\n+            }\n+            Entry::Occupied(o) => {\n+                let x = o.get().clone();\n+                s.emit_u8(SYMBOL_OFFSET);\n+                s.emit_usize(x);\n+            }\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx> TyEncoder for CacheEncoder<'a, 'tcx> {\n     type I = TyCtxt<'tcx>;\n     const CLEAR_CROSS_CRATE: bool = false;"}, {"sha": "156f53ac48626c80d992d62ec5f7d3f10e302093", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71ecf5d359bf750cc171e124779a46985633439d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ecf5d359bf750cc171e124779a46985633439d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=71ecf5d359bf750cc171e124779a46985633439d", "patch": "@@ -1852,14 +1852,14 @@ impl fmt::Display for Symbol {\n }\n \n impl<S: Encoder> Encodable<S> for Symbol {\n-    fn encode(&self, s: &mut S) {\n+    default fn encode(&self, s: &mut S) {\n         s.emit_str(self.as_str());\n     }\n }\n \n impl<D: Decoder> Decodable<D> for Symbol {\n     #[inline]\n-    fn decode(d: &mut D) -> Symbol {\n+    default fn decode(d: &mut D) -> Symbol {\n         Symbol::intern(&d.read_str())\n     }\n }"}]}