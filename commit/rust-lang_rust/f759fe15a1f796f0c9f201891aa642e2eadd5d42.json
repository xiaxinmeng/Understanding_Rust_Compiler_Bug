{"sha": "f759fe15a1f796f0c9f201891aa642e2eadd5d42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NTlmZTE1YTFmNzk2ZjBjOWYyMDE4OTFhYTY0MmUyZWFkZDVkNDI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T02:00:29Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:34Z"}, "message": "librustc: De-`@mut` `cleanup_scopes` in the region maps", "tree": {"sha": "b51727ed4a028837b5085832fbaa415a7f7f3525", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b51727ed4a028837b5085832fbaa415a7f7f3525"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f759fe15a1f796f0c9f201891aa642e2eadd5d42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f759fe15a1f796f0c9f201891aa642e2eadd5d42", "html_url": "https://github.com/rust-lang/rust/commit/f759fe15a1f796f0c9f201891aa642e2eadd5d42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f759fe15a1f796f0c9f201891aa642e2eadd5d42/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c3950d8a827793fa04c8f633baddecc92a87404", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c3950d8a827793fa04c8f633baddecc92a87404", "html_url": "https://github.com/rust-lang/rust/commit/0c3950d8a827793fa04c8f633baddecc92a87404"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "7b8527b106cf79193f012e1d41336acddbaaede7", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f759fe15a1f796f0c9f201891aa642e2eadd5d42/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f759fe15a1f796f0c9f201891aa642e2eadd5d42/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=f759fe15a1f796f0c9f201891aa642e2eadd5d42", "patch": "@@ -53,7 +53,7 @@ The region maps encode information about region relationships.\n pub struct RegionMaps {\n     priv scope_map: RefCell<HashMap<ast::NodeId, ast::NodeId>>,\n     priv free_region_map: RefCell<HashMap<FreeRegion, ~[FreeRegion]>>,\n-    priv cleanup_scopes: HashSet<ast::NodeId>\n+    priv cleanup_scopes: RefCell<HashSet<ast::NodeId>>,\n }\n \n #[deriving(Clone)]\n@@ -105,7 +105,8 @@ impl RegionMaps {\n         //! not know which operators are overloaded until that point,\n         //! and only overloaded operators result in cleanup scopes.\n \n-        self.cleanup_scopes.insert(scope_id);\n+        let mut cleanup_scopes = self.cleanup_scopes.borrow_mut();\n+        cleanup_scopes.get().insert(scope_id);\n     }\n \n     pub fn opt_encl_scope(&self, id: ast::NodeId) -> Option<ast::NodeId> {\n@@ -126,14 +127,16 @@ impl RegionMaps {\n     }\n \n     pub fn is_cleanup_scope(&self, scope_id: ast::NodeId) -> bool {\n-        self.cleanup_scopes.contains(&scope_id)\n+        let cleanup_scopes = self.cleanup_scopes.borrow();\n+        cleanup_scopes.get().contains(&scope_id)\n     }\n \n     pub fn cleanup_scope(&self, expr_id: ast::NodeId) -> ast::NodeId {\n         //! Returns the scope when temps in expr will be cleaned up\n \n         let mut id = self.encl_scope(expr_id);\n-        while !self.cleanup_scopes.contains(&id) {\n+        let cleanup_scopes = self.cleanup_scopes.borrow();\n+        while !cleanup_scopes.get().contains(&id) {\n             id = self.encl_scope(id);\n         }\n         return id;\n@@ -507,7 +510,7 @@ pub fn resolve_crate(sess: Session,\n     let region_maps = @mut RegionMaps {\n         scope_map: RefCell::new(HashMap::new()),\n         free_region_map: RefCell::new(HashMap::new()),\n-        cleanup_scopes: HashSet::new(),\n+        cleanup_scopes: RefCell::new(HashSet::new()),\n     };\n     let cx = Context {parent: None,\n                       var_parent: None};"}]}