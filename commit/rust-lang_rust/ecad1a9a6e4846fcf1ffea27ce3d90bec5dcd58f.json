{"sha": "ecad1a9a6e4846fcf1ffea27ce3d90bec5dcd58f", "node_id": "C_kwDOAAsO6NoAKGVjYWQxYTlhNmU0ODQ2ZmNmMWZmZWEyN2NlM2Q5MGJlYzVkY2Q1OGY", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-11-01T15:33:59Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-11-01T15:38:19Z"}, "message": "Create `Callable`s for generic types implementing `FnOnce`", "tree": {"sha": "cd4d34f89dc40f49dff24f0f49902a5770b9da87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd4d34f89dc40f49dff24f0f49902a5770b9da87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecad1a9a6e4846fcf1ffea27ce3d90bec5dcd58f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecad1a9a6e4846fcf1ffea27ce3d90bec5dcd58f", "html_url": "https://github.com/rust-lang/rust/commit/ecad1a9a6e4846fcf1ffea27ce3d90bec5dcd58f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecad1a9a6e4846fcf1ffea27ce3d90bec5dcd58f/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07f6efc4e7302d05f31a4bde1f5bd23424ba6a45", "url": "https://api.github.com/repos/rust-lang/rust/commits/07f6efc4e7302d05f31a4bde1f5bd23424ba6a45", "html_url": "https://github.com/rust-lang/rust/commit/07f6efc4e7302d05f31a4bde1f5bd23424ba6a45"}], "stats": {"total": 114, "additions": 105, "deletions": 9}, "files": [{"sha": "53ea14504b6a74108625496f2f7ecae4c59b64c2", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecad1a9a6e4846fcf1ffea27ce3d90bec5dcd58f/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecad1a9a6e4846fcf1ffea27ce3d90bec5dcd58f/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=ecad1a9a6e4846fcf1ffea27ce3d90bec5dcd58f", "patch": "@@ -1020,7 +1020,7 @@ impl Expectation {\n     /// The primary use case is where the expected type is a fat pointer,\n     /// like `&[isize]`. For example, consider the following statement:\n     ///\n-    ///    let x: &[isize] = &[1, 2, 3];\n+    ///     let x: &[isize] = &[1, 2, 3];\n     ///\n     /// In this case, the expected type for the `&[1, 2, 3]` expression is\n     /// `&[isize]`. If however we were to say that `[1, 2, 3]` has the"}, {"sha": "2b5989c6c6f0363a0bf42857610ac9bb55f25cd3", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/ecad1a9a6e4846fcf1ffea27ce3d90bec5dcd58f/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecad1a9a6e4846fcf1ffea27ce3d90bec5dcd58f/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=ecad1a9a6e4846fcf1ffea27ce3d90bec5dcd58f", "patch": "@@ -38,10 +38,12 @@ use std::sync::Arc;\n use chalk_ir::{\n     fold::{Shift, TypeFoldable},\n     interner::HasInterner,\n-    NoSolution,\n+    NoSolution, UniverseIndex,\n };\n use hir_def::{expr::ExprId, type_ref::Rawness, TypeOrConstParamId};\n+use hir_expand::name;\n use itertools::Either;\n+use traits::FnTrait;\n use utils::Generics;\n \n use crate::{consteval::unknown_const, db::HirDatabase, utils::generics};\n@@ -508,3 +510,68 @@ where\n     });\n     Canonical { value, binders: chalk_ir::CanonicalVarKinds::from_iter(Interner, kinds) }\n }\n+\n+pub fn callable_sig_from_fnonce(\n+    self_ty: &Canonical<Ty>,\n+    env: Arc<TraitEnvironment>,\n+    db: &dyn HirDatabase,\n+) -> Option<CallableSig> {\n+    let krate = env.krate;\n+    let fn_once_trait = FnTrait::FnOnce.get_id(db, krate)?;\n+    let output_assoc_type = db.trait_data(fn_once_trait).associated_type_by_name(&name![Output])?;\n+\n+    let mut kinds = self_ty.binders.interned().to_vec();\n+    let b = TyBuilder::trait_ref(db, fn_once_trait);\n+    if b.remaining() != 2 {\n+        return None;\n+    }\n+    let fn_once = b\n+        .push(self_ty.value.clone())\n+        .fill_with_bound_vars(DebruijnIndex::INNERMOST, kinds.len())\n+        .build();\n+    kinds.extend(fn_once.substitution.iter(Interner).skip(1).map(|x| {\n+        let vk = match x.data(Interner) {\n+            chalk_ir::GenericArgData::Ty(_) => {\n+                chalk_ir::VariableKind::Ty(chalk_ir::TyVariableKind::General)\n+            }\n+            chalk_ir::GenericArgData::Lifetime(_) => chalk_ir::VariableKind::Lifetime,\n+            chalk_ir::GenericArgData::Const(c) => {\n+                chalk_ir::VariableKind::Const(c.data(Interner).ty.clone())\n+            }\n+        };\n+        chalk_ir::WithKind::new(vk, UniverseIndex::ROOT)\n+    }));\n+\n+    // FIXME: chalk refuses to solve `<Self as FnOnce<^0.0>>::Output == ^0.1`, so we first solve\n+    // `<Self as FnOnce<^0.0>>` and then replace `^0.0` with the concrete argument tuple.\n+    let trait_env = env.env.clone();\n+    let obligation = InEnvironment { goal: fn_once.cast(Interner), environment: trait_env };\n+    let canonical =\n+        Canonical { binders: CanonicalVarKinds::from_iter(Interner, kinds), value: obligation };\n+    let subst = match db.trait_solve(krate, canonical) {\n+        Some(Solution::Unique(vars)) => vars.value.subst,\n+        _ => return None,\n+    };\n+    let args = subst.at(Interner, self_ty.binders.interned().len()).ty(Interner)?;\n+    let params = match args.kind(Interner) {\n+        chalk_ir::TyKind::Tuple(_, subst) => {\n+            subst.iter(Interner).filter_map(|arg| arg.ty(Interner).cloned()).collect::<Vec<_>>()\n+        }\n+        _ => return None,\n+    };\n+    if params.iter().any(|ty| ty.is_unknown()) {\n+        return None;\n+    }\n+\n+    let fn_once = TyBuilder::trait_ref(db, fn_once_trait)\n+        .push(self_ty.value.clone())\n+        .push(args.clone())\n+        .build();\n+    let projection =\n+        TyBuilder::assoc_type_projection(db, output_assoc_type, Some(fn_once.substitution.clone()))\n+            .build();\n+\n+    let ret_ty = db.normalize_projection(projection, env);\n+\n+    Some(CallableSig::from_params_and_return(params, ret_ty.clone(), false))\n+}"}, {"sha": "cbd9bf32a548655bcb81d5c469a6f4c794328de7", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ecad1a9a6e4846fcf1ffea27ce3d90bec5dcd58f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecad1a9a6e4846fcf1ffea27ce3d90bec5dcd58f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=ecad1a9a6e4846fcf1ffea27ce3d90bec5dcd58f", "patch": "@@ -2995,7 +2995,17 @@ impl Type {\n         let callee = match self.ty.kind(Interner) {\n             TyKind::Closure(id, _) => Callee::Closure(*id),\n             TyKind::Function(_) => Callee::FnPtr,\n-            _ => Callee::Def(self.ty.callable_def(db)?),\n+            TyKind::FnDef(..) => Callee::Def(self.ty.callable_def(db)?),\n+            _ => {\n+                let ty = hir_ty::replace_errors_with_variables(&self.ty);\n+                let sig = hir_ty::callable_sig_from_fnonce(&ty, self.env.clone(), db)?;\n+                return Some(Callable {\n+                    ty: self.clone(),\n+                    sig,\n+                    callee: Callee::Other,\n+                    is_bound_method: false,\n+                });\n+            }\n         };\n \n         let sig = self.ty.callable_sig(db)?;\n@@ -3464,6 +3474,7 @@ enum Callee {\n     Def(CallableDefId),\n     Closure(ClosureId),\n     FnPtr,\n+    Other,\n }\n \n pub enum CallableKind {\n@@ -3472,6 +3483,8 @@ pub enum CallableKind {\n     TupleEnumVariant(Variant),\n     Closure,\n     FnPtr,\n+    /// Some other type that implements `FnOnce`.\n+    Other,\n }\n \n impl Callable {\n@@ -3483,6 +3496,7 @@ impl Callable {\n             Def(CallableDefId::EnumVariantId(it)) => CallableKind::TupleEnumVariant(it.into()),\n             Closure(_) => CallableKind::Closure,\n             FnPtr => CallableKind::FnPtr,\n+            Other => CallableKind::Other,\n         }\n     }\n     pub fn receiver_param(&self, db: &dyn HirDatabase) -> Option<ast::SelfParam> {"}, {"sha": "7486b20293a664b7fc048dc247332ff7118f8491", "filename": "crates/ide/src/signature_help.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ecad1a9a6e4846fcf1ffea27ce3d90bec5dcd58f/crates%2Fide%2Fsrc%2Fsignature_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecad1a9a6e4846fcf1ffea27ce3d90bec5dcd58f/crates%2Fide%2Fsrc%2Fsignature_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsignature_help.rs?ref=ecad1a9a6e4846fcf1ffea27ce3d90bec5dcd58f", "patch": "@@ -149,7 +149,7 @@ fn signature_help_for_call(\n                 variant.name(db)\n             );\n         }\n-        hir::CallableKind::Closure | hir::CallableKind::FnPtr => (),\n+        hir::CallableKind::Closure | hir::CallableKind::FnPtr | hir::CallableKind::Other => (),\n     }\n \n     res.signature.push('(');\n@@ -189,9 +189,10 @@ fn signature_help_for_call(\n         hir::CallableKind::Function(func) if callable.return_type().contains_unknown() => {\n             render(func.ret_type(db))\n         }\n-        hir::CallableKind::Function(_) | hir::CallableKind::Closure | hir::CallableKind::FnPtr => {\n-            render(callable.return_type())\n-        }\n+        hir::CallableKind::Function(_)\n+        | hir::CallableKind::Closure\n+        | hir::CallableKind::FnPtr\n+        | hir::CallableKind::Other => render(callable.return_type()),\n         hir::CallableKind::TupleStruct(_) | hir::CallableKind::TupleEnumVariant(_) => {}\n     }\n     Some(res)\n@@ -387,10 +388,9 @@ mod tests {\n     }\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        // Implicitly add `Sized` to avoid noisy `T: ?Sized` in the results.\n         let fixture = format!(\n             r#\"\n-#[lang = \"sized\"] trait Sized {{}}\n+//- minicore: sized, fn\n {ra_fixture}\n             \"#\n         );\n@@ -1331,4 +1331,19 @@ fn f() {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn help_for_generic_call() {\n+        check(\n+            r#\"\n+fn f<F: FnOnce(u8, u16) -> i32>(f: F) {\n+    f($0)\n+}\n+\"#,\n+            expect![[r#\"\n+                (u8, u16) -> i32\n+                 ^^  ---\n+            \"#]],\n+        );\n+    }\n }"}]}