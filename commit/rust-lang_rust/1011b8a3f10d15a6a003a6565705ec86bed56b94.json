{"sha": "1011b8a3f10d15a6a003a6565705ec86bed56b94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMTFiOGEzZjEwZDE1YTZhMDAzYTY1NjU3MDVlYzg2YmVkNTZiOTQ=", "commit": {"author": {"name": "tinaun", "email": "tinagma@gmail.com", "date": "2018-02-16T07:14:34Z"}, "committer": {"name": "tinaun", "email": "tinagma@gmail.com", "date": "2018-03-03T00:20:36Z"}, "message": "Stabilize Unsafe Pointer Methods\n\nalso minor doc fixes.\n\nCloses #43941", "tree": {"sha": "a4436b771ea870572c47973d813ae69de1f6b9cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4436b771ea870572c47973d813ae69de1f6b9cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1011b8a3f10d15a6a003a6565705ec86bed56b94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1011b8a3f10d15a6a003a6565705ec86bed56b94", "html_url": "https://github.com/rust-lang/rust/commit/1011b8a3f10d15a6a003a6565705ec86bed56b94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1011b8a3f10d15a6a003a6565705ec86bed56b94/comments", "author": {"login": "tinaun", "id": 2565671, "node_id": "MDQ6VXNlcjI1NjU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2565671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tinaun", "html_url": "https://github.com/tinaun", "followers_url": "https://api.github.com/users/tinaun/followers", "following_url": "https://api.github.com/users/tinaun/following{/other_user}", "gists_url": "https://api.github.com/users/tinaun/gists{/gist_id}", "starred_url": "https://api.github.com/users/tinaun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tinaun/subscriptions", "organizations_url": "https://api.github.com/users/tinaun/orgs", "repos_url": "https://api.github.com/users/tinaun/repos", "events_url": "https://api.github.com/users/tinaun/events{/privacy}", "received_events_url": "https://api.github.com/users/tinaun/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tinaun", "id": 2565671, "node_id": "MDQ6VXNlcjI1NjU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2565671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tinaun", "html_url": "https://github.com/tinaun", "followers_url": "https://api.github.com/users/tinaun/followers", "following_url": "https://api.github.com/users/tinaun/following{/other_user}", "gists_url": "https://api.github.com/users/tinaun/gists{/gist_id}", "starred_url": "https://api.github.com/users/tinaun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tinaun/subscriptions", "organizations_url": "https://api.github.com/users/tinaun/orgs", "repos_url": "https://api.github.com/users/tinaun/repos", "events_url": "https://api.github.com/users/tinaun/events{/privacy}", "received_events_url": "https://api.github.com/users/tinaun/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5570cdcc9e7da0cca84e394e872bc16df2c6dc50", "url": "https://api.github.com/repos/rust-lang/rust/commits/5570cdcc9e7da0cca84e394e872bc16df2c6dc50", "html_url": "https://github.com/rust-lang/rust/commit/5570cdcc9e7da0cca84e394e872bc16df2c6dc50"}], "stats": {"total": 108, "additions": 30, "deletions": 78}, "files": [{"sha": "6270e5892b3a0b4141da929e105fe71300bed165", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 30, "deletions": 78, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/1011b8a3f10d15a6a003a6565705ec86bed56b94/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1011b8a3f10d15a6a003a6565705ec86bed56b94/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=1011b8a3f10d15a6a003a6565705ec86bed56b94", "patch": "@@ -740,8 +740,6 @@ impl<T: ?Sized> *const T {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// let s: &str = \"123\";\n     /// let ptr: *const u8 = s.as_ptr();\n     ///\n@@ -750,7 +748,7 @@ impl<T: ?Sized> *const T {\n     ///     println!(\"{}\", *ptr.add(2) as char);\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn add(self, count: usize) -> Self\n         where T: Sized,\n@@ -799,8 +797,6 @@ impl<T: ?Sized> *const T {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// let s: &str = \"123\";\n     ///\n     /// unsafe {\n@@ -809,7 +805,7 @@ impl<T: ?Sized> *const T {\n     ///     println!(\"{}\", *end.sub(2) as char);\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn sub(self, count: usize) -> Self\n         where T: Sized,\n@@ -836,8 +832,6 @@ impl<T: ?Sized> *const T {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// // Iterate using a raw pointer in increments of two elements\n     /// let data = [1u8, 2, 3, 4, 5];\n     /// let mut ptr: *const u8 = data.as_ptr();\n@@ -852,7 +846,7 @@ impl<T: ?Sized> *const T {\n     ///     ptr = ptr.wrapping_add(step);\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub fn wrapping_add(self, count: usize) -> Self\n         where T: Sized,\n@@ -879,8 +873,6 @@ impl<T: ?Sized> *const T {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// // Iterate using a raw pointer in increments of two elements (backwards)\n     /// let data = [1u8, 2, 3, 4, 5];\n     /// let mut ptr: *const u8 = data.as_ptr();\n@@ -895,7 +887,7 @@ impl<T: ?Sized> *const T {\n     ///     ptr = ptr.wrapping_sub(step);\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub fn wrapping_sub(self, count: usize) -> Self\n         where T: Sized,\n@@ -922,16 +914,14 @@ impl<T: ?Sized> *const T {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// let x = 12;\n     /// let y = &x as *const i32;\n     ///\n     /// unsafe {\n     ///     assert_eq!(y.read(), 12);\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read(self) -> T\n         where T: Sized,\n@@ -974,16 +964,14 @@ impl<T: ?Sized> *const T {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// let x = 12;\n     /// let y = &x as *const i32;\n     ///\n     /// unsafe {\n     ///     assert_eq!(y.read_volatile(), 12);\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read_volatile(self) -> T\n         where T: Sized,\n@@ -1010,16 +998,14 @@ impl<T: ?Sized> *const T {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// let x = 12;\n     /// let y = &x as *const i32;\n     ///\n     /// unsafe {\n     ///     assert_eq!(y.read_unaligned(), 12);\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read_unaligned(self) -> T\n         where T: Sized,\n@@ -1046,8 +1032,6 @@ impl<T: ?Sized> *const T {\n     /// Efficiently create a Rust vector from an unsafe buffer:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// # #[allow(dead_code)]\n     /// unsafe fn from_buf_raw<T: Copy>(ptr: *const T, elts: usize) -> Vec<T> {\n     ///     let mut dst = Vec::with_capacity(elts);\n@@ -1056,7 +1040,7 @@ impl<T: ?Sized> *const T {\n     ///     dst\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_to(self, dest: *mut T, count: usize)\n         where T: Sized,\n@@ -1085,8 +1069,6 @@ impl<T: ?Sized> *const T {\n     /// Efficiently create a Rust vector from an unsafe buffer:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// # #[allow(dead_code)]\n     /// unsafe fn from_buf_raw<T: Copy>(ptr: *const T, elts: usize) -> Vec<T> {\n     ///     let mut dst = Vec::with_capacity(elts);\n@@ -1095,7 +1077,7 @@ impl<T: ?Sized> *const T {\n     ///     dst\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)\n         where T: Sized,\n@@ -1443,8 +1425,6 @@ impl<T: ?Sized> *mut T {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// let s: &str = \"123\";\n     /// let ptr: *const u8 = s.as_ptr();\n     ///\n@@ -1453,7 +1433,7 @@ impl<T: ?Sized> *mut T {\n     ///     println!(\"{}\", *ptr.add(2) as char);\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn add(self, count: usize) -> Self\n         where T: Sized,\n@@ -1502,8 +1482,6 @@ impl<T: ?Sized> *mut T {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// let s: &str = \"123\";\n     ///\n     /// unsafe {\n@@ -1512,7 +1490,7 @@ impl<T: ?Sized> *mut T {\n     ///     println!(\"{}\", *end.sub(2) as char);\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn sub(self, count: usize) -> Self\n         where T: Sized,\n@@ -1539,8 +1517,6 @@ impl<T: ?Sized> *mut T {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// // Iterate using a raw pointer in increments of two elements\n     /// let data = [1u8, 2, 3, 4, 5];\n     /// let mut ptr: *const u8 = data.as_ptr();\n@@ -1555,7 +1531,7 @@ impl<T: ?Sized> *mut T {\n     ///     ptr = ptr.wrapping_add(step);\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub fn wrapping_add(self, count: usize) -> Self\n         where T: Sized,\n@@ -1582,8 +1558,6 @@ impl<T: ?Sized> *mut T {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// // Iterate using a raw pointer in increments of two elements (backwards)\n     /// let data = [1u8, 2, 3, 4, 5];\n     /// let mut ptr: *const u8 = data.as_ptr();\n@@ -1598,7 +1572,7 @@ impl<T: ?Sized> *mut T {\n     ///     ptr = ptr.wrapping_sub(step);\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub fn wrapping_sub(self, count: usize) -> Self\n         where T: Sized,\n@@ -1625,16 +1599,14 @@ impl<T: ?Sized> *mut T {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// let x = 12;\n     /// let y = &x as *const i32;\n     ///\n     /// unsafe {\n     ///     assert_eq!(y.read(), 12);\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read(self) -> T\n         where T: Sized,\n@@ -1668,7 +1640,7 @@ impl<T: ?Sized> *mut T {\n     /// Beyond accepting a raw pointer, this is unsafe because it semantically\n     /// moves the value out of `self` without preventing further usage of `self`.\n     /// If `T` is not `Copy`, then care must be taken to ensure that the value at\n-    /// `src` is not used before the data is overwritten again (e.g. with `write`,\n+    /// `self` is not used before the data is overwritten again (e.g. with `write`,\n     /// `write_bytes`, or `copy`). Note that `*self = foo` counts as a use\n     /// because it will attempt to drop the value previously at `*self`.\n     ///\n@@ -1677,16 +1649,14 @@ impl<T: ?Sized> *mut T {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// let x = 12;\n     /// let y = &x as *const i32;\n     ///\n     /// unsafe {\n     ///     assert_eq!(y.read_volatile(), 12);\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read_volatile(self) -> T\n         where T: Sized,\n@@ -1713,16 +1683,14 @@ impl<T: ?Sized> *mut T {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// let x = 12;\n     /// let y = &x as *const i32;\n     ///\n     /// unsafe {\n     ///     assert_eq!(y.read_unaligned(), 12);\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn read_unaligned(self) -> T\n         where T: Sized,\n@@ -1749,8 +1717,6 @@ impl<T: ?Sized> *mut T {\n     /// Efficiently create a Rust vector from an unsafe buffer:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// # #[allow(dead_code)]\n     /// unsafe fn from_buf_raw<T: Copy>(ptr: *const T, elts: usize) -> Vec<T> {\n     ///     let mut dst = Vec::with_capacity(elts);\n@@ -1759,7 +1725,7 @@ impl<T: ?Sized> *mut T {\n     ///     dst\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_to(self, dest: *mut T, count: usize)\n         where T: Sized,\n@@ -1788,8 +1754,6 @@ impl<T: ?Sized> *mut T {\n     /// Efficiently create a Rust vector from an unsafe buffer:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// # #[allow(dead_code)]\n     /// unsafe fn from_buf_raw<T: Copy>(ptr: *const T, elts: usize) -> Vec<T> {\n     ///     let mut dst = Vec::with_capacity(elts);\n@@ -1798,7 +1762,7 @@ impl<T: ?Sized> *mut T {\n     ///     dst\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)\n         where T: Sized,\n@@ -1825,8 +1789,6 @@ impl<T: ?Sized> *mut T {\n     /// Efficiently create a Rust vector from an unsafe buffer:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// # #[allow(dead_code)]\n     /// unsafe fn from_buf_raw<T: Copy>(ptr: *const T, elts: usize) -> Vec<T> {\n     ///     let mut dst: Vec<T> = Vec::with_capacity(elts);\n@@ -1835,7 +1797,7 @@ impl<T: ?Sized> *mut T {\n     ///     dst\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_from(self, src: *const T, count: usize)\n         where T: Sized,\n@@ -1864,8 +1826,6 @@ impl<T: ?Sized> *mut T {\n     /// Efficiently create a Rust vector from an unsafe buffer:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// # #[allow(dead_code)]\n     /// unsafe fn from_buf_raw<T: Copy>(ptr: *const T, elts: usize) -> Vec<T> {\n     ///     let mut dst: Vec<T> = Vec::with_capacity(elts);\n@@ -1874,7 +1834,7 @@ impl<T: ?Sized> *mut T {\n     ///     dst\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn copy_from_nonoverlapping(self, src: *const T, count: usize)\n         where T: Sized,\n@@ -1899,7 +1859,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// This has all the same safety problems as `ptr::read` with respect to\n     /// invalid pointers, types, and double drops.\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn drop_in_place(self) {\n         drop_in_place(self)\n@@ -1929,8 +1889,6 @@ impl<T: ?Sized> *mut T {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// let mut x = 0;\n     /// let y = &mut x as *mut i32;\n     /// let z = 12;\n@@ -1940,7 +1898,7 @@ impl<T: ?Sized> *mut T {\n     ///     assert_eq!(y.read(), 12);\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn write(self, val: T)\n         where T: Sized,\n@@ -1954,16 +1912,14 @@ impl<T: ?Sized> *mut T {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// let mut vec = vec![0; 4];\n     /// unsafe {\n     ///     let vec_ptr = vec.as_mut_ptr();\n     ///     vec_ptr.write_bytes(b'a', 2);\n     /// }\n     /// assert_eq!(vec, [b'a', b'a', 0, 0]);\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn write_bytes(self, val: u8, count: usize)\n         where T: Sized,\n@@ -2008,8 +1964,6 @@ impl<T: ?Sized> *mut T {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// let mut x = 0;\n     /// let y = &mut x as *mut i32;\n     /// let z = 12;\n@@ -2019,7 +1973,7 @@ impl<T: ?Sized> *mut T {\n     ///     assert_eq!(y.read_volatile(), 12);\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn write_volatile(self, val: T)\n         where T: Sized,\n@@ -2040,8 +1994,8 @@ impl<T: ?Sized> *mut T {\n     /// allocations or resources, so care must be taken not to overwrite an object\n     /// that should be dropped.\n     ///\n-    /// Additionally, it does not drop `src`. Semantically, `src` is moved into the\n-    /// location pointed to by `dst`.\n+    /// Additionally, it does not drop `self`. Semantically, `self` is moved into the\n+    /// location pointed to by `val`.\n     ///\n     /// This is appropriate for initializing uninitialized memory, or overwriting\n     /// memory that has previously been `read` from.\n@@ -2051,8 +2005,6 @@ impl<T: ?Sized> *mut T {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(pointer_methods)]\n-    ///\n     /// let mut x = 0;\n     /// let y = &mut x as *mut i32;\n     /// let z = 12;\n@@ -2062,7 +2014,7 @@ impl<T: ?Sized> *mut T {\n     ///     assert_eq!(y.read_unaligned(), 12);\n     /// }\n     /// ```\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn write_unaligned(self, val: T)\n         where T: Sized,\n@@ -2077,7 +2029,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// This is only unsafe because it accepts a raw pointer.\n     /// Otherwise, this operation is identical to `mem::replace`.\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn replace(self, src: T) -> T\n         where T: Sized,\n@@ -2095,7 +2047,7 @@ impl<T: ?Sized> *mut T {\n     /// as arguments.\n     ///\n     /// Ensure that these pointers are valid before calling `swap`.\n-    #[unstable(feature = \"pointer_methods\", issue = \"43941\")]\n+    #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n     pub unsafe fn swap(self, with: *mut T)\n         where T: Sized,"}]}