{"sha": "1059ec74e2147559b43aab9b12f84849319910cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNTllYzc0ZTIxNDc1NTliNDNhYWI5YjEyZjg0ODQ5MzE5OTEwY2M=", "commit": {"author": {"name": "Erlend Tobiassen", "email": "erlend.tobiassen@gmail.com", "date": "2019-01-22T00:11:35Z"}, "committer": {"name": "Erlend Tobiassen", "email": "erlend.tobiassen@gmail.com", "date": "2019-01-22T00:11:35Z"}, "message": "Allow types to the left of : in where predicates.", "tree": {"sha": "77ba85c6121f341e017d2b038866b8c172fa28d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77ba85c6121f341e017d2b038866b8c172fa28d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1059ec74e2147559b43aab9b12f84849319910cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1059ec74e2147559b43aab9b12f84849319910cc", "html_url": "https://github.com/rust-lang/rust/commit/1059ec74e2147559b43aab9b12f84849319910cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1059ec74e2147559b43aab9b12f84849319910cc/comments", "author": {"login": "regiontog", "id": 9137819, "node_id": "MDQ6VXNlcjkxMzc4MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/9137819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regiontog", "html_url": "https://github.com/regiontog", "followers_url": "https://api.github.com/users/regiontog/followers", "following_url": "https://api.github.com/users/regiontog/following{/other_user}", "gists_url": "https://api.github.com/users/regiontog/gists{/gist_id}", "starred_url": "https://api.github.com/users/regiontog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regiontog/subscriptions", "organizations_url": "https://api.github.com/users/regiontog/orgs", "repos_url": "https://api.github.com/users/regiontog/repos", "events_url": "https://api.github.com/users/regiontog/events{/privacy}", "received_events_url": "https://api.github.com/users/regiontog/received_events", "type": "User", "site_admin": false}, "committer": {"login": "regiontog", "id": 9137819, "node_id": "MDQ6VXNlcjkxMzc4MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/9137819?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regiontog", "html_url": "https://github.com/regiontog", "followers_url": "https://api.github.com/users/regiontog/followers", "following_url": "https://api.github.com/users/regiontog/following{/other_user}", "gists_url": "https://api.github.com/users/regiontog/gists{/gist_id}", "starred_url": "https://api.github.com/users/regiontog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regiontog/subscriptions", "organizations_url": "https://api.github.com/users/regiontog/orgs", "repos_url": "https://api.github.com/users/regiontog/repos", "events_url": "https://api.github.com/users/regiontog/events{/privacy}", "received_events_url": "https://api.github.com/users/regiontog/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b59334e67a3c76c91ccd7bc1212a485ab0ac4065", "url": "https://api.github.com/repos/rust-lang/rust/commits/b59334e67a3c76c91ccd7bc1212a485ab0ac4065", "html_url": "https://github.com/rust-lang/rust/commit/b59334e67a3c76c91ccd7bc1212a485ab0ac4065"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "fe9dba2ae45d80a5dd3f2644dabfd297d7c3a3d9", "filename": "crates/ra_syntax/src/grammar/type_params.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1059ec74e2147559b43aab9b12f84849319910cc/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1059ec74e2147559b43aab9b12f84849319910cc/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=1059ec74e2147559b43aab9b12f84849319910cc", "patch": "@@ -104,22 +104,32 @@ pub(super) fn opt_where_clause(p: &mut Parser) {\n     }\n     let m = p.start();\n     p.bump();\n-    loop {\n-        if !(paths::is_path_start(p)\n-            || p.current() == LIFETIME\n-            || p.current() == FOR_KW\n-            || p.current() == L_ANGLE)\n-        {\n-            break;\n-        }\n-        where_predicate(p);\n-        if p.current() != L_CURLY && p.current() != SEMI && p.current() != EQ {\n-            p.expect(COMMA);\n+\n+    if is_where_clause_end(p) {\n+        // Empty where clause\n+    } else {\n+        loop {\n+            where_predicate(p);\n+\n+            let comma = p.eat(COMMA);\n+\n+            if is_where_clause_end(p) {\n+                break;\n+            }\n+\n+            if !comma {\n+                p.error(\"expected comma\")\n+            }\n         }\n     }\n+\n     m.complete(p, WHERE_CLAUSE);\n }\n \n+fn is_where_clause_end(p: &mut Parser) -> bool {\n+    p.current() == L_CURLY || p.current() == SEMI || p.current() == EQ\n+}\n+\n fn where_predicate(p: &mut Parser) {\n     let m = p.start();\n     match p.current() {\n@@ -131,20 +141,13 @@ fn where_predicate(p: &mut Parser) {\n                 p.error(\"expected colon\");\n             }\n         }\n+        IMPL_KW => {\n+            p.error(\"expected lifetime or type\");\n+            return;\n+        }\n         _ => {\n-            // test where_pred_for\n-            // fn test<F>()\n-            // where\n-            //    for<'a> F: Fn(&'a str)\n-            // { }\n-            if p.at(FOR_KW) {\n-                types::for_binder(p);\n-            }\n-            if paths::is_path_start(p) || p.at(L_ANGLE) {\n-                types::path_type_(p, false);\n-            } else {\n-                p.error(\"expected a type\");\n-            }\n+            types::type_(p);\n+\n             if p.at(COLON) {\n                 bounds(p);\n             } else {"}]}