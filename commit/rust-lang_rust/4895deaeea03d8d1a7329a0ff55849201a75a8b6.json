{"sha": "4895deaeea03d8d1a7329a0ff55849201a75a8b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4OTVkZWFlZWEwM2Q4ZDFhNzMyOWEwZmY1NTg0OTIwMWE3NWE4YjY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-10-30T22:05:58Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-10-30T22:53:38Z"}, "message": "save-analysis: make sure we save the def for the last segment of a path", "tree": {"sha": "49e62a729258706f444b0a605ee32f7ea89300ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49e62a729258706f444b0a605ee32f7ea89300ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4895deaeea03d8d1a7329a0ff55849201a75a8b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4895deaeea03d8d1a7329a0ff55849201a75a8b6", "html_url": "https://github.com/rust-lang/rust/commit/4895deaeea03d8d1a7329a0ff55849201a75a8b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4895deaeea03d8d1a7329a0ff55849201a75a8b6/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f586ac9ef9266f6e257c3ec41e126336a543025f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f586ac9ef9266f6e257c3ec41e126336a543025f", "html_url": "https://github.com/rust-lang/rust/commit/f586ac9ef9266f6e257c3ec41e126336a543025f"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "b6621e0962cf6e384e044a0f59bb42b87c3709b8", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4895deaeea03d8d1a7329a0ff55849201a75a8b6/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4895deaeea03d8d1a7329a0ff55849201a75a8b6/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=4895deaeea03d8d1a7329a0ff55849201a75a8b6", "patch": "@@ -1754,7 +1754,6 @@ impl<'a> LoweringContext<'a> {\n         &mut self,\n         def: Def,\n         p: &Path,\n-        ident: Option<Ident>,\n         param_mode: ParamMode,\n         explicit_owner: Option<NodeId>,\n     ) -> hir::Path {\n@@ -1773,15 +1772,14 @@ impl<'a> LoweringContext<'a> {\n                         explicit_owner,\n                     )\n                 })\n-                .chain(ident.map(|ident| hir::PathSegment::from_ident(ident)))\n                 .collect(),\n             span: p.span,\n         }\n     }\n \n     fn lower_path(&mut self, id: NodeId, p: &Path, param_mode: ParamMode) -> hir::Path {\n         let def = self.expect_full_def(id);\n-        self.lower_path_extra(def, p, None, param_mode, None)\n+        self.lower_path_extra(def, p, param_mode, None)\n     }\n \n     fn lower_path_segment(\n@@ -3014,7 +3012,7 @@ impl<'a> LoweringContext<'a> {\n                     self.with_hir_id_owner(new_node_id, |this| {\n                         let new_id = this.lower_node_id(new_node_id);\n                         let path =\n-                            this.lower_path_extra(def, &path, None, ParamMode::Explicit, None);\n+                            this.lower_path_extra(def, &path, ParamMode::Explicit, None);\n                         let item = hir::ItemKind::Use(P(path), hir::UseKind::Single);\n                         let vis_kind = match vis.node {\n                             hir::VisibilityKind::Public => hir::VisibilityKind::Public,\n@@ -3053,7 +3051,7 @@ impl<'a> LoweringContext<'a> {\n                 }\n \n                 let path =\n-                    P(self.lower_path_extra(ret_def, &path, None, ParamMode::Explicit, None));\n+                    P(self.lower_path_extra(ret_def, &path, ParamMode::Explicit, None));\n                 hir::ItemKind::Use(path, hir::UseKind::Single)\n             }\n             UseTreeKind::Glob => {\n@@ -3140,7 +3138,7 @@ impl<'a> LoweringContext<'a> {\n                 // the stability of `use a::{};`, to avoid it showing up as\n                 // a re-export by accident when `pub`, e.g. in documentation.\n                 let def = self.expect_full_def_from_use(id).next().unwrap_or(Def::Err);\n-                let path = P(self.lower_path_extra(def, &prefix, None, ParamMode::Explicit, None));\n+                let path = P(self.lower_path_extra(def, &prefix, ParamMode::Explicit, None));\n                 *vis = respan(prefix.span.shrink_to_lo(), hir::VisibilityKind::Inherited);\n                 hir::ItemKind::Use(path, hir::UseKind::ListStem)\n             }\n@@ -4550,7 +4548,6 @@ impl<'a> LoweringContext<'a> {\n                     path: P(self.lower_path_extra(\n                         def,\n                         path,\n-                        None,\n                         ParamMode::Explicit,\n                         explicit_owner,\n                     )),"}, {"sha": "094488f3af3cf00ac2b5b0eb5b654fe1e725fe47", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4895deaeea03d8d1a7329a0ff55849201a75a8b6/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4895deaeea03d8d1a7329a0ff55849201a75a8b6/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4895deaeea03d8d1a7329a0ff55849201a75a8b6", "patch": "@@ -3589,7 +3589,17 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         );\n \n         for (i, &Segment { ident, id }) in path.iter().enumerate() {\n-            debug!(\"resolve_path ident {} {:?}\", i, ident);\n+            debug!(\"resolve_path ident {} {:?} {:?}\", i, ident, id);\n+            let record_segment_def = |this: &mut Self, def| {\n+                if record_used {\n+                    if let Some(id) = id {\n+                        if !this.def_map.contains_key(&id) {\n+                            assert!(id != ast::DUMMY_NODE_ID, \"Trying to resolve dummy id\");\n+                            this.record_def(id, PathResolution::new(def));\n+                        }\n+                    }\n+                }\n+            };\n \n             let is_last = i == path.len() - 1;\n             let ns = if is_last { opt_ns.unwrap_or(TypeNS) } else { TypeNS };\n@@ -3673,6 +3683,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     // we found a local variable or type param\n                     Some(LexicalScopeBinding::Def(def))\n                             if opt_ns == Some(TypeNS) || opt_ns == Some(ValueNS) => {\n+                        record_segment_def(self, def);\n                         return PathResult::NonModule(PathResolution::with_unresolved_segments(\n                             def, path.len() - 1\n                         ));\n@@ -3690,14 +3701,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     let maybe_assoc = opt_ns != Some(MacroNS) && PathSource::Type.is_expected(def);\n                     if let Some(next_module) = binding.module() {\n                         module = Some(ModuleOrUniformRoot::Module(next_module));\n-                        if record_used {\n-                            if let Some(id) = id {\n-                                if !self.def_map.contains_key(&id) {\n-                                    assert!(id != ast::DUMMY_NODE_ID, \"Trying to resolve dummy id\");\n-                                    self.record_def(id, PathResolution::new(def));\n-                                }\n-                            }\n-                        }\n+                        record_segment_def(self, def);\n                     } else if def == Def::ToolMod && i + 1 != path.len() {\n                         let def = Def::NonMacroAttr(NonMacroAttrKind::Tool);\n                         return PathResult::NonModule(PathResolution::new(def));"}, {"sha": "839b8956b4cd475099576d81df7255e82335834c", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4895deaeea03d8d1a7329a0ff55849201a75a8b6/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4895deaeea03d8d1a7329a0ff55849201a75a8b6/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=4895deaeea03d8d1a7329a0ff55849201a75a8b6", "patch": "@@ -771,8 +771,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     }\n \n     fn process_path(&mut self, id: NodeId, path: &'l ast::Path) {\n-        debug!(\"process_path {:?}\", path);\n-        if generated_code(path.span) {\n+        if self.span.filter_generated(path.span) {\n             return;\n         }\n         self.dump_path_ref(id, path);"}]}