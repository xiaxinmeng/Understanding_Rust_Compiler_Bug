{"sha": "669a139956681edf13c9fa21f08fa27979d5c345", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2OWExMzk5NTY2ODFlZGYxM2M5ZmEyMWYwOGZhMjc5NzlkNWMzNDU=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-24T14:46:22Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-08-24T14:48:18Z"}, "message": "Only merge consecutive derives", "tree": {"sha": "01386c24b00a8c2221912b5296927f8769ae1cc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01386c24b00a8c2221912b5296927f8769ae1cc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/669a139956681edf13c9fa21f08fa27979d5c345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/669a139956681edf13c9fa21f08fa27979d5c345", "html_url": "https://github.com/rust-lang/rust/commit/669a139956681edf13c9fa21f08fa27979d5c345", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/669a139956681edf13c9fa21f08fa27979d5c345/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dafcc24e46a05713c47235d51ac2d50c7899feb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dafcc24e46a05713c47235d51ac2d50c7899feb", "html_url": "https://github.com/rust-lang/rust/commit/5dafcc24e46a05713c47235d51ac2d50c7899feb"}], "stats": {"total": 118, "additions": 96, "deletions": 22}, "files": [{"sha": "972c2e58241ac807594c4eb4b876c40bbc019c9a", "filename": "Configurations.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/669a139956681edf13c9fa21f08fa27979d5c345/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/669a139956681edf13c9fa21f08fa27979d5c345/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=669a139956681edf13c9fa21f08fa27979d5c345", "patch": "@@ -1272,8 +1272,6 @@ Merge multiple derives into a single one.\n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n \n-*Note*: The merged derives will be put after all other attributes or doc comments.\n-\n #### `true`:\n \n ```rust"}, {"sha": "2f6a503dc136914c094b73d1818ba357c62c964f", "filename": "src/visitor.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/669a139956681edf13c9fa21f08fa27979d5c345/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669a139956681edf13c9fa21f08fa27979d5c345/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=669a139956681edf13c9fa21f08fa27979d5c345", "patch": "@@ -927,7 +927,8 @@ impl<'a> Rewrite for [ast::Attribute] {\n \n         let mut derive_args = Vec::new();\n \n-        for (i, a) in self.iter().enumerate() {\n+        let mut iter = self.iter().enumerate().peekable();\n+        while let Some((i, a)) = iter.next() {\n             let a_str = try_opt!(a.rewrite(context, shape));\n \n             // Write comments and blank lines between attributes.\n@@ -954,44 +955,51 @@ impl<'a> Rewrite for [ast::Attribute] {\n                 } else if multi_line {\n                     result.push('\\n');\n                 }\n-                result.push_str(&indent);\n+                if derive_args.is_empty() {\n+                    result.push_str(&indent);\n+                }\n             }\n \n             // Write the attribute itself.\n+            let mut insert_new_line = true;\n             if context.config.merge_derives() {\n+                // If the attribute is `#[derive(...)]`, take the arguments.\n                 if let Some(mut args) = get_derive_args(context, a) {\n-                    // If the attribute is `#[derive(...)]`, take the arguments and skip rewriting.\n-                    // We will merge the all arguments into a single `#[derive(...)]` at last.\n                     derive_args.append(&mut args);\n+                    match iter.peek() {\n+                        // If the next attribute is `#[derive(...)]` as well, skip rewriting.\n+                        Some(&(_, next_attr)) if is_derive(next_attr) => insert_new_line = false,\n+                        // If not, rewrite the merged derives.\n+                        _ => {\n+                            result.push_str(&format!(\"#[derive({})]\", derive_args.join(\", \")));\n+                            derive_args.clear();\n+                        }\n+                    }\n                 } else {\n                     result.push_str(&a_str);\n-\n-                    if i < self.len() - 1 {\n-                        result.push('\\n');\n-                    }\n                 }\n             } else {\n                 result.push_str(&a_str);\n-\n-                if i < self.len() - 1 {\n-                    result.push('\\n');\n-                }\n             }\n-        }\n \n-        // Add merged `#[derive(...)]` at last.\n-        if context.config.merge_derives() && !derive_args.is_empty() {\n-            if !result.is_empty() && !result.ends_with('\\n') {\n-                result.push_str(&indent);\n+            if insert_new_line && i < self.len() - 1 {\n                 result.push('\\n');\n             }\n-            result.push_str(&format!(\"#[derive({})]\", derive_args.join(\", \")));\n         }\n-\n         Some(result)\n     }\n }\n \n+fn is_derive(attr: &ast::Attribute) -> bool {\n+    match attr.meta() {\n+        Some(meta_item) => match meta_item.node {\n+            ast::MetaItemKind::List(..) => meta_item.name.as_str() == \"derive\",\n+            _ => false,\n+        },\n+        _ => false,\n+    }\n+}\n+\n /// Returns the arguments of `#[derive(...)]`.\n fn get_derive_args(context: &RewriteContext, attr: &ast::Attribute) -> Option<Vec<String>> {\n     attr.meta().and_then(|meta_item| match meta_item.node {"}, {"sha": "18b8443f0d7bb586465bfc12826e7e27a54eabc1", "filename": "tests/source/configs-merge_derives-true.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/669a139956681edf13c9fa21f08fa27979d5c345/tests%2Fsource%2Fconfigs-merge_derives-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669a139956681edf13c9fa21f08fa27979d5c345/tests%2Fsource%2Fconfigs-merge_derives-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-merge_derives-true.rs?ref=669a139956681edf13c9fa21f08fa27979d5c345", "patch": "@@ -8,3 +8,39 @@\n #[foobar]\n #[derive(Copy, Clone)]\n pub enum Foo {}\n+\n+#[derive(Eq, PartialEq)]\n+#[derive(Debug)]\n+#[foobar]\n+#[derive(Copy, Clone)]\n+pub enum Bar {}\n+\n+#[derive(Eq, PartialEq)]\n+#[derive(Debug)]\n+#[derive(Copy, Clone)]\n+pub enum FooBar {}\n+\n+mod foo {\n+#[bar]\n+#[derive(Eq, PartialEq)]\n+#[foo]\n+#[derive(Debug)]\n+#[foobar]\n+#[derive(Copy, Clone)]\n+pub enum Foo {}\n+}\n+\n+mod bar {\n+#[derive(Eq, PartialEq)]\n+#[derive(Debug)]\n+#[foobar]\n+#[derive(Copy, Clone)]\n+pub enum Bar {}\n+}\n+\n+mod foobar {\n+#[derive(Eq, PartialEq)]\n+#[derive(Debug)]\n+#[derive(Copy, Clone)]\n+pub enum FooBar {}\n+}"}, {"sha": "4d0148b1c6e2cc2202a9ba8b28cabebf85b17c7e", "filename": "tests/target/configs-merge_derives-true.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/669a139956681edf13c9fa21f08fa27979d5c345/tests%2Ftarget%2Fconfigs-merge_derives-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/669a139956681edf13c9fa21f08fa27979d5c345/tests%2Ftarget%2Fconfigs-merge_derives-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-merge_derives-true.rs?ref=669a139956681edf13c9fa21f08fa27979d5c345", "patch": "@@ -2,7 +2,39 @@\n // Merge multiple derives to a single one.\n \n #[bar]\n+#[derive(Eq, PartialEq)]\n #[foo]\n+#[derive(Debug)]\n #[foobar]\n-#[derive(Eq, PartialEq, Debug, Copy, Clone)]\n+#[derive(Copy, Clone)]\n pub enum Foo {}\n+\n+#[derive(Eq, PartialEq, Debug)]\n+#[foobar]\n+#[derive(Copy, Clone)]\n+pub enum Bar {}\n+\n+#[derive(Eq, PartialEq, Debug, Copy, Clone)]\n+pub enum FooBar {}\n+\n+mod foo {\n+    #[bar]\n+    #[derive(Eq, PartialEq)]\n+    #[foo]\n+    #[derive(Debug)]\n+    #[foobar]\n+    #[derive(Copy, Clone)]\n+    pub enum Foo {}\n+}\n+\n+mod bar {\n+    #[derive(Eq, PartialEq, Debug)]\n+    #[foobar]\n+    #[derive(Copy, Clone)]\n+    pub enum Bar {}\n+}\n+\n+mod foobar {\n+    #[derive(Eq, PartialEq, Debug, Copy, Clone)]\n+    pub enum FooBar {}\n+}"}]}