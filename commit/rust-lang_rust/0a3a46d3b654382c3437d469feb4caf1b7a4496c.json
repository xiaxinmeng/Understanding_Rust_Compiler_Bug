{"sha": "0a3a46d3b654382c3437d469feb4caf1b7a4496c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhM2E0NmQzYjY1NDM4MmMzNDM3ZDQ2OWZlYjRjYWYxYjdhNDQ5NmM=", "commit": {"author": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-08T15:57:57Z"}, "committer": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-08T20:03:37Z"}, "message": "tidy things up a bit", "tree": {"sha": "9c6b0f7cca82e54aaad53bff760377c02a3075af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c6b0f7cca82e54aaad53bff760377c02a3075af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a3a46d3b654382c3437d469feb4caf1b7a4496c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a3a46d3b654382c3437d469feb4caf1b7a4496c", "html_url": "https://github.com/rust-lang/rust/commit/0a3a46d3b654382c3437d469feb4caf1b7a4496c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a3a46d3b654382c3437d469feb4caf1b7a4496c/comments", "author": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e06cd316a49556bc80e8284c2dab6ac094f75c5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e06cd316a49556bc80e8284c2dab6ac094f75c5f", "html_url": "https://github.com/rust-lang/rust/commit/e06cd316a49556bc80e8284c2dab6ac094f75c5f"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "facd6350e196c2eda53a83343f2efdab64a38c6b", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a3a46d3b654382c3437d469feb4caf1b7a4496c/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3a46d3b654382c3437d469feb4caf1b7a4496c/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=0a3a46d3b654382c3437d469feb4caf1b7a4496c", "patch": "@@ -59,7 +59,9 @@ impl ObjectSafetyViolation {\n             ObjectSafetyViolation::Method(name, MethodViolationCode::Generic) =>\n                 format!(\"method `{}` has generic type parameters\", name).into(),\n             ObjectSafetyViolation::Method(name, MethodViolationCode::NonStandardSelfType) =>\n-                format!(\"method `{}` has a non-standard `self` type. Only `&self`, `&mut self`, and `Box<Self>` are currently supported for trait objects\", name).into(),\n+                format!(\"method `{}` has a non-standard `self` type. Only `&self`, \\\n+                        `&mut self`, and `Box<Self>` are currently supported \\\n+                        for trait objects\", name).into(),\n             ObjectSafetyViolation::AssociatedConst(name) =>\n                 format!(\"the trait cannot contain associated consts like `{}`\", name).into(),\n         }"}, {"sha": "d12a973017d9bd64856bf89b4d7e14f8598c7195", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a3a46d3b654382c3437d469feb4caf1b7a4496c/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3a46d3b654382c3437d469feb4caf1b7a4496c/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=0a3a46d3b654382c3437d469feb4caf1b7a4496c", "patch": "@@ -1222,7 +1222,9 @@ impl<'tcx> ExplicitSelf<'tcx> {\n \n         match self_arg_ty.sty {\n             _ if is_self_ty(self_arg_ty) => ByValue,\n-            ty::TyRef(region, ty::TypeAndMut { ty, mutbl}) if is_self_ty(ty) => ByReference(region, mutbl),\n+            ty::TyRef(region, ty::TypeAndMut { ty, mutbl}) if is_self_ty(ty) => {\n+                ByReference(region, mutbl)\n+            }\n             ty::TyAdt(def, _) if def.is_box() && is_self_ty(self_arg_ty.boxed_ty()) => ByBox,\n             _ => Other\n         }"}, {"sha": "bcc05a3480abfd0bc7dbc8c821c28636267201c0", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a3a46d3b654382c3437d469feb4caf1b7a4496c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3a46d3b654382c3437d469feb4caf1b7a4496c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=0a3a46d3b654382c3437d469feb4caf1b7a4496c", "patch": "@@ -487,7 +487,8 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n \n         loop {\n             if let Some((potential_self_ty, _)) = autoderef.next() {\n-                debug!(\"check_method_receiver: potential self type `{:?}` to match `{:?}`\", potential_self_ty, self_ty);\n+                debug!(\"check_method_receiver: potential self type `{:?}` to match `{:?}`\",\n+                    potential_self_ty, self_ty);\n \n                 if fcx.infcx.can_eq(fcx.param_env, self_ty, potential_self_ty).is_ok() {\n                     autoderef.finalize();\n@@ -497,7 +498,8 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                     break\n                 }\n             } else {\n-                fcx.tcx.sess.diagnostic().mut_span_err(span, &format!(\"invalid `self` type: {:?}\", self_arg_ty))\n+                fcx.tcx.sess.diagnostic().mut_span_err(\n+                    span, &format!(\"invalid `self` type: {:?}\", self_arg_ty))\n                 .note(&format!(\"type must be `{:?}` or a type that dereferences to it`\", self_ty))\n                 .help(\"consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\")\n                 .code(DiagnosticId::Error(\"E0307\".into()))"}, {"sha": "50abec84cc1e0b0f167b76bd7f8a4e6b4b3acd50", "filename": "src/test/compile-fail/arbitrary-self-types-not-object-safe.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a3a46d3b654382c3437d469feb4caf1b7a4496c/src%2Ftest%2Fcompile-fail%2Farbitrary-self-types-not-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3a46d3b654382c3437d469feb4caf1b7a4496c/src%2Ftest%2Fcompile-fail%2Farbitrary-self-types-not-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farbitrary-self-types-not-object-safe.rs?ref=0a3a46d3b654382c3437d469feb4caf1b7a4496c", "patch": "@@ -1,3 +1,12 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n #![feature(arbitrary_self_types)]\n \n use std::rc::Rc;\n@@ -35,7 +44,8 @@ fn make_foo() {\n     //~| ERROR E0038\n     //~| NOTE method `foo` has a non-standard `self` type\n     //~| NOTE the trait `Foo` cannot be made into an object\n-    //~| NOTE required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<Foo>>` for `std::boxed::Box<usize>`\n+    //~| NOTE required because of the requirements on the impl of\n+    //~|      `std::ops::CoerceUnsized<std::boxed::Box<Foo>>` for `std::boxed::Box<usize>`\n }\n \n fn make_bar() {"}, {"sha": "ff0306f199310c271a112045bf5073571661f927", "filename": "src/test/compile-fail/feature-gate-arbitrary-self-types.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a3a46d3b654382c3437d469feb4caf1b7a4496c/src%2Ftest%2Fcompile-fail%2Ffeature-gate-arbitrary-self-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3a46d3b654382c3437d469feb4caf1b7a4496c/src%2Ftest%2Fcompile-fail%2Ffeature-gate-arbitrary-self-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-arbitrary-self-types.rs?ref=0a3a46d3b654382c3437d469feb4caf1b7a4496c", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n use std::rc::Rc;\n \n trait Foo {"}]}