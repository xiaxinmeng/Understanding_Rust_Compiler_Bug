{"sha": "4bae0d8b7fef1a5eb1027dcdc6a7b322b0dbc29c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYWUwZDhiN2ZlZjFhNWViMTAyN2RjZGM2YTdiMzIyYjBkYmMyOWM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-06-29T08:40:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-29T08:40:04Z"}, "message": "Rollup merge of #42884 - stepancheg:set-env-run-pass, r=alexcrichton\n\nMove global vars changing tests into run-pass\n\nShould fix race #42795", "tree": {"sha": "ec95347abc3fd709a867c7fdc951cece6871474d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec95347abc3fd709a867c7fdc951cece6871474d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bae0d8b7fef1a5eb1027dcdc6a7b322b0dbc29c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bae0d8b7fef1a5eb1027dcdc6a7b322b0dbc29c", "html_url": "https://github.com/rust-lang/rust/commit/4bae0d8b7fef1a5eb1027dcdc6a7b322b0dbc29c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bae0d8b7fef1a5eb1027dcdc6a7b322b0dbc29c/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5682494cf8adbb1bd99e4fc135d5f960bedcf27b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5682494cf8adbb1bd99e4fc135d5f960bedcf27b", "html_url": "https://github.com/rust-lang/rust/commit/5682494cf8adbb1bd99e4fc135d5f960bedcf27b"}, {"sha": "45af6ee4fcaf4a0f0dcd72ac8a38681700590b98", "url": "https://api.github.com/repos/rust-lang/rust/commits/45af6ee4fcaf4a0f0dcd72ac8a38681700590b98", "html_url": "https://github.com/rust-lang/rust/commit/45af6ee4fcaf4a0f0dcd72ac8a38681700590b98"}], "stats": {"total": 180, "additions": 99, "deletions": 81}, "files": [{"sha": "f81adad3ebebf1747578e982ab3fedb8bc021429", "filename": "src/libstd/env.rs", "status": "modified", "additions": 1, "deletions": 81, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/4bae0d8b7fef1a5eb1027dcdc6a7b322b0dbc29c/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bae0d8b7fef1a5eb1027dcdc6a7b322b0dbc29c/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=4bae0d8b7fef1a5eb1027dcdc6a7b322b0dbc29c", "patch": "@@ -949,63 +949,9 @@ mod arch {\n mod tests {\n     use super::*;\n \n-    use iter::repeat;\n-    use rand::{self, Rng};\n-    use ffi::{OsString, OsStr};\n+    use ffi::OsStr;\n     use path::{Path, PathBuf};\n \n-    fn make_rand_name() -> OsString {\n-        let mut rng = rand::thread_rng();\n-        let n = format!(\"TEST{}\", rng.gen_ascii_chars().take(10)\n-                                     .collect::<String>());\n-        let n = OsString::from(n);\n-        assert!(var_os(&n).is_none());\n-        n\n-    }\n-\n-    fn eq(a: Option<OsString>, b: Option<&str>) {\n-        assert_eq!(a.as_ref().map(|s| &**s), b.map(OsStr::new).map(|s| &*s));\n-    }\n-\n-    #[test]\n-    fn test_set_var() {\n-        let n = make_rand_name();\n-        set_var(&n, \"VALUE\");\n-        eq(var_os(&n), Some(\"VALUE\"));\n-    }\n-\n-    #[test]\n-    fn test_remove_var() {\n-        let n = make_rand_name();\n-        set_var(&n, \"VALUE\");\n-        remove_var(&n);\n-        eq(var_os(&n), None);\n-    }\n-\n-    #[test]\n-    fn test_set_var_overwrite() {\n-        let n = make_rand_name();\n-        set_var(&n, \"1\");\n-        set_var(&n, \"2\");\n-        eq(var_os(&n), Some(\"2\"));\n-        set_var(&n, \"\");\n-        eq(var_os(&n), Some(\"\"));\n-    }\n-\n-    #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n-    fn test_var_big() {\n-        let mut s = \"\".to_string();\n-        let mut i = 0;\n-        while i < 100 {\n-            s.push_str(\"aaaaaaaaaa\");\n-            i += 1;\n-        }\n-        let n = make_rand_name();\n-        set_var(&n, &s);\n-        eq(var_os(&n), Some(&s));\n-    }\n-\n     #[test]\n     #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_self_exe_path() {\n@@ -1017,32 +963,6 @@ mod tests {\n         assert!(path.is_absolute());\n     }\n \n-    #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n-    fn test_env_set_get_huge() {\n-        let n = make_rand_name();\n-        let s = repeat(\"x\").take(10000).collect::<String>();\n-        set_var(&n, &s);\n-        eq(var_os(&n), Some(&s));\n-        remove_var(&n);\n-        eq(var_os(&n), None);\n-    }\n-\n-    #[test]\n-    fn test_env_set_var() {\n-        let n = make_rand_name();\n-\n-        let mut e = vars_os();\n-        set_var(&n, \"VALUE\");\n-        assert!(!e.any(|(k, v)| {\n-            &*k == &*n && &*v == \"VALUE\"\n-        }));\n-\n-        assert!(vars_os().any(|(k, v)| {\n-            &*k == &*n && &*v == \"VALUE\"\n-        }));\n-    }\n-\n     #[test]\n     fn test() {\n         assert!((!Path::new(\"test-path\").is_absolute()));"}, {"sha": "e602fb2d7d29a20e2f4740e15a1179dc3f5841ad", "filename": "src/test/run-pass/env.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/4bae0d8b7fef1a5eb1027dcdc6a7b322b0dbc29c/src%2Ftest%2Frun-pass%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bae0d8b7fef1a5eb1027dcdc6a7b322b0dbc29c/src%2Ftest%2Frun-pass%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv.rs?ref=4bae0d8b7fef1a5eb1027dcdc6a7b322b0dbc29c", "patch": "@@ -0,0 +1,98 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+\n+#![feature(rand, std_panic)]\n+\n+use std::env::*;\n+use std::__rand as rand;\n+use std::__rand::Rng;\n+use std::iter::repeat;\n+use std::ffi::{OsString, OsStr};\n+\n+\n+fn make_rand_name() -> OsString {\n+    let mut rng = rand::thread_rng();\n+    let n = format!(\"TEST{}\", rng.gen_ascii_chars().take(10)\n+                                 .collect::<String>());\n+    let n = OsString::from(n);\n+    assert!(var_os(&n).is_none());\n+    n\n+}\n+\n+fn eq(a: Option<OsString>, b: Option<&str>) {\n+    assert_eq!(a.as_ref().map(|s| &**s), b.map(OsStr::new).map(|s| &*s));\n+}\n+\n+#[test]\n+fn test_set_var() {\n+    let n = make_rand_name();\n+    set_var(&n, \"VALUE\");\n+    eq(var_os(&n), Some(\"VALUE\"));\n+}\n+\n+#[test]\n+fn test_remove_var() {\n+    let n = make_rand_name();\n+    set_var(&n, \"VALUE\");\n+    remove_var(&n);\n+    eq(var_os(&n), None);\n+}\n+\n+#[test]\n+fn test_set_var_overwrite() {\n+    let n = make_rand_name();\n+    set_var(&n, \"1\");\n+    set_var(&n, \"2\");\n+    eq(var_os(&n), Some(\"2\"));\n+    set_var(&n, \"\");\n+    eq(var_os(&n), Some(\"\"));\n+}\n+\n+#[test]\n+#[cfg_attr(target_os = \"emscripten\", ignore)]\n+fn test_var_big() {\n+    let mut s = \"\".to_string();\n+    let mut i = 0;\n+    while i < 100 {\n+        s.push_str(\"aaaaaaaaaa\");\n+        i += 1;\n+    }\n+    let n = make_rand_name();\n+    set_var(&n, &s);\n+    eq(var_os(&n), Some(&s));\n+}\n+\n+#[test]\n+#[cfg_attr(target_os = \"emscripten\", ignore)]\n+fn test_env_set_get_huge() {\n+    let n = make_rand_name();\n+    let s = repeat(\"x\").take(10000).collect::<String>();\n+    set_var(&n, &s);\n+    eq(var_os(&n), Some(&s));\n+    remove_var(&n);\n+    eq(var_os(&n), None);\n+}\n+\n+#[test]\n+fn test_env_set_var() {\n+    let n = make_rand_name();\n+\n+    let mut e = vars_os();\n+    set_var(&n, \"VALUE\");\n+    assert!(!e.any(|(k, v)| {\n+        &*k == &*n && &*v == \"VALUE\"\n+    }));\n+\n+    assert!(vars_os().any(|(k, v)| {\n+        &*k == &*n && &*v == \"VALUE\"\n+    }));\n+}"}]}