{"sha": "6867dd2c014a3ebd20948c64671a569c2b7dffc1", "node_id": "C_kwDOAAsO6NoAKDY4NjdkZDJjMDE0YTNlYmQyMDk0OGM2NDY3MWE1NjljMmI3ZGZmYzE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-25T00:20:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-25T00:20:28Z"}, "message": "Auto merge of #89230 - workingjubilee:rollup-1swktdq, r=workingjubilee\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #88893 (Add 1.56.0 release notes)\n - #89001 (Be explicit about using Binder::dummy)\n - #89072 (Avoid a couple of Symbol::as_str calls in cg_llvm )\n - #89104 (Simplify scoped_thread)\n - #89208 ([rfc 2229] Drop fully captured upvars in the same order as the regular drop code)\n - #89210 (Add missing time complexities to linked_list.rs)\n - #89217 (Enable \"generate-link-to-definition\" option on rust tools docs as well)\n - #89221 (Give better error for `macro_rules! name!`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "702011a6c30204d7dbdf4b01511707cf930d6716", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/702011a6c30204d7dbdf4b01511707cf930d6716"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6867dd2c014a3ebd20948c64671a569c2b7dffc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6867dd2c014a3ebd20948c64671a569c2b7dffc1", "html_url": "https://github.com/rust-lang/rust/commit/6867dd2c014a3ebd20948c64671a569c2b7dffc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6867dd2c014a3ebd20948c64671a569c2b7dffc1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "043972f152398a7e4c579dd465da42bb52d6da31", "url": "https://api.github.com/repos/rust-lang/rust/commits/043972f152398a7e4c579dd465da42bb52d6da31", "html_url": "https://github.com/rust-lang/rust/commit/043972f152398a7e4c579dd465da42bb52d6da31"}, {"sha": "6f31fa58fd0c4c045f4dd71170868750739e1135", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f31fa58fd0c4c045f4dd71170868750739e1135", "html_url": "https://github.com/rust-lang/rust/commit/6f31fa58fd0c4c045f4dd71170868750739e1135"}], "stats": {"total": 1016, "additions": 863, "deletions": 153}, "files": [{"sha": "82a0cda9f6b741b0c3195e4645af64b9fa93a92d", "filename": "RELEASES.md", "status": "modified", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -1,3 +1,188 @@\n+Rust 1.56.0 (2021-10-21)\n+========================\n+\n+Language\n+--------\n+\n+- [The 2021 Edition is now stable.][rust#88100]\n+  See [the edition guide][rust-2021-edition-guide] for more details.\n+- [You can now specify explicit discriminant values on any Rust enum.][rust#86860]\n+- [The pattern in `binding @ pattern` can now also introduce new bindings.][rust#85305]\n+- [Union field access is permitted in `const fn`.][rust#85769]\n+\n+[rust-2021-edition-guide]: https://doc.rust-lang.org/nightly/edition-guide/rust-2021/index.html\n+\n+Compiler\n+--------\n+\n+- [Upgrade to LLVM 13.][rust#87570]\n+- [Support memory, address, and thread sanitizers on aarch64-unknown-freebsd.][rust#88023]\n+- [Allow specifying an deployment target version for all iOS targets][rust#87699]\n+- [Warnings can be forced on with `--force-warn`.][rust#87472]\n+  This feature is primarily intended for usage by `cargo fix`, rather than end users.\n+- [Promote `aarch64-apple-ios-sim` to Tier 2\\*.][rust#87760]\n+- [Add `powerpc-unknown-freebsd` at Tier 3\\*.][rust#87370]\n+\n+\\* Refer to Rust's [platform support page][platform-support-doc] for more\n+information on Rust's tiered platform support.\n+\n+Libraries\n+---------\n+\n+- [Allow writing of incomplete UTF-8 sequences via stdout/stderr on Windows.][rust#83342]\n+  The Windows console still requires valid Unicode, but this change allows\n+  splitting a UTF-8 character across multiple write calls. This allows, for\n+  instance, programs that just read and write data buffers (e.g. copying a file\n+  to stdout) without regard for Unicode or character boundaries.\n+- [Prefer `AtomicU{64,128}` over Mutex for Instant backsliding protection.][rust#83093]\n+  For this use case, atomics scale much better under contention.\n+- [Implement `Extend<(A, B)>` for `(Extend<A>, Extend<B>)`][rust#85835]\n+- [impl Default, Copy, Clone for std::io::Sink and std::io::Empty][rust#86744]\n+- [`impl From<[(K, V); N]>` for all collections.][rust#84111]\n+- [Remove `P: Unpin` bound on impl Future for Pin.][rust#81363]\n+- [Treat invalid environment variable names as non-existent.][rust#86183]\n+  Previously, the environment functions would panic if given a variable name\n+  with an internal null character or equal sign (`=`). Now, these functions will\n+  just treat such names as non-existent variables, since the OS cannot represent\n+  the existence of a variable with such a name.\n+\n+Stabilised APIs\n+---------------\n+\n+- [`std::os::unix::fs::chroot`]\n+- [`Iterator::intersperse`]\n+- [`Iterator::intersperse_with`]\n+- [`UnsafeCell::raw_get`]\n+- [`BufWriter::into_parts`]\n+- [`core::panic::{UnwindSafe, RefUnwindSafe, AssertUnwindSafe}`]\n+  These APIs were previously stable in `std`, but are now also available in `core`.\n+- [`Vec::shrink_to`]\n+- [`String::shrink_to`]\n+- [`OsString::shrink_to`]\n+- [`PathBuf::shrink_to`]\n+- [`BinaryHeap::shrink_to`]\n+- [`VecDeque::shrink_to`]\n+- [`HashMap::shrink_to`]\n+- [`HashSet::shrink_to`]\n+- [`task::ready!`]\n+\n+These APIs are now usable in const contexts:\n+\n+- [`std::mem::transmute`]\n+- [`[T]::first`][`slice::first`]\n+- [`[T]::split_first`][`slice::split_first`]\n+- [`[T]::last`][`slice::last`]\n+- [`[T]::split_last`][`slice::split_last`]\n+\n+Cargo\n+-----\n+\n+- [Cargo supports specifying a minimum supported Rust version in Cargo.toml.][`rust-version`]\n+  This has no effect at present on dependency version selection.\n+  We encourage crates to specify their minimum supported Rust version, and we encourage CI systems\n+  that support Rust code to include a crate's specified minimum version in the text matrix for that\n+  crate by default.\n+\n+Compatibility notes\n+-------------------\n+\n+- [Update to new argument parsing rules on Windows.][rust#87580]\n+  This adjusts Rust's standard library to match the behavior of the standard\n+  libraries for C/C++. The rules have changed slightly over time, and this PR\n+  brings us to the latest set of rules (changed in 2008).\n+- [Disallow the aapcs calling convention on aarch64][rust#88399]\n+  This was already not supported by LLVM; this change surfaces this lack of\n+  support with a better error message.\n+- [Make `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` warn by default][rust#87385]\n+- [Warn when an escaped newline skips multiple lines.][rust#87671]\n+- [Calls to `libc::getpid` / `std::process::id` from `Command::pre_exec`\n+   may return different values on glibc <= 2.24.][rust#81825]\n+   Rust now invokes the `clone3` system call directly, when available, to use new functionality\n+   available via that system call. Older versions of glibc cache the result of `getpid`, and only\n+   update that cache when calling glibc's clone/fork functions, so a direct system call bypasses\n+   that cache update. glibc 2.25 and newer no longer cache `getpid` for exactly this reason.\n+\n+Internal changes\n+----------------\n+These changes provide no direct user facing benefits, but represent significant\n+improvements to the internals and overall performance of rustc\n+and related tools.\n+\n+- [LLVM is compiled with PGO in published x86_64-unknown-linux-gnu artifacts.][rust#88069]\n+  This improves the performance of most Rust builds.\n+- [Unify representation of macros in internal data structures.][rust#88019]\n+  This change fixes a host of bugs with the handling of macros by the compiler,\n+  as well as rustdoc.\n+\n+[`std::os::unix::fs::chroot`]: https://doc.rust-lang.org/stable/std/os/unix/fs/fn.chroot.html\n+[`Iterator::intersperse`]: https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.intersperse\n+[`Iterator::intersperse_with`]: https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.intersperse\n+[`UnsafeCell::raw_get`]: https://doc.rust-lang.org/stable/std/cell/struct.UnsafeCell.html#method.raw_get\n+[`BufWriter::into_parts`]: https://doc.rust-lang.org/stable/std/io/struct.BufWriter.html#method.into_parts\n+[`core::panic::{UnwindSafe, RefUnwindSafe, AssertUnwindSafe}`]: https://github.com/rust-lang/rust/pull/84662\n+[`Vec::shrink_to`]: https://doc.rust-lang.org/stable/std/vec/struct.Vec.html#method.shrink_to\n+[`String::shrink_to`]: https://doc.rust-lang.org/stable/std/string/struct.String.html#method.shrink_to\n+[`OsString::shrink_to`]: https://doc.rust-lang.org/stable/std/ffi/struct.OsString.html#method.shrink_to\n+[`PathBuf::shrink_to`]: https://doc.rust-lang.org/stable/std/path/struct.PathBuf.html#method.shrink_to\n+[`BinaryHeap::shrink_to`]: https://doc.rust-lang.org/stable/std/collections/struct.BinaryHeap.html#method.shrink_to\n+[`VecDeque::shrink_to`]: https://doc.rust-lang.org/stable/std/collections/struct.VecDeque.html#method.shrink_to\n+[`HashMap::shrink_to`]: https://doc.rust-lang.org/stable/std/collections/hash_map/struct.HashMap.html#method.shrink_to\n+[`HashSet::shrink_to`]: https://doc.rust-lang.org/stable/std/collections/hash_set/struct.HashSet.html#method.shrink_to\n+[`task::ready!`]: https://doc.rust-lang.org/stable/std/task/macro.ready.html\n+[`std::mem::transmute`]: https://doc.rust-lang.org/stable/std/mem/fn.transmute.html\n+[`slice::first`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.first\n+[`slice::split_first`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_first\n+[`slice::last`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.last\n+[`slice::split_last`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_last\n+[`rust-version`]: https://doc.rust-lang.org/nightly/cargo/reference/manifest.html#the-rust-version-field\n+[rust#87671]: https://github.com/rust-lang/rust/pull/87671\n+[rust#86183]: https://github.com/rust-lang/rust/pull/86183\n+[rust#87385]: https://github.com/rust-lang/rust/pull/87385\n+[rust#88100]: https://github.com/rust-lang/rust/pull/88100\n+[rust#86860]: https://github.com/rust-lang/rust/pull/86860\n+[rust#84039]: https://github.com/rust-lang/rust/pull/84039\n+[rust#86492]: https://github.com/rust-lang/rust/pull/86492\n+[rust#88363]: https://github.com/rust-lang/rust/pull/88363\n+[rust#85305]: https://github.com/rust-lang/rust/pull/85305\n+[rust#87832]: https://github.com/rust-lang/rust/pull/87832\n+[rust#88069]: https://github.com/rust-lang/rust/pull/88069\n+[rust#87472]: https://github.com/rust-lang/rust/pull/87472\n+[rust#87699]: https://github.com/rust-lang/rust/pull/87699\n+[rust#87570]: https://github.com/rust-lang/rust/pull/87570\n+[rust#88023]: https://github.com/rust-lang/rust/pull/88023\n+[rust#87760]: https://github.com/rust-lang/rust/pull/87760\n+[rust#87370]: https://github.com/rust-lang/rust/pull/87370\n+[rust#87580]: https://github.com/rust-lang/rust/pull/87580\n+[rust#83342]: https://github.com/rust-lang/rust/pull/83342\n+[rust#83093]: https://github.com/rust-lang/rust/pull/83093\n+[rust#88177]: https://github.com/rust-lang/rust/pull/88177\n+[rust#88548]: https://github.com/rust-lang/rust/pull/88548\n+[rust#88551]: https://github.com/rust-lang/rust/pull/88551\n+[rust#88299]: https://github.com/rust-lang/rust/pull/88299\n+[rust#88220]: https://github.com/rust-lang/rust/pull/88220\n+[rust#85835]: https://github.com/rust-lang/rust/pull/85835\n+[rust#86879]: https://github.com/rust-lang/rust/pull/86879\n+[rust#86744]: https://github.com/rust-lang/rust/pull/86744\n+[rust#84662]: https://github.com/rust-lang/rust/pull/84662\n+[rust#86593]: https://github.com/rust-lang/rust/pull/86593\n+[rust#81050]: https://github.com/rust-lang/rust/pull/81050\n+[rust#81363]: https://github.com/rust-lang/rust/pull/81363\n+[rust#84111]: https://github.com/rust-lang/rust/pull/84111\n+[rust#85769]: https://github.com/rust-lang/rust/pull/85769#issuecomment-854363720\n+[rust#88490]: https://github.com/rust-lang/rust/pull/88490\n+[rust#88269]: https://github.com/rust-lang/rust/pull/88269\n+[rust#84176]: https://github.com/rust-lang/rust/pull/84176\n+[rust#88399]: https://github.com/rust-lang/rust/pull/88399\n+[rust#88227]: https://github.com/rust-lang/rust/pull/88227\n+[rust#88200]: https://github.com/rust-lang/rust/pull/88200\n+[rust#82776]: https://github.com/rust-lang/rust/pull/82776\n+[rust#88077]: https://github.com/rust-lang/rust/pull/88077\n+[rust#87728]: https://github.com/rust-lang/rust/pull/87728\n+[rust#87050]: https://github.com/rust-lang/rust/pull/87050\n+[rust#87619]: https://github.com/rust-lang/rust/pull/87619\n+[rust#81825]: https://github.com/rust-lang/rust/pull/81825#issuecomment-808406918\n+[rust#88019]: https://github.com/rust-lang/rust/pull/88019\n+\n Version 1.55.0 (2021-09-09)\n ============================\n "}, {"sha": "e77619882228139f12a99e700b8d289e4856837c", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -89,10 +89,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         category: ConstraintCategory,\n     ) {\n         self.prove_predicates(\n-            Some(ty::PredicateKind::Trait(ty::TraitPredicate {\n+            Some(ty::Binder::dummy(ty::PredicateKind::Trait(ty::TraitPredicate {\n                 trait_ref,\n                 constness: ty::BoundConstness::NotConst,\n-            })),\n+            }))),\n             locations,\n             category,\n         );"}, {"sha": "10544cb67397deb9f7233fd037871eb95e7b37de", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -1080,7 +1080,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     }\n \n                     self.prove_predicate(\n-                        ty::PredicateKind::WellFormed(inferred_ty.into()).to_predicate(self.tcx()),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(inferred_ty.into()))\n+                            .to_predicate(self.tcx()),\n                         Locations::All(span),\n                         ConstraintCategory::TypeAnnotation,\n                     );\n@@ -1316,7 +1317,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     obligations.obligations.push(traits::Obligation::new(\n                         ObligationCause::dummy(),\n                         param_env,\n-                        ty::PredicateKind::WellFormed(revealed_ty.into()).to_predicate(infcx.tcx),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(revealed_ty.into()))\n+                            .to_predicate(infcx.tcx),\n                     ));\n                     obligations.add(\n                         infcx\n@@ -1599,7 +1601,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 self.check_call_dest(body, term, &sig, destination, term_location);\n \n                 self.prove_predicates(\n-                    sig.inputs_and_output.iter().map(|ty| ty::PredicateKind::WellFormed(ty.into())),\n+                    sig.inputs_and_output\n+                        .iter()\n+                        .map(|ty| ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into()))),\n                     term_location.to_locations(),\n                     ConstraintCategory::Boring,\n                 );"}, {"sha": "be55a0c868a462c38a37a429c12fe178911d59ff", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -96,7 +96,6 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         let arg_tys = sig.inputs();\n         let ret_ty = sig.output();\n         let name = tcx.item_name(def_id);\n-        let name_str = &*name.as_str();\n \n         let llret_ty = self.layout_of(ret_ty).llvm_type(self);\n         let result = PlaceRef::new_sized(llresult, fn_abi.ret.layout);\n@@ -230,9 +229,14 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                                 &[args[0].immediate(), y],\n                             )\n                         }\n-                        sym::ctlz_nonzero | sym::cttz_nonzero => {\n+                        sym::ctlz_nonzero => {\n                             let y = self.const_bool(true);\n-                            let llvm_name = &format!(\"llvm.{}.i{}\", &name_str[..4], width);\n+                            let llvm_name = &format!(\"llvm.ctlz.i{}\", width);\n+                            self.call_intrinsic(llvm_name, &[args[0].immediate(), y])\n+                        }\n+                        sym::cttz_nonzero => {\n+                            let y = self.const_bool(true);\n+                            let llvm_name = &format!(\"llvm.cttz.i{}\", width);\n                             self.call_intrinsic(llvm_name, &[args[0].immediate(), y])\n                         }\n                         sym::ctpop => self.call_intrinsic(\n@@ -353,7 +357,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 return;\n             }\n \n-            _ if name_str.starts_with(\"simd_\") => {\n+            _ if name.as_str().starts_with(\"simd_\") => {\n                 match generic_simd_intrinsic(self, name, callee_ty, args, ret_ty, llret_ty, span) {\n                     Ok(llval) => llval,\n                     Err(()) => return,\n@@ -843,7 +847,6 @@ fn generic_simd_intrinsic(\n     let sig =\n         tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), callee_ty.fn_sig(tcx));\n     let arg_tys = sig.inputs();\n-    let name_str = &*name.as_str();\n \n     if name == sym::simd_select_bitmask {\n         let in_ty = arg_tys[0];\n@@ -917,7 +920,7 @@ fn generic_simd_intrinsic(\n         ));\n     }\n \n-    if let Some(stripped) = name_str.strip_prefix(\"simd_shuffle\") {\n+    if let Some(stripped) = name.as_str().strip_prefix(\"simd_shuffle\") {\n         // If this intrinsic is the older \"simd_shuffleN\" form, simply parse the integer.\n         // If there is no suffix, use the index array length.\n         let n: u64 = if stripped.is_empty() {"}, {"sha": "5cb97198765fe4411a8e691f1990e7e9e2a850c6", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -577,7 +577,7 @@ impl server::Literal for Rustc<'_> {\n             }\n \n             // Synthesize a new symbol that includes the minus sign.\n-            let symbol = Symbol::intern(&s[..1 + lit.symbol.len()]);\n+            let symbol = Symbol::intern(&s[..1 + lit.symbol.as_str().len()]);\n             lit = token::Lit::new(lit.kind, symbol, lit.suffix);\n         }\n "}, {"sha": "b5c0307255771d3a4d9da59c21e6ca98df076488", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -669,8 +669,10 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n         self.obligations.push(Obligation {\n             cause: self.cause.clone(),\n             param_env: self.param_env,\n-            predicate: ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(sup, sub))\n-                .to_predicate(self.infcx.tcx),\n+            predicate: ty::Binder::dummy(ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(\n+                sup, sub,\n+            )))\n+            .to_predicate(self.infcx.tcx),\n             recursion_depth: 0,\n         });\n     }"}, {"sha": "3f54247ecef211bcd48e6e621b05d39037193e15", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -360,7 +360,8 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n             self.obligations.push(Obligation::new(\n                 self.trace.cause.clone(),\n                 self.param_env,\n-                ty::PredicateKind::WellFormed(b_ty.into()).to_predicate(self.infcx.tcx),\n+                ty::Binder::dummy(ty::PredicateKind::WellFormed(b_ty.into()))\n+                    .to_predicate(self.infcx.tcx),\n             ));\n         }\n \n@@ -463,7 +464,7 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n         self.obligations.push(Obligation::new(\n             self.trace.cause.clone(),\n             self.param_env,\n-            predicate.to_predicate(self.tcx()),\n+            ty::Binder::dummy(predicate).to_predicate(self.tcx()),\n         ));\n     }\n }"}, {"sha": "8ef0d132cf09fc5692a956adcd3c0c9bfe0da086", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -97,11 +97,11 @@ impl TypeRelation<'tcx> for Sub<'combine, 'infcx, 'tcx> {\n                 self.fields.obligations.push(Obligation::new(\n                     self.fields.trace.cause.clone(),\n                     self.fields.param_env,\n-                    ty::PredicateKind::Subtype(ty::SubtypePredicate {\n+                    ty::Binder::dummy(ty::PredicateKind::Subtype(ty::SubtypePredicate {\n                         a_is_expected: self.a_is_expected,\n                         a,\n                         b,\n-                    })\n+                    }))\n                     .to_predicate(self.tcx()),\n                 ));\n "}, {"sha": "dce4a87b041189a49910765f763ef7798d781a77", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -35,7 +35,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n                 cause,\n                 recursion_depth: 0,\n                 param_env,\n-                predicate: trait_ref.without_const().to_predicate(infcx.tcx),\n+                predicate: ty::Binder::dummy(trait_ref).without_const().to_predicate(infcx.tcx),\n             },\n         );\n     }"}, {"sha": "30d5613d5820d8664817bab71e3ed0d836ada1f1", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -231,6 +231,7 @@ impl Elaborator<'tcx> {\n                                 None\n                             }\n                         })\n+                        .map(ty::Binder::dummy)\n                         .map(|predicate_kind| predicate_kind.to_predicate(tcx))\n                         .filter(|&predicate| visited.insert(predicate))\n                         .map(|predicate| {"}, {"sha": "2fc3759968fd3531d8c63857a98cbda411de3a00", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -1,6 +1,7 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(internal_output_capture)]\n+#![feature(thread_spawn_unchecked)]\n #![feature(nll)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]"}, {"sha": "24975702b875db76ae25c7c1bb6bc3cb365f2fc1", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -115,25 +115,11 @@ fn get_stack_size() -> Option<usize> {\n /// for `'static` bounds.\n #[cfg(not(parallel_compiler))]\n pub fn scoped_thread<F: FnOnce() -> R + Send, R: Send>(cfg: thread::Builder, f: F) -> R {\n-    struct Ptr(*mut ());\n-    unsafe impl Send for Ptr {}\n-    unsafe impl Sync for Ptr {}\n-\n-    let mut f = Some(f);\n-    let run = Ptr(&mut f as *mut _ as *mut ());\n-    let mut result = None;\n-    let result_ptr = Ptr(&mut result as *mut _ as *mut ());\n-\n-    let thread = cfg.spawn(move || {\n-        let _ = (&run, &result_ptr);\n-        let run = unsafe { (*(run.0 as *mut Option<F>)).take().unwrap() };\n-        let result = unsafe { &mut *(result_ptr.0 as *mut Option<R>) };\n-        *result = Some(run());\n-    });\n-\n-    match thread.unwrap().join() {\n-        Ok(()) => result.unwrap(),\n-        Err(p) => panic::resume_unwind(p),\n+    // SAFETY: join() is called immediately, so any closure captures are still\n+    // alive.\n+    match unsafe { cfg.spawn_unchecked(f) }.unwrap().join() {\n+        Ok(v) => v,\n+        Err(e) => panic::resume_unwind(e),\n     }\n }\n "}, {"sha": "b3ae76d987167fe84fa32c13f7ed621f42c96aac", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -769,12 +769,6 @@ pub trait ToPolyTraitRef<'tcx> {\n     fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;\n }\n \n-impl<'tcx> ToPolyTraitRef<'tcx> for TraitRef<'tcx> {\n-    fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {\n-        ty::Binder::dummy(*self)\n-    }\n-}\n-\n impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {\n     fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {\n         self.map_bound_ref(|trait_pred| trait_pred.trait_ref)\n@@ -792,23 +786,6 @@ impl ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {\n     }\n }\n \n-impl ToPredicate<'tcx> for PredicateKind<'tcx> {\n-    #[inline(always)]\n-    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        tcx.mk_predicate(Binder::dummy(self))\n-    }\n-}\n-\n-impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<TraitRef<'tcx>> {\n-    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        PredicateKind::Trait(ty::TraitPredicate {\n-            trait_ref: self.value,\n-            constness: self.constness,\n-        })\n-        .to_predicate(tcx)\n-    }\n-}\n-\n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<PolyTraitRef<'tcx>> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.value"}, {"sha": "d3094b3e6ff4d74ccb3ea809de72d01ebcd1bcf2", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -844,8 +844,11 @@ impl<'tcx> TraitRef<'tcx> {\n \n     /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`\n     /// are the parameters defined on trait.\n-    pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> TraitRef<'tcx> {\n-        TraitRef { def_id, substs: InternalSubsts::identity_for_item(tcx, def_id) }\n+    pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {\n+        ty::Binder::dummy(TraitRef {\n+            def_id,\n+            substs: InternalSubsts::identity_for_item(tcx, def_id),\n+        })\n     }\n \n     #[inline]"}, {"sha": "624390a406ff2bbcfbbbf3b298f6d1e124dec01c", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -1547,6 +1547,20 @@ impl<'a> Parser<'a> {\n         self.expect(&token::Not)?; // `!`\n \n         let ident = self.parse_ident()?;\n+\n+        if self.eat(&token::Not) {\n+            // Handle macro_rules! foo!\n+            let span = self.prev_token.span;\n+            self.struct_span_err(span, \"macro names aren't followed by a `!`\")\n+                .span_suggestion(\n+                    span,\n+                    \"remove the `!`\",\n+                    \"\".to_owned(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+        }\n+\n         let body = self.parse_mac_args()?;\n         self.eat_semi_for_macro_if_needed(&body);\n         self.complain_if_pub_macro(vis, true);"}, {"sha": "7cb4e18398cdcddf5cecc90dda0747f30d642349", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -1618,7 +1618,7 @@ impl fmt::Display for MacroRulesNormalizedIdent {\n pub struct Symbol(SymbolIndex);\n \n rustc_index::newtype_index! {\n-    pub struct SymbolIndex { .. }\n+    struct SymbolIndex { .. }\n }\n \n impl Symbol {\n@@ -1644,10 +1644,6 @@ impl Symbol {\n         self.0.as_u32()\n     }\n \n-    pub fn len(self) -> usize {\n-        with_session_globals(|session_globals| session_globals.symbol_interner.get(self).len())\n-    }\n-\n     pub fn is_empty(self) -> bool {\n         self == kw::Empty\n     }"}, {"sha": "a89796f172c5a588c398ce440034b07936bd2857", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n         let obligation = traits::Obligation::new(\n             cause.clone(),\n             self.param_env,\n-            trait_ref.without_const().to_predicate(tcx),\n+            ty::Binder::dummy(trait_ref).without_const().to_predicate(tcx),\n         );\n         if !self.infcx.predicate_may_hold(&obligation) {\n             debug!(\"overloaded_deref_ty: cannot match obligation\");"}, {"sha": "8fb4eb641c26a913af2e04053b1e591babf53452", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -120,7 +120,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n             cause: traits::ObligationCause::dummy(),\n             param_env,\n             recursion_depth: 0,\n-            predicate: trait_ref.without_const().to_predicate(self.tcx),\n+            predicate: ty::Binder::dummy(trait_ref).without_const().to_predicate(self.tcx),\n         };\n         self.evaluate_obligation(&obligation).unwrap_or(traits::EvaluationResult::EvaluatedToErr)\n     }"}, {"sha": "9d1f409d69c665285be51a558fcfc54581800172", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -726,7 +726,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             let new_obligation = Obligation::new(\n                 ObligationCause::dummy(),\n                 param_env,\n-                new_trait_ref.without_const().to_predicate(self.tcx),\n+                ty::Binder::dummy(new_trait_ref).without_const().to_predicate(self.tcx),\n             );\n \n             if self.predicate_must_hold_modulo_regions(&new_obligation) {"}, {"sha": "465d1465d5d3538325def6ae9dcf226b730f9aa6", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -418,7 +418,8 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                 | ty::PredicateKind::Coerce(_)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..) => {\n-                    let pred = infcx.replace_bound_vars_with_placeholders(binder);\n+                    let pred =\n+                        ty::Binder::dummy(infcx.replace_bound_vars_with_placeholders(binder));\n                     ProcessResult::Changed(mk_pending(vec![\n                         obligation.with(pred.to_predicate(self.selcx.tcx())),\n                     ]))"}, {"sha": "b3c9cf4c173ecdc72fb2c3a12354b7eb3bff8594", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -140,7 +140,8 @@ pub fn type_known_to_meet_bound_modulo_regions<'a, 'tcx>(\n         infcx.tcx.def_path_str(def_id)\n     );\n \n-    let trait_ref = ty::TraitRef { def_id, substs: infcx.tcx.mk_substs_trait(ty, &[]) };\n+    let trait_ref =\n+        ty::Binder::dummy(ty::TraitRef { def_id, substs: infcx.tcx.mk_substs_trait(ty, &[]) });\n     let obligation = Obligation {\n         param_env,\n         cause: ObligationCause::misc(span, hir::CRATE_HIR_ID),"}, {"sha": "0bb00dfeb43ad92fd54f6d035dd4d545403df7f7", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -250,7 +250,7 @@ fn predicates_reference_self(\n     trait_def_id: DefId,\n     supertraits_only: bool,\n ) -> SmallVec<[Span; 1]> {\n-    let trait_ref = ty::Binder::dummy(ty::TraitRef::identity(tcx, trait_def_id));\n+    let trait_ref = ty::TraitRef::identity(tcx, trait_def_id);\n     let predicates = if supertraits_only {\n         tcx.super_predicates_of(trait_def_id)\n     } else {\n@@ -554,11 +554,11 @@ fn object_ty_for_trait<'tcx>(\n \n     let trait_ref = ty::TraitRef::identity(tcx, trait_def_id);\n \n-    let trait_predicate = ty::Binder::dummy(ty::ExistentialPredicate::Trait(\n-        ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref),\n-    ));\n+    let trait_predicate = trait_ref.map_bound(|trait_ref| {\n+        ty::ExistentialPredicate::Trait(ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref))\n+    });\n \n-    let mut associated_types = traits::supertraits(tcx, ty::Binder::dummy(trait_ref))\n+    let mut associated_types = traits::supertraits(tcx, trait_ref)\n         .flat_map(|super_trait_ref| {\n             tcx.associated_items(super_trait_ref.def_id())\n                 .in_definition_order()\n@@ -671,10 +671,10 @@ fn receiver_is_dispatchable<'tcx>(\n         let param_env = tcx.param_env(method.def_id);\n \n         // Self: Unsize<U>\n-        let unsize_predicate = ty::TraitRef {\n+        let unsize_predicate = ty::Binder::dummy(ty::TraitRef {\n             def_id: unsize_did,\n             substs: tcx.mk_substs_trait(tcx.types.self_param, &[unsized_self_ty.into()]),\n-        }\n+        })\n         .without_const()\n         .to_predicate(tcx);\n \n@@ -689,7 +689,9 @@ fn receiver_is_dispatchable<'tcx>(\n                     }\n                 });\n \n-            ty::TraitRef { def_id: unsize_did, substs }.without_const().to_predicate(tcx)\n+            ty::Binder::dummy(ty::TraitRef { def_id: unsize_did, substs })\n+                .without_const()\n+                .to_predicate(tcx)\n         };\n \n         let caller_bounds: Vec<Predicate<'tcx>> = param_env\n@@ -703,10 +705,10 @@ fn receiver_is_dispatchable<'tcx>(\n \n     // Receiver: DispatchFromDyn<Receiver[Self => U]>\n     let obligation = {\n-        let predicate = ty::TraitRef {\n+        let predicate = ty::Binder::dummy(ty::TraitRef {\n             def_id: dispatch_from_dyn_did,\n             substs: tcx.mk_substs_trait(receiver_ty, &[unsized_receiver_ty.into()]),\n-        }\n+        })\n         .without_const()\n         .to_predicate(tcx);\n \n@@ -789,8 +791,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n \n                     // Compute supertraits of current trait lazily.\n                     if self.supertraits.is_none() {\n-                        let trait_ref =\n-                            ty::Binder::dummy(ty::TraitRef::identity(self.tcx, self.trait_def_id));\n+                        let trait_ref = ty::TraitRef::identity(self.tcx, self.trait_def_id);\n                         self.supertraits = Some(\n                             traits::supertraits(self.tcx, trait_ref).map(|t| t.def_id()).collect(),\n                         );"}, {"sha": "baf6b725648df4b0bd7209a47177f555b4305834", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -27,7 +27,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, WithConstness};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_span::symbol::sym;\n \n use std::collections::BTreeMap;\n@@ -1028,7 +1028,7 @@ fn normalize_to_error<'a, 'tcx>(\n     cause: ObligationCause<'tcx>,\n     depth: usize,\n ) -> NormalizedTy<'tcx> {\n-    let trait_ref = projection_ty.trait_ref(selcx.tcx()).to_poly_trait_ref();\n+    let trait_ref = ty::Binder::dummy(projection_ty.trait_ref(selcx.tcx()));\n     let trait_obligation = Obligation {\n         cause,\n         recursion_depth: depth,\n@@ -1290,7 +1290,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n \n     // If we are resolving `<T as TraitRef<...>>::Item == Type`,\n     // start out by selecting the predicate `T as TraitRef<...>`:\n-    let poly_trait_ref = obligation.predicate.trait_ref(selcx.tcx()).to_poly_trait_ref();\n+    let poly_trait_ref = ty::Binder::dummy(obligation.predicate.trait_ref(selcx.tcx()));\n     let trait_obligation = obligation.with(poly_trait_ref.to_poly_trait_predicate());\n     let _ = selcx.infcx().commit_if_ok(|_| {\n         let impl_source = match selcx.select(&trait_obligation) {"}, {"sha": "9e1211336a4b01472026ee7a2cb0d53ecdfb3fac", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -141,6 +141,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             let placeholder_trait_predicate =\n                 self.infcx().replace_bound_vars_with_placeholders(trait_predicate);\n             let placeholder_self_ty = placeholder_trait_predicate.self_ty();\n+            let placeholder_trait_predicate = ty::Binder::dummy(placeholder_trait_predicate);\n             let (def_id, substs) = match *placeholder_self_ty.kind() {\n                 ty::Projection(proj) => (proj.item_def_id, proj.substs),\n                 ty::Opaque(def_id, substs) => (def_id, substs),\n@@ -164,7 +165,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             obligations.extend(self.infcx.commit_if_ok(|_| {\n                 self.infcx\n                     .at(&obligation.cause, obligation.param_env)\n-                    .sup(placeholder_trait_predicate.trait_ref.to_poly_trait_ref(), candidate.value)\n+                    .sup(placeholder_trait_predicate.to_poly_trait_ref(), candidate.value)\n                     .map(|InferOk { obligations, .. }| obligations)\n                     .map_err(|_| Unimplemented)\n             })?);\n@@ -646,7 +647,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             obligations.push(Obligation::new(\n                 obligation.cause.clone(),\n                 obligation.param_env,\n-                ty::PredicateKind::ClosureKind(closure_def_id, substs, kind)\n+                ty::Binder::dummy(ty::PredicateKind::ClosureKind(closure_def_id, substs, kind))\n                     .to_predicate(self.tcx()),\n             ));\n         }\n@@ -898,10 +899,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n \n                 // We can only make objects from sized types.\n-                let tr = ty::TraitRef::new(\n+                let tr = ty::Binder::dummy(ty::TraitRef::new(\n                     tcx.require_lang_item(LangItem::Sized, None),\n                     tcx.mk_substs_trait(source, &[]),\n-                );\n+                ));\n                 nested.push(predicate_to_obligation(tr.without_const().to_predicate(tcx)));\n \n                 // If the type is `Foo + 'a`, ensure that the type"}, {"sha": "ed49abbbedc92dfe8415a16f377c45f0c84ba567", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -248,7 +248,7 @@ pub fn predicate_for_trait_ref<'tcx>(\n         cause,\n         param_env,\n         recursion_depth,\n-        predicate: trait_ref.without_const().to_predicate(tcx),\n+        predicate: ty::Binder::dummy(trait_ref).without_const().to_predicate(tcx),\n     }\n }\n "}, {"sha": "cb47ba9c360da14401081cfc132e70e61a678641", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -349,7 +349,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                         new_cause,\n                         depth,\n                         param_env,\n-                        ty::PredicateKind::WellFormed(arg).to_predicate(tcx),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)).to_predicate(tcx),\n                     )\n                 }),\n         );\n@@ -399,7 +399,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                         cause.clone(),\n                         depth,\n                         param_env,\n-                        ty::PredicateKind::WellFormed(arg).to_predicate(tcx),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)).to_predicate(tcx),\n                     )\n                 }),\n         );\n@@ -416,7 +416,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                 cause,\n                 self.recursion_depth,\n                 self.param_env,\n-                trait_ref.without_const().to_predicate(self.infcx.tcx),\n+                ty::Binder::dummy(trait_ref).without_const().to_predicate(self.infcx.tcx),\n             ));\n         }\n     }\n@@ -443,9 +443,9 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                             let obligations = self.nominal_obligations(uv.def.did, substs);\n                             self.out.extend(obligations);\n \n-                            let predicate = ty::PredicateKind::ConstEvaluatable(\n+                            let predicate = ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(\n                                 ty::Unevaluated::new(uv.def, substs),\n-                            )\n+                            ))\n                             .to_predicate(self.tcx());\n                             let cause = self.cause(traits::MiscObligation);\n                             self.out.push(traits::Obligation::with_depth(\n@@ -469,8 +469,10 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                                     cause,\n                                     self.recursion_depth,\n                                     self.param_env,\n-                                    ty::PredicateKind::WellFormed(resolved_constant.into())\n-                                        .to_predicate(self.tcx()),\n+                                    ty::Binder::dummy(ty::PredicateKind::WellFormed(\n+                                        resolved_constant.into(),\n+                                    ))\n+                                    .to_predicate(self.tcx()),\n                                 ));\n                             }\n                         }\n@@ -556,8 +558,10 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                             cause,\n                             depth,\n                             param_env,\n-                            ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(rty, r))\n-                                .to_predicate(self.tcx()),\n+                            ty::Binder::dummy(ty::PredicateKind::TypeOutlives(\n+                                ty::OutlivesPredicate(rty, r),\n+                            ))\n+                            .to_predicate(self.tcx()),\n                         ));\n                     }\n                 }\n@@ -646,7 +650,8 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                                 cause.clone(),\n                                 depth,\n                                 param_env,\n-                                ty::PredicateKind::ObjectSafe(did).to_predicate(tcx),\n+                                ty::Binder::dummy(ty::PredicateKind::ObjectSafe(did))\n+                                    .to_predicate(tcx),\n                             )\n                         }));\n                     }\n@@ -673,7 +678,8 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                             cause,\n                             self.recursion_depth,\n                             param_env,\n-                            ty::PredicateKind::WellFormed(ty.into()).to_predicate(self.tcx()),\n+                            ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into()))\n+                                .to_predicate(self.tcx()),\n                         ));\n                     } else {\n                         // Yes, resolved, proceed with the result."}, {"sha": "f954cab240ca20db69d31a7f38a8c328db404583", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -156,7 +156,8 @@ impl AscribeUserTypeCx<'me, 'tcx> {\n             self.relate(self_ty, Variance::Invariant, impl_self_ty)?;\n \n             self.prove_predicate(\n-                ty::PredicateKind::WellFormed(impl_self_ty.into()).to_predicate(self.tcx()),\n+                ty::Binder::dummy(ty::PredicateKind::WellFormed(impl_self_ty.into()))\n+                    .to_predicate(self.tcx()),\n                 span,\n             );\n         }\n@@ -173,7 +174,7 @@ impl AscribeUserTypeCx<'me, 'tcx> {\n         // type were ill-formed but did not appear in `ty`,\n         // which...could happen with normalization...\n         self.prove_predicate(\n-            ty::PredicateKind::WellFormed(ty.into()).to_predicate(self.tcx()),\n+            ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into())).to_predicate(self.tcx()),\n             span,\n         );\n         Ok(())"}, {"sha": "6a231e719e66462a9751bd69392442e3648a124a", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -524,13 +524,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 for o in obligations {\n                     match o.predicate.kind().skip_binder() {\n                         ty::PredicateKind::Trait(t) => {\n-                            let pred = ty::PredicateKind::Trait(ty::TraitPredicate {\n-                                trait_ref: ty::TraitRef {\n-                                    def_id: t.def_id(),\n-                                    substs: self.infcx.tcx.mk_substs_trait(outer_ty, &[]),\n-                                },\n-                                constness: t.constness,\n-                            });\n+                            let pred =\n+                                ty::Binder::dummy(ty::PredicateKind::Trait(ty::TraitPredicate {\n+                                    trait_ref: ty::TraitRef {\n+                                        def_id: t.def_id(),\n+                                        substs: self.infcx.tcx.mk_substs_trait(outer_ty, &[]),\n+                                    },\n+                                    constness: t.constness,\n+                                }));\n                             let obl = Obligation::new(\n                                 o.cause.clone(),\n                                 self.param_env,"}, {"sha": "ef18c1e7779d862a4a9710eb6cb1c80a98bb02b1", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -256,10 +256,10 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                     obligations.push(Obligation::new(\n                         self.cause.clone(),\n                         self.param_env,\n-                        ty::PredicateKind::Coerce(ty::CoercePredicate {\n+                        ty::Binder::dummy(ty::PredicateKind::Coerce(ty::CoercePredicate {\n                             a: source_ty,\n                             b: target_ty,\n-                        })\n+                        }))\n                         .to_predicate(self.tcx()),\n                     ));\n                 }"}, {"sha": "553f5ed8a0ca4f358cf9c59e1b7241137652dd0b", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -585,7 +585,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.register_predicate(traits::Obligation::new(\n             cause,\n             self.param_env,\n-            ty::PredicateKind::WellFormed(arg).to_predicate(self.tcx),\n+            ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)).to_predicate(self.tcx),\n         ));\n     }\n "}, {"sha": "113d495f0ce93c499238702926154ab5afb2d1bc", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -21,7 +21,7 @@ use rustc_infer::infer::{self, InferOk};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TypeFoldable, WithConstness};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TypeFoldable, WithConstness};\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n@@ -331,7 +331,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let trait_ref = ty::TraitRef::new(trait_def_id, substs);\n \n         // Construct an obligation\n-        let poly_trait_ref = trait_ref.to_poly_trait_ref();\n+        let poly_trait_ref = ty::Binder::dummy(trait_ref);\n         let obligation = traits::Obligation::misc(\n             span,\n             self.body_id,\n@@ -413,7 +413,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         obligations.push(traits::Obligation::new(\n             cause,\n             self.param_env,\n-            ty::PredicateKind::WellFormed(method_ty.into()).to_predicate(tcx),\n+            ty::Binder::dummy(ty::PredicateKind::WellFormed(method_ty.into())).to_predicate(tcx),\n         ));\n \n         let callee = MethodCallee { def_id, substs: trait_ref.substs, sig: fn_sig };"}, {"sha": "5aa579f33a9d2148448ff80a0cd4c64b1d664be0", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -21,9 +21,7 @@ use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n use rustc_middle::middle::stability;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{\n-    self, ParamEnvAnd, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n-};\n+use rustc_middle::ty::{self, ParamEnvAnd, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_session::lint;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::lev_distance::{find_best_match_for_name, lev_distance};\n@@ -967,7 +965,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n         if self.tcx.is_trait_alias(trait_def_id) {\n             // For trait aliases, assume all super-traits are relevant.\n-            let bounds = iter::once(trait_ref.to_poly_trait_ref());\n+            let bounds = iter::once(ty::Binder::dummy(trait_ref));\n             self.elaborate_bounds(bounds, |this, new_trait_ref, item| {\n                 let new_trait_ref = this.erase_late_bound_regions(new_trait_ref);\n \n@@ -1372,7 +1370,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         trait_ref: ty::TraitRef<'tcx>,\n     ) -> traits::SelectionResult<'tcx, traits::Selection<'tcx>> {\n         let cause = traits::ObligationCause::misc(self.span, self.body_id);\n-        let predicate = trait_ref.to_poly_trait_ref().to_poly_trait_predicate();\n+        let predicate = ty::Binder::dummy(trait_ref).to_poly_trait_predicate();\n         let obligation = traits::Obligation::new(cause, self.param_env, predicate);\n         traits::SelectionContext::new(self).select(&obligation)\n     }\n@@ -1470,7 +1468,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                             }\n                         }\n                     }\n-                    let predicate = trait_ref.without_const().to_predicate(self.tcx);\n+                    let predicate =\n+                        ty::Binder::dummy(trait_ref).without_const().to_predicate(self.tcx);\n                     let obligation = traits::Obligation::new(cause, self.param_env, predicate);\n                     if !self.predicate_may_hold(&obligation) {\n                         result = ProbeResult::NoMatch;"}, {"sha": "91a164ce063ea6cae022e8254e572e8149338bb9", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -12,9 +12,7 @@ use rustc_hir::{ExprKind, Node, QPath};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::ty::fast_reject::simplify_type;\n use rustc_middle::ty::print::with_crate_prefix;\n-use rustc_middle::ty::{\n-    self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n-};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_span::lev_distance;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{source_map, FileName, Span};\n@@ -53,7 +51,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 .into()],\n                         );\n                         let trait_ref = ty::TraitRef::new(fn_once, fn_once_substs);\n-                        let poly_trait_ref = trait_ref.to_poly_trait_ref();\n+                        let poly_trait_ref = ty::Binder::dummy(trait_ref);\n                         let obligation = Obligation::misc(\n                             span,\n                             self.body_id,"}, {"sha": "917bf4ecd8c4a9117a5e80a6421beadb7836d0e4", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -602,7 +602,78 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        debug!(\"For closure={:?}, min_captures={:#?}\", closure_def_id, root_var_min_capture_list);\n+        debug!(\n+            \"For closure={:?}, min_captures before sorting={:?}\",\n+            closure_def_id, root_var_min_capture_list\n+        );\n+\n+        // Now that we have the minimized list of captures, sort the captures by field id.\n+        // This causes the closure to capture the upvars in the same order as the fields are\n+        // declared which is also the drop order. Thus, in situations where we capture all the\n+        // fields of some type, the obserable drop order will remain the same as it previously\n+        // was even though we're dropping each capture individually.\n+        // See https://github.com/rust-lang/project-rfc-2229/issues/42 and\n+        // `src/test/ui/closures/2229_closure_analysis/preserve_field_drop_order.rs`.\n+        for (_, captures) in &mut root_var_min_capture_list {\n+            captures.sort_by(|capture1, capture2| {\n+                for (p1, p2) in capture1.place.projections.iter().zip(&capture2.place.projections) {\n+                    // We do not need to look at the `Projection.ty` fields here because at each\n+                    // step of the iteration, the projections will either be the same and therefore\n+                    // the types must be as well or the current projection will be different and\n+                    // we will return the result of comparing the field indexes.\n+                    match (p1.kind, p2.kind) {\n+                        // Paths are the same, continue to next loop.\n+                        (ProjectionKind::Deref, ProjectionKind::Deref) => {}\n+                        (ProjectionKind::Field(i1, _), ProjectionKind::Field(i2, _))\n+                            if i1 == i2 => {}\n+\n+                        // Fields are different, compare them.\n+                        (ProjectionKind::Field(i1, _), ProjectionKind::Field(i2, _)) => {\n+                            return i1.cmp(&i2);\n+                        }\n+\n+                        // We should have either a pair of `Deref`s or a pair of `Field`s.\n+                        // Anything else is a bug.\n+                        (\n+                            l @ (ProjectionKind::Deref | ProjectionKind::Field(..)),\n+                            r @ (ProjectionKind::Deref | ProjectionKind::Field(..)),\n+                        ) => bug!(\n+                            \"ProjectionKinds Deref and Field were mismatched: ({:?}, {:?})\",\n+                            l,\n+                            r\n+                        ),\n+                        (\n+                            l\n+                            @\n+                            (ProjectionKind::Index\n+                            | ProjectionKind::Subslice\n+                            | ProjectionKind::Deref\n+                            | ProjectionKind::Field(..)),\n+                            r\n+                            @\n+                            (ProjectionKind::Index\n+                            | ProjectionKind::Subslice\n+                            | ProjectionKind::Deref\n+                            | ProjectionKind::Field(..)),\n+                        ) => bug!(\n+                            \"ProjectionKinds Index or Subslice were unexpected: ({:?}, {:?})\",\n+                            l,\n+                            r\n+                        ),\n+                    }\n+                }\n+\n+                unreachable!(\n+                    \"we captured two identical projections: capture1 = {:?}, capture2 = {:?}\",\n+                    capture1, capture2\n+                );\n+            });\n+        }\n+\n+        debug!(\n+            \"For closure={:?}, min_captures after sorting={:#?}\",\n+            closure_def_id, root_var_min_capture_list\n+        );\n         typeck_results.closure_min_captures.insert(closure_def_id, root_var_min_capture_list);\n     }\n "}, {"sha": "48204590468a0af0e8faa945446daf3b5390164e", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -593,10 +593,10 @@ fn check_type_defn<'tcx, F>(\n                 fcx.register_predicate(traits::Obligation::new(\n                     cause,\n                     fcx.param_env,\n-                    ty::PredicateKind::ConstEvaluatable(ty::Unevaluated::new(\n+                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(ty::Unevaluated::new(\n                         ty::WithOptConstParam::unknown(discr_def_id.to_def_id()),\n                         discr_substs,\n-                    ))\n+                    )))\n                     .to_predicate(tcx),\n                 ));\n             }\n@@ -1204,10 +1204,10 @@ fn receiver_is_implemented(\n     cause: ObligationCause<'tcx>,\n     receiver_ty: Ty<'tcx>,\n ) -> bool {\n-    let trait_ref = ty::TraitRef {\n+    let trait_ref = ty::Binder::dummy(ty::TraitRef {\n         def_id: receiver_trait_def_id,\n         substs: fcx.tcx.mk_substs_trait(receiver_ty, &[]),\n-    };\n+    });\n \n     let obligation = traits::Obligation::new(\n         cause,"}, {"sha": "51f9f459af1c56390e1e37ffe92633f55eccc64b", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -40,7 +40,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::Discr;\n use rustc_middle::ty::util::IntTypeExt;\n-use rustc_middle::ty::{self, AdtKind, Const, DefIdTree, ToPolyTraitRef, Ty, TyCtxt};\n+use rustc_middle::ty::{self, AdtKind, Const, DefIdTree, Ty, TyCtxt};\n use rustc_middle::ty::{ReprOptions, ToPredicate, WithConstness};\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n@@ -2042,7 +2042,9 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n             match item.kind {\n                 ItemKind::Impl(ref impl_) => {\n                     if impl_.defaultness.is_default() {\n-                        is_default_impl_trait = tcx.impl_trait_ref(def_id);\n+                        is_default_impl_trait = tcx\n+                            .impl_trait_ref(def_id)\n+                            .map(|trait_ref| ty::Binder::dummy(trait_ref));\n                     }\n                     &impl_.generics\n                 }\n@@ -2122,10 +2124,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n     // (see below). Recall that a default impl is not itself an impl, but rather a\n     // set of defaults that can be incorporated into another impl.\n     if let Some(trait_ref) = is_default_impl_trait {\n-        predicates.insert((\n-            trait_ref.to_poly_trait_ref().without_const().to_predicate(tcx),\n-            tcx.def_span(def_id),\n-        ));\n+        predicates.insert((trait_ref.without_const().to_predicate(tcx), tcx.def_span(def_id)));\n     }\n \n     // Collect the region predicates that were declared inline as\n@@ -2238,8 +2237,10 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                         }\n                         _ => bug!(),\n                     };\n-                    let pred = ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(r1, r2))\n-                        .to_predicate(icx.tcx);\n+                    let pred = ty::Binder::dummy(ty::PredicateKind::RegionOutlives(\n+                        ty::OutlivesPredicate(r1, r2),\n+                    ))\n+                    .to_predicate(icx.tcx);\n \n                     (pred, span)\n                 }))\n@@ -2304,7 +2305,8 @@ fn const_evaluatable_predicates_of<'tcx>(\n                 assert_eq!(uv.promoted, None);\n                 let span = self.tcx.hir().span(c.hir_id);\n                 self.preds.insert((\n-                    ty::PredicateKind::ConstEvaluatable(uv.shrink()).to_predicate(self.tcx),\n+                    ty::Binder::dummy(ty::PredicateKind::ConstEvaluatable(uv.shrink()))\n+                        .to_predicate(self.tcx),\n                     span,\n                 ));\n             }"}, {"sha": "39bcf8999323d7fb7a9a877cda60ee0d4b355bdb", "filename": "compiler/rustc_typeck/src/hir_wf_check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fhir_wf_check.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -83,7 +83,8 @@ fn diagnostic_hir_wf_check<'tcx>(\n                     traits::Obligation::new(\n                         cause,\n                         self.param_env,\n-                        ty::PredicateKind::WellFormed(tcx_ty.into()).to_predicate(self.tcx),\n+                        ty::Binder::dummy(ty::PredicateKind::WellFormed(tcx_ty.into()))\n+                            .to_predicate(self.tcx),\n                     ),\n                 );\n "}, {"sha": "9c6efffdaf0fe3d1d043d784c58143ac4281f2aa", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -104,13 +104,15 @@ fn inferred_outlives_crate(tcx: TyCtxt<'_>, (): ()) -> CratePredicatesMap<'_> {\n                 |(ty::OutlivesPredicate(kind1, region2), &span)| {\n                     match kind1.unpack() {\n                         GenericArgKind::Type(ty1) => Some((\n-                            ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty1, region2))\n-                                .to_predicate(tcx),\n+                            ty::Binder::dummy(ty::PredicateKind::TypeOutlives(\n+                                ty::OutlivesPredicate(ty1, region2),\n+                            ))\n+                            .to_predicate(tcx),\n                             span,\n                         )),\n                         GenericArgKind::Lifetime(region1) => Some((\n-                            ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(\n-                                region1, region2,\n+                            ty::Binder::dummy(ty::PredicateKind::RegionOutlives(\n+                                ty::OutlivesPredicate(region1, region2),\n                             ))\n                             .to_predicate(tcx),\n                             span,"}, {"sha": "c5c32674eec1508ce8e88ba26a738a7f630f0838", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -631,6 +631,8 @@ impl<T> LinkedList<T> {\n     /// Returns `true` if the `LinkedList` contains an element equal to the\n     /// given value.\n     ///\n+    /// This operation should compute in *O*(*n*) time.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -656,6 +658,8 @@ impl<T> LinkedList<T> {\n     /// Provides a reference to the front element, or `None` if the list is\n     /// empty.\n     ///\n+    /// This operation should compute in *O*(1) time.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -676,6 +680,8 @@ impl<T> LinkedList<T> {\n     /// Provides a mutable reference to the front element, or `None` if the list\n     /// is empty.\n     ///\n+    /// This operation should compute in *O*(1) time.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -702,6 +708,8 @@ impl<T> LinkedList<T> {\n     /// Provides a reference to the back element, or `None` if the list is\n     /// empty.\n     ///\n+    /// This operation should compute in *O*(1) time.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -722,6 +730,8 @@ impl<T> LinkedList<T> {\n     /// Provides a mutable reference to the back element, or `None` if the list\n     /// is empty.\n     ///\n+    /// This operation should compute in *O*(1) time.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "14e3b315924188be79cd3b72350b4789c7f9744f", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -743,6 +743,7 @@ macro_rules! tool_doc {\n                 cargo.rustdocflag(\"--document-private-items\");\n                 cargo.rustdocflag(\"--enable-index-page\");\n                 cargo.rustdocflag(\"--show-type-layout\");\n+                cargo.rustdocflag(\"--generate-link-to-definition\");\n                 cargo.rustdocflag(\"-Zunstable-options\");\n                 builder.run(&mut cargo.into());\n             }"}, {"sha": "8135d4a2085dd4c3f8838b00f302bbfdbc2dc47e", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -64,7 +64,11 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             .instantiate(self.cx.tcx, impl_substs)\n                             .predicates\n                             .into_iter()\n-                            .chain(Some(trait_ref.without_const().to_predicate(infcx.tcx)));\n+                            .chain(Some(\n+                                ty::Binder::dummy(trait_ref)\n+                                    .without_const()\n+                                    .to_predicate(infcx.tcx),\n+                            ));\n                         for predicate in predicates {\n                             debug!(\"testing predicate {:?}\", predicate);\n                             let obligation = traits::Obligation::new("}, {"sha": "caade082c3d224e0fce61386d916de2fa40d2688", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -132,7 +132,7 @@ impl Clean<GenericBound> for hir::GenericBound<'_> {\n             hir::GenericBound::LangItemTrait(lang_item, span, _, generic_args) => {\n                 let def_id = cx.tcx.require_lang_item(lang_item, Some(span));\n \n-                let trait_ref = ty::TraitRef::identity(cx.tcx, def_id);\n+                let trait_ref = ty::TraitRef::identity(cx.tcx, def_id).skip_binder();\n \n                 let generic_args = generic_args.clean(cx);\n                 let bindings = match generic_args {"}, {"sha": "2f8cddc06bab1caaed63d326b00ec5ccfa0cf0a4", "filename": "src/test/ui/closures/2229_closure_analysis/preserve_field_drop_order.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -0,0 +1,101 @@\n+// edition:2021\n+\n+// Tests that in cases where we individually capture all the fields of a type,\n+// we still drop them in the order they would have been dropped in the 2018 edition.\n+\n+// NOTE: It is *critical* that the order of the min capture NOTES in the stderr output\n+//       does *not* change!\n+\n+#![feature(rustc_attrs)]\n+\n+#[derive(Debug)]\n+struct HasDrop;\n+impl Drop for HasDrop {\n+    fn drop(&mut self) {\n+        println!(\"dropped\");\n+    }\n+}\n+\n+fn test_one() {\n+    let a = (HasDrop, HasDrop);\n+    let b = (HasDrop, HasDrop);\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    || {\n+        //~^ ERROR: Min Capture analysis includes:\n+        //~| ERROR\n+        println!(\"{:?}\", a.0);\n+        //~^ NOTE: Min Capture a[(0, 0)] -> ImmBorrow\n+        //~| NOTE\n+        println!(\"{:?}\", a.1);\n+        //~^ NOTE: Min Capture a[(1, 0)] -> ImmBorrow\n+        //~| NOTE\n+\n+        println!(\"{:?}\", b.0);\n+        //~^ NOTE: Min Capture b[(0, 0)] -> ImmBorrow\n+        //~| NOTE\n+        println!(\"{:?}\", b.1);\n+        //~^ NOTE: Min Capture b[(1, 0)] -> ImmBorrow\n+        //~| NOTE\n+    };\n+}\n+\n+fn test_two() {\n+    let a = (HasDrop, HasDrop);\n+    let b = (HasDrop, HasDrop);\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    || {\n+        //~^ ERROR: Min Capture analysis includes:\n+        //~| ERROR\n+        println!(\"{:?}\", a.1);\n+        //~^ NOTE: Min Capture a[(1, 0)] -> ImmBorrow\n+        //~| NOTE\n+        println!(\"{:?}\", a.0);\n+        //~^ NOTE: Min Capture a[(0, 0)] -> ImmBorrow\n+        //~| NOTE\n+\n+        println!(\"{:?}\", b.1);\n+        //~^ NOTE: Min Capture b[(1, 0)] -> ImmBorrow\n+        //~| NOTE\n+        println!(\"{:?}\", b.0);\n+        //~^ NOTE: Min Capture b[(0, 0)] -> ImmBorrow\n+        //~| NOTE\n+    };\n+}\n+\n+fn test_three() {\n+    let a = (HasDrop, HasDrop);\n+    let b = (HasDrop, HasDrop);\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    || {\n+        //~^ ERROR: Min Capture analysis includes:\n+        //~| ERROR\n+        println!(\"{:?}\", b.1);\n+        //~^ NOTE: Min Capture b[(1, 0)] -> ImmBorrow\n+        //~| NOTE\n+        println!(\"{:?}\", a.1);\n+        //~^ NOTE: Min Capture a[(1, 0)] -> ImmBorrow\n+        //~| NOTE\n+        println!(\"{:?}\", a.0);\n+        //~^ NOTE: Min Capture a[(0, 0)] -> ImmBorrow\n+        //~| NOTE\n+\n+        println!(\"{:?}\", b.0);\n+        //~^ NOTE: Min Capture b[(0, 0)] -> ImmBorrow\n+        //~| NOTE\n+    };\n+}\n+\n+fn main() {\n+    test_one();\n+    test_two();\n+    test_three();\n+}"}, {"sha": "2d1dc8727c255fdd40007451281f15494120f380", "filename": "src/test/ui/closures/2229_closure_analysis/preserve_field_drop_order.stderr", "status": "added", "additions": 228, "deletions": 0, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order.stderr?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -0,0 +1,228 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/preserve_field_drop_order.rs:23:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/preserve_field_drop_order.rs:49:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/preserve_field_drop_order.rs:75:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error: First Pass analysis includes:\n+  --> $DIR/preserve_field_drop_order.rs:26:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{:?}\", a.0);\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing a[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:29:26\n+   |\n+LL |         println!(\"{:?}\", a.0);\n+   |                          ^^^\n+note: Capturing a[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:32:26\n+   |\n+LL |         println!(\"{:?}\", a.1);\n+   |                          ^^^\n+note: Capturing b[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:36:26\n+   |\n+LL |         println!(\"{:?}\", b.0);\n+   |                          ^^^\n+note: Capturing b[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:39:26\n+   |\n+LL |         println!(\"{:?}\", b.1);\n+   |                          ^^^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/preserve_field_drop_order.rs:26:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{:?}\", a.0);\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture a[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:29:26\n+   |\n+LL |         println!(\"{:?}\", a.0);\n+   |                          ^^^\n+note: Min Capture a[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:32:26\n+   |\n+LL |         println!(\"{:?}\", a.1);\n+   |                          ^^^\n+note: Min Capture b[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:36:26\n+   |\n+LL |         println!(\"{:?}\", b.0);\n+   |                          ^^^\n+note: Min Capture b[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:39:26\n+   |\n+LL |         println!(\"{:?}\", b.1);\n+   |                          ^^^\n+\n+error: First Pass analysis includes:\n+  --> $DIR/preserve_field_drop_order.rs:52:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{:?}\", a.1);\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing a[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:55:26\n+   |\n+LL |         println!(\"{:?}\", a.1);\n+   |                          ^^^\n+note: Capturing a[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:58:26\n+   |\n+LL |         println!(\"{:?}\", a.0);\n+   |                          ^^^\n+note: Capturing b[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:62:26\n+   |\n+LL |         println!(\"{:?}\", b.1);\n+   |                          ^^^\n+note: Capturing b[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:65:26\n+   |\n+LL |         println!(\"{:?}\", b.0);\n+   |                          ^^^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/preserve_field_drop_order.rs:52:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{:?}\", a.1);\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture a[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:58:26\n+   |\n+LL |         println!(\"{:?}\", a.0);\n+   |                          ^^^\n+note: Min Capture a[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:55:26\n+   |\n+LL |         println!(\"{:?}\", a.1);\n+   |                          ^^^\n+note: Min Capture b[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:65:26\n+   |\n+LL |         println!(\"{:?}\", b.0);\n+   |                          ^^^\n+note: Min Capture b[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:62:26\n+   |\n+LL |         println!(\"{:?}\", b.1);\n+   |                          ^^^\n+\n+error: First Pass analysis includes:\n+  --> $DIR/preserve_field_drop_order.rs:78:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{:?}\", b.1);\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing b[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:81:26\n+   |\n+LL |         println!(\"{:?}\", b.1);\n+   |                          ^^^\n+note: Capturing a[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:84:26\n+   |\n+LL |         println!(\"{:?}\", a.1);\n+   |                          ^^^\n+note: Capturing a[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:87:26\n+   |\n+LL |         println!(\"{:?}\", a.0);\n+   |                          ^^^\n+note: Capturing b[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:91:26\n+   |\n+LL |         println!(\"{:?}\", b.0);\n+   |                          ^^^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/preserve_field_drop_order.rs:78:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |         println!(\"{:?}\", b.1);\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture b[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:91:26\n+   |\n+LL |         println!(\"{:?}\", b.0);\n+   |                          ^^^\n+note: Min Capture b[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:81:26\n+   |\n+LL |         println!(\"{:?}\", b.1);\n+   |                          ^^^\n+note: Min Capture a[(0, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:87:26\n+   |\n+LL |         println!(\"{:?}\", a.0);\n+   |                          ^^^\n+note: Min Capture a[(1, 0)] -> ImmBorrow\n+  --> $DIR/preserve_field_drop_order.rs:84:26\n+   |\n+LL |         println!(\"{:?}\", a.1);\n+   |                          ^^^\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "1cae776dd68bc0dab3b0ac28567394552e05af59", "filename": "src/test/ui/closures/2229_closure_analysis/preserve_field_drop_order2.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -0,0 +1,58 @@\n+// run-pass\n+// check-run-results\n+// revisions: twenty_eighteen twenty_twentyone\n+// [twenty_eighteen]compile-flags: --edition 2018\n+// [twenty_twentyone]compile-flags: --edition 2021\n+\n+#[derive(Debug)]\n+struct Dropable(&'static str);\n+\n+impl Drop for Dropable {\n+    fn drop(&mut self) {\n+        println!(\"Dropping {}\", self.0)\n+    }\n+}\n+\n+#[derive(Debug)]\n+struct A {\n+    x: Dropable,\n+    y: Dropable,\n+}\n+\n+#[derive(Debug)]\n+struct B {\n+    c: A,\n+    d: A,\n+}\n+\n+#[derive(Debug)]\n+struct R<'a> {\n+    c: &'a A,\n+    d: &'a A,\n+}\n+\n+fn main() {\n+    let a = A { x: Dropable(\"x\"), y: Dropable(\"y\") };\n+\n+    let c = move || println!(\"{:?} {:?}\", a.y, a.x);\n+\n+    c();\n+\n+    let b = B {\n+        c: A { x: Dropable(\"b.c.x\"), y: Dropable(\"b.c.y\") },\n+        d: A { x: Dropable(\"b.d.x\"), y: Dropable(\"b.d.y\") },\n+    };\n+\n+    let d = move || println!(\"{:?} {:?} {:?} {:?}\", b.d.y, b.d.x, b.c.y, b.c.x);\n+\n+    d();\n+\n+        let r = R {\n+        c: &A { x: Dropable(\"r.c.x\"), y: Dropable(\"r.c.y\") },\n+        d: &A { x: Dropable(\"r.d.x\"), y: Dropable(\"r.d.y\") },\n+    };\n+\n+    let e = move || println!(\"{:?} {:?} {:?} {:?}\", r.d.y, r.d.x, r.c.y, r.c.x);\n+\n+    e();\n+}"}, {"sha": "557d047c1d52431109af4bb2240c127cc083ceae", "filename": "src/test/ui/closures/2229_closure_analysis/preserve_field_drop_order2.twenty_eighteen.run.stdout", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.twenty_eighteen.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.twenty_eighteen.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.twenty_eighteen.run.stdout?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -0,0 +1,13 @@\n+Dropable(\"y\") Dropable(\"x\")\n+Dropable(\"b.d.y\") Dropable(\"b.d.x\") Dropable(\"b.c.y\") Dropable(\"b.c.x\")\n+Dropable(\"r.d.y\") Dropable(\"r.d.x\") Dropable(\"r.c.y\") Dropable(\"r.c.x\")\n+Dropping r.d.x\n+Dropping r.d.y\n+Dropping r.c.x\n+Dropping r.c.y\n+Dropping b.c.x\n+Dropping b.c.y\n+Dropping b.d.x\n+Dropping b.d.y\n+Dropping x\n+Dropping y"}, {"sha": "557d047c1d52431109af4bb2240c127cc083ceae", "filename": "src/test/ui/closures/2229_closure_analysis/preserve_field_drop_order2.twenty_twentyone.run.stdout", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.twenty_twentyone.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.twenty_twentyone.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpreserve_field_drop_order2.twenty_twentyone.run.stdout?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -0,0 +1,13 @@\n+Dropable(\"y\") Dropable(\"x\")\n+Dropable(\"b.d.y\") Dropable(\"b.d.x\") Dropable(\"b.c.y\") Dropable(\"b.c.x\")\n+Dropable(\"r.d.y\") Dropable(\"r.d.x\") Dropable(\"r.c.y\") Dropable(\"r.c.x\")\n+Dropping r.d.x\n+Dropping r.d.y\n+Dropping r.c.x\n+Dropping r.c.y\n+Dropping b.c.x\n+Dropping b.c.y\n+Dropping b.d.x\n+Dropping b.d.y\n+Dropping x\n+Dropping y"}, {"sha": "c107ddd5d03bda4d0c1a41e0f15ca53c7365da19", "filename": "src/test/ui/macros/bang-after-name.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftest%2Fui%2Fmacros%2Fbang-after-name.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftest%2Fui%2Fmacros%2Fbang-after-name.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbang-after-name.fixed?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+#[allow(unused_macros)]\n+\n+macro_rules! foo { //~ ERROR macro names aren't followed by a `!`\n+    () => {};\n+}\n+\n+fn main() {}"}, {"sha": "7654d8c440390189fcd282fc445bc9159adaf979", "filename": "src/test/ui/macros/bang-after-name.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftest%2Fui%2Fmacros%2Fbang-after-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftest%2Fui%2Fmacros%2Fbang-after-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbang-after-name.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+#[allow(unused_macros)]\n+\n+macro_rules! foo! { //~ ERROR macro names aren't followed by a `!`\n+    () => {};\n+}\n+\n+fn main() {}"}, {"sha": "f609c4943ef215488b4dac54ed55a6faba148958", "filename": "src/test/ui/macros/bang-after-name.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftest%2Fui%2Fmacros%2Fbang-after-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftest%2Fui%2Fmacros%2Fbang-after-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fbang-after-name.stderr?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -0,0 +1,8 @@\n+error: macro names aren't followed by a `!`\n+  --> $DIR/bang-after-name.rs:4:17\n+   |\n+LL | macro_rules! foo! {\n+   |                 ^ help: remove the `!`\n+\n+error: aborting due to previous error\n+"}, {"sha": "6bbac6d9a24688598775794ba0f94a991eb1c27c", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -92,7 +92,7 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n                         // be sure we have `self` parameter in this function\n                         if let AssocItemKind::Fn { has_self: true } = trait_item.kind {\n                             trait_self_ty =\n-                                Some(TraitRef::identity(cx.tcx, trait_item.id.def_id.to_def_id()).self_ty());\n+                                Some(TraitRef::identity(cx.tcx, trait_item.id.def_id.to_def_id()).self_ty().skip_binder());\n                         }\n                     }\n                 }"}, {"sha": "a04b325b56e3a42ffe4c461a21aa26dd22a5c210", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6867dd2c014a3ebd20948c64671a569c2b7dffc1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=6867dd2c014a3ebd20948c64671a569c2b7dffc1", "patch": "@@ -2061,7 +2061,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             then {\n                 let first_arg_span = first_arg_ty.span;\n                 let first_arg_ty = hir_ty_to_ty(cx.tcx, first_arg_ty);\n-                let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty();\n+                let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty().skip_binder();\n                 wrong_self_convention::check(\n                     cx,\n                     &item.ident.name.as_str(),\n@@ -2078,7 +2078,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if item.ident.name == sym::new;\n             if let TraitItemKind::Fn(_, _) = item.kind;\n             let ret_ty = return_ty(cx, item.hir_id());\n-            let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty();\n+            let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty().skip_binder();\n             if !contains_ty(cx.tcx, ret_ty, self_ty);\n \n             then {"}]}