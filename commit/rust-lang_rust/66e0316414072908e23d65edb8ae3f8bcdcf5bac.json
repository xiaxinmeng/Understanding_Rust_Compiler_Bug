{"sha": "66e0316414072908e23d65edb8ae3f8bcdcf5bac", "node_id": "C_kwDOAAsO6NoAKDY2ZTAzMTY0MTQwNzI5MDhlMjNkNjVlZGI4YWUzZjhiY2RjZjViYWM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-04-30T21:57:02Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-12-25T18:48:30Z"}, "message": "Use absolute spans when trying to steal an AST diagnostic.", "tree": {"sha": "a53cedf0d6b76d7f39811acb6f53a0eb6ba9ef68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a53cedf0d6b76d7f39811acb6f53a0eb6ba9ef68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66e0316414072908e23d65edb8ae3f8bcdcf5bac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66e0316414072908e23d65edb8ae3f8bcdcf5bac", "html_url": "https://github.com/rust-lang/rust/commit/66e0316414072908e23d65edb8ae3f8bcdcf5bac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66e0316414072908e23d65edb8ae3f8bcdcf5bac/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44972b2ce7bff10ca9277212eedf23b15bbe0eb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/44972b2ce7bff10ca9277212eedf23b15bbe0eb2", "html_url": "https://github.com/rust-lang/rust/commit/44972b2ce7bff10ca9277212eedf23b15bbe0eb2"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "292ea64ee7ba32731792cf2bdd85a1e949fabcf0", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66e0316414072908e23d65edb8ae3f8bcdcf5bac/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e0316414072908e23d65edb8ae3f8bcdcf5bac/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=66e0316414072908e23d65edb8ae3f8bcdcf5bac", "patch": "@@ -653,17 +653,19 @@ impl Handler {\n     /// Retrieve a stashed diagnostic with `steal_diagnostic`.\n     pub fn stash_diagnostic(&self, span: Span, key: StashKey, diag: Diagnostic) {\n         let mut inner = self.inner.borrow_mut();\n-        inner.stash((span, key), diag);\n+        inner.stash((span.with_parent(None), key), diag);\n     }\n \n     /// Steal a previously stashed diagnostic with the given `Span` and [`StashKey`] as the key.\n     pub fn steal_diagnostic(&self, span: Span, key: StashKey) -> Option<DiagnosticBuilder<'_, ()>> {\n         let mut inner = self.inner.borrow_mut();\n-        inner.steal((span, key)).map(|diag| DiagnosticBuilder::new_diagnostic(self, diag))\n+        inner\n+            .steal((span.with_parent(None), key))\n+            .map(|diag| DiagnosticBuilder::new_diagnostic(self, diag))\n     }\n \n     pub fn has_stashed_diagnostic(&self, span: Span, key: StashKey) -> bool {\n-        self.inner.borrow().stashed_diagnostics.get(&(span, key)).is_some()\n+        self.inner.borrow().stashed_diagnostics.get(&(span.with_parent(None), key)).is_some()\n     }\n \n     /// Emit all stashed diagnostics."}, {"sha": "b8b4e873663100fbc3820820333ed3409ec67557", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66e0316414072908e23d65edb8ae3f8bcdcf5bac/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e0316414072908e23d65edb8ae3f8bcdcf5bac/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=66e0316414072908e23d65edb8ae3f8bcdcf5bac", "patch": "@@ -395,7 +395,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             E0614,\n                             \"type `{oprnd_t}` cannot be dereferenced\",\n                         );\n-                        let sp = tcx.sess.source_map().start_point(expr.span);\n+                        let sp = tcx.sess.source_map().start_point(expr.span).with_parent(None);\n                         if let Some(sp) =\n                             tcx.sess.parse_sess.ambiguous_block_expr_parse.borrow().get(&sp)\n                         {"}, {"sha": "fd0c302ff6842436af85ca61760d4357c4dcb051", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66e0316414072908e23d65edb8ae3f8bcdcf5bac/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e0316414072908e23d65edb8ae3f8bcdcf5bac/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=66e0316414072908e23d65edb8ae3f8bcdcf5bac", "patch": "@@ -973,7 +973,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,\n     ) -> bool {\n-        let sp = self.tcx.sess.source_map().start_point(expr.span);\n+        let sp = self.tcx.sess.source_map().start_point(expr.span).with_parent(None);\n         if let Some(sp) = self.tcx.sess.parse_sess.ambiguous_block_expr_parse.borrow().get(&sp) {\n             // `{ 42 } &&x` (#61475) or `{ 42 } && if x { 1 } else { 0 }`\n             err.subdiagnostic(ExprParenthesesNeeded::surrounding(*sp));"}, {"sha": "0eda0258ab97560142b16e0ee3ae28d7c3d15e6f", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66e0316414072908e23d65edb8ae3f8bcdcf5bac/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e0316414072908e23d65edb8ae3f8bcdcf5bac/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=66e0316414072908e23d65edb8ae3f8bcdcf5bac", "patch": "@@ -339,7 +339,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         &mut err, item_name, rcvr_ty, cal, span,\n                     );\n                 }\n-                if let Some(span) = tcx.resolutions(()).confused_type_with_std_module.get(&span) {\n+                if let Some(span) =\n+                    tcx.resolutions(()).confused_type_with_std_module.get(&span.with_parent(None))\n+                {\n                     err.span_suggestion(\n                         span.shrink_to_lo(),\n                         \"you are looking for the module in `std`, not the primitive type\","}, {"sha": "a642fe30506c62eca653034500578d0f2c68c543", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66e0316414072908e23d65edb8ae3f8bcdcf5bac/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e0316414072908e23d65edb8ae3f8bcdcf5bac/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=66e0316414072908e23d65edb8ae3f8bcdcf5bac", "patch": "@@ -660,7 +660,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n \n-                    let sp = self.tcx.sess.source_map().start_point(ex.span);\n+                    let sp = self.tcx.sess.source_map().start_point(ex.span).with_parent(None);\n                     if let Some(sp) =\n                         self.tcx.sess.parse_sess.ambiguous_block_expr_parse.borrow().get(&sp)\n                     {"}]}