{"sha": "549b3a13a15b5727846ef9ad24ab70ce970d794c", "node_id": "C_kwDOAAsO6NoAKDU0OWIzYTEzYTE1YjU3Mjc4NDZlZjlhZDI0YWI3MGNlOTcwZDc5NGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-29T23:14:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-29T23:14:59Z"}, "message": "Rollup merge of #110983 - GuillaumeGomez:foreign-repr, r=notriddle\n\nrustdoc: Get `repr` information through `AdtDef` for foreign items\n\nAs suggested by `@notriddle,` this approach works too. The only downside is that the display of the original attribute isn't kept, but I think it's an acceptable downside.\n\nr? `@notriddle`", "tree": {"sha": "cd5af8a090ba17e29b4ec25d6a7d1b35eaafec28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd5af8a090ba17e29b4ec25d6a7d1b35eaafec28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/549b3a13a15b5727846ef9ad24ab70ce970d794c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkTaTzCRBK7hj4Ov3rIwAAoGcIAJFtRpBmsvRBqJ1gGCL0icML\nu8ViaZ+P/l6kSfiMDNLD7DN2Pj79qdm6fvxLbraF00+/zGp+ldR5WHA8ouA7SRBC\nmqe81P7/W5fNUWnE7L52VTNkh0hrbuAQPGUyOKjU3RQy6ObzJ95hBhIfRvr7q9LM\nL6Tx3O9XGyiVTNJ367285HSITvQBqq0azjlXrvJxZPIy//X593YcAYzGhkn1bnhv\nCY75HG0Uuj2Zhew0yw0EyxPIDh0qwz6Lcm9lqcJyDPP/WKgt5BEf0ry03uY7blKA\nqv/jK3f8VahSeB5LosyKq00W+1OOxqa7F9fs3l0BLbTQ72ZhgIWiO3KxIdG/GKg=\n=XfJM\n-----END PGP SIGNATURE-----\n", "payload": "tree cd5af8a090ba17e29b4ec25d6a7d1b35eaafec28\nparent 4b79276e60398cdce8766c6fbfa694bf7325a95c\nparent b778688f913bf6d3735b0b603b41c6989f513399\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682810099 +0200\ncommitter GitHub <noreply@github.com> 1682810099 +0200\n\nRollup merge of #110983 - GuillaumeGomez:foreign-repr, r=notriddle\n\nrustdoc: Get `repr` information through `AdtDef` for foreign items\n\nAs suggested by `@notriddle,` this approach works too. The only downside is that the display of the original attribute isn't kept, but I think it's an acceptable downside.\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/549b3a13a15b5727846ef9ad24ab70ce970d794c", "html_url": "https://github.com/rust-lang/rust/commit/549b3a13a15b5727846ef9ad24ab70ce970d794c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/549b3a13a15b5727846ef9ad24ab70ce970d794c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b79276e60398cdce8766c6fbfa694bf7325a95c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b79276e60398cdce8766c6fbfa694bf7325a95c", "html_url": "https://github.com/rust-lang/rust/commit/4b79276e60398cdce8766c6fbfa694bf7325a95c"}, {"sha": "b778688f913bf6d3735b0b603b41c6989f513399", "url": "https://api.github.com/repos/rust-lang/rust/commits/b778688f913bf6d3735b0b603b41c6989f513399", "html_url": "https://github.com/rust-lang/rust/commit/b778688f913bf6d3735b0b603b41c6989f513399"}], "stats": {"total": 190, "additions": 136, "deletions": 54}, "files": [{"sha": "c77292fdd1647d630407cafafe14482f17760764", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/549b3a13a15b5727846ef9ad24ab70ce970d794c/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549b3a13a15b5727846ef9ad24ab70ce970d794c/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=549b3a13a15b5727846ef9ad24ab70ce970d794c", "patch": "@@ -344,7 +344,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     ungated!(link_name, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n     ungated!(no_link, Normal, template!(Word), WarnFollowing),\n-    ungated!(repr, Normal, template!(List: \"C\"), DuplicatesOk),\n+    ungated!(repr, Normal, template!(List: \"C\"), DuplicatesOk, @only_local: true),\n     ungated!(export_name, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n     ungated!(link_section, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),\n     ungated!(no_mangle, Normal, template!(Word), WarnFollowing, @only_local: true),"}, {"sha": "7371b44465bab00b63fe49fc034c20859afaa258", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/549b3a13a15b5727846ef9ad24ab70ce970d794c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549b3a13a15b5727846ef9ad24ab70ce970d794c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=549b3a13a15b5727846ef9ad24ab70ce970d794c", "patch": "@@ -11,6 +11,7 @@ use arrayvec::ArrayVec;\n use thin_vec::ThinVec;\n \n use rustc_ast as ast;\n+use rustc_ast_pretty::pprust;\n use rustc_attr::{ConstStability, Deprecation, Stability, StabilityLevel};\n use rustc_const_eval::const_eval::is_unstable_const_fn;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -711,6 +712,78 @@ impl Item {\n         };\n         Some(tcx.visibility(def_id))\n     }\n+\n+    pub(crate) fn attributes(&self, tcx: TyCtxt<'_>, keep_as_is: bool) -> Vec<String> {\n+        const ALLOWED_ATTRIBUTES: &[Symbol] =\n+            &[sym::export_name, sym::link_section, sym::no_mangle, sym::repr, sym::non_exhaustive];\n+\n+        use rustc_abi::IntegerType;\n+        use rustc_middle::ty::ReprFlags;\n+\n+        let mut attrs: Vec<String> = self\n+            .attrs\n+            .other_attrs\n+            .iter()\n+            .filter_map(|attr| {\n+                if keep_as_is {\n+                    Some(pprust::attribute_to_string(attr))\n+                } else if ALLOWED_ATTRIBUTES.contains(&attr.name_or_empty()) {\n+                    Some(\n+                        pprust::attribute_to_string(attr)\n+                            .replace(\"\\\\\\n\", \"\")\n+                            .replace('\\n', \"\")\n+                            .replace(\"  \", \" \"),\n+                    )\n+                } else {\n+                    None\n+                }\n+            })\n+            .collect();\n+        if let Some(def_id) = self.item_id.as_def_id() &&\n+            !def_id.is_local() &&\n+            // This check is needed because `adt_def` will panic if not a compatible type otherwise...\n+            matches!(self.type_(), ItemType::Struct | ItemType::Enum | ItemType::Union)\n+        {\n+            let repr = tcx.adt_def(def_id).repr();\n+            let mut out = Vec::new();\n+            if repr.flags.contains(ReprFlags::IS_C) {\n+                out.push(\"C\");\n+            }\n+            if repr.flags.contains(ReprFlags::IS_TRANSPARENT) {\n+                out.push(\"transparent\");\n+            }\n+            if repr.flags.contains(ReprFlags::IS_SIMD) {\n+                out.push(\"simd\");\n+            }\n+            let pack_s;\n+            if let Some(pack) = repr.pack {\n+                pack_s = format!(\"packed({})\", pack.bytes());\n+                out.push(&pack_s);\n+            }\n+            let align_s;\n+            if let Some(align) = repr.align {\n+                align_s = format!(\"align({})\", align.bytes());\n+                out.push(&align_s);\n+            }\n+            let int_s;\n+            if let Some(int) = repr.int {\n+                int_s = match int {\n+                    IntegerType::Pointer(is_signed) => {\n+                        format!(\"{}size\", if is_signed { 'i' } else { 'u' })\n+                    }\n+                    IntegerType::Fixed(size, is_signed) => {\n+                        format!(\"{}{}\", if is_signed { 'i' } else { 'u' }, size.size().bytes() * 8)\n+                    }\n+                };\n+                out.push(&int_s);\n+            }\n+            if out.is_empty() {\n+                return Vec::new();\n+            }\n+            attrs.push(format!(\"#[repr({})]\", out.join(\", \")));\n+        }\n+        attrs\n+    }\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "73bf27c9d344921673ccadef5a88e79a110c96b1", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 8, "deletions": 30, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/549b3a13a15b5727846ef9ad24ab70ce970d794c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549b3a13a15b5727846ef9ad24ab70ce970d794c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=549b3a13a15b5727846ef9ad24ab70ce970d794c", "patch": "@@ -48,7 +48,6 @@ use std::str;\n use std::string::ToString;\n \n use askama::Template;\n-use rustc_ast_pretty::pprust;\n use rustc_attr::{ConstStability, Deprecation, StabilityLevel};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -849,10 +848,10 @@ fn assoc_method(\n     let (indent, indent_str, end_newline) = if parent == ItemType::Trait {\n         header_len += 4;\n         let indent_str = \"    \";\n-        write!(w, \"{}\", render_attributes_in_pre(meth, indent_str));\n+        write!(w, \"{}\", render_attributes_in_pre(meth, indent_str, tcx));\n         (4, indent_str, Ending::NoNewline)\n     } else {\n-        render_attributes_in_code(w, meth);\n+        render_attributes_in_code(w, meth, tcx);\n         (0, \"\", Ending::Newline)\n     };\n     w.reserve(header_len + \"<a href=\\\"\\\" class=\\\"fn\\\">{\".len() + \"</a>\".len());\n@@ -1021,36 +1020,15 @@ fn render_assoc_item(\n     }\n }\n \n-const ALLOWED_ATTRIBUTES: &[Symbol] =\n-    &[sym::export_name, sym::link_section, sym::no_mangle, sym::repr, sym::non_exhaustive];\n-\n-fn attributes(it: &clean::Item) -> Vec<String> {\n-    it.attrs\n-        .other_attrs\n-        .iter()\n-        .filter_map(|attr| {\n-            if ALLOWED_ATTRIBUTES.contains(&attr.name_or_empty()) {\n-                Some(\n-                    pprust::attribute_to_string(attr)\n-                        .replace(\"\\\\\\n\", \"\")\n-                        .replace('\\n', \"\")\n-                        .replace(\"  \", \" \"),\n-                )\n-            } else {\n-                None\n-            }\n-        })\n-        .collect()\n-}\n-\n // When an attribute is rendered inside a `<pre>` tag, it is formatted using\n // a whitespace prefix and newline.\n-fn render_attributes_in_pre<'a>(\n+fn render_attributes_in_pre<'a, 'b: 'a>(\n     it: &'a clean::Item,\n     prefix: &'a str,\n-) -> impl fmt::Display + Captures<'a> {\n+    tcx: TyCtxt<'b>,\n+) -> impl fmt::Display + Captures<'a> + Captures<'b> {\n     crate::html::format::display_fn(move |f| {\n-        for a in attributes(it) {\n+        for a in it.attributes(tcx, false) {\n             writeln!(f, \"{}{}\", prefix, a)?;\n         }\n         Ok(())\n@@ -1059,8 +1037,8 @@ fn render_attributes_in_pre<'a>(\n \n // When an attribute is rendered inside a <code> tag, it is formatted using\n // a div to produce a newline after it.\n-fn render_attributes_in_code(w: &mut Buffer, it: &clean::Item) {\n-    for a in attributes(it) {\n+fn render_attributes_in_code(w: &mut Buffer, it: &clean::Item, tcx: TyCtxt<'_>) {\n+    for a in it.attributes(tcx, false) {\n         write!(w, \"<div class=\\\"code-attribute\\\">{}</div>\", a);\n     }\n }"}, {"sha": "4cc81e860f09a76605f707b3a6c60b0e04d44320", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/549b3a13a15b5727846ef9ad24ab70ce970d794c/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549b3a13a15b5727846ef9ad24ab70ce970d794c/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=549b3a13a15b5727846ef9ad24ab70ce970d794c", "patch": "@@ -548,7 +548,7 @@ fn item_function(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, f: &cle\n             w,\n             \"{attrs}{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n                 {name}{generics}{decl}{notable_traits}{where_clause}\",\n-            attrs = render_attributes_in_pre(it, \"\"),\n+            attrs = render_attributes_in_pre(it, \"\", tcx),\n             vis = visibility,\n             constness = constness,\n             asyncness = asyncness,\n@@ -589,7 +589,7 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n             it.name.unwrap(),\n             t.generics.print(cx),\n             bounds,\n-            attrs = render_attributes_in_pre(it, \"\"),\n+            attrs = render_attributes_in_pre(it, \"\", tcx),\n         );\n \n         if !t.generics.where_predicates.is_empty() {\n@@ -1063,7 +1063,7 @@ fn item_trait_alias(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &\n             t.generics.print(cx),\n             print_where_clause(&t.generics, cx, 0, Ending::Newline),\n             bounds(&t.bounds, true, cx),\n-            attrs = render_attributes_in_pre(it, \"\"),\n+            attrs = render_attributes_in_pre(it, \"\", cx.tcx()),\n         );\n     });\n \n@@ -1085,7 +1085,7 @@ fn item_opaque_ty(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &cl\n             t.generics.print(cx),\n             where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n             bounds = bounds(&t.bounds, false, cx),\n-            attrs = render_attributes_in_pre(it, \"\"),\n+            attrs = render_attributes_in_pre(it, \"\", cx.tcx()),\n         );\n     });\n \n@@ -1109,7 +1109,7 @@ fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clea\n                 t.generics.print(cx),\n                 where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n                 type_ = t.type_.print(cx),\n-                attrs = render_attributes_in_pre(it, \"\"),\n+                attrs = render_attributes_in_pre(it, \"\", cx.tcx()),\n             );\n         });\n     }\n@@ -1168,7 +1168,8 @@ fn item_union(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean:\n             &'b self,\n         ) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n             display_fn(move |f| {\n-                let v = render_attributes_in_pre(self.it, \"\");\n+                let tcx = self.cx.borrow().tcx();\n+                let v = render_attributes_in_pre(self.it, \"\", tcx);\n                 write!(f, \"{v}\")\n             })\n         }\n@@ -1244,13 +1245,13 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n     let tcx = cx.tcx();\n     let count_variants = e.variants().count();\n     wrap_item(w, |mut w| {\n+        render_attributes_in_code(w, it, tcx);\n         write!(\n             w,\n-            \"{attrs}{}enum {}{}\",\n+            \"{}enum {}{}\",\n             visibility_print_with_space(it.visibility(tcx), it.item_id, cx),\n             it.name.unwrap(),\n             e.generics.print(cx),\n-            attrs = render_attributes_in_pre(it, \"\"),\n         );\n         if !print_where_clause_and_check(w, &e.generics, cx) {\n             // If there wasn't a `where` clause, we add a whitespace.\n@@ -1445,7 +1446,7 @@ fn item_primitive(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item) {\n fn item_constant(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, c: &clean::Constant) {\n     wrap_item(w, |w| {\n         let tcx = cx.tcx();\n-        render_attributes_in_code(w, it);\n+        render_attributes_in_code(w, it, tcx);\n \n         write!(\n             w,\n@@ -1492,7 +1493,7 @@ fn item_constant(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, c: &cle\n \n fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Struct) {\n     wrap_item(w, |w| {\n-        render_attributes_in_code(w, it);\n+        render_attributes_in_code(w, it, cx.tcx());\n         render_struct(w, it, Some(&s.generics), s.ctor_kind, &s.fields, \"\", true, cx);\n     });\n \n@@ -1542,7 +1543,7 @@ fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean\n \n fn item_static(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Static) {\n     wrap_item(w, |w| {\n-        render_attributes_in_code(w, it);\n+        render_attributes_in_code(w, it, cx.tcx());\n         write!(\n             w,\n             \"{vis}static {mutability}{name}: {typ}\",\n@@ -1558,7 +1559,7 @@ fn item_static(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean\n fn item_foreign_type(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item) {\n     wrap_item(w, |w| {\n         w.write_str(\"extern {\\n\");\n-        render_attributes_in_code(w, it);\n+        render_attributes_in_code(w, it, cx.tcx());\n         write!(\n             w,\n             \"    {}type {};\\n}}\","}, {"sha": "62aab46fa7e8b1a97d05fd3c8225affefc936073", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/549b3a13a15b5727846ef9ad24ab70ce970d794c/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549b3a13a15b5727846ef9ad24ab70ce970d794c/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=549b3a13a15b5727846ef9ad24ab70ce970d794c", "patch": "@@ -41,12 +41,7 @@ impl JsonRenderer<'_> {\n             })\n             .collect();\n         let docs = item.attrs.collapsed_doc_value();\n-        let attrs = item\n-            .attrs\n-            .other_attrs\n-            .iter()\n-            .map(rustc_ast_pretty::pprust::attribute_to_string)\n-            .collect();\n+        let attrs = item.attributes(self.tcx, true);\n         let span = item.span(self.tcx);\n         let visibility = item.visibility(self.tcx);\n         let clean::Item { name, item_id, .. } = item;"}, {"sha": "66080f64b9c21b86387665f4f20346b2ab31d618", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/549b3a13a15b5727846ef9ad24ab70ce970d794c/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549b3a13a15b5727846ef9ad24ab70ce970d794c/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=549b3a13a15b5727846ef9ad24ab70ce970d794c", "patch": "@@ -34,6 +34,7 @@ extern crate tracing;\n // Dependencies listed in Cargo.toml do not need `extern crate`.\n \n extern crate pulldown_cmark;\n+extern crate rustc_abi;\n extern crate rustc_ast;\n extern crate rustc_ast_pretty;\n extern crate rustc_attr;"}, {"sha": "4a6648a643980e90d48c8f92cf3eee024f134bb5", "filename": "tests/rustdoc/inline_cross/auxiliary/repr.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/549b3a13a15b5727846ef9ad24ab70ce970d794c/tests%2Frustdoc%2Finline_cross%2Fauxiliary%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549b3a13a15b5727846ef9ad24ab70ce970d794c/tests%2Frustdoc%2Finline_cross%2Fauxiliary%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fauxiliary%2Frepr.rs?ref=549b3a13a15b5727846ef9ad24ab70ce970d794c", "patch": "@@ -1,4 +1,22 @@\n-#[repr(C)]\n-pub struct Foo {\n+#![feature(repr_simd)]\n+\n+#[repr(C, align(8))]\n+pub struct ReprC {\n     field: u8,\n }\n+#[repr(simd, packed(2))]\n+pub struct ReprSimd {\n+    field: u8,\n+}\n+#[repr(transparent)]\n+pub struct ReprTransparent {\n+    field: u8,\n+}\n+#[repr(isize)]\n+pub enum ReprIsize {\n+    Bla,\n+}\n+#[repr(u8)]\n+pub enum ReprU8 {\n+    Bla,\n+}"}, {"sha": "9e107cee9e91bbf9b24663343e487ad2f69ed45e", "filename": "tests/rustdoc/inline_cross/repr.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/549b3a13a15b5727846ef9ad24ab70ce970d794c/tests%2Frustdoc%2Finline_cross%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549b3a13a15b5727846ef9ad24ab70ce970d794c/tests%2Frustdoc%2Finline_cross%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Frepr.rs?ref=549b3a13a15b5727846ef9ad24ab70ce970d794c", "patch": "@@ -7,7 +7,23 @@\n \n extern crate repr;\n \n-// @has 'foo/struct.Foo.html'\n-// @has - '//*[@class=\"rust item-decl\"]//*[@class=\"code-attribute\"]' '#[repr(C)]'\n+// @has 'foo/struct.ReprC.html'\n+// @has - '//*[@class=\"rust item-decl\"]//*[@class=\"code-attribute\"]' '#[repr(C, align(8))]'\n #[doc(inline)]\n-pub use repr::Foo;\n+pub use repr::ReprC;\n+// @has 'foo/struct.ReprSimd.html'\n+// @has - '//*[@class=\"rust item-decl\"]//*[@class=\"code-attribute\"]' '#[repr(simd, packed(2))]'\n+#[doc(inline)]\n+pub use repr::ReprSimd;\n+// @has 'foo/struct.ReprTransparent.html'\n+// @has - '//*[@class=\"rust item-decl\"]//*[@class=\"code-attribute\"]' '#[repr(transparent)]'\n+#[doc(inline)]\n+pub use repr::ReprTransparent;\n+// @has 'foo/enum.ReprIsize.html'\n+// @has - '//*[@class=\"rust item-decl\"]//*[@class=\"code-attribute\"]' '#[repr(isize)]'\n+#[doc(inline)]\n+pub use repr::ReprIsize;\n+// @has 'foo/enum.ReprU8.html'\n+// @has - '//*[@class=\"rust item-decl\"]//*[@class=\"code-attribute\"]' '#[repr(u8)]'\n+#[doc(inline)]\n+pub use repr::ReprU8;"}]}