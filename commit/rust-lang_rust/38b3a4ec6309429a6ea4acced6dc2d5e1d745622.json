{"sha": "38b3a4ec6309429a6ea4acced6dc2d5e1d745622", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YjNhNGVjNjMwOTQyOWE2ZWE0YWNjZWQ2ZGMyZDVlMWQ3NDU2MjI=", "commit": {"author": {"name": "Unknown", "email": "dobbybabee@gmail.com", "date": "2019-01-18T05:12:35Z"}, "committer": {"name": "Unknown", "email": "dobbybabee@gmail.com", "date": "2019-01-18T05:12:35Z"}, "message": "Fixing issues pointed out by dogfood tests.", "tree": {"sha": "f33565d7b39f296bc0e7b5251407e1ee1af4acd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f33565d7b39f296bc0e7b5251407e1ee1af4acd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38b3a4ec6309429a6ea4acced6dc2d5e1d745622", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38b3a4ec6309429a6ea4acced6dc2d5e1d745622", "html_url": "https://github.com/rust-lang/rust/commit/38b3a4ec6309429a6ea4acced6dc2d5e1d745622", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38b3a4ec6309429a6ea4acced6dc2d5e1d745622/comments", "author": null, "committer": null, "parents": [{"sha": "a3b3a54e930dec06935af37beae340a8f6a7b4ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b3a54e930dec06935af37beae340a8f6a7b4ec", "html_url": "https://github.com/rust-lang/rust/commit/a3b3a54e930dec06935af37beae340a8f6a7b4ec"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "558e001d3d10bdacbfc7349220786aa5bb1a057d", "filename": "tests/missing-test-files.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/38b3a4ec6309429a6ea4acced6dc2d5e1d745622/tests%2Fmissing-test-files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b3a4ec6309429a6ea4acced6dc2d5e1d745622/tests%2Fmissing-test-files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmissing-test-files.rs?ref=38b3a4ec6309429a6ea4acced6dc2d5e1d745622", "patch": "@@ -4,7 +4,7 @@ use std::path::Path;\n #[test]\n fn test_missing_tests() {\n     let missing_files = explore_directory(Path::new(\"./tests\"));\n-    if missing_files.len() > 0 {\n+    if !missing_files.is_empty() {\n         assert!(\n             false,\n             format!(\n@@ -31,25 +31,22 @@ fn explore_directory(dir: &Path) -> Vec<String> {\n     let mut current_file = String::new();\n     let mut files: Vec<DirEntry> = fs::read_dir(dir).unwrap().filter_map(Result::ok).collect();\n     files.sort_by_key(|e| e.path());\n-    for entry in files.iter() {\n+    for entry in &files {\n         let path = entry.path();\n         if path.is_dir() {\n             missing_files.extend(explore_directory(&path));\n         } else {\n             let file_stem = path.file_stem().unwrap().to_str().unwrap().to_string();\n-            match path.extension() {\n-                Some(ext) => {\n-                    match ext.to_str().unwrap() {\n-                        \"rs\" => current_file = file_stem.clone(),\n-                        \"stderr\" | \"stdout\" => {\n-                            if file_stem != current_file {\n-                                missing_files.push(path.to_str().unwrap().to_string());\n-                            }\n-                        },\n-                        _ => continue,\n-                    };\n-                },\n-                None => {},\n+            if let Some(ext) = path.extension() {\n+                match ext.to_str().unwrap() {\n+                    \"rs\" => current_file = file_stem.clone(),\n+                    \"stderr\" | \"stdout\" => {\n+                        if file_stem != current_file {\n+                            missing_files.push(path.to_str().unwrap().to_string());\n+                        }\n+                    },\n+                    _ => continue,\n+                };\n             }\n         }\n     }"}]}