{"sha": "fba16d3f0bcf697775d91e91064f8584b9697042", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYTE2ZDNmMGJjZjY5Nzc3NWQ5MWU5MTA2NGY4NTg0Yjk2OTcwNDI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2017-12-30T21:38:43Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2017-12-30T21:38:43Z"}, "message": "Optimise min/max\n\nSwapping the conditions generates more efficient x86 assembly. See\nhttps://github.com/rust-lang/rust/pull/46926#issuecomment-354567412.", "tree": {"sha": "cb63b7eee07991b0f0e6c6eb5472d56b46046a08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb63b7eee07991b0f0e6c6eb5472d56b46046a08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fba16d3f0bcf697775d91e91064f8584b9697042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fba16d3f0bcf697775d91e91064f8584b9697042", "html_url": "https://github.com/rust-lang/rust/commit/fba16d3f0bcf697775d91e91064f8584b9697042", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fba16d3f0bcf697775d91e91064f8584b9697042/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0296b7165bfa633b06a3af6e690c4ccd33d0ea28", "url": "https://api.github.com/repos/rust-lang/rust/commits/0296b7165bfa633b06a3af6e690c4ccd33d0ea28", "html_url": "https://github.com/rust-lang/rust/commit/0296b7165bfa633b06a3af6e690c4ccd33d0ea28"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "0dc58d61e496fd68ba6c0f74efa63ff32a243883", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fba16d3f0bcf697775d91e91064f8584b9697042/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba16d3f0bcf697775d91e91064f8584b9697042/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=fba16d3f0bcf697775d91e91064f8584b9697042", "patch": "@@ -263,7 +263,7 @@ impl Float for f32 {\n         // Since we do not support sNaN in Rust yet, we do not need to handle them.\n         // FIXME(nagisa): due to https://bugs.llvm.org/show_bug.cgi?id=33303 we canonicalize by\n         // multiplying by 1.0. Should switch to the `canonicalize` when it works.\n-        (if self < other || self.is_nan() { other } else { self }) * 1.0\n+        (if self.is_nan() || self < other { other } else { self }) * 1.0\n     }\n \n     /// Returns the minimum of the two numbers.\n@@ -277,6 +277,6 @@ impl Float for f32 {\n         // Since we do not support sNaN in Rust yet, we do not need to handle them.\n         // FIXME(nagisa): due to https://bugs.llvm.org/show_bug.cgi?id=33303 we canonicalize by\n         // multiplying by 1.0. Should switch to the `canonicalize` when it works.\n-        (if self < other || other.is_nan() { self } else { other }) * 1.0\n+        (if other.is_nan() || self < other { self } else { other }) * 1.0\n     }\n }"}, {"sha": "0e76000efe9d5aa11ba2db29e3a2e0f721aac7c9", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fba16d3f0bcf697775d91e91064f8584b9697042/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba16d3f0bcf697775d91e91064f8584b9697042/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=fba16d3f0bcf697775d91e91064f8584b9697042", "patch": "@@ -261,7 +261,7 @@ impl Float for f64 {\n         // Since we do not support sNaN in Rust yet, we do not need to handle them.\n         // FIXME(nagisa): due to https://bugs.llvm.org/show_bug.cgi?id=33303 we canonicalize by\n         // multiplying by 1.0. Should switch to the `canonicalize` when it works.\n-        (if self < other || self.is_nan() { other } else { self }) * 1.0\n+        (if self.is_nan() || self < other { other } else { self }) * 1.0\n     }\n \n     /// Returns the minimum of the two numbers.\n@@ -275,6 +275,6 @@ impl Float for f64 {\n         // Since we do not support sNaN in Rust yet, we do not need to handle them.\n         // FIXME(nagisa): due to https://bugs.llvm.org/show_bug.cgi?id=33303 we canonicalize by\n         // multiplying by 1.0. Should switch to the `canonicalize` when it works.\n-        (if self < other || other.is_nan() { self } else { other }) * 1.0\n+        (if other.is_nan() || self < other { self } else { other }) * 1.0\n     }\n }"}]}