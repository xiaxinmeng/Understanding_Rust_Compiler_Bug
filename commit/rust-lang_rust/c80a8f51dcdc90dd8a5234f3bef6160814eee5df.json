{"sha": "c80a8f51dcdc90dd8a5234f3bef6160814eee5df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MGE4ZjUxZGNkYzkwZGQ4YTUyMzRmM2JlZjYxNjA4MTRlZWU1ZGY=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-02-08T14:00:47Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-02-13T17:00:18Z"}, "message": "Stabilize TryFrom and TryInto", "tree": {"sha": "11ae1b5d7e96a0e76aa7ad135f5a827bd15ed226", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11ae1b5d7e96a0e76aa7ad135f5a827bd15ed226"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c80a8f51dcdc90dd8a5234f3bef6160814eee5df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c80a8f51dcdc90dd8a5234f3bef6160814eee5df", "html_url": "https://github.com/rust-lang/rust/commit/c80a8f51dcdc90dd8a5234f3bef6160814eee5df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f7120397f5178fd3b389c2551a03991f3f4ee31", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f7120397f5178fd3b389c2551a03991f3f4ee31", "html_url": "https://github.com/rust-lang/rust/commit/2f7120397f5178fd3b389c2551a03991f3f4ee31"}], "stats": {"total": 68, "additions": 30, "deletions": 38}, "files": [{"sha": "9c6ecc4350246ebbfe5165bc5dbda656bca1b5f6", "filename": "src/libcore/array.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=c80a8f51dcdc90dd8a5234f3bef6160814eee5df", "patch": "@@ -49,7 +49,7 @@ unsafe impl<T, A: Unsize<[T]>> FixedSizeArray<T> for A {\n }\n \n /// The error type returned when a conversion from a slice to an array fails.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n #[derive(Debug, Copy, Clone)]\n pub struct TryFromSliceError(());\n \n@@ -138,7 +138,7 @@ macro_rules! array_impls {\n                 }\n             }\n \n-            #[unstable(feature = \"try_from\", issue = \"33417\")]\n+            #[stable(feature = \"try_from\", since = \"1.34.0\")]\n             impl<'a, T> TryFrom<&'a [T]> for [T; $N] where T: Copy {\n                 type Error = TryFromSliceError;\n \n@@ -147,7 +147,7 @@ macro_rules! array_impls {\n                 }\n             }\n \n-            #[unstable(feature = \"try_from\", issue = \"33417\")]\n+            #[stable(feature = \"try_from\", since = \"1.34.0\")]\n             impl<'a, T> TryFrom<&'a [T]> for &'a [T; $N] {\n                 type Error = TryFromSliceError;\n \n@@ -161,7 +161,7 @@ macro_rules! array_impls {\n                 }\n             }\n \n-            #[unstable(feature = \"try_from\", issue = \"33417\")]\n+            #[stable(feature = \"try_from\", since = \"1.34.0\")]\n             impl<'a, T> TryFrom<&'a mut [T]> for &'a mut [T; $N] {\n                 type Error = TryFromSliceError;\n "}, {"sha": "6a5abfb408f5bfbbd8109026f438585f724a7f3c", "filename": "src/libcore/char/convert.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Flibcore%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Flibcore%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fconvert.rs?ref=c80a8f51dcdc90dd8a5234f3bef6160814eee5df", "patch": "@@ -218,7 +218,7 @@ impl FromStr for char {\n }\n \n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl TryFrom<u32> for char {\n     type Error = CharTryFromError;\n \n@@ -233,11 +233,11 @@ impl TryFrom<u32> for char {\n }\n \n /// The error type returned when a conversion from u32 to char fails.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub struct CharTryFromError(());\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl fmt::Display for CharTryFromError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         \"converted integer out of range for `char`\".fmt(f)"}, {"sha": "f3369c4d94010bdd3bf2e63509c988734073f0c4", "filename": "src/libcore/char/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Flibcore%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Flibcore%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmod.rs?ref=c80a8f51dcdc90dd8a5234f3bef6160814eee5df", "patch": "@@ -30,7 +30,7 @@ pub use self::convert::{from_u32, from_digit};\n pub use self::convert::from_u32_unchecked;\n #[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n pub use self::convert::ParseCharError;\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub use self::convert::CharTryFromError;\n #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n pub use self::decode::{decode_utf16, DecodeUtf16, DecodeUtf16Error};"}, {"sha": "65aa91e2dab09755807e5f985e3461edebbda7d8", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=c80a8f51dcdc90dd8a5234f3bef6160814eee5df", "patch": "@@ -370,22 +370,26 @@ pub trait From<T>: Sized {\n ///\n /// [`TryFrom`]: trait.TryFrom.html\n /// [`Into`]: trait.Into.html\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryInto<T>: Sized {\n     /// The type returned in the event of a conversion error.\n+    #[stable(feature = \"try_from\", since = \"1.34.0\")]\n     type Error;\n \n     /// Performs the conversion.\n+    #[stable(feature = \"try_from\", since = \"1.34.0\")]\n     fn try_into(self) -> Result<T, Self::Error>;\n }\n \n /// Attempt to construct `Self` via a conversion.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error.\n+    #[stable(feature = \"try_from\", since = \"1.34.0\")]\n     type Error;\n \n     /// Performs the conversion.\n+    #[stable(feature = \"try_from\", since = \"1.34.0\")]\n     fn try_from(value: T) -> Result<Self, Self::Error>;\n }\n \n@@ -453,7 +457,7 @@ impl<T> From<T> for T {\n \n \n // TryFrom implies TryInto\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl<T, U> TryInto<U> for T where U: TryFrom<T>\n {\n     type Error = U::Error;\n@@ -465,7 +469,7 @@ impl<T, U> TryInto<U> for T where U: TryFrom<T>\n \n // Infallible conversions are semantically equivalent to fallible conversions\n // with an uninhabited error type.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl<T, U> TryFrom<U> for T where U: Into<T> {\n     type Error = Infallible;\n "}, {"sha": "ffd9e4a5cab058727333f6f99c37e8787d00cf0e", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c80a8f51dcdc90dd8a5234f3bef6160814eee5df", "patch": "@@ -2004,7 +2004,6 @@ assert_eq!(value, \", $swap_op, \");\n When starting from a slice rather than an array, fallible conversion APIs can be used:\n \n ```\n-#![feature(try_from)]\n use std::convert::TryInto;\n \n fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n@@ -2036,7 +2035,6 @@ assert_eq!(value, \", $swap_op, \");\n When starting from a slice rather than an array, fallible conversion APIs can be used:\n \n ```\n-#![feature(try_from)]\n use std::convert::TryInto;\n \n fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n@@ -2078,7 +2076,6 @@ assert_eq!(value, \", $swap_op, \");\n When starting from a slice rather than an array, fallible conversion APIs can be used:\n \n ```\n-#![feature(try_from)]\n use std::convert::TryInto;\n \n fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n@@ -3771,7 +3768,6 @@ assert_eq!(value, \", $swap_op, \");\n When starting from a slice rather than an array, fallible conversion APIs can be used:\n \n ```\n-#![feature(try_from)]\n use std::convert::TryInto;\n \n fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n@@ -3803,7 +3799,6 @@ assert_eq!(value, \", $swap_op, \");\n When starting from a slice rather than an array, fallible conversion APIs can be used:\n \n ```\n-#![feature(try_from)]\n use std::convert::TryInto;\n \n fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n@@ -3845,7 +3840,6 @@ assert_eq!(value, \", $swap_op, \");\n When starting from a slice rather than an array, fallible conversion APIs can be used:\n \n ```\n-#![feature(try_from)]\n use std::convert::TryInto;\n \n fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n@@ -4508,7 +4502,7 @@ macro_rules! from_str_radix_int_impl {\n from_str_radix_int_impl! { isize i8 i16 i32 i64 i128 usize u8 u16 u32 u64 u128 }\n \n /// The error type returned when a checked integral type conversion fails.\n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n pub struct TryFromIntError(());\n \n@@ -4523,14 +4517,14 @@ impl TryFromIntError {\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl fmt::Display for TryFromIntError {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         self.__description().fmt(fmt)\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl From<Infallible> for TryFromIntError {\n     fn from(x: Infallible) -> TryFromIntError {\n         match x {}\n@@ -4550,7 +4544,7 @@ impl From<!> for TryFromIntError {\n // no possible bounds violation\n macro_rules! try_from_unbounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[unstable(feature = \"try_from\", issue = \"33417\")]\n+        #[stable(feature = \"try_from\", since = \"1.34.0\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n@@ -4565,7 +4559,7 @@ macro_rules! try_from_unbounded {\n // only negative bounds\n macro_rules! try_from_lower_bounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[unstable(feature = \"try_from\", issue = \"33417\")]\n+        #[stable(feature = \"try_from\", since = \"1.34.0\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n@@ -4584,7 +4578,7 @@ macro_rules! try_from_lower_bounded {\n // unsigned to signed (only positive bound)\n macro_rules! try_from_upper_bounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[unstable(feature = \"try_from\", issue = \"33417\")]\n+        #[stable(feature = \"try_from\", since = \"1.34.0\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n@@ -4603,7 +4597,7 @@ macro_rules! try_from_upper_bounded {\n // all other cases\n macro_rules! try_from_both_bounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[unstable(feature = \"try_from\", issue = \"33417\")]\n+        #[stable(feature = \"try_from\", since = \"1.34.0\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n "}, {"sha": "06df75b1ee8ff672531418f5e29b3ad5d8d8f395", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=c80a8f51dcdc90dd8a5234f3bef6160814eee5df", "patch": "@@ -27,7 +27,6 @@\n #![feature(str_internals)]\n #![feature(test)]\n #![feature(trusted_len)]\n-#![feature(try_from)]\n #![feature(try_trait)]\n #![feature(align_offset)]\n #![feature(reverse_bits)]"}, {"sha": "1b0bcdd0b5b484d66df7246fe926c65692e42ad5", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=c80a8f51dcdc90dd8a5234f3bef6160814eee5df", "patch": "@@ -35,7 +35,6 @@\n #![deny(rust_2018_idioms)]\n \n #![feature(nll)]\n-#![feature(try_from)]\n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n #[allow(unused_extern_crates)]\n extern crate rustc_cratesio_shim;"}, {"sha": "bc8e94122273a953670e88126121325acad4ce8f", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=c80a8f51dcdc90dd8a5234f3bef6160814eee5df", "patch": "@@ -24,7 +24,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(unicode_internals)]\n #![feature(step_trait)]\n #![feature(slice_concat_ext)]\n-#![feature(try_from)]\n #![feature(reverse_bits)]\n #![feature(try_blocks)]\n "}, {"sha": "cd930240465cfabcbd51c7ceeee5718063f74082", "filename": "src/libstd/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=c80a8f51dcdc90dd8a5234f3bef6160814eee5df", "patch": "@@ -466,14 +466,14 @@ impl Error for num::ParseIntError {\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl Error for num::TryFromIntError {\n     fn description(&self) -> &str {\n         self.__description()\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl Error for array::TryFromSliceError {\n     fn description(&self) -> &str {\n         self.__description()\n@@ -548,7 +548,7 @@ impl Error for cell::BorrowMutError {\n     }\n }\n \n-#[unstable(feature = \"try_from\", issue = \"33417\")]\n+#[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl Error for char::CharTryFromError {\n     fn description(&self) -> &str {\n         \"converted integer out of range for `char`\""}, {"sha": "47d2f1132459ae941a2a36b747fae8f65aae6cd9", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c80a8f51dcdc90dd8a5234f3bef6160814eee5df", "patch": "@@ -281,7 +281,6 @@\n #![feature(rustc_private)]\n #![feature(thread_local)]\n #![feature(toowned_clone_into)]\n-#![feature(try_from)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n #![feature(untagged_unions)]"}, {"sha": "e9b53f2d1c8df981372aa1ad40f93f418f7f9620", "filename": "src/test/run-pass/try-from-int-error-partial-eq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Ftest%2Frun-pass%2Ftry-from-int-error-partial-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Ftest%2Frun-pass%2Ftry-from-int-error-partial-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftry-from-int-error-partial-eq.rs?ref=c80a8f51dcdc90dd8a5234f3bef6160814eee5df", "patch": "@@ -1,4 +1,3 @@\n-#![feature(try_from)]\n #![allow(unused_must_use)]\n \n use std::convert::TryFrom;"}, {"sha": "e42f2c3e3930df7437885034b2a9f3d96739d6c2", "filename": "src/test/run-pass/try_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Ftest%2Frun-pass%2Ftry_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Ftest%2Frun-pass%2Ftry_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftry_from.rs?ref=c80a8f51dcdc90dd8a5234f3bef6160814eee5df", "patch": "@@ -4,7 +4,7 @@\n // This test was added to show the motivation for doing this\n // over `TryFrom` being blanket impl for all `T: From`\n \n-#![feature(try_from, never_type)]\n+#![feature(never_type)]\n \n use std::convert::{TryInto, Infallible};\n "}, {"sha": "6dc81f33dfcc49c7d02e3cc36ea3ce66b434edec", "filename": "src/test/ui/e0119/conflict-with-std.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs?ref=c80a8f51dcdc90dd8a5234f3bef6160814eee5df", "patch": "@@ -1,4 +1,3 @@\n-#![feature(try_from)]\n \n use std::marker::PhantomData;\n use std::convert::{TryFrom, AsRef};"}, {"sha": "1cfb3c1dabae4f6e797fd8e61383d4e7a3c7e0c3", "filename": "src/test/ui/e0119/conflict-with-std.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c80a8f51dcdc90dd8a5234f3bef6160814eee5df/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr?ref=c80a8f51dcdc90dd8a5234f3bef6160814eee5df", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `std::convert::AsRef<Q>` for type `std::boxed::Box<Q>`:\n-  --> $DIR/conflict-with-std.rs:7:1\n+  --> $DIR/conflict-with-std.rs:6:1\n    |\n LL | impl AsRef<Q> for Box<Q> { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL | impl AsRef<Q> for Box<Q> { //~ ERROR conflicting implementations\n              where T: ?Sized;\n \n error[E0119]: conflicting implementations of trait `std::convert::From<S>` for type `S`:\n-  --> $DIR/conflict-with-std.rs:14:1\n+  --> $DIR/conflict-with-std.rs:13:1\n    |\n LL | impl From<S> for S { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL | impl From<S> for S { //~ ERROR conflicting implementations\n            - impl<T> std::convert::From<T> for T;\n \n error[E0119]: conflicting implementations of trait `std::convert::TryFrom<X>` for type `X`:\n-  --> $DIR/conflict-with-std.rs:21:1\n+  --> $DIR/conflict-with-std.rs:20:1\n    |\n LL | impl TryFrom<X> for X { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^^^^"}]}