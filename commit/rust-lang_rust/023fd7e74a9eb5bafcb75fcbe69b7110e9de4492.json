{"sha": "023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyM2ZkN2U3NGE5ZWI1YmFmY2I3NWZjYmU2OWI3MTEwZTlkZTQ0OTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-29T09:33:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-29T09:33:37Z"}, "message": "Auto merge of #52767 - ljedrz:avoid_format, r=petrochenkov\n\nPrefer to_string() to format!()\n\nSimple benchmarks suggest in some cases it can be faster by even 37%:\n```\ntest converting_f64_long  ... bench:         339 ns/iter (+/- 199)\ntest converting_f64_short ... bench:         136 ns/iter (+/- 34)\ntest converting_i32_long  ... bench:          87 ns/iter (+/- 16)\ntest converting_i32_short ... bench:          87 ns/iter (+/- 49)\ntest converting_str       ... bench:          54 ns/iter (+/- 15)\ntest formatting_f64_long  ... bench:         349 ns/iter (+/- 176)\ntest formatting_f64_short ... bench:         145 ns/iter (+/- 14)\ntest formatting_i32_long  ... bench:          98 ns/iter (+/- 14)\ntest formatting_i32_short ... bench:          93 ns/iter (+/- 15)\ntest formatting_str       ... bench:          86 ns/iter (+/- 23)\n```", "tree": {"sha": "c9b50228b27509d45f6d73e33aaec6b482c80c36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9b50228b27509d45f6d73e33aaec6b482c80c36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "html_url": "https://github.com/rust-lang/rust/commit/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9", "html_url": "https://github.com/rust-lang/rust/commit/a5c2d0fffaaf0b764c01bc4066e51ffd475ceae9"}, {"sha": "57a5a9b05423c4f832cd9a3aaa7e06d55fab6efa", "url": "https://api.github.com/repos/rust-lang/rust/commits/57a5a9b05423c4f832cd9a3aaa7e06d55fab6efa", "html_url": "https://github.com/rust-lang/rust/commit/57a5a9b05423c4f832cd9a3aaa7e06d55fab6efa"}], "stats": {"total": 190, "additions": 95, "deletions": 95}, "files": [{"sha": "724d3b741903ff6ffc21e17838be60bf38155a15", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -925,7 +925,7 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTC_VERIFY_LLVM_IR\", \"1\");\n         }\n \n-        cargo.env(\"RUSTC_VERBOSE\", format!(\"{}\", self.verbosity));\n+        cargo.env(\"RUSTC_VERBOSE\", self.verbosity.to_string());\n \n         // in std, we want to avoid denying warnings for stage 0 as that makes cfg's painful.\n         if self.config.deny_warnings && !(mode == Mode::Std && stage == 0) {"}, {"sha": "56ef3f070c1fa8b3c80249d6d15892d99c0ace5e", "filename": "src/libcore/tests/str_lossy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibcore%2Ftests%2Fstr_lossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibcore%2Ftests%2Fstr_lossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fstr_lossy.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -79,7 +79,7 @@ fn chunks() {\n fn display() {\n     assert_eq!(\n         \"Hello\\u{FFFD}\\u{FFFD} There\\u{FFFD} Goodbye\",\n-        &format!(\"{}\", Utf8Lossy::from_bytes(b\"Hello\\xC0\\x80 There\\xE6\\x83 Goodbye\")));\n+        &Utf8Lossy::from_bytes(b\"Hello\\xC0\\x80 There\\xE6\\x83 Goodbye\").to_string());\n }\n \n #[test]"}, {"sha": "90248e89fa73a395ecbb99511a345e3158e8a961", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -557,7 +557,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         // Output the lifetimes fot the first type\n         let lifetimes = sub.regions()\n             .map(|lifetime| {\n-                let s = format!(\"{}\", lifetime);\n+                let s = lifetime.to_string();\n                 if s.is_empty() {\n                     \"'_\".to_string()\n                 } else {\n@@ -582,7 +582,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 value.0.extend((values.0).0);\n                 other_value.0.extend((values.1).0);\n             } else {\n-                value.push_highlighted(format!(\"{}\", type_arg));\n+                value.push_highlighted(type_arg.to_string());\n             }\n \n             if len > 0 && i != len - 1 {\n@@ -716,7 +716,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             mutbl: hir::Mutability,\n             s: &mut DiagnosticStyledString,\n         ) {\n-            let r = &format!(\"{}\", r);\n+            let r = &r.to_string();\n             s.push_highlighted(format!(\n                 \"&{}{}{}\",\n                 r,\n@@ -727,7 +727,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     \"\"\n                 }\n             ));\n-            s.push_normal(format!(\"{}\", ty));\n+            s.push_normal(ty.to_string());\n         }\n \n         match (&t1.sty, &t2.sty) {\n@@ -768,7 +768,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     }\n \n                     fn lifetime_display(lifetime: Region) -> String {\n-                        let s = format!(\"{}\", lifetime);\n+                        let s = lifetime.to_string();\n                         if s.is_empty() {\n                             \"'_\".to_string()\n                         } else {\n@@ -863,8 +863,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     // We couldn't find anything in common, highlight everything.\n                     //     let x: Bar<Qux> = y::<Foo<Zar>>();\n                     (\n-                        DiagnosticStyledString::highlighted(format!(\"{}\", t1)),\n-                        DiagnosticStyledString::highlighted(format!(\"{}\", t2)),\n+                        DiagnosticStyledString::highlighted(t1.to_string()),\n+                        DiagnosticStyledString::highlighted(t2.to_string()),\n                     )\n                 }\n             }\n@@ -873,12 +873,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             (&ty::TyRef(r1, ref_ty1, mutbl1), _) if equals(&ref_ty1, &t2) => {\n                 let mut values = (DiagnosticStyledString::new(), DiagnosticStyledString::new());\n                 push_ty_ref(&r1, ref_ty1, mutbl1, &mut values.0);\n-                values.1.push_normal(format!(\"{}\", t2));\n+                values.1.push_normal(t2.to_string());\n                 values\n             }\n             (_, &ty::TyRef(r2, ref_ty2, mutbl2)) if equals(&t1, &ref_ty2) => {\n                 let mut values = (DiagnosticStyledString::new(), DiagnosticStyledString::new());\n-                values.0.push_normal(format!(\"{}\", t1));\n+                values.0.push_normal(t1.to_string());\n                 push_ty_ref(&r2, ref_ty2, mutbl2, &mut values.1);\n                 values\n             }\n@@ -902,8 +902,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 } else {\n                     // We couldn't find anything in common, highlight everything.\n                     (\n-                        DiagnosticStyledString::highlighted(format!(\"{}\", t1)),\n-                        DiagnosticStyledString::highlighted(format!(\"{}\", t2)),\n+                        DiagnosticStyledString::highlighted(t1.to_string()),\n+                        DiagnosticStyledString::highlighted(t2.to_string()),\n                     )\n                 }\n             }\n@@ -1073,8 +1073,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n \n         Some((\n-            DiagnosticStyledString::highlighted(format!(\"{}\", exp_found.expected)),\n-            DiagnosticStyledString::highlighted(format!(\"{}\", exp_found.found)),\n+            DiagnosticStyledString::highlighted(exp_found.expected.to_string()),\n+            DiagnosticStyledString::highlighted(exp_found.found.to_string()),\n         ))\n     }\n "}, {"sha": "193f86a382795fe58caa9170a26a77363da89bb3", "filename": "src/librustc/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -57,7 +57,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n                         let lifetime_name = match sup_r {\n                             RegionKind::ReFree(FreeRegion {\n                                 bound_region: BoundRegion::BrNamed(_, ref name), ..\n-                            }) => format!(\"{}\", name),\n+                            }) => name.to_string(),\n                             _ => \"'_\".to_owned(),\n                         };\n                         if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(return_sp) {"}, {"sha": "4bfb4c96497ff6327d2d8993f45083923e2a7213", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -2093,7 +2093,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n \n                 // When printing regions, add trailing space if necessary.\n                 let region = if ppaux::verbose() || ppaux::identify_regions() {\n-                    let mut region = format!(\"{}\", region);\n+                    let mut region = region.to_string();\n                     if region.len() > 0 {\n                         region.push(' ');\n                     }"}, {"sha": "1eee6508c59cc6f59a4fa6519bf86a3cb2b63dc6", "filename": "src/librustc/session/code_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fcode_stats.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -135,8 +135,8 @@ impl CodeStats {\n                 let VariantInfo { ref name, kind: _, align: _, size, ref fields } = *variant_info;\n                 let indent = if !struct_like {\n                     let name = match name.as_ref() {\n-                        Some(name) => format!(\"{}\", name),\n-                        None => format!(\"{}\", i),\n+                        Some(name) => name.to_owned(),\n+                        None => i.to_string(),\n                     };\n                     println!(\"print-type-size {}variant `{}`: {} bytes\",\n                              indent, name, size - discr_size);"}, {"sha": "b99c630edfcbd074fb1d295d3c731f668722cf4c", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -543,7 +543,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     &data.parent_trait_ref);\n                 match self.get_parent_trait_ref(&data.parent_code) {\n                     Some(t) => Some(t),\n-                    None => Some(format!(\"{}\", parent_trait_ref.skip_binder().self_ty())),\n+                    None => Some(parent_trait_ref.skip_binder().self_ty().to_string()),\n                 }\n             }\n             _ => None,\n@@ -797,12 +797,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             ty::TypeVariants::TyTuple(ref tys) => ArgKind::Tuple(\n                                 Some(span),\n                                 tys.iter()\n-                                    .map(|ty| (\"_\".to_owned(), format!(\"{}\", ty.sty)))\n+                                    .map(|ty| (\"_\".to_owned(), ty.sty.to_string()))\n                                     .collect::<Vec<_>>()\n                             ),\n-                            _ => ArgKind::Arg(\"_\".to_owned(), format!(\"{}\", t.sty)),\n+                            _ => ArgKind::Arg(\"_\".to_owned(), t.sty.to_string()),\n                         }).collect(),\n-                    ref sty => vec![ArgKind::Arg(\"_\".to_owned(), format!(\"{}\", sty))],\n+                    ref sty => vec![ArgKind::Arg(\"_\".to_owned(), sty.to_string())],\n                 };\n                 if found.len() == expected.len() {\n                     self.report_closure_arg_mismatch(span,\n@@ -989,7 +989,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }) => {\n                 (self.tcx.sess.codemap().def_span(span),\n                  fields.iter().map(|field| {\n-                     ArgKind::Arg(format!(\"{}\", field.ident), \"_\".to_string())\n+                     ArgKind::Arg(field.ident.to_string(), \"_\".to_string())\n                  }).collect::<Vec<_>>())\n             }\n             hir::map::NodeStructCtor(ref variant_data) => {\n@@ -1152,7 +1152,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     ::rustc_target::spec::abi::Abi::Rust\n                 )\n             };\n-            format!(\"{}\", ty::Binder::bind(sig))\n+            ty::Binder::bind(sig).to_string()\n         }\n \n         let argument_is_closure = expected_ref.skip_binder().substs.type_at(0).is_closure();\n@@ -1575,10 +1575,10 @@ impl ArgKind {\n             ty::TyTuple(ref tys) => ArgKind::Tuple(\n                 None,\n                 tys.iter()\n-                   .map(|ty| (\"_\".to_owned(), format!(\"{}\", ty.sty)))\n+                   .map(|ty| (\"_\".to_owned(), ty.sty.to_string()))\n                    .collect::<Vec<_>>()\n             ),\n-            _ => ArgKind::Arg(\"_\".to_owned(), format!(\"{}\", t.sty)),\n+            _ => ArgKind::Arg(\"_\".to_owned(), t.sty.to_string()),\n         }\n     }\n }"}, {"sha": "c44b7327a0830a7e759ff1fdaeefb3a02d787f38", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -315,7 +315,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             ty::TyUint(_) |\n             ty::TyFloat(_) |\n             ty::TyStr => {\n-                buffer.push(&format!(\"{}\", self_ty));\n+                buffer.push(&self_ty.to_string());\n             }\n \n             _ => {"}, {"sha": "4fda3bdca3dfca022e701e591e9b6ff5be0fe779", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -225,7 +225,7 @@ impl AssociatedItem {\n                 // late-bound regions, and we don't want method signatures to show up\n                 // `as for<'r> fn(&'r MyType)`.  Pretty-printing handles late-bound\n                 // regions just fine, showing `fn(&MyType)`.\n-                format!(\"{}\", tcx.fn_sig(self.def_id).skip_binder())\n+                tcx.fn_sig(self.def_id).skip_binder().to_string()\n             }\n             ty::AssociatedKind::Type => format!(\"type {};\", self.ident),\n             ty::AssociatedKind::Existential => format!(\"existential type {};\", self.ident),"}, {"sha": "990fbc4bc917eb02d8c5204f9da7a2139e6dd307", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -242,7 +242,7 @@ pub fn to_readable_str(mut val: usize) -> String {\n         val /= 1000;\n \n         if val == 0 {\n-            groups.push(format!(\"{}\", group));\n+            groups.push(group.to_string());\n             break;\n         } else {\n             groups.push(format!(\"{:03}\", group));"}, {"sha": "ddd0b691aec215de20ee3b1450180c34b1de4188", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -697,7 +697,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 let mut err = self.cannot_act_on_moved_value(use_span,\n                                                              verb,\n                                                              msg,\n-                                                             Some(format!(\"{}\", nl)),\n+                                                             Some(nl.to_string()),\n                                                              Origin::Ast);\n                 let need_note = match lp.ty.sty {\n                     ty::TypeVariants::TyClosure(id, _) => {"}, {"sha": "b99835cb5c64932876420447f871020f0ce4bdd9", "filename": "src/librustc_codegen_llvm/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -149,7 +149,7 @@ impl<'a> ArchiveBuilder<'a> {\n         // Ignoring obj file starting with the crate name\n         // as simple comparison is not enough - there\n         // might be also an extra name suffix\n-        let obj_start = format!(\"{}\", name);\n+        let obj_start = name.to_owned();\n \n         self.add_archive(rlib, move |fname: &str| {\n             // Ignore bytecode/metadata files, no matter the name."}, {"sha": "83ff8bc821c68f768a0a749c97c7a5b4137d1c05", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -811,7 +811,7 @@ fn link_natively(sess: &Session,\n                 }\n             };\n \n-            linker_error.note(&format!(\"{}\", e));\n+            linker_error.note(&e.to_string());\n \n             if !linker_not_found {\n                 linker_error.note(&format!(\"{:?}\", &cmd));"}, {"sha": "ec53151b3b8c74c0ff2a95d7a263469f131c2c66", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -530,7 +530,7 @@ fn run_compiler_with_pool<'a>(\n     if let Some(err) = input_err {\n         // Immediately stop compilation if there was an issue reading\n         // the input (for example if the input stream is not UTF-8).\n-        sess.err(&format!(\"{}\", err));\n+        sess.err(&err.to_string());\n         return (Err(CompileIncomplete::Stopped), Some(sess));\n     }\n \n@@ -1110,7 +1110,7 @@ impl RustcDefaultCalls {\n                         cfgs.push(if let Some(value) = value {\n                             format!(\"{}=\\\"{}\\\"\", name, value)\n                         } else {\n-                            format!(\"{}\", name)\n+                            name.to_string()\n                         });\n                     }\n "}, {"sha": "8df6df155112ec4365d0a4093166d2d99033d50d", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -190,7 +190,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonShorthandFieldPatterns {\n                                      fieldpat.span,\n                                      &format!(\"the `{}:` in this pattern is redundant\", ident));\n                         let subspan = cx.tcx.sess.codemap().span_through_char(fieldpat.span, ':');\n-                        err.span_suggestion_short(subspan, \"remove this\", format!(\"{}\", ident));\n+                        err.span_suggestion_short(subspan, \"remove this\", ident.to_string());\n                         err.emit();\n                     }\n                 }\n@@ -701,7 +701,7 @@ impl EarlyLintPass for BadRepr {\n                         attr.span,\n                         \"`repr` attribute isn't configurable with a literal\",\n                     );\n-                    match format!(\"{}\", lit).as_ref() {\n+                    match lit.to_string().as_ref() {\n                         | \"C\" | \"packed\" | \"rust\" | \"transparent\"\n                         | \"u8\" | \"u16\" | \"u32\" | \"u64\" | \"u128\" | \"usize\"\n                         | \"i8\" | \"i16\" | \"i32\" | \"i64\" | \"i128\" | \"isize\" => {"}, {"sha": "f68bcdd62c695873388510a7c811a21c9ad16618", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -722,7 +722,7 @@ impl<'a> Context<'a> {\n                   root.triple);\n             self.rejected_via_triple.push(CrateMismatch {\n                 path: libpath.to_path_buf(),\n-                got: format!(\"{}\", root.triple),\n+                got: root.triple.to_string(),\n             });\n             return None;\n         }"}, {"sha": "fe33dc0a58a476ca711d3a7f9bfad673a5d27a1d", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -86,7 +86,7 @@ impl<'tcx> fmt::Display for BorrowData<'tcx> {\n             mir::BorrowKind::Unique => \"uniq \",\n             mir::BorrowKind::Mut { .. } => \"mut \",\n         };\n-        let region = format!(\"{}\", self.region);\n+        let region = self.region.to_string();\n         let region = if region.len() > 0 {\n             format!(\"{} \", region)\n         } else {"}, {"sha": "e2ac7dde558547bae248f6310efc9b456a1e9503", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -642,7 +642,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 self.append_local_to_string(local, buf)?;\n             }\n             Place::Static(ref static_) => {\n-                buf.push_str(&format!(\"{}\", &self.tcx.item_name(static_.def_id)));\n+                buf.push_str(&self.tcx.item_name(static_.def_id).to_string());\n             }\n             Place::Projection(ref proj) => {\n                 match proj.elem {\n@@ -766,7 +766,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let local = &self.mir.local_decls[local_index];\n         match local.name {\n             Some(name) => {\n-                buf.push_str(&format!(\"{}\", name));\n+                buf.push_str(&name.to_string());\n                 Ok(())\n             }\n             None => Err(()),\n@@ -794,7 +794,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 ProjectionElem::Index(..)\n                 | ProjectionElem::ConstantIndex { .. }\n                 | ProjectionElem::Subslice { .. } => {\n-                    format!(\"{}\", self.describe_field(&proj.base, field))\n+                    self.describe_field(&proj.base, field).to_string()\n                 }\n             },\n         }\n@@ -808,11 +808,11 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         } else {\n             match ty.sty {\n                 ty::TyAdt(def, _) => if def.is_enum() {\n-                    format!(\"{}\", field.index())\n+                    field.index().to_string()\n                 } else {\n-                    format!(\"{}\", def.non_enum_variant().fields[field.index()].ident)\n+                    def.non_enum_variant().fields[field.index()].ident.to_string()\n                 },\n-                ty::TyTuple(_) => format!(\"{}\", field.index()),\n+                ty::TyTuple(_) => field.index().to_string(),\n                 ty::TyRef(_, ty, _) | ty::TyRawPtr(ty::TypeAndMut { ty, .. }) => {\n                     self.describe_field_from_ty(&ty, field)\n                 }"}, {"sha": "90dc96cbd3cf32e0d7f27c1d0c20a35b972cb3aa", "filename": "src/librustc_mir/borrow_check/flows.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -114,7 +114,7 @@ impl<'b, 'gcx, 'tcx> fmt::Display for Flows<'b, 'gcx, 'tcx> {\n             };\n             saw_one = true;\n             let borrow_data = &self.borrows.operator().borrows()[borrow];\n-            s.push_str(&format!(\"{}\", borrow_data));\n+            s.push_str(&borrow_data.to_string());\n         });\n         s.push_str(\"] \");\n \n@@ -126,7 +126,7 @@ impl<'b, 'gcx, 'tcx> fmt::Display for Flows<'b, 'gcx, 'tcx> {\n             };\n             saw_one = true;\n             let borrow_data = &self.borrows.operator().borrows()[borrow];\n-            s.push_str(&format!(\"{}\", borrow_data));\n+            s.push_str(&borrow_data.to_string());\n         });\n         s.push_str(\"] \");\n \n@@ -138,7 +138,7 @@ impl<'b, 'gcx, 'tcx> fmt::Display for Flows<'b, 'gcx, 'tcx> {\n             };\n             saw_one = true;\n             let move_path = &self.uninits.operator().move_data().move_paths[mpi_uninit];\n-            s.push_str(&format!(\"{}\", move_path));\n+            s.push_str(&move_path.to_string());\n         });\n         s.push_str(\"] \");\n "}, {"sha": "103f431d4bac9c9038b0eeb2a46c2b58153d75db", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -307,7 +307,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                             err.span_suggestion(\n                                 span,\n                                 \"consider removing this dereference operator\",\n-                                format!(\"{}\", &snippet[1..]),\n+                                (&snippet[1..]).to_owned(),\n                             );\n                         }\n                         _ => {"}, {"sha": "a3c24f8af22fc5b3ae72c5a9aa363e400b98749a", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -523,7 +523,7 @@ impl<'a, 'tcx> ClauseDumper<'a, 'tcx> {\n                             Clause::Implies(program_clause) => program_clause,\n                             Clause::ForAll(program_clause) => program_clause.skip_binder(),\n                         };\n-                        format!(\"{}\", program_clause)\n+                        program_clause.to_string()\n                     })\n                     .collect();\n "}, {"sha": "4cde171f1bfd45f8356e43d56f0ffc0558cca29a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -2838,7 +2838,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     ty::TyFnDef(..) => {\n                         let ptr_ty = self.tcx.mk_fn_ptr(arg_ty.fn_sig(self.tcx));\n                         let ptr_ty = self.resolve_type_vars_if_possible(&ptr_ty);\n-                        variadic_error(tcx.sess, arg.span, arg_ty, &format!(\"{}\", ptr_ty));\n+                        variadic_error(tcx.sess, arg.span, arg_ty, &ptr_ty.to_string());\n                     }\n                     _ => {}\n                 }"}, {"sha": "74ef62e0c63c6633a8dc542932974b8990b1cf8b", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -54,9 +54,9 @@ fn inferred_outlives_of<'a, 'tcx>(\n                     let mut pred: Vec<String> = predicates\n                         .iter()\n                         .map(|out_pred| match out_pred {\n-                            ty::Predicate::RegionOutlives(p) => format!(\"{}\", &p),\n+                            ty::Predicate::RegionOutlives(p) => p.to_string(),\n \n-                            ty::Predicate::TypeOutlives(p) => format!(\"{}\", &p),\n+                            ty::Predicate::TypeOutlives(p) => p.to_string(),\n \n                             err => bug!(\"unexpected predicate {:?}\", err),\n                         })"}, {"sha": "58034d1df5a1fa3f7051118c9b4ef3eb5a5fb4f2", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -206,7 +206,7 @@ impl<'a> fmt::Display for WhereClause<'a> {\n                             clause.push_str(\" + \");\n                         }\n \n-                        clause.push_str(&format!(\"{}\", lifetime));\n+                        clause.push_str(&lifetime.to_string());\n                     }\n                 }\n                 &clean::WherePredicate::EqPredicate { ref lhs, ref rhs } => {\n@@ -458,10 +458,10 @@ fn resolved_path(w: &mut fmt::Formatter, did: DefId, path: &clean::Path,\n                             fqp[..fqp.len() - 1].join(\"::\"),\n                             HRef::new(did, fqp.last().unwrap()))\n                 }\n-                None => format!(\"{}\", HRef::new(did, &last.name)),\n+                None => HRef::new(did, &last.name).to_string(),\n             }\n         } else {\n-            format!(\"{}\", HRef::new(did, &last.name))\n+            HRef::new(did, &last.name).to_string()\n         };\n         write!(w, \"{}{}\", path, last.args)?;\n     }\n@@ -883,7 +883,7 @@ impl<'a> fmt::Display for Method<'a> {\n                 if f.alternate() {\n                     args.push_str(&format!(\"{:#}\", input.type_));\n                 } else {\n-                    args.push_str(&format!(\"{}\", input.type_));\n+                    args.push_str(&input.type_.to_string());\n                 }\n                 args_plain.push_str(&format!(\"{:#}\", input.type_));\n             }\n@@ -902,7 +902,7 @@ impl<'a> fmt::Display for Method<'a> {\n         let arrow = if f.alternate() {\n             format!(\"{:#}\", decl.output)\n         } else {\n-            format!(\"{}\", decl.output)\n+            decl.output.to_string()\n         };\n \n         let pad = \" \".repeat(name_len);"}, {"sha": "8d85adfb3d0ff3a052dc317642808d32c550041f", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -881,14 +881,14 @@ mod tests {\n     #[test]\n     fn issue_17736() {\n         let markdown = \"# title\";\n-        format!(\"{}\", Markdown(markdown, &[]));\n+        Markdown(markdown, &[]).to_string();\n         reset_ids(true);\n     }\n \n     #[test]\n     fn test_header() {\n         fn t(input: &str, expect: &str) {\n-            let output = format!(\"{}\", Markdown(input, &[]));\n+            let output = Markdown(input, &[]).to_string();\n             assert_eq!(output, expect, \"original: {}\", input);\n             reset_ids(true);\n         }\n@@ -910,7 +910,7 @@ mod tests {\n     #[test]\n     fn test_header_ids_multiple_blocks() {\n         fn t(input: &str, expect: &str) {\n-            let output = format!(\"{}\", Markdown(input, &[]));\n+            let output = Markdown(input, &[]).to_string();\n             assert_eq!(output, expect, \"original: {}\", input);\n         }\n \n@@ -951,7 +951,7 @@ mod tests {\n     #[test]\n     fn test_markdown_html_escape() {\n         fn t(input: &str, expect: &str) {\n-            let output = format!(\"{}\", MarkdownHtml(input));\n+            let output = MarkdownHtml(input).to_string();\n             assert_eq!(output, expect, \"original: {}\", input);\n         }\n "}, {"sha": "a1ab66ea81c2f87c0aa7ad4e0b0f6d7d2aec6522", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -2058,7 +2058,7 @@ impl<'a> Item<'a> {\n         };\n \n         let lines = if self.item.source.loline == self.item.source.hiline {\n-            format!(\"{}\", self.item.source.loline)\n+            self.item.source.loline.to_string()\n         } else {\n             format!(\"{}-{}\", self.item.source.loline, self.item.source.hiline)\n         };\n@@ -2233,7 +2233,7 @@ fn document_short(w: &mut fmt::Formatter, item: &clean::Item, link: AssocItemLin\n             format!(\"{} [Read more]({})\",\n                     &plain_summary_line(Some(s)), naive_assoc_href(item, link))\n         } else {\n-            format!(\"{}\", &plain_summary_line(Some(s)))\n+            plain_summary_line(Some(s)).to_string()\n         };\n         render_markdown(w, &markdown, item.links(), prefix)?;\n     } else if !prefix.is_empty() {\n@@ -2730,7 +2730,7 @@ fn bounds(t_bounds: &[clean::GenericBound]) -> String {\n                 bounds.push_str(\" + \");\n                 bounds_plain.push_str(\" + \");\n             }\n-            bounds.push_str(&format!(\"{}\", *p));\n+            bounds.push_str(&(*p).to_string());\n             bounds_plain.push_str(&format!(\"{:#}\", *p));\n         }\n     }\n@@ -3391,7 +3391,7 @@ fn render_attribute(attr: &ast::MetaItem) -> Option<String> {\n     let name = attr.name();\n \n     if attr.is_word() {\n-        Some(format!(\"{}\", name))\n+        Some(name.to_string())\n     } else if let Some(v) = attr.value_str() {\n         Some(format!(\"{} = {:?}\", name, v.as_str()))\n     } else if let Some(values) = attr.meta_item_list() {\n@@ -3639,7 +3639,7 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n             }\n         }\n \n-        let impls = format!(\"{}\", RendererStruct(cx, concrete, containing_item));\n+        let impls = RendererStruct(cx, concrete, containing_item).to_string();\n         if !impls.is_empty() {\n             write!(w, \"\\\n                 <h2 id='implementations' class='small-section-header'>\\\n@@ -3755,7 +3755,7 @@ fn spotlight_decl(decl: &clean::FnDecl) -> Result<String, fmt::Error> {\n                             &format!(\"<h3 class=\\\"important\\\">Important traits for {}</h3>\\\n                                       <code class=\\\"content\\\">\",\n                                      impl_.for_));\n-                        trait_.push_str(&format!(\"{}\", impl_.for_));\n+                        trait_.push_str(&impl_.for_.to_string());\n                     }\n \n                     //use the \"where\" class here to make it small"}, {"sha": "88ada5c7f7fc0e51af45eebc8e3ac9f75eebe8f4", "filename": "src/librustdoc/html/toc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustdoc%2Fhtml%2Ftoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftoc.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -157,7 +157,7 @@ impl TocBuilder {\n                 sec_number.push_str(\"0.\");\n             }\n             let number = toc.count_entries_with_level(level);\n-            sec_number.push_str(&format!(\"{}\", number + 1))\n+            sec_number.push_str(&(number + 1).to_string())\n         }\n \n         self.chain.push(TocEntry {"}, {"sha": "36a8fc94dba2f377cbc5daa903dc86c33f4daa5d", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -89,9 +89,9 @@ pub fn render(input: &Path, mut output: PathBuf, matches: &getopts::Matches,\n     reset_ids(false);\n \n     let text = if include_toc {\n-        format!(\"{}\", MarkdownWithToc(text))\n+        MarkdownWithToc(text).to_string()\n     } else {\n-        format!(\"{}\", Markdown(text, &[]))\n+        Markdown(text, &[]).to_string()\n     };\n \n     let err = write!("}, {"sha": "b15321f4ba7bedcf5301bda4afc6f33a75e80ecb", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -2094,15 +2094,15 @@ macro_rules! expect {\n         match $e {\n             Json::Null => Ok(()),\n             other => Err(ExpectedError(\"Null\".to_owned(),\n-                                       format!(\"{}\", other)))\n+                                       other.to_string()))\n         }\n     });\n     ($e:expr, $t:ident) => ({\n         match $e {\n             Json::$t(v) => Ok(v),\n             other => {\n                 Err(ExpectedError(stringify!($t).to_owned(),\n-                                  format!(\"{}\", other)))\n+                                  other.to_string()))\n             }\n         }\n     })\n@@ -2114,14 +2114,14 @@ macro_rules! read_primitive {\n             match self.pop() {\n                 Json::I64(f) => Ok(f as $ty),\n                 Json::U64(f) => Ok(f as $ty),\n-                Json::F64(f) => Err(ExpectedError(\"Integer\".to_owned(), format!(\"{}\", f))),\n+                Json::F64(f) => Err(ExpectedError(\"Integer\".to_owned(), f.to_string())),\n                 // re: #12967.. a type w/ numeric keys (ie HashMap<usize, V> etc)\n                 // is going to have a string here, as per JSON spec.\n                 Json::String(s) => match s.parse().ok() {\n                     Some(f) => Ok(f),\n                     None => Err(ExpectedError(\"Number\".to_owned(), s)),\n                 },\n-                value => Err(ExpectedError(\"Number\".to_owned(), format!(\"{}\", value))),\n+                value => Err(ExpectedError(\"Number\".to_owned(), value.to_string())),\n             }\n         }\n     }\n@@ -2163,7 +2163,7 @@ impl ::Decoder for Decoder {\n                 }\n             },\n             Json::Null => Ok(f64::NAN),\n-            value => Err(ExpectedError(\"Number\".to_owned(), format!(\"{}\", value)))\n+            value => Err(ExpectedError(\"Number\".to_owned(), value.to_string()))\n         }\n     }\n \n@@ -2181,7 +2181,7 @@ impl ::Decoder for Decoder {\n                 _ => ()\n             }\n         }\n-        Err(ExpectedError(\"single character string\".to_owned(), format!(\"{}\", s)))\n+        Err(ExpectedError(\"single character string\".to_owned(), s.to_string()))\n     }\n \n     fn read_str(&mut self) -> DecodeResult<Cow<str>> {\n@@ -2204,7 +2204,7 @@ impl ::Decoder for Decoder {\n                 let n = match o.remove(&\"variant\".to_owned()) {\n                     Some(Json::String(s)) => s,\n                     Some(val) => {\n-                        return Err(ExpectedError(\"String\".to_owned(), format!(\"{}\", val)))\n+                        return Err(ExpectedError(\"String\".to_owned(), val.to_string()))\n                     }\n                     None => {\n                         return Err(MissingFieldError(\"variant\".to_owned()))\n@@ -2217,7 +2217,7 @@ impl ::Decoder for Decoder {\n                         }\n                     },\n                     Some(val) => {\n-                        return Err(ExpectedError(\"Array\".to_owned(), format!(\"{}\", val)))\n+                        return Err(ExpectedError(\"Array\".to_owned(), val.to_string()))\n                     }\n                     None => {\n                         return Err(MissingFieldError(\"fields\".to_owned()))\n@@ -2226,7 +2226,7 @@ impl ::Decoder for Decoder {\n                 n\n             }\n             json => {\n-                return Err(ExpectedError(\"String or Object\".to_owned(), format!(\"{}\", json)))\n+                return Err(ExpectedError(\"String or Object\".to_owned(), json.to_string()))\n             }\n         };\n         let idx = match names.iter().position(|n| *n == &name[..]) {\n@@ -2845,21 +2845,21 @@ mod tests {\n     fn test_write_enum() {\n         let animal = Dog;\n         assert_eq!(\n-            format!(\"{}\", super::as_json(&animal)),\n+            super::as_json(&animal).to_string(),\n             \"\\\"Dog\\\"\"\n         );\n         assert_eq!(\n-            format!(\"{}\", super::as_pretty_json(&animal)),\n+            super::as_pretty_json(&animal).to_string(),\n             \"\\\"Dog\\\"\"\n         );\n \n         let animal = Frog(\"Henry\".to_string(), 349);\n         assert_eq!(\n-            format!(\"{}\", super::as_json(&animal)),\n+            super::as_json(&animal).to_string(),\n             \"{\\\"variant\\\":\\\"Frog\\\",\\\"fields\\\":[\\\"Henry\\\",349]}\"\n         );\n         assert_eq!(\n-            format!(\"{}\", super::as_pretty_json(&animal)),\n+            super::as_pretty_json(&animal).to_string(),\n             \"{\\n  \\\n                \\\"variant\\\": \\\"Frog\\\",\\n  \\\n                \\\"fields\\\": [\\n    \\\n@@ -2872,10 +2872,10 @@ mod tests {\n \n     macro_rules! check_encoder_for_simple {\n         ($value:expr, $expected:expr) => ({\n-            let s = format!(\"{}\", super::as_json(&$value));\n+            let s = super::as_json(&$value).to_string();\n             assert_eq!(s, $expected);\n \n-            let s = format!(\"{}\", super::as_pretty_json(&$value));\n+            let s = super::as_pretty_json(&$value).to_string();\n             assert_eq!(s, $expected);\n         })\n     }"}, {"sha": "22af02079e79670699d8544caa20ef74df35df0e", "filename": "src/libstd/sys/redox/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -58,7 +58,7 @@ impl UdpSocket {\n \n     pub fn recv(&self, buf: &mut [u8]) -> Result<usize> {\n         if let Some(addr) = *self.get_conn() {\n-            let from = self.0.dup(format!(\"{}\", addr).as_bytes())?;\n+            let from = self.0.dup(addr.to_string().as_bytes())?;\n             from.read(buf)\n         } else {\n             Err(Error::new(ErrorKind::Other, \"UdpSocket::recv not connected\"))"}, {"sha": "45204b56ead3631733a2c712061d25586c9eafa2", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -1245,7 +1245,7 @@ mod tests {\n     #[test]\n     fn wtf8_display() {\n         fn d(b: &[u8]) -> String {\n-            format!(\"{}\", &unsafe { Wtf8::from_bytes_unchecked(b) })\n+            (&unsafe { Wtf8::from_bytes_unchecked(b) }).to_string()\n         }\n \n         assert_eq!(\"\", d(\"\".as_bytes()));"}, {"sha": "9f8909e16264e601b6b2ba7184820715e75d0e8b", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -380,7 +380,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                                                             structs, enums and unions\");\n                         if let ast::AttrStyle::Inner = attr.style {\n                             let trait_list = traits.iter()\n-                                .map(|t| format!(\"{}\", t)).collect::<Vec<_>>();\n+                                .map(|t| t.to_string()).collect::<Vec<_>>();\n                             let suggestion = format!(\"#[derive({})]\", trait_list.join(\", \"));\n                             err.span_suggestion_with_applicability(\n                                 span, \"try an outer attribute\", suggestion,\n@@ -558,7 +558,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         invoc.expansion_data.mark.set_expn_info(ExpnInfo {\n             call_site: attr.span,\n             def_site: None,\n-            format: MacroAttribute(Symbol::intern(&format!(\"{}\", attr.path))),\n+            format: MacroAttribute(Symbol::intern(&attr.path.to_string())),\n             allow_internal_unstable: false,\n             allow_internal_unsafe: false,\n             local_inner_macros: false,"}, {"sha": "9011b6e48b974185cca711f9a549631827eb9e6a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -6320,7 +6320,7 @@ impl<'a> Parser<'a> {\n                 mod_name: mod_name.clone(),\n                 default_path: default_path_str,\n                 secondary_path: secondary_path_str,\n-                dir_path: format!(\"{}\", dir_path.display()),\n+                dir_path: dir_path.display().to_string(),\n             }),\n             (true, true) => Err(Error::DuplicatePaths {\n                 mod_name: mod_name.clone(),"}, {"sha": "54ce06f61ef6b18654c534cfe3c47d976da1e7bf", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -631,7 +631,7 @@ pub trait PrintState<'a> {\n                         self.writer().word(&ut.val_to_string(i))\n                     }\n                     ast::LitIntType::Unsuffixed => {\n-                        self.writer().word(&format!(\"{}\", i))\n+                        self.writer().word(&i.to_string())\n                     }\n                 }\n             }"}, {"sha": "dcdd2c590e01f0a3ca878cff9d566b6f5b0c82c6", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -42,10 +42,10 @@ pub fn expand_syntax_ext(\n                 ast::LitKind::Int(i, ast::LitIntType::Unsigned(_))\n                 | ast::LitKind::Int(i, ast::LitIntType::Signed(_))\n                 | ast::LitKind::Int(i, ast::LitIntType::Unsuffixed) => {\n-                    accumulator.push_str(&format!(\"{}\", i));\n+                    accumulator.push_str(&i.to_string());\n                 }\n                 ast::LitKind::Bool(b) => {\n-                    accumulator.push_str(&format!(\"{}\", b));\n+                    accumulator.push_str(&b.to_string());\n                 }\n                 ast::LitKind::Byte(..) | ast::LitKind::ByteStr(..) => {\n                     cx.span_err(e.span, \"cannot concatenate a byte string literal\");"}, {"sha": "57dcfb0d9064de6be31f2f06af4879fa221d104c", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/023fd7e74a9eb5bafcb75fcbe69b7110e9de4492/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=023fd7e74a9eb5bafcb75fcbe69b7110e9de4492", "patch": "@@ -189,7 +189,7 @@ pub fn parse(file: &mut dyn io::Read, longnames: bool) -> Result<TermInfo, Strin\n     macro_rules! t( ($e:expr) => (\n         match $e {\n             Ok(e) => e,\n-            Err(e) => return Err(format!(\"{}\", e))\n+            Err(e) => return Err(e.to_string())\n         }\n     ) );\n "}]}