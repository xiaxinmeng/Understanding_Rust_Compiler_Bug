{"sha": "98dee91f2568522bc129f8cffcaa2879b43646c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZGVlOTFmMjU2ODUyMmJjMTI5ZjhjZmZjYWEyODc5YjQzNjQ2YzM=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-24T01:49:29Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-24T01:49:29Z"}, "message": "Wrote swap_context in assembly. Closes #548. This also allows us to re-enable optimization on OSX for both gcc and clang. Also, re-enamed task-comm-1.rs, which was previously broken by optimization.", "tree": {"sha": "0a629596b2e2243fcc80768d8f33d3b246052169", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a629596b2e2243fcc80768d8f33d3b246052169"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98dee91f2568522bc129f8cffcaa2879b43646c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98dee91f2568522bc129f8cffcaa2879b43646c3", "html_url": "https://github.com/rust-lang/rust/commit/98dee91f2568522bc129f8cffcaa2879b43646c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98dee91f2568522bc129f8cffcaa2879b43646c3/comments", "author": null, "committer": null, "parents": [{"sha": "3c534b2bef5514ebce7acb2c829d7eee58f9bb5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c534b2bef5514ebce7acb2c829d7eee58f9bb5e", "html_url": "https://github.com/rust-lang/rust/commit/3c534b2bef5514ebce7acb2c829d7eee58f9bb5e"}], "stats": {"total": 80, "additions": 45, "deletions": 35}, "files": [{"sha": "e56b45ee6fc58b59f260c593303102bb2897405b", "filename": "mk/platform.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98dee91f2568522bc129f8cffcaa2879b43646c3/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/98dee91f2568522bc129f8cffcaa2879b43646c3/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=98dee91f2568522bc129f8cffcaa2879b43646c3", "patch": "@@ -48,8 +48,8 @@ ifeq ($(CFG_OSTYPE), Darwin)\n   # approaches welcome!\n   #\n   # NB: Currently GCC's optimizer breaks rustrt (task-comm-1 hangs) on Darwin.\n-  CFG_GCC_CFLAGS += -m32 -O0\n-  CFG_CLANG_CFLAGS += -m32 -O0\n+  CFG_GCC_CFLAGS += -m32 -O2\n+  CFG_CLANG_CFLAGS += -m32 -O2\n   ifeq ($(CFG_CPUTYPE), x86_64)\n     CFG_GCCISH_CFLAGS += -arch i386\n     CFG_GCCISH_LINK_FLAGS += -arch i386"}, {"sha": "2b45aef3c4c3f1d779e63a336bd794d3dc034690", "filename": "src/rt/arch/i386/_context.s", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/98dee91f2568522bc129f8cffcaa2879b43646c3/src%2Frt%2Farch%2Fi386%2F_context.s", "raw_url": "https://github.com/rust-lang/rust/raw/98dee91f2568522bc129f8cffcaa2879b43646c3/src%2Frt%2Farch%2Fi386%2F_context.s", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2F_context.s?ref=98dee91f2568522bc129f8cffcaa2879b43646c3", "patch": "@@ -25,7 +25,6 @@ get_registers:\n \tmovl %ebp, 16(%eax)\n \tmovl %esi, 20(%eax)\n \tmovl %edi, 24(%eax)\n-\tmovl %esp, 28(%eax)\n \tmovw %cs, 32(%eax)\n \tmovw %ds, 34(%eax)\n \tmovw %ss, 36(%eax)\n@@ -39,12 +38,14 @@ get_registers:\n \tmovl %ecx, 44(%eax)\n \n \t// save the return address as the instruction pointer\n-\tmovl 0(%esp), %ecx\n+    // and save the stack pointer of the caller\n+    popl %ecx\n+    movl %esp, 28(%eax)\n \tmovl %ecx, 48(%eax)\n \n \t// return 0\n \txor %eax, %eax\n-\tret\n+\tjmp *%ecx\n \n .globl set_registers\n set_registers:\n@@ -70,17 +71,36 @@ set_registers:\n \tpush %ecx\n \tpopf\n \n-\t// get ready to return back to the old eip\n-\t// We could write this directly to 0(%esp), but Valgrind on OS X\n-\t// complains.\n-\tpop %ecx\n+    // get ready to return.\n \tmov 48(%eax), %ecx\n \tpush %ecx\t\n-\t//movl %ecx, 0(%esp)\n \t\n \t// okay, now we can restore ecx.\n \tmovl 8(%eax), %ecx\n \n \t// return 1 to the saved eip\n \tmovl $1, %eax\n \tret\n+\n+// swap_registers(registers_t *oregs, registers_t *regs)\n+.globl swap_registers\n+swap_registers:\n+    // %eax = get_registers(oregs);\n+    movl 4(%esp), %eax\n+    push %eax\n+    call get_registers\n+        \n+    // if(!%eax) goto call_set\n+    test %eax, %eax\n+    jz call_set\n+\n+    // else\n+    addl $4, %esp\n+    ret\n+        \n+call_set:\n+    // set_registers(regs)\n+    movl 12(%esp), %eax\n+    movl %eax, 0(%esp)\n+    call set_registers\n+    // set_registers never returns\n\\ No newline at end of file"}, {"sha": "0d33376935c634de072b53bdb2ab42c4f0813fd4", "filename": "src/rt/arch/i386/context.cpp", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/98dee91f2568522bc129f8cffcaa2879b43646c3/src%2Frt%2Farch%2Fi386%2Fcontext.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/98dee91f2568522bc129f8cffcaa2879b43646c3/src%2Frt%2Farch%2Fi386%2Fcontext.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fcontext.cpp?ref=98dee91f2568522bc129f8cffcaa2879b43646c3", "patch": "@@ -5,32 +5,22 @@\n #include <stdio.h>\n #include <stdlib.h>\n \n-extern \"C\" uint32_t CDECL get_registers(registers_t *regs) \n-  asm (\"get_registers\");\n-extern \"C\" uint32_t CDECL set_registers(registers_t *regs)\n-  asm (\"set_registers\");\n+//extern \"C\" uint32_t CDECL get_registers(registers_t *regs) \n+//  asm (\"get_registers\");\n+extern \"C\" uint32_t CDECL swap_registers(registers_t *oregs, \n+                                         registers_t *regs)\n+  asm (\"swap_registers\");\n \n context::context()\n   : next(NULL)\n {\n-  get_registers(&regs);\n-}\n-\n-void context::set()\n-{\n-  //printf(\"Activating %p...\\n\", this);\n-  set_registers(&regs);\n+  //get_registers(&regs);\n+  swap_registers(&regs, &regs);\n }\n \n void context::swap(context &out)\n {\n-  //printf(\"Swapping to %p and saving in %p\\n\", this, &out);\n-  uint32_t r = get_registers(&out.regs);\n-  //printf(\"get_registers = %d, sp = 0x%x\\n\", r, out.regs.esp);\n-  if(!r) {\n-    set();\n-  }\n-  //printf(\"Resumed %p...\\n\", &out);\n+  swap_registers(&out.regs, &regs);\n }\n \n void context::call(void *f, void *arg, void *stack) {\n@@ -43,7 +33,6 @@ void context::call(void *f, void *arg, void *stack) {\n   *--sp = (uint32_t)this;\n   *--sp = (uint32_t)arg;\n   *--sp = 0xdeadbeef;\n-  *--sp = 0xca11ab1e;\n \n   regs.esp = (uint32_t)sp;\n   regs.eip = (uint32_t)f;"}, {"sha": "cf14ffe0753e010fb8ca3ad8ae84021d7dd274d5", "filename": "src/rt/arch/i386/context.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98dee91f2568522bc129f8cffcaa2879b43646c3/src%2Frt%2Farch%2Fi386%2Fcontext.h", "raw_url": "https://github.com/rust-lang/rust/raw/98dee91f2568522bc129f8cffcaa2879b43646c3/src%2Frt%2Farch%2Fi386%2Fcontext.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fcontext.h?ref=98dee91f2568522bc129f8cffcaa2879b43646c3", "patch": "@@ -25,8 +25,6 @@ class context {\n   \n   context *next;\n \n-  void set();\n-  \n   void swap(context &out);\n \n   void call(void *f, void *arg, void *sp);"}, {"sha": "0c321022fa92960f73eaf5e7bf1dd271ec29b2ee", "filename": "src/test/run-pass/task-comm-1.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98dee91f2568522bc129f8cffcaa2879b43646c3/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98dee91f2568522bc129f8cffcaa2879b43646c3/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs?ref=98dee91f2568522bc129f8cffcaa2879b43646c3", "patch": "@@ -1,6 +1,9 @@\n // xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n+\n+use std;\n+\n+import std::task::join;\n+\n fn main() -> () {\n    test00(); \n }\n@@ -10,7 +13,7 @@ fn start() {\n }\n \n fn test00() {\n-    let task t = spawn thread start();\n-    join t;\n+    let task t = spawn start();\n+    join(t);\n     log \"Completing.\";\n }\n\\ No newline at end of file"}]}