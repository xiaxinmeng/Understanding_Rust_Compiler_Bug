{"sha": "7eb7b5a4af94e09ecc1fbad0d1cd667880788547", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYjdiNWE0YWY5NGUwOWVjYzFmYmFkMGQxY2Q2Njc4ODA3ODg1NDc=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-29T03:08:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-29T03:08:53Z"}, "message": "Rollup merge of #78470 - camelid:fixup-std-path-intra-doc, r=jyn514\n\nClean up intra-doc links in `std::path`", "tree": {"sha": "de5dd53b6abb9493cd3da4cbaadcb0f996fd66bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de5dd53b6abb9493cd3da4cbaadcb0f996fd66bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eb7b5a4af94e09ecc1fbad0d1cd667880788547", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfmjJFCRBK7hj4Ov3rIwAAdHIIAB1TVQowFf97gc2SwdgHGaAO\nK8Om1DmskjhPvvqtOQb8sV5503nKx3DHwe6sWKIR0i9t2AWP0PLyO+OmyLmRGf9G\n/d5nDVgrMOfqQGB2KHuwBX+uGogz0R+YXm8NAfaIlRupXtBpWcdiY4fzWHxZutuO\nhm8ML0JQt64Thj0F3c4lTxObZT53kLnW9o6LsHrXwjC8XJuKVCoRgyRo05ySXuLb\nOIUqyXbFJH2eggJsWbOmv8HH7BM5L4EDMrf1g/xB+0V6c101ilZg630GrjS0w1Rv\nPfPffU2p3Rhm7hem68JWM0OpEUPyHv3tTwtXUnRp/IOdUiXMFiwN1KOpFFZ3Roo=\n=kyMQ\n-----END PGP SIGNATURE-----\n", "payload": "tree de5dd53b6abb9493cd3da4cbaadcb0f996fd66bb\nparent a7a05388023b83fe7b6f39d387b17b3af7f9a653\nparent 0217edbd292eeb9d5febfda6e33c574ab88cf916\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603940933 +0900\ncommitter GitHub <noreply@github.com> 1603940933 +0900\n\nRollup merge of #78470 - camelid:fixup-std-path-intra-doc, r=jyn514\n\nClean up intra-doc links in `std::path`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb7b5a4af94e09ecc1fbad0d1cd667880788547", "html_url": "https://github.com/rust-lang/rust/commit/7eb7b5a4af94e09ecc1fbad0d1cd667880788547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eb7b5a4af94e09ecc1fbad0d1cd667880788547/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7a05388023b83fe7b6f39d387b17b3af7f9a653", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7a05388023b83fe7b6f39d387b17b3af7f9a653", "html_url": "https://github.com/rust-lang/rust/commit/a7a05388023b83fe7b6f39d387b17b3af7f9a653"}, {"sha": "0217edbd292eeb9d5febfda6e33c574ab88cf916", "url": "https://api.github.com/repos/rust-lang/rust/commits/0217edbd292eeb9d5febfda6e33c574ab88cf916", "html_url": "https://github.com/rust-lang/rust/commit/0217edbd292eeb9d5febfda6e33c574ab88cf916"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "8a75c1d6058da2eb7044af40e48271852e54abb0", "filename": "library/std/src/path.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7eb7b5a4af94e09ecc1fbad0d1cd667880788547/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb7b5a4af94e09ecc1fbad0d1cd667880788547/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=7eb7b5a4af94e09ecc1fbad0d1cd667880788547", "patch": "@@ -446,7 +446,7 @@ impl Hash for PrefixComponent<'_> {\n /// (`/` or `\\`).\n ///\n /// This `enum` is created by iterating over [`Components`], which in turn is\n-/// created by the [`components`][`Path::components`] method on [`Path`].\n+/// created by the [`components`](Path::components) method on [`Path`].\n ///\n /// # Examples\n ///\n@@ -1319,7 +1319,7 @@ impl PathBuf {\n         self.inner\n     }\n \n-    /// Converts this `PathBuf` into a [boxed][`Box`] [`Path`].\n+    /// Converts this `PathBuf` into a [boxed](Box) [`Path`].\n     #[stable(feature = \"into_boxed_path\", since = \"1.20.0\")]\n     pub fn into_boxed_path(self) -> Box<Path> {\n         let rw = Box::into_raw(self.inner.into_boxed_os_str()) as *mut Path;\n@@ -1686,8 +1686,7 @@ pub struct Path {\n     inner: OsStr,\n }\n \n-/// An error returned from [`Path::strip_prefix`][`strip_prefix`] if the prefix\n-/// was not found.\n+/// An error returned from [`Path::strip_prefix`] if the prefix was not found.\n ///\n /// This `struct` is created by the [`strip_prefix`] method on [`Path`].\n /// See its documentation for more.\n@@ -2470,7 +2469,7 @@ impl Path {\n         fs::metadata(self).map(|m| m.is_dir()).unwrap_or(false)\n     }\n \n-    /// Converts a [`Box<Path>`][`Box`] into a [`PathBuf`] without copying or\n+    /// Converts a [`Box<Path>`](Box) into a [`PathBuf`] without copying or\n     /// allocating.\n     #[stable(feature = \"into_boxed_path\", since = \"1.20.0\")]\n     pub fn into_path_buf(self: Box<Path>) -> PathBuf {\n@@ -2498,7 +2497,7 @@ impl fmt::Debug for Path {\n ///\n /// A [`Path`] might contain non-Unicode data. This `struct` implements the\n /// [`Display`] trait in a way that mitigates that. It is created by the\n-/// [`display`][`Path::display`] method on [`Path`].\n+/// [`display`](Path::display) method on [`Path`].\n ///\n /// # Examples\n ///"}]}