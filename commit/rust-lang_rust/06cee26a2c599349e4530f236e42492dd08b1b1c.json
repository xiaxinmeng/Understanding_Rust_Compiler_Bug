{"sha": "06cee26a2c599349e4530f236e42492dd08b1b1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2Y2VlMjZhMmM1OTkzNDllNDUzMGYyMzZlNDI0OTJkZDA4YjFiMWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-11T11:07:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-11T11:07:56Z"}, "message": "Merge #9563\n\n9563: internal: move some presentation-specific concerns out of IDE crate r=Veykril a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "ac37c76dde9e46d7f72de099970e89db71dbdd71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac37c76dde9e46d7f72de099970e89db71dbdd71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06cee26a2c599349e4530f236e42492dd08b1b1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg6tEMCRBK7hj4Ov3rIwAAhMQIAJ3RFvktPvsj0UYp4cre5tR3\nmCpQMe4NTNeW76PfG9h+EzE6nSOJ7yyd1P8Cs0tM09I3mlEn9EckkicazQzTxCC+\nVE3BHbSKC5rLpzkRr97Xr7KYaHznhsfDghvG0dkcfkciQ4pkzbbhApF4/Q08xckX\nJmFwmLO4e1A1U+AGNiepvT0Z6UQ8DdvQpkpuKAyJVKkYvRgCgiCBa81h/3G5u2Sh\n6w+lrax4HhNggsrBn0tEYQiw3N55xxYPvRkqaaURQlvQRTTnzAN30vKNBQiuksh8\nxXc3pHsByO6TSxWKzErqAvR03W0xptFdc4e/6tzTZrufU7LDd63iZJLAvckf5hY=\n=B9an\n-----END PGP SIGNATURE-----\n", "payload": "tree ac37c76dde9e46d7f72de099970e89db71dbdd71\nparent 325140a165e1081432cb758fc4114a3eff0af490\nparent 92059ea438a77f14cc0a93eb6ccc67b91871fbc4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626001676 +0000\ncommitter GitHub <noreply@github.com> 1626001676 +0000\n\nMerge #9563\n\n9563: internal: move some presentation-specific concerns out of IDE crate r=Veykril a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06cee26a2c599349e4530f236e42492dd08b1b1c", "html_url": "https://github.com/rust-lang/rust/commit/06cee26a2c599349e4530f236e42492dd08b1b1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06cee26a2c599349e4530f236e42492dd08b1b1c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "325140a165e1081432cb758fc4114a3eff0af490", "url": "https://api.github.com/repos/rust-lang/rust/commits/325140a165e1081432cb758fc4114a3eff0af490", "html_url": "https://github.com/rust-lang/rust/commit/325140a165e1081432cb758fc4114a3eff0af490"}, {"sha": "92059ea438a77f14cc0a93eb6ccc67b91871fbc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/92059ea438a77f14cc0a93eb6ccc67b91871fbc4", "html_url": "https://github.com/rust-lang/rust/commit/92059ea438a77f14cc0a93eb6ccc67b91871fbc4"}], "stats": {"total": 361, "additions": 94, "deletions": 267}, "files": [{"sha": "9069854353c7ab42d05d128cd3ee92a8307eba60", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 26, "deletions": 221, "changes": 247, "blob_url": "https://github.com/rust-lang/rust/blob/06cee26a2c599349e4530f236e42492dd08b1b1c/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cee26a2c599349e4530f236e42492dd08b1b1c/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=06cee26a2c599349e4530f236e42492dd08b1b1c", "patch": "@@ -29,7 +29,7 @@ pub struct Annotation {\n \n #[derive(Debug)]\n pub enum AnnotationKind {\n-    Runnable { debug: bool, runnable: Runnable },\n+    Runnable(Runnable),\n     HasImpls { position: FilePosition, data: Option<Vec<NavigationTarget>> },\n     HasReferences { position: FilePosition, data: Option<Vec<FileRange>> },\n }\n@@ -40,8 +40,6 @@ pub struct AnnotationConfig {\n     pub annotate_impls: bool,\n     pub annotate_references: bool,\n     pub annotate_method_references: bool,\n-    pub run: bool,\n-    pub debug: bool,\n }\n \n pub(crate) fn annotations(\n@@ -59,20 +57,7 @@ pub(crate) fn annotations(\n \n             let range = runnable.nav.focus_or_full_range();\n \n-            // dbg_runnable should go after the run annotation, to prevent a clone we do it this way\n-            let dbg_runnable = (runnable.debugee() && config.debug).then(|| Annotation {\n-                range,\n-                kind: AnnotationKind::Runnable { debug: true, runnable: runnable.clone() },\n-            });\n-\n-            if config.run {\n-                annotations.push(Annotation {\n-                    range,\n-                    kind: AnnotationKind::Runnable { debug: false, runnable },\n-                });\n-            }\n-\n-            annotations.extend(dbg_runnable);\n+            annotations.push(Annotation { range, kind: AnnotationKind::Runnable(runnable) });\n         }\n     }\n \n@@ -194,8 +179,6 @@ mod tests {\n                     annotate_impls: true,\n                     annotate_references: true,\n                     annotate_method_references: true,\n-                    run: true,\n-                    debug: true,\n                 },\n                 file_id,\n             )\n@@ -223,9 +206,8 @@ fn main() {\n                 [\n                     Annotation {\n                         range: 53..57,\n-                        kind: Runnable {\n-                            debug: false,\n-                            runnable: Runnable {\n+                        kind: Runnable(\n+                            Runnable {\n                                 use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n@@ -239,27 +221,7 @@ fn main() {\n                                 kind: Bin,\n                                 cfg: None,\n                             },\n-                        },\n-                    },\n-                    Annotation {\n-                        range: 53..57,\n-                        kind: Runnable {\n-                            debug: true,\n-                            runnable: Runnable {\n-                                use_name_in_title: false,\n-                                nav: NavigationTarget {\n-                                    file_id: FileId(\n-                                        0,\n-                                    ),\n-                                    full_range: 50..85,\n-                                    focus_range: 53..57,\n-                                    name: \"main\",\n-                                    kind: Function,\n-                                },\n-                                kind: Bin,\n-                                cfg: None,\n-                            },\n-                        },\n+                        ),\n                     },\n                     Annotation {\n                         range: 6..10,\n@@ -329,9 +291,8 @@ fn main() {\n                 [\n                     Annotation {\n                         range: 17..21,\n-                        kind: Runnable {\n-                            debug: false,\n-                            runnable: Runnable {\n+                        kind: Runnable(\n+                            Runnable {\n                                 use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n@@ -345,27 +306,7 @@ fn main() {\n                                 kind: Bin,\n                                 cfg: None,\n                             },\n-                        },\n-                    },\n-                    Annotation {\n-                        range: 17..21,\n-                        kind: Runnable {\n-                            debug: true,\n-                            runnable: Runnable {\n-                                use_name_in_title: false,\n-                                nav: NavigationTarget {\n-                                    file_id: FileId(\n-                                        0,\n-                                    ),\n-                                    full_range: 14..48,\n-                                    focus_range: 17..21,\n-                                    name: \"main\",\n-                                    kind: Function,\n-                                },\n-                                kind: Bin,\n-                                cfg: None,\n-                            },\n-                        },\n+                        ),\n                     },\n                     Annotation {\n                         range: 7..11,\n@@ -439,29 +380,8 @@ fn main() {\n                 [\n                     Annotation {\n                         range: 69..73,\n-                        kind: Runnable {\n-                            debug: false,\n-                            runnable: Runnable {\n-                                use_name_in_title: false,\n-                                nav: NavigationTarget {\n-                                    file_id: FileId(\n-                                        0,\n-                                    ),\n-                                    full_range: 66..100,\n-                                    focus_range: 69..73,\n-                                    name: \"main\",\n-                                    kind: Function,\n-                                },\n-                                kind: Bin,\n-                                cfg: None,\n-                            },\n-                        },\n-                    },\n-                    Annotation {\n-                        range: 69..73,\n-                        kind: Runnable {\n-                            debug: true,\n-                            runnable: Runnable {\n+                        kind: Runnable(\n+                            Runnable {\n                                 use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n@@ -475,7 +395,7 @@ fn main() {\n                                 kind: Bin,\n                                 cfg: None,\n                             },\n-                        },\n+                        ),\n                     },\n                     Annotation {\n                         range: 7..11,\n@@ -602,29 +522,8 @@ fn main() {}\n                 [\n                     Annotation {\n                         range: 3..7,\n-                        kind: Runnable {\n-                            debug: false,\n-                            runnable: Runnable {\n-                                use_name_in_title: false,\n-                                nav: NavigationTarget {\n-                                    file_id: FileId(\n-                                        0,\n-                                    ),\n-                                    full_range: 0..12,\n-                                    focus_range: 3..7,\n-                                    name: \"main\",\n-                                    kind: Function,\n-                                },\n-                                kind: Bin,\n-                                cfg: None,\n-                            },\n-                        },\n-                    },\n-                    Annotation {\n-                        range: 3..7,\n-                        kind: Runnable {\n-                            debug: true,\n-                            runnable: Runnable {\n+                        kind: Runnable(\n+                            Runnable {\n                                 use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n@@ -638,7 +537,7 @@ fn main() {}\n                                 kind: Bin,\n                                 cfg: None,\n                             },\n-                        },\n+                        ),\n                     },\n                     Annotation {\n                         range: 3..7,\n@@ -677,29 +576,8 @@ fn main() {\n                 [\n                     Annotation {\n                         range: 61..65,\n-                        kind: Runnable {\n-                            debug: false,\n-                            runnable: Runnable {\n-                                use_name_in_title: false,\n-                                nav: NavigationTarget {\n-                                    file_id: FileId(\n-                                        0,\n-                                    ),\n-                                    full_range: 58..95,\n-                                    focus_range: 61..65,\n-                                    name: \"main\",\n-                                    kind: Function,\n-                                },\n-                                kind: Bin,\n-                                cfg: None,\n-                            },\n-                        },\n-                    },\n-                    Annotation {\n-                        range: 61..65,\n-                        kind: Runnable {\n-                            debug: true,\n-                            runnable: Runnable {\n+                        kind: Runnable(\n+                            Runnable {\n                                 use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n@@ -713,7 +591,7 @@ fn main() {\n                                 kind: Bin,\n                                 cfg: None,\n                             },\n-                        },\n+                        ),\n                     },\n                     Annotation {\n                         range: 7..11,\n@@ -821,9 +699,8 @@ mod tests {\n                 [\n                     Annotation {\n                         range: 3..7,\n-                        kind: Runnable {\n-                            debug: false,\n-                            runnable: Runnable {\n+                        kind: Runnable(\n+                            Runnable {\n                                 use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n@@ -837,33 +714,12 @@ mod tests {\n                                 kind: Bin,\n                                 cfg: None,\n                             },\n-                        },\n-                    },\n-                    Annotation {\n-                        range: 3..7,\n-                        kind: Runnable {\n-                            debug: true,\n-                            runnable: Runnable {\n-                                use_name_in_title: false,\n-                                nav: NavigationTarget {\n-                                    file_id: FileId(\n-                                        0,\n-                                    ),\n-                                    full_range: 0..12,\n-                                    focus_range: 3..7,\n-                                    name: \"main\",\n-                                    kind: Function,\n-                                },\n-                                kind: Bin,\n-                                cfg: None,\n-                            },\n-                        },\n+                        ),\n                     },\n                     Annotation {\n                         range: 18..23,\n-                        kind: Runnable {\n-                            debug: false,\n-                            runnable: Runnable {\n+                        kind: Runnable(\n+                            Runnable {\n                                 use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n@@ -880,63 +736,12 @@ mod tests {\n                                 },\n                                 cfg: None,\n                             },\n-                        },\n-                    },\n-                    Annotation {\n-                        range: 18..23,\n-                        kind: Runnable {\n-                            debug: true,\n-                            runnable: Runnable {\n-                                use_name_in_title: false,\n-                                nav: NavigationTarget {\n-                                    file_id: FileId(\n-                                        0,\n-                                    ),\n-                                    full_range: 14..64,\n-                                    focus_range: 18..23,\n-                                    name: \"tests\",\n-                                    kind: Module,\n-                                    description: \"mod tests\",\n-                                },\n-                                kind: TestMod {\n-                                    path: \"tests\",\n-                                },\n-                                cfg: None,\n-                            },\n-                        },\n-                    },\n-                    Annotation {\n-                        range: 45..57,\n-                        kind: Runnable {\n-                            debug: false,\n-                            runnable: Runnable {\n-                                use_name_in_title: false,\n-                                nav: NavigationTarget {\n-                                    file_id: FileId(\n-                                        0,\n-                                    ),\n-                                    full_range: 30..62,\n-                                    focus_range: 45..57,\n-                                    name: \"my_cool_test\",\n-                                    kind: Function,\n-                                },\n-                                kind: Test {\n-                                    test_id: Path(\n-                                        \"tests::my_cool_test\",\n-                                    ),\n-                                    attr: TestAttr {\n-                                        ignore: false,\n-                                    },\n-                                },\n-                                cfg: None,\n-                            },\n-                        },\n+                        ),\n                     },\n                     Annotation {\n                         range: 45..57,\n-                        kind: Runnable {\n-                            debug: true,\n-                            runnable: Runnable {\n+                        kind: Runnable(\n+                            Runnable {\n                                 use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n@@ -957,7 +762,7 @@ mod tests {\n                                 },\n                                 cfg: None,\n                             },\n-                        },\n+                        ),\n                     },\n                     Annotation {\n                         range: 3..7,"}, {"sha": "51c01ea31dda6e44e7b99c05164b22a33d4ba99e", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/06cee26a2c599349e4530f236e42492dd08b1b1c/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cee26a2c599349e4530f236e42492dd08b1b1c/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=06cee26a2c599349e4530f236e42492dd08b1b1c", "patch": "@@ -74,16 +74,6 @@ impl Runnable {\n         }\n     }\n \n-    pub fn debugee(&self) -> bool {\n-        matches!(\n-            &self.kind,\n-            RunnableKind::TestMod { .. }\n-                | RunnableKind::Test { .. }\n-                | RunnableKind::Bench { .. }\n-                | RunnableKind::Bin\n-        )\n-    }\n-\n     pub fn title(&self) -> String {\n         let mut s = String::from(\"\u25b6\\u{fe0e} Run \");\n         if self.use_name_in_title {"}, {"sha": "af53eb2396f220b2a09c9cd357124bce42b0b0f2", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 38, "deletions": 28, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/06cee26a2c599349e4530f236e42492dd08b1b1c/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cee26a2c599349e4530f236e42492dd08b1b1c/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=06cee26a2c599349e4530f236e42492dd08b1b1c", "patch": "@@ -26,7 +26,7 @@ use lsp_types::{\n };\n use project_model::TargetKind;\n use serde_json::json;\n-use stdx::format_to;\n+use stdx::{format_to, never};\n use syntax::{algo, ast, AstNode, TextRange, TextSize};\n \n use crate::{\n@@ -1133,41 +1133,51 @@ pub(crate) fn handle_code_lens(\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let cargo_target_spec = CargoTargetSpec::for_file(&snap, file_id)?;\n \n-    let lenses = snap\n-        .analysis\n-        .annotations(\n-            &AnnotationConfig {\n-                binary_target: cargo_target_spec\n-                    .map(|spec| {\n-                        matches!(\n-                            spec.target_kind,\n-                            TargetKind::Bin | TargetKind::Example | TargetKind::Test\n-                        )\n-                    })\n-                    .unwrap_or(false),\n-                annotate_runnables: lens_config.runnable(),\n-                annotate_impls: lens_config.implementations,\n-                annotate_references: lens_config.refs,\n-                annotate_method_references: lens_config.method_refs,\n-                run: lens_config.run,\n-                debug: lens_config.debug,\n-            },\n-            file_id,\n-        )?\n-        .into_iter()\n-        .map(|annotation| to_proto::code_lens(&snap, annotation).unwrap())\n-        .collect();\n+    let annotations = snap.analysis.annotations(\n+        &AnnotationConfig {\n+            binary_target: cargo_target_spec\n+                .map(|spec| {\n+                    matches!(\n+                        spec.target_kind,\n+                        TargetKind::Bin | TargetKind::Example | TargetKind::Test\n+                    )\n+                })\n+                .unwrap_or(false),\n+            annotate_runnables: lens_config.runnable(),\n+            annotate_impls: lens_config.implementations,\n+            annotate_references: lens_config.refs,\n+            annotate_method_references: lens_config.method_refs,\n+        },\n+        file_id,\n+    )?;\n \n-    Ok(Some(lenses))\n+    let mut res = Vec::new();\n+    for a in annotations {\n+        to_proto::code_lens(&mut res, &snap, a)?;\n+    }\n+\n+    Ok(Some(res))\n }\n \n pub(crate) fn handle_code_lens_resolve(\n     snap: GlobalStateSnapshot,\n     code_lens: CodeLens,\n ) -> Result<CodeLens> {\n-    let annotation = from_proto::annotation(&snap, code_lens)?;\n+    let annotation = from_proto::annotation(&snap, code_lens.clone())?;\n+    let annotation = snap.analysis.resolve_annotation(annotation)?;\n+\n+    let mut acc = Vec::new();\n+    to_proto::code_lens(&mut acc, &snap, annotation)?;\n \n-    to_proto::code_lens(&snap, snap.analysis.resolve_annotation(annotation)?)\n+    let res = match acc.pop() {\n+        Some(it) if acc.is_empty() => it,\n+        _ => {\n+            never!();\n+            code_lens\n+        }\n+    };\n+\n+    Ok(res)\n }\n \n pub(crate) fn handle_document_highlight("}, {"sha": "060b69e088001deed40b482fd2fc0b9e8f22facd", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/06cee26a2c599349e4530f236e42492dd08b1b1c/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06cee26a2c599349e4530f236e42492dd08b1b1c/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=06cee26a2c599349e4530f236e42492dd08b1b1c", "patch": "@@ -988,21 +988,42 @@ pub(crate) fn runnable(\n }\n \n pub(crate) fn code_lens(\n+    acc: &mut Vec<lsp_types::CodeLens>,\n     snap: &GlobalStateSnapshot,\n     annotation: Annotation,\n-) -> Result<lsp_types::CodeLens> {\n+) -> Result<()> {\n     match annotation.kind {\n-        AnnotationKind::Runnable { debug, runnable: run } => {\n+        AnnotationKind::Runnable(run) => {\n             let line_index = snap.file_line_index(run.nav.file_id)?;\n             let annotation_range = range(&line_index, annotation.range);\n \n             let title = run.title();\n+            let can_debug = match run.kind {\n+                ide::RunnableKind::DocTest { .. } => false,\n+                ide::RunnableKind::TestMod { .. }\n+                | ide::RunnableKind::Test { .. }\n+                | ide::RunnableKind::Bench { .. }\n+                | ide::RunnableKind::Bin => true,\n+            };\n             let r = runnable(snap, run)?;\n \n-            let command =\n-                if debug { command::debug_single(&r) } else { command::run_single(&r, &title) };\n-\n-            Ok(lsp_types::CodeLens { range: annotation_range, command: Some(command), data: None })\n+            let lens_config = snap.config.lens();\n+            if lens_config.run {\n+                let command = command::run_single(&r, &title);\n+                acc.push(lsp_types::CodeLens {\n+                    range: annotation_range,\n+                    command: Some(command),\n+                    data: None,\n+                })\n+            }\n+            if lens_config.debug && can_debug {\n+                let command = command::debug_single(&r);\n+                acc.push(lsp_types::CodeLens {\n+                    range: annotation_range,\n+                    command: Some(command),\n+                    data: None,\n+                })\n+            }\n         }\n         AnnotationKind::HasImpls { position: file_position, data } => {\n             let line_index = snap.file_line_index(file_position.file_id)?;\n@@ -1041,7 +1062,7 @@ pub(crate) fn code_lens(\n                 )\n             });\n \n-            Ok(lsp_types::CodeLens {\n+            acc.push(lsp_types::CodeLens {\n                 range: annotation_range,\n                 command,\n                 data: Some(to_value(lsp_ext::CodeLensResolveData::Impls(goto_params)).unwrap()),\n@@ -1070,13 +1091,14 @@ pub(crate) fn code_lens(\n                 )\n             });\n \n-            Ok(lsp_types::CodeLens {\n+            acc.push(lsp_types::CodeLens {\n                 range: annotation_range,\n                 command,\n                 data: Some(to_value(lsp_ext::CodeLensResolveData::References(doc_pos)).unwrap()),\n             })\n         }\n     }\n+    Ok(())\n }\n \n pub(crate) mod command {"}]}