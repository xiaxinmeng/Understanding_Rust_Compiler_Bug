{"sha": "6612590bd1c882b0b2e0445d418b8b8c6675369f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MTI1OTBiZDFjODgyYjBiMmUwNDQ1ZDQxOGI4YjhjNjY3NTM2OWY=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-11-23T10:15:10Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-11-24T03:23:11Z"}, "message": "Add docs for never primitive", "tree": {"sha": "9b230e1d495eeac2bfac8d515f8bad34b8e793c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b230e1d495eeac2bfac8d515f8bad34b8e793c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6612590bd1c882b0b2e0445d418b8b8c6675369f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6612590bd1c882b0b2e0445d418b8b8c6675369f", "html_url": "https://github.com/rust-lang/rust/commit/6612590bd1c882b0b2e0445d418b8b8c6675369f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6612590bd1c882b0b2e0445d418b8b8c6675369f/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45594d5dec4237f49e794a2a854a69f50b63d31e", "url": "https://api.github.com/repos/rust-lang/rust/commits/45594d5dec4237f49e794a2a854a69f50b63d31e", "html_url": "https://github.com/rust-lang/rust/commit/45594d5dec4237f49e794a2a854a69f50b63d31e"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "a2d810d12d003b462314c9139b30b8c9285fc97e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6612590bd1c882b0b2e0445d418b8b8c6675369f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6612590bd1c882b0b2e0445d418b8b8c6675369f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6612590bd1c882b0b2e0445d418b8b8c6675369f", "patch": "@@ -1783,6 +1783,7 @@ pub enum PrimitiveType {\n     RawPointer,\n     Reference,\n     Fn,\n+    Never,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Copy, Debug)]\n@@ -1824,6 +1825,7 @@ impl Type {\n             RawPointer(..) => Some(PrimitiveType::RawPointer),\n             BorrowedRef { type_: box Generic(..), .. } => Some(PrimitiveType::Reference),\n             BareFunction(..) => Some(PrimitiveType::Fn),\n+            Never => Some(PrimitiveType::Never),\n             _ => None,\n         }\n     }\n@@ -1872,6 +1874,7 @@ impl GetDefId for Type {\n                 Primitive(PrimitiveType::Tuple).def_id()\n             },\n             BareFunction(..) => Primitive(PrimitiveType::Fn).def_id(),\n+            Never => Primitive(PrimitiveType::Never).def_id(),\n             Slice(..) => Primitive(PrimitiveType::Slice).def_id(),\n             Array(..) => Primitive(PrimitiveType::Array).def_id(),\n             RawPointer(..) => Primitive(PrimitiveType::RawPointer).def_id(),\n@@ -1908,6 +1911,7 @@ impl PrimitiveType {\n             \"pointer\" => Some(PrimitiveType::RawPointer),\n             \"reference\" => Some(PrimitiveType::Reference),\n             \"fn\" => Some(PrimitiveType::Fn),\n+            \"never\" => Some(PrimitiveType::Never),\n             _ => None,\n         }\n     }\n@@ -1939,6 +1943,7 @@ impl PrimitiveType {\n             RawPointer => \"pointer\",\n             Reference => \"reference\",\n             Fn => \"fn\",\n+            Never => \"never\",\n         }\n     }\n \n@@ -2873,6 +2878,7 @@ fn build_deref_target_impls(cx: &DocContext,\n             RawPointer => tcx.lang_items().const_ptr_impl(),\n             Reference => None,\n             Fn => None,\n+            Never => None,\n         };\n         if let Some(did) = did {\n             if !did.is_local() {"}, {"sha": "3d7c197b9e33fc8ec5c1795121222d684befa4e6", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/6612590bd1c882b0b2e0445d418b8b8c6675369f/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6612590bd1c882b0b2e0445d418b8b8c6675369f/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=6612590bd1c882b0b2e0445d418b8b8c6675369f", "patch": "@@ -67,6 +67,110 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_bool { }\n \n+#[doc(primitive = \"never\")]\n+//\n+/// The `!` type, also called \"never\".\n+///\n+/// `!` represents the type of computations which never resolve to any value at all. For example,\n+/// the [`exit`] function `fn exit(code: i32) -> !` exits the process without ever returning, and\n+/// so returns `!`.\n+///\n+/// `break`, `continue` and `return` expressions also have type `!`. For example we are allowed to\n+/// write\n+///\n+/// ```\n+/// let x: ! = {\n+///     return 123;\n+/// };\n+/// ```\n+///\n+/// Although the `let` is pointless here, it illustrates the meaning of `!`. Since `x` is never\n+/// assigned a value (because `return` returns from the entire function), `x` can be given type\n+/// `!`. We could also replace `return 123` with a `panic!` or a never-ending `loop` and this code\n+/// would still be valid.\n+///\n+/// A more realistic usage of `!` is in this code:\n+///\n+/// ```\n+/// let num: u32 = match get_a_number() {\n+///     Some(num) => num,\n+///     None => break,\n+/// }\n+/// ```\n+///\n+/// Both match arms must produce values of type `u32`, but since `break` never produces a value at\n+/// all we know it can never produce a value which isn't a `u32`. This illustrates another\n+/// behaviour of the `!` type - expressions with type `!` will coerce into any other type.\n+///\n+/// [`exit`]: process/fn.exit.html\n+///\n+/// # `!` and generics\n+///\n+/// The main place you'll see `!` used explicitly is in generic code. Consider the [`FromStr`]\n+/// trait:\n+///\n+/// ```\n+/// trait FromStr {\n+///     type Error;\n+///     fn from_str(s: &str) -> Result<Self, Self::Error>;\n+/// }\n+/// ```\n+///\n+/// When implementing this trait for `String` we need to pick a type for `Error`. And since\n+/// converting a string into a string will never result in an error, the appropriate type is `!`.\n+/// If we have to call `String::from_str` for some reason, the result will be a\n+/// `Result<String, !>`, which we can unpack like this:\n+///\n+/// ```\n+/// let Ok(s) = String::from_str(\"hello\");\n+/// ```\n+///\n+/// Since the `Err` variant contains a `!`, it can never occur. So we can exhaustively match on\n+/// `Result<T, !>` by just taking the `Ok` variant. This illustrates another behaviour of `!` - it\n+/// can be used to \"delete\" certain enum variants from generic types like `Result`.\n+///\n+/// [`FromStr`]: str/trait.FromStr.html\n+///\n+/// # `!` and traits\n+///\n+/// When writing your own traits, `!` should have an `impl` whenever there is an obvious `impl`\n+/// which doesn't `panic!`. As is turns out, most traits can have an `impl` for `!`. Take [`Debug`]\n+/// for example:\n+///\n+/// ```\n+/// impl Debug for ! {\n+///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+///         *self\n+///     }\n+/// }\n+/// ```\n+///\n+/// Once again we're using `!`'s ability to coerce into any other type, in this case `fmt::Result`.\n+/// Since this method takes a `&!` as an argument we know that it can never be called (because\n+/// there is no value of type `!` for it to be called with). Writing `*self` essentially tells the\n+/// compiler \"We know that this code can never be run, so just treat the entire function body has\n+/// having type `fmt::Result`\". This pattern can be used a lot when implementing traits for `!`.\n+/// Generally, any trait which only has methods which take a `self` parameter should have such as\n+/// impl.\n+///\n+/// On the other hand, one trait which would not be appropriate to implement is [`Default`]:\n+///\n+/// ```\n+/// trait Default {\n+///     fn default() -> Self;\n+/// }\n+/// ```\n+///\n+/// Since `!` has no values, it has no default value either. It's true that we could write an\n+/// `impl` for this which simply panics, but the same is true for any type (we could `impl\n+/// Default` for (eg.) `File` by just making `default()` panic.)\n+///\n+/// [`Debug`]: fmt/trait.Debug.html\n+/// [`Default`]: default/trait.Default.html\n+///\n+#[stable(feature = \"rust1\", since = \"1.23.0\")]\n+mod prim_never { }\n+\n #[doc(primitive = \"char\")]\n //\n /// A character type."}]}