{"sha": "e49f4471aaead4317359a21d4913965f176782a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0OWY0NDcxYWFlYWQ0MzE3MzU5YTIxZDQ5MTM5NjVmMTc2NzgyYTY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-28T02:48:21Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-05-09T03:12:04Z"}, "message": "Remove some unnecessary uses of `struct_span_fatal`\n\nAll of them immediately called `emit()` then `raise()`, so they could\njust call `span_fatal` directly.", "tree": {"sha": "f22f16324340a945ed94171d27fa7618d4ea582b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f22f16324340a945ed94171d27fa7618d4ea582b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e49f4471aaead4317359a21d4913965f176782a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e49f4471aaead4317359a21d4913965f176782a6", "html_url": "https://github.com/rust-lang/rust/commit/e49f4471aaead4317359a21d4913965f176782a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e49f4471aaead4317359a21d4913965f176782a6/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "955fdaea4a187ab629266ff8fe88a1e3432fb592", "url": "https://api.github.com/repos/rust-lang/rust/commits/955fdaea4a187ab629266ff8fe88a1e3432fb592", "html_url": "https://github.com/rust-lang/rust/commit/955fdaea4a187ab629266ff8fe88a1e3432fb592"}], "stats": {"total": 56, "additions": 20, "deletions": 36}, "files": [{"sha": "d3ff29a5b1a7b2a4ff48234d43285dce42b0389b", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 20, "deletions": 36, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e49f4471aaead4317359a21d4913965f176782a6/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e49f4471aaead4317359a21d4913965f176782a6/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=e49f4471aaead4317359a21d4913965f176782a6", "patch": "@@ -315,57 +315,41 @@ impl<'a> StringReader<'a> {\n         let (lit_kind, mode, prefix_len, postfix_len) = match kind {\n             rustc_lexer::LiteralKind::Char { terminated } => {\n                 if !terminated {\n-                    self.sess\n-                        .span_diagnostic\n-                        .struct_span_fatal_with_code(\n-                            self.mk_sp(start, suffix_start),\n-                            \"unterminated character literal\",\n-                            error_code!(E0762),\n-                        )\n-                        .emit();\n-                    FatalError.raise();\n+                    self.sess.span_diagnostic.span_fatal_with_code(\n+                        self.mk_sp(start, suffix_start),\n+                        \"unterminated character literal\",\n+                        error_code!(E0762),\n+                    )\n                 }\n                 (token::Char, Mode::Char, 1, 1) // ' '\n             }\n             rustc_lexer::LiteralKind::Byte { terminated } => {\n                 if !terminated {\n-                    self.sess\n-                        .span_diagnostic\n-                        .struct_span_fatal_with_code(\n-                            self.mk_sp(start + BytePos(1), suffix_start),\n-                            \"unterminated byte constant\",\n-                            error_code!(E0763),\n-                        )\n-                        .emit();\n-                    FatalError.raise();\n+                    self.sess.span_diagnostic.span_fatal_with_code(\n+                        self.mk_sp(start + BytePos(1), suffix_start),\n+                        \"unterminated byte constant\",\n+                        error_code!(E0763),\n+                    )\n                 }\n                 (token::Byte, Mode::Byte, 2, 1) // b' '\n             }\n             rustc_lexer::LiteralKind::Str { terminated } => {\n                 if !terminated {\n-                    self.sess\n-                        .span_diagnostic\n-                        .struct_span_fatal_with_code(\n-                            self.mk_sp(start, suffix_start),\n-                            \"unterminated double quote string\",\n-                            error_code!(E0765),\n-                        )\n-                        .emit();\n-                    FatalError.raise();\n+                    self.sess.span_diagnostic.span_fatal_with_code(\n+                        self.mk_sp(start, suffix_start),\n+                        \"unterminated double quote string\",\n+                        error_code!(E0765),\n+                    )\n                 }\n                 (token::Str, Mode::Str, 1, 1) // \" \"\n             }\n             rustc_lexer::LiteralKind::ByteStr { terminated } => {\n                 if !terminated {\n-                    self.sess\n-                        .span_diagnostic\n-                        .struct_span_fatal_with_code(\n-                            self.mk_sp(start + BytePos(1), suffix_start),\n-                            \"unterminated double quote byte string\",\n-                            error_code!(E0766),\n-                        )\n-                        .emit();\n-                    FatalError.raise();\n+                    self.sess.span_diagnostic.span_fatal_with_code(\n+                        self.mk_sp(start + BytePos(1), suffix_start),\n+                        \"unterminated double quote byte string\",\n+                        error_code!(E0766),\n+                    )\n                 }\n                 (token::ByteStr, Mode::ByteStr, 2, 1) // b\" \"\n             }"}]}