{"sha": "2049052cb9880c97bb289a086815576f5aabc6c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNDkwNTJjYjk4ODBjOTdiYjI4OWEwODY4MTU1NzZmNWFhYmM2Yzk=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-23T18:54:11Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-25T17:37:52Z"}, "message": "Put floating point arithmetic behind its own feature gate\n\nThis refactors handling of `Rvalue::{Unary,Binary}Op` in the\nconst-checker. Now we `span_bug` if there's an unexpected type in a\nprimitive operation. This also allows unary negation on\n`char` values through the const-checker because it makes the code a bit\ncleaner. `char` does not actually support these operations, and if it\ndid, we could evaluate them at compile-time.", "tree": {"sha": "dea681ec0b6d970db4aec8bc3246306f61765afa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dea681ec0b6d970db4aec8bc3246306f61765afa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2049052cb9880c97bb289a086815576f5aabc6c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2049052cb9880c97bb289a086815576f5aabc6c9", "html_url": "https://github.com/rust-lang/rust/commit/2049052cb9880c97bb289a086815576f5aabc6c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2049052cb9880c97bb289a086815576f5aabc6c9/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d2521aaf7548f0de6c227ef68eae76df4420c03", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d2521aaf7548f0de6c227ef68eae76df4420c03", "html_url": "https://github.com/rust-lang/rust/commit/0d2521aaf7548f0de6c227ef68eae76df4420c03"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "73725c7b98eeee87f4b0a3a9dbf0a7feaf28b65e", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2049052cb9880c97bb289a086815576f5aabc6c9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2049052cb9880c97bb289a086815576f5aabc6c9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=2049052cb9880c97bb289a086815576f5aabc6c9", "patch": "@@ -540,8 +540,12 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n \n             Rvalue::UnaryOp(_, ref operand) => {\n                 let ty = operand.ty(self.body, self.tcx);\n-                if !(ty.is_integral() || ty.is_bool()) {\n-                    self.check_op(ops::NonPrimitiveOp)\n+                if is_int_bool_or_char(ty) {\n+                    // Int, bool, and char operations are fine.\n+                } else if ty.is_floating_point() {\n+                    self.check_op(ops::FloatingPointOp);\n+                } else {\n+                    span_bug!(self.span, \"non-primitive type in `Rvalue::UnaryOp`: {:?}\", ty);\n                 }\n             }\n \n@@ -550,7 +554,9 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 let lhs_ty = lhs.ty(self.body, self.tcx);\n                 let rhs_ty = rhs.ty(self.body, self.tcx);\n \n-                if let ty::RawPtr(_) | ty::FnPtr(..) = lhs_ty.kind() {\n+                if is_int_bool_or_char(lhs_ty) && is_int_bool_or_char(rhs_ty) {\n+                    // Int, bool, and char operations are fine.\n+                } else if lhs_ty.is_fn_ptr() || lhs_ty.is_unsafe_ptr() {\n                     assert_eq!(lhs_ty, rhs_ty);\n                     assert!(\n                         op == BinOp::Eq\n@@ -563,12 +569,15 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                     );\n \n                     self.check_op(ops::RawPtrComparison);\n-                }\n-\n-                if !(lhs_ty.is_integral() || lhs_ty.is_bool() || lhs_ty.is_char())\n-                    || !(rhs_ty.is_integral() || rhs_ty.is_bool() || rhs_ty.is_char())\n-                {\n-                    self.check_op(ops::NonPrimitiveOp)\n+                } else if lhs_ty.is_floating_point() || rhs_ty.is_floating_point() {\n+                    self.check_op(ops::FloatingPointOp);\n+                } else {\n+                    span_bug!(\n+                        self.span,\n+                        \"non-primitive type in `Rvalue::BinaryOp`: {:?} \u26ac {:?}\",\n+                        lhs_ty,\n+                        rhs_ty\n+                    );\n                 }\n             }\n         }\n@@ -867,3 +876,7 @@ fn place_as_reborrow(\n         }\n     })\n }\n+\n+fn is_int_bool_or_char(ty: Ty<'_>) -> bool {\n+    ty.is_bool() || ty.is_integral() || ty.is_char()\n+}"}]}