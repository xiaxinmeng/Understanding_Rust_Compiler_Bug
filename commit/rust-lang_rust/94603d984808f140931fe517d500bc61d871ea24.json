{"sha": "94603d984808f140931fe517d500bc61d871ea24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NjAzZDk4NDgwOGYxNDA5MzFmZTUxN2Q1MDBiYzYxZDg3MWVhMjQ=", "commit": {"author": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-02-25T22:35:16Z"}, "committer": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-02-25T22:35:16Z"}, "message": "save comments as ra_syntax::ast::Comment", "tree": {"sha": "32c9adddcb3609f93afa67d11780e68d64107e14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32c9adddcb3609f93afa67d11780e68d64107e14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94603d984808f140931fe517d500bc61d871ea24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94603d984808f140931fe517d500bc61d871ea24", "html_url": "https://github.com/rust-lang/rust/commit/94603d984808f140931fe517d500bc61d871ea24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94603d984808f140931fe517d500bc61d871ea24/comments", "author": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f1d90e73bb47b4da3df62b05a84ebd4297ed78d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f1d90e73bb47b4da3df62b05a84ebd4297ed78d", "html_url": "https://github.com/rust-lang/rust/commit/4f1d90e73bb47b4da3df62b05a84ebd4297ed78d"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "74fb6bab6cc1e64a002650268d828ba70dc95c0d", "filename": "crates/ra_ide/src/ssr.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/94603d984808f140931fe517d500bc61d871ea24/crates%2Fra_ide%2Fsrc%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94603d984808f140931fe517d500bc61d871ea24/crates%2Fra_ide%2Fsrc%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fssr.rs?ref=94603d984808f140931fe517d500bc61d871ea24", "patch": "@@ -3,7 +3,8 @@\n use crate::source_change::SourceFileEdit;\n use ra_ide_db::RootDatabase;\n use ra_syntax::ast::make::expr_from_text;\n-use ra_syntax::{AstNode, SyntaxElement, SyntaxKind, SyntaxNode, SyntaxToken};\n+use ra_syntax::ast::{AstToken, Comment};\n+use ra_syntax::{AstNode, SyntaxElement, SyntaxNode};\n use ra_text_edit::{TextEdit, TextEditBuilder};\n use rustc_hash::FxHashMap;\n use std::collections::HashMap;\n@@ -70,7 +71,7 @@ type Binding = HashMap<Var, SyntaxNode>;\n struct Match {\n     place: SyntaxNode,\n     binding: Binding,\n-    ignored_comments: Vec<SyntaxToken>,\n+    ignored_comments: Vec<Comment>,\n }\n \n #[derive(Debug)]\n@@ -199,12 +200,7 @@ fn find(pattern: &SsrPattern, code: &SyntaxNode) -> SsrMatches {\n                     let mut code_children =\n                         code.children_with_tokens().filter(|element| !element.kind().is_trivia());\n                     let new_ignored_comments = code.children_with_tokens().filter_map(|element| {\n-                        if let SyntaxElement::Token(token) = element {\n-                            if token.kind() == SyntaxKind::COMMENT {\n-                                return Some(token.clone());\n-                            }\n-                        }\n-                        None\n+                        element.as_token().and_then(|token| Comment::cast(token.clone()))\n                     });\n                     match_.ignored_comments.extend(new_ignored_comments);\n                     let match_from_children = pattern_children\n@@ -254,7 +250,7 @@ fn replace(matches: &SsrMatches, template: &SsrTemplate) -> TextEdit {\n \n fn render_replace(\n     binding: &Binding,\n-    ignored_comments: &Vec<SyntaxToken>,\n+    ignored_comments: &Vec<Comment>,\n     template: &SsrTemplate,\n ) -> String {\n     let mut builder = TextEditBuilder::default();\n@@ -264,7 +260,7 @@ fn render_replace(\n         }\n     }\n     for comment in ignored_comments {\n-        builder.insert(template.template.text_range().end(), comment.to_string())\n+        builder.insert(template.template.text_range().end(), comment.syntax().to_string())\n     }\n     builder.finish().apply(&template.template.text().to_string())\n }"}]}