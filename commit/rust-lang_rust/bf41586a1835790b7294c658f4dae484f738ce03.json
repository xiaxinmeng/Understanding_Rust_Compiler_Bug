{"sha": "bf41586a1835790b7294c658f4dae484f738ce03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNDE1ODZhMTgzNTc5MGI3Mjk0YzY1OGY0ZGFlNDg0ZjczOGNlMDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-11T15:01:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-11T15:01:50Z"}, "message": "auto merge of #7058 : Blei/rust/fix-7048, r=bstrie", "tree": {"sha": "ee5a9f07ed6b50bb3743deacddccd3e17527543c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee5a9f07ed6b50bb3743deacddccd3e17527543c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf41586a1835790b7294c658f4dae484f738ce03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf41586a1835790b7294c658f4dae484f738ce03", "html_url": "https://github.com/rust-lang/rust/commit/bf41586a1835790b7294c658f4dae484f738ce03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf41586a1835790b7294c658f4dae484f738ce03/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "075da9c3e9f326589056abd6edf1f196f6b2e244", "url": "https://api.github.com/repos/rust-lang/rust/commits/075da9c3e9f326589056abd6edf1f196f6b2e244", "html_url": "https://github.com/rust-lang/rust/commit/075da9c3e9f326589056abd6edf1f196f6b2e244"}, {"sha": "3f62f9bccd618b74761dd8bd7710970445d7a2f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f62f9bccd618b74761dd8bd7710970445d7a2f9", "html_url": "https://github.com/rust-lang/rust/commit/3f62f9bccd618b74761dd8bd7710970445d7a2f9"}], "stats": {"total": 114, "additions": 59, "deletions": 55}, "files": [{"sha": "c5779dde499c862a4ff806475ebcf839e95fb92d", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bf41586a1835790b7294c658f4dae484f738ce03/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf41586a1835790b7294c658f4dae484f738ce03/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=bf41586a1835790b7294c658f4dae484f738ce03", "patch": "@@ -82,17 +82,17 @@ pub fn maybe_find_item(item_id: int, items: ebml::Doc) -> Option<ebml::Doc> {\n }\n \n fn find_item(item_id: int, items: ebml::Doc) -> ebml::Doc {\n-    return maybe_find_item(item_id, items).get();\n+    match maybe_find_item(item_id, items) {\n+       None => fail!(\"lookup_item: id not found: %d\", item_id),\n+       Some(d) => d\n+    }\n }\n \n // Looks up an item in the given metadata and returns an ebml doc pointing\n // to the item data.\n fn lookup_item(item_id: int, data: @~[u8]) -> ebml::Doc {\n     let items = reader::get_doc(reader::Doc(data), tag_items);\n-    match maybe_find_item(item_id, items) {\n-       None => fail!(\"lookup_item: id not found: %d\", item_id),\n-       Some(d) => d\n-    }\n+    find_item(item_id, items)\n }\n \n #[deriving(Eq)]"}, {"sha": "267eccbc3978706a1799e705e5c88d62c32ce495", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/bf41586a1835790b7294c658f4dae484f738ce03/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf41586a1835790b7294c658f4dae484f738ce03/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=bf41586a1835790b7294c658f4dae484f738ce03", "patch": "@@ -2316,59 +2316,59 @@ pub fn is_instantiable(cx: ctxt, r_ty: t) -> bool {\n                ::util::ppaux::ty_to_str(cx, ty));\n \n         let r = match get(ty).sty {\n-          ty_nil |\n-          ty_bot |\n-          ty_bool |\n-          ty_int(_) |\n-          ty_uint(_) |\n-          ty_float(_) |\n-          ty_estr(_) |\n-          ty_bare_fn(_) |\n-          ty_closure(_) |\n-          ty_infer(_) |\n-          ty_err |\n-          ty_param(_) |\n-          ty_self(_) |\n-          ty_type |\n-          ty_opaque_box |\n-          ty_opaque_closure_ptr(_) |\n-          ty_evec(_, _) |\n-          ty_unboxed_vec(_) => {\n-            false\n-          }\n-          ty_box(ref mt) |\n-          ty_uniq(ref mt) |\n-          ty_rptr(_, ref mt) => {\n-            return type_requires(cx, seen, r_ty, mt.ty);\n-          }\n+            ty_nil |\n+            ty_bot |\n+            ty_bool |\n+            ty_int(_) |\n+            ty_uint(_) |\n+            ty_float(_) |\n+            ty_estr(_) |\n+            ty_bare_fn(_) |\n+            ty_closure(_) |\n+            ty_infer(_) |\n+            ty_err |\n+            ty_param(_) |\n+            ty_self(_) |\n+            ty_type |\n+            ty_opaque_box |\n+            ty_opaque_closure_ptr(_) |\n+            ty_evec(_, _) |\n+            ty_unboxed_vec(_) => {\n+                false\n+            }\n+            ty_box(ref mt) |\n+            ty_uniq(ref mt) |\n+            ty_rptr(_, ref mt) => {\n+                type_requires(cx, seen, r_ty, mt.ty)\n+            }\n \n-          ty_ptr(*) => {\n-            false           // unsafe ptrs can always be NULL\n-          }\n+            ty_ptr(*) => {\n+                false           // unsafe ptrs can always be NULL\n+            }\n \n-          ty_trait(_, _, _, _) => {\n-            false\n-          }\n+            ty_trait(_, _, _, _) => {\n+                false\n+            }\n \n-          ty_struct(ref did, _) if vec::contains(*seen, did) => {\n-            false\n-          }\n+            ty_struct(ref did, _) if vec::contains(*seen, did) => {\n+                false\n+            }\n \n-          ty_struct(did, ref substs) => {\n-              seen.push(did);\n-              let fields = struct_fields(cx, did, substs);\n-              let r = fields.iter().any(|f| type_requires(cx, seen, r_ty, f.mt.ty));\n-              seen.pop();\n-            r\n-          }\n+            ty_struct(did, ref substs) => {\n+                seen.push(did);\n+                let fields = struct_fields(cx, did, substs);\n+                let r = fields.iter().any(|f| type_requires(cx, seen, r_ty, f.mt.ty));\n+                seen.pop();\n+                r\n+            }\n \n-          ty_tup(ref ts) => {\n-            ts.any(|t| type_requires(cx, seen, r_ty, *t))\n-          }\n+            ty_tup(ref ts) => {\n+                ts.any(|t| type_requires(cx, seen, r_ty, *t))\n+            }\n \n-          ty_enum(ref did, _) if vec::contains(*seen, did) => {\n-            false\n-          }\n+            ty_enum(ref did, _) if vec::contains(*seen, did) => {\n+                false\n+            }\n \n             ty_enum(did, ref substs) => {\n                 seen.push(did);\n@@ -2392,8 +2392,8 @@ pub fn is_instantiable(cx: ctxt, r_ty: t) -> bool {\n         return r;\n     }\n \n-    let seen = @mut ~[];\n-    !subtypes_require(cx, seen, r_ty, r_ty)\n+    let mut seen = ~[];\n+    !subtypes_require(cx, &mut seen, r_ty, r_ty)\n }\n \n pub fn type_structurally_contains(cx: ctxt,"}, {"sha": "474e93ed11a957b7732404a5da6d42ac853e0423", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf41586a1835790b7294c658f4dae484f738ce03/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf41586a1835790b7294c658f4dae484f738ce03/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=bf41586a1835790b7294c658f4dae484f738ce03", "patch": "@@ -772,7 +772,11 @@ fn next_token_inner(rdr: @mut StringReader) -> token::Token {\n       '/' => { return binop(rdr, token::SLASH); }\n       '^' => { return binop(rdr, token::CARET); }\n       '%' => { return binop(rdr, token::PERCENT); }\n-      c => { rdr.fatal(fmt!(\"unknown start of token: %d\", c as int)); }\n+      c => {\n+          // So the error span points to the unrecognized character\n+          rdr.peek_span = codemap::mk_sp(rdr.last_pos, rdr.pos);\n+          rdr.fatal(fmt!(\"unknown start of token: %d\", c as int));\n+      }\n     }\n }\n "}]}