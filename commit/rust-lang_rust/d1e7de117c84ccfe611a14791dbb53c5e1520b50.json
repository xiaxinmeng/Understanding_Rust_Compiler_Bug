{"sha": "d1e7de117c84ccfe611a14791dbb53c5e1520b50", "node_id": "C_kwDOAAsO6NoAKGQxZTdkZTExN2M4NGNjZmU2MTFhMTQ3OTFkYmI1M2M1ZTE1MjBiNTA", "commit": {"author": {"name": "carbotaniuman", "email": "41451839+carbotaniuman@users.noreply.github.com", "date": "2022-06-16T01:55:54Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-24T20:10:23Z"}, "message": "Try fix stuff", "tree": {"sha": "b1849c194e2d6fb1fb5cdbcdd3952a9f2d494aaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1849c194e2d6fb1fb5cdbcdd3952a9f2d494aaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1e7de117c84ccfe611a14791dbb53c5e1520b50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e7de117c84ccfe611a14791dbb53c5e1520b50", "html_url": "https://github.com/rust-lang/rust/commit/d1e7de117c84ccfe611a14791dbb53c5e1520b50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1e7de117c84ccfe611a14791dbb53c5e1520b50/comments", "author": {"login": "carbotaniuman", "id": 41451839, "node_id": "MDQ6VXNlcjQxNDUxODM5", "avatar_url": "https://avatars.githubusercontent.com/u/41451839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carbotaniuman", "html_url": "https://github.com/carbotaniuman", "followers_url": "https://api.github.com/users/carbotaniuman/followers", "following_url": "https://api.github.com/users/carbotaniuman/following{/other_user}", "gists_url": "https://api.github.com/users/carbotaniuman/gists{/gist_id}", "starred_url": "https://api.github.com/users/carbotaniuman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carbotaniuman/subscriptions", "organizations_url": "https://api.github.com/users/carbotaniuman/orgs", "repos_url": "https://api.github.com/users/carbotaniuman/repos", "events_url": "https://api.github.com/users/carbotaniuman/events{/privacy}", "received_events_url": "https://api.github.com/users/carbotaniuman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7feb014b0b73d2e06ccfd3b754171d3fec7eeda", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7feb014b0b73d2e06ccfd3b754171d3fec7eeda", "html_url": "https://github.com/rust-lang/rust/commit/c7feb014b0b73d2e06ccfd3b754171d3fec7eeda"}], "stats": {"total": 29, "additions": 8, "deletions": 21}, "files": [{"sha": "75c2ff265879a3cce17df6325db905cc7f7419cf", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d1e7de117c84ccfe611a14791dbb53c5e1520b50/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e7de117c84ccfe611a14791dbb53c5e1520b50/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=d1e7de117c84ccfe611a14791dbb53c5e1520b50", "patch": "@@ -543,16 +543,9 @@ impl<'tcx> Stack {\n         // Now we figure out which item grants our parent (`derived_from`) this kind of access.\n         // We use that to determine where to put the new item.\n         let granting_idx =\n-        self.find_granting(access, derived_from, exposed_tags).map_err(|_| {\n-            alloc_history.grant_error(\n-                derived_from,\n-                new,\n-                alloc_id,\n-                alloc_range,\n-                offset,\n-                self,\n-            )\n-        })?;\n+            self.find_granting(access, derived_from, exposed_tags).map_err(|_| {\n+                alloc_history.grant_error(derived_from, new, alloc_id, alloc_range, offset, self)\n+            })?;\n \n         // Compute where to put the new item.\n         // Either way, we ensure that we insert the new item in a way such that between\n@@ -595,7 +588,9 @@ impl<'tcx> Stack {\n             self.borrows.len()\n         };\n         // Put the new item there. As an optimization, deduplicate if it is equal to one of its new neighbors.\n-        if self.borrows.get(new_idx) == Some(&new) || new_idx > 0 && self.borrows.get(new_idx - 1) == Some(&new) {\n+        if self.borrows.get(new_idx) == Some(&new)\n+            || new_idx > 0 && self.borrows.get(new_idx - 1) == Some(&new)\n+        {\n             // Optimization applies, done.\n             trace!(\"reborrow: avoiding adding redundant item {:?}\", new);\n         } else {"}, {"sha": "91dfe22c19649b1cccafb7a2f166192a1af40e7a", "filename": "src/stacked_borrows/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1e7de117c84ccfe611a14791dbb53c5e1520b50/src%2Fstacked_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e7de117c84ccfe611a14791dbb53c5e1520b50/src%2Fstacked_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fdiagnostics.rs?ref=d1e7de117c84ccfe611a14791dbb53c5e1520b50", "patch": "@@ -208,11 +208,7 @@ impl AllocHistory {\n     ) -> InterpError<'tcx> {\n         // TODO: Fix this properly\n         let z = &derived_from;\n-        let f = if let Some(ref t) = z {\n-            t as &dyn Debug\n-        } else {\n-            &\"<wildcard>\" as &dyn Debug\n-        };\n+        let f = if let Some(ref t) = z { t as &dyn Debug } else { &\"<wildcard>\" as &dyn Debug };\n         let action = format!(\n             \"trying to reborrow {:?} for {:?} permission at {}[{:#x}]\",\n             f,\n@@ -240,11 +236,7 @@ impl AllocHistory {\n         stack: &Stack,\n     ) -> InterpError<'tcx> {\n         let z = &tag;\n-        let f = if let Some(ref t) = z {\n-            t as &dyn Debug\n-        } else {\n-            &\"<wildcard>\" as &dyn Debug\n-        };\n+        let f = if let Some(ref t) = z { t as &dyn Debug } else { &\"<wildcard>\" as &dyn Debug };\n         let action = format!(\n             \"attempting a {} using {:?} at {}[{:#x}]\",\n             access,"}]}