{"sha": "39012288118146331add60f2b1c90b07b6a6c51b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MDEyMjg4MTE4MTQ2MzMxYWRkNjBmMmIxYzkwYjA3YjZhNmM1MWI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-19T03:57:47Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-21T10:58:48Z"}, "message": "rustc: add lint for parens in if, while, match and return.\n\nThe parens in `if (true) {}` are not not necessary, so we'll warn about\nthem.", "tree": {"sha": "9378c70a8b054be79f0cbaf3bd704b5e808ccd3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9378c70a8b054be79f0cbaf3bd704b5e808ccd3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39012288118146331add60f2b1c90b07b6a6c51b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39012288118146331add60f2b1c90b07b6a6c51b", "html_url": "https://github.com/rust-lang/rust/commit/39012288118146331add60f2b1c90b07b6a6c51b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39012288118146331add60f2b1c90b07b6a6c51b/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40df5a2e9ac81f445c7122a484618918b752a1e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/40df5a2e9ac81f445c7122a484618918b752a1e2", "html_url": "https://github.com/rust-lang/rust/commit/40df5a2e9ac81f445c7122a484618918b752a1e2"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "68f71ddfc473b0fcb7db2e69841f20d420d63bca", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/39012288118146331add60f2b1c90b07b6a6c51b/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39012288118146331add60f2b1c90b07b6a6c51b/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=39012288118146331add60f2b1c90b07b6a6c51b", "patch": "@@ -78,6 +78,7 @@ pub enum Lint {\n     NonCamelCaseTypes,\n     NonUppercaseStatics,\n     NonUppercasePatternStatics,\n+    UnnecessaryParens,\n     TypeLimits,\n     TypeOverflow,\n     UnusedUnsafe,\n@@ -162,7 +163,7 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n     (\"while_true\",\n      LintSpec {\n         lint: WhileTrue,\n-        desc: \"suggest using loop { } instead of while(true) { }\",\n+        desc: \"suggest using `loop { }` instead of `while true { }`\",\n         default: warn\n      }),\n \n@@ -201,6 +202,13 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n          default: warn\n      }),\n \n+    (\"unnecessary_parens\",\n+     LintSpec {\n+        lint: UnnecessaryParens,\n+        desc: \"`if`, `match`, `while` and `return` do not need parentheses\",\n+        default: warn\n+     }),\n+\n     (\"managed_heap_memory\",\n      LintSpec {\n         lint: ManagedHeapMemory,\n@@ -1080,6 +1088,24 @@ fn check_pat_non_uppercase_statics(cx: &Context, p: &ast::Pat) {\n     }\n }\n \n+fn check_unnecessary_parens(cx: &Context, e: &ast::Expr) {\n+    let (value, msg) = match e.node {\n+        ast::ExprIf(cond, _, _) => (cond, \"`if` condition\"),\n+        ast::ExprWhile(cond, _) => (cond, \"`while` condition\"),\n+        ast::ExprMatch(head, _) => (head, \"`match` head expression\"),\n+        ast::ExprRet(Some(value)) => (value, \"`return` value\"),\n+        _ => return\n+    };\n+\n+    match value.node {\n+        ast::ExprParen(_) => {\n+            cx.span_lint(UnnecessaryParens, value.span,\n+                         format!(\"unnecessary parentheses around {}\", msg))\n+        }\n+        _ => {}\n+    }\n+}\n+\n fn check_unused_unsafe(cx: &Context, e: &ast::Expr) {\n     match e.node {\n         // Don't warn about generated blocks, that'll just pollute the output.\n@@ -1438,6 +1464,7 @@ impl<'a> Visitor<()> for Context<'a> {\n \n         check_while_true_expr(self, e);\n         check_stability(self, e);\n+        check_unnecessary_parens(self, e);\n         check_unused_unsafe(self, e);\n         check_unsafe_block(self, e);\n         check_unnecessary_allocation(self, e);"}, {"sha": "aedcbde7f9dcdf2e7e6b88f3b00be06313664008", "filename": "src/test/compile-fail/lint-unnecessary-parens.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/39012288118146331add60f2b1c90b07b6a6c51b/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39012288118146331add60f2b1c90b07b6a6c51b/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs?ref=39012288118146331add60f2b1c90b07b6a6c51b", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deny(unnecessary_parens)];\n+\n+fn foo() -> int {\n+    return (1); //~ ERROR unnecessary parentheses around `return` value\n+}\n+\n+fn main() {\n+    foo();\n+\n+    if (true) {} //~ ERROR unnecessary parentheses around `if` condition\n+    while (true) {} //~ ERROR unnecessary parentheses around `while` condition\n+    match (true) { //~ ERROR unnecessary parentheses around `match` head expression\n+        _ => {}\n+    }\n+}"}]}