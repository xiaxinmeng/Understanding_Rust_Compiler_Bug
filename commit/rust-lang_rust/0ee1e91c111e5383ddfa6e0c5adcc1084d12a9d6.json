{"sha": "0ee1e91c111e5383ddfa6e0c5adcc1084d12a9d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZTFlOTFjMTExZTUzODNkZGZhNmUwYzVhZGNjMTA4NGQxMmE5ZDY=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-10-21T17:29:07Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-10-26T09:47:45Z"}, "message": "build-manifest: allow creating a list of files shipped in a release", "tree": {"sha": "0515082ded415322d05e9e713b88352c0d0df87c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0515082ded415322d05e9e713b88352c0d0df87c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ee1e91c111e5383ddfa6e0c5adcc1084d12a9d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl+Wm0IACgkQPgar6Auq\n8ZzpEQ/9GKlTEc+e+SU/R2Vjmh9lnyHrk8LsKNm+cBVIvqMXhGX5qYI8WjUr7zup\nWFo7mdm2H6PzwPOtSPEXgK2Km4rWXoOSHH5ohJo/+3Ojzds3rQluRR4MHMeibT05\nYLwgC7furpKFy3YUH9odWvmNqVWr6hwoaI4QtEBqei/wzOXSUqJCR4C5zQMsGPM1\nHmnuSxcI/Ry82EODZPCD5hJsc2+q1zAPbnVoOFzioEZplzAzY1llf98NfbDhRX8e\nwcF5C1s2Y+wC8TgCZ+9dvCftDZawNYE/kzkurZu7BcVC9aRXT3bfITCxia+Na3Wz\nOaRx3To+2m3/ZqtQjF6X5rXVJPn+XnBmwP5qXabKlYpuDcd3BN4wHc2782Bojn8+\ngz7ebybot8TxPZ+bAaTvJSEPm83IkIcId+SIyzyEF5mGgmfwbMU5W+WyQrPra76b\njPV+S1xC6NAW69MQNFMAi51NClg3fXRgwz9PGzam+lWt5RJVvAb5vfxb6g2NufEM\nfnZz35+gpZos9qELTHt8ifQYWXEEZ7+/rcDy3SyBMfKBHi3gS9rJEBC/cW61WdzX\nXYA61l3rSJ515Zg4s7yk+h/6o84AGx2viDvJqZ92yFjNIC2WYzKS4IcyuOPQAaIY\nAJSNoe6WPyuqOrTNwlCsyrOg/bd9fd4+imei54464fPre6GtdNM=\n=rhOw\n-----END PGP SIGNATURE-----", "payload": "tree 0515082ded415322d05e9e713b88352c0d0df87c\nparent 9832374f6e378971e1a933362cf9781b121bb845\nauthor Pietro Albini <pietro@pietroalbini.org> 1603301347 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1603705665 +0100\n\nbuild-manifest: allow creating a list of files shipped in a release\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee1e91c111e5383ddfa6e0c5adcc1084d12a9d6", "html_url": "https://github.com/rust-lang/rust/commit/0ee1e91c111e5383ddfa6e0c5adcc1084d12a9d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ee1e91c111e5383ddfa6e0c5adcc1084d12a9d6/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9832374f6e378971e1a933362cf9781b121bb845", "url": "https://api.github.com/repos/rust-lang/rust/commits/9832374f6e378971e1a933362cf9781b121bb845", "html_url": "https://github.com/rust-lang/rust/commit/9832374f6e378971e1a933362cf9781b121bb845"}], "stats": {"total": 53, "additions": 41, "deletions": 12}, "files": [{"sha": "ffcf10571ca7dbed86149bee01f9f98c7e504a75", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0ee1e91c111e5383ddfa6e0c5adcc1084d12a9d6/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee1e91c111e5383ddfa6e0c5adcc1084d12a9d6/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=0ee1e91c111e5383ddfa6e0c5adcc1084d12a9d6", "patch": "@@ -186,6 +186,7 @@ macro_rules! t {\n \n struct Builder {\n     versions: Versions,\n+    shipped_files: HashSet<String>,\n \n     input: PathBuf,\n     output: PathBuf,\n@@ -239,6 +240,7 @@ fn main() {\n \n     Builder {\n         versions: Versions::new(&channel, &input).unwrap(),\n+        shipped_files: HashSet::new(),\n \n         input,\n         output,\n@@ -259,16 +261,21 @@ impl Builder {\n         }\n         let manifest = self.build_manifest();\n \n-        self.write_channel_files(self.versions.channel(), &manifest);\n-        if self.versions.channel() == \"stable\" {\n+        let channel = self.versions.channel().to_string();\n+        self.write_channel_files(&channel, &manifest);\n+        if channel == \"stable\" {\n             // channel-rust-1.XX.YY.toml\n-            let rust_version = self.versions.rustc_version();\n-            self.write_channel_files(rust_version, &manifest);\n+            let rust_version = self.versions.rustc_version().to_string();\n+            self.write_channel_files(&rust_version, &manifest);\n \n             // channel-rust-1.XX.toml\n             let major_minor = rust_version.split('.').take(2).collect::<Vec<_>>().join(\".\");\n             self.write_channel_files(&major_minor, &manifest);\n         }\n+\n+        if let Some(path) = std::env::var_os(\"BUILD_MANIFEST_SHIPPED_FILES_PATH\") {\n+            self.write_shipped_files(&Path::new(&path));\n+        }\n     }\n \n     /// If a tool does not pass its tests, don't ship it.\n@@ -623,7 +630,7 @@ impl Builder {\n         })\n     }\n \n-    fn write_channel_files(&self, channel_name: &str, manifest: &Manifest) {\n+    fn write_channel_files(&mut self, channel_name: &str, manifest: &Manifest) {\n         self.write(&toml::to_string(&manifest).unwrap(), channel_name, \".toml\");\n         self.write(&manifest.date, channel_name, \"-date.txt\");\n         self.write(\n@@ -633,14 +640,25 @@ impl Builder {\n         );\n     }\n \n-    fn write(&self, contents: &str, channel_name: &str, suffix: &str) {\n-        let dst = self.output.join(format!(\"channel-rust-{}{}\", channel_name, suffix));\n+    fn write(&mut self, contents: &str, channel_name: &str, suffix: &str) {\n+        let name = format!(\"channel-rust-{}{}\", channel_name, suffix);\n+        self.shipped_files.insert(name.clone());\n+\n+        let dst = self.output.join(name);\n         t!(fs::write(&dst, contents));\n         if self.legacy {\n             self.hash(&dst);\n             self.sign(&dst);\n         }\n     }\n+\n+    fn write_shipped_files(&self, path: &Path) {\n+        let mut files = self.shipped_files.iter().map(|s| s.as_str()).collect::<Vec<_>>();\n+        files.sort();\n+        let content = format!(\"{}\\n\", files.join(\"\\n\"));\n+\n+        t!(std::fs::write(path, content.as_bytes()));\n+    }\n }\n \n fn fetch_hash(path: &Path) -> Result<String, Box<dyn Error>> {"}, {"sha": "873f709a5320fd8c470d4d0d7ef4ec6f7fe1ae40", "filename": "src/tools/build-manifest/src/manifest.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0ee1e91c111e5383ddfa6e0c5adcc1084d12a9d6/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee1e91c111e5383ddfa6e0c5adcc1084d12a9d6/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs?ref=0ee1e91c111e5383ddfa6e0c5adcc1084d12a9d6", "patch": "@@ -37,10 +37,10 @@ pub(crate) struct Target {\n }\n \n impl Target {\n-    pub(crate) fn from_compressed_tar(builder: &Builder, base_path: &str) -> Self {\n+    pub(crate) fn from_compressed_tar(builder: &mut Builder, base_path: &str) -> Self {\n         let base_path = builder.input.join(base_path);\n-        let gz = Self::tarball_variant(&base_path, \"gz\");\n-        let xz = Self::tarball_variant(&base_path, \"xz\");\n+        let gz = Self::tarball_variant(builder, &base_path, \"gz\");\n+        let xz = Self::tarball_variant(builder, &base_path, \"xz\");\n \n         if gz.is_none() {\n             return Self::unavailable();\n@@ -59,10 +59,21 @@ impl Target {\n         }\n     }\n \n-    fn tarball_variant(base: &Path, ext: &str) -> Option<PathBuf> {\n+    fn tarball_variant(builder: &mut Builder, base: &Path, ext: &str) -> Option<PathBuf> {\n         let mut path = base.to_path_buf();\n         path.set_extension(ext);\n-        if path.is_file() { Some(path) } else { None }\n+        if path.is_file() {\n+            builder.shipped_files.insert(\n+                path.file_name()\n+                    .expect(\"missing filename\")\n+                    .to_str()\n+                    .expect(\"non-utf-8 filename\")\n+                    .to_string(),\n+            );\n+            Some(path)\n+        } else {\n+            None\n+        }\n     }\n \n     pub(crate) fn unavailable() -> Self {"}]}