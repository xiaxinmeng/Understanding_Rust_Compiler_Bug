{"sha": "ee887d70780bce4c89a8977d04f724064ee1ae8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlODg3ZDcwNzgwYmNlNGM4OWE4OTc3ZDA0ZjcyNDA2NGVlMWFlOGY=", "commit": {"author": {"name": "S\u00e9bastien Paolacci", "email": "sebastien.paolacci@gmail.com", "date": "2013-12-22T18:07:08Z"}, "committer": {"name": "S\u00e9bastien Paolacci", "email": "sebastien.paolacci@gmail.com", "date": "2013-12-23T08:35:52Z"}, "message": "Add tests for 0-byte read propagation.\n\nThe two `Some(0)' used to be `None' before the patch, a zero-byte long\nread exhausting a reader (and thereafter) still produce a `None'.", "tree": {"sha": "3d1d5047924d35164847eea2ceb00410447fa92e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d1d5047924d35164847eea2ceb00410447fa92e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee887d70780bce4c89a8977d04f724064ee1ae8f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee887d70780bce4c89a8977d04f724064ee1ae8f", "html_url": "https://github.com/rust-lang/rust/commit/ee887d70780bce4c89a8977d04f724064ee1ae8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee887d70780bce4c89a8977d04f724064ee1ae8f/comments", "author": {"login": "spaolacci", "id": 3320120, "node_id": "MDQ6VXNlcjMzMjAxMjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3320120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spaolacci", "html_url": "https://github.com/spaolacci", "followers_url": "https://api.github.com/users/spaolacci/followers", "following_url": "https://api.github.com/users/spaolacci/following{/other_user}", "gists_url": "https://api.github.com/users/spaolacci/gists{/gist_id}", "starred_url": "https://api.github.com/users/spaolacci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spaolacci/subscriptions", "organizations_url": "https://api.github.com/users/spaolacci/orgs", "repos_url": "https://api.github.com/users/spaolacci/repos", "events_url": "https://api.github.com/users/spaolacci/events{/privacy}", "received_events_url": "https://api.github.com/users/spaolacci/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spaolacci", "id": 3320120, "node_id": "MDQ6VXNlcjMzMjAxMjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3320120?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spaolacci", "html_url": "https://github.com/spaolacci", "followers_url": "https://api.github.com/users/spaolacci/followers", "following_url": "https://api.github.com/users/spaolacci/following{/other_user}", "gists_url": "https://api.github.com/users/spaolacci/gists{/gist_id}", "starred_url": "https://api.github.com/users/spaolacci/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spaolacci/subscriptions", "organizations_url": "https://api.github.com/users/spaolacci/orgs", "repos_url": "https://api.github.com/users/spaolacci/repos", "events_url": "https://api.github.com/users/spaolacci/events{/privacy}", "received_events_url": "https://api.github.com/users/spaolacci/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cab687853a63198e5de9aa094d4ac01d068d0285", "url": "https://api.github.com/repos/rust-lang/rust/commits/cab687853a63198e5de9aa094d4ac01d068d0285", "html_url": "https://github.com/rust-lang/rust/commit/cab687853a63198e5de9aa094d4ac01d068d0285"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "df52f036d46165c521fe0f59f312220b5fdd06c1", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ee887d70780bce4c89a8977d04f724064ee1ae8f/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee887d70780bce4c89a8977d04f724064ee1ae8f/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=ee887d70780bce4c89a8977d04f724064ee1ae8f", "patch": "@@ -322,6 +322,21 @@ mod test {\n         fn write(&mut self, _: &[u8]) { }\n     }\n \n+    /// A dummy reader intended at testing short-reads propagation.\n+    pub struct ShortReader {\n+        priv lengths: ~[uint],\n+    }\n+\n+    impl Reader for ShortReader {\n+        fn read(&mut self, _: &mut [u8]) -> Option<uint> {\n+            self.lengths.shift_opt()\n+        }\n+\n+        fn eof(&mut self) -> bool {\n+            self.lengths.len() == 0\n+        }\n+    }\n+\n     #[test]\n     fn test_buffered_reader() {\n         let inner = MemReader::new(~[0, 1, 2, 3, 4]);\n@@ -475,6 +490,19 @@ mod test {\n         assert_eq!(it.next(), None);\n     }\n \n+    #[test]\n+    fn test_short_reads() {\n+        let inner = ShortReader{lengths: ~[0, 1, 2, 0, 1, 0]};\n+        let mut reader = BufferedReader::new(inner);\n+        let mut buf = [0, 0];\n+        assert_eq!(reader.read(buf), Some(0));\n+        assert_eq!(reader.read(buf), Some(1));\n+        assert_eq!(reader.read(buf), Some(2));\n+        assert_eq!(reader.read(buf), Some(0));\n+        assert_eq!(reader.read(buf), Some(1));\n+        assert_eq!(reader.read(buf), None);\n+    }\n+\n \n     #[bench]\n     fn bench_buffered_reader(bh: &mut Harness) {"}]}