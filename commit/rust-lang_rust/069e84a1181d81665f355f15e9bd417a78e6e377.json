{"sha": "069e84a1181d81665f355f15e9bd417a78e6e377", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2OWU4NGExMTgxZDgxNjY1ZjM1NWYxNWU5YmQ0MTdhNzhlNmUzNzc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-26T10:02:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-26T10:02:03Z"}, "message": "move getting the initial value of a static into helper function", "tree": {"sha": "78ce21fa8871bda81ae0aff5bbb0f17d9cba775d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78ce21fa8871bda81ae0aff5bbb0f17d9cba775d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/069e84a1181d81665f355f15e9bd417a78e6e377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/069e84a1181d81665f355f15e9bd417a78e6e377", "html_url": "https://github.com/rust-lang/rust/commit/069e84a1181d81665f355f15e9bd417a78e6e377", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/069e84a1181d81665f355f15e9bd417a78e6e377/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "debe597a9a4339f7ea7dc58fbfe8196aadacc593", "url": "https://api.github.com/repos/rust-lang/rust/commits/debe597a9a4339f7ea7dc58fbfe8196aadacc593", "html_url": "https://github.com/rust-lang/rust/commit/debe597a9a4339f7ea7dc58fbfe8196aadacc593"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "4dbaafe4a21d5623c27119404ae23f0dfc5535dd", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/069e84a1181d81665f355f15e9bd417a78e6e377/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069e84a1181d81665f355f15e9bd417a78e6e377/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=069e84a1181d81665f355f15e9bd417a78e6e377", "patch": "@@ -13,6 +13,7 @@ use std::fmt;\n use std::ptr;\n \n use rustc_ast::ast::Mutability;\n+use rustc_hir::def_id::DefId;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_middle::ty::{self, Instance, ParamEnv, TyCtxt};\n use rustc_target::abi::{Align, HasDataLayout, Size, TargetDataLayout};\n@@ -118,6 +119,21 @@ pub struct Memory<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n     pub tcx: TyCtxt<'tcx>,\n }\n \n+\n+/// Return the `tcx` allocation containing the initial value of the given static\n+pub fn get_static(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+) -> InterpResult<'tcx, &'tcx Allocation> {\n+    trace!(\"get_static: Need to compute {:?}\", def_id);\n+    let instance = Instance::mono(tcx, def_id);\n+    let gid = GlobalId { instance, promoted: None };\n+    // Use the raw query here to break validation cycles. Later uses of the static\n+    // will call the full query anyway.\n+    let raw_const = tcx.const_eval_raw(ty::ParamEnv::reveal_all().and(gid))?;\n+    Ok(tcx.global_alloc(raw_const.alloc_id).unwrap_memory())\n+}\n+\n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> HasDataLayout for Memory<'mir, 'tcx, M> {\n     #[inline]\n     fn data_layout(&self) -> &TargetDataLayout {\n@@ -473,17 +489,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 if tcx.is_foreign_item(def_id) {\n                     throw_unsup!(ReadExternStatic(def_id));\n                 }\n-                trace!(\"get_global_alloc: Need to compute {:?}\", def_id);\n-                let instance = Instance::mono(tcx, def_id);\n-                let gid = GlobalId { instance, promoted: None };\n-                // Use the raw query here to break validation cycles. Later uses of the static\n-                // will call the full query anyway.\n-                let raw_const = tcx.const_eval_raw(ty::ParamEnv::reveal_all().and(gid))?;\n-                // Make sure we use the ID of the resolved memory, not the lazy one!\n-                let id = raw_const.alloc_id;\n-                let allocation = tcx.global_alloc(id).unwrap_memory();\n-\n-                (allocation, Some(def_id))\n+\n+                (get_static(tcx, def_id)?, Some(def_id))\n             }\n         };\n         M::before_access_global(memory_extra, id, alloc, def_id, is_write)?;"}, {"sha": "04a2c3baef4bfcb3e0d52bea3fe5a2c22c10804b", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/069e84a1181d81665f355f15e9bd417a78e6e377/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069e84a1181d81665f355f15e9bd417a78e6e377/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=069e84a1181d81665f355f15e9bd417a78e6e377", "patch": "@@ -20,7 +20,7 @@ pub use rustc_middle::mir::interpret::*; // have all the `interpret` symbols in\n pub use self::eval_context::{Frame, InterpCx, LocalState, LocalValue, StackPopCleanup};\n pub use self::intern::{intern_const_alloc_recursive, InternKind};\n pub use self::machine::{compile_time_machine, AllocMap, Machine, MayLeak, StackPopJump};\n-pub use self::memory::{AllocCheck, FnVal, Memory, MemoryKind};\n+pub use self::memory::{AllocCheck, FnVal, Memory, MemoryKind, get_static};\n pub use self::operand::{ImmTy, Immediate, OpTy, Operand};\n pub use self::place::{MPlaceTy, MemPlace, MemPlaceMeta, Place, PlaceTy};\n pub use self::validity::RefTracking;"}]}