{"sha": "4e04da618391a3374ba7c37c2d4a6092aaab0927", "node_id": "C_kwDOAAsO6NoAKDRlMDRkYTYxODM5MWEzMzc0YmE3YzM3YzJkNGE2MDkyYWFhYjA5Mjc", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2023-04-16T14:33:38Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2023-04-28T15:47:55Z"}, "message": "replace version placeholders", "tree": {"sha": "b681b4927db724c026edd709a71c32581162377b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b681b4927db724c026edd709a71c32581162377b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e04da618391a3374ba7c37c2d4a6092aaab0927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e04da618391a3374ba7c37c2d4a6092aaab0927", "html_url": "https://github.com/rust-lang/rust/commit/4e04da618391a3374ba7c37c2d4a6092aaab0927", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e04da618391a3374ba7c37c2d4a6092aaab0927/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43a78029b4f4d92978b8fde0a677ea300b113c41", "url": "https://api.github.com/repos/rust-lang/rust/commits/43a78029b4f4d92978b8fde0a677ea300b113c41", "html_url": "https://github.com/rust-lang/rust/commit/43a78029b4f4d92978b8fde0a677ea300b113c41"}], "stats": {"total": 214, "additions": 107, "deletions": 107}, "files": [{"sha": "3b9fc5e9a513cb19a0742b7c8b33e38400f461e5", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -239,7 +239,7 @@ declare_features! (\n     /// Allows using `Self` and associated types in struct expressions and patterns.\n     (accepted, more_struct_aliases, \"1.16.0\", Some(37544), None),\n     /// Allows using the MOVBE target feature.\n-    (accepted, movbe_target_feature, \"CURRENT_RUSTC_VERSION\", Some(44839), None),\n+    (accepted, movbe_target_feature, \"1.70.0\", Some(44839), None),\n     /// Allows patterns with concurrent by-move and by-ref bindings.\n     /// For example, you can write `Foo(a, ref b)` where `a` is by-move and `b` is by-ref.\n     (accepted, move_ref_pattern, \"1.49.0\", Some(68354), None),"}, {"sha": "052d312d9a0d5bea7a06d5b396c927905147aa4b", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -417,7 +417,7 @@ declare_features! (\n     /// Allows `if let` guard in match arms.\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n     /// Allows `impl Trait` to be used inside associated types (RFC 2515).\n-    (active, impl_trait_in_assoc_type, \"CURRENT_RUSTC_VERSION\", Some(63063), None),\n+    (active, impl_trait_in_assoc_type, \"1.70.0\", Some(63063), None),\n     /// Allows `impl Trait` as output type in `Fn` traits in return position of functions.\n     (active, impl_trait_in_fn_trait_return, \"1.64.0\", Some(99697), None),\n     /// Allows referencing `Self` and projections in impl-trait.\n@@ -498,7 +498,7 @@ declare_features! (\n     /// Allows return-position `impl Trait` in traits.\n     (incomplete, return_position_impl_trait_in_trait, \"1.65.0\", Some(91611), None),\n     /// Allows bounding the return type of AFIT/RPITIT.\n-    (incomplete, return_type_notation, \"CURRENT_RUSTC_VERSION\", Some(109417), None),\n+    (incomplete, return_type_notation, \"1.70.0\", Some(109417), None),\n     /// Allows `extern \"rust-cold\"`.\n     (active, rust_cold_cc, \"1.63.0\", Some(97544), None),\n     /// Allows the use of SIMD types in functions declared in `extern` blocks.\n@@ -521,7 +521,7 @@ declare_features! (\n     /// Dyn upcasting is casting, e.g., `dyn Foo -> dyn Bar` where `Foo: Bar`.\n     (active, trait_upcasting, \"1.56.0\", Some(65991), None),\n     /// Allows for transmuting between arrays with sizes that contain generic consts.\n-    (active, transmute_generic_consts, \"CURRENT_RUSTC_VERSION\", Some(109929), None),\n+    (active, transmute_generic_consts, \"1.70.0\", Some(109929), None),\n     /// Allows #[repr(transparent)] on unions (RFC 2645).\n     (active, transparent_unions, \"1.37.0\", Some(60405), None),\n     /// Allows inconsistent bounds in where clauses."}, {"sha": "8bca24b2bf01e1bd016fcbeb3deaa171d9c15705", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -53,7 +53,7 @@ declare_features! (\n     (removed, await_macro, \"1.38.0\", Some(50547), None,\n      Some(\"subsumed by `.await` syntax\")),\n     /// Allows using the `box $expr` syntax.\n-    (removed, box_syntax, \"CURRENT_RUSTC_VERSION\", Some(49733), None, Some(\"replaced with `#[rustc_box]`\")),\n+    (removed, box_syntax, \"1.70.0\", Some(49733), None, Some(\"replaced with `#[rustc_box]`\")),\n     /// Allows capturing disjoint fields in a closure/generator (RFC 2229).\n     (removed, capture_disjoint_fields, \"1.49.0\", Some(53488), None, Some(\"stabilized in Rust 2021\")),\n     /// Allows comparing raw pointers during const eval."}, {"sha": "2c089bb31490050cfc9f83b7ece52bd9efd8178b", "filename": "library/alloc/src/collections/binary_heap/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -853,7 +853,7 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// assert_eq!(heap.into_sorted_vec(), [-10, 2, 4])\n     /// ```\n-    #[stable(feature = \"binary_heap_retain\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"binary_heap_retain\", since = \"1.70.0\")]\n     pub fn retain<F>(&mut self, mut f: F)\n     where\n         F: FnMut(&T) -> bool,\n@@ -1463,7 +1463,7 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<T> Default for IntoIter<T> {\n     /// Creates an empty `binary_heap::IntoIter`.\n     ///"}, {"sha": "afdc998172d3509c5a3efbd6e5384ae005a54a17", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -362,7 +362,7 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Iter<'_, K, V> {\n     }\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<'a, K: 'a, V: 'a> Default for Iter<'a, K, V> {\n     /// Creates an empty `btree_map::Iter`.\n     ///\n@@ -400,7 +400,7 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IterMut<'_, K, V> {\n     }\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<'a, K: 'a, V: 'a> Default for IterMut<'a, K, V> {\n     /// Creates an empty `btree_map::IterMut`.\n     ///\n@@ -448,7 +448,7 @@ impl<K: Debug, V: Debug, A: Allocator + Clone> Debug for IntoIter<K, V, A> {\n     }\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<K, V, A> Default for IntoIter<K, V, A>\n where\n     A: Allocator + Default + Clone,\n@@ -1812,7 +1812,7 @@ impl<K, V> Clone for Keys<'_, K, V> {\n     }\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<K, V> Default for Keys<'_, K, V> {\n     /// Creates an empty `btree_map::Keys`.\n     ///\n@@ -1867,7 +1867,7 @@ impl<K, V> Clone for Values<'_, K, V> {\n     }\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<K, V> Default for Values<'_, K, V> {\n     /// Creates an empty `btree_map::Values`.\n     ///\n@@ -2017,7 +2017,7 @@ impl<'a, K, V> Iterator for Range<'a, K, V> {\n     }\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<K, V> Default for Range<'_, K, V> {\n     /// Creates an empty `btree_map::Range`.\n     ///\n@@ -2107,7 +2107,7 @@ impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoKeys<K, V, A> {\n #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V, A: Allocator + Clone> FusedIterator for IntoKeys<K, V, A> {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<K, V, A> Default for IntoKeys<K, V, A>\n where\n     A: Allocator + Default + Clone,\n@@ -2158,7 +2158,7 @@ impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoValues<K, V, A> {\n #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V, A: Allocator + Clone> FusedIterator for IntoValues<K, V, A> {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<K, V, A> Default for IntoValues<K, V, A>\n where\n     A: Allocator + Default + Clone,"}, {"sha": "da952a13f1e91d59492157ba0e8d57cc5eb36a75", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -1538,7 +1538,7 @@ impl<T, A: Allocator + Clone> Iterator for IntoIter<T, A> {\n     }\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<T> Default for Iter<'_, T> {\n     /// Creates an empty `btree_set::Iter`.\n     ///\n@@ -1568,7 +1568,7 @@ impl<T, A: Allocator + Clone> ExactSizeIterator for IntoIter<T, A> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T, A: Allocator + Clone> FusedIterator for IntoIter<T, A> {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<T, A> Default for IntoIter<T, A>\n where\n     A: Allocator + Default + Clone,\n@@ -1623,7 +1623,7 @@ impl<'a, T> DoubleEndedIterator for Range<'a, T> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for Range<'_, T> {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<T> Default for Range<'_, T> {\n     /// Creates an empty `btree_set::Range`.\n     ///"}, {"sha": "4cd34ac2fa74f1549fb510a99bc4442156d787fc", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -1137,7 +1137,7 @@ impl<T> ExactSizeIterator for Iter<'_, T> {}\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for Iter<'_, T> {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<T> Default for Iter<'_, T> {\n     /// Creates an empty `linked_list::Iter`.\n     ///\n@@ -1205,7 +1205,7 @@ impl<T> ExactSizeIterator for IterMut<'_, T> {}\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IterMut<'_, T> {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<T> Default for IterMut<'_, T> {\n     fn default() -> Self {\n         IterMut { head: None, tail: None, len: 0, marker: Default::default() }\n@@ -1915,7 +1915,7 @@ impl<T, A: Allocator> ExactSizeIterator for IntoIter<T, A> {}\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T, A: Allocator> FusedIterator for IntoIter<T, A> {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<T> Default for IntoIter<T> {\n     /// Creates an empty `linked_list::IntoIter`.\n     ///"}, {"sha": "ba035fb062ab1ec2c009cc9eebe75c5dca7e0e1e", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -693,7 +693,7 @@ impl<T> Rc<T> {\n     /// This is equivalent to `Rc::try_unwrap(this).ok()`. (Note that these are not equivalent for\n     /// [`Arc`](crate::sync::Arc), due to race conditions that do not apply to `Rc`.)\n     #[inline]\n-    #[stable(feature = \"rc_into_inner\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"rc_into_inner\", since = \"1.70.0\")]\n     pub fn into_inner(this: Self) -> Option<T> {\n         Rc::try_unwrap(this).ok()\n     }"}, {"sha": "24849d52dbbc7b7a6b7b14adff56eb190f68b34a", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -793,7 +793,7 @@ impl<T> Arc<T> {\n     /// y_thread.join().unwrap();\n     /// ```\n     #[inline]\n-    #[stable(feature = \"arc_into_inner\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"arc_into_inner\", since = \"1.70.0\")]\n     pub fn into_inner(this: Self) -> Option<T> {\n         // Make sure that the ordinary `Drop` implementation isn\u2019t called as well\n         let mut this = mem::ManuallyDrop::new(this);"}, {"sha": "b2db2fdfd18f10345e9926365798589fb4d5179c", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -342,7 +342,7 @@ impl<T, A: Allocator> FusedIterator for IntoIter<T, A> {}\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<T, A: Allocator> TrustedLen for IntoIter<T, A> {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<T, A> Default for IntoIter<T, A>\n where\n     A: Allocator + Default,"}, {"sha": "f69a1f94e8f743a96e7198e9709f17b1ad19fd89", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -247,7 +247,7 @@ mod once;\n \n #[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n pub use lazy::LazyCell;\n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n pub use once::OnceCell;\n \n /// A mutable memory location."}, {"sha": "5f06a7b07953d683ecc69bb9c2874827c07d5469", "filename": "library/core/src/cell/once.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fcell%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fcell%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell%2Fonce.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -29,7 +29,7 @@ use crate::mem;\n /// assert_eq!(value, \"Hello, World!\");\n /// assert!(cell.get().is_some());\n /// ```\n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n pub struct OnceCell<T> {\n     // Invariant: written to at most once.\n     inner: UnsafeCell<Option<T>>,\n@@ -39,8 +39,8 @@ impl<T> OnceCell<T> {\n     /// Creates a new empty cell.\n     #[inline]\n     #[must_use]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n-    #[rustc_const_stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n+    #[rustc_const_stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub const fn new() -> OnceCell<T> {\n         OnceCell { inner: UnsafeCell::new(None) }\n     }\n@@ -49,7 +49,7 @@ impl<T> OnceCell<T> {\n     ///\n     /// Returns `None` if the cell is empty.\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn get(&self) -> Option<&T> {\n         // SAFETY: Safe due to `inner`'s invariant\n         unsafe { &*self.inner.get() }.as_ref()\n@@ -59,7 +59,7 @@ impl<T> OnceCell<T> {\n     ///\n     /// Returns `None` if the cell is empty.\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn get_mut(&mut self) -> Option<&mut T> {\n         self.inner.get_mut().as_mut()\n     }\n@@ -85,7 +85,7 @@ impl<T> OnceCell<T> {\n     /// assert!(cell.get().is_some());\n     /// ```\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn set(&self, value: T) -> Result<(), T> {\n         // SAFETY: Safe because we cannot have overlapping mutable borrows\n         let slot = unsafe { &*self.inner.get() };\n@@ -125,7 +125,7 @@ impl<T> OnceCell<T> {\n     /// assert_eq!(value, &92);\n     /// ```\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn get_or_init<F>(&self, f: F) -> &T\n     where\n         F: FnOnce() -> T,\n@@ -206,7 +206,7 @@ impl<T> OnceCell<T> {\n     /// assert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n     /// ```\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn into_inner(self) -> Option<T> {\n         // Because `into_inner` takes `self` by value, the compiler statically verifies\n         // that it is not currently borrowed. So it is safe to move out `Option<T>`.\n@@ -233,21 +233,21 @@ impl<T> OnceCell<T> {\n     /// assert_eq!(cell.get(), None);\n     /// ```\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn take(&mut self) -> Option<T> {\n         mem::take(self).into_inner()\n     }\n }\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T> Default for OnceCell<T> {\n     #[inline]\n     fn default() -> Self {\n         Self::new()\n     }\n }\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T: fmt::Debug> fmt::Debug for OnceCell<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.get() {\n@@ -257,7 +257,7 @@ impl<T: fmt::Debug> fmt::Debug for OnceCell<T> {\n     }\n }\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T: Clone> Clone for OnceCell<T> {\n     #[inline]\n     fn clone(&self) -> OnceCell<T> {\n@@ -272,18 +272,18 @@ impl<T: Clone> Clone for OnceCell<T> {\n     }\n }\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T: PartialEq> PartialEq for OnceCell<T> {\n     #[inline]\n     fn eq(&self, other: &Self) -> bool {\n         self.get() == other.get()\n     }\n }\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T: Eq> Eq for OnceCell<T> {}\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T> From<T> for OnceCell<T> {\n     /// Creates a new `OnceCell<T>` which already contains the given `value`.\n     #[inline]\n@@ -293,5 +293,5 @@ impl<T> From<T> for OnceCell<T> {\n }\n \n // Just like for `Cell<T>` this isn't needed, but results in nicer error messages.\n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T> !Sync for OnceCell<T> {}"}, {"sha": "75727c3a24020b7fd4b2e8ae383c7451874ecc41", "filename": "library/core/src/iter/adapters/chain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -273,7 +273,7 @@ where\n {\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<A: Default, B: Default> Default for Chain<A, B> {\n     /// Creates a `Chain` from the default values for `A` and `B`.\n     ///"}, {"sha": "d3cceb8d4ad5445350183e19f289134520e7b74f", "filename": "library/core/src/iter/adapters/cloned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -154,7 +154,7 @@ where\n     }\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<I: Default> Default for Cloned<I> {\n     /// Creates a `Cloned` iterator from the default value of `I`\n     /// ```"}, {"sha": "8f6b2904eae4246a2fe60b647ce3f3058dadb7a3", "filename": "library/core/src/iter/adapters/copied.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -242,7 +242,7 @@ where\n     }\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<I: Default> Default for Copied<I> {\n     /// Creates a `Copied` iterator from the default value of `I`\n     /// ```"}, {"sha": "00c1c377bf9c2173fa50f55c4309c88effe19385", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -263,7 +263,7 @@ where\n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<I: InPlaceIterable> InPlaceIterable for Enumerate<I> {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<I: Default> Default for Enumerate<I> {\n     /// Creates an `Enumerate` iterator from the default value of `I`\n     /// ```"}, {"sha": "520ec9abcf0dcbb675756adedc40043535c8e91d", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -289,7 +289,7 @@ where\n {\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<I> Default for Flatten<I>\n where\n     I: Default + Iterator<Item: IntoIterator>,"}, {"sha": "b1fa4f92117b157acab5085f96ed374d01ff2728", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -181,7 +181,7 @@ where\n     }\n }\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<I: Default> Default for Fuse<I> {\n     /// Creates a `Fuse` iterator from the default value of `I`.\n     ///"}, {"sha": "4aaf7c61f50d6b60c14c449dcb5508835d202bd8", "filename": "library/core/src/iter/adapters/rev.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -137,7 +137,7 @@ impl<I> FusedIterator for Rev<I> where I: FusedIterator + DoubleEndedIterator {}\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<I> TrustedLen for Rev<I> where I: TrustedLen + DoubleEndedIterator {}\n \n-#[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"default_iters\", since = \"1.70.0\")]\n impl<I: Default> Default for Rev<I> {\n     /// Creates a `Rev` iterator from the default value of `I`\n     /// ```"}, {"sha": "b80bfe1c92df1d5190c7fd51e9a9548ad8b96cc3", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -1162,7 +1162,7 @@ macro_rules! nonzero_min_max_unsigned {\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::MIN.get(), 1\", stringify!($Int), \");\")]\n                 /// ```\n-                #[stable(feature = \"nonzero_min_max\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_min_max\", since = \"1.70.0\")]\n                 pub const MIN: Self = Self::new(1).unwrap();\n \n                 /// The largest value that can be represented by this non-zero\n@@ -1175,7 +1175,7 @@ macro_rules! nonzero_min_max_unsigned {\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::MAX.get(), \", stringify!($Int), \"::MAX);\")]\n                 /// ```\n-                #[stable(feature = \"nonzero_min_max\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_min_max\", since = \"1.70.0\")]\n                 pub const MAX: Self = Self::new(<$Int>::MAX).unwrap();\n             }\n         )+\n@@ -1200,7 +1200,7 @@ macro_rules! nonzero_min_max_signed {\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::MIN.get(), \", stringify!($Int), \"::MIN);\")]\n                 /// ```\n-                #[stable(feature = \"nonzero_min_max\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_min_max\", since = \"1.70.0\")]\n                 pub const MIN: Self = Self::new(<$Int>::MIN).unwrap();\n \n                 /// The largest value that can be represented by this non-zero\n@@ -1217,7 +1217,7 @@ macro_rules! nonzero_min_max_signed {\n                 #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n                 #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::MAX.get(), \", stringify!($Int), \"::MAX);\")]\n                 /// ```\n-                #[stable(feature = \"nonzero_min_max\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_min_max\", since = \"1.70.0\")]\n                 pub const MAX: Self = Self::new(<$Int>::MAX).unwrap();\n             }\n         )+"}, {"sha": "ac3fcb3e38245ecd735fa3c4c28ea3ae9b3a37cf", "filename": "library/core/src/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -615,7 +615,7 @@ impl<T> Option<T> {\n     /// ```\n     #[must_use]\n     #[inline]\n-    #[stable(feature = \"is_some_and\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"is_some_and\", since = \"1.70.0\")]\n     pub fn is_some_and(self, f: impl FnOnce(T) -> bool) -> bool {\n         match self {\n             None => false,"}, {"sha": "61fcdf58b4fcbae9af5383e0df443ce0a82fe492", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -473,7 +473,7 @@ impl<T> NonNull<[T]> {\n     ///\n     /// (Note that this example artificially demonstrates a use of this method,\n     /// but `let slice = NonNull::from(&x[..]);` would be a better way to write code like this.)\n-    #[stable(feature = \"nonnull_slice_from_raw_parts\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"nonnull_slice_from_raw_parts\", since = \"1.70.0\")]\n     #[rustc_const_unstable(feature = \"const_slice_from_raw_parts_mut\", issue = \"67456\")]\n     #[must_use]\n     #[inline]"}, {"sha": "1ee270f4c039863136e4e1a18091d1db752b0290", "filename": "library/core/src/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -555,7 +555,7 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[must_use]\n     #[inline]\n-    #[stable(feature = \"is_some_and\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"is_some_and\", since = \"1.70.0\")]\n     pub fn is_ok_and(self, f: impl FnOnce(T) -> bool) -> bool {\n         match self {\n             Err(_) => false,\n@@ -600,7 +600,7 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[must_use]\n     #[inline]\n-    #[stable(feature = \"is_some_and\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"is_some_and\", since = \"1.70.0\")]\n     pub fn is_err_and(self, f: impl FnOnce(E) -> bool) -> bool {\n         match self {\n             Ok(_) => false,"}, {"sha": "0a30033778b3835810f24fb2031d202b0dc6aa1a", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -394,7 +394,7 @@ macro_rules! iterator {\n             }\n         }\n \n-        #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"default_iters\", since = \"1.70.0\")]\n         impl<T> Default for $name<'_, T> {\n             /// Creates an empty slice iterator.\n             ///"}, {"sha": "236b7f423d6be68dd881635d2d89f319ac2e3196", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -970,8 +970,8 @@ impl AtomicBool {\n     /// # }\n     /// ```\n     #[inline]\n-    #[stable(feature = \"atomic_as_ptr\", since = \"CURRENT_RUSTC_VERSION\")]\n-    #[rustc_const_stable(feature = \"atomic_as_ptr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"atomic_as_ptr\", since = \"1.70.0\")]\n+    #[rustc_const_stable(feature = \"atomic_as_ptr\", since = \"1.70.0\")]\n     pub const fn as_ptr(&self) -> *mut bool {\n         self.v.get().cast()\n     }\n@@ -1905,8 +1905,8 @@ impl<T> AtomicPtr<T> {\n     /// }\n     /// ```\n     #[inline]\n-    #[stable(feature = \"atomic_as_ptr\", since = \"CURRENT_RUSTC_VERSION\")]\n-    #[rustc_const_stable(feature = \"atomic_as_ptr\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"atomic_as_ptr\", since = \"1.70.0\")]\n+    #[rustc_const_stable(feature = \"atomic_as_ptr\", since = \"1.70.0\")]\n     pub const fn as_ptr(&self) -> *mut *mut T {\n         self.p.get()\n     }\n@@ -2854,8 +2854,8 @@ macro_rules! atomic_int {\n             /// # }\n             /// ```\n             #[inline]\n-            #[stable(feature = \"atomic_as_ptr\", since = \"CURRENT_RUSTC_VERSION\")]\n-            #[rustc_const_stable(feature = \"atomic_as_ptr\", since = \"CURRENT_RUSTC_VERSION\")]\n+            #[stable(feature = \"atomic_as_ptr\", since = \"1.70.0\")]\n+            #[rustc_const_stable(feature = \"atomic_as_ptr\", since = \"1.70.0\")]\n             pub const fn as_ptr(&self) -> *mut $int_type {\n                 self.v.get()\n             }"}, {"sha": "9e09ce337bc0ec31c3194f865c030fee2e307f16", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -268,7 +268,7 @@ pub(crate) use self::stdio::attempt_print_to_stderr;\n #[unstable(feature = \"internal_output_capture\", issue = \"none\")]\n #[doc(no_inline, hidden)]\n pub use self::stdio::set_output_capture;\n-#[stable(feature = \"is_terminal\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"is_terminal\", since = \"1.70.0\")]\n pub use self::stdio::IsTerminal;\n #[unstable(feature = \"print_internals\", issue = \"none\")]\n pub use self::stdio::{_eprint, _print};"}, {"sha": "9098d36ee5381b42f8268e3ebfe134843b62bb55", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -1047,7 +1047,7 @@ pub(crate) fn attempt_print_to_stderr(args: fmt::Arguments<'_>) {\n }\n \n /// Trait to determine if a descriptor/handle refers to a terminal/tty.\n-#[stable(feature = \"is_terminal\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"is_terminal\", since = \"1.70.0\")]\n pub trait IsTerminal: crate::sealed::Sealed {\n     /// Returns `true` if the descriptor/handle refers to a terminal/tty.\n     ///\n@@ -1063,7 +1063,7 @@ pub trait IsTerminal: crate::sealed::Sealed {\n     /// Note that this [may change in the future][changes].\n     ///\n     /// [changes]: io#platform-specific-behavior\n-    #[stable(feature = \"is_terminal\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"is_terminal\", since = \"1.70.0\")]\n     fn is_terminal(&self) -> bool;\n }\n \n@@ -1072,7 +1072,7 @@ macro_rules! impl_is_terminal {\n         #[unstable(feature = \"sealed\", issue = \"none\")]\n         impl crate::sealed::Sealed for $t {}\n \n-        #[stable(feature = \"is_terminal\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"is_terminal\", since = \"1.70.0\")]\n         impl IsTerminal for $t {\n             #[inline]\n             fn is_terminal(&self) -> bool {"}, {"sha": "fe40d6319c2ff4a5274a015f625e98c88faec15c", "filename": "library/std/src/os/android/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fandroid%2Fnet.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -1,8 +1,8 @@\n //! Android-specific networking functionality.\n \n-#![stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+#![stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n \n-#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n pub use crate::os::net::linux_ext::addr::SocketAddrExt;\n \n #[unstable(feature = \"tcp_quickack\", issue = \"96256\")]"}, {"sha": "2180d2974d5ae9447a34a011951b36061e938ba7", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -201,7 +201,7 @@ macro_rules! impl_is_terminal {\n         #[unstable(feature = \"sealed\", issue = \"none\")]\n         impl crate::sealed::Sealed for $t {}\n \n-        #[stable(feature = \"is_terminal\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"is_terminal\", since = \"1.70.0\")]\n         impl crate::io::IsTerminal for $t {\n             #[inline]\n             fn is_terminal(&self) -> bool {"}, {"sha": "c8e734d740b68eac4eea7ad5329f1773d4764055", "filename": "library/std/src/os/linux/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fnet.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -1,8 +1,8 @@\n //! Linux-specific networking functionality.\n \n-#![stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+#![stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n \n-#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n pub use crate::os::net::linux_ext::addr::SocketAddrExt;\n \n #[unstable(feature = \"tcp_quickack\", issue = \"96256\")]"}, {"sha": "aed772056e1b3593225ae1a55ca1c0450c4b4374", "filename": "library/std/src/os/net/linux_ext/addr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Faddr.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -4,7 +4,7 @@ use crate::os::unix::net::SocketAddr;\n use crate::sealed::Sealed;\n \n /// Platform-specific extensions to [`SocketAddr`].\n-#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n pub trait SocketAddrExt: Sealed {\n     /// Creates a Unix socket address in the abstract namespace.\n     ///\n@@ -37,7 +37,7 @@ pub trait SocketAddrExt: Sealed {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n     fn from_abstract_name<N>(name: N) -> crate::io::Result<SocketAddr>\n     where\n         N: AsRef<[u8]>;\n@@ -59,6 +59,6 @@ pub trait SocketAddrExt: Sealed {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n     fn as_abstract_name(&self) -> Option<&[u8]>;\n }"}, {"sha": "62e78cc50d4ab374b75ce03ec695965cbcec6219", "filename": "library/std/src/os/net/linux_ext/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fnet%2Flinux_ext%2Fmod.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -2,7 +2,7 @@\n \n #![doc(cfg(any(target_os = \"linux\", target_os = \"android\")))]\n \n-#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n pub(crate) mod addr;\n \n #[unstable(feature = \"tcp_quickack\", issue = \"96256\")]"}, {"sha": "6c99e8c36203ab01e4d0eb24f8c93817d6882ef2", "filename": "library/std/src/os/unix/net/addr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -245,12 +245,12 @@ impl SocketAddr {\n     }\n }\n \n-#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n impl Sealed for SocketAddr {}\n \n #[doc(cfg(any(target_os = \"android\", target_os = \"linux\")))]\n #[cfg(any(doc, target_os = \"android\", target_os = \"linux\"))]\n-#[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n impl linux_ext::addr::SocketAddrExt for SocketAddr {\n     fn as_abstract_name(&self) -> Option<&[u8]> {\n         if let AddressKind::Abstract(name) = self.address() { Some(name) } else { None }"}, {"sha": "34db54235f1c23aee9c65a35376f1259f0c61f8f", "filename": "library/std/src/os/unix/net/datagram.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -118,7 +118,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n     pub fn bind_addr(socket_addr: &SocketAddr) -> io::Result<UnixDatagram> {\n         unsafe {\n             let socket = UnixDatagram::unbound()?;\n@@ -233,7 +233,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n     pub fn connect_addr(&self, socket_addr: &SocketAddr) -> io::Result<()> {\n         unsafe {\n             cvt(libc::connect(\n@@ -532,7 +532,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n     pub fn send_to_addr(&self, buf: &[u8], socket_addr: &SocketAddr) -> io::Result<usize> {\n         unsafe {\n             let count = cvt(libc::sendto("}, {"sha": "5be8aebc70fd5e736c5774db2d884c0f1c7d747b", "filename": "library/std/src/os/unix/net/listener.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Flistener.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -106,7 +106,7 @@ impl UnixListener {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n     pub fn bind_addr(socket_addr: &SocketAddr) -> io::Result<UnixListener> {\n         unsafe {\n             let inner = Socket::new_raw(libc::AF_UNIX, libc::SOCK_STREAM)?;"}, {"sha": "bf2a51b5edb8890d15304a21c8372931f18d7423", "filename": "library/std/src/os/unix/net/stream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -122,7 +122,7 @@ impl UnixStream {\n     ///     Ok(())\n     /// }\n     /// ````\n-    #[stable(feature = \"unix_socket_abstract\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"unix_socket_abstract\", since = \"1.70.0\")]\n     pub fn connect_addr(socket_addr: &SocketAddr) -> io::Result<UnixStream> {\n         unsafe {\n             let inner = Socket::new_raw(libc::AF_UNIX, libc::SOCK_STREAM)?;"}, {"sha": "9b77cd8321be7a6e152ba092e7f64c2682501400", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -389,7 +389,7 @@ macro_rules! impl_is_terminal {\n         #[unstable(feature = \"sealed\", issue = \"none\")]\n         impl crate::sealed::Sealed for $t {}\n \n-        #[stable(feature = \"is_terminal\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"is_terminal\", since = \"1.70.0\")]\n         impl crate::io::IsTerminal for $t {\n             #[inline]\n             fn is_terminal(&self) -> bool {"}, {"sha": "5b22333cc354f9bdfd5d180c92a03d4f8c688369", "filename": "library/std/src/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -1509,7 +1509,7 @@ impl PathBuf {\n     /// path.as_mut_os_string().push(\"baz\");\n     /// assert_eq!(path, Path::new(\"/foo/barbaz\"));\n     /// ```\n-    #[stable(feature = \"path_as_mut_os_str\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"path_as_mut_os_str\", since = \"1.70.0\")]\n     #[must_use]\n     #[inline]\n     pub fn as_mut_os_string(&mut self) -> &mut OsString {\n@@ -2074,7 +2074,7 @@ impl Path {\n     /// path.as_mut_os_str().make_ascii_lowercase();\n     /// assert_eq!(path, Path::new(\"foo.txt\"));\n     /// ```\n-    #[stable(feature = \"path_as_mut_os_str\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"path_as_mut_os_str\", since = \"1.70.0\")]\n     #[must_use]\n     #[inline]\n     pub fn as_mut_os_str(&mut self) -> &mut OsStr {"}, {"sha": "f6a7c0a9f75494ef59b5d856a255d9341a2da4a8", "filename": "library/std/src/sync/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -177,7 +177,7 @@ pub use self::rwlock::{RwLock, RwLockReadGuard, RwLockWriteGuard};\n \n #[unstable(feature = \"lazy_cell\", issue = \"109736\")]\n pub use self::lazy_lock::LazyLock;\n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n pub use self::once_lock::OnceLock;\n \n pub(crate) use self::remutex::{ReentrantMutex, ReentrantMutexGuard};"}, {"sha": "e83bc35ee9846b5a9f31355cc7e8161c307d82f5", "filename": "library/std/src/sync/once_lock.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fsync%2Fonce_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e04da618391a3374ba7c37c2d4a6092aaab0927/library%2Fstd%2Fsrc%2Fsync%2Fonce_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce_lock.rs?ref=4e04da618391a3374ba7c37c2d4a6092aaab0927", "patch": "@@ -30,7 +30,7 @@ use crate::sync::Once;\n /// assert!(value.is_some());\n /// assert_eq!(value.unwrap().as_str(), \"Hello, World!\");\n /// ```\n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n pub struct OnceLock<T> {\n     once: Once,\n     // Whether or not the value is initialized is tracked by `once.is_completed()`.\n@@ -59,8 +59,8 @@ impl<T> OnceLock<T> {\n     /// Creates a new empty cell.\n     #[inline]\n     #[must_use]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n-    #[rustc_const_stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n+    #[rustc_const_stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub const fn new() -> OnceLock<T> {\n         OnceLock {\n             once: Once::new(),\n@@ -74,7 +74,7 @@ impl<T> OnceLock<T> {\n     /// Returns `None` if the cell is empty, or being initialized. This\n     /// method never blocks.\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn get(&self) -> Option<&T> {\n         if self.is_initialized() {\n             // Safe b/c checked is_initialized\n@@ -88,7 +88,7 @@ impl<T> OnceLock<T> {\n     ///\n     /// Returns `None` if the cell is empty. This method never blocks.\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn get_mut(&mut self) -> Option<&mut T> {\n         if self.is_initialized() {\n             // Safe b/c checked is_initialized and we have a unique access\n@@ -124,7 +124,7 @@ impl<T> OnceLock<T> {\n     /// }\n     /// ```\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn set(&self, value: T) -> Result<(), T> {\n         let mut value = Some(value);\n         self.get_or_init(|| value.take().unwrap());\n@@ -162,7 +162,7 @@ impl<T> OnceLock<T> {\n     /// assert_eq!(value, &92);\n     /// ```\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn get_or_init<F>(&self, f: F) -> &T\n     where\n         F: FnOnce() -> T,\n@@ -239,7 +239,7 @@ impl<T> OnceLock<T> {\n     /// assert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n     /// ```\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn into_inner(mut self) -> Option<T> {\n         self.take()\n     }\n@@ -264,7 +264,7 @@ impl<T> OnceLock<T> {\n     /// assert_eq!(cell.get(), None);\n     /// ```\n     #[inline]\n-    #[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"once_cell\", since = \"1.70.0\")]\n     pub fn take(&mut self) -> Option<T> {\n         if self.is_initialized() {\n             self.once = Once::new();\n@@ -333,17 +333,17 @@ impl<T> OnceLock<T> {\n // scoped thread B, which fills the cell, which is\n // then destroyed by A. That is, destructor observes\n // a sent value.\n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n unsafe impl<T: Sync + Send> Sync for OnceLock<T> {}\n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n unsafe impl<T: Send> Send for OnceLock<T> {}\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T: RefUnwindSafe + UnwindSafe> RefUnwindSafe for OnceLock<T> {}\n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T: UnwindSafe> UnwindSafe for OnceLock<T> {}\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T> Default for OnceLock<T> {\n     /// Creates a new empty cell.\n     ///\n@@ -362,7 +362,7 @@ impl<T> Default for OnceLock<T> {\n     }\n }\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T: fmt::Debug> fmt::Debug for OnceLock<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.get() {\n@@ -372,7 +372,7 @@ impl<T: fmt::Debug> fmt::Debug for OnceLock<T> {\n     }\n }\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T: Clone> Clone for OnceLock<T> {\n     #[inline]\n     fn clone(&self) -> OnceLock<T> {\n@@ -387,7 +387,7 @@ impl<T: Clone> Clone for OnceLock<T> {\n     }\n }\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T> From<T> for OnceLock<T> {\n     /// Create a new cell with its contents set to `value`.\n     ///\n@@ -414,18 +414,18 @@ impl<T> From<T> for OnceLock<T> {\n     }\n }\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T: PartialEq> PartialEq for OnceLock<T> {\n     #[inline]\n     fn eq(&self, other: &OnceLock<T>) -> bool {\n         self.get() == other.get()\n     }\n }\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n impl<T: Eq> Eq for OnceLock<T> {}\n \n-#[stable(feature = \"once_cell\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"once_cell\", since = \"1.70.0\")]\n unsafe impl<#[may_dangle] T> Drop for OnceLock<T> {\n     #[inline]\n     fn drop(&mut self) {"}]}