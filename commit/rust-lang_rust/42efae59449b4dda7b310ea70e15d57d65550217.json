{"sha": "42efae59449b4dda7b310ea70e15d57d65550217", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZWZhZTU5NDQ5YjRkZGE3YjMxMGVhNzBlMTVkNTdkNjU1NTAyMTc=", "commit": {"author": {"name": "Tibo Delor", "email": "delor.thibault@gmail.com", "date": "2018-06-10T04:07:33Z"}, "committer": {"name": "Tibo Delor", "email": "delor.thibault@gmail.com", "date": "2018-06-10T04:07:33Z"}, "message": "Clean Up code where last whitspace tracking isn't used", "tree": {"sha": "1c967d1ca3e719477fec32be5c75cac75b074a50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c967d1ca3e719477fec32be5c75cac75b074a50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42efae59449b4dda7b310ea70e15d57d65550217", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEElri4er6EfFqe1VRMLfdMrGi+j80FAlscpAUACgkQLfdMrGi+\nj82+3AgAkF7ZkObVKb6OpnKImDKdVGBfeV2KqdQ8oiPlz+UV8Q8dY3DscuN/ldcT\nqJIpZM8FsWwkj/nLyUuKggVISryebftcV6IZjoL+XwdM4VSWBJQQMb+BCLhYabn8\nSY/e1Xc52dYxg+TU0ute33kbGtBlOltO/NdIk7cSPvEH+bXbrx97mitl5XII0Nmw\nT9nsCkzg52KpmcBGs0Clk1t3Soxa8FXA2yEKeZqfPppGMzEXHxY9tfKC8uhch2pI\nGG1IVZT0BSv29qLkCwzIAvhRiSX6nKO57V2VjK9KRTVl8PpHpL/oA7+Xl9PqhkOg\nj+t11pMVgPnMPhtGyRs9mpKEhl3gsA==\n=E4Gc\n-----END PGP SIGNATURE-----", "payload": "tree 1c967d1ca3e719477fec32be5c75cac75b074a50\nparent 34067a1c4c7dd2751270bba13712bdef36295643\nauthor Tibo Delor <delor.thibault@gmail.com> 1528603653 +1000\ncommitter Tibo Delor <delor.thibault@gmail.com> 1528603653 +1000\n\nClean Up code where last whitspace tracking isn't used\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42efae59449b4dda7b310ea70e15d57d65550217", "html_url": "https://github.com/rust-lang/rust/commit/42efae59449b4dda7b310ea70e15d57d65550217", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42efae59449b4dda7b310ea70e15d57d65550217/comments", "author": {"login": "t-botz", "id": 693797, "node_id": "MDQ6VXNlcjY5Mzc5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/693797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-botz", "html_url": "https://github.com/t-botz", "followers_url": "https://api.github.com/users/t-botz/followers", "following_url": "https://api.github.com/users/t-botz/following{/other_user}", "gists_url": "https://api.github.com/users/t-botz/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-botz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-botz/subscriptions", "organizations_url": "https://api.github.com/users/t-botz/orgs", "repos_url": "https://api.github.com/users/t-botz/repos", "events_url": "https://api.github.com/users/t-botz/events{/privacy}", "received_events_url": "https://api.github.com/users/t-botz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "t-botz", "id": 693797, "node_id": "MDQ6VXNlcjY5Mzc5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/693797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/t-botz", "html_url": "https://github.com/t-botz", "followers_url": "https://api.github.com/users/t-botz/followers", "following_url": "https://api.github.com/users/t-botz/following{/other_user}", "gists_url": "https://api.github.com/users/t-botz/gists{/gist_id}", "starred_url": "https://api.github.com/users/t-botz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/t-botz/subscriptions", "organizations_url": "https://api.github.com/users/t-botz/orgs", "repos_url": "https://api.github.com/users/t-botz/repos", "events_url": "https://api.github.com/users/t-botz/events{/privacy}", "received_events_url": "https://api.github.com/users/t-botz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34067a1c4c7dd2751270bba13712bdef36295643", "url": "https://api.github.com/repos/rust-lang/rust/commits/34067a1c4c7dd2751270bba13712bdef36295643", "html_url": "https://github.com/rust-lang/rust/commit/34067a1c4c7dd2751270bba13712bdef36295643"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "35448a087a349588eebf6b3d9a04d84c02eb0d8d", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/42efae59449b4dda7b310ea70e15d57d65550217/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42efae59449b4dda7b310ea70e15d57d65550217/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=42efae59449b4dda7b310ea70e15d57d65550217", "patch": "@@ -517,7 +517,7 @@ fn format_lines(\n     report: &FormatReport,\n ) {\n     let mut trims = vec![];\n-    let mut last_wspace: Option<usize> = None;\n+    let mut last_was_space = false;\n     let mut line_len = 0;\n     let mut cur_line = 1;\n     let mut newline_count = 0;\n@@ -542,7 +542,7 @@ fn format_lines(\n     }\n \n     // Iterate over the chars in the file map.\n-    for (kind, (b, c)) in CharClasses::new(text.chars().enumerate()) {\n+    for (kind, c) in CharClasses::new(text.chars()) {\n         if c == '\\r' {\n             continue;\n         }\n@@ -563,7 +563,7 @@ fn format_lines(\n         if c == '\\n' {\n             if format_line {\n                 // Check for (and record) trailing whitespace.\n-                if let Some(..) = last_wspace {\n+                if last_was_space {\n                     if should_report_error(config, kind, is_string, &ErrorKind::TrailingWhitespace)\n                     {\n                         trims.push((cur_line, kind, line_buffer.clone()));\n@@ -591,19 +591,13 @@ fn format_lines(\n             cur_line += 1;\n             format_line = config.file_lines().contains_line(name, cur_line);\n             newline_count += 1;\n-            last_wspace = None;\n+            last_was_space = false;\n             line_buffer.clear();\n             is_string = false;\n         } else {\n             newline_count = 0;\n             line_len += if c == '\\t' { config.tab_spaces() } else { 1 };\n-            if c.is_whitespace() {\n-                if last_wspace.is_none() {\n-                    last_wspace = Some(b);\n-                }\n-            } else {\n-                last_wspace = None;\n-            }\n+            last_was_space = c.is_whitespace();\n             line_buffer.push(c);\n             if kind.is_string() {\n                 is_string = true;"}]}