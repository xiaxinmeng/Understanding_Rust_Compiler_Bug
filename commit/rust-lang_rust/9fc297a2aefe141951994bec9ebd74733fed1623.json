{"sha": "9fc297a2aefe141951994bec9ebd74733fed1623", "node_id": "C_kwDOAAsO6NoAKDlmYzI5N2EyYWVmZTE0MTk1MTk5NGJlYzllYmQ3NDczM2ZlZDE2MjM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-11T09:49:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-11T09:49:32Z"}, "message": "Rollup merge of #99140 - TaKO8Ki:implement-is-accessible-span, r=fee1-dead\n\nImplement `SourceMap::is_span_accessible`\n\nThis patch adds `SourceMap::is_span_accessible` and replaces `span_to_snippet(span).is_ok()` and `span_to_snippet(span).is_err()` with it. This removes a `&str` to `String` conversion.", "tree": {"sha": "54d1d5d1a9a557a838d25f18d1ad822c8a4b3985", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54d1d5d1a9a557a838d25f18d1ad822c8a4b3985"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fc297a2aefe141951994bec9ebd74733fed1623", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiy/IsCRBK7hj4Ov3rIwAArM0IAGi2Wg35jKvJXxXc7n4V8Txt\nszZSpArJ6g1HqQ03aysZs2knUr3y/IXCzfpaDiGi7kl6fcsxcLRmZm4+c/MeWxup\nh1LzQrMn1QJOnYz7v7XOoa3L+uF5zHkIJJETra6zChi9my8TpJNSn5cLd8YIhMh8\nhT8P0zZ2AjdXwQjNkY9fP2aZm01vJMDeTktopsV8TQkcbHZRIQOsa5geUXCMP0vz\n6m704YruzAEzyzD3ucHmVnlhex3h4N0UbLzSIxzNAJLlMg7Z3oXW+P+CYZtBYPMG\n/xrDd4kipZU67M1GQnXOzW0ISg5bJam1/7FQYoN9/0YEnFw+1fl6zflgANv/7sQ=\n=PBO9\n-----END PGP SIGNATURE-----\n", "payload": "tree 54d1d5d1a9a557a838d25f18d1ad822c8a4b3985\nparent 93f71d4e012df4477a34e911f8734c545b6bca2f\nparent 018155c3a218b819b70d1dc57b08fe3bc7b2ec3c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657532972 +0530\ncommitter GitHub <noreply@github.com> 1657532972 +0530\n\nRollup merge of #99140 - TaKO8Ki:implement-is-accessible-span, r=fee1-dead\n\nImplement `SourceMap::is_span_accessible`\n\nThis patch adds `SourceMap::is_span_accessible` and replaces `span_to_snippet(span).is_ok()` and `span_to_snippet(span).is_err()` with it. This removes a `&str` to `String` conversion.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc297a2aefe141951994bec9ebd74733fed1623", "html_url": "https://github.com/rust-lang/rust/commit/9fc297a2aefe141951994bec9ebd74733fed1623", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fc297a2aefe141951994bec9ebd74733fed1623/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93f71d4e012df4477a34e911f8734c545b6bca2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/93f71d4e012df4477a34e911f8734c545b6bca2f", "html_url": "https://github.com/rust-lang/rust/commit/93f71d4e012df4477a34e911f8734c545b6bca2f"}, {"sha": "018155c3a218b819b70d1dc57b08fe3bc7b2ec3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/018155c3a218b819b70d1dc57b08fe3bc7b2ec3c", "html_url": "https://github.com/rust-lang/rust/commit/018155c3a218b819b70d1dc57b08fe3bc7b2ec3c"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "687ff0fb505802dbd332318feeb20509c67b75ab", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fc297a2aefe141951994bec9ebd74733fed1623/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc297a2aefe141951994bec9ebd74733fed1623/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=9fc297a2aefe141951994bec9ebd74733fed1623", "patch": "@@ -309,7 +309,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 ));\n \n                 // Check first whether the source is accessible (issue #87060)\n-                if self.infcx.tcx.sess.source_map().span_to_snippet(deref_target).is_ok() {\n+                if self.infcx.tcx.sess.source_map().is_span_accessible(deref_target) {\n                     err.span_note(deref_target, \"deref defined here\");\n                 }\n             }"}, {"sha": "9c7671eee38d007c0f14d61a57b507547e0ee914", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9fc297a2aefe141951994bec9ebd74733fed1623/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc297a2aefe141951994bec9ebd74733fed1623/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=9fc297a2aefe141951994bec9ebd74733fed1623", "patch": "@@ -975,14 +975,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     if self.fn_self_span_reported.insert(fn_span) {\n                         err.span_note(\n                             // Check whether the source is accessible\n-                            if self\n-                                .infcx\n-                                .tcx\n-                                .sess\n-                                .source_map()\n-                                .span_to_snippet(self_arg.span)\n-                                .is_ok()\n-                            {\n+                            if self.infcx.tcx.sess.source_map().is_span_accessible(self_arg.span) {\n                                 self_arg.span\n                             } else {\n                                 fn_call_span"}, {"sha": "1d083b0bf8268b011cab72d22a78e66227bf6f07", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fc297a2aefe141951994bec9ebd74733fed1623/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc297a2aefe141951994bec9ebd74733fed1623/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=9fc297a2aefe141951994bec9ebd74733fed1623", "patch": "@@ -299,7 +299,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                 err.note(&format!(\"attempting to deref into `{}`\", deref_target_ty));\n \n                 // Check first whether the source is accessible (issue #87060)\n-                if tcx.sess.source_map().span_to_snippet(deref_target).is_ok() {\n+                if tcx.sess.source_map().is_span_accessible(deref_target) {\n                     err.span_note(deref_target, \"deref defined here\");\n                 }\n "}, {"sha": "e59a74e380ae392f2beacf52fa60a2dfb72b3f49", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fc297a2aefe141951994bec9ebd74733fed1623/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc297a2aefe141951994bec9ebd74733fed1623/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=9fc297a2aefe141951994bec9ebd74733fed1623", "patch": "@@ -1558,7 +1558,7 @@ pub fn add_elided_lifetime_in_path_suggestion(\n     insertion_span: Span,\n ) {\n     diag.span_label(path_span, format!(\"expected lifetime parameter{}\", pluralize!(n)));\n-    if source_map.span_to_snippet(insertion_span).is_err() {\n+    if !source_map.is_span_accessible(insertion_span) {\n         // Do not try to suggest anything if generated by a proc-macro.\n         return;\n     }"}, {"sha": "75fd156ebfdf379d5f39998355af4731c9d6171d", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fc297a2aefe141951994bec9ebd74733fed1623/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc297a2aefe141951994bec9ebd74733fed1623/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=9fc297a2aefe141951994bec9ebd74733fed1623", "patch": "@@ -432,7 +432,7 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n                 \"`let` bindings require an \\\"irrefutable pattern\\\", like a `struct` or \\\n                  an `enum` with only one variant\",\n             );\n-            if self.tcx.sess.source_map().span_to_snippet(span).is_ok() {\n+            if self.tcx.sess.source_map().is_span_accessible(span) {\n                 let semi_span = span.shrink_to_hi().with_lo(span.hi() - BytePos(1));\n                 let start_span = span.shrink_to_lo();\n                 let end_span = semi_span.shrink_to_lo();"}, {"sha": "2851b08cd934ef44aaed7ff3c69aecd2a0c21d6e", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fc297a2aefe141951994bec9ebd74733fed1623/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc297a2aefe141951994bec9ebd74733fed1623/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=9fc297a2aefe141951994bec9ebd74733fed1623", "patch": "@@ -1647,7 +1647,7 @@ impl<'a> Resolver<'a> {\n \n     fn binding_description(&self, b: &NameBinding<'_>, ident: Ident, from_prelude: bool) -> String {\n         let res = b.res();\n-        if b.span.is_dummy() || self.session.source_map().span_to_snippet(b.span).is_err() {\n+        if b.span.is_dummy() || !self.session.source_map().is_span_accessible(b.span) {\n             // These already contain the \"built-in\" prefix or look bad with it.\n             let add_built_in =\n                 !matches!(b.res(), Res::NonMacroAttr(..) | Res::PrimTy(..) | Res::ToolMod);"}, {"sha": "afbb88e92336049d30357fd4b322988a2d0177e0", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9fc297a2aefe141951994bec9ebd74733fed1623/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc297a2aefe141951994bec9ebd74733fed1623/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=9fc297a2aefe141951994bec9ebd74733fed1623", "patch": "@@ -597,6 +597,13 @@ impl SourceMap {\n         local_begin.sf.src.is_some() && local_end.sf.src.is_some()\n     }\n \n+    pub fn is_span_accessible(&self, sp: Span) -> bool {\n+        self.span_to_source(sp, |src, start_index, end_index| {\n+            Ok(src.get(start_index..end_index).is_some())\n+        })\n+        .map_or(false, |is_accessible| is_accessible)\n+    }\n+\n     /// Returns the source snippet as `String` corresponding to the given `Span`.\n     pub fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> {\n         self.span_to_source(sp, |src, start_index, end_index| {"}, {"sha": "dc553d1441e5356ed3785c02383d5acb4d6afd0d", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fc297a2aefe141951994bec9ebd74733fed1623/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc297a2aefe141951994bec9ebd74733fed1623/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=9fc297a2aefe141951994bec9ebd74733fed1623", "patch": "@@ -760,7 +760,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     if let Some(call_span) =\n                         iter::successors(Some(expr.span), |s| s.parent_callsite())\n                             .find(|&s| sp.contains(s))\n-                        && sm.span_to_snippet(call_span).is_ok()\n+                        && sm.is_span_accessible(call_span)\n                     {\n                         return Some((\n                             sp.with_hi(call_span.lo()),\n@@ -773,7 +773,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     return None;\n                 }\n                 if sp.contains(expr.span)\n-                    && sm.span_to_snippet(expr.span).is_ok()\n+                    && sm.is_span_accessible(expr.span)\n                 {\n                     return Some((\n                         sp.with_hi(expr.span.lo()),"}, {"sha": "469f7d1172ae67ec7b0afd3bbe23a5d99ae49b00", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fc297a2aefe141951994bec9ebd74733fed1623/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc297a2aefe141951994bec9ebd74733fed1623/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=9fc297a2aefe141951994bec9ebd74733fed1623", "patch": "@@ -812,7 +812,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n     /// Builds the `type defined here` message.\n     fn show_definition(&self, err: &mut Diagnostic) {\n         let mut spans: MultiSpan = if let Some(def_span) = self.tcx.def_ident_span(self.def_id) {\n-            if self.tcx.sess.source_map().span_to_snippet(def_span).is_ok() {\n+            if self.tcx.sess.source_map().is_span_accessible(def_span) {\n                 def_span.into()\n             } else {\n                 return;"}]}