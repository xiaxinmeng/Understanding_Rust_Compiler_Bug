{"sha": "fe075319e6d21ffce8978b8861de1f8b34cd7bcc", "node_id": "C_kwDOAAsO6NoAKGZlMDc1MzE5ZTZkMjFmZmNlODk3OGI4ODYxZGUxZjhiMzRjZDdiY2M", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2023-01-08T08:01:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-08T08:01:46Z"}, "message": "Rollup merge of #106410 - clubby789:borrow-mut-self-mut-self-diag, r=compiler-errors\n\nSuggest `mut self: &mut Self` for `?Sized` impls\n\nCloses #106325\nCloses #93078\n\nThe suggestion is _probably_ not what the user wants (hence `MaybeIncorrect`) but at least makes the problem in the above issues clearer. It might be better to add a note explaining why this is the case, but I'm not sure how best to word that so this is a start.\n\n``@rustbot`` label +A-diagnostics", "tree": {"sha": "0a8efbcb213da88e07a42a69d38e1689010b9169", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a8efbcb213da88e07a42a69d38e1689010b9169"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe075319e6d21ffce8978b8861de1f8b34cd7bcc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjunhqCRBK7hj4Ov3rIwAAGdkIAJoxD7HqKKg9+hEkGln7D0nd\n+ht/3Sbjh+LBT187ZuDI8bTvwk3Zg7bDF22LkVLlFFJ7PB0TEU3qJDKA48PWh/EN\n7PwQYhPOk4hRHzw92PT/xsFcy2rGElz/B09T57hrM/Pdc7s/8fYw5TbypEXscDec\ntNUwzvubAakQw9jpgbaXRi1A5NcktXHeCi5M/WOHC+mJRHtI8P3YQOLiGwscn4Nt\numZMX1mGMAcyNf5l2ggFilrw1xrFaRIjL1juOgtp7dhf1v/Rb4lp7h/PbbKsp5wx\nGlNk3Q6QVwJHDRjwdS2tzwh8ydZGbiVx4BeXUhGqw7mosEwg2jH3v0Qe4pQY7io=\n=TFwD\n-----END PGP SIGNATURE-----\n", "payload": "tree 0a8efbcb213da88e07a42a69d38e1689010b9169\nparent ed77ffe166506422f208f3a3870e77893ae84449\nparent 23c3a307300827dbd53637742905293b9240506a\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1673164906 +0900\ncommitter GitHub <noreply@github.com> 1673164906 +0900\n\nRollup merge of #106410 - clubby789:borrow-mut-self-mut-self-diag, r=compiler-errors\n\nSuggest `mut self: &mut Self` for `?Sized` impls\n\nCloses #106325\nCloses #93078\n\nThe suggestion is _probably_ not what the user wants (hence `MaybeIncorrect`) but at least makes the problem in the above issues clearer. It might be better to add a note explaining why this is the case, but I'm not sure how best to word that so this is a start.\n\n``@rustbot`` label +A-diagnostics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe075319e6d21ffce8978b8861de1f8b34cd7bcc", "html_url": "https://github.com/rust-lang/rust/commit/fe075319e6d21ffce8978b8861de1f8b34cd7bcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe075319e6d21ffce8978b8861de1f8b34cd7bcc/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed77ffe166506422f208f3a3870e77893ae84449", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed77ffe166506422f208f3a3870e77893ae84449", "html_url": "https://github.com/rust-lang/rust/commit/ed77ffe166506422f208f3a3870e77893ae84449"}, {"sha": "23c3a307300827dbd53637742905293b9240506a", "url": "https://api.github.com/repos/rust-lang/rust/commits/23c3a307300827dbd53637742905293b9240506a", "html_url": "https://github.com/rust-lang/rust/commit/23c3a307300827dbd53637742905293b9240506a"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "09ef84f7cbb84f8d1534d66e7249704d8425b0b3", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fe075319e6d21ffce8978b8861de1f8b34cd7bcc/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe075319e6d21ffce8978b8861de1f8b34cd7bcc/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=fe075319e6d21ffce8978b8861de1f8b34cd7bcc", "patch": "@@ -344,20 +344,25 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     } else {\n                         err.span_help(source_info.span, \"try removing `&mut` here\");\n                     }\n-                } else if decl.mutability == Mutability::Not\n-                    && !matches!(\n+                } else if decl.mutability == Mutability::Not {\n+                    if matches!(\n                         decl.local_info,\n                         Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::ImplicitSelf(\n                             hir::ImplicitSelfKind::MutRef\n-                        ))))\n-                    )\n-                {\n-                    err.span_suggestion_verbose(\n-                        decl.source_info.span.shrink_to_lo(),\n-                        \"consider making the binding mutable\",\n-                        \"mut \",\n-                        Applicability::MachineApplicable,\n-                    );\n+                        ),)))\n+                    ) {\n+                        err.note(\n+                            \"as `Self` may be unsized, this call attempts to take `&mut &mut self`\",\n+                        );\n+                        err.note(\"however, `&mut self` expands to `self: &mut Self`, therefore `self` cannot be borrowed mutably\");\n+                    } else {\n+                        err.span_suggestion_verbose(\n+                            decl.source_info.span.shrink_to_lo(),\n+                            \"consider making the binding mutable\",\n+                            \"mut \",\n+                            Applicability::MachineApplicable,\n+                        );\n+                    };\n                 }\n             }\n "}, {"sha": "2e608c5db3e1d160c6548ce81bad3c92a1a91494", "filename": "src/test/ui/borrowck/issue-93078.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fe075319e6d21ffce8978b8861de1f8b34cd7bcc/src%2Ftest%2Fui%2Fborrowck%2Fissue-93078.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe075319e6d21ffce8978b8861de1f8b34cd7bcc/src%2Ftest%2Fui%2Fborrowck%2Fissue-93078.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-93078.rs?ref=fe075319e6d21ffce8978b8861de1f8b34cd7bcc", "patch": "@@ -0,0 +1,15 @@\n+trait Modify {\n+    fn modify(&mut self) ;\n+}\n+\n+impl<T> Modify for T  {\n+    fn modify(&mut self)  {}\n+}\n+\n+trait Foo {\n+    fn mute(&mut self) {\n+        self.modify(); //~ ERROR cannot borrow `self` as mutable\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "771a652a1739cfb1c2f461d9da0afb7d656b07f8", "filename": "src/test/ui/borrowck/issue-93078.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fe075319e6d21ffce8978b8861de1f8b34cd7bcc/src%2Ftest%2Fui%2Fborrowck%2Fissue-93078.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe075319e6d21ffce8978b8861de1f8b34cd7bcc/src%2Ftest%2Fui%2Fborrowck%2Fissue-93078.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-93078.stderr?ref=fe075319e6d21ffce8978b8861de1f8b34cd7bcc", "patch": "@@ -0,0 +1,12 @@\n+error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-93078.rs:11:9\n+   |\n+LL |         self.modify();\n+   |         ^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+   = note: as `Self` may be unsized, this call attempts to take `&mut &mut self`\n+   = note: however, `&mut self` expands to `self: &mut Self`, therefore `self` cannot be borrowed mutably\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}]}