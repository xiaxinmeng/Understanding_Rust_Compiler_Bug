{"sha": "1b5143ae13c50aeb3d8a84d838e4db54a57e8a5b", "node_id": "C_kwDOAAsO6NoAKDFiNTE0M2FlMTNjNTBhZWIzZDhhODRkODM4ZTRkYjU0YTU3ZThhNWI", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-06-06T09:55:02Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-06-12T07:32:36Z"}, "message": "stop using a macro for the mir-opt test suite", "tree": {"sha": "74e7c12d356bcd75933b00ee07a7c70233176442", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74e7c12d356bcd75933b00ee07a7c70233176442"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b5143ae13c50aeb3d8a84d838e4db54a57e8a5b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmSGyhQACgkQzXazX3c0\ndp7QpBAAjTyWaRHbCdC8HccPPmNJmLZq8b2WAzCjduR1qN0DjKa5HbIqEuLWGCri\nnZGCotjrAu7KgHwgWe2+UsiE8hvrqiYhCtgBKZcSQqvWBMD1yBKQJfvqRrTN0cob\nHnFWLtggwOn9HFXbbLVEud8VuFLvBCFyQw6FBZgIb34T8K/Z9DSPyj4ZXMiPjjQn\n1UnonLD+WLOSX1b/3jtzmeprEyuq2zkT6UEq6dInDdo49twIXxeYKY9n0GgwQ0iP\n7hx3nlSoxAgaXwV/CgLlo7elVE8qNhQvZp1mSiuzrW+fpOubDOh02qJKSq9K8oYM\n/0AD/OXGVikHJ+kB4fkVHWpGlzmXkmnsX6/bQWHpg9lKPB+E0SWgUqsUDAJZV5ZN\nemRMR3UDwe/v2MmI+MrX1d/YuZHJ2epZXOpQ6VEkIFVZ+54rt33weoUWFMXKATrd\nJmaXKe6D22MWDxoN94t4Z/SIhJbFuYYJcDfxoxh1JNCAzF8z+31oNPAtUsxfWoAK\nVe7bsjsZy4EiDtjl7Laeo2jiJtRabEILeCZboi8d+m3QCja4lPpmEwq4pH7jEPMl\nFmUxLTlYp8cfBwjQ09ofrOYqbj+H8OIGNeoY0e87mWjumSUaCBWWYSC8Jct7RQ7s\nrizZfxuEfpOebtebcGQ4DB3qql3G85WktGqzPaxqN1x8U1el3x8=\n=QU6N\n-----END PGP SIGNATURE-----", "payload": "tree 74e7c12d356bcd75933b00ee07a7c70233176442\nparent 77dba225c1048e5585b2cdefb7f8588bd2d2741b\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1686045302 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1686555156 +0200\n\nstop using a macro for the mir-opt test suite\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b5143ae13c50aeb3d8a84d838e4db54a57e8a5b", "html_url": "https://github.com/rust-lang/rust/commit/1b5143ae13c50aeb3d8a84d838e4db54a57e8a5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b5143ae13c50aeb3d8a84d838e4db54a57e8a5b/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77dba225c1048e5585b2cdefb7f8588bd2d2741b", "url": "https://api.github.com/repos/rust-lang/rust/commits/77dba225c1048e5585b2cdefb7f8588bd2d2741b", "html_url": "https://github.com/rust-lang/rust/commit/77dba225c1048e5585b2cdefb7f8588bd2d2741b"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "699b7f0be85d61dbf5db9b5cf90e7974428409ef", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1b5143ae13c50aeb3d8a84d838e4db54a57e8a5b/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5143ae13c50aeb3d8a84d838e4db54a57e8a5b/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=1b5143ae13c50aeb3d8a84d838e4db54a57e8a5b", "patch": "@@ -1261,8 +1261,6 @@ default_test!(RunPassValgrind {\n     suite: \"run-pass-valgrind\"\n });\n \n-default_test!(MirOpt { path: \"tests/mir-opt\", mode: \"mir-opt\", suite: \"mir-opt\" });\n-\n default_test!(Codegen { path: \"tests/codegen\", mode: \"codegen\", suite: \"codegen\" });\n \n default_test!(CodegenUnits {\n@@ -1299,6 +1297,39 @@ host_test!(RunMakeFullDeps {\n \n default_test!(Assembly { path: \"tests/assembly\", mode: \"assembly\", suite: \"assembly\" });\n \n+// For the mir-opt suite we do not use macros, as we need custom behavior when blessing.\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct MirOpt {\n+    pub compiler: Compiler,\n+    pub target: TargetSelection,\n+}\n+\n+impl Step for MirOpt {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = false;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.suite_path(\"tests/mir-opt\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        let compiler = run.builder.compiler(run.builder.top_stage, run.build_triple());\n+        run.builder.ensure(MirOpt { compiler, target: run.target });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) {\n+        builder.ensure(Compiletest {\n+            compiler: self.compiler,\n+            target: self.target,\n+            mode: \"mir-opt\",\n+            suite: \"mir-opt\",\n+            path: \"tests/mir-opt\",\n+            compare_mode: None,\n+        });\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n struct Compiletest {\n     compiler: Compiler,"}]}