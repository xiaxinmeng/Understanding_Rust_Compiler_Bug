{"sha": "efdcce1955864c2d0da57f425d2f2d070757c190", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZGNjZTE5NTU4NjRjMmQwZGE1N2Y0MjVkMmYyZDA3MDc1N2MxOTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-24T14:13:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-24T14:13:12Z"}, "message": "Rollup merge of #62738 - nathanwhit:fix_mem_uninit_cloudabi, r=RalfJung\n\nRemove uses of mem::uninitialized from std::sys::cloudabi\n\nAddresses #62397 for std::sys::cloudabi, excluding the tests within cloudabi, which will be a separate PR", "tree": {"sha": "cc227f3bc72bb116e69a2aee7cbb4d065429f796", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc227f3bc72bb116e69a2aee7cbb4d065429f796"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efdcce1955864c2d0da57f425d2f2d070757c190", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdOGd4CRBK7hj4Ov3rIwAAdHIIAEefcMEyZJs1RQW6Jtc/5CS5\nB1yp2jR7+kdGH7j2TBqRK+4IRSJDgx6+Niem5o9HEjYjLt1msW1BCOem6fbMVDA3\n5JpUlmO5iWZy7kL5TrLVPJN44dPLWCNK0B7QddvM00lhdxSjvU3Rb2M35XouhUU/\nnVHw6k0rWQs3lIEb5jgkgevX2q6KtPLiDQpIu9lObwciBVzlYXXxoHU1yQTBUdDG\nWamm0o3SAQnyX4lWDufF2CoIQFguvpaRyIbzrrGP37D+FQ+y0Tpsw0UghO028ddP\n0vneUZ1zcXcxkn29BmK6HQtyooN8va9eNGXZr8wDuLej1YRfZMU0vJNvtfD5KJA=\n=PgXH\n-----END PGP SIGNATURE-----\n", "payload": "tree cc227f3bc72bb116e69a2aee7cbb4d065429f796\nparent a7d993961f90e2b14e8bed96ba6ee22ce40e1805\nparent b70f21726238d73e671179ca6fe54ec228c75870\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1563977592 +0200\ncommitter GitHub <noreply@github.com> 1563977592 +0200\n\nRollup merge of #62738 - nathanwhit:fix_mem_uninit_cloudabi, r=RalfJung\n\nRemove uses of mem::uninitialized from std::sys::cloudabi\n\nAddresses #62397 for std::sys::cloudabi, excluding the tests within cloudabi, which will be a separate PR\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efdcce1955864c2d0da57f425d2f2d070757c190", "html_url": "https://github.com/rust-lang/rust/commit/efdcce1955864c2d0da57f425d2f2d070757c190", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efdcce1955864c2d0da57f425d2f2d070757c190/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7d993961f90e2b14e8bed96ba6ee22ce40e1805", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d993961f90e2b14e8bed96ba6ee22ce40e1805", "html_url": "https://github.com/rust-lang/rust/commit/a7d993961f90e2b14e8bed96ba6ee22ce40e1805"}, {"sha": "b70f21726238d73e671179ca6fe54ec228c75870", "url": "https://api.github.com/repos/rust-lang/rust/commits/b70f21726238d73e671179ca6fe54ec228c75870", "html_url": "https://github.com/rust-lang/rust/commit/b70f21726238d73e671179ca6fe54ec228c75870"}], "stats": {"total": 81, "additions": 50, "deletions": 31}, "files": [{"sha": "fbc68c610ee39beb023b1b8129855364c88865ce", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efdcce1955864c2d0da57f425d2f2d070757c190/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcce1955864c2d0da57f425d2f2d070757c190/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=efdcce1955864c2d0da57f425d2f2d070757c190", "patch": "@@ -273,6 +273,7 @@\n #![feature(link_args)]\n #![feature(linkage)]\n #![feature(maybe_uninit_ref)]\n+#![feature(maybe_uninit_slice)]\n #![feature(mem_take)]\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]"}, {"sha": "9addba8b6118e3d8d28541813190bd61f7668ad5", "filename": "src/libstd/sys/cloudabi/abi/cloudabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efdcce1955864c2d0da57f425d2f2d070757c190/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcce1955864c2d0da57f425d2f2d070757c190/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs?ref=efdcce1955864c2d0da57f425d2f2d070757c190", "patch": "@@ -1884,7 +1884,7 @@ pub unsafe fn clock_res_get(clock_id_: clockid, resolution_: &mut timestamp) ->\n /// **time**:\n /// The time value of the clock.\n #[inline]\n-pub unsafe fn clock_time_get(clock_id_: clockid, precision_: timestamp, time_: &mut timestamp) -> errno {\n+pub unsafe fn clock_time_get(clock_id_: clockid, precision_: timestamp, time_: *mut timestamp) -> errno {\n   cloudabi_sys_clock_time_get(clock_id_, precision_, time_)\n }\n \n@@ -2643,7 +2643,7 @@ pub unsafe fn mem_unmap(mapping_: &mut [u8]) -> errno {\n /// **nevents**:\n /// The number of events stored.\n #[inline]\n-pub unsafe fn poll(in_: *const subscription, out_: *mut event, nsubscriptions_: usize, nevents_: &mut usize) -> errno {\n+pub unsafe fn poll(in_: *const subscription, out_: *mut event, nsubscriptions_: usize, nevents_: *mut usize) -> errno {\n   cloudabi_sys_poll(in_, out_, nsubscriptions_, nevents_)\n }\n "}, {"sha": "ec1fca7805a17a73cea46af41862a26dec227dbb", "filename": "src/libstd/sys/cloudabi/condvar.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/efdcce1955864c2d0da57f425d2f2d070757c190/src%2Flibstd%2Fsys%2Fcloudabi%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcce1955864c2d0da57f425d2f2d070757c190/src%2Flibstd%2Fsys%2Fcloudabi%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fcondvar.rs?ref=efdcce1955864c2d0da57f425d2f2d070757c190", "patch": "@@ -79,16 +79,21 @@ impl Condvar {\n             },\n             ..mem::zeroed()\n         };\n-        let mut event: abi::event = mem::uninitialized();\n-        let mut nevents: usize = mem::uninitialized();\n-        let ret = abi::poll(&subscription, &mut event, 1, &mut nevents);\n+        let mut event: mem::MaybeUninit<abi::event> = mem::MaybeUninit::uninit();\n+        let mut nevents: mem::MaybeUninit<usize> = mem::MaybeUninit::uninit();\n+        let ret = abi::poll(\n+            &subscription,\n+            event.as_mut_ptr(),\n+            1,\n+            nevents.as_mut_ptr()\n+        );\n         assert_eq!(\n             ret,\n             abi::errno::SUCCESS,\n             \"Failed to wait on condition variable\"\n         );\n         assert_eq!(\n-            event.error,\n+            event.assume_init().error,\n             abi::errno::SUCCESS,\n             \"Failed to wait on condition variable\"\n         );\n@@ -131,21 +136,27 @@ impl Condvar {\n                 ..mem::zeroed()\n             },\n         ];\n-        let mut events: [abi::event; 2] = mem::uninitialized();\n-        let mut nevents: usize = mem::uninitialized();\n-        let ret = abi::poll(subscriptions.as_ptr(), events.as_mut_ptr(), 2, &mut nevents);\n+        let mut events: [mem::MaybeUninit<abi::event>; 2] = [mem::MaybeUninit::uninit(); 2];\n+        let mut nevents: mem::MaybeUninit<usize> = mem::MaybeUninit::uninit();\n+        let ret = abi::poll(\n+            subscriptions.as_ptr(),\n+            mem::MaybeUninit::first_ptr_mut(&mut events),\n+            2,\n+            nevents.as_mut_ptr()\n+        );\n         assert_eq!(\n             ret,\n             abi::errno::SUCCESS,\n             \"Failed to wait on condition variable\"\n         );\n+        let nevents = nevents.assume_init();\n         for i in 0..nevents {\n             assert_eq!(\n-                events[i].error,\n+                events[i].assume_init().error,\n                 abi::errno::SUCCESS,\n                 \"Failed to wait on condition variable\"\n             );\n-            if events[i].type_ == abi::eventtype::CONDVAR {\n+            if events[i].assume_init().type_ == abi::eventtype::CONDVAR {\n                 return true;\n             }\n         }"}, {"sha": "6e147612eb4b7b41a44501987019c8566235bbd3", "filename": "src/libstd/sys/cloudabi/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/efdcce1955864c2d0da57f425d2f2d070757c190/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcce1955864c2d0da57f425d2f2d070757c190/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs?ref=efdcce1955864c2d0da57f425d2f2d070757c190", "patch": "@@ -61,8 +61,11 @@ pub use libc::strlen;\n \n pub fn hashmap_random_keys() -> (u64, u64) {\n     unsafe {\n-        let mut v = mem::uninitialized();\n-        libc::arc4random_buf(&mut v as *mut _ as *mut libc::c_void, mem::size_of_val(&v));\n-        v\n+        let mut v: mem::MaybeUninit<(u64, u64)> = mem::MaybeUninit::uninit();\n+        libc::arc4random_buf(\n+            v.as_mut_ptr() as *mut libc::c_void,\n+            mem::size_of_val(&v)\n+        );\n+        v.assume_init()\n     }\n }"}, {"sha": "d3ff0077b20e53ea6af8a5f1535090edcd3f17e6", "filename": "src/libstd/sys/cloudabi/mutex.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/efdcce1955864c2d0da57f425d2f2d070757c190/src%2Flibstd%2Fsys%2Fcloudabi%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcce1955864c2d0da57f425d2f2d070757c190/src%2Flibstd%2Fsys%2Fcloudabi%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fmutex.rs?ref=efdcce1955864c2d0da57f425d2f2d070757c190", "patch": "@@ -1,5 +1,6 @@\n use crate::cell::UnsafeCell;\n use crate::mem;\n+use crate::mem::MaybeUninit;\n use crate::sync::atomic::{AtomicU32, Ordering};\n use crate::sys::cloudabi::abi;\n use crate::sys::rwlock::{self, RWLock};\n@@ -47,24 +48,27 @@ impl Mutex {\n }\n \n pub struct ReentrantMutex {\n-    lock: UnsafeCell<AtomicU32>,\n-    recursion: UnsafeCell<u32>,\n+    lock: UnsafeCell<MaybeUninit<AtomicU32>>,\n+    recursion: UnsafeCell<MaybeUninit<u32>>,\n }\n \n impl ReentrantMutex {\n     pub unsafe fn uninitialized() -> ReentrantMutex {\n-        mem::uninitialized()\n+        ReentrantMutex {\n+            lock: UnsafeCell::new(MaybeUninit::uninit()),\n+            recursion: UnsafeCell::new(MaybeUninit::uninit())\n+        }\n     }\n \n     pub unsafe fn init(&mut self) {\n-        self.lock = UnsafeCell::new(AtomicU32::new(abi::LOCK_UNLOCKED.0));\n-        self.recursion = UnsafeCell::new(0);\n+        self.lock = UnsafeCell::new(MaybeUninit::new(AtomicU32::new(abi::LOCK_UNLOCKED.0)));\n+        self.recursion = UnsafeCell::new(MaybeUninit::new(0));\n     }\n \n     pub unsafe fn try_lock(&self) -> bool {\n         // Attempt to acquire the lock.\n-        let lock = self.lock.get();\n-        let recursion = self.recursion.get();\n+        let lock = (*self.lock.get()).as_mut_ptr();\n+        let recursion = (*self.recursion.get()).as_mut_ptr();\n         if let Err(old) = (*lock).compare_exchange(\n             abi::LOCK_UNLOCKED.0,\n             __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n@@ -109,8 +113,8 @@ impl ReentrantMutex {\n     }\n \n     pub unsafe fn unlock(&self) {\n-        let lock = self.lock.get();\n-        let recursion = self.recursion.get();\n+        let lock = (*self.lock.get()).as_mut_ptr();\n+        let recursion = (*self.recursion.get()).as_mut_ptr();\n         assert_eq!(\n             (*lock).load(Ordering::Relaxed) & !abi::LOCK_KERNEL_MANAGED.0,\n             __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n@@ -136,8 +140,8 @@ impl ReentrantMutex {\n     }\n \n     pub unsafe fn destroy(&self) {\n-        let lock = self.lock.get();\n-        let recursion = self.recursion.get();\n+        let lock = (*self.lock.get()).as_mut_ptr();\n+        let recursion = (*self.recursion.get()).as_mut_ptr();\n         assert_eq!(\n             (*lock).load(Ordering::Relaxed),\n             abi::LOCK_UNLOCKED.0,"}, {"sha": "5e502dcb2ba5092fa65517fa8ef6047f334b4fe1", "filename": "src/libstd/sys/cloudabi/time.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efdcce1955864c2d0da57f425d2f2d070757c190/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcce1955864c2d0da57f425d2f2d070757c190/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Ftime.rs?ref=efdcce1955864c2d0da57f425d2f2d070757c190", "patch": "@@ -18,10 +18,10 @@ pub fn checked_dur2intervals(dur: &Duration) -> Option<abi::timestamp> {\n impl Instant {\n     pub fn now() -> Instant {\n         unsafe {\n-            let mut t = mem::uninitialized();\n-            let ret = abi::clock_time_get(abi::clockid::MONOTONIC, 0, &mut t);\n+            let mut t: mem::MaybeUninit<abi::timestamp> = mem::MaybeUninit::uninit();\n+            let ret = abi::clock_time_get(abi::clockid::MONOTONIC, 0, t.as_mut_ptr());\n             assert_eq!(ret, abi::errno::SUCCESS);\n-            Instant { t }\n+            Instant { t: t.assume_init() }\n         }\n     }\n \n@@ -59,10 +59,10 @@ pub struct SystemTime {\n impl SystemTime {\n     pub fn now() -> SystemTime {\n         unsafe {\n-            let mut t = mem::uninitialized();\n-            let ret = abi::clock_time_get(abi::clockid::REALTIME, 0, &mut t);\n+            let mut t: mem::MaybeUninit<abi::timestamp> = mem::MaybeUninit::uninit();\n+            let ret = abi::clock_time_get(abi::clockid::REALTIME, 0, t.as_mut_ptr());\n             assert_eq!(ret, abi::errno::SUCCESS);\n-            SystemTime { t }\n+            SystemTime { t: t.assume_init() }\n         }\n     }\n "}]}