{"sha": "37a0df3e9db1b934dfb698fc1d7cbf506532004f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YTBkZjNlOWRiMWI5MzRkZmI2OThmYzFkN2NiZjUwNjUzMjAwNGY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-13T10:11:12Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-01T19:05:02Z"}, "message": "`<&'tcx ty::Const as Deref>::deref`", "tree": {"sha": "122e5d2f0b8ec2ea70e9dcd3e682649e98dc1ed7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/122e5d2f0b8ec2ea70e9dcd3e682649e98dc1ed7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37a0df3e9db1b934dfb698fc1d7cbf506532004f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37a0df3e9db1b934dfb698fc1d7cbf506532004f", "html_url": "https://github.com/rust-lang/rust/commit/37a0df3e9db1b934dfb698fc1d7cbf506532004f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37a0df3e9db1b934dfb698fc1d7cbf506532004f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb9f717a80814165dcdb4fa3f9d37a6551bcb264", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb9f717a80814165dcdb4fa3f9d37a6551bcb264", "html_url": "https://github.com/rust-lang/rust/commit/bb9f717a80814165dcdb4fa3f9d37a6551bcb264"}], "stats": {"total": 194, "additions": 86, "deletions": 108}, "files": [{"sha": "c3fe5d773ab16e4c4d55d44e5b69b827da3d53f0", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=37a0df3e9db1b934dfb698fc1d7cbf506532004f", "patch": "@@ -37,7 +37,7 @@ impl ErrorHandled {\n }\n \n pub type ConstEvalRawResult<'tcx> = Result<RawConst<'tcx>, ErrorHandled>;\n-pub type ConstEvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, ErrorHandled>;\n+pub type ConstEvalResult<'tcx> = Result<ty::Const<'tcx>, ErrorHandled>;\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct ConstEvalErr<'tcx> {"}, {"sha": "a1a6e890b1292de4691455187d3226128c357283", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=37a0df3e9db1b934dfb698fc1d7cbf506532004f", "patch": "@@ -1666,7 +1666,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n                             ),\n                             ty: switch_ty,\n                         };\n-                        fmt_const_val(&mut s, &c).unwrap();\n+                        fmt_const_val(&mut s, c).unwrap();\n                         s.into()\n                     }).chain(iter::once(\"otherwise\".into()))\n                     .collect()\n@@ -2155,7 +2155,7 @@ impl<'tcx> Operand<'tcx> {\n             ty,\n             user_ty: None,\n             literal: tcx.intern_lazy_const(\n-                ty::LazyConst::Evaluated(ty::Const::zero_sized(tcx, ty)),\n+                ty::LazyConst::Evaluated(ty::Const::zero_sized(ty)),\n             ),\n         })\n     }\n@@ -2663,14 +2663,14 @@ impl<'tcx> Debug for Constant<'tcx> {\n \n /// Write a `ConstValue` in a way closer to the original source code than the `Debug` output.\n pub fn fmt_lazy_const_val(f: &mut impl Write, const_val: &ty::LazyConst<'_>) -> fmt::Result {\n-    match const_val {\n+    match *const_val {\n         ty::LazyConst::Unevaluated(..) => write!(f, \"{:?}\", const_val),\n         ty::LazyConst::Evaluated(c) => fmt_const_val(f, c),\n     }\n }\n \n /// Write a `ConstValue` in a way closer to the original source code than the `Debug` output.\n-pub fn fmt_const_val(f: &mut impl Write, const_val: &ty::Const<'_>) -> fmt::Result {\n+pub fn fmt_const_val(f: &mut impl Write, const_val: ty::Const<'_>) -> fmt::Result {\n     use ty::TyKind::*;\n     let value = const_val.val;\n     let ty = const_val.ty;"}, {"sha": "e0e4d9c362a6ca0c1cc3690b357bad71851572ce", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=37a0df3e9db1b934dfb698fc1d7cbf506532004f", "patch": "@@ -246,15 +246,6 @@ pub fn decode_canonical_var_infos<'a, 'tcx, D>(decoder: &mut D)\n               .intern_canonical_var_infos(interned?.as_slice()))\n }\n \n-#[inline]\n-pub fn decode_const<'a, 'tcx, D>(decoder: &mut D)\n-                                 -> Result<&'tcx ty::Const<'tcx>, D::Error>\n-    where D: TyDecoder<'a, 'tcx>,\n-          'tcx: 'a,\n-{\n-    Ok(decoder.tcx().mk_const(Decodable::decode(decoder)?))\n-}\n-\n #[inline]\n pub fn decode_lazy_const<'a, 'tcx, D>(decoder: &mut D)\n                                  -> Result<&'tcx ty::LazyConst<'tcx>, D::Error>\n@@ -398,13 +389,6 @@ macro_rules! implement_ty_decoder {\n                 }\n             }\n \n-            impl<$($typaram),*> SpecializedDecoder<&'tcx $crate::ty::Const<'tcx>>\n-            for $DecoderName<$($typaram),*> {\n-                fn specialized_decode(&mut self) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {\n-                    decode_const(self)\n-                }\n-            }\n-\n             impl<$($typaram),*> SpecializedDecoder<&'tcx $crate::ty::LazyConst<'tcx>>\n             for $DecoderName<$($typaram),*> {\n                 fn specialized_decode(&mut self) -> Result<&'tcx ty::LazyConst<'tcx>, Self::Error> {"}, {"sha": "108fcc1bd3f21023aff4e79c6bb118b174432c38", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=37a0df3e9db1b934dfb698fc1d7cbf506532004f", "patch": "@@ -122,7 +122,6 @@ pub struct CtxtInterners<'tcx> {\n     region: InternedSet<'tcx, RegionKind>,\n     existential_predicates: InternedSet<'tcx, List<ExistentialPredicate<'tcx>>>,\n     predicates: InternedSet<'tcx, List<Predicate<'tcx>>>,\n-    const_: InternedSet<'tcx, Const<'tcx>>,\n     clauses: InternedSet<'tcx, List<Clause<'tcx>>>,\n     goal: InternedSet<'tcx, GoalKind<'tcx>>,\n     goal_list: InternedSet<'tcx, List<Goal<'tcx>>>,\n@@ -140,7 +139,6 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n             existential_predicates: Default::default(),\n             canonical_var_infos: Default::default(),\n             predicates: Default::default(),\n-            const_: Default::default(),\n             clauses: Default::default(),\n             goal: Default::default(),\n             goal_list: Default::default(),\n@@ -1071,24 +1069,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn alloc_const_slice(self, values: &[&'tcx ty::Const<'tcx>])\n-                             -> &'tcx [&'tcx ty::Const<'tcx>] {\n-        if values.is_empty() {\n-            &[]\n-        } else {\n-            self.interners.arena.alloc_slice(values)\n-        }\n-    }\n-\n-    pub fn alloc_name_const_slice(self, values: &[(ast::Name, &'tcx ty::Const<'tcx>)])\n-                                  -> &'tcx [(ast::Name, &'tcx ty::Const<'tcx>)] {\n-        if values.is_empty() {\n-            &[]\n-        } else {\n-            self.interners.arena.alloc_slice(values)\n-        }\n-    }\n-\n     pub fn intern_const_alloc(\n         self,\n         alloc: Allocation,\n@@ -1833,9 +1813,9 @@ impl<'a, 'tcx> Lift<'tcx> for &'a LazyConst<'a> {\n     }\n }\n \n-impl<'a, 'tcx> Lift<'tcx> for &'a Const<'a> {\n-    type Lifted = &'tcx Const<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<&'tcx Const<'tcx>> {\n+impl<'a, 'tcx> Lift<'tcx> for &'a mir::interpret::Allocation {\n+    type Lifted = &'tcx mir::interpret::Allocation;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         if tcx.interners.arena.in_arena(*self as *const _) {\n             return Some(unsafe { mem::transmute(*self) });\n         }\n@@ -2516,7 +2496,6 @@ pub fn keep_local<'tcx, T: ty::TypeFoldable<'tcx>>(x: &T) -> bool {\n \n direct_interners!('tcx,\n     region: mk_region(|r: &RegionKind| r.keep_in_local_tcx()) -> RegionKind,\n-    const_: mk_const(|c: &Const<'_>| keep_local(&c.ty) || keep_local(&c.val)) -> Const<'tcx>,\n     goal: mk_goal(|c: &GoalKind<'_>| keep_local(c)) -> GoalKind<'tcx>\n );\n "}, {"sha": "af6f5a00dee5c914d3a269001525db7a2cc0302e", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=37a0df3e9db1b934dfb698fc1d7cbf506532004f", "patch": "@@ -136,7 +136,7 @@ impl<'tcx> Key for ty::PolyTraitRef<'tcx>{\n     }\n }\n \n-impl<'tcx> Key for &'tcx ty::Const<'tcx> {\n+impl<'tcx> Key for ty::Const<'tcx> {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }"}, {"sha": "6e599531f25ee77f30341816e61d2ce3044f48a1", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=37a0df3e9db1b934dfb698fc1d7cbf506532004f", "patch": "@@ -53,7 +53,6 @@ CloneTypeFoldableAndLiftImpls! {\n     ::ty::UniverseIndex,\n     ::ty::Variance,\n     ::syntax_pos::Span,\n-    ConstValue<'tcx>,\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -492,6 +491,26 @@ BraceStructLiftImpl! {\n     }\n }\n \n+BraceStructLiftImpl! {\n+    impl<'a, 'tcx> Lift<'tcx> for ty::Const<'a> {\n+        type Lifted = ty::Const<'tcx>;\n+        val, ty\n+    }\n+}\n+\n+impl<'a, 'tcx> Lift<'tcx> for ConstValue<'a> {\n+    type Lifted = ConstValue<'tcx>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+        match *self {\n+            ConstValue::Scalar(x) => Some(ConstValue::Scalar(x)),\n+            ConstValue::ScalarPair(x, y) => Some(ConstValue::ScalarPair(x, y)),\n+            ConstValue::ByRef(x, alloc, z) => Some(ConstValue::ByRef(\n+                x, alloc.lift_to_tcx(tcx)?, z,\n+            )),\n+        }\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // TypeFoldable implementations.\n //\n@@ -1048,17 +1067,27 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::LazyConst<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {\n+impl<'tcx> TypeFoldable<'tcx> for ty::Const<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         let ty = self.ty.fold_with(folder);\n         let val = self.val.fold_with(folder);\n-        folder.tcx().mk_const(ty::Const {\n+        ty::Const {\n             ty,\n             val\n-        })\n+        }\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.ty.visit_with(visitor) || self.val.visit_with(visitor)\n     }\n }\n+\n+impl<'tcx> TypeFoldable<'tcx> for ConstValue<'tcx> {\n+    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, _folder: &mut F) -> Self {\n+        *self\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> bool {\n+        false\n+    }\n+}"}, {"sha": "be33911d4849ce9f7054329a4679ed4057eb6418", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=37a0df3e9db1b934dfb698fc1d7cbf506532004f", "patch": "@@ -2018,13 +2018,11 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n /// code is monomorphic enough for that.\n pub enum LazyConst<'tcx> {\n     Unevaluated(DefId, &'tcx Substs<'tcx>),\n-    Evaluated(&'tcx Const<'tcx>),\n+    Evaluated(Const<'tcx>),\n }\n \n-static_assert!(MEM_SIZE_OF_LAZY_CONST: ::std::mem::size_of::<LazyConst<'_>>() <= 24);\n-\n impl<'tcx> LazyConst<'tcx> {\n-    pub fn map_evaluated<R>(self, f: impl FnOnce(&'tcx Const<'tcx>) -> Option<R>) -> Option<R> {\n+    pub fn map_evaluated<R>(self, f: impl FnOnce(Const<'tcx>) -> Option<R>) -> Option<R> {\n         match self {\n             LazyConst::Evaluated(c) => f(c),\n             LazyConst::Unevaluated(..) => None,\n@@ -2050,55 +2048,45 @@ pub struct Const<'tcx> {\n }\n \n impl<'tcx> Const<'tcx> {\n-    #[inline]\n-    pub fn from_const_value(\n-        tcx: TyCtxt<'_, '_, 'tcx>,\n-        val: ConstValue<'tcx>,\n-        ty: Ty<'tcx>,\n-    ) -> &'tcx Self {\n-        tcx.mk_const(Const {\n-            val,\n-            ty,\n-        })\n-    }\n-\n     #[inline]\n     pub fn from_scalar(\n-        tcx: TyCtxt<'_, '_, 'tcx>,\n         val: Scalar,\n         ty: Ty<'tcx>,\n-    ) -> &'tcx Self {\n-        Self::from_const_value(tcx, ConstValue::Scalar(val), ty)\n+    ) -> Self {\n+        Self {\n+            val: ConstValue::Scalar(val),\n+            ty,\n+        }\n     }\n \n     #[inline]\n     pub fn from_bits(\n         tcx: TyCtxt<'_, '_, 'tcx>,\n         bits: u128,\n         ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n-    ) -> &'tcx Self {\n+    ) -> Self {\n         let ty = tcx.lift_to_global(&ty).unwrap();\n         let size = tcx.layout_of(ty).unwrap_or_else(|e| {\n             panic!(\"could not compute layout for {:?}: {:?}\", ty, e)\n         }).size;\n         let shift = 128 - size.bits();\n         let truncated = (bits << shift) >> shift;\n         assert_eq!(truncated, bits, \"from_bits called with untruncated value\");\n-        Self::from_scalar(tcx, Scalar::Bits { bits, size: size.bytes() as u8 }, ty.value)\n+        Self::from_scalar(Scalar::Bits { bits, size: size.bytes() as u8 }, ty.value)\n     }\n \n     #[inline]\n-    pub fn zero_sized(tcx: TyCtxt<'_, '_, 'tcx>, ty: Ty<'tcx>) -> &'tcx Self {\n-        Self::from_scalar(tcx, Scalar::Bits { bits: 0, size: 0 }, ty)\n+    pub fn zero_sized(ty: Ty<'tcx>) -> Self {\n+        Self::from_scalar(Scalar::Bits { bits: 0, size: 0 }, ty)\n     }\n \n     #[inline]\n-    pub fn from_bool(tcx: TyCtxt<'_, '_, 'tcx>, v: bool) -> &'tcx Self {\n+    pub fn from_bool(tcx: TyCtxt<'_, '_, 'tcx>, v: bool) -> Self {\n         Self::from_bits(tcx, v as u128, ParamEnv::empty().and(tcx.types.bool))\n     }\n \n     #[inline]\n-    pub fn from_usize(tcx: TyCtxt<'_, '_, 'tcx>, n: u64) -> &'tcx Self {\n+    pub fn from_usize(tcx: TyCtxt<'_, '_, 'tcx>, n: u64) -> Self {\n         Self::from_bits(tcx, n as u128, ParamEnv::empty().and(tcx.types.usize))\n     }\n \n@@ -2164,5 +2152,4 @@ impl<'tcx> Const<'tcx> {\n     }\n }\n \n-impl<'tcx> serialize::UseSpecializedDecodable for &'tcx Const<'tcx> {}\n impl<'tcx> serialize::UseSpecializedDecodable for &'tcx LazyConst<'tcx> {}"}, {"sha": "e6d6ef1d7a38b35aebb87984e7b6410381eefe14", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=37a0df3e9db1b934dfb698fc1d7cbf506532004f", "patch": "@@ -15,7 +15,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         &mut self,\n         bx: &Bx,\n         constant: &'tcx ty::LazyConst<'tcx>,\n-    ) -> Result<&'tcx ty::Const<'tcx>, ErrorHandled> {\n+    ) -> Result<ty::Const<'tcx>, ErrorHandled> {\n         match *constant {\n             ty::LazyConst::Unevaluated(def_id, ref substs) => {\n                 let tcx = bx.tcx();\n@@ -35,7 +35,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         &mut self,\n         bx: &Bx,\n         constant: &mir::Constant<'tcx>,\n-    ) -> Result<&'tcx ty::Const<'tcx>, ErrorHandled> {\n+    ) -> Result<ty::Const<'tcx>, ErrorHandled> {\n         let c = self.monomorphize(&constant.literal);\n         self.fully_evaluate(bx, c)\n     }\n@@ -46,7 +46,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         bx: &Bx,\n         span: Span,\n         ty: Ty<'tcx>,\n-        constant: Result<&'tcx ty::Const<'tcx>, ErrorHandled>,\n+        constant: Result<ty::Const<'tcx>, ErrorHandled>,\n     ) -> (Bx::Value, Ty<'tcx>) {\n         constant\n             .and_then(|c| {"}, {"sha": "2026e042ef0eb652b8a9992848e2a021822fb538", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=37a0df3e9db1b934dfb698fc1d7cbf506532004f", "patch": "@@ -67,7 +67,7 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandRef<'tcx, V> {\n \n     pub fn from_const<Bx: BuilderMethods<'a, 'tcx, Value = V>>(\n         bx: &mut Bx,\n-        val: &'tcx ty::Const<'tcx>\n+        val: ty::Const<'tcx>\n     ) -> Result<Self, ErrorHandled> {\n         let layout = bx.cx().layout_of(val.ty);\n "}, {"sha": "409b6c038ab69200e57853778e68a0e22df08835", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=37a0df3e9db1b934dfb698fc1d7cbf506532004f", "patch": "@@ -658,12 +658,12 @@ enum TestKind<'tcx> {\n     SwitchInt {\n         switch_ty: Ty<'tcx>,\n         options: Vec<u128>,\n-        indices: FxHashMap<&'tcx ty::Const<'tcx>, usize>,\n+        indices: FxHashMap<ty::Const<'tcx>, usize>,\n     },\n \n     // test for equality\n     Eq {\n-        value: &'tcx ty::Const<'tcx>,\n+        value: ty::Const<'tcx>,\n         ty: Ty<'tcx>,\n     },\n "}, {"sha": "3d960a2dd288abbc4bc1d72d961d4be2f90438b8", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=37a0df3e9db1b934dfb698fc1d7cbf506532004f", "patch": "@@ -101,7 +101,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                      candidate: &Candidate<'pat, 'tcx>,\n                                      switch_ty: Ty<'tcx>,\n                                      options: &mut Vec<u128>,\n-                                     indices: &mut FxHashMap<&'tcx ty::Const<'tcx>, usize>)\n+                                     indices: &mut FxHashMap<ty::Const<'tcx>, usize>)\n                                      -> bool\n     {\n         let match_pair = match candidate.match_pairs.iter().find(|mp| mp.place == *test_place) {"}, {"sha": "b4887dada7aeb4d7deff9513925c2d599ba7414a", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=37a0df3e9db1b934dfb698fc1d7cbf506532004f", "patch": "@@ -27,7 +27,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     pub fn literal_operand(&mut self,\n                            span: Span,\n                            ty: Ty<'tcx>,\n-                           literal: &'tcx ty::Const<'tcx>)\n+                           literal: ty::Const<'tcx>)\n                            -> Operand<'tcx> {\n         let constant = box Constant {\n             span,"}, {"sha": "01177e5e49a0ef1042e70f421ee6f1e4471b2c57", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=37a0df3e9db1b934dfb698fc1d7cbf506532004f", "patch": "@@ -95,7 +95,7 @@ pub fn op_to_const<'tcx>(\n     ecx: &CompileTimeEvalContext<'_, '_, 'tcx>,\n     op: OpTy<'tcx>,\n     may_normalize: bool,\n-) -> EvalResult<'tcx, &'tcx ty::Const<'tcx>> {\n+) -> EvalResult<'tcx, ty::Const<'tcx>> {\n     // We do not normalize just any data.  Only scalar layout and fat pointers.\n     let normalize = may_normalize\n         && match op.layout.abi {\n@@ -134,7 +134,7 @@ pub fn op_to_const<'tcx>(\n         Ok(Immediate::ScalarPair(a, b)) =>\n             ConstValue::ScalarPair(a.not_undef()?, b.not_undef()?),\n     };\n-    Ok(ty::Const::from_const_value(ecx.tcx.tcx, val, op.layout.ty))\n+    Ok(ty::Const { val, ty: op.layout.ty })\n }\n \n pub fn lazy_const_to_op<'tcx>(\n@@ -510,7 +510,7 @@ pub fn const_field<'a, 'tcx>(\n     instance: ty::Instance<'tcx>,\n     variant: Option<VariantIdx>,\n     field: mir::Field,\n-    value: &'tcx ty::Const<'tcx>,\n+    value: ty::Const<'tcx>,\n ) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n     trace!(\"const_field: {:?}, {:?}, {:?}\", instance, field, value);\n     let ecx = mk_eval_cx(tcx, instance, param_env).unwrap();\n@@ -539,7 +539,7 @@ pub fn const_variant_index<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     instance: ty::Instance<'tcx>,\n-    val: &'tcx ty::Const<'tcx>,\n+    val: ty::Const<'tcx>,\n ) -> EvalResult<'tcx, VariantIdx> {\n     trace!(\"const_variant_index: {:?}, {:?}\", instance, val);\n     let ecx = mk_eval_cx(tcx, instance, param_env).unwrap();"}, {"sha": "37d741d2606d52630542cbd26703df1240634eb2", "filename": "src/librustc_mir/hair/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fconstant.rs?ref=37a0df3e9db1b934dfb698fc1d7cbf506532004f", "patch": "@@ -14,7 +14,7 @@ crate fn lit_to_const<'a, 'gcx, 'tcx>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     ty: Ty<'tcx>,\n     neg: bool,\n-) -> Result<&'tcx ty::Const<'tcx>, LitToConstError> {\n+) -> Result<ty::Const<'tcx>, LitToConstError> {\n     use syntax::ast::*;\n \n     let trunc = |n| {\n@@ -64,7 +64,7 @@ crate fn lit_to_const<'a, 'gcx, 'tcx>(\n         LitKind::Bool(b) => ConstValue::Scalar(Scalar::from_bool(b)),\n         LitKind::Char(c) => ConstValue::Scalar(Scalar::from_char(c)),\n     };\n-    Ok(ty::Const::from_const_value(tcx, lit, ty))\n+    Ok(ty::Const { val: lit, ty })\n }\n \n fn parse_float<'tcx>("}, {"sha": "532e6783f2f2bc38dd49aa1f5b7b202732ee9994", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=37a0df3e9db1b934dfb698fc1d7cbf506532004f", "patch": "@@ -871,7 +871,7 @@ fn method_callee<'a, 'gcx, 'tcx>(\n         span,\n         kind: ExprKind::Literal {\n             literal: cx.tcx().intern_lazy_const(ty::LazyConst::Evaluated(\n-                ty::Const::zero_sized(cx.tcx(), ty)\n+                ty::Const::zero_sized(ty)\n             )),\n             user_ty,\n         },\n@@ -933,7 +933,6 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             debug!(\"convert_path_expr: user_ty={:?}\", user_ty);\n             ExprKind::Literal {\n                 literal: cx.tcx.intern_lazy_const(ty::LazyConst::Evaluated(ty::Const::zero_sized(\n-                    cx.tcx,\n                     cx.tables().node_id_to_type(expr.hir_id),\n                 ))),\n                 user_ty,"}, {"sha": "25c5498b5f1e43573d2602a72787a8a2adc51b35", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=37a0df3e9db1b934dfb698fc1d7cbf506532004f", "patch": "@@ -134,7 +134,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         ty: Ty<'tcx>,\n         sp: Span,\n         neg: bool,\n-    ) -> &'tcx ty::Const<'tcx> {\n+    ) -> ty::Const<'tcx> {\n         trace!(\"const_eval_literal: {:#?}, {:?}, {:?}, {:?}\", lit, ty, sp, neg);\n \n         match lit_to_const(lit, self.tcx, ty, neg) {\n@@ -169,14 +169,14 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n                         method_name: &str,\n                         self_ty: Ty<'tcx>,\n                         params: &[Kind<'tcx>])\n-                        -> (Ty<'tcx>, &'tcx ty::Const<'tcx>) {\n+                        -> (Ty<'tcx>, ty::Const<'tcx>) {\n         let method_name = Symbol::intern(method_name);\n         let substs = self.tcx.mk_substs_trait(self_ty, params);\n         for item in self.tcx.associated_items(trait_def_id) {\n             if item.kind == ty::AssociatedKind::Method && item.ident.name == method_name {\n                 let method_ty = self.tcx.type_of(item.def_id);\n                 let method_ty = method_ty.subst(self.tcx, substs);\n-                return (method_ty, ty::Const::zero_sized(self.tcx, method_ty));\n+                return (method_ty, ty::Const::zero_sized(method_ty));\n             }\n         }\n "}, {"sha": "57b0fb1d8be1e0bcd0ee08ed591e7b611193ea00", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=37a0df3e9db1b934dfb698fc1d7cbf506532004f", "patch": "@@ -420,7 +420,7 @@ pub enum Constructor<'tcx> {\n     /// Enum variants.\n     Variant(DefId),\n     /// Literal values.\n-    ConstantValue(&'tcx ty::Const<'tcx>),\n+    ConstantValue(ty::Const<'tcx>),\n     /// Ranges of literal values (`2...5` and `2..5`).\n     ConstantRange(u128, u128, Ty<'tcx>, RangeEnd),\n     /// Array patterns of length n.\n@@ -1787,7 +1787,7 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n                                         &cx.tcx, ptr, layout.size,\n                                     ).ok()?;\n                                     let scalar = scalar.not_undef().ok()?;\n-                                    let value = ty::Const::from_scalar(cx.tcx, scalar, ty);\n+                                    let value = ty::Const::from_scalar(scalar, ty);\n                                     let pattern = Pattern {\n                                         ty,\n                                         span: pat.span,"}, {"sha": "f52aeded19ae797bb6117786b2167543b846b8ef", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=37a0df3e9db1b934dfb698fc1d7cbf506532004f", "patch": "@@ -123,7 +123,7 @@ pub enum PatternKind<'tcx> {\n     },\n \n     Constant {\n-        value: &'tcx ty::Const<'tcx>,\n+        value: ty::Const<'tcx>,\n     },\n \n     Range(PatternRange<'tcx>),\n@@ -147,8 +147,8 @@ pub enum PatternKind<'tcx> {\n \n #[derive(Clone, Copy, Debug, PartialEq)]\n pub struct PatternRange<'tcx> {\n-    pub lo: &'tcx ty::Const<'tcx>,\n-    pub hi: &'tcx ty::Const<'tcx>,\n+    pub lo: ty::Const<'tcx>,\n+    pub hi: ty::Const<'tcx>,\n     pub ty: Ty<'tcx>,\n     pub end: RangeEnd,\n }\n@@ -857,7 +857,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n     fn const_to_pat(\n         &self,\n         instance: ty::Instance<'tcx>,\n-        cv: &'tcx ty::Const<'tcx>,\n+        cv: ty::Const<'tcx>,\n         id: hir::HirId,\n         span: Span,\n     ) -> Pattern<'tcx> {\n@@ -1018,7 +1018,7 @@ macro_rules! CloneImpls {\n }\n \n CloneImpls!{ <'tcx>\n-    Span, Field, Mutability, ast::Name, ast::NodeId, usize, &'tcx ty::Const<'tcx>,\n+    Span, Field, Mutability, ast::Name, ast::NodeId, usize, ty::Const<'tcx>,\n     Region<'tcx>, Ty<'tcx>, BindingMode<'tcx>, &'tcx AdtDef,\n     &'tcx Substs<'tcx>, &'tcx Kind<'tcx>, UserTypeAnnotation<'tcx>,\n     UserTypeProjection<'tcx>, PatternTypeProjection<'tcx>\n@@ -1140,8 +1140,8 @@ impl<'tcx> PatternFoldable<'tcx> for PatternKind<'tcx> {\n \n pub fn compare_const_vals<'a, 'gcx, 'tcx>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    a: &'tcx ty::Const<'tcx>,\n-    b: &'tcx ty::Const<'tcx>,\n+    a: ty::Const<'tcx>,\n+    b: ty::Const<'tcx>,\n     ty: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n ) -> Option<Ordering> {\n     trace!(\"compare_const_vals: {:?}, {:?}\", a, b);"}, {"sha": "eabfd47c9fb9033016e7ad70a19dc2c5189450d9", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=37a0df3e9db1b934dfb698fc1d7cbf506532004f", "patch": "@@ -1252,10 +1252,10 @@ fn collect_lazy_const<'a, 'tcx>(\n \n fn collect_const<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    constant: &ty::Const<'tcx>,\n+    constant: ty::Const<'tcx>,\n     output: &mut Vec<MonoItem<'tcx>>,\n ) {\n-    debug!(\"visiting const {:?}\", *constant);\n+    debug!(\"visiting const {:?}\", constant);\n \n     match constant.val {\n         ConstValue::ScalarPair(Scalar::Ptr(a), Scalar::Ptr(b)) => {"}, {"sha": "8710a09c209cfc701e8f899d9a844e9e14626576", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a0df3e9db1b934dfb698fc1d7cbf506532004f/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=37a0df3e9db1b934dfb698fc1d7cbf506532004f", "patch": "@@ -460,7 +460,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n             ty: func_ty,\n             user_ty: None,\n             literal: tcx.intern_lazy_const(ty::LazyConst::Evaluated(\n-                ty::Const::zero_sized(self.tcx, func_ty),\n+                ty::Const::zero_sized(func_ty),\n             )),\n         });\n \n@@ -760,7 +760,7 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 ty,\n                 user_ty: None,\n                 literal: tcx.intern_lazy_const(ty::LazyConst::Evaluated(\n-                    ty::Const::zero_sized(tcx, ty)\n+                    ty::Const::zero_sized(ty)\n                 )),\n              }),\n              vec![rcvr])"}]}