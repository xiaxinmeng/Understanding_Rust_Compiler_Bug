{"sha": "0c0826c3e272840cf35c13a8a4debd3b5a7ad09c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMDgyNmMzZTI3Mjg0MGNmMzVjMTNhOGE0ZGViZDNiNWE3YWQwOWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-20T00:53:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-20T00:53:13Z"}, "message": "Auto merge of #88708 - Aaron1011:aggregate-usage, r=oli-obk\n\nAdd `ConstraintCategory::Usage` for handling aggregate construction\n\nIn some cases, we emit borrowcheck diagnostics pointing\nat a particular field expression in a struct expression\n(e.g. `MyStruct { field: my_expr }`). However, this\nbehavior currently relies on us choosing the\n`ConstraintCategory::Boring` with the 'correct' span.\nWhen adding additional variants to `ConstraintCategory`,\n(or changing existing usages away from `ConstraintCategory::Boring`),\nthe current behavior can easily get broken, since a non-boring\nconstraint will get chosen over a boring one.\n\nTo make the diagnostic output less fragile, this commit\nadds a `ConstraintCategory::Usage` variant. We use this variant\nfor the temporary assignments created for each field of\nan aggregate we are constructing.\n\nUsing this new variant, we can emit a message mentioning\n\"this usage\", emphasizing the fact that the error message\nis related to the specific use site (in the struct expression).\n\nThis is preparation for additional work on improving NLL error messages\n(see #57374)", "tree": {"sha": "d8aab1d02da660bce6177b11d69525e8f07ba318", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8aab1d02da660bce6177b11d69525e8f07ba318"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c", "html_url": "https://github.com/rust-lang/rust/commit/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91198820d7e697def79177c022b5e98b3d482ddc", "url": "https://api.github.com/repos/rust-lang/rust/commits/91198820d7e697def79177c022b5e98b3d482ddc", "html_url": "https://github.com/rust-lang/rust/commit/91198820d7e697def79177c022b5e98b3d482ddc"}, {"sha": "a41a13f775dfbc73b7c99e92619fd301ffcc4a53", "url": "https://api.github.com/repos/rust-lang/rust/commits/a41a13f775dfbc73b7c99e92619fd301ffcc4a53", "html_url": "https://github.com/rust-lang/rust/commit/a41a13f775dfbc73b7c99e92619fd301ffcc4a53"}], "stats": {"total": 129, "additions": 83, "deletions": 46}, "files": [{"sha": "0761d63c665402a589b483d18391f98beac93e5f", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=0c0826c3e272840cf35c13a8a4debd3b5a7ad09c", "patch": "@@ -40,6 +40,7 @@ impl ConstraintDescription for ConstraintCategory {\n             ConstraintCategory::CopyBound => \"copying this value \",\n             ConstraintCategory::OpaqueType => \"opaque type \",\n             ConstraintCategory::ClosureUpvar(_) => \"closure capture \",\n+            ConstraintCategory::Usage => \"this usage \",\n             ConstraintCategory::Boring\n             | ConstraintCategory::BoringNoLocation\n             | ConstraintCategory::Internal => \"\","}, {"sha": "5ccf380602554bfed8eb5c3b2b75b24f489861a8", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=0c0826c3e272840cf35c13a8a4debd3b5a7ad09c", "patch": "@@ -1388,11 +1388,24 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             ConstraintCategory::Return(ReturnConstraint::Normal)\n                         }\n                     }\n+                    Some(l)\n+                        if matches!(\n+                            body.local_decls[l].local_info,\n+                            Some(box LocalInfo::AggregateTemp)\n+                        ) =>\n+                    {\n+                        ConstraintCategory::Usage\n+                    }\n                     Some(l) if !body.local_decls[l].is_user_variable() => {\n                         ConstraintCategory::Boring\n                     }\n                     _ => ConstraintCategory::Assignment,\n                 };\n+                debug!(\n+                    \"assignment category: {:?} {:?}\",\n+                    category,\n+                    place.as_local().map(|l| &body.local_decls[l])\n+                );\n \n                 let place_ty = place.ty(body, tcx).ty;\n                 let place_ty = self.normalize(place_ty, location);"}, {"sha": "3e9c02ee268cab9a9e197198ad41c43a5ca13611", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=0c0826c3e272840cf35c13a8a4debd3b5a7ad09c", "patch": "@@ -992,6 +992,9 @@ pub enum LocalInfo<'tcx> {\n     StaticRef { def_id: DefId, is_thread_local: bool },\n     /// A temporary created that references the const with the given `DefId`\n     ConstRef { def_id: DefId },\n+    /// A temporary created during the creation of an aggregate\n+    /// (e.g. a temporary for `foo` in `MyStruct { my_field: foo }`)\n+    AggregateTemp,\n }\n \n impl<'tcx> LocalDecl<'tcx> {"}, {"sha": "b003a504691bbce1f8279209f4e447ed7da449cd", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=0c0826c3e272840cf35c13a8a4debd3b5a7ad09c", "patch": "@@ -332,17 +332,15 @@ pub enum ConstraintCategory {\n     CopyBound,\n     SizedBound,\n     Assignment,\n+    /// A constraint that came from a usage of a variable (e.g. in an ADT expression\n+    /// like `Foo { field: my_val }`)\n+    Usage,\n     OpaqueType,\n     ClosureUpvar(hir::HirId),\n \n     /// A \"boring\" constraint (caused by the given location) is one that\n     /// the user probably doesn't want to see described in diagnostics,\n     /// because it is kind of an artifact of the type system setup.\n-    /// Example: `x = Foo { field: y }` technically creates\n-    /// intermediate regions representing the \"type of `Foo { field: y\n-    /// }`\", and data flows from `y` into those variables, but they\n-    /// are not very interesting. The assignment into `x` on the other\n-    /// hand might be.\n     Boring,\n     // Boring and applicable everywhere.\n     BoringNoLocation,"}, {"sha": "b627b0763a286c2822d250178d73b05e12bb733c", "filename": "compiler/rustc_mir_build/src/build/expr/as_operand.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs?ref=0c0826c3e272840cf35c13a8a4debd3b5a7ad09c", "patch": "@@ -20,7 +20,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         expr: &Expr<'tcx>,\n     ) -> BlockAnd<Operand<'tcx>> {\n         let local_scope = self.local_scope();\n-        self.as_operand(block, Some(local_scope), expr)\n+        self.as_operand(block, Some(local_scope), expr, None)\n     }\n \n     /// Returns an operand suitable for use until the end of the current scope expression and\n@@ -85,6 +85,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// temporary `tmp = x`, so that we capture the value of `x` at\n     /// this time.\n     ///\n+    /// If we end up needing to create a temporary, then we will use\n+    /// `local_info` as its `LocalInfo`, unless `as_temporary`\n+    /// has already assigned it a non-`None` `LocalInfo`.\n+    /// Normally, you should use `None` for `local_info`\n+    ///\n     /// The operand is known to be live until the end of `scope`.\n     ///\n     /// Like `as_local_call_operand`, except that the argument will\n@@ -94,15 +99,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         mut block: BasicBlock,\n         scope: Option<region::Scope>,\n         expr: &Expr<'tcx>,\n+        local_info: Option<Box<LocalInfo<'tcx>>>,\n     ) -> BlockAnd<Operand<'tcx>> {\n-        debug!(\"as_operand(block={:?}, expr={:?})\", block, expr);\n+        debug!(\"as_operand(block={:?}, expr={:?} local_info={:?})\", block, expr, local_info);\n         let this = self;\n \n         if let ExprKind::Scope { region_scope, lint_level, value } = expr.kind {\n             let source_info = this.source_info(expr.span);\n             let region_scope = (region_scope, source_info);\n             return this.in_scope(region_scope, lint_level, |this| {\n-                this.as_operand(block, scope, &this.thir[value])\n+                this.as_operand(block, scope, &this.thir[value], local_info)\n             });\n         }\n \n@@ -115,6 +121,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             Category::Place | Category::Rvalue(..) => {\n                 let operand = unpack!(block = this.as_temp(block, scope, expr, Mutability::Mut));\n+                if this.local_decls[operand].local_info.is_none() {\n+                    this.local_decls[operand].local_info = local_info;\n+                }\n                 block.and(Operand::Move(Place::from(operand)))\n             }\n         }\n@@ -167,6 +176,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n         }\n \n-        this.as_operand(block, scope, expr)\n+        this.as_operand(block, scope, expr, None)\n     }\n }"}, {"sha": "4b40faaf1956db04f344bf947ddcca0add3563e4", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=0c0826c3e272840cf35c13a8a4debd3b5a7ad09c", "patch": "@@ -52,16 +52,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             ExprKind::Repeat { value, count } => {\n                 let value_operand =\n-                    unpack!(block = this.as_operand(block, scope, &this.thir[value]));\n+                    unpack!(block = this.as_operand(block, scope, &this.thir[value], None));\n                 block.and(Rvalue::Repeat(value_operand, count))\n             }\n             ExprKind::Binary { op, lhs, rhs } => {\n-                let lhs = unpack!(block = this.as_operand(block, scope, &this.thir[lhs]));\n-                let rhs = unpack!(block = this.as_operand(block, scope, &this.thir[rhs]));\n+                let lhs = unpack!(block = this.as_operand(block, scope, &this.thir[lhs], None));\n+                let rhs = unpack!(block = this.as_operand(block, scope, &this.thir[rhs], None));\n                 this.build_binary_op(block, op, expr_span, expr.ty, lhs, rhs)\n             }\n             ExprKind::Unary { op, arg } => {\n-                let arg = unpack!(block = this.as_operand(block, scope, &this.thir[arg]));\n+                let arg = unpack!(block = this.as_operand(block, scope, &this.thir[arg], None));\n                 // Check for -MIN on signed integers\n                 if this.check_overflow && op == UnOp::Neg && expr.ty.is_signed() {\n                     let bool_ty = this.tcx.types.bool;\n@@ -116,11 +116,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block.and(Rvalue::Use(Operand::Move(Place::from(result))))\n             }\n             ExprKind::Cast { source } => {\n-                let source = unpack!(block = this.as_operand(block, scope, &this.thir[source]));\n+                let source =\n+                    unpack!(block = this.as_operand(block, scope, &this.thir[source], None));\n                 block.and(Rvalue::Cast(CastKind::Misc, source, expr.ty))\n             }\n             ExprKind::Pointer { cast, source } => {\n-                let source = unpack!(block = this.as_operand(block, scope, &this.thir[source]));\n+                let source =\n+                    unpack!(block = this.as_operand(block, scope, &this.thir[source], None));\n                 block.and(Rvalue::Cast(CastKind::Pointer(cast), source, expr.ty))\n             }\n             ExprKind::Array { ref fields } => {\n@@ -155,7 +157,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let fields: Vec<_> = fields\n                     .into_iter()\n                     .copied()\n-                    .map(|f| unpack!(block = this.as_operand(block, scope, &this.thir[f])))\n+                    .map(|f| unpack!(block = this.as_operand(block, scope, &this.thir[f], None)))\n                     .collect();\n \n                 block.and(Rvalue::Aggregate(Box::new(AggregateKind::Array(el_ty)), fields))\n@@ -166,7 +168,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let fields: Vec<_> = fields\n                     .into_iter()\n                     .copied()\n-                    .map(|f| unpack!(block = this.as_operand(block, scope, &this.thir[f])))\n+                    .map(|f| unpack!(block = this.as_operand(block, scope, &this.thir[f], None)))\n                     .collect();\n \n                 block.and(Rvalue::Aggregate(Box::new(AggregateKind::Tuple), fields))\n@@ -242,7 +244,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                             &this.thir[arg],\n                                         )\n                                     ),\n-                                    _ => unpack!(block = this.as_operand(block, scope, upvar)),\n+                                    _ => {\n+                                        unpack!(block = this.as_operand(block, scope, upvar, None))\n+                                    }\n                                 }\n                             }\n                         }\n@@ -304,7 +308,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Category::of(&expr.kind),\n                     Some(Category::Rvalue(RvalueFunc::AsRvalue))\n                 ));\n-                let operand = unpack!(block = this.as_operand(block, scope, expr));\n+                let operand = unpack!(block = this.as_operand(block, scope, expr, None));\n                 block.and(Rvalue::Use(operand))\n             }\n         }"}, {"sha": "1803a18441ce20cffc8fba87ca09fae02193d7b8", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=0c0826c3e272840cf35c13a8a4debd3b5a7ad09c", "patch": "@@ -326,10 +326,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let fields_map: FxHashMap<_, _> = fields\n                     .into_iter()\n                     .map(|f| {\n+                        let local_info = Box::new(LocalInfo::AggregateTemp);\n                         (\n                             f.name,\n                             unpack!(\n-                                block = this.as_operand(block, Some(scope), &this.thir[f.expr])\n+                                block = this.as_operand(\n+                                    block,\n+                                    Some(scope),\n+                                    &this.thir[f.expr],\n+                                    Some(local_info)\n+                                )\n                             ),\n                         )\n                     })\n@@ -508,7 +514,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n             ExprKind::Yield { value } => {\n                 let scope = this.local_scope();\n-                let value = unpack!(block = this.as_operand(block, Some(scope), &this.thir[value]));\n+                let value =\n+                    unpack!(block = this.as_operand(block, Some(scope), &this.thir[value], None));\n                 let resume = this.cfg.start_new_block();\n                 this.cfg.terminate(\n                     block,"}, {"sha": "0ac2a39666966211d33f76bb25d06a289b937848", "filename": "src/test/ui/async-await/issue-76547.nll.stderr", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-76547.nll.stderr?ref=0c0826c3e272840cf35c13a8a4debd3b5a7ad09c", "patch": "@@ -1,20 +1,22 @@\n error: lifetime may not live long enough\n-  --> $DIR/issue-76547.rs:19:14\n+  --> $DIR/issue-76547.rs:20:13\n    |\n LL | async fn fut(bufs: &mut [&mut [u8]]) {\n-   |              ^^^^  -     - let's call the lifetime of this reference `'2`\n-   |              |     |\n-   |              |     let's call the lifetime of this reference `'1`\n-   |              assignment requires that `'1` must outlive `'2`\n+   |                    -     - let's call the lifetime of this reference `'2`\n+   |                    |\n+   |                    let's call the lifetime of this reference `'1`\n+LL |     ListFut(bufs).await\n+   |             ^^^^ this usage requires that `'1` must outlive `'2`\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-76547.rs:33:15\n+  --> $DIR/issue-76547.rs:34:14\n    |\n LL | async fn fut2(bufs: &mut [&mut [u8]]) -> i32 {\n-   |               ^^^^  -     - let's call the lifetime of this reference `'2`\n-   |               |     |\n-   |               |     let's call the lifetime of this reference `'1`\n-   |               assignment requires that `'1` must outlive `'2`\n+   |                     -     - let's call the lifetime of this reference `'2`\n+   |                     |\n+   |                     let's call the lifetime of this reference `'1`\n+LL |     ListFut2(bufs).await\n+   |              ^^^^ this usage requires that `'1` must outlive `'2`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0b8e134c9662e8f8ef7c1a7c2db749ed0e3cc45d", "filename": "src/test/ui/issues/issue-61882-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/src%2Ftest%2Fui%2Fissues%2Fissue-61882-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/src%2Ftest%2Fui%2Fissues%2Fissue-61882-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61882-2.stderr?ref=0c0826c3e272840cf35c13a8a4debd3b5a7ad09c", "patch": "@@ -5,7 +5,7 @@ LL |         Self(&x);\n    |              ^^\n    |              |\n    |              borrowed value does not live long enough\n-   |              requires that `x` is borrowed for `'static`\n+   |              this usage requires that `x` is borrowed for `'static`\n LL |\n LL |     }\n    |     - `x` dropped here while still borrowed"}, {"sha": "e6e95ee613647a1cff34d4d4479a73ab32e75162", "filename": "src/test/ui/nll/issue-46036.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/src%2Ftest%2Fui%2Fnll%2Fissue-46036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/src%2Ftest%2Fui%2Fnll%2Fissue-46036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-46036.stderr?ref=0c0826c3e272840cf35c13a8a4debd3b5a7ad09c", "patch": "@@ -5,7 +5,7 @@ LL |     let foo = Foo { x: &a };\n    |                        ^^\n    |                        |\n    |                        borrowed value does not live long enough\n-   |                        requires that `a` is borrowed for `'static`\n+   |                        this usage requires that `a` is borrowed for `'static`\n LL |     loop { }\n LL | }\n    | - `a` dropped here while still borrowed"}, {"sha": "253e382511045c4163c152317501755de690b2bd", "filename": "src/test/ui/nll/user-annotations/adt-brace-enums.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-enums.stderr?ref=0c0826c3e272840cf35c13a8a4debd3b5a7ad09c", "patch": "@@ -5,7 +5,7 @@ LL |     SomeEnum::SomeVariant::<&'static u32> { t: &c };\n    |                                                ^^\n    |                                                |\n    |                                                borrowed value does not live long enough\n-   |                                                requires that `c` is borrowed for `'static`\n+   |                                                this usage requires that `c` is borrowed for `'static`\n LL | }\n    | - `c` dropped here while still borrowed\n \n@@ -19,7 +19,7 @@ LL |     SomeEnum::SomeVariant::<&'a u32> { t: &c };\n    |                                           ^^\n    |                                           |\n    |                                           borrowed value does not live long enough\n-   |                                           requires that `c` is borrowed for `'a`\n+   |                                           this usage requires that `c` is borrowed for `'a`\n LL | }\n    | - `c` dropped here while still borrowed\n \n@@ -33,7 +33,7 @@ LL |         SomeEnum::SomeVariant::<&'a u32> { t: &c };\n    |                                               ^^\n    |                                               |\n    |                                               borrowed value does not live long enough\n-   |                                               requires that `c` is borrowed for `'a`\n+   |                                               this usage requires that `c` is borrowed for `'a`\n LL |     };\n    |     - `c` dropped here while still borrowed\n "}, {"sha": "8b9d1705df6ad816de949a8b3436d1c93e4bc8a3", "filename": "src/test/ui/nll/user-annotations/adt-brace-structs.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-brace-structs.stderr?ref=0c0826c3e272840cf35c13a8a4debd3b5a7ad09c", "patch": "@@ -5,7 +5,7 @@ LL |     SomeStruct::<&'static u32> { t: &c };\n    |                                     ^^\n    |                                     |\n    |                                     borrowed value does not live long enough\n-   |                                     requires that `c` is borrowed for `'static`\n+   |                                     this usage requires that `c` is borrowed for `'static`\n LL | }\n    | - `c` dropped here while still borrowed\n \n@@ -19,7 +19,7 @@ LL |     SomeStruct::<&'a u32> { t: &c };\n    |                                ^^\n    |                                |\n    |                                borrowed value does not live long enough\n-   |                                requires that `c` is borrowed for `'a`\n+   |                                this usage requires that `c` is borrowed for `'a`\n LL | }\n    | - `c` dropped here while still borrowed\n \n@@ -33,7 +33,7 @@ LL |         SomeStruct::<&'a u32> { t: &c };\n    |                                    ^^\n    |                                    |\n    |                                    borrowed value does not live long enough\n-   |                                    requires that `c` is borrowed for `'a`\n+   |                                    this usage requires that `c` is borrowed for `'a`\n LL |     };\n    |     - `c` dropped here while still borrowed\n "}, {"sha": "2fa7042631d21dd924429e47978eebc11b9c1196", "filename": "src/test/ui/nll/user-annotations/adt-tuple-enums.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-enums.stderr?ref=0c0826c3e272840cf35c13a8a4debd3b5a7ad09c", "patch": "@@ -5,7 +5,7 @@ LL |     SomeEnum::SomeVariant::<&'static u32>(&c);\n    |                                           ^^\n    |                                           |\n    |                                           borrowed value does not live long enough\n-   |                                           requires that `c` is borrowed for `'static`\n+   |                                           this usage requires that `c` is borrowed for `'static`\n LL | }\n    | - `c` dropped here while still borrowed\n \n@@ -19,7 +19,7 @@ LL |     SomeEnum::SomeVariant::<&'a u32>(&c);\n    |                                      ^^\n    |                                      |\n    |                                      borrowed value does not live long enough\n-   |                                      requires that `c` is borrowed for `'a`\n+   |                                      this usage requires that `c` is borrowed for `'a`\n LL | }\n    | - `c` dropped here while still borrowed\n \n@@ -33,7 +33,7 @@ LL |         SomeEnum::SomeVariant::<&'a u32>(&c);\n    |                                          ^^\n    |                                          |\n    |                                          borrowed value does not live long enough\n-   |                                          requires that `c` is borrowed for `'a`\n+   |                                          this usage requires that `c` is borrowed for `'a`\n LL |     };\n    |     - `c` dropped here while still borrowed\n "}, {"sha": "76b5252258c7bc3260014944e20b50387cb4291f", "filename": "src/test/ui/nll/user-annotations/adt-tuple-struct.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fadt-tuple-struct.stderr?ref=0c0826c3e272840cf35c13a8a4debd3b5a7ad09c", "patch": "@@ -5,7 +5,7 @@ LL |     SomeStruct::<&'static u32>(&c);\n    |                                ^^\n    |                                |\n    |                                borrowed value does not live long enough\n-   |                                requires that `c` is borrowed for `'static`\n+   |                                this usage requires that `c` is borrowed for `'static`\n LL | }\n    | - `c` dropped here while still borrowed\n \n@@ -19,7 +19,7 @@ LL |     SomeStruct::<&'a u32>(&c);\n    |                           ^^\n    |                           |\n    |                           borrowed value does not live long enough\n-   |                           requires that `c` is borrowed for `'a`\n+   |                           this usage requires that `c` is borrowed for `'a`\n LL | }\n    | - `c` dropped here while still borrowed\n \n@@ -33,7 +33,7 @@ LL |         SomeStruct::<&'a u32>(&c);\n    |                               ^^\n    |                               |\n    |                               borrowed value does not live long enough\n-   |                               requires that `c` is borrowed for `'a`\n+   |                               this usage requires that `c` is borrowed for `'a`\n LL |     };\n    |     - `c` dropped here while still borrowed\n "}, {"sha": "8499b00f6f5567b81d76b1050b468418414b3624", "filename": "src/test/ui/nll/where_clauses_in_structs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c0826c3e272840cf35c13a8a4debd3b5a7ad09c/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_structs.stderr?ref=0c0826c3e272840cf35c13a8a4debd3b5a7ad09c", "patch": "@@ -6,7 +6,7 @@ LL | fn bar<'a, 'b>(x: Cell<&'a u32>, y: Cell<&'b u32>) {\n    |        |\n    |        lifetime `'a` defined here\n LL |     Foo { x, y };\n-   |           ^ requires that `'a` must outlive `'b`\n+   |           ^ this usage requires that `'a` must outlive `'b`\n    |\n    = help: consider adding the following bound: `'a: 'b`\n "}]}