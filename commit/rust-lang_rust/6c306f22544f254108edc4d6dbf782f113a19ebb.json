{"sha": "6c306f22544f254108edc4d6dbf782f113a19ebb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMzA2ZjIyNTQ0ZjI1NDEwOGVkYzRkNmRiZjc4MmYxMTNhMTllYmI=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-09-19T09:35:35Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-09-19T09:35:38Z"}, "message": "Rename Value variants and simplify ByteStr consts.\n\nThe ByteStr change will make one less allocation for every byte string literal.", "tree": {"sha": "c797de2af238f72f5edb12f7a2cb2d66e671b783", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c797de2af238f72f5edb12f7a2cb2d66e671b783"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c306f22544f254108edc4d6dbf782f113a19ebb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c306f22544f254108edc4d6dbf782f113a19ebb", "html_url": "https://github.com/rust-lang/rust/commit/6c306f22544f254108edc4d6dbf782f113a19ebb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c306f22544f254108edc4d6dbf782f113a19ebb/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20ced4a720d30568ea1eff0d7ce43941e388df13", "url": "https://api.github.com/repos/rust-lang/rust/commits/20ced4a720d30568ea1eff0d7ce43941e388df13", "html_url": "https://github.com/rust-lang/rust/commit/20ced4a720d30568ea1eff0d7ce43941e388df13"}], "stats": {"total": 70, "additions": 38, "deletions": 32}, "files": [{"sha": "de05140377b341130731926161d96b013519d8b4", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 38, "deletions": 32, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/6c306f22544f254108edc4d6dbf782f113a19ebb/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c306f22544f254108edc4d6dbf782f113a19ebb/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=6c306f22544f254108edc4d6dbf782f113a19ebb", "patch": "@@ -99,10 +99,14 @@ pub struct Frame<'a, 'tcx: 'a> {\n     pub stmt: usize,\n }\n \n+/// A `Value` represents a single self-contained Rust value.\n+///\n+/// A `Value` can either refer to a block of memory inside an allocation (`ByRef`) or to a primitve\n+/// value held directly, outside of any allocation (`ByVal`).\n #[derive(Clone, Copy, Debug, PartialEq)]\n enum Value {\n-    Ptr(Pointer),\n-    Prim(PrimVal),\n+    ByRef(Pointer),\n+    ByVal(PrimVal),\n }\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n@@ -193,24 +197,24 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         use rustc_const_math::{ConstInt, ConstIsize, ConstUsize, ConstFloat};\n \n         let primval = match *const_val {\n-            Integral(ConstInt::I8(i)) => Value::Prim(PrimVal::I8(i)),\n-            Integral(ConstInt::U8(i)) => Value::Prim(PrimVal::U8(i)),\n+            Integral(ConstInt::I8(i)) => Value::ByVal(PrimVal::I8(i)),\n+            Integral(ConstInt::U8(i)) => Value::ByVal(PrimVal::U8(i)),\n             Integral(ConstInt::Isize(ConstIsize::Is16(i))) |\n-            Integral(ConstInt::I16(i)) => Value::Prim(PrimVal::I16(i)),\n+            Integral(ConstInt::I16(i)) => Value::ByVal(PrimVal::I16(i)),\n             Integral(ConstInt::Usize(ConstUsize::Us16(i))) |\n-            Integral(ConstInt::U16(i)) => Value::Prim(PrimVal::U16(i)),\n+            Integral(ConstInt::U16(i)) => Value::ByVal(PrimVal::U16(i)),\n             Integral(ConstInt::Isize(ConstIsize::Is32(i))) |\n-            Integral(ConstInt::I32(i)) => Value::Prim(PrimVal::I32(i)),\n+            Integral(ConstInt::I32(i)) => Value::ByVal(PrimVal::I32(i)),\n             Integral(ConstInt::Usize(ConstUsize::Us32(i))) |\n-            Integral(ConstInt::U32(i)) => Value::Prim(PrimVal::U32(i)),\n+            Integral(ConstInt::U32(i)) => Value::ByVal(PrimVal::U32(i)),\n             Integral(ConstInt::Isize(ConstIsize::Is64(i))) |\n-            Integral(ConstInt::I64(i)) => Value::Prim(PrimVal::I64(i)),\n+            Integral(ConstInt::I64(i)) => Value::ByVal(PrimVal::I64(i)),\n             Integral(ConstInt::Usize(ConstUsize::Us64(i))) |\n-            Integral(ConstInt::U64(i)) => Value::Prim(PrimVal::U64(i)),\n-            Float(ConstFloat::F32(f)) => Value::Prim(PrimVal::F32(f)),\n-            Float(ConstFloat::F64(f)) => Value::Prim(PrimVal::F64(f)),\n-            Bool(b) => Value::Prim(PrimVal::Bool(b)),\n-            Char(c) => Value::Prim(PrimVal::Char(c)),\n+            Integral(ConstInt::U64(i)) => Value::ByVal(PrimVal::U64(i)),\n+            Float(ConstFloat::F32(f)) => Value::ByVal(PrimVal::F32(f)),\n+            Float(ConstFloat::F64(f)) => Value::ByVal(PrimVal::F64(f)),\n+            Bool(b) => Value::ByVal(PrimVal::Bool(b)),\n+            Char(c) => Value::ByVal(PrimVal::Char(c)),\n \n             Str(ref s) => {\n                 let psize = self.memory.pointer_size();\n@@ -220,16 +224,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.memory.write_bytes(static_ptr, s.as_bytes())?;\n                 self.memory.write_ptr(ptr, static_ptr)?;\n                 self.memory.write_usize(extra, s.len() as u64)?;\n-                Value::Ptr(ptr)\n+                Value::ByRef(ptr)\n             }\n \n             ByteStr(ref bs) => {\n-                let psize = self.memory.pointer_size();\n-                let static_ptr = self.memory.allocate(bs.len(), 1)?;\n-                let ptr = self.memory.allocate(psize, psize)?;\n-                self.memory.write_bytes(static_ptr, bs)?;\n-                self.memory.write_ptr(ptr, static_ptr)?;\n-                Value::Ptr(ptr)\n+                let ptr = self.memory.allocate(bs.len(), 1)?;\n+                self.memory.write_bytes(ptr, bs)?;\n+                Value::ByVal(PrimVal::AbstractPtr(ptr))\n             }\n \n             Struct(_)    => unimplemented!(),\n@@ -754,8 +755,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     fn eval_operand_to_ptr(&mut self, op: &mir::Operand<'tcx>) -> EvalResult<'tcx, Pointer> {\n         let value = self.eval_operand(op)?;\n         match value {\n-            Value::Ptr(ptr) => Ok(ptr),\n-            Value::Prim(primval) => {\n+            Value::ByRef(ptr) => Ok(ptr),\n+            Value::ByVal(primval) => {\n                 let ty = self.operand_ty(op);\n                 let size = self.type_size(ty);\n                 let align = self.type_align(ty);\n@@ -775,7 +776,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     fn eval_operand(&mut self, op: &mir::Operand<'tcx>) -> EvalResult<'tcx, Value> {\n         use rustc::mir::repr::Operand::*;\n         match *op {\n-            Consume(ref lvalue) => Ok(Value::Ptr(self.eval_lvalue(lvalue)?.to_ptr())),\n+            Consume(ref lvalue) => Ok(Value::ByRef(self.eval_lvalue(lvalue)?.to_ptr())),\n \n             Constant(mir::Constant { ref literal, ty, .. }) => {\n                 use rustc::mir::repr::Literal;\n@@ -785,7 +786,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     Literal::Item { def_id, substs } => {\n                         if let ty::TyFnDef(..) = ty.sty {\n                             // function items are zero sized\n-                            Value::Ptr(self.memory.allocate(0, 0)?)\n+                            Value::ByRef(self.memory.allocate(0, 0)?)\n                         } else {\n                             let cid = ConstantId {\n                                 def_id: def_id,\n@@ -794,7 +795,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                             };\n                             let static_ptr = *self.statics.get(&cid)\n                                 .expect(\"static should have been cached (rvalue)\");\n-                            Value::Ptr(static_ptr)\n+                            Value::ByRef(static_ptr)\n                         }\n                     }\n \n@@ -806,7 +807,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         };\n                         let static_ptr = *self.statics.get(&cid)\n                             .expect(\"a promoted constant hasn't been precomputed\");\n-                        Value::Ptr(static_ptr)\n+                        Value::ByRef(static_ptr)\n                     }\n                 };\n \n@@ -942,17 +943,22 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n     fn value_to_primval(&mut self, value: Value, ty: Ty<'tcx>) -> EvalResult<'tcx, PrimVal> {\n         match value {\n-            Value::Ptr(ptr) => self.read_primval(ptr, ty),\n+            Value::ByRef(ptr) => self.read_primval(ptr, ty),\n \n             // TODO(solson): Sanity-check the primval type against the input type.\n-            Value::Prim(primval) => Ok(primval),\n+            Value::ByVal(primval) => Ok(primval),\n         }\n     }\n \n-    fn write_value(&mut self, value: Value, dest: Pointer, dest_ty: Ty<'tcx>) -> EvalResult<'tcx, ()> {\n+    fn write_value(\n+        &mut self,\n+        value: Value,\n+        dest: Pointer,\n+        dest_ty: Ty<'tcx>\n+    ) -> EvalResult<'tcx, ()> {\n         match value {\n-            Value::Ptr(ptr) => self.move_(ptr, dest, dest_ty),\n-            Value::Prim(primval) => self.memory.write_primval(dest, primval),\n+            Value::ByRef(ptr) => self.move_(ptr, dest, dest_ty),\n+            Value::ByVal(primval) => self.memory.write_primval(dest, primval),\n         }\n     }\n "}]}