{"sha": "ee1b33c7acd250c4b06b09096f0bef9dfd44ba9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMWIzM2M3YWNkMjUwYzRiMDZiMDkwOTZmMGJlZjlkZmQ0NGJhOWQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-27T11:13:32Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-03-27T11:22:17Z"}, "message": "Add #[inline] to io::Error methods.", "tree": {"sha": "52a82285709391beaad83762e4b3285b0cc92e34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52a82285709391beaad83762e4b3285b0cc92e34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee1b33c7acd250c4b06b09096f0bef9dfd44ba9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee1b33c7acd250c4b06b09096f0bef9dfd44ba9d", "html_url": "https://github.com/rust-lang/rust/commit/ee1b33c7acd250c4b06b09096f0bef9dfd44ba9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee1b33c7acd250c4b06b09096f0bef9dfd44ba9d/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feaac19f1710ebcfecc783d51f52a9b0d8e998f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/feaac19f1710ebcfecc783d51f52a9b0d8e998f5", "html_url": "https://github.com/rust-lang/rust/commit/feaac19f1710ebcfecc783d51f52a9b0d8e998f5"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "97c92aa35069642012d2bcd2350985d4ad0cf553", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee1b33c7acd250c4b06b09096f0bef9dfd44ba9d/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee1b33c7acd250c4b06b09096f0bef9dfd44ba9d/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=ee1b33c7acd250c4b06b09096f0bef9dfd44ba9d", "patch": "@@ -269,6 +269,7 @@ impl Error {\n     /// This function should maybe change to\n     /// `new_const<const MSG: &'static str>(kind: ErrorKind)`\n     /// in the future, when const generics allow that.\n+    #[inline]\n     pub(crate) const fn new_const(kind: ErrorKind, message: &'static &'static str) -> Error {\n         Self { repr: Repr::SimpleMessage(kind, message) }\n     }\n@@ -287,6 +288,7 @@ impl Error {\n     /// println!(\"last OS error: {:?}\", Error::last_os_error());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn last_os_error() -> Error {\n         Error::from_raw_os_error(sys::os::errno() as i32)\n     }\n@@ -317,6 +319,7 @@ impl Error {\n     /// # }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn from_raw_os_error(code: i32) -> Error {\n         Error { repr: Repr::Os(code) }\n     }\n@@ -351,6 +354,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn raw_os_error(&self) -> Option<i32> {\n         match self.repr {\n             Repr::Os(i) => Some(i),\n@@ -388,6 +392,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n+    #[inline]\n     pub fn get_ref(&self) -> Option<&(dyn error::Error + Send + Sync + 'static)> {\n         match self.repr {\n             Repr::Os(..) => None,\n@@ -460,6 +465,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n+    #[inline]\n     pub fn get_mut(&mut self) -> Option<&mut (dyn error::Error + Send + Sync + 'static)> {\n         match self.repr {\n             Repr::Os(..) => None,\n@@ -497,6 +503,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"io_error_inner\", since = \"1.3.0\")]\n+    #[inline]\n     pub fn into_inner(self) -> Option<Box<dyn error::Error + Send + Sync>> {\n         match self.repr {\n             Repr::Os(..) => None,\n@@ -525,6 +532,7 @@ impl Error {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn kind(&self) -> ErrorKind {\n         match self.repr {\n             Repr::Os(code) => sys::decode_error_kind(code),"}]}