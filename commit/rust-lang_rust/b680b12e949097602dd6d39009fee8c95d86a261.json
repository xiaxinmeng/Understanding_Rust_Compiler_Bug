{"sha": "b680b12e949097602dd6d39009fee8c95d86a261", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ODBiMTJlOTQ5MDk3NjAyZGQ2ZDM5MDA5ZmVlOGM5NWQ4NmEyNjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-07-16T08:55:48Z"}, "committer": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-03-01T15:04:26Z"}, "message": "kill supporting code from type-variable defaults\n\nThis was all unused anyway.", "tree": {"sha": "46593a912516f5280aa78e26b34e7f9763c18eee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46593a912516f5280aa78e26b34e7f9763c18eee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b680b12e949097602dd6d39009fee8c95d86a261", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b680b12e949097602dd6d39009fee8c95d86a261", "html_url": "https://github.com/rust-lang/rust/commit/b680b12e949097602dd6d39009fee8c95d86a261", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b680b12e949097602dd6d39009fee8c95d86a261/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "047a8d016111c5a12beba2202c61df5b897eea45", "url": "https://api.github.com/repos/rust-lang/rust/commits/047a8d016111c5a12beba2202c61df5b897eea45", "html_url": "https://github.com/rust-lang/rust/commit/047a8d016111c5a12beba2202c61df5b897eea45"}], "stats": {"total": 169, "additions": 18, "deletions": 151}, "files": [{"sha": "bd175c510fba3ba8d7b81c50708eed5259e6cdf5", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b680b12e949097602dd6d39009fee8c95d86a261/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680b12e949097602dd6d39009fee8c95d86a261/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=b680b12e949097602dd6d39009fee8c95d86a261", "patch": "@@ -424,7 +424,7 @@ impl<'cx, 'gcx, 'tcx> TypeRelation<'cx, 'gcx, 'tcx> for Generalizer<'cx, 'gcx, '\n                             }\n \n                             let origin = variables.origin(vid);\n-                            let new_var_id = variables.new_var(false, origin, None);\n+                            let new_var_id = variables.new_var(false, origin);\n                             let u = self.tcx().mk_var(new_var_id);\n                             debug!(\"generalize: replacing original vid={:?} with new={:?}\",\n                                    vid, u);"}, {"sha": "4292845792560a7780599eeae930f7d84005047c", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 41, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b680b12e949097602dd6d39009fee8c95d86a261/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680b12e949097602dd6d39009fee8c95d86a261/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=b680b12e949097602dd6d39009fee8c95d86a261", "patch": "@@ -695,22 +695,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// Returns a type variable's default fallback if any exists. A default\n-    /// must be attached to the variable when created, if it is created\n-    /// without a default, this will return None.\n-    ///\n-    /// This code does not apply to integral or floating point variables,\n-    /// only to use declared defaults.\n-    ///\n-    /// See `new_ty_var_with_default` to create a type variable with a default.\n-    /// See `type_variable::Default` for details about what a default entails.\n-    pub fn default(&self, ty: Ty<'tcx>) -> Option<type_variable::Default<'tcx>> {\n-        match ty.sty {\n-            ty::TyInfer(ty::TyVar(vid)) => self.type_variables.borrow().default(vid),\n-            _ => None\n-        }\n-    }\n-\n     pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {\n         let mut variables = Vec::new();\n \n@@ -1029,7 +1013,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn next_ty_var_id(&self, diverging: bool, origin: TypeVariableOrigin) -> TyVid {\n         self.type_variables\n             .borrow_mut()\n-            .new_var(diverging, origin, None)\n+            .new_var(diverging, origin)\n     }\n \n     pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {\n@@ -1098,8 +1082,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         let ty_var_id = self.type_variables\n                             .borrow_mut()\n                             .new_var(false,\n-                                     TypeVariableOrigin::TypeParameterDefinition(span, def.name),\n-                                     None);\n+                                     TypeVariableOrigin::TypeParameterDefinition(span, def.name));\n \n         self.tcx.mk_var(ty_var_id)\n     }\n@@ -1389,28 +1372,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.report_and_explain_type_error(trace, &err)\n     }\n \n-    pub fn report_conflicting_default_types(&self,\n-                                            span: Span,\n-                                            body_id: ast::NodeId,\n-                                            expected: type_variable::Default<'tcx>,\n-                                            actual: type_variable::Default<'tcx>) {\n-        let trace = TypeTrace {\n-            cause: ObligationCause::misc(span, body_id),\n-            values: Types(ExpectedFound {\n-                expected: expected.ty,\n-                found: actual.ty\n-            })\n-        };\n-\n-        self.report_and_explain_type_error(\n-            trace,\n-            &TypeError::TyParamDefaultMismatch(ExpectedFound {\n-                expected,\n-                found: actual\n-            }))\n-            .emit();\n-    }\n-\n     pub fn replace_late_bound_regions_with_fresh_var<T>(\n         &self,\n         span: Span,"}, {"sha": "e07cc92ec215845a2364b4a5f228d02f339351d5", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 13, "deletions": 37, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b680b12e949097602dd6d39009fee8c95d86a261/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680b12e949097602dd6d39009fee8c95d86a261/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=b680b12e949097602dd6d39009fee8c95d86a261", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use self::TypeVariableValue::*;\n-use hir::def_id::{DefId};\n use syntax::ast;\n use syntax_pos::Span;\n use ty::{self, Ty};\n@@ -82,20 +81,7 @@ enum TypeVariableValue<'tcx> {\n     Known {\n         value: Ty<'tcx>\n     },\n-    Bounded {\n-        default: Option<Default<'tcx>>\n-    }\n-}\n-\n-// We will use this to store the required information to recapitulate what happened when\n-// an error occurs.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-pub struct Default<'tcx> {\n-    pub ty: Ty<'tcx>,\n-    /// The span where the default was incurred\n-    pub origin_span: Span,\n-    /// The definition that the default originates from\n-    pub def_id: DefId\n+    Unknown,\n }\n \n pub struct Snapshot {\n@@ -104,9 +90,8 @@ pub struct Snapshot {\n     sub_snapshot: ut::Snapshot<ty::TyVid>,\n }\n \n-struct Instantiate<'tcx> {\n+struct Instantiate {\n     vid: ty::TyVid,\n-    default: Option<Default<'tcx>>,\n }\n \n struct Delegate<'tcx>(PhantomData<&'tcx ()>);\n@@ -120,13 +105,6 @@ impl<'tcx> TypeVariableTable<'tcx> {\n         }\n     }\n \n-    pub fn default(&self, vid: ty::TyVid) -> Option<Default<'tcx>> {\n-        match &self.values.get(vid.index as usize).value {\n-            &Known { .. } => None,\n-            &Bounded { default, .. } => default,\n-        }\n-    }\n-\n     pub fn var_diverges<'a>(&'a self, vid: ty::TyVid) -> bool {\n         self.values.get(vid.index as usize).diverging\n     }\n@@ -167,8 +145,8 @@ impl<'tcx> TypeVariableTable<'tcx> {\n         };\n \n         match old_value {\n-            TypeVariableValue::Bounded { default } => {\n-                self.values.record(Instantiate { vid: vid, default: default });\n+            TypeVariableValue::Unknown => {\n+                self.values.record(Instantiate { vid: vid });\n             }\n             TypeVariableValue::Known { value: old_ty } => {\n                 bug!(\"instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}\",\n@@ -179,13 +157,13 @@ impl<'tcx> TypeVariableTable<'tcx> {\n \n     pub fn new_var(&mut self,\n                    diverging: bool,\n-                   origin: TypeVariableOrigin,\n-                   default: Option<Default<'tcx>>,) -> ty::TyVid {\n+                   origin: TypeVariableOrigin)\n+                   -> ty::TyVid {\n         debug!(\"new_var(diverging={:?}, origin={:?})\", diverging, origin);\n         self.eq_relations.new_key(());\n         self.sub_relations.new_key(());\n         let index = self.values.push(TypeVariableData {\n-            value: Bounded { default },\n+            value: Unknown,\n             origin,\n             diverging,\n         });\n@@ -237,7 +215,7 @@ impl<'tcx> TypeVariableTable<'tcx> {\n     pub fn probe_root(&mut self, vid: ty::TyVid) -> Option<Ty<'tcx>> {\n         debug_assert!(self.root_var(vid) == vid);\n         match self.values.get(vid.index as usize).value {\n-            Bounded { .. } => None,\n+            Unknown => None,\n             Known { value } => Some(value)\n         }\n     }\n@@ -338,7 +316,7 @@ impl<'tcx> TypeVariableTable<'tcx> {\n                         // quick check to see if this variable was\n                         // created since the snapshot started or not.\n                         let escaping_type = match self.values.get(vid.index as usize).value {\n-                            Bounded { .. } => bug!(),\n+                            Unknown => bug!(),\n                             Known { value } => value,\n                         };\n                         escaping_types.push(escaping_type);\n@@ -369,12 +347,10 @@ impl<'tcx> TypeVariableTable<'tcx> {\n \n impl<'tcx> sv::SnapshotVecDelegate for Delegate<'tcx> {\n     type Value = TypeVariableData<'tcx>;\n-    type Undo = Instantiate<'tcx>;\n+    type Undo = Instantiate;\n \n-    fn reverse(values: &mut Vec<TypeVariableData<'tcx>>, action: Instantiate<'tcx>) {\n-        let Instantiate { vid, default } = action;\n-        values[vid.index as usize].value = Bounded {\n-            default,\n-        };\n+    fn reverse(values: &mut Vec<TypeVariableData<'tcx>>, action: Instantiate) {\n+        let Instantiate { vid } = action;\n+        values[vid.index as usize].value = Unknown;\n     }\n }"}, {"sha": "be89aeebdea756445c2bfb4f296e9e9d206d55ac", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 44, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b680b12e949097602dd6d39009fee8c95d86a261/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680b12e949097602dd6d39009fee8c95d86a261/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=b680b12e949097602dd6d39009fee8c95d86a261", "patch": "@@ -9,9 +9,8 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n-use infer::type_variable;\n use middle::const_val::ConstVal;\n-use ty::{self, BoundRegion, DefIdTree, Region, Ty, TyCtxt};\n+use ty::{self, BoundRegion, Region, Ty, TyCtxt};\n \n use std::fmt;\n use syntax::abi;\n@@ -56,7 +55,6 @@ pub enum TypeError<'tcx> {\n     CyclicTy(Ty<'tcx>),\n     ProjectionMismatched(ExpectedFound<DefId>),\n     ProjectionBoundsLength(ExpectedFound<usize>),\n-    TyParamDefaultMismatch(ExpectedFound<type_variable::Default<'tcx>>),\n     ExistentialMismatch(ExpectedFound<&'tcx ty::Slice<ty::ExistentialPredicate<'tcx>>>),\n \n     OldStyleLUB(Box<TypeError<'tcx>>),\n@@ -167,11 +165,6 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                        values.expected,\n                        values.found)\n             },\n-            TyParamDefaultMismatch(ref values) => {\n-                write!(f, \"conflicting type parameter defaults `{}` and `{}`\",\n-                       values.expected.ty,\n-                       values.found.ty)\n-            }\n             ExistentialMismatch(ref values) => {\n                 report_maybe_different(f, format!(\"trait `{}`\", values.expected),\n                                        format!(\"trait `{}`\", values.found))\n@@ -265,42 +258,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     db.help(\"consider boxing your closure and/or using it as a trait object\");\n                 }\n             },\n-            TyParamDefaultMismatch(values) => {\n-                let expected = values.expected;\n-                let found = values.found;\n-                db.span_note(sp, &format!(\"conflicting type parameter defaults `{}` and `{}`\",\n-                                          expected.ty,\n-                                          found.ty));\n-\n-                match self.hir.span_if_local(expected.def_id) {\n-                    Some(span) => {\n-                        db.span_note(span, \"a default was defined here...\");\n-                    }\n-                    None => {\n-                        let item_def_id = self.parent(expected.def_id).unwrap();\n-                        db.note(&format!(\"a default is defined on `{}`\",\n-                                         self.item_path_str(item_def_id)));\n-                    }\n-                }\n-\n-                db.span_note(\n-                    expected.origin_span,\n-                    \"...that was applied to an unconstrained type variable here\");\n-\n-                match self.hir.span_if_local(found.def_id) {\n-                    Some(span) => {\n-                        db.span_note(span, \"a second default was defined here...\");\n-                    }\n-                    None => {\n-                        let item_def_id = self.parent(found.def_id).unwrap();\n-                        db.note(&format!(\"a second default is defined on `{}`\",\n-                                         self.item_path_str(item_def_id)));\n-                    }\n-                }\n-\n-                db.span_note(found.origin_span,\n-                             \"...that also applies to the same type variable here\");\n-            }\n             OldStyleLUB(err) => {\n                 db.note(\"this was previously accepted by the compiler but has been phased out\");\n                 db.note(\"for more information, see https://github.com/rust-lang/rust/issues/45852\");"}, {"sha": "6147b52844fe4d1bcb31de5ec9780fa6e1a40fd3", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b680b12e949097602dd6d39009fee8c95d86a261/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b680b12e949097602dd6d39009fee8c95d86a261/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=b680b12e949097602dd6d39009fee8c95d86a261", "patch": "@@ -13,7 +13,6 @@\n //! hand, though we've recently added some macros (e.g.,\n //! `BraceStructLiftImpl!`) to help with the tedium.\n \n-use infer::type_variable;\n use middle::const_val::{self, ConstVal, ConstAggregate, ConstEvalErr};\n use ty::{self, Lift, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n@@ -548,13 +547,6 @@ impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::error::ExpectedFound<T> {\n     }\n }\n \n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for type_variable::Default<'a> {\n-        type Lifted = type_variable::Default<'tcx>;\n-        ty, origin_span, def_id\n-    }\n-}\n-\n impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n     type Lifted = ty::error::TypeError<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n@@ -586,11 +578,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             ProjectionBoundsLength(x) => ProjectionBoundsLength(x),\n \n             Sorts(ref x) => return tcx.lift(x).map(Sorts),\n-            TyParamDefaultMismatch(ref x) => {\n-                return tcx.lift(x).map(TyParamDefaultMismatch)\n-            }\n-            ExistentialMismatch(ref x) => return tcx.lift(x).map(ExistentialMismatch),\n             OldStyleLUB(ref x) => return tcx.lift(x).map(OldStyleLUB),\n+            ExistentialMismatch(ref x) => return tcx.lift(x).map(ExistentialMismatch)\n         })\n     }\n }\n@@ -1199,20 +1188,6 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::error::ExpectedFoun\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for type_variable::Default<'tcx> {\n-    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        type_variable::Default {\n-            ty: self.ty.fold_with(folder),\n-            origin_span: self.origin_span,\n-            def_id: self.def_id\n-        }\n-    }\n-\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.ty.visit_with(visitor)\n-    }\n-}\n-\n impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         self.iter().map(|x| x.fold_with(folder)).collect()\n@@ -1252,7 +1227,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::error::TypeError<'tcx> {\n             ProjectionMismatched(x) => ProjectionMismatched(x),\n             ProjectionBoundsLength(x) => ProjectionBoundsLength(x),\n             Sorts(x) => Sorts(x.fold_with(folder)),\n-            TyParamDefaultMismatch(ref x) => TyParamDefaultMismatch(x.fold_with(folder)),\n             ExistentialMismatch(x) => ExistentialMismatch(x.fold_with(folder)),\n             OldStyleLUB(ref x) => OldStyleLUB(x.fold_with(folder)),\n         }\n@@ -1273,7 +1247,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::error::TypeError<'tcx> {\n             },\n             Sorts(x) => x.visit_with(visitor),\n             OldStyleLUB(ref x) => x.visit_with(visitor),\n-            TyParamDefaultMismatch(ref x) => x.visit_with(visitor),\n             ExistentialMismatch(x) => x.visit_with(visitor),\n             CyclicTy(t) => t.visit_with(visitor),\n             Mismatch |"}]}