{"sha": "e4106581de25d31d94695372b299aa2c8b0bce8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MTA2NTgxZGUyNWQzMWQ5NDY5NTM3MmIyOTlhYTJjOGIwYmNlOGU=", "commit": {"author": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-07-19T07:27:18Z"}, "committer": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-08-04T21:36:13Z"}, "message": "Replace on-the-fly llvm field index calculation with cache", "tree": {"sha": "0590f3fbe8487cb8240f89f2e6ee05402030354b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0590f3fbe8487cb8240f89f2e6ee05402030354b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4106581de25d31d94695372b299aa2c8b0bce8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4106581de25d31d94695372b299aa2c8b0bce8e", "html_url": "https://github.com/rust-lang/rust/commit/e4106581de25d31d94695372b299aa2c8b0bce8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4106581de25d31d94695372b299aa2c8b0bce8e/comments", "author": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60a523de9207d0465a32cee5fd96820b116ff64c", "url": "https://api.github.com/repos/rust-lang/rust/commits/60a523de9207d0465a32cee5fd96820b116ff64c", "html_url": "https://github.com/rust-lang/rust/commit/60a523de9207d0465a32cee5fd96820b116ff64c"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "52de4bcd7379c987f569a13baad52d9d818a4c5e", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4106581de25d31d94695372b299aa2c8b0bce8e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4106581de25d31d94695372b299aa2c8b0bce8e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=e4106581de25d31d94695372b299aa2c8b0bce8e", "patch": "@@ -79,6 +79,11 @@ pub struct CodegenCx<'ll, 'tcx> {\n     pub pointee_infos: RefCell<FxHashMap<(Ty<'tcx>, Size), Option<PointeeInfo>>>,\n     pub isize_ty: &'ll Type,\n \n+    /// Cache for the mapping from source index to llvm index for struct fields,\n+    /// necessary because the mapping depends on padding and thus depens on\n+    /// TyAndLayout.\n+    pub field_projection_cache: RefCell<FxHashMap<TyAndLayout<'tcx>, Vec<u32>>>,\n+\n     pub coverage_cx: Option<coverageinfo::CrateCoverageContext<'ll, 'tcx>>,\n     pub dbg_cx: Option<debuginfo::CrateDebugContext<'ll, 'tcx>>,\n \n@@ -308,6 +313,7 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n             scalar_lltypes: Default::default(),\n             pointee_infos: Default::default(),\n             isize_ty,\n+            field_projection_cache: Default::default(),\n             coverage_cx,\n             dbg_cx,\n             eh_personality: Cell::new(None),"}, {"sha": "ad9696588952e2809b6de2740a8153059811c43c", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e4106581de25d31d94695372b299aa2c8b0bce8e/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4106581de25d31d94695372b299aa2c8b0bce8e/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=e4106581de25d31d94695372b299aa2c8b0bce8e", "patch": "@@ -98,6 +98,7 @@ fn struct_llfields<'a, 'tcx>(\n     let mut offset = Size::ZERO;\n     let mut prev_effective_align = layout.align.abi;\n     let mut result: Vec<_> = Vec::with_capacity(1 + field_count * 2);\n+    let mut projection = vec![0; field_count];\n     for i in layout.fields.index_by_increasing_offset() {\n         let target_offset = layout.fields.offset(i as usize);\n         let field = layout.field(cx, i);\n@@ -122,6 +123,7 @@ fn struct_llfields<'a, 'tcx>(\n             result.push(cx.type_padding_filler(padding, padding_align));\n             debug!(\"    padding before: {:?}\", padding);\n         }\n+        projection[i] = result.len() as u32;\n         result.push(field.llvm_type(cx));\n         offset = target_offset + field.size;\n         prev_effective_align = effective_field_align;\n@@ -143,6 +145,7 @@ fn struct_llfields<'a, 'tcx>(\n     } else {\n         debug!(\"struct_llfields: offset: {:?} stride: {:?}\", offset, layout.size);\n     }\n+    cx.field_projection_cache.borrow_mut().insert(layout, projection);\n \n     (result, packed)\n }\n@@ -356,24 +359,12 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n \n             FieldsShape::Array { .. } => index as u64,\n \n-            FieldsShape::Arbitrary { .. } => {\n-                let mut llvm_index = 0;\n-                let mut offset = Size::ZERO;\n-                for i in self.fields.index_by_increasing_offset() {\n-                    let target_offset = self.fields.offset(i as usize);\n-                    let field = self.field(cx, i);\n-                    let padding = target_offset - offset;\n-                    if padding != Size::ZERO {\n-                        llvm_index += 1;\n-                    }\n-                    if i == index {\n-                        return llvm_index;\n-                    }\n-                    offset = target_offset + field.size;\n-                    llvm_index += 1;\n+            FieldsShape::Arbitrary { .. } => match cx.field_projection_cache.borrow().get(self) {\n+                Some(projection) => projection[index] as u64,\n+                None => {\n+                    bug!(\"TyAndLayout::llvm_field_index({:?}): field projection not cached\", self)\n                 }\n-                bug!(\"TyAndLayout::llvm_field_index({:?}): index {} out of range\", self, index)\n-            }\n+            },\n         }\n     }\n "}]}