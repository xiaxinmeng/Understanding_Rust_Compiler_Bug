{"sha": "3a244e02b53687161d4cc39254cb9a432756017f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMjQ0ZTAyYjUzNjg3MTYxZDRjYzM5MjU0Y2I5YTQzMjc1NjAxN2Y=", "commit": {"author": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-05-23T09:53:02Z"}, "committer": {"name": "Mikhail Rakhmanov", "email": "rakhmanov.m@gmail.com", "date": "2020-05-23T09:53:02Z"}, "message": "Remove unwraps where possible", "tree": {"sha": "910f2aaddb1d4e577271e732aabb70ca9d94c31f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/910f2aaddb1d4e577271e732aabb70ca9d94c31f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a244e02b53687161d4cc39254cb9a432756017f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a244e02b53687161d4cc39254cb9a432756017f", "html_url": "https://github.com/rust-lang/rust/commit/3a244e02b53687161d4cc39254cb9a432756017f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a244e02b53687161d4cc39254cb9a432756017f/comments", "author": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcrakhman", "id": 16068868, "node_id": "MDQ6VXNlcjE2MDY4ODY4", "avatar_url": "https://avatars.githubusercontent.com/u/16068868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcrakhman", "html_url": "https://github.com/mcrakhman", "followers_url": "https://api.github.com/users/mcrakhman/followers", "following_url": "https://api.github.com/users/mcrakhman/following{/other_user}", "gists_url": "https://api.github.com/users/mcrakhman/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcrakhman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcrakhman/subscriptions", "organizations_url": "https://api.github.com/users/mcrakhman/orgs", "repos_url": "https://api.github.com/users/mcrakhman/repos", "events_url": "https://api.github.com/users/mcrakhman/events{/privacy}", "received_events_url": "https://api.github.com/users/mcrakhman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ee1c60c9cff781e10d6379f68fc951378403f6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee1c60c9cff781e10d6379f68fc951378403f6b", "html_url": "https://github.com/rust-lang/rust/commit/6ee1c60c9cff781e10d6379f68fc951378403f6b"}], "stats": {"total": 33, "additions": 11, "deletions": 22}, "files": [{"sha": "d5397bf2134bab5218d1b611a82b16597499e9f9", "filename": "crates/ra_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/3a244e02b53687161d4cc39254cb9a432756017f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a244e02b53687161d4cc39254cb9a432756017f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=3a244e02b53687161d4cc39254cb9a432756017f", "patch": "@@ -39,15 +39,16 @@ pub(crate) fn extract_struct_from_enum(acc: &mut Assists, ctx: &AssistContext) -\n         _ => return None,\n     };\n     let variant_name = variant.name()?.to_string();\n-    let enum_ast = variant.parent_enum();\n-    let enum_name = enum_ast.name()?.to_string();\n-    let visibility = enum_ast.visibility();\n     let variant_hir = ctx.sema.to_def(&variant)?;\n-\n     if existing_struct_def(ctx.db, &variant_name, &variant_hir) {\n         return None;\n     }\n-\n+    let enum_ast = variant.parent_enum();\n+    let enum_name = enum_ast.name()?.to_string();\n+    let visibility = enum_ast.visibility();\n+    let current_module_def =\n+        ImportsLocator::new(ctx.db).find_imports(&enum_name).first()?.left()?;\n+    let current_module = current_module_def.module(ctx.db)?;\n     let target = variant.syntax().text_range();\n     return acc.add_in_multiple_files(\n         AssistId(\"extract_struct_from_enum_variant\"),\n@@ -56,18 +57,17 @@ pub(crate) fn extract_struct_from_enum(acc: &mut Assists, ctx: &AssistContext) -\n         |edit| {\n             let definition = Definition::ModuleDef(ModuleDef::EnumVariant(variant_hir));\n             let res = definition.find_usages(&ctx.db, None);\n-            let module_def = mod_def_for_target_module(ctx, &enum_name);\n             let start_offset = variant.parent_enum().syntax().text_range().start();\n             let mut visited_modules_set: FxHashSet<Module> = FxHashSet::default();\n-            visited_modules_set.insert(module_def.module(ctx.db).unwrap());\n+            visited_modules_set.insert(current_module);\n             for reference in res {\n                 let source_file = ctx.sema.parse(reference.file_range.file_id);\n                 update_reference(\n                     ctx,\n                     edit,\n                     reference,\n                     &source_file,\n-                    &module_def,\n+                    &current_module_def,\n                     &mut visited_modules_set,\n                 );\n             }\n@@ -95,10 +95,6 @@ fn existing_struct_def(db: &RootDatabase, variant_name: &str, variant: &EnumVari\n         .any(|(name, _)| name.to_string() == variant_name.to_string())\n }\n \n-fn mod_def_for_target_module(ctx: &AssistContext, enum_name: &str) -> ModuleDef {\n-    ImportsLocator::new(ctx.db).find_imports(enum_name).first().unwrap().left().unwrap()\n-}\n-\n fn insert_import(\n     ctx: &AssistContext,\n     builder: &mut AssistBuilder,\n@@ -186,23 +182,16 @@ fn update_reference(\n     let call = path_expr.syntax().parent().and_then(ast::CallExpr::cast)?;\n     let list = call.arg_list()?;\n     let segment = path_expr.path()?.segment()?;\n+    let segment_name = segment.name_ref()?;\n+    let module = ctx.sema.scope(&path_expr.syntax()).module()?;\n     let list_range = list.syntax().text_range();\n     let inside_list_range = TextRange::new(\n         list_range.start().checked_add(TextSize::from(1))?,\n         list_range.end().checked_sub(TextSize::from(1))?,\n     );\n     edit.perform(reference.file_range.file_id, |builder| {\n-        let module = ctx.sema.scope(&path_expr.syntax()).module().unwrap();\n         if !visited_modules_set.contains(&module) {\n-            if insert_import(\n-                ctx,\n-                builder,\n-                &path_expr,\n-                &module,\n-                module_def,\n-                segment.name_ref().unwrap(),\n-            )\n-            .is_some()\n+            if insert_import(ctx, builder, &path_expr, &module, module_def, segment_name).is_some()\n             {\n                 visited_modules_set.insert(module);\n             }"}]}