{"sha": "0dc9e2a56502c1138c6faf021888844905e64cf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYzllMmE1NjUwMmMxMTM4YzZmYWYwMjE4ODg4NDQ5MDVlNjRjZjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-05T16:55:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-05T16:55:56Z"}, "message": "improve wrapping_ docs", "tree": {"sha": "c7d7852333b22e38694c1c6c2a8e254c2fa290a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7d7852333b22e38694c1c6c2a8e254c2fa290a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dc9e2a56502c1138c6faf021888844905e64cf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dc9e2a56502c1138c6faf021888844905e64cf3", "html_url": "https://github.com/rust-lang/rust/commit/0dc9e2a56502c1138c6faf021888844905e64cf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dc9e2a56502c1138c6faf021888844905e64cf3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa72b1d3e3b946cd25fc622b8c5eb07645dc2a58", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa72b1d3e3b946cd25fc622b8c5eb07645dc2a58", "html_url": "https://github.com/rust-lang/rust/commit/aa72b1d3e3b946cd25fc622b8c5eb07645dc2a58"}], "stats": {"total": 138, "additions": 112, "deletions": 26}, "files": [{"sha": "fed6ef53be3a424c7f00e7806fc347345984272a", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 112, "deletions": 26, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/0dc9e2a56502c1138c6faf021888844905e64cf3/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dc9e2a56502c1138c6faf021888844905e64cf3/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=0dc9e2a56502c1138c6faf021888844905e64cf3", "patch": "@@ -1141,10 +1141,12 @@ impl<T: ?Sized> *const T {\n     /// Extension. As such, memory acquired directly from allocators or memory\n     /// mapped files *may* be too large to handle with this function.\n     ///\n-    /// Consider using `wrapping_offset` instead if these constraints are\n+    /// Consider using [`wrapping_offset`] instead if these constraints are\n     /// difficult to satisfy. The only advantage of this method is that it\n     /// enables more aggressive compiler optimizations.\n     ///\n+    /// [`wrapping_offset`]: #method.wrapping_offset\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1173,15 +1175,26 @@ impl<T: ?Sized> *const T {\n     ///\n     /// The resulting pointer does not need to be in bounds, but it is\n     /// potentially hazardous to dereference (which requires `unsafe`).\n-    /// In particular, the resulting pointer may *not* be used to access a\n-    /// different allocated object than the one `self` points to. In other\n-    /// words, `x.wrapping_offset(y.wrapping_offset_from(x))` is\n+    ///\n+    /// In particular, the resulting pointer remains attached to the same allocated\n+    /// object that `self` points to. It may *not* be used to access a\n+    /// different allocated object. Note that in Rust,\n+    /// every (stack-allocated) variable is considered a separate allocated object.\n+    ///\n+    /// In other words, `x.wrapping_offset(y.wrapping_offset_from(x))` is\n     /// *not* the same as `y`, and dereferencing it is undefined behavior\n     /// unless `x` and `y` point into the same allocated object.\n     ///\n-    /// Always use `.offset(count)` instead when possible, because `offset`\n-    /// allows the compiler to optimize better. If you need to cross object\n-    /// boundaries, cast the pointer to an integer and do the arithmetic there.\n+    /// Compared to [`offset`], this method basically delays the requirement of staying\n+    /// within the same allocated object: [`offset`] is immediate Undefined Behavior when\n+    /// crossing object boundaries; `wrapping_offset` produces a pointer but still leads\n+    /// to Undefined Behavior if that pointer is dereferenced. [`offset`] can be optimized\n+    /// better and is thus preferrable in performance-sensitive code.\n+    ///\n+    /// If you need to cross object boundaries, cast the pointer to an integer and\n+    /// do the arithmetic there.\n+    ///\n+    /// [`offset`]: #method.offset\n     ///\n     /// # Examples\n     ///\n@@ -1361,10 +1374,12 @@ impl<T: ?Sized> *const T {\n     /// Extension. As such, memory acquired directly from allocators or memory\n     /// mapped files *may* be too large to handle with this function.\n     ///\n-    /// Consider using `wrapping_offset` instead if these constraints are\n+    /// Consider using [`wrapping_add`] instead if these constraints are\n     /// difficult to satisfy. The only advantage of this method is that it\n     /// enables more aggressive compiler optimizations.\n     ///\n+    /// [`wrapping_add`]: #method.wrapping_add\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1419,10 +1434,12 @@ impl<T: ?Sized> *const T {\n     /// Extension. As such, memory acquired directly from allocators or memory\n     /// mapped files *may* be too large to handle with this function.\n     ///\n-    /// Consider using `wrapping_offset` instead if these constraints are\n+    /// Consider using [`wrapping_sub`] instead if these constraints are\n     /// difficult to satisfy. The only advantage of this method is that it\n     /// enables more aggressive compiler optimizations.\n     ///\n+    /// [`wrapping_sub`]: #method.wrapping_sub\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1455,8 +1472,21 @@ impl<T: ?Sized> *const T {\n     /// The resulting pointer does not need to be in bounds, but it is\n     /// potentially hazardous to dereference (which requires `unsafe`).\n     ///\n-    /// Always use `.add(count)` instead when possible, because `add`\n-    /// allows the compiler to optimize better.\n+    /// In particular, the resulting pointer remains attached to the same allocated\n+    /// object that `self` points to. It may *not* be used to access a\n+    /// different allocated object. Note that in Rust,\n+    /// every (stack-allocated) variable is considered a separate allocated object.\n+    ///\n+    /// Compared to [`add`], this method basically delays the requirement of staying\n+    /// within the same allocated object: [`add`] is immediate Undefined Behavior when\n+    /// crossing object boundaries; `wrapping_add` produces a pointer but still leads\n+    /// to Undefined Behavior if that pointer is dereferenced. [`add`] can be optimized\n+    /// better and is thus preferrable in performance-sensitive code.\n+    ///\n+    /// If you need to cross object boundaries, cast the pointer to an integer and\n+    /// do the arithmetic there.\n+    ///\n+    /// [`add`]: #method.add\n     ///\n     /// # Examples\n     ///\n@@ -1496,8 +1526,21 @@ impl<T: ?Sized> *const T {\n     /// The resulting pointer does not need to be in bounds, but it is\n     /// potentially hazardous to dereference (which requires `unsafe`).\n     ///\n-    /// Always use `.sub(count)` instead when possible, because `sub`\n-    /// allows the compiler to optimize better.\n+    /// In particular, the resulting pointer remains attached to the same allocated\n+    /// object that `self` points to. It may *not* be used to access a\n+    /// different allocated object. Note that in Rust,\n+    /// every (stack-allocated) variable is considered a separate allocated object.\n+    ///\n+    /// Compared to [`sub`], this method basically delays the requirement of staying\n+    /// within the same allocated object: [`sub`] is immediate Undefined Behavior when\n+    /// crossing object boundaries; `wrapping_sub` produces a pointer but still leads\n+    /// to Undefined Behavior if that pointer is dereferenced. [`sub`] can be optimized\n+    /// better and is thus preferrable in performance-sensitive code.\n+    ///\n+    /// If you need to cross object boundaries, cast the pointer to an integer and\n+    /// do the arithmetic there.\n+    ///\n+    /// [`sub`]: #method.sub\n     ///\n     /// # Examples\n     ///\n@@ -1780,10 +1823,12 @@ impl<T: ?Sized> *mut T {\n     /// Extension. As such, memory acquired directly from allocators or memory\n     /// mapped files *may* be too large to handle with this function.\n     ///\n-    /// Consider using `wrapping_offset` instead if these constraints are\n+    /// Consider using [`wrapping_offset`] instead if these constraints are\n     /// difficult to satisfy. The only advantage of this method is that it\n     /// enables more aggressive compiler optimizations.\n     ///\n+    /// [`wrapping_offset`]: #method.wrapping_offset\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1811,15 +1856,26 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// The resulting pointer does not need to be in bounds, but it is\n     /// potentially hazardous to dereference (which requires `unsafe`).\n-    /// In particular, the resulting pointer may *not* be used to access a\n-    /// different allocated object than the one `self` points to. In other\n-    /// words, `x.wrapping_offset(y.wrapping_offset_from(x))` is\n+    ///\n+    /// In particular, the resulting pointer remains attached to the same allocated\n+    /// object that `self` points to. It may *not* be used to access a\n+    /// different allocated object. Note that in Rust,\n+    /// every (stack-allocated) variable is considered a separate allocated object.\n+    ///\n+    /// In other words, `x.wrapping_offset(y.wrapping_offset_from(x))` is\n     /// *not* the same as `y`, and dereferencing it is undefined behavior\n     /// unless `x` and `y` point into the same allocated object.\n     ///\n-    /// Always use `.offset(count)` instead when possible, because `offset`\n-    /// allows the compiler to optimize better. If you need to cross object\n-    /// boundaries, cast the pointer to an integer and do the arithmetic there.\n+    /// Compared to [`offset`], this method basically delays the requirement of staying\n+    /// within the same allocated object: [`offset`] is immediate Undefined Behavior when\n+    /// crossing object boundaries; `wrapping_offset` produces a pointer but still leads\n+    /// to Undefined Behavior if that pointer is dereferenced. [`offset`] can be optimized\n+    /// better and is thus preferrable in performance-sensitive code.\n+    ///\n+    /// If you need to cross object boundaries, cast the pointer to an integer and\n+    /// do the arithmetic there.\n+    ///\n+    /// [`offset`]: #method.offset\n     ///\n     /// # Examples\n     ///\n@@ -2032,10 +2088,12 @@ impl<T: ?Sized> *mut T {\n     /// Extension. As such, memory acquired directly from allocators or memory\n     /// mapped files *may* be too large to handle with this function.\n     ///\n-    /// Consider using `wrapping_offset` instead if these constraints are\n+    /// Consider using [`wrapping_add`] instead if these constraints are\n     /// difficult to satisfy. The only advantage of this method is that it\n     /// enables more aggressive compiler optimizations.\n     ///\n+    /// [`wrapping_add`]: #method.wrapping_add\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2090,10 +2148,12 @@ impl<T: ?Sized> *mut T {\n     /// Extension. As such, memory acquired directly from allocators or memory\n     /// mapped files *may* be too large to handle with this function.\n     ///\n-    /// Consider using `wrapping_offset` instead if these constraints are\n+    /// Consider using [`wrapping_sub`] instead if these constraints are\n     /// difficult to satisfy. The only advantage of this method is that it\n     /// enables more aggressive compiler optimizations.\n     ///\n+    /// [`wrapping_sub`]: #method.wrapping_sub\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2126,8 +2186,21 @@ impl<T: ?Sized> *mut T {\n     /// The resulting pointer does not need to be in bounds, but it is\n     /// potentially hazardous to dereference (which requires `unsafe`).\n     ///\n-    /// Always use `.add(count)` instead when possible, because `add`\n-    /// allows the compiler to optimize better.\n+    /// In particular, the resulting pointer remains attached to the same allocated\n+    /// object that `self` points to. It may *not* be used to access a\n+    /// different allocated object. Note that in Rust,\n+    /// every (stack-allocated) variable is considered a separate allocated object.\n+    ///\n+    /// Compared to [`add`], this method basically delays the requirement of staying\n+    /// within the same allocated object: [`add`] is immediate Undefined Behavior when\n+    /// crossing object boundaries; `wrapping_add` produces a pointer but still leads\n+    /// to Undefined Behavior if that pointer is dereferenced. [`add`] can be optimized\n+    /// better and is thus preferrable in performance-sensitive code.\n+    ///\n+    /// If you need to cross object boundaries, cast the pointer to an integer and\n+    /// do the arithmetic there.\n+    ///\n+    /// [`add`]: #method.add\n     ///\n     /// # Examples\n     ///\n@@ -2167,8 +2240,21 @@ impl<T: ?Sized> *mut T {\n     /// The resulting pointer does not need to be in bounds, but it is\n     /// potentially hazardous to dereference (which requires `unsafe`).\n     ///\n-    /// Always use `.sub(count)` instead when possible, because `sub`\n-    /// allows the compiler to optimize better.\n+    /// In particular, the resulting pointer remains attached to the same allocated\n+    /// object that `self` points to. It may *not* be used to access a\n+    /// different allocated object. Note that in Rust,\n+    /// every (stack-allocated) variable is considered a separate allocated object.\n+    ///\n+    /// Compared to [`sub`], this method basically delays the requirement of staying\n+    /// within the same allocated object: [`sub`] is immediate Undefined Behavior when\n+    /// crossing object boundaries; `wrapping_sub` produces a pointer but still leads\n+    /// to Undefined Behavior if that pointer is dereferenced. [`sub`] can be optimized\n+    /// better and is thus preferrable in performance-sensitive code.\n+    ///\n+    /// If you need to cross object boundaries, cast the pointer to an integer and\n+    /// do the arithmetic there.\n+    ///\n+    /// [`sub`]: #method.sub\n     ///\n     /// # Examples\n     ///"}]}