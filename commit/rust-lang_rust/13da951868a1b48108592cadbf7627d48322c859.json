{"sha": "13da951868a1b48108592cadbf7627d48322c859", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZGE5NTE4NjhhMWI0ODEwODU5MmNhZGJmNzYyN2Q0ODMyMmM4NTk=", "commit": {"author": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2018-08-09T15:20:22Z"}, "committer": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2018-08-22T22:37:03Z"}, "message": "move PinMut into pin module and export through std", "tree": {"sha": "e6b5e363e4ee96f30f04478e5d0710e504ee45ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6b5e363e4ee96f30f04478e5d0710e504ee45ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13da951868a1b48108592cadbf7627d48322c859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13da951868a1b48108592cadbf7627d48322c859", "html_url": "https://github.com/rust-lang/rust/commit/13da951868a1b48108592cadbf7627d48322c859", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13da951868a1b48108592cadbf7627d48322c859/comments", "author": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1b506af022fdcb054aa90da1fbcf8c0226292d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1b506af022fdcb054aa90da1fbcf8c0226292d0", "html_url": "https://github.com/rust-lang/rust/commit/f1b506af022fdcb054aa90da1fbcf8c0226292d0"}], "stats": {"total": 347, "additions": 191, "deletions": 156}, "files": [{"sha": "94c7b8731795157b74a52e19e523c4612c2d81f2", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13da951868a1b48108592cadbf7627d48322c859/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13da951868a1b48108592cadbf7627d48322c859/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=13da951868a1b48108592cadbf7627d48322c859", "patch": "@@ -64,7 +64,8 @@ use core::future::{Future, FutureObj, LocalFutureObj, UnsafeFutureObj};\n use core::hash::{Hash, Hasher};\n use core::iter::FusedIterator;\n use core::marker::{Unpin, Unsize};\n-use core::mem::{self, PinMut};\n+use core::mem;\n+use core::pin::PinMut;\n use core::ops::{CoerceUnsized, Deref, DerefMut, Generator, GeneratorState};\n use core::ptr::{self, NonNull, Unique};\n use core::task::{Context, Poll, Spawn, SpawnErrorKind, SpawnObjError};"}, {"sha": "520b6ebbbaaa59a072eda6529d6f22acd1e4249e", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13da951868a1b48108592cadbf7627d48322c859/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13da951868a1b48108592cadbf7627d48322c859/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=13da951868a1b48108592cadbf7627d48322c859", "patch": "@@ -12,7 +12,7 @@\n             reason = \"futures in libcore are unstable\",\n             issue = \"50547\")]\n \n-use mem::PinMut;\n+use pin::PinMut;\n use marker::Unpin;\n use task::{self, Poll};\n "}, {"sha": "68fe461aeae86ebcb1e570a9796737fd5b034e6a", "filename": "src/libcore/future/future_obj.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13da951868a1b48108592cadbf7627d48322c859/src%2Flibcore%2Ffuture%2Ffuture_obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13da951868a1b48108592cadbf7627d48322c859/src%2Flibcore%2Ffuture%2Ffuture_obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture_obj.rs?ref=13da951868a1b48108592cadbf7627d48322c859", "patch": "@@ -15,7 +15,7 @@\n use fmt;\n use future::Future;\n use marker::{PhantomData, Unpin};\n-use mem::PinMut;\n+use pin::PinMut;\n use task::{Context, Poll};\n \n /// A custom trait object for polling futures, roughly akin to"}, {"sha": "aaeacd1576140f47e3acda5541ad65a949aa3d9c", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13da951868a1b48108592cadbf7627d48322c859/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13da951868a1b48108592cadbf7627d48322c859/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=13da951868a1b48108592cadbf7627d48322c859", "patch": "@@ -191,6 +191,7 @@ pub mod cell;\n pub mod char;\n pub mod panic;\n pub mod panicking;\n+pub mod pin;\n pub mod iter;\n pub mod option;\n pub mod raw;"}, {"sha": "aac6b3333ed1917582125a6a11be212c37b287d5", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 2, "deletions": 147, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/13da951868a1b48108592cadbf7627d48322c859/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13da951868a1b48108592cadbf7627d48322c859/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=13da951868a1b48108592cadbf7627d48322c859", "patch": "@@ -18,13 +18,11 @@\n use clone;\n use cmp;\n use fmt;\n-use future::{Future, UnsafeFutureObj};\n use hash;\n use intrinsics;\n-use marker::{Copy, PhantomData, Sized, Unpin, Unsize};\n+use marker::{Copy, PhantomData, Sized};\n use ptr;\n-use task::{Context, Poll};\n-use ops::{Deref, DerefMut, CoerceUnsized};\n+use ops::{Deref, DerefMut};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use intrinsics::transmute;\n@@ -1024,146 +1022,3 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n         &mut self.value\n     }\n }\n-\n-/// A pinned reference.\n-///\n-/// A pinned reference is a lot like a mutable reference, except that it is not\n-/// safe to move a value out of a pinned reference unless the type of that\n-/// value implements the `Unpin` trait.\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-#[fundamental]\n-pub struct PinMut<'a, T: ?Sized + 'a> {\n-    inner: &'a mut T,\n-}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<'a, T: ?Sized + Unpin> PinMut<'a, T> {\n-    /// Construct a new `PinMut` around a reference to some data of a type that\n-    /// implements `Unpin`.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub fn new(reference: &'a mut T) -> PinMut<'a, T> {\n-        PinMut { inner: reference }\n-    }\n-\n-    /// Get a mutable reference to the data inside of this `PinMut`.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub fn get_mut(this: PinMut<'a, T>) -> &'a mut T {\n-        this.inner\n-    }\n-}\n-\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<'a, T: ?Sized> PinMut<'a, T> {\n-    /// Construct a new `PinMut` around a reference to some data of a type that\n-    /// may or may not implement `Unpin`.\n-    ///\n-    /// This constructor is unsafe because we do not know what will happen with\n-    /// that data after the reference ends. If you cannot guarantee that the\n-    /// data will never move again, calling this constructor is invalid.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub unsafe fn new_unchecked(reference: &'a mut T) -> PinMut<'a, T> {\n-        PinMut { inner: reference }\n-    }\n-\n-    /// Reborrow a `PinMut` for a shorter lifetime.\n-    ///\n-    /// For example, `PinMut::get_mut(x.reborrow())` (unsafely) returns a\n-    /// short-lived mutable reference reborrowing from `x`.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub fn reborrow<'b>(&'b mut self) -> PinMut<'b, T> {\n-        PinMut { inner: self.inner }\n-    }\n-\n-    /// Get a mutable reference to the data inside of this `PinMut`.\n-    ///\n-    /// This function is unsafe. You must guarantee that you will never move\n-    /// the data out of the mutable reference you receive when you call this\n-    /// function.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub unsafe fn get_mut_unchecked(this: PinMut<'a, T>) -> &'a mut T {\n-        this.inner\n-    }\n-\n-    /// Construct a new pin by mapping the interior value.\n-    ///\n-    /// For example, if you  wanted to get a `PinMut` of a field of something,\n-    /// you could use this to get access to that field in one line of code.\n-    ///\n-    /// This function is unsafe. You must guarantee that the data you return\n-    /// will not move so long as the argument value does not move (for example,\n-    /// because it is one of the fields of that value), and also that you do\n-    /// not move out of the argument you receive to the interior function.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub unsafe fn map_unchecked<U, F>(this: PinMut<'a, T>, f: F) -> PinMut<'a, U> where\n-        F: FnOnce(&mut T) -> &mut U\n-    {\n-        PinMut { inner: f(this.inner) }\n-    }\n-\n-    /// Assign a new value to the memory behind the pinned reference.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub fn set(this: PinMut<'a, T>, value: T)\n-        where T: Sized,\n-    {\n-        *this.inner = value;\n-    }\n-}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<'a, T: ?Sized> Deref for PinMut<'a, T> {\n-    type Target = T;\n-\n-    fn deref(&self) -> &T {\n-        &*self.inner\n-    }\n-}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<'a, T: ?Sized + Unpin> DerefMut for PinMut<'a, T> {\n-    fn deref_mut(&mut self) -> &mut T {\n-        self.inner\n-    }\n-}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<'a, T: fmt::Debug + ?Sized> fmt::Debug for PinMut<'a, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Debug::fmt(&**self, f)\n-    }\n-}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<'a, T: fmt::Display + ?Sized> fmt::Display for PinMut<'a, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(&**self, f)\n-    }\n-}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<'a, T: ?Sized> fmt::Pointer for PinMut<'a, T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Pointer::fmt(&(&*self.inner as *const T), f)\n-    }\n-}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<PinMut<'a, U>> for PinMut<'a, T> {}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<'a, T: ?Sized> Unpin for PinMut<'a, T> {}\n-\n-#[unstable(feature = \"futures_api\", issue = \"50547\")]\n-unsafe impl<'a, T, F> UnsafeFutureObj<'a, T> for PinMut<'a, F>\n-    where F: Future<Output = T> + 'a\n-{\n-    fn into_raw(self) -> *mut () {\n-        unsafe { PinMut::get_mut_unchecked(self) as *mut F as *mut () }\n-    }\n-\n-    unsafe fn poll(ptr: *mut (), cx: &mut Context) -> Poll<T> {\n-        PinMut::new_unchecked(&mut *(ptr as *mut F)).poll(cx)\n-    }\n-\n-    unsafe fn drop(_ptr: *mut ()) {}\n-}"}, {"sha": "3879abb0af973d7084c911f93c660cc686288d08", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13da951868a1b48108592cadbf7627d48322c859/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13da951868a1b48108592cadbf7627d48322c859/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=13da951868a1b48108592cadbf7627d48322c859", "patch": "@@ -147,7 +147,7 @@\n \n use iter::{FromIterator, FusedIterator, TrustedLen};\n use {hint, mem, ops::{self, Deref}};\n-use mem::PinMut;\n+use pin::PinMut;\n \n // Note that this is not a lang item per se, but it has a hidden dependency on\n // `Iterator`, which is one. The compiler assumes that the `next` method of"}, {"sha": "a41185e231bfaff84b6d3ffdd9d578b131a94b9e", "filename": "src/libcore/pin.rs", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/13da951868a1b48108592cadbf7627d48322c859/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13da951868a1b48108592cadbf7627d48322c859/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=13da951868a1b48108592cadbf7627d48322c859", "patch": "@@ -0,0 +1,162 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Types which pin data to its location in memory\n+\n+#![unstable(feature = \"pin\", issue = \"49150\")]\n+\n+use fmt;\n+use future::{Future, UnsafeFutureObj};\n+use marker::{Sized, Unpin, Unsize};\n+use task::{Context, Poll};\n+use ops::{Deref, DerefMut, CoerceUnsized};\n+\n+/// A pinned reference.\n+///\n+/// A pinned reference is a lot like a mutable reference, except that it is not\n+/// safe to move a value out of a pinned reference unless the type of that\n+/// value implements the `Unpin` trait.\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[fundamental]\n+pub struct PinMut<'a, T: ?Sized + 'a> {\n+    inner: &'a mut T,\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<'a, T: ?Sized + Unpin> PinMut<'a, T> {\n+    /// Construct a new `PinMut` around a reference to some data of a type that\n+    /// implements `Unpin`.\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    pub fn new(reference: &'a mut T) -> PinMut<'a, T> {\n+        PinMut { inner: reference }\n+    }\n+\n+    /// Get a mutable reference to the data inside of this `PinMut`.\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    pub fn get_mut(this: PinMut<'a, T>) -> &'a mut T {\n+        this.inner\n+    }\n+}\n+\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<'a, T: ?Sized> PinMut<'a, T> {\n+    /// Construct a new `PinMut` around a reference to some data of a type that\n+    /// may or may not implement `Unpin`.\n+    ///\n+    /// This constructor is unsafe because we do not know what will happen with\n+    /// that data after the reference ends. If you cannot guarantee that the\n+    /// data will never move again, calling this constructor is invalid.\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    pub unsafe fn new_unchecked(reference: &'a mut T) -> PinMut<'a, T> {\n+        PinMut { inner: reference }\n+    }\n+\n+    /// Reborrow a `PinMut` for a shorter lifetime.\n+    ///\n+    /// For example, `PinMut::get_mut(x.reborrow())` (unsafely) returns a\n+    /// short-lived mutable reference reborrowing from `x`.\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    pub fn reborrow<'b>(&'b mut self) -> PinMut<'b, T> {\n+        PinMut { inner: self.inner }\n+    }\n+\n+    /// Get a mutable reference to the data inside of this `PinMut`.\n+    ///\n+    /// This function is unsafe. You must guarantee that you will never move\n+    /// the data out of the mutable reference you receive when you call this\n+    /// function.\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    pub unsafe fn get_mut_unchecked(this: PinMut<'a, T>) -> &'a mut T {\n+        this.inner\n+    }\n+\n+    /// Construct a new pin by mapping the interior value.\n+    ///\n+    /// For example, if you  wanted to get a `PinMut` of a field of something,\n+    /// you could use this to get access to that field in one line of code.\n+    ///\n+    /// This function is unsafe. You must guarantee that the data you return\n+    /// will not move so long as the argument value does not move (for example,\n+    /// because it is one of the fields of that value), and also that you do\n+    /// not move out of the argument you receive to the interior function.\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    pub unsafe fn map_unchecked<U, F>(this: PinMut<'a, T>, f: F) -> PinMut<'a, U> where\n+        F: FnOnce(&mut T) -> &mut U\n+    {\n+        PinMut { inner: f(this.inner) }\n+    }\n+\n+    /// Assign a new value to the memory behind the pinned reference.\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    pub fn set(this: PinMut<'a, T>, value: T)\n+        where T: Sized,\n+    {\n+        *this.inner = value;\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<'a, T: ?Sized> Deref for PinMut<'a, T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        &*self.inner\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<'a, T: ?Sized + Unpin> DerefMut for PinMut<'a, T> {\n+    fn deref_mut(&mut self) -> &mut T {\n+        self.inner\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<'a, T: fmt::Debug + ?Sized> fmt::Debug for PinMut<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Debug::fmt(&**self, f)\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<'a, T: fmt::Display + ?Sized> fmt::Display for PinMut<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Display::fmt(&**self, f)\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<'a, T: ?Sized> fmt::Pointer for PinMut<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Pointer::fmt(&(&*self.inner as *const T), f)\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<PinMut<'a, U>> for PinMut<'a, T> {}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<'a, T: ?Sized> Unpin for PinMut<'a, T> {}\n+\n+#[unstable(feature = \"futures_api\", issue = \"50547\")]\n+unsafe impl<'a, T, F> UnsafeFutureObj<'a, T> for PinMut<'a, F>\n+    where F: Future<Output = T> + 'a\n+{\n+    fn into_raw(self) -> *mut () {\n+        unsafe { PinMut::get_mut_unchecked(self) as *mut F as *mut () }\n+    }\n+\n+    unsafe fn poll(ptr: *mut (), cx: &mut Context) -> Poll<T> {\n+        PinMut::new_unchecked(&mut *(ptr as *mut F)).poll(cx)\n+    }\n+\n+    unsafe fn drop(_ptr: *mut ()) {}\n+}"}, {"sha": "d9657f691c79fdc59a4b07445cd3c79876494423", "filename": "src/libstd/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13da951868a1b48108592cadbf7627d48322c859/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13da951868a1b48108592cadbf7627d48322c859/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=13da951868a1b48108592cadbf7627d48322c859", "patch": "@@ -12,7 +12,7 @@\n \n use core::cell::Cell;\n use core::marker::Unpin;\n-use core::mem::PinMut;\n+use core::pin::PinMut;\n use core::option::Option;\n use core::ptr::NonNull;\n use core::task::{self, Poll};"}, {"sha": "ac65274d2546363ac5c39736df01f5ae5d93bb09", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13da951868a1b48108592cadbf7627d48322c859/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13da951868a1b48108592cadbf7627d48322c859/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=13da951868a1b48108592cadbf7627d48322c859", "patch": "@@ -466,6 +466,7 @@ pub mod num;\n pub mod os;\n pub mod panic;\n pub mod path;\n+pub mod pin;\n pub mod process;\n pub mod sync;\n pub mod time;"}, {"sha": "6945a41a5e73bef0e94cb7614a0a1af936ce621a", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13da951868a1b48108592cadbf7627d48322c859/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13da951868a1b48108592cadbf7627d48322c859/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=13da951868a1b48108592cadbf7627d48322c859", "patch": "@@ -230,7 +230,7 @@ macro_rules! await {\n         loop {\n             if let $crate::task::Poll::Ready(x) =\n                 $crate::future::poll_in_task_cx(unsafe {\n-                    $crate::mem::PinMut::new_unchecked(&mut pinned)\n+                    $crate::pin::PinMut::new_unchecked(&mut pinned)\n                 })\n             {\n                 break x;"}, {"sha": "47547aedcbdec8e0269d5a5d716ef7f1f475f911", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13da951868a1b48108592cadbf7627d48322c859/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13da951868a1b48108592cadbf7627d48322c859/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=13da951868a1b48108592cadbf7627d48322c859", "patch": "@@ -16,7 +16,7 @@ use any::Any;\n use cell::UnsafeCell;\n use fmt;\n use future::Future;\n-use mem::PinMut;\n+use pin::PinMut;\n use ops::{Deref, DerefMut};\n use panicking;\n use ptr::{Unique, NonNull};"}, {"sha": "9d7a9d4404a787e5dda7b933853d70f0013920f0", "filename": "src/libstd/pin.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/13da951868a1b48108592cadbf7627d48322c859/src%2Flibstd%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13da951868a1b48108592cadbf7627d48322c859/src%2Flibstd%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpin.rs?ref=13da951868a1b48108592cadbf7627d48322c859", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Types which pin data to its location in memory\n+\n+#![unstable(feature = \"pin\", issue = \"49150\")]\n+\n+pub use core::pin::*;"}, {"sha": "7e79a210f15522dbfc36b4b33be47389008b9b9b", "filename": "src/test/run-pass/async-await.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13da951868a1b48108592cadbf7627d48322c859/src%2Ftest%2Frun-pass%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13da951868a1b48108592cadbf7627d48322c859/src%2Ftest%2Frun-pass%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await.rs?ref=13da951868a1b48108592cadbf7627d48322c859", "patch": "@@ -13,7 +13,7 @@\n #![feature(arbitrary_self_types, async_await, await_macro, futures_api, pin)]\n \n use std::boxed::PinBox;\n-use std::mem::PinMut;\n+use std::pin::PinMut;\n use std::future::Future;\n use std::sync::{\n     Arc,"}, {"sha": "ff2facd3cd289950ac01e049f0313d25068c658c", "filename": "src/test/run-pass/futures-api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13da951868a1b48108592cadbf7627d48322c859/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13da951868a1b48108592cadbf7627d48322c859/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffutures-api.rs?ref=13da951868a1b48108592cadbf7627d48322c859", "patch": "@@ -13,7 +13,7 @@\n \n use std::boxed::PinBox;\n use std::future::Future;\n-use std::mem::PinMut;\n+use std::pin::PinMut;\n use std::rc::Rc;\n use std::sync::{\n     Arc,"}]}