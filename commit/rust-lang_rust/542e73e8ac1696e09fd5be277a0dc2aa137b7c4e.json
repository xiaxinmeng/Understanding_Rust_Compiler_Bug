{"sha": "542e73e8ac1696e09fd5be277a0dc2aa137b7c4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MmU3M2U4YWMxNjk2ZTA5ZmQ1YmUyNzdhMGRjMmFhMTM3YjdjNGU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-14T09:43:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-14T09:43:58Z"}, "message": "Merge pull request #1158 from bjorn3/isolate_mono_items_pr\n\nIsolate mono items", "tree": {"sha": "fe68ee4cb422400211b00a4dbf15c18b2c2a538d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe68ee4cb422400211b00a4dbf15c18b2c2a538d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgdrleCRBK7hj4Ov3rIwAAdHIIAHPweXz8FjWufdMCdQ76n9I2\n/BDVpdy0rwTjutEmbFMb8OeU/TSzrUvBoh9c1KdwKapr9WNQpWQAT7iygaW5axFX\nQsXuAE6WOwzge1KFUC4y0gbkUV4QJBYSQOQ5vvaFlyJFtEoSw6ZvsXILoKqoBT76\neNQsLAsrdZc0A/VhSRgeEume/8gmQv0ofUpm3KGHk7py0LTfbgiiWqiEyLyBMBj2\nFeLlUaU2b+h2LN5j8V3H0b70Wws4wryWIjU5Bf6sQB1znhuH1+3aaPKS/eWfj+G7\n9OYKBjzhRX5eJJSsuv9uJlox1nOvnj+fG7f49ubRZSj1Z+nRpoGhXpklQskpwjE=\n=etKv\n-----END PGP SIGNATURE-----\n", "payload": "tree fe68ee4cb422400211b00a4dbf15c18b2c2a538d\nparent 29a4a551eb23969cde9a895d081bee682254974c\nparent 65420b50f86296442d26884d2eb0de5b43090b0a\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1618393438 +0200\ncommitter GitHub <noreply@github.com> 1618393438 +0200\n\nMerge pull request #1158 from bjorn3/isolate_mono_items_pr\n\nIsolate mono items"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e", "html_url": "https://github.com/rust-lang/rust/commit/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29a4a551eb23969cde9a895d081bee682254974c", "url": "https://api.github.com/repos/rust-lang/rust/commits/29a4a551eb23969cde9a895d081bee682254974c", "html_url": "https://github.com/rust-lang/rust/commit/29a4a551eb23969cde9a895d081bee682254974c"}, {"sha": "65420b50f86296442d26884d2eb0de5b43090b0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/65420b50f86296442d26884d2eb0de5b43090b0a", "html_url": "https://github.com/rust-lang/rust/commit/65420b50f86296442d26884d2eb0de5b43090b0a"}], "stats": {"total": 165, "additions": 80, "deletions": 85}, "files": [{"sha": "16c2732eac9e4a90dab35e80be2e084b4838bdd7", "filename": "Cargo.lock", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=542e73e8ac1696e09fd5be277a0dc2aa137b7c4e", "patch": "@@ -39,16 +39,16 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"cranelift-bforest\"\n-version = \"0.72.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#8e43e96410a14143d368273cf1e708f8094bb8e0\"\n+version = \"0.73.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#45bee40f338c631bff4a799288101ba328c7ad36\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n-version = \"0.72.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#8e43e96410a14143d368273cf1e708f8094bb8e0\"\n+version = \"0.73.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#45bee40f338c631bff4a799288101ba328c7ad36\"\n dependencies = [\n  \"byteorder\",\n  \"cranelift-bforest\",\n@@ -65,27 +65,27 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-codegen-meta\"\n-version = \"0.72.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#8e43e96410a14143d368273cf1e708f8094bb8e0\"\n+version = \"0.73.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#45bee40f338c631bff4a799288101ba328c7ad36\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-shared\"\n-version = \"0.72.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#8e43e96410a14143d368273cf1e708f8094bb8e0\"\n+version = \"0.73.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#45bee40f338c631bff4a799288101ba328c7ad36\"\n \n [[package]]\n name = \"cranelift-entity\"\n-version = \"0.72.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#8e43e96410a14143d368273cf1e708f8094bb8e0\"\n+version = \"0.73.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#45bee40f338c631bff4a799288101ba328c7ad36\"\n \n [[package]]\n name = \"cranelift-frontend\"\n-version = \"0.72.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#8e43e96410a14143d368273cf1e708f8094bb8e0\"\n+version = \"0.73.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#45bee40f338c631bff4a799288101ba328c7ad36\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -95,8 +95,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-jit\"\n-version = \"0.72.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#8e43e96410a14143d368273cf1e708f8094bb8e0\"\n+version = \"0.73.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#45bee40f338c631bff4a799288101ba328c7ad36\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -113,8 +113,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-module\"\n-version = \"0.72.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#8e43e96410a14143d368273cf1e708f8094bb8e0\"\n+version = \"0.73.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#45bee40f338c631bff4a799288101ba328c7ad36\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -125,17 +125,17 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-native\"\n-version = \"0.72.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#8e43e96410a14143d368273cf1e708f8094bb8e0\"\n+version = \"0.73.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#45bee40f338c631bff4a799288101ba328c7ad36\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"target-lexicon\",\n ]\n \n [[package]]\n name = \"cranelift-object\"\n-version = \"0.72.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#8e43e96410a14143d368273cf1e708f8094bb8e0\"\n+version = \"0.73.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#45bee40f338c631bff4a799288101ba328c7ad36\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -334,9 +334,9 @@ dependencies = [\n \n [[package]]\n name = \"target-lexicon\"\n-version = \"0.11.2\"\n+version = \"0.12.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"422045212ea98508ae3d28025bc5aaa2bd4a9cdaecd442a08da2ee620ee9ea95\"\n+checksum = \"64ae3b39281e4b14b8123bdbaddd472b7dfe215e444181f2f9d2443c2444f834\"\n \n [[package]]\n name = \"thiserror\""}, {"sha": "248540cf1a3a503a808aa65afa2f77d89ad0c433", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=542e73e8ac1696e09fd5be277a0dc2aa137b7c4e", "patch": "@@ -9,12 +9,12 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n # These have to be in sync with each other\n-cranelift-codegen = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\", features = [\"unwind\", \"x64\"] }\n+cranelift-codegen = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\", features = [\"unwind\"] }\n cranelift-frontend = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\" }\n cranelift-module = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\" }\n cranelift-jit = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\", optional = true }\n cranelift-object = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\" }\n-target-lexicon = \"0.11.0\"\n+target-lexicon = \"0.12.0\"\n gimli = { version = \"0.23.0\", default-features = false, features = [\"write\"]}\n object = { version = \"0.23.0\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"archive\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n "}, {"sha": "47abe2d1de80057ab3dc3c0d9d38e8e162957985", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=542e73e8ac1696e09fd5be277a0dc2aa137b7c4e", "patch": "@@ -296,6 +296,11 @@ fn main() {\n     unsafe {\n         global_asm_test();\n     }\n+\n+    // Both statics have a reference that points to the same anonymous allocation.\n+    static REF1: &u8 = &42;\n+    static REF2: &u8 = REF1;\n+    assert_eq!(*REF1, *REF2);\n }\n \n #[cfg(all(not(jit), target_os = \"linux\"))]"}, {"sha": "6a76f3a72144575f46f699b69a15ce842dfa6332", "filename": "scripts/test_rustc_tests.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/scripts%2Ftest_rustc_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/scripts%2Ftest_rustc_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftest_rustc_tests.sh?ref=542e73e8ac1696e09fd5be277a0dc2aa137b7c4e", "patch": "@@ -47,6 +47,7 @@ rm src/test/ui/issues/issue-51947.rs # same\n rm src/test/ui/numbers-arithmetic/saturating-float-casts.rs # intrinsic gives different but valid result\n rm src/test/ui/mir/mir_misc_casts.rs # depends on deduplication of constants\n rm src/test/ui/mir/mir_raw_fat_ptr.rs # same\n+rm src/test/ui/consts/issue-33537.rs # same\n rm src/test/ui/async-await/async-fn-size-moved-locals.rs # -Cpanic=abort shrinks some generator by one byte\n rm src/test/ui/async-await/async-fn-size-uninit-locals.rs # same\n rm src/test/ui/generator/size-moved-locals.rs # same"}, {"sha": "3a5b2be462a939bca15646451d5d824991dd10f4", "filename": "src/base.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=542e73e8ac1696e09fd5be277a0dc2aa137b7c4e", "patch": "@@ -6,6 +6,7 @@ use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::layout::FnAbiExt;\n use rustc_target::abi::call::FnAbi;\n \n+use crate::constant::ConstantCx;\n use crate::prelude::*;\n \n pub(crate) fn codegen_fn<'tcx>(cx: &mut crate::CodegenCx<'_, 'tcx>, instance: Instance<'tcx>) {\n@@ -18,9 +19,9 @@ pub(crate) fn codegen_fn<'tcx>(cx: &mut crate::CodegenCx<'_, 'tcx>, instance: In\n     let mir = tcx.instance_mir(instance.def);\n \n     // Declare function\n-    let name = tcx.symbol_name(instance).name.to_string();\n+    let symbol_name = tcx.symbol_name(instance);\n     let sig = get_function_sig(tcx, cx.module.isa().triple(), instance);\n-    let func_id = cx.module.declare_function(&name, Linkage::Local, &sig).unwrap();\n+    let func_id = cx.module.declare_function(symbol_name.name, Linkage::Local, &sig).unwrap();\n \n     cx.cached_context.clear();\n \n@@ -46,8 +47,11 @@ pub(crate) fn codegen_fn<'tcx>(cx: &mut crate::CodegenCx<'_, 'tcx>, instance: In\n         cx,\n         tcx,\n         pointer_type,\n+        vtables: FxHashMap::default(),\n+        constants_cx: ConstantCx::new(),\n \n         instance,\n+        symbol_name,\n         mir,\n         fn_abi: Some(FnAbi::of_instance(&RevealAllLayoutCx(tcx), instance, &[])),\n \n@@ -90,6 +94,8 @@ pub(crate) fn codegen_fn<'tcx>(cx: &mut crate::CodegenCx<'_, 'tcx>, instance: In\n     let source_info_set = fx.source_info_set;\n     let local_map = fx.local_map;\n \n+    fx.constants_cx.finalize(fx.tcx, &mut *fx.cx.module);\n+\n     // Store function in context\n     let context = &mut cx.cached_context;\n     context.func = func;\n@@ -151,7 +157,7 @@ pub(crate) fn codegen_fn<'tcx>(cx: &mut crate::CodegenCx<'_, 'tcx>, instance: In\n             debug_context.define_function(\n                 instance,\n                 func_id,\n-                &name,\n+                symbol_name.name,\n                 isa,\n                 context,\n                 &source_info_set,"}, {"sha": "6752bb42dc8704139f32c99c4bb8f213314a80fe", "filename": "src/common.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=542e73e8ac1696e09fd5be277a0dc2aa137b7c4e", "patch": "@@ -1,8 +1,10 @@\n use rustc_index::vec::IndexVec;\n+use rustc_middle::ty::SymbolName;\n use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::{Integer, Primitive};\n use rustc_target::spec::{HasTargetSpec, Target};\n \n+use crate::constant::ConstantCx;\n use crate::prelude::*;\n \n pub(crate) fn pointer_ty(tcx: TyCtxt<'_>) -> types::Type {\n@@ -230,8 +232,11 @@ pub(crate) struct FunctionCx<'m, 'clif, 'tcx> {\n     pub(crate) cx: &'clif mut crate::CodegenCx<'m, 'tcx>,\n     pub(crate) tcx: TyCtxt<'tcx>,\n     pub(crate) pointer_type: Type, // Cached from module\n+    pub(crate) vtables: FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n+    pub(crate) constants_cx: ConstantCx,\n \n     pub(crate) instance: Instance<'tcx>,\n+    pub(crate) symbol_name: SymbolName<'tcx>,\n     pub(crate) mir: &'tcx Body<'tcx>,\n     pub(crate) fn_abi: Option<FnAbi<'tcx, Ty<'tcx>>>,\n "}, {"sha": "339580eb8f4e41bfe400e112a374f9c4855c8e5f", "filename": "src/constant.rs", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=542e73e8ac1696e09fd5be277a0dc2aa137b7c4e", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_span::DUMMY_SP;\n \n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::ErrorReported;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n@@ -13,12 +13,12 @@ use rustc_middle::ty::ConstKind;\n use cranelift_codegen::ir::GlobalValueData;\n use cranelift_module::*;\n \n-use crate::prelude::*;\n+use crate::{prelude::*, CodegenCx};\n \n-#[derive(Default)]\n pub(crate) struct ConstantCx {\n     todo: Vec<TodoItem>,\n     done: FxHashSet<DataId>,\n+    anon_allocs: FxHashMap<AllocId, DataId>,\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -28,6 +28,10 @@ enum TodoItem {\n }\n \n impl ConstantCx {\n+    pub(crate) fn new() -> Self {\n+        ConstantCx { todo: vec![], done: FxHashSet::default(), anon_allocs: FxHashMap::default() }\n+    }\n+\n     pub(crate) fn finalize(mut self, tcx: TyCtxt<'_>, module: &mut dyn Module) {\n         //println!(\"todo {:?}\", self.todo);\n         define_all_allocs(tcx, module, &mut self);\n@@ -74,8 +78,10 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n     all_constants_ok\n }\n \n-pub(crate) fn codegen_static(constants_cx: &mut ConstantCx, def_id: DefId) {\n+pub(crate) fn codegen_static(cx: &mut CodegenCx<'_, '_>, def_id: DefId) {\n+    let mut constants_cx = ConstantCx::new();\n     constants_cx.todo.push(TodoItem::Static(def_id));\n+    constants_cx.finalize(cx.tcx, &mut *cx.module);\n }\n \n pub(crate) fn codegen_tls_ref<'tcx>(\n@@ -182,9 +188,13 @@ pub(crate) fn codegen_const_value<'tcx>(\n                     let alloc_kind = fx.tcx.get_global_alloc(ptr.alloc_id);\n                     let base_addr = match alloc_kind {\n                         Some(GlobalAlloc::Memory(alloc)) => {\n-                            fx.cx.constants_cx.todo.push(TodoItem::Alloc(ptr.alloc_id));\n-                            let data_id =\n-                                data_id_for_alloc_id(fx.cx.module, ptr.alloc_id, alloc.mutability);\n+                            fx.constants_cx.todo.push(TodoItem::Alloc(ptr.alloc_id));\n+                            let data_id = data_id_for_alloc_id(\n+                                &mut fx.constants_cx,\n+                                fx.cx.module,\n+                                ptr.alloc_id,\n+                                alloc.mutability,\n+                            );\n                             let local_data_id =\n                                 fx.cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n                             if fx.clif_comments.enabled() {\n@@ -243,8 +253,9 @@ fn pointer_for_allocation<'tcx>(\n     alloc: &'tcx Allocation,\n ) -> crate::pointer::Pointer {\n     let alloc_id = fx.tcx.create_memory_alloc(alloc);\n-    fx.cx.constants_cx.todo.push(TodoItem::Alloc(alloc_id));\n-    let data_id = data_id_for_alloc_id(fx.cx.module, alloc_id, alloc.mutability);\n+    fx.constants_cx.todo.push(TodoItem::Alloc(alloc_id));\n+    let data_id =\n+        data_id_for_alloc_id(&mut fx.constants_cx, &mut *fx.cx.module, alloc_id, alloc.mutability);\n \n     let local_data_id = fx.cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     if fx.clif_comments.enabled() {\n@@ -255,18 +266,14 @@ fn pointer_for_allocation<'tcx>(\n }\n \n fn data_id_for_alloc_id(\n+    cx: &mut ConstantCx,\n     module: &mut dyn Module,\n     alloc_id: AllocId,\n     mutability: rustc_hir::Mutability,\n ) -> DataId {\n-    module\n-        .declare_data(\n-            &format!(\".L__alloc_{:x}\", alloc_id.0),\n-            Linkage::Local,\n-            mutability == rustc_hir::Mutability::Mut,\n-            false,\n-        )\n-        .unwrap()\n+    *cx.anon_allocs.entry(alloc_id).or_insert_with(|| {\n+        module.declare_anonymous_data(mutability == rustc_hir::Mutability::Mut, false).unwrap()\n+    })\n }\n \n fn data_id_for_static(\n@@ -344,7 +351,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                     GlobalAlloc::Memory(alloc) => alloc,\n                     GlobalAlloc::Function(_) | GlobalAlloc::Static(_) => unreachable!(),\n                 };\n-                let data_id = data_id_for_alloc_id(module, alloc_id, alloc.mutability);\n+                let data_id = data_id_for_alloc_id(cx, module, alloc_id, alloc.mutability);\n                 (data_id, alloc, None)\n             }\n             TodoItem::Static(def_id) => {\n@@ -397,7 +404,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                 }\n                 GlobalAlloc::Memory(target_alloc) => {\n                     cx.todo.push(TodoItem::Alloc(reloc));\n-                    data_id_for_alloc_id(module, reloc, target_alloc.mutability)\n+                    data_id_for_alloc_id(cx, module, reloc, target_alloc.mutability)\n                 }\n                 GlobalAlloc::Static(def_id) => {\n                     if tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::THREAD_LOCAL)\n@@ -419,8 +426,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n             data_ctx.write_data_addr(offset.bytes() as u32, global_value, addend as i64);\n         }\n \n-        // FIXME don't duplicate definitions in lazy jit mode\n-        let _ = module.define_data(data_id, &data_ctx);\n+        module.define_data(data_id, &data_ctx).unwrap();\n         cx.done.insert(data_id);\n     }\n "}, {"sha": "1f731a756ed1548cf3495551a52be7ecf5a62c33", "filename": "src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=542e73e8ac1696e09fd5be277a0dc2aa137b7c4e", "patch": "@@ -121,9 +121,7 @@ fn module_codegen(\n             MonoItem::Fn(inst) => {\n                 cx.tcx.sess.time(\"codegen fn\", || crate::base::codegen_fn(&mut cx, inst));\n             }\n-            MonoItem::Static(def_id) => {\n-                crate::constant::codegen_static(&mut cx.constants_cx, def_id)\n-            }\n+            MonoItem::Static(def_id) => crate::constant::codegen_static(&mut cx, def_id),\n             MonoItem::GlobalAsm(item_id) => {\n                 let item = cx.tcx.hir().item(item_id);\n                 if let rustc_hir::ItemKind::GlobalAsm(rustc_hir::GlobalAsm { asm }) = item.kind {"}, {"sha": "ffe449115b96776c07feb5863b2c81cf3eaf027d", "filename": "src/driver/jit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=542e73e8ac1696e09fd5be277a0dc2aa137b7c4e", "patch": "@@ -58,7 +58,7 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n                     CodegenMode::JitLazy => codegen_shim(&mut cx, inst),\n                 },\n                 MonoItem::Static(def_id) => {\n-                    crate::constant::codegen_static(&mut cx.constants_cx, def_id);\n+                    crate::constant::codegen_static(&mut cx, def_id);\n                 }\n                 MonoItem::GlobalAsm(item_id) => {\n                     let item = cx.tcx.hir().item(item_id);"}, {"sha": "7187bc785e46d3af7d045b078d6e85fa912d548a", "filename": "src/inline_asm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=542e73e8ac1696e09fd5be277a0dc2aa137b7c4e", "patch": "@@ -92,8 +92,7 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n \n     let inline_asm_index = fx.inline_asm_index;\n     fx.inline_asm_index += 1;\n-    let asm_name =\n-        format!(\"{}__inline_asm_{}\", fx.tcx.symbol_name(fx.instance).name, inline_asm_index);\n+    let asm_name = format!(\"{}__inline_asm_{}\", fx.symbol_name, inline_asm_index);\n \n     let generated_asm = generate_asm_wrapper(\n         &asm_name,"}, {"sha": "f94c9c1dab540257f34470bfbe567d1332cbba81", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=542e73e8ac1696e09fd5be277a0dc2aa137b7c4e", "patch": "@@ -36,7 +36,6 @@ use rustc_session::Session;\n use cranelift_codegen::settings::{self, Configurable};\n \n pub use crate::config::*;\n-use crate::constant::ConstantCx;\n use crate::prelude::*;\n \n mod abi;\n@@ -123,9 +122,7 @@ struct CodegenCx<'m, 'tcx: 'm> {\n     tcx: TyCtxt<'tcx>,\n     module: &'m mut dyn Module,\n     global_asm: String,\n-    constants_cx: ConstantCx,\n     cached_context: Context,\n-    vtables: FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n     debug_context: Option<DebugContext<'tcx>>,\n     unwind_context: UnwindContext<'tcx>,\n }\n@@ -148,16 +145,13 @@ impl<'m, 'tcx> CodegenCx<'m, 'tcx> {\n             tcx,\n             module,\n             global_asm: String::new(),\n-            constants_cx: ConstantCx::default(),\n             cached_context: Context::new(),\n-            vtables: FxHashMap::default(),\n             debug_context,\n             unwind_context,\n         }\n     }\n \n     fn finalize(self) -> (String, Option<DebugContext<'tcx>>, UnwindContext<'tcx>) {\n-        self.constants_cx.finalize(self.tcx, self.module);\n         (self.global_asm, self.debug_context, self.unwind_context)\n     }\n }"}, {"sha": "4e52fb161211c7b3f760d0dc14b699228d9e97cb", "filename": "src/trap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=542e73e8ac1696e09fd5be277a0dc2aa137b7c4e", "patch": "@@ -21,8 +21,7 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, '_>, msg: &str) {\n         fx.add_comment(puts, \"puts\");\n     }\n \n-    let symbol_name = fx.tcx.symbol_name(fx.instance);\n-    let real_msg = format!(\"trap at {:?} ({}): {}\\0\", fx.instance, symbol_name, msg);\n+    let real_msg = format!(\"trap at {:?} ({}): {}\\0\", fx.instance, fx.symbol_name, msg);\n     let msg_ptr = fx.anonymous_str(\"trap\", &real_msg);\n     fx.bcx.ins().call(puts, &[msg_ptr]);\n }"}, {"sha": "60bc53024a7e3ff02504e450a30ae152ac7b590c", "filename": "src/vtable.rs", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/542e73e8ac1696e09fd5be277a0dc2aa137b7c4e/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=542e73e8ac1696e09fd5be277a0dc2aa137b7c4e", "patch": "@@ -72,11 +72,11 @@ pub(crate) fn get_vtable<'tcx>(\n     layout: TyAndLayout<'tcx>,\n     trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n ) -> Value {\n-    let data_id = if let Some(data_id) = fx.cx.vtables.get(&(layout.ty, trait_ref)) {\n+    let data_id = if let Some(data_id) = fx.vtables.get(&(layout.ty, trait_ref)) {\n         *data_id\n     } else {\n         let data_id = build_vtable(fx, layout, trait_ref);\n-        fx.cx.vtables.insert((layout.ty, trait_ref), data_id);\n+        fx.vtables.insert((layout.ty, trait_ref), data_id);\n         data_id\n     };\n \n@@ -139,27 +139,9 @@ fn build_vtable<'tcx>(\n \n     data_ctx.set_align(fx.tcx.data_layout.pointer_align.pref.bytes());\n \n-    let data_id = fx\n-        .cx\n-        .module\n-        .declare_data(\n-            &format!(\n-                \"__vtable.{}.for.{:?}.{}\",\n-                trait_ref\n-                    .as_ref()\n-                    .map(|trait_ref| format!(\"{:?}\", trait_ref.skip_binder()).into())\n-                    .unwrap_or(std::borrow::Cow::Borrowed(\"???\")),\n-                layout.ty,\n-                fx.cx.vtables.len(),\n-            ),\n-            Linkage::Local,\n-            false,\n-            false,\n-        )\n-        .unwrap();\n-\n-    // FIXME don't duplicate definitions in lazy jit mode\n-    let _ = fx.cx.module.define_data(data_id, &data_ctx);\n+    let data_id = fx.cx.module.declare_anonymous_data(false, false).unwrap();\n+\n+    fx.cx.module.define_data(data_id, &data_ctx).unwrap();\n \n     data_id\n }"}]}