{"sha": "78ebcaa5263e0fd4c4ec89da648d8386c034ce84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZWJjYWE1MjYzZTBmZDRjNGVjODlkYTY0OGQ4Mzg2YzAzNGNlODQ=", "commit": {"author": {"name": "xd009642", "email": "danielmckenna93@gmail.com", "date": "2019-07-28T08:31:05Z"}, "committer": {"name": "xd009642", "email": "danielmckenna93@gmail.com", "date": "2019-07-28T08:31:05Z"}, "message": "Fix dogfood test", "tree": {"sha": "88a5e7142c6e9400d858cc95d027cfab8ee5282e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88a5e7142c6e9400d858cc95d027cfab8ee5282e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78ebcaa5263e0fd4c4ec89da648d8386c034ce84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78ebcaa5263e0fd4c4ec89da648d8386c034ce84", "html_url": "https://github.com/rust-lang/rust/commit/78ebcaa5263e0fd4c4ec89da648d8386c034ce84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78ebcaa5263e0fd4c4ec89da648d8386c034ce84/comments", "author": {"login": "xd009642", "id": 3472518, "node_id": "MDQ6VXNlcjM0NzI1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3472518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xd009642", "html_url": "https://github.com/xd009642", "followers_url": "https://api.github.com/users/xd009642/followers", "following_url": "https://api.github.com/users/xd009642/following{/other_user}", "gists_url": "https://api.github.com/users/xd009642/gists{/gist_id}", "starred_url": "https://api.github.com/users/xd009642/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xd009642/subscriptions", "organizations_url": "https://api.github.com/users/xd009642/orgs", "repos_url": "https://api.github.com/users/xd009642/repos", "events_url": "https://api.github.com/users/xd009642/events{/privacy}", "received_events_url": "https://api.github.com/users/xd009642/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xd009642", "id": 3472518, "node_id": "MDQ6VXNlcjM0NzI1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3472518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xd009642", "html_url": "https://github.com/xd009642", "followers_url": "https://api.github.com/users/xd009642/followers", "following_url": "https://api.github.com/users/xd009642/following{/other_user}", "gists_url": "https://api.github.com/users/xd009642/gists{/gist_id}", "starred_url": "https://api.github.com/users/xd009642/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xd009642/subscriptions", "organizations_url": "https://api.github.com/users/xd009642/orgs", "repos_url": "https://api.github.com/users/xd009642/repos", "events_url": "https://api.github.com/users/xd009642/events{/privacy}", "received_events_url": "https://api.github.com/users/xd009642/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03c543515ad3c963f801c65da8f8bb6a4e0a35da", "url": "https://api.github.com/repos/rust-lang/rust/commits/03c543515ad3c963f801c65da8f8bb6a4e0a35da", "html_url": "https://github.com/rust-lang/rust/commit/03c543515ad3c963f801c65da8f8bb6a4e0a35da"}], "stats": {"total": 10, "additions": 3, "deletions": 7}, "files": [{"sha": "6fc5939a216026c0b0b20ecf9740461434e5365f", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/78ebcaa5263e0fd4c4ec89da648d8386c034ce84/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78ebcaa5263e0fd4c4ec89da648d8386c034ce84/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=78ebcaa5263e0fd4c4ec89da648d8386c034ce84", "patch": "@@ -438,7 +438,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(fun);\n                 self.hash_exprs(args);\n             },\n-            ExprKind::Cast(ref e, ref ty) => {\n+            ExprKind::Cast(ref e, ref ty) | ExprKind::Type(ref e, ref ty) => {\n                 self.hash_expr(e);\n                 self.hash_ty(ty);\n             },\n@@ -518,10 +518,6 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             ExprKind::Array(ref v) => {\n                 self.hash_exprs(v);\n             },\n-            ExprKind::Type(ref e, ref ty) => {\n-                self.hash_expr(e);\n-                self.hash_ty(ty);\n-            },\n             ExprKind::Unary(lop, ref le) => {\n                 lop.hash(&mut self.s);\n                 self.hash_expr(le);\n@@ -585,7 +581,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n     pub fn hash_lifetime(&mut self, lifetime: &Lifetime) {\n         std::mem::discriminant(&lifetime.name).hash(&mut self.s);\n         if let LifetimeName::Param(ref name) = lifetime.name {\n-            std::mem::discriminant(&name).hash(&mut self.s);\n+            std::mem::discriminant(name).hash(&mut self.s);\n             match name {\n                 ParamName::Plain(ref ident) => {\n                     ident.name.hash(&mut self.s);\n@@ -603,7 +599,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n     }\n \n     pub fn hash_tykind(&mut self, ty: &TyKind) {\n-        std::mem::discriminant(&ty).hash(&mut self.s);\n+        std::mem::discriminant(ty).hash(&mut self.s);\n         match ty {\n             TyKind::Slice(ty) => {\n                 self.hash_ty(ty);"}]}