{"sha": "8edbbc45f7d2ec2d61a9a7a5d9b4d968810cbce6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZGJiYzQ1ZjdkMmVjMmQ2MWE5YTdhNWQ5YjRkOTY4ODEwY2JjZTY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-11-12T20:36:31Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-16T11:04:34Z"}, "message": "Implement local reading for locals on stack", "tree": {"sha": "921c2e41c27f196e5245614fd5dc28579cdb7917", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/921c2e41c27f196e5245614fd5dc28579cdb7917"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8edbbc45f7d2ec2d61a9a7a5d9b4d968810cbce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8edbbc45f7d2ec2d61a9a7a5d9b4d968810cbce6", "html_url": "https://github.com/rust-lang/rust/commit/8edbbc45f7d2ec2d61a9a7a5d9b4d968810cbce6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8edbbc45f7d2ec2d61a9a7a5d9b4d968810cbce6/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8e9148c2e07be8c2d65d87d84a88e9fd5a63c39", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8e9148c2e07be8c2d65d87d84a88e9fd5a63c39", "html_url": "https://github.com/rust-lang/rust/commit/d8e9148c2e07be8c2d65d87d84a88e9fd5a63c39"}], "stats": {"total": 80, "additions": 50, "deletions": 30}, "files": [{"sha": "441d875ef21d4a9de4d63a6afcbbeb28852640b2", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8edbbc45f7d2ec2d61a9a7a5d9b4d968810cbce6/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edbbc45f7d2ec2d61a9a7a5d9b4d968810cbce6/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=8edbbc45f7d2ec2d61a9a7a5d9b4d968810cbce6", "patch": "@@ -17,7 +17,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     let mut debug_context = cx\n         .debug_context\n         .as_mut()\n-        .map(|debug_context| FunctionDebugContext::new(debug_context, instance, func_id, &name, &sig));\n+        .map(|debug_context| FunctionDebugContext::new(debug_context, instance, func_id, &name));\n \n     // Make FunctionBuilder\n     let mut func = Function::with_name_signature(ExternalName::user(0, 0), sig);\n@@ -61,6 +61,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     let instance = fx.instance;\n     let clif_comments = fx.clif_comments;\n     let source_info_set = fx.source_info_set;\n+    let local_map = fx.local_map;\n \n     #[cfg(debug_assertions)]\n     crate::pretty_clif::write_clif_file(cx.tcx, \"unopt\", instance, &func, &clif_comments, None);\n@@ -92,7 +93,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n     let isa = cx.module.isa();\n     debug_context\n         .as_mut()\n-        .map(|x| x.define(context, isa, &source_info_set));\n+        .map(|x| x.define(context, isa, &source_info_set, local_map));\n \n     // Clear context to make it usable for the next function\n     context.clear();"}, {"sha": "e64344bfe6f23399442d85493da45762b3cfecf9", "filename": "src/debuginfo/line_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8edbbc45f7d2ec2d61a9a7a5d9b4d968810cbce6/src%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edbbc45f7d2ec2d61a9a7a5d9b4d968810cbce6/src%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fline_info.rs?ref=8edbbc45f7d2ec2d61a9a7a5d9b4d968810cbce6", "patch": "@@ -5,7 +5,7 @@ use syntax::source_map::FileName;\n use cranelift::codegen::binemit::CodeOffset;\n \n use gimli::write::{\n-    Address, AttributeValue, FileId, LineProgram, LineString, LineStringTable, Range, UnitEntryId,\n+    Address, AttributeValue, FileId, LineProgram, LineString, LineStringTable, UnitEntryId,\n };\n \n fn line_program_add_file("}, {"sha": "1c1e5762bfaa39f340408d7dd16e336469a12fcd", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 46, "deletions": 27, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/8edbbc45f7d2ec2d61a9a7a5d9b4d968810cbce6/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8edbbc45f7d2ec2d61a9a7a5d9b4d968810cbce6/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=8edbbc45f7d2ec2d61a9a7a5d9b4d968810cbce6", "patch": "@@ -172,7 +172,6 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         instance: Instance<'tcx>,\n         func_id: FuncId,\n         name: &str,\n-        _sig: &Signature,\n     ) -> Self {\n         let mir = debug_context.tcx.instance_mir(instance.def);\n \n@@ -235,6 +234,7 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n         context: &Context,\n         isa: &dyn cranelift::codegen::isa::TargetIsa,\n         source_info_set: &indexmap::IndexSet<(Span, mir::SourceScope)>,\n+        local_map: HashMap<mir::Local, CPlace<'tcx>>,\n     ) {\n         let end = self.create_debug_lines(context, isa, source_info_set);\n \n@@ -251,34 +251,53 @@ impl<'a, 'tcx> FunctionDebugContext<'a, 'tcx> {\n \n         let value_labels_ranges = context.build_value_labels_ranges(isa).unwrap();\n \n-        for (value_label, value_loc_ranges) in value_labels_ranges.iter() {\n-            let var_id = self.define_local(mir::Local::from_u32(value_label.as_u32()));\n-\n-            let loc_list = LocationList(\n-                value_loc_ranges\n-                    .iter()\n-                    .map(|value_loc_range| Location::StartEnd {\n-                        begin: Address::Symbol {\n-                            symbol: self.symbol,\n-                            addend: i64::from(value_loc_range.start),\n-                        },\n-                        end: Address::Symbol {\n-                            symbol: self.symbol,\n-                            addend: i64::from(value_loc_range.end),\n-                        },\n-                        data: Expression(\n-                            translate_loc(value_loc_range.loc, &context.func.stack_slots).unwrap(),\n-                        ),\n-                    })\n-                    .collect(),\n-            );\n-            let loc_list_id = self.debug_context.dwarf.unit.locations.add(loc_list);\n+        for (local, _local_decl) in self.mir.local_decls.iter_enumerated() {\n+            let var_id = self.define_local(local);\n+            let value_label = cranelift::codegen::ir::ValueLabel::from_u32(local.as_u32());\n+\n+            let location = match local_map[&local].inner() {\n+                CPlaceInner::Var(_) => {\n+                    if let Some(value_loc_ranges) = value_labels_ranges.get(&value_label) {\n+                        let loc_list = LocationList(\n+                            value_loc_ranges\n+                                .iter()\n+                                .map(|value_loc_range| Location::StartEnd {\n+                                    begin: Address::Symbol {\n+                                        symbol: self.symbol,\n+                                        addend: i64::from(value_loc_range.start),\n+                                    },\n+                                    end: Address::Symbol {\n+                                        symbol: self.symbol,\n+                                        addend: i64::from(value_loc_range.end),\n+                                    },\n+                                    data: Expression(\n+                                        translate_loc(value_loc_range.loc, &context.func.stack_slots).unwrap(),\n+                                    ),\n+                                })\n+                                .collect(),\n+                        );\n+                        let loc_list_id = self.debug_context.dwarf.unit.locations.add(loc_list);\n+\n+                        AttributeValue::LocationListRef(loc_list_id)\n+                    } else {\n+                        // FIXME set value labels for unused locals\n+\n+                        AttributeValue::Exprloc(Expression(vec![]))\n+                    }\n+                }\n+                CPlaceInner::Addr(_, _) => {\n+                    // FIXME implement this (used by arguments and returns)\n+\n+                    AttributeValue::Exprloc(Expression(vec![]))\n+                }\n+                CPlaceInner::Stack(stack_slot) => {\n+                    AttributeValue::Exprloc(Expression(translate_loc(ValueLoc::Stack(*stack_slot), &context.func.stack_slots).unwrap()))\n+                }\n+                CPlaceInner::NoPlace => AttributeValue::Exprloc(Expression(vec![])),\n+            };\n \n             let var_entry = self.debug_context.dwarf.unit.get_mut(var_id);\n-            var_entry.set(\n-                gimli::DW_AT_location,\n-                AttributeValue::LocationListRef(loc_list_id),\n-            );\n+            var_entry.set(gimli::DW_AT_location, location);\n         }\n     }\n }"}]}