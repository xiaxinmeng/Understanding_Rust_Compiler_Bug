{"sha": "9939de24ac3580acfb92670f9bd568f90052340b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MzlkZTI0YWMzNTgwYWNmYjkyNjcwZjliZDU2OGY5MDA1MjM0MGI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-01-21T20:46:21Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-02-22T00:27:44Z"}, "message": "Correct passing of `generic_args` to `create_substs_for_generic_args`", "tree": {"sha": "deed81b6d905c672e892fb206174b879dfb18ef0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deed81b6d905c672e892fb206174b879dfb18ef0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9939de24ac3580acfb92670f9bd568f90052340b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9939de24ac3580acfb92670f9bd568f90052340b", "html_url": "https://github.com/rust-lang/rust/commit/9939de24ac3580acfb92670f9bd568f90052340b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9939de24ac3580acfb92670f9bd568f90052340b/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d232acdb398c5837f2c95ffe6c38970059451445", "url": "https://api.github.com/repos/rust-lang/rust/commits/d232acdb398c5837f2c95ffe6c38970059451445", "html_url": "https://github.com/rust-lang/rust/commit/d232acdb398c5837f2c95ffe6c38970059451445"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "a1440c3e2895cc70f9c6f4462bb2d0132aa940b9", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9939de24ac3580acfb92670f9bd568f90052340b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9939de24ac3580acfb92670f9bd568f90052340b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=9939de24ac3580acfb92670f9bd568f90052340b", "patch": "@@ -693,7 +693,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             self_ty.is_some(),\n             self_ty,\n             // Provide the generic args, and whether types should be inferred.\n-            |_| (Some(generic_args), infer_args),\n+            |did| {\n+                if did == def_id {\n+                    (Some(generic_args), infer_args)\n+                } else {\n+                    // The last component of this tuple is unimportant.\n+                    (None, false)\n+                }\n+            },\n             // Provide substitutions for parameters for which (valid) arguments have been provided.\n             |param, arg| match (&param.kind, arg) {\n                 (GenericParamDefKind::Lifetime, GenericArg::Lifetime(lt)) => {"}, {"sha": "04cbee8c94061ac77e946e285b09591759deb85a", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9939de24ac3580acfb92670f9bd568f90052340b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9939de24ac3580acfb92670f9bd568f90052340b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=9939de24ac3580acfb92670f9bd568f90052340b", "patch": "@@ -314,9 +314,14 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n             false,\n             None,\n             // Provide the generic args, and whether types should be inferred.\n-            |_| {\n-                // The last argument of the returned tuple here is unimportant.\n-                if let Some(ref data) = seg.args { (Some(data), false) } else { (None, false) }\n+            |def_id| {\n+                // The last component of the returned tuple here is unimportant.\n+                if def_id == pick.item.def_id {\n+                    if let Some(ref data) = seg.args {\n+                        return (Some(data), false);\n+                    }\n+                }\n+                (None, false)\n             },\n             // Provide substitutions for parameters for which (valid) arguments have been provided.\n             |param, arg| match (&param.kind, arg) {"}]}