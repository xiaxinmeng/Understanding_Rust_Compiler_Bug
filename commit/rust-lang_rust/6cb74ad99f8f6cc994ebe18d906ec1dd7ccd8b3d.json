{"sha": "6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYjc0YWQ5OWY4ZjZjYzk5NGViZTE4ZDkwNmVjMWRkN2NjZDhiM2Q=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-02T17:57:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-02T17:57:32Z"}, "message": "Rollup merge of #83673 - hi-rustin:rustin-patch-suggestion, r=estebank\n\ngive full path of constraint in suggest_constraining_type_param\n\nclose https://github.com/rust-lang/rust/issues/83513", "tree": {"sha": "0c7dae9869d3e9fd19f6ffb4456aecc4d9268355", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c7dae9869d3e9fd19f6ffb4456aecc4d9268355"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZ1sNCRBK7hj4Ov3rIwAAdHIIAGQsRExQEGtqjhXTJwxngLo2\njHFv758WSanDn/EAgIAKsuxdg4qXt/BVMJ3ylC2/XnIXiCKVtpT4wkvq2oYj5Znb\nZSdMRSOaVcj+syqE6DNwfXRPyrV1gPKO6KI3t0yZLCVbU3hKf43L5bL/Aq2AURlT\n9XX2lW2Y0QVR09sN7bpflPlEnNmZAQ5Wpmm+WMwuArYjKyUm03/rUxZP8/GVk76N\nvckywwSYlTGRYv9v4iAseyiwvsKICV8AsUjVxlkyZ0a/df8DnZoy4VyDTfKPXZgf\nNPVg4Y6ukmlEGKUMlNZR/qdNlI+Bj51sCs48OKm1N5U956zKR++nj6WLSjiLoS8=\n=hjc9\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c7dae9869d3e9fd19f6ffb4456aecc4d9268355\nparent 542f441d445026d0996eebee9ddddee98f5dc3e5\nparent 8f7735624924e3399a1abee68615a99072347cc9\nauthor Dylan DPC <dylan.dpc@gmail.com> 1617386252 +0200\ncommitter GitHub <noreply@github.com> 1617386252 +0200\n\nRollup merge of #83673 - hi-rustin:rustin-patch-suggestion, r=estebank\n\ngive full path of constraint in suggest_constraining_type_param\n\nclose https://github.com/rust-lang/rust/issues/83513\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "html_url": "https://github.com/rust-lang/rust/commit/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "542f441d445026d0996eebee9ddddee98f5dc3e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/542f441d445026d0996eebee9ddddee98f5dc3e5", "html_url": "https://github.com/rust-lang/rust/commit/542f441d445026d0996eebee9ddddee98f5dc3e5"}, {"sha": "8f7735624924e3399a1abee68615a99072347cc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f7735624924e3399a1abee68615a99072347cc9", "html_url": "https://github.com/rust-lang/rust/commit/8f7735624924e3399a1abee68615a99072347cc9"}], "stats": {"total": 496, "additions": 249, "deletions": 247}, "files": [{"sha": "2b8c8d369738432190929873367922a5450580af", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -28,6 +28,7 @@ use std::fmt;\n \n use super::InferCtxtPrivExt;\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n \n #[derive(Debug)]\n pub enum GeneratorInteriorOrUpvar {\n@@ -440,7 +441,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 {\n                     // Missing generic type parameter bound.\n                     let param_name = self_ty.to_string();\n-                    let constraint = trait_ref.print_only_trait_path().to_string();\n+                    let constraint =\n+                        with_no_trimmed_paths(|| trait_ref.print_only_trait_path().to_string());\n                     if suggest_constraining_type_param(\n                         self.tcx,\n                         generics,"}, {"sha": "af4e6f0a5c161fb342658e45e577a432eb74c57d", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -31,8 +31,8 @@ LL |     type Bar: Clone = Vec<T>;\n    = note: required because of the requirements on the impl of `Clone` for `Vec<T>`\n help: consider restricting type parameter `T`\n    |\n-LL | trait Foo<T: Clone> {\n-   |            ^^^^^^^\n+LL | trait Foo<T: std::clone::Clone> {\n+   |            ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `(): Foo<Self>` is not satisfied\n   --> $DIR/defaults-suitability.rs:34:5\n@@ -99,8 +99,8 @@ LL |     type Baz = T;\n    |\n help: consider further restricting type parameter `T`\n    |\n-LL |     Self::Baz: Clone, T: Clone\n-   |                     ^^^^^^^^^^\n+LL |     Self::Baz: Clone, T: std::clone::Clone\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 8 previous errors\n "}, {"sha": "b6122bd54d1622e111b44fa76b578bedb16f2c30", "filename": "src/test/ui/associated-types/issue-27675-unchecked-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL |     copy::<dyn Setup<From=T>>(t)\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | pub fn copy_any<T: Copy>(t: &T) -> T {\n-   |                  ^^^^^^\n+LL | pub fn copy_any<T: std::marker::Copy>(t: &T) -> T {\n+   |                  ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0e653a7d3b22fd531972e7d26fb0119aa180b5e1", "filename": "src/test/ui/associated-types/issue-43784-associated-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL |     type Assoc = T;\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | impl<T: Copy> Complete for T {\n-   |       ^^^^^^\n+LL | impl<T: std::marker::Copy> Complete for T {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5f39cf6dde1258d5cc28f51e82d5a6954c143b3b", "filename": "src/test/ui/async-await/issue-70818.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -11,8 +11,8 @@ LL |     async { (ty, ty1) }\n    |                  ^^^ has type `U` which is not `Send`\n help: consider restricting type parameter `U`\n    |\n-LL | fn foo<T: Send, U: Send>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n-   |                  ^^^^^^\n+LL | fn foo<T: Send, U: std::marker::Send>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n+   |                  ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "fd3999ae6fbeca92d9edcacbfed3794ebf0da4e2", "filename": "src/test/ui/bad/bad-method-typaram-kind.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -6,8 +6,8 @@ LL |     1.bar::<T>();\n    |\n help: consider further restricting this bound\n    |\n-LL | fn foo<T:'static + Send>() {\n-   |                  ^^^^^^\n+LL | fn foo<T:'static + std::marker::Send>() {\n+   |                  ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "31fdd2b67e2944ba0a56675e9248539ad96362c9", "filename": "src/test/ui/bound-suggestions.fixed", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fbound-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fbound-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.fixed?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -5,37 +5,37 @@ use std::fmt::Debug;\n // Rustfix should add this, or use `std::fmt::Debug` instead.\n \n #[allow(dead_code)]\n-fn test_impl(t: impl Sized + Debug) {\n+fn test_impl(t: impl Sized + std::fmt::Debug) {\n     println!(\"{:?}\", t);\n     //~^ ERROR doesn't implement\n }\n \n #[allow(dead_code)]\n-fn test_no_bounds<T: Debug>(t: T) {\n+fn test_no_bounds<T: std::fmt::Debug>(t: T) {\n     println!(\"{:?}\", t);\n     //~^ ERROR doesn't implement\n }\n \n #[allow(dead_code)]\n-fn test_one_bound<T: Sized + Debug>(t: T) {\n+fn test_one_bound<T: Sized + std::fmt::Debug>(t: T) {\n     println!(\"{:?}\", t);\n     //~^ ERROR doesn't implement\n }\n \n #[allow(dead_code)]\n-fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug, Y: Debug {\n+fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug, Y: std::fmt::Debug {\n     println!(\"{:?} {:?}\", x, y);\n     //~^ ERROR doesn't implement\n }\n \n #[allow(dead_code)]\n-fn test_one_bound_where<X>(x: X) where X: Sized + Debug {\n+fn test_one_bound_where<X>(x: X) where X: Sized + std::fmt::Debug {\n     println!(\"{:?}\", x);\n     //~^ ERROR doesn't implement\n }\n \n #[allow(dead_code)]\n-fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized, X: Debug {\n+fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized, X: std::fmt::Debug {\n     println!(\"{:?}\", x);\n     //~^ ERROR doesn't implement\n }"}, {"sha": "ebf43bdb2717cc2a34f691171ecbb6975c7b9b0b", "filename": "src/test/ui/bound-suggestions.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -8,8 +8,8 @@ LL |     println!(\"{:?}\", t);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |\n-LL | fn test_impl(t: impl Sized + Debug) {\n-   |                            ^^^^^^^\n+LL | fn test_impl(t: impl Sized + std::fmt::Debug) {\n+   |                            ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `Debug`\n   --> $DIR/bound-suggestions.rs:15:22\n@@ -21,8 +21,8 @@ LL |     println!(\"{:?}\", t);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n-LL | fn test_no_bounds<T: Debug>(t: T) {\n-   |                    ^^^^^^^\n+LL | fn test_no_bounds<T: std::fmt::Debug>(t: T) {\n+   |                    ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `Debug`\n   --> $DIR/bound-suggestions.rs:21:22\n@@ -34,8 +34,8 @@ LL |     println!(\"{:?}\", t);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |\n-LL | fn test_one_bound<T: Sized + Debug>(t: T) {\n-   |                            ^^^^^^^\n+LL | fn test_one_bound<T: Sized + std::fmt::Debug>(t: T) {\n+   |                            ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `Y` doesn't implement `Debug`\n   --> $DIR/bound-suggestions.rs:27:30\n@@ -47,8 +47,8 @@ LL |     println!(\"{:?} {:?}\", x, y);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting type parameter `Y`\n    |\n-LL | fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug, Y: Debug {\n-   |                                                                   ^^^^^^^^^^\n+LL | fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug, Y: std::fmt::Debug {\n+   |                                                                   ^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `X` doesn't implement `Debug`\n   --> $DIR/bound-suggestions.rs:33:22\n@@ -60,8 +60,8 @@ LL |     println!(\"{:?}\", x);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |\n-LL | fn test_one_bound_where<X>(x: X) where X: Sized + Debug {\n-   |                                                 ^^^^^^^\n+LL | fn test_one_bound_where<X>(x: X) where X: Sized + std::fmt::Debug {\n+   |                                                 ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `X` doesn't implement `Debug`\n   --> $DIR/bound-suggestions.rs:39:22\n@@ -73,8 +73,8 @@ LL |     println!(\"{:?}\", x);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting type parameter `X`\n    |\n-LL | fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized, X: Debug {\n-   |                                                            ^^^^^^^^^^\n+LL | fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized, X: std::fmt::Debug {\n+   |                                                            ^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n   --> $DIR/bound-suggestions.rs:44:46"}, {"sha": "7ff986ec38109d78b3829d5cff702a0f851bf95a", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-double-superkind.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -10,8 +10,8 @@ LL | impl <T: Sync+'static> Foo for (T,) { }\n    = note: required because it appears within the type `(T,)`\n help: consider further restricting this bound\n    |\n-LL | impl <T: Sync+'static + Send> Foo for (T,) { }\n-   |                       ^^^^^^\n+LL | impl <T: Sync+'static + std::marker::Send> Foo for (T,) { }\n+   |                       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/builtin-superkinds-double-superkind.rs:9:16\n@@ -25,8 +25,8 @@ LL | impl <T: Send> Foo for (T,T) { }\n    = note: required because it appears within the type `(T, T)`\n help: consider further restricting this bound\n    |\n-LL | impl <T: Send + Sync> Foo for (T,T) { }\n-   |               ^^^^^^\n+LL | impl <T: Send + std::marker::Sync> Foo for (T,T) { }\n+   |               ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "133508d39c105c7d656719c1f6989b60d0c867e0", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-in-metadata.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -12,8 +12,8 @@ LL | pub trait RequiresRequiresShareAndSend : RequiresShare + Send { }\n    = note: required because it appears within the type `X<T>`\n help: consider further restricting this bound\n    |\n-LL | impl <T:Sync+'static + Send> RequiresRequiresShareAndSend for X<T> { }\n-   |                      ^^^^^^\n+LL | impl <T:Sync+'static + std::marker::Send> RequiresRequiresShareAndSend for X<T> { }\n+   |                      ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ad80b3fa8d11f39b97a2ad145e7162d0a988ec65", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-typaram-not-send.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL | impl <T: Sync+'static> Foo for T { }\n    |\n help: consider further restricting this bound\n    |\n-LL | impl <T: Sync+'static + Send> Foo for T { }\n-   |                       ^^^^^^\n+LL | impl <T: Sync+'static + std::marker::Send> Foo for T { }\n+   |                       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "273eae995538a7dc0b62ce3b833d9fb5d9967437", "filename": "src/test/ui/closures/closure-bounds-cant-promote-superkind-in-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n    |\n help: consider further restricting this bound\n    |\n-LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static + Send {\n-   |                                                       ^^^^^^\n+LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static + std::marker::Send {\n+   |                                                       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7df29d5a098a02896f34bdf666fa479421c7b764", "filename": "src/test/ui/closures/closure-bounds-subtype.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL |     take_const_owned(f);\n    |\n help: consider further restricting this bound\n    |\n-LL | fn give_owned<F>(f: F) where F: FnOnce() + Send + Sync {\n-   |                                                 ^^^^^^\n+LL | fn give_owned<F>(f: F) where F: FnOnce() + Send + std::marker::Sync {\n+   |                                                 ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c6088e665a2322be58e28543e63d7ac274441f8f", "filename": "src/test/ui/const-generics/const-argument-if-length.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/const-argument-if-length.rs:7:28\n    |\n LL | pub const fn is_zst<T: ?Sized>() -> usize {\n-   |                     - this type parameter needs to be `Sized`\n+   |                     - this type parameter needs to be `std::marker::Sized`\n LL |     if std::mem::size_of::<T>() == 0 {\n    |                            ^ doesn't have a size known at compile-time\n    | \n@@ -15,7 +15,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/const-argument-if-length.rs:16:12\n    |\n LL | pub struct AtLeastByte<T: ?Sized> {\n-   |                        - this type parameter needs to be `Sized`\n+   |                        - this type parameter needs to be `std::marker::Sized`\n LL |     value: T,\n    |            ^ doesn't have a size known at compile-time\n    |"}, {"sha": "bc06e8d7fb123fb649537a8ca37a92a79b43515a", "filename": "src/test/ui/const-generics/const-argument-if-length.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -11,7 +11,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/const-argument-if-length.rs:16:12\n    |\n LL | pub struct AtLeastByte<T: ?Sized> {\n-   |                        - this type parameter needs to be `Sized`\n+   |                        - this type parameter needs to be `std::marker::Sized`\n LL |     value: T,\n    |            ^ doesn't have a size known at compile-time\n    |"}, {"sha": "ef0cafcb9bb7c54fadb4f8ed8b18bfc829a2bf6b", "filename": "src/test/ui/const-generics/issues/issue-61336-2.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.full.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -16,8 +16,8 @@ LL |     [x; { N }]\n    = note: the `Copy` trait is required because the repeated element will be copied\n help: consider restricting type parameter `T`\n    |\n-LL | fn g<T: Copy, const N: usize>(x: T) -> [T; N] {\n-   |       ^^^^^^\n+LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "e5fe50513aaf7563964ab6cd7baf8b72e7d9a71d", "filename": "src/test/ui/const-generics/issues/issue-61336-2.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.min.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -7,8 +7,8 @@ LL |     [x; { N }]\n    = note: the `Copy` trait is required because the repeated element will be copied\n help: consider restricting type parameter `T`\n    |\n-LL | fn g<T: Copy, const N: usize>(x: T) -> [T; N] {\n-   |       ^^^^^^\n+LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "fcfd39387c2934ead97f87dfa61cd00a396018ea", "filename": "src/test/ui/const-generics/issues/issue-61336.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.full.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -16,8 +16,8 @@ LL |     [x; N]\n    = note: the `Copy` trait is required because the repeated element will be copied\n help: consider restricting type parameter `T`\n    |\n-LL | fn g<T: Copy, const N: usize>(x: T) -> [T; N] {\n-   |       ^^^^^^\n+LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "91580313e1e83b38c637b948774763f45ac5c267", "filename": "src/test/ui/const-generics/issues/issue-61336.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.min.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -7,8 +7,8 @@ LL |     [x; N]\n    = note: the `Copy` trait is required because the repeated element will be copied\n help: consider restricting type parameter `T`\n    |\n-LL | fn g<T: Copy, const N: usize>(x: T) -> [T; N] {\n-   |       ^^^^^^\n+LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2d12265df98ed320faeb3f68f0eecbdce0574b55", "filename": "src/test/ui/dst/dst-object-from-unsized-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/dst-object-from-unsized-type.rs:8:23\n    |\n LL | fn test1<T: ?Sized + Foo>(t: &T) {\n-   |          - this type parameter needs to be `Sized`\n+   |          - this type parameter needs to be `std::marker::Sized`\n LL |     let u: &dyn Foo = t;\n    |                       ^ doesn't have a size known at compile-time\n    |\n@@ -12,7 +12,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/dst-object-from-unsized-type.rs:13:23\n    |\n LL | fn test2<T: ?Sized + Foo>(t: &T) {\n-   |          - this type parameter needs to be `Sized`\n+   |          - this type parameter needs to be `std::marker::Sized`\n LL |     let v: &dyn Foo = t as &dyn Foo;\n    |                       ^ doesn't have a size known at compile-time\n    |"}, {"sha": "4afbde5021f917be1a9d4367dfbb7187a012f151", "filename": "src/test/ui/feature-gates/feature-gate-generic_associated_types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_associated_types.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -69,8 +69,8 @@ LL |     type Pointer2<U32> = Box<U32>;\n    |\n help: consider restricting type parameter `U32`\n    |\n-LL |     type Pointer2<U32: Clone> = Box<U32>;\n-   |                      ^^^^^^^\n+LL |     type Pointer2<U32: std::clone::Clone> = Box<U32>;\n+   |                      ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 8 previous errors\n "}, {"sha": "e3d3de8bf9417d0c2ca1dcd19a8986605a6e0f14", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -51,8 +51,8 @@ LL |     type C where Self: Copy = String;\n    = note: the requirement `Fooy<T>: Copy` appears on the associated impl type but not on the corresponding associated trait type\n help: consider restricting type parameter `T`\n    |\n-LL | impl<T: Copy> Foo for Fooy<T> {\n-   |       ^^^^^^\n+LL | impl<T: std::marker::Copy> Foo for Fooy<T> {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c92800c3746ade2fc44977c3c8133bd124e281b1", "filename": "src/test/ui/generic-associated-types/issue-68641-check-gat-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -18,8 +18,8 @@ LL |     type Item<'a> = T;\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | impl<T: Copy> UnsafeCopy for T {\n-   |       ^^^^^^\n+LL | impl<T: std::marker::Copy> UnsafeCopy for T {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "e44547b10c17bd36a51d38ffdd4c3f32b348c918", "filename": "src/test/ui/generic-associated-types/issue-68642-broken-llvm-ir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -19,8 +19,8 @@ LL |     type F<'a> = Self;\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }`\n help: consider restricting type parameter `T`\n    |\n-LL | impl<T: Fn<()>> Fun for T {\n-   |       ^^^^^^^^\n+LL | impl<T: std::ops::Fn<()>> Fun for T {\n+   |       ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "fd0b4733d935904bfaf9f2f57a6cdeccbdfdc40b", "filename": "src/test/ui/generic-associated-types/issue-68643-broken-mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -19,8 +19,8 @@ LL |     type F<'a> = Self;\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }`\n help: consider restricting type parameter `T`\n    |\n-LL | impl<T: Fn<()>> Fun for T {\n-   |       ^^^^^^^^\n+LL | impl<T: std::ops::Fn<()>> Fun for T {\n+   |       ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "0c23c870f0106059397d9a7b5c67d68f978278d7", "filename": "src/test/ui/generic-associated-types/issue-68644-codegen-selection.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -19,8 +19,8 @@ LL |     type F<'a> = Self;\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }`\n help: consider restricting type parameter `T`\n    |\n-LL | impl<T: Fn<()>> Fun for T {\n-   |       ^^^^^^^^\n+LL | impl<T: std::ops::Fn<()>> Fun for T {\n+   |       ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "85d8d3f8e936e7358575106c198bc0ae9ba259c7", "filename": "src/test/ui/generic-associated-types/issue-68645-codegen-fulfillment.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -19,8 +19,8 @@ LL |     type F<'a> = Self;\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }`\n help: consider restricting type parameter `T`\n    |\n-LL | impl<T: Fn<()>> Fun for T {\n-   |       ^^^^^^^^\n+LL | impl<T: std::ops::Fn<()>> Fun for T {\n+   |       ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "7a7b5fd4f1c557ac7f7f7626d42282b4057f9801", "filename": "src/test/ui/generic-associated-types/issue-74824.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -19,8 +19,8 @@ LL |     type Copy<T>: Copy = Box<T>;\n    = note: required because of the requirements on the impl of `Clone` for `Box<T>`\n help: consider restricting type parameter `T`\n    |\n-LL |     type Copy<T: Clone>: Copy = Box<T>;\n-   |                ^^^^^^^\n+LL |     type Copy<T: std::clone::Clone>: Copy = Box<T>;\n+   |                ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "67a500f34d8e77d8baf667ecfac86cef30c0c4b8", "filename": "src/test/ui/impl-trait/issue-55872-1.full_tait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.full_tait.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -25,8 +25,8 @@ LL |     type E = impl Copy;\n    = note: required because it appears within the type `(S, T)`\n help: consider further restricting this bound\n    |\n-LL | impl<S: Default + Copy> Bar for S {\n-   |                 ^^^^^^\n+LL | impl<S: Default + std::marker::Copy> Bar for S {\n+   |                 ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied in `(S, T)`\n   --> $DIR/issue-55872-1.rs:14:14\n@@ -37,8 +37,8 @@ LL |     type E = impl Copy;\n    = note: required because it appears within the type `(S, T)`\n help: consider further restricting this bound\n    |\n-LL |     fn foo<T: Default + Copy>() -> Self::E {\n-   |                       ^^^^^^\n+LL |     fn foo<T: Default + std::marker::Copy>() -> Self::E {\n+   |                       ^^^^^^^^^^^^^^^^^^^\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n   --> $DIR/issue-55872-1.rs:18:37"}, {"sha": "90225d249d759ff8b13bb085fa10aa1f9650a3fe", "filename": "src/test/ui/impl-trait/issue-55872-1.min_tait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-1.min_tait.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -16,8 +16,8 @@ LL |     type E = impl Copy;\n    = note: required because it appears within the type `(S, T)`\n help: consider further restricting this bound\n    |\n-LL | impl<S: Default + Copy> Bar for S {\n-   |                 ^^^^^^\n+LL | impl<S: Default + std::marker::Copy> Bar for S {\n+   |                 ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied in `(S, T)`\n   --> $DIR/issue-55872-1.rs:14:14\n@@ -28,8 +28,8 @@ LL |     type E = impl Copy;\n    = note: required because it appears within the type `(S, T)`\n help: consider further restricting this bound\n    |\n-LL |     fn foo<T: Default + Copy>() -> Self::E {\n-   |                       ^^^^^^\n+LL |     fn foo<T: Default + std::marker::Copy>() -> Self::E {\n+   |                       ^^^^^^^^^^^^^^^^^^^\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n   --> $DIR/issue-55872-1.rs:18:37"}, {"sha": "5dbcc96e87488440f6c70dec125ae5e6b7740289", "filename": "src/test/ui/issues/issue-27060-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/issue-27060-2.rs:3:11\n    |\n LL | pub struct Bad<T: ?Sized> {\n-   |                - this type parameter needs to be `Sized`\n+   |                - this type parameter needs to be `std::marker::Sized`\n LL |     data: T,\n    |           ^ doesn't have a size known at compile-time\n    |"}, {"sha": "45a2350ddfd0ed0e0403fe6f4013238769751ad3", "filename": "src/test/ui/issues/issue-43784-supertrait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL | impl<T> Complete for T {}\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | impl<T: Copy> Complete for T {}\n-   |       ^^^^^^\n+LL | impl<T: std::marker::Copy> Complete for T {}\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e9002ec36f43d09ce1146bb12b5f9fd9a532d61e", "filename": "src/test/ui/kindck/kindck-impl-type-params.nll.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -8,8 +8,8 @@ LL |     let a = &t as &dyn Gettable<T>;\n    = note: required for the cast to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n-LL | fn f<T: Send>(val: T) {\n-   |       ^^^^^^\n+LL | fn f<T: std::marker::Send>(val: T) {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:18:13\n@@ -21,8 +21,8 @@ LL |     let a = &t as &dyn Gettable<T>;\n    = note: required for the cast to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n-LL | fn f<T: Copy>(val: T) {\n-   |       ^^^^^^\n+LL | fn f<T: std::marker::Copy>(val: T) {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/kindck-impl-type-params.rs:25:31\n@@ -34,8 +34,8 @@ LL |     let a: &dyn Gettable<T> = &t;\n    = note: required for the cast to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n-LL | fn g<T: Send>(val: T) {\n-   |       ^^^^^^\n+LL | fn g<T: std::marker::Send>(val: T) {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:25:31\n@@ -47,8 +47,8 @@ LL |     let a: &dyn Gettable<T> = &t;\n    = note: required for the cast to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n-LL | fn g<T: Copy>(val: T) {\n-   |       ^^^^^^\n+LL | fn g<T: std::marker::Copy>(val: T) {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `String: Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:38:13"}, {"sha": "472a6bcafa2739d64415504722c3ad476e48e926", "filename": "src/test/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -8,8 +8,8 @@ LL |     let a = &t as &dyn Gettable<T>;\n    = note: required for the cast to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n-LL | fn f<T: Send>(val: T) {\n-   |       ^^^^^^\n+LL | fn f<T: std::marker::Send>(val: T) {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:18:13\n@@ -21,8 +21,8 @@ LL |     let a = &t as &dyn Gettable<T>;\n    = note: required for the cast to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n-LL | fn f<T: Copy>(val: T) {\n-   |       ^^^^^^\n+LL | fn f<T: std::marker::Copy>(val: T) {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/kindck-impl-type-params.rs:25:31\n@@ -34,8 +34,8 @@ LL |     let a: &dyn Gettable<T> = &t;\n    = note: required for the cast to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n-LL | fn g<T: Send>(val: T) {\n-   |       ^^^^^^\n+LL | fn g<T: std::marker::Send>(val: T) {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params.rs:25:31\n@@ -47,8 +47,8 @@ LL |     let a: &dyn Gettable<T> = &t;\n    = note: required for the cast to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n-LL | fn g<T: Copy>(val: T) {\n-   |       ^^^^^^\n+LL | fn g<T: std::marker::Copy>(val: T) {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0477]: the type `&'a isize` does not fulfill the required lifetime\n   --> $DIR/kindck-impl-type-params.rs:32:13"}, {"sha": "5a2ad637e420424c2a629f515270ba6f139ca568", "filename": "src/test/ui/phantom-auto-trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fphantom-auto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fphantom-auto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fphantom-auto-trait.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -12,8 +12,8 @@ LL |     is_zen(x)\n    = note: required because it appears within the type `Guard<'_, T>`\n help: consider restricting type parameter `T`\n    |\n-LL | fn not_sync<T: Sync>(x: Guard<T>) {\n-   |              ^^^^^^\n+LL | fn not_sync<T: std::marker::Sync>(x: Guard<T>) {\n+   |              ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/phantom-auto-trait.rs:26:12\n@@ -30,8 +30,8 @@ LL |     is_zen(x)\n    = note: required because it appears within the type `Nested<Guard<'_, T>>`\n help: consider restricting type parameter `T`\n    |\n-LL | fn nested_not_sync<T: Sync>(x: Nested<Guard<T>>) {\n-   |                     ^^^^^^\n+LL | fn nested_not_sync<T: std::marker::Sync>(x: Nested<Guard<T>>) {\n+   |                     ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "eb5d80bc4dda68ddb78c32da9453ce55eeb41bad", "filename": "src/test/ui/specialization/deafult-generic-associated-type-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -28,8 +28,8 @@ LL |     default type U<'a> = &'a T;\n    = note: required because of the requirements on the impl of `PartialEq` for `&'a T`\n help: consider further restricting this bound\n    |\n-LL | impl<T: 'static + PartialEq> X for T {\n-   |                 ^^^^^^^^^^^\n+LL | impl<T: 'static + std::cmp::PartialEq> X for T {\n+   |                 ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "e416f30cb415dea0aa432e78d24b91b49e684040", "filename": "src/test/ui/specialization/defaultimpl/specialization-wfcheck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -19,8 +19,8 @@ LL | default impl<U> Foo<'static, U> for () {}\n    |\n help: consider restricting type parameter `U`\n    |\n-LL | default impl<U: Eq> Foo<'static, U> for () {}\n-   |               ^^^^\n+LL | default impl<U: std::cmp::Eq> Foo<'static, U> for () {}\n+   |               ^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "5cb3a404037a718e74ef3ea2670ffb492591e9fa", "filename": "src/test/ui/suggestions/adt-param-with-implicit-sized-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -5,7 +5,7 @@ LL | struct X<T>(T);\n    |          - required by this bound in `X`\n ...\n LL | struct Struct5<T: ?Sized>{\n-   |                - this type parameter needs to be `Sized`\n+   |                - this type parameter needs to be `std::marker::Sized`\n LL |     _t: X<T>,\n    |         ^^^^ doesn't have a size known at compile-time\n    |"}, {"sha": "33af13d943f74d97d6fd393355c594eb0721b3b2", "filename": "src/test/ui/suggestions/restrict-type-argument.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL |     is_send(val);\n    |\n help: consider further restricting this bound\n    |\n-LL | fn use_impl_sync(val: impl Sync + Send) {\n-   |                                 ^^^^^^\n+LL | fn use_impl_sync(val: impl Sync + std::marker::Send) {\n+   |                                 ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:8:13\n@@ -23,8 +23,8 @@ LL |     is_send(val);\n    |\n help: consider further restricting this bound\n    |\n-LL | fn use_where<S>(val: S) where S: Sync + Send {\n-   |                                       ^^^^^^\n+LL | fn use_where<S>(val: S) where S: Sync + std::marker::Send {\n+   |                                       ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:12:13\n@@ -37,8 +37,8 @@ LL |     is_send(val);\n    |\n help: consider further restricting this bound\n    |\n-LL | fn use_bound<S: Sync + Send>(val: S) {\n-   |                      ^^^^^^\n+LL | fn use_bound<S: Sync + std::marker::Send>(val: S) {\n+   |                      ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:20:13\n@@ -51,8 +51,8 @@ LL |     is_send(val);\n    |\n help: consider further restricting this bound\n    |\n-LL |     Sync + Send\n-   |          ^^^^^^\n+LL |     Sync + std::marker::Send\n+   |          ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:24:13\n@@ -65,8 +65,8 @@ LL |     is_send(val);\n    |\n help: consider further restricting this bound\n    |\n-LL | fn use_bound_and_where<S: Sync>(val: S) where S: std::fmt::Debug + Send {\n-   |                                                                  ^^^^^^\n+LL | fn use_bound_and_where<S: Sync>(val: S) where S: std::fmt::Debug + std::marker::Send {\n+   |                                                                  ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:28:13\n@@ -79,8 +79,8 @@ LL |     is_send(val);\n    |\n help: consider restricting type parameter `S`\n    |\n-LL | fn use_unbound<S: Send>(val: S) {\n-   |                 ^^^^^^\n+LL | fn use_unbound<S: std::marker::Send>(val: S) {\n+   |                 ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "744e7bef04e9707d51f08796f1b91fe93bc05ff7", "filename": "src/test/ui/trait-impl-bound-suggestions.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftrait-impl-bound-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftrait-impl-bound-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-impl-bound-suggestions.fixed?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -10,7 +10,7 @@ struct ConstrainedStruct<X: Copy> {\n }\n \n #[allow(dead_code)]\n-trait InsufficientlyConstrainedGeneric<X=()> where X: Copy {\n+trait InsufficientlyConstrainedGeneric<X=()> where X: std::marker::Copy {\n     fn return_the_constrained_type(&self, x: X) -> ConstrainedStruct<X> {\n         //~^ ERROR the trait bound `X: Copy` is not satisfied\n         ConstrainedStruct { x }"}, {"sha": "110ca79908079c0c3da858d2b21cd61d42b91fdf", "filename": "src/test/ui/trait-impl-bound-suggestions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftrait-impl-bound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftrait-impl-bound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-impl-bound-suggestions.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL |     fn return_the_constrained_type(&self, x: X) -> ConstrainedStruct<X> {\n    |\n help: consider further restricting type parameter `X`\n    |\n-LL | trait InsufficientlyConstrainedGeneric<X=()> where X: Copy {\n-   |                                              ^^^^^^^^^^^^^\n+LL | trait InsufficientlyConstrainedGeneric<X=()> where X: std::marker::Copy {\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "508a12d859a629b3838be8f2465babb97be8454d", "filename": "src/test/ui/traits/inductive-overflow/two-traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Ftwo-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Ftwo-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Ftwo-traits.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL |     type X = Self;\n    |\n help: consider further restricting this bound\n    |\n-LL | impl<T: Magic + Sync> Magic for T {\n-   |               ^^^^^^\n+LL | impl<T: Magic + std::marker::Sync> Magic for T {\n+   |               ^^^^^^^^^^^^^^^^^^^\n \n error[E0275]: overflow evaluating the requirement `*mut (): Magic`\n   --> $DIR/two-traits.rs:20:5"}, {"sha": "efab64205f3af6cda4ac33ef57336530dc843d79", "filename": "src/test/ui/traits/suggest-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `U` cannot be known at compilation tim\n   --> $DIR/suggest-where-clause.rs:7:20\n    |\n LL | fn check<T: Iterator, U: ?Sized>() {\n-   |                       - this type parameter needs to be `Sized`\n+   |                       - this type parameter needs to be `std::marker::Sized`\n LL |     // suggest a where-clause, if needed\n LL |     mem::size_of::<U>();\n    |                    ^ doesn't have a size known at compile-time\n@@ -16,7 +16,7 @@ error[E0277]: the size for values of type `U` cannot be known at compilation tim\n   --> $DIR/suggest-where-clause.rs:10:5\n    |\n LL | fn check<T: Iterator, U: ?Sized>() {\n-   |                       - this type parameter needs to be `Sized`\n+   |                       - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     mem::size_of::<Misc<U>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time"}, {"sha": "cfb1fe9c19a8bb18a7472e2d5215e1db3fdc1e6a", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.full_tait.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -15,8 +15,8 @@ LL | type X<T> = impl Clone;\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | type X<T: Clone> = impl Clone;\n-   |         ^^^^^^^\n+LL | type X<T: std::clone::Clone> = impl Clone;\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "735b96d5df98eda8cecf435ab068c0534b5e898a", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked-2.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked-2.min_tait.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -6,8 +6,8 @@ LL | type X<T> = impl Clone;\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | type X<T: Clone> = impl Clone;\n-   |         ^^^^^^^\n+LL | type X<T: std::clone::Clone> = impl Clone;\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "aab64e72b7bca21bd18958630a53ee09e62a340b", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.full_tait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.full_tait.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -28,8 +28,8 @@ LL | type Two<T, U> = impl Debug;\n    = note: required because of the requirements on the impl of `Debug` for `(T, U)`\n help: consider restricting type parameter `T`\n    |\n-LL | type Two<T: Debug, U> = impl Debug;\n-   |           ^^^^^^^\n+LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n+   |           ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `U` doesn't implement `Debug`\n   --> $DIR/generic_duplicate_param_use5.rs:11:18\n@@ -40,8 +40,8 @@ LL | type Two<T, U> = impl Debug;\n    = note: required because of the requirements on the impl of `Debug` for `(T, U)`\n help: consider restricting type parameter `U`\n    |\n-LL | type Two<T, U: Debug> = impl Debug;\n-   |              ^^^^^^^\n+LL | type Two<T, U: std::fmt::Debug> = impl Debug;\n+   |              ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors; 1 warning emitted\n "}, {"sha": "5c8c5b897790638a709551c4940dd88f81a858f1", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use5.min_tait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use5.min_tait.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -19,8 +19,8 @@ LL | type Two<T, U> = impl Debug;\n    = note: required because of the requirements on the impl of `Debug` for `(T, U)`\n help: consider restricting type parameter `T`\n    |\n-LL | type Two<T: Debug, U> = impl Debug;\n-   |           ^^^^^^^\n+LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n+   |           ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `U` doesn't implement `Debug`\n   --> $DIR/generic_duplicate_param_use5.rs:11:18\n@@ -31,8 +31,8 @@ LL | type Two<T, U> = impl Debug;\n    = note: required because of the requirements on the impl of `Debug` for `(T, U)`\n help: consider restricting type parameter `U`\n    |\n-LL | type Two<T, U: Debug> = impl Debug;\n-   |              ^^^^^^^\n+LL | type Two<T, U: std::fmt::Debug> = impl Debug;\n+   |              ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a69e99bf8b05f6531306a31efe800003b188093f", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.full_tait.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -28,8 +28,8 @@ LL | type Two<T, U> = impl Debug;\n    = note: required because of the requirements on the impl of `Debug` for `(T, T)`\n help: consider restricting type parameter `T`\n    |\n-LL | type Two<T: Debug, U> = impl Debug;\n-   |           ^^^^^^^\n+LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n+   |           ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "a377ef2d8732279d7093e3f9084144dd46433ba0", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use6.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use6.min_tait.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -19,8 +19,8 @@ LL | type Two<T, U> = impl Debug;\n    = note: required because of the requirements on the impl of `Debug` for `(T, T)`\n help: consider restricting type parameter `T`\n    |\n-LL | type Two<T: Debug, U> = impl Debug;\n-   |           ^^^^^^^\n+LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n+   |           ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e73ac88500e0393cbdc0f8f0e903709a879a854e", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.full_tait.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -28,8 +28,8 @@ LL | type Two<T, U> = impl Debug;\n    = note: required because of the requirements on the impl of `Debug` for `(T, u32)`\n help: consider restricting type parameter `T`\n    |\n-LL | type Two<T: Debug, U> = impl Debug;\n-   |           ^^^^^^^\n+LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n+   |           ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "d7edce7a491de887771d5579ae127162d9ef52b8", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use8.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use8.min_tait.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -19,8 +19,8 @@ LL | type Two<T, U> = impl Debug;\n    = note: required because of the requirements on the impl of `Debug` for `(T, u32)`\n help: consider restricting type parameter `T`\n    |\n-LL | type Two<T: Debug, U> = impl Debug;\n-   |           ^^^^^^^\n+LL | type Two<T: std::fmt::Debug, U> = impl Debug;\n+   |           ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0b3d72d67b2426cc4081737000cc4fc877dbe438", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.full_tait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.full_tait.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -40,8 +40,8 @@ LL | type Two<A, B> = impl Debug;\n    = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n help: consider restricting type parameter `A`\n    |\n-LL | type Two<A: Debug, B> = impl Debug;\n-   |           ^^^^^^^\n+LL | type Two<A: std::fmt::Debug, B> = impl Debug;\n+   |           ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `B` doesn't implement `Debug`\n   --> $DIR/generic_duplicate_param_use9.rs:10:18\n@@ -52,8 +52,8 @@ LL | type Two<A, B> = impl Debug;\n    = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n help: consider restricting type parameter `B`\n    |\n-LL | type Two<A, B: Debug> = impl Debug;\n-   |              ^^^^^^^\n+LL | type Two<A, B: std::fmt::Debug> = impl Debug;\n+   |              ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors; 1 warning emitted\n "}, {"sha": "fd1081d7b71de01a555a6d58473aafae72d357d8", "filename": "src/test/ui/type-alias-impl-trait/generic_duplicate_param_use9.min_tait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_duplicate_param_use9.min_tait.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -31,8 +31,8 @@ LL | type Two<A, B> = impl Debug;\n    = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n help: consider restricting type parameter `A`\n    |\n-LL | type Two<A: Debug, B> = impl Debug;\n-   |           ^^^^^^^\n+LL | type Two<A: std::fmt::Debug, B> = impl Debug;\n+   |           ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `B` doesn't implement `Debug`\n   --> $DIR/generic_duplicate_param_use9.rs:10:18\n@@ -43,8 +43,8 @@ LL | type Two<A, B> = impl Debug;\n    = note: required because of the requirements on the impl of `Debug` for `(A, B, <A as Foo>::Bar)`\n help: consider restricting type parameter `B`\n    |\n-LL | type Two<A, B: Debug> = impl Debug;\n-   |              ^^^^^^^\n+LL | type Two<A, B: std::fmt::Debug> = impl Debug;\n+   |              ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "7ab73d24274ceded2bb80bae481b2ce50867913b", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.full_tait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.full_tait.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -30,8 +30,8 @@ LL | fn underconstrained<U>(_: U) -> Underconstrained<U> {\n    |\n help: consider restricting type parameter `U`\n    |\n-LL | fn underconstrained<U: Debug>(_: U) -> Underconstrained<U> {\n-   |                      ^^^^^^^\n+LL | fn underconstrained<U: std::fmt::Debug>(_: U) -> Underconstrained<U> {\n+   |                      ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `V` doesn't implement `Debug`\n   --> $DIR/generic_underconstrained2.rs:21:43\n@@ -44,8 +44,8 @@ LL | fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {\n    |\n help: consider restricting type parameter `V`\n    |\n-LL | fn underconstrained2<U, V: Debug>(_: U, _: V) -> Underconstrained2<V> {\n-   |                          ^^^^^^^\n+LL | fn underconstrained2<U, V: std::fmt::Debug>(_: U, _: V) -> Underconstrained2<V> {\n+   |                          ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors; 1 warning emitted\n "}, {"sha": "a4f5f4b8645b1aa6b3a2c2e24d6cd6094e72036f", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.min_tait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.min_tait.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -21,8 +21,8 @@ LL | fn underconstrained<U>(_: U) -> Underconstrained<U> {\n    |\n help: consider restricting type parameter `U`\n    |\n-LL | fn underconstrained<U: Debug>(_: U) -> Underconstrained<U> {\n-   |                      ^^^^^^^\n+LL | fn underconstrained<U: std::fmt::Debug>(_: U) -> Underconstrained<U> {\n+   |                      ^^^^^^^^^^^^^^^^^\n \n error[E0277]: `V` doesn't implement `Debug`\n   --> $DIR/generic_underconstrained2.rs:21:43\n@@ -35,8 +35,8 @@ LL | fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {\n    |\n help: consider restricting type parameter `V`\n    |\n-LL | fn underconstrained2<U, V: Debug>(_: U, _: V) -> Underconstrained2<V> {\n-   |                          ^^^^^^^\n+LL | fn underconstrained2<U, V: std::fmt::Debug>(_: U, _: V) -> Underconstrained2<V> {\n+   |                          ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "35ac0993b29ca430d29c9b17a98cead7b0bc02ee", "filename": "src/test/ui/type-alias-impl-trait/issue-52843.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.full_tait.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -15,8 +15,8 @@ LL | type Foo<T> = impl Default;\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | type Foo<T: Default> = impl Default;\n-   |           ^^^^^^^^^\n+LL | type Foo<T: std::default::Default> = impl Default;\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "9fb760f34c19a0a3e1a5c9bb8653d96b6a37f0ac", "filename": "src/test/ui/type-alias-impl-trait/issue-52843.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843.min_tait.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -6,8 +6,8 @@ LL | type Foo<T> = impl Default;\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | type Foo<T: Default> = impl Default;\n-   |           ^^^^^^^^^\n+LL | type Foo<T: std::default::Default> = impl Default;\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ddfa31cf6244807f76f90594794b2ce33e7910e6", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -56,8 +56,8 @@ LL | trait Base<T = String>: Super<T> { }\n    |\n help: consider further restricting type parameter `T`\n    |\n-LL | trait Base<T = String>: Super<T> where T: Copy { }\n-   |                                  ^^^^^^^^^^^^^\n+LL | trait Base<T = String>: Super<T> where T: std::marker::Copy { }\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: cannot add `u8` to `i32`\n   --> $DIR/type-check-defaults.rs:24:66"}, {"sha": "7398b48a238d1c7c31022c78a39a13fa2f0a3fb4", "filename": "src/test/ui/typeck/typeck-default-trait-impl-send-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL | fn is_send<T:Send>() {\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | fn foo<T: Send>() {\n-   |         ^^^^^^\n+LL | fn foo<T: std::marker::Send>() {\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b916bbe8ad10a3deedaf7a5e30f613d613d856e3", "filename": "src/test/ui/union/union-sized-field.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/union-sized-field.rs:4:12\n    |\n LL | union Foo<T: ?Sized> {\n-   |           - this type parameter needs to be `Sized`\n+   |           - this type parameter needs to be `std::marker::Sized`\n LL |     value: T,\n    |            ^ doesn't have a size known at compile-time\n    |\n@@ -21,7 +21,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/union-sized-field.rs:9:12\n    |\n LL | struct Foo2<T: ?Sized> {\n-   |             - this type parameter needs to be `Sized`\n+   |             - this type parameter needs to be `std::marker::Sized`\n LL |     value: T,\n    |            ^ doesn't have a size known at compile-time\n    |\n@@ -40,7 +40,7 @@ error[E0277]: the size for values of type `T` cannot be known at compilation tim\n   --> $DIR/union-sized-field.rs:15:11\n    |\n LL | enum Foo3<T: ?Sized> {\n-   |           - this type parameter needs to be `Sized`\n+   |           - this type parameter needs to be `std::marker::Sized`\n LL |     Value(T),\n    |           ^ doesn't have a size known at compile-time\n    |"}, {"sha": "19978ae24cacb75094e17314ebb342ff3f91ab4c", "filename": "src/test/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -6,7 +6,7 @@ LL | fn bar<T: Sized>() { }\n LL | fn foo<T: ?Sized>() { bar::<T>() }\n    |        -                    ^ doesn't have a size known at compile-time\n    |        |\n-   |        this type parameter needs to be `Sized`\n+   |        this type parameter needs to be `std::marker::Sized`\n \n error: aborting due to previous error\n "}, {"sha": "601db7d1cd9834f2bbcd4d33428267b6b1adb69b", "filename": "src/test/ui/unsized/unsized-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -7,7 +7,7 @@ LL | fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |         -                          ^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         this type parameter needs to be `Sized`\n+   |         this type parameter needs to be `std::marker::Sized`\n    |\n help: you could relax the implicit `Sized` bound on `U` if it were used through indirection like `&U` or `Box<U>`\n   --> $DIR/unsized-enum.rs:4:10"}, {"sha": "79f690e8d1a8376589e555705f5dd88c6162c5a8", "filename": "src/test/ui/unsized/unsized-enum2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `W` cannot be known at compilation tim\n   --> $DIR/unsized-enum2.rs:23:8\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   |        - this type parameter needs to be `Sized`\n+   |        - this type parameter needs to be `std::marker::Sized`\n LL |     // parameter\n LL |     VA(W),\n    |        ^ doesn't have a size known at compile-time\n@@ -22,7 +22,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized-enum2.rs:25:11\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   |                   - this type parameter needs to be `Sized`\n+   |                   - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     VB{x: X},\n    |           ^ doesn't have a size known at compile-time\n@@ -42,7 +42,7 @@ error[E0277]: the size for values of type `Y` cannot be known at compilation tim\n   --> $DIR/unsized-enum2.rs:27:15\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   |                              - this type parameter needs to be `Sized`\n+   |                              - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     VC(isize, Y),\n    |               ^ doesn't have a size known at compile-time\n@@ -62,7 +62,7 @@ error[E0277]: the size for values of type `Z` cannot be known at compilation tim\n   --> $DIR/unsized-enum2.rs:29:21\n    |\n LL | enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   |                                         - this type parameter needs to be `Sized`\n+   |                                         - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     VD{u: isize, x: Z},\n    |                     ^ doesn't have a size known at compile-time"}, {"sha": "9d072eda4e81c5aaa1431cbfda46006219ac81d8", "filename": "src/test/ui/unsized/unsized-inherent-impl-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -7,7 +7,7 @@ LL |\n LL | impl<X: ?Sized> S5<X> {\n    |      -          ^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `Sized`\n+   |      this type parameter needs to be `std::marker::Sized`\n    |\n help: you could relax the implicit `Sized` bound on `Y` if it were used through indirection like `&Y` or `Box<Y>`\n   --> $DIR/unsized-inherent-impl-self-type.rs:5:11"}, {"sha": "52cf1cbb81d7fcc693ded85aa7ee8f95cb477af0", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -7,7 +7,7 @@ LL | fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |         -                          ^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         this type parameter needs to be `Sized`\n+   |         this type parameter needs to be `std::marker::Sized`\n    |\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/unsized-struct.rs:4:12\n@@ -26,7 +26,7 @@ LL | fn is_sized<T:Sized>() { }\n LL | fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n    |         -              ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |         |\n-   |         this type parameter needs to be `Sized`\n+   |         this type parameter needs to be `std::marker::Sized`\n    |\n    = note: required because it appears within the type `Bar<T>`\n "}, {"sha": "aef0d0cbb839540c8638ba6efbf10dbd3c7baf50", "filename": "src/test/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -7,7 +7,7 @@ LL |\n LL | impl<X: ?Sized> T3<X> for S5<X> {\n    |      -                    ^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `Sized`\n+   |      this type parameter needs to be `std::marker::Sized`\n    |\n help: you could relax the implicit `Sized` bound on `Y` if it were used through indirection like `&Y` or `Box<Y>`\n   --> $DIR/unsized-trait-impl-self-type.rs:8:11"}, {"sha": "f48d4ef9f14617b98ffb8ef017c49dbf9f5516b6", "filename": "src/test/ui/unsized/unsized-trait-impl-trait-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -7,7 +7,7 @@ LL | trait T2<Z> {\n LL | impl<X: ?Sized> T2<X> for S4<X> {\n    |      -          ^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `Sized`\n+   |      this type parameter needs to be `std::marker::Sized`\n    |\n help: consider relaxing the implicit `Sized` restriction\n    |"}, {"sha": "ddddae4eaba57cf51d1094b02b3e0d5066210125", "filename": "src/test/ui/unsized3.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized3.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:7:13\n    |\n LL | fn f1<X: ?Sized>(x: &X) {\n-   |       - this type parameter needs to be `Sized`\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     f2::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n@@ -18,7 +18,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:18:13\n    |\n LL | fn f3<X: ?Sized + T>(x: &X) {\n-   |       - this type parameter needs to be `Sized`\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     f4::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n@@ -37,7 +37,7 @@ LL | fn f5<Y>(x: &Y) {}\n    |       - required by this bound in `f5`\n ...\n LL | fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n-   |       - this type parameter needs to be `Sized`\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     f5(x1);\n    |        ^^ doesn't have a size known at compile-time\n    |\n@@ -51,7 +51,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:40:8\n    |\n LL | fn f9<X: ?Sized>(x1: Box<S<X>>) {\n-   |       - this type parameter needs to be `Sized`\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     f5(&(*x1, 34));\n    |        ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -62,7 +62,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized3.rs:45:9\n    |\n LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n-   |        - this type parameter needs to be `Sized`\n+   |        - this type parameter needs to be `std::marker::Sized`\n LL |     f5(&(32, *x1));\n    |         ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -77,7 +77,7 @@ LL | fn f5<Y>(x: &Y) {}\n    |       - required by this bound in `f5`\n ...\n LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n-   |        - this type parameter needs to be `Sized`\n+   |        - this type parameter needs to be `std::marker::Sized`\n LL |     f5(&(32, *x1));\n    |        ^^^^^^^^^^ doesn't have a size known at compile-time\n    |"}, {"sha": "0bfd4565529aa2d599c182b097c30d6d0c4cb7b0", "filename": "src/test/ui/unsized5.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized5.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized5.rs:4:9\n    |\n LL | struct S1<X: ?Sized> {\n-   |           - this type parameter needs to be `Sized`\n+   |           - this type parameter needs to be `std::marker::Sized`\n LL |     f1: X,\n    |         ^ doesn't have a size known at compile-time\n    |\n@@ -21,7 +21,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized5.rs:10:8\n    |\n LL | struct S2<X: ?Sized> {\n-   |           - this type parameter needs to be `Sized`\n+   |           - this type parameter needs to be `std::marker::Sized`\n LL |     f: isize,\n LL |     g: X,\n    |        ^ doesn't have a size known at compile-time\n@@ -77,7 +77,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized5.rs:25:8\n    |\n LL | enum E<X: ?Sized> {\n-   |        - this type parameter needs to be `Sized`\n+   |        - this type parameter needs to be `std::marker::Sized`\n LL |     V1(X, isize),\n    |        ^ doesn't have a size known at compile-time\n    |\n@@ -96,7 +96,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized5.rs:29:12\n    |\n LL | enum F<X: ?Sized> {\n-   |        - this type parameter needs to be `Sized`\n+   |        - this type parameter needs to be `std::marker::Sized`\n LL |     V2{f1: X, f: isize},\n    |            ^ doesn't have a size known at compile-time\n    |"}, {"sha": "f9f7877d5426a1c068cee49ca9775ac0c5f6f1c4", "filename": "src/test/ui/unsized6.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized6.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the size for values of type `Y` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:9:9\n    |\n LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n-   |                             - this type parameter needs to be `Sized`\n+   |                             - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let y: Y;\n    |         ^ doesn't have a size known at compile-time\n@@ -14,7 +14,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:7:12\n    |\n LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n-   |                  - this type parameter needs to be `Sized`\n+   |                  - this type parameter needs to be `std::marker::Sized`\n LL |     let _: W; // <-- this is OK, no bindings created, no initializer.\n LL |     let _: (isize, (X, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -25,7 +25,7 @@ error[E0277]: the size for values of type `Z` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:11:12\n    |\n LL | fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n-   |                                        - this type parameter needs to be `Sized`\n+   |                                        - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let y: (isize, (Z, usize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -36,7 +36,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:15:9\n    |\n LL | fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n-   |       - this type parameter needs to be `Sized`\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     let y: X;\n    |         ^ doesn't have a size known at compile-time\n    |\n@@ -47,7 +47,7 @@ error[E0277]: the size for values of type `Y` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:17:12\n    |\n LL | fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n-   |                  - this type parameter needs to be `Sized`\n+   |                  - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let y: (isize, (Y, isize));\n    |            ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -58,7 +58,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:22:9\n    |\n LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       - this type parameter needs to be `Sized`\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n@@ -69,7 +69,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:24:9\n    |\n LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       - this type parameter needs to be `Sized`\n+   |       - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n@@ -81,7 +81,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:26:10\n    |\n LL | fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       - this type parameter needs to be `Sized`\n+   |       - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n@@ -93,7 +93,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:30:9\n    |\n LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       - this type parameter needs to be `Sized`\n+   |       - this type parameter needs to be `std::marker::Sized`\n LL |     let y: X = *x1;\n    |         ^ doesn't have a size known at compile-time\n    |\n@@ -104,7 +104,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:32:9\n    |\n LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       - this type parameter needs to be `Sized`\n+   |       - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let y = *x2;\n    |         ^ doesn't have a size known at compile-time\n@@ -116,7 +116,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n   --> $DIR/unsized6.rs:34:10\n    |\n LL | fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   |       - this type parameter needs to be `Sized`\n+   |       - this type parameter needs to be `std::marker::Sized`\n ...\n LL |     let (y, z) = (*x3, 4);\n    |          ^ doesn't have a size known at compile-time\n@@ -130,7 +130,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | fn g1<X: ?Sized>(x: X) {}\n    |       -          ^ doesn't have a size known at compile-time\n    |       |\n-   |       this type parameter needs to be `Sized`\n+   |       this type parameter needs to be `std::marker::Sized`\n    |\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n@@ -144,7 +144,7 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n LL | fn g2<X: ?Sized + T>(x: X) {}\n    |       -              ^ doesn't have a size known at compile-time\n    |       |\n-   |       this type parameter needs to be `Sized`\n+   |       this type parameter needs to be `std::marker::Sized`\n    |\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size"}, {"sha": "7dbddd4ed24430579ccc44e484b859a91482cb3a", "filename": "src/test/ui/unsized7.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized7.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -7,7 +7,7 @@ LL | trait T1<Z: T> {\n LL | impl<X: ?Sized + T> T1<X> for S3<X> {\n    |      -              ^^^^^ doesn't have a size known at compile-time\n    |      |\n-   |      this type parameter needs to be `Sized`\n+   |      this type parameter needs to be `std::marker::Sized`\n    |\n help: consider relaxing the implicit `Sized` restriction\n    |"}, {"sha": "7819110dd98b59dd857751776d03ba57b40896c1", "filename": "src/test/ui/wf/wf-enum-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL |     where T: ExtraCopy<U>\n    |\n help: consider further restricting type parameter `U`\n    |\n-LL |     where T: ExtraCopy<U>, U: Copy\n-   |                          ^^^^^^^^^\n+LL |     where T: ExtraCopy<U>, U: std::marker::Copy\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4bfb2413fe99f8de9483d7a618ed72c69d9b6314", "filename": "src/test/ui/wf/wf-enum-fields-struct-variant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL |         f: IsCopy<A>\n    |\n help: consider restricting type parameter `A`\n    |\n-LL | enum AnotherEnum<A: Copy> {\n-   |                   ^^^^^^\n+LL | enum AnotherEnum<A: std::marker::Copy> {\n+   |                   ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c8a75afbab7cbb31a243a772c3bc01d2265ceef5", "filename": "src/test/ui/wf/wf-enum-fields.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL |     SomeVariant(IsCopy<A>)\n    |\n help: consider restricting type parameter `A`\n    |\n-LL | enum SomeEnum<A: Copy> {\n-   |                ^^^^^^\n+LL | enum SomeEnum<A: std::marker::Copy> {\n+   |                ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e463e3db887a52f63476813e0c8b74f216f922a7", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL | fn foo<T,U>() where T: ExtraCopy<U>\n    |\n help: consider further restricting type parameter `U`\n    |\n-LL | fn foo<T,U>() where T: ExtraCopy<U>, U: Copy\n-   |                                    ^^^^^^^^^\n+LL | fn foo<T,U>() where T: ExtraCopy<U>, U: std::marker::Copy\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `(dyn Copy + 'static)` cannot be known at compilation time\n   --> $DIR/wf-fn-where-clause.rs:12:16"}, {"sha": "9687658feba43b50936900e63c938265b4957242", "filename": "src/test/ui/wf/wf-in-fn-arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL | fn bar<T>(_: &MustBeCopy<T>)\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | fn bar<T: Copy>(_: &MustBeCopy<T>)\n-   |         ^^^^^^\n+LL | fn bar<T: std::marker::Copy>(_: &MustBeCopy<T>)\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f9a962578e65086a6fea2f229367a8bb7cd07ff3", "filename": "src/test/ui/wf/wf-in-fn-ret.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL | fn bar<T>() -> MustBeCopy<T>\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | fn bar<T: Copy>() -> MustBeCopy<T>\n-   |         ^^^^^^\n+LL | fn bar<T: std::marker::Copy>() -> MustBeCopy<T>\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "33300b3964258e0b21571481625e282d13f942d4", "filename": "src/test/ui/wf/wf-in-fn-type-arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL |     x: fn(MustBeCopy<T>)\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | struct Bar<T: Copy> {\n-   |             ^^^^^^\n+LL | struct Bar<T: std::marker::Copy> {\n+   |             ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1ffc47e6d826c842603291ac253aa276562d6612", "filename": "src/test/ui/wf/wf-in-fn-type-ret.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL |     x: fn() -> MustBeCopy<T>\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | struct Foo<T: Copy> {\n-   |             ^^^^^^\n+LL | struct Foo<T: std::marker::Copy> {\n+   |             ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7cb9af11d799bee04f835fb3bccd770c56d2a55b", "filename": "src/test/ui/wf/wf-in-fn-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL |     where T: MustBeCopy<U>\n    |\n help: consider further restricting type parameter `U`\n    |\n-LL |     where T: MustBeCopy<U>, U: Copy\n-   |                           ^^^^^^^^^\n+LL |     where T: MustBeCopy<U>, U: std::marker::Copy\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "8606eabf59c146f0680c8112cae0db333d55102a", "filename": "src/test/ui/wf/wf-in-obj-type-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL |     x: dyn Object<MustBeCopy<T>>\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | struct Bar<T: Copy> {\n-   |             ^^^^^^\n+LL | struct Bar<T: std::marker::Copy> {\n+   |             ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "8e0ce557e6b43cecb728a6164d01eb3090e42196", "filename": "src/test/ui/wf/wf-inherent-impl-method-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL |     fn foo(self) where T: ExtraCopy<U>\n    |\n help: consider restricting type parameter `U`\n    |\n-LL | impl<T,U: Copy> Foo<T,U> {\n-   |         ^^^^^^\n+LL | impl<T,U: std::marker::Copy> Foo<T,U> {\n+   |         ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "bf8077ba88f6b4e0f2fe68269fd4e4f21194979e", "filename": "src/test/ui/wf/wf-inherent-impl-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL | impl<T,U> Foo<T,U> where T: ExtraCopy<U>\n    |\n help: consider further restricting type parameter `U`\n    |\n-LL | impl<T,U> Foo<T,U> where T: ExtraCopy<U>, U: Copy\n-   |                                         ^^^^^^^^^\n+LL | impl<T,U> Foo<T,U> where T: ExtraCopy<U>, U: std::marker::Copy\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e85f3591438a9e5dd2290b8c140412ec301d0af9", "filename": "src/test/ui/wf/wf-struct-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL |     where T: ExtraCopy<U>\n    |\n help: consider further restricting type parameter `U`\n    |\n-LL |     where T: ExtraCopy<U>, U: Copy\n-   |                          ^^^^^^^^^\n+LL |     where T: ExtraCopy<U>, U: std::marker::Copy\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "62ef6bb60c7a24af65ea6f7b10c4b7e128b48473", "filename": "src/test/ui/wf/wf-struct-field.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL |     data: IsCopy<A>\n    |\n help: consider restricting type parameter `A`\n    |\n-LL | struct SomeStruct<A: Copy> {\n-   |                    ^^^^^^\n+LL | struct SomeStruct<A: std::marker::Copy> {\n+   |                    ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "51adfdb6bd2a9c77129f1b06227ca4da22d4cfb8", "filename": "src/test/ui/wf/wf-trait-associated-type-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL |     type Type1: ExtraCopy<T>;\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | trait SomeTrait<T: Copy> {\n-   |                  ^^^^^^\n+LL | trait SomeTrait<T: std::marker::Copy> {\n+   |                  ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c9e818f8e7dc8d62bb08b84a770e4642cdcc3dce", "filename": "src/test/ui/wf/wf-trait-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL |     where T: ExtraCopy<U>\n    |\n help: consider further restricting type parameter `U`\n    |\n-LL |     where T: ExtraCopy<U>, U: Copy\n-   |                          ^^^^^^^^^\n+LL |     where T: ExtraCopy<U>, U: std::marker::Copy\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6926983527178f1e459a26976adc67abf8af982c", "filename": "src/test/ui/wf/wf-trait-superbound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL | trait SomeTrait<T>: ExtraCopy<T> {\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | trait SomeTrait<T: Copy>: ExtraCopy<T> {\n-   |                  ^^^^^^\n+LL | trait SomeTrait<T: std::marker::Copy>: ExtraCopy<T> {\n+   |                  ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "356ba347cc36a6eaf66729f78a696fbdfe93f3ed", "filename": "src/test/ui/where-clauses/where-clause-constraints-are-local-for-inherent-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL |         require_copy(self.x);\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | impl<T: Copy> Foo<T> {\n-   |       ^^^^^^\n+LL | impl<T: std::marker::Copy> Foo<T> {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d84242cfe12b832761985ed60edfeea3322c1510", "filename": "src/test/ui/where-clauses/where-clause-constraints-are-local-for-trait-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr?ref=6cb74ad99f8f6cc994ebe18d906ec1dd7ccd8b3d", "patch": "@@ -9,8 +9,8 @@ LL |         require_copy(self.x);\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | impl<T: Copy> Foo<T> for Bar<T> {\n-   |       ^^^^^^\n+LL | impl<T: std::marker::Copy> Foo<T> for Bar<T> {\n+   |       ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}