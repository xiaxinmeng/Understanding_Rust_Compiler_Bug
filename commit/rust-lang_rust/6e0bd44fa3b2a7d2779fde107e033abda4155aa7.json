{"sha": "6e0bd44fa3b2a7d2779fde107e033abda4155aa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMGJkNDRmYTNiMmE3ZDI3NzlmZGUxMDdlMDMzYWJkYTQxNTVhYTc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-05T08:47:58Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-05T08:50:43Z"}, "message": "Add method `with_module_lexical_scope` to `Resolver`.", "tree": {"sha": "195ce118c292aaa744e960a10af38a453284b526", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/195ce118c292aaa744e960a10af38a453284b526"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e0bd44fa3b2a7d2779fde107e033abda4155aa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e0bd44fa3b2a7d2779fde107e033abda4155aa7", "html_url": "https://github.com/rust-lang/rust/commit/6e0bd44fa3b2a7d2779fde107e033abda4155aa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e0bd44fa3b2a7d2779fde107e033abda4155aa7/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2b56fb7a0c24e04227318ca7e5950e9289ee3e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2b56fb7a0c24e04227318ca7e5950e9289ee3e4", "html_url": "https://github.com/rust-lang/rust/commit/c2b56fb7a0c24e04227318ca7e5950e9289ee3e4"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "8cfde39c82a66da6f2ba3e5c9a1d62d680324a63", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6e0bd44fa3b2a7d2779fde107e033abda4155aa7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0bd44fa3b2a7d2779fde107e033abda4155aa7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6e0bd44fa3b2a7d2779fde107e033abda4155aa7", "patch": "@@ -980,7 +980,7 @@ pub struct Resolver<'a> {\n     //\n     // There will be an anonymous module created around `g` with the ID of the\n     // entry block for `f`.\n-    module_map: NodeMap<Module<'a>>,\n+    pub module_map: NodeMap<Module<'a>>,\n \n     // Whether or not to print error messages. Can be set to true\n     // when getting additional info for error message suggestions,\n@@ -2686,6 +2686,33 @@ impl<'a> Resolver<'a> {\n         rs\n     }\n \n+    // Calls `f` with a `Resolver` whose current lexical scope is `module`'s lexical scope,\n+    // i.e. the module's items and the prelude (unless the module is `#[no_implicit_prelude]`).\n+    pub fn with_module_lexical_scope<T, F>(&mut self, module: Module<'a>, f: F) -> T\n+        where F: FnOnce(&mut Resolver<'a>) -> T,\n+    {\n+        self.with_empty_ribs(|this| {\n+            this.value_ribs.push(Rib::new(ModuleRibKind(module)));\n+            this.type_ribs.push(Rib::new(ModuleRibKind(module)));\n+            f(this)\n+        })\n+    }\n+\n+    fn with_empty_ribs<T, F>(&mut self, f: F) -> T\n+        where F: FnOnce(&mut Resolver<'a>) -> T,\n+    {\n+        use ::std::mem::replace;\n+        let value_ribs = replace(&mut self.value_ribs, Vec::new());\n+        let type_ribs = replace(&mut self.type_ribs, Vec::new());\n+        let label_ribs = replace(&mut self.label_ribs, Vec::new());\n+\n+        let result = f(self);\n+        self.value_ribs = value_ribs;\n+        self.type_ribs = type_ribs;\n+        self.label_ribs = label_ribs;\n+        result\n+    }\n+\n     fn find_fallback_in_self_type(&mut self, name: Name) -> FallbackSuggestion {\n         fn extract_node_id(t: &Ty) -> Option<NodeId> {\n             match t.node {"}]}