{"sha": "4a9c58c6bd0e609538053a35685e206f66019820", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhOWM1OGM2YmQwZTYwOTUzODA1M2EzNTY4NWUyMDZmNjYwMTk4MjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-05T15:26:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-05T15:26:26Z"}, "message": "Auto merge of #51369 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #50852 (Add doc comment to hiding portions of code example)\n - #51183 (Update rustdoc book to suggest using Termination trait instead of hidden \u2018foo\u2019 function)\n - #51255 (Fix confusing error message for sub_instant)\n - #51256 (Fix crate-name option in rustdoc)\n - #51308 (Check array indices in constant propagation)\n - #51343 (test: Ignore some problematic tests on sparc and sparc64)\n - #51358 (Tests that #39963 is fixed on MIR borrowck)\n\nFailed merges:", "tree": {"sha": "b2bf144954a4fc0f7e7389e058b072d0b349a694", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2bf144954a4fc0f7e7389e058b072d0b349a694"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a9c58c6bd0e609538053a35685e206f66019820", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a9c58c6bd0e609538053a35685e206f66019820", "html_url": "https://github.com/rust-lang/rust/commit/4a9c58c6bd0e609538053a35685e206f66019820", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a9c58c6bd0e609538053a35685e206f66019820/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90f34b5f83d8fb0dd39de7a6d7cfac4d10cb2218", "url": "https://api.github.com/repos/rust-lang/rust/commits/90f34b5f83d8fb0dd39de7a6d7cfac4d10cb2218", "html_url": "https://github.com/rust-lang/rust/commit/90f34b5f83d8fb0dd39de7a6d7cfac4d10cb2218"}, {"sha": "d01115069637252ca9c42be4d3167ca9ff0634d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d01115069637252ca9c42be4d3167ca9ff0634d1", "html_url": "https://github.com/rust-lang/rust/commit/d01115069637252ca9c42be4d3167ca9ff0634d1"}], "stats": {"total": 189, "additions": 141, "deletions": 48}, "files": [{"sha": "cb233cc84cbed8fd95ddbce645dcabfe35a0cd45", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -79,15 +79,17 @@ from your example, but are important to make the tests work. Consider\n an example block that looks like this:\n \n ```text\n-/// Some documentation.\n-# fn foo() {}\n+/// /// Some documentation.\n+/// # fn foo() {} // this function will be hidden\n+/// println!(\"Hello, World!\");\n ```\n \n It will render like this:\n \n ```rust\n /// Some documentation.\n # fn foo() {}\n+println!(\"Hello, World!\");\n ```\n \n Yes, that's right: you can add lines that start with `# `, and they will\n@@ -168,37 +170,56 @@ By repeating all parts of the example, you can ensure that your example still\n compiles, while only showing the parts that are relevant to that part of your\n explanation.\n \n-Another case where the use of `#` is handy is when you want to ignore\n-error handling. Lets say you want the following,\n+\n+## Using `?` in doc tests\n+\n+When writing an example, it is rarely useful to include a complete error\n+handling, as it would add significant amounts of boilerplate code. Instead, you\n+may want the following:\n \n ```ignore\n+/// ```\n /// use std::io;\n /// let mut input = String::new();\n /// io::stdin().read_line(&mut input)?;\n+/// ```\n ```\n \n-The problem is that `?` returns a `Result<T, E>` and test functions\n-don't return anything so this will give a mismatched types error.\n+The problem is that `?` returns a `Result<T, E>` and test functions don't\n+return anything, so this will give a mismatched types error.\n+\n+You can get around this limitation by manually adding a `main` that returns\n+`Result<T, E>`, because `Result<T, E>` implements the `Termination` trait:\n \n ```ignore\n /// A doc test using ?\n ///\n /// ```\n /// use std::io;\n-/// # fn foo() -> io::Result<()> {\n+///\n+/// fn main() -> io::Result<()> {\n+///     let mut input = String::new();\n+///     io::stdin().read_line(&mut input)?;\n+///     Ok(())\n+/// }\n+/// ```\n+```\n+\n+Together with the `# ` from the section above, you arrive at a solution that\n+appears to the reader as the initial idea but works with doc tests:\n+\n+```ignore\n+/// ```\n+/// use std::io;\n+/// # fn main() -> io::Result<()> {\n /// let mut input = String::new();\n /// io::stdin().read_line(&mut input)?;\n /// # Ok(())\n /// # }\n /// ```\n-# fn foo() {}\n ```\n \n-You can get around this by wrapping the code in a function. This catches\n-and swallows the `Result<T, E>` when running tests on the docs. This\n-pattern appears regularly in the standard library.\n-\n-### Documenting macros\n+## Documenting macros\n \n Here\u2019s an example of documenting a macro:\n "}, {"sha": "d39042ceba99fc6162c5d4aa6d246084d6ad3f26", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -240,16 +240,6 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n     ) -> Option<Const<'tcx>> {\n         let span = source_info.span;\n         match *rvalue {\n-            // No need to overwrite an already evaluated constant\n-            Rvalue::Use(Operand::Constant(box Constant {\n-                literal: Literal::Value {\n-                    value: &ty::Const {\n-                        val: ConstVal::Value(_),\n-                        ..\n-                    },\n-                },\n-                ..\n-            })) => None,\n             // This branch exists for the sanity type check\n             Rvalue::Use(Operand::Constant(ref c)) => {\n                 assert_eq!(c.ty, place_ty);"}, {"sha": "bad5ff2596fd3496f2086729a34ffd2288106577", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -230,7 +230,10 @@ pub fn run_core(search_paths: SearchPaths,\n \n         let krate = panictry!(driver::phase_1_parse_input(control, &sess, &input));\n \n-        let name = ::rustc_codegen_utils::link::find_crate_name(Some(&sess), &krate.attrs, &input);\n+        let name = match crate_name {\n+            Some(ref crate_name) => crate_name.clone(),\n+            None => ::rustc_codegen_utils::link::find_crate_name(Some(&sess), &krate.attrs, &input),\n+        };\n \n         let mut crate_loader = CrateLoader::new(&sess, &cstore, &name);\n "}, {"sha": "5c491115c55160dafcc356c2082699454b9b29f4", "filename": "src/libstd/sys/redox/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -144,7 +144,7 @@ impl Instant {\n \n     pub fn sub_instant(&self, other: &Instant) -> Duration {\n         self.t.sub_timespec(&other.t).unwrap_or_else(|_| {\n-            panic!(\"other was less than the current instant\")\n+            panic!(\"specified instant was later than self\")\n         })\n     }\n "}, {"sha": "89786eb2a6c486005c27ba46da3375fa3fd79aa7", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -289,7 +289,7 @@ mod inner {\n \n         pub fn sub_instant(&self, other: &Instant) -> Duration {\n             self.t.sub_timespec(&other.t).unwrap_or_else(|_| {\n-                panic!(\"other was less than the current instant\")\n+                panic!(\"specified instant was later than self\")\n             })\n         }\n "}, {"sha": "df5cba1c244b8fbcc4961503b6b9590ec4389241", "filename": "src/test/codegen/abi-main-signature-16bit-c-int.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -22,6 +22,7 @@\n // ignore-powerpc64\n // ignore-s390x\n // ignore-sparc\n+// ignore-sparc64\n // ignore-wasm32\n // ignore-x86\n // ignore-x86_64"}, {"sha": "77e3781961f4d8cc30b5050c8ecc3fd9f08732c0", "filename": "src/test/codegen/fastcall-inreg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -29,6 +29,7 @@\n // ignore-r600\n // ignore-amdgcn\n // ignore-sparc\n+// ignore-sparc64\n // ignore-sparcv9\n // ignore-sparcel\n // ignore-s390x"}, {"sha": "25750a6513f73662cb370279da6487118d01fe31", "filename": "src/test/codegen/repr-transparent-aggregates-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -14,6 +14,8 @@\n // ignore-asmjs\n // ignore-mips64\n // ignore-s390x\n+// ignore-sparc\n+// ignore-sparc64\n // ignore-wasm\n // ignore-x86\n // ignore-x86_64"}, {"sha": "2c86e609e7b21d24e39b0a51f69a365822caccd8", "filename": "src/test/codegen/stack-probes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstack-probes.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -14,6 +14,8 @@\n // ignore-mips64\n // ignore-powerpc\n // ignore-s390x\n+// ignore-sparc\n+// ignore-sparc64\n // ignore-wasm\n // ignore-emscripten\n // ignore-windows"}, {"sha": "ba51004a791b7b7c7e68c6e685829355e4354e84", "filename": "src/test/codegen/x86_mmx.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcodegen%2Fx86_mmx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcodegen%2Fx86_mmx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fx86_mmx.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -13,6 +13,8 @@\n // ignore-emscripten\n // ignore-mips\n // ignore-mips64\n+// ignore-sparc\n+// ignore-sparc64\n // compile-flags: -O\n \n #![feature(repr_simd)]"}, {"sha": "900f5cce13b2611ba5c228165dc399b62740a14a", "filename": "src/test/compile-fail/asm-bad-clobber.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcompile-fail%2Fasm-bad-clobber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcompile-fail%2Fasm-bad-clobber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-bad-clobber.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -15,6 +15,7 @@\n // ignore-emscripten\n // ignore-powerpc\n // ignore-sparc\n+// ignore-sparc64\n // ignore-mips\n // ignore-mips64\n "}, {"sha": "3960fd50e1737faeb5bd136acf111e0ade469550", "filename": "src/test/compile-fail/asm-in-bad-modifier.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -12,6 +12,7 @@\n // ignore-emscripten\n // ignore-powerpc\n // ignore-sparc\n+// ignore-sparc64\n // ignore-mips\n // ignore-mips64\n "}, {"sha": "77798201ff341cd23d689600ca968d66586aa7f8", "filename": "src/test/compile-fail/asm-misplaced-option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -15,6 +15,7 @@\n // ignore-emscripten\n // ignore-powerpc\n // ignore-sparc\n+// ignore-sparc64\n // ignore-mips\n // ignore-mips64\n "}, {"sha": "e38112a256694117726fc6bc228c08a1197fb397", "filename": "src/test/compile-fail/asm-out-no-modifier.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -12,6 +12,7 @@\n // ignore-emscripten\n // ignore-powerpc\n // ignore-sparc\n+// ignore-sparc64\n // ignore-mips\n // ignore-mips64\n "}, {"sha": "bd0301e6cf93b6f4cf8ae249c69369a9a8f7d75c", "filename": "src/test/compile-fail/asm-out-read-uninit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -12,6 +12,7 @@\n // ignore-emscripten\n // ignore-powerpc\n // ignore-sparc\n+// ignore-sparc64\n // ignore-mips\n // ignore-mips64\n "}, {"sha": "4cd74117ef74cad59c590950f91f635fef5ac02e", "filename": "src/test/compile-fail/borrowck/borrowck-asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-asm.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -12,6 +12,7 @@\n // ignore-emscripten\n // ignore-powerpc\n // ignore-sparc\n+// ignore-sparc64\n \n // revisions: ast mir\n //[mir]compile-flags: -Z borrowck=mir"}, {"sha": "f8b20f6ee7933f4efac8699f741efe23c6b56491", "filename": "src/test/compile-fail/const-err-early.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -19,8 +19,8 @@ pub const C: u8 = 200u8 * 4; //~ ERROR const_err\n //~^ ERROR this constant cannot be used\n pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR const_err\n //~^ ERROR this constant cannot be used\n-pub const E: u8 = [5u8][1];\n-//~^ ERROR const_err\n+pub const E: u8 = [5u8][1]; //~ ERROR const_err\n+//~| ERROR this constant cannot be used\n \n fn main() {\n     let _a = A;"}, {"sha": "9a5cb5a4a83fac6fdd10a4ba4930688ff7531609", "filename": "src/test/compile-fail/const-err2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcompile-fail%2Fconst-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcompile-fail%2Fconst-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err2.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -31,6 +31,7 @@ fn main() {\n     let d = 42u8 - (42u8 + 1);\n     //~^ ERROR const_err\n     let _e = [5u8][1];\n+    //~^ ERROR const_err\n     black_box(a);\n     black_box(b);\n     black_box(c);"}, {"sha": "f5e43b57e7775082022d99b3291b3765c03da23b", "filename": "src/test/compile-fail/const-err3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcompile-fail%2Fconst-err3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fcompile-fail%2Fconst-err3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err3.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -23,6 +23,7 @@ fn main() {\n     let d = 42u8 - (42u8 + 1);\n     //~^ ERROR const_err\n     let _e = [5u8][1];\n+    //~^ ERROR const_err\n     black_box(b);\n     black_box(c);\n     black_box(d);"}, {"sha": "cf342ad94f990271e34c8f0eedfd5fac33727c2f", "filename": "src/test/run-fail/mir_indexing_oob_1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_1.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -12,6 +12,7 @@\n \n const C: [u32; 5] = [0; 5];\n \n+#[allow(const_err)]\n fn test() -> u32 {\n     C[10]\n }"}, {"sha": "3eb94682b20471d05a05eead80d74f9ef0009573", "filename": "src/test/run-fail/mir_indexing_oob_2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_2.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -12,6 +12,7 @@\n \n const C: &'static [u8; 5] = b\"hello\";\n \n+#[allow(const_err)]\n fn test() -> u8 {\n     C[10]\n }"}, {"sha": "06bb6d4d2871378cc173b75cd81f49f8d26235be", "filename": "src/test/run-fail/mir_indexing_oob_3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_indexing_oob_3.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -12,6 +12,7 @@\n \n const C: &'static [u8; 5] = b\"hello\";\n \n+#[allow(const_err)]\n fn mir() -> u8 {\n     C[10]\n }"}, {"sha": "f57a7bd7add44a7130f87211e027a96a68c26e4e", "filename": "src/test/run-pass/borrowck/borrowck-multiple-borrows-interior-boxes.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-multiple-borrows-interior-boxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-multiple-borrows-interior-boxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-multiple-borrows-interior-boxes.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test case from #39963.\n+\n+#![feature(nll)]\n+\n+#[derive(Clone)]\n+struct Foo(Option<Box<Foo>>, Option<Box<Foo>>);\n+\n+fn test(f: &mut Foo) {\n+  match *f {\n+    Foo(Some(ref mut left), Some(ref mut right)) => match **left {\n+      Foo(Some(ref mut left), Some(ref mut right)) => panic!(),\n+      _ => panic!(),\n+    },\n+    _ => panic!(),\n+  }\n+}\n+\n+fn main() {\n+}"}, {"sha": "3fef19c51bd288722bb95fb8ec7a3cb765102f99", "filename": "src/test/run-pass/stack-probes-lto.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -14,6 +14,8 @@\n // ignore-mips64\n // ignore-powerpc\n // ignore-s390x\n+// ignore-sparc\n+// ignore-sparc64\n // ignore-wasm\n // ignore-cloudabi no processes\n // ignore-emscripten no processes"}, {"sha": "c93dcf019397b34eef0a91adc26ec9a92f805dd2", "filename": "src/test/run-pass/stack-probes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Frun-pass%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Frun-pass%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstack-probes.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -14,6 +14,8 @@\n // ignore-mips64\n // ignore-powerpc\n // ignore-s390x\n+// ignore-sparc\n+// ignore-sparc64\n // ignore-wasm\n // ignore-cloudabi no processes\n // ignore-emscripten no processes"}, {"sha": "4e4946a60a33894bf2ff3e2463127217dfe5c53a", "filename": "src/test/rustdoc/invalid.crate.name.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Frustdoc%2Finvalid.crate.name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Frustdoc%2Finvalid.crate.name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finvalid.crate.name.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static FOO: i32 = [][0];\n-//~^ ERROR E0080\n+// compile-flags: --crate-name foo\n \n-fn main() {}\n+pub fn foo() {}", "previous_filename": "src/test/ui/const-eval/index_out_of_bound.rs"}, {"sha": "73a709b168613a35a361c8097ac6aabaa5885ef6", "filename": "src/test/ui/asm-out-assign-imm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fui%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fui%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-out-assign-imm.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -12,6 +12,7 @@\n // ignore-emscripten\n // ignore-powerpc\n // ignore-sparc\n+// ignore-sparc64\n // ignore-mips\n \n #![feature(asm)]"}, {"sha": "324dec77adcce8dbaa016c4dfeab71dd8233f81f", "filename": "src/test/ui/asm-out-assign-imm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fui%2Fasm-out-assign-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fui%2Fasm-out-assign-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm-out-assign-imm.stderr?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -1,5 +1,5 @@\n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/asm-out-assign-imm.rs:30:9\n+  --> $DIR/asm-out-assign-imm.rs:31:9\n    |\n LL |     x = 1;\n    |     ----- first assignment to `x`"}, {"sha": "d16231c72b91a5040cf65ee083332eb9ccc592fe", "filename": "src/test/ui/const-eval/index_out_of_bound.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/90f34b5f83d8fb0dd39de7a6d7cfac4d10cb2218/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90f34b5f83d8fb0dd39de7a6d7cfac4d10cb2218/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bound.stderr?ref=90f34b5f83d8fb0dd39de7a6d7cfac4d10cb2218", "patch": "@@ -1,9 +0,0 @@\n-error[E0080]: constant evaluation error\n-  --> $DIR/index_out_of_bound.rs:11:19\n-   |\n-LL | static FOO: i32 = [][0];\n-   |                   ^^^^^ index out of bounds: the len is 0 but the index is 0\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "f3578bcef6e411b5018155264b7bbc6be5d28b18", "filename": "src/test/ui/const-eval/index_out_of_bounds.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bounds.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+static FOO: i32 = [][0];\n+//~^ ERROR E0080\n+\n+fn main() {\n+    let array = [std::env::args().len()];\n+    array[1]; //~ ERROR index out of bounds\n+}"}, {"sha": "96e592dc209a8a7c59b82b9ea45d4c5e42ff6127", "filename": "src/test/ui/const-eval/index_out_of_bounds.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Findex_out_of_bounds.stderr?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -0,0 +1,17 @@\n+error[E0080]: constant evaluation error\n+  --> $DIR/index_out_of_bounds.rs:11:19\n+   |\n+LL | static FOO: i32 = [][0];\n+   |                   ^^^^^ index out of bounds: the len is 0 but the index is 0\n+\n+error: index out of bounds: the len is 1 but the index is 1\n+  --> $DIR/index_out_of_bounds.rs:16:5\n+   |\n+LL |     array[1]; //~ ERROR index out of bounds\n+   |     ^^^^^^^^\n+   |\n+   = note: #[deny(const_err)] on by default\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "ed9bbb60dcd20d773f949f02470b0c7ac23b6303", "filename": "src/test/ui/target-feature-wrong.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-wrong.rs?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -15,6 +15,8 @@\n // ignore-mips\n // ignore-powerpc\n // ignore-s390x\n+// ignore-sparc\n+// ignore-sparc64\n \n #![feature(target_feature)]\n "}, {"sha": "39362f74bdd9e7d8ce44adfe76f6ebe3e47777ce", "filename": "src/test/ui/target-feature-wrong.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a9c58c6bd0e609538053a35685e206f66019820/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr?ref=4a9c58c6bd0e609538053a35685e206f66019820", "patch": "@@ -1,35 +1,35 @@\n error: #[target_feature] attribute must be of the form #[target_feature(..)]\n-  --> $DIR/target-feature-wrong.rs:21:1\n+  --> $DIR/target-feature-wrong.rs:23:1\n    |\n LL | #[target_feature = \"+sse2\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the feature named `foo` is not valid for this target\n-  --> $DIR/target-feature-wrong.rs:23:18\n+  --> $DIR/target-feature-wrong.rs:25:18\n    |\n LL | #[target_feature(enable = \"foo\")]\n    |                  ^^^^^^^^^^^^^^\n \n error: #[target_feature(..)] only accepts sub-keys of `enable` currently\n-  --> $DIR/target-feature-wrong.rs:25:18\n+  --> $DIR/target-feature-wrong.rs:27:18\n    |\n LL | #[target_feature(bar)]\n    |                  ^^^\n \n error: #[target_feature(..)] only accepts sub-keys of `enable` currently\n-  --> $DIR/target-feature-wrong.rs:27:18\n+  --> $DIR/target-feature-wrong.rs:29:18\n    |\n LL | #[target_feature(disable = \"baz\")]\n    |                  ^^^^^^^^^^^^^^^\n \n error: #[target_feature(..)] can only be applied to `unsafe` function\n-  --> $DIR/target-feature-wrong.rs:31:1\n+  --> $DIR/target-feature-wrong.rs:33:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: attribute should be applied to a function\n-  --> $DIR/target-feature-wrong.rs:35:1\n+  --> $DIR/target-feature-wrong.rs:37:1\n    |\n LL | #[target_feature(enable = \"sse2\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -38,7 +38,7 @@ LL | mod another {}\n    | -------------- not a function\n \n error: cannot use #[inline(always)] with #[target_feature]\n-  --> $DIR/target-feature-wrong.rs:39:1\n+  --> $DIR/target-feature-wrong.rs:41:1\n    |\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^"}]}