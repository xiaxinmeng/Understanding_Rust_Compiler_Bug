{"sha": "220bb22e1b621ad5a10a44080e3e1872d99f3e9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMGJiMjJlMWI2MjFhZDVhMTBhNDQwODBlM2UxODcyZDk5ZjNlOWY=", "commit": {"author": {"name": "Gianni Ciccarelli", "email": "gianni.ciccarelli@gmail.com", "date": "2018-02-14T17:25:42Z"}, "committer": {"name": "Gianni Ciccarelli", "email": "gianni.ciccarelli@gmail.com", "date": "2018-02-15T15:31:05Z"}, "message": "add Self: Trait<..> inside the param_env of a default impl", "tree": {"sha": "f19e7517b4bacdf53509ee0dd5ccc668a02f3228", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f19e7517b4bacdf53509ee0dd5ccc668a02f3228"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/220bb22e1b621ad5a10a44080e3e1872d99f3e9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/220bb22e1b621ad5a10a44080e3e1872d99f3e9f", "html_url": "https://github.com/rust-lang/rust/commit/220bb22e1b621ad5a10a44080e3e1872d99f3e9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/220bb22e1b621ad5a10a44080e3e1872d99f3e9f/comments", "author": {"login": "giannicic", "id": 10560238, "node_id": "MDQ6VXNlcjEwNTYwMjM4", "avatar_url": "https://avatars.githubusercontent.com/u/10560238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giannicic", "html_url": "https://github.com/giannicic", "followers_url": "https://api.github.com/users/giannicic/followers", "following_url": "https://api.github.com/users/giannicic/following{/other_user}", "gists_url": "https://api.github.com/users/giannicic/gists{/gist_id}", "starred_url": "https://api.github.com/users/giannicic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giannicic/subscriptions", "organizations_url": "https://api.github.com/users/giannicic/orgs", "repos_url": "https://api.github.com/users/giannicic/repos", "events_url": "https://api.github.com/users/giannicic/events{/privacy}", "received_events_url": "https://api.github.com/users/giannicic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giannicic", "id": 10560238, "node_id": "MDQ6VXNlcjEwNTYwMjM4", "avatar_url": "https://avatars.githubusercontent.com/u/10560238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giannicic", "html_url": "https://github.com/giannicic", "followers_url": "https://api.github.com/users/giannicic/followers", "following_url": "https://api.github.com/users/giannicic/following{/other_user}", "gists_url": "https://api.github.com/users/giannicic/gists{/gist_id}", "starred_url": "https://api.github.com/users/giannicic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giannicic/subscriptions", "organizations_url": "https://api.github.com/users/giannicic/orgs", "repos_url": "https://api.github.com/users/giannicic/repos", "events_url": "https://api.github.com/users/giannicic/events{/privacy}", "received_events_url": "https://api.github.com/users/giannicic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f22a929c6d231d9a9d872ac40b5c9e36daabe38", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f22a929c6d231d9a9d872ac40b5c9e36daabe38", "html_url": "https://github.com/rust-lang/rust/commit/2f22a929c6d231d9a9d872ac40b5c9e36daabe38"}], "stats": {"total": 113, "additions": 51, "deletions": 62}, "files": [{"sha": "652e0027383c1c5b320b0e620ce7dfac7b197c60", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/220bb22e1b621ad5a10a44080e3e1872d99f3e9f/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/220bb22e1b621ad5a10a44080e3e1872d99f3e9f/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=220bb22e1b621ad5a10a44080e3e1872d99f3e9f", "patch": "@@ -579,15 +579,15 @@ impl<'a, I, T: 'a> FusedIterator for Cloned<I>\n {}\n \n #[doc(hidden)]\n-default unsafe impl<'a, I, T: 'a> TrustedRandomAccess for Cloned<I>\n+unsafe impl<'a, I, T: 'a> TrustedRandomAccess for Cloned<I>\n     where I: TrustedRandomAccess<Item=&'a T>, T: Clone\n {\n-    unsafe fn get_unchecked(&mut self, i: usize) -> Self::Item {\n+    default unsafe fn get_unchecked(&mut self, i: usize) -> Self::Item {\n         self.it.get_unchecked(i).clone()\n     }\n \n     #[inline]\n-    fn may_have_side_effect() -> bool { true }\n+    default fn may_have_side_effect() -> bool { true }\n }\n \n #[doc(hidden)]"}, {"sha": "4ed25646d436d03671852d1d3a0fcd0f625e9c85", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 11, "deletions": 33, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/220bb22e1b621ad5a10a44080e3e1872d99f3e9f/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/220bb22e1b621ad5a10a44080e3e1872d99f3e9f/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=220bb22e1b621ad5a10a44080e3e1872d99f3e9f", "patch": "@@ -1710,44 +1710,22 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     {\n         debug!(\"assemble_candidates_from_impls(obligation={:?})\", obligation);\n \n-        // Check if default impls should be emitted.\n-        // default impls are emitted if the param_env is refered to a default impl.\n-        // The param_env should contain a Self: Trait<..> predicate in those cases\n-        let self_trait_is_present:Vec<&ty::Predicate<'tcx>> =\n-                    obligation.param_env\n-                               .caller_bounds\n-                               .iter()\n-                               .filter(|predicate| {\n-                                    match **predicate {\n-                                         ty::Predicate::Trait(ref trait_predicate) => {\n-                                             trait_predicate.def_id() ==\n-                                                 obligation.predicate.def_id() &&\n-                                             obligation.predicate.0.trait_ref.self_ty() ==\n-                                                 trait_predicate.skip_binder().self_ty()\n-                                         }\n-                                         _ => false\n-                                    }\n-                               }).collect::<Vec<&ty::Predicate<'tcx>>>();\n-\n         self.tcx().for_each_relevant_impl(\n             obligation.predicate.def_id(),\n             obligation.predicate.0.trait_ref.self_ty(),\n             |impl_def_id| {\n-                if self_trait_is_present.len() > 0 ||\n-                   !self.tcx().impl_is_default(impl_def_id) {\n-                    self.probe(|this, snapshot| { /* [1] */\n-                        match this.match_impl(impl_def_id, obligation, snapshot) {\n-                            Ok(skol_map) => {\n-                                candidates.vec.push(ImplCandidate(impl_def_id));\n-\n-                                // NB: we can safely drop the skol map\n-                                // since we are in a probe [1]\n-                                mem::drop(skol_map);\n-                            }\n-                            Err(_) => { }\n+                self.probe(|this, snapshot| { /* [1] */\n+                    match this.match_impl(impl_def_id, obligation, snapshot) {\n+                        Ok(skol_map) => {\n+                            candidates.vec.push(ImplCandidate(impl_def_id));\n+\n+                            // NB: we can safely drop the skol map\n+                            // since we are in a probe [1]\n+                            mem::drop(skol_map);\n                         }\n-                    });\n-                }\n+                        Err(_) => { }\n+                    }\n+                });\n             }\n         );\n "}, {"sha": "f52f2ea0f9fc8258b9d93964c6694a1da0cb9e9a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/220bb22e1b621ad5a10a44080e3e1872d99f3e9f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/220bb22e1b621ad5a10a44080e3e1872d99f3e9f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=220bb22e1b621ad5a10a44080e3e1872d99f3e9f", "patch": "@@ -2606,31 +2606,8 @@ fn param_env<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                        def_id: DefId)\n                        -> ParamEnv<'tcx> {\n     // Compute the bounds on Self and the type parameters.\n-    let mut predicates = tcx.predicates_of(def_id);\n-    match tcx.hir.as_local_node_id(def_id)\n-           .and_then(|node_id| tcx.hir.find(node_id))\n-           .and_then(|item| {\n-        match item {\n-            hir::map::NodeItem(..) => {\n-                if tcx.impl_is_default(def_id) {\n-                    tcx.impl_trait_ref(def_id)\n-                } else {\n-                    None\n-                }\n-            }\n-            _ => None\n-        }\n-    }) {\n-        Some(trait_ref) =>\n-            predicates.predicates\n-                      .push(\n-                trait_ref.to_poly_trait_ref()\n-                         .to_predicate()\n-            ),\n-        None => {}\n-    }\n \n-    let bounds = predicates.instantiate_identity(tcx);\n+    let bounds = tcx.predicates_of(def_id).instantiate_identity(tcx);\n     let predicates = bounds.predicates;\n \n     // Finally, we have to normalize the bounds in the environment, in"}, {"sha": "1c8d22e4666a6dd4b9884e2bbfe4878f9028838d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/220bb22e1b621ad5a10a44080e3e1872d99f3e9f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/220bb22e1b621ad5a10a44080e3e1872d99f3e9f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=220bb22e1b621ad5a10a44080e3e1872d99f3e9f", "patch": "@@ -1364,6 +1364,7 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let node = tcx.hir.get(node_id);\n \n     let mut is_trait = None;\n+    let mut is_default_impl_trait = None;\n \n     let icx = ItemCtxt::new(tcx, def_id);\n     let no_generics = hir::Generics::empty();\n@@ -1373,8 +1374,13 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         NodeItem(item) => {\n             match item.node {\n+                ItemImpl(_, _, defaultness, ref generics, ..) => {\n+                    if defaultness.is_default() {\n+                        is_default_impl_trait = tcx.impl_trait_ref(def_id);\n+                    }\n+                    generics\n+                }\n                 ItemFn(.., ref generics, _) |\n-                ItemImpl(_, _, _, ref generics, ..) |\n                 ItemTy(_, ref generics) |\n                 ItemEnum(_, ref generics) |\n                 ItemStruct(_, ref generics) |\n@@ -1446,6 +1452,18 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         predicates.push(trait_ref.to_poly_trait_ref().to_predicate());\n     }\n \n+    // In default impls, we can assume that the self type implements\n+    // the trait. So in:\n+    //\n+    //     default impl Foo for Bar { .. }\n+    //\n+    // we add a default where clause `Foo: Bar`. We do a similar thing for traits\n+    // (see below). Recall that a default impl is not itself an impl, but rather a\n+    // set of defaults that can be incorporated into another impl.\n+    if let Some(trait_ref) = is_default_impl_trait {\n+        predicates.push(trait_ref.to_poly_trait_ref().to_predicate());\n+    }\n+\n     // Collect the region predicates that were declared inline as\n     // well. In the case of parameters declared on a fn or method, we\n     // have to be careful to only iterate over early-bound regions."}, {"sha": "eacec2e40f073e44ff875e2b2d88fbda6424f92f", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-trait-item-not-implemented.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/220bb22e1b621ad5a10a44080e3e1872d99f3e9f/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/220bb22e1b621ad5a10a44080e3e1872d99f3e9f/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs?ref=220bb22e1b621ad5a10a44080e3e1872d99f3e9f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Tests that default impls do not have to supply all items but regular impls do.\n+\n #![feature(specialization)]\n \n trait Foo {"}, {"sha": "04ddf9ebb17717be054945af5c3f45b9fe962a79", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-trait-not-implemented.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/220bb22e1b621ad5a10a44080e3e1872d99f3e9f/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/220bb22e1b621ad5a10a44080e3e1872d99f3e9f/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-not-implemented.rs?ref=220bb22e1b621ad5a10a44080e3e1872d99f3e9f", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Tests that:\n+// - default impls do not have to supply all items and\n+// - a default impl does not count as an impl (in this case, an incomplete default impl).\n+\n #![feature(specialization)]\n \n trait Foo {"}, {"sha": "445a59a373e56f1ee962c5f90dacc4ce37e0c461", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-wfcheck.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/220bb22e1b621ad5a10a44080e3e1872d99f3e9f/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/220bb22e1b621ad5a10a44080e3e1872d99f3e9f/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.rs?ref=220bb22e1b621ad5a10a44080e3e1872d99f3e9f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Tests that a default impl still has to have a WF trait ref.\n+\n #![feature(specialization)]\n \n trait Foo<'a, T: Eq + 'a> { }"}, {"sha": "fc7312020053ebd9714beab7a8edbb3c26650ea8", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-trait-item-not-implemented.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/220bb22e1b621ad5a10a44080e3e1872d99f3e9f/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/220bb22e1b621ad5a10a44080e3e1872d99f3e9f/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-trait-item-not-implemented.rs?ref=220bb22e1b621ad5a10a44080e3e1872d99f3e9f", "patch": "@@ -8,25 +8,33 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Tests that we can combine a default impl that supplies one method with a\n+// full impl that supplies the other, and they can invoke one another.\n+\n #![feature(specialization)]\n \n trait Foo {\n     fn foo_one(&self) -> &'static str;\n     fn foo_two(&self) -> &'static str;\n+    fn foo_three(&self) -> &'static str;\n }\n \n struct MyStruct;\n \n default impl<T> Foo for T {\n     fn foo_one(&self) -> &'static str {\n-        \"generic\"\n+        self.foo_three()\n     }\n }\n \n impl Foo for MyStruct {\n     fn foo_two(&self) -> &'static str {\n         self.foo_one()\n     }\n+\n+    fn foo_three(&self) -> &'static str {\n+        \"generic\"\n+    }\n }\n \n fn main() {"}]}