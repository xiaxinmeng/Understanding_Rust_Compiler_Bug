{"sha": "72eaf2c30e846b3d14c520c0c7638b2b16bf8c73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZWFmMmMzMGU4NDZiM2QxNGM1MjBjMGM3NjM4YjJiMTZiZjhjNzM=", "commit": {"author": {"name": "Alexander Bliskovsky", "email": "alexander.bliskovsky@gmail.com", "date": "2015-02-21T02:30:43Z"}, "committer": {"name": "Alexander Bliskovsky", "email": "alexander.bliskovsky@gmail.com", "date": "2015-02-23T01:26:54Z"}, "message": "Switch to &vector notation in the iterators chapter.", "tree": {"sha": "59446a36325ffb5928556f90bf00915b96f3d253", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59446a36325ffb5928556f90bf00915b96f3d253"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72eaf2c30e846b3d14c520c0c7638b2b16bf8c73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72eaf2c30e846b3d14c520c0c7638b2b16bf8c73", "html_url": "https://github.com/rust-lang/rust/commit/72eaf2c30e846b3d14c520c0c7638b2b16bf8c73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72eaf2c30e846b3d14c520c0c7638b2b16bf8c73/comments", "author": {"login": "jxcl", "id": 108500, "node_id": "MDQ6VXNlcjEwODUwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/108500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jxcl", "html_url": "https://github.com/jxcl", "followers_url": "https://api.github.com/users/jxcl/followers", "following_url": "https://api.github.com/users/jxcl/following{/other_user}", "gists_url": "https://api.github.com/users/jxcl/gists{/gist_id}", "starred_url": "https://api.github.com/users/jxcl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jxcl/subscriptions", "organizations_url": "https://api.github.com/users/jxcl/orgs", "repos_url": "https://api.github.com/users/jxcl/repos", "events_url": "https://api.github.com/users/jxcl/events{/privacy}", "received_events_url": "https://api.github.com/users/jxcl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jxcl", "id": 108500, "node_id": "MDQ6VXNlcjEwODUwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/108500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jxcl", "html_url": "https://github.com/jxcl", "followers_url": "https://api.github.com/users/jxcl/followers", "following_url": "https://api.github.com/users/jxcl/following{/other_user}", "gists_url": "https://api.github.com/users/jxcl/gists{/gist_id}", "starred_url": "https://api.github.com/users/jxcl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jxcl/subscriptions", "organizations_url": "https://api.github.com/users/jxcl/orgs", "repos_url": "https://api.github.com/users/jxcl/repos", "events_url": "https://api.github.com/users/jxcl/events{/privacy}", "received_events_url": "https://api.github.com/users/jxcl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcc6ce2c772cb851ac35cbc2ddafcae9bf2fa9fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcc6ce2c772cb851ac35cbc2ddafcae9bf2fa9fd", "html_url": "https://github.com/rust-lang/rust/commit/dcc6ce2c772cb851ac35cbc2ddafcae9bf2fa9fd"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "943dbad35d7747bef8bf6cb66f22ce2bdf96eb65", "filename": "src/doc/trpl/iterators.md", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/72eaf2c30e846b3d14c520c0c7638b2b16bf8c73/src%2Fdoc%2Ftrpl%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/72eaf2c30e846b3d14c520c0c7638b2b16bf8c73/src%2Fdoc%2Ftrpl%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fiterators.md?ref=72eaf2c30e846b3d14c520c0c7638b2b16bf8c73", "patch": "@@ -57,14 +57,13 @@ for i in 0..nums.len() {\n }\n ```\n \n-This is strictly worse than using an actual iterator. The `.iter()` method on\n-vectors returns an iterator which iterates through a reference to each element\n-of the vector in turn. So write this:\n+This is strictly worse than using an actual iterator. You can iterate over vectors\n+directly, so write this:\n \n ```rust\n let nums = vec![1, 2, 3];\n \n-for num in nums.iter() {\n+for num in &nums {\n     println!(\"{}\", num);\n }\n ```\n@@ -86,16 +85,17 @@ see it. This code works fine too:\n ```rust\n let nums = vec![1, 2, 3];\n \n-for num in nums.iter() {\n+for num in &nums {\n     println!(\"{}\", *num);\n }\n ```\n \n-Now we're explicitly dereferencing `num`. Why does `iter()` give us references?\n-Well, if it gave us the data itself, we would have to be its owner, which would\n-involve making a copy of the data and giving us the copy. With references,\n-we're just borrowing a reference to the data, and so it's just passing\n-a reference, without needing to do the copy.\n+Now we're explicitly dereferencing `num`. Why does `&nums` give us\n+references?  Because we asked it to with `&`. If we had not had the\n+`&`, `nums` would have been moved into the `for` loop and consumed,\n+and we we would no longer be able to access `nums` afterward.  With\n+references, we're just borrowing a reference to the data, and so it's\n+just passing a reference, without needing to do the move.\n \n So, now that we've established that ranges are often not what you want, let's\n talk about what you do want instead.\n@@ -230,9 +230,9 @@ let nums = (1..100).collect::<Vec<i32>>();\n Now, `collect()` will require that the range gives it some numbers, and so\n it will do the work of generating the sequence.\n \n-Ranges are one of two basic iterators that you'll see. The other is `iter()`,\n-which you've used before. `iter()` can turn a vector into a simple iterator\n-that gives you each element in turn:\n+Ranges are one of two basic iterators that you'll see. The other is `iter()`.\n+`iter()` can turn a vector into a simple iterator that gives you each element\n+in turn:\n \n ```rust\n let nums = [1, 2, 3];\n@@ -242,6 +242,9 @@ for num in nums.iter() {\n }\n ```\n \n+Sometimes you need this functionality, but since for loops operate on the\n+`IntoIterator` trait, calling `.iter()` is rarely necessary.\n+\n These two basic iterators should serve you well. There are some more\n advanced iterators, including ones that are infinite. Like `count`:\n "}]}