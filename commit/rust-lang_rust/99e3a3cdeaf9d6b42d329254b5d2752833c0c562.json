{"sha": "99e3a3cdeaf9d6b42d329254b5d2752833c0c562", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZTNhM2NkZWFmOWQ2YjQyZDMyOTI1NGI1ZDI3NTI4MzNjMGM1NjI=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-19T10:58:06Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-19T13:43:30Z"}, "message": "Extract extract_version_range", "tree": {"sha": "f2fd4d38543e502dd492497156d755265a3abfb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2fd4d38543e502dd492497156d755265a3abfb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99e3a3cdeaf9d6b42d329254b5d2752833c0c562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99e3a3cdeaf9d6b42d329254b5d2752833c0c562", "html_url": "https://github.com/rust-lang/rust/commit/99e3a3cdeaf9d6b42d329254b5d2752833c0c562", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99e3a3cdeaf9d6b42d329254b5d2752833c0c562/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bcefa8d81fdf46f8ad9d893d271788477ccf95b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bcefa8d81fdf46f8ad9d893d271788477ccf95b", "html_url": "https://github.com/rust-lang/rust/commit/2bcefa8d81fdf46f8ad9d893d271788477ccf95b"}], "stats": {"total": 66, "additions": 34, "deletions": 32}, "files": [{"sha": "3d9c87549913698121cc37a97d2271e656690c5e", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 34, "deletions": 32, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/99e3a3cdeaf9d6b42d329254b5d2752833c0c562/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e3a3cdeaf9d6b42d329254b5d2752833c0c562/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=99e3a3cdeaf9d6b42d329254b5d2752833c0c562", "patch": "@@ -133,7 +133,7 @@ impl EarlyProps {\n         fn ignore_gdb(config: &Config, line: &str) -> bool {\n             if let Some(actual_version) = config.gdb_version {\n                 if let Some(rest) = line.strip_prefix(\"min-gdb-version:\").map(str::trim) {\n-                    let (start_ver, end_ver) = extract_gdb_version_range(rest);\n+                    let (start_ver, end_ver) = extract_version_range(rest, extract_gdb_version);\n \n                     if start_ver != end_ver {\n                         panic!(\"Expected single GDB version\")\n@@ -142,7 +142,8 @@ impl EarlyProps {\n                     // version\n                     return actual_version < start_ver;\n                 } else if let Some(rest) = line.strip_prefix(\"ignore-gdb-version:\").map(str::trim) {\n-                    let (min_version, max_version) = extract_gdb_version_range(rest);\n+                    let (min_version, max_version) =\n+                        extract_version_range(rest, extract_gdb_version);\n \n                     if max_version < min_version {\n                         panic!(\"Malformed GDB version range: max < min\")\n@@ -154,36 +155,6 @@ impl EarlyProps {\n             false\n         }\n \n-        // Takes a directive of the form \"<version1> [- <version2>]\",\n-        // returns the numeric representation of <version1> and <version2> as\n-        // tuple: (<version1> as u32, <version2> as u32)\n-        // If the <version2> part is omitted, the second component of the tuple\n-        // is the same as <version1>.\n-        fn extract_gdb_version_range(line: &str) -> (u32, u32) {\n-            const ERROR_MESSAGE: &'static str = \"Malformed GDB version directive\";\n-\n-            let range_components = line\n-                .split(&[' ', '-'][..])\n-                .filter(|word| !word.is_empty())\n-                .map(extract_gdb_version)\n-                .skip_while(Option::is_none)\n-                .take(3) // 3 or more = invalid, so take at most 3.\n-                .collect::<Vec<Option<u32>>>();\n-\n-            match *range_components {\n-                [v] => {\n-                    let v = v.unwrap();\n-                    (v, v)\n-                }\n-                [min, max] => {\n-                    let v_min = min.unwrap();\n-                    let v_max = max.expect(ERROR_MESSAGE);\n-                    (v_min, v_max)\n-                }\n-                _ => panic!(ERROR_MESSAGE),\n-            }\n-        }\n-\n         fn ignore_lldb(config: &Config, line: &str) -> bool {\n             if let Some(actual_version) = config.lldb_version {\n                 if let Some(min_version) = line.strip_prefix(\"min-lldb-version:\").map(str::trim) {\n@@ -982,3 +953,34 @@ fn parse_normalization_string(line: &mut &str) -> Option<String> {\n     *line = &line[end + 1..];\n     Some(result)\n }\n+\n+// Takes a directive of the form \"<version1> [- <version2>]\",\n+// returns the numeric representation of <version1> and <version2> as\n+// tuple: (<version1> as u32, <version2> as u32)\n+// If the <version2> part is omitted, the second component of the tuple\n+// is the same as <version1>.\n+fn extract_version_range<F>(line: &str, parse: F) -> (u32, u32)\n+where\n+    F: Fn(&str) -> Option<u32>,\n+{\n+    let range_components = line\n+        .split(&[' ', '-'][..])\n+        .filter(|word| !word.is_empty())\n+        .map(parse)\n+        .skip_while(Option::is_none)\n+        .take(3) // 3 or more = invalid, so take at most 3.\n+        .collect::<Vec<Option<u32>>>();\n+\n+    match *range_components {\n+        [v] => {\n+            let v = v.unwrap();\n+            (v, v)\n+        }\n+        [min, max] => {\n+            let v_min = min.unwrap();\n+            let v_max = max.expect(\"Malformed version directive\");\n+            (v_min, v_max)\n+        }\n+        _ => panic!(\"Malformed version directive\"),\n+    }\n+}"}]}