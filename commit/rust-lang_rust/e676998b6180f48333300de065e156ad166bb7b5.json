{"sha": "e676998b6180f48333300de065e156ad166bb7b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NzY5OThiNjE4MGY0ODMzMzMwMGRlMDY1ZTE1NmFkMTY2YmI3YjU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-03T14:24:06Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-03T14:24:06Z"}, "message": "Rustup to rustc 1.40.0-nightly (084beb83e 2019-09-27)", "tree": {"sha": "d387bd83094c0459147e7218b542f49f12ddea46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d387bd83094c0459147e7218b542f49f12ddea46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e676998b6180f48333300de065e156ad166bb7b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e676998b6180f48333300de065e156ad166bb7b5", "html_url": "https://github.com/rust-lang/rust/commit/e676998b6180f48333300de065e156ad166bb7b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e676998b6180f48333300de065e156ad166bb7b5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b6706c9245dc1948498acc7af10263a8408c018", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b6706c9245dc1948498acc7af10263a8408c018", "html_url": "https://github.com/rust-lang/rust/commit/1b6706c9245dc1948498acc7af10263a8408c018"}], "stats": {"total": 157, "additions": 60, "deletions": 97}, "files": [{"sha": "ee550af83012e45a6787f5fd095a9883b85e715b", "filename": "patches/0017-Fix-libtest-compilation.patch", "status": "modified", "additions": 60, "deletions": 22, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/e676998b6180f48333300de065e156ad166bb7b5/patches%2F0017-Fix-libtest-compilation.patch", "raw_url": "https://github.com/rust-lang/rust/raw/e676998b6180f48333300de065e156ad166bb7b5/patches%2F0017-Fix-libtest-compilation.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0017-Fix-libtest-compilation.patch?ref=e676998b6180f48333300de065e156ad166bb7b5", "patch": "@@ -1,32 +1,77 @@\n-From a25405f1fc4a168c9c370524be48aff8c8ebc529 Mon Sep 17 00:00:00 2001\n+From e77c222bb7ec0a99a69dcbb039c75fd1ea9db368 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Wed, 12 Jun 2019 18:07:23 +0200\n+Date: Thu, 3 Oct 2019 16:22:21 +0200\n Subject: [PATCH] Fix libtest compilation\n \n ---\n- src/libtest/lib.rs | 11 +++++------\n- 1 file changed, 5 insertions(+), 6 deletions(-)\n+ src/libtest/lib.rs | 30 +++++-------------------------\n+ 1 file changed, 5 insertions(+), 25 deletions(-)\n \n diff --git a/src/libtest/lib.rs b/src/libtest/lib.rs\n-index 810a98e..4fdde0e 100644\n+index e441514..8e8b4df 100644\n --- a/src/libtest/lib.rs\n +++ b/src/libtest/lib.rs\n-@@ -1441,12 +1441,12 @@ pub fn run_test(\n-         return;\n-     }\n+@@ -24,7 +24,6 @@\n+ #![cfg_attr(any(unix, target_os = \"cloudabi\"), feature(libc, rustc_private))]\n+ #![feature(nll)]\n+ #![feature(set_stdio)]\n+-#![feature(panic_unwind)]\n+ #![feature(staged_api)]\n+ #![feature(termination_trait_lib)]\n+ #![feature(test)]\n+@@ -34,16 +33,6 @@ use getopts;\n+ extern crate libc;\n+ use term;\n  \n--    fn run_test_inner(\n-+    fn run_test_inner<F: FnOnce() + Send + 'static>(\n-         desc: TestDesc,\n+-// FIXME(#54291): rustc and/or LLVM don't yet support building with panic-unwind\n+-//                on aarch64-pc-windows-msvc, or thumbv7a-pc-windows-msvc\n+-//                so we don't link libtest against libunwind (for the time being)\n+-//                even though it means that libtest won't be fully functional on\n+-//                these platforms.\n+-//\n+-// See also: https://github.com/rust-lang/rust/issues/54190#issuecomment-422904437\n+-#[cfg(not(all(windows, any(target_arch = \"aarch64\", target_arch = \"arm\"))))]\n+-extern crate panic_unwind;\n+-\n+ pub use self::ColorConfig::*;\n+ use self::NamePadding::*;\n+ use self::OutputLocation::*;\n+@@ -61,7 +50,6 @@ use std::fmt;\n+ use std::fs::File;\n+ use std::io;\n+ use std::io::prelude::*;\n+-use std::panic::{catch_unwind, AssertUnwindSafe};\n+ use std::path::PathBuf;\n+ use std::process;\n+ use std::process::Termination;\n+@@ -1434,7 +1422,7 @@ pub fn run_test(\n          monitor_ch: Sender<MonitorMsg>,\n          nocapture: bool,\n          report_time: bool,\n -        testfn: Box<dyn FnOnce() + Send>,\n-+        testfn: F,\n++        testfn: Box<impl FnOnce() + Send + 'static>,\n          concurrency: Concurrent,\n      ) {\n          // Buffer for capturing standard I/O\n-@@ -1500,23 +1500,15 @@ pub fn run_test(\n+@@ -1457,7 +1445,7 @@ pub fn run_test(\n+             } else {\n+                 None\n+             };\n+-            let result = catch_unwind(AssertUnwindSafe(testfn));\n++            let result = Ok(testfn());\n+             let exec_time = start.map(|start| {\n+                 let duration = start.elapsed();\n+                 TestExecTime(duration)\n+@@ -1478,7 +1466,7 @@ pub fn run_test(\n+         // If the platform is single-threaded we're just going to run\n+         // the test synchronously, regardless of the concurrency\n+         // level.\n+-        let supports_threads = !cfg!(target_os = \"emscripten\") && !cfg!(target_arch = \"wasm32\");\n++        let supports_threads = false;\n+         if concurrency == Concurrent::Yes && supports_threads {\n+             let cfg = thread::Builder::new().name(name.as_slice().to_owned());\n+             cfg.spawn(runtest).unwrap();\n+@@ -1498,16 +1486,8 @@ pub fn run_test(\n                  (benchfn.clone())(harness)\n              });\n          }\n@@ -45,13 +90,6 @@ index 810a98e..4fdde0e 100644\n          }\n          StaticTestFn(f) => run_test_inner(\n              desc,\n-             monitor_ch,\n-             opts.nocapture,\n-             opts.report_time,\n--            Box::new(move || __rust_begin_short_backtrace(f)),\n-+            move || __rust_begin_short_backtrace(f),\n-             concurrency,\n-         ),\n-     }\n -- \n-2.11.0\n+2.20.1\n+"}, {"sha": "19cead46ff718891c0d75ec1e76e44999adbe0c9", "filename": "patches/0018-test-Force-single-thread-mode.patch", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1b6706c9245dc1948498acc7af10263a8408c018/patches%2F0018-test-Force-single-thread-mode.patch", "raw_url": "https://github.com/rust-lang/rust/raw/1b6706c9245dc1948498acc7af10263a8408c018/patches%2F0018-test-Force-single-thread-mode.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0018-test-Force-single-thread-mode.patch?ref=1b6706c9245dc1948498acc7af10263a8408c018", "patch": "@@ -1,34 +0,0 @@\n-From e275a6ac96bedda2d57296914f2bb736e1e4154c Mon Sep 17 00:00:00 2001\n-From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Fri, 9 Aug 2019 13:16:55 +0200\n-Subject: [PATCH] [test] Force single thread mode\n-\n----\n- src/libtest/lib.rs | 11 +----------\n- 1 file changed, 1 insertion(+), 10 deletions(-)\n-\n-diff --git a/src/libtest/lib.rs b/src/libtest/lib.rs\n-index 8d74d9a..c7a3c23 100644\n---- a/src/libtest/lib.rs\n-+++ b/src/libtest/lib.rs\n-@@ -1419,16 +1419,7 @@ pub fn run_test(\n-                 .unwrap();\n-         };\n- \n--        // If the platform is single-threaded we're just going to run\n--        // the test synchronously, regardless of the concurrency\n--        // level.\n--        let supports_threads = !cfg!(target_os = \"emscripten\") && !cfg!(target_arch = \"wasm32\");\n--        if concurrency == Concurrent::Yes && supports_threads {\n--            let cfg = thread::Builder::new().name(name.as_slice().to_owned());\n--            cfg.spawn(runtest).unwrap();\n--        } else {\n--            runtest();\n--        }\n-+        runtest();\n-     }\n- \n-     match testfn {\n--- \n-2.20.1\n-"}, {"sha": "4b46914c34bf22c496c7fc66deb6b2d21a028f0b", "filename": "patches/0020-libtest-Don-t-require-panic_unwind.patch", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1b6706c9245dc1948498acc7af10263a8408c018/patches%2F0020-libtest-Don-t-require-panic_unwind.patch", "raw_url": "https://github.com/rust-lang/rust/raw/1b6706c9245dc1948498acc7af10263a8408c018/patches%2F0020-libtest-Don-t-require-panic_unwind.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0020-libtest-Don-t-require-panic_unwind.patch?ref=1b6706c9245dc1948498acc7af10263a8408c018", "patch": "@@ -1,41 +0,0 @@\n-From 7b30ddc41c71e89d3e6ab6840b0206877d68f201 Mon Sep 17 00:00:00 2001\n-From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Sun, 25 Aug 2019 16:23:06 +0200\n-Subject: [PATCH] [libtest] Don't require panic_unwind\n-\n----\n- src/libtest/lib.rs | 11 -----------\n- 1 file changed, 11 deletions(-)\n-\n-diff --git a/src/libtest/lib.rs b/src/libtest/lib.rs\n-index 9bb76f9..c5fe1aa 100644\n---- a/src/libtest/lib.rs\n-+++ b/src/libtest/lib.rs\n-@@ -24,7 +24,6 @@\n- #![cfg_attr(any(unix, target_os = \"cloudabi\"), feature(libc, rustc_private))]\n- #![feature(nll)]\n- #![feature(set_stdio)]\n--#![feature(panic_unwind)]\n- #![feature(staged_api)]\n- #![feature(termination_trait_lib)]\n- #![feature(test)]\n-@@ -34,16 +33,6 @@ use getopts;\n- extern crate libc;\n- use term;\n- \n--// FIXME(#54291): rustc and/or LLVM don't yet support building with panic-unwind\n--//                on aarch64-pc-windows-msvc, or thumbv7a-pc-windows-msvc\n--//                so we don't link libtest against libunwind (for the time being)\n--//                even though it means that libtest won't be fully functional on\n--//                these platforms.\n--//\n--// See also: https://github.com/rust-lang/rust/issues/54190#issuecomment-422904437\n--#[cfg(not(all(windows, any(target_arch = \"aarch64\", target_arch = \"arm\"))))]\n--extern crate panic_unwind;\n--\n- pub use self::ColorConfig::*;\n- use self::NamePadding::*;\n- use self::OutputLocation::*;\n--- \n-2.20.1\n-"}]}