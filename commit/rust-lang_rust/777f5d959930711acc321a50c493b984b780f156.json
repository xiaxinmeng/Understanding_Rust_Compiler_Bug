{"sha": "777f5d959930711acc321a50c493b984b780f156", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3N2Y1ZDk1OTkzMDcxMWFjYzMyMWE1MGM0OTNiOTg0Yjc4MGYxNTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-09T16:02:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-09T16:02:29Z"}, "message": "Auto merge of #23219 - Manishearth:rollup, r=Manishearth", "tree": {"sha": "ffccc97fc7749ec7f386e012e1b6a98d4a1d2727", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffccc97fc7749ec7f386e012e1b6a98d4a1d2727"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/777f5d959930711acc321a50c493b984b780f156", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/777f5d959930711acc321a50c493b984b780f156", "html_url": "https://github.com/rust-lang/rust/commit/777f5d959930711acc321a50c493b984b780f156", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/777f5d959930711acc321a50c493b984b780f156/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2574009af0ff70dc233beab246db8f2d715be2cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2574009af0ff70dc233beab246db8f2d715be2cb", "html_url": "https://github.com/rust-lang/rust/commit/2574009af0ff70dc233beab246db8f2d715be2cb"}, {"sha": "646830076a289d6040ba8e29518266d34ef1c5dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/646830076a289d6040ba8e29518266d34ef1c5dd", "html_url": "https://github.com/rust-lang/rust/commit/646830076a289d6040ba8e29518266d34ef1c5dd"}], "stats": {"total": 73, "additions": 40, "deletions": 33}, "files": [{"sha": "93f0daa7141f575fd5563643a1514b47fc1a0607", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/777f5d959930711acc321a50c493b984b780f156/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/777f5d959930711acc321a50c493b984b780f156/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=777f5d959930711acc321a50c493b984b780f156", "patch": "@@ -115,7 +115,7 @@ The Rust community congregates in a few places:\n \n ## Contributing\n \n-To contribute to Rust, please see [CONTRIBUTING.md](CONTRIBUTING.md).\n+To contribute to Rust, please see [CONTRIBUTING](CONTRIBUTING.md).\n \n Rust has an [IRC] culture and most real-time collaboration happens in a\n variety of channels on Mozilla's IRC network, irc.mozilla.org. The\n@@ -131,4 +131,4 @@ Rust is primarily distributed under the terms of both the MIT license\n and the Apache License (Version 2.0), with portions covered by various\n BSD-like licenses.\n \n-See LICENSE-APACHE, LICENSE-MIT, and COPYRIGHT for details.\n+See [LICENSE-APACHE](LICENSE-APACHE), [LICENSE-MIT](LICENSE-MIT), and [COPYRIGHT](COPYRIGHT) for details."}, {"sha": "9e575abeee2173d415e7064599c89f30c86614d6", "filename": "src/doc/intro.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/777f5d959930711acc321a50c493b984b780f156/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/777f5d959930711acc321a50c493b984b780f156/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=777f5d959930711acc321a50c493b984b780f156", "patch": "@@ -389,11 +389,11 @@ safe concurrent programs.\n Here's an example of a concurrent Rust program:\n \n ```{rust}\n-use std::thread::Thread;\n+use std::thread;\n \n fn main() {\n     let guards: Vec<_> = (0..10).map(|_| {\n-        Thread::scoped(|| {\n+        thread::scoped(|| {\n             println!(\"Hello, world!\");\n         })\n     }).collect();\n@@ -421,16 +421,16 @@ problem.\n Let's see an example. This Rust code will not compile:\n \n ```{rust,ignore}\n-use std::thread::Thread;\n+use std::thread;\n \n fn main() {\n     let mut numbers = vec![1, 2, 3];\n \n     let guards: Vec<_> = (0..3).map(|i| {\n-        Thread::scoped(move || {\n+        thread::scoped(move || {\n             numbers[i] += 1;\n             println!(\"numbers[{}] is {}\", i, numbers[i]);\n-        });\n+        })\n     }).collect();\n }\n ```\n@@ -439,10 +439,10 @@ It gives us this error:\n \n ```text\n 7:25: 10:6 error: cannot move out of captured outer variable in an `FnMut` closure\n-7     Thread::scoped(move || {\n+7     thread::scoped(move || {\n 8       numbers[i] += 1;\n 9       println!(\"numbers[{}] is {}\", i, numbers[i]);\n-10     });\n+10     })\n error: aborting due to previous error\n ```\n \n@@ -471,19 +471,19 @@ mutation doesn't cause a data race.\n Here's what using an Arc with a Mutex looks like:\n \n ```{rust}\n-use std::thread::Thread;\n+use std::thread;\n use std::sync::{Arc,Mutex};\n \n fn main() {\n     let numbers = Arc::new(Mutex::new(vec![1, 2, 3]));\n \n     let guards: Vec<_> = (0..3).map(|i| {\n         let number = numbers.clone();\n-        Thread::scoped(move || {\n+        thread::scoped(move || {\n             let mut array = number.lock().unwrap();\n             array[i] += 1;\n             println!(\"numbers[{}] is {}\", i, array[i]);\n-        });\n+        })\n     }).collect();\n }\n ```\n@@ -535,15 +535,15 @@ As an example, Rust's ownership system is _entirely_ at compile time. The\n safety check that makes this an error about moved values:\n \n ```{rust,ignore}\n-use std::thread::Thread;\n+use std::thread;\n \n fn main() {\n     let numbers = vec![1, 2, 3];\n \n     let guards: Vec<_> = (0..3).map(|i| {\n-        Thread::scoped(move || {\n+        thread::scoped(move || {\n             println!(\"{}\", numbers[i]);\n-        });\n+        })\n     }).collect();\n }\n ```"}, {"sha": "ee5ebfc7e88a59f38a31aee878aaa8a68ada75c7", "filename": "src/doc/reference.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/777f5d959930711acc321a50c493b984b780f156/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/777f5d959930711acc321a50c493b984b780f156/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=777f5d959930711acc321a50c493b984b780f156", "patch": "@@ -3007,10 +3007,6 @@ A type cast expression is denoted with the binary operator `as`.\n Executing an `as` expression casts the value on the left-hand side to the type\n on the right-hand side.\n \n-A numeric value can be cast to any numeric type. A raw pointer value can be\n-cast to or from any integral type or raw pointer type. Any other cast is\n-unsupported and will fail to compile.\n-\n An example of an `as` expression:\n \n ```"}, {"sha": "4f77a20c7cac853e0367af0794deab2c74a82c79", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/777f5d959930711acc321a50c493b984b780f156/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777f5d959930711acc321a50c493b984b780f156/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=777f5d959930711acc321a50c493b984b780f156", "patch": "@@ -631,9 +631,6 @@ impl<'b, T> DerefMut for RefMut<'b, T> {\n ///\n /// Types like `Cell<T>` and `RefCell<T>` use this type to wrap their internal data.\n ///\n-/// `UnsafeCell<T>` doesn't opt-out from any marker traits, instead, types with an `UnsafeCell<T>`\n-/// interior are expected to opt-out from those traits themselves.\n-///\n /// # Examples\n ///\n /// ```"}, {"sha": "fe53ea1f0af8413d6ef81333123448dcc5736aef", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/777f5d959930711acc321a50c493b984b780f156/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777f5d959930711acc321a50c493b984b780f156/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=777f5d959930711acc321a50c493b984b780f156", "patch": "@@ -193,14 +193,9 @@ pub trait Copy : MarkerTrait {\n /// the `sync` crate do ensure that any mutation cannot cause data\n /// races.  Hence these types are `Sync`.\n ///\n-/// Users writing their own types with interior mutability (or anything\n-/// else that is not thread-safe) should use the `NoSync` marker type\n-/// (from `std::marker`) to ensure that the compiler doesn't\n-/// consider the user-defined type to be `Sync`.  Any types with\n-/// interior mutability must also use the `std::cell::UnsafeCell` wrapper\n-/// around the value(s) which can be mutated when behind a `&`\n-/// reference; not doing this is undefined behaviour (for example,\n-/// `transmute`-ing from `&T` to `&mut T` is illegal).\n+/// Any types with interior mutability must also use the `std::cell::UnsafeCell` wrapper around the\n+/// value(s) which can be mutated when behind a `&` reference; not doing this is undefined\n+/// behaviour (for example, `transmute`-ing from `&T` to `&mut T` is illegal).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang=\"sync\"]\n #[rustc_on_unimplemented = \"`{Self}` cannot be shared between threads safely\"]"}, {"sha": "752eca797bd1398d5219b43220db75ed4cfaf6b7", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/777f5d959930711acc321a50c493b984b780f156/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777f5d959930711acc321a50c493b984b780f156/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=777f5d959930711acc321a50c493b984b780f156", "patch": "@@ -1517,7 +1517,7 @@ pub trait FromStrRadix {\n     fn from_str_radix(str: &str, radix: u32) -> Result<Self, Self::Err>;\n }\n \n-/// A utility function that just calls FromStrRadix::from_str_radix.\n+/// A utility function that just calls `FromStrRadix::from_str_radix`.\n #[unstable(feature = \"core\", reason = \"needs reevaluation\")]\n pub fn from_str_radix<T: FromStrRadix>(str: &str, radix: u32)\n                                        -> Result<T, T::Err> {"}, {"sha": "dc27a30110950454f813cf5ac82003408a379e37", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/777f5d959930711acc321a50c493b984b780f156/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777f5d959930711acc321a50c493b984b780f156/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=777f5d959930711acc321a50c493b984b780f156", "patch": "@@ -927,7 +927,7 @@ pub fn build_output_filenames(input: &Input,\n             // We want to toss everything after the final '.'\n             let dirpath = match *odir {\n                 Some(ref d) => d.clone(),\n-                None => PathBuf::new(\".\")\n+                None => PathBuf::new(\"\")\n             };\n \n             // If a crate name is present, we use it as the link name\n@@ -954,8 +954,11 @@ pub fn build_output_filenames(input: &Input,\n             if *odir != None {\n                 sess.warn(\"ignoring --out-dir flag due to -o flag.\");\n             }\n+\n+            let cur_dir = Path::new(\"\");\n+\n             OutputFilenames {\n-                out_directory: out_file.parent().unwrap().to_path_buf(),\n+                out_directory: out_file.parent().unwrap_or(cur_dir).to_path_buf(),\n                 out_filestem: out_file.file_stem().unwrap()\n                                       .to_str().unwrap().to_string(),\n                 single_output_file: ofile,"}, {"sha": "97d09c837c10acde0db7c53ef21a30e39ff5345b", "filename": "src/test/run-make/bare-outfile/Makefile", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/777f5d959930711acc321a50c493b984b780f156/src%2Ftest%2Frun-make%2Fbare-outfile%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/777f5d959930711acc321a50c493b984b780f156/src%2Ftest%2Frun-make%2Fbare-outfile%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbare-outfile%2FMakefile?ref=777f5d959930711acc321a50c493b984b780f156", "patch": "@@ -0,0 +1,4 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(rustc) -o foo foo.rs"}, {"sha": "63e747901ae87b4e83c69e81fe59e18ee4de9498", "filename": "src/test/run-make/bare-outfile/foo.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/777f5d959930711acc321a50c493b984b780f156/src%2Ftest%2Frun-make%2Fbare-outfile%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/777f5d959930711acc321a50c493b984b780f156/src%2Ftest%2Frun-make%2Fbare-outfile%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbare-outfile%2Ffoo.rs?ref=777f5d959930711acc321a50c493b984b780f156", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+}"}]}