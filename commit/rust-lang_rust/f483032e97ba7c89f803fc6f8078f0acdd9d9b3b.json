{"sha": "f483032e97ba7c89f803fc6f8078f0acdd9d9b3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ODMwMzJlOTdiYTdjODlmODAzZmM2ZjgwNzhmMGFjZGQ5ZDliM2I=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-03-06T19:58:52Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-03-06T19:58:52Z"}, "message": "review comment", "tree": {"sha": "0d7f93eceae4e58700c915b9410b108b6f0fe9cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d7f93eceae4e58700c915b9410b108b6f0fe9cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f483032e97ba7c89f803fc6f8078f0acdd9d9b3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f483032e97ba7c89f803fc6f8078f0acdd9d9b3b", "html_url": "https://github.com/rust-lang/rust/commit/f483032e97ba7c89f803fc6f8078f0acdd9d9b3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f483032e97ba7c89f803fc6f8078f0acdd9d9b3b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "005fc6eaccacd129e96e049a3342d1d539316433", "url": "https://api.github.com/repos/rust-lang/rust/commits/005fc6eaccacd129e96e049a3342d1d539316433", "html_url": "https://github.com/rust-lang/rust/commit/005fc6eaccacd129e96e049a3342d1d539316433"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "24cf4556dad2f668a6b43c45ec767c70ada30fc8", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f483032e97ba7c89f803fc6f8078f0acdd9d9b3b/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f483032e97ba7c89f803fc6f8078f0acdd9d9b3b/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=f483032e97ba7c89f803fc6f8078f0acdd9d9b3b", "patch": "@@ -820,40 +820,35 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 ref self_ty,\n                 items: _,\n             } => {\n-                let error = |annotation_span, annotation, note, code| {\n+                let error = |annotation_span, annotation| {\n                     let mut err = self.err_handler().struct_span_err(\n                         self_ty.span,\n                         &format!(\"inherent impls cannot be {}\", annotation),\n                     );\n                     err.span_label(annotation_span, &format!(\"{} because of this\", annotation));\n                     err.span_label(self_ty.span, \"inherent impl for this type\");\n-                    if note {\n-                        err.note(&format!(\n-                            \"only trait implementations may be annotated with {}\",\n-                            annotation\n-                        ));\n-                    }\n-                    if code {\n-                        err.code(error_code!(E0197));\n-                    }\n-                    err.emit();\n+                    err\n                 };\n \n                 self.invalid_visibility(\n                     &item.vis,\n                     Some(\"place qualifiers on individual impl items instead\"),\n                 );\n                 if let Unsafe::Yes(span) = unsafety {\n-                    error(span, \"unsafe\", false, true)\n+                    error(span, \"unsafe\").code(error_code!(E0197)).emit();\n                 }\n                 if let ImplPolarity::Negative(span) = polarity {\n-                    error(span, \"negative\", false, false);\n+                    error(span, \"negative\").emit();\n                 }\n                 if let Defaultness::Default(def_span) = defaultness {\n-                    error(def_span, \"`default`\", true, false);\n+                    error(def_span, \"`default`\")\n+                        .note(\"only trait implementations may be annotated with `default`\")\n+                        .emit();\n                 }\n                 if let Const::Yes(span) = constness {\n-                    error(span, \"`const`\", true, false);\n+                    error(span, \"`const`\")\n+                        .note(\"only trait implementations may be annotated with `const`\")\n+                        .emit();\n                 }\n             }\n             ItemKind::Fn(def, ref sig, ref generics, ref body) => {"}]}