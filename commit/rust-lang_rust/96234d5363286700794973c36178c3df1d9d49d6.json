{"sha": "96234d5363286700794973c36178c3df1d9d49d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MjM0ZDUzNjMyODY3MDA3OTQ5NzNjMzYxNzhjM2RmMWQ5ZDQ5ZDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-16T15:50:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-16T15:50:44Z"}, "message": "Auto merge of #62723 - Mark-Simulacrum:rollup-vjdzlam, r=Mark-Simulacrum\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #62666 (Cancel unemitted diagnostics during error recovery)\n - #62683 (Chapter for `param_attrs`)\n - #62693 (ci: Remove Travis/AppVeyor configuration)\n - #62702 (normalize use of backticks in compiler messages for libsyntax_ext)\n - #62703 (normalize use of backticks in compiler messages for libsyntax/parse)\n - #62722 (ci: Bump time limit of tools builder on PRs)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "90d64eee591ded0643d08c14c4281947e832ca49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90d64eee591ded0643d08c14c4281947e832ca49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96234d5363286700794973c36178c3df1d9d49d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96234d5363286700794973c36178c3df1d9d49d6", "html_url": "https://github.com/rust-lang/rust/commit/96234d5363286700794973c36178c3df1d9d49d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96234d5363286700794973c36178c3df1d9d49d6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d36b7f69448f7390fa9dfde75d58b914365acdab", "url": "https://api.github.com/repos/rust-lang/rust/commits/d36b7f69448f7390fa9dfde75d58b914365acdab", "html_url": "https://github.com/rust-lang/rust/commit/d36b7f69448f7390fa9dfde75d58b914365acdab"}, {"sha": "51ca50ebd617f275dea415519192c0707a1084b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/51ca50ebd617f275dea415519192c0707a1084b8", "html_url": "https://github.com/rust-lang/rust/commit/51ca50ebd617f275dea415519192c0707a1084b8"}], "stats": {"total": 320, "additions": 63, "deletions": 257}, "files": [{"sha": "b389dcfef45a1280a24f28a30561d18ade75b0cc", "filename": ".azure-pipelines/pr.yml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/.azure-pipelines%2Fpr.yml", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/.azure-pipelines%2Fpr.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fpr.yml?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -21,6 +21,7 @@ jobs:\n         IMAGE: mingw-check\n \n - job: LinuxTools\n+  timeoutInMinutes: 600\n   pool:\n     vmImage: ubuntu-16.04\n   steps:"}, {"sha": "1d35ea0efacc247512c214f8baec0b6cdb0fe1ee", "filename": ".travis.yml", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d36b7f69448f7390fa9dfde75d58b914365acdab/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/d36b7f69448f7390fa9dfde75d58b914365acdab/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=d36b7f69448f7390fa9dfde75d58b914365acdab", "patch": "@@ -1,10 +0,0 @@\n-language: shell\n-script: echo Travis CI is not used anymore\n-\n-branches:\n-  only:\n-    - auto\n-    - try\n-\n-notifications:\n-  email: false"}, {"sha": "003de85184c32b3c4ffa35747f01148c24b948d7", "filename": "appveyor.yml", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d36b7f69448f7390fa9dfde75d58b914365acdab/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/d36b7f69448f7390fa9dfde75d58b914365acdab/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=d36b7f69448f7390fa9dfde75d58b914365acdab", "patch": "@@ -1,9 +0,0 @@\n-clone_depth: 1\n-build: false\n-\n-test_script:\n-  - echo AppVeyor is not used anymore\n-\n-branches:\n-  only:\n-    - auto"}, {"sha": "11b082ac3f6d8ad226e162f99e630c2b15eb440b", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -50,7 +50,6 @@ impl Step for Std {\n         let mut cargo = builder.cargo(compiler, Mode::Std, target, cargo_subcommand(builder.kind));\n         std_cargo(builder, &compiler, target, &mut cargo);\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-std\", compiler.stage));\n         builder.info(&format!(\"Checking std artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n@@ -99,7 +98,6 @@ impl Step for Rustc {\n             cargo_subcommand(builder.kind));\n         rustc_cargo(builder, &mut cargo);\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-rustc\", compiler.stage));\n         builder.info(&format!(\"Checking compiler artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n@@ -153,7 +151,6 @@ impl Step for CodegenBackend {\n \n         // We won't build LLVM if it's not available, as it shouldn't affect `check`.\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-rustc_codegen_llvm\", compiler.stage));\n         run_cargo(builder,\n                   &mut cargo,\n                   args(builder.kind),\n@@ -190,7 +187,6 @@ impl Step for Test {\n         let mut cargo = builder.cargo(compiler, Mode::Test, target, cargo_subcommand(builder.kind));\n         test_cargo(builder, &compiler, target, &mut cargo);\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-test\", compiler.stage));\n         builder.info(&format!(\"Checking test artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n@@ -239,7 +235,6 @@ impl Step for Rustdoc {\n                                            SourceType::InTree,\n                                            &[]);\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-rustdoc\", compiler.stage));\n         println!(\"Checking rustdoc artifacts ({} -> {})\", &compiler.host, target);\n         run_cargo(builder,\n                   &mut cargo,"}, {"sha": "9ced04a5c808a1f64937e27c3fc58b679a8f7341", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -95,7 +95,6 @@ impl Step for Std {\n         let mut cargo = builder.cargo(compiler, Mode::Std, target, \"build\");\n         std_cargo(builder, &compiler, target, &mut cargo);\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-std\", compiler.stage));\n         builder.info(&format!(\"Building stage{} std artifacts ({} -> {})\", compiler.stage,\n                 &compiler.host, target));\n         run_cargo(builder,\n@@ -422,7 +421,6 @@ impl Step for Test {\n         let mut cargo = builder.cargo(compiler, Mode::Test, target, \"build\");\n         test_cargo(builder, &compiler, target, &mut cargo);\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-test\", compiler.stage));\n         builder.info(&format!(\"Building stage{} test artifacts ({} -> {})\", compiler.stage,\n                 &compiler.host, target));\n         run_cargo(builder,\n@@ -555,7 +553,6 @@ impl Step for Rustc {\n         let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"build\");\n         rustc_cargo(builder, &mut cargo);\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-rustc\", compiler.stage));\n         builder.info(&format!(\"Building stage{} compiler artifacts ({} -> {})\",\n                  compiler.stage, &compiler.host, target));\n         run_cargo(builder,\n@@ -710,7 +707,6 @@ impl Step for CodegenBackend {\n \n         let tmp_stamp = out_dir.join(\".tmp.stamp\");\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-rustc_codegen_llvm\", compiler.stage));\n         let files = run_cargo(builder,\n                               cargo.arg(\"--features\").arg(features),\n                               vec![],"}, {"sha": "7011b7f1664c7832ce5fa03c357d468bebad7cb3", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -128,7 +128,7 @@ use build_helper::{\n };\n use filetime::FileTime;\n \n-use crate::util::{exe, libdir, OutputFolder, CiEnv};\n+use crate::util::{exe, libdir, CiEnv};\n \n mod cc_detect;\n mod channel;\n@@ -1092,19 +1092,6 @@ impl Build {\n         }\n     }\n \n-    /// Fold the output of the commands after this method into a group. The fold\n-    /// ends when the returned object is dropped. Folding can only be used in\n-    /// the Travis CI environment.\n-    pub fn fold_output<D, F>(&self, name: F) -> Option<OutputFolder>\n-        where D: Into<String>, F: FnOnce() -> D\n-    {\n-        if !self.config.dry_run && self.ci_env == CiEnv::Travis {\n-            Some(OutputFolder::new(name().into()))\n-        } else {\n-            None\n-        }\n-    }\n-\n     /// Updates the actual toolstate of a tool.\n     ///\n     /// The toolstates are saved to the file specified by the key"}, {"sha": "f8d1abe299473669443286e0b086a23bb37a093b", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -104,7 +104,6 @@ impl Step for Llvm {\n             }\n         }\n \n-        let _folder = builder.fold_output(|| \"llvm\");\n         let descriptor = if emscripten { \"Emscripten \" } else { \"\" };\n         builder.info(&format!(\"Building {}LLVM for {}\", descriptor, target));\n         let _time = util::timeit(&builder);\n@@ -493,7 +492,6 @@ impl Step for Lld {\n             return out_dir\n         }\n \n-        let _folder = builder.fold_output(|| \"lld\");\n         builder.info(&format!(\"Building LLD for {}\", target));\n         let _time = util::timeit(&builder);\n         t!(fs::create_dir_all(&out_dir));\n@@ -560,7 +558,6 @@ impl Step for TestHelpers {\n             return\n         }\n \n-        let _folder = builder.fold_output(|| \"build_test_helpers\");\n         builder.info(\"Building test helpers\");\n         t!(fs::create_dir_all(&dst));\n         let mut cfg = cc::Build::new();"}, {"sha": "26fd7585ab5d1c6f86291bc00e4275444c20be55", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -713,7 +713,6 @@ impl Step for Tidy {\n             cmd.arg(\"--verbose\");\n         }\n \n-        let _folder = builder.fold_output(|| \"tidy\");\n         builder.info(\"tidy check\");\n         try_run(builder, &mut cmd);\n     }\n@@ -1310,7 +1309,6 @@ impl Step for Compiletest {\n \n         builder.ci_env.force_coloring_in_ci(&mut cmd);\n \n-        let _folder = builder.fold_output(|| format!(\"test_{}\", suite));\n         builder.info(&format!(\n             \"Check compiletest suite={} mode={} ({} -> {})\",\n             suite, mode, &compiler.host, target\n@@ -1320,7 +1318,6 @@ impl Step for Compiletest {\n \n         if let Some(compare_mode) = compare_mode {\n             cmd.arg(\"--compare-mode\").arg(compare_mode);\n-            let _folder = builder.fold_output(|| format!(\"test_{}_{}\", suite, compare_mode));\n             builder.info(&format!(\n                 \"Check compiletest suite={} mode={} compare_mode={} ({} -> {})\",\n                 suite, mode, compare_mode, &compiler.host, target\n@@ -1364,7 +1361,6 @@ impl Step for DocTest {\n         // tests for all files that end in `*.md`\n         let mut stack = vec![builder.src.join(self.path)];\n         let _time = util::timeit(&builder);\n-        let _folder = builder.fold_output(|| format!(\"test_{}\", self.name));\n \n         let mut files = Vec::new();\n         while let Some(p) = stack.pop() {\n@@ -1495,7 +1491,6 @@ impl Step for ErrorIndex {\n             .env(\"CFG_BUILD\", &builder.config.build)\n             .env(\"RUSTC_ERROR_METADATA_DST\", builder.extended_error_dir());\n \n-        let _folder = builder.fold_output(|| \"test_error_index\");\n         builder.info(&format!(\"Testing error-index stage{}\", compiler.stage));\n         let _time = util::timeit(&builder);\n         builder.run(&mut tool);\n@@ -1819,14 +1814,6 @@ impl Step for Crate {\n             );\n         }\n \n-        let _folder = builder.fold_output(|| {\n-            format!(\n-                \"{}_stage{}-{}\",\n-                test_kind.subcommand(),\n-                compiler.stage,\n-                krate\n-            )\n-        });\n         builder.info(&format!(\n             \"{} {} stage{} ({} -> {})\",\n             test_kind, krate, compiler.stage, &compiler.host, target\n@@ -1894,8 +1881,6 @@ impl Step for CrateRustdoc {\n             cargo.arg(\"--quiet\");\n         }\n \n-        let _folder = builder\n-            .fold_output(|| format!(\"{}_stage{}-rustdoc\", test_kind.subcommand(), compiler.stage));\n         builder.info(&format!(\n             \"{} rustdoc stage{} ({} -> {})\",\n             test_kind, compiler.stage, &compiler.host, target"}, {"sha": "15a329a5b91529334c24a91d3d3c703cc50a77d8", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -74,7 +74,6 @@ impl Step for ToolBuild {\n             &self.extra_features,\n         );\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-{}\", compiler.stage, tool));\n         builder.info(&format!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target));\n         let mut duplicates = Vec::new();\n         let is_expected = compile::stream_cargo(builder, &mut cargo, vec![], &mut |msg| {\n@@ -509,7 +508,6 @@ impl Step for Rustdoc {\n             &[],\n         );\n \n-        let _folder = builder.fold_output(|| format!(\"stage{}-rustdoc\", target_compiler.stage));\n         builder.info(&format!(\"Building rustdoc for stage{} ({})\",\n             target_compiler.stage, target_compiler.host));\n         builder.run(&mut cargo);"}, {"sha": "98ae7b692bb3c7524bc01bde8bbfea1b799f8fcf", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 3, "deletions": 73, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -6,10 +6,10 @@\n use std::env;\n use std::str;\n use std::fs;\n-use std::io::{self, Write};\n+use std::io;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n-use std::time::{SystemTime, Instant};\n+use std::time::Instant;\n \n use build_helper::t;\n \n@@ -254,90 +254,20 @@ pub fn symlink_dir(config: &Config, src: &Path, dest: &Path) -> io::Result<()> {\n     }\n }\n \n-/// An RAII structure that indicates all output until this instance is dropped\n-/// is part of the same group.\n-///\n-/// On Travis CI, these output will be folded by default, together with the\n-/// elapsed time in this block. This reduces noise from unnecessary logs,\n-/// allowing developers to quickly identify the error.\n-///\n-/// Travis CI supports folding by printing `travis_fold:start:<name>` and\n-/// `travis_fold:end:<name>` around the block. Time elapsed is recognized\n-/// similarly with `travis_time:[start|end]:<name>`. These are undocumented, but\n-/// can easily be deduced from source code of the [Travis build commands].\n-///\n-/// [Travis build commands]:\n-/// https://github.com/travis-ci/travis-build/blob/f603c0089/lib/travis/build/templates/header.sh\n-pub struct OutputFolder {\n-    name: String,\n-    start_time: SystemTime, // we need SystemTime to get the UNIX timestamp.\n-}\n-\n-impl OutputFolder {\n-    /// Creates a new output folder with the given group name.\n-    pub fn new(name: String) -> OutputFolder {\n-        // \"\\r\" moves the cursor to the beginning of the line, and \"\\x1b[0K\" is\n-        // the ANSI escape code to clear from the cursor to end of line.\n-        // Travis seems to have trouble when _not_ using \"\\r\\x1b[0K\", that will\n-        // randomly put lines to the top of the webpage.\n-        print!(\"travis_fold:start:{0}\\r\\x1b[0Ktravis_time:start:{0}\\r\\x1b[0K\", name);\n-        OutputFolder {\n-            name,\n-            start_time: SystemTime::now(),\n-        }\n-    }\n-}\n-\n-impl Drop for OutputFolder {\n-    fn drop(&mut self) {\n-        use std::time::*;\n-        use std::u64;\n-\n-        fn to_nanos(duration: Result<Duration, SystemTimeError>) -> u64 {\n-            match duration {\n-                Ok(d) => d.as_secs() * 1_000_000_000 + d.subsec_nanos() as u64,\n-                Err(_) => u64::MAX,\n-            }\n-        }\n-\n-        let end_time = SystemTime::now();\n-        let duration = end_time.duration_since(self.start_time);\n-        let start = self.start_time.duration_since(UNIX_EPOCH);\n-        let finish = end_time.duration_since(UNIX_EPOCH);\n-        println!(\n-            \"travis_fold:end:{0}\\r\\x1b[0K\\n\\\n-                travis_time:end:{0}:start={1},finish={2},duration={3}\\r\\x1b[0K\",\n-            self.name,\n-            to_nanos(start),\n-            to_nanos(finish),\n-            to_nanos(duration)\n-        );\n-        io::stdout().flush().unwrap();\n-    }\n-}\n-\n /// The CI environment rustbuild is running in. This mainly affects how the logs\n /// are printed.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum CiEnv {\n     /// Not a CI environment.\n     None,\n-    /// The Travis CI environment, for Linux (including Docker) and macOS builds.\n-    Travis,\n-    /// The AppVeyor environment, for Windows builds.\n-    AppVeyor,\n     /// The Azure Pipelines environment, for Linux (including Docker), Windows, and macOS builds.\n     AzurePipelines,\n }\n \n impl CiEnv {\n     /// Obtains the current CI environment.\n     pub fn current() -> CiEnv {\n-        if env::var(\"TRAVIS\").ok().map_or(false, |e| &*e == \"true\") {\n-            CiEnv::Travis\n-        } else if env::var(\"APPVEYOR\").ok().map_or(false, |e| &*e == \"True\") {\n-            CiEnv::AppVeyor\n-        } else if env::var(\"TF_BUILD\").ok().map_or(false, |e| &*e == \"True\") {\n+        if env::var(\"TF_BUILD\").ok().map_or(false, |e| &*e == \"True\") {\n             CiEnv::AzurePipelines\n         } else {\n             CiEnv::None"}, {"sha": "367e43849923fca154a6867d158431a214d2f8c7", "filename": "src/ci/docker/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Fci%2Fdocker%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Fci%2Fdocker%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2FREADME.md?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -20,7 +20,7 @@ Images will output artifacts in an `obj` dir at the root of a repository.\n \n - Each directory, excluding `scripts` and `disabled`, corresponds to a docker image\n - `scripts` contains files shared by docker images\n-- `disabled` contains images that are not built on travis\n+- `disabled` contains images that are not built on CI\n \n ## Docker Toolbox on Windows\n "}, {"sha": "dea41bee6e05c1324dfdb716d45090bd07ada0bb", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -17,9 +17,6 @@ dist=$objdir/build/dist\n \n source \"$ci_dir/shared.sh\"\n \n-travis_fold start build_docker\n-travis_time_start\n-\n if [ -f \"$docker_dir/$image/Dockerfile\" ]; then\n     if [ \"$CI\" != \"\" ]; then\n       hash_key=/tmp/.docker-hash-key.txt\n@@ -94,7 +91,6 @@ elif [ -f \"$docker_dir/disabled/$image/Dockerfile\" ]; then\n         echo Cannot run disabled images on CI!\n         exit 1\n     fi\n-    # retry messes with the pipe from tar to docker. Not needed on non-travis\n     # Transform changes the context of disabled Dockerfiles to match the enabled ones\n     tar --transform 's#^./disabled/#./#' -C $docker_dir -c . | docker \\\n       build \\\n@@ -107,9 +103,6 @@ else\n     exit 1\n fi\n \n-travis_fold end build_docker\n-travis_time_finish\n-\n mkdir -p $HOME/.cargo\n mkdir -p $objdir/tmp\n mkdir -p $objdir/cores\n@@ -144,8 +137,6 @@ exec docker \\\n   --env DEPLOY_ALT \\\n   --env LOCAL_USER_ID=`id -u` \\\n   --env CI \\\n-  --env TRAVIS \\\n-  --env TRAVIS_BRANCH \\\n   --env TF_BUILD \\\n   --env BUILD_SOURCEBRANCHNAME \\\n   --env TOOLSTATE_REPO_ACCESS_TOKEN \\"}, {"sha": "56186a8b6a686b3288807e69bc2731c48d20711a", "filename": "src/ci/docker/x86_64-gnu-tools/repo.sh", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Frepo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Frepo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Frepo.sh?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -5,8 +5,7 @@\n #\n # The function relies on a GitHub bot user, which should have a Personal access\n # token defined in the environment variable $TOOLSTATE_REPO_ACCESS_TOKEN. If for\n-# some reason you need to change the token, please update `.travis.yml` and\n-# `appveyor.yml`:\n+# some reason you need to change the token, please update `.azure-pipelines/*`.\n #\n #   1. Generate a new Personal access token:\n #\n@@ -18,28 +17,9 @@\n #           Save it somewhere secure, as the token would be gone once you leave\n #           the page.\n #\n-#   2. Encrypt the token for Travis CI\n+#   2. Update the variable group in Azure Pipelines\n #\n-#       * Install the `travis` tool locally (`gem install travis`).\n-#       * Encrypt the token:\n-#           ```\n-#           travis -r rust-lang/rust encrypt \\\n-#                   TOOLSTATE_REPO_ACCESS_TOKEN=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n-#           ```\n-#       * Copy output to replace the existing one in `.travis.yml`.\n-#       * Details of this step can be found in\n-#           <https://docs.travis-ci.com/user/encryption-keys/>\n-#\n-#   3. Encrypt the token for AppVeyor\n-#\n-#       * Login to AppVeyor using your main account, and login as the rust-lang\n-#           organization.\n-#       * Open the [\"Encrypt data\" tool](https://ci.appveyor.com/tools/encrypt)\n-#       * Paste the 40-digit token into the \"Value to encrypt\" box, then click\n-#           \"Encrypt\"\n-#       * Copy the output to replace the existing one in `appveyor.yml`.\n-#       * Details of this step can be found in\n-#           <https://www.appveyor.com/docs/how-to/git-push/>\n+#       * Ping a member of the infrastructure team to do this.\n #\n #   4. Replace the email address below if the bot account identity is changed\n #"}, {"sha": "c7c3b0a5fbf5b0733064b0a46695e8f9a80c80ff", "filename": "src/ci/init_repo.sh", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Fci%2Finit_repo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Fci%2Finit_repo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Finit_repo.sh?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -11,9 +11,6 @@ set -o nounset\n ci_dir=$(cd $(dirname $0) && pwd)\n . \"$ci_dir/shared.sh\"\n \n-travis_fold start init_repo\n-travis_time_start\n-\n REPO_DIR=\"$1\"\n CACHE_DIR=\"$2\"\n \n@@ -73,5 +70,3 @@ retry sh -c \"git submodule deinit -f $use_git && \\\n     git submodule sync && \\\n     git submodule update -j 16 --init --recursive $use_git\"\n wait\n-travis_fold end init_repo\n-travis_time_finish"}, {"sha": "b40bef776657302526ccb992d41dfe5580103384", "filename": "src/ci/run.sh", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -91,27 +91,14 @@ if [ \"$RUN_CHECK_WITH_PARALLEL_QUERIES\" != \"\" ]; then\n   rm -rf build\n fi\n \n-travis_fold start configure\n-travis_time_start\n $SRC/configure $RUST_CONFIGURE_ARGS\n-travis_fold end configure\n-travis_time_finish\n \n-travis_fold start make-prepare\n-travis_time_start\n retry make prepare\n-travis_fold end make-prepare\n-travis_time_finish\n \n-travis_fold start check-bootstrap\n-travis_time_start\n make check-bootstrap\n-travis_fold end check-bootstrap\n-travis_time_finish\n \n # Display the CPU and memory information. This helps us know why the CI timing\n # is fluctuating.\n-travis_fold start log-system-info\n if isOSX; then\n     system_profiler SPHardwareDataType || true\n     sysctl hw || true\n@@ -121,19 +108,14 @@ else\n     cat /proc/meminfo || true\n     ncpus=$(grep processor /proc/cpuinfo | wc -l)\n fi\n-travis_fold end log-system-info\n \n if [ ! -z \"$SCRIPT\" ]; then\n   sh -x -c \"$SCRIPT\"\n else\n   do_make() {\n-    travis_fold start \"make-$1\"\n-    travis_time_start\n     echo \"make -j $ncpus $1\"\n     make -j $ncpus $1\n     local retval=$?\n-    travis_fold end \"make-$1\"\n-    travis_time_finish\n     return $retval\n   }\n "}, {"sha": "b093a07ec5c5aac8f116a21ee571b14c3fa8208a", "filename": "src/ci/shared.sh", "status": "modified", "additions": 3, "deletions": 43, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Fci%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Fci%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fshared.sh?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -25,53 +25,13 @@ function retry {\n }\n \n function isCI {\n-  [ \"$CI\" = \"true\" ] || [ \"$TRAVIS\" = \"true\" ] || [ \"$TF_BUILD\" = \"True\" ]\n+  [ \"$CI\" = \"true\" ] || [ \"$TF_BUILD\" = \"True\" ]\n }\n \n function isOSX {\n-  [ \"$TRAVIS_OS_NAME\" = \"osx\" ] || [ \"$AGENT_OS\" = \"Darwin\" ]\n+  [ \"$AGENT_OS\" = \"Darwin\" ]\n }\n \n function getCIBranch {\n-  if [ \"$TRAVIS\" = \"true\" ]; then\n-    echo \"$TRAVIS_BRANCH\"\n-  elif [ \"$APPVEYOR\" = \"True\" ]; then\n-    echo \"$APPVEYOR_REPO_BRANCH\"\n-  else\n-    echo \"$BUILD_SOURCEBRANCHNAME\"\n-  fi;\n+  echo \"$BUILD_SOURCEBRANCHNAME\"\n }\n-\n-if ! declare -F travis_fold; then\n-  if [ \"${TRAVIS-false}\" = 'true' ]; then\n-    # This is a trimmed down copy of\n-    # https://github.com/travis-ci/travis-build/blob/master/lib/travis/build/templates/header.sh\n-    travis_fold() {\n-      echo -en \"travis_fold:$1:$2\\r\\033[0K\"\n-    }\n-    travis_time_start() {\n-      travis_timer_id=$(printf %08x $(( RANDOM * RANDOM )))\n-      travis_start_time=$(travis_nanoseconds)\n-      echo -en \"travis_time:start:$travis_timer_id\\r\\033[0K\"\n-    }\n-    travis_time_finish() {\n-      travis_end_time=$(travis_nanoseconds)\n-      local duration=$(($travis_end_time-$travis_start_time))\n-      local msg=\"travis_time:end:$travis_timer_id\"\n-      echo -en \"\\n$msg:start=$travis_start_time,finish=$travis_end_time,duration=$duration\\r\\033[0K\"\n-    }\n-    if [ $(uname) = 'Darwin' ]; then\n-      travis_nanoseconds() {\n-        date -u '+%s000000000'\n-      }\n-    else\n-      travis_nanoseconds() {\n-        date -u '+%s%N'\n-      }\n-    fi\n-  else\n-    travis_fold() { return 0; }\n-    travis_time_start() { return 0; }\n-    travis_time_finish() { return 0; }\n-  fi\n-fi"}, {"sha": "4b83c204ba10579d2152672578834232bd4d1984", "filename": "src/doc/unstable-book/src/language-features/param-attrs.md", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fparam-attrs.md", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fparam-attrs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fparam-attrs.md?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -0,0 +1,27 @@\n+# `param_attrs`\n+\n+The tracking issue for this feature is: [#60406]\n+\n+[#60406]: https://github.com/rust-lang/rust/issues/60406\n+\n+Allow attributes in formal function parameter position so external tools and compiler internals can\n+take advantage of the additional information that the parameters provide.\n+\n+Enables finer conditional compilation with `#[cfg(..)]` and linting control of variables. Moreover,\n+opens the path to richer DSLs created by users.\n+\n+------------------------\n+\n+Example:\n+\n+```rust\n+#![feature(param_attrs)]\n+\n+fn len(\n+  #[cfg(windows)] slice: &[u16],\n+  #[cfg(not(windows))] slice: &[u8],\n+) -> usize\n+{\n+  slice.len()\n+}\n+```"}, {"sha": "1758d0b0bb947781bcef87b8afa132918f53a351", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -226,7 +226,7 @@ impl<'a> Parser<'a> {\n \n     fn parse_unsuffixed_lit(&mut self) -> PResult<'a, ast::Lit> {\n         let lit = self.parse_lit()?;\n-        debug!(\"Checking if {:?} is unusuffixed.\", lit);\n+        debug!(\"checking if {:?} is unusuffixed\", lit);\n \n         if !lit.node.is_unsuffixed() {\n             let msg = \"suffixed literals are not allowed in attributes\";"}, {"sha": "0e88a0ee289378ff3353d269a3d014c65f2ec897", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -919,7 +919,7 @@ impl<'a> Parser<'a> {\n                     Applicability::MaybeIncorrect,\n                 );\n             } else {\n-                err.note(\"#![feature(type_ascription)] lets you annotate an \\\n+                err.note(\"`#![feature(type_ascription)]` lets you annotate an \\\n                           expression with a type: `<expr>: <type>`\")\n                     .span_note(\n                         lhs_span,"}, {"sha": "7be8e57c7f87fdaa7fb536e9601846b902489cad", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -443,7 +443,7 @@ impl<'a> StringReader<'a> {\n \n                 let is_beginning_of_file = self.pos == self.source_file.start_pos;\n                 if is_beginning_of_file {\n-                    debug!(\"Skipping a shebang\");\n+                    debug!(\"skipping a shebang\");\n                     let start = self.pos;\n                     while !self.ch_is('\\n') && !self.is_eof() {\n                         self.bump();"}, {"sha": "1d4d02c7325826118bbefbf57101b84f77c19b9c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -7418,13 +7418,12 @@ impl<'a> Parser<'a> {\n             } else if self.look_ahead(1, |t| *t == token::OpenDelim(token::Paren)) {\n                 let ident = self.parse_ident().unwrap();\n                 self.bump();  // `(`\n-                let kw_name = match self.parse_self_arg_with_attrs() {\n-                    Ok(Some(_)) => \"method\",\n-                    Ok(None) => \"function\",\n-                    Err(mut err) => {\n-                        err.cancel();\n-                        \"function\"\n-                    }\n+                let kw_name = if let Ok(Some(_)) = self.parse_self_arg_with_attrs()\n+                    .map_err(|mut e| e.cancel())\n+                {\n+                    \"method\"\n+                } else {\n+                    \"function\"\n                 };\n                 self.consume_block(token::Paren);\n                 let (kw, kw_name, ambiguous) = if self.check(&token::RArrow) {\n@@ -7472,7 +7471,9 @@ impl<'a> Parser<'a> {\n                 self.eat_to_tokens(&[&token::Gt]);\n                 self.bump();  // `>`\n                 let (kw, kw_name, ambiguous) = if self.eat(&token::OpenDelim(token::Paren)) {\n-                    if let Ok(Some(_)) = self.parse_self_arg_with_attrs() {\n+                    if let Ok(Some(_)) = self.parse_self_arg_with_attrs()\n+                        .map_err(|mut e| e.cancel())\n+                    {\n                         (\"fn\", \"method\", false)\n                     } else {\n                         (\"fn\", \"function\", false)"}, {"sha": "9a890a06e0396ba24c495198b44ba9e4d742e204", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -73,7 +73,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt<'_>,\n             }\n         }\n \n-        _ => cx.span_bug(span, \"#[derive(Clone)] on trait item or impl item\"),\n+        _ => cx.span_bug(span, \"`#[derive(Clone)]` on trait item or impl item\"),\n     }\n \n     let inline = cx.meta_word(span, sym::inline);"}, {"sha": "4386fe8cfa2d699d91223e59e200b41f97c03348", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -42,12 +42,12 @@ pub fn expand_test_or_bench(\n         if let Annotatable::Item(i) = item { i }\n         else {\n             cx.parse_sess.span_diagnostic.span_fatal(item.span(),\n-                \"#[test] attribute is only allowed on non associated functions\").raise();\n+                \"`#[test]` attribute is only allowed on non associated functions\").raise();\n         };\n \n     if let ast::ItemKind::Mac(_) = item.node {\n         cx.parse_sess.span_diagnostic.span_warn(item.span,\n-            \"#[test] attribute should not be used on macros. Use #[cfg(test)] instead.\");\n+            \"`#[test]` attribute should not be used on macros. Use `#[cfg(test)]` instead.\");\n         return vec![Annotatable::Item(item)];\n     }\n \n@@ -167,7 +167,7 @@ pub fn expand_test_or_bench(\n         ast::ItemKind::ExternCrate(Some(sym::test))\n     );\n \n-    log::debug!(\"Synthetic test item:\\n{}\\n\", pprust::item_to_string(&test_const));\n+    log::debug!(\"synthetic test item:\\n{}\\n\", pprust::item_to_string(&test_const));\n \n     vec![\n         // Access to libtest under a gensymed name"}, {"sha": "4f0dc0a48876507581ba75d6a65186fb6d590477", "filename": "src/test/ui/issues/issue-22644.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -89,7 +89,7 @@ error: expected type, found `4`\n LL |     println!(\"{}\", a: &mut 4);\n    |                            ^ expecting a type here because of type ascription\n    |\n-   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/issue-22644.rs:34:20\n    |"}, {"sha": "0218a7abeaa4c8a4e6a39a433ac1fdc6f56aa646", "filename": "src/test/ui/issues/issue-34255-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -4,7 +4,7 @@ error: expected type, found `42`\n LL |     Test::Drill(field: 42);\n    |                        ^^ expecting a type here because of type ascription\n    |\n-   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/issue-34255-1.rs:8:17\n    |"}, {"sha": "84e4c87ebc4daa215f691aeb408debbc5188d2e8", "filename": "src/test/ui/lifetime_starts_expressions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -14,7 +14,7 @@ error: expected type, found keyword `loop`\n LL |     loop { break 'label: loop { break 'label 42; }; }\n    |                          ^^^^ expecting a type here because of type ascription\n    |\n-   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/lifetime_starts_expressions.rs:6:12\n    |"}, {"sha": "d525bd3f4c6e5fee5e26c4b8466c158d3f282cfa", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -4,7 +4,7 @@ error: expected type, found `3`\n LL |     let x = Enum::Foo(a: 3, b: 4);\n    |                          ^ expecting a type here because of type ascription\n    |\n-   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/recover-from-bad-variant.rs:7:23\n    |"}, {"sha": "e475f5b4a75a515f7d97b02a1583ce120617bc94", "filename": "src/test/ui/test-attr-non-associated-functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Ftest%2Fui%2Ftest-attr-non-associated-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Ftest%2Fui%2Ftest-attr-non-associated-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attr-non-associated-functions.rs?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -6,7 +6,7 @@ struct A {}\n \n impl A {\n     #[test]\n-    fn new() -> A { //~ ERROR #[test] attribute is only allowed on non associated functions\n+    fn new() -> A { //~ ERROR `#[test]` attribute is only allowed on non associated functions\n         A {}\n     }\n }"}, {"sha": "cb3ae51823e45bd993f6500b2f54613be44306ee", "filename": "src/test/ui/test-attr-non-associated-functions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Ftest%2Fui%2Ftest-attr-non-associated-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Ftest%2Fui%2Ftest-attr-non-associated-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attr-non-associated-functions.stderr?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -1,4 +1,4 @@\n-error: #[test] attribute is only allowed on non associated functions\n+error: `#[test]` attribute is only allowed on non associated functions\n   --> $DIR/test-attr-non-associated-functions.rs:9:5\n    |\n LL | /     fn new() -> A {"}, {"sha": "256a41722fa956534e09d2b713d65b83a44c3f37", "filename": "src/test/ui/test-on-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Ftest%2Fui%2Ftest-on-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Ftest%2Fui%2Ftest-on-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-on-macro.stderr?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -1,4 +1,4 @@\n-warning: #[test] attribute should not be used on macros. Use #[cfg(test)] instead.\n+warning: `#[test]` attribute should not be used on macros. Use `#[cfg(test)]` instead.\n   --> $DIR/test-on-macro.rs:11:1\n    |\n LL | foo!();"}, {"sha": "1f8989db81412856a61c3e4a9c45ee12ccfb085f", "filename": "src/test/ui/type/type-ascription-instead-of-statement-end.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96234d5363286700794973c36178c3df1d9d49d6/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96234d5363286700794973c36178c3df1d9d49d6/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr?ref=96234d5363286700794973c36178c3df1d9d49d6", "patch": "@@ -12,7 +12,7 @@ error: expected type, found `0`\n LL |     println!(\"test\"): 0;\n    |                       ^ expecting a type here because of type ascription\n    |\n-   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/type-ascription-instead-of-statement-end.rs:9:5\n    |"}]}