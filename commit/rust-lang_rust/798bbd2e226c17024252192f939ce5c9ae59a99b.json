{"sha": "798bbd2e226c17024252192f939ce5c9ae59a99b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5OGJiZDJlMjI2YzE3MDI0MjUyMTkyZjkzOWNlNWM5YWU1OWE5OWI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-10T10:02:57Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-10T10:15:28Z"}, "message": "Fix all occurrences of writing to immutable aliases\n\nYou'd be surprised.", "tree": {"sha": "12b1c5a9d79f1ae4c7f6f1f1eabc7d2ccc700124", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12b1c5a9d79f1ae4c7f6f1f1eabc7d2ccc700124"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/798bbd2e226c17024252192f939ce5c9ae59a99b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/798bbd2e226c17024252192f939ce5c9ae59a99b", "html_url": "https://github.com/rust-lang/rust/commit/798bbd2e226c17024252192f939ce5c9ae59a99b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/798bbd2e226c17024252192f939ce5c9ae59a99b/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c51c6ba35463d4d48eae0ea805e03ba5ab1ed84e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c51c6ba35463d4d48eae0ea805e03ba5ab1ed84e", "html_url": "https://github.com/rust-lang/rust/commit/c51c6ba35463d4d48eae0ea805e03ba5ab1ed84e"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "4cb889de16c8e268e28a67db567a08f3e09bb3bc", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/798bbd2e226c17024252192f939ce5c9ae59a99b/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798bbd2e226c17024252192f939ce5c9ae59a99b/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=798bbd2e226c17024252192f939ce5c9ae59a99b", "patch": "@@ -585,15 +585,15 @@ fn lookup_defs(session::session sess, int cnum, vec[ast::ident] path)\n     auto data = sess.get_external_crate(cnum).data;\n \n     ret vec::map(bind lookup_def(cnum, data, _),\n-                  resolve_path(path, data));\n+                 resolve_path(path, data));\n }\n \n // FIXME doesn't yet handle re-exported externals\n-fn lookup_def(int cnum, vec[u8] data, &ast::def_id did) -> ast::def {\n-    auto item = lookup_item(did._1, data);\n+fn lookup_def(int cnum, vec[u8] data, &ast::def_id did_) -> ast::def {\n+    auto item = lookup_item(did_._1, data);\n     auto kind_ch = item_kind(item);\n \n-    did = tup(cnum, did._1);\n+    auto did = tup(cnum, did_._1);\n \n     auto def = alt (kind_ch as char) {\n         case ('c') { ast::def_const(did) }"}, {"sha": "ef4bab15ceedfb7a5167bb978230dc241822649e", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/798bbd2e226c17024252192f939ce5c9ae59a99b/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798bbd2e226c17024252192f939ce5c9ae59a99b/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=798bbd2e226c17024252192f939ce5c9ae59a99b", "patch": "@@ -806,15 +806,16 @@ fn lookup_in_local_native_mod(&env e, def_id defid, &span sp,\n fn lookup_in_local_mod(&env e, def_id defid, &span sp, \n                        &ident id, namespace ns, dir dr) -> option::t[def] {\n     auto info = e.mod_map.get(defid._1);\n-     if (dr == outside && !ast::is_exported(id, option::get(info.m))) {\n+    if (dr == outside && !ast::is_exported(id, option::get(info.m))) {\n          // if we're in a native mod, then dr==inside, so info.m is some _mod\n          ret none[def]; // name is not visible\n-     }\n+    }\n     alt(info.index.find(id)) {\n         case (none) { }\n-        case (some(?lst)) {\n+        case (some(?lst_)) {\n+            auto lst = lst_;\n             while (true) {\n-                alt ({lst}) {\n+                alt (lst) {\n                     case (nil) { break; }\n                     case (cons(?hd, ?tl)) {\n                         auto found = lookup_in_mie(e, hd, ns);\n@@ -1070,15 +1071,15 @@ fn check_for_collisions(&@env e, &ast::crate c) {\n     visit::visit_crate(c, (), visit::vtor(v));\n }\n \n-fn check_mod_name(&env e, &ident name, &list[mod_index_entry] entries) {\n+fn check_mod_name(&env e, &ident name, list[mod_index_entry] entries) {\n     auto saw_mod = false; auto saw_type = false; auto saw_value = false;\n \n     fn dup(&env e, &span sp, &str word, &ident name) {\n         e.sess.span_err(sp, \"duplicate definition of \" + word + name);\n     }\n \n     while (true) {\n-        alt ({entries}) {\n+        alt (entries) {\n             case (cons(?entry, ?rest)) {\n                 if (!option::is_none(lookup_in_mie(e, entry, ns_value))) {\n                     if (saw_value) { dup(e, mie_span(entry), \"\", name); }"}, {"sha": "8c52093963ca60034f54f691741ddda3c9883141", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/798bbd2e226c17024252192f939ce5c9ae59a99b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798bbd2e226c17024252192f939ce5c9ae59a99b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=798bbd2e226c17024252192f939ce5c9ae59a99b", "patch": "@@ -3285,11 +3285,11 @@ fn copy_val(&@block_ctxt cx,\n // FIXME: We always zero out the source. Ideally we would detect the\n // case where a variable is always deinitialized by block exit and thus\n // doesn't need to be dropped.\n-fn move_val(&@block_ctxt cx,\n-           copy_action action,\n-           ValueRef dst,\n-           ValueRef src,\n-           &ty::t t) -> result {\n+fn move_val(@block_ctxt cx,\n+            copy_action action,\n+            ValueRef dst,\n+            ValueRef src,\n+            &ty::t t) -> result {\n     if (ty::type_is_scalar(cx.fcx.lcx.ccx.tcx, t) ||\n             ty::type_is_native(cx.fcx.lcx.ccx.tcx, t)) {\n         ret res(cx, cx.build.Store(src, dst));\n@@ -5717,7 +5717,7 @@ fn trans_expr_out(&@block_ctxt cx, &@ast::expr e, out_method output)\n     ret res(sub.res.bcx, load_if_immediate(sub.res.bcx, sub.res.val, t));\n }\n \n-fn with_out_method(fn(&out_method) -> result work, &@block_ctxt cx,\n+fn with_out_method(fn(&out_method) -> result work, @block_ctxt cx,\n                    &ast::ann ann, &out_method outer_output) -> result {\n     auto ccx = cx.fcx.lcx.ccx;\n     if (outer_output != return) {"}, {"sha": "b8f246e6e136b96f96b07a0a3b5e493d59472393", "filename": "src/lib/extfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/798bbd2e226c17024252192f939ce5c9ae59a99b/src%2Flib%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798bbd2e226c17024252192f939ce5c9ae59a99b/src%2Flib%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fextfmt.rs?ref=798bbd2e226c17024252192f939ce5c9ae59a99b", "patch": "@@ -85,7 +85,7 @@ mod ct {\n         auto lim = str::byte_len(s);\n         auto buf = \"\";\n \n-        fn flush_buf(str buf, &vec[piece] pieces) -> str {\n+        fn flush_buf(str buf, &mutable vec[piece] pieces) -> str {\n             if (str::byte_len(buf) > 0u) {\n                 auto piece = piece_string(buf);\n                 pieces += [piece];"}, {"sha": "e1a8e6b03246dadad4a1bb4b429aea1e1d1ca7ec", "filename": "src/lib/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/798bbd2e226c17024252192f939ce5c9ae59a99b/src%2Flib%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798bbd2e226c17024252192f939ce5c9ae59a99b/src%2Flib%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fvec.rs?ref=798bbd2e226c17024252192f939ce5c9ae59a99b", "patch": "@@ -226,7 +226,7 @@ fn grow_set[T](&mutable vec[mutable T] v, uint index, &T initval, &T val) {\n     v.(index) = val;\n }\n \n-fn grow_init_fn[T](&array[T] v, uint n, fn()->T init_fn) {\n+fn grow_init_fn[T](&mutable array[T] v, uint n, fn()->T init_fn) {\n     let uint i = n;\n     while (i > 0u) {\n         i -= 1u;\n@@ -345,7 +345,7 @@ fn clone[T](&vec[T] v) -> vec[T] {\n     ret slice[T](v, 0u, len[T](v));\n }\n \n-fn plus_option[T](&vec[T] v, &option::t[T] o) -> () {\n+fn plus_option[T](&mutable vec[T] v, &option::t[T] o) -> () {\n     alt (o) {\n         case (none) {}\n         case (some(?x)) { v += [x]; }"}]}