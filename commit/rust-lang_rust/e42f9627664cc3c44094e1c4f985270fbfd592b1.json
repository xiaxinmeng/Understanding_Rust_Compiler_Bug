{"sha": "e42f9627664cc3c44094e1c4f985270fbfd592b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MmY5NjI3NjY0Y2MzYzQ0MDk0ZTFjNGY5ODUyNzBmYmZkNTkyYjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-22T08:27:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-22T08:27:47Z"}, "message": "Encapsulate Attrs", "tree": {"sha": "81603da9c34f301cf82e1ceae80313b8eb9e10c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81603da9c34f301cf82e1ceae80313b8eb9e10c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e42f9627664cc3c44094e1c4f985270fbfd592b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e42f9627664cc3c44094e1c4f985270fbfd592b1", "html_url": "https://github.com/rust-lang/rust/commit/e42f9627664cc3c44094e1c4f985270fbfd592b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e42f9627664cc3c44094e1c4f985270fbfd592b1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1346bba5c457d1aa0a35f44231bed8b494b7d60", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1346bba5c457d1aa0a35f44231bed8b494b7d60", "html_url": "https://github.com/rust-lang/rust/commit/a1346bba5c457d1aa0a35f44231bed8b494b7d60"}], "stats": {"total": 99, "additions": 57, "deletions": 42}, "files": [{"sha": "9923cde81e78bf1615bc791be6a4da7eacc54795", "filename": "crates/ra_hir/src/code_model/attrs.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e42f9627664cc3c44094e1c4f985270fbfd592b1/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e42f9627664cc3c44094e1c4f985270fbfd592b1/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fattrs.rs?ref=e42f9627664cc3c44094e1c4f985270fbfd592b1", "patch": "@@ -8,7 +8,6 @@ use crate::{\n use hir_def::attr::Attr;\n use hir_expand::hygiene::Hygiene;\n use ra_syntax::ast;\n-use std::sync::Arc;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum AttrDef {\n@@ -38,16 +37,19 @@ impl_froms!(\n );\n \n pub trait Attrs {\n-    fn attrs(&self, db: &impl HirDatabase) -> Option<Arc<[Attr]>>;\n+    fn attrs(&self, db: &impl HirDatabase) -> hir_def::attr::Attrs;\n }\n \n pub(crate) fn attributes_query(\n     db: &(impl DefDatabase + AstDatabase),\n     def: AttrDef,\n-) -> Option<Arc<[Attr]>> {\n+) -> hir_def::attr::Attrs {\n     match def {\n         AttrDef::Module(it) => {\n-            let src = it.declaration_source(db)?;\n+            let src = match it.declaration_source(db) {\n+                Some(it) => it,\n+                None => return hir_def::attr::Attrs::default(),\n+            };\n             let hygiene = Hygiene::new(db, src.file_id);\n             Attr::from_attrs_owner(&src.value, &hygiene)\n         }\n@@ -57,7 +59,7 @@ pub(crate) fn attributes_query(\n                 let hygiene = Hygiene::new(db, src.file_id);\n                 Attr::from_attrs_owner(&named, &hygiene)\n             }\n-            FieldSource::Pos(..) => None,\n+            FieldSource::Pos(..) => hir_def::attr::Attrs::default(),\n         },\n         AttrDef::Adt(it) => match it {\n             Adt::Struct(it) => attrs_from_ast(it, db),\n@@ -74,7 +76,7 @@ pub(crate) fn attributes_query(\n     }\n }\n \n-fn attrs_from_ast<T, D>(node: T, db: &D) -> Option<Arc<[Attr]>>\n+fn attrs_from_ast<T, D>(node: T, db: &D) -> hir_def::attr::Attrs\n where\n     T: HasSource,\n     T::Ast: ast::AttrsOwner,\n@@ -86,7 +88,7 @@ where\n }\n \n impl<T: Into<AttrDef> + Copy> Attrs for T {\n-    fn attrs(&self, db: &impl HirDatabase) -> Option<Arc<[Attr]>> {\n+    fn attrs(&self, db: &impl HirDatabase) -> hir_def::attr::Attrs {\n         db.attrs((*self).into())\n     }\n }"}, {"sha": "1f63be3b92794aba840b50b90ec1a6d5ad9d37b2", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e42f9627664cc3c44094e1c4f985270fbfd592b1/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e42f9627664cc3c44094e1c4f985270fbfd592b1/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=e42f9627664cc3c44094e1c4f985270fbfd592b1", "patch": "@@ -2,7 +2,7 @@\n \n use std::sync::Arc;\n \n-use hir_def::attr::Attr;\n+use hir_def::attr::Attrs;\n use ra_db::salsa;\n use ra_syntax::SmolStr;\n \n@@ -61,7 +61,7 @@ pub trait DefDatabase: HirDebugDatabase + DefDatabase2 {\n     fn documentation(&self, def: crate::DocDef) -> Option<crate::Documentation>;\n \n     #[salsa::invoke(crate::code_model::attrs::attributes_query)]\n-    fn attrs(&self, def: crate::AttrDef) -> Option<Arc<[Attr]>>;\n+    fn attrs(&self, def: crate::AttrDef) -> Attrs;\n }\n \n #[salsa::query_group(HirDatabaseStorage)]"}, {"sha": "7a9d0fdf4404ac00c2a45b2c1a9360c39071b2e7", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e42f9627664cc3c44094e1c4f985270fbfd592b1/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e42f9627664cc3c44094e1c4f985270fbfd592b1/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=e42f9627664cc3c44094e1c4f985270fbfd592b1", "patch": "@@ -1,6 +1,6 @@\n //! A higher level attributes based on TokenTree, with also some shortcuts.\n \n-use std::sync::Arc;\n+use std::{ops, sync::Arc};\n \n use hir_expand::hygiene::Hygiene;\n use mbe::ast_to_token_tree;\n@@ -13,6 +13,28 @@ use tt::Subtree;\n \n use crate::path::Path;\n \n+#[derive(Default, Debug, Clone, PartialEq, Eq)]\n+pub struct Attrs {\n+    entries: Option<Arc<[Attr]>>,\n+}\n+\n+impl ops::Deref for Attrs {\n+    type Target = [Attr];\n+\n+    fn deref(&self) -> &[Attr] {\n+        match &self.entries {\n+            Some(it) => &*it,\n+            None => &[],\n+        }\n+    }\n+}\n+\n+impl Attrs {\n+    pub fn has_atom(&self, atom: &str) -> bool {\n+        self.iter().any(|it| it.is_simple_atom(atom))\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct Attr {\n     pub(crate) path: Path,\n@@ -43,13 +65,15 @@ impl Attr {\n         Some(Attr { path, input })\n     }\n \n-    pub fn from_attrs_owner(owner: &dyn AttrsOwner, hygiene: &Hygiene) -> Option<Arc<[Attr]>> {\n+    pub fn from_attrs_owner(owner: &dyn AttrsOwner, hygiene: &Hygiene) -> Attrs {\n         let mut attrs = owner.attrs().peekable();\n-        if attrs.peek().is_none() {\n+        let entries = if attrs.peek().is_none() {\n             // Avoid heap allocation\n-            return None;\n-        }\n-        Some(attrs.flat_map(|ast| Attr::from_src(ast, hygiene)).collect())\n+            None\n+        } else {\n+            Some(attrs.flat_map(|ast| Attr::from_src(ast, hygiene)).collect())\n+        };\n+        Attrs { entries }\n     }\n \n     pub fn is_simple_atom(&self, name: &str) -> bool {"}, {"sha": "7902293e8f9096c282af3e901db5f8bd3ca76371", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e42f9627664cc3c44094e1c4f985270fbfd592b1/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e42f9627664cc3c44094e1c4f985270fbfd592b1/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=e42f9627664cc3c44094e1c4f985270fbfd592b1", "patch": "@@ -12,7 +12,7 @@ use rustc_hash::FxHashMap;\n use test_utils::tested_by;\n \n use crate::{\n-    attr::Attr,\n+    attr::Attrs,\n     db::DefDatabase2,\n     nameres::{\n         diagnostics::DefDiagnostic, mod_resolution::ModDir, path_resolution::ReachedFixedPoint,\n@@ -549,7 +549,7 @@ where\n         // `#[macro_use] extern crate` is hoisted to imports macros before collecting\n         // any other items.\n         for item in items {\n-            if self.is_cfg_enabled(item.attrs()) {\n+            if self.is_cfg_enabled(&item.attrs) {\n                 if let raw::RawItemKind::Import(import_id) = item.kind {\n                     let import = self.raw_items[import_id].clone();\n                     if import.is_extern_crate && import.is_macro_use {\n@@ -560,10 +560,10 @@ where\n         }\n \n         for item in items {\n-            if self.is_cfg_enabled(item.attrs()) {\n+            if self.is_cfg_enabled(&item.attrs) {\n                 match item.kind {\n                     raw::RawItemKind::Module(m) => {\n-                        self.collect_module(&self.raw_items[m], item.attrs())\n+                        self.collect_module(&self.raw_items[m], &item.attrs)\n                     }\n                     raw::RawItemKind::Import(import_id) => self\n                         .def_collector\n@@ -585,9 +585,9 @@ where\n         }\n     }\n \n-    fn collect_module(&mut self, module: &raw::ModuleData, attrs: &[Attr]) {\n+    fn collect_module(&mut self, module: &raw::ModuleData, attrs: &Attrs) {\n         let path_attr = self.path_attr(attrs);\n-        let is_macro_use = self.is_macro_use(attrs);\n+        let is_macro_use = attrs.has_atom(\"macro_use\");\n         match module {\n             // inline module, just recurse\n             raw::ModuleData::Definition { name, items, ast_id } => {\n@@ -779,17 +779,13 @@ where\n         }\n     }\n \n-    fn is_cfg_enabled(&self, attrs: &[Attr]) -> bool {\n+    fn is_cfg_enabled(&self, attrs: &Attrs) -> bool {\n         attrs.iter().all(|attr| attr.is_cfg_enabled(&self.def_collector.cfg_options) != Some(false))\n     }\n \n-    fn path_attr<'a>(&self, attrs: &'a [Attr]) -> Option<&'a SmolStr> {\n+    fn path_attr<'a>(&self, attrs: &'a Attrs) -> Option<&'a SmolStr> {\n         attrs.iter().find_map(|attr| attr.as_path())\n     }\n-\n-    fn is_macro_use<'a>(&self, attrs: &'a [Attr]) -> bool {\n-        attrs.iter().any(|attr| attr.is_simple_atom(\"macro_use\"))\n-    }\n }\n \n fn is_macro_rules(path: &Path) -> bool {"}, {"sha": "55a9634f8b48c37eba55e2dd6b21f29bb17968fc", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e42f9627664cc3c44094e1c4f985270fbfd592b1/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e42f9627664cc3c44094e1c4f985270fbfd592b1/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=e42f9627664cc3c44094e1c4f985270fbfd592b1", "patch": "@@ -16,7 +16,12 @@ use ra_syntax::{\n };\n use test_utils::tested_by;\n \n-use crate::{attr::Attr, db::DefDatabase2, path::Path, FileAstId, HirFileId, ModuleSource, Source};\n+use crate::{\n+    attr::{Attr, Attrs},\n+    db::DefDatabase2,\n+    path::Path,\n+    FileAstId, HirFileId, ModuleSource, Source,\n+};\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n ///\n@@ -129,21 +134,12 @@ impl Index<Impl> for RawItems {\n     }\n }\n \n-// Avoid heap allocation on items without attributes.\n-type Attrs = Option<Arc<[Attr]>>;\n-\n #[derive(Debug, PartialEq, Eq, Clone)]\n pub(super) struct RawItem {\n-    attrs: Attrs,\n+    pub(super) attrs: Attrs,\n     pub(super) kind: RawItemKind,\n }\n \n-impl RawItem {\n-    pub(super) fn attrs(&self) -> &[Attr] {\n-        self.attrs.as_ref().map_or(&[], |it| &*it)\n-    }\n-}\n-\n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n pub(super) enum RawItemKind {\n     Module(Module),"}, {"sha": "cbaf169bfca512927aa754455a56997b25420b77", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e42f9627664cc3c44094e1c4f985270fbfd592b1/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e42f9627664cc3c44094e1c4f985270fbfd592b1/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=e42f9627664cc3c44094e1c4f985270fbfd592b1", "patch": "@@ -286,10 +286,7 @@ impl Completions {\n }\n \n fn is_deprecated(node: impl Attrs, db: &impl HirDatabase) -> bool {\n-    match node.attrs(db) {\n-        None => false,\n-        Some(attrs) => attrs.iter().any(|x| x.is_simple_atom(\"deprecated\")),\n-    }\n+    node.attrs(db).has_atom(\"deprecated\")\n }\n \n fn has_non_default_type_params(def: hir::GenericDef, db: &db::RootDatabase) -> bool {"}]}