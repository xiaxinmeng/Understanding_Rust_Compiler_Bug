{"sha": "688275a4009a7a87fb211f0b690f386fc2de8740", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ODI3NWE0MDA5YTdhODdmYjIxMWYwYjY5MGYzODZmYzJkZTg3NDA=", "commit": {"author": {"name": "Emilio Cobos \u00c1lvarez", "email": "emilio@crisal.io", "date": "2018-03-12T20:11:25Z"}, "committer": {"name": "Emilio Cobos \u00c1lvarez", "email": "emilio@crisal.io", "date": "2018-03-25T01:30:06Z"}, "message": "librustc: Convert -C pgo-gen and -C pgo-use into -Z flags.\n\nSigned-off-by: Emilio Cobos \u00c1lvarez <emilio@crisal.io>", "tree": {"sha": "858fdce83c1fbc85db0fcf3433fd670af3bc6863", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/858fdce83c1fbc85db0fcf3433fd670af3bc6863"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/688275a4009a7a87fb211f0b690f386fc2de8740", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE+uMrE+H37zcdV8pyBWtye7nBAnwFAlq2+54ACgkQBWtye7nB\nAnzKWAf8DHyjU4drQdGM/YrHWGNYRBfXner2R3RRwYp3Wp+cuRXXvYTJG991oc0p\n6b74w3UOBTFxLuFB5m+q/h2r3anJeoIXgrBidnufWFADj0sdZMO3L0r8wILXndSR\nE19IjyPLfX2+cSXSHjOf8p8LZkPcFRG29gAdT8WmzcPfrOjvJm9+0iUv1C8NP/7a\nWVWBJFvBCZiw3vhNqovm7z4yQa9gSQZzCtXa1woAI0FthAySDVLG+CGrELt7Mxiy\nV/IR+97aoo5LrMV7QWMFDwWR23LHGtrylcHX3xXqxB/V64wzsNtUaFpXm7lnuIkw\nauFpt0nB10YNDBd2QXebKNMd1OO5nA==\n=54Qs\n-----END PGP SIGNATURE-----", "payload": "tree 858fdce83c1fbc85db0fcf3433fd670af3bc6863\nparent 036e0d7943f274fc3269a9cd67d2c922e397fcaf\nauthor Emilio Cobos \u00c1lvarez <emilio@crisal.io> 1520885485 +0100\ncommitter Emilio Cobos \u00c1lvarez <emilio@crisal.io> 1521941406 +0200\n\nlibrustc: Convert -C pgo-gen and -C pgo-use into -Z flags.\n\nSigned-off-by: Emilio Cobos \u00c1lvarez <emilio@crisal.io>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/688275a4009a7a87fb211f0b690f386fc2de8740", "html_url": "https://github.com/rust-lang/rust/commit/688275a4009a7a87fb211f0b690f386fc2de8740", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/688275a4009a7a87fb211f0b690f386fc2de8740/comments", "author": {"login": "emilio", "id": 1323194, "node_id": "MDQ6VXNlcjEzMjMxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1323194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilio", "html_url": "https://github.com/emilio", "followers_url": "https://api.github.com/users/emilio/followers", "following_url": "https://api.github.com/users/emilio/following{/other_user}", "gists_url": "https://api.github.com/users/emilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilio/subscriptions", "organizations_url": "https://api.github.com/users/emilio/orgs", "repos_url": "https://api.github.com/users/emilio/repos", "events_url": "https://api.github.com/users/emilio/events{/privacy}", "received_events_url": "https://api.github.com/users/emilio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emilio", "id": 1323194, "node_id": "MDQ6VXNlcjEzMjMxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1323194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilio", "html_url": "https://github.com/emilio", "followers_url": "https://api.github.com/users/emilio/followers", "following_url": "https://api.github.com/users/emilio/following{/other_user}", "gists_url": "https://api.github.com/users/emilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilio/subscriptions", "organizations_url": "https://api.github.com/users/emilio/orgs", "repos_url": "https://api.github.com/users/emilio/repos", "events_url": "https://api.github.com/users/emilio/events{/privacy}", "received_events_url": "https://api.github.com/users/emilio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "036e0d7943f274fc3269a9cd67d2c922e397fcaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/036e0d7943f274fc3269a9cd67d2c922e397fcaf", "html_url": "https://github.com/rust-lang/rust/commit/036e0d7943f274fc3269a9cd67d2c922e397fcaf"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "7f92a087ebfc8680b84d75c353a4908e0af8a263", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/688275a4009a7a87fb211f0b690f386fc2de8740/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688275a4009a7a87fb211f0b690f386fc2de8740/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=688275a4009a7a87fb211f0b690f386fc2de8740", "patch": "@@ -1027,11 +1027,6 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"`-C save-temps` might not produce all requested temporary products \\\n          when incremental compilation is enabled.\")],\n         \"save all temporary output files during compilation\"),\n-    pgo_gen: Option<String> = (None, parse_opt_string, [TRACKED],\n-        \"Generate PGO profile data, to a given file, or to the default \\\n-         location if it's empty.\"),\n-    pgo_use: String = (String::new(), parse_string, [TRACKED],\n-        \"Use PGO profile data from the given profile file.\"),\n     rpath: bool = (false, parse_bool, [UNTRACKED],\n         \"set rpath values in libs/exes\"),\n     overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],\n@@ -1254,6 +1249,11 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"extra arguments to prepend to the linker invocation (space separated)\"),\n     profile: bool = (false, parse_bool, [TRACKED],\n                      \"insert profiling code\"),\n+    pgo_gen: Option<String> = (None, parse_opt_string, [TRACKED],\n+        \"Generate PGO profile data, to a given file, or to the default \\\n+         location if it's empty.\"),\n+    pgo_use: String = (String::new(), parse_string, [TRACKED],\n+        \"Use PGO profile data from the given profile file.\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n         \"choose which RELRO level to use\"),\n     nll: bool = (false, parse_bool, [UNTRACKED],\n@@ -1776,6 +1776,13 @@ pub fn build_session_options_and_crate_config(\n         );\n     }\n \n+    if debugging_opts.pgo_gen.is_some() && !debugging_opts.pgo_use.is_empty() {\n+        early_error(\n+            error_format,\n+            \"options `-Z pgo-gen` and `-Z pgo-use` are exclusive\",\n+        );\n+    }\n+\n     let mut output_types = BTreeMap::new();\n     if !debugging_opts.parse_only {\n         for list in matches.opt_strs(\"emit\") {\n@@ -1806,13 +1813,6 @@ pub fn build_session_options_and_crate_config(\n     let mut codegen_units = cg.codegen_units;\n     let mut disable_thinlto = false;\n \n-    if cg.pgo_gen.is_some() && !cg.pgo_use.is_empty() {\n-        early_error(\n-            error_format,\n-            \"options `-C pgo-gen` and `-C pgo-use` are exclussive\",\n-        );\n-    }\n-\n     // Issue #30063: if user requests llvm-related output to one\n     // particular path, disable codegen-units.\n     let incompatible: Vec<_> = output_types\n@@ -2836,14 +2836,6 @@ mod tests {\n         opts.cg.lto = Lto::Fat;\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n-        opts = reference.clone();\n-        opts.cg.pgo_gen = Some(String::from(\"abc\"));\n-        assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n-        opts = reference.clone();\n-        opts.cg.pgo_use = String::from(\"abc\");\n-        assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n-\n         opts = reference.clone();\n         opts.cg.target_cpu = Some(String::from(\"abc\"));\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n@@ -2904,6 +2896,14 @@ mod tests {\n         opts.debugging_opts.tls_model = Some(String::from(\"tls model\"));\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+        opts = reference.clone();\n+        opts.debugging_opts.pgo_gen = Some(String::from(\"abc\"));\n+        assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n+        opts = reference.clone();\n+        opts.debugging_opts.pgo_use = String::from(\"abc\");\n+        assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n         opts = reference.clone();\n         opts.cg.metadata = vec![String::from(\"A\"), String::from(\"B\")];\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());"}, {"sha": "802665b6ddbc51937c52265e6cf59fa45ce3c9b1", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/688275a4009a7a87fb211f0b690f386fc2de8740/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688275a4009a7a87fb211f0b690f386fc2de8740/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=688275a4009a7a87fb211f0b690f386fc2de8740", "patch": "@@ -785,7 +785,7 @@ impl<'a> CrateLoader<'a> {\n \n     fn inject_profiler_runtime(&mut self) {\n         if self.sess.opts.debugging_opts.profile ||\n-            self.sess.opts.cg.pgo_gen.is_some()\n+            self.sess.opts.debugging_opts.pgo_gen.is_some()\n         {\n             info!(\"loading profiler\");\n "}, {"sha": "c968b8525a5b1c90784cffbb335192e20a0ff611", "filename": "src/librustc_trans/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/688275a4009a7a87fb211f0b690f386fc2de8740/src%2Flibrustc_trans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688275a4009a7a87fb211f0b690f386fc2de8740/src%2Flibrustc_trans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fattributes.rs?ref=688275a4009a7a87fb211f0b690f386fc2de8740", "patch": "@@ -93,7 +93,7 @@ pub fn set_probestack(cx: &CodegenCx, llfn: ValueRef) {\n     }\n \n     // probestack doesn't play nice either with pgo-gen.\n-    if cx.sess().opts.cg.pgo_gen.is_some() {\n+    if cx.sess().opts.debugging_opts.pgo_gen.is_some() {\n         return;\n     }\n "}, {"sha": "19f0d5866ef3497ef2387a2cb1b471e83413b542", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/688275a4009a7a87fb211f0b690f386fc2de8740/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688275a4009a7a87fb211f0b690f386fc2de8740/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=688275a4009a7a87fb211f0b690f386fc2de8740", "patch": "@@ -1095,7 +1095,9 @@ fn link_args(cmd: &mut Linker,\n     //\n     // Though it may be worth to try to revert those changes upstream, since the\n     // overhead of the initialization should be minor.\n-    if sess.opts.cg.pgo_gen.is_some() && sess.target.target.options.linker_is_gnu {\n+    if sess.opts.debugging_opts.pgo_gen.is_some() &&\n+        sess.target.target.options.linker_is_gnu\n+    {\n         cmd.args(&[\"-u\".to_owned(), \"__llvm_profile_runtime\".to_owned()]);\n     }\n "}, {"sha": "26cdca1cdbf4d8639f7935c53826c5fe69a62d74", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/688275a4009a7a87fb211f0b690f386fc2de8740/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/688275a4009a7a87fb211f0b690f386fc2de8740/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=688275a4009a7a87fb211f0b690f386fc2de8740", "patch": "@@ -943,8 +943,8 @@ pub fn start_async_translation(tcx: TyCtxt,\n         modules_config.passes.push(\"insert-gcov-profiling\".to_owned())\n     }\n \n-    modules_config.pgo_gen = sess.opts.cg.pgo_gen.clone();\n-    modules_config.pgo_use = sess.opts.cg.pgo_use.clone();\n+    modules_config.pgo_gen = sess.opts.debugging_opts.pgo_gen.clone();\n+    modules_config.pgo_use = sess.opts.debugging_opts.pgo_use.clone();\n \n     modules_config.opt_level = Some(get_llvm_opt_level(sess.opts.optimize));\n     modules_config.opt_size = Some(get_llvm_opt_size(sess.opts.optimize));"}, {"sha": "bc5cef2370c644641d0ed40c2e9d4082dc40de08", "filename": "src/test/run-make/pgo-gen/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/688275a4009a7a87fb211f0b690f386fc2de8740/src%2Ftest%2Frun-make%2Fpgo-gen%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/688275a4009a7a87fb211f0b690f386fc2de8740/src%2Ftest%2Frun-make%2Fpgo-gen%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpgo-gen%2FMakefile?ref=688275a4009a7a87fb211f0b690f386fc2de8740", "patch": "@@ -2,7 +2,7 @@\n \n all:\n ifeq ($(PROFILER_SUPPORT),1)\n-\t$(RUSTC) -g -C pgo-gen=test.profraw test.rs\n+\t$(RUSTC) -g -Z pgo-gen=test.profraw test.rs\n \t$(call RUN,test) || exit 1\n \t[ -e \"$(TMPDIR)/test.profraw\" ] || (echo \"No .profraw file\"; exit 1)\n endif"}]}