{"sha": "a6dc7cf36de40f6b2a5b1dfee86430848f94ce42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZGM3Y2YzNmRlNDBmNmIyYTViMWRmZWU4NjQzMDg0OGY5NGNlNDI=", "commit": {"author": {"name": "Arnaud", "email": "arnaud.golfouse@free.fr", "date": "2021-01-04T17:58:42Z"}, "committer": {"name": "Arnaud", "email": "arnaud.golfouse@free.fr", "date": "2021-01-04T18:14:44Z"}, "message": "Make it possible to retrieve `hir::Function`'s return type\n\nThis is done by adding a `ret_type` method to `hir::Function`.\nI followed `assoc_fn_params` convention by creating a new `RetType` type,\nthat contains the actual return type accessible via a `ty` method.", "tree": {"sha": "ca9c21a110a7723761ad4807000beb96dc122766", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca9c21a110a7723761ad4807000beb96dc122766"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6dc7cf36de40f6b2a5b1dfee86430848f94ce42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6dc7cf36de40f6b2a5b1dfee86430848f94ce42", "html_url": "https://github.com/rust-lang/rust/commit/a6dc7cf36de40f6b2a5b1dfee86430848f94ce42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6dc7cf36de40f6b2a5b1dfee86430848f94ce42/comments", "author": null, "committer": null, "parents": [{"sha": "0708bfeb7270923be5a2059ad5b99de183e667ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/0708bfeb7270923be5a2059ad5b99de183e667ba", "html_url": "https://github.com/rust-lang/rust/commit/0708bfeb7270923be5a2059ad5b99de183e667ba"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "e783e0ababe7135b6f9f42071fc1c5e054c8d430", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a6dc7cf36de40f6b2a5b1dfee86430848f94ce42/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6dc7cf36de40f6b2a5b1dfee86430848f94ce42/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=a6dc7cf36de40f6b2a5b1dfee86430848f94ce42", "patch": "@@ -743,6 +743,18 @@ impl Function {\n         db.function_data(self.id).name.clone()\n     }\n \n+    pub fn ret_type(self, db: &dyn HirDatabase) -> RetType {\n+        let resolver = self.id.resolver(db.upcast());\n+        let ret_type = &db.function_data(self.id).ret_type;\n+        let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n+        let environment = TraitEnvironment::lower(db, &resolver);\n+        let ty = Type {\n+            krate: self.id.lookup(db.upcast()).container.module(db.upcast()).krate,\n+            ty: InEnvironment { value: Ty::from_hir_ext(&ctx, ret_type).0, environment },\n+        };\n+        RetType { ty }\n+    }\n+\n     pub fn self_param(self, db: &dyn HirDatabase) -> Option<SelfParam> {\n         if !db.function_data(self.id).has_self_param {\n             return None;\n@@ -826,6 +838,17 @@ impl From<Mutability> for Access {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct RetType {\n+    ty: Type,\n+}\n+\n+impl RetType {\n+    pub fn ty(&self) -> &Type {\n+        &self.ty\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct Param {\n     ty: Type,"}]}