{"sha": "557a4b8301d33e545fb5bb2b86cc811ecd9de7eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1N2E0YjgzMDFkMzNlNTQ1ZmI1YmIyYjg2Y2M4MTFlY2Q5ZGU3ZWI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-29T12:48:13Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-29T12:48:13Z"}, "message": "Merge #1342\n\n1342: add latest requests to status page r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "130e5984e2a40f467815f9feb49c989beaa7ca97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/130e5984e2a40f467815f9feb49c989beaa7ca97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/557a4b8301d33e545fb5bb2b86cc811ecd9de7eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/557a4b8301d33e545fb5bb2b86cc811ecd9de7eb", "html_url": "https://github.com/rust-lang/rust/commit/557a4b8301d33e545fb5bb2b86cc811ecd9de7eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/557a4b8301d33e545fb5bb2b86cc811ecd9de7eb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "87c8437af32779e1fd42d94b4c4147f6dd2b8157", "url": "https://api.github.com/repos/rust-lang/rust/commits/87c8437af32779e1fd42d94b4c4147f6dd2b8157", "html_url": "https://github.com/rust-lang/rust/commit/87c8437af32779e1fd42d94b4c4147f6dd2b8157"}, {"sha": "2c9a1cb3dd941b3f2f608a0633f620478bce0c68", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c9a1cb3dd941b3f2f608a0633f620478bce0c68", "html_url": "https://github.com/rust-lang/rust/commit/2c9a1cb3dd941b3f2f608a0633f620478bce0c68"}], "stats": {"total": 79, "additions": 67, "deletions": 12}, "files": [{"sha": "e65bb097286263cf5417e00198ba4ce75d7c0440", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/557a4b8301d33e545fb5bb2b86cc811ecd9de7eb/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/557a4b8301d33e545fb5bb2b86cc811ecd9de7eb/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=557a4b8301d33e545fb5bb2b86cc811ecd9de7eb", "patch": "@@ -20,7 +20,7 @@ use crate::{\n     main_loop::subscriptions::Subscriptions,\n     project_model::workspace_loader,\n     req,\n-    server_world::{ServerWorld, ServerWorldState},\n+    server_world::{ServerWorld, ServerWorldState, CompletedRequest},\n     Result,\n     InitializationOptions,\n };\n@@ -45,6 +45,17 @@ enum Task {\n     Notify(RawNotification),\n }\n \n+struct PendingRequest {\n+    received: Instant,\n+    method: String,\n+}\n+\n+impl From<(u64, PendingRequest)> for CompletedRequest {\n+    fn from((id, pending): (u64, PendingRequest)) -> CompletedRequest {\n+        CompletedRequest { id, method: pending.method, duration: pending.received.elapsed() }\n+    }\n+}\n+\n const THREADPOOL_SIZE: usize = 8;\n \n pub fn main_loop(\n@@ -97,7 +108,9 @@ pub fn main_loop(\n     );\n \n     log::info!(\"waiting for tasks to finish...\");\n-    task_receiver.into_iter().for_each(|task| on_task(task, msg_sender, &mut pending_requests));\n+    task_receiver\n+        .into_iter()\n+        .for_each(|task| on_task(task, msg_sender, &mut pending_requests, &mut state));\n     log::info!(\"...tasks have finished\");\n     log::info!(\"joining threadpool...\");\n     drop(pool);\n@@ -159,7 +172,7 @@ fn main_loop_inner(\n     task_sender: Sender<Task>,\n     task_receiver: Receiver<Task>,\n     state: &mut ServerWorldState,\n-    pending_requests: &mut FxHashMap<u64, Instant>,\n+    pending_requests: &mut FxHashMap<u64, PendingRequest>,\n     subs: &mut Subscriptions,\n ) -> Result<()> {\n     // We try not to index more than THREADPOOL_SIZE - 3 libraries at the same\n@@ -195,7 +208,7 @@ fn main_loop_inner(\n         let mut state_changed = false;\n         match event {\n             Event::Task(task) => {\n-                on_task(task, msg_sender, pending_requests);\n+                on_task(task, msg_sender, pending_requests, state);\n                 state.maybe_collect_garbage();\n             }\n             Event::Vfs(task) => {\n@@ -292,12 +305,15 @@ fn main_loop_inner(\n fn on_task(\n     task: Task,\n     msg_sender: &Sender<RawMessage>,\n-    pending_requests: &mut FxHashMap<u64, Instant>,\n+    pending_requests: &mut FxHashMap<u64, PendingRequest>,\n+    state: &mut ServerWorldState,\n ) {\n     match task {\n         Task::Respond(response) => {\n-            if let Some(request_received) = pending_requests.remove(&response.id) {\n-                log::info!(\"handled req#{} in {:?}\", response.id, request_received.elapsed());\n+            if let Some(pending) = pending_requests.remove(&response.id) {\n+                let completed = CompletedRequest::from((response.id, pending));\n+                log::info!(\"handled req#{} in {:?}\", completed.id, completed.duration);\n+                state.complete_request(completed);\n                 msg_sender.send(response.into()).unwrap();\n             }\n         }\n@@ -309,12 +325,13 @@ fn on_task(\n \n fn on_request(\n     world: &mut ServerWorldState,\n-    pending_requests: &mut FxHashMap<u64, Instant>,\n+    pending_requests: &mut FxHashMap<u64, PendingRequest>,\n     pool: &ThreadPool,\n     sender: &Sender<Task>,\n     request_received: Instant,\n     req: RawRequest,\n ) -> Result<Option<RawRequest>> {\n+    let method = req.method.clone();\n     let mut pool_dispatcher = PoolDispatcher { req: Some(req), res: None, pool, world, sender };\n     let req = pool_dispatcher\n         .on::<req::AnalyzerStatus>(handlers::handle_analyzer_status)?\n@@ -348,7 +365,8 @@ fn on_request(\n         .finish();\n     match req {\n         Ok(id) => {\n-            let prev = pending_requests.insert(id, request_received);\n+            let prev =\n+                pending_requests.insert(id, PendingRequest { method, received: request_received });\n             assert!(prev.is_none(), \"duplicate request: {}\", id);\n             Ok(None)\n         }\n@@ -359,7 +377,7 @@ fn on_request(\n fn on_notification(\n     msg_sender: &Sender<RawMessage>,\n     state: &mut ServerWorldState,\n-    pending_requests: &mut FxHashMap<u64, Instant>,\n+    pending_requests: &mut FxHashMap<u64, PendingRequest>,\n     subs: &mut Subscriptions,\n     not: RawNotification,\n ) -> Result<()> {"}, {"sha": "dc817f2d97c5b46b87c4e6d1a90ebb1c83575f5c", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/557a4b8301d33e545fb5bb2b86cc811ecd9de7eb/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/557a4b8301d33e545fb5bb2b86cc811ecd9de7eb/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=557a4b8301d33e545fb5bb2b86cc811ecd9de7eb", "patch": "@@ -1,3 +1,5 @@\n+use std::{io::Write as _, fmt::Write as _};\n+\n use gen_lsp_server::ErrorCode;\n use lsp_types::{\n     CodeActionResponse, CodeLens, Command, Diagnostic, DiagnosticSeverity, CodeAction,\n@@ -16,7 +18,6 @@ use ra_prof::profile;\n use rustc_hash::FxHashMap;\n use serde::{Serialize, Deserialize};\n use serde_json::to_value;\n-use std::io::Write;\n use url_serde::Ser;\n \n use crate::{\n@@ -28,7 +29,14 @@ use crate::{\n };\n \n pub fn handle_analyzer_status(world: ServerWorld, _: ()) -> Result<String> {\n-    Ok(world.status())\n+    let mut buf = world.status();\n+    writeln!(buf, \"\\n\\nrequests:\").unwrap();\n+    let requests = world.latest_completed_requests.read();\n+    for (idx, r) in requests.iter().enumerate() {\n+        let current = if idx == world.request_idx { \"*\" } else { \" \" };\n+        writeln!(buf, \"{:4}{}{:<36}: {:?}\", r.id, current, r.method, r.duration).unwrap();\n+    }\n+    Ok(buf)\n }\n \n pub fn handle_syntax_tree(world: ServerWorld, params: req::SyntaxTreeParams) -> Result<String> {"}, {"sha": "b63927a4f296a1df35cc2ac57fc210c161c72bae", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/557a4b8301d33e545fb5bb2b86cc811ecd9de7eb/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/557a4b8301d33e545fb5bb2b86cc811ecd9de7eb/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=557a4b8301d33e545fb5bb2b86cc811ecd9de7eb", "patch": "@@ -1,6 +1,7 @@\n use std::{\n     path::{Path, PathBuf},\n     sync::Arc,\n+    time::Duration,\n };\n \n use lsp_types::Url;\n@@ -28,12 +29,26 @@ pub struct ServerWorldState {\n     pub workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub analysis_host: AnalysisHost,\n     pub vfs: Arc<RwLock<Vfs>>,\n+    // hand-rolling VecDeque here to print things in a nicer way\n+    pub latest_completed_requests: Arc<RwLock<[CompletedRequest; N_COMPLETED_REQUESTS]>>,\n+    pub request_idx: usize,\n }\n \n+const N_COMPLETED_REQUESTS: usize = 10;\n+\n pub struct ServerWorld {\n     pub workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub analysis: Analysis,\n     pub vfs: Arc<RwLock<Vfs>>,\n+    pub latest_completed_requests: Arc<RwLock<[CompletedRequest; N_COMPLETED_REQUESTS]>>,\n+    pub request_idx: usize,\n+}\n+\n+#[derive(Debug, Default)]\n+pub struct CompletedRequest {\n+    pub id: u64,\n+    pub method: String,\n+    pub duration: Duration,\n }\n \n impl ServerWorldState {\n@@ -73,6 +88,8 @@ impl ServerWorldState {\n             workspaces: Arc::new(workspaces),\n             analysis_host,\n             vfs: Arc::new(RwLock::new(vfs)),\n+            latest_completed_requests: Default::default(),\n+            request_idx: 0,\n         }\n     }\n \n@@ -137,6 +154,8 @@ impl ServerWorldState {\n             workspaces: Arc::clone(&self.workspaces),\n             analysis: self.analysis_host.analysis(),\n             vfs: Arc::clone(&self.vfs),\n+            latest_completed_requests: Arc::clone(&self.latest_completed_requests),\n+            request_idx: self.request_idx.checked_sub(1).unwrap_or(N_COMPLETED_REQUESTS - 1),\n         }\n     }\n \n@@ -147,6 +166,16 @@ impl ServerWorldState {\n     pub fn collect_garbage(&mut self) {\n         self.analysis_host.collect_garbage()\n     }\n+\n+    pub fn complete_request(&mut self, request: CompletedRequest) {\n+        // special case: don't track status request itself\n+        if request.method == \"rust-analyzer/analyzerStatus\" {\n+            return;\n+        }\n+        let idx = self.request_idx;\n+        self.latest_completed_requests.write()[idx] = request;\n+        self.request_idx = (idx + 1) % N_COMPLETED_REQUESTS;\n+    }\n }\n \n impl ServerWorld {"}]}