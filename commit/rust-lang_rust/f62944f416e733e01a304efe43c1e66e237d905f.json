{"sha": "f62944f416e733e01a304efe43c1e66e237d905f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2Mjk0NGY0MTZlNzMzZTAxYTMwNGVmZTQzYzFlNjZlMjM3ZDkwNWY=", "commit": {"author": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-17T15:38:40Z"}, "committer": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-18T09:22:28Z"}, "message": "Remove prioritization, add more movable items", "tree": {"sha": "889120555833afc376a9f8f49454e346a65c17f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/889120555833afc376a9f8f49454e346a65c17f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f62944f416e733e01a304efe43c1e66e237d905f", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEcPkYW+t8+2SKgl5T2MS9WuTZzE0FAmBTG9QACgkQ2MS9WuTZ\nzE11Bgf6AkPVDQVIfrdKMY3EXec0OP0DB2kp6tgd1x3wpnRwpTOLPholVZWGIoMR\n9rdWJQL3PdkqFiw5o4dQQwINOd5s68f7CQEpFejIRPFyfQp6aabc660E/Yn3vN7J\nD8vyOR9OmuZFg5LArHF3l7ubD1Wpl1crhLA0puU0i7mLu7iNVWaH3Gy+kG6+GhZ2\nCiZXJVpfdsNowOsACZPn/DFr/XTrvUfiP1o0P0NdhPYCuK6SBqIBptzmFF5lQpDy\n0qrqphsS+8eHRG7nCNrg5VvFBQIKl+AmFkQi/LFqQUW3XLTF5wkoePDQgPSo0aLN\n2bOfOYbKc9rehi7uZUTzix2KCVZBsw==\n=dnb4\n-----END PGP SIGNATURE-----", "payload": "tree 889120555833afc376a9f8f49454e346a65c17f1\nparent b67a91b96043fb750698f909354a5b73c1929e5d\nauthor ivan770 <leshenko.ivan770@gmail.com> 1615995520 +0200\ncommitter ivan770 <leshenko.ivan770@gmail.com> 1616059348 +0200\n\nRemove prioritization, add more movable items\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f62944f416e733e01a304efe43c1e66e237d905f", "html_url": "https://github.com/rust-lang/rust/commit/f62944f416e733e01a304efe43c1e66e237d905f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f62944f416e733e01a304efe43c1e66e237d905f/comments", "author": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b67a91b96043fb750698f909354a5b73c1929e5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b67a91b96043fb750698f909354a5b73c1929e5d", "html_url": "https://github.com/rust-lang/rust/commit/b67a91b96043fb750698f909354a5b73c1929e5d"}], "stats": {"total": 184, "additions": 124, "deletions": 60}, "files": [{"sha": "906d0f268c1194d3ab834bf98b6d645a5dd8bfc2", "filename": "crates/ide/src/move_item.rs", "status": "modified", "additions": 124, "deletions": 60, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/f62944f416e733e01a304efe43c1e66e237d905f/crates%2Fide%2Fsrc%2Fmove_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62944f416e733e01a304efe43c1e66e237d905f/crates%2Fide%2Fsrc%2Fmove_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmove_item.rs?ref=f62944f416e733e01a304efe43c1e66e237d905f", "patch": "@@ -38,44 +38,42 @@ fn find_ancestors(item: SyntaxElement, direction: Direction) -> Option<TextEdit>\n         NodeOrToken::Token(token) => token.parent()?,\n     };\n \n+    let movable = [\n+        SyntaxKind::MATCH_ARM,\n+        SyntaxKind::PARAM,\n+        SyntaxKind::LET_STMT,\n+        SyntaxKind::EXPR_STMT,\n+        SyntaxKind::MATCH_EXPR,\n+        SyntaxKind::MACRO_CALL,\n+        SyntaxKind::TYPE_ALIAS,\n+        SyntaxKind::TRAIT,\n+        SyntaxKind::IMPL,\n+        SyntaxKind::MACRO_DEF,\n+        SyntaxKind::STRUCT,\n+        SyntaxKind::UNION,\n+        SyntaxKind::ENUM,\n+        SyntaxKind::FN,\n+        SyntaxKind::MODULE,\n+        SyntaxKind::USE,\n+        SyntaxKind::STATIC,\n+        SyntaxKind::CONST,\n+        SyntaxKind::MACRO_RULES,\n+    ];\n+\n     let ancestor = once(root.clone())\n         .chain(root.ancestors())\n-        .filter_map(|ancestor| kind_priority(ancestor.kind()).map(|priority| (priority, ancestor)))\n-        .max_by_key(|(priority, _)| *priority)\n-        .map(|(_, ancestor)| ancestor)?;\n+        .find(|ancestor| movable.contains(&ancestor.kind()))?;\n \n     move_in_direction(&ancestor, direction)\n }\n \n-fn kind_priority(kind: SyntaxKind) -> Option<i32> {\n-    match kind {\n-        SyntaxKind::MATCH_ARM => Some(4),\n-\n-        SyntaxKind::LET_STMT | SyntaxKind::EXPR_STMT | SyntaxKind::MATCH_EXPR => Some(3),\n-\n-        SyntaxKind::TRAIT\n-        | SyntaxKind::IMPL\n-        | SyntaxKind::MACRO_CALL\n-        | SyntaxKind::MACRO_DEF\n-        | SyntaxKind::STRUCT\n-        | SyntaxKind::ENUM\n-        | SyntaxKind::MODULE\n-        | SyntaxKind::USE\n-        | SyntaxKind::FN\n-        | SyntaxKind::CONST\n-        | SyntaxKind::TYPE_ALIAS => Some(2),\n-\n-        _ => None,\n-    }\n-}\n-\n fn move_in_direction(node: &SyntaxNode, direction: Direction) -> Option<TextEdit> {\n     let sibling = match direction {\n         Direction::Up => node.prev_sibling(),\n         Direction::Down => node.next_sibling(),\n     }?;\n \n-    Some(replace_nodes(&sibling, node))\n+    Some(replace_nodes(node, &sibling))\n }\n \n fn replace_nodes(first: &SyntaxNode, second: &SyntaxNode) -> TextEdit {\n@@ -214,39 +212,6 @@ fn main() {\n         );\n     }\n \n-    #[test]\n-    fn test_prioritizes_match_arm() {\n-        check(\n-            r#\"\n-fn main() {\n-    match true {\n-        true => {\n-            let test = 123;$0$0\n-            let test2 = 456;\n-        },\n-        false => {\n-            println!(\"Test\");\n-        }\n-    };\n-}\n-            \"#,\n-            expect![[r#\"\n-fn main() {\n-    match true {\n-        false => {\n-            println!(\"Test\");\n-        },\n-        true => {\n-            let test = 123;\n-            let test2 = 456;\n-        }\n-    };\n-}\n-            \"#]],\n-            Direction::Down,\n-        );\n-    }\n-\n     #[test]\n     fn test_moves_expr_up() {\n         check(\n@@ -348,7 +313,7 @@ fn main() {\n     $0match test {\n         456 => {},\n         _ => {}\n-    }$0;\n+    };$0\n }\n             \"#,\n             expect![[r#\"\n@@ -365,6 +330,105 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn moves_param_up() {\n+        check(\n+            r#\"\n+fn test(one: i32, two$0$0: u32) {}\n+\n+fn main() {\n+    test(123, 456);\n+}\n+            \"#,\n+            expect![[r#\"\n+fn test(two: u32, one: i32) {}\n+\n+fn main() {\n+    test(123, 456);\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_prioritizes_trait_items() {\n+        check(\n+            r#\"\n+struct Test;\n+\n+trait Yay {\n+    type One;\n+\n+    type Two;\n+\n+    fn inner();\n+}\n+\n+impl Yay for Test {\n+    type One = i32;\n+\n+    type Two = u32;\n+\n+    fn inner() {$0$0\n+        println!(\"Mmmm\");\n+    }\n+}\n+            \"#,\n+            expect![[r#\"\n+struct Test;\n+\n+trait Yay {\n+    type One;\n+\n+    type Two;\n+\n+    fn inner();\n+}\n+\n+impl Yay for Test {\n+    type One = i32;\n+\n+    fn inner() {\n+        println!(\"Mmmm\");\n+    }\n+\n+    type Two = u32;\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_weird_nesting() {\n+        check(\n+            r#\"\n+fn test() {\n+    mod hello {\n+        fn inner() {}\n+    }\n+\n+    mod hi {$0$0\n+        fn inner() {}\n+    }\n+}\n+            \"#,\n+            expect![[r#\"\n+fn test() {\n+    mod hi {\n+        fn inner() {}\n+    }\n+\n+    mod hello {\n+        fn inner() {}\n+    }\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n     #[test]\n     fn handles_empty_file() {\n         check(r#\"$0$0\"#, expect![[r#\"\"#]], Direction::Up);"}]}