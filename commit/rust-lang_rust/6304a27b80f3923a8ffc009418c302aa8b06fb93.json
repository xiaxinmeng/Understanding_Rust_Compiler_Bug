{"sha": "6304a27b80f3923a8ffc009418c302aa8b06fb93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMDRhMjdiODBmMzkyM2E4ZmZjMDA5NDE4YzMwMmFhOGIwNmZiOTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-24T21:26:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-24T21:26:23Z"}, "message": "auto merge of #14401 : aochagavia/rust/pr4, r=alexcrichton\n\nSome functions implemented for the Ascii struct have the same functionality as other functions implemented for the normal chars. For consistency, I think they should have the same name, so I renamed the functions in Ascii to match the names in the Char trait.\r\n\r\n* Renamed `to_lower` to `to_lowercase`\r\n* Renamed `to_upper` to `to_uppercase`\r\n* Renamed `is_alpha` to `is_alphabetic`\r\n* Renamed `is_alnum` to `is_alphanumeric`\r\n* Renamed `is_lower` to `is_lowercase`\r\n* Renamed `is_upper` to `is_uppercase`\r\n\r\n[breaking-change]", "tree": {"sha": "09343194b975dd2cbcd447201ddb1ad8c4fe92bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09343194b975dd2cbcd447201ddb1ad8c4fe92bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6304a27b80f3923a8ffc009418c302aa8b06fb93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6304a27b80f3923a8ffc009418c302aa8b06fb93", "html_url": "https://github.com/rust-lang/rust/commit/6304a27b80f3923a8ffc009418c302aa8b06fb93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6304a27b80f3923a8ffc009418c302aa8b06fb93/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43f942f88656f6b6cb2ff143e496a8875ea157ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/43f942f88656f6b6cb2ff143e496a8875ea157ac", "html_url": "https://github.com/rust-lang/rust/commit/43f942f88656f6b6cb2ff143e496a8875ea157ac"}, {"sha": "e9989586724472f32c6ae040da4c1a1f0867bef0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9989586724472f32c6ae040da4c1a1f0867bef0", "html_url": "https://github.com/rust-lang/rust/commit/e9989586724472f32c6ae040da4c1a1f0867bef0"}], "stats": {"total": 66, "additions": 54, "deletions": 12}, "files": [{"sha": "def8db6077986f4fa41bdd49fcef4044bb3b9758", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6304a27b80f3923a8ffc009418c302aa8b06fb93/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6304a27b80f3923a8ffc009418c302aa8b06fb93/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=6304a27b80f3923a8ffc009418c302aa8b06fb93", "patch": "@@ -819,7 +819,7 @@ fn check_expected_errors(expected_errors: Vec<errors::ExpectedError> ,\n         let i = s.chars();\n         let c : Vec<char> = i.map( |c| {\n             if c.is_ascii() {\n-                c.to_ascii().to_lower().to_char()\n+                c.to_ascii().to_lowercase().to_char()\n             } else {\n                 c\n             }"}, {"sha": "5832fd9a400903aae747b2990295347629eb1ddc", "filename": "src/libglob/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6304a27b80f3923a8ffc009418c302aa8b06fb93/src%2Flibglob%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6304a27b80f3923a8ffc009418c302aa8b06fb93/src%2Flibglob%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibglob%2Flib.rs?ref=6304a27b80f3923a8ffc009418c302aa8b06fb93", "patch": "@@ -553,18 +553,18 @@ fn in_char_specifiers(specifiers: &[CharSpecifier], c: char, options: MatchOptio\n                 // FIXME: work with non-ascii chars properly (issue #1347)\n                 if !options.case_sensitive && c.is_ascii() && start.is_ascii() && end.is_ascii() {\n \n-                    let start = start.to_ascii().to_lower();\n-                    let end = end.to_ascii().to_lower();\n+                    let start = start.to_ascii().to_lowercase();\n+                    let end = end.to_ascii().to_lowercase();\n \n-                    let start_up = start.to_upper();\n-                    let end_up = end.to_upper();\n+                    let start_up = start.to_uppercase();\n+                    let end_up = end.to_uppercase();\n \n                     // only allow case insensitive matching when\n                     // both start and end are within a-z or A-Z\n                     if start != start_up && end != end_up {\n                         let start = start.to_char();\n                         let end = end.to_char();\n-                        let c = c.to_ascii().to_lower().to_char();\n+                        let c = c.to_ascii().to_lowercase().to_char();\n                         if c >= start && c <= end {\n                             return true;\n                         }"}, {"sha": "83667fb518135180a6eca0c1f329234063b62e5e", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6304a27b80f3923a8ffc009418c302aa8b06fb93/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6304a27b80f3923a8ffc009418c302aa8b06fb93/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=6304a27b80f3923a8ffc009418c302aa8b06fb93", "patch": "@@ -39,15 +39,29 @@ impl Ascii {\n         self.chr as char\n     }\n \n-    /// Convert to lowercase.\n     #[inline]\n+    #[allow(missing_doc)]\n+    #[deprecated=\"renamed to `to_lowercase`\"]\n     pub fn to_lower(self) -> Ascii {\n+        self.to_lowercase()\n+    }\n+\n+    /// Convert to lowercase.\n+    #[inline]\n+    pub fn to_lowercase(self) -> Ascii {\n         Ascii{chr: ASCII_LOWER_MAP[self.chr as uint]}\n     }\n \n-    /// Convert to uppercase.\n     #[inline]\n+    #[allow(missing_doc)]\n+    #[deprecated=\"renamed to `to_uppercase`\"]\n     pub fn to_upper(self) -> Ascii {\n+        self.to_uppercase()\n+    }\n+\n+    /// Convert to uppercase.\n+    #[inline]\n+    pub fn to_uppercase(self) -> Ascii {\n         Ascii{chr: ASCII_UPPER_MAP[self.chr as uint]}\n     }\n \n@@ -59,9 +73,16 @@ impl Ascii {\n \n     // the following methods are like ctype, and the implementation is inspired by musl\n \n-    /// Check if the character is a letter (a-z, A-Z)\n     #[inline]\n+    #[allow(missing_doc)]\n+    #[deprecated=\"renamed to `is_alphabetic`\"]\n     pub fn is_alpha(&self) -> bool {\n+        self.is_alphabetic()\n+    }\n+\n+    /// Check if the character is a letter (a-z, A-Z)\n+    #[inline]\n+    pub fn is_alphabetic(&self) -> bool {\n         (self.chr >= 0x41 && self.chr <= 0x5A) || (self.chr >= 0x61 && self.chr <= 0x7A)\n     }\n \n@@ -71,9 +92,16 @@ impl Ascii {\n         self.chr >= 0x30 && self.chr <= 0x39\n     }\n \n-    /// Check if the character is a letter or number\n     #[inline]\n+    #[allow(missing_doc)]\n+    #[deprecated=\"renamed to `is_alphanumeric`\"]\n     pub fn is_alnum(&self) -> bool {\n+        self.is_alphanumeric()\n+    }\n+\n+    /// Check if the character is a letter or number\n+    #[inline]\n+    pub fn is_alphanumeric(&self) -> bool {\n         self.is_alpha() || self.is_digit()\n     }\n \n@@ -101,15 +129,29 @@ impl Ascii {\n         (self.chr - 0x20) < 0x5F\n     }\n \n-    /// Checks if the character is lowercase\n     #[inline]\n+    #[allow(missing_doc)]\n+    #[deprecated=\"renamed to `is_lowercase`\"]\n     pub fn is_lower(&self) -> bool {\n+        self.is_lowercase()\n+    }\n+\n+    /// Checks if the character is lowercase\n+    #[inline]\n+    pub fn is_lowercase(&self) -> bool {\n         (self.chr - 'a' as u8) < 26\n     }\n \n-    /// Checks if the character is uppercase\n     #[inline]\n+    #[allow(missing_doc)]\n+    #[deprecated=\"renamed to `is_uppercase`\"]\n     pub fn is_upper(&self) -> bool {\n+        self.is_uppercase()\n+    }\n+\n+    /// Checks if the character is uppercase\n+    #[inline]\n+    pub fn is_uppercase(&self) -> bool {\n         (self.chr - 'A' as u8) < 26\n     }\n "}]}