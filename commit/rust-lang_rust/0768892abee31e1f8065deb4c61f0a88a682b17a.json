{"sha": "0768892abee31e1f8065deb4c61f0a88a682b17a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3Njg4OTJhYmVlMzFlMWY4MDY1ZGViNGM2MWYwYTg4YTY4MmIxN2E=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-16T22:08:24Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-22T00:16:22Z"}, "message": "Minor fixes", "tree": {"sha": "3ce2bae131ca1fc5ccfdb1fee01d12ca83ed38ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ce2bae131ca1fc5ccfdb1fee01d12ca83ed38ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0768892abee31e1f8065deb4c61f0a88a682b17a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0768892abee31e1f8065deb4c61f0a88a682b17a", "html_url": "https://github.com/rust-lang/rust/commit/0768892abee31e1f8065deb4c61f0a88a682b17a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0768892abee31e1f8065deb4c61f0a88a682b17a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18d144ac0284a0d50b839754a4209af0002ec159", "url": "https://api.github.com/repos/rust-lang/rust/commits/18d144ac0284a0d50b839754a4209af0002ec159", "html_url": "https://github.com/rust-lang/rust/commit/18d144ac0284a0d50b839754a4209af0002ec159"}], "stats": {"total": 137, "additions": 60, "deletions": 77}, "files": [{"sha": "bf0b58f70a9a9aed1d710b7ab6c7f01e7058bb5a", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0768892abee31e1f8065deb4c61f0a88a682b17a/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0768892abee31e1f8065deb4c61f0a88a682b17a/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=0768892abee31e1f8065deb4c61f0a88a682b17a", "patch": "@@ -300,7 +300,7 @@ tidy:\n \t\t| grep '^$(S)src/libbacktrace' -v \\\n \t\t| grep '^$(S)src/rust-installer' -v \\\n \t\t| xargs $(CFG_PYTHON) $(S)src/etc/check-binaries.py\n-\t\t$(CFG_PYTHON) $(S)src/etc/featureck.py $(S)src/\n+\t\t$(Q)$(CFG_PYTHON) $(S)src/etc/featureck.py $(S)src/\n \n \n endif"}, {"sha": "616596aa352362215e2bec7d50fa3f09951df5e7", "filename": "src/etc/featureck.py", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Fetc%2Ffeatureck.py", "raw_url": "https://github.com/rust-lang/rust/raw/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Fetc%2Ffeatureck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ffeatureck.py?ref=0768892abee31e1f8065deb4c61f0a88a682b17a", "patch": "@@ -43,7 +43,7 @@\n             line = line.replace(\"(\", \"\").replace(\"),\", \"\").replace(\")\", \"\")\n             parts = line.split(\",\")\n             if len(parts) != 3:\n-                print \"unexpected number of components in line: \" + original_line\n+                print \"error: unexpected number of components in line: \" + original_line\n                 sys.exit(1)\n             feature_name = parts[0].strip().replace('\"', \"\")\n             since = parts[1].strip().replace('\"', \"\")\n@@ -102,14 +102,15 @@\n                     lib_features[feature_name] = feature_name\n                     if lib_features_and_level.get((feature_name, level)) is None:\n                         # Add it to the observed features\n-                        lib_features_and_level[(feature_name, level)] = (since, path, line_num, line)\n+                        lib_features_and_level[(feature_name, level)] = \\\n+                            (since, path, line_num, line)\n                     else:\n                         # Verify that for this combination of feature_name and level the 'since'\n                         # attribute matches.\n                         (expected_since, source_path, source_line_num, source_line) = \\\n                             lib_features_and_level.get((feature_name, level))\n                         if since != expected_since:\n-                            print \"mismatch in \" + level + \" feature '\" + feature_name + \"'\"\n+                            print \"error: mismatch in \" + level + \" feature '\" + feature_name + \"'\"\n                             print \"line \" + str(source_line_num) + \" of \" + source_path + \":\"\n                             print source_line\n                             print \"line \" + str(line_num) + \" of \" + path + \":\"\n@@ -118,13 +119,13 @@\n \n                     # Verify that this lib feature doesn't duplicate a lang feature\n                     if feature_name in language_feature_names:\n-                        print \"lib feature '\" + feature_name + \"' duplicates a lang feature\"\n+                        print \"error: lib feature '\" + feature_name + \"' duplicates a lang feature\"\n                         print \"line \" + str(line_num) + \" of \" + path + \":\"\n                         print line\n                         errors = True\n \n                 else:\n-                    print \"misformed stability attribute\"\n+                    print \"error: misformed stability attribute\"\n                     print \"line \" + str(line_num) + \" of \" + path + \":\"\n                     print line\n                     errors = True\n@@ -141,7 +142,7 @@\n     status = \"unstable\"\n     stable_since = None\n     partially_deprecated = False\n-    \n+\n     if f[2] == \"Accepted\":\n         status = \"stable\"\n     if status == \"stable\":\n@@ -165,7 +166,7 @@\n     is_deprecated = lib_features_and_level.get((name, \"deprecated\")) is not None\n \n     if is_stable and is_unstable:\n-        print \"feature '\" + name + \"' is both stable and unstable\"\n+        print \"error: feature '\" + name + \"' is both stable and unstable\"\n         errors = True\n \n     if is_stable:\n@@ -189,7 +190,7 @@\n for name in lib_feature_stats:\n     if language_feature_stats.get(name) is not None:\n         if not name in joint_features:\n-            print \"feature '\" + name + \"' is both a lang and lib feature but not whitelisted\"\n+            print \"error: feature '\" + name + \"' is both a lang and lib feature but not whitelisted\"\n             errors = True\n         lang_status = lang_feature_stats[name][3]\n         lib_status = lib_feature_stats[name][3]\n@@ -199,7 +200,7 @@\n         lib_partially_deprecated = lib_feature_stats[name][5]\n \n         if lang_status != lib_status and lib_status != \"deprecated\":\n-            print \"feature '\" + name + \"' has lang status \" + lang_status + \\\n+            print \"error: feature '\" + name + \"' has lang status \" + lang_status + \\\n                   \" but lib status \" + lib_status\n             errors = True\n \n@@ -208,7 +209,7 @@\n             partially_deprecated = True\n \n         if lang_stable_since != lib_stable_since:\n-            print \"feature '\" + name + \"' has lang stable since \" + lang_stable_since + \\\n+            print \"error: feature '\" + name + \"' has lang stable since \" + lang_stable_since + \\\n                   \" but lib stable since \" + lib_stable_since\n             errors = True\n "}, {"sha": "07eebe600d56ae2f47ddd11b8ffe0ab969b25fe1", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=0768892abee31e1f8065deb4c61f0a88a682b17a", "patch": "@@ -742,11 +742,9 @@ pub struct Weak<T> {\n }\n \n #[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n-#[allow(unstable)]\n impl<T> !marker::Send for Weak<T> {}\n \n #[cfg(not(stage0))] // NOTE remove cfg after next snapshot\n-#[allow(unstable)]\n impl<T> !marker::Sync for Weak<T> {}\n \n "}, {"sha": "9e436367e6c39ef5553fdcc9188e802af1dfafda", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=0768892abee31e1f8065deb4c61f0a88a682b17a", "patch": "@@ -96,7 +96,8 @@ pub trait Hasher {\n \n /// A common bound on the `Hasher` parameter to `Hash` implementations in order\n /// to generically hash an aggregate.\n-#[experimental = \"this trait will likely be replaced by io::Writer\"]\n+#[unstable(feature = \"unnamed_feature\", since = \"1.0.0\",\n+           reason = \"this trait will likely be replaced by io::Writer\")]\n #[allow(missing_docs)]\n pub trait Writer {\n     fn write(&mut self, bytes: &[u8]);"}, {"sha": "8bd2ed95ed5689071dc743aaed8f191f75fea9d5", "filename": "src/libcoretest/cell.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Flibcoretest%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Flibcoretest%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcell.rs?ref=0768892abee31e1f8065deb4c61f0a88a682b17a", "patch": "@@ -114,7 +114,6 @@ fn discard_doesnt_unborrow() {\n }\n \n #[test]\n-#[allow(unstable)]\n fn clone_ref_updates_flag() {\n     let x = RefCell::new(0i);\n     {"}, {"sha": "e91571a270f28b00b7655cc1ec4b0e0237769226", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=0768892abee31e1f8065deb4c61f0a88a682b17a", "patch": "@@ -233,7 +233,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n             None => {\n                 // This is an 'unmarked' API, which should not exist\n                 // in the standard library.\n-                self.tcx.sess.span_err(span, \"use of unmarked staged library feature\");\n+                self.tcx.sess.span_err(span, \"use of unmarked library feature\");\n                 self.tcx.sess.span_note(span, \"this is either a bug in the library you are \\\n                                                using or a bug in the compiler - there is \\\n                                                no way to use this feature\");"}, {"sha": "4d5c2b765feedef1475231a435665d854ff3279a", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=0768892abee31e1f8065deb4c61f0a88a682b17a", "patch": "@@ -486,7 +486,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n \n     // Needs to go *after* expansion to be able to check the results of macro expansion.\n     time(time_passes, \"complete gated feature checking\", (), |_| {\n-        let features = \n+        let features =\n             syntax::feature_gate::check_crate(sess.codemap(),\n                                           &sess.parse_sess.span_diagnostic,\n                                           &krate);"}, {"sha": "e47d1eeb40178e43de93692b1ee35cc9cdad51af", "filename": "src/test/auxiliary/lint_output_format.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Ftest%2Fauxiliary%2Flint_output_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Ftest%2Fauxiliary%2Flint_output_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_output_format.rs?ref=0768892abee31e1f8065deb4c61f0a88a682b17a", "patch": "@@ -11,6 +11,7 @@\n #![crate_name=\"lint_output_format\"]\n #![crate_type = \"lib\"]\n #![staged_api]\n+#![unstable(feature = \"unnamed_feature\", since = \"1.0.0\")]\n \n #[deprecated(feature = \"oldstuff\", since = \"1.0.0\")]\n pub fn foo() -> uint {"}, {"sha": "53575192965bb0148b0f22b70bd558059ffb7c46", "filename": "src/test/compile-fail/lint-forbid-cmdline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Ftest%2Fcompile-fail%2Flint-forbid-cmdline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Ftest%2Fcompile-fail%2Flint-forbid-cmdline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-forbid-cmdline.rs?ref=0768892abee31e1f8065deb4c61f0a88a682b17a", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -F unstable\n+// compile-flags: -F deprecated\n \n #![staged_api]\n-#[allow(unstable)] //~ ERROR allow(unstable) overruled by outer forbid(unstable)\n+#[allow(deprecated)] //~ ERROR allow(deprecated) overruled by outer forbid(deprecated)\n fn main() {\n }"}, {"sha": "ec4e3c774dbf02d9e9aae57ef8b42788513cfdba", "filename": "src/test/compile-fail/lint-output-format.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-output-format.rs?ref=0768892abee31e1f8065deb4c61f0a88a682b17a", "patch": "@@ -8,13 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:-F unstable\n+// compile-flags: -F unused_features\n // aux-build:lint_output_format.rs\n \n-extern crate lint_output_format; //~ ERROR: use of unmarked item\n+#![feature(foo)] //~ ERROR unused or unknown feature\n+\n+extern crate lint_output_format; //~ WARNING: use of unstable library feature\n use lint_output_format::{foo, bar};\n \n fn main() {\n     let _x = foo(); //~ WARNING #[warn(deprecated)] on by default\n-    let _y = bar(); //~ ERROR [-F unstable]\n+    let _y = bar(); //~ WARNING: use of unstable library feature\n }"}, {"sha": "130b396387c2142ed70507e4f55f3524417fb92f", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 34, "deletions": 35, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=0768892abee31e1f8065deb4c61f0a88a682b17a", "patch": "@@ -12,19 +12,18 @@\n // aux-build:inherited_stability.rs\n // aux-build:stability_cfg1.rs\n // aux-build:stability_cfg2.rs\n+// ignore-tidy-linelength\n \n-#![deny(unstable)]\n #![deny(deprecated)]\n-#![deny(unstable)]\n #![allow(dead_code)]\n #![staged_api]\n \n #[macro_use]\n-extern crate lint_stability; //~ ERROR: use of unmarked item\n+extern crate lint_stability; //~ ERROR: use of unmarked library feature\n \n mod cross_crate {\n     extern crate stability_cfg1;\n-    extern crate stability_cfg2; //~ ERROR: use of unstable item\n+    extern crate stability_cfg2; //~ WARNING: use of unstable library feature\n \n     use lint_stability::*;\n \n@@ -39,17 +38,17 @@ mod cross_crate {\n         foo.method_deprecated_text(); //~ ERROR use of deprecated item: text\n         foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n \n-        unstable(); //~ ERROR use of unstable item\n-        foo.method_unstable(); //~ ERROR use of unstable item\n-        foo.trait_unstable(); //~ ERROR use of unstable item\n+        unstable(); //~ WARNING use of unstable library feature\n+        foo.method_unstable(); //~ WARNING use of unstable library feature\n+        foo.trait_unstable(); //~ WARNING use of unstable library feature\n \n-        unstable_text(); //~ ERROR use of unstable item: text\n-        foo.method_unstable_text(); //~ ERROR use of unstable item: text\n-        foo.trait_unstable_text(); //~ ERROR use of unstable item: text\n+        unstable_text(); //~ WARNING use of unstable library feature 'unnamed_feature': text\n+        foo.method_unstable_text(); //~ WARNING use of unstable library feature 'unnamed_feature': text\n+        foo.trait_unstable_text(); //~ WARNING use of unstable library feature 'unnamed_feature': text\n \n-        unmarked(); //~ ERROR use of unmarked item\n-        foo.method_unmarked(); //~ ERROR use of unmarked item\n-        foo.trait_unmarked(); //~ ERROR use of unmarked item\n+        unmarked(); //~ ERROR use of unmarked library feature\n+        foo.method_unmarked(); //~ ERROR use of unmarked library feature\n+        foo.trait_unmarked(); //~ ERROR use of unmarked library feature\n \n         stable();\n         foo.method_stable();\n@@ -60,23 +59,23 @@ mod cross_crate {\n         foo.trait_stable_text();\n \n         let _ = DeprecatedStruct { i: 0 }; //~ ERROR use of deprecated item\n-        let _ = UnstableStruct { i: 0 }; //~ ERROR use of unstable item\n-        let _ = UnmarkedStruct { i: 0 }; //~ ERROR use of unmarked item\n+        let _ = UnstableStruct { i: 0 }; //~ WARNING use of unstable library feature\n+        let _ = UnmarkedStruct { i: 0 }; //~ ERROR use of unmarked library feature\n         let _ = StableStruct { i: 0 };\n \n         let _ = DeprecatedUnitStruct; //~ ERROR use of deprecated item\n-        let _ = UnstableUnitStruct; //~ ERROR use of unstable item\n-        let _ = UnmarkedUnitStruct; //~ ERROR use of unmarked item\n+        let _ = UnstableUnitStruct; //~ WARNING use of unstable library feature\n+        let _ = UnmarkedUnitStruct; //~ ERROR use of unmarked library feature\n         let _ = StableUnitStruct;\n \n         let _ = Enum::DeprecatedVariant; //~ ERROR use of deprecated item\n-        let _ = Enum::UnstableVariant; //~ ERROR use of unstable item\n-        let _ = Enum::UnmarkedVariant; //~ ERROR use of unmarked item\n+        let _ = Enum::UnstableVariant; //~ WARNING use of unstable library feature\n+        let _ = Enum::UnmarkedVariant; //~ ERROR use of unmarked library feature\n         let _ = Enum::StableVariant;\n \n         let _ = DeprecatedTupleStruct (1); //~ ERROR use of deprecated item\n-        let _ = UnstableTupleStruct (1); //~ ERROR use of unstable item\n-        let _ = UnmarkedTupleStruct (1); //~ ERROR use of unmarked item\n+        let _ = UnstableTupleStruct (1); //~ WARNING use of unstable library feature\n+        let _ = UnmarkedTupleStruct (1); //~ ERROR use of unmarked library feature\n         let _ = StableTupleStruct (1);\n \n         // At the moment, the lint checker only checks stability in\n@@ -93,47 +92,47 @@ mod cross_crate {\n     fn test_method_param<F: Trait>(foo: F) {\n         foo.trait_deprecated(); //~ ERROR use of deprecated item\n         foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n-        foo.trait_unstable(); //~ ERROR use of unstable item\n-        foo.trait_unstable_text(); //~ ERROR use of unstable item: text\n-        foo.trait_unmarked(); //~ ERROR use of unmarked item\n+        foo.trait_unstable(); //~ WARNING use of unstable library feature\n+        foo.trait_unstable_text(); //~ WARNING use of unstable library feature 'unnamed_feature': text\n+        foo.trait_unmarked(); //~ ERROR use of unmarked library feature\n         foo.trait_stable();\n     }\n \n     fn test_method_object(foo: &Trait) {\n         foo.trait_deprecated(); //~ ERROR use of deprecated item\n         foo.trait_deprecated_text(); //~ ERROR use of deprecated item: text\n-        foo.trait_unstable(); //~ ERROR use of unstable item\n-        foo.trait_unstable_text(); //~ ERROR use of unstable item: text\n-        foo.trait_unmarked(); //~ ERROR use of unmarked item\n+        foo.trait_unstable(); //~ WARNING use of unstable library feature\n+        foo.trait_unstable_text(); //~ WARNING use of unstable library feature 'unnamed_feature': text\n+        foo.trait_unmarked(); //~ ERROR use of unmarked library feature\n         foo.trait_stable();\n     }\n \n     struct S;\n \n-    impl UnstableTrait for S { } //~ ERROR use of unstable item\n+    impl UnstableTrait for S { } //~ WARNING use of unstable library feature\n \n-    trait LocalTrait : UnstableTrait { } //~ ERROR use of unstable item\n+    trait LocalTrait : UnstableTrait { } //~ WARNING use of unstable library feature\n }\n \n mod inheritance {\n-    extern crate inherited_stability; //~ ERROR: use of unstable item\n+    extern crate inherited_stability; //~ WARNING: use of unstable library feature\n     use self::inherited_stability::*;\n \n     fn test_inheritance() {\n-        unstable(); //~ ERROR use of unstable item\n+        unstable(); //~ WARNING use of unstable library feature\n         stable();\n \n-        stable_mod::unstable(); //~ ERROR use of unstable item\n+        stable_mod::unstable(); //~ WARNING use of unstable library feature\n         stable_mod::stable();\n \n         unstable_mod::deprecated(); //~ ERROR use of deprecated item\n-        unstable_mod::unstable(); //~ ERROR use of unstable item\n+        unstable_mod::unstable(); //~ WARNING use of unstable library feature\n \n-        let _ = Unstable::UnstableVariant; //~ ERROR use of unstable item\n+        let _ = Unstable::UnstableVariant; //~ WARNING use of unstable library feature\n         let _ = Unstable::StableVariant;\n \n         let x: usize = 0;\n-        x.unstable(); //~ ERROR use of unstable item\n+        x.unstable(); //~ WARNING use of unstable library feature\n         x.stable();\n     }\n }"}, {"sha": "ac1720b339e8412087645dfdbf03ab47ee968200", "filename": "src/test/compile-fail/lint-unknown-feature.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0768892abee31e1f8065deb4c61f0a88a682b17a/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature.rs?ref=0768892abee31e1f8065deb4c61f0a88a682b17a", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(unknown_features)]\n+#![deny(unused_features)]\n \n-#![feature(this_is_not_a_feature)] //~ ERROR: unknown feature\n+#![feature(this_is_not_a_feature)] //~ ERROR: unused or unknown feature\n \n fn main() {}"}, {"sha": "f817f943dbe78aea473c7376233d1b4be49d0a92", "filename": "src/test/compile-fail/simd-experimental.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/18d144ac0284a0d50b839754a4209af0002ec159/src%2Ftest%2Fcompile-fail%2Fsimd-experimental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d144ac0284a0d50b839754a4209af0002ec159/src%2Ftest%2Fcompile-fail%2Fsimd-experimental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-experimental.rs?ref=18d144ac0284a0d50b839754a4209af0002ec159", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![deny(unstable)]\n-#![feature(unnamed_feature)]\n-\n-use std::simd;\n-\n-fn main() {\n-    let _ = simd::i64x2(0, 0); //~ ERROR: experimental\n-}"}]}