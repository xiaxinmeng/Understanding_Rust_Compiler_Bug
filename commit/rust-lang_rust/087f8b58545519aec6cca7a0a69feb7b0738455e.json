{"sha": "087f8b58545519aec6cca7a0a69feb7b0738455e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4N2Y4YjU4NTQ1NTE5YWVjNmNjYTdhMGE2OWZlYjdiMDczODQ1NWU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-11-27T03:31:49Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-11-27T03:31:49Z"}, "message": "Remove `match_arm_forces_newline`", "tree": {"sha": "54eb4c131e12f2e02faa55a17bd263bea5fb33a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54eb4c131e12f2e02faa55a17bd263bea5fb33a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/087f8b58545519aec6cca7a0a69feb7b0738455e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/087f8b58545519aec6cca7a0a69feb7b0738455e", "html_url": "https://github.com/rust-lang/rust/commit/087f8b58545519aec6cca7a0a69feb7b0738455e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/087f8b58545519aec6cca7a0a69feb7b0738455e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e1fa2c244f030e93643a2e34d6f07636cb792a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e1fa2c244f030e93643a2e34d6f07636cb792a6", "html_url": "https://github.com/rust-lang/rust/commit/0e1fa2c244f030e93643a2e34d6f07636cb792a6"}], "stats": {"total": 114, "additions": 1, "deletions": 113}, "files": [{"sha": "ee4851eb2e5b2313aceec2c4c9b0f8b4e602b069", "filename": "Configurations.md", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/087f8b58545519aec6cca7a0a69feb7b0738455e/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/087f8b58545519aec6cca7a0a69feb7b0738455e/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=087f8b58545519aec6cca7a0a69feb7b0738455e", "patch": "@@ -1108,47 +1108,6 @@ use foo::{aaa,\n           fff};\n ```\n \n-## `match_arm_forces_newline`\n-\n-Consistently put match arms (block based or not) in a newline.\n-\n-- **Default value**: `false`\n-- **Possible values**: `true`, `false`\n-\n-#### `false` (default):\n-\n-```rust\n-match x {\n-    // a non-empty block\n-    X0 => {\n-        f();\n-    }\n-    // an empty block\n-    X1 => {}\n-    // a non-block\n-    X2 => println!(\"ok\"),\n-}\n-```\n-\n-#### `true`:\n-\n-```rust\n-match x {\n-    // a non-empty block\n-    X0 => {\n-        f();\n-    }\n-    // an empty block\n-    X1 =>\n-        {}\n-    // a non-block\n-    X2 => {\n-        println!(\"ok\")\n-    }\n-}\n-```\n-\n-See also: [`wrap_match_arms`](#wrap_match_arms).\n \n ## `match_block_trailing_comma`\n "}, {"sha": "fe18f02d33e9bb431a72aed21e8e5784e55019fd", "filename": "src/config.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/087f8b58545519aec6cca7a0a69feb7b0738455e/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087f8b58545519aec6cca7a0a69feb7b0738455e/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=087f8b58545519aec6cca7a0a69feb7b0738455e", "patch": "@@ -625,8 +625,6 @@ create_config! {\n         \"Force multiline match arm bodies to be wrapped in a block\";\n     match_block_trailing_comma: bool, false, false,\n         \"Put a trailing comma after a block based match arm (non-block arms are not affected)\";\n-    match_arm_forces_newline: bool, false, false,\n-        \"Force match arm bodies to be in a new lines\";\n \n     // Spaces around punctuation\n     binop_separator: SeparatorPlace, SeparatorPlace::Front, false,"}, {"sha": "14913fef9e7a2fc1d120a60df564ef63e1e06e41", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/087f8b58545519aec6cca7a0a69feb7b0738455e/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087f8b58545519aec6cca7a0a69feb7b0738455e/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=087f8b58545519aec6cca7a0a69feb7b0738455e", "patch": "@@ -1529,11 +1529,6 @@ fn rewrite_match_body(\n     } else {\n         (false, false)\n     };\n-    let extend = if context.config.match_arm_forces_newline() {\n-        is_block\n-    } else {\n-        extend\n-    };\n \n     let comma = arm_comma(context.config, body, is_last);\n     let alt_block_sep = String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n@@ -1606,7 +1601,7 @@ fn rewrite_match_body(\n \n         match rewrite {\n             Some(ref body_str)\n-                if !forbid_same_line && !context.config.match_arm_forces_newline()\n+                if !forbid_same_line\n                     && (is_block\n                         || (!body_str.contains('\\n') && body_str.len() <= body_shape.width)) =>\n             {"}, {"sha": "e9c8d575f1df67532ba4255f17a70773bffde0e5", "filename": "tests/source/configs-match_arm_forces_newline-true.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0e1fa2c244f030e93643a2e34d6f07636cb792a6/tests%2Fsource%2Fconfigs-match_arm_forces_newline-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1fa2c244f030e93643a2e34d6f07636cb792a6/tests%2Fsource%2Fconfigs-match_arm_forces_newline-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-match_arm_forces_newline-true.rs?ref=0e1fa2c244f030e93643a2e34d6f07636cb792a6", "patch": "@@ -1,20 +0,0 @@\n-// rustfmt-match_arm_forces_newline: true\n-// rustfmt-wrap_match_arms: false\n-\n-// match_arm_forces_newline puts all match arms bodies in a newline and indents\n-// them.\n-\n-fn main() {\n-    match x() {\n-        // a short non-empty block\n-        X0 => { f(); }\n-        // a long non-empty block\n-        X1 => { some.really.long.expression.fooooooooooooooooooooooooooooooooooooooooo().baaaaarrrrrrrrrrrrrrrrrrrrrrrrrr(); }\n-        // an empty block\n-        X2 => {}\n-        // a short non-block\n-        X3 => println!(\"ok\"),\n-        // a long non-block\n-        X4 => foo.bar.baz.test.x.y.z.a.s.d.fasdfasdf.asfads.fasd.fasdfasdf.dfasfdsaf(),\n-    }\n-}"}, {"sha": "5629a56d66462063583f77386a02463c91ac3464", "filename": "tests/target/configs-match_arm_forces_newline-true.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0e1fa2c244f030e93643a2e34d6f07636cb792a6/tests%2Ftarget%2Fconfigs-match_arm_forces_newline-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1fa2c244f030e93643a2e34d6f07636cb792a6/tests%2Ftarget%2Fconfigs-match_arm_forces_newline-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-match_arm_forces_newline-true.rs?ref=0e1fa2c244f030e93643a2e34d6f07636cb792a6", "patch": "@@ -1,44 +0,0 @@\n-// rustfmt-match_arm_forces_newline: true\n-// rustfmt-wrap_match_arms: false\n-\n-// match_arm_forces_newline puts all match arms bodies in a newline and indents\n-// them.\n-\n-fn main() {\n-    match x() {\n-        // a short non-empty block\n-        X0 => {\n-            f();\n-        }\n-        // a long non-empty block\n-        X1 => {\n-            some.really\n-                .long\n-                .expression\n-                .fooooooooooooooooooooooooooooooooooooooooo()\n-                .baaaaarrrrrrrrrrrrrrrrrrrrrrrrrr();\n-        }\n-        // an empty block\n-        X2 =>\n-            {}\n-        // a short non-block\n-        X3 =>\n-            println!(\"ok\"),\n-        // a long non-block\n-        X4 =>\n-            foo.bar\n-                .baz\n-                .test\n-                .x\n-                .y\n-                .z\n-                .a\n-                .s\n-                .d\n-                .fasdfasdf\n-                .asfads\n-                .fasd\n-                .fasdfasdf\n-                .dfasfdsaf(),\n-    }\n-}"}]}