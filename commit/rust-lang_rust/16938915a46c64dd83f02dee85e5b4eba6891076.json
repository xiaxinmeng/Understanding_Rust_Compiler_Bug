{"sha": "16938915a46c64dd83f02dee85e5b4eba6891076", "node_id": "C_kwDOAAsO6NoAKDE2OTM4OTE1YTQ2YzY0ZGQ4M2YwMmRlZTg1ZTViNGViYTY4OTEwNzY", "commit": {"author": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-01-11T16:30:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-11T16:30:53Z"}, "message": "Rollup merge of #106397 - compiler-errors:new-solver-impl-wc, r=lcnr\n\nCheck `impl`'s `where` clauses in `consider_impl_candidate` in experimental solver\n\nCheck impl's nested predicates as part of the recursive evaluate in `consider_impl_candidate`.\n\n<sub>Unless, for some reason, these are intentionally **not** checked here -- in which case, I really don't understand where they're being checked...<sub>\n\nr? ```@lcnr```", "tree": {"sha": "a69d0e7c7258b99107f70084fa87027b7ef2ee39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a69d0e7c7258b99107f70084fa87027b7ef2ee39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16938915a46c64dd83f02dee85e5b4eba6891076", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjvuQ9CRBK7hj4Ov3rIwAAU2UIAFusm+z7DnxnB8IGre4pWYU1\nxs/2g3HSxz0PY7bpPEikpwLOQ63pscvYkXUnYGePBSNT1vec1TR9YnvlcyqXHa1z\ni8cqWMqAt7l5nhzCrYIN0FnBpxCitN+CZGxhk8De12QGauvXryhBHl3P3xDdGIgt\naNXxvpCMHZ4d/fSPkOtyUUohC6YNYqXmwTszFgWE9ZVrv9WlOFoKkjpxbboaBjEa\nfVivDezR3Jimeho+EEoM/NhrwgKe95MfuaMxi1IXL9IRlc2QA0H+FEZmivnDvDrW\nuCnNAFE3fLybES11GRti9ohr+xr0YhNvLKaxnXo2kNTQ1P+5GC3vOiUpU21VJ64=\n=mDUg\n-----END PGP SIGNATURE-----\n", "payload": "tree a69d0e7c7258b99107f70084fa87027b7ef2ee39\nparent 0681a9652eaaaefb5bada3be3c5303318e5f69b8\nparent 36ee66c6c5e5e5f1a132faf28c6a5d28e950a2ba\nauthor nils <48135649+Nilstrieb@users.noreply.github.com> 1673454653 +0100\ncommitter GitHub <noreply@github.com> 1673454653 +0100\n\nRollup merge of #106397 - compiler-errors:new-solver-impl-wc, r=lcnr\n\nCheck `impl`'s `where` clauses in `consider_impl_candidate` in experimental solver\n\nCheck impl's nested predicates as part of the recursive evaluate in `consider_impl_candidate`.\n\n<sub>Unless, for some reason, these are intentionally **not** checked here -- in which case, I really don't understand where they're being checked...<sub>\n\nr? ```@lcnr```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16938915a46c64dd83f02dee85e5b4eba6891076", "html_url": "https://github.com/rust-lang/rust/commit/16938915a46c64dd83f02dee85e5b4eba6891076", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16938915a46c64dd83f02dee85e5b4eba6891076/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0681a9652eaaaefb5bada3be3c5303318e5f69b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0681a9652eaaaefb5bada3be3c5303318e5f69b8", "html_url": "https://github.com/rust-lang/rust/commit/0681a9652eaaaefb5bada3be3c5303318e5f69b8"}, {"sha": "36ee66c6c5e5e5f1a132faf28c6a5d28e950a2ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/36ee66c6c5e5e5f1a132faf28c6a5d28e950a2ba", "html_url": "https://github.com/rust-lang/rust/commit/36ee66c6c5e5e5f1a132faf28c6a5d28e950a2ba"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "3d649bea19ddfc966ed0f9ceb3e659e12f4a0950", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16938915a46c64dd83f02dee85e5b4eba6891076/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16938915a46c64dd83f02dee85e5b4eba6891076/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=16938915a46c64dd83f02dee85e5b4eba6891076", "patch": "@@ -131,8 +131,14 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n             else {\n                 return\n             };\n-\n-            let nested_goals = obligations.into_iter().map(|o| o.into()).collect();\n+            let where_clause_bounds = tcx\n+                .predicates_of(impl_def_id)\n+                .instantiate(tcx, impl_substs)\n+                .predicates\n+                .into_iter()\n+                .map(|pred| goal.with(tcx, pred));\n+\n+            let nested_goals = obligations.into_iter().map(|o| o.into()).chain(where_clause_bounds).collect();\n             let Ok(trait_ref_certainty) = acx.cx.evaluate_all(acx.infcx, nested_goals) else { return };\n \n             let Some(assoc_def) = fetch_eligible_assoc_item_def("}, {"sha": "c69cc39acb53cea516568532d109556cfaee5a86", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/16938915a46c64dd83f02dee85e5b4eba6891076/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16938915a46c64dd83f02dee85e5b4eba6891076/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=16938915a46c64dd83f02dee85e5b4eba6891076", "patch": "@@ -71,7 +71,9 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         goal: Goal<'tcx, TraitPredicate<'tcx>>,\n         impl_def_id: DefId,\n     ) {\n-        let impl_trait_ref = acx.cx.tcx.bound_impl_trait_ref(impl_def_id).unwrap();\n+        let tcx = acx.cx.tcx;\n+\n+        let impl_trait_ref = tcx.bound_impl_trait_ref(impl_def_id).unwrap();\n         let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::AsPlaceholder };\n         if iter::zip(goal.predicate.trait_ref.substs, impl_trait_ref.skip_binder().substs)\n             .any(|(goal, imp)| !drcx.generic_args_may_unify(goal, imp))\n@@ -81,7 +83,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n \n         acx.infcx.probe(|_| {\n             let impl_substs = acx.infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id);\n-            let impl_trait_ref = impl_trait_ref.subst(acx.cx.tcx, impl_substs);\n+            let impl_trait_ref = impl_trait_ref.subst(tcx, impl_substs);\n \n             let Ok(InferOk { obligations, .. }) = acx\n                 .infcx\n@@ -92,8 +94,15 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n             else {\n                 return\n             };\n-\n-            let nested_goals = obligations.into_iter().map(|o| o.into()).collect();\n+            let where_clause_bounds = tcx\n+                .predicates_of(impl_def_id)\n+                .instantiate(tcx, impl_substs)\n+                .predicates\n+                .into_iter()\n+                .map(|pred| goal.with(tcx, pred));\n+\n+            let nested_goals =\n+                obligations.into_iter().map(|o| o.into()).chain(where_clause_bounds).collect();\n \n             let Ok(certainty) = acx.cx.evaluate_all(acx.infcx, nested_goals) else { return };\n             acx.try_insert_candidate(CandidateSource::Impl(impl_def_id), certainty);"}]}