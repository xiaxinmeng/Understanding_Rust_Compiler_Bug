{"sha": "b83ec47808c219cb8e85eeebb370be6466b2d690", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4M2VjNDc4MDhjMjE5Y2I4ZTg1ZWVlYmIzNzBiZTY0NjZiMmQ2OTA=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-07-10T10:33:10Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-07-10T10:33:10Z"}, "message": "Remove the generic `fill_bytes_buf` function", "tree": {"sha": "beb6c1c7bca197897adee4da1d4c23c614866ab9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beb6c1c7bca197897adee4da1d4c23c614866ab9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b83ec47808c219cb8e85eeebb370be6466b2d690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b83ec47808c219cb8e85eeebb370be6466b2d690", "html_url": "https://github.com/rust-lang/rust/commit/b83ec47808c219cb8e85eeebb370be6466b2d690", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b83ec47808c219cb8e85eeebb370be6466b2d690/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d99d4fbf70acce44c14448a572f7dce4cb883ce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d99d4fbf70acce44c14448a572f7dce4cb883ce8", "html_url": "https://github.com/rust-lang/rust/commit/d99d4fbf70acce44c14448a572f7dce4cb883ce8"}], "stats": {"total": 44, "additions": 13, "deletions": 31}, "files": [{"sha": "6fd20b940bb52f14c9c4b53cda1bf2ebf3f8e6f9", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b83ec47808c219cb8e85eeebb370be6466b2d690/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83ec47808c219cb8e85eeebb370be6466b2d690/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=b83ec47808c219cb8e85eeebb370be6466b2d690", "patch": "@@ -75,28 +75,6 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n     }\n }\n \n-// Some system functions expect the user to pass a appropiately-sized buffer\n-// without specifying its size. They will only report back whether the buffer\n-// was large enough or not.\n-//\n-// The callback is yielded an uninitialized vector which can be passed to a\n-// syscall. The closure is expected to return `Err(v)` with the passed vector\n-// if the space was insufficient and `Ok(r)` if the syscall did not fail due to\n-// insufficient space.\n-fn fill_bytes_buf<F, T>(mut f: F) -> io::Result<T>\n-    where F: FnMut(Vec<u8>) -> Result<io::Result<T>,Vec<u8>>,\n-{\n-    let mut buf = Vec::new();\n-    let mut n = os::BUF_BYTES;\n-    loop {\n-        buf.reserve(n);\n-        match f(buf) {\n-            Err(b) => { buf = b; n *= 2; }\n-            Ok(r) => return r,\n-        }\n-    }\n-}\n-\n pub fn cvt<T: One + PartialEq + Neg<Output=T>>(t: T) -> io::Result<T> {\n     let one: T = T::one();\n     if t == -one {"}, {"sha": "2b6b50a1a56d77c108c60d7f5f7bfb47c8e66a5d", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b83ec47808c219cb8e85eeebb370be6466b2d690/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83ec47808c219cb8e85eeebb370be6466b2d690/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=b83ec47808c219cb8e85eeebb370be6466b2d690", "patch": "@@ -30,7 +30,7 @@ use sys::c;\n use sys::fd;\n use vec;\n \n-pub const BUF_BYTES: usize = 2048;\n+const GETCWD_BUF_BYTES: usize = 2048;\n const TMPBUF_SZ: usize = 128;\n \n /// Returns the platform-specific value of errno\n@@ -94,22 +94,26 @@ pub fn error_string(errno: i32) -> String {\n }\n \n pub fn getcwd() -> io::Result<PathBuf> {\n-    super::fill_bytes_buf(|mut buf| {\n+    let mut buf = Vec::new();\n+    let mut n = GETCWD_BUF_BYTES;\n+    loop {\n         unsafe {\n+            buf.reserve(n);\n             let ptr = buf.as_mut_ptr() as *mut libc::c_char;\n-            Ok(if !libc::getcwd(ptr, buf.capacity() as libc::size_t).is_null() {\n+            if !libc::getcwd(ptr, buf.capacity() as libc::size_t).is_null() {\n                 let len = CStr::from_ptr(buf.as_ptr() as *const libc::c_char).to_bytes().len();\n                 buf.set_len(len);\n-                Ok(PathBuf::from(OsString::from_bytes(buf).unwrap()))\n+                buf.shrink_to_fit();\n+                return Ok(PathBuf::from(OsString::from_vec(buf)));\n             } else {\n                 let error = io::Error::last_os_error();\n-                if error.raw_os_error().unwrap() == libc::ERANGE {\n-                    return Err(buf);\n+                if error.raw_os_error() != Some(libc::ERANGE) {\n+                    return Err(error);\n                 }\n-                Err(error)\n-            })\n+            }\n+            n *= 2;\n         }\n-    })\n+    }\n }\n \n pub fn chdir(p: &path::Path) -> io::Result<()> {"}]}