{"sha": "cef90ce45ee9954e864933450953f5eb83429f01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZjkwY2U0NWVlOTk1NGU4NjQ5MzM0NTA5NTNmNWViODM0MjlmMDE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-08-19T11:31:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-19T11:31:01Z"}, "message": "Merge #1701\n\n1701:  qualify ast types with `ast::`  r=matklad a=matklad\n\n(only the last commit is relevant, the rest are from #1700) \r\n\r\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "983a31a82fdc2e9e7694ff718dbfd434c4196587", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/983a31a82fdc2e9e7694ff718dbfd434c4196587"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cef90ce45ee9954e864933450953f5eb83429f01", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdWoh1CRBK7hj4Ov3rIwAAdHIIAK8Ry+S0PSofJDEGospEyfl4\nigOfDeMKx/mlwBko3yP2hrCc8SgyBhGLRPyLgtAKOJTElS7o69KTafi88+UsoLOx\ndlwZUXWgyhQi9WSeFd0rt5rp5rmMLkzT8355kxptXWC4eGLU2ktxUXyXz81Ugyyo\nFcFjyolWOXA1B0p+RXU5qgXm0dGkWvXSJyvO5ZsscwNRy4GfNpSlLNPpRDEXGhi4\nrmOn6xBWuvRQNLCHXiq908MQJlHte8Me1cIjKSoFnZRlQIUZSVBAgNLgwac2fYQk\nrUNkhzMoaNGom65+qe/rg8Gu7Eios05thnblAElCrFgOQkqAD1h4ZJhtPugRLPE=\n=urAp\n-----END PGP SIGNATURE-----\n", "payload": "tree 983a31a82fdc2e9e7694ff718dbfd434c4196587\nparent 8704a74cd5d02ed4dfe897c12186af1c3ac697fa\nparent db84437d6f3e9b764907e67d31d5c78c69309b31\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1566214261 +0000\ncommitter GitHub <noreply@github.com> 1566214261 +0000\n\nMerge #1701\n\n1701:  qualify ast types with `ast::`  r=matklad a=matklad\n\n(only the last commit is relevant, the rest are from #1700) \r\n\r\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cef90ce45ee9954e864933450953f5eb83429f01", "html_url": "https://github.com/rust-lang/rust/commit/cef90ce45ee9954e864933450953f5eb83429f01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cef90ce45ee9954e864933450953f5eb83429f01/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8704a74cd5d02ed4dfe897c12186af1c3ac697fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/8704a74cd5d02ed4dfe897c12186af1c3ac697fa", "html_url": "https://github.com/rust-lang/rust/commit/8704a74cd5d02ed4dfe897c12186af1c3ac697fa"}, {"sha": "db84437d6f3e9b764907e67d31d5c78c69309b31", "url": "https://api.github.com/repos/rust-lang/rust/commits/db84437d6f3e9b764907e67d31d5c78c69309b31", "html_url": "https://github.com/rust-lang/rust/commit/db84437d6f3e9b764907e67d31d5c78c69309b31"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "735f3166c5669ddeba6de581c0fca0936c8dab2b", "filename": "crates/ra_ide_api/src/inlay_hints.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cef90ce45ee9954e864933450953f5eb83429f01/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef90ce45ee9954e864933450953f5eb83429f01/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs?ref=cef90ce45ee9954e864933450953f5eb83429f01", "patch": "@@ -2,11 +2,8 @@ use crate::{db::RootDatabase, FileId};\n use hir::{HirDisplay, SourceAnalyzer, Ty};\n use ra_syntax::{\n     algo::visit::{visitor, Visitor},\n-    ast::{\n-        self, AstNode, ForExpr, IfExpr, LambdaExpr, LetStmt, MatchArmList, SourceFile,\n-        TypeAscriptionOwner, WhileExpr,\n-    },\n-    SmolStr, SyntaxKind, SyntaxNode, TextRange,\n+    ast::{self, AstNode, TypeAscriptionOwner},\n+    SmolStr, SourceFile, SyntaxKind, SyntaxNode, TextRange,\n };\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -35,15 +32,15 @@ fn get_inlay_hints(\n     node: &SyntaxNode,\n ) -> Option<Vec<InlayHint>> {\n     visitor()\n-        .visit(|let_statement: LetStmt| {\n+        .visit(|let_statement: ast::LetStmt| {\n             if let_statement.ascribed_type().is_some() {\n                 return None;\n             }\n             let pat = let_statement.pat()?;\n             let analyzer = SourceAnalyzer::new(db, file_id, let_statement.syntax(), None);\n             Some(get_pat_type_hints(db, &analyzer, pat, false))\n         })\n-        .visit(|closure_parameter: LambdaExpr| {\n+        .visit(|closure_parameter: ast::LambdaExpr| {\n             let analyzer = SourceAnalyzer::new(db, file_id, closure_parameter.syntax(), None);\n             closure_parameter.param_list().map(|param_list| {\n                 param_list\n@@ -55,22 +52,22 @@ fn get_inlay_hints(\n                     .collect()\n             })\n         })\n-        .visit(|for_expression: ForExpr| {\n+        .visit(|for_expression: ast::ForExpr| {\n             let pat = for_expression.pat()?;\n             let analyzer = SourceAnalyzer::new(db, file_id, for_expression.syntax(), None);\n             Some(get_pat_type_hints(db, &analyzer, pat, false))\n         })\n-        .visit(|if_expr: IfExpr| {\n+        .visit(|if_expr: ast::IfExpr| {\n             let pat = if_expr.condition()?.pat()?;\n             let analyzer = SourceAnalyzer::new(db, file_id, if_expr.syntax(), None);\n             Some(get_pat_type_hints(db, &analyzer, pat, true))\n         })\n-        .visit(|while_expr: WhileExpr| {\n+        .visit(|while_expr: ast::WhileExpr| {\n             let pat = while_expr.condition()?.pat()?;\n             let analyzer = SourceAnalyzer::new(db, file_id, while_expr.syntax(), None);\n             Some(get_pat_type_hints(db, &analyzer, pat, true))\n         })\n-        .visit(|match_arm_list: MatchArmList| {\n+        .visit(|match_arm_list: ast::MatchArmList| {\n             let analyzer = SourceAnalyzer::new(db, file_id, match_arm_list.syntax(), None);\n             Some(\n                 match_arm_list"}]}