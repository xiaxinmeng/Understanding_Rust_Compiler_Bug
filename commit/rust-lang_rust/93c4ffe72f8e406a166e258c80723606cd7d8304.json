{"sha": "93c4ffe72f8e406a166e258c80723606cd7d8304", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYzRmZmU3MmY4ZTQwNmExNjZlMjU4YzgwNzIzNjA2Y2Q3ZDgzMDQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-11-24T12:00:09Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2017-12-13T06:15:17Z"}, "message": "Revised graphviz rendering API to avoid requiring borrowed state.\n\nMade `do_dataflow` and related API `pub(crate)`.", "tree": {"sha": "abbdb5b22d7fa0a56c6a6d658a8be58129e9c0ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abbdb5b22d7fa0a56c6a6d658a8be58129e9c0ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93c4ffe72f8e406a166e258c80723606cd7d8304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93c4ffe72f8e406a166e258c80723606cd7d8304", "html_url": "https://github.com/rust-lang/rust/commit/93c4ffe72f8e406a166e258c80723606cd7d8304", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93c4ffe72f8e406a166e258c80723606cd7d8304/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "691f022767aa5dec36635ab17bb767d5a80407db", "url": "https://api.github.com/repos/rust-lang/rust/commits/691f022767aa5dec36635ab17bb767d5a80407db", "html_url": "https://github.com/rust-lang/rust/commit/691f022767aa5dec36635ab17bb767d5a80407db"}], "stats": {"total": 101, "additions": 60, "deletions": 41}, "files": [{"sha": "8bfb5fee9f646fb93c3b932f7ec8ae2c05e3983d", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93c4ffe72f8e406a166e258c80723606cd7d8304/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c4ffe72f8e406a166e258c80723606cd7d8304/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=93c4ffe72f8e406a166e258c80723606cd7d8304", "patch": "@@ -28,7 +28,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use syntax::ast;\n use syntax_pos::Span;\n \n-use dataflow::do_dataflow;\n+use dataflow::{do_dataflow, DebugFormatted};\n use dataflow::MoveDataParamEnv;\n use dataflow::DataflowResultsConsumer;\n use dataflow::{FlowAtLocation, FlowsAtLocation};\n@@ -157,7 +157,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         &attributes,\n         &dead_unwinds,\n         MaybeInitializedLvals::new(tcx, mir, &mdpe),\n-        |bd, i| &bd.move_data().move_paths[i],\n+        |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]),\n     ));\n     let flow_uninits = FlowAtLocation::new(do_dataflow(\n         tcx,\n@@ -166,7 +166,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         &attributes,\n         &dead_unwinds,\n         MaybeUninitializedLvals::new(tcx, mir, &mdpe),\n-        |bd, i| &bd.move_data().move_paths[i],\n+        |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]),\n     ));\n     let flow_move_outs = FlowAtLocation::new(do_dataflow(\n         tcx,\n@@ -175,7 +175,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         &attributes,\n         &dead_unwinds,\n         MovingOutStatements::new(tcx, mir, &mdpe),\n-        |bd, i| &bd.move_data().moves[i],\n+        |bd, i| DebugFormatted::new(&bd.move_data().moves[i]),\n     ));\n     let flow_ever_inits = FlowAtLocation::new(do_dataflow(\n         tcx,\n@@ -184,7 +184,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         &attributes,\n         &dead_unwinds,\n         EverInitializedLvals::new(tcx, mir, &mdpe),\n-        |bd, i| &bd.move_data().inits[i],\n+        |bd, i| DebugFormatted::new(&bd.move_data().inits[i]),\n     ));\n \n     // If we are in non-lexical mode, compute the non-lexical lifetimes.\n@@ -212,7 +212,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         &attributes,\n         &dead_unwinds,\n         Borrows::new(tcx, mir, opt_regioncx, def_id, body_id),\n-        |bd, i| bd.location(i),\n+        |bd, i| DebugFormatted::new(bd.location(i)),\n     ));\n \n     let mut state = Flows::new("}, {"sha": "b79e044b24f202db76cda68c2aa8658a29bad866", "filename": "src/librustc_mir/dataflow/graphviz.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93c4ffe72f8e406a166e258c80723606cd7d8304/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c4ffe72f8e406a166e258c80723606cd7d8304/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs?ref=93c4ffe72f8e406a166e258c80723606cd7d8304", "patch": "@@ -18,7 +18,6 @@ use rustc_data_structures::indexed_vec::Idx;\n use dot;\n use dot::IntoCow;\n \n-use std::fmt::Debug;\n use std::fs::File;\n use std::io;\n use std::io::prelude::*;\n@@ -29,6 +28,7 @@ use util;\n \n use super::{BitDenotation, DataflowState};\n use super::DataflowBuilder;\n+use super::DebugFormatted;\n \n pub trait MirWithFlowState<'tcx> {\n     type BD: BitDenotation;\n@@ -60,9 +60,9 @@ pub(crate) fn print_borrowck_graph_to<'a, 'tcx, BD, P>(\n     render_idx: P)\n     -> io::Result<()>\n     where BD: BitDenotation,\n-          P: Fn(&BD, BD::Idx) -> &Debug\n+          P: Fn(&BD, BD::Idx) -> DebugFormatted\n {\n-    let g = Graph { mbcx: mbcx, phantom: PhantomData, render_idx: render_idx };\n+    let g = Graph { mbcx, phantom: PhantomData, render_idx };\n     let mut v = Vec::new();\n     dot::render(&g, &mut v)?;\n     debug!(\"print_borrowck_graph_to path: {} node_id: {}\",\n@@ -82,7 +82,7 @@ fn outgoing(mir: &Mir, bb: BasicBlock) -> Vec<Edge> {\n \n impl<'a, 'tcx, MWF, P> dot::Labeller<'a> for Graph<'a, 'tcx, MWF, P>\n     where MWF: MirWithFlowState<'tcx>,\n-          P: for <'b> Fn(&'b MWF::BD, <MWF::BD as BitDenotation>::Idx) -> &'b Debug,\n+          P: Fn(&MWF::BD, <MWF::BD as BitDenotation>::Idx) -> DebugFormatted,\n {\n     type Node = Node;\n     type Edge = Edge;\n@@ -142,7 +142,7 @@ impl<'a, 'tcx, MWF, P> dot::Labeller<'a> for Graph<'a, 'tcx, MWF, P>\n         const ALIGN_RIGHT: &'static str = r#\"align=\"right\"\"#;\n         const FACE_MONOSPACE: &'static str = r#\"FACE=\"Courier\"\"#;\n         fn chunked_present_left<W:io::Write>(w: &mut W,\n-                                             interpreted: &[&Debug],\n+                                             interpreted: &[DebugFormatted],\n                                              chunk_size: usize)\n                                              -> io::Result<()>\n         {"}, {"sha": "8624cbbf50ab34c0af46e7416f3659ecb31b28fa", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/93c4ffe72f8e406a166e258c80723606cd7d8304/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c4ffe72f8e406a166e258c80723606cd7d8304/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=93c4ffe72f8e406a166e258c80723606cd7d8304", "patch": "@@ -19,7 +19,7 @@ use rustc::mir::{self, Mir, BasicBlock, BasicBlockData, Location, Statement, Ter\n use rustc::session::Session;\n \n use std::borrow::Borrow;\n-use std::fmt::{self, Debug};\n+use std::fmt;\n use std::io;\n use std::mem;\n use std::path::PathBuf;\n@@ -51,10 +51,29 @@ pub(crate) struct DataflowBuilder<'a, 'tcx: 'a, BD> where BD: BitDenotation\n     print_postflow_to: Option<String>,\n }\n \n-pub trait Dataflow<BD: BitDenotation> {\n+/// `DebugFormatted` encapsulates the \"{:?}\" rendering of some\n+/// arbitrary value. This way: you pay cost of allocating an extra\n+/// string (as well as that of rendering up-front); in exchange, you\n+/// don't have to hand over ownership of your value or deal with\n+/// borrowing it.\n+pub(crate) struct DebugFormatted(String);\n+\n+impl DebugFormatted {\n+    pub fn new(input: &fmt::Debug) -> DebugFormatted {\n+        DebugFormatted(format!(\"{:?}\", input))\n+    }\n+}\n+\n+impl fmt::Debug for DebugFormatted {\n+    fn fmt(&self, w: &mut fmt::Formatter) -> fmt::Result {\n+        write!(w, \"{}\", self.0)\n+    }\n+}\n+\n+pub(crate) trait Dataflow<BD: BitDenotation> {\n     /// Sets up and runs the dataflow problem, using `p` to render results if\n     /// implementation so chooses.\n-    fn dataflow<P>(&mut self, p: P) where P: Fn(&BD, BD::Idx) -> &Debug {\n+    fn dataflow<P>(&mut self, p: P) where P: Fn(&BD, BD::Idx) -> DebugFormatted {\n         let _ = p; // default implementation does not instrument process.\n         self.build_sets();\n         self.propagate();\n@@ -69,7 +88,7 @@ pub trait Dataflow<BD: BitDenotation> {\n \n impl<'a, 'tcx: 'a, BD> Dataflow<BD> for DataflowBuilder<'a, 'tcx, BD> where BD: BitDenotation\n {\n-    fn dataflow<P>(&mut self, p: P) where P: Fn(&BD, BD::Idx) -> &Debug {\n+    fn dataflow<P>(&mut self, p: P) where P: Fn(&BD, BD::Idx) -> DebugFormatted {\n         self.flow_state.build_sets();\n         self.pre_dataflow_instrumentation(|c,i| p(c,i)).unwrap();\n         self.flow_state.propagate();\n@@ -109,7 +128,7 @@ pub(crate) fn do_dataflow<'a, 'gcx, 'tcx, BD, P>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                                  p: P)\n                                                  -> DataflowResults<BD>\n     where BD: BitDenotation,\n-          P: Fn(&BD, BD::Idx) -> &fmt::Debug\n+          P: Fn(&BD, BD::Idx) -> DebugFormatted\n {\n     let name_found = |sess: &Session, attrs: &[ast::Attribute], name| -> Option<String> {\n         if let Some(item) = has_rustc_mir_with(attrs, name) {\n@@ -231,7 +250,7 @@ fn dataflow_path(context: &str, prepost: &str, path: &str) -> PathBuf {\n impl<'a, 'tcx: 'a, BD> DataflowBuilder<'a, 'tcx, BD> where BD: BitDenotation\n {\n     fn pre_dataflow_instrumentation<P>(&self, p: P) -> io::Result<()>\n-        where P: Fn(&BD, BD::Idx) -> &Debug\n+        where P: Fn(&BD, BD::Idx) -> DebugFormatted\n     {\n         if let Some(ref path_str) = self.print_preflow_to {\n             let path = dataflow_path(BD::name(), \"preflow\", path_str);\n@@ -242,7 +261,7 @@ impl<'a, 'tcx: 'a, BD> DataflowBuilder<'a, 'tcx, BD> where BD: BitDenotation\n     }\n \n     fn post_dataflow_instrumentation<P>(&self, p: P) -> io::Result<()>\n-        where P: Fn(&BD, BD::Idx) -> &Debug\n+        where P: Fn(&BD, BD::Idx) -> DebugFormatted\n     {\n         if let Some(ref path_str) = self.print_postflow_to {\n             let path = dataflow_path(BD::name(), \"postflow\", path_str);\n@@ -403,12 +422,12 @@ impl<O: BitDenotation> DataflowState<O> {\n         words.each_bit(bits_per_block, f)\n     }\n \n-    pub fn interpret_set<'c, P>(&self,\n-                                o: &'c O,\n-                                words: &IdxSet<O::Idx>,\n-                                render_idx: &P)\n-                                -> Vec<&'c Debug>\n-        where P: Fn(&O, O::Idx) -> &Debug\n+    pub(crate) fn interpret_set<'c, P>(&self,\n+                                       o: &'c O,\n+                                       words: &IdxSet<O::Idx>,\n+                                       render_idx: &P)\n+                                       -> Vec<DebugFormatted>\n+        where P: Fn(&O, O::Idx) -> DebugFormatted\n     {\n         let mut v = Vec::new();\n         self.each_bit(words, |i| {"}, {"sha": "106bc39d0fc5be64ad2072675674340dac064793", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/93c4ffe72f8e406a166e258c80723606cd7d8304/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c4ffe72f8e406a166e258c80723606cd7d8304/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=93c4ffe72f8e406a166e258c80723606cd7d8304", "patch": "@@ -14,7 +14,7 @@ use dataflow::{DataflowResults};\n use dataflow::{on_all_children_bits, on_all_drop_children_bits};\n use dataflow::{drop_flag_effects_for_location, on_lookup_result_bits};\n use dataflow::MoveDataParamEnv;\n-use dataflow;\n+use dataflow::{self, do_dataflow, DebugFormatted};\n use rustc::hir;\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::*;\n@@ -59,13 +59,13 @@ impl MirPass for ElaborateDrops {\n             };\n             let dead_unwinds = find_dead_unwinds(tcx, mir, id, &env);\n             let flow_inits =\n-                dataflow::do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n-                                      MaybeInitializedLvals::new(tcx, mir, &env),\n-                                      |bd, p| &bd.move_data().move_paths[p]);\n+                do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n+                            MaybeInitializedLvals::new(tcx, mir, &env),\n+                            |bd, p| DebugFormatted::new(&bd.move_data().move_paths[p]));\n             let flow_uninits =\n-                dataflow::do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n-                                      MaybeUninitializedLvals::new(tcx, mir, &env),\n-                                      |bd, p| &bd.move_data().move_paths[p]);\n+                do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n+                            MaybeUninitializedLvals::new(tcx, mir, &env),\n+                            |bd, p| DebugFormatted::new(&bd.move_data().move_paths[p]));\n \n             ElaborateDropsCtxt {\n                 tcx,\n@@ -96,9 +96,9 @@ fn find_dead_unwinds<'a, 'tcx>(\n     // reach cleanup blocks, which can't have unwind edges themselves.\n     let mut dead_unwinds = IdxSetBuf::new_empty(mir.basic_blocks().len());\n     let flow_inits =\n-        dataflow::do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n-                           MaybeInitializedLvals::new(tcx, mir, &env),\n-                           |bd, p| &bd.move_data().move_paths[p]);\n+        do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n+                    MaybeInitializedLvals::new(tcx, mir, &env),\n+                    |bd, p| DebugFormatted::new(&bd.move_data().move_paths[p]));\n     for (bb, bb_data) in mir.basic_blocks().iter_enumerated() {\n         let location = match bb_data.terminator().kind {\n             TerminatorKind::Drop { ref location, unwind: Some(_), .. } |"}, {"sha": "455a07c04cfc0056f97657d5fc84b1bd8594fe9c", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93c4ffe72f8e406a166e258c80723606cd7d8304/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c4ffe72f8e406a166e258c80723606cd7d8304/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=93c4ffe72f8e406a166e258c80723606cd7d8304", "patch": "@@ -78,7 +78,7 @@ use std::mem;\n use transform::{MirPass, MirSource};\n use transform::simplify;\n use transform::no_landing_pads::no_landing_pads;\n-use dataflow::{self, MaybeStorageLive, state_for_location};\n+use dataflow::{do_dataflow, DebugFormatted, MaybeStorageLive, state_for_location};\n \n pub struct StateTransform;\n \n@@ -341,8 +341,8 @@ fn locals_live_across_suspend_points<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let node_id = tcx.hir.as_local_node_id(source.def_id).unwrap();\n     let analysis = MaybeStorageLive::new(mir);\n     let storage_live =\n-        dataflow::do_dataflow(tcx, mir, node_id, &[], &dead_unwinds, analysis,\n-                              |bd, p| &bd.mir().local_decls[p]);\n+        do_dataflow(tcx, mir, node_id, &[], &dead_unwinds, analysis,\n+                    |bd, p| DebugFormatted::new(&bd.mir().local_decls[p]));\n \n     let mut ignored = StorageIgnored(IdxSetBuf::new_filled(mir.local_decls.len()));\n     ignored.visit_mir(mir);"}, {"sha": "6b8e2b073ccd345e67f06f21f5759ade3e1ae1fb", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93c4ffe72f8e406a166e258c80723606cd7d8304/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93c4ffe72f8e406a166e258c80723606cd7d8304/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=93c4ffe72f8e406a166e258c80723606cd7d8304", "patch": "@@ -18,7 +18,7 @@ use rustc_data_structures::indexed_set::IdxSetBuf;\n use rustc_data_structures::indexed_vec::Idx;\n use transform::{MirPass, MirSource};\n \n-use dataflow::do_dataflow;\n+use dataflow::{do_dataflow, DebugFormatted};\n use dataflow::MoveDataParamEnv;\n use dataflow::BitDenotation;\n use dataflow::DataflowResults;\n@@ -51,15 +51,15 @@ impl MirPass for SanityCheck {\n         let flow_inits =\n             do_dataflow(tcx, mir, id, &attributes, &dead_unwinds,\n                         MaybeInitializedLvals::new(tcx, mir, &mdpe),\n-                        |bd, i| &bd.move_data().move_paths[i]);\n+                        |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]));\n         let flow_uninits =\n             do_dataflow(tcx, mir, id, &attributes, &dead_unwinds,\n                         MaybeUninitializedLvals::new(tcx, mir, &mdpe),\n-                        |bd, i| &bd.move_data().move_paths[i]);\n+                        |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]));\n         let flow_def_inits =\n             do_dataflow(tcx, mir, id, &attributes, &dead_unwinds,\n                         DefinitelyInitializedLvals::new(tcx, mir, &mdpe),\n-                        |bd, i| &bd.move_data().move_paths[i]);\n+                        |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]));\n \n         if has_rustc_mir_with(&attributes, \"rustc_peek_maybe_init\").is_some() {\n             sanity_check_via_rustc_peek(tcx, mir, id, &attributes, &flow_inits);"}]}