{"sha": "23badeb4cb22afd09e0264348800e44cda80af38", "node_id": "C_kwDOAAsO6NoAKDIzYmFkZWI0Y2IyMmFmZDA5ZTAyNjQzNDg4MDBlNDRjZGE4MGFmMzg", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-24T10:11:03Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-03-24T10:11:03Z"}, "message": "Make Timespec available in sys::unix.", "tree": {"sha": "b2eaf18a47788ae20292a196a12ea4a161e9f59e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2eaf18a47788ae20292a196a12ea4a161e9f59e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23badeb4cb22afd09e0264348800e44cda80af38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23badeb4cb22afd09e0264348800e44cda80af38", "html_url": "https://github.com/rust-lang/rust/commit/23badeb4cb22afd09e0264348800e44cda80af38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23badeb4cb22afd09e0264348800e44cda80af38/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87299298d925af0943c94d2cc5bb8a2711d9f6b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/87299298d925af0943c94d2cc5bb8a2711d9f6b4", "html_url": "https://github.com/rust-lang/rust/commit/87299298d925af0943c94d2cc5bb8a2711d9f6b4"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "8741e568c672a7011753e2c2448878c0025f874f", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/23badeb4cb22afd09e0264348800e44cda80af38/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23badeb4cb22afd09e0264348800e44cda80af38/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=23badeb4cb22afd09e0264348800e44cda80af38", "patch": "@@ -9,16 +9,16 @@ use crate::convert::TryInto;\n const NSEC_PER_SEC: u64 = 1_000_000_000;\n \n #[derive(Copy, Clone)]\n-struct Timespec {\n-    t: libc::timespec,\n+pub(in crate::sys::unix) struct Timespec {\n+    pub t: libc::timespec,\n }\n \n impl Timespec {\n     const fn zero() -> Timespec {\n         Timespec { t: libc::timespec { tv_sec: 0, tv_nsec: 0 } }\n     }\n \n-    fn sub_timespec(&self, other: &Timespec) -> Result<Duration, Duration> {\n+    pub fn sub_timespec(&self, other: &Timespec) -> Result<Duration, Duration> {\n         if self >= other {\n             // NOTE(eddyb) two aspects of this `if`-`else` are required for LLVM\n             // to optimize it into a branchless form (see also #75545):\n@@ -51,7 +51,7 @@ impl Timespec {\n         }\n     }\n \n-    fn checked_add_duration(&self, other: &Duration) -> Option<Timespec> {\n+    pub fn checked_add_duration(&self, other: &Duration) -> Option<Timespec> {\n         let mut secs = other\n             .as_secs()\n             .try_into() // <- target type would be `libc::time_t`\n@@ -68,7 +68,7 @@ impl Timespec {\n         Some(Timespec { t: libc::timespec { tv_sec: secs, tv_nsec: nsec as _ } })\n     }\n \n-    fn checked_sub_duration(&self, other: &Duration) -> Option<Timespec> {\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<Timespec> {\n         let mut secs = other\n             .as_secs()\n             .try_into() // <- target type would be `libc::time_t`\n@@ -285,7 +285,7 @@ mod inner {\n \n     impl Instant {\n         pub fn now() -> Instant {\n-            Instant { t: now(libc::CLOCK_MONOTONIC) }\n+            Instant { t: Timespec::now(libc::CLOCK_MONOTONIC) }\n         }\n \n         pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n@@ -299,10 +299,6 @@ mod inner {\n         pub fn checked_sub_duration(&self, other: &Duration) -> Option<Instant> {\n             Some(Instant { t: self.t.checked_sub_duration(other)? })\n         }\n-\n-        pub(in crate::sys::unix) fn as_timespec(&self) -> libc::timespec {\n-            self.t.t\n-        }\n     }\n \n     impl fmt::Debug for Instant {\n@@ -316,7 +312,7 @@ mod inner {\n \n     impl SystemTime {\n         pub fn now() -> SystemTime {\n-            SystemTime { t: now(libc::CLOCK_REALTIME) }\n+            SystemTime { t: Timespec::now(libc::CLOCK_REALTIME) }\n         }\n \n         pub fn sub_time(&self, other: &SystemTime) -> Result<Duration, Duration> {\n@@ -352,9 +348,11 @@ mod inner {\n     #[cfg(any(target_os = \"dragonfly\", target_os = \"espidf\"))]\n     pub type clock_t = libc::c_ulong;\n \n-    fn now(clock: clock_t) -> Timespec {\n-        let mut t = Timespec { t: libc::timespec { tv_sec: 0, tv_nsec: 0 } };\n-        cvt(unsafe { libc::clock_gettime(clock, &mut t.t) }).unwrap();\n-        t\n+    impl Timespec {\n+        pub fn now(clock: clock_t) -> Timespec {\n+            let mut t = Timespec { t: libc::timespec { tv_sec: 0, tv_nsec: 0 } };\n+            cvt(unsafe { libc::clock_gettime(clock, &mut t.t) }).unwrap();\n+            t\n+        }\n     }\n }"}]}