{"sha": "c61f1c8bfa49cdaeb0ee8a8360e0d70a0fbd0b7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MWYxYzhiZmE0OWNkYWViMGVlOGE4MzYwZTBkNzBhMGZiZDBiN2I=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-08-08T03:48:00Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-08-09T19:25:22Z"}, "message": "rustc_mir: use IndexSet in PlaceholderIndices", "tree": {"sha": "c18ed424dab12b3721616f3405f01b3c19e8e47d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c18ed424dab12b3721616f3405f01b3c19e8e47d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c61f1c8bfa49cdaeb0ee8a8360e0d70a0fbd0b7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c61f1c8bfa49cdaeb0ee8a8360e0d70a0fbd0b7b", "html_url": "https://github.com/rust-lang/rust/commit/c61f1c8bfa49cdaeb0ee8a8360e0d70a0fbd0b7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c61f1c8bfa49cdaeb0ee8a8360e0d70a0fbd0b7b/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42e7a0cb3a484670e27e28915a8c45809a35ccc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/42e7a0cb3a484670e27e28915a8c45809a35ccc4", "html_url": "https://github.com/rust-lang/rust/commit/42e7a0cb3a484670e27e28915a8c45809a35ccc4"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "8a5a600cfdd8a76863167cc4e1dda98412b7e019", "filename": "src/librustc_mir/borrow_check/region_infer/values.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c61f1c8bfa49cdaeb0ee8a8360e0d70a0fbd0b7b/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61f1c8bfa49cdaeb0ee8a8360e0d70a0fbd0b7b/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fvalues.rs?ref=c61f1c8bfa49cdaeb0ee8a8360e0d70a0fbd0b7b", "patch": "@@ -1,4 +1,4 @@\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_index::bit_set::{HybridBitSet, SparseBitMatrix};\n use rustc_index::vec::Idx;\n use rustc_index::vec::IndexVec;\n@@ -193,26 +193,25 @@ impl<N: Idx> LivenessValues<N> {\n /// NLL.\n #[derive(Default)]\n crate struct PlaceholderIndices {\n-    to_index: FxHashMap<ty::PlaceholderRegion, PlaceholderIndex>,\n-    from_index: IndexVec<PlaceholderIndex, ty::PlaceholderRegion>,\n+    indices: FxIndexSet<ty::PlaceholderRegion>,\n }\n \n impl PlaceholderIndices {\n     crate fn insert(&mut self, placeholder: ty::PlaceholderRegion) -> PlaceholderIndex {\n-        let PlaceholderIndices { to_index, from_index } = self;\n-        *to_index.entry(placeholder).or_insert_with(|| from_index.push(placeholder))\n+        let (index, _) = self.indices.insert_full(placeholder);\n+        index.into()\n     }\n \n     crate fn lookup_index(&self, placeholder: ty::PlaceholderRegion) -> PlaceholderIndex {\n-        self.to_index[&placeholder]\n+        self.indices.get_index_of(&placeholder).unwrap().into()\n     }\n \n     crate fn lookup_placeholder(&self, placeholder: PlaceholderIndex) -> ty::PlaceholderRegion {\n-        self.from_index[placeholder]\n+        self.indices[placeholder.index()]\n     }\n \n     crate fn len(&self) -> usize {\n-        self.from_index.len()\n+        self.indices.len()\n     }\n }\n "}]}