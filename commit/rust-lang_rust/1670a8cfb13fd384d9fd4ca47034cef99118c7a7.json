{"sha": "1670a8cfb13fd384d9fd4ca47034cef99118c7a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NzBhOGNmYjEzZmQzODRkOWZkNGNhNDcwMzRjZWY5OTExOGM3YTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-06-20T19:11:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-07-08T17:53:44Z"}, "message": "Add new tests for irrefutable patterns used in various tricky ways", "tree": {"sha": "534a37b96a9c11708951e3403b88fa2ea2469e99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/534a37b96a9c11708951e3403b88fa2ea2469e99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1670a8cfb13fd384d9fd4ca47034cef99118c7a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1670a8cfb13fd384d9fd4ca47034cef99118c7a7", "html_url": "https://github.com/rust-lang/rust/commit/1670a8cfb13fd384d9fd4ca47034cef99118c7a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1670a8cfb13fd384d9fd4ca47034cef99118c7a7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17b3712487a4cf2be30e6bd43e89a736a7d86908", "url": "https://api.github.com/repos/rust-lang/rust/commits/17b3712487a4cf2be30e6bd43e89a736a7d86908", "html_url": "https://github.com/rust-lang/rust/commit/17b3712487a4cf2be30e6bd43e89a736a7d86908"}], "stats": {"total": 156, "additions": 156, "deletions": 0}, "files": [{"sha": "c99a1ee60d7fd39bc496866b6c90cb7e54c9df10", "filename": "src/test/compile-fail/borrowck-move-in-irrefut-pat.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1670a8cfb13fd384d9fd4ca47034cef99118c7a7/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1670a8cfb13fd384d9fd4ca47034cef99118c7a7/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-in-irrefut-pat.rs?ref=1670a8cfb13fd384d9fd4ca47034cef99118c7a7", "patch": "@@ -0,0 +1,16 @@\n+fn with(f: &fn(&~str)) {}\n+\n+fn arg_item(&_x: &~str) {}\n+    //~^ ERROR cannot move out of dereference of & pointer\n+\n+fn arg_closure() {\n+    with(|&_x| ())\n+    //~^ ERROR cannot move out of dereference of & pointer\n+}\n+\n+fn let_pat() {\n+    let &_x = &~\"hi\";\n+    //~^ ERROR cannot move out of dereference of & pointer\n+}\n+\n+pub fn main() {}\n\\ No newline at end of file"}, {"sha": "827e35e0c83029bd29b959dfcfe01c9cf081836f", "filename": "src/test/compile-fail/borrowck-move-out-of-struct-with-dtor.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1670a8cfb13fd384d9fd4ca47034cef99118c7a7/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1670a8cfb13fd384d9fd4ca47034cef99118c7a7/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-struct-with-dtor.rs?ref=1670a8cfb13fd384d9fd4ca47034cef99118c7a7", "patch": "@@ -0,0 +1,22 @@\n+struct S {f:~str}\n+impl Drop for S {\n+    fn finalize(&self) { println(self.f); }\n+}\n+\n+fn move_in_match() {\n+    match S {f:~\"foo\"} {\n+        S {f:_s} => {}\n+        //~^ ERROR cannot move out of type `S`, which defines the `Drop` trait\n+    }\n+}\n+\n+fn move_in_let() {\n+    let S {f:_s} = S {f:~\"foo\"};\n+    //~^ ERROR cannot move out of type `S`, which defines the `Drop` trait\n+}\n+\n+fn move_in_fn_arg(S {f:_s}: S) {\n+    //~^ ERROR cannot move out of type `S`, which defines the `Drop` trait\n+}\n+\n+fn main() {}"}, {"sha": "6013999d835d4a00c8455896df94c8f7ddb180b1", "filename": "src/test/compile-fail/borrowck-move-out-of-tuple-struct-with-dtor.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1670a8cfb13fd384d9fd4ca47034cef99118c7a7/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-tuple-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1670a8cfb13fd384d9fd4ca47034cef99118c7a7/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-tuple-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-tuple-struct-with-dtor.rs?ref=1670a8cfb13fd384d9fd4ca47034cef99118c7a7", "patch": "@@ -0,0 +1,22 @@\n+struct S(~str);\n+impl Drop for S {\n+    fn finalize(&self) { println(**self); }\n+}\n+\n+fn move_in_match() {\n+    match S(~\"foo\") {\n+        S(_s) => {}\n+        //~^ ERROR cannot move out of type `S`, which defines the `Drop` trait\n+    }\n+}\n+\n+fn move_in_let() {\n+    let S(_s) = S(~\"foo\");\n+    //~^ ERROR cannot move out of type `S`, which defines the `Drop` trait\n+}\n+\n+fn move_in_fn_arg(S(_s): S) {\n+    //~^ ERROR cannot move out of type `S`, which defines the `Drop` trait\n+}\n+\n+fn main() {}"}, {"sha": "f90fe924587dfe3b519acc34f6e51b058610a37c", "filename": "src/test/compile-fail/regions-ref-in-fn-arg.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1670a8cfb13fd384d9fd4ca47034cef99118c7a7/src%2Ftest%2Fcompile-fail%2Fregions-ref-in-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1670a8cfb13fd384d9fd4ca47034cef99118c7a7/src%2Ftest%2Fcompile-fail%2Fregions-ref-in-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-ref-in-fn-arg.rs?ref=1670a8cfb13fd384d9fd4ca47034cef99118c7a7", "patch": "@@ -0,0 +1,11 @@\n+fn arg_item(~ref x: ~int) -> &'static int {\n+    x //~^ ERROR borrowed value does not live long enough\n+}\n+\n+fn with<R>(f: &fn(~int) -> R) -> R { f(~3) }\n+\n+fn arg_closure() -> &'static int {\n+    with(|~ref x| x) //~ ERROR borrowed value does not live long enough\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "b08d3beae1bfa0d7103786c3a5cfe23c115a84ef", "filename": "src/test/run-pass/func-arg-incomplete-pattern.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1670a8cfb13fd384d9fd4ca47034cef99118c7a7/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1670a8cfb13fd384d9fd4ca47034cef99118c7a7/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs?ref=1670a8cfb13fd384d9fd4ca47034cef99118c7a7", "patch": "@@ -0,0 +1,20 @@\n+// Test that we do not leak when the arg pattern must drop part of the\n+// argument (in this case, the `y` field).\n+\n+struct Foo {\n+    x: ~uint,\n+    y: ~uint,\n+}\n+\n+fn foo(Foo {x, _}: Foo) -> *uint {\n+    let addr: *uint = &*x;\n+    addr\n+}\n+\n+fn main() {\n+    let obj = ~1;\n+    let objptr: *uint = &*obj;\n+    let f = Foo {x: obj, y: ~2};\n+    let xptr = foo(f);\n+    assert_eq!(objptr, xptr);\n+}\n\\ No newline at end of file"}, {"sha": "84c2b3acf35800f9ea7759b7cb8250ac68a09ac9", "filename": "src/test/run-pass/func-arg-ref-pattern.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1670a8cfb13fd384d9fd4ca47034cef99118c7a7/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1670a8cfb13fd384d9fd4ca47034cef99118c7a7/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs?ref=1670a8cfb13fd384d9fd4ca47034cef99118c7a7", "patch": "@@ -0,0 +1,24 @@\n+// exec-env:RUST_POISON_ON_FREE=1\n+\n+// Test argument patterns where we create refs to the inside of `~`\n+// boxes. Make sure that we don't free the box as we match the\n+// pattern.\n+\n+fn getaddr(~ref x: ~uint) -> *uint {\n+    let addr: *uint = &*x;\n+    addr\n+}\n+\n+fn checkval(~ref x: ~uint) -> uint {\n+    *x\n+}\n+\n+fn main() {\n+    let obj = ~1;\n+    let objptr: *uint = &*obj;\n+    let xptr = getaddr(obj);\n+    assert_eq!(objptr, xptr);\n+\n+    let obj = ~22;\n+    assert_eq!(checkval(obj), 22);\n+}"}, {"sha": "c2d60c8532993dc317da166a0010b66a27d1d883", "filename": "src/test/run-pass/func-arg-wild-pattern.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1670a8cfb13fd384d9fd4ca47034cef99118c7a7/src%2Ftest%2Frun-pass%2Ffunc-arg-wild-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1670a8cfb13fd384d9fd4ca47034cef99118c7a7/src%2Ftest%2Frun-pass%2Ffunc-arg-wild-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-wild-pattern.rs?ref=1670a8cfb13fd384d9fd4ca47034cef99118c7a7", "patch": "@@ -0,0 +1,10 @@\n+// Test that we can compile code that uses a `_` in function argument\n+// patterns.\n+\n+fn foo((x, _): (int, int)) -> int {\n+    x\n+}\n+\n+fn main() {\n+    assert_eq!(foo((22, 23)), 22);\n+}"}, {"sha": "7f3f9110b1c5cf3458f4d522cca339684a184ac6", "filename": "src/test/run-pass/let-destruct-ref.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1670a8cfb13fd384d9fd4ca47034cef99118c7a7/src%2Ftest%2Frun-pass%2Flet-destruct-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1670a8cfb13fd384d9fd4ca47034cef99118c7a7/src%2Ftest%2Frun-pass%2Flet-destruct-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-destruct-ref.rs?ref=1670a8cfb13fd384d9fd4ca47034cef99118c7a7", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let x = ~\"hello\";\n+    let ref y = x;\n+    assert_eq!(x.slice(0, x.len()), y.slice(0, y.len()));\n+}"}, {"sha": "ec65f36dc06f5f3871705c71da040a843b35a569", "filename": "src/test/run-pass/match-drop-strs-issue-4541.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1670a8cfb13fd384d9fd4ca47034cef99118c7a7/src%2Ftest%2Frun-pass%2Fmatch-drop-strs-issue-4541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1670a8cfb13fd384d9fd4ca47034cef99118c7a7/src%2Ftest%2Frun-pass%2Fmatch-drop-strs-issue-4541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-drop-strs-issue-4541.rs?ref=1670a8cfb13fd384d9fd4ca47034cef99118c7a7", "patch": "@@ -0,0 +1,26 @@\n+// Tests a tricky scenario involving string matching,\n+// copying, and moving to ensure that we don't segfault\n+// or double-free, as we were wont to do in the past.\n+\n+use std::io;\n+\n+fn parse_args() -> ~str {\n+    let args = std::os::args();\n+    let mut n = 0;\n+\n+    while n < args.len() {\n+        match copy args[n] {\n+            ~\"-v\" => (),\n+            s => {\n+                return s;\n+            }\n+        }\n+        n += 1;\n+    }\n+\n+    return ~\"\"\n+}\n+\n+fn main() {\n+    io::println(parse_args());\n+}"}]}