{"sha": "76ff5ec88624ea61ae49b728ce4d382df8fb7fe3", "node_id": "C_kwDOAAsO6NoAKDc2ZmY1ZWM4ODYyNGVhNjFhZTQ5YjcyOGNlNGQzODJkZjhmYjdmZTM", "commit": {"author": {"name": "Ramon de C Valle", "email": "rcvalle@users.noreply.github.com", "date": "2023-05-24T15:44:52Z"}, "committer": {"name": "Ramon de C Valle", "email": "rcvalle@users.noreply.github.com", "date": "2023-06-01T23:22:54Z"}, "message": "CFI: Fix cfi with async: transform_ty: unexpected GeneratorWitness(Binde\n\nFixes #111184 by encoding ty::Generator parent substs only.", "tree": {"sha": "ff6016743136bc6f863cdead3655ecd8349a8504", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff6016743136bc6f863cdead3655ecd8349a8504"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76ff5ec88624ea61ae49b728ce4d382df8fb7fe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76ff5ec88624ea61ae49b728ce4d382df8fb7fe3", "html_url": "https://github.com/rust-lang/rust/commit/76ff5ec88624ea61ae49b728ce4d382df8fb7fe3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76ff5ec88624ea61ae49b728ce4d382df8fb7fe3/comments", "author": {"login": "rcvalle", "id": 3988004, "node_id": "MDQ6VXNlcjM5ODgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3988004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcvalle", "html_url": "https://github.com/rcvalle", "followers_url": "https://api.github.com/users/rcvalle/followers", "following_url": "https://api.github.com/users/rcvalle/following{/other_user}", "gists_url": "https://api.github.com/users/rcvalle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcvalle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcvalle/subscriptions", "organizations_url": "https://api.github.com/users/rcvalle/orgs", "repos_url": "https://api.github.com/users/rcvalle/repos", "events_url": "https://api.github.com/users/rcvalle/events{/privacy}", "received_events_url": "https://api.github.com/users/rcvalle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rcvalle", "id": 3988004, "node_id": "MDQ6VXNlcjM5ODgwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3988004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcvalle", "html_url": "https://github.com/rcvalle", "followers_url": "https://api.github.com/users/rcvalle/followers", "following_url": "https://api.github.com/users/rcvalle/following{/other_user}", "gists_url": "https://api.github.com/users/rcvalle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcvalle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcvalle/subscriptions", "organizations_url": "https://api.github.com/users/rcvalle/orgs", "repos_url": "https://api.github.com/users/rcvalle/repos", "events_url": "https://api.github.com/users/rcvalle/events{/privacy}", "received_events_url": "https://api.github.com/users/rcvalle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5699874dc07d2dfb262d007293853f73c171f7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5699874dc07d2dfb262d007293853f73c171f7e", "html_url": "https://github.com/rust-lang/rust/commit/d5699874dc07d2dfb262d007293853f73c171f7e"}], "stats": {"total": 46, "additions": 41, "deletions": 5}, "files": [{"sha": "da3dafedd9b247a3fbbc5a5cc25a7e700363e106", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/76ff5ec88624ea61ae49b728ce4d382df8fb7fe3/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ff5ec88624ea61ae49b728ce4d382df8fb7fe3/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=76ff5ec88624ea61ae49b728ce4d382df8fb7fe3", "patch": "@@ -608,9 +608,7 @@ fn encode_ty<'tcx>(\n         }\n \n         // Function types\n-        ty::FnDef(def_id, substs)\n-        | ty::Closure(def_id, substs)\n-        | ty::Generator(def_id, substs, ..) => {\n+        ty::FnDef(def_id, substs) | ty::Closure(def_id, substs) => {\n             // u<length><name>[I<element-type1..element-typeN>E], where <element-type> is <subst>,\n             // as vendor extended type.\n             let mut s = String::new();\n@@ -621,6 +619,23 @@ fn encode_ty<'tcx>(\n             typeid.push_str(&s);\n         }\n \n+        ty::Generator(def_id, substs, ..) => {\n+            // u<length><name>[I<element-type1..element-typeN>E], where <element-type> is <subst>,\n+            // as vendor extended type.\n+            let mut s = String::new();\n+            let name = encode_ty_name(tcx, *def_id);\n+            let _ = write!(s, \"u{}{}\", name.len(), &name);\n+            // Encode parent substs only\n+            s.push_str(&encode_substs(\n+                tcx,\n+                tcx.mk_substs(substs.as_generator().parent_substs()),\n+                dict,\n+                options,\n+            ));\n+            compress(dict, DictKey::Ty(ty, TyQ::None), &mut s);\n+            typeid.push_str(&s);\n+        }\n+\n         // Pointer types\n         ty::Ref(region, ty0, ..) => {\n             // [U3mut]u3refI<element-type>E as vendor extended type qualifier and type\n@@ -739,7 +754,12 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n     let mut ty = ty;\n \n     match ty.kind() {\n-        ty::Float(..) | ty::Char | ty::Str | ty::Never | ty::Foreign(..) => {}\n+        ty::Float(..)\n+        | ty::Char\n+        | ty::Str\n+        | ty::Never\n+        | ty::Foreign(..)\n+        | ty::GeneratorWitness(..) => {}\n \n         ty::Bool => {\n             if options.contains(EncodeTyOptions::NORMALIZE_INTEGERS) {\n@@ -922,7 +942,6 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n \n         ty::Bound(..)\n         | ty::Error(..)\n-        | ty::GeneratorWitness(..)\n         | ty::GeneratorWitnessMIR(..)\n         | ty::Infer(..)\n         | ty::Alias(..)"}, {"sha": "8f4118057cec4dd931736923c0830e280825fd2a", "filename": "tests/ui/sanitize/issue-111184-generator-witness.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/76ff5ec88624ea61ae49b728ce4d382df8fb7fe3/tests%2Fui%2Fsanitize%2Fissue-111184-generator-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ff5ec88624ea61ae49b728ce4d382df8fb7fe3/tests%2Fui%2Fsanitize%2Fissue-111184-generator-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsanitize%2Fissue-111184-generator-witness.rs?ref=76ff5ec88624ea61ae49b728ce4d382df8fb7fe3", "patch": "@@ -0,0 +1,17 @@\n+// Regression test for issue 111184, where ty::GeneratorWitness were not expected to occur in\n+// encode_ty and caused the compiler to ICE.\n+//\n+// needs-sanitizer-cfi\n+// compile-flags: -Clto -Ctarget-feature=-crt-static -Zsanitizer=cfi --edition=2021\n+// no-prefer-dynamic\n+// only-x86_64-unknown-linux-gnu\n+// run-pass\n+\n+use std::future::Future;\n+\n+async fn foo() {}\n+fn bar<T>(_: impl Future<Output = T>) {}\n+\n+fn main() {\n+    bar(foo());\n+}"}]}