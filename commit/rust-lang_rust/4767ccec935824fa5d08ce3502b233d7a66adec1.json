{"sha": "4767ccec935824fa5d08ce3502b233d7a66adec1", "node_id": "C_kwDOAAsO6NoAKDQ3NjdjY2VjOTM1ODI0ZmE1ZDA4Y2UzNTAyYjIzM2Q3YTY2YWRlYzE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-20T16:29:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-20T16:29:16Z"}, "message": "Auto merge of #95142 - bjorn3:sync_cg_clif-2022-03-20, r=bjorn3\n\nSync rustc_codegen_cranelift\n\nr? `@ghost`\n\n`@rustbot` label +A-codegen +A-cranelift +T-compiler", "tree": {"sha": "360aa953213c821101cb156a7deb202a40c379ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/360aa953213c821101cb156a7deb202a40c379ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4767ccec935824fa5d08ce3502b233d7a66adec1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4767ccec935824fa5d08ce3502b233d7a66adec1", "html_url": "https://github.com/rust-lang/rust/commit/4767ccec935824fa5d08ce3502b233d7a66adec1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4767ccec935824fa5d08ce3502b233d7a66adec1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bd53718e2537d95d8c092609618c2dcd6f05127", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bd53718e2537d95d8c092609618c2dcd6f05127", "html_url": "https://github.com/rust-lang/rust/commit/9bd53718e2537d95d8c092609618c2dcd6f05127"}, {"sha": "ce7f5ecad70175acb0d34860978adafb195f68c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce7f5ecad70175acb0d34860978adafb195f68c5", "html_url": "https://github.com/rust-lang/rust/commit/ce7f5ecad70175acb0d34860978adafb195f68c5"}], "stats": {"total": 960, "additions": 454, "deletions": 506}, "files": [{"sha": "30e9627c48d749f17324ba2dab559af13ba4e956", "filename": "compiler/rustc_codegen_cranelift/Cargo.lock", "status": "modified", "additions": 37, "deletions": 30, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.lock?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -4,9 +4,9 @@ version = 3\n \n [[package]]\n name = \"anyhow\"\n-version = \"1.0.53\"\n+version = \"1.0.56\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"94a45b455c14666b85fc40a019e8ab9eb75e3a124e05494f5397122bc9eb06e0\"\n+checksum = \"4361135be9122e0870de935d7c439aef945b9f9ddd4199a553b5270b49c82a27\"\n \n [[package]]\n name = \"ar\"\n@@ -15,9 +15,9 @@ source = \"git+https://github.com/bjorn3/rust-ar.git?branch=do_not_remove_cg_clif\n \n [[package]]\n name = \"autocfg\"\n-version = \"1.0.1\"\n+version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a\"\n+checksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n \n [[package]]\n name = \"bitflags\"\n@@ -33,18 +33,18 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"cranelift-bforest\"\n-version = \"0.81.0\"\n+version = \"0.82.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"71447555acc6c875c52c407d572fc1327dc5c34cba72b4b2e7ad048aa4e4fd19\"\n+checksum = \"d16922317bd7dd104d509a373887822caa0242fc1def00de66abb538db221db4\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n-version = \"0.81.0\"\n+version = \"0.82.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ec9a10261891a7a919b0d4f6aa73582e88441d9a8f6173c88efbe4a5a362ea67\"\n+checksum = \"8b80bf40380256307b68a3dcbe1b91cac92a533e212b5b635abc3e4525781a0a\"\n dependencies = [\n  \"cranelift-bforest\",\n  \"cranelift-codegen-meta\",\n@@ -59,30 +59,30 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-codegen-meta\"\n-version = \"0.81.0\"\n+version = \"0.82.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"815755d76fcbcf6e17ab888545b28ab775f917cb12ce0797e60cd41a2288692c\"\n+checksum = \"703d0ed7d3bc6c7a814ca12858175bf4e93167a3584127858c686e4b5dd6e432\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-shared\"\n-version = \"0.81.0\"\n+version = \"0.82.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"23ea92f2a67335a2e4d3c9c65624c3b14ae287d595b0650822c41824febab66b\"\n+checksum = \"80f52311e1c90de12dcf8c4b9999c6ebfd1ed360373e88c357160936844511f6\"\n \n [[package]]\n name = \"cranelift-entity\"\n-version = \"0.81.0\"\n+version = \"0.82.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bd25847875e388c500ad3624b4d2e14067955c93185194a7222246a25b91c975\"\n+checksum = \"66bc82ef522c1f643baf7d4d40b7c52643ee4549d8960b0e6a047daacb83f897\"\n \n [[package]]\n name = \"cranelift-frontend\"\n-version = \"0.81.0\"\n+version = \"0.82.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"308bcfb7eb47bdf5ff6e1ace262af4ed39ec19f204c751fffb037e0e82a0c8bf\"\n+checksum = \"3cc35e4251864b17515845ba47447bca88fec9ca1a4186b19fe42526e36140e8\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -92,9 +92,9 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-jit\"\n-version = \"0.81.0\"\n+version = \"0.82.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f560b3a314b8d15facf411e5d29b917c3e787a2bbc3fcdc5183bc0c5b7d4fe01\"\n+checksum = \"93c66d594ad3bfe4e58b1fbd8d17877a7c6564a5f2d6f78cbbf4b0182af1927f\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -110,19 +110,19 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-module\"\n-version = \"0.81.0\"\n+version = \"0.82.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3a57aba9e603d694d1430ff38bd914bae23ef9c2e44b25a65e318905807e654c\"\n+checksum = \"bf356697c40232aa09e1e3fb8a350ee894e849ccecc4eac56ff0570a4575c325\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n ]\n \n [[package]]\n name = \"cranelift-native\"\n-version = \"0.81.0\"\n+version = \"0.82.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"12cdc799aee673be2317e631d4569a1ba0a7e77a07a7ce45557086d2e02e9514\"\n+checksum = \"b882b2251c9845d509d92aebfdb6c8bb3b3b48e207ac951f21fbd20cfe7f90b3\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"libc\",\n@@ -131,9 +131,9 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-object\"\n-version = \"0.81.0\"\n+version = \"0.82.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"502a7333836052fcdf4425d7f7a21264d99f862d32b9c3a0e47cd920487a9b60\"\n+checksum = \"2d3f1a88e654e567d2591169239ed157ab290811a729a6468f53999c01001263\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -145,9 +145,9 @@ dependencies = [\n \n [[package]]\n name = \"crc32fast\"\n-version = \"1.3.1\"\n+version = \"1.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a2209c310e29876f7f0b2721e7e26b84aff178aa3da5d091f9bfbf47669e60e3\"\n+checksum = \"b540bd8bc810d3885c6ea91e2018302f68baba2129ab3e88f32389ee9370880d\"\n dependencies = [\n  \"cfg-if\",\n ]\n@@ -179,9 +179,9 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.116\"\n+version = \"0.2.119\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"565dbd88872dbe4cc8a46e527f26483c1d1f7afa6b884a3bd6cd893d4f98da74\"\n+checksum = \"1bf2e165bb3457c8e098ea76f3e3bc9db55f87aa90d52d0e6be741470916aaa4\"\n \n [[package]]\n name = \"libloading\"\n@@ -228,6 +228,12 @@ dependencies = [\n  \"memchr\",\n ]\n \n+[[package]]\n+name = \"once_cell\"\n+version = \"1.10.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"87f3e037eac156d1775da914196f0f37741a274155e34a0b7e427c35d2a2ecb9\"\n+\n [[package]]\n name = \"regalloc\"\n version = \"0.0.34\"\n@@ -272,6 +278,7 @@ dependencies = [\n  \"indexmap\",\n  \"libloading\",\n  \"object\",\n+ \"once_cell\",\n  \"smallvec\",\n  \"target-lexicon\",\n ]\n@@ -284,9 +291,9 @@ checksum = \"f2dd574626839106c320a323308629dcb1acfc96e32a8cba364ddc61ac23ee83\"\n \n [[package]]\n name = \"target-lexicon\"\n-version = \"0.12.2\"\n+version = \"0.12.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d9bffcddbc2458fa3e6058414599e3c838a022abae82e5c67b4f7f80298d5bff\"\n+checksum = \"d7fa7e55043acb85fca6b3c01485a2eeb6b69c5d21002e273c79e465f43b7ac1\"\n \n [[package]]\n name = \"winapi\""}, {"sha": "70c03da3f29fa9808169e415ae6417cb99e3eefd", "filename": "compiler/rustc_codegen_cranelift/Cargo.toml", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.toml?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -8,19 +8,20 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n # These have to be in sync with each other\n-cranelift-codegen = { version = \"0.81.0\", features = [\"unwind\", \"all-arch\"] }\n-cranelift-frontend = \"0.81.0\"\n-cranelift-module = \"0.81.0\"\n-cranelift-native = \"0.81.0\"\n-cranelift-jit = { version = \"0.81.0\", optional = true }\n-cranelift-object = \"0.81.0\"\n+cranelift-codegen = { version = \"0.82.1\", features = [\"unwind\", \"all-arch\"] }\n+cranelift-frontend = \"0.82.1\"\n+cranelift-module = \"0.82.1\"\n+cranelift-native = \"0.82.1\"\n+cranelift-jit = { version = \"0.82.1\", optional = true }\n+cranelift-object = \"0.82.1\"\n target-lexicon = \"0.12.0\"\n gimli = { version = \"0.26.0\", default-features = false, features = [\"write\"]}\n object = { version = \"0.27.0\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"archive\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n \n ar = { git = \"https://github.com/bjorn3/rust-ar.git\", branch = \"do_not_remove_cg_clif_ranlib\" }\n indexmap = \"1.8.0\"\n libloading = { version = \"0.6.0\", optional = true }\n+once_cell = \"1.10.0\"\n smallvec = \"1.6.1\"\n \n [patch.crates-io]"}, {"sha": "f584f54e106ac060900e01924f65d5e0a17804df", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/Cargo.lock", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -56,7 +56,9 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.70\"\n+version = \"0.1.71\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"163437f05ca8f29d7e9128ea728dedf5eb620e445fbca273641d3a3050305f23\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n@@ -132,9 +134,9 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.119\"\n+version = \"0.2.121\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1bf2e165bb3457c8e098ea76f3e3bc9db55f87aa90d52d0e6be741470916aaa4\"\n+checksum = \"efaa7b300f3b5fe8eb6bf21ce3895e1751d9665086af2d64b42f19701015ff4f\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]"}, {"sha": "d0e5fc4a3b9f12e19481adda1c2d63735d073556", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/Cargo.toml", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.toml?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -14,7 +14,6 @@ compiler_builtins = { version = \"0.1.39\", default-features = false, features = [\n rustc-std-workspace-core = { path = \"./sysroot_src/library/rustc-std-workspace-core\" }\n rustc-std-workspace-alloc = { path = \"./sysroot_src/library/rustc-std-workspace-alloc\" }\n rustc-std-workspace-std = { path = \"./sysroot_src/library/rustc-std-workspace-std\" }\n-compiler_builtins = { path = \"./compiler-builtins\" }\n \n [profile.dev]\n lto = \"off\"\n@@ -23,3 +22,14 @@ lto = \"off\"\n debug = true\n incremental = true\n lto = \"off\"\n+\n+# Mandatory for correctly compiling compiler-builtins\n+[profile.dev.package.compiler_builtins]\n+debug-assertions = false\n+overflow-checks = false\n+codegen-units = 10000\n+\n+[profile.release.package.compiler_builtins]\n+debug-assertions = false\n+overflow-checks = false\n+codegen-units = 10000"}, {"sha": "8bb00352d3fe3a83df4f9e4bd7936c7296199493", "filename": "compiler/rustc_codegen_cranelift/build_system/prepare.rs", "status": "modified", "additions": 65, "deletions": 27, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fprepare.rs?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -14,29 +14,33 @@ pub(crate) fn prepare() {\n     eprintln!(\"[INSTALL] hyperfine\");\n     Command::new(\"cargo\").arg(\"install\").arg(\"hyperfine\").spawn().unwrap().wait().unwrap();\n \n-    clone_repo(\n+    clone_repo_shallow_github(\n+        \"rand\",\n+        \"rust-random\",\n         \"rand\",\n-        \"https://github.com/rust-random/rand.git\",\n         \"0f933f9c7176e53b2a3c7952ded484e1783f0bf1\",\n     );\n     apply_patches(\"rand\", Path::new(\"rand\"));\n \n-    clone_repo(\n+    clone_repo_shallow_github(\n+        \"regex\",\n+        \"rust-lang\",\n         \"regex\",\n-        \"https://github.com/rust-lang/regex.git\",\n         \"341f207c1071f7290e3f228c710817c280c8dca1\",\n     );\n \n-    clone_repo(\n+    clone_repo_shallow_github(\n+        \"portable-simd\",\n+        \"rust-lang\",\n         \"portable-simd\",\n-        \"https://github.com/rust-lang/portable-simd\",\n         \"b8d6b6844602f80af79cd96401339ec594d472d8\",\n     );\n     apply_patches(\"portable-simd\", Path::new(\"portable-simd\"));\n \n-    clone_repo(\n+    clone_repo_shallow_github(\n+        \"simple-raytracer\",\n+        \"ebobby\",\n         \"simple-raytracer\",\n-        \"https://github.com/ebobby/simple-raytracer\",\n         \"804a7a21b9e673a482797aa289a18ed480e4d813\",\n     );\n \n@@ -74,29 +78,12 @@ fn prepare_sysroot() {\n     git_init_cmd.arg(\"init\").arg(\"-q\").current_dir(&sysroot_src);\n     spawn_and_wait(git_init_cmd);\n \n-    let mut git_add_cmd = Command::new(\"git\");\n-    git_add_cmd.arg(\"add\").arg(\".\").current_dir(&sysroot_src);\n-    spawn_and_wait(git_add_cmd);\n-\n-    let mut git_commit_cmd = Command::new(\"git\");\n-    git_commit_cmd\n-        .arg(\"commit\")\n-        .arg(\"-m\")\n-        .arg(\"Initial commit\")\n-        .arg(\"-q\")\n-        .current_dir(&sysroot_src);\n-    spawn_and_wait(git_commit_cmd);\n+    init_git_repo(&sysroot_src);\n \n     apply_patches(\"sysroot\", &sysroot_src);\n-\n-    clone_repo(\n-        \"build_sysroot/compiler-builtins\",\n-        \"https://github.com/rust-lang/compiler-builtins.git\",\n-        \"0.1.70\",\n-    );\n-    apply_patches(\"compiler-builtins\", Path::new(\"build_sysroot/compiler-builtins\"));\n }\n \n+#[allow(dead_code)]\n fn clone_repo(target_dir: &str, repo: &str, rev: &str) {\n     eprintln!(\"[CLONE] {}\", repo);\n     // Ignore exit code as the repo may already have been checked out\n@@ -111,6 +98,57 @@ fn clone_repo(target_dir: &str, repo: &str, rev: &str) {\n     spawn_and_wait(checkout_cmd);\n }\n \n+fn clone_repo_shallow_github(target_dir: &str, username: &str, repo: &str, rev: &str) {\n+    if cfg!(windows) {\n+        // Older windows doesn't have tar or curl by default. Fall back to using git.\n+        clone_repo(target_dir, &format!(\"https://github.com/{}/{}.git\", username, repo), rev);\n+        return;\n+    }\n+\n+    let archive_url = format!(\"https://github.com/{}/{}/archive/{}.tar.gz\", username, repo, rev);\n+    let archive_file = format!(\"{}.tar.gz\", rev);\n+    let archive_dir = format!(\"{}-{}\", repo, rev);\n+\n+    eprintln!(\"[DOWNLOAD] {}/{} from {}\", username, repo, archive_url);\n+\n+    // Remove previous results if they exists\n+    let _ = std::fs::remove_file(&archive_file);\n+    let _ = std::fs::remove_dir_all(&archive_dir);\n+    let _ = std::fs::remove_dir_all(target_dir);\n+\n+    // Download zip archive\n+    let mut download_cmd = Command::new(\"curl\");\n+    download_cmd.arg(\"--location\").arg(\"--output\").arg(&archive_file).arg(archive_url);\n+    spawn_and_wait(download_cmd);\n+\n+    // Unpack tar archive\n+    let mut unpack_cmd = Command::new(\"tar\");\n+    unpack_cmd.arg(\"xf\").arg(&archive_file);\n+    spawn_and_wait(unpack_cmd);\n+\n+    // Rename unpacked dir to the expected name\n+    std::fs::rename(archive_dir, target_dir).unwrap();\n+\n+    init_git_repo(Path::new(target_dir));\n+\n+    // Cleanup\n+    std::fs::remove_file(archive_file).unwrap();\n+}\n+\n+fn init_git_repo(repo_dir: &Path) {\n+    let mut git_init_cmd = Command::new(\"git\");\n+    git_init_cmd.arg(\"init\").arg(\"-q\").current_dir(repo_dir);\n+    spawn_and_wait(git_init_cmd);\n+\n+    let mut git_add_cmd = Command::new(\"git\");\n+    git_add_cmd.arg(\"add\").arg(\".\").current_dir(repo_dir);\n+    spawn_and_wait(git_add_cmd);\n+\n+    let mut git_commit_cmd = Command::new(\"git\");\n+    git_commit_cmd.arg(\"commit\").arg(\"-m\").arg(\"Initial commit\").arg(\"-q\").current_dir(repo_dir);\n+    spawn_and_wait(git_commit_cmd);\n+}\n+\n fn get_patches(crate_name: &str) -> Vec<OsString> {\n     let mut patches: Vec<_> = fs::read_dir(\"patches\")\n         .unwrap()"}, {"sha": "cf95c89bc3156b24b36d2bc0728a90f6e36fbd89", "filename": "compiler/rustc_codegen_cranelift/example/alloc_system.rs", "status": "modified", "additions": 30, "deletions": 112, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_system.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_system.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_system.rs?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -8,33 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n #![no_std]\n-#![feature(allocator_api, rustc_private)]\n-#![cfg_attr(any(unix, target_os = \"redox\"), feature(libc))]\n-\n-// The minimum alignment guaranteed by the architecture. This value is used to\n-// add fast paths for low alignment values.\n-#[cfg(all(any(target_arch = \"x86\",\n-              target_arch = \"arm\",\n-              target_arch = \"mips\",\n-              target_arch = \"powerpc\",\n-              target_arch = \"powerpc64\")))]\n-const MIN_ALIGN: usize = 8;\n-#[cfg(all(any(target_arch = \"x86_64\",\n-              target_arch = \"aarch64\",\n-              target_arch = \"mips64\",\n-              target_arch = \"s390x\",\n-              target_arch = \"sparc64\")))]\n-const MIN_ALIGN: usize = 16;\n \n pub struct System;\n+\n #[cfg(any(windows, unix, target_os = \"redox\"))]\n mod realloc_fallback {\n     use core::alloc::{GlobalAlloc, Layout};\n     use core::cmp;\n     use core::ptr;\n     impl super::System {\n-        pub(crate) unsafe fn realloc_fallback(&self, ptr: *mut u8, old_layout: Layout,\n-                                              new_size: usize) -> *mut u8 {\n+        pub(crate) unsafe fn realloc_fallback(\n+            &self,\n+            ptr: *mut u8,\n+            old_layout: Layout,\n+            new_size: usize,\n+        ) -> *mut u8 {\n             // Docs for GlobalAlloc::realloc require this to be valid:\n             let new_layout = Layout::from_size_align_unchecked(new_size, old_layout.align());\n             let new_ptr = GlobalAlloc::alloc(self, new_layout);\n@@ -49,97 +37,47 @@ mod realloc_fallback {\n }\n #[cfg(any(unix, target_os = \"redox\"))]\n mod platform {\n-    extern crate libc;\n+    use core::alloc::{GlobalAlloc, Layout};\n+    use core::ffi::c_void;\n     use core::ptr;\n-    use MIN_ALIGN;\n     use System;\n-    use core::alloc::{GlobalAlloc, Layout};\n+    extern \"C\" {\n+        fn posix_memalign(memptr: *mut *mut c_void, align: usize, size: usize) -> i32;\n+        fn free(p: *mut c_void);\n+    }\n     unsafe impl GlobalAlloc for System {\n         #[inline]\n         unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n-            if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {\n-                libc::malloc(layout.size()) as *mut u8\n-            } else {\n-                #[cfg(target_os = \"macos\")]\n-                {\n-                    if layout.align() > (1 << 31) {\n-                        return ptr::null_mut()\n-                    }\n-                }\n-                aligned_malloc(&layout)\n-            }\n+            aligned_malloc(&layout)\n         }\n         #[inline]\n         unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n-            if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {\n-                libc::calloc(layout.size(), 1) as *mut u8\n-            } else {\n-                let ptr = self.alloc(layout.clone());\n-                if !ptr.is_null() {\n-                    ptr::write_bytes(ptr, 0, layout.size());\n-                }\n-                ptr\n+            let ptr = self.alloc(layout.clone());\n+            if !ptr.is_null() {\n+                ptr::write_bytes(ptr, 0, layout.size());\n             }\n+            ptr\n         }\n         #[inline]\n         unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {\n-            libc::free(ptr as *mut libc::c_void)\n+            free(ptr as *mut c_void)\n         }\n         #[inline]\n         unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n-            if layout.align() <= MIN_ALIGN && layout.align() <= new_size {\n-                libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8\n-            } else {\n-                self.realloc_fallback(ptr, layout, new_size)\n-            }\n+            self.realloc_fallback(ptr, layout, new_size)\n         }\n     }\n-    #[cfg(any(target_os = \"android\",\n-              target_os = \"hermit\",\n-              target_os = \"redox\",\n-              target_os = \"solaris\"))]\n-    #[inline]\n-    unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {\n-        // On android we currently target API level 9 which unfortunately\n-        // doesn't have the `posix_memalign` API used below. Instead we use\n-        // `memalign`, but this unfortunately has the property on some systems\n-        // where the memory returned cannot be deallocated by `free`!\n-        //\n-        // Upon closer inspection, however, this appears to work just fine with\n-        // Android, so for this platform we should be fine to call `memalign`\n-        // (which is present in API level 9). Some helpful references could\n-        // possibly be chromium using memalign [1], attempts at documenting that\n-        // memalign + free is ok [2] [3], or the current source of chromium\n-        // which still uses memalign on android [4].\n-        //\n-        // [1]: https://codereview.chromium.org/10796020/\n-        // [2]: https://code.google.com/p/android/issues/detail?id=35391\n-        // [3]: https://bugs.chromium.org/p/chromium/issues/detail?id=138579\n-        // [4]: https://chromium.googlesource.com/chromium/src/base/+/master/\n-        //                                       /memory/aligned_memory.cc\n-        libc::memalign(layout.align(), layout.size()) as *mut u8\n-    }\n-    #[cfg(not(any(target_os = \"android\",\n-                  target_os = \"hermit\",\n-                  target_os = \"redox\",\n-                  target_os = \"solaris\")))]\n-    #[inline]\n     unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {\n         let mut out = ptr::null_mut();\n-        let ret = libc::posix_memalign(&mut out, layout.align(), layout.size());\n-        if ret != 0 {\n-            ptr::null_mut()\n-        } else {\n-            out as *mut u8\n-        }\n+        let ret = posix_memalign(&mut out, layout.align(), layout.size());\n+        if ret != 0 { ptr::null_mut() } else { out as *mut u8 }\n     }\n }\n #[cfg(windows)]\n #[allow(nonstandard_style)]\n mod platform {\n-    use MIN_ALIGN;\n-    use System;\n     use core::alloc::{GlobalAlloc, Layout};\n+    use System;\n     type LPVOID = *mut u8;\n     type HANDLE = LPVOID;\n     type SIZE_T = usize;\n@@ -165,18 +103,9 @@ mod platform {\n     }\n     #[inline]\n     unsafe fn allocate_with_flags(layout: Layout, flags: DWORD) -> *mut u8 {\n-        let ptr = if layout.align() <= MIN_ALIGN {\n-            HeapAlloc(GetProcessHeap(), flags, layout.size())\n-        } else {\n-            let size = layout.size() + layout.align();\n-            let ptr = HeapAlloc(GetProcessHeap(), flags, size);\n-            if ptr.is_null() {\n-                ptr\n-            } else {\n-                align_ptr(ptr, layout.align())\n-            }\n-        };\n-        ptr as *mut u8\n+        let size = layout.size() + layout.align();\n+        let ptr = HeapAlloc(GetProcessHeap(), flags, size);\n+        (if ptr.is_null() { ptr } else { align_ptr(ptr, layout.align()) }) as *mut u8\n     }\n     unsafe impl GlobalAlloc for System {\n         #[inline]\n@@ -189,24 +118,13 @@ mod platform {\n         }\n         #[inline]\n         unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {\n-            if layout.align() <= MIN_ALIGN {\n-                let err = HeapFree(GetProcessHeap(), 0, ptr as LPVOID);\n-                debug_assert!(err != 0, \"Failed to free heap memory: {}\",\n-                              GetLastError());\n-            } else {\n-                let header = get_header(ptr);\n-                let err = HeapFree(GetProcessHeap(), 0, header.0 as LPVOID);\n-                debug_assert!(err != 0, \"Failed to free heap memory: {}\",\n-                              GetLastError());\n-            }\n+            let header = get_header(ptr);\n+            let err = HeapFree(GetProcessHeap(), 0, header.0 as LPVOID);\n+            debug_assert!(err != 0, \"Failed to free heap memory: {}\", GetLastError());\n         }\n         #[inline]\n         unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n-            if layout.align() <= MIN_ALIGN {\n-                HeapReAlloc(GetProcessHeap(), 0, ptr as LPVOID, new_size) as *mut u8\n-            } else {\n-                self.realloc_fallback(ptr, layout, new_size)\n-            }\n+            self.realloc_fallback(ptr, layout, new_size)\n         }\n     }\n }"}, {"sha": "e9876837dd81a184b0e525328eaca8172119fac2", "filename": "compiler/rustc_codegen_cranelift/example/arbitrary_self_types_pointers_and_wrappers.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fexample%2Farbitrary_self_types_pointers_and_wrappers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fexample%2Farbitrary_self_types_pointers_and_wrappers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Farbitrary_self_types_pointers_and_wrappers.rs?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -1,7 +1,6 @@\n // Adapted from rustc run-pass test suite\n \n #![feature(arbitrary_self_types, unsize, coerce_unsized, dispatch_from_dyn)]\n-#![feature(rustc_attrs)]\n \n use std::{\n     ops::{Deref, CoerceUnsized, DispatchFromDyn},"}, {"sha": "7efc8dc785a1912476b3d6e93e9f3f5896d6e39c", "filename": "compiler/rustc_codegen_cranelift/example/mini_core.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -1,7 +1,14 @@\n #![feature(\n-    no_core, lang_items, intrinsics, unboxed_closures, type_ascription, extern_types,\n-    untagged_unions, decl_macro, rustc_attrs, transparent_unions, auto_traits,\n-    thread_local,\n+    no_core,\n+    lang_items,\n+    intrinsics,\n+    unboxed_closures,\n+    extern_types,\n+    decl_macro,\n+    rustc_attrs,\n+    transparent_unions,\n+    auto_traits,\n+    thread_local\n )]\n #![no_core]\n #![allow(dead_code)]\n@@ -55,6 +62,7 @@ unsafe impl Copy for i16 {}\n unsafe impl Copy for i32 {}\n unsafe impl Copy for isize {}\n unsafe impl Copy for f32 {}\n+unsafe impl Copy for f64 {}\n unsafe impl Copy for char {}\n unsafe impl<'a, T: ?Sized> Copy for &'a T {}\n unsafe impl<T: ?Sized> Copy for *const T {}\n@@ -483,8 +491,17 @@ pub trait Deref {\n     fn deref(&self) -> &Self::Target;\n }\n \n+pub struct Unique<T: ?Sized> {\n+    pub pointer: *const T,\n+    pub _marker: PhantomData<T>,\n+}\n+\n+impl<T: ?Sized, U: ?Sized> CoerceUnsized<Unique<U>> for Unique<T> where T: Unsize<U> {}\n+\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Unique<U>> for Unique<T> where T: Unsize<U> {}\n+\n #[lang = \"owned_box\"]\n-pub struct Box<T: ?Sized>(*mut T);\n+pub struct Box<T: ?Sized>(Unique<T>, ());\n \n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Box<U>> for Box<T> {}\n \n@@ -508,8 +525,8 @@ unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n }\n \n #[lang = \"box_free\"]\n-unsafe fn box_free<T: ?Sized>(ptr: *mut T) {\n-    libc::free(ptr as *mut u8);\n+unsafe fn box_free<T: ?Sized>(ptr: Unique<T>, alloc: ()) {\n+    libc::free(ptr.pointer as *mut u8);\n }\n \n #[lang = \"drop\"]"}, {"sha": "c4730581335ecbffa29d3c58fc1cfc187b052b86", "filename": "compiler/rustc_codegen_cranelift/example/mini_core_hello_world.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -7,10 +7,6 @@ extern crate mini_core;\n use mini_core::*;\n use mini_core::libc::*;\n \n-unsafe extern \"C\" fn my_puts(s: *const i8) {\n-    puts(s);\n-}\n-\n macro_rules! assert {\n     ($e:expr) => {\n         if !$e {\n@@ -105,12 +101,6 @@ fn start<T: Termination + 'static>(\n static mut NUM: u8 = 6 * 7;\n static NUM_REF: &'static u8 = unsafe { &NUM };\n \n-struct Unique<T: ?Sized> {\n-    pointer: *const T,\n-    _marker: PhantomData<T>,\n-}\n-\n-impl<T: ?Sized, U: ?Sized> CoerceUnsized<Unique<U>> for Unique<T> where T: Unsize<U> {}\n \n unsafe fn zeroed<T>() -> T {\n     let mut uninit = MaybeUninit { uninit: () };"}, {"sha": "460e42d1d8cc3bb1eb5fe70b029f14d9fe8437c1", "filename": "compiler/rustc_codegen_cranelift/patches/0001-compiler-builtins-Disable-128bit-atomic-operations.patch", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9bd53718e2537d95d8c092609618c2dcd6f05127/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0001-compiler-builtins-Disable-128bit-atomic-operations.patch", "raw_url": "https://github.com/rust-lang/rust/raw/9bd53718e2537d95d8c092609618c2dcd6f05127/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0001-compiler-builtins-Disable-128bit-atomic-operations.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0001-compiler-builtins-Disable-128bit-atomic-operations.patch?ref=9bd53718e2537d95d8c092609618c2dcd6f05127", "patch": "@@ -1,48 +0,0 @@\n-From 1d574bf5e32d51641dcacaf8ef777e95b44f6f2a Mon Sep 17 00:00:00 2001\n-From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Thu, 18 Feb 2021 18:30:55 +0100\n-Subject: [PATCH] Disable 128bit atomic operations\n-\n-Cranelift doesn't support them yet\n----\n- src/mem/mod.rs | 12 ------------\n- 1 file changed, 12 deletions(-)\n-\n-diff --git a/src/mem/mod.rs b/src/mem/mod.rs\n-index 107762c..2d1ae10 100644\n---- a/src/mem/mod.rs\n-+++ b/src/mem/mod.rs\n-@@ -137,10 +137,6 @@ intrinsics! {\n-     pub unsafe extern \"C\" fn __llvm_memcpy_element_unordered_atomic_8(dest: *mut u64, src: *const u64, bytes: usize) -> () {\n-         memcpy_element_unordered_atomic(dest, src, bytes);\n-     }\n--    #[cfg(target_has_atomic_load_store = \"128\")]\n--    pub unsafe extern \"C\" fn __llvm_memcpy_element_unordered_atomic_16(dest: *mut u128, src: *const u128, bytes: usize) -> () {\n--        memcpy_element_unordered_atomic(dest, src, bytes);\n--    }\n- \n-     #[cfg(target_has_atomic_load_store = \"8\")]\n-     pub unsafe extern \"C\" fn __llvm_memmove_element_unordered_atomic_1(dest: *mut u8, src: *const u8, bytes: usize) -> () {\n-@@ -158,10 +154,6 @@ intrinsics! {\n-     pub unsafe extern \"C\" fn __llvm_memmove_element_unordered_atomic_8(dest: *mut u64, src: *const u64, bytes: usize) -> () {\n-         memmove_element_unordered_atomic(dest, src, bytes);\n-     }\n--    #[cfg(target_has_atomic_load_store = \"128\")]\n--    pub unsafe extern \"C\" fn __llvm_memmove_element_unordered_atomic_16(dest: *mut u128, src: *const u128, bytes: usize) -> () {\n--        memmove_element_unordered_atomic(dest, src, bytes);\n--    }\n- \n-     #[cfg(target_has_atomic_load_store = \"8\")]\n-     pub unsafe extern \"C\" fn __llvm_memset_element_unordered_atomic_1(s: *mut u8, c: u8, bytes: usize) -> () {\n-@@ -179,8 +171,4 @@ intrinsics! {\n-     pub unsafe extern \"C\" fn __llvm_memset_element_unordered_atomic_8(s: *mut u64, c: u8, bytes: usize) -> () {\n-         memset_element_unordered_atomic(s, c, bytes);\n-     }\n--    #[cfg(target_has_atomic_load_store = \"128\")]\n--    pub unsafe extern \"C\" fn __llvm_memset_element_unordered_atomic_16(s: *mut u128, c: u8, bytes: usize) -> () {\n--        memset_element_unordered_atomic(s, c, bytes);\n--    }\n- }\n--- \n-2.26.2.7.g19db9cfb68\n-"}, {"sha": "01dc0fcc5376138bccca396b78e729a5942bf94c", "filename": "compiler/rustc_codegen_cranelift/patches/0001-rand-Enable-c2-chacha-simd-feature.patch", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9bd53718e2537d95d8c092609618c2dcd6f05127/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0001-rand-Enable-c2-chacha-simd-feature.patch", "raw_url": "https://github.com/rust-lang/rust/raw/9bd53718e2537d95d8c092609618c2dcd6f05127/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0001-rand-Enable-c2-chacha-simd-feature.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0001-rand-Enable-c2-chacha-simd-feature.patch?ref=9bd53718e2537d95d8c092609618c2dcd6f05127", "patch": "@@ -1,23 +0,0 @@\n-From 9c5663e36391fa20becf84f3af2e82afa5bb720b Mon Sep 17 00:00:00 2001\n-From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Sat, 15 Aug 2020 19:56:03 +0200\n-Subject: [PATCH] [rand] Enable c2-chacha simd feature\n-\n----\n- rand_chacha/Cargo.toml | 2 +-\n- 1 file changed, 1 insertion(+), 1 deletion(-)\n-\n-diff --git a/rand_chacha/Cargo.toml b/rand_chacha/Cargo.toml\n-index 9190b7f..872cca2 100644\n---- a/rand_chacha/Cargo.toml\n-+++ b/rand_chacha/Cargo.toml\n-@@ -24,5 +24,5 @@ ppv-lite86 = { version = \"0.2.8\", default-features = false }\n- \n- [features]\n- default = [\"std\"]\n--std = [\"ppv-lite86/std\"]\n-+std = [\"ppv-lite86/std\", \"ppv-lite86/simd\"]\n- simd = [] # deprecated\n--- \n-2.20.1\n-"}, {"sha": "ae13ab3b0ca63721460da13b28a409df65692675", "filename": "compiler/rustc_codegen_cranelift/patches/0002-rand-Disable-failing-test.patch", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0002-rand-Disable-failing-test.patch", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0002-rand-Disable-failing-test.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0002-rand-Disable-failing-test.patch?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -4,27 +4,18 @@ Date: Sat, 15 Aug 2020 20:04:38 +0200\n Subject: [PATCH] [rand] Disable failing test\n \n ---\n- src/distributions/uniform.rs | 3 ++-\n- 1 file changed, 2 insertions(+), 1 deletion(-)\n+ src/distributions/uniform.rs | 1 +\n+ 1 file changed, 1 insertion(+), 0 deletions(-)\n \n diff --git a/src/distributions/uniform.rs b/src/distributions/uniform.rs\n index 480b859..c80bb6f 100644\n --- a/src/distributions/uniform.rs\n +++ b/src/distributions/uniform.rs\n-@@ -1085,7 +1085,7 @@ mod tests {\n-             _ => panic!(\"`UniformDurationMode` was not serialized/deserialized correctly\")\n-         }\n-     }\n--    \n-+\n-     #[test]\n-     #[cfg(feature = \"serde1\")]\n-     fn test_uniform_serialization() {\n @@ -1314,6 +1314,7 @@ mod tests {\n          not(target_arch = \"wasm32\"),\n          not(target_arch = \"asmjs\")\n      ))]\n-+    #[ignore] // FIXME\n++    #[ignore] // Requires unwinding\n      fn test_float_assertions() {\n          use super::SampleUniform;\n          use std::panic::catch_unwind;"}, {"sha": "108a97bd7c600da6ed09f1846a0c51affac145eb", "filename": "compiler/rustc_codegen_cranelift/patches/0022-sysroot-Disable-not-compiling-tests.patch", "status": "modified", "additions": 4, "deletions": 33, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0022-sysroot-Disable-not-compiling-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0022-sysroot-Disable-not-compiling-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0022-sysroot-Disable-not-compiling-tests.patch?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -18,7 +18,7 @@ new file mode 100644\n index 0000000..46fd999\n --- /dev/null\n +++ b/library/core/tests/Cargo.toml\n-@@ -0,0 +1,8 @@\n+@@ -0,0 +1,11 @@\n +[package]\n +name = \"core\"\n +version = \"0.0.0\"\n@@ -27,18 +27,9 @@ index 0000000..46fd999\n +[lib]\n +name = \"coretests\"\n +path = \"lib.rs\"\n-diff --git a/library/core/tests/num/flt2dec/mod.rs b/library/core/tests/num/flt2dec/mod.rs\n-index a35897e..f0bf645 100644\n---- a/library/core/tests/num/flt2dec/mod.rs\n-+++ b/library/core/tests/num/flt2dec/mod.rs\n-@@ -13,7 +13,6 @@ mod strategy {\n-     mod dragon;\n-     mod grisu;\n- }\n--mod random;\n- \n- pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {\n-     match decode(v).1 {\n++\n++[dependencies]\n++rand = \"0.7\"\n diff --git a/library/core/tests/ptr.rs b/library/core/tests/ptr.rs\n index 1a6be3a..42dbd59 100644\n --- a/library/core/tests/ptr.rs\n@@ -59,25 +50,5 @@ index 1a6be3a..42dbd59 100644\n  \n  #[test]\n  fn write_unaligned_drop() {\n-diff --git a/library/core/tests/slice.rs b/library/core/tests/slice.rs\n-index 6609bc3..241b497 100644\n---- a/library/core/tests/slice.rs\n-+++ b/library/core/tests/slice.rs\n-@@ -1209,6 +1209,7 @@ fn brute_force_rotate_test_1() {\n-     }\n- }\n- \n-+/*\n- #[test]\n- #[cfg(not(target_arch = \"wasm32\"))]\n- fn sort_unstable() {\n-@@ -1394,6 +1395,7 @@ fn partition_at_index() {\n-     v.select_nth_unstable(0);\n-     assert!(v == [0xDEADBEEF]);\n- }\n-+*/\n- \n- #[test]\n- #[should_panic(expected = \"index 0 greater than length of slice\")]\n --\n 2.21.0 (Apple Git-122)"}, {"sha": "d804a78cc1061f3204d2e224ebf0212753eaf0e3", "filename": "compiler/rustc_codegen_cranelift/patches/0028-sysroot-Disable-long-running-tests.patch", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0028-sysroot-Disable-long-running-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0028-sysroot-Disable-long-running-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0028-sysroot-Disable-long-running-tests.patch?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -1,30 +1,48 @@\n-From 0ffdd8eda8df364391c8ac6e1ce92c73ba9254d4 Mon Sep 17 00:00:00 2001\n+From eb703e627e7a84f1cd8d0d87f0f69da1f0acf765 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n Date: Fri, 3 Dec 2021 12:16:30 +0100\n Subject: [PATCH] Disable long running tests\n \n ---\n- library/core/tests/slice.rs | 3 +++\n- 1 file changed, 3 insertions(+)\n+ library/core/tests/slice.rs | 2 ++\n+ 1 file changed, 2 insertions(+)\n \n diff --git a/library/core/tests/slice.rs b/library/core/tests/slice.rs\n-index 2c8f00a..44847ee 100644\n+index 8402833..84592e0 100644\n --- a/library/core/tests/slice.rs\n +++ b/library/core/tests/slice.rs\n-@@ -2332,7 +2332,8 @@ macro_rules! empty_max_mut {\n-     };\n+@@ -1809,6 +1809,7 @@ fn sort_unstable() {\n+     assert!(v == [0xDEADBEEF]);\n  }\n  \n +/*\n- #[cfg(not(miri))] // Comparing usize::MAX many elements takes forever in Miri (and in rustc without optimizations)\n- take_tests! {\n-     slice: &[(); usize::MAX], method: take,\n-     (take_in_bounds_max_range_to, (..usize::MAX), Some(EMPTY_MAX), &[(); 0]),\n-@@ -2345,3 +2347,4 @@ take_tests! {\n+ #[test]\n+ #[cfg(not(target_arch = \"wasm32\"))]\n+ #[cfg_attr(miri, ignore)] // Miri is too slow\n+@@ -1914,6 +1915,7 @@ fn select_nth_unstable() {\n+     v.select_nth_unstable(0);\n+     assert!(v == [0xDEADBEEF]);\n+ }\n++*/\n+ \n+ #[test]\n+ #[should_panic(expected = \"index 0 greater than length of slice\")]\n+@@ -2462,6 +2462,7 @@ take_tests! {\n+ #[cfg(not(miri))] // unused in Miri\n+ const EMPTY_MAX: &'static [()] = &[(); usize::MAX];\n+ \n++/*\n+ // can't be a constant due to const mutability rules\n+ #[cfg(not(miri))] // unused in Miri\n+ macro_rules! empty_max_mut {\n+@@ -2485,6 +2486,7 @@ take_tests! {\n      (take_mut_oob_max_range_to_inclusive, (..=usize::MAX), None, empty_max_mut!()),\n      (take_mut_in_bounds_max_range_from, (usize::MAX..), Some(&mut [] as _), empty_max_mut!()),\n  }\n +*/\n+ \n+ #[test]\n+ fn test_slice_from_ptr_range() {\n -- \n 2.26.2.7.g19db9cfb68\n "}, {"sha": "84d90e5db02539c3edcc72c5fed578f41368e06c", "filename": "compiler/rustc_codegen_cranelift/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Frust-toolchain?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-02-23\"\n+channel = \"nightly-2022-03-19\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "85c0109c6f61eb6932889a6cd667e0c31cd4f352", "filename": "compiler/rustc_codegen_cranelift/scripts/setup_rust_fork.sh", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -12,18 +12,6 @@ git checkout -- .\n git checkout \"$(rustc -V | cut -d' ' -f3 | tr -d '(')\"\n \n git apply - <<EOF\n-diff --git a/Cargo.toml b/Cargo.toml\n-index 5bd1147cad5..10d68a2ff14 100644\n---- a/Cargo.toml\n-+++ b/Cargo.toml\n-@@ -111,5 +111,7 @@ rustc-std-workspace-std = { path = 'library/rustc-std-workspace-std' }\n- rustc-std-workspace-alloc = { path = 'library/rustc-std-workspace-alloc' }\n- rustc-std-workspace-std = { path = 'library/rustc-std-workspace-std' }\n-\n-+compiler_builtins = { path = \"../build_sysroot/compiler-builtins\" }\n-+\n- [patch.\"https://github.com/rust-lang/rust-clippy\"]\n- clippy_lints = { path = \"src/tools/clippy/clippy_lints\" }\n diff --git a/library/alloc/Cargo.toml b/library/alloc/Cargo.toml\n index d95b5b7f17f..00b6f0e3635 100644\n --- a/library/alloc/Cargo.toml\n@@ -38,9 +26,43 @@ index d95b5b7f17f..00b6f0e3635 100644\n  [dev-dependencies]\n  rand = \"0.7\"\n  rand_xorshift = \"0.2\"\n+diff --git a/src/tools/compiletest/src/header.rs b/src/tools/compiletest/src/header.rs\n+index 887d27fd6dca4..2c2239f2b83d1 100644\n+--- a/src/tools/compiletest/src/header.rs\n++++ b/src/tools/compiletest/src/header.rs\n+@@ -806,8 +806,8 @@ pub fn make_test_description<R: Read>(\n+     cfg: Option<&str>,\n+ ) -> test::TestDesc {\n+     let mut ignore = false;\n+     #[cfg(not(bootstrap))]\n+-    let ignore_message: Option<String> = None;\n++    let ignore_message: Option<&str> = None;\n+     let mut should_fail = false;\n+\n+     let rustc_has_profiler_support = env::var_os(\"RUSTC_PROFILER_SUPPORT\").is_some();\n+\n+diff --git a/src/tools/compiletest/src/runtest.rs b/src/tools/compiletest/src/runtest.rs\n+index 8431aa7b818..a3ff7e68ce5 100644\n+--- a/src/tools/compiletest/src/runtest.rs\n++++ b/src/tools/compiletest/src/runtest.rs\n+@@ -3489,11 +3489,7 @@ fn normalize_output(&self, output: &str, custom_rules: &[(String, String)]) -> S\n+             .join(\"library\");\n+         normalize_path(&src_dir, \"$(echo '$SRC_DIR')\");\n+\n+-        if let Some(virtual_rust_source_base_dir) =\n+-            option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").map(PathBuf::from)\n+-        {\n+-            normalize_path(&virtual_rust_source_base_dir.join(\"library\"), \"$(echo '$SRC_DIR')\");\n+-        }\n++        normalize_path(&Path::new(\"$(cd ../build_sysroot/sysroot_src/library; pwd)\"), \"$(echo '$SRC_DIR')\");\n+\n+         // Paths into the build directory\n+         let test_build_dir = &self.config.build_base;\n EOF\n \n cat > config.toml <<EOF\n+changelog-seen = 2\n+\n [llvm]\n ninja = false\n "}, {"sha": "a32e6df220832847efaef3e86f5dd1b402dc3d5f", "filename": "compiler/rustc_codegen_cranelift/scripts/test_rustc_tests.sh", "status": "modified", "additions": 70, "deletions": 58, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -10,99 +10,111 @@ pushd rust\n \n command -v rg >/dev/null 2>&1 || cargo install ripgrep\n \n-rm -r src/test/ui/{extern/,panics/,unsized-locals/,lto/,simd*,linkage*,unwind-*.rs} || true\n-for test in $(rg --files-with-matches \"asm!|catch_unwind|should_panic|lto|// needs-asm-support\" src/test/ui); do\n+rm -r src/test/ui/{extern/,unsized-locals/,lto/,linkage*} || true\n+for test in $(rg --files-with-matches \"asm!|lto|// needs-asm-support|// needs-unwind\" src/test/{ui,incremental}); do\n   rm $test\n done\n \n-for test in $(rg -i --files-with-matches \"//(\\[\\w+\\])?~|// error-pattern:|// build-fail|// run-fail|-Cllvm-args\" src/test/ui); do\n+for test in $(rg -i --files-with-matches \"//(\\[\\w+\\])?~[^\\|]*\\s*ERR|// error-pattern:|// build-fail|// run-fail|-Cllvm-args\" src/test/ui); do\n   rm $test\n done\n \n git checkout -- src/test/ui/issues/auxiliary/issue-3136-a.rs # contains //~ERROR, but shouldn't be removed\n \n-# these all depend on unwinding support\n+# missing features\n+# ================\n+\n+# requires stack unwinding\n rm src/test/ui/backtrace.rs\n-rm src/test/ui/array-slice-vec/box-of-array-of-drop-*.rs\n-rm src/test/ui/array-slice-vec/slice-panic-*.rs\n-rm src/test/ui/array-slice-vec/nested-vec-3.rs\n-rm src/test/ui/cleanup-rvalue-temp-during-incomplete-alloc.rs\n-rm src/test/ui/issues/issue-26655.rs\n-rm src/test/ui/issues/issue-29485.rs\n-rm src/test/ui/issues/issue-30018-panic.rs\n rm src/test/ui/process/multi-panic.rs\n-rm src/test/ui/sepcomp/sepcomp-unwind.rs\n-rm src/test/ui/structs-enums/unit-like-struct-drop-run.rs\n-rm src/test/ui/drop/terminate-in-initializer.rs\n-rm src/test/ui/threads-sendsync/task-stderr.rs\n-rm src/test/ui/numbers-arithmetic/int-abs-overflow.rs\n-rm src/test/ui/drop/drop-trait-enum.rs\n rm src/test/ui/numbers-arithmetic/issue-8460.rs\n-rm src/test/ui/runtime/rt-explody-panic-payloads.rs\n rm src/test/incremental/change_crate_dep_kind.rs\n-rm src/test/ui/threads-sendsync/unwind-resource.rs\n+rm src/test/incremental/issue-80691-bad-eval-cache.rs # -Cpanic=abort causes abort instead of exit(101)\n+rm src/test/ui/panic-while-printing.rs\n+rm src/test/ui/test-attrs/test-panic-while-printing.rs\n+rm src/test/ui/test-attrs/test-type.rs\n \n-rm src/test/ui/issues/issue-28950.rs # depends on stack size optimizations\n-rm src/test/ui/codegen/init-large-type.rs # same\n+# requires compiling with -Cpanic=unwind\n+rm src/test/ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs # \"Cannot run dynamic test fn out-of-process\"\n+rm src/test/ui/async-await/async-fn-size-moved-locals.rs # -Cpanic=abort shrinks some generator by one byte\n+rm src/test/ui/async-await/async-fn-size-uninit-locals.rs # same\n+rm src/test/ui/generator/size-moved-locals.rs # same\n+\n+# vendor intrinsics\n rm src/test/ui/sse2.rs # cpuid not supported, so sse2 not detected\n+rm src/test/ui/intrinsics/const-eval-select-x86_64.rs # requires x86_64 vendor intrinsics\n+rm src/test/ui/simd/array-type.rs # \"Index argument for `simd_insert` is not a constant\"\n+rm src/test/ui/simd/intrinsic/generic-bitmask-pass.rs # simd_bitmask unimplemented\n+rm src/test/ui/simd/intrinsic/generic-as.rs # simd_as unimplemented\n+rm src/test/ui/simd/intrinsic/generic-arithmetic-saturating-pass.rs # simd_saturating_add unimplemented\n+rm src/test/ui/simd/intrinsic/float-math-pass.rs # simd_fcos unimplemented\n+rm src/test/ui/simd/intrinsic/generic-gather-pass.rs # simd_gather unimplemented\n+rm src/test/ui/simd/intrinsic/generic-select-pass.rs # simd_select_bitmask unimplemented\n+rm src/test/ui/simd/issue-85915-simd-ptrs.rs # simd_gather unimplemented\n+rm src/test/ui/simd/issue-89193.rs # simd_gather unimplemented\n+rm src/test/ui/simd/simd-bitmask.rs # simd_bitmask unimplemented\n+\n+# exotic linkages\n rm src/test/ui/issues/issue-33992.rs # unsupported linkages\n-rm src/test/ui/issues/issue-51947.rs # same\n rm src/test/incremental/hashes/function_interfaces.rs # same\n rm src/test/incremental/hashes/statics.rs # same\n+\n+# variadic arguments\n+rm src/test/ui/abi/mir/mir_codegen_calls_variadic.rs # requires float varargs\n+rm src/test/ui/abi/variadic-ffi.rs # requires callee side vararg support\n+\n+# unsized locals\n+rm -r src/test/run-pass-valgrind/unsized-locals\n+\n+# misc unimplemented things\n+rm src/test/ui/intrinsics/intrinsic-nearby.rs # unimplemented nearbyintf32 and nearbyintf64 intrinsics\n+rm src/test/ui/target-feature/missing-plusminus.rs # error not implemented\n+rm src/test/ui/fn/dyn-fn-alignment.rs # wants a 256 byte alignment\n+rm -r src/test/run-make/emit-named-files # requires full --emit support\n+\n+# optimization tests\n+# ==================\n+rm src/test/ui/issues/issue-28950.rs # depends on stack size optimizations\n+rm src/test/ui/codegen/init-large-type.rs # same\n+rm -r src/test/run-make/fmt-write-bloat/ # tests an optimization\n+\n+# backend specific tests\n+# ======================\n+rm src/test/incremental/thinlto/cgu_invalidated_when_import_{added,removed}.rs # requires LLVM\n+rm src/test/ui/abi/stack-protector.rs # requires stack protector support\n+\n+# giving different but possibly correct results\n+# =============================================\n rm src/test/ui/numbers-arithmetic/saturating-float-casts.rs # intrinsic gives different but valid result\n+rm src/test/ui/simd/intrinsic/float-minmax-pass.rs # same\n rm src/test/ui/mir/mir_misc_casts.rs # depends on deduplication of constants\n rm src/test/ui/mir/mir_raw_fat_ptr.rs # same\n rm src/test/ui/consts/issue-33537.rs # same\n-rm src/test/ui/async-await/async-fn-size-moved-locals.rs # -Cpanic=abort shrinks some generator by one byte\n-rm src/test/ui/async-await/async-fn-size-uninit-locals.rs # same\n-rm src/test/ui/generator/size-moved-locals.rs # same\n-rm src/test/ui/fn/dyn-fn-alignment.rs # wants a 256 byte alignment\n-rm src/test/ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs # \"Cannot run dynamic test fn out-of-process\"\n-rm src/test/ui/intrinsics/intrinsic-nearby.rs # unimplemented nearbyintf32 and nearbyintf64 intrinsics\n-\n-rm src/test/incremental/hashes/inline_asm.rs # inline asm\n-rm src/test/incremental/issue-72386.rs # same\n-rm src/test/incremental/lto.rs # requires lto\n-rm src/test/incremental/dirty_clean.rs # TODO\n \n+# doesn't work due to the way the rustc test suite is invoked.\n+# should work when using ./x.py test the way it is intended\n+# ============================================================\n rm -r src/test/run-make/emit-shared-files # requires the rustdoc executable in build/bin/\n rm -r src/test/run-make/unstable-flag-required # same\n rm -r src/test/run-make/rustdoc-* # same\n-rm -r src/test/run-make/emit-named-files # requires full --emit support\n-\n-rm -r src/test/run-pass-valgrind/unsized-locals\n-\n-rm src/test/ui/json-bom-plus-crlf-multifile.rs # differing warning\n-rm src/test/ui/json-bom-plus-crlf.rs # same\n-rm src/test/ui/intrinsics/const-eval-select-x86_64.rs # same\n-rm src/test/ui/match/issue-82392.rs # differing error\n-rm src/test/ui/consts/min_const_fn/address_of_const.rs # same\n-rm src/test/ui/consts/issue-miri-1910.rs # same\n-rm src/test/ui/generic-associated-types/bugs/issue-80626.rs # same\n-rm src/test/ui/generic-associated-types/bugs/issue-89008.rs # same\n-rm src/test/ui/type-alias-impl-trait/cross_crate_ice*.rs # requires removed aux dep\n \n+# genuine bugs\n+# ============\n rm src/test/ui/allocator/no_std-alloc-error-handler-default.rs # missing rust_oom definition\n-rm src/test/ui/cfg/cfg-panic.rs\n-rm -r src/test/ui/hygiene/\n \n rm -r src/test/ui/polymorphization/ # polymorphization not yet supported\n rm src/test/codegen-units/polymorphization/unused_type_parameters.rs # same\n \n-rm -r src/test/run-make/fmt-write-bloat/ # tests an optimization\n-rm src/test/ui/abi/mir/mir_codegen_calls_variadic.rs # requires float varargs\n-rm src/test/ui/abi/variadic-ffi.rs # requires callee side vararg support\n-\n-rm src/test/ui/command/command-current-dir.rs # can't find libstd.so\n-\n-rm src/test/ui/abi/stack-protector.rs # requires stack protector support\n-\n-rm src/test/incremental/issue-80691-bad-eval-cache.rs # wrong exit code\n rm src/test/incremental/spike-neg1.rs # errors out for some reason\n rm src/test/incremental/spike-neg2.rs # same\n rm src/test/ui/issues/issue-74564-if-expr-stack-overflow.rs # gives a stackoverflow before the backend runs\n+rm src/test/ui/mir/ssa-analysis-regression-50041.rs # produces ICE\n \n-rm src/test/incremental/thinlto/cgu_invalidated_when_import_{added,removed}.rs # requires LLVM\n+rm src/test/ui/simd/intrinsic/generic-reduction-pass.rs # simd_reduce_add_unordered doesn't accept an accumulator for integer vectors\n+\n+# bugs in the test suite\n+# ======================\n+rm src/test/ui/unsafe/union.rs # has UB caught by cg_clif. see rust-lang/rust#95075\n \n echo \"[TEST] rustc test suite\"\n RUST_TEST_NOCAPTURE=1 COMPILETEST_FORCE_STAGE0=1 ./x.py test --stage 0 src/test/{codegen-units,run-make,run-pass-valgrind,ui,incremental}"}, {"sha": "fee1012c8f1dc4196df3f6e8293c75f24faa315d", "filename": "compiler/rustc_codegen_cranelift/scripts/tests.sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -57,7 +57,6 @@ function base_sysroot_tests() {\n     fi\n \n     echo \"[AOT] dst_field_align\"\n-    # FIXME Re-add -Zmir-opt-level=2 once rust-lang/rust#67529 is fixed.\n     $MY_RUSTC example/dst-field-align.rs --crate-name dst_field_align --crate-type bin --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/dst_field_align || (echo $?; false)\n "}, {"sha": "ef56fb191bff5aabbbb884150ea83421b560c5b3", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -94,6 +94,9 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n         let sig = Signature { params, returns, call_conv: self.target_config.default_call_conv };\n         let func_id = self.module.declare_function(name, Linkage::Import, &sig).unwrap();\n         let func_ref = self.module.declare_func_in_func(func_id, &mut self.bcx.func);\n+        if self.clif_comments.enabled() {\n+            self.add_comment(func_ref, format!(\"{:?}\", name));\n+        }\n         let call_inst = self.bcx.ins().call(func_ref, args);\n         if self.clif_comments.enabled() {\n             self.add_comment(call_inst, format!(\"easy_call {}\", name));\n@@ -367,7 +370,10 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         .map(|inst| fx.tcx.codegen_fn_attrs(inst.def_id()).flags.contains(CodegenFnAttrFlags::COLD))\n         .unwrap_or(false);\n     if is_cold {\n-        // FIXME Mark current_block block as cold once Cranelift supports it\n+        fx.bcx.set_cold_block(fx.bcx.current_block().unwrap());\n+        if let Some((_place, destination_block)) = destination {\n+            fx.bcx.set_cold_block(fx.get_block(destination_block));\n+        }\n     }\n \n     // Unpack arguments tuple for closures\n@@ -501,7 +507,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         let ret_block = fx.get_block(dest);\n         fx.bcx.ins().jump(ret_block, &[]);\n     } else {\n-        trap_unreachable(fx, \"[corruption] Diverging function returned\");\n+        fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n     }\n }\n "}, {"sha": "a9ff710c91ed6f865cb4486e7f96031b0f4e3b56", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -4,6 +4,7 @@ use rustc_ast::InlineAsmOptions;\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::layout::FnAbiOf;\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n \n use indexmap::IndexSet;\n \n@@ -25,7 +26,10 @@ pub(crate) fn codegen_fn<'tcx>(\n     let mir = tcx.instance_mir(instance.def);\n     let _mir_guard = crate::PrintOnPanic(|| {\n         let mut buf = Vec::new();\n-        rustc_middle::mir::write_mir_pretty(tcx, Some(instance.def_id()), &mut buf).unwrap();\n+        with_no_trimmed_paths!({\n+            rustc_middle::mir::pretty::write_mir_fn(tcx, mir, &mut |_, _| Ok(()), &mut buf)\n+                .unwrap();\n+        });\n         String::from_utf8_lossy(&buf).into_owned()\n     });\n \n@@ -90,7 +94,7 @@ pub(crate) fn codegen_fn<'tcx>(\n     } else if arg_uninhabited {\n         fx.bcx.append_block_params_for_function_params(fx.block_map[START_BLOCK]);\n         fx.bcx.switch_to_block(fx.block_map[START_BLOCK]);\n-        crate::trap::trap_unreachable(&mut fx, \"function has uninhabited argument\");\n+        fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n     } else {\n         tcx.sess.time(\"codegen clif ir\", || {\n             tcx.sess\n@@ -258,7 +262,9 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n \n         if fx.clif_comments.enabled() {\n             let mut terminator_head = \"\\n\".to_string();\n-            bb_data.terminator().kind.fmt_head(&mut terminator_head).unwrap();\n+            with_no_trimmed_paths!({\n+                bb_data.terminator().kind.fmt_head(&mut terminator_head).unwrap();\n+            });\n             let inst = fx.bcx.func.layout.last_inst(block).unwrap();\n             fx.add_comment(inst, terminator_head);\n         }\n@@ -303,7 +309,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n \n                 let target = fx.get_block(*target);\n                 let failure = fx.bcx.create_block();\n-                // FIXME Mark failure block as cold once Cranelift supports it\n+                fx.bcx.set_cold_block(failure);\n \n                 if *expected {\n                     fx.bcx.ins().brz(cond, failure, &[]);\n@@ -424,18 +430,16 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n                         fx.bcx.ins().jump(destination_block, &[]);\n                     }\n                     None => {\n-                        crate::trap::trap_unreachable(\n-                            fx,\n-                            \"[corruption] Returned from noreturn inline asm\",\n-                        );\n+                        fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n                     }\n                 }\n             }\n             TerminatorKind::Resume | TerminatorKind::Abort => {\n-                trap_unreachable(fx, \"[corruption] Unwinding bb reached.\");\n+                // FIXME implement unwinding\n+                fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n             }\n             TerminatorKind::Unreachable => {\n-                trap_unreachable(fx, \"[corruption] Hit unreachable code.\");\n+                fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n             }\n             TerminatorKind::Yield { .. }\n             | TerminatorKind::FalseEdge { .. }\n@@ -813,7 +817,14 @@ pub(crate) fn codegen_place<'tcx>(\n     for elem in place.projection {\n         match elem {\n             PlaceElem::Deref => {\n-                cplace = cplace.place_deref(fx);\n+                if cplace.layout().ty.is_box() {\n+                    cplace = cplace\n+                        .place_field(fx, Field::new(0)) // Box<T> -> Unique<T>\n+                        .place_field(fx, Field::new(0)) // Unique<T> -> *const T\n+                        .place_deref(fx);\n+                } else {\n+                    cplace = cplace.place_deref(fx);\n+                }\n             }\n             PlaceElem::Field(field, _ty) => {\n                 cplace = cplace.place_field(fx, field);\n@@ -918,5 +929,5 @@ pub(crate) fn codegen_panic_inner<'tcx>(\n         args,\n     );\n \n-    crate::trap::trap_unreachable(fx, \"panic lang item returned\");\n+    fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n }"}, {"sha": "5984ec8412ad71acfdf304f10faf98183d929762", "filename": "compiler/rustc_codegen_cranelift/src/bin/cg_clif.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_private, once_cell)]\n+#![feature(rustc_private)]\n #![warn(rust_2018_idioms)]\n #![warn(unused_lifetimes)]\n #![warn(unreachable_pub)]\n@@ -9,19 +9,21 @@ extern crate rustc_interface;\n extern crate rustc_session;\n extern crate rustc_target;\n \n-use std::lazy::SyncLazy;\n use std::panic;\n \n use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n use rustc_interface::interface;\n-use rustc_session::config::ErrorOutputType;\n+use rustc_session::config::{ErrorOutputType, TrimmedDefPaths};\n use rustc_session::early_error;\n use rustc_target::spec::PanicStrategy;\n \n+// FIXME use std::lazy::SyncLazy once it stabilizes\n+use once_cell::sync::Lazy;\n+\n const BUG_REPORT_URL: &str = \"https://github.com/bjorn3/rustc_codegen_cranelift/issues/new\";\n \n-static DEFAULT_HOOK: SyncLazy<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static>> =\n-    SyncLazy::new(|| {\n+static DEFAULT_HOOK: Lazy<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static>> =\n+    Lazy::new(|| {\n         let hook = panic::take_hook();\n         panic::set_hook(Box::new(|info| {\n             // Invoke the default handler, which prints the actual panic message and optionally a backtrace\n@@ -53,6 +55,8 @@ impl rustc_driver::Callbacks for CraneliftPassesCallbacks {\n         config.opts.maybe_sysroot = Some(config.opts.maybe_sysroot.clone().unwrap_or_else(|| {\n             std::env::current_exe().unwrap().parent().unwrap().parent().unwrap().to_owned()\n         }));\n+\n+        config.opts.trimmed_def_paths = TrimmedDefPaths::GoodPath;\n     }\n }\n \n@@ -61,7 +65,7 @@ fn main() {\n     let start_rss = get_resident_set_size();\n     rustc_driver::init_rustc_env_logger();\n     let mut callbacks = CraneliftPassesCallbacks::default();\n-    SyncLazy::force(&DEFAULT_HOOK); // Install ice hook\n+    Lazy::force(&DEFAULT_HOOK); // Install ice hook\n     let exit_code = rustc_driver::catch_with_exit_code(|| {\n         let args = std::env::args_os()\n             .enumerate()"}, {"sha": "c6a247cf59eed11ac5e738af98db46567a9dd87a", "filename": "compiler/rustc_codegen_cranelift/src/compiler_builtins.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcompiler_builtins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcompiler_builtins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcompiler_builtins.rs?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -1,16 +1,18 @@\n-macro builtin_functions($register:ident; $(fn $name:ident($($arg_name:ident: $arg_ty:ty),*) -> $ret_ty:ty;)*) {\n-    #[cfg(feature = \"jit\")]\n-    #[allow(improper_ctypes)]\n-    extern \"C\" {\n-        $(fn $name($($arg_name: $arg_ty),*) -> $ret_ty;)*\n-    }\n+macro_rules! builtin_functions {\n+    ($register:ident; $(fn $name:ident($($arg_name:ident: $arg_ty:ty),*) -> $ret_ty:ty;)*) => {\n+        #[cfg(feature = \"jit\")]\n+        #[allow(improper_ctypes)]\n+        extern \"C\" {\n+            $(fn $name($($arg_name: $arg_ty),*) -> $ret_ty;)*\n+        }\n \n-    #[cfg(feature = \"jit\")]\n-    pub(crate) fn $register(builder: &mut cranelift_jit::JITBuilder) {\n-        for (name, val) in [$((stringify!($name), $name as *const u8)),*] {\n-            builder.symbol(name, val);\n+        #[cfg(feature = \"jit\")]\n+        pub(crate) fn $register(builder: &mut cranelift_jit::JITBuilder) {\n+            for (name, val) in [$((stringify!($name), $name as *const u8)),*] {\n+                builder.symbol(name, val);\n+            }\n         }\n-    }\n+    };\n }\n \n builtin_functions! {"}, {"sha": "476d6a54e125658d9ec2568a4cd861298bcabe9e", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/line_info.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -110,7 +110,6 @@ impl<'tcx> DebugContext<'tcx> {\n \n         entry.set(gimli::DW_AT_decl_file, AttributeValue::FileIndex(Some(file_id)));\n         entry.set(gimli::DW_AT_decl_line, AttributeValue::Udata(loc.line as u64));\n-        // FIXME: probably omit this\n         entry.set(gimli::DW_AT_decl_column, AttributeValue::Udata(loc.col.to_usize() as u64));\n     }\n "}, {"sha": "d26392c4913b508a3ab68335d2ea771243c6b42d", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/unwind.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Funwind.rs?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -81,6 +81,8 @@ impl UnwindContext {\n \n     #[cfg(all(feature = \"jit\", not(windows)))]\n     pub(crate) unsafe fn register_jit(self, jit_module: &cranelift_jit::JITModule) {\n+        use std::mem::ManuallyDrop;\n+\n         let mut eh_frame = EhFrame::from(super::emit::WriterRelocate::new(self.endian));\n         self.frame_table.write_eh_frame(&mut eh_frame).unwrap();\n \n@@ -95,17 +97,16 @@ impl UnwindContext {\n \n         // FIXME support unregistering unwind tables once cranelift-jit supports deallocating\n         // individual functions\n-        #[allow(unused_variables)]\n-        let (eh_frame, eh_frame_len, _) = Vec::into_raw_parts(eh_frame);\n+        let eh_frame = ManuallyDrop::new(eh_frame);\n \n         // =======================================================================\n-        // Everything after this line up to the end of the file is loosly based on\n+        // Everything after this line up to the end of the file is loosely based on\n         // https://github.com/bytecodealliance/wasmtime/blob/4471a82b0c540ff48960eca6757ccce5b1b5c3e4/crates/jit/src/unwind/systemv.rs\n         #[cfg(target_os = \"macos\")]\n         {\n             // On macOS, `__register_frame` takes a pointer to a single FDE\n-            let start = eh_frame;\n-            let end = start.add(eh_frame_len);\n+            let start = eh_frame.as_ptr();\n+            let end = start.add(eh_frame.len());\n             let mut current = start;\n \n             // Walk all of the entries in the frame table and register them\n@@ -124,7 +125,7 @@ impl UnwindContext {\n         #[cfg(not(target_os = \"macos\"))]\n         {\n             // On other platforms, `__register_frame` will walk the FDEs until an entry of length 0\n-            __register_frame(eh_frame);\n+            __register_frame(eh_frame.as_ptr());\n         }\n     }\n }"}, {"sha": "6b2893fdaeb29c53ce09550a27fed4c2c31fb520", "filename": "compiler/rustc_codegen_cranelift/src/discriminant.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -68,11 +68,10 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n     let layout = value.layout();\n \n     if layout.abi == Abi::Uninhabited {\n-        return trap_unreachable_ret_value(\n-            fx,\n-            dest_layout,\n-            \"[panic] Tried to get discriminant for uninhabited type.\",\n-        );\n+        let true_ = fx.bcx.ins().iconst(types::I32, 1);\n+        fx.bcx.ins().trapnz(true_, TrapCode::UnreachableCodeReached);\n+        // Return a dummy value\n+        return CValue::by_ref(Pointer::const_addr(fx, 0), dest_layout);\n     }\n \n     let (tag_scalar, tag_field, tag_encoding) = match &layout.variants {"}, {"sha": "6c22296db716d297cf02b57e5f5fac7ddfe1fba4", "filename": "compiler/rustc_codegen_cranelift/src/driver/jit.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -3,7 +3,6 @@\n \n use std::cell::RefCell;\n use std::ffi::CString;\n-use std::lazy::SyncOnceCell;\n use std::os::raw::{c_char, c_int};\n use std::sync::{mpsc, Mutex};\n \n@@ -14,6 +13,9 @@ use rustc_span::Symbol;\n \n use cranelift_jit::{JITBuilder, JITModule};\n \n+// FIXME use std::lazy::SyncOnceCell once it stabilizes\n+use once_cell::sync::OnceCell;\n+\n use crate::{prelude::*, BackendConfig};\n use crate::{CodegenCx, CodegenMode};\n \n@@ -27,8 +29,7 @@ thread_local! {\n }\n \n /// The Sender owned by the rustc thread\n-static GLOBAL_MESSAGE_SENDER: SyncOnceCell<Mutex<mpsc::Sender<UnsafeMessage>>> =\n-    SyncOnceCell::new();\n+static GLOBAL_MESSAGE_SENDER: OnceCell<Mutex<mpsc::Sender<UnsafeMessage>>> = OnceCell::new();\n \n /// A message that is sent from the jitted runtime to the rustc thread.\n /// Senders are responsible for upholding `Send` semantics."}, {"sha": "0e4f7ee907a5146bb8347a2d65f2564657af264c", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/llvm.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fllvm.rs?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -126,12 +126,9 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         };\n     }\n \n-    if let Some((_, dest)) = destination {\n-        let ret_block = fx.get_block(dest);\n-        fx.bcx.ins().jump(ret_block, &[]);\n-    } else {\n-        trap_unreachable(fx, \"[corruption] Diverging intrinsic returned.\");\n-    }\n+    let dest = destination.expect(\"all llvm intrinsics used by stdlib should return\").1;\n+    let ret_block = fx.get_block(dest);\n+    fx.bcx.ins().jump(ret_block, &[]);\n }\n \n // llvm.x86.avx2.vperm2i128"}, {"sha": "310d27c6decf6c87e66bd21a5148912eb0c9f070", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 51, "deletions": 31, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -1,46 +1,32 @@\n //! Codegen of intrinsics. This includes `extern \"rust-intrinsic\"`, `extern \"platform-intrinsic\"`\n //! and LLVM intrinsics that have symbol names starting with `llvm.`.\n \n-mod cpuid;\n-mod llvm;\n-mod simd;\n-\n-pub(crate) use cpuid::codegen_cpuid_call;\n-pub(crate) use llvm::codegen_llvm_intrinsic_call;\n-\n-use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::subst::SubstsRef;\n-use rustc_span::symbol::{kw, sym, Symbol};\n-\n-use crate::prelude::*;\n-use cranelift_codegen::ir::AtomicRmwOp;\n-\n-macro intrinsic_pat {\n+macro_rules! intrinsic_pat {\n     (_) => {\n         _\n-    },\n+    };\n     ($name:ident) => {\n         sym::$name\n-    },\n+    };\n     (kw.$name:ident) => {\n         kw::$name\n-    },\n+    };\n     ($name:literal) => {\n         $name\n-    },\n+    };\n }\n \n-macro intrinsic_arg {\n-    (o $fx:expr, $arg:ident) => {},\n+macro_rules! intrinsic_arg {\n+    (o $fx:expr, $arg:ident) => {};\n     (c $fx:expr, $arg:ident) => {\n         let $arg = codegen_operand($fx, $arg);\n-    },\n+    };\n     (v $fx:expr, $arg:ident) => {\n         let $arg = codegen_operand($fx, $arg).load_scalar($fx);\n-    }\n+    };\n }\n \n-macro intrinsic_match {\n+macro_rules! intrinsic_match {\n     ($fx:expr, $intrinsic:expr, $args:expr,\n     _ => $unknown:block;\n     $(\n@@ -62,6 +48,20 @@ macro intrinsic_match {\n     }\n }\n \n+mod cpuid;\n+mod llvm;\n+mod simd;\n+\n+pub(crate) use cpuid::codegen_cpuid_call;\n+pub(crate) use llvm::codegen_llvm_intrinsic_call;\n+\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n+use rustc_middle::ty::subst::SubstsRef;\n+use rustc_span::symbol::{kw, sym, Symbol};\n+\n+use crate::prelude::*;\n+use cranelift_codegen::ir::AtomicRmwOp;\n+\n fn report_atomic_type_validation_error<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     intrinsic: Symbol,\n@@ -229,7 +229,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             // Insert non returning intrinsics here\n             match intrinsic {\n                 sym::abort => {\n-                    trap_abort(fx, \"Called intrinsic::abort.\");\n+                    fx.bcx.ins().trap(TrapCode::User(0));\n                 }\n                 sym::transmute => {\n                     crate::base::codegen_panic(fx, \"Transmuting to uninhabited type.\", span);\n@@ -749,6 +749,18 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         _ if intrinsic.as_str().starts_with(\"atomic_load\"), (v ptr) {\n             let ty = substs.type_at(0);\n             match ty.kind() {\n+                ty::Uint(UintTy::U128) | ty::Int(IntTy::I128) => {\n+                    // FIXME implement 128bit atomics\n+                    if fx.tcx.is_compiler_builtins(LOCAL_CRATE) {\n+                        // special case for compiler-builtins to avoid having to patch it\n+                        crate::trap::trap_unimplemented(fx, \"128bit atomics not yet supported\");\n+                        let ret_block = fx.get_block(destination.unwrap().1);\n+                        fx.bcx.ins().jump(ret_block, &[]);\n+                        return;\n+                    } else {\n+                        fx.tcx.sess.span_fatal(span, \"128bit atomics not yet supported\");\n+                    }\n+                }\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n                 _ => {\n                     report_atomic_type_validation_error(fx, intrinsic, span, ty);\n@@ -765,6 +777,18 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         _ if intrinsic.as_str().starts_with(\"atomic_store\"), (v ptr, c val) {\n             let ty = substs.type_at(0);\n             match ty.kind() {\n+                ty::Uint(UintTy::U128) | ty::Int(IntTy::I128) => {\n+                    // FIXME implement 128bit atomics\n+                    if fx.tcx.is_compiler_builtins(LOCAL_CRATE) {\n+                        // special case for compiler-builtins to avoid having to patch it\n+                        crate::trap::trap_unimplemented(fx, \"128bit atomics not yet supported\");\n+                        let ret_block = fx.get_block(destination.unwrap().1);\n+                        fx.bcx.ins().jump(ret_block, &[]);\n+                        return;\n+                    } else {\n+                        fx.tcx.sess.span_fatal(span, \"128bit atomics not yet supported\");\n+                    }\n+                }\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n                 _ => {\n                     report_atomic_type_validation_error(fx, intrinsic, span, ty);\n@@ -1115,10 +1139,6 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         };\n     }\n \n-    if let Some((_, dest)) = destination {\n-        let ret_block = fx.get_block(dest);\n-        fx.bcx.ins().jump(ret_block, &[]);\n-    } else {\n-        trap_unreachable(fx, \"[corruption] Diverging intrinsic returned.\");\n-    }\n+    let ret_block = fx.get_block(destination.unwrap().1);\n+    fx.bcx.ins().jump(ret_block, &[]);\n }"}, {"sha": "bc21d736166277ce3f664fe926b17adb34841578", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/simd.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -409,6 +409,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_reduce_add_ordered | simd_reduce_add_unordered, (c v, v acc) {\n+            // FIXME there must be no acc param for integer vectors\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;\n@@ -424,6 +425,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_reduce_mul_ordered | simd_reduce_mul_unordered, (c v, v acc) {\n+            // FIXME there must be no acc param for integer vectors\n             if !v.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n                 return;"}, {"sha": "878b9390e1318c6c650cf56fb0ed6a3b1c132682", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -1,5 +1,5 @@\n-#![feature(rustc_private, decl_macro)]\n-#![cfg_attr(feature = \"jit\", feature(never_type, vec_into_raw_parts, once_cell))]\n+#![feature(rustc_private)]\n+// Note: please avoid adding other feature gates where possible\n #![warn(rust_2018_idioms)]\n #![warn(unused_lifetimes)]\n #![warn(unreachable_pub)]\n@@ -105,7 +105,6 @@ mod prelude {\n     pub(crate) use crate::common::*;\n     pub(crate) use crate::debuginfo::{DebugContext, UnwindContext};\n     pub(crate) use crate::pointer::Pointer;\n-    pub(crate) use crate::trap::*;\n     pub(crate) use crate::value_and_place::{CPlace, CPlaceInner, CValue};\n }\n \n@@ -196,7 +195,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             CodegenMode::Aot => driver::aot::run_aot(tcx, config, metadata, need_metadata_module),\n             CodegenMode::Jit | CodegenMode::JitLazy => {\n                 #[cfg(feature = \"jit\")]\n-                let _: ! = driver::jit::run_jit(tcx, config);\n+                driver::jit::run_jit(tcx, config);\n \n                 #[cfg(not(feature = \"jit\"))]\n                 tcx.sess.fatal(\"jit support was disabled when compiling rustc_codegen_cranelift\");\n@@ -301,7 +300,10 @@ fn build_isa(sess: &Session, backend_config: &BackendConfig) -> Box<dyn isa::Tar\n         }\n     };\n \n-    isa_builder.finish(flags)\n+    match isa_builder.finish(flags) {\n+        Ok(target_isa) => target_isa,\n+        Err(err) => sess.fatal(&format!(\"failed to build TargetIsa: {}\", err)),\n+    }\n }\n \n /// This is the entrypoint for a hot plugged rustc_codegen_cranelift"}, {"sha": "923269c4de9ab8993fcf5e564f0a0a7f2f11dea4", "filename": "compiler/rustc_codegen_cranelift/src/trap.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftrap.rs?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -25,12 +25,6 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, '_>, msg: &str) {\n     fx.bcx.ins().call(puts, &[msg_ptr]);\n }\n \n-/// Trap code: user1\n-pub(crate) fn trap_abort(fx: &mut FunctionCx<'_, '_, '_>, msg: impl AsRef<str>) {\n-    codegen_print(fx, msg.as_ref());\n-    fx.bcx.ins().trap(TrapCode::User(1));\n-}\n-\n /// Use this for example when a function call should never return. This will fill the current block,\n /// so you can **not** add instructions to it afterwards.\n ///\n@@ -39,21 +33,6 @@ pub(crate) fn trap_unreachable(fx: &mut FunctionCx<'_, '_, '_>, msg: impl AsRef<\n     codegen_print(fx, msg.as_ref());\n     fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n }\n-\n-/// Like `trap_unreachable` but returns a fake value of the specified type.\n-///\n-/// Trap code: user65535\n-pub(crate) fn trap_unreachable_ret_value<'tcx>(\n-    fx: &mut FunctionCx<'_, '_, 'tcx>,\n-    dest_layout: TyAndLayout<'tcx>,\n-    msg: impl AsRef<str>,\n-) -> CValue<'tcx> {\n-    codegen_print(fx, msg.as_ref());\n-    let true_ = fx.bcx.ins().iconst(types::I32, 1);\n-    fx.bcx.ins().trapnz(true_, TrapCode::UnreachableCodeReached);\n-    CValue::by_ref(Pointer::const_addr(fx, 0), dest_layout)\n-}\n-\n /// Use this when something is unimplemented, but `libcore` or `libstd` requires it to codegen.\n /// Unlike `trap_unreachable` this will not fill the current block, so you **must** add instructions\n /// to it afterwards."}, {"sha": "f177b91c2c4876a4ac7b62dd653a3e4ea0857453", "filename": "compiler/rustc_codegen_cranelift/y.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/compiler%2Frustc_codegen_cranelift%2Fy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fy.rs?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -1,9 +1,9 @@\n #!/usr/bin/env bash\n-#![allow()] /*This line is ignored by bash\n+#![deny(unsafe_code)] /*This line is ignored by bash\n # This block is ignored by rustc\n set -e\n echo \"[BUILD] y.rs\" 1>&2\n-rustc $0 -o ${0/.rs/.bin} -g\n+rustc $0 -o ${0/.rs/.bin} -Cdebuginfo=1\n exec ${0/.rs/.bin} $@\n */\n "}, {"sha": "ab4be43e49549ff12dbdb210e996cc32b03084ff", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4767ccec935824fa5d08ce3502b233d7a66adec1/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4767ccec935824fa5d08ce3502b233d7a66adec1/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=4767ccec935824fa5d08ce3502b233d7a66adec1", "patch": "@@ -258,6 +258,7 @@ const PERMITTED_CRANELIFT_DEPENDENCIES: &[&str] = &[\n     \"mach\",\n     \"memchr\",\n     \"object\",\n+    \"once_cell\",\n     \"regalloc\",\n     \"region\",\n     \"rustc-hash\","}]}