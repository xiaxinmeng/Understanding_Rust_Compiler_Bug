{"sha": "acc4e564feb5151ca02070e0890e428d7967b8b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYzRlNTY0ZmViNTE1MWNhMDIwNzBlMDg5MGU0MjhkNzk2N2I4YjQ=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2019-07-06T22:02:27Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2019-07-06T22:04:18Z"}, "message": "in which we suggest anonymizing single-use lifetimes in paths", "tree": {"sha": "f26f265ffba5e6aecef81427acac7a78f469e949", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f26f265ffba5e6aecef81427acac7a78f469e949"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acc4e564feb5151ca02070e0890e428d7967b8b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acc4e564feb5151ca02070e0890e428d7967b8b4", "html_url": "https://github.com/rust-lang/rust/commit/acc4e564feb5151ca02070e0890e428d7967b8b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acc4e564feb5151ca02070e0890e428d7967b8b4/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e12d682dde0adbbde3d49dd202b223deb1ceec89", "url": "https://api.github.com/repos/rust-lang/rust/commits/e12d682dde0adbbde3d49dd202b223deb1ceec89", "html_url": "https://github.com/rust-lang/rust/commit/e12d682dde0adbbde3d49dd202b223deb1ceec89"}], "stats": {"total": 100, "additions": 73, "deletions": 27}, "files": [{"sha": "beb8061842dd357ff3c65e95f5b1e0b4c874d950", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 56, "deletions": 25, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/acc4e564feb5151ca02070e0890e428d7967b8b4/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc4e564feb5151ca02070e0890e428d7967b8b4/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=acc4e564feb5151ca02070e0890e428d7967b8b4", "patch": "@@ -9,7 +9,7 @@ use crate::hir::def::{Res, DefKind};\n use crate::hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use crate::hir::map::Map;\n use crate::hir::ptr::P;\n-use crate::hir::{GenericArg, GenericParam, ItemLocalId, LifetimeName, Node, ParamName};\n+use crate::hir::{GenericArg, GenericParam, ItemLocalId, LifetimeName, Node, ParamName, QPath};\n use crate::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n \n use crate::rustc::lint;\n@@ -1458,10 +1458,10 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     }\n \n     // helper method to issue suggestions from `fn rah<'a>(&'a T)` to `fn rah(&T)`\n+    // or from `fn rah<'a>(T<'a>)` to `fn rah(T<'_>)`\n     fn suggest_eliding_single_use_lifetime(\n         &self, err: &mut DiagnosticBuilder<'_>, def_id: DefId, lifetime: &hir::Lifetime\n     ) {\n-        // FIXME: future work: also suggest `impl Foo<'_>` for `impl<'a> Foo<'a>`\n         let name = lifetime.name.ident();\n         let mut remove_decl = None;\n         if let Some(parent_def_id) = self.tcx.parent(def_id) {\n@@ -1471,18 +1471,38 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n \n         let mut remove_use = None;\n+        let mut elide_use = None;\n         let mut find_arg_use_span = |inputs: &hir::HirVec<hir::Ty>| {\n             for input in inputs {\n-                if let hir::TyKind::Rptr(lt, _) = input.node {\n-                    if lt.name.ident() == name {\n-                        // include the trailing whitespace between the ampersand and the type name\n-                        let lt_through_ty_span = lifetime.span.to(input.span.shrink_to_hi());\n-                        remove_use = Some(\n-                            self.tcx.sess.source_map()\n-                                .span_until_non_whitespace(lt_through_ty_span)\n-                        );\n-                        break;\n+                match input.node {\n+                    hir::TyKind::Rptr(lt, _) => {\n+                        if lt.name.ident() == name {\n+                            // include the trailing whitespace between the lifetime and type names\n+                            let lt_through_ty_span = lifetime.span.to(input.span.shrink_to_hi());\n+                            remove_use = Some(\n+                                self.tcx.sess.source_map()\n+                                    .span_until_non_whitespace(lt_through_ty_span)\n+                            );\n+                            break;\n+                        }\n                     }\n+                    hir::TyKind::Path(ref qpath) => {\n+                        if let QPath::Resolved(_, path) = qpath {\n+\n+                            let last_segment = &path.segments[path.segments.len()-1];\n+                            let generics = last_segment.generic_args();\n+                            for arg in generics.args.iter() {\n+                                if let GenericArg::Lifetime(lt) = arg {\n+                                    if lt.name.ident() == name {\n+                                        elide_use = Some(lt.span);\n+                                        break;\n+                                    }\n+                                }\n+                            }\n+                            break;\n+                        }\n+                    },\n+                    _ => {}\n                 }\n             }\n         };\n@@ -1506,24 +1526,35 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         }\n \n-        if let (Some(decl_span), Some(use_span)) = (remove_decl, remove_use) {\n-            // if both declaration and use deletion spans start at the same\n-            // place (\"start at\" because the latter includes trailing\n-            // whitespace), then this is an in-band lifetime\n-            if decl_span.shrink_to_lo() == use_span.shrink_to_lo() {\n-                err.span_suggestion(\n-                    use_span,\n-                    \"elide the single-use lifetime\",\n-                    String::new(),\n-                    Applicability::MachineApplicable,\n-                );\n-            } else {\n+        let msg = \"elide the single-use lifetime\";\n+        match (remove_decl, remove_use, elide_use) {\n+            (Some(decl_span), Some(use_span), None) => {\n+                // if both declaration and use deletion spans start at the same\n+                // place (\"start at\" because the latter includes trailing\n+                // whitespace), then this is an in-band lifetime\n+                if decl_span.shrink_to_lo() == use_span.shrink_to_lo() {\n+                    err.span_suggestion(\n+                        use_span,\n+                        msg,\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                } else {\n+                    err.multipart_suggestion(\n+                        msg,\n+                        vec![(decl_span, String::new()), (use_span, String::new())],\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n+            (Some(decl_span), None, Some(use_span)) => {\n                 err.multipart_suggestion(\n-                    \"elide the single-use lifetime\",\n-                    vec![(decl_span, String::new()), (use_span, String::new())],\n+                    msg,\n+                    vec![(decl_span, String::new()), (use_span, \"'_\".to_owned())],\n                     Applicability::MachineApplicable,\n                 );\n             }\n+            _ => {}\n         }\n     }\n "}, {"sha": "ff9d6bd01c670408af474473851ac16dc8697ee4", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/acc4e564feb5151ca02070e0890e428d7967b8b4/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc4e564feb5151ca02070e0890e428d7967b8b4/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.rs?ref=acc4e564feb5151ca02070e0890e428d7967b8b4", "patch": "@@ -13,7 +13,10 @@ struct Single<'a> { x: &'a u32 }\n struct Double<'a, 'b> { f: &'a &'b u32 }\n \n fn center<'m>(_: Single<'m>) {} //~ ERROR `'m` only used once\n+//~^ HELP elide the single-use lifetime\n fn left<'x, 'y>(foo: Double<'x, 'y>) -> &'x u32 { foo.f } //~ ERROR `'y` only used once\n+//~^ HELP elide the single-use lifetime\n fn right<'x, 'y>(foo: Double<'x, 'y>) -> &'y u32 { foo.f } //~ ERROR `'x` only used once\n+//~^ HELP elide the single-use lifetime\n \n fn main() { }"}, {"sha": "faaa7e2f1b01b60640938f6218efbc630123af20", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/acc4e564feb5151ca02070e0890e428d7967b8b4/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acc4e564feb5151ca02070e0890e428d7967b8b4/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr?ref=acc4e564feb5151ca02070e0890e428d7967b8b4", "patch": "@@ -23,18 +23,30 @@ LL | fn center<'m>(_: Single<'m>) {}\n    |           ^^            -- ...is used only here\n    |           |\n    |           this lifetime...\n+help: elide the single-use lifetime\n+   |\n+LL | fn center(_: Single<'_>) {}\n+   |         --          ^^\n \n error: lifetime parameter `'y` only used once\n-  --> $DIR/one-use-in-fn-argument.rs:16:13\n+  --> $DIR/one-use-in-fn-argument.rs:17:13\n    |\n LL | fn left<'x, 'y>(foo: Double<'x, 'y>) -> &'x u32 { foo.f }\n    |             ^^ this lifetime... -- ...is used only here\n+help: elide the single-use lifetime\n+   |\n+LL | fn left<'x>(foo: Double<'x, '_>) -> &'x u32 { foo.f }\n+   |          --                 ^^\n \n error: lifetime parameter `'x` only used once\n-  --> $DIR/one-use-in-fn-argument.rs:17:10\n+  --> $DIR/one-use-in-fn-argument.rs:19:10\n    |\n LL | fn right<'x, 'y>(foo: Double<'x, 'y>) -> &'y u32 { foo.f }\n    |          ^^ this lifetime... -- ...is used only here\n+help: elide the single-use lifetime\n+   |\n+LL | fn right<'y>(foo: Double<'_, 'y>) -> &'y u32 { foo.f }\n+   |         --               ^^\n \n error: aborting due to 4 previous errors\n "}]}