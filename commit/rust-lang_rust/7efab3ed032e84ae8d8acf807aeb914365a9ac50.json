{"sha": "7efab3ed032e84ae8d8acf807aeb914365a9ac50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZmFiM2VkMDMyZTg0YWU4ZDhhY2Y4MDdhZWI5MTQzNjVhOWFjNTA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-04T17:44:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-04T17:44:37Z"}, "message": "Merge #6723\n\n6723: Use correct, full substs for self type in impl r=flodiebold a=flodiebold\n\nWithout arbitrary self types, the self type could never refer to the method type parameters, so this wasn't a problem; but with arbitrary self types, it can.\r\n\r\nThis fixes the crash from #6668; but it doesn't make method resolution work for these methods.\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>", "tree": {"sha": "60a3fa0fdd2162092c6a97f960da677150889bda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60a3fa0fdd2162092c6a97f960da677150889bda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7efab3ed032e84ae8d8acf807aeb914365a9ac50", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfynWFCRBK7hj4Ov3rIwAAdHIIAHn0Fk9pff5f4XanNOcTYnmt\nEZPYHU2DMvUEZl+86QFTL5coHhqtXTwBJaaiRnXas4GNwVGHNxGZCYwBj27XIadd\nV8c8qGAx0qssH7FmG6g1UVEVBQ2moup2lXT0ZpVtkMyoNFpFJdk3Q/9IjKSMAPVe\neurxdERGLw2T1HlB1WAWhW1VAvnb7i2WElZXGRTV6Y5jlCT83C8Qkdq9dq0SC2HU\n+Oeite68nYissJV3WSrGDxjbd74RrhB/s29FPwMt9X9oBSVjVwqtg2k1FFDjioyI\nzbltkR3RyE9+pCBMhAJRYgJlowDl76JGMlzNXy4sNebG4eD9hT1jER3Grm3/O1w=\n=DQID\n-----END PGP SIGNATURE-----\n", "payload": "tree 60a3fa0fdd2162092c6a97f960da677150889bda\nparent 6943b530235df98c1ceec27d7f80a974511d3c7e\nparent e5fd550dfdc7b67e22b0889983c5698439dc0bd5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607103877 +0000\ncommitter GitHub <noreply@github.com> 1607103877 +0000\n\nMerge #6723\n\n6723: Use correct, full substs for self type in impl r=flodiebold a=flodiebold\n\nWithout arbitrary self types, the self type could never refer to the method type parameters, so this wasn't a problem; but with arbitrary self types, it can.\r\n\r\nThis fixes the crash from #6668; but it doesn't make method resolution work for these methods.\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7efab3ed032e84ae8d8acf807aeb914365a9ac50", "html_url": "https://github.com/rust-lang/rust/commit/7efab3ed032e84ae8d8acf807aeb914365a9ac50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7efab3ed032e84ae8d8acf807aeb914365a9ac50/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6943b530235df98c1ceec27d7f80a974511d3c7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6943b530235df98c1ceec27d7f80a974511d3c7e", "html_url": "https://github.com/rust-lang/rust/commit/6943b530235df98c1ceec27d7f80a974511d3c7e"}, {"sha": "e5fd550dfdc7b67e22b0889983c5698439dc0bd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5fd550dfdc7b67e22b0889983c5698439dc0bd5", "html_url": "https://github.com/rust-lang/rust/commit/e5fd550dfdc7b67e22b0889983c5698439dc0bd5"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "8a289f52a6514456a8a5ac9d63349f5337fd254f", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7efab3ed032e84ae8d8acf807aeb914365a9ac50/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7efab3ed032e84ae8d8acf807aeb914365a9ac50/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=7efab3ed032e84ae8d8acf807aeb914365a9ac50", "patch": "@@ -720,7 +720,13 @@ fn transform_receiver_ty(\n             .push(self_ty.value.clone())\n             .fill_with_unknown()\n             .build(),\n-        AssocContainerId::ImplId(impl_id) => inherent_impl_substs(db, impl_id, &self_ty)?,\n+        AssocContainerId::ImplId(impl_id) => {\n+            let impl_substs = inherent_impl_substs(db, impl_id, &self_ty)?;\n+            Substs::build_for_def(db, function_id)\n+                .use_parent_substs(&impl_substs)\n+                .fill_with_unknown()\n+                .build()\n+        }\n         AssocContainerId::ContainerId(_) => unreachable!(),\n     };\n     let sig = db.callable_item_signature(function_id.into());"}, {"sha": "a6a54e542a92cb22cf1b5739289cf5100f8a488d", "filename": "crates/hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7efab3ed032e84ae8d8acf807aeb914365a9ac50/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7efab3ed032e84ae8d8acf807aeb914365a9ac50/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=7efab3ed032e84ae8d8acf807aeb914365a9ac50", "patch": "@@ -1087,3 +1087,22 @@ fn method_resolution_foreign_opaque_type() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn method_with_allocator_box_self_type() {\n+    check_types(\n+        r#\"\n+struct Slice<T> {}\n+struct Box<T, A> {}\n+\n+impl<T> Slice<T> {\n+    pub fn into_vec<A>(self: Box<Self, A>) { }\n+}\n+\n+fn main() {\n+    let foo: Slice<u32>;\n+    (foo.into_vec()); // we don't actually support arbitrary self types, but we shouldn't crash at least\n+} //^ {unknown}\n+\"#,\n+    );\n+}"}]}