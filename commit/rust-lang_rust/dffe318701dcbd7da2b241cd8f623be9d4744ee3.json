{"sha": "dffe318701dcbd7da2b241cd8f623be9d4744ee3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZmUzMTg3MDFkY2JkN2RhMmIyNDFjZDhmNjIzYmU5ZDQ3NDRlZTM=", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-03-02T19:49:13Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-03-02T19:49:13Z"}, "message": "Formatting", "tree": {"sha": "29be75165a18d24d5e2e01b28fad1c2e56367c1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29be75165a18d24d5e2e01b28fad1c2e56367c1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dffe318701dcbd7da2b241cd8f623be9d4744ee3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dffe318701dcbd7da2b241cd8f623be9d4744ee3", "html_url": "https://github.com/rust-lang/rust/commit/dffe318701dcbd7da2b241cd8f623be9d4744ee3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dffe318701dcbd7da2b241cd8f623be9d4744ee3/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3a252b559489fa4fb21d9b5d1ddf83fe8e825d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3a252b559489fa4fb21d9b5d1ddf83fe8e825d7", "html_url": "https://github.com/rust-lang/rust/commit/d3a252b559489fa4fb21d9b5d1ddf83fe8e825d7"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "0a5bbf6b1d9cb244dd31218c0dd74e49233c6297", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dffe318701dcbd7da2b241cd8f623be9d4744ee3/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffe318701dcbd7da2b241cd8f623be9d4744ee3/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=dffe318701dcbd7da2b241cd8f623be9d4744ee3", "patch": "@@ -9,7 +9,10 @@ use crate::{MacroRulesError, Result};\n use crate::tt_cursor::TtCursor;\n \n pub(crate) fn expand(rules: &crate::MacroRules, input: &tt::Subtree) -> Result<tt::Subtree> {\n-    rules.rules.iter().find_map(|it| expand_rule(it, input).ok())\n+    rules\n+        .rules\n+        .iter()\n+        .find_map(|it| expand_rule(it, input).ok())\n         .ok_or(MacroRulesError::NoMatchingRule)\n }\n \n@@ -80,21 +83,24 @@ enum Binding {\n \n impl Bindings {\n     fn get(&self, name: &SmolStr, nesting: &[usize]) -> Result<&tt::TokenTree> {\n-        let mut b = self.inner.get(name).ok_or(MacroRulesError::BindingError(\n-            format!(\"could not find binding {}\", name)\n-        ))?;\n+        let mut b = self\n+            .inner\n+            .get(name)\n+            .ok_or(MacroRulesError::BindingError(format!(\"could not find binding {}\", name)))?;\n         for &idx in nesting.iter() {\n             b = match b {\n                 Binding::Simple(_) => break,\n                 Binding::Nested(bs) => bs.get(idx).ok_or(MacroRulesError::BindingError(\n-                    format!(\"could not find nested binding {}\", name))\n-                )?,\n+                    format!(\"could not find nested binding {}\", name),\n+                ))?,\n             };\n         }\n         match b {\n             Binding::Simple(it) => Ok(it),\n-            Binding::Nested(_) => Err(MacroRulesError::BindingError(\n-                    format!(\"expected simple binding, found nested binding {}\", name))),\n+            Binding::Nested(_) => Err(MacroRulesError::BindingError(format!(\n+                \"expected simple binding, found nested binding {}\",\n+                name\n+            ))),\n         }\n     }\n \n@@ -105,8 +111,12 @@ impl Bindings {\n             }\n             match self.inner.get_mut(&key) {\n                 Some(Binding::Nested(it)) => it.push(value),\n-                _ => return Err(MacroRulesError::BindingError(\n-                    format!(\"nested binding for {} not found\", key))),\n+                _ => {\n+                    return Err(MacroRulesError::BindingError(format!(\n+                        \"nested binding for {} not found\",\n+                        key\n+                    )))\n+                }\n             }\n         }\n         Ok(())"}]}