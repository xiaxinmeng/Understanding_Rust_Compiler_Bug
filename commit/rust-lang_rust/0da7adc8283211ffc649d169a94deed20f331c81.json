{"sha": "0da7adc8283211ffc649d169a94deed20f331c81", "node_id": "C_kwDOAAsO6NoAKDBkYTdhZGM4MjgzMjExZmZjNjQ5ZDE2OWE5NGRlZWQyMGYzMzFjODE", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-02-08T09:42:22Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-02-18T08:11:23Z"}, "message": "rustdoc: Collect traits in scope for lang items", "tree": {"sha": "5bb0320bf50bcde430936a8ef8e062fb3bf03da6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bb0320bf50bcde430936a8ef8e062fb3bf03da6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0da7adc8283211ffc649d169a94deed20f331c81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0da7adc8283211ffc649d169a94deed20f331c81", "html_url": "https://github.com/rust-lang/rust/commit/0da7adc8283211ffc649d169a94deed20f331c81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0da7adc8283211ffc649d169a94deed20f331c81/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f838a425e3134d036a7d9632935111a569ac7446", "url": "https://api.github.com/repos/rust-lang/rust/commits/f838a425e3134d036a7d9632935111a569ac7446", "html_url": "https://github.com/rust-lang/rust/commit/f838a425e3134d036a7d9632935111a569ac7446"}], "stats": {"total": 63, "additions": 55, "deletions": 8}, "files": [{"sha": "66968c9ba54ab77d9036b3efd031fc3cea8ba2db", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0da7adc8283211ffc649d169a94deed20f331c81/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da7adc8283211ffc649d169a94deed20f331c81/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=0da7adc8283211ffc649d169a94deed20f331c81", "patch": "@@ -1032,13 +1032,11 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     }\n \n     /// Iterates over the language items in the given crate.\n-    fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {\n-        tcx.arena.alloc_from_iter(\n-            self.root\n-                .lang_items\n-                .decode(self)\n-                .map(|(def_index, index)| (self.local_def_id(def_index), index)),\n-        )\n+    fn get_lang_items(self) -> impl Iterator<Item = (DefId, usize)> + 'a {\n+        self.root\n+            .lang_items\n+            .decode(self)\n+            .map(move |(def_index, index)| (self.local_def_id(def_index), index))\n     }\n \n     /// Iterates over the diagnostic items in the given crate."}, {"sha": "7708b5193f4505e9522542715649c4c0b2bac00e", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0da7adc8283211ffc649d169a94deed20f331c81/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da7adc8283211ffc649d169a94deed20f331c81/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=0da7adc8283211ffc649d169a94deed20f331c81", "patch": "@@ -200,7 +200,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         tcx.arena.alloc_slice(&result)\n     }\n     defined_lib_features => { cdata.get_lib_features(tcx) }\n-    defined_lang_items => { cdata.get_lang_items(tcx) }\n+    defined_lang_items => { tcx.arena.alloc_from_iter(cdata.get_lang_items()) }\n     diagnostic_items => { cdata.get_diagnostic_items() }\n     missing_lang_items => { cdata.get_missing_lang_items(tcx) }\n \n@@ -501,6 +501,11 @@ impl CStore {\n     ) -> impl Iterator<Item = (DefId, DefId)> + '_ {\n         self.get_crate_data(cnum).get_inherent_impls()\n     }\n+\n+    /// Decodes all lang items in the crate (for rustdoc).\n+    pub fn lang_items_untracked(&self, cnum: CrateNum) -> impl Iterator<Item = DefId> + '_ {\n+        self.get_crate_data(cnum).get_lang_items().map(|(def_id, _)| def_id)\n+    }\n }\n \n impl CrateStore for CStore {"}, {"sha": "5c11ab1d3beb929a4304daafc0ae191d3e5af906", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0da7adc8283211ffc649d169a94deed20f331c81/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da7adc8283211ffc649d169a94deed20f331c81/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=0da7adc8283211ffc649d169a94deed20f331c81", "patch": "@@ -118,6 +118,7 @@ impl IntraLinkCrateLoader<'_, '_> {\n                 Vec::from_iter(self.resolver.cstore().trait_impls_in_crate_untracked(cnum));\n             let all_inherent_impls =\n                 Vec::from_iter(self.resolver.cstore().inherent_impls_in_crate_untracked(cnum));\n+            let all_lang_items = Vec::from_iter(self.resolver.cstore().lang_items_untracked(cnum));\n \n             // Querying traits in scope is expensive so we try to prune the impl and traits lists\n             // using privacy, private traits and impls from other crates are never documented in\n@@ -141,6 +142,9 @@ impl IntraLinkCrateLoader<'_, '_> {\n                     self.add_traits_in_parent_scope(impl_def_id);\n                 }\n             }\n+            for def_id in all_lang_items {\n+                self.add_traits_in_parent_scope(def_id);\n+            }\n \n             self.all_traits.extend(all_traits);\n             self.all_trait_impls.extend(all_trait_impls.into_iter().map(|(_, def_id, _)| def_id));"}, {"sha": "87ae2f096bb1f967a9879638de03a581dce0f1e0", "filename": "src/test/rustdoc/intra-doc/auxiliary/extern-lang-item-impl-dep.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0da7adc8283211ffc649d169a94deed20f331c81/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fextern-lang-item-impl-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da7adc8283211ffc649d169a94deed20f331c81/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fextern-lang-item-impl-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fextern-lang-item-impl-dep.rs?ref=0da7adc8283211ffc649d169a94deed20f331c81", "patch": "@@ -0,0 +1,29 @@\n+// no-prefer-dynamic\n+\n+#![feature(lang_items)]\n+\n+#![crate_type = \"rlib\"]\n+#![no_std]\n+\n+pub struct DerefsToF64(f64);\n+\n+impl core::ops::Deref for DerefsToF64 {\n+    type Target = f64;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+mod inner {\n+    #[lang = \"f64_runtime\"]\n+    impl f64 {\n+        /// [f64::clone]\n+        pub fn method() {}\n+    }\n+}\n+\n+#[lang = \"eh_personality\"]\n+fn foo() {}\n+\n+#[panic_handler]\n+fn bar(_: &core::panic::PanicInfo) -> ! { loop {} }"}, {"sha": "f64f886f076415b13bb5fdb4aaed8a3e1056adea", "filename": "src/test/rustdoc/intra-doc/extern-lang-item-impl.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0da7adc8283211ffc649d169a94deed20f331c81/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-lang-item-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da7adc8283211ffc649d169a94deed20f331c81/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-lang-item-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-lang-item-impl.rs?ref=0da7adc8283211ffc649d169a94deed20f331c81", "patch": "@@ -0,0 +1,11 @@\n+// Reexport of a structure that derefs to a type with lang item impls having doc links in their\n+// comments. The doc link points to an associated item, so we check that traits in scope for that\n+// link are populated.\n+\n+// aux-build:extern-lang-item-impl-dep.rs\n+\n+#![no_std]\n+\n+extern crate extern_lang_item_impl_dep;\n+\n+pub use extern_lang_item_impl_dep::DerefsToF64;"}]}