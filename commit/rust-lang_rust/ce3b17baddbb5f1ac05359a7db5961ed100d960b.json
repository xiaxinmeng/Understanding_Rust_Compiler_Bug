{"sha": "ce3b17baddbb5f1ac05359a7db5961ed100d960b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlM2IxN2JhZGRiYjVmMWFjMDUzNTlhN2RiNTk2MWVkMTAwZDk2MGI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-02T00:02:22Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-03T02:47:47Z"}, "message": "librustdoc: Remove `fn@`, `fn~`, and `fn&` from compiletest, fuzzer, rustdoc, and rt. rs=defun", "tree": {"sha": "037c90eac2a948aa7b2f245d8782efff58f77e50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/037c90eac2a948aa7b2f245d8782efff58f77e50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce3b17baddbb5f1ac05359a7db5961ed100d960b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce3b17baddbb5f1ac05359a7db5961ed100d960b", "html_url": "https://github.com/rust-lang/rust/commit/ce3b17baddbb5f1ac05359a7db5961ed100d960b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce3b17baddbb5f1ac05359a7db5961ed100d960b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30bb09c0e71d852d0521cc5d4d98096900d5d813", "url": "https://api.github.com/repos/rust-lang/rust/commits/30bb09c0e71d852d0521cc5d4d98096900d5d813", "html_url": "https://github.com/rust-lang/rust/commit/30bb09c0e71d852d0521cc5d4d98096900d5d813"}], "stats": {"total": 91, "additions": 41, "deletions": 50}, "files": [{"sha": "bccaf0ddf601834133e763ed8633ae8deff80640", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=ce3b17baddbb5f1ac05359a7db5961ed100d960b", "patch": "@@ -223,7 +223,7 @@ pub fn make_test_name(config: config, testfile: &Path) -> test::TestName {\n \n pub fn make_test_closure(config: config, testfile: &Path) -> test::TestFn {\n     let testfile = testfile.to_str();\n-    test::DynTestFn(fn~() { runtest::run(config, testfile) })\n+    test::DynTestFn(|| runtest::run(config, testfile))\n }\n \n // Local Variables:"}, {"sha": "afbe0c930cccadb69f80351581139a9a96685540", "filename": "src/libfuzzer/ast_match.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Flibfuzzer%2Fast_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Flibfuzzer%2Fast_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Fast_match.rs?ref=ce3b17baddbb5f1ac05359a7db5961ed100d960b", "patch": "@@ -11,8 +11,9 @@\n use std;\n use vec;\n \n-fn vec_equal<T>(v: ~[T], u: ~[T],\n-                element_equality_test: fn@(&&T, &&T) -> bool) ->\n+fn vec_equal<T>(v: ~[T],\n+                u: ~[T],\n+                element_equality_test: @fn(&&T, &&T) -> bool) ->\n    bool {\n     let Lv = vec::len(v);\n     if Lv != vec::len(u) { return false; }"}, {"sha": "fb4c6400434f3277a1c9d11c4ce077c9cedccdad", "filename": "src/libfuzzer/cycles.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Flibfuzzer%2Fcycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Flibfuzzer%2Fcycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Fcycles.rs?ref=ce3b17baddbb5f1ac05359a7db5961ed100d960b", "patch": "@@ -39,8 +39,8 @@ type pointy = {\n     mut b : ~maybe_pointy,\n     mut c : @maybe_pointy,\n \n-    mut f : fn@()->(),\n-    mut g : fn~()->(),\n+    mut f : @fn()->(),\n+    mut g : ~fn()->(),\n \n     mut m : ~[maybe_pointy],\n     mut n : ~[maybe_pointy],\n@@ -54,8 +54,8 @@ fn empty_pointy() -> @pointy {\n         mut b : ~none,\n         mut c : @none,\n \n-        mut f : fn@()->(){},\n-        mut g : fn~()->(){},\n+        mut f : || {},\n+        mut g : || {},\n \n         mut m : ~[],\n         mut n : ~[],\n@@ -82,7 +82,7 @@ fn test_cycles(r : rand::rng, k: uint, n: uint)\n         if (likelihood(r, k, n)) { v[i].c = @p(choice(r, v)); }\n \n         if (likelihood(r, k, n)) { v[i].f = bind nopP(choice(r, v)); }\n-        //if (false)               { v[i].g = bind (fn~(_x: @pointy) { })(\n+        //if (false)               { v[i].g = bind (|_: @pointy| { })(\n         // choice(r, v)); }\n           // https://github.com/mozilla/rust/issues/1899\n "}, {"sha": "1eb4ff98a6e6dfb2b76f78c0cfe00a32a96249a0", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=ce3b17baddbb5f1ac05359a7db5961ed100d960b", "patch": "@@ -137,7 +137,7 @@ pub fn safe_to_steal_ty(t: @ast::Ty, tm: test_mode) -> bool {\n }\n \n // Not type-parameterized: https://github.com/mozilla/rust/issues/898 (FIXED)\n-pub fn stash_expr_if(c: fn@(@ast::expr, test_mode)->bool,\n+pub fn stash_expr_if(c: @fn(@ast::expr, test_mode)->bool,\n                      es: @mut ~[ast::expr],\n                      e: @ast::expr,\n                      tm: test_mode) {\n@@ -148,7 +148,7 @@ pub fn stash_expr_if(c: fn@(@ast::expr, test_mode)->bool,\n     }\n }\n \n-pub fn stash_ty_if(c: fn@(@ast::Ty, test_mode)->bool,\n+pub fn stash_ty_if(c: @fn(@ast::Ty, test_mode)->bool,\n                    es: @mut ~[ast::Ty],\n                    e: @ast::Ty,\n                    tm: test_mode) {\n@@ -252,7 +252,7 @@ pub fn under(n: uint, it: fn(uint)) {\n     while i < n { it(i); i += 1u; }\n }\n \n-pub fn as_str(f: fn@(+x: io::Writer)) -> ~str {\n+pub fn as_str(f: @fn(+x: io::Writer)) -> ~str {\n     io::with_str_writer(f)\n }\n \n@@ -275,8 +275,8 @@ pub fn check_variants_T<T: Copy>(\n   filename: &Path,\n   thing_label: ~str,\n   things: ~[T],\n-  stringifier: fn@(@T, @syntax::parse::token::ident_interner) -> ~str,\n-  replacer: fn@(ast::crate, uint, T, test_mode) -> ast::crate,\n+  stringifier: @fn(@T, @syntax::parse::token::ident_interner) -> ~str,\n+  replacer: @fn(ast::crate, uint, T, test_mode) -> ast::crate,\n   cx: Context\n   ) {\n     error!(\"%s contains %u %s objects\", filename.to_str(),"}, {"sha": "03410ee30fc735ef90a0b6beefbf204a2e8afaa7", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=ce3b17baddbb5f1ac05359a7db5961ed100d960b", "patch": "@@ -46,12 +46,12 @@ pub struct Ctxt {\n     ast_map: ast_map::map\n }\n \n-type SrvOwner<T> = fn(srv: Srv) -> T;\n-pub type CtxtHandler<T> = fn~(ctxt: Ctxt) -> T;\n-type Parser = fn~(Session, s: ~str) -> @ast::crate;\n+type SrvOwner<T> = &fn(srv: Srv) -> T;\n+pub type CtxtHandler<T> = ~fn(ctxt: Ctxt) -> T;\n+type Parser = ~fn(Session, s: ~str) -> @ast::crate;\n \n enum Msg {\n-    HandleRequest(fn~(Ctxt)),\n+    HandleRequest(~fn(Ctxt)),\n     Exit\n }\n \n@@ -117,12 +117,10 @@ fn act(po: &Port<Msg>, source: ~str, parse: Parser) {\n \n pub fn exec<T:Owned>(\n     srv: Srv,\n-    f: fn~(ctxt: Ctxt) -> T\n+    f: ~fn(ctxt: Ctxt) -> T\n ) -> T {\n     let (po, ch) = stream();\n-    let msg = HandleRequest(fn~(ctxt: Ctxt) {\n-        ch.send(f(ctxt))\n-    });\n+    let msg = HandleRequest(|ctxt| ch.send(f(ctxt)));\n     srv.ch.send(msg);\n     po.recv()\n }"}, {"sha": "28322450c4daabcea07e4ab3a0fbe31fe2e0ff0b", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=ce3b17baddbb5f1ac05359a7db5961ed100d960b", "patch": "@@ -114,7 +114,7 @@ fn fold_item(\n fn parse_item_attrs<T:Owned>(\n     srv: astsrv::Srv,\n     id: doc::AstId,\n-    parse_attrs: fn~(a: ~[ast::attribute]) -> T) -> T {\n+    parse_attrs: ~fn(a: ~[ast::attribute]) -> T) -> T {\n     do astsrv::exec(srv) |ctxt| {\n         let attrs = match ctxt.ast_map.get(&id) {\n           ast_map::node_item(item, _) => copy item.attrs,"}, {"sha": "21c0393f68f6f1791486b675340f406f716b62d9", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=ce3b17baddbb5f1ac05359a7db5961ed100d960b", "patch": "@@ -105,7 +105,7 @@ pub fn default_config(input_crate: &Path) -> Config {\n     }\n }\n \n-type Process = fn~((&str), (&[~str])) -> ProgramOutput;\n+type Process = ~fn((&str), (&[~str])) -> ProgramOutput;\n \n pub fn mock_program_output(_prog: &str, _args: &[~str]) -> ProgramOutput {\n     ProgramOutput {\n@@ -262,11 +262,8 @@ fn should_find_pandoc() {\n         output_format: PandocHtml,\n         .. default_config(&Path(\"test\"))\n     };\n-    let mock_program_output = fn~(_prog: &str, _args: &[~str])\n-        -> ProgramOutput {\n-        ProgramOutput {\n-            status: 0, out: ~\"pandoc 1.8.2.1\", err: ~\"\"\n-        }\n+    let mock_program_output: ~fn(&str, &[~str]) -> ProgramOutput = |prog, _| {\n+        ProgramOutput { status: 0, out: ~\"pandoc 1.8.2.1\", err: ~\"\" }\n     };\n     let result = maybe_find_pandoc(&config, None, mock_program_output);\n     assert result == result::Ok(Some(~\"pandoc\"));\n@@ -278,11 +275,8 @@ fn should_error_with_no_pandoc() {\n         output_format: PandocHtml,\n         .. default_config(&Path(\"test\"))\n     };\n-    let mock_program_output = fn~(_prog: &str, _args: &[~str])\n-        -> ProgramOutput {\n-        ProgramOutput {\n-            status: 1, out: ~\"\", err: ~\"\"\n-        }\n+    let mock_program_output: ~fn(&str, &[~str]) -> ProgramOutput = |_, _| {\n+        ProgramOutput { status: 1, out: ~\"\", err: ~\"\" }\n     };\n     let result = maybe_find_pandoc(&config, None, mock_program_output);\n     assert result == result::Err(~\"couldn't find pandoc\");"}, {"sha": "b37f8f8443e5ef189ff9f3166eda748ed3a6ef75", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=ce3b17baddbb5f1ac05359a7db5961ed100d960b", "patch": "@@ -162,7 +162,6 @@ fn pandoc_header_id(header: &str) -> ~str {\n #[test]\n fn should_remove_punctuation_from_headers() {\n     assert pandoc_header_id(~\"impl foo of bar<A>\") == ~\"impl-foo-of-bara\";\n-    assert pandoc_header_id(~\"fn@(~[~A])\") == ~\"fna\";\n     assert pandoc_header_id(~\"impl of num::num for int\")\n         == ~\"impl-of-numnum-for-int\";\n     assert pandoc_header_id(~\"impl of num::num for int/&\")"}, {"sha": "020073f9b89db261acbf07710f6128fcc74fd0c6", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=ce3b17baddbb5f1ac05359a7db5961ed100d960b", "patch": "@@ -34,8 +34,8 @@ pub enum WriteInstr {\n     Done\n }\n \n-pub type Writer = fn~(v: WriteInstr);\n-pub type WriterFactory = fn~(page: doc::Page) -> Writer;\n+pub type Writer = ~fn(v: WriteInstr);\n+pub type WriterFactory = ~fn(page: doc::Page) -> Writer;\n \n pub trait WriterUtils {\n     fn write_str(&self, +str: ~str);\n@@ -69,15 +69,17 @@ pub fn make_writer_factory(config: config::Config) -> WriterFactory {\n }\n \n fn markdown_writer_factory(config: config::Config) -> WriterFactory {\n-    fn~(page: doc::Page) -> Writer {\n+    let result: ~fn(page: doc::Page) -> Writer = |page| {\n         markdown_writer(copy config, page)\n-    }\n+    };\n+    result\n }\n \n fn pandoc_writer_factory(config: config::Config) -> WriterFactory {\n-    fn~(page: doc::Page) -> Writer {\n+    let result: ~fn(doc::Page) -> Writer = |page| {\n         pandoc_writer(copy config, page)\n-    }\n+    };\n+    result\n }\n \n fn markdown_writer(\n@@ -167,7 +169,7 @@ fn readclose(fd: libc::c_int) -> ~str {\n     }\n }\n \n-fn generic_writer(process: fn~(markdown: ~str)) -> Writer {\n+fn generic_writer(process: ~fn(markdown: ~str)) -> Writer {\n     let (po, ch) = stream::<WriteInstr>();\n     do task::spawn || {\n         let mut markdown = ~\"\";\n@@ -180,9 +182,8 @@ fn generic_writer(process: fn~(markdown: ~str)) -> Writer {\n         }\n         process(markdown);\n     };\n-    fn~(instr: WriteInstr) {\n-        ch.send(instr);\n-    }\n+    let result: ~fn(instr: WriteInstr) = |instr| ch.send(instr);\n+    result\n }\n \n fn make_local_filename(\n@@ -295,7 +296,7 @@ pub fn future_writer_factory(\n ) -> (WriterFactory, Port<(doc::Page, ~str)>) {\n     let (markdown_po, markdown_ch) = stream();\n     let markdown_ch = SharedChan(markdown_ch);\n-    let writer_factory = fn~(page: doc::Page) -> Writer {\n+    let writer_factory: WriterFactory = |page| {\n         let (writer_po, writer_ch) = comm::stream();\n         let markdown_ch = markdown_ch.clone();\n         do task::spawn || {\n@@ -312,9 +313,7 @@ pub fn future_writer_factory(\n \n fn future_writer() -> (Writer, future::Future<~str>) {\n     let (port, chan) = comm::stream();\n-    let writer = fn~(instr: WriteInstr) {\n-        chan.send(copy instr);\n-    };\n+    let writer: ~fn(instr: WriteInstr) = |instr| chan.send(copy instr);\n     let future = do future::from_fn || {\n         let mut res = ~\"\";\n         loop {"}, {"sha": "603480f907c06d6f0d0e85fc6446bda4a46fecdd", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=ce3b17baddbb5f1ac05359a7db5961ed100d960b", "patch": "@@ -926,7 +926,7 @@ pub struct Crate {\n \n pub struct Listener {\n     cmds: ~[~str],\n-    cb: fn~()\n+    cb: ~fn()\n }\n \n pub fn run(listeners: ~[Listener]) {"}, {"sha": "ece0d48c3ae445e33cd977732f9a57f29814428f", "filename": "src/rt/rust_type.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Frt%2Frust_type.h", "raw_url": "https://github.com/rust-lang/rust/raw/ce3b17baddbb5f1ac05359a7db5961ed100d960b/src%2Frt%2Frust_type.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_type.h?ref=ce3b17baddbb5f1ac05359a7db5961ed100d960b", "patch": "@@ -36,7 +36,7 @@ struct rust_opaque_box {\n     rust_opaque_box *next;\n };\n \n-// corresponds to the layout of a fn(), fn@(), fn~() etc\n+// corresponds to the layout of a &fn(), @fn(), ~fn() etc\n struct fn_env_pair {\n     spawn_fn f;\n     rust_opaque_box *env;"}]}