{"sha": "32843ae6f7f91cea88edcec428cb5bad07bd5e98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyODQzYWU2ZjdmOTFjZWE4OGVkY2VjNDI4Y2I1YmFkMDdiZDVlOTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-25T12:28:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-25T12:28:26Z"}, "message": "shorten AstBuilder names", "tree": {"sha": "ad2e00baf0141888e8c1664ac9a2ea99cb553579", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad2e00baf0141888e8c1664ac9a2ea99cb553579"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32843ae6f7f91cea88edcec428cb5bad07bd5e98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32843ae6f7f91cea88edcec428cb5bad07bd5e98", "html_url": "https://github.com/rust-lang/rust/commit/32843ae6f7f91cea88edcec428cb5bad07bd5e98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32843ae6f7f91cea88edcec428cb5bad07bd5e98/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "546f031e4e643c7cc4df44a2a09ac7c4af5e5ad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/546f031e4e643c7cc4df44a2a09ac7c4af5e5ad7", "html_url": "https://github.com/rust-lang/rust/commit/546f031e4e643c7cc4df44a2a09ac7c4af5e5ad7"}], "stats": {"total": 96, "additions": 42, "deletions": 54}, "files": [{"sha": "22d20909d2fca33b451a3778a48090ee072055b5", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/32843ae6f7f91cea88edcec428cb5bad07bd5e98/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32843ae6f7f91cea88edcec428cb5bad07bd5e98/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=32843ae6f7f91cea88edcec428cb5bad07bd5e98", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{\n     SmolStr,\n };\n \n-use crate::{ast_builder::AstBuilder, ast_editor::AstEditor, Assist, AssistCtx, AssistId};\n+use crate::{ast_builder::Make, ast_editor::AstEditor, Assist, AssistCtx, AssistId};\n \n #[derive(PartialEq)]\n enum AddMissingImplMembersMode {\n@@ -102,9 +102,7 @@ fn strip_docstring(item: ast::ImplItem) -> ast::ImplItem {\n fn add_body(fn_def: ast::FnDef) -> ast::FnDef {\n     let mut ast_editor = AstEditor::new(fn_def.clone());\n     if fn_def.body().is_none() {\n-        ast_editor.set_body(&AstBuilder::<ast::Block>::single_expr(\n-            AstBuilder::<ast::Expr>::unimplemented(),\n-        ));\n+        ast_editor.set_body(&Make::<ast::Block>::single_expr(Make::<ast::Expr>::unimplemented()));\n     }\n     ast_editor.ast().to_owned()\n }"}, {"sha": "81743352613fc7c5745e34b58b12dc63d2cf02f6", "filename": "crates/ra_assists/src/assists/fill_match_arms.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/32843ae6f7f91cea88edcec428cb5bad07bd5e98/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32843ae6f7f91cea88edcec428cb5bad07bd5e98/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs?ref=32843ae6f7f91cea88edcec428cb5bad07bd5e98", "patch": "@@ -3,7 +3,7 @@ use std::iter;\n use hir::{db::HirDatabase, Adt, HasSource};\n use ra_syntax::ast::{self, AstNode, NameOwner};\n \n-use crate::{ast_builder::AstBuilder, Assist, AssistCtx, AssistId};\n+use crate::{ast_builder::Make, Assist, AssistCtx, AssistId};\n \n pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let match_expr = ctx.node_at_offset::<ast::MatchExpr>()?;\n@@ -29,13 +29,10 @@ pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n \n     ctx.add_action(AssistId(\"fill_match_arms\"), \"fill match arms\", |edit| {\n         let variants = variant_list.variants();\n-        let arms = variants.filter_map(build_pat).map(|pat| {\n-            AstBuilder::<ast::MatchArm>::from_pieces(\n-                iter::once(pat),\n-                AstBuilder::<ast::Expr>::unit(),\n-            )\n-        });\n-        let new_arm_list = AstBuilder::<ast::MatchArmList>::from_arms(arms);\n+        let arms = variants\n+            .filter_map(build_pat)\n+            .map(|pat| Make::<ast::MatchArm>::from(iter::once(pat), Make::<ast::Expr>::unit()));\n+        let new_arm_list = Make::<ast::MatchArmList>::from_arms(arms);\n \n         edit.target(match_expr.syntax().text_range());\n         edit.set_cursor(expr.syntax().text_range().start());\n@@ -66,21 +63,21 @@ fn resolve_enum_def(\n }\n \n fn build_pat(var: ast::EnumVariant) -> Option<ast::Pat> {\n-    let path = AstBuilder::<ast::Path>::from_pieces(var.parent_enum().name()?, var.name()?);\n+    let path = Make::<ast::Path>::from(var.parent_enum().name()?, var.name()?);\n \n     let pat: ast::Pat = match var.kind() {\n         ast::StructKind::Tuple(field_list) => {\n-            let pats = iter::repeat(AstBuilder::<ast::PlaceholderPat>::placeholder().into())\n+            let pats = iter::repeat(Make::<ast::PlaceholderPat>::placeholder().into())\n                 .take(field_list.fields().count());\n-            AstBuilder::<ast::TupleStructPat>::from_pieces(path, pats).into()\n+            Make::<ast::TupleStructPat>::from(path, pats).into()\n         }\n         ast::StructKind::Named(field_list) => {\n             let pats = field_list\n                 .fields()\n-                .map(|f| AstBuilder::<ast::BindPat>::from_name(f.name().unwrap()).into());\n-            AstBuilder::<ast::RecordPat>::from_pieces(path, pats).into()\n+                .map(|f| Make::<ast::BindPat>::from_name(f.name().unwrap()).into());\n+            Make::<ast::RecordPat>::from(path, pats).into()\n         }\n-        ast::StructKind::Unit => AstBuilder::<ast::PathPat>::from_path(path).into(),\n+        ast::StructKind::Unit => Make::<ast::PathPat>::from_path(path).into(),\n     };\n \n     Some(pat)"}, {"sha": "6fd2fb72bb8fd2a53df158e77c8dd1d99413ac50", "filename": "crates/ra_assists/src/assists/move_bounds.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/32843ae6f7f91cea88edcec428cb5bad07bd5e98/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32843ae6f7f91cea88edcec428cb5bad07bd5e98/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs?ref=32843ae6f7f91cea88edcec428cb5bad07bd5e98", "patch": "@@ -6,7 +6,7 @@ use ra_syntax::{\n     TextRange,\n };\n \n-use crate::{ast_builder::AstBuilder, Assist, AssistCtx, AssistId};\n+use crate::{ast_builder::Make, Assist, AssistCtx, AssistId};\n \n pub(crate) fn move_bounds_to_where_clause(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let type_param_list = ctx.node_at_offset::<ast::TypeParamList>()?;\n@@ -52,7 +52,7 @@ pub(crate) fn move_bounds_to_where_clause(mut ctx: AssistCtx<impl HirDatabase>)\n             }\n \n             let predicates = type_params.iter().filter_map(build_predicate);\n-            let where_clause = AstBuilder::<ast::WhereClause>::from_predicates(predicates);\n+            let where_clause = Make::<ast::WhereClause>::from_predicates(predicates);\n \n             let to_insert = match anchor.prev_sibling_or_token() {\n                 Some(ref elem) if elem.kind() == WHITESPACE => {\n@@ -69,9 +69,8 @@ pub(crate) fn move_bounds_to_where_clause(mut ctx: AssistCtx<impl HirDatabase>)\n }\n \n fn build_predicate(param: &ast::TypeParam) -> Option<ast::WherePred> {\n-    let path = AstBuilder::<ast::Path>::from_name(param.name()?);\n-    let predicate =\n-        AstBuilder::<ast::WherePred>::from_pieces(path, param.type_bound_list()?.bounds());\n+    let path = Make::<ast::Path>::from_name(param.name()?);\n+    let predicate = Make::<ast::WherePred>::from(path, param.type_bound_list()?.bounds());\n     Some(predicate)\n }\n "}, {"sha": "f6409085a80cc31f6331dd0f8923fef49af84316", "filename": "crates/ra_assists/src/ast_builder.rs", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/32843ae6f7f91cea88edcec428cb5bad07bd5e98/crates%2Fra_assists%2Fsrc%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32843ae6f7f91cea88edcec428cb5bad07bd5e98/crates%2Fra_assists%2Fsrc%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_builder.rs?ref=32843ae6f7f91cea88edcec428cb5bad07bd5e98", "patch": "@@ -2,12 +2,12 @@ use itertools::Itertools;\n \n use ra_syntax::{ast, AstNode, SourceFile};\n \n-pub struct AstBuilder<N: AstNode> {\n+pub struct Make<N: AstNode> {\n     _phantom: std::marker::PhantomData<N>,\n }\n \n-impl AstBuilder<ast::RecordField> {\n-    pub fn from_pieces(name: ast::NameRef, expr: Option<ast::Expr>) -> ast::RecordField {\n+impl Make<ast::RecordField> {\n+    pub fn from(name: ast::NameRef, expr: Option<ast::Expr>) -> ast::RecordField {\n         match expr {\n             Some(expr) => Self::from_text(&format!(\"{}: {}\", name.syntax(), expr.syntax())),\n             None => Self::from_text(&name.syntax().to_string()),\n@@ -19,7 +19,7 @@ impl AstBuilder<ast::RecordField> {\n     }\n }\n \n-impl AstBuilder<ast::Block> {\n+impl Make<ast::Block> {\n     pub fn single_expr(e: ast::Expr) -> ast::Block {\n         Self::from_text(&format!(\"{{ {} }}\", e.syntax()))\n     }\n@@ -29,7 +29,7 @@ impl AstBuilder<ast::Block> {\n     }\n }\n \n-impl AstBuilder<ast::Expr> {\n+impl Make<ast::Expr> {\n     pub fn unit() -> ast::Expr {\n         Self::from_text(\"()\")\n     }\n@@ -43,19 +43,19 @@ impl AstBuilder<ast::Expr> {\n     }\n }\n \n-impl AstBuilder<ast::NameRef> {\n+impl Make<ast::NameRef> {\n     pub fn new(text: &str) -> ast::NameRef {\n         ast_node_from_file_text(&format!(\"fn f() {{ {}; }}\", text))\n     }\n }\n \n-impl AstBuilder<ast::Path> {\n+impl Make<ast::Path> {\n     pub fn from_name(name: ast::Name) -> ast::Path {\n         let name = name.syntax().to_string();\n         Self::from_text(name.as_str())\n     }\n \n-    pub fn from_pieces(enum_name: ast::Name, var_name: ast::Name) -> ast::Path {\n+    pub fn from(enum_name: ast::Name, var_name: ast::Name) -> ast::Path {\n         Self::from_text(&format!(\"{}::{}\", enum_name.syntax(), var_name.syntax()))\n     }\n \n@@ -64,7 +64,7 @@ impl AstBuilder<ast::Path> {\n     }\n }\n \n-impl AstBuilder<ast::BindPat> {\n+impl Make<ast::BindPat> {\n     pub fn from_name(name: ast::Name) -> ast::BindPat {\n         Self::from_text(name.text())\n     }\n@@ -74,7 +74,7 @@ impl AstBuilder<ast::BindPat> {\n     }\n }\n \n-impl AstBuilder<ast::PlaceholderPat> {\n+impl Make<ast::PlaceholderPat> {\n     pub fn placeholder() -> ast::PlaceholderPat {\n         Self::from_text(\"_\")\n     }\n@@ -84,11 +84,8 @@ impl AstBuilder<ast::PlaceholderPat> {\n     }\n }\n \n-impl AstBuilder<ast::TupleStructPat> {\n-    pub fn from_pieces(\n-        path: ast::Path,\n-        pats: impl Iterator<Item = ast::Pat>,\n-    ) -> ast::TupleStructPat {\n+impl Make<ast::TupleStructPat> {\n+    pub fn from(path: ast::Path, pats: impl Iterator<Item = ast::Pat>) -> ast::TupleStructPat {\n         let pats_str = pats.map(|p| p.syntax().to_string()).collect::<Vec<_>>().join(\", \");\n         Self::from_text(&format!(\"{}({})\", path.syntax(), pats_str))\n     }\n@@ -98,8 +95,8 @@ impl AstBuilder<ast::TupleStructPat> {\n     }\n }\n \n-impl AstBuilder<ast::RecordPat> {\n-    pub fn from_pieces(path: ast::Path, pats: impl Iterator<Item = ast::Pat>) -> ast::RecordPat {\n+impl Make<ast::RecordPat> {\n+    pub fn from(path: ast::Path, pats: impl Iterator<Item = ast::Pat>) -> ast::RecordPat {\n         let pats_str = pats.map(|p| p.syntax().to_string()).collect::<Vec<_>>().join(\", \");\n         Self::from_text(&format!(\"{}{{ {} }}\", path.syntax(), pats_str))\n     }\n@@ -109,7 +106,7 @@ impl AstBuilder<ast::RecordPat> {\n     }\n }\n \n-impl AstBuilder<ast::PathPat> {\n+impl Make<ast::PathPat> {\n     pub fn from_path(path: ast::Path) -> ast::PathPat {\n         let path_str = path.syntax().text().to_string();\n         Self::from_text(path_str.as_str())\n@@ -120,8 +117,8 @@ impl AstBuilder<ast::PathPat> {\n     }\n }\n \n-impl AstBuilder<ast::MatchArm> {\n-    pub fn from_pieces(pats: impl Iterator<Item = ast::Pat>, expr: ast::Expr) -> ast::MatchArm {\n+impl Make<ast::MatchArm> {\n+    pub fn from(pats: impl Iterator<Item = ast::Pat>, expr: ast::Expr) -> ast::MatchArm {\n         let pats_str = pats.map(|p| p.syntax().to_string()).join(\" | \");\n         Self::from_text(&format!(\"{} => {}\", pats_str, expr.syntax()))\n     }\n@@ -131,7 +128,7 @@ impl AstBuilder<ast::MatchArm> {\n     }\n }\n \n-impl AstBuilder<ast::MatchArmList> {\n+impl Make<ast::MatchArmList> {\n     pub fn from_arms(arms: impl Iterator<Item = ast::MatchArm>) -> ast::MatchArmList {\n         let arms_str = arms.map(|arm| format!(\"\\n    {}\", arm.syntax())).join(\",\");\n         Self::from_text(&format!(\"{},\\n\", arms_str))\n@@ -142,11 +139,8 @@ impl AstBuilder<ast::MatchArmList> {\n     }\n }\n \n-impl AstBuilder<ast::WherePred> {\n-    pub fn from_pieces(\n-        path: ast::Path,\n-        bounds: impl Iterator<Item = ast::TypeBound>,\n-    ) -> ast::WherePred {\n+impl Make<ast::WherePred> {\n+    pub fn from(path: ast::Path, bounds: impl Iterator<Item = ast::TypeBound>) -> ast::WherePred {\n         let bounds = bounds.map(|b| b.syntax().to_string()).collect::<Vec<_>>().join(\" + \");\n         Self::from_text(&format!(\"{}: {}\", path.syntax(), bounds))\n     }\n@@ -156,7 +150,7 @@ impl AstBuilder<ast::WherePred> {\n     }\n }\n \n-impl AstBuilder<ast::WhereClause> {\n+impl Make<ast::WhereClause> {\n     pub fn from_predicates(preds: impl Iterator<Item = ast::WherePred>) -> ast::WhereClause {\n         let preds = preds.map(|p| p.syntax().to_string()).collect::<Vec<_>>().join(\", \");\n         Self::from_text(preds.as_str())"}, {"sha": "06e7ea6da2f0980403b6a2e3630c56ef24e54afc", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32843ae6f7f91cea88edcec428cb5bad07bd5e98/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32843ae6f7f91cea88edcec428cb5bad07bd5e98/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=32843ae6f7f91cea88edcec428cb5bad07bd5e98", "patch": "@@ -2,7 +2,7 @@ use std::cell::RefCell;\n \n use hir::diagnostics::{AstDiagnostic, Diagnostic as _, DiagnosticSink};\n use itertools::Itertools;\n-use ra_assists::{ast_builder::AstBuilder, ast_editor::AstEditor};\n+use ra_assists::{ast_builder::Make, ast_editor::AstEditor};\n use ra_db::SourceDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n@@ -59,9 +59,9 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n         let node = d.ast(db);\n         let mut ast_editor = AstEditor::new(node);\n         for f in d.missed_fields.iter() {\n-            let name_ref = AstBuilder::<ast::NameRef>::new(&f.to_string());\n-            let unit = AstBuilder::<ast::Expr>::unit();\n-            ast_editor.append_field(&AstBuilder::<RecordField>::from_pieces(name_ref, Some(unit)));\n+            let name_ref = Make::<ast::NameRef>::new(&f.to_string());\n+            let unit = Make::<ast::Expr>::unit();\n+            ast_editor.append_field(&Make::<RecordField>::from(name_ref, Some(unit)));\n         }\n \n         let mut builder = TextEditBuilder::default();"}]}