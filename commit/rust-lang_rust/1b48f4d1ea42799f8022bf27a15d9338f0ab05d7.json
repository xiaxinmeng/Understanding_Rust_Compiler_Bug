{"sha": "1b48f4d1ea42799f8022bf27a15d9338f0ab05d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNDhmNGQxZWE0Mjc5OWY4MDIyYmYyN2ExNWQ5MzM4ZjBhYjA1ZDc=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-02T14:36:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-02T14:36:52Z"}, "message": "Rollup merge of #87673 - estebank:opaque-ty-mismatch, r=davidtwco\n\nTweak opaque type mismatch error", "tree": {"sha": "ad71edb583391f425ab7a21daf228f9117a98f57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad71edb583391f425ab7a21daf228f9117a98f57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhCAMFCRBK7hj4Ov3rIwAAGUIIABRcmtmVkaVHwLklnuqQIjPh\nYDwQMWKqDFXow4Rdd66YC5Vhr1i4/rLPbvvQA7cHoyBP79jvgjCnuXtVHDD68eys\n0QhsxlyUXdCGwVi++ZxTyfCOlKiqLVaTNAnwJNuhBUinn80xQQ4G0Nfq9IljP6o1\nfj7E44WweW6XXbiKLm4EvTFcrgYsq9DyDXdx1+VFOjKugc91TN5pMQroLZnGwlmt\nUx+/e9ekNHU21NKCM55EZQVpDWQdRLPWKKxFYAaUT+BYORq+vnZVcwZojoDMhdUF\ncTzYwLpYWL0gKRTEHHYcNpZ73YOgPqdnomL5rsGTCDZIbBNDXbrS1YXJE1yIbH4=\n=27fX\n-----END PGP SIGNATURE-----\n", "payload": "tree ad71edb583391f425ab7a21daf228f9117a98f57\nparent 43800563975dcd69720f1ff34af66d85933a3573\nparent 052084af13cc2b6b80a2db25ec8ed22812a0269b\nauthor Cameron Steffen <cam.steffen94@gmail.com> 1627915012 -0500\ncommitter GitHub <noreply@github.com> 1627915012 -0500\n\nRollup merge of #87673 - estebank:opaque-ty-mismatch, r=davidtwco\n\nTweak opaque type mismatch error\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7", "html_url": "https://github.com/rust-lang/rust/commit/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43800563975dcd69720f1ff34af66d85933a3573", "url": "https://api.github.com/repos/rust-lang/rust/commits/43800563975dcd69720f1ff34af66d85933a3573", "html_url": "https://github.com/rust-lang/rust/commit/43800563975dcd69720f1ff34af66d85933a3573"}, {"sha": "052084af13cc2b6b80a2db25ec8ed22812a0269b", "url": "https://api.github.com/repos/rust-lang/rust/commits/052084af13cc2b6b80a2db25ec8ed22812a0269b", "html_url": "https://github.com/rust-lang/rust/commit/052084af13cc2b6b80a2db25ec8ed22812a0269b"}], "stats": {"total": 196, "additions": 114, "deletions": 82}, "files": [{"sha": "cdc9a21253145747b161011f0621fd5e6f9101d1", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 43, "deletions": 25, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=1b48f4d1ea42799f8022bf27a15d9338f0ab05d7", "patch": "@@ -71,7 +71,7 @@ use rustc_middle::ty::{\n     subst::{GenericArgKind, Subst, SubstsRef},\n     Region, Ty, TyCtxt, TypeFoldable,\n };\n-use rustc_span::{sym, BytePos, DesugaringKind, Pos, Span};\n+use rustc_span::{sym, BytePos, DesugaringKind, MultiSpan, Pos, Span};\n use rustc_target::spec::abi;\n use std::ops::ControlFlow;\n use std::{cmp, fmt, iter};\n@@ -1485,31 +1485,49 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     let count = values.len();\n                     let kind = key.descr();\n                     let mut returned_async_output_error = false;\n-                    for sp in values {\n-                        err.span_label(\n-                            *sp,\n-                            format!(\n-                                \"{}{}{} {}{}\",\n-                                if sp.is_desugaring(DesugaringKind::Async)\n-                                    && !returned_async_output_error\n-                                {\n-                                    \"checked the `Output` of this `async fn`, \"\n-                                } else if count == 1 {\n-                                    \"the \"\n-                                } else {\n-                                    \"\"\n-                                },\n-                                if count > 1 { \"one of the \" } else { \"\" },\n-                                target,\n-                                kind,\n-                                pluralize!(count),\n-                            ),\n-                        );\n-                        if sp.is_desugaring(DesugaringKind::Async)\n-                            && returned_async_output_error == false\n-                        {\n-                            err.note(\"while checking the return type of the `async fn`\");\n+                    for &sp in values {\n+                        if sp.is_desugaring(DesugaringKind::Async) && !returned_async_output_error {\n+                            if &[sp] != err.span.primary_spans() {\n+                                let mut span: MultiSpan = sp.into();\n+                                span.push_span_label(\n+                                    sp,\n+                                    format!(\n+                                        \"checked the `Output` of this `async fn`, {}{} {}{}\",\n+                                        if count > 1 { \"one of the \" } else { \"\" },\n+                                        target,\n+                                        kind,\n+                                        pluralize!(count),\n+                                    ),\n+                                );\n+                                err.span_note(\n+                                    span,\n+                                    \"while checking the return type of the `async fn`\",\n+                                );\n+                            } else {\n+                                err.span_label(\n+                                    sp,\n+                                    format!(\n+                                        \"checked the `Output` of this `async fn`, {}{} {}{}\",\n+                                        if count > 1 { \"one of the \" } else { \"\" },\n+                                        target,\n+                                        kind,\n+                                        pluralize!(count),\n+                                    ),\n+                                );\n+                                err.note(\"while checking the return type of the `async fn`\");\n+                            }\n                             returned_async_output_error = true;\n+                        } else {\n+                            err.span_label(\n+                                sp,\n+                                format!(\n+                                    \"{}{} {}{}\",\n+                                    if count == 1 { \"the \" } else { \"one of the \" },\n+                                    target,\n+                                    kind,\n+                                    pluralize!(count),\n+                                ),\n+                            );\n                         }\n                     }\n                 }"}, {"sha": "4dc5cafb98614ca06db17d11b52e75f3c7d6962d", "filename": "src/test/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=1b48f4d1ea42799f8022bf27a15d9338f0ab05d7", "patch": "@@ -1,13 +1,14 @@\n error[E0308]: mismatched types\n   --> $DIR/dont-suggest-missing-await.rs:14:18\n    |\n-LL | async fn make_u32() -> u32 {\n-   |                        --- checked the `Output` of this `async fn`, found opaque type\n-...\n LL |         take_u32(x)\n    |                  ^ expected `u32`, found opaque type\n    |\n-   = note: while checking the return type of the `async fn`\n+note: while checking the return type of the `async fn`\n+  --> $DIR/dont-suggest-missing-await.rs:7:24\n+   |\n+LL | async fn make_u32() -> u32 {\n+   |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n            found opaque type `impl Future`\n help: consider `await`ing on the `Future`"}, {"sha": "a7aedbb2b322f4fe3c43c5c08c1ae034e1f6354b", "filename": "src/test/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=1b48f4d1ea42799f8022bf27a15d9338f0ab05d7", "patch": "@@ -12,16 +12,19 @@ LL |     fun(async {}, async {});\n error[E0308]: mismatched types\n   --> $DIR/generator-desc.rs:12:16\n    |\n-LL | async fn one() {}\n-   |                - checked the `Output` of this `async fn`, expected opaque type\n-LL | async fn two() {}\n-   |                - checked the `Output` of this `async fn`, found opaque type\n-...\n LL |     fun(one(), two());\n    |                ^^^^^ expected opaque type, found a different opaque type\n    |\n-   = note: while checking the return type of the `async fn`\n-   = note: while checking the return type of the `async fn`\n+note: while checking the return type of the `async fn`\n+  --> $DIR/generator-desc.rs:5:16\n+   |\n+LL | async fn one() {}\n+   |                ^ checked the `Output` of this `async fn`, expected opaque type\n+note: while checking the return type of the `async fn`\n+  --> $DIR/generator-desc.rs:6:16\n+   |\n+LL | async fn two() {}\n+   |                ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected opaque type `impl Future` (opaque type at <$DIR/generator-desc.rs:5:16>)\n               found opaque type `impl Future` (opaque type at <$DIR/generator-desc.rs:6:16>)\n    = help: consider `await`ing on both `Future`s"}, {"sha": "220f0774e2d54281eeead56b5ba7ba1933bfc7f7", "filename": "src/test/ui/async-await/issue-61076.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs?ref=1b48f4d1ea42799f8022bf27a15d9338f0ab05d7", "patch": "@@ -57,6 +57,8 @@ async fn struct_() -> Struct {\n \n async fn tuple() -> Tuple {\n     //~^ NOTE checked the `Output` of this `async fn`, expected opaque type\n+    //~| NOTE while checking the return type of the `async fn`\n+    //~| NOTE in this expansion of desugaring of `async` block or function\n     Tuple(1i32)\n }\n \n@@ -92,7 +94,6 @@ async fn match_() {\n         Tuple(_) => {} //~ ERROR mismatched types\n         //~^ NOTE expected opaque type, found struct `Tuple`\n         //~| NOTE expected opaque type `impl Future`\n-        //~| NOTE while checking the return type of the `async fn`\n     }\n }\n "}, {"sha": "9fb2d5bc6cb42d098ce1e27ff67e5a1076854b62", "filename": "src/test/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=1b48f4d1ea42799f8022bf27a15d9338f0ab05d7", "patch": "@@ -16,7 +16,7 @@ LL |     foo().await?;\n    |          ^^^^^^\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/issue-61076.rs:65:5\n+  --> $DIR/issue-61076.rs:67:5\n    |\n LL |     t?;\n    |     ^^ the `?` operator cannot be applied to type `T`\n@@ -33,7 +33,7 @@ LL |     t.await?;\n    |      ^^^^^^\n \n error[E0609]: no field `0` on type `impl Future`\n-  --> $DIR/issue-61076.rs:76:26\n+  --> $DIR/issue-61076.rs:78:26\n    |\n LL |     let _: i32 = tuple().0;\n    |                          ^ field not available in `impl Future`, but it is available in its `Output`\n@@ -44,7 +44,7 @@ LL |     let _: i32 = tuple().await.0;\n    |                         ^^^^^^\n \n error[E0609]: no field `a` on type `impl Future`\n-  --> $DIR/issue-61076.rs:80:28\n+  --> $DIR/issue-61076.rs:82:28\n    |\n LL |     let _: i32 = struct_().a;\n    |                            ^ field not available in `impl Future`, but it is available in its `Output`\n@@ -55,7 +55,7 @@ LL |     let _: i32 = struct_().await.a;\n    |                           ^^^^^^\n \n error[E0599]: no method named `method` found for opaque type `impl Future` in the current scope\n-  --> $DIR/issue-61076.rs:84:15\n+  --> $DIR/issue-61076.rs:86:15\n    |\n LL |     struct_().method();\n    |               ^^^^^^ method not found in `impl Future`\n@@ -66,15 +66,16 @@ LL |     struct_().await.method();\n    |               ^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-61076.rs:92:9\n+  --> $DIR/issue-61076.rs:94:9\n    |\n-LL | async fn tuple() -> Tuple {\n-   |                     ----- checked the `Output` of this `async fn`, expected opaque type\n-...\n LL |         Tuple(_) => {}\n    |         ^^^^^^^^ expected opaque type, found struct `Tuple`\n    |\n-   = note: while checking the return type of the `async fn`\n+note: while checking the return type of the `async fn`\n+  --> $DIR/issue-61076.rs:58:21\n+   |\n+LL | async fn tuple() -> Tuple {\n+   |                     ^^^^^ checked the `Output` of this `async fn`, expected opaque type\n    = note: expected opaque type `impl Future`\n                    found struct `Tuple`\n help: consider `await`ing on the `Future`"}, {"sha": "9d742049046b22a674196b19be37fb311af2a63d", "filename": "src/test/ui/async-await/suggest-missing-await-closure.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr?ref=1b48f4d1ea42799f8022bf27a15d9338f0ab05d7", "patch": "@@ -1,13 +1,14 @@\n error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await-closure.rs:16:18\n    |\n-LL | async fn make_u32() -> u32 {\n-   |                        --- checked the `Output` of this `async fn`, found opaque type\n-...\n LL |         take_u32(x)\n    |                  ^ expected `u32`, found opaque type\n    |\n-   = note: while checking the return type of the `async fn`\n+note: while checking the return type of the `async fn`\n+  --> $DIR/suggest-missing-await-closure.rs:8:24\n+   |\n+LL | async fn make_u32() -> u32 {\n+   |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n            found opaque type `impl Future`\n help: consider `await`ing on the `Future`"}, {"sha": "890f66c58d0f89fce20840d8681d2fac1551fd95", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=1b48f4d1ea42799f8022bf27a15d9338f0ab05d7", "patch": "@@ -1,13 +1,14 @@\n error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:12:14\n    |\n-LL | async fn make_u32() -> u32 {\n-   |                        --- checked the `Output` of this `async fn`, found opaque type\n-...\n LL |     take_u32(x)\n    |              ^ expected `u32`, found opaque type\n    |\n-   = note: while checking the return type of the `async fn`\n+note: while checking the return type of the `async fn`\n+  --> $DIR/suggest-missing-await.rs:5:24\n+   |\n+LL | async fn make_u32() -> u32 {\n+   |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n            found opaque type `impl Future`\n help: consider `await`ing on the `Future`\n@@ -18,13 +19,14 @@ LL |     take_u32(x.await)\n error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:22:5\n    |\n-LL | async fn dummy() {}\n-   |                  - checked the `Output` of this `async fn`, found opaque type\n-...\n LL |     dummy()\n    |     ^^^^^^^ expected `()`, found opaque type\n    |\n-   = note: while checking the return type of the `async fn`\n+note: while checking the return type of the `async fn`\n+  --> $DIR/suggest-missing-await.rs:18:18\n+   |\n+LL | async fn dummy() {}\n+   |                  ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected unit type `()`\n             found opaque type `impl Future`\n help: consider `await`ing on the `Future`"}, {"sha": "1e0aa9ce40d18c18c96ae0b3f3f0c189e64749ea", "filename": "src/test/ui/suggestions/issue-81839.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr?ref=1b48f4d1ea42799f8022bf27a15d9338f0ab05d7", "patch": "@@ -13,13 +13,12 @@ LL | |         _ => cx.answer_str(\"hi\"),\n    | |              ^^^^^^^^^^^^^^^^^^^ expected `()`, found opaque type\n LL | |     }\n    | |_____- `match` arms have incompatible types\n-   | \n-  ::: $DIR/auxiliary/issue-81839.rs:6:49\n    |\n-LL |       pub async fn answer_str(&self, _s: &str) -> Test {\n-   |                                                   ---- checked the `Output` of this `async fn`, found opaque type\n+note: while checking the return type of the `async fn`\n+  --> $DIR/auxiliary/issue-81839.rs:6:49\n    |\n-   = note: while checking the return type of the `async fn`\n+LL |     pub async fn answer_str(&self, _s: &str) -> Test {\n+   |                                                 ^^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `()`\n            found opaque type `impl Future`\n "}, {"sha": "990a4469764f0410168430c3c02a73a5047705eb", "filename": "src/test/ui/suggestions/match-prev-arm-needing-semi.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs?ref=1b48f4d1ea42799f8022bf27a15d9338f0ab05d7", "patch": "@@ -14,8 +14,14 @@ fn extra_semicolon() {\n }\n \n async fn async_dummy() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n+//~| NOTE while checking the return type of the `async fn`\n+//~| NOTE in this expansion of desugaring of `async` block or function\n async fn async_dummy2() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n //~| NOTE checked the `Output` of this `async fn`, found opaque type\n+//~| NOTE while checking the return type of the `async fn`\n+//~| NOTE in this expansion of desugaring of `async` block or function\n+//~| NOTE while checking the return type of the `async fn`\n+//~| NOTE in this expansion of desugaring of `async` block or function\n \n async fn async_extra_semicolon_same() {\n     let _ = match true { //~ NOTE `match` arms have incompatible types\n@@ -26,7 +32,6 @@ async fn async_extra_semicolon_same() {\n         false => async_dummy(), //~ ERROR `match` arms have incompatible types\n         //~^ NOTE expected `()`, found opaque type\n         //~| NOTE expected type `()`\n-        //~| NOTE while checking the return type of the `async fn`\n         //~| HELP consider `await`ing on the `Future`\n     };\n }\n@@ -40,7 +45,6 @@ async fn async_extra_semicolon_different() {\n         false => async_dummy2(), //~ ERROR `match` arms have incompatible types\n         //~^ NOTE expected `()`, found opaque type\n         //~| NOTE expected type `()`\n-        //~| NOTE while checking the return type of the `async fn`\n         //~| HELP consider `await`ing on the `Future`\n     };\n }\n@@ -53,7 +57,6 @@ async fn async_different_futures() {\n         //~^ NOTE expected opaque type, found a different opaque type\n         //~| NOTE expected type `impl Future`\n         //~| NOTE distinct uses of `impl Trait` result in different opaque types\n-        //~| NOTE while checking the return type of the `async fn`\n     };\n }\n "}, {"sha": "9e64b539f0fdc1a0db05036b98095dc5981d8fd6", "filename": "src/test/ui/suggestions/match-prev-arm-needing-semi.stderr", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b48f4d1ea42799f8022bf27a15d9338f0ab05d7/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr?ref=1b48f4d1ea42799f8022bf27a15d9338f0ab05d7", "patch": "@@ -1,9 +1,6 @@\n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:26:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:32:18\n    |\n-LL |   async fn async_dummy() {}\n-   |                          - checked the `Output` of this `async fn`, found opaque type\n-...\n LL |       let _ = match true {\n    |  _____________-\n LL | |         true => {\n@@ -18,7 +15,11 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: while checking the return type of the `async fn`\n+note: while checking the return type of the `async fn`\n+  --> $DIR/match-prev-arm-needing-semi.rs:16:24\n+   |\n+LL | async fn async_dummy() {}\n+   |                        ^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `()`\n            found opaque type `impl Future`\n help: consider `await`ing on the `Future`\n@@ -31,11 +32,8 @@ LL |             async_dummy()\n    |                         --\n \n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:40:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:45:18\n    |\n-LL |   async fn async_dummy2() {}\n-   |                           - checked the `Output` of this `async fn`, found opaque type\n-...\n LL |       let _ = match true {\n    |  _____________-\n LL | |         true => {\n@@ -50,7 +48,11 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: while checking the return type of the `async fn`\n+note: while checking the return type of the `async fn`\n+  --> $DIR/match-prev-arm-needing-semi.rs:19:25\n+   |\n+LL | async fn async_dummy2() {}\n+   |                         ^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `()`\n            found opaque type `impl Future`\n help: consider `await`ing on the `Future`\n@@ -66,11 +68,8 @@ LL |         false => Box::new(async_dummy2()),\n    |\n \n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:52:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:56:18\n    |\n-LL |   async fn async_dummy2() {}\n-   |                           - checked the `Output` of this `async fn`, found opaque type\n-...\n LL |       let _ = match true {\n    |  _____________-\n LL | |         true => async_dummy(),\n@@ -83,9 +82,13 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: while checking the return type of the `async fn`\n+note: while checking the return type of the `async fn`\n+  --> $DIR/match-prev-arm-needing-semi.rs:19:25\n+   |\n+LL | async fn async_dummy2() {}\n+   |                         ^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `impl Future` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:16:24>)\n-           found opaque type `impl Future` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:17:25>)\n+           found opaque type `impl Future` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:19:25>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n help: consider `await`ing on both `Future`s\n    |"}]}