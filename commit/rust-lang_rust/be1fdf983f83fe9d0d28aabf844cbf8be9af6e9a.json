{"sha": "be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMWZkZjk4M2Y4M2ZlOWQwZDI4YWFiZjg0NGNiZjhiZTlhZjZlOWE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-12T02:28:14Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-12T02:28:44Z"}, "message": "Promote 'impl' from restricted keyword to strict", "tree": {"sha": "4cff9909111d9605499895ca3642257070cfd4ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cff9909111d9605499895ca3642257070cfd4ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a", "html_url": "https://github.com/rust-lang/rust/commit/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d2a74a160c5772efccda711e60c173077099ef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d2a74a160c5772efccda711e60c173077099ef2", "html_url": "https://github.com/rust-lang/rust/commit/3d2a74a160c5772efccda711e60c173077099ef2"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "a06ba417531d8d56648a78beca20eee850cdfc14", "filename": "src/libcore/os.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a", "patch": "@@ -188,13 +188,13 @@ mod global_env {\n                 loop {\n                     match comm::select2(msg_po, weak_po) {\n                       either::Left(MsgGetEnv(n, resp_ch)) => {\n-                        comm::send(resp_ch, impl::getenv(n))\n+                        comm::send(resp_ch, impl_::getenv(n))\n                       }\n                       either::Left(MsgSetEnv(n, v, resp_ch)) => {\n-                        comm::send(resp_ch, impl::setenv(n, v))\n+                        comm::send(resp_ch, impl_::setenv(n, v))\n                       }\n                       either::Left(MsgEnv(resp_ch)) => {\n-                        comm::send(resp_ch, impl::env())\n+                        comm::send(resp_ch, impl_::env())\n                       }\n                       either::Right(_) => break\n                     }\n@@ -203,7 +203,7 @@ mod global_env {\n         }\n     }\n \n-    mod impl {\n+    mod impl_ {\n         extern mod rustrt {\n             fn rust_env_pairs() -> ~[~str];\n         }"}, {"sha": "1beabe81bb42acf0f0c4b6abb169be1b484bf967", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a", "patch": "@@ -416,7 +416,6 @@ fn restricted_keyword_table() -> HashMap<~str, ()> {\n     let keys = ~[\n         ~\"const\", ~\"copy\",\n         ~\"fail\", ~\"fn\",\n-        ~\"impl\",\n         ~\"unsafe\"\n     ];\n     for keys.each |word| {\n@@ -434,7 +433,7 @@ fn strict_keyword_table() -> HashMap<~str, ()> {\n         ~\"do\", ~\"drop\",\n         ~\"else\", ~\"enum\", ~\"export\", ~\"extern\",\n         ~\"false\", ~\"for\",\n-        ~\"if\",\n+        ~\"if\", ~\"impl\",\n         ~\"let\", ~\"log\", ~\"loop\",\n         ~\"match\", ~\"mod\", ~\"move\", ~\"mut\",\n         ~\"priv\", ~\"pub\", ~\"pure\","}, {"sha": "f993ed6bec782e856b954b6523845c3c982fa34c", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a", "patch": "@@ -1838,7 +1838,7 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n         }\n       }\n       ast::item_impl(tps, _, _, ms) => {\n-        impl::trans_impl(ccx, *path, item.ident, ms, tps);\n+        meth::trans_impl(ccx, *path, item.ident, ms, tps);\n       }\n       ast::item_mod(m) => {\n         trans_mod(ccx, m);\n@@ -1890,15 +1890,15 @@ fn trans_struct_def(ccx: @crate_ctxt, struct_def: @ast::struct_def,\n     // If there are ty params, the ctor will get monomorphized\n \n     // Translate methods\n-    impl::trans_impl(ccx, *path, ident, struct_def.methods, tps);\n+    meth::trans_impl(ccx, *path, ident, struct_def.methods, tps);\n }\n \n fn trans_trait(ccx: @crate_ctxt, tps: ~[ast::ty_param],\n                trait_methods: ~[ast::trait_method],\n                path: @ast_map::path, ident: ast::ident) {\n     // Translate any methods that have provided implementations\n     let (_, provided_methods) = ast_util::split_trait_methods(trait_methods);\n-    impl::trans_impl(ccx, *path, ident, provided_methods, tps);\n+    meth::trans_impl(ccx, *path, ident, provided_methods, tps);\n }\n \n // Translate a module. Doing this amounts to translating the items in the"}, {"sha": "2f2d934baa29dac6ed9dac7d7d957b4f3793a31a", "filename": "src/rustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a", "patch": "@@ -53,7 +53,7 @@ fn trans(bcx: block, expr: @ast::expr) -> Callee {\n         ast::expr_field(base, _, _) => {\n             match bcx.ccx().maps.method_map.find(expr.id) {\n                 Some(origin) => { // An impl method\n-                    return impl::trans_method_callee(bcx, expr.id,\n+                    return meth::trans_method_callee(bcx, expr.id,\n                                                      base, origin);\n                 }\n                 None => {} // not a method, just a field\n@@ -79,7 +79,7 @@ fn trans(bcx: block, expr: @ast::expr) -> Callee {\n                 fn_callee(bcx, trans_fn_ref(bcx, did, ref_expr.id))\n             }\n             ast::def_static_method(did, _) => {\n-                fn_callee(bcx, impl::trans_static_method_callee(bcx, did,\n+                fn_callee(bcx, meth::trans_static_method_callee(bcx, did,\n                                                                 ref_expr.id))\n             }\n             ast::def_variant(tid, vid) => {"}, {"sha": "b7b84367410ea5c3d2220db7e0d8f38bc90f4634", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a", "patch": "@@ -1207,7 +1207,7 @@ fn node_id_type_params(bcx: block, id: ast::node_id) -> ~[ty::t] {\n fn node_vtables(bcx: block, id: ast::node_id) -> Option<typeck::vtable_res> {\n     let raw_vtables = bcx.ccx().maps.vtable_map.find(id);\n     raw_vtables.map(\n-        |vts| impl::resolve_vtables_in_fn_ctxt(bcx.fcx, vts))\n+        |vts| meth::resolve_vtables_in_fn_ctxt(bcx.fcx, vts))\n }\n \n fn resolve_vtables_in_fn_ctxt(fcx: fn_ctxt, vts: typeck::vtable_res)"}, {"sha": "96a30f622406c2ce61d22ec7cc74615d6a722c07", "filename": "src/rustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a", "patch": "@@ -519,7 +519,7 @@ fn trans_rvalue_dps(bcx: block, expr: @ast::expr, dest: Dest) -> block {\n             return trans_overloaded_op(bcx, expr, base, ~[idx], dest);\n         }\n         ast::expr_cast(val, _) => {\n-            return impl::trans_trait_cast(bcx, val, expr.id, dest);\n+            return meth::trans_trait_cast(bcx, val, expr.id, dest);\n         }\n         ast::expr_assign_op(op, dst, src) => {\n             return trans_assign_op(bcx, expr, op, dst, src);\n@@ -549,7 +549,7 @@ fn trans_def_dps(bcx: block, ref_expr: @ast::expr,\n             return fn_data_to_datum(bcx, did, fn_data, lldest);\n         }\n         ast::def_static_method(did, _) => {\n-            let fn_data = impl::trans_static_method_callee(bcx, did,\n+            let fn_data = meth::trans_static_method_callee(bcx, did,\n                                                            ref_expr.id);\n             return fn_data_to_datum(bcx, did, fn_data, lldest);\n         }\n@@ -1222,7 +1222,7 @@ fn trans_overloaded_op(bcx: block,\n     return callee::trans_call_inner(\n         bcx, expr.info(), fty,\n         expr_ty(bcx, expr),\n-        |bcx| impl::trans_method_callee(bcx, expr.callee_id, rcvr, origin),\n+        |bcx| meth::trans_method_callee(bcx, expr.callee_id, rcvr, origin),\n         callee::ArgExprs(args), dest);\n }\n "}, {"sha": "b923e35765a1f756a98f0200ec5c86b100a5feac", "filename": "src/rustc/middle/trans/meth.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a", "previous_filename": "src/rustc/middle/trans/impl.rs"}, {"sha": "385f41161904a6f7edf0a1674ce614fbc8997cf7", "filename": "src/rustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a", "patch": "@@ -156,7 +156,7 @@ fn monomorphic_fn(ccx: @crate_ctxt,\n       ast_map::node_method(mth, _, _) => {\n         let d = mk_lldecl();\n         set_inline_hint_if_appr(mth.attrs, d);\n-        impl::trans_method(ccx, pt, mth, psubsts, d);\n+        meth::trans_method(ccx, pt, mth, psubsts, d);\n         d\n       }\n       ast_map::node_ctor(_, tps, ctor, parent_id, _) => {\n@@ -244,7 +244,7 @@ fn make_mono_id(ccx: @crate_ctxt, item: ast::def_id, substs: ~[ty::t],\n             for vec::each(*bounds) |bound| {\n                 match bound {\n                   ty::bound_trait(_) => {\n-                    vec::push(v, impl::vtable_id(ccx, vts[i]));\n+                    vec::push(v, meth::vtable_id(ccx, vts[i]));\n                     i += 1u;\n                   }\n                   _ => ()"}, {"sha": "7d75e3517d67581f5e0b62a3691e18a70efd8070", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a", "patch": "@@ -72,7 +72,7 @@ impl reflector {\n         let scratch = scratch_datum(bcx, bool_ty, false);\n         let bcx = callee::trans_call_inner(\n             self.bcx, None, mth_ty, bool_ty,\n-            |bcx| impl::trans_trait_callee_from_llval(bcx, mth_ty,\n+            |bcx| meth::trans_trait_callee_from_llval(bcx, mth_ty,\n                                                       mth_idx, v),\n             ArgVals(args), SaveIn(scratch.val));\n         let result = scratch.to_value_llval(bcx);"}, {"sha": "b63060d920a7827843f2ef23d90144d0c0f5913d", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=be1fdf983f83fe9d0d28aabf844cbf8be9af6e9a", "patch": "@@ -51,7 +51,7 @@ mod middle {\n         mod uniq;\n         mod closure;\n         mod tvec;\n-        mod impl;\n+        mod meth;\n         mod foreign;\n         mod reflect;\n         mod shape;"}]}