{"sha": "96f8471d81a72e74d0791781906426353fe835a6", "node_id": "C_kwDOAAsO6NoAKDk2Zjg0NzFkODFhNzJlNzRkMDc5MTc4MTkwNjQyNjM1M2ZlODM1YTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-23T22:30:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-23T22:30:06Z"}, "message": "Auto merge of #10649 - jsoref:spelling, r=Jarcho\n\nSpelling\n\nThis PR corrects misspellings identified by the [check-spelling action](https://github.com/marketplace/actions/check-spelling).\n\nThe misspellings have been reported at https://github.com/jsoref/rust-clippy/actions/runs/4710771873#summary-12776860721\n\nThe action reports that the changes in this PR would make it happy: https://github.com/jsoref/rust-clippy/actions/runs/4710771874#summary-12776860722\n\nchangelog: none", "tree": {"sha": "c08ba92d895e1993f0ea9dc51f993584821f356b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c08ba92d895e1993f0ea9dc51f993584821f356b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96f8471d81a72e74d0791781906426353fe835a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96f8471d81a72e74d0791781906426353fe835a6", "html_url": "https://github.com/rust-lang/rust/commit/96f8471d81a72e74d0791781906426353fe835a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96f8471d81a72e74d0791781906426353fe835a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a870aef1a0a599378eefb5253be479b82c1cc8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a870aef1a0a599378eefb5253be479b82c1cc8d", "html_url": "https://github.com/rust-lang/rust/commit/7a870aef1a0a599378eefb5253be479b82c1cc8d"}, {"sha": "6f7801f810644c22dfe8c089b5ccc32c9de833d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f7801f810644c22dfe8c089b5ccc32c9de833d7", "html_url": "https://github.com/rust-lang/rust/commit/6f7801f810644c22dfe8c089b5ccc32c9de833d7"}], "stats": {"total": 100, "additions": 52, "deletions": 48}, "files": [{"sha": "285488cec55c2db4f5a47b0a2218a4b2059d9532", "filename": "book/src/development/proposals/syntax-tree-patterns.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/book%2Fsrc%2Fdevelopment%2Fproposals%2Fsyntax-tree-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/book%2Fsrc%2Fdevelopment%2Fproposals%2Fsyntax-tree-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fproposals%2Fsyntax-tree-patterns.md?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -139,7 +139,7 @@ whether the pattern matched.\n \n ## Pattern syntax\n \n-The following examples demonstate the pattern syntax:\n+The following examples demonstrate the pattern syntax:\n \n \n #### Any (`_`)"}, {"sha": "cfeb75eed3bb99c08abef65c8e7e9f2f6faea4d3", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -638,7 +638,7 @@ declare_clippy_lint! {\n     #[clippy::version = \"1.66.0\"]\n     pub AS_PTR_CAST_MUT,\n     nursery,\n-    \"casting the result of the `&self`-taking `as_ptr` to a mutabe pointer\"\n+    \"casting the result of the `&self`-taking `as_ptr` to a mutable pointer\"\n }\n \n declare_clippy_lint! {"}, {"sha": "1c321f46e2da4fcd8d77bd82f9020b9f17538a14", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -591,7 +591,7 @@ fn lint_same_cond(cx: &LateContext<'_>, conds: &[&Expr<'_>], ignored_ty_ids: &De\n         conds,\n         |e| hash_expr(cx, e),\n         |lhs, rhs| {\n-            // Ignore eq_expr side effects iff one of the expressin kind is a method call\n+            // Ignore eq_expr side effects iff one of the expression kind is a method call\n             // and the caller is not a mutable, including inner mutable type.\n             if let ExprKind::MethodCall(_, caller, _, _) = lhs.kind {\n                 if method_caller_is_mutable(cx, caller, ignored_ty_ids) {"}, {"sha": "62b419a5226231097eacfb282cd7eb5c56885188", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -10,7 +10,7 @@ use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for usage of the non-existent `=*`, `=!` and `=-`\n+    /// Checks for usage of the nonexistent `=*`, `=!` and `=-`\n     /// operators.\n     ///\n     /// ### Why is this bad?"}, {"sha": "10ce2a0f0c7ecd3ed24ed5b9b6749186b33726ec", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -94,7 +94,7 @@ impl<'tcx> LateLintPass<'tcx> for FromOverInto {\n                         );\n                     }\n \n-                    let message = format!(\"replace the `Into` implentation with `From<{}>`\", middle_trait_ref.self_ty());\n+                    let message = format!(\"replace the `Into` implementation with `From<{}>`\", middle_trait_ref.self_ty());\n                     if let Some(suggestions) = convert_to_from(cx, into_trait_seg, target_ty, self_ty, impl_item_ref) {\n                         diag.multipart_suggestion(message, suggestions, Applicability::MachineApplicable);\n                     } else {"}, {"sha": "b244b91331436429a365c474653a303a37cd2454", "filename": "clippy_lints/src/functions/misnamed_getters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmisnamed_getters.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -40,7 +40,7 @@ pub fn check_fn(cx: &LateContext<'_>, kind: FnKind<'_>, decl: &FnDecl<'_>, body:\n     };\n \n     // Body must be &(mut) <self_data>.name\n-    // self_data is not neccessarilly self, to also lint sub-getters, etc\u2026\n+    // self_data is not necessarily self, to also lint sub-getters, etc\u2026\n \n     let block_expr = if_chain! {\n         if let ExprKind::Block(block,_) = body.value.kind;"}, {"sha": "1528a7be09c3c67834133401b3620d08955f2fd1", "filename": "clippy_lints/src/functions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -330,7 +330,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Lints when `impl Trait` is being used in a function's paremeters.\n+    /// Lints when `impl Trait` is being used in a function's parameters.\n     /// ### Why is this bad?\n     /// Turbofish syntax (`::<>`) cannot be used when `impl Trait` is being used, making `impl Trait` less powerful. Readability may also be a factor.\n     ///"}, {"sha": "0ca31033b169b712d2ba524813f50196fc021210", "filename": "clippy_lints/src/large_futures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Flarge_futures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Flarge_futures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_futures.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -11,7 +11,7 @@ declare_clippy_lint! {\n     /// It checks for the size of a `Future` created by `async fn` or `async {}`.\n     ///\n     /// ### Why is this bad?\n-    /// Due to the current [unideal implemention](https://github.com/rust-lang/rust/issues/69826) of `Generator`,\n+    /// Due to the current [unideal implementation](https://github.com/rust-lang/rust/issues/69826) of `Generator`,\n     /// large size of a `Future` may cause stack overflows.\n     ///\n     /// ### Example"}, {"sha": "d4c3f76b864172d7eb54e5640e3ab5d365d84afe", "filename": "clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -15,7 +15,7 @@ use rustc_span::symbol::sym;\n use std::fmt::Display;\n use std::iter::Iterator;\n \n-/// Checks for for loops that sequentially copy items from one slice-like\n+/// Checks for `for` loops that sequentially copy items from one slice-like\n /// object to another.\n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,"}, {"sha": "45ea5aab4c2a26c7369e40ec290ec79b6e852c5f", "filename": "clippy_lints/src/manual_assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_assert.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -64,7 +64,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAssert {\n             };\n             let cond_sugg = sugg::Sugg::hir_with_applicability(cx, cond, \"..\", &mut applicability).maybe_par();\n             let sugg = format!(\"assert!({not}{cond_sugg}, {format_args_snip});\");\n-            // we show to the user the suggestion without the comments, but when applicating the fix, include the comments in the block\n+            // we show to the user the suggestion without the comments, but when applying the fix, include the comments in the block\n             span_lint_and_then(\n                 cx,\n                 MANUAL_ASSERT,"}, {"sha": "1247370b74a2f42b6d2f8e52531be0c2661190e8", "filename": "clippy_lints/src/manual_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_let_else.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -101,7 +101,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualLetElse {\n                 if source != MatchSource::Normal {\n                     return;\n                 }\n-                // Any other number than two arms doesn't (neccessarily)\n+                // Any other number than two arms doesn't (necessarily)\n                 // have a trivial mapping to let else.\n                 if arms.len() != 2 {\n                     return;"}, {"sha": "5259066eb713cc7b7350fef0cd0755c5750e6d8f", "filename": "clippy_lints/src/manual_retain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Fmanual_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Fmanual_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_retain.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -46,7 +46,7 @@ declare_clippy_lint! {\n     #[clippy::version = \"1.64.0\"]\n     pub MANUAL_RETAIN,\n     perf,\n-    \"`retain()` is simpler and the same functionalitys\"\n+    \"`retain()` is simpler and the same functionalities\"\n }\n \n pub struct ManualRetain {"}, {"sha": "1adecd2caacad7f117ed66241b1ee6f784ff6581", "filename": "clippy_lints/src/missing_trait_methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Fmissing_trait_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Fmissing_trait_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_trait_methods.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -12,7 +12,7 @@ declare_clippy_lint! {\n     /// Checks if a provided method is used implicitly by a trait\n     /// implementation. A usage example would be a wrapper where every method\n     /// should perform some operation before delegating to the inner type's\n-    /// implemenation.\n+    /// implementation.\n     ///\n     /// This lint should typically be enabled on a specific trait `impl` item\n     /// rather than globally."}, {"sha": "858135c8d4647091f1810d7668adcbeec1c0fa27", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -74,7 +74,7 @@ enum InitializationType<'tcx> {\n \n impl<'tcx> LateLintPass<'tcx> for SlowVectorInit {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        // Matches initialization on reassignements. For example: `vec = Vec::with_capacity(100)`\n+        // Matches initialization on reassignments. For example: `vec = Vec::with_capacity(100)`\n         if_chain! {\n             if let ExprKind::Assign(left, right, _) = expr.kind;\n "}, {"sha": "f40229e03a22661bfd899d24747f94f033aa05e9", "filename": "clippy_lints/src/trailing_empty_array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_empty_array.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -60,7 +60,7 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'_>, item: &Item<'_\n         if let Some(last_field) = data.fields().last();\n         if let rustc_hir::TyKind::Array(_, rustc_hir::ArrayLen::Body(length)) = last_field.ty.kind;\n \n-        // Then check if that that array zero-sized\n+        // Then check if that array is zero-sized\n         let length = Const::from_anon_const(cx.tcx, length.def_id);\n         let length = length.try_eval_target_usize(cx.tcx, cx.param_env);\n         if let Some(length) = length;"}, {"sha": "3c873a5901d42fed4b5c207b93a6593872be1491", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -90,8 +90,8 @@ declare_clippy_lint! {\n     ///\n     /// ### Why is this bad?\n     /// `Option<_>` represents an optional value. `Option<Option<_>>`\n-    /// represents an optional optional value which is logically the same thing as an optional\n-    /// value but has an unneeded extra level of wrapping.\n+    /// represents an optional value which itself wraps an optional. This is logically the\n+    /// same thing as an optional value but has an unneeded extra level of wrapping.\n     ///\n     /// If you have a case where `Some(Some(_))`, `Some(None)` and `None` are distinct cases,\n     /// consider a custom `enum` instead, with clear names for each case."}, {"sha": "e7449639f3af307f88145854ec77a00b50744a4b", "filename": "clippy_lints/src/unnecessary_box_returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_box_returns.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -109,7 +109,7 @@ impl LateLintPass<'_> for UnnecessaryBoxReturns {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'_>, item: &rustc_hir::ImplItem<'_>) {\n         // Ignore implementations of traits, because the lint should be on the\n-        // trait, not on the implmentation of it.\n+        // trait, not on the implementation of it.\n         let Node::Item(parent) = cx.tcx.hir().get_parent(item.hir_id()) else { return };\n         let ItemKind::Impl(parent) = parent.kind else { return };\n         if parent.of_trait.is_some() {"}, {"sha": "964104fc31d0e207bb01b49d1173f119a3636af9", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -2206,8 +2206,12 @@ pub fn is_slice_of_primitives(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<S\n     None\n }\n \n-/// returns list of all pairs (a, b) from `exprs` such that `eq(a, b)`\n-/// `hash` must be comformed with `eq`\n+/// Returns list of all pairs `(a, b)` where `eq(a, b) == true`\n+/// and `a` is before `b` in `exprs` for all `a` and `b` in\n+/// `exprs`\n+///\n+/// Given functions `eq` and `hash` such that `eq(a, b) == true`\n+/// implies `hash(a) == hash(b)`\n pub fn search_same<T, Hash, Eq>(exprs: &[T], hash: Hash, eq: Eq) -> Vec<(&T, &T)>\n where\n     Hash: Fn(&T) -> u64,"}, {"sha": "8cfb261276ebfe83870173e4f5eb6bfb70c6d67c", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -93,7 +93,7 @@ pub fn contains_ty_adt_constructor_opaque<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'\n                     for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n                         match predicate.kind().skip_binder() {\n                             // For `impl Trait<U>`, it will register a predicate of `T: Trait<U>`, so we go through\n-                            // and check substituions to find `U`.\n+                            // and check substitutions to find `U`.\n                             ty::PredicateKind::Clause(ty::Clause::Trait(trait_predicate)) => {\n                                 if trait_predicate\n                                     .trait_ref\n@@ -1101,7 +1101,7 @@ pub fn make_projection<'tcx>(\n ///\n /// This function is for associated types which are \"known\" to be valid with the given\n /// substitutions, and as such, will only return `None` when debug assertions are disabled in order\n-/// to prevent ICE's. With debug assertions enabled this will check that that type normalization\n+/// to prevent ICE's. With debug assertions enabled this will check that type normalization\n /// succeeds as well as everything checked by `make_projection`.\n pub fn make_normalized_projection<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "03d1877d6c64497aeaac07ce29ba8fe1d31f779f", "filename": "lintcheck/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/lintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/lintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fmain.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -421,7 +421,7 @@ impl Crate {\n             {\n                 let subcrate = &stderr[63..];\n                 println!(\n-                    \"ERROR: failed to apply some suggetion to {} / to (sub)crate {subcrate}\",\n+                    \"ERROR: failed to apply some suggestion to {} / to (sub)crate {subcrate}\",\n                     self.name\n                 );\n             }"}, {"sha": "d164dd0e54505d556dd48c32d280e94178cb735e", "filename": "tests/ui/auxiliary/proc_macro_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_attr.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -82,7 +82,7 @@ pub fn rename_my_lifetimes(_args: TokenStream, input: TokenStream) -> TokenStrea\n                     elided += 1;\n \n                     // HACK: Syn uses `Span` from the proc_macro2 crate, and does not seem to reexport it.\n-                    // In order to avoid adding the dependency, get a default span from a non-existent token.\n+                    // In order to avoid adding the dependency, get a default span from a nonexistent token.\n                     // A default span is needed to mark the code as coming from expansion.\n                     let span = Star::default().span();\n "}, {"sha": "b77f01883bf38f9ab16da9a63a5e760930b3a172", "filename": "tests/ui/cast_slice_different_sizes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_slice_different_sizes.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -23,7 +23,7 @@ fn main() {\n         r_x as *const [i32]\n     } as *const [u8];\n \n-    // Check that resores of the same size are detected through blocks\n+    // Check that resources of the same size are detected through blocks\n     let restore_block_1 = { r_x as *const [i32] } as *const [u8] as *const [u32];\n     let restore_block_2 = { ({ r_x as *const [i32] }) as *const [u8] } as *const [u32];\n     let restore_block_3 = {"}, {"sha": "30e4b11ec0bd450bcebc7c57465649e037f45e21", "filename": "tests/ui/crashes/ice_exact_size.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Fcrashes%2Fice_exact_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Fcrashes%2Fice_exact_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice_exact_size.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "previous_filename": "tests/ui/crashes/ice_exacte_size.rs"}, {"sha": "990b905c1b1589d5c5465b2f650f34dc4f5da93d", "filename": "tests/ui/from_over_into.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Ffrom_over_into.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Ffrom_over_into.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.stderr?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -5,7 +5,7 @@ LL | impl Into<StringWrapper> for String {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::from-over-into` implied by `-D warnings`\n-help: replace the `Into` implentation with `From<std::string::String>`\n+help: replace the `Into` implementation with `From<std::string::String>`\n    |\n LL ~ impl From<String> for StringWrapper {\n LL ~     fn from(val: String) -> Self {\n@@ -18,7 +18,7 @@ error: an implementation of `From` is preferred since it gives you `Into<_>` for\n LL | impl Into<SelfType> for String {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: replace the `Into` implentation with `From<std::string::String>`\n+help: replace the `Into` implementation with `From<std::string::String>`\n    |\n LL ~ impl From<String> for SelfType {\n LL ~     fn from(val: String) -> Self {\n@@ -31,7 +31,7 @@ error: an implementation of `From` is preferred since it gives you `Into<_>` for\n LL | impl Into<SelfKeywords> for X {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: replace the `Into` implentation with `From<X>`\n+help: replace the `Into` implementation with `From<X>`\n    |\n LL ~ impl From<X> for SelfKeywords {\n LL ~     fn from(val: X) -> Self {\n@@ -48,7 +48,7 @@ LL | impl core::convert::Into<bool> for crate::ExplicitPaths {\n    |\n    = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n            https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n-help: replace the `Into` implentation with `From<ExplicitPaths>`\n+help: replace the `Into` implementation with `From<ExplicitPaths>`\n    |\n LL ~ impl core::convert::From<crate::ExplicitPaths> for bool {\n LL ~     fn from(mut val: crate::ExplicitPaths) -> Self {\n@@ -64,7 +64,7 @@ error: an implementation of `From` is preferred since it gives you `Into<_>` for\n LL |     impl<T> Into<FromOverInto<T>> for Vec<T> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: replace the `Into` implentation with `From<std::vec::Vec<T>>`\n+help: replace the `Into` implementation with `From<std::vec::Vec<T>>`\n    |\n LL ~     impl<T> From<Vec<T>> for FromOverInto<T> {\n LL ~         fn from(val: Vec<T>) -> Self {"}, {"sha": "251f1d84e74e367bb4ba268bda75a176d26af35a", "filename": "tests/ui/from_over_into_unfixable.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Ffrom_over_into_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Ffrom_over_into_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into_unfixable.stderr?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -4,7 +4,7 @@ error: an implementation of `From` is preferred since it gives you `Into<_>` for\n LL | impl Into<InMacro> for String {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: replace the `Into` implentation with `From<std::string::String>`\n+   = help: replace the `Into` implementation with `From<std::string::String>`\n    = note: `-D clippy::from-over-into` implied by `-D warnings`\n \n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n@@ -13,7 +13,7 @@ error: an implementation of `From` is preferred since it gives you `Into<_>` for\n LL | impl Into<WeirdUpperSelf> for &'static [u8] {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: replace the `Into` implentation with `From<&'static [u8]>`\n+   = help: replace the `Into` implementation with `From<&'static [u8]>`\n \n error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n   --> $DIR/from_over_into_unfixable.rs:28:1\n@@ -23,7 +23,7 @@ LL | impl Into<u8> for ContainsVal {\n    |\n    = help: `impl From<Local> for Foreign` is allowed by the orphan rules, for more information see\n            https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence\n-   = help: replace the `Into` implentation with `From<ContainsVal>`\n+   = help: replace the `Into` implementation with `From<ContainsVal>`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7c1835e8cd18f994ca672d613b05bf30d9f31297", "filename": "tests/ui/let_with_type_underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Flet_with_type_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Flet_with_type_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_with_type_underscore.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     let _: _ = 2;\n     let x: _ = func();\n \n-    let x = 1; // Will not lint, Rust inferres this to an integer before Clippy\n+    let x = 1; // Will not lint, Rust infers this to an integer before Clippy\n     let x = func();\n     let x: Vec<_> = Vec::<u32>::new();\n     let x: [_; 1] = [1];"}, {"sha": "09fb0d758524e7ffdcfcd5942528a230b1105f28", "filename": "tests/ui/manual_retain.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Fmanual_retain.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Fmanual_retain.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_retain.fixed?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -23,8 +23,8 @@ fn main() {\n }\n \n fn binary_heap_retain() {\n-    // NOTE: Do not lint now, because binary_heap_retain is nighyly API.\n-    // And we need to add a test case for msrv if we update this implmention.\n+    // NOTE: Do not lint now, because binary_heap_retain is nightly API.\n+    // And we need to add a test case for msrv if we update this implementation.\n     // https://github.com/rust-lang/rust/issues/71503\n     let mut heap = BinaryHeap::from([1, 2, 3]);\n     heap = heap.into_iter().filter(|x| x % 2 == 0).collect();"}, {"sha": "7fee4c95cea5a2fe87bca841bbc98aff702381bb", "filename": "tests/ui/manual_retain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Fmanual_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Fmanual_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_retain.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -23,8 +23,8 @@ fn main() {\n }\n \n fn binary_heap_retain() {\n-    // NOTE: Do not lint now, because binary_heap_retain is nighyly API.\n-    // And we need to add a test case for msrv if we update this implmention.\n+    // NOTE: Do not lint now, because binary_heap_retain is nightly API.\n+    // And we need to add a test case for msrv if we update this implementation.\n     // https://github.com/rust-lang/rust/issues/71503\n     let mut heap = BinaryHeap::from([1, 2, 3]);\n     heap = heap.into_iter().filter(|x| x % 2 == 0).collect();"}, {"sha": "92572942bc0d456fef2f1676b3c244addd08d0cd", "filename": "tests/ui/needless_for_each_fixable.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Fneedless_for_each_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Fneedless_for_each_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_for_each_fixable.fixed?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -110,7 +110,7 @@ fn should_not_lint() {\n         }),\n     }\n \n-    // `for_each` is in a let bingind.\n+    // `for_each` is in a let binding.\n     let _ = v.iter().for_each(|elem| {\n         acc += elem;\n     });"}, {"sha": "95acbdff8cc2342135cd831dcd17dc83149b52af", "filename": "tests/ui/needless_for_each_fixable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Fneedless_for_each_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Fneedless_for_each_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_for_each_fixable.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -110,7 +110,7 @@ fn should_not_lint() {\n         }),\n     }\n \n-    // `for_each` is in a let bingind.\n+    // `for_each` is in a let binding.\n     let _ = v.iter().for_each(|elem| {\n         acc += elem;\n     });"}, {"sha": "818119f7be579bfff0eb229b20db143d33cda04b", "filename": "tests/ui/no_mangle_with_rust_abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Fno_mangle_with_rust_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Fno_mangle_with_rust_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_mangle_with_rust_abi.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -25,7 +25,7 @@ fn rust_abi_multiline_function_really_long_name_to_overflow_args_to_multiple_lin\n     0\n }\n \n-// Must not run on functions that explicitly opt in to Rust ABI with `extern \"Rust\"`\n+// Must not run on functions that explicitly opt in to using the Rust ABI with `extern \"Rust\"`\n #[no_mangle]\n #[rustfmt::skip]\n extern \"Rust\" fn rust_abi_fn_explicit_opt_in(arg_one: u32, arg_two: usize) {}"}, {"sha": "57f341e0276c5e03082815422ba91cffbfe8f8eb", "filename": "tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.fixed?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -97,7 +97,7 @@ enum DummyEnum {\n     Two,\n }\n \n-// should not warn since there is a compled complex subpat\n+// should not warn since there is a complex subpat\n // see #7991\n fn complex_subpat() -> DummyEnum {\n     let x = Some(DummyEnum::One(1));"}, {"sha": "19f9f70451796914a3eccc967b4beba39c4fde17", "filename": "tests/ui/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -120,7 +120,7 @@ enum DummyEnum {\n     Two,\n }\n \n-// should not warn since there is a compled complex subpat\n+// should not warn since there is a complex subpat\n // see #7991\n fn complex_subpat() -> DummyEnum {\n     let x = Some(DummyEnum::One(1));"}, {"sha": "f31a7e33c4b9ecdf54e6a629fffe56a92c80c20f", "filename": "tests/ui/same_name_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_name_method.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -62,7 +62,7 @@ mod should_lint {\n         impl T1 for S {}\n     }\n \n-    mod multiply_conflicit_trait {\n+    mod multiple_conflicting_traits {\n         use crate::{T1, T2};\n \n         struct S;"}, {"sha": "928475b5f35ea584f5c280a94ce685ccefa2f4fc", "filename": "tests/ui/trailing_empty_array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Ftrailing_empty_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Ftrailing_empty_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_empty_array.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -144,7 +144,7 @@ struct ReprCAlign {\n \n // NOTE: because of https://doc.rust-lang.org/stable/reference/type-layout.html#primitive-representation-of-enums-with-fields and I'm not sure when in the compilation pipeline that would happen\n #[repr(C)]\n-enum DontLintAnonymousStructsFromDesuraging {\n+enum DontLintAnonymousStructsFromDesugaring {\n     A(u32),\n     B(f32, [u64; 0]),\n     C { x: u32, y: [u64; 0] },"}, {"sha": "2d567630e15debe7845b45e3e17c8964768e4467", "filename": "tests/ui/uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Funinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/tests%2Fui%2Funinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit.rs?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -17,10 +17,10 @@ fn main() {\n     // This is OK, because `MaybeUninit` allows uninitialized data.\n     let _: MaybeUninit<usize> = unsafe { MaybeUninit::uninit().assume_init() };\n \n-    // This is OK, because all constitutent types are uninit-compatible.\n+    // This is OK, because all constituent types are uninit-compatible.\n     let _: (MaybeUninit<usize>, MaybeUninit<bool>) = unsafe { MaybeUninit::uninit().assume_init() };\n \n-    // This is OK, because all constitutent types are uninit-compatible.\n+    // This is OK, because all constituent types are uninit-compatible.\n     let _: (MaybeUninit<usize>, [MaybeUninit<bool>; 2]) = unsafe { MaybeUninit::uninit().assume_init() };\n \n     // This is OK, because our own MaybeUninit is just as fine as the one from core."}, {"sha": "8791debad7231c7d9702a690f0e92a36097b9ec5", "filename": "util/gh-pages/index.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96f8471d81a72e74d0791781906426353fe835a6/util%2Fgh-pages%2Findex.html", "raw_url": "https://github.com/rust-lang/rust/raw/96f8471d81a72e74d0791781906426353fe835a6/util%2Fgh-pages%2Findex.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fgh-pages%2Findex.html?ref=96f8471d81a72e74d0791781906426353fe835a6", "patch": "@@ -564,7 +564,7 @@ <h2 class=\"panel-title\">\n     </div>\n \n     <a href=\"https://github.com/rust-lang/rust-clippy\">\n-        <img style=\"position: absolute; top: 0; right: 0; border: 0; clip-path: polygon(0% 0%, 100% 0%, 100% 100%);\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\" alt=\"Fork me on Github\"/>\n+        <img style=\"position: absolute; top: 0; right: 0; border: 0; clip-path: polygon(0% 0%, 100% 0%, 100% 100%);\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\" alt=\"Fork me on GitHub\"/>\n     </a>\n \n     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/markdown-it/12.3.2/markdown-it.min.js\"></script>"}]}