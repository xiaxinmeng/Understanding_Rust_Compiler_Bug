{"sha": "5a8845e40b6c973f9834dc6462bde7b8d3c03829", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhODg0NWU0MGI2Yzk3M2Y5ODM0ZGM2NDYyYmRlN2I4ZDNjMDM4Mjk=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-09T01:55:21Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-25T22:22:15Z"}, "message": "Refactor away DefModifiers::PRELUDE", "tree": {"sha": "9fbf7cf9e9e8cae8a8c8856235237c1c5dce74cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fbf7cf9e9e8cae8a8c8856235237c1c5dce74cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a8845e40b6c973f9834dc6462bde7b8d3c03829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a8845e40b6c973f9834dc6462bde7b8d3c03829", "html_url": "https://github.com/rust-lang/rust/commit/5a8845e40b6c973f9834dc6462bde7b8d3c03829", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a8845e40b6c973f9834dc6462bde7b8d3c03829/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "febef471e35653aec00fc198ce97b9de84ebae63", "url": "https://api.github.com/repos/rust-lang/rust/commits/febef471e35653aec00fc198ce97b9de84ebae63", "html_url": "https://github.com/rust-lang/rust/commit/febef471e35653aec00fc198ce97b9de84ebae63"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "763fa32795daae007539500fedc657abec24d3d7", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a8845e40b6c973f9834dc6462bde7b8d3c03829/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8845e40b6c973f9834dc6462bde7b8d3c03829/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5a8845e40b6c973f9834dc6462bde7b8d3c03829", "patch": "@@ -932,8 +932,7 @@ bitflags! {\n         // Variants are considered `PUBLIC`, but some of them live in private enums.\n         // We need to track them to prohibit reexports like `pub use PrivEnum::Variant`.\n         const PRIVATE_VARIANT = 1 << 2,\n-        const PRELUDE = 1 << 3,\n-        const GLOB_IMPORTED = 1 << 4,\n+        const GLOB_IMPORTED = 1 << 3,\n     }\n }\n "}, {"sha": "a29954ade184a494cb6a494cffea14dd87638c20", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5a8845e40b6c973f9834dc6462bde7b8d3c03829/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8845e40b6c973f9834dc6462bde7b8d3c03829/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=5a8845e40b6c973f9834dc6462bde7b8d3c03829", "patch": "@@ -125,18 +125,17 @@ pub struct NameResolution<'a> {\n \n impl<'a> NameResolution<'a> {\n     fn try_define(&mut self, binding: &'a NameBinding<'a>) -> Result<(), &'a NameBinding<'a>> {\n-        match self.binding {\n-            Some(old_binding) if !old_binding.defined_with(DefModifiers::PRELUDE) => {\n-                if binding.defined_with(DefModifiers::GLOB_IMPORTED) {\n-                    self.duplicate_globs.push(binding);\n-                } else if old_binding.defined_with(DefModifiers::GLOB_IMPORTED) {\n-                    self.duplicate_globs.push(old_binding);\n-                    self.binding = Some(binding);\n-                } else {\n-                    return Err(old_binding);\n-                }\n+        if let Some(old_binding) = self.binding {\n+            if binding.defined_with(DefModifiers::GLOB_IMPORTED) {\n+                self.duplicate_globs.push(binding);\n+            } else if old_binding.defined_with(DefModifiers::GLOB_IMPORTED) {\n+                self.duplicate_globs.push(old_binding);\n+                self.binding = Some(binding);\n+            } else {\n+                return Err(old_binding);\n             }\n-            _ => self.binding = Some(binding),\n+        } else {\n+            self.binding = Some(binding);\n         }\n \n         Ok(())\n@@ -160,7 +159,6 @@ impl<'a> NameResolution<'a> {\n     fn try_result(&self, allow_private_imports: bool)\n                   -> Option<ResolveResult<&'a NameBinding<'a>>> {\n         match self.result(allow_private_imports) {\n-            Success(binding) if binding.defined_with(DefModifiers::PRELUDE) => None,\n             Failed(_) => None,\n             result @ _ => Some(result),\n         }\n@@ -192,8 +190,6 @@ impl<'a> NameResolution<'a> {\n         };\n \n         for duplicate_glob in self.duplicate_globs.iter() {\n-            if duplicate_glob.defined_with(DefModifiers::PRELUDE) { continue }\n-\n             // FIXME #31337: We currently allow items to shadow glob-imported re-exports.\n             if !binding.is_import() {\n                 if let NameBindingKind::Import { binding, .. } = duplicate_glob.kind {\n@@ -360,7 +356,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         // resolution for it so that later resolve stages won't complain.\n         if let SingleImport { target, .. } = e.import_directive.subclass {\n             let dummy_binding = self.resolver.arenas.alloc_name_binding(NameBinding {\n-                modifiers: DefModifiers::PRELUDE,\n+                modifiers: DefModifiers::GLOB_IMPORTED,\n                 kind: NameBindingKind::Def(Def::Err),\n                 span: None,\n             });"}]}