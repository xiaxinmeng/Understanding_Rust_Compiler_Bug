{"sha": "fce442e75c5b3df8eea401fae1200314f0d47c40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZTQ0MmU3NWM1YjNkZjhlZWE0MDFmYWUxMjAwMzE0ZjBkNDdjNDA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-13T23:33:14Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-14T00:11:21Z"}, "message": "Fix test fallout", "tree": {"sha": "60d76c2f2a57929a6fb8ab311318c77f176a4604", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60d76c2f2a57929a6fb8ab311318c77f176a4604"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fce442e75c5b3df8eea401fae1200314f0d47c40", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fce442e75c5b3df8eea401fae1200314f0d47c40", "html_url": "https://github.com/rust-lang/rust/commit/fce442e75c5b3df8eea401fae1200314f0d47c40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fce442e75c5b3df8eea401fae1200314f0d47c40/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3b9d5df6250ef021acf993576d52dd7a29a6bba", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3b9d5df6250ef021acf993576d52dd7a29a6bba", "html_url": "https://github.com/rust-lang/rust/commit/c3b9d5df6250ef021acf993576d52dd7a29a6bba"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "b31d811c2c966596aac6c572cc44f458836602c0", "filename": "src/libcollections/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fce442e75c5b3df8eea401fae1200314f0d47c40/src%2Flibcollections%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce442e75c5b3df8eea401fae1200314f0d47c40/src%2Flibcollections%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fsip.rs?ref=fce442e75c5b3df8eea401fae1200314f0d47c40", "patch": "@@ -275,7 +275,7 @@ mod tests {\n \n     use str::Str;\n     use string::String;\n-    use slice::{Vector, ImmutableSlice};\n+    use slice::{Slice, ImmutableSlice};\n     use vec::Vec;\n \n     use super::super::{Hash, Writer};"}, {"sha": "60ee8cc04f74c667e4f05a9479f91915f581930b", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fce442e75c5b3df8eea401fae1200314f0d47c40/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fce442e75c5b3df8eea401fae1200314f0d47c40/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=fce442e75c5b3df8eea401fae1200314f0d47c40", "patch": "@@ -894,7 +894,7 @@ mod tests {\n     use {Collection, MutableSeq};\n \n     use super::*;\n-    use std::slice::{Vector, ImmutableSlice};\n+    use std::slice::{Slice, ImmutableSlice};\n     use string::String;\n     use vec::Vec;\n \n@@ -1812,38 +1812,38 @@ mod tests {\n     fn test_splitn_char_iterator() {\n         let data = \"\\nM\u00e4ry h\u00e4d \u00e4 little l\u00e4mb\\nLittle l\u00e4mb\\n\";\n \n-        let split: Vec<&str> = data.splitn(' ', 3).collect();\n+        let split: Vec<&str> = data.splitn(3, ' ').collect();\n         assert_eq!(split, vec![\"\\nM\u00e4ry\", \"h\u00e4d\", \"\u00e4\", \"little l\u00e4mb\\nLittle l\u00e4mb\\n\"]);\n \n-        let split: Vec<&str> = data.splitn(|c: char| c == ' ', 3).collect();\n+        let split: Vec<&str> = data.splitn(3, |c: char| c == ' ').collect();\n         assert_eq!(split, vec![\"\\nM\u00e4ry\", \"h\u00e4d\", \"\u00e4\", \"little l\u00e4mb\\nLittle l\u00e4mb\\n\"]);\n \n         // Unicode\n-        let split: Vec<&str> = data.splitn('\u00e4', 3).collect();\n+        let split: Vec<&str> = data.splitn(3, '\u00e4').collect();\n         assert_eq!(split, vec![\"\\nM\", \"ry h\", \"d \", \" little l\u00e4mb\\nLittle l\u00e4mb\\n\"]);\n \n-        let split: Vec<&str> = data.splitn(|c: char| c == '\u00e4', 3).collect();\n+        let split: Vec<&str> = data.splitn(3, |c: char| c == '\u00e4').collect();\n         assert_eq!(split, vec![\"\\nM\", \"ry h\", \"d \", \" little l\u00e4mb\\nLittle l\u00e4mb\\n\"]);\n     }\n \n     #[test]\n     fn test_rsplitn_char_iterator() {\n         let data = \"\\nM\u00e4ry h\u00e4d \u00e4 little l\u00e4mb\\nLittle l\u00e4mb\\n\";\n \n-        let mut split: Vec<&str> = data.rsplitn(' ', 3).collect();\n+        let mut split: Vec<&str> = data.rsplitn(3, ' ').collect();\n         split.reverse();\n         assert_eq!(split, vec![\"\\nM\u00e4ry h\u00e4d \u00e4\", \"little\", \"l\u00e4mb\\nLittle\", \"l\u00e4mb\\n\"]);\n \n-        let mut split: Vec<&str> = data.rsplitn(|c: char| c == ' ', 3).collect();\n+        let mut split: Vec<&str> = data.rsplitn(3, |c: char| c == ' ').collect();\n         split.reverse();\n         assert_eq!(split, vec![\"\\nM\u00e4ry h\u00e4d \u00e4\", \"little\", \"l\u00e4mb\\nLittle\", \"l\u00e4mb\\n\"]);\n \n         // Unicode\n-        let mut split: Vec<&str> = data.rsplitn('\u00e4', 3).collect();\n+        let mut split: Vec<&str> = data.rsplitn(3, '\u00e4').collect();\n         split.reverse();\n         assert_eq!(split, vec![\"\\nM\u00e4ry h\u00e4d \", \" little l\", \"mb\\nLittle l\", \"mb\\n\"]);\n \n-        let mut split: Vec<&str> = data.rsplitn(|c: char| c == '\u00e4', 3).collect();\n+        let mut split: Vec<&str> = data.rsplitn(3, |c: char| c == '\u00e4').collect();\n         split.reverse();\n         assert_eq!(split, vec![\"\\nM\u00e4ry h\u00e4d \", \" little l\", \"mb\\nLittle l\", \"mb\\n\"]);\n     }"}]}