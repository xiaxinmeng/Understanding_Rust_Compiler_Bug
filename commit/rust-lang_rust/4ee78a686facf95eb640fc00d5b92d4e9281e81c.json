{"sha": "4ee78a686facf95eb640fc00d5b92d4e9281e81c", "node_id": "C_kwDOAAsO6NoAKDRlZTc4YTY4NmZhY2Y5NWViNjQwZmMwMGQ1YjkyZDRlOTI4MWU4MWM", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-15T22:24:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-15T22:24:40Z"}, "message": "Rollup merge of #98053 - GuillaumeGomez:fix-generic-impl-json-ice, r=notriddle\n\nFix generic impl rustdoc json output\n\nFixes #97986.\n\nThe problem in case of generic trait impl is that the trait's items are the same for all the types afterward. But since they're the same, it's safe for rustdoc-json to just ignore them.\n\nA little representation of what's going on:\n\n```rust\ntrait T {\n    fn f(); // <- defid 0\n}\n\nimpl<Y> T for Y {\n    fn f() {} // <- defid 1\n}\n\nstruct S; // <- defid 1 (since it matches `impl<Y> T for Y`\n```\n\ncc ```@Urgau```\n\nr? ```@CraftSpider```", "tree": {"sha": "ba451d17fb0ed0b8beba3ff15aee2fc49b4de334", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba451d17fb0ed0b8beba3ff15aee2fc49b4de334"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ee78a686facf95eb640fc00d5b92d4e9281e81c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiqlwpCRBK7hj4Ov3rIwAAbWoIAFkSz9YSxDSKLnZbckp5ctRG\n1FM/ciidf9P0tVotHxK0+bo6DPNjzUHhSWicGAvbWM7qkLLABBssGWbZanzoVWN1\n0z50kDtOjvr01oaS9+ciVtg+o3wJooTYcdaBWXZHWiqaESLv5UhkDxhx2tBWIHo0\nIFTUvt4A8lIYrGlWKwWBzhdQiqzDv7KvD+9uWI7kYV75cykFSnaCWBK+gm2HAkiF\nKLLg2w2SV5xvAXs2TFl5Kbacq5/K/wgv8c7sv0zXkICl9iTvX3npKDvwzmhPmR2/\nkAqOnYAW1saD7UZu9aA7IO0GPyW6i0km0zkvPgy3rfdOqqhR+DfsWUxjudEP/Sk=\n=C95B\n-----END PGP SIGNATURE-----\n", "payload": "tree ba451d17fb0ed0b8beba3ff15aee2fc49b4de334\nparent 52afa3a70c2f5fad0c61f06497b13b66490b97a8\nparent 99cd9cae10fd7c9db35f3047a7f376bdb2d13f66\nauthor Yuki Okushi <jtitor@2k36.org> 1655331880 +0900\ncommitter GitHub <noreply@github.com> 1655331880 +0900\n\nRollup merge of #98053 - GuillaumeGomez:fix-generic-impl-json-ice, r=notriddle\n\nFix generic impl rustdoc json output\n\nFixes #97986.\n\nThe problem in case of generic trait impl is that the trait's items are the same for all the types afterward. But since they're the same, it's safe for rustdoc-json to just ignore them.\n\nA little representation of what's going on:\n\n```rust\ntrait T {\n    fn f(); // <- defid 0\n}\n\nimpl<Y> T for Y {\n    fn f() {} // <- defid 1\n}\n\nstruct S; // <- defid 1 (since it matches `impl<Y> T for Y`\n```\n\ncc ```@Urgau```\n\nr? ```@CraftSpider```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ee78a686facf95eb640fc00d5b92d4e9281e81c", "html_url": "https://github.com/rust-lang/rust/commit/4ee78a686facf95eb640fc00d5b92d4e9281e81c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ee78a686facf95eb640fc00d5b92d4e9281e81c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52afa3a70c2f5fad0c61f06497b13b66490b97a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/52afa3a70c2f5fad0c61f06497b13b66490b97a8", "html_url": "https://github.com/rust-lang/rust/commit/52afa3a70c2f5fad0c61f06497b13b66490b97a8"}, {"sha": "99cd9cae10fd7c9db35f3047a7f376bdb2d13f66", "url": "https://api.github.com/repos/rust-lang/rust/commits/99cd9cae10fd7c9db35f3047a7f376bdb2d13f66", "html_url": "https://github.com/rust-lang/rust/commit/99cd9cae10fd7c9db35f3047a7f376bdb2d13f66"}], "stats": {"total": 77, "additions": 67, "deletions": 10}, "files": [{"sha": "0964b757e74f5cbd9966aa8937200782ccc8df0b", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/4ee78a686facf95eb640fc00d5b92d4e9281e81c/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee78a686facf95eb640fc00d5b92d4e9281e81c/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=4ee78a686facf95eb640fc00d5b92d4e9281e81c", "patch": "@@ -181,15 +181,44 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         let name = item.name;\n         let item_id = item.item_id;\n         if let Some(mut new_item) = self.convert_item(item) {\n-            if let types::ItemEnum::Trait(ref mut t) = new_item.inner {\n-                t.implementations = self.get_trait_implementors(item_id.expect_def_id())\n-            } else if let types::ItemEnum::Struct(ref mut s) = new_item.inner {\n-                s.impls = self.get_impls(item_id.expect_def_id())\n-            } else if let types::ItemEnum::Enum(ref mut e) = new_item.inner {\n-                e.impls = self.get_impls(item_id.expect_def_id())\n-            } else if let types::ItemEnum::Union(ref mut u) = new_item.inner {\n-                u.impls = self.get_impls(item_id.expect_def_id())\n-            }\n+            let can_be_ignored = match new_item.inner {\n+                types::ItemEnum::Trait(ref mut t) => {\n+                    t.implementations = self.get_trait_implementors(item_id.expect_def_id());\n+                    false\n+                }\n+                types::ItemEnum::Struct(ref mut s) => {\n+                    s.impls = self.get_impls(item_id.expect_def_id());\n+                    false\n+                }\n+                types::ItemEnum::Enum(ref mut e) => {\n+                    e.impls = self.get_impls(item_id.expect_def_id());\n+                    false\n+                }\n+                types::ItemEnum::Union(ref mut u) => {\n+                    u.impls = self.get_impls(item_id.expect_def_id());\n+                    false\n+                }\n+\n+                types::ItemEnum::Method(_)\n+                | types::ItemEnum::AssocConst { .. }\n+                | types::ItemEnum::AssocType { .. } => true,\n+                types::ItemEnum::Module(_)\n+                | types::ItemEnum::ExternCrate { .. }\n+                | types::ItemEnum::Import(_)\n+                | types::ItemEnum::StructField(_)\n+                | types::ItemEnum::Variant(_)\n+                | types::ItemEnum::Function(_)\n+                | types::ItemEnum::TraitAlias(_)\n+                | types::ItemEnum::Impl(_)\n+                | types::ItemEnum::Typedef(_)\n+                | types::ItemEnum::OpaqueTy(_)\n+                | types::ItemEnum::Constant(_)\n+                | types::ItemEnum::Static(_)\n+                | types::ItemEnum::ForeignType\n+                | types::ItemEnum::Macro(_)\n+                | types::ItemEnum::ProcMacro(_)\n+                | types::ItemEnum::PrimitiveType(_) => false,\n+            };\n             let removed = self\n                 .index\n                 .borrow_mut()\n@@ -199,7 +228,11 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n             // to make sure the items are unique. The main place this happens is when an item, is\n             // reexported in more than one place. See `rustdoc-json/reexport/in_root_and_mod`\n             if let Some(old_item) = removed {\n-                assert_eq!(old_item, new_item);\n+                // In case of generic implementations (like `impl<T> Trait for T {}`), all the\n+                // inner items will be duplicated so we can ignore if they are slightly different.\n+                if !can_be_ignored {\n+                    assert_eq!(old_item, new_item);\n+                }\n             }\n         }\n "}, {"sha": "ac68ba578b6fb9dab8eec78d8674a3885a4a67ab", "filename": "src/test/rustdoc-json/generic_impl.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4ee78a686facf95eb640fc00d5b92d4e9281e81c/src%2Ftest%2Frustdoc-json%2Fgeneric_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ee78a686facf95eb640fc00d5b92d4e9281e81c/src%2Ftest%2Frustdoc-json%2Fgeneric_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fgeneric_impl.rs?ref=4ee78a686facf95eb640fc00d5b92d4e9281e81c", "patch": "@@ -0,0 +1,24 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/97986>.\n+\n+// @has generic_impl.json\n+// @has - \"$.index[*][?(@.name=='f')]\"\n+// @has - \"$.index[*][?(@.name=='AssocTy')]\"\n+// @has - \"$.index[*][?(@.name=='AssocConst')]\"\n+\n+pub mod m {\n+    pub struct S;\n+}\n+\n+pub trait F {\n+    type AssocTy;\n+    const AssocConst: usize;\n+    fn f() -> m::S;\n+}\n+\n+impl<T> F for T {\n+    type AssocTy = u32;\n+    const AssocConst: usize = 0;\n+    fn f() -> m::S {\n+        m::S\n+    }\n+}"}]}