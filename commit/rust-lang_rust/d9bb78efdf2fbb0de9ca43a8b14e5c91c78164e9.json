{"sha": "d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YmI3OGVmZGYyZmJiMGRlOWNhNDNhOGIxNGU1YzkxYzc4MTY0ZTk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-08-20T21:55:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-08-28T01:47:58Z"}, "message": "librustc: Stop calling `each_path` in coherence.\n\n10% win or so for small crates.", "tree": {"sha": "e0466313c65afc02f8594fc6ab2404faf003431d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0466313c65afc02f8594fc6ab2404faf003431d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9", "html_url": "https://github.com/rust-lang/rust/commit/d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f32a2d8540cc7534270be3a0aa33b830534a67b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f32a2d8540cc7534270be3a0aa33b830534a67b", "html_url": "https://github.com/rust-lang/rust/commit/4f32a2d8540cc7534270be3a0aa33b830534a67b"}], "stats": {"total": 95, "additions": 77, "deletions": 18}, "files": [{"sha": "42959d9447e997a03aaf9354d59fa79c3bb6ef6f", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9", "patch": "@@ -182,6 +182,9 @@ pub static tag_misc_info_crate_items: uint = 0x80;\n pub static tag_item_method_provided_source: uint = 0x81;\n pub static tag_item_impl_vtables: uint = 0x82;\n \n+pub static tag_impls: uint = 0x83;\n+pub static tag_impls_impl: uint = 0x84;\n+\n pub struct LinkMeta {\n     name: @str,\n     vers: @str,"}, {"sha": "4e902f2d2ec92ce8ee368424eadd65da401a6667", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9", "patch": "@@ -246,3 +246,11 @@ pub fn get_link_args_for_crate(cstore: @mut cstore::CStore,\n     let cdata = cstore::get_crate_data(cstore, crate_num);\n     decoder::get_link_args_for_crate(cdata)\n }\n+\n+pub fn each_impl(cstore: @mut cstore::CStore,\n+                 crate_num: ast::CrateNum,\n+                 callback: &fn(ast::def_id)) {\n+    let cdata = cstore::get_crate_data(cstore, crate_num);\n+    decoder::each_impl(cdata, callback)\n+}\n+"}, {"sha": "89e09a7ae1dded73c04b329cbd8369c3da3dea14", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9", "patch": "@@ -1316,3 +1316,13 @@ pub fn get_link_args_for_crate(cdata: cmd) -> ~[~str] {\n     };\n     result\n }\n+\n+pub fn each_impl(cdata: cmd, callback: &fn(ast::def_id)) {\n+    let impls_doc = reader::get_doc(reader::Doc(cdata.data), tag_impls);\n+    let _ = do reader::tagged_docs(impls_doc, tag_impls_impl) |impl_doc| {\n+        callback(item_def_id(impl_doc, cdata));\n+        true\n+    };\n+}\n+\n+"}, {"sha": "1b05b0b781d5b1f82aff28da116b22c3c3316330", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9", "patch": "@@ -39,6 +39,7 @@ use syntax::attr::AttrMetaMethods;\n use syntax::diagnostic::span_handler;\n use syntax::parse::token::special_idents;\n use syntax::ast_util;\n+use syntax::visit::Visitor;\n use syntax::visit;\n use syntax::parse::token;\n use syntax;\n@@ -72,6 +73,7 @@ struct Stats {\n     dep_bytes: uint,\n     lang_item_bytes: uint,\n     link_args_bytes: uint,\n+    impl_bytes: uint,\n     misc_bytes: uint,\n     item_bytes: uint,\n     index_bytes: uint,\n@@ -1221,7 +1223,10 @@ struct EncodeVisitor {\n }\n \n impl visit::Visitor<()> for EncodeVisitor {\n-    fn visit_expr(&mut self, ex:@expr, _:()) { my_visit_expr(ex); }\n+    fn visit_expr(&mut self, ex:@expr, _:()) {\n+        visit::walk_expr(self, ex, ());\n+        my_visit_expr(ex);\n+    }\n     fn visit_item(&mut self, i:@item, _:()) {\n         visit::walk_item(self, i, ());\n         my_visit_item(i,\n@@ -1510,6 +1515,41 @@ fn encode_link_args(ecx: &EncodeContext, ebml_w: &mut writer::Encoder) {\n     ebml_w.end_tag();\n }\n \n+struct ImplVisitor<'self> {\n+    ecx: &'self EncodeContext<'self>,\n+    ebml_w: &'self mut writer::Encoder,\n+}\n+\n+impl<'self> Visitor<()> for ImplVisitor<'self> {\n+    fn visit_item(&mut self, item: @item, _: ()) {\n+        match item.node {\n+            item_impl(*) => {\n+                self.ebml_w.start_tag(tag_impls_impl);\n+                encode_def_id(self.ebml_w, local_def(item.id));\n+                self.ebml_w.end_tag();\n+            }\n+            _ => {}\n+        }\n+        visit::walk_item(self, item, ());\n+    }\n+}\n+\n+fn encode_impls(ecx: &EncodeContext,\n+                crate: &Crate,\n+                ebml_w: &mut writer::Encoder) {\n+    ebml_w.start_tag(tag_impls);\n+\n+    {\n+        let mut visitor = ImplVisitor {\n+            ecx: ecx,\n+            ebml_w: ebml_w,\n+        };\n+        visit::walk_crate(&mut visitor, crate, ());\n+    }\n+\n+    ebml_w.end_tag();\n+}\n+\n fn encode_misc_info(ecx: &EncodeContext,\n                     crate: &Crate,\n                     ebml_w: &mut writer::Encoder) {\n@@ -1574,6 +1614,7 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n         dep_bytes: 0,\n         lang_item_bytes: 0,\n         link_args_bytes: 0,\n+        impl_bytes: 0,\n         misc_bytes: 0,\n         item_bytes: 0,\n         index_bytes: 0,\n@@ -1632,6 +1673,11 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n     encode_link_args(&ecx, &mut ebml_w);\n     ecx.stats.link_args_bytes = *wr.pos - i;\n \n+    // Encode the def IDs of impls, for coherence checking.\n+    i = *wr.pos;\n+    encode_impls(&ecx, crate, &mut ebml_w);\n+    ecx.stats.impl_bytes = *wr.pos - i;\n+\n     // Encode miscellaneous info.\n     i = *wr.pos;\n     encode_misc_info(&ecx, crate, &mut ebml_w);\n@@ -1664,6 +1710,7 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n         printfln!(\"       dep bytes: %u\", ecx.stats.dep_bytes);\n         printfln!(\" lang item bytes: %u\", ecx.stats.lang_item_bytes);\n         printfln!(\" link args bytes: %u\", ecx.stats.link_args_bytes);\n+        printfln!(\"      impl bytes: %u\", ecx.stats.impl_bytes);\n         printfln!(\"      misc bytes: %u\", ecx.stats.misc_bytes);\n         printfln!(\"      item bytes: %u\", ecx.stats.item_bytes);\n         printfln!(\"     index bytes: %u\", ecx.stats.index_bytes);"}, {"sha": "d4212bc5aad2955ba256a798ca5b722890df05f3", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9", "patch": "@@ -15,10 +15,9 @@\n // each trait in the system to its implementations.\n \n \n-use metadata::csearch::{each_path, get_impl_trait};\n+use metadata::csearch::{each_impl, get_impl_trait};\n use metadata::csearch;\n use metadata::cstore::iter_crate_data;\n-use metadata::decoder::{dl_def, dl_field, dl_impl};\n use middle::ty::get;\n use middle::ty::{lookup_item_type, subst};\n use middle::ty::{substs, t, ty_bool, ty_bot, ty_box, ty_enum, ty_err};\n@@ -680,9 +679,6 @@ impl CoherenceChecker {\n         let tcx = self.crate_context.tcx;\n         let implementation = @csearch::get_impl(tcx, impl_def_id);\n \n-        debug!(\"coherence: adding impl from external crate: %s\",\n-               ty::item_path_str(tcx, implementation.did));\n-\n         // Make sure we don't visit the same implementation multiple times.\n         if !impls_seen.insert(implementation.did) {\n             // Skip this one.\n@@ -752,15 +748,10 @@ impl CoherenceChecker {\n \n         let crate_store = self.crate_context.tcx.sess.cstore;\n         do iter_crate_data(crate_store) |crate_number, _crate_metadata| {\n-            do each_path(crate_store, crate_number) |_, def_like, _| {\n-                match def_like {\n-                    dl_impl(def_id) => {\n-                        self.add_external_impl(&mut impls_seen, def_id)\n-                    }\n-                    dl_def(_) | dl_field => (),   // Skip this.\n-                }\n-                true\n-            };\n+            do each_impl(crate_store, crate_number) |def_id| {\n+                assert_eq!(crate_number, def_id.crate);\n+                self.add_external_impl(&mut impls_seen, def_id)\n+            }\n         }\n     }\n "}, {"sha": "9dc0abdfbd88ae506faff3c97552c118e42f344a", "filename": "src/libstd/rt/borrowck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9/src%2Flibstd%2Frt%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9/src%2Flibstd%2Frt%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fborrowck.rs?ref=d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9", "patch": "@@ -38,7 +38,7 @@ pub struct BorrowRecord {\n }\n \n fn try_take_task_borrow_list() -> Option<~[BorrowRecord]> {\n-    do Local::borrow::<Task, Option<~[BorrowRecord]>> |task| {\n+    do Local::borrow |task: &mut Task| {\n         task.borrow_list.take()\n     }\n }\n@@ -50,7 +50,7 @@ fn swap_task_borrow_list(f: &fn(~[BorrowRecord]) -> ~[BorrowRecord]) {\n     };\n     let borrows = f(borrows);\n     let borrows = Cell::new(borrows);\n-    do Local::borrow::<Task, ()> |task| {\n+    do Local::borrow |task: &mut Task| {\n         task.borrow_list = Some(borrows.take());\n     }\n }"}, {"sha": "5af0071f2ab9c2f4d4fde3780322163a684721d1", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=d9bb78efdf2fbb0de9ca43a8b14e5c91c78164e9", "patch": "@@ -555,7 +555,7 @@ impl Scheduler {\n             let current_task: &mut Task = match sched.cleanup_job {\n                 Some(CleanupJob { task: ref task, _ }) => {\n                     let task_ptr: *~Task = task;\n-                    transmute_mut_region(*transmute_mut_unsafe(task))\n+                    transmute_mut_region(*transmute_mut_unsafe(task_ptr))\n                 }\n                 None => {\n                     rtabort!(\"no cleanup job\");"}]}