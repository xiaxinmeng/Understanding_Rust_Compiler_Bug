{"sha": "19ed0aade60e1c1038fe40554bcd9d01b717effa", "node_id": "C_kwDOAAsO6NoAKDE5ZWQwYWFkZTYwZTFjMTAzOGZlNDA1NTRiY2Q5ZDAxYjcxN2VmZmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-26T22:45:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-26T22:45:58Z"}, "message": "Auto merge of #112013 - matthiaskrgr:rollup-a4pg2p8, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #111714 (Stop confusing specification levels when computing expectations.)\n - #111927 (Migrate `item_static` to Askama)\n - #111954 (improve error message for calling a method on a raw pointer with an unknown pointee)\n - #111973 (Update current implementation comments for `select_nth_unstable`)\n - #111976 (Generate docs for bootstrap itself)\n - #111977 (Make errors from `x doc` less verbose)\n - #111987 (do not prefer substs relate during coherence)\n - #111991 (Change ty and const error's pretty printing to be in braces)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9cab6819d78ffb21e704dbf9e7a75574784398a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cab6819d78ffb21e704dbf9e7a75574784398a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19ed0aade60e1c1038fe40554bcd9d01b717effa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19ed0aade60e1c1038fe40554bcd9d01b717effa", "html_url": "https://github.com/rust-lang/rust/commit/19ed0aade60e1c1038fe40554bcd9d01b717effa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19ed0aade60e1c1038fe40554bcd9d01b717effa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a5f8bce74ee432f7cc3aa131bc3d6920e06de10", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a5f8bce74ee432f7cc3aa131bc3d6920e06de10", "html_url": "https://github.com/rust-lang/rust/commit/1a5f8bce74ee432f7cc3aa131bc3d6920e06de10"}, {"sha": "a99209738eedbdd80e7fd4df244eb62f046260cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a99209738eedbdd80e7fd4df244eb62f046260cd", "html_url": "https://github.com/rust-lang/rust/commit/a99209738eedbdd80e7fd4df244eb62f046260cd"}], "stats": {"total": 188, "additions": 142, "deletions": 46}, "files": [{"sha": "2c60a0624605f983c03d0a8b9f2c318cc5420c86", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -1159,7 +1159,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             // those that do.\n             self.one_bound_for_assoc_type(\n                 || traits::supertraits(tcx, trait_ref),\n-                trait_ref.print_only_trait_path(),\n+                trait_ref.skip_binder().print_only_trait_name(),\n                 binding.item_name,\n                 path_span,\n                 match binding.kind {"}, {"sha": "3768b53698d647e9cf5472b1cd3d001c14de4b31", "filename": "compiler/rustc_hir_typeck/messages.ftl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/compiler%2Frustc_hir_typeck%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/compiler%2Frustc_hir_typeck%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fmessages.ftl?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -59,8 +59,8 @@ hir_typeck_lang_start_incorrect_param = parameter {$param_num} of the `start` la\n hir_typeck_lang_start_incorrect_ret_ty = the return type of the `start` lang item is incorrect\n     .suggestion = change the type from `{$found_ty}` to `{$expected_ty}`\n \n-hir_typeck_method_call_on_unknown_type =\n-    the type of this value must be known to call a method on a raw pointer on it\n+hir_typeck_method_call_on_unknown_raw_pointee =\n+    cannot call a method on a raw pointer with an unknown pointee type\n \n hir_typeck_missing_parentheses_in_range = can't call method `{$method_name}` on type `{$ty_str}`\n "}, {"sha": "0ceb5074a04f4b608a774d30899c0e48d48c801d", "filename": "compiler/rustc_hir_typeck/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -49,8 +49,8 @@ pub struct StructExprNonExhaustive {\n }\n \n #[derive(Diagnostic)]\n-#[diag(hir_typeck_method_call_on_unknown_type, code = \"E0699\")]\n-pub struct MethodCallOnUnknownType {\n+#[diag(hir_typeck_method_call_on_unknown_raw_pointee, code = \"E0699\")]\n+pub struct MethodCallOnUnknownRawPointee {\n     #[primary_span]\n     pub span: Span,\n }"}, {"sha": "9f3d35a77dc759faf6783bc2938c85b9417d7748", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -3,7 +3,7 @@ use super::CandidateSource;\n use super::MethodError;\n use super::NoMatchData;\n \n-use crate::errors::MethodCallOnUnknownType;\n+use crate::errors::MethodCallOnUnknownRawPointee;\n use crate::FnCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n@@ -438,7 +438,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // so we do a future-compat lint here for the 2015 edition\n                 // (see https://github.com/rust-lang/rust/issues/46906)\n                 if self.tcx.sess.rust_2018() {\n-                    self.tcx.sess.emit_err(MethodCallOnUnknownType { span });\n+                    self.tcx.sess.emit_err(MethodCallOnUnknownRawPointee { span });\n                 } else {\n                     self.tcx.struct_span_lint_hir(\n                         lint::builtin::TYVAR_BEHIND_RAW_POINTER,"}, {"sha": "8376835f52cfa2de0bcff6b67e0933be6270bf85", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -242,7 +242,9 @@ impl LintLevelsProvider for LintLevelQueryMap<'_> {\n \n struct QueryMapExpectationsWrapper<'tcx> {\n     tcx: TyCtxt<'tcx>,\n+    /// HirId of the currently investigated element.\n     cur: HirId,\n+    /// Level map for `cur`.\n     specs: ShallowLintLevelMap,\n     expectations: Vec<(LintExpectationId, LintExpectation)>,\n     unstable_to_stable_ids: FxHashMap<LintExpectationId, LintExpectationId>,\n@@ -255,11 +257,11 @@ impl LintLevelsProvider for QueryMapExpectationsWrapper<'_> {\n         self.specs.specs.get(&self.cur.local_id).unwrap_or(&self.empty)\n     }\n     fn insert(&mut self, id: LintId, lvl: LevelAndSource) {\n-        let specs = self.specs.specs.get_mut_or_insert_default(self.cur.local_id);\n-        specs.clear();\n-        specs.insert(id, lvl);\n+        self.specs.specs.get_mut_or_insert_default(self.cur.local_id).insert(id, lvl);\n     }\n     fn get_lint_level(&self, lint: &'static Lint, _: &Session) -> LevelAndSource {\n+        // We cannot use `tcx.lint_level_at_node` because we want to know in which order the\n+        // attributes have been inserted, in particular whether an `expect` follows a `forbid`.\n         self.specs.lint_level_id_at_node(self.tcx, LintId::of(lint), self.cur)\n     }\n     fn push_expectation(&mut self, id: LintExpectationId, expectation: LintExpectation) {\n@@ -355,7 +357,9 @@ impl<'tcx> Visitor<'tcx> for LintLevelsBuilder<'_, LintLevelQueryMap<'tcx>> {\n \n impl<'tcx> LintLevelsBuilder<'_, QueryMapExpectationsWrapper<'tcx>> {\n     fn add_id(&mut self, hir_id: HirId) {\n+        // Change both the `HirId` and the associated specs.\n         self.provider.cur = hir_id;\n+        self.provider.specs.specs.clear();\n         self.add(self.provider.tcx.hir().attrs(hir_id), hir_id == hir::CRATE_HIR_ID, Some(hir_id));\n     }\n }"}, {"sha": "d6c88ea96ca4300bed186a848953cf0db081fd4c", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -700,7 +700,7 @@ pub trait PrettyPrinter<'tcx>:\n                     if verbose { p!(write(\"{:?}\", infer_ty)) } else { p!(write(\"{}\", infer_ty)) }\n                 }\n             }\n-            ty::Error(_) => p!(\"[type error]\"),\n+            ty::Error(_) => p!(\"{{type error}}\"),\n             ty::Param(ref param_ty) => p!(print(param_ty)),\n             ty::Bound(debruijn, bound_ty) => match bound_ty.kind {\n                 ty::BoundTyKind::Anon => debug_bound_var(&mut self, debruijn, bound_ty.var)?,\n@@ -1379,8 +1379,8 @@ pub trait PrettyPrinter<'tcx>:\n             },\n             // FIXME(generic_const_exprs):\n             // write out some legible representation of an abstract const?\n-            ty::ConstKind::Expr(_) => p!(\"[const expr]\"),\n-            ty::ConstKind::Error(_) => p!(\"[const error]\"),\n+            ty::ConstKind::Expr(_) => p!(\"{{const expr}}\"),\n+            ty::ConstKind::Error(_) => p!(\"{{const error}}\"),\n         };\n         Ok(self)\n     }"}, {"sha": "56a254d9c07e124cc9afda57e7b7bea7571ff9af", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -231,13 +231,21 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n \n                 let mut candidates = Vec::new();\n                 // LHS normalizes-to RHS\n-                candidates.extend(\n-                    evaluate_normalizes_to(self, alias_lhs, rhs, direction, Invert::No).ok(),\n-                );\n+                candidates.extend(evaluate_normalizes_to(\n+                    self,\n+                    alias_lhs,\n+                    rhs,\n+                    direction,\n+                    Invert::No,\n+                ));\n                 // RHS normalizes-to RHS\n-                candidates.extend(\n-                    evaluate_normalizes_to(self, alias_rhs, lhs, direction, Invert::Yes).ok(),\n-                );\n+                candidates.extend(evaluate_normalizes_to(\n+                    self,\n+                    alias_rhs,\n+                    lhs,\n+                    direction,\n+                    Invert::Yes,\n+                ));\n                 // Relate via substs\n                 let subst_relate_response = self.probe(|ecx| {\n                     let span = tracing::span!(\n@@ -265,10 +273,18 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n \n                 if let Some(merged) = self.try_merge_responses(&candidates) {\n                     Ok(merged)\n-                } else if let Ok(subst_relate_response) = subst_relate_response {\n-                    Ok(subst_relate_response)\n                 } else {\n-                    self.flounder(&candidates)\n+                    // When relating two aliases and we have ambiguity, we prefer\n+                    // relating the generic arguments of the aliases over normalizing\n+                    // them. This is necessary for inference during typeck.\n+                    //\n+                    // As this is incomplete, we must not do so during coherence.\n+                    match (self.solver_mode(), subst_relate_response) {\n+                        (SolverMode::Normal, Ok(response)) => Ok(response),\n+                        (SolverMode::Normal, Err(NoSolution)) | (SolverMode::Coherence, _) => {\n+                            self.flounder(&candidates)\n+                        }\n+                    }\n                 }\n             }\n         }"}, {"sha": "1f19555522974614173ff43bdd395f8625b21985", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -3005,8 +3005,9 @@ impl<T> [T] {\n     ///\n     /// # Current implementation\n     ///\n-    /// The current algorithm is based on the quickselect portion of the same quicksort algorithm\n-    /// used for [`sort_unstable`].\n+    /// The current algorithm is an introselect implementation based on Pattern Defeating Quicksort, which is also\n+    /// the basis for [`sort_unstable`]. The fallback algorithm is Median of Medians using Tukey's Ninther for\n+    /// pivot selection, which guarantees linear runtime for all inputs.\n     ///\n     /// [`sort_unstable`]: slice::sort_unstable\n     ///\n@@ -3056,8 +3057,9 @@ impl<T> [T] {\n     ///\n     /// # Current implementation\n     ///\n-    /// The current algorithm is based on the quickselect portion of the same quicksort algorithm\n-    /// used for [`sort_unstable`].\n+    /// The current algorithm is an introselect implementation based on Pattern Defeating Quicksort, which is also\n+    /// the basis for [`sort_unstable`]. The fallback algorithm is Median of Medians using Tukey's Ninther for\n+    /// pivot selection, which guarantees linear runtime for all inputs.\n     ///\n     /// [`sort_unstable`]: slice::sort_unstable\n     ///"}, {"sha": "a86366e58f790d328e03bb178da9845be0bbab35", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -264,7 +264,7 @@ impl PathSet {\n \n     /// A convenience wrapper for Steps which know they have no aliases and all their sets contain only a single path.\n     ///\n-    /// This can be used with [`ShouldRun::krate`], [`ShouldRun::path`], or [`ShouldRun::alias`].\n+    /// This can be used with [`ShouldRun::crate_or_deps`], [`ShouldRun::path`], or [`ShouldRun::alias`].\n     #[track_caller]\n     pub fn assert_single_path(&self) -> &TaskPath {\n         match self {\n@@ -787,6 +787,7 @@ impl<'a> Builder<'a> {\n                 doc::EditionGuide,\n                 doc::StyleGuide,\n                 doc::Tidy,\n+                doc::Bootstrap,\n             ),\n             Kind::Dist => describe!(\n                 dist::Docs,\n@@ -1915,10 +1916,10 @@ impl<'a> Builder<'a> {\n         }\n \n         // For `cargo doc` invocations, make rustdoc print the Rust version into the docs\n-        // This replaces spaces with newlines because RUSTDOCFLAGS does not\n+        // This replaces spaces with tabs because RUSTDOCFLAGS does not\n         // support arguments with regular spaces. Hopefully someday Cargo will\n         // have space support.\n-        let rust_version = self.rust_version().replace(' ', \"\\n\");\n+        let rust_version = self.rust_version().replace(' ', \"\\t\");\n         rustdocflags.arg(\"--crate-version\").arg(&rust_version);\n \n         // Environment variables *required* throughout the build"}, {"sha": "b52c3b68cc4ff3d8d4555e2669d8c38fdf4a87a3", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -839,6 +839,8 @@ macro_rules! tool_doc {\n                 )+\n \n                 cargo.rustdocflag(\"--document-private-items\");\n+                // Since we always pass --document-private-items, there's no need to warn about linking to private items.\n+                cargo.rustdocflag(\"-Arustdoc::private-intra-doc-links\");\n                 cargo.rustdocflag(\"--enable-index-page\");\n                 cargo.rustdocflag(\"--show-type-layout\");\n                 cargo.rustdocflag(\"--generate-link-to-definition\");\n@@ -882,7 +884,8 @@ tool_doc!(\n         // \"cargo-credential-wincred\",\n     ]\n );\n-tool_doc!(Tidy, \"tidy\", \"src/tools/tidy\", [\"tidy\"]);\n+tool_doc!(Tidy, \"tidy\", \"src/tools/tidy\", rustc_tool = false, [\"tidy\"]);\n+tool_doc!(Bootstrap, \"bootstrap\", \"src/bootstrap\", rustc_tool = false, [\"bootstrap\"]);\n \n #[derive(Ord, PartialOrd, Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct ErrorIndex {"}, {"sha": "c7969d2a2c7bed1e1b635c2b07d3f61deab9c446", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -123,7 +123,7 @@ impl Config {\n     /// This is only required on NixOS and uses the PatchELF utility to\n     /// change the interpreter/RPATH of ELF executables.\n     ///\n-    /// Please see https://nixos.org/patchelf.html for more information\n+    /// Please see <https://nixos.org/patchelf.html> for more information\n     fn fix_bin_or_dylib(&self, fname: &Path) {\n         assert_eq!(SHOULD_FIX_BINS_AND_DYLIBS.get(), Some(&true));\n         println!(\"attempting to patch {}\", fname.display());"}, {"sha": "943f513415a1689ff4d9f364079dacc0442dc387", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -1011,6 +1011,8 @@ impl Build {\n     }\n \n     /// Return a `Group` guard for a [`Step`] that is built for each `--stage`.\n+    ///\n+    /// [`Step`]: crate::builder::Step\n     fn msg(\n         &self,\n         action: impl Into<Kind>,\n@@ -1035,6 +1037,8 @@ impl Build {\n     }\n \n     /// Return a `Group` guard for a [`Step`] that is only built once and isn't affected by `--stage`.\n+    ///\n+    /// [`Step`]: crate::builder::Step\n     fn msg_unstaged(\n         &self,\n         action: impl Into<Kind>,"}, {"sha": "9bfdc77e6b6cc39b50c2f5ab73c11fb4cdeed5ae", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -488,7 +488,7 @@ fn absolute_windows(path: &std::path::Path) -> std::io::Result<std::path::PathBu\n     }\n }\n \n-/// Adapted from https://github.com/llvm/llvm-project/blob/782e91224601e461c019e0a4573bbccc6094fbcd/llvm/cmake/modules/HandleLLVMOptions.cmake#L1058-L1079\n+/// Adapted from <https://github.com/llvm/llvm-project/blob/782e91224601e461c019e0a4573bbccc6094fbcd/llvm/cmake/modules/HandleLLVMOptions.cmake#L1058-L1079>\n ///\n /// When `clang-cl` is used with instrumentation, we need to add clang's runtime library resource\n /// directory to the linker flags, otherwise there will be linker errors about the profiler runtime"}, {"sha": "2961a288406416f4555fdb9c30b6ae6ce95f3551", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -1541,19 +1541,23 @@ fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean\n     write!(w, \"{}\", document_type_layout(cx, def_id));\n }\n \n-fn item_static(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Static) {\n-    wrap_item(w, |w| {\n-        render_attributes_in_code(w, it, cx.tcx());\n+fn item_static(w: &mut impl fmt::Write, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Static) {\n+    let mut buffer = Buffer::new();\n+    wrap_item(&mut buffer, |buffer| {\n+        render_attributes_in_code(buffer, it, cx.tcx());\n         write!(\n-            w,\n+            buffer,\n             \"{vis}static {mutability}{name}: {typ}\",\n             vis = visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx),\n             mutability = s.mutability.print_with_space(),\n             name = it.name.unwrap(),\n             typ = s.type_.print(cx)\n         );\n     });\n-    write!(w, \"{}\", document(cx, it, None, HeadingOffset::H2))\n+\n+    write!(w, \"{}\", buffer.into_inner()).unwrap();\n+\n+    write!(w, \"{}\", document(cx, it, None, HeadingOffset::H2)).unwrap();\n }\n \n fn item_foreign_type(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item) {"}, {"sha": "3d1197afd0f79a5d0b06d0e91b557f1aed109362", "filename": "tests/ui/const-generics/transmute-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/tests%2Fui%2Fconst-generics%2Ftransmute-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/tests%2Fui%2Fconst-generics%2Ftransmute-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ftransmute-fail.stderr?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -4,8 +4,8 @@ error[E0512]: cannot transmute between types of different sizes, or dependently-\n LL |     std::mem::transmute(v)\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: source type: `[[u32; H+1]; W]` (generic size [const expr])\n-   = note: target type: `[[u32; W+1]; H]` (generic size [const expr])\n+   = note: source type: `[[u32; H+1]; W]` (generic size {const expr})\n+   = note: target type: `[[u32; W+1]; H]` (generic size {const expr})\n \n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n   --> $DIR/transmute-fail.rs:16:5\n@@ -34,8 +34,8 @@ error[E0512]: cannot transmute between types of different sizes, or dependently-\n LL |     std::mem::transmute(v)\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: source type: `[[u32; H]; W]` (generic size [const expr])\n-   = note: target type: `[u32; W * H * H]` (generic size [const expr])\n+   = note: source type: `[[u32; H]; W]` (generic size {const expr})\n+   = note: target type: `[u32; W * H * H]` (generic size {const expr})\n \n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n   --> $DIR/transmute-fail.rs:30:5"}, {"sha": "0bae65a9ae53d8819e924e29942fdbe58b560820", "filename": "tests/ui/editions/edition-raw-pointer-method-2018.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/tests%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/tests%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.rs?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let x = 0;\n     let y = &x as *const _;\n     let _ = y.is_null();\n-    //~^ error: the type of this value must be known to call a method on a raw pointer on it [E0699]\n+    //~^ error: cannot call a method on a raw pointer with an unknown pointee type [E0699]\n }"}, {"sha": "b9afa0133cac3e2b67cc1be59745a81718a28ad5", "filename": "tests/ui/editions/edition-raw-pointer-method-2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/tests%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/tests%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feditions%2Fedition-raw-pointer-method-2018.stderr?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -1,4 +1,4 @@\n-error[E0699]: the type of this value must be known to call a method on a raw pointer on it\n+error[E0699]: cannot call a method on a raw pointer with an unknown pointee type\n   --> $DIR/edition-raw-pointer-method-2018.rs:9:15\n    |\n LL |     let _ = y.is_null();"}, {"sha": "0cade7fef02fd5af8387ac7d6918a06e61f836a3", "filename": "tests/ui/lint/rfc-2383-lint-reason/root-attribute-confusion.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/tests%2Fui%2Flint%2Frfc-2383-lint-reason%2Froot-attribute-confusion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/tests%2Fui%2Flint%2Frfc-2383-lint-reason%2Froot-attribute-confusion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Frfc-2383-lint-reason%2Froot-attribute-confusion.rs?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -0,0 +1,7 @@\n+// check-pass\n+// compile-flags: -Dunused_attributes\n+\n+#![deny(unused_crate_dependencies)]\n+#![feature(lint_reasons)]\n+\n+fn main() {}"}, {"sha": "fe4275f5367a9224cf0125b1ab884fffea214ad5", "filename": "tests/ui/methods/call_method_unknown_pointee.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/tests%2Fui%2Fmethods%2Fcall_method_unknown_pointee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/tests%2Fui%2Fmethods%2Fcall_method_unknown_pointee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fcall_method_unknown_pointee.rs?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -0,0 +1,28 @@\n+// edition: 2018\n+\n+// tests that the pointee type of a raw pointer must be known to call methods on it\n+// see also: `tests/ui/editions/edition-raw-pointer-method-2018.rs`\n+\n+fn main() {\n+    let val = 1_u32;\n+    let ptr = &val as *const u32;\n+    unsafe {\n+        let _a: i32 = (ptr as *const _).read();\n+        //~^ ERROR cannot call a method on a raw pointer with an unknown pointee type [E0699]\n+        let b = ptr as *const _;\n+        let _b: u8 = b.read();\n+        //~^ ERROR cannot call a method on a raw pointer with an unknown pointee type [E0699]\n+        let _c = (ptr as *const u8).read(); // we know the type here\n+    }\n+\n+    let mut val = 2_u32;\n+    let ptr = &mut val as *mut u32;\n+    unsafe {\n+        let _a: i32 = (ptr as *mut _).read();\n+        //~^ ERROR cannot call a method on a raw pointer with an unknown pointee type [E0699]\n+        let b = ptr as *mut _;\n+        b.write(10);\n+        //~^ ERROR cannot call a method on a raw pointer with an unknown pointee type [E0699]\n+        (ptr as *mut i32).write(1000); // we know the type here\n+    }\n+}"}, {"sha": "84ecf046e7ac21ec828612e24d1ede5357465b51", "filename": "tests/ui/methods/call_method_unknown_pointee.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/tests%2Fui%2Fmethods%2Fcall_method_unknown_pointee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/tests%2Fui%2Fmethods%2Fcall_method_unknown_pointee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fcall_method_unknown_pointee.stderr?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -0,0 +1,27 @@\n+error[E0699]: cannot call a method on a raw pointer with an unknown pointee type\n+  --> $DIR/call_method_unknown_pointee.rs:10:41\n+   |\n+LL |         let _a: i32 = (ptr as *const _).read();\n+   |                                         ^^^^\n+\n+error[E0699]: cannot call a method on a raw pointer with an unknown pointee type\n+  --> $DIR/call_method_unknown_pointee.rs:13:24\n+   |\n+LL |         let _b: u8 = b.read();\n+   |                        ^^^^\n+\n+error[E0699]: cannot call a method on a raw pointer with an unknown pointee type\n+  --> $DIR/call_method_unknown_pointee.rs:21:39\n+   |\n+LL |         let _a: i32 = (ptr as *mut _).read();\n+   |                                       ^^^^\n+\n+error[E0699]: cannot call a method on a raw pointer with an unknown pointee type\n+  --> $DIR/call_method_unknown_pointee.rs:24:11\n+   |\n+LL |         b.write(10);\n+   |           ^^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0699`."}, {"sha": "e7f7fdc513bb79bc37efb0c46deb8f87c03573d1", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.rs?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -2,7 +2,7 @@\n \n trait One<A> { fn foo(&self) -> A; }\n \n-fn foo(_: &dyn One()) //~ ERROR associated type `Output` not found for `One<()>`\n+fn foo(_: &dyn One()) //~ ERROR associated type `Output` not found for `One`\n {}\n \n fn main() { }"}, {"sha": "e4772478bd91056e0ac4eb7075ee92515c2b4aaa", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-1.stderr?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -1,4 +1,4 @@\n-error[E0220]: associated type `Output` not found for `One<()>`\n+error[E0220]: associated type `Output` not found for `One`\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-1.rs:5:16\n    |\n LL | fn foo(_: &dyn One())"}, {"sha": "eb18b121957c4258fd49b5b26d5f2c72ac0efc18", "filename": "tests/ui/unboxed-closures/unboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19ed0aade60e1c1038fe40554bcd9d01b717effa/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19ed0aade60e1c1038fe40554bcd9d01b717effa/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.stderr?ref=19ed0aade60e1c1038fe40554bcd9d01b717effa", "patch": "@@ -12,7 +12,7 @@ note: trait defined here, with 3 generic parameters: `A`, `B`, `C`\n LL | trait Three<A,B,C> { fn dummy(&self) -> (A,B,C); }\n    |       ^^^^^ - - -\n \n-error[E0220]: associated type `Output` not found for `Three<(), [type error], [type error]>`\n+error[E0220]: associated type `Output` not found for `Three`\n   --> $DIR/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs:5:16\n    |\n LL | fn foo(_: &dyn Three())"}]}