{"sha": "34067ee9613bdc87557d4803e77d2856fa167b0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MDY3ZWU5NjEzYmRjODc1NTdkNDgwM2U3N2QyODU2ZmExNjdiMGE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-25T01:48:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-25T01:48:27Z"}, "message": "Rollup merge of #64599 - csmoe:doc_async_reexport, r=nikomatsakis\n\nRustdoc render async function re-export\n\nCloses #63710\nr? @nikomatsakis", "tree": {"sha": "d054268bde25f2c9ad64a1c05132bd49e67821fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d054268bde25f2c9ad64a1c05132bd49e67821fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34067ee9613bdc87557d4803e77d2856fa167b0a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdisdsCRBK7hj4Ov3rIwAAdHIIAKhfaTE62e9TUK/fiwr/k1ig\nc5p+/h2XEqiZ+5V0DDBJGuT6uARMLYkha8iVE7a2o4EfFJKXXbis6wBpIfAI94VN\nbX9RT4mnOQhI1wTwVnF/L+d8uf+An0hWQ1jAkxEfQh4wtdWRVZ42gq2pTdfBjego\nH6GcouMS5tH8fs6YOC4+DnJ0z53R7aWmFX75hey/MBBoKz7hdOi0FWwtGV1jAnyl\nHkl+08fu+aiZ5FWc4Wmppr2eFJuaE5GCqSlwuG88H5dhcM4eC4FdIaw/5qhUZqgT\nwmo5BJoGzkcQSAyN0+5ZJal/ezFNESPt5Yz3lzHXbe9Gez70S7UG2VdpyS/izF4=\n=UJDY\n-----END PGP SIGNATURE-----\n", "payload": "tree d054268bde25f2c9ad64a1c05132bd49e67821fc\nparent bc3afb76bbc25379255ae50d6768b8ac31c59c33\nparent a744fd04321f6307303a22ecc8880cbc7b6bcbda\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569376107 +0200\ncommitter GitHub <noreply@github.com> 1569376107 +0200\n\nRollup merge of #64599 - csmoe:doc_async_reexport, r=nikomatsakis\n\nRustdoc render async function re-export\n\nCloses #63710\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34067ee9613bdc87557d4803e77d2856fa167b0a", "html_url": "https://github.com/rust-lang/rust/commit/34067ee9613bdc87557d4803e77d2856fa167b0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34067ee9613bdc87557d4803e77d2856fa167b0a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc3afb76bbc25379255ae50d6768b8ac31c59c33", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc3afb76bbc25379255ae50d6768b8ac31c59c33", "html_url": "https://github.com/rust-lang/rust/commit/bc3afb76bbc25379255ae50d6768b8ac31c59c33"}, {"sha": "a744fd04321f6307303a22ecc8880cbc7b6bcbda", "url": "https://api.github.com/repos/rust-lang/rust/commits/a744fd04321f6307303a22ecc8880cbc7b6bcbda", "html_url": "https://github.com/rust-lang/rust/commit/a744fd04321f6307303a22ecc8880cbc7b6bcbda"}], "stats": {"total": 65, "additions": 60, "deletions": 5}, "files": [{"sha": "6cd1be460d7c6d0556d5204c18e76474281ed755", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34067ee9613bdc87557d4803e77d2856fa167b0a/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34067ee9613bdc87557d4803e77d2856fa167b0a/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=34067ee9613bdc87557d4803e77d2856fa167b0a", "patch": "@@ -244,6 +244,10 @@ rustc_queries! {\n             desc { |tcx| \"checking if item is const fn: `{}`\", tcx.def_path_str(key) }\n         }\n \n+        query asyncness(key: DefId) -> hir::IsAsync {\n+            desc { |tcx| \"checking if the function is async: `{}`\", tcx.def_path_str(key) }\n+        }\n+\n         /// Returns `true` if calls to the function may be promoted.\n         ///\n         /// This is either because the function is e.g., a tuple-struct or tuple-variant"}, {"sha": "89afbbaf4d402749dc907c5c078d037e24cd5289", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/34067ee9613bdc87557d4803e77d2856fa167b0a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34067ee9613bdc87557d4803e77d2856fa167b0a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=34067ee9613bdc87557d4803e77d2856fa167b0a", "patch": "@@ -3353,13 +3353,30 @@ fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Ty<'_>> {\n     }\n }\n \n+/// Check if a function is async.\n+fn asyncness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::IsAsync {\n+    let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap_or_else(|| {\n+        bug!(\"asyncness: expected local `DefId`, got `{:?}`\", def_id)\n+    });\n+\n+    let node = tcx.hir().get(hir_id);\n+\n+    let fn_like = hir::map::blocks::FnLikeNode::from_node(node).unwrap_or_else(|| {\n+        bug!(\"asyncness: expected fn-like node but got `{:?}`\", def_id);\n+    });\n+\n+    fn_like.asyncness()\n+}\n+\n+\n pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     context::provide(providers);\n     erase_regions::provide(providers);\n     layout::provide(providers);\n     util::provide(providers);\n     constness::provide(providers);\n     *providers = ty::query::Providers {\n+        asyncness,\n         associated_item,\n         associated_item_def_ids,\n         adt_sized_constraint,"}, {"sha": "11121ee875ddab9cf0f3c065fe58b5c11640f339", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34067ee9613bdc87557d4803e77d2856fa167b0a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34067ee9613bdc87557d4803e77d2856fa167b0a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=34067ee9613bdc87557d4803e77d2856fa167b0a", "patch": "@@ -134,6 +134,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     fn_sig => { cdata.fn_sig(def_id.index, tcx) }\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }\n     is_const_fn_raw => { cdata.is_const_fn_raw(def_id.index) }\n+    asyncness => { cdata.asyncness(def_id.index) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     static_mutability => { cdata.static_mutability(def_id.index) }\n     def_kind => { cdata.def_kind(def_id.index) }"}, {"sha": "247748eb3eba5285b57b3aad29c70207b018f27b", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/34067ee9613bdc87557d4803e77d2856fa167b0a/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34067ee9613bdc87557d4803e77d2856fa167b0a/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=34067ee9613bdc87557d4803e77d2856fa167b0a", "patch": "@@ -1212,6 +1212,15 @@ impl<'a, 'tcx> CrateMetadata {\n         constness == hir::Constness::Const\n     }\n \n+    pub fn asyncness(&self, id: DefIndex) -> hir::IsAsync {\n+         match self.entry(id).kind {\n+            EntryKind::Fn(data) => data.decode(self).asyncness,\n+            EntryKind::Method(data) => data.decode(self).fn_data.asyncness,\n+            EntryKind::ForeignFn(data) => data.decode(self).asyncness,\n+            _ => bug!(\"asyncness: expect functions entry.\"),\n+        }\n+    }\n+\n     pub fn is_foreign_item(&self, id: DefIndex) -> bool {\n         match self.entry(id).kind {\n             EntryKind::ForeignImmStatic |"}, {"sha": "965a8658c9592edf225ac250b2ff7d9794fd613a", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34067ee9613bdc87557d4803e77d2856fa167b0a/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34067ee9613bdc87557d4803e77d2856fa167b0a/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=34067ee9613bdc87557d4803e77d2856fa167b0a", "patch": "@@ -875,7 +875,7 @@ impl EncodeContext<'tcx> {\n                 EntryKind::AssocConst(container, const_qualif, rendered_const)\n             }\n             ty::AssocKind::Method => {\n-                let fn_data = if let hir::TraitItemKind::Method(_, ref m) = ast_item.node {\n+                let fn_data = if let hir::TraitItemKind::Method(method_sig, m) = &ast_item.node {\n                     let param_names = match *m {\n                         hir::TraitMethod::Required(ref names) => {\n                             self.encode_fn_param_names(names)\n@@ -885,6 +885,7 @@ impl EncodeContext<'tcx> {\n                         }\n                     };\n                     FnData {\n+                        asyncness: method_sig.header.asyncness,\n                         constness: hir::Constness::NotConst,\n                         param_names,\n                         sig: self.lazy(&tcx.fn_sig(def_id)),\n@@ -982,6 +983,7 @@ impl EncodeContext<'tcx> {\n             ty::AssocKind::Method => {\n                 let fn_data = if let hir::ImplItemKind::Method(ref sig, body) = ast_item.node {\n                     FnData {\n+                        asyncness: sig.header.asyncness,\n                         constness: sig.header.constness,\n                         param_names: self.encode_fn_param_names_for_body(body),\n                         sig: self.lazy(&tcx.fn_sig(def_id)),\n@@ -1128,6 +1130,7 @@ impl EncodeContext<'tcx> {\n             }\n             hir::ItemKind::Fn(_, header, .., body) => {\n                 let data = FnData {\n+                    asyncness: header.asyncness,\n                     constness: header.constness,\n                     param_names: self.encode_fn_param_names_for_body(body),\n                     sig: self.lazy(tcx.fn_sig(def_id)),\n@@ -1677,6 +1680,7 @@ impl EncodeContext<'tcx> {\n         let kind = match nitem.node {\n             hir::ForeignItemKind::Fn(_, ref names, _) => {\n                 let data = FnData {\n+                    asyncness: hir::IsAsync::NotAsync,\n                     constness: hir::Constness::NotConst,\n                     param_names: self.encode_fn_param_names(names),\n                     sig: self.lazy(tcx.fn_sig(def_id)),"}, {"sha": "92534ab056a8bc141ec02405fc7cd25da2c7f5bf", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34067ee9613bdc87557d4803e77d2856fa167b0a/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34067ee9613bdc87557d4803e77d2856fa167b0a/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=34067ee9613bdc87557d4803e77d2856fa167b0a", "patch": "@@ -295,6 +295,7 @@ pub struct MacroDef {\n \n #[derive(RustcEncodable, RustcDecodable)]\n pub struct FnData<'tcx> {\n+    pub asyncness: hir::IsAsync,\n     pub constness: hir::Constness,\n     pub param_names: Lazy<[ast::Name]>,\n     pub sig: Lazy<ty::PolyFnSig<'tcx>>,"}, {"sha": "479c8c37283052538e70cc8905146475652dd369", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34067ee9613bdc87557d4803e77d2856fa167b0a/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34067ee9613bdc87557d4803e77d2856fa167b0a/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=34067ee9613bdc87557d4803e77d2856fa167b0a", "patch": "@@ -217,7 +217,7 @@ fn build_external_function(cx: &DocContext<'_>, did: DefId) -> clean::Function {\n     } else {\n         hir::Constness::NotConst\n     };\n-\n+    let asyncness =  cx.tcx.asyncness(did);\n     let predicates = cx.tcx.predicates_of(did);\n     let (generics, decl) = clean::enter_impl_trait(cx, || {\n         ((cx.tcx.generics_of(did), &predicates).clean(cx), (did, sig).clean(cx))\n@@ -230,7 +230,7 @@ fn build_external_function(cx: &DocContext<'_>, did: DefId) -> clean::Function {\n             unsafety: sig.unsafety(),\n             abi: sig.abi(),\n             constness,\n-            asyncness: hir::IsAsync::NotAsync,\n+            asyncness,\n         },\n         all_types,\n         ret_types,"}, {"sha": "d1a9b740d62ab9bee36f5fa14d140d126df122be", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/34067ee9613bdc87557d4803e77d2856fa167b0a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34067ee9613bdc87557d4803e77d2856fa167b0a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=34067ee9613bdc87557d4803e77d2856fa167b0a", "patch": "@@ -2403,6 +2403,7 @@ impl Clean<Item> for ty::AssocItem {\n                     } else {\n                         hir::Constness::NotConst\n                     };\n+                    let asyncness = cx.tcx.asyncness(self.def_id);\n                     let defaultness = match self.container {\n                         ty::ImplContainer(_) => Some(self.defaultness),\n                         ty::TraitContainer(_) => None,\n@@ -2414,7 +2415,7 @@ impl Clean<Item> for ty::AssocItem {\n                             unsafety: sig.unsafety(),\n                             abi: sig.abi(),\n                             constness,\n-                            asyncness: hir::IsAsync::NotAsync,\n+                            asyncness,\n                         },\n                         defaultness,\n                         all_types,"}, {"sha": "913ba8f2a164921cbe434dae973c6a5bdee9066f", "filename": "src/test/rustdoc/inline_cross/auxiliary/impl_trait_aux.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34067ee9613bdc87557d4803e77d2856fa167b0a/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fimpl_trait_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34067ee9613bdc87557d4803e77d2856fa167b0a/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fimpl_trait_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fimpl_trait_aux.rs?ref=34067ee9613bdc87557d4803e77d2856fa167b0a", "patch": "@@ -1,3 +1,5 @@\n+// edition:2018\n+\n use std::ops::Deref;\n \n pub fn func<'a>(_x: impl Clone + Into<Vec<u8>> + 'a) {}\n@@ -11,8 +13,16 @@ pub fn func3(_x: impl Iterator<Item = impl Iterator<Item = u8>> + Clone) {}\n \n pub fn func4<T: Iterator<Item = impl Clone>>(_x: T) {}\n \n+pub async fn async_fn() {}\n+\n pub struct Foo;\n \n impl Foo {\n     pub fn method<'a>(_x: impl Clone + Into<Vec<u8>> + 'a) {}\n }\n+\n+pub struct Bar;\n+\n+impl Bar {\n+    pub async fn async_foo(&self) {}\n+}"}, {"sha": "6f4a48c83c05ba3108f1b038e5f9b12197794631", "filename": "src/test/rustdoc/inline_cross/impl_trait.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34067ee9613bdc87557d4803e77d2856fa167b0a/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34067ee9613bdc87557d4803e77d2856fa167b0a/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs?ref=34067ee9613bdc87557d4803e77d2856fa167b0a", "patch": "@@ -1,4 +1,5 @@\n // aux-build:impl_trait_aux.rs\n+// edition:2018\n \n extern crate impl_trait_aux;\n \n@@ -20,13 +21,20 @@ pub use impl_trait_aux::func2;\n // @!has - '//pre[@class=\"rust fn\"]' 'where'\n pub use impl_trait_aux::func3;\n \n-\n // @has impl_trait/fn.func4.html\n // @has - '//pre[@class=\"rust fn\"]' \"func4<T>(\"\n // @has - '//pre[@class=\"rust fn\"]' \"T: Iterator<Item = impl Clone>,\"\n pub use impl_trait_aux::func4;\n \n+// @has impl_trait/fn.async_fn.html\n+// @has - '//pre[@class=\"rust fn\"]' \"pub async fn async_fn()\"\n+pub use impl_trait_aux::async_fn;\n+\n // @has impl_trait/struct.Foo.html\n // @has - '//code[@id=\"method.v\"]' \"pub fn method<'a>(_x: impl Clone + Into<Vec<u8>> + 'a)\"\n // @!has - '//code[@id=\"method.v\"]' 'where'\n pub use impl_trait_aux::Foo;\n+\n+// @has impl_trait/struct.Bar.html\n+// @has - '//*[@id=\"method.async_foo\"]' \"pub async fn async_foo(\"\n+pub use impl_trait_aux::Bar;"}]}