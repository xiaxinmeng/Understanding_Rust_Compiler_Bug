{"sha": "5d52455c65bf5a5eb258ed11591b8ebfa61ea5c7", "node_id": "C_kwDOAAsO6NoAKDVkNTI0NTVjNjViZjVhNWViMjU4ZWQxMTU5MWI4ZWJmYTYxZWE1Yzc", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2022-02-09T01:38:21Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-02-09T01:43:26Z"}, "message": "Review for clarity and concision\n\nCo-authored-by: Caleb Zulawski <caleb.zulawski@gmail.com>", "tree": {"sha": "e467414a84d310741b5c95ce8a217044f14cc18f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e467414a84d310741b5c95ce8a217044f14cc18f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d52455c65bf5a5eb258ed11591b8ebfa61ea5c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d52455c65bf5a5eb258ed11591b8ebfa61ea5c7", "html_url": "https://github.com/rust-lang/rust/commit/5d52455c65bf5a5eb258ed11591b8ebfa61ea5c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d52455c65bf5a5eb258ed11591b8ebfa61ea5c7/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e628a2991c47a771340cc5f8f06826c918f79609", "url": "https://api.github.com/repos/rust-lang/rust/commits/e628a2991c47a771340cc5f8f06826c918f79609", "html_url": "https://github.com/rust-lang/rust/commit/e628a2991c47a771340cc5f8f06826c918f79609"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "5bd8ed69535e160edb8353f4ad60e98e5aba3668", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5d52455c65bf5a5eb258ed11591b8ebfa61ea5c7/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d52455c65bf5a5eb258ed11591b8ebfa61ea5c7/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=5d52455c65bf5a5eb258ed11591b8ebfa61ea5c7", "patch": "@@ -13,10 +13,9 @@ use crate::simd::intrinsics;\n use crate::simd::{LaneCount, Mask, MaskElement, SupportedLaneCount};\n \n /// A SIMD vector of `LANES` elements of type `T`. `Simd<T, N>` has the same shape as [`[T; N]`](array), but operates like `T`.\n-/// This type is commonly known by names like `f32x4` or `Vec4` in many programming languages.\n ///\n-/// Two vectors of the same type and length will, by convention, support the binary operations (+, *, etc.) that `T` does.\n-/// These take the lanes at each index on the left-hand side and right-hand side, perform the binary operation,\n+/// Two vectors of the same type and length will, by convention, support the operators (+, *, etc.) that `T` does.\n+/// These take the lanes at each index on the left-hand side and right-hand side, perform the operation,\n /// and return the result in the same lane in a vector of equal size. For a given operator, this is equivalent to zipping\n /// the two arrays together and mapping the operator over each lane.\n ///\n@@ -29,14 +28,14 @@ use crate::simd::{LaneCount, Mask, MaskElement, SupportedLaneCount};\n /// let zm_mul = a0.zip(a1).map(|(lhs, rhs)| lhs * rhs);\n ///\n /// // `Simd<T, N>` implements `From<[T; N]>\n-/// let [v0, v1] = [a0, a1].map(|a| Simd::from(a));\n+/// let (v0, v1) = (Simd::from(a0), Simd::from(a1));\n /// // Which means arrays implement `Into<Simd<T, N>>`.\n /// assert_eq!(v0 + v1, zm_add.into());\n /// assert_eq!(v0 * v1, zm_mul.into());\n /// ```\n ///\n /// `Simd` with integers has the quirk that these operations are also inherently wrapping, as if `T` was [`Wrapping<T>`].\n-/// Thus, `Simd` does not implement `wrapping_add`, because that is the behavior of the normal operation.\n+/// Thus, `Simd` does not implement `wrapping_add`, because that is the default behavior.\n /// This means there is no warning on overflows, even in \"debug\" builds.\n /// For most applications where `Simd` is appropriate, it is \"not a bug\" to wrap,\n /// and even \"debug builds\" are unlikely to tolerate the loss of performance."}, {"sha": "50f7a4ca170db983187a26dfc251a9aafacb91b0", "filename": "crates/core_simd/tests/ops_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d52455c65bf5a5eb258ed11591b8ebfa61ea5c7/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d52455c65bf5a5eb258ed11591b8ebfa61ea5c7/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_macros.rs?ref=5d52455c65bf5a5eb258ed11591b8ebfa61ea5c7", "patch": "@@ -213,13 +213,13 @@ macro_rules! impl_signed_tests {\n                 fn div_min_may_overflow<const LANES: usize>() {\n                     let a = Vector::<LANES>::splat(Scalar::MIN);\n                     let b = Vector::<LANES>::splat(-1);\n-                    assert_eq!(a / b, a / (b * b));\n+                    assert_eq!(a / b, a);\n                 }\n \n                 fn rem_min_may_overflow<const LANES: usize>() {\n                     let a = Vector::<LANES>::splat(Scalar::MIN);\n                     let b = Vector::<LANES>::splat(-1);\n-                    assert_eq!(a % b, a % (b * b));\n+                    assert_eq!(a % b, Vector::<LANES>::splat(0));\n                 }\n \n             }"}]}