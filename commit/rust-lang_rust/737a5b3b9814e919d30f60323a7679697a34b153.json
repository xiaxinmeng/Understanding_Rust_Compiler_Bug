{"sha": "737a5b3b9814e919d30f60323a7679697a34b153", "node_id": "C_kwDOAAsO6NoAKDczN2E1YjNiOTgxNGU5MTlkMzBmNjAzMjNhNzY3OTY5N2EzNGIxNTM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-18T14:59:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-18T14:59:46Z"}, "message": "tweak correctness comment", "tree": {"sha": "a79d501dda311fd99f23e12f6064491a4402ea7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a79d501dda311fd99f23e12f6064491a4402ea7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/737a5b3b9814e919d30f60323a7679697a34b153", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJirehiCRBK7hj4Ov3rIwAAeTIIAGDbg/YwydKE5ZdQVSJ5wM48\neWlHMJ57k4TFpciwpw1XKmCX8snNO7L+3LaKDL53BanBso1kiSkINsB+T6ZX+oo8\nxelDLy999d4rZDMeuTrFy6WI3M/ki/AARUTlaGzcLrXaoxHbkvyviPgU4kd3pDsM\nUkJUvr12IPiFXOiGswBux+3iME0upwz+pYg9evTX8LmllO5ApoEdmAg6XId6/kCO\nr3tznlWwW5iTJoLy/Xa+c3tX8yc8i61W2CeS76OqonxywWlvJcnQRRBysFmhO9O3\nceNtuf2TKN/Pp5Vw/ulbPnVv4BOY6JA99GZU+ACTy1JetpWMi/n+iCdZ0/5aglE=\n=vRtT\n-----END PGP SIGNATURE-----\n", "payload": "tree a79d501dda311fd99f23e12f6064491a4402ea7f\nparent 807a19a50a663c75874bb79afeecd4b12de583e2\nauthor Ralf Jung <post@ralfj.de> 1655564386 -0700\ncommitter GitHub <noreply@github.com> 1655564386 -0700\n\ntweak correctness comment"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/737a5b3b9814e919d30f60323a7679697a34b153", "html_url": "https://github.com/rust-lang/rust/commit/737a5b3b9814e919d30f60323a7679697a34b153", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/737a5b3b9814e919d30f60323a7679697a34b153/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "807a19a50a663c75874bb79afeecd4b12de583e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/807a19a50a663c75874bb79afeecd4b12de583e2", "html_url": "https://github.com/rust-lang/rust/commit/807a19a50a663c75874bb79afeecd4b12de583e2"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "0fdbde8d6775f726106c8b522ad0f2842e5020f8", "filename": "src/shims/unix/linux/sync.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/737a5b3b9814e919d30f60323a7679697a34b153/src%2Fshims%2Funix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/737a5b3b9814e919d30f60323a7679697a34b153/src%2Fshims%2Funix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fsync.rs?ref=737a5b3b9814e919d30f60323a7679697a34b153", "patch": "@@ -132,10 +132,10 @@ pub fn futex<'tcx>(\n             // otherwise we will deadlock.\n             //\n             // There are two scenarios to consider:\n-            // 1. If we (FUTEX_WAIT) executes first, we'll push ourselves into\n+            // 1. If we (FUTEX_WAIT) execute first, we'll push ourselves into\n             //    the waiters queue and go to sleep. They (addr write & FUTEX_WAKE)\n             //    will see us in the queue and wake us up.\n-            // 2. If they (addr write & FUTEX_WAKE) executes first, we must observe\n+            // 2. If they (addr write & FUTEX_WAKE) execute first, we must observe\n             //    addr's new value. If we see an outdated value that happens to equal\n             //    the expected val, then we'll put ourselves to sleep with no one to wake us\n             //    up, so we end up with a deadlock. This is prevented by having a SeqCst\n@@ -157,7 +157,9 @@ pub fn futex<'tcx>(\n             //    right value. This is useless to us, since we need the read itself\n             //    to see an up-to-date value.\n             //\n-            // It is also critical that the fence, the atomic load, and the comparison\n+            // The above case distinction is valid since both FUTEX_WAIT and FUTEX_WAKE\n+            // contain a SeqCst fence, therefore inducting a total order between the operations.\n+            // It is also critical that the fence, the atomic load, and the comparison in FUTEX_WAIT\n             // altogether happen atomically. If the other thread's fence in FUTEX_WAKE\n             // gets interleaved after our fence, then we lose the guarantee on the\n             // atomic load being up-to-date; if the other thread's write on addr and FUTEX_WAKE"}]}