{"sha": "5e984a32d9b8a381d0b7f192f4a915aac59f18db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlOTg0YTMyZDliOGEzODFkMGI3ZjE5MmY0YTkxNWFhYzU5ZjE4ZGI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-23T16:11:57Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-25T13:38:51Z"}, "message": "Use simd instructions for int and float simd intrinsics", "tree": {"sha": "9bcb8ba901605b3eb034d29341aa30af3a4c1a28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bcb8ba901605b3eb034d29341aa30af3a4c1a28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e984a32d9b8a381d0b7f192f4a915aac59f18db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e984a32d9b8a381d0b7f192f4a915aac59f18db", "html_url": "https://github.com/rust-lang/rust/commit/5e984a32d9b8a381d0b7f192f4a915aac59f18db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e984a32d9b8a381d0b7f192f4a915aac59f18db/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8e846dee0cfc0de4a30605df6611855721ca537", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e846dee0cfc0de4a30605df6611855721ca537", "html_url": "https://github.com/rust-lang/rust/commit/f8e846dee0cfc0de4a30605df6611855721ca537"}], "stats": {"total": 106, "additions": 32, "deletions": 74}, "files": [{"sha": "8ce0c87730dcd6656c931c877458a436660c1be4", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 32, "deletions": 74, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/5e984a32d9b8a381d0b7f192f4a915aac59f18db/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e984a32d9b8a381d0b7f192f4a915aac59f18db/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=5e984a32d9b8a381d0b7f192f4a915aac59f18db", "patch": "@@ -268,93 +268,51 @@ macro simd_cmp {\n \n macro simd_int_binop {\n     ($fx:expr, $intrinsic:expr, $op:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        simd_pair_for_each_lane(\n-            $fx,\n-            $intrinsic,\n-            $x,\n-            $y,\n-            $ret,\n-            |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.kind {\n-                    ty::Uint(_) | ty::Int(_) => fx.bcx.ins().$op(x_lane, y_lane),\n-                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n-                };\n-                CValue::by_val(res_lane, ret_lane_layout)\n-            },\n-        );\n+        simd_int_binop!($fx, $intrinsic, $op|$op($x, $y) -> $ret);\n     },\n     ($fx:expr, $intrinsic:expr, $op_u:ident|$op_s:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        simd_pair_for_each_lane(\n-            $fx,\n-            $intrinsic,\n-            $x,\n-            $y,\n-            $ret,\n-            |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.kind {\n-                    ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n-                    ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n-                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n-                };\n-                CValue::by_val(res_lane, ret_lane_layout)\n-            },\n-        );\n+        let (lane_layout, lane_count) = lane_type_and_count($fx.tcx, $x.layout());\n+        let x_val = $x.load_vector($fx);\n+        let y_val = $y.load_vector($fx);\n+\n+        let res = match lane_layout.ty.kind {\n+            ty::Uint(_) => $fx.bcx.ins().$op_u(x_val, y_val),\n+            ty::Int(_) => $fx.bcx.ins().$op_s(x_val, y_val),\n+            _ => unreachable!(\"{:?}\", lane_layout.ty),\n+        };\n+        $ret.write_cvalue($fx, CValue::by_val(res, $ret.layout()));\n     },\n }\n \n macro simd_int_flt_binop {\n     ($fx:expr, $intrinsic:expr, $op:ident|$op_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        simd_pair_for_each_lane(\n-            $fx,\n-            $intrinsic,\n-            $x,\n-            $y,\n-            $ret,\n-            |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.kind {\n-                    ty::Uint(_) | ty::Int(_) => fx.bcx.ins().$op(x_lane, y_lane),\n-                    ty::Float(_) => fx.bcx.ins().$op_f(x_lane, y_lane),\n-                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n-                };\n-                CValue::by_val(res_lane, ret_lane_layout)\n-            },\n-        );\n+        simd_int_flt_binop!($fx, $intrinsic, $op|$op|$op_f($x, $y) -> $ret);\n     },\n     ($fx:expr, $intrinsic:expr, $op_u:ident|$op_s:ident|$op_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n-        simd_pair_for_each_lane(\n-            $fx,\n-            $intrinsic,\n-            $x,\n-            $y,\n-            $ret,\n-            |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.kind {\n-                    ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n-                    ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n-                    ty::Float(_) => fx.bcx.ins().$op_f(x_lane, y_lane),\n-                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n-                };\n-                CValue::by_val(res_lane, ret_lane_layout)\n-            },\n-        );\n+        let (lane_layout, lane_count) = lane_type_and_count($fx.tcx, $x.layout());\n+        let x_val = $x.load_vector($fx);\n+        let y_val = $y.load_vector($fx);\n+\n+        let res = match lane_layout.ty.kind {\n+            ty::Uint(_) => $fx.bcx.ins().$op_u(x_val, y_val),\n+            ty::Int(_) => $fx.bcx.ins().$op_s(x_val, y_val),\n+            ty::Float(_) => $fx.bcx.ins().$op_f(x_val, y_val),\n+            _ => unreachable!(\"{:?}\", lane_layout.ty),\n+        };\n+        $ret.write_cvalue($fx, CValue::by_val(res, $ret.layout()));\n     },\n }\n \n macro simd_flt_binop($fx:expr, $intrinsic:expr, $op:ident($x:ident, $y:ident) -> $ret:ident) {\n-    simd_pair_for_each_lane(\n-        $fx,\n-        $intrinsic,\n-        $x,\n-        $y,\n-        $ret,\n-        |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n-            let res_lane = match lane_layout.ty.kind {\n-                ty::Float(_) => fx.bcx.ins().$op(x_lane, y_lane),\n-                _ => unreachable!(\"{:?}\", lane_layout.ty),\n-            };\n-            CValue::by_val(res_lane, ret_lane_layout)\n-        },\n-    );\n+    let (lane_layout, lane_count) = lane_type_and_count($fx.tcx, $x.layout());\n+        let x_val = $x.load_vector($fx);\n+        let y_val = $y.load_vector($fx);\n+\n+        let res = match lane_layout.ty.kind {\n+            ty::Float(_) => $fx.bcx.ins().$op(x_val, y_val),\n+            _ => unreachable!(\"{:?}\", lane_layout.ty),\n+        };\n+        $ret.write_cvalue($fx, CValue::by_val(res, $ret.layout()));\n }\n \n pub fn codegen_intrinsic_call<'tcx>("}]}