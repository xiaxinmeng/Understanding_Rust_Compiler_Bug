{"sha": "58fdc43e03bd77c575bc1c62b18b784f71ab4bf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZmRjNDNlMDNiZDc3YzU3NWJjMWM2MmIxOGI3ODRmNzFhYjRiZjI=", "commit": {"author": {"name": "Michal Sudwoj", "email": "msudwoj@student.ethz.ch", "date": "2020-05-21T21:01:22Z"}, "committer": {"name": "Michal Sudwoj", "email": "msudwoj@student.ethz.ch", "date": "2020-05-24T06:20:35Z"}, "message": "NVPTX support for new asm!", "tree": {"sha": "4dc2f241f89e0e7baa2dee1f4beb75fd0642e809", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dc2f241f89e0e7baa2dee1f4beb75fd0642e809"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58fdc43e03bd77c575bc1c62b18b784f71ab4bf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58fdc43e03bd77c575bc1c62b18b784f71ab4bf2", "html_url": "https://github.com/rust-lang/rust/commit/58fdc43e03bd77c575bc1c62b18b784f71ab4bf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58fdc43e03bd77c575bc1c62b18b784f71ab4bf2/comments", "author": {"login": "westernmagic", "id": 147945, "node_id": "MDQ6VXNlcjE0Nzk0NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/147945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/westernmagic", "html_url": "https://github.com/westernmagic", "followers_url": "https://api.github.com/users/westernmagic/followers", "following_url": "https://api.github.com/users/westernmagic/following{/other_user}", "gists_url": "https://api.github.com/users/westernmagic/gists{/gist_id}", "starred_url": "https://api.github.com/users/westernmagic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/westernmagic/subscriptions", "organizations_url": "https://api.github.com/users/westernmagic/orgs", "repos_url": "https://api.github.com/users/westernmagic/repos", "events_url": "https://api.github.com/users/westernmagic/events{/privacy}", "received_events_url": "https://api.github.com/users/westernmagic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "westernmagic", "id": 147945, "node_id": "MDQ6VXNlcjE0Nzk0NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/147945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/westernmagic", "html_url": "https://github.com/westernmagic", "followers_url": "https://api.github.com/users/westernmagic/followers", "following_url": "https://api.github.com/users/westernmagic/following{/other_user}", "gists_url": "https://api.github.com/users/westernmagic/gists{/gist_id}", "starred_url": "https://api.github.com/users/westernmagic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/westernmagic/subscriptions", "organizations_url": "https://api.github.com/users/westernmagic/orgs", "repos_url": "https://api.github.com/users/westernmagic/repos", "events_url": "https://api.github.com/users/westernmagic/events{/privacy}", "received_events_url": "https://api.github.com/users/westernmagic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3137f8e2d141d7d7c65040a718a9193f50e1282e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3137f8e2d141d7d7c65040a718a9193f50e1282e", "html_url": "https://github.com/rust-lang/rust/commit/3137f8e2d141d7d7c65040a718a9193f50e1282e"}], "stats": {"total": 238, "additions": 238, "deletions": 0}, "files": [{"sha": "fe4cd16c1f5e52ff6e2823f7373c57a38c21477c", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/58fdc43e03bd77c575bc1c62b18b784f71ab4bf2/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58fdc43e03bd77c575bc1c62b18b784f71ab4bf2/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=58fdc43e03bd77c575bc1c62b18b784f71ab4bf2", "patch": "@@ -254,6 +254,7 @@ impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                     ]);\n                 }\n                 InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {}\n+                InlineAsmArch::Nvptx64 => {}\n             }\n         }\n         if !options.contains(InlineAsmOptions::NOMEM) {\n@@ -410,6 +411,11 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass) -> String {\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low4) => \"x\",\n             InlineAsmRegClass::Arm(ArmInlineAsmRegClass::dreg)\n             | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg) => \"w\",\n+            InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg16) => \"h\",\n+            InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg32) => \"r\",\n+            InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg64) => \"l\",\n+            InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::freg32) => \"f\",\n+            InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::freg64) => \"d\",\n             InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => \"f\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::reg) => \"r\",\n@@ -452,6 +458,7 @@ fn modifier_to_llvm(\n                 modifier\n             }\n         }\n+        InlineAsmRegClass::Nvptx(_) => None,\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg)\n         | InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => None,\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::reg)\n@@ -502,6 +509,11 @@ fn dummy_output_type(cx: &CodegenCx<'ll, 'tcx>, reg: InlineAsmRegClass) -> &'ll\n         | InlineAsmRegClass::Arm(ArmInlineAsmRegClass::qreg_low4) => {\n             cx.type_vector(cx.type_i64(), 2)\n         }\n+        InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg16) => cx.type_i16(),\n+        InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg32) => cx.type_i32(),\n+        InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg64) => cx.type_i64(),\n+        InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::freg32) => cx.type_f32(),\n+        InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::freg64) => cx.type_f64(),\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg) => cx.type_i32(),\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => cx.type_f32(),\n         InlineAsmRegClass::X86(X86InlineAsmRegClass::reg)"}, {"sha": "ffca742e9ab8d1de57de4a84c3a73f4dec010c45", "filename": "src/librustc_target/asm/mod.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/58fdc43e03bd77c575bc1c62b18b784f71ab4bf2/src%2Flibrustc_target%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58fdc43e03bd77c575bc1c62b18b784f71ab4bf2/src%2Flibrustc_target%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Fmod.rs?ref=58fdc43e03bd77c575bc1c62b18b784f71ab4bf2", "patch": "@@ -146,11 +146,13 @@ macro_rules! types {\n \n mod aarch64;\n mod arm;\n+mod nvptx;\n mod riscv;\n mod x86;\n \n pub use aarch64::{AArch64InlineAsmReg, AArch64InlineAsmRegClass};\n pub use arm::{ArmInlineAsmReg, ArmInlineAsmRegClass};\n+pub use nvptx::{NvptxInlineAsmReg, NvptxInlineAsmRegClass};\n pub use riscv::{RiscVInlineAsmReg, RiscVInlineAsmRegClass};\n pub use x86::{X86InlineAsmReg, X86InlineAsmRegClass};\n \n@@ -162,6 +164,7 @@ pub enum InlineAsmArch {\n     AArch64,\n     RiscV32,\n     RiscV64,\n+    Nvptx64,\n }\n \n impl FromStr for InlineAsmArch {\n@@ -175,6 +178,7 @@ impl FromStr for InlineAsmArch {\n             \"aarch64\" => Ok(Self::AArch64),\n             \"riscv32\" => Ok(Self::RiscV32),\n             \"riscv64\" => Ok(Self::RiscV64),\n+            \"nvptx64\" => Ok(Self::Nvptx64),\n             _ => Err(()),\n         }\n     }\n@@ -196,6 +200,7 @@ pub enum InlineAsmReg {\n     Arm(ArmInlineAsmReg),\n     AArch64(AArch64InlineAsmReg),\n     RiscV(RiscVInlineAsmReg),\n+    Nvptx(NvptxInlineAsmReg),\n }\n \n impl InlineAsmReg {\n@@ -205,6 +210,7 @@ impl InlineAsmReg {\n             Self::Arm(r) => r.name(),\n             Self::AArch64(r) => r.name(),\n             Self::RiscV(r) => r.name(),\n+            Self::Nvptx(r) => r.name(),\n         }\n     }\n \n@@ -214,6 +220,7 @@ impl InlineAsmReg {\n             Self::Arm(r) => InlineAsmRegClass::Arm(r.reg_class()),\n             Self::AArch64(r) => InlineAsmRegClass::AArch64(r.reg_class()),\n             Self::RiscV(r) => InlineAsmRegClass::RiscV(r.reg_class()),\n+            Self::Nvptx(r) => InlineAsmRegClass::Nvptx(r.reg_class()),\n         }\n     }\n \n@@ -236,6 +243,9 @@ impl InlineAsmReg {\n             InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n                 Self::RiscV(RiscVInlineAsmReg::parse(arch, has_feature, &name)?)\n             }\n+            InlineAsmArch::Nvptx64 => {\n+                Self::Nvptx(NvptxInlineAsmReg::parse(arch, has_feature, &name)?)\n+            }\n         })\n     }\n \n@@ -252,6 +262,7 @@ impl InlineAsmReg {\n             Self::Arm(r) => r.emit(out, arch, modifier),\n             Self::AArch64(r) => r.emit(out, arch, modifier),\n             Self::RiscV(r) => r.emit(out, arch, modifier),\n+            Self::Nvptx(r) => r.emit(out, arch, modifier),\n         }\n     }\n \n@@ -261,6 +272,7 @@ impl InlineAsmReg {\n             Self::Arm(r) => r.overlapping_regs(|r| cb(Self::Arm(r))),\n             Self::AArch64(_) => cb(self),\n             Self::RiscV(_) => cb(self),\n+            Self::Nvptx(_) => cb(self),\n         }\n     }\n }\n@@ -281,6 +293,7 @@ pub enum InlineAsmRegClass {\n     Arm(ArmInlineAsmRegClass),\n     AArch64(AArch64InlineAsmRegClass),\n     RiscV(RiscVInlineAsmRegClass),\n+    Nvptx(NvptxInlineAsmRegClass),\n }\n \n impl InlineAsmRegClass {\n@@ -290,6 +303,7 @@ impl InlineAsmRegClass {\n             Self::Arm(r) => r.name(),\n             Self::AArch64(r) => r.name(),\n             Self::RiscV(r) => r.name(),\n+            Self::Nvptx(r) => r.name(),\n         }\n     }\n \n@@ -302,6 +316,7 @@ impl InlineAsmRegClass {\n             Self::Arm(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Arm),\n             Self::AArch64(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::AArch64),\n             Self::RiscV(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::RiscV),\n+            Self::Nvptx(r) => r.suggest_class(arch, ty).map(InlineAsmRegClass::Nvptx),\n         }\n     }\n \n@@ -321,6 +336,7 @@ impl InlineAsmRegClass {\n             Self::Arm(r) => r.suggest_modifier(arch, ty),\n             Self::AArch64(r) => r.suggest_modifier(arch, ty),\n             Self::RiscV(r) => r.suggest_modifier(arch, ty),\n+            Self::Nvptx(r) => r.suggest_modifier(arch, ty),\n         }\n     }\n \n@@ -336,6 +352,7 @@ impl InlineAsmRegClass {\n             Self::Arm(r) => r.default_modifier(arch),\n             Self::AArch64(r) => r.default_modifier(arch),\n             Self::RiscV(r) => r.default_modifier(arch),\n+            Self::Nvptx(r) => r.default_modifier(arch),\n         }\n     }\n \n@@ -350,6 +367,7 @@ impl InlineAsmRegClass {\n             Self::Arm(r) => r.supported_types(arch),\n             Self::AArch64(r) => r.supported_types(arch),\n             Self::RiscV(r) => r.supported_types(arch),\n+            Self::Nvptx(r) => r.supported_types(arch),\n         }\n     }\n \n@@ -367,6 +385,9 @@ impl InlineAsmRegClass {\n                 InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n                     Self::RiscV(RiscVInlineAsmRegClass::parse(arch, name)?)\n                 }\n+                InlineAsmArch::Nvptx64 => {\n+                    Self::Nvptx(NvptxInlineAsmRegClass::parse(arch, name)?)\n+                }\n             })\n         })\n     }\n@@ -379,6 +400,7 @@ impl InlineAsmRegClass {\n             Self::Arm(r) => r.valid_modifiers(arch),\n             Self::AArch64(r) => r.valid_modifiers(arch),\n             Self::RiscV(r) => r.valid_modifiers(arch),\n+            Self::Nvptx(r) => r.valid_modifiers(arch),\n         }\n     }\n }\n@@ -518,5 +540,10 @@ pub fn allocatable_registers(\n             riscv::fill_reg_map(arch, has_feature, &mut map);\n             map\n         }\n+        InlineAsmArch::Nvptx64 => {\n+            let mut map = nvptx::regclass_map();\n+            nvptx::fill_reg_map(arch, has_feature, &mut map);\n+            map\n+        }\n     }\n }"}, {"sha": "b574e921718ada0cf7df4164005d0489179d5c7c", "filename": "src/librustc_target/asm/nvptx.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/58fdc43e03bd77c575bc1c62b18b784f71ab4bf2/src%2Flibrustc_target%2Fasm%2Fnvptx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58fdc43e03bd77c575bc1c62b18b784f71ab4bf2/src%2Flibrustc_target%2Fasm%2Fnvptx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Fnvptx.rs?ref=58fdc43e03bd77c575bc1c62b18b784f71ab4bf2", "patch": "@@ -0,0 +1,90 @@\n+use super::{InlineAsmArch, InlineAsmType};\n+use rustc_macros::HashStable_Generic;\n+use std::fmt;\n+\n+def_reg_class! {\n+    Nvptx NvptxInlineAsmRegClass {\n+        reg16,\n+        reg32,\n+        reg64,\n+        freg32,\n+        freg64,\n+    }\n+}\n+\n+impl NvptxInlineAsmRegClass {\n+    pub fn valid_modifiers(self, _arch: InlineAsmArch) -> &'static [char] {\n+        &[]\n+    }\n+\n+    pub fn suggest_class(self, _arch: InlineAsmArch, _ty: InlineAsmType) -> Option<Self> {\n+        None\n+    }\n+\n+    pub fn suggest_modifier(\n+        self,\n+        _arch: InlineAsmArch,\n+        _ty: InlineAsmType,\n+    ) -> Option<(char, &'static str)> {\n+        None\n+    }\n+\n+    pub fn default_modifier(self, _arch: InlineAsmArch) -> Option<(char, &'static str)> {\n+        None\n+    }\n+\n+    pub fn supported_types(\n+        self,\n+        _arch: InlineAsmArch,\n+    ) -> &'static [(InlineAsmType, Option<&'static str>)] {\n+        match self {\n+            Self::reg16 => types! { _: I8, I16; },\n+            Self::reg32 => types! { _: I8, I16, I32; },\n+            Self::reg64 => types! { _: I8, I16, I32, I64; },\n+            Self::freg32 => types! { _: F32; },\n+            Self::freg64 => types! { _: F32, F64; },\n+        }\n+    }\n+}\n+\n+def_regs! {\n+    Nvptx NvptxInlineAsmReg NvptxInlineAsmRegClass {\n+        // We have to define a register, otherwise we get warnings/errors about unused imports and\n+        // unreachable code. Do what clang does and define r0.\n+        r0: reg32 = [\"r0\"],\n+        #error = [\"tid\", \"tid.x\", \"tid.y\", \"tid.z\"] => \"tid not supported for inline asm\",\n+        #error = [\"ntid\", \"ntid.x\", \"ntid.y\", \"ntid.z\"] => \"ntid not supported for inline asm\",\n+        #error = [\"laneid\"] => \"laneid not supported for inline asm\",\n+        #error = [\"warpid\"] => \"warpid not supported for inline asm\",\n+        #error = [\"nwarpid\"] => \"nwarpid not supported for inline asm\",\n+        #error = [\"ctaid\", \"ctaid.x\", \"ctaid.y\", \"ctaid.z\"] => \"ctaid not supported for inline asm\",\n+        #error = [\"nctaid\", \"nctaid.x\", \"nctaid.y\", \"nctaid.z\"] => \"nctaid not supported for inline asm\",\n+        #error = [\"smid\"] => \"smid not supported for inline asm\",\n+        #error = [\"nsmid\"] => \"nsmid not supported for inline asm\",\n+        #error = [\"gridid\"] => \"gridid not supported for inline asm\",\n+        #error = [\"lanemask_eq\"] => \"lanemask_eq not supported for inline asm\",\n+        #error = [\"lanemask_le\"] => \"lanemask_le not supported for inline asm\",\n+        #error = [\"lanemask_lt\"] => \"lanemask_lt not supported for inline asm\",\n+        #error = [\"lanemask_ge\"] => \"lanemask_ge not supported for inline asm\",\n+        #error = [\"lanemask_gt\"] => \"lanemask_gt not supported for inline asm\",\n+        #error = [\"clock\", \"clock_hi\"] => \"clock not supported for inline asm\",\n+        #error = [\"clock64\"] => \"clock64 not supported for inline asm\",\n+        #error = [\"pm0\", \"pm1\", \"pm2\", \"pm3\", \"pm4\", \"pm5\", \"pm6\", \"pm7\"] => \"pm not supported for inline asm\",\n+        #error = [\"pm0_64\", \"pm1_64\", \"pm2_64\", \"pm3_64\", \"pm4_64\", \"pm5_64\", \"pm6_64\", \"pm7_64\"] => \"pm_64 not supported for inline asm\",\n+        #error = [\"envreg0\", \"envreg1\", \"envreg2\", \"envreg3\", \"envreg4\", \"envreg5\", \"envreg6\", \"envreg7\", \"envreg8\", \"envreg9\", \"envreg10\", \"envreg11\", \"envreg12\", \"envreg13\", \"envreg14\", \"envreg15\", \"envreg16\", \"envreg17\", \"envreg18\", \"envreg19\", \"envreg20\", \"envreg21\", \"envreg22\", \"envreg23\", \"envreg24\", \"envreg25\", \"envreg26\", \"envreg27\", \"envreg28\", \"envreg29\", \"envreg30\", \"envreg31\"] => \"envreg not supported for inline asm\",\n+        #error = [\"globaltimer\", \"globaltimer_lo\", \"globaltimer_hi\"] => \"globaltimer not supported for inline asm\",\n+        #error = [\"total_mem_size\"] => \"total_mem_size not supported for inline asm\",\n+        #error = [\"dynamic_mem_size\"] => \"dynamic_mem_size not supported for inline asm\",\n+    }\n+}\n+\n+impl NvptxInlineAsmReg {\n+    pub fn emit(\n+        self,\n+        out: &mut dyn fmt::Write,\n+        _arch: InlineAsmArch,\n+        _modifier: Option<char>,\n+    ) -> fmt::Result {\n+        out.write_str(self.name())\n+    }\n+}"}, {"sha": "cfaab23512458e1bbac8e42e07e477bfb743ff17", "filename": "src/test/assembly/asm/nvptx-types.rs", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/58fdc43e03bd77c575bc1c62b18b784f71ab4bf2/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58fdc43e03bd77c575bc1c62b18b784f71ab4bf2/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs?ref=58fdc43e03bd77c575bc1c62b18b784f71ab4bf2", "patch": "@@ -0,0 +1,109 @@\n+// no-system-llvm\n+// assembly-output: emit-asm\n+// compile-flags: --target --nvptx64-nvidia-cuda\n+// only-nvptx64\n+// ignore-nvptx64\n+\n+#![feature(no_core, lang_items, rustc_attrs)]\n+#![crate_type = \"rlib\"]\n+#![no_core]\n+#![allow(asm_sub_register, non_camel_case_types)]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! stringify {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+type ptr = *mut u8;\n+\n+impl Copy for i8 {}\n+impl Copy for i16 {}\n+impl Copy for i32 {}\n+impl Copy for f32 {}\n+impl Copy for i64 {}\n+impl Copy for f64 {}\n+impl Copy for ptr {}\n+\n+#[no_mangle]\n+fn extern_func();\n+\n+// CHECK-LABEL: sym_fn\n+// CHECK: #APP\n+// CHECK call extern_func;\n+// CHECK: #NO_APP\n+#[no_mangle]\n+pub unsafe fn sym_fn() {\n+    asm!(\"call {}\", sym extern_func);\n+}\n+\n+macro_rules! check {\n+    ($func:ident $ty:ident, $class:ident $mov:literal) => {\n+        #[no_mangle]\n+        pub unsafe fn $func(x: $ty) -> $ty {\n+            // Hack to avoid function merging\n+            extern \"Rust\" {\n+                fn dont_merge(s: &str);\n+            }\n+            dont_merge(stringify!($func));\n+\n+            let y;\n+            asm!(concat!($mov, \" {}, {};\"), out($class) y, in($class) x);\n+            y\n+        }\n+    };\n+}\n+\n+// CHECK-LABEL: reg_i8\n+// CHECK: #APP\n+// CHECK: mov.i16 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n+// CHECK: #NO_APP\n+check!(reg_i8 i8 reg16 \"mov.i16\");\n+\n+// CHECK-LABEL: reg_i16\n+// CHECK: #APP\n+// CHECK: mov.i16 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n+// CHECK: #NO_APP\n+check!(reg_i16 i16 reg16 \"mov.i16\");\n+\n+// CHECK-LABEL: reg_i32\n+// CHECK: #APP\n+// CHECK: mov.i32 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n+// CHECK: #NO_APP\n+check!(reg_i32 i32 reg32 \"mov.i32\");\n+\n+// CHECK-LABEL: reg_f32\n+// CHECK: #APP\n+// CHECK: mov.f32 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n+// CHECK: #NO_APP\n+check!(reg_f32 f32 freg32 \"mov.f32\");\n+\n+// CHECK-LABEL: reg_i54\n+// CHECK: #APP\n+// CHECK: mov.i64 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n+// CHECK: #NO_APP\n+check!(reg_i64 i64 reg64 \"mov.i64\");\n+\n+// CHECK-LABEL: reg_f64\n+// CHECK: #APP\n+// CHECK: mov.f64 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n+// CHECK: #NO_APP\n+check!(reg_f64 f64 freg64 \"mov.f64\");\n+\n+// CHECK-LABEL: reg_ptr\n+// CHECK: #APP\n+// CHECK: mov.i64 {{[a-z0-9]+}}, {{[a-z0-9]+}};\n+// CHECK: #NO_APP\n+check!(reg_ptr ptr reg64 \"mov.i64\");"}]}