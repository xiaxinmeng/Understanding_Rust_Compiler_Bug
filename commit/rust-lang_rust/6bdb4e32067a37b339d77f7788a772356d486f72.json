{"sha": "6bdb4e32067a37b339d77f7788a772356d486f72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZGI0ZTMyMDY3YTM3YjMzOWQ3N2Y3Nzg4YTc3MjM1NmQ0ODZmNzI=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-18T19:28:23Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-31T00:02:14Z"}, "message": "Some work", "tree": {"sha": "6d8df8adc0d41c747e5967f3dcc0adbe588640a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d8df8adc0d41c747e5967f3dcc0adbe588640a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bdb4e32067a37b339d77f7788a772356d486f72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl+cqYYACgkQtAh+UQ6Y\nsWShEw/+IGhzasMfbXSnl9WOULf36otSn1hjaO5ovuzvb6xiA+0RIhdsktTskGaT\nPyK1R/uc8i8roh/PzgO+TS6qzwzE3jEIm6NjF2Z4FMfQGA/9KDEsnh13GN4CXnX0\nODGCITjTW1FRJLDeKJdbxEwEXpJrIy5KqT+w5nJcVcRmaGyT46Tr6NY/bsghXg4o\nPyij5PgvW/YAKs7NaEC+khpyPF/Pwk3CiCBu5MmzWrCd1kzLmP2OlM/bCF3dyAXK\ndg+W/Uuc2kgS2dDDm5Nq6ZDELIE6FwtWHjh1J/+YkNayEto1+tt0V/feRfyFnVVw\nU5s0a8Ad4+QobiuClCCSyDAE2KWgLyo2ZK+LJ92WZAMrpWRkB8liPmpdh+zOuXkQ\n01yl8KBfI9kEtNbaL+mSCn7WM7CuTEJdIcu9tElbIkyy3P2pWMiIgtcytPueqfC2\nrBSPa2wE16iBiEXCrvNiYnpk7xGh4MeEAyvOCoVujmZPLcaibrnJp9L9E+eCmemj\nvq0FKvrMKkAx554Xj9vxJMYLukCHZfCWlyxx0eVU3F+B5x9cr1HYsAl6lLJ4QSBJ\nRuBMvav4z4L4hPhIo2PzXjgxSuK++yyj1wBc+c54tJs98Ygc8uvpVb2Omka3L37y\nXA61wDLaDMIQZw7/yRko0KvkEL4sSeZbPqqdpxXN7WEC0c86ZaA=\n=TkP+\n-----END PGP SIGNATURE-----", "payload": "tree 6d8df8adc0d41c747e5967f3dcc0adbe588640a6\nparent 23018a55d9735afbefb19fcec91db4b53fe917d8\nauthor Aaron Hill <aa1ronham@gmail.com> 1603049303 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1604102534 -0400\n\nSome work\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bdb4e32067a37b339d77f7788a772356d486f72", "html_url": "https://github.com/rust-lang/rust/commit/6bdb4e32067a37b339d77f7788a772356d486f72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bdb4e32067a37b339d77f7788a772356d486f72/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23018a55d9735afbefb19fcec91db4b53fe917d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/23018a55d9735afbefb19fcec91db4b53fe917d8", "html_url": "https://github.com/rust-lang/rust/commit/23018a55d9735afbefb19fcec91db4b53fe917d8"}], "stats": {"total": 61, "additions": 42, "deletions": 19}, "files": [{"sha": "d57beb1148a25849a1199bedae019d090c1cf9a5", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6bdb4e32067a37b339d77f7788a772356d486f72/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bdb4e32067a37b339d77f7788a772356d486f72/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=6bdb4e32067a37b339d77f7788a772356d486f72", "patch": "@@ -145,10 +145,11 @@ impl Emitter for JsonEmitter {\n                 }\n             })\n             .collect();\n+        let report = FutureIncompatReport { future_incompat_report: data };\n         let result = if self.pretty {\n-            writeln!(&mut self.dst, \"{}\", as_pretty_json(&data))\n+            writeln!(&mut self.dst, \"{}\", as_pretty_json(&report))\n         } else {\n-            writeln!(&mut self.dst, \"{}\", as_json(&data))\n+            writeln!(&mut self.dst, \"{}\", as_json(&report))\n         }\n         .and_then(|_| self.dst.flush());\n         if let Err(e) = result {\n@@ -254,6 +255,11 @@ struct FutureBreakageItem {\n     diagnostic: Diagnostic,\n }\n \n+#[derive(Encodable)]\n+struct FutureIncompatReport {\n+    future_incompat_report: Vec<FutureBreakageItem>,\n+}\n+\n impl Diagnostic {\n     fn from_errors_diagnostic(diag: &crate::Diagnostic, je: &JsonEmitter) -> Diagnostic {\n         let sugg = diag.suggestions.iter().map(|sugg| Diagnostic {"}, {"sha": "578caf2192d5fe54c3c63354f80f71bc76d8750d", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bdb4e32067a37b339d77f7788a772356d486f72/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bdb4e32067a37b339d77f7788a772356d486f72/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=6bdb4e32067a37b339d77f7788a772356d486f72", "patch": "@@ -893,8 +893,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         all `statement`s (including terminators), only `terminator` spans, or \\\n         computed `block` spans (one span encompassing a block's terminator and \\\n         all statements).\"),\n-    emit_future_compat_report: bool = (false, parse_bool, [UNTRACKED],\n-        \"emits a future-compatibility report for lints (RFC 2834)\"),\n+    emit_future_incompat_report: bool = (false, parse_bool, [UNTRACKED],\n+        \"emits a future-incompatibility report for lints (RFC 2834)\"),\n     emit_stack_sizes: bool = (false, parse_bool, [UNTRACKED],\n         \"emit a section containing stack size metadata (default: no)\"),\n     fewer_names: bool = (false, parse_bool, [TRACKED],"}, {"sha": "0b7c35a8afd504c55d84fb5bb6f98ad93aa1d47b", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bdb4e32067a37b339d77f7788a772356d486f72/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bdb4e32067a37b339d77f7788a772356d486f72/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=6bdb4e32067a37b339d77f7788a772356d486f72", "patch": "@@ -308,7 +308,7 @@ impl Session {\n     }\n \n     fn emit_future_breakage(&self) {\n-        if !self.opts.debugging_opts.emit_future_compat_report {\n+        if !self.opts.debugging_opts.emit_future_incompat_report {\n             return;\n         }\n "}, {"sha": "1e473a2b720b373533199ad583ffb0a51397cc20", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bdb4e32067a37b339d77f7788a772356d486f72/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6bdb4e32067a37b339d77f7788a772356d486f72/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed?ref=6bdb4e32067a37b339d77f7788a772356d486f72", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n // run-rustfix\n+// compiler-flags: -Z emit-future-compat-report\n \n fn main() {\n     let small = [1, 2];"}, {"sha": "8e441ed56a123871612ff0caa1ac1fefca7e233b", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bdb4e32067a37b339d77f7788a772356d486f72/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bdb4e32067a37b339d77f7788a772356d486f72/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs?ref=6bdb4e32067a37b339d77f7788a772356d486f72", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n // run-rustfix\n+// compile-flags: -Z emit-future-incompat-report\n \n fn main() {\n     let small = [1, 2];"}, {"sha": "89e5881b9558fb7de6b075df0d29ae6bd7662145", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6bdb4e32067a37b339d77f7788a772356d486f72/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bdb4e32067a37b339d77f7788a772356d486f72/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr?ref=6bdb4e32067a37b339d77f7788a772356d486f72", "patch": "@@ -1,5 +1,5 @@\n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:9:11\n+  --> $DIR/into-iter-on-arrays-lint.rs:10:11\n    |\n LL |     small.into_iter();\n    |           ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -9,7 +9,7 @@ LL |     small.into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:12:12\n+  --> $DIR/into-iter-on-arrays-lint.rs:13:12\n    |\n LL |     [1, 2].into_iter();\n    |            ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -18,7 +18,7 @@ LL |     [1, 2].into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:15:9\n+  --> $DIR/into-iter-on-arrays-lint.rs:16:9\n    |\n LL |     big.into_iter();\n    |         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -27,7 +27,7 @@ LL |     big.into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:18:15\n+  --> $DIR/into-iter-on-arrays-lint.rs:19:15\n    |\n LL |     [0u8; 33].into_iter();\n    |               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -36,7 +36,7 @@ LL |     [0u8; 33].into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:22:21\n+  --> $DIR/into-iter-on-arrays-lint.rs:23:21\n    |\n LL |     Box::new(small).into_iter();\n    |                     ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -45,7 +45,7 @@ LL |     Box::new(small).into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:25:22\n+  --> $DIR/into-iter-on-arrays-lint.rs:26:22\n    |\n LL |     Box::new([1, 2]).into_iter();\n    |                      ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -54,7 +54,7 @@ LL |     Box::new([1, 2]).into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:28:19\n+  --> $DIR/into-iter-on-arrays-lint.rs:29:19\n    |\n LL |     Box::new(big).into_iter();\n    |                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -63,7 +63,7 @@ LL |     Box::new(big).into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:31:25\n+  --> $DIR/into-iter-on-arrays-lint.rs:32:25\n    |\n LL |     Box::new([0u8; 33]).into_iter();\n    |                         ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -72,7 +72,7 @@ LL |     Box::new([0u8; 33]).into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:35:31\n+  --> $DIR/into-iter-on-arrays-lint.rs:36:31\n    |\n LL |     Box::new(Box::new(small)).into_iter();\n    |                               ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -81,7 +81,7 @@ LL |     Box::new(Box::new(small)).into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:38:32\n+  --> $DIR/into-iter-on-arrays-lint.rs:39:32\n    |\n LL |     Box::new(Box::new([1, 2])).into_iter();\n    |                                ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -90,7 +90,7 @@ LL |     Box::new(Box::new([1, 2])).into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:41:29\n+  --> $DIR/into-iter-on-arrays-lint.rs:42:29\n    |\n LL |     Box::new(Box::new(big)).into_iter();\n    |                             ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`\n@@ -99,7 +99,7 @@ LL |     Box::new(Box::new(big)).into_iter();\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n-  --> $DIR/into-iter-on-arrays-lint.rs:44:35\n+  --> $DIR/into-iter-on-arrays-lint.rs:45:35\n    |\n LL |     Box::new(Box::new([0u8; 33])).into_iter();\n    |                                   ^^^^^^^^^ help: use `.iter()` instead of `.into_iter()` to avoid ambiguity: `iter`"}, {"sha": "643475dc5399faf71b950cac2ef77b3e829f8e97", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6bdb4e32067a37b339d77f7788a772356d486f72/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bdb4e32067a37b339d77f7788a772356d486f72/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=6bdb4e32067a37b339d77f7788a772356d486f72", "patch": "@@ -36,6 +36,17 @@ struct DiagnosticSpan {\n     expansion: Option<Box<DiagnosticSpanMacroExpansion>>,\n }\n \n+#[derive(Deserialize)]\n+struct FutureIncompatReport {\n+    future_incompat_report: Vec<FutureBreakageItem>\n+}\n+\n+#[derive(Deserialize)]\n+struct FutureBreakageItem {\n+    future_breakage_date: Option<String>,\n+    diagnostic: Diagnostic\n+}\n+\n impl DiagnosticSpan {\n     /// Returns the deepest source span in the macro call stack with a given file name.\n     /// This is either the supplied span, or the span for some macro callsite that expanded to it.\n@@ -94,10 +105,14 @@ pub fn extract_rendered(output: &str) -> String {\n }\n \n pub fn parse_output(file_name: &str, output: &str, proc_res: &ProcRes) -> Vec<Error> {\n-    output.lines().flat_map(|line| parse_line(file_name, line, output, proc_res)).collect()\n+    let lines = output.lines();\n+    let last_line = lines.next_back();\n+    lines.flat_map(|line| parse_line(file_name, line, output, proc_res, false)).chain(\n+        last_line.into_iter().flat_map(|line| parse_line(file_name, line, output, proc_res, true))\n+    ).collect()\n }\n \n-fn parse_line(file_name: &str, line: &str, output: &str, proc_res: &ProcRes) -> Vec<Error> {\n+fn parse_line(file_name: &str, line: &str, output: &str, proc_res: &ProcRes, last_line: bool) -> Vec<Error> {\n     // The compiler sometimes intermingles non-JSON stuff into the\n     // output.  This hack just skips over such lines. Yuck.\n     if line.starts_with('{') {"}]}