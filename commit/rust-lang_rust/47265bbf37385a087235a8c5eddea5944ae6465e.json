{"sha": "47265bbf37385a087235a8c5eddea5944ae6465e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MjY1YmJmMzczODVhMDg3MjM1YThjNWVkZGVhNTk0NGFlNjQ2NWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-20T18:12:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-20T18:12:40Z"}, "message": "Auto merge of #27064 - alexcrichton:into-raw-os, r=brson\n\nThis commit is an implementation of [RFC 1174][rfc] which adds three new traits\r\nto the standard library:\r\n\r\n* `IntoRawFd` - implemented on Unix for all I/O types (files, sockets, etc)\r\n* `IntoRawHandle` - implemented on Windows for files, processes, etc\r\n* `IntoRawSocket` - implemented on Windows for networking types\r\n\r\n[rfc]: https://github.com/rust-lang/rfcs/blob/master/text/1174-into-raw-fd-socket-handle-traits.md\r\n\r\nCloses #27062", "tree": {"sha": "dc96dab725a1268bab3682ac0c77b74e9a06a49f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc96dab725a1268bab3682ac0c77b74e9a06a49f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47265bbf37385a087235a8c5eddea5944ae6465e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47265bbf37385a087235a8c5eddea5944ae6465e", "html_url": "https://github.com/rust-lang/rust/commit/47265bbf37385a087235a8c5eddea5944ae6465e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47265bbf37385a087235a8c5eddea5944ae6465e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18557500cb91596f3614d4cf65439f8c5f47b2e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/18557500cb91596f3614d4cf65439f8c5f47b2e0", "html_url": "https://github.com/rust-lang/rust/commit/18557500cb91596f3614d4cf65439f8c5f47b2e0"}, {"sha": "7e9e3896dfcef4852ca8ad90f91baf5187b0248e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9e3896dfcef4852ca8ad90f91baf5187b0248e", "html_url": "https://github.com/rust-lang/rust/commit/7e9e3896dfcef4852ca8ad90f91baf5187b0248e"}], "stats": {"total": 210, "additions": 195, "deletions": 15}, "files": [{"sha": "e5f2fcbae8394829505ee7d0ad0a2368fb488bc5", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=47265bbf37385a087235a8c5eddea5944ae6465e", "patch": "@@ -24,8 +24,8 @@ use ffi::OsString;\n use io::{self, SeekFrom, Seek, Read, Write};\n use path::{Path, PathBuf};\n use sys::fs as fs_imp;\n-use sys_common::{AsInnerMut, FromInner, AsInner};\n use sys_common::io::read_to_end_uninitialized;\n+use sys_common::{AsInnerMut, FromInner, AsInner, IntoInner};\n use vec::Vec;\n \n /// A reference to an open file on the filesystem.\n@@ -317,6 +317,11 @@ impl FromInner<fs_imp::File> for File {\n         File { inner: f }\n     }\n }\n+impl IntoInner<fs_imp::File> for File {\n+    fn into_inner(self) -> fs_imp::File {\n+        self.inner\n+    }\n+}\n \n impl fmt::Debug for File {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "c410233df92294d2a90ed8b5a9251177f715b7f3", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=47265bbf37385a087235a8c5eddea5944ae6465e", "patch": "@@ -17,9 +17,9 @@ use io::prelude::*;\n use fmt;\n use io;\n use net::{ToSocketAddrs, SocketAddr, Shutdown};\n-use sys_common::net as net_imp;\n-use sys_common::{AsInner, FromInner};\n use sys_common::io::read_to_end_uninitialized;\n+use sys_common::net as net_imp;\n+use sys_common::{AsInner, FromInner, IntoInner};\n use time::Duration;\n \n /// A structure which represents a TCP stream between a local socket and a\n@@ -220,6 +220,10 @@ impl FromInner<net_imp::TcpStream> for TcpStream {\n     fn from_inner(inner: net_imp::TcpStream) -> TcpStream { TcpStream(inner) }\n }\n \n+impl IntoInner<net_imp::TcpStream> for TcpStream {\n+    fn into_inner(self) -> net_imp::TcpStream { self.0 }\n+}\n+\n impl fmt::Debug for TcpStream {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.0.fmt(f)\n@@ -298,6 +302,10 @@ impl FromInner<net_imp::TcpListener> for TcpListener {\n     }\n }\n \n+impl IntoInner<net_imp::TcpListener> for TcpListener {\n+    fn into_inner(self) -> net_imp::TcpListener { self.0 }\n+}\n+\n impl fmt::Debug for TcpListener {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.0.fmt(f)"}, {"sha": "a98ccc387359791fadd21cc8125ddd8ab8137f11", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=47265bbf37385a087235a8c5eddea5944ae6465e", "patch": "@@ -17,7 +17,7 @@ use fmt;\n use io::{self, Error, ErrorKind};\n use net::{ToSocketAddrs, SocketAddr, IpAddr};\n use sys_common::net as net_imp;\n-use sys_common::{AsInner, FromInner};\n+use sys_common::{AsInner, FromInner, IntoInner};\n use time::Duration;\n \n /// A User Datagram Protocol socket.\n@@ -174,6 +174,10 @@ impl FromInner<net_imp::UdpSocket> for UdpSocket {\n     fn from_inner(inner: net_imp::UdpSocket) -> UdpSocket { UdpSocket(inner) }\n }\n \n+impl IntoInner<net_imp::UdpSocket> for UdpSocket {\n+    fn into_inner(self) -> net_imp::UdpSocket { self.0 }\n+}\n+\n impl fmt::Debug for UdpSocket {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.0.fmt(f)"}, {"sha": "3471805b2bce1b742c5403b1b25b20b0b04ecda8", "filename": "src/libstd/process.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=47265bbf37385a087235a8c5eddea5944ae6465e", "patch": "@@ -23,7 +23,7 @@ use path;\n use sync::mpsc::{channel, Receiver};\n use sys::pipe::{self, AnonPipe};\n use sys::process as imp;\n-use sys_common::{AsInner, AsInnerMut, FromInner};\n+use sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n use thread;\n \n /// Representation of a running or exited child process.\n@@ -71,6 +71,10 @@ impl AsInner<imp::Process> for Child {\n     fn as_inner(&self) -> &imp::Process { &self.handle }\n }\n \n+impl IntoInner<imp::Process> for Child {\n+    fn into_inner(self) -> imp::Process { self.handle }\n+}\n+\n /// A handle to a child procesess's stdin\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct ChildStdin {\n@@ -92,6 +96,10 @@ impl AsInner<AnonPipe> for ChildStdin {\n     fn as_inner(&self) -> &AnonPipe { &self.inner }\n }\n \n+impl IntoInner<AnonPipe> for ChildStdin {\n+    fn into_inner(self) -> AnonPipe { self.inner }\n+}\n+\n /// A handle to a child procesess's stdout\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct ChildStdout {\n@@ -109,6 +117,10 @@ impl AsInner<AnonPipe> for ChildStdout {\n     fn as_inner(&self) -> &AnonPipe { &self.inner }\n }\n \n+impl IntoInner<AnonPipe> for ChildStdout {\n+    fn into_inner(self) -> AnonPipe { self.inner }\n+}\n+\n /// A handle to a child procesess's stderr\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct ChildStderr {\n@@ -126,6 +138,10 @@ impl AsInner<AnonPipe> for ChildStderr {\n     fn as_inner(&self) -> &AnonPipe { &self.inner }\n }\n \n+impl IntoInner<AnonPipe> for ChildStderr {\n+    fn into_inner(self) -> AnonPipe { self.inner }\n+}\n+\n /// The `Command` type acts as a process builder, providing fine-grained control\n /// over how a new process should be spawned. A default configuration can be\n /// generated using `Command::new(program)`, where `program` gives a path to the"}, {"sha": "6dd222b8f6e4df00279da9df680b372752e8cf87", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=47265bbf37385a087235a8c5eddea5944ae6465e", "patch": "@@ -184,6 +184,8 @@ impl TcpStream {\n \n     pub fn socket(&self) -> &Socket { &self.inner }\n \n+    pub fn into_socket(self) -> Socket { self.inner }\n+\n     pub fn set_nodelay(&self, nodelay: bool) -> io::Result<()> {\n         setsockopt(&self.inner, libc::IPPROTO_TCP, libc::TCP_NODELAY,\n                    nodelay as c_int)\n@@ -336,6 +338,8 @@ impl TcpListener {\n \n     pub fn socket(&self) -> &Socket { &self.inner }\n \n+    pub fn into_socket(self) -> Socket { self.inner }\n+\n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n         sockname(|buf, len| unsafe {\n             libc::getsockname(*self.inner.as_inner(), buf, len)\n@@ -396,6 +400,8 @@ impl UdpSocket {\n \n     pub fn socket(&self) -> &Socket { &self.inner }\n \n+    pub fn into_socket(self) -> Socket { self.inner }\n+\n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n         sockname(|buf, len| unsafe {\n             libc::getsockname(*self.inner.as_inner(), buf, len)"}, {"sha": "580d2dbcf74251e42bdbb6dd91ff8778048d37a2", "filename": "src/libstd/sys/unix/ext/io.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs?ref=47265bbf37385a087235a8c5eddea5944ae6465e", "patch": "@@ -16,7 +16,7 @@ use fs;\n use net;\n use os::raw;\n use sys;\n-use sys_common::{self, AsInner, FromInner};\n+use sys_common::{self, AsInner, FromInner, IntoInner};\n \n /// Raw file descriptors.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -59,6 +59,18 @@ pub trait FromRawFd {\n     unsafe fn from_raw_fd(fd: RawFd) -> Self;\n }\n \n+/// A trait to express the ability to consume an object and acquire ownership of\n+/// its raw file descriptor.\n+#[unstable(feature = \"into_raw_os\", reason = \"recently added API\")]\n+pub trait IntoRawFd {\n+    /// Consumes this object, returning the raw underlying file descriptor.\n+    ///\n+    /// This function **transfers ownership** of the underlying file descriptor\n+    /// to the caller. Callers are then the unique owners of the file descriptor\n+    /// and must close the descriptor once it's no longer needed.\n+    fn into_raw_fd(self) -> RawFd;\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRawFd for fs::File {\n     fn as_raw_fd(&self) -> RawFd {\n@@ -71,6 +83,11 @@ impl FromRawFd for fs::File {\n         fs::File::from_inner(sys::fs::File::from_inner(fd))\n     }\n }\n+impl IntoRawFd for fs::File {\n+    fn into_raw_fd(self) -> RawFd {\n+        self.into_inner().into_fd().into_raw()\n+    }\n+}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRawFd for net::TcpStream {\n@@ -106,3 +123,19 @@ impl FromRawFd for net::UdpSocket {\n         net::UdpSocket::from_inner(sys_common::net::UdpSocket::from_inner(socket))\n     }\n }\n+\n+impl IntoRawFd for net::TcpStream {\n+    fn into_raw_fd(self) -> RawFd {\n+        self.into_inner().into_socket().into_inner()\n+    }\n+}\n+impl IntoRawFd for net::TcpListener {\n+    fn into_raw_fd(self) -> RawFd {\n+        self.into_inner().into_socket().into_inner()\n+    }\n+}\n+impl IntoRawFd for net::UdpSocket {\n+    fn into_raw_fd(self) -> RawFd {\n+        self.into_inner().into_socket().into_inner()\n+    }\n+}"}, {"sha": "63adae17581a201543997c6c72c3853cf588f1fb", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=47265bbf37385a087235a8c5eddea5944ae6465e", "patch": "@@ -13,11 +13,11 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use os::unix::raw::{uid_t, gid_t};\n-use os::unix::io::{FromRawFd, RawFd, AsRawFd};\n+use os::unix::io::{FromRawFd, RawFd, AsRawFd, IntoRawFd};\n use prelude::v1::*;\n use process;\n use sys;\n-use sys_common::{AsInnerMut, AsInner, FromInner};\n+use sys_common::{AsInnerMut, AsInner, FromInner, IntoInner};\n \n /// Unix-specific extensions to the `std::process::Command` builder\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -92,3 +92,21 @@ impl AsRawFd for process::ChildStderr {\n         self.as_inner().fd().raw()\n     }\n }\n+\n+impl IntoRawFd for process::ChildStdin {\n+    fn into_raw_fd(self) -> RawFd {\n+        self.into_inner().into_fd().into_raw()\n+    }\n+}\n+\n+impl IntoRawFd for process::ChildStdout {\n+    fn into_raw_fd(self) -> RawFd {\n+        self.into_inner().into_fd().into_raw()\n+    }\n+}\n+\n+impl IntoRawFd for process::ChildStderr {\n+    fn into_raw_fd(self) -> RawFd {\n+        self.into_inner().into_fd().into_raw()\n+    }\n+}"}, {"sha": "0c99a30f107d00e4124264e2d275e508d6521da7", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=47265bbf37385a087235a8c5eddea5944ae6465e", "patch": "@@ -331,6 +331,8 @@ impl File {\n     }\n \n     pub fn fd(&self) -> &FileDesc { &self.0 }\n+\n+    pub fn into_fd(self) -> FileDesc { self.0 }\n }\n \n impl DirBuilder {"}, {"sha": "37eb7fd2ac8039f4e63a92241917bfa07df9f81b", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=47265bbf37385a087235a8c5eddea5944ae6465e", "patch": "@@ -17,7 +17,7 @@ use str;\n use sys::c;\n use net::SocketAddr;\n use sys::fd::FileDesc;\n-use sys_common::{AsInner, FromInner};\n+use sys_common::{AsInner, FromInner, IntoInner};\n use sys_common::net::{getsockopt, setsockopt};\n use time::Duration;\n \n@@ -127,3 +127,7 @@ impl AsInner<c_int> for Socket {\n impl FromInner<c_int> for Socket {\n     fn from_inner(fd: c_int) -> Socket { Socket(FileDesc::new(fd)) }\n }\n+\n+impl IntoInner<c_int> for Socket {\n+    fn into_inner(self) -> c_int { self.0.into_raw() }\n+}"}, {"sha": "140f0c042ba8f2c6913d25d198736d60be1e8e74", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=47265bbf37385a087235a8c5eddea5944ae6465e", "patch": "@@ -46,4 +46,5 @@ impl AnonPipe {\n \n     pub fn raw(&self) -> libc::c_int { self.0.raw() }\n     pub fn fd(&self) -> &FileDesc { &self.0 }\n+    pub fn into_fd(self) -> FileDesc { self.0 }\n }"}, {"sha": "185f1abe64b9a7e3e85ecbf865e9d18e661720cb", "filename": "src/libstd/sys/windows/ext/io.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs?ref=47265bbf37385a087235a8c5eddea5944ae6465e", "patch": "@@ -13,7 +13,7 @@\n use fs;\n use os::windows::raw;\n use net;\n-use sys_common::{self, AsInner, FromInner};\n+use sys_common::{self, AsInner, FromInner, IntoInner};\n use sys;\n \n /// Raw HANDLEs.\n@@ -50,6 +50,18 @@ pub trait FromRawHandle {\n     unsafe fn from_raw_handle(handle: RawHandle) -> Self;\n }\n \n+/// A trait to express the ability to consume an object and acquire ownership of\n+/// its raw `HANDLE`.\n+#[unstable(feature = \"into_raw_os\", reason = \"recently added API\")]\n+pub trait IntoRawHandle {\n+    /// Consumes this object, returning the raw underlying handle.\n+    ///\n+    /// This function **transfers ownership** of the underlying handle to the\n+    /// caller. Callers are then the unique owners of the handle and must close\n+    /// it once it's no longer needed.\n+    fn into_raw_handle(self) -> RawHandle;\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRawHandle for fs::File {\n     fn as_raw_handle(&self) -> RawHandle {\n@@ -65,6 +77,12 @@ impl FromRawHandle for fs::File {\n     }\n }\n \n+impl IntoRawHandle for fs::File {\n+    fn into_raw_handle(self) -> RawHandle {\n+        self.into_inner().into_handle().into_raw() as *mut _\n+    }\n+}\n+\n /// Extract raw sockets.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsRawSocket {\n@@ -90,6 +108,18 @@ pub trait FromRawSocket {\n     unsafe fn from_raw_socket(sock: RawSocket) -> Self;\n }\n \n+/// A trait to express the ability to consume an object and acquire ownership of\n+/// its raw `SOCKET`.\n+#[unstable(feature = \"into_raw_os\", reason = \"recently added API\")]\n+pub trait IntoRawSocket {\n+    /// Consumes this object, returning the raw underlying socket.\n+    ///\n+    /// This function **transfers ownership** of the underlying socket to the\n+    /// caller. Callers are then the unique owners of the socket and must close\n+    /// it once it's no longer needed.\n+    fn into_raw_socket(self) -> RawSocket;\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRawSocket for net::TcpStream {\n     fn as_raw_socket(&self) -> RawSocket {\n@@ -130,3 +160,21 @@ impl FromRawSocket for net::UdpSocket {\n         net::UdpSocket::from_inner(sys_common::net::UdpSocket::from_inner(sock))\n     }\n }\n+\n+impl IntoRawSocket for net::TcpStream {\n+    fn into_raw_socket(self) -> RawSocket {\n+        self.into_inner().into_socket().into_inner()\n+    }\n+}\n+\n+impl IntoRawSocket for net::TcpListener {\n+    fn into_raw_socket(self) -> RawSocket {\n+        self.into_inner().into_socket().into_inner()\n+    }\n+}\n+\n+impl IntoRawSocket for net::UdpSocket {\n+    fn into_raw_socket(self) -> RawSocket {\n+        self.into_inner().into_socket().into_inner()\n+    }\n+}"}, {"sha": "fde21e9a798ee57ffbe35fc11603d84486440175", "filename": "src/libstd/sys/windows/ext/process.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=47265bbf37385a087235a8c5eddea5944ae6465e", "patch": "@@ -12,10 +12,10 @@\n \n #![stable(feature = \"process_extensions\", since = \"1.2.0\")]\n \n-use os::windows::io::{FromRawHandle, RawHandle, AsRawHandle};\n+use os::windows::io::{FromRawHandle, RawHandle, AsRawHandle, IntoRawHandle};\n use process;\n use sys;\n-use sys_common::{AsInner, FromInner};\n+use sys_common::{AsInner, FromInner, IntoInner};\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl FromRawHandle for process::Stdio {\n@@ -32,6 +32,12 @@ impl AsRawHandle for process::Child {\n     }\n }\n \n+impl IntoRawHandle for process::Child {\n+    fn into_raw_handle(self) -> RawHandle {\n+        self.into_inner().into_handle().into_raw() as *mut _\n+    }\n+}\n+\n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawHandle for process::ChildStdin {\n     fn as_raw_handle(&self) -> RawHandle {\n@@ -52,3 +58,21 @@ impl AsRawHandle for process::ChildStderr {\n         self.as_inner().handle().raw() as *mut _\n     }\n }\n+\n+impl IntoRawHandle for process::ChildStdin {\n+    fn into_raw_handle(self) -> RawHandle {\n+        self.into_inner().into_handle().into_raw() as *mut _\n+    }\n+}\n+\n+impl IntoRawHandle for process::ChildStdout {\n+    fn into_raw_handle(self) -> RawHandle {\n+        self.into_inner().into_handle().into_raw() as *mut _\n+    }\n+}\n+\n+impl IntoRawHandle for process::ChildStderr {\n+    fn into_raw_handle(self) -> RawHandle {\n+        self.into_inner().into_handle().into_raw() as *mut _\n+    }\n+}"}, {"sha": "5dd84e9f71ebc3bbc113cb30ab9b271150237c16", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=47265bbf37385a087235a8c5eddea5944ae6465e", "patch": "@@ -319,6 +319,8 @@ impl File {\n \n     pub fn handle(&self) -> &Handle { &self.handle }\n \n+    pub fn into_handle(self) -> Handle { self.handle }\n+\n     fn reparse_point<'a>(&self,\n                          space: &'a mut [u8; c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE])\n                          -> io::Result<(libc::DWORD, &'a c::REPARSE_DATA_BUFFER)> {\n@@ -357,8 +359,6 @@ impl File {\n             Ok(PathBuf::from(OsString::from_wide(subst)))\n         }\n     }\n-\n-    pub fn into_handle(self) -> Handle { self.handle }\n }\n \n impl FromInner<libc::HANDLE> for File {"}, {"sha": "d58355ed1feeffbc5e8f435eebdeb4decf14685c", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=47265bbf37385a087235a8c5eddea5944ae6465e", "patch": "@@ -21,7 +21,7 @@ use rt;\n use sync::Once;\n use sys;\n use sys::c;\n-use sys_common::{AsInner, FromInner};\n+use sys_common::{AsInner, FromInner, IntoInner};\n use sys_common::net::{setsockopt, getsockopt};\n use time::Duration;\n \n@@ -184,3 +184,11 @@ impl AsInner<libc::SOCKET> for Socket {\n impl FromInner<libc::SOCKET> for Socket {\n     fn from_inner(sock: libc::SOCKET) -> Socket { Socket(sock) }\n }\n+\n+impl IntoInner<libc::SOCKET> for Socket {\n+    fn into_inner(self) -> libc::SOCKET {\n+        let ret = self.0;\n+        mem::forget(self);\n+        ret\n+    }\n+}"}, {"sha": "a7ece66e0f1f78371997caa9e15b2c0ca19d7c22", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=47265bbf37385a087235a8c5eddea5944ae6465e", "patch": "@@ -37,6 +37,7 @@ pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {\n \n impl AnonPipe {\n     pub fn handle(&self) -> &Handle { &self.inner }\n+    pub fn into_handle(self) -> Handle { self.inner }\n \n     pub fn raw(&self) -> libc::HANDLE { self.inner.raw() }\n "}, {"sha": "ca33e11eea059461265e8951c06d509f9e3ec05f", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47265bbf37385a087235a8c5eddea5944ae6465e/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=47265bbf37385a087235a8c5eddea5944ae6465e", "patch": "@@ -220,6 +220,8 @@ impl Process {\n     }\n \n     pub fn handle(&self) -> &Handle { &self.handle }\n+\n+    pub fn into_handle(self) -> Handle { self.handle }\n }\n \n #[derive(PartialEq, Eq, Clone, Copy, Debug)]"}]}