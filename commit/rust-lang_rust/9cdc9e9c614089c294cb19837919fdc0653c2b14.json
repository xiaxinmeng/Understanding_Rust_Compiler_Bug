{"sha": "9cdc9e9c614089c294cb19837919fdc0653c2b14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZGM5ZTljNjE0MDg5YzI5NGNiMTk4Mzc5MTlmZGMwNjUzYzJiMTQ=", "commit": {"author": {"name": "Ryan Prichard", "email": "ryan.prichard@gmail.com", "date": "2015-04-01T20:36:53Z"}, "committer": {"name": "Ryan Prichard", "email": "ryan.prichard@gmail.com", "date": "2015-04-13T05:01:55Z"}, "message": "Destabilize format_args! internals.\n\nArguments, Formatters, and the various format traits remain stable. The\nformat_args! macro uses #[allow_internal_unstable] to allow it access to\nthe unstable things in core::fmt.\n\nDestabilized things include a \"v1\" in their name:\n * core::fmt::rt\n * core::fmt::rt::v1 (the module and all contents)\n * core::fmt::ArgumentV1\n * core::fmt::ArgumentV1::new\n * core::fmt::ArgumentV1::from_usize\n * core::fmt::Arguments::new_v1\n * core::fmt::Arguments::new_v1_formatted\n\nThe unstable message was copied from that of std::io::_print.", "tree": {"sha": "17c5967c8a954c0214eb73d61adf39acd4b95ee0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17c5967c8a954c0214eb73d61adf39acd4b95ee0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cdc9e9c614089c294cb19837919fdc0653c2b14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cdc9e9c614089c294cb19837919fdc0653c2b14", "html_url": "https://github.com/rust-lang/rust/commit/9cdc9e9c614089c294cb19837919fdc0653c2b14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cdc9e9c614089c294cb19837919fdc0653c2b14/comments", "author": {"login": "rprichard", "id": 1572855, "node_id": "MDQ6VXNlcjE1NzI4NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1572855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rprichard", "html_url": "https://github.com/rprichard", "followers_url": "https://api.github.com/users/rprichard/followers", "following_url": "https://api.github.com/users/rprichard/following{/other_user}", "gists_url": "https://api.github.com/users/rprichard/gists{/gist_id}", "starred_url": "https://api.github.com/users/rprichard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rprichard/subscriptions", "organizations_url": "https://api.github.com/users/rprichard/orgs", "repos_url": "https://api.github.com/users/rprichard/repos", "events_url": "https://api.github.com/users/rprichard/events{/privacy}", "received_events_url": "https://api.github.com/users/rprichard/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rprichard", "id": 1572855, "node_id": "MDQ6VXNlcjE1NzI4NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1572855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rprichard", "html_url": "https://github.com/rprichard", "followers_url": "https://api.github.com/users/rprichard/followers", "following_url": "https://api.github.com/users/rprichard/following{/other_user}", "gists_url": "https://api.github.com/users/rprichard/gists{/gist_id}", "starred_url": "https://api.github.com/users/rprichard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rprichard/subscriptions", "organizations_url": "https://api.github.com/users/rprichard/orgs", "repos_url": "https://api.github.com/users/rprichard/repos", "events_url": "https://api.github.com/users/rprichard/events{/privacy}", "received_events_url": "https://api.github.com/users/rprichard/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd26307411b336345bb5e5b3af3c2997b37fa65e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd26307411b336345bb5e5b3af3c2997b37fa65e", "html_url": "https://github.com/rust-lang/rust/commit/bd26307411b336345bb5e5b3af3c2997b37fa65e"}], "stats": {"total": 65, "additions": 36, "deletions": 29}, "files": [{"sha": "1c70f9941f7a08bd66b1c8a75f9e2f5d5f0c7eff", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9cdc9e9c614089c294cb19837919fdc0653c2b14/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdc9e9c614089c294cb19837919fdc0653c2b14/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=9cdc9e9c614089c294cb19837919fdc0653c2b14", "patch": "@@ -38,7 +38,8 @@ mod num;\n mod float;\n mod builders;\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n+#[cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n #[doc(hidden)]\n pub mod rt {\n     pub mod v1;\n@@ -134,7 +135,8 @@ enum Void {}\n /// compile time it is ensured that the function and the value have the correct\n /// types, and then this struct is used to canonicalize arguments to one type.\n #[derive(Copy)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n+#[cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n #[doc(hidden)]\n pub struct ArgumentV1<'a> {\n     value: &'a Void,\n@@ -154,7 +156,8 @@ impl<'a> ArgumentV1<'a> {\n     }\n \n     #[doc(hidden)]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n+    #[cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n     pub fn new<'b, T>(x: &'b T,\n                       f: fn(&T, &mut Formatter) -> Result) -> ArgumentV1<'b> {\n         unsafe {\n@@ -166,7 +169,8 @@ impl<'a> ArgumentV1<'a> {\n     }\n \n     #[doc(hidden)]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n+    #[cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n     pub fn from_usize(x: &usize) -> ArgumentV1 {\n         ArgumentV1::new(x, ArgumentV1::show_usize)\n     }\n@@ -189,7 +193,8 @@ impl<'a> Arguments<'a> {\n     /// When using the format_args!() macro, this function is used to generate the\n     /// Arguments structure.\n     #[doc(hidden)] #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n+    #[cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n     pub fn new_v1(pieces: &'a [&'a str],\n                   args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {\n         Arguments {\n@@ -206,7 +211,8 @@ impl<'a> Arguments<'a> {\n     /// created with `argumentusize`. However, failing to do so doesn't cause\n     /// unsafety, but will ignore invalid .\n     #[doc(hidden)] #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n+    #[cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n     pub fn new_v1_formatted(pieces: &'a [&'a str],\n                             args: &'a [ArgumentV1<'a>],\n                             fmt: &'a [rt::v1::Argument]) -> Arguments<'a> {"}, {"sha": "0d851c1e897a9a67fe2bdfd85e8a50bdc6e08e1e", "filename": "src/libcore/fmt/rt/v1.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9cdc9e9c614089c294cb19837919fdc0653c2b14/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cdc9e9c614089c294cb19837919fdc0653c2b14/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs?ref=9cdc9e9c614089c294cb19837919fdc0653c2b14", "patch": "@@ -14,68 +14,69 @@\n //! These definitions are similar to their `ct` equivalents, but differ in that\n //! these can be statically allocated and are slightly optimized for the runtime\n \n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#![cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n+#![cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n \n #[derive(Copy, Clone)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n pub struct Argument {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub position: Position,\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub format: FormatSpec,\n }\n \n #[derive(Copy, Clone)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n pub struct FormatSpec {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub fill: char,\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub align: Alignment,\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub flags: u32,\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub precision: Count,\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub width: Count,\n }\n \n /// Possible alignments that can be requested as part of a formatting directive.\n #[derive(Copy, Clone, PartialEq)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n pub enum Alignment {\n     /// Indication that contents should be left-aligned.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Left,\n     /// Indication that contents should be right-aligned.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Right,\n     /// Indication that contents should be center-aligned.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Center,\n     /// No alignment was requested.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Unknown,\n }\n \n #[derive(Copy, Clone)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n pub enum Count {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Is(usize),\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Param(usize),\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     NextParam,\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Implied,\n }\n \n #[derive(Copy, Clone)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n pub enum Position {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Next,\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     At(usize)\n }"}]}