{"sha": "ba4834c092ed524e7839d21ea40a644db6e6555f", "node_id": "C_kwDOAAsO6NoAKGJhNDgzNGMwOTJlZDUyNGU3ODM5ZDIxZWE0MGE2NDRkYjZlNjU1NWY", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-10-19T13:56:41Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-10-19T14:42:47Z"}, "message": "resolve: Revert \"Set effective visibilities for imports more precisely\"", "tree": {"sha": "13e91ec9d00310f80a19d2d7d15c23ac7ba65d92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13e91ec9d00310f80a19d2d7d15c23ac7ba65d92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba4834c092ed524e7839d21ea40a644db6e6555f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba4834c092ed524e7839d21ea40a644db6e6555f", "html_url": "https://github.com/rust-lang/rust/commit/ba4834c092ed524e7839d21ea40a644db6e6555f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba4834c092ed524e7839d21ea40a644db6e6555f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7dd01fe8b071602510eaac9f676acc0e3cf8e4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7dd01fe8b071602510eaac9f676acc0e3cf8e4a", "html_url": "https://github.com/rust-lang/rust/commit/d7dd01fe8b071602510eaac9f676acc0e3cf8e4a"}], "stats": {"total": 62, "additions": 26, "deletions": 36}, "files": [{"sha": "257784341e3f8de3ed6d6064d81d2f18168fa437", "filename": "compiler/rustc_resolve/src/access_levels.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ba4834c092ed524e7839d21ea40a644db6e6555f/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba4834c092ed524e7839d21ea40a644db6e6555f/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs?ref=ba4834c092ed524e7839d21ea40a644db6e6555f", "patch": "@@ -1,5 +1,4 @@\n-use crate::NameBindingKind;\n-use crate::Resolver;\n+use crate::{ImportKind, NameBindingKind, Resolver};\n use rustc_ast::ast;\n use rustc_ast::visit;\n use rustc_ast::visit::Visitor;\n@@ -45,31 +44,40 @@ impl<'r, 'a> AccessLevelsVisitor<'r, 'a> {\n         let module = self.r.get_module(module_id.to_def_id()).unwrap();\n         let resolutions = self.r.resolutions(module);\n \n-        for (key, name_resolution) in resolutions.borrow().iter() {\n+        for (_, name_resolution) in resolutions.borrow().iter() {\n             if let Some(mut binding) = name_resolution.borrow().binding() && !binding.is_ambiguity() {\n                 // Set the given binding access level to `AccessLevel::Public` and\n                 // sets the rest of the `use` chain to `AccessLevel::Exported` until\n                 // we hit the actual exported item.\n \n-                // FIXME: tag and is_public() condition must be deleted,\n-                // but assertion fail occurs in import_id_for_ns\n+                // FIXME: tag and is_public() condition should be removed, but assertions occur.\n                 let tag = if binding.is_import() { AccessLevel::Exported } else { AccessLevel::Public };\n                 if binding.vis.is_public() {\n                     let mut prev_parent_id = module_id;\n                     let mut level = AccessLevel::Public;\n                     while let NameBindingKind::Import { binding: nested_binding, import, .. } =\n                         binding.kind\n                     {\n-                        let id = self.r.local_def_id(self.r.import_id_for_ns(import, key.ns));\n-                        self.update(\n-                            id,\n+                        let mut update = |node_id| self.update(\n+                            self.r.local_def_id(node_id),\n                             binding.vis.expect_local(),\n                             prev_parent_id,\n                             level,\n                         );\n+                        // In theory all the import IDs have individual visibilities and effective\n+                        // visibilities, but in practice these IDs go straigth to HIR where all\n+                        // their few uses assume that their (effective) visibility applies to the\n+                        // whole syntactic `use` item. So we update them all to the maximum value\n+                        // among the potential individual effective visibilities. Maybe HIR for\n+                        // imports shouldn't use three IDs at all.\n+                        update(import.id);\n+                        if let ImportKind::Single { additional_ids, .. } = import.kind {\n+                            update(additional_ids.0);\n+                            update(additional_ids.1);\n+                        }\n \n                         level = AccessLevel::Exported;\n-                        prev_parent_id = id;\n+                        prev_parent_id = self.r.local_def_id(import.id);\n                         binding = nested_binding;\n                     }\n                 }"}, {"sha": "f2cc50c199fc8119dda242d66136d406d4e77adf", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ba4834c092ed524e7839d21ea40a644db6e6555f/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba4834c092ed524e7839d21ea40a644db6e6555f/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=ba4834c092ed524e7839d21ea40a644db6e6555f", "patch": "@@ -2,7 +2,7 @@\n \n use crate::diagnostics::{import_candidates, Suggestion};\n use crate::Determinacy::{self, *};\n-use crate::Namespace::{self, *};\n+use crate::Namespace::*;\n use crate::{module_to_string, names_to_string, ImportSuggestion};\n use crate::{AmbiguityKind, BindingKey, ModuleKind, ResolutionError, Resolver, Segment};\n use crate::{Finalize, Module, ModuleOrUniformRoot, ParentScope, PerNS, ScopeSet};\n@@ -371,31 +371,6 @@ impl<'a> Resolver<'a> {\n             self.used_imports.insert(import.id);\n         }\n     }\n-\n-    /// Take primary and additional node IDs from an import and select one that corresponds to the\n-    /// given namespace. The logic must match the corresponding logic from `fn lower_use_tree` that\n-    /// assigns resolutons to IDs.\n-    pub(crate) fn import_id_for_ns(&self, import: &Import<'_>, ns: Namespace) -> NodeId {\n-        if let ImportKind::Single { additional_ids: (id1, id2), .. } = import.kind {\n-            if let Some(resolutions) = self.import_res_map.get(&import.id) {\n-                assert!(resolutions[ns].is_some(), \"incorrectly finalized import\");\n-                return match ns {\n-                    TypeNS => import.id,\n-                    ValueNS => match resolutions.type_ns {\n-                        Some(_) => id1,\n-                        None => import.id,\n-                    },\n-                    MacroNS => match (resolutions.type_ns, resolutions.value_ns) {\n-                        (Some(_), Some(_)) => id2,\n-                        (Some(_), None) | (None, Some(_)) => id1,\n-                        (None, None) => import.id,\n-                    },\n-                };\n-            }\n-        }\n-\n-        import.id\n-    }\n }\n \n /// An error that may be transformed into a diagnostic later. Used to combine multiple unresolved"}, {"sha": "42c9975bedb70995a8d4efde11ec499d2954b130", "filename": "src/test/ui/privacy/access_levels.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba4834c092ed524e7839d21ea40a644db6e6555f/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba4834c092ed524e7839d21ea40a644db6e6555f/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs?ref=ba4834c092ed524e7839d21ea40a644db6e6555f", "patch": "@@ -70,5 +70,6 @@ mod half_public_import {\n \n #[rustc_effective_visibility]\n pub use half_public_import::HalfPublicImport; //~ ERROR Public: pub, Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+                                              //~^ ERROR Public: pub, Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n \n fn main() {}"}, {"sha": "111e02bc329ccc483246525ebc6e3b4c703f99c0", "filename": "src/test/ui/privacy/access_levels.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba4834c092ed524e7839d21ea40a644db6e6555f/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba4834c092ed524e7839d21ea40a644db6e6555f/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr?ref=ba4834c092ed524e7839d21ea40a644db6e6555f", "patch": "@@ -112,6 +112,12 @@ error: Public: pub, Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n LL | pub use half_public_import::HalfPublicImport;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: Public: pub, Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n+  --> $DIR/access_levels.rs:72:9\n+   |\n+LL | pub use half_public_import::HalfPublicImport;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: Public: pub(crate), Exported: pub, Reachable: pub, ReachableFromImplTrait: pub\n   --> $DIR/access_levels.rs:14:13\n    |\n@@ -124,5 +130,5 @@ error: Public: pub(crate), Exported: pub, Reachable: pub, ReachableFromImplTrait\n LL |             type B;\n    |             ^^^^^^\n \n-error: aborting due to 21 previous errors\n+error: aborting due to 22 previous errors\n "}]}