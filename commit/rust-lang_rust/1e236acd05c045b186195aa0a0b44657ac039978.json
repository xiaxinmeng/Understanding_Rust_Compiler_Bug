{"sha": "1e236acd05c045b186195aa0a0b44657ac039978", "node_id": "C_kwDOAAsO6NoAKDFlMjM2YWNkMDVjMDQ1YjE4NjE5NWFhMGEwYjQ0NjU3YWMwMzk5Nzg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-25T18:40:52Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-28T17:35:40Z"}, "message": "Make ObligationCtxt::normalize take cause by borrow", "tree": {"sha": "3dd38cc0cba5d19bf41ba4c501f0c67d6d41169b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dd38cc0cba5d19bf41ba4c501f0c67d6d41169b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e236acd05c045b186195aa0a0b44657ac039978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e236acd05c045b186195aa0a0b44657ac039978", "html_url": "https://github.com/rust-lang/rust/commit/1e236acd05c045b186195aa0a0b44657ac039978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e236acd05c045b186195aa0a0b44657ac039978/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce409b520045a72a806f88606bbef142989a233d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce409b520045a72a806f88606bbef142989a233d", "html_url": "https://github.com/rust-lang/rust/commit/ce409b520045a72a806f88606bbef142989a233d"}], "stats": {"total": 56, "additions": 27, "deletions": 29}, "files": [{"sha": "e05566dc2c745151833d3523ca1b60d6682f964f", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=1e236acd05c045b186195aa0a0b44657ac039978", "patch": "@@ -295,7 +295,7 @@ where\n         // the former fails to normalize the `nll/relate_tys/impl-fn-ignore-binder-via-bottom.rs` test.\n         // Check after #85499 lands to see if its fixes have erased this difference.\n         let (param_env, value) = key.into_parts();\n-        let _ = ocx.normalize(cause, param_env, value.value);\n+        let _ = ocx.normalize(&cause, param_env, value.value);\n \n         try_extract_error_from_fulfill_cx(&ocx, placeholder_region, error_region)\n     }"}, {"sha": "54213d55a2da7137b91b5f9e73fc369ddcf41810", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=1e236acd05c045b186195aa0a0b44657ac039978", "patch": "@@ -761,8 +761,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                             hir_id,\n                             ObligationCauseCode::ItemObligation(callee),\n                         );\n-                        let normalized_predicates =\n-                            ocx.normalize(cause.clone(), param_env, predicates);\n+                        let normalized_predicates = ocx.normalize(&cause, param_env, predicates);\n                         ocx.register_obligations(traits::predicates_for_generics(\n                             |_, _| cause.clone(),\n                             self.param_env,"}, {"sha": "be786569cde3f52886abc4a16f1d635d6f58d54a", "filename": "compiler/rustc_const_eval/src/util/compare_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcompare_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcompare_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcompare_types.rs?ref=1e236acd05c045b186195aa0a0b44657ac039978", "patch": "@@ -46,8 +46,8 @@ pub fn is_subtype<'tcx>(\n     let infcx = builder.build();\n     let ocx = ObligationCtxt::new(&infcx);\n     let cause = ObligationCause::dummy();\n-    let src = ocx.normalize(cause.clone(), param_env, src);\n-    let dest = ocx.normalize(cause.clone(), param_env, dest);\n+    let src = ocx.normalize(&cause, param_env, src);\n+    let dest = ocx.normalize(&cause, param_env, dest);\n     match ocx.sub(&cause, param_env, src, dest) {\n         Ok(()) => {}\n         Err(_) => return false,"}, {"sha": "ba58672e7595a57e84872bec799a5ac88fe77d24", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=1e236acd05c045b186195aa0a0b44657ac039978", "patch": "@@ -221,7 +221,7 @@ fn compare_predicate_entailment<'tcx>(\n     let impl_m_own_bounds = impl_m_predicates.instantiate_own(tcx, impl_to_placeholder_substs);\n     for (predicate, span) in iter::zip(impl_m_own_bounds.predicates, impl_m_own_bounds.spans) {\n         let normalize_cause = traits::ObligationCause::misc(span, impl_m_hir_id);\n-        let predicate = ocx.normalize(normalize_cause, param_env, predicate);\n+        let predicate = ocx.normalize(&normalize_cause, param_env, predicate);\n \n         let cause = ObligationCause::new(\n             span,\n@@ -260,7 +260,7 @@ fn compare_predicate_entailment<'tcx>(\n     );\n \n     let norm_cause = ObligationCause::misc(impl_m_span, impl_m_hir_id);\n-    let impl_sig = ocx.normalize(norm_cause.clone(), param_env, impl_sig);\n+    let impl_sig = ocx.normalize(&norm_cause, param_env, impl_sig);\n     let impl_fty = tcx.mk_fn_ptr(ty::Binder::dummy(impl_sig));\n     debug!(\"compare_impl_method: impl_fty={:?}\", impl_fty);\n \n@@ -271,7 +271,7 @@ fn compare_predicate_entailment<'tcx>(\n     // we have to do this before normalization, since the normalized ty may\n     // not contain the input parameters. See issue #87748.\n     wf_tys.extend(trait_sig.inputs_and_output.iter());\n-    let trait_sig = ocx.normalize(norm_cause, param_env, trait_sig);\n+    let trait_sig = ocx.normalize(&norm_cause, param_env, trait_sig);\n     // We also have to add the normalized trait signature\n     // as we don't normalize during implied bounds computation.\n     wf_tys.extend(trait_sig.inputs_and_output.iter());\n@@ -366,7 +366,7 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n     // Normalize the impl signature with fresh variables for lifetime inference.\n     let norm_cause = ObligationCause::misc(return_span, impl_m_hir_id);\n     let impl_sig = ocx.normalize(\n-        norm_cause.clone(),\n+        &norm_cause,\n         param_env,\n         infcx.replace_bound_vars_with_fresh_vars(\n             return_span,\n@@ -387,7 +387,7 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n             tcx.bound_fn_sig(trait_m.def_id).subst(tcx, trait_to_placeholder_substs),\n         )\n         .fold_with(&mut collector);\n-    let trait_sig = ocx.normalize(norm_cause.clone(), param_env, unnormalized_trait_sig);\n+    let trait_sig = ocx.normalize(&norm_cause, param_env, unnormalized_trait_sig);\n     let trait_return_ty = trait_sig.output();\n \n     let wf_tys = FxIndexSet::from_iter(\n@@ -592,7 +592,7 @@ impl<'tcx> TypeFolder<'tcx> for ImplTraitInTraitCollector<'_, 'tcx> {\n             for (pred, pred_span) in self.tcx().bound_explicit_item_bounds(proj.item_def_id).subst_iter_copied(self.tcx(), proj.substs) {\n                 let pred = pred.fold_with(self);\n                 let pred = self.ocx.normalize(\n-                    ObligationCause::misc(self.span, self.body_id),\n+                    &ObligationCause::misc(self.span, self.body_id),\n                     self.param_env,\n                     pred,\n                 );\n@@ -1403,11 +1403,11 @@ pub(crate) fn raw_compare_const_impl<'tcx>(\n     );\n \n     // There is no \"body\" here, so just pass dummy id.\n-    let impl_ty = ocx.normalize(cause.clone(), param_env, impl_ty);\n+    let impl_ty = ocx.normalize(&cause, param_env, impl_ty);\n \n     debug!(\"compare_const_impl: impl_ty={:?}\", impl_ty);\n \n-    let trait_ty = ocx.normalize(cause.clone(), param_env, trait_ty);\n+    let trait_ty = ocx.normalize(&cause, param_env, trait_ty);\n \n     debug!(\"compare_const_impl: trait_ty={:?}\", trait_ty);\n \n@@ -1556,7 +1556,7 @@ fn compare_type_predicate_entailment<'tcx>(\n     for (span, predicate) in std::iter::zip(impl_ty_own_bounds.spans, impl_ty_own_bounds.predicates)\n     {\n         let cause = ObligationCause::misc(span, impl_ty_hir_id);\n-        let predicate = ocx.normalize(cause, param_env, predicate);\n+        let predicate = ocx.normalize(&cause, param_env, predicate);\n \n         let cause = ObligationCause::new(\n             span,\n@@ -1778,7 +1778,7 @@ pub fn check_type_bounds<'tcx>(\n \n     for mut obligation in util::elaborate_obligations(tcx, obligations) {\n         let normalized_predicate =\n-            ocx.normalize(normalize_cause.clone(), normalize_param_env, obligation.predicate);\n+            ocx.normalize(&normalize_cause, normalize_param_env, obligation.predicate);\n         debug!(\"compare_projection_bounds: normalized predicate = {:?}\", normalized_predicate);\n         obligation.predicate = normalized_predicate;\n "}, {"sha": "7daed74e9de83d6add8504792d4daad16ab468f9", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=1e236acd05c045b186195aa0a0b44657ac039978", "patch": "@@ -60,7 +60,7 @@ impl<'tcx> WfCheckingCtxt<'_, 'tcx> {\n         T: TypeFoldable<'tcx>,\n     {\n         self.ocx.normalize(\n-            ObligationCause::new(span, self.body_id, ObligationCauseCode::WellFormed(loc)),\n+            &ObligationCause::new(span, self.body_id, ObligationCauseCode::WellFormed(loc)),\n             self.param_env,\n             value,\n         )"}, {"sha": "2058832d5fdc1035dc405812cc5d9a309b2382a6", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=1e236acd05c045b186195aa0a0b44657ac039978", "patch": "@@ -332,7 +332,7 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n             ObligationCauseCode::MainFunctionType,\n         );\n         let ocx = traits::ObligationCtxt::new(&infcx);\n-        let norm_return_ty = ocx.normalize(cause.clone(), param_env, return_ty);\n+        let norm_return_ty = ocx.normalize(&cause, param_env, return_ty);\n         ocx.register_bound(cause, param_env, norm_return_ty, term_did);\n         let errors = ocx.select_all_or_error();\n         if !errors.is_empty() {"}, {"sha": "869ad07c00d61a8511b55f28f9af7d9315907950", "filename": "compiler/rustc_hir_typeck/src/inherited.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs?ref=1e236acd05c045b186195aa0a0b44657ac039978", "patch": "@@ -100,7 +100,7 @@ impl<'tcx> Inherited<'tcx> {\n                     infcx.probe(|_| {\n                         let ocx = ObligationCtxt::new_in_snapshot(infcx);\n                         let normalized_fn_sig = ocx.normalize(\n-                            ObligationCause::dummy(),\n+                            &ObligationCause::dummy(),\n                             // FIXME(compiler-errors): This is probably not the right param-env...\n                             infcx.tcx.param_env(def_id),\n                             fn_sig,"}, {"sha": "64d01ddb09a493bafff61f309e741d0709af66e6", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=1e236acd05c045b186195aa0a0b44657ac039978", "patch": "@@ -104,8 +104,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n \n     pub fn normalize<T: TypeFoldable<'tcx>>(\n         &self,\n-        // FIXME(compiler-errors): Make this borrow\n-        cause: ObligationCause<'tcx>,\n+        cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         value: T,\n     ) -> T {\n@@ -186,7 +185,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n             // sound and then uncomment this line again.\n \n             // implied_bounds.insert(ty);\n-            let normalized = self.normalize(cause.clone(), param_env, ty);\n+            let normalized = self.normalize(&cause, param_env, ty);\n             implied_bounds.insert(normalized);\n         }\n         implied_bounds"}, {"sha": "752b53fbc3f9a2011c5cfa90afc2e32d2fbfb8b0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/ambiguity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fambiguity.rs?ref=1e236acd05c045b186195aa0a0b44657ac039978", "patch": "@@ -17,11 +17,11 @@ pub fn recompute_applicable_impls<'tcx>(\n         let placeholder_obligation =\n             infcx.replace_bound_vars_with_placeholders(obligation.predicate);\n         let obligation_trait_ref =\n-            ocx.normalize(dummy_cause.clone(), param_env, placeholder_obligation.trait_ref);\n+            ocx.normalize(&dummy_cause, param_env, placeholder_obligation.trait_ref);\n \n         let impl_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id);\n         let impl_trait_ref = tcx.bound_impl_trait_ref(impl_def_id).unwrap().subst(tcx, impl_substs);\n-        let impl_trait_ref = ocx.normalize(ObligationCause::dummy(), param_env, impl_trait_ref);\n+        let impl_trait_ref = ocx.normalize(&ObligationCause::dummy(), param_env, impl_trait_ref);\n \n         if let Err(_) = ocx.eq(&dummy_cause, param_env, obligation_trait_ref, impl_trait_ref) {\n             return false;"}, {"sha": "371367f0deb3e671f956c7dd41d898f4e5eaf83b", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=1e236acd05c045b186195aa0a0b44657ac039978", "patch": "@@ -56,8 +56,8 @@ pub use self::object_safety::astconv_object_safety_violations;\n pub use self::object_safety::is_vtable_safe_method;\n pub use self::object_safety::MethodViolationCode;\n pub use self::object_safety::ObjectSafetyViolation;\n-pub use self::project::{NormalizeExt, normalize_projection_type};\n pub(crate) use self::project::{normalize, normalize_to};\n+pub use self::project::{normalize_projection_type, NormalizeExt};\n pub use self::select::{EvaluationCache, SelectionCache, SelectionContext};\n pub use self::select::{EvaluationResult, IntercrateAmbiguityCause, OverflowError};\n pub use self::specialize::specialization_graph::FutureCompatOverlapError;\n@@ -387,7 +387,7 @@ where\n {\n     let ocx = ObligationCtxt::new(infcx);\n     debug!(?value);\n-    let normalized_value = ocx.normalize(cause, param_env, value);\n+    let normalized_value = ocx.normalize(&cause, param_env, value);\n     debug!(?normalized_value);\n     debug!(\"select_all_or_error start\");\n     let errors = ocx.select_all_or_error();\n@@ -454,7 +454,7 @@ pub fn impossible_predicates<'tcx>(\n     let infcx = tcx.infer_ctxt().build();\n     let param_env = ty::ParamEnv::reveal_all();\n     let ocx = ObligationCtxt::new(&infcx);\n-    let predicates = ocx.normalize(ObligationCause::dummy(), param_env, predicates);\n+    let predicates = ocx.normalize(&ObligationCause::dummy(), param_env, predicates);\n     for predicate in predicates {\n         let obligation = Obligation::new(tcx, ObligationCause::dummy(), param_env, predicate);\n         ocx.register_obligation(obligation);"}, {"sha": "7f964afde80fd1d4b90f925796562b86b0c2ff94", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e236acd05c045b186195aa0a0b44657ac039978/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=1e236acd05c045b186195aa0a0b44657ac039978", "patch": "@@ -62,7 +62,7 @@ pub fn type_op_ascribe_user_type_with_span<'tcx>(\n     let cause = ObligationCause::dummy_with_span(span);\n \n     let ty = tcx.bound_type_of(def_id).subst(tcx, substs);\n-    let ty = ocx.normalize(cause.clone(), param_env, ty);\n+    let ty = ocx.normalize(&cause, param_env, ty);\n     debug!(\"relate_type_and_user_type: ty of def-id is {:?}\", ty);\n \n     ocx.eq(&cause, param_env, mir_ty, ty)?;\n@@ -85,14 +85,14 @@ pub fn type_op_ascribe_user_type_with_span<'tcx>(\n             ObligationCauseCode::AscribeUserTypeProvePredicate(predicate_span),\n         );\n         let instantiated_predicate =\n-            ocx.normalize(cause.clone(), param_env, instantiated_predicate);\n+            ocx.normalize(&cause.clone(), param_env, instantiated_predicate);\n \n         ocx.register_obligation(Obligation::new(tcx, cause, param_env, instantiated_predicate));\n     }\n \n     if let Some(UserSelfTy { impl_def_id, self_ty }) = user_self_ty {\n         let impl_self_ty = tcx.bound_type_of(impl_def_id).subst(tcx, substs);\n-        let impl_self_ty = ocx.normalize(cause.clone(), param_env, impl_self_ty);\n+        let impl_self_ty = ocx.normalize(&cause, param_env, impl_self_ty);\n \n         ocx.eq(&cause, param_env, self_ty, impl_self_ty)?;\n "}]}