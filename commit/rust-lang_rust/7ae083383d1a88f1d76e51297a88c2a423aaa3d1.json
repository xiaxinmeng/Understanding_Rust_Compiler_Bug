{"sha": "7ae083383d1a88f1d76e51297a88c2a423aaa3d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZTA4MzM4M2QxYTg4ZjFkNzZlNTEyOTdhODhjMmE0MjNhYWEzZDE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-03T10:44:25Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-03T23:48:24Z"}, "message": "Move doc comment desugaring into the parser.", "tree": {"sha": "8fd511c7f7531dc1c2bf4fcdb12b33689ffb1f7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fd511c7f7531dc1c2bf4fcdb12b33689ffb1f7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ae083383d1a88f1d76e51297a88c2a423aaa3d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ae083383d1a88f1d76e51297a88c2a423aaa3d1", "html_url": "https://github.com/rust-lang/rust/commit/7ae083383d1a88f1d76e51297a88c2a423aaa3d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ae083383d1a88f1d76e51297a88c2a423aaa3d1/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2b3fec778453d06be6a07494eeaa66da57e4f82", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2b3fec778453d06be6a07494eeaa66da57e4f82", "html_url": "https://github.com/rust-lang/rust/commit/e2b3fec778453d06be6a07494eeaa66da57e4f82"}], "stats": {"total": 49, "additions": 16, "deletions": 33}, "files": [{"sha": "fdec7a4c7321e819a0b993683f54db253c1680bb", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae083383d1a88f1d76e51297a88c2a423aaa3d1/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae083383d1a88f1d76e51297a88c2a423aaa3d1/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=7ae083383d1a88f1d76e51297a88c2a423aaa3d1", "patch": "@@ -279,7 +279,7 @@ pub fn token_name_eq(t1 : &Token, t2 : &Token) -> bool {\n }\n \n pub fn parse(sess: &ParseSess, rdr: TtReader, ms: &[TokenTree]) -> NamedParseResult {\n-    let mut parser = Parser::new(sess, Box::new(rdr));\n+    let mut parser = Parser::new_with_doc_flag(sess, Box::new(rdr), true);\n     let mut cur_eis = SmallVector::one(initial_matcher_pos(ms.to_owned(), None, parser.span.lo));\n \n     loop {"}, {"sha": "96972f4dc884b9b770e0e4352fc264822838c318", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7ae083383d1a88f1d76e51297a88c2a423aaa3d1/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae083383d1a88f1d76e51297a88c2a423aaa3d1/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=7ae083383d1a88f1d76e51297a88c2a423aaa3d1", "patch": "@@ -12,9 +12,7 @@ use self::LockstepIterSize::*;\n use ast::Ident;\n use errors::{Handler, DiagnosticBuilder};\n use ext::tt::macro_parser::{NamedMatch, MatchedSeq, MatchedNonterminal};\n-use parse::token::{DocComment, MatchNt, SubstNt};\n-use parse::token::{Token, NtIdent};\n-use parse::token;\n+use parse::token::{self, MatchNt, SubstNt, Token, NtIdent};\n use parse::lexer::TokenAndSpan;\n use syntax_pos::{Span, DUMMY_SP};\n use tokenstream::{self, TokenTree};\n@@ -48,7 +46,6 @@ pub struct TtReader<'a> {\n     pub cur_span: Span,\n     pub next_tok: Option<TokenAndSpan>,\n     /// Transform doc comments. Only useful in macro invocations\n-    pub desugar_doc_comments: bool,\n     pub fatal_errs: Vec<DiagnosticBuilder<'a>>,\n }\n \n@@ -59,20 +56,6 @@ pub fn new_tt_reader(sp_diag: &Handler,\n                      interp: Option<HashMap<Ident, Rc<NamedMatch>>>,\n                      src: Vec<tokenstream::TokenTree>)\n                      -> TtReader {\n-    new_tt_reader_with_doc_flag(sp_diag, interp, src, false)\n-}\n-\n-/// The extra `desugar_doc_comments` flag enables reading doc comments\n-/// like any other attribute which consists of `meta` and surrounding #[ ] tokens.\n-///\n-/// This can do Macro-By-Example transcription. On the other hand, if\n-/// `src` contains no `TokenTree::Sequence`s, `MatchNt`s or `SubstNt`s, `interp` can\n-/// (and should) be None.\n-pub fn new_tt_reader_with_doc_flag(sp_diag: &Handler,\n-                                   interp: Option<HashMap<Ident, Rc<NamedMatch>>>,\n-                                   src: Vec<tokenstream::TokenTree>,\n-                                   desugar_doc_comments: bool)\n-                                   -> TtReader {\n     let mut r = TtReader {\n         sp_diag: sp_diag,\n         stack: SmallVector::one(TtFrame {\n@@ -91,7 +74,6 @@ pub fn new_tt_reader_with_doc_flag(sp_diag: &Handler,\n         },\n         repeat_idx: Vec::new(),\n         repeat_len: Vec::new(),\n-        desugar_doc_comments: desugar_doc_comments,\n         /* dummy values, never read: */\n         cur_tok: token::Eof,\n         cur_span: DUMMY_SP,\n@@ -312,14 +294,6 @@ pub fn tt_next_token(r: &mut TtReader) -> TokenAndSpan {\n                 });\n                 // if this could be 0-length, we'd need to potentially recur here\n             }\n-            TokenTree::Token(sp, DocComment(name)) if r.desugar_doc_comments => {\n-                r.stack.push(TtFrame {\n-                   forest: TokenTree::Token(sp, DocComment(name)),\n-                   idx: 0,\n-                   dotdotdoted: false,\n-                   sep: None\n-                });\n-            }\n             TokenTree::Token(sp, tok) => {\n                 r.cur_span = sp;\n                 r.cur_tok = tok;"}, {"sha": "200fb0de2d2429efe8272c151104eb7d0df6fe47", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ae083383d1a88f1d76e51297a88c2a423aaa3d1/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae083383d1a88f1d76e51297a88c2a423aaa3d1/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=7ae083383d1a88f1d76e51297a88c2a423aaa3d1", "patch": "@@ -22,7 +22,7 @@ use std::char;\n use std::mem::replace;\n use std::rc::Rc;\n \n-pub use ext::tt::transcribe::{TtReader, new_tt_reader, new_tt_reader_with_doc_flag};\n+pub use ext::tt::transcribe::{TtReader, new_tt_reader};\n \n pub mod comments;\n mod unicode_chars;"}, {"sha": "e5bbeb3c648ef92c67b96b5cbd6c0841adc97333", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ae083383d1a88f1d76e51297a88c2a423aaa3d1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae083383d1a88f1d76e51297a88c2a423aaa3d1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7ae083383d1a88f1d76e51297a88c2a423aaa3d1", "patch": "@@ -211,6 +211,7 @@ pub struct Parser<'a> {\n     pub root_module_name: Option<String>,\n     pub expected_tokens: Vec<TokenType>,\n     pub tts: Vec<(TokenTree, usize)>,\n+    pub desugar_doc_comments: bool,\n }\n \n #[derive(PartialEq, Eq, Clone)]\n@@ -275,6 +276,11 @@ impl From<P<Expr>> for LhsExpr {\n \n impl<'a> Parser<'a> {\n     pub fn new(sess: &'a ParseSess, rdr: Box<Reader+'a>) -> Self {\n+        Parser::new_with_doc_flag(sess, rdr, false)\n+    }\n+\n+    pub fn new_with_doc_flag(sess: &'a ParseSess, rdr: Box<Reader+'a>, desugar_doc_comments: bool)\n+                             -> Self {\n         let mut parser = Parser {\n             reader: rdr,\n             sess: sess,\n@@ -294,6 +300,7 @@ impl<'a> Parser<'a> {\n             root_module_name: None,\n             expected_tokens: Vec::new(),\n             tts: Vec::new(),\n+            desugar_doc_comments: desugar_doc_comments,\n         };\n \n         let tok = parser.next_tok();\n@@ -326,6 +333,10 @@ impl<'a> Parser<'a> {\n             loop {\n                 let nt = match tok.tok {\n                     token::Interpolated(ref nt) => nt.clone(),\n+                    token::DocComment(name) if self.desugar_doc_comments => {\n+                        self.tts.push((TokenTree::Token(tok.sp, token::DocComment(name)), 0));\n+                        continue 'outer\n+                    }\n                     _ => return tok,\n                 };\n                 match *nt {"}, {"sha": "9ef6c07e489dce7de227d349cbeef5b313358422", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ae083383d1a88f1d76e51297a88c2a423aaa3d1/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae083383d1a88f1d76e51297a88c2a423aaa3d1/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=7ae083383d1a88f1d76e51297a88c2a423aaa3d1", "patch": "@@ -214,11 +214,9 @@ impl TokenTree {\n                  mtch: &[TokenTree],\n                  tts: &[TokenTree])\n                  -> macro_parser::NamedParseResult {\n+        let diag = &cx.parse_sess().span_diagnostic;\n         // `None` is because we're not interpolating\n-        let arg_rdr = lexer::new_tt_reader_with_doc_flag(&cx.parse_sess().span_diagnostic,\n-                                                         None,\n-                                                         tts.iter().cloned().collect(),\n-                                                         true);\n+        let arg_rdr = lexer::new_tt_reader(diag, None, tts.iter().cloned().collect());\n         macro_parser::parse(cx.parse_sess(), arg_rdr, mtch)\n     }\n "}]}