{"sha": "a0960a12239a473c2608e068824f565d6cd63966", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwOTYwYTEyMjM5YTQ3M2MyNjA4ZTA2ODgyNGY1NjVkNmNkNjM5NjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-22T23:56:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-22T23:56:23Z"}, "message": "auto merge of #14348 : alexcrichton/rust/doc.rust-lang.org, r=huonw", "tree": {"sha": "24cfe9b92b419ba3b962678251806f96e803b4ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24cfe9b92b419ba3b962678251806f96e803b4ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0960a12239a473c2608e068824f565d6cd63966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0960a12239a473c2608e068824f565d6cd63966", "html_url": "https://github.com/rust-lang/rust/commit/a0960a12239a473c2608e068824f565d6cd63966", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0960a12239a473c2608e068824f565d6cd63966/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87ad19eb78239707f1ceed43e475c6aa052efdbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/87ad19eb78239707f1ceed43e475c6aa052efdbc", "html_url": "https://github.com/rust-lang/rust/commit/87ad19eb78239707f1ceed43e475c6aa052efdbc"}, {"sha": "711f531b655941b163303062562047767967ea84", "url": "https://api.github.com/repos/rust-lang/rust/commits/711f531b655941b163303062562047767967ea84", "html_url": "https://github.com/rust-lang/rust/commit/711f531b655941b163303062562047767967ea84"}], "stats": {"total": 335, "additions": 221, "deletions": 114}, "files": [{"sha": "f214dcacb7ca0bbac0a59b06fda67eee65baf729", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -2,7 +2,7 @@\n \n If you're just reporting a bug, please see:\n \n-http://static.rust-lang.org/doc/master/complement-bugreport.html\n+http://doc.rust-lang.org/complement-bugreport.html\n \n ## Pull request procedure\n "}, {"sha": "2f846725cd72d5aa0faeedc0ba4007dfe9922785", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -13,7 +13,7 @@ documentation.\n > [getting started][wiki-start] notes on the wiki.\n \n [installer]: http://www.rust-lang.org/install.html\n-[tutorial]: http://static.rust-lang.org/doc/tutorial.html\n+[tutorial]: http://doc.rust-lang.org/tutorial.html\n [wiki-start]: https://github.com/mozilla/rust/wiki/Note-getting-started-developing-Rust\n [win-wiki]: https://github.com/mozilla/rust/wiki/Using-Rust-on-Windows\n \n@@ -60,7 +60,7 @@ documentation.\n \n [repo]: https://github.com/mozilla/rust\n [tarball]: http://static.rust-lang.org/dist/rust-nightly.tar.gz\n-[tutorial]: http://static.rust-lang.org/doc/master/tutorial.html\n+[tutorial]: http://doc.rust-lang.org/tutorial.html\n \n ## Notes\n "}, {"sha": "b02cb548ad506720ec8b23295640abed0a727e38", "filename": "mk/docs.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -156,7 +156,7 @@ doc/footer.tex: $(D)/footer.inc | doc/\n # HTML (rustdoc)\n DOC_TARGETS += doc/not_found.html\n doc/not_found.html: $(D)/not_found.md $(HTML_DEPS) | doc/\n-\t$(RUSTDOC) $(RUSTDOC_HTML_OPTS_NO_CSS) --markdown-css http://static.rust-lang.org/doc/master/rust.css $<\n+\t$(RUSTDOC) $(RUSTDOC_HTML_OPTS_NO_CSS) --markdown-css http://doc.rust-lang.org/rust.css $<\n \n define DEF_DOC\n "}, {"sha": "3cd252acf0e83a416d74778429a8c0e31432d61b", "filename": "src/doc/complement-cheatsheet.md", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Fdoc%2Fcomplement-cheatsheet.md", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Fdoc%2Fcomplement-cheatsheet.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-cheatsheet.md?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -4,7 +4,7 @@\n \n **Int to string**\n \n-Use [`ToStr`](http://static.rust-lang.org/doc/master/std/to_str/trait.ToStr.html).\n+Use [`ToStr`](../std/to_str/trait.ToStr.html).\n \n ~~~\n let x: int = 42;\n@@ -13,7 +13,8 @@ let y: StrBuf = x.to_str().to_strbuf();\n \n **String to int**\n \n-Use [`FromStr`](http://static.rust-lang.org/doc/master/std/from_str/trait.FromStr.html), and its helper function, [`from_str`](http://static.rust-lang.org/doc/master/std/from_str/fn.from_str.html).\n+Use [`FromStr`](../std/from_str/trait.FromStr.html), and its helper function,\n+[`from_str`](../std/from_str/fn.from_str.html).\n \n ~~~\n let x: Option<int> = from_str(\"42\");\n@@ -34,7 +35,8 @@ let y: StrBuf = format_strbuf!(\"{:X}\", x);   // uppercase hexadecimal\n \n **String to int, in non-base-10**\n \n-Use [`FromStrRadix`](http://static.rust-lang.org/doc/master/std/num/trait.FromStrRadix.html), and its helper function, [`from_str_radix`](http://static.rust-lang.org/doc/master/std/num/fn.from_str_radix.html).\n+Use [`FromStrRadix`](../std/num/trait.FromStrRadix.html), and its helper\n+function, [`from_str_radix`](../std/num/fn.from_str_radix.html).\n \n ~~~\n use std::num;\n@@ -45,7 +47,8 @@ let y: i64 = x.unwrap();\n \n **Vector of Bytes to String**\n \n-To return a Borrowed String Slice (&str) use the str helper function [`from_utf8`](http://static.rust-lang.org/doc/master/std/str/fn.from_utf8.html).\n+To return a Borrowed String Slice (&str) use the str helper function\n+[`from_utf8`](../std/str/fn.from_utf8.html).\n \n ~~~\n use std::str;\n@@ -55,7 +58,8 @@ let x: Option<&str> = str::from_utf8(bytes);\n let y: &str = x.unwrap();\n ~~~\n \n-To return an Owned String (StrBuf) use the str helper function [`from_utf8_owned`](http://static.rust-lang.org/doc/master/std/str/fn.from_utf8_owned.html).\n+To return an Owned String (StrBuf) use the str helper function\n+[`from_utf8_owned`](../std/str/fn.from_utf8_owned.html).\n \n ~~~\n use std::str;\n@@ -65,7 +69,10 @@ let x: Option<StrBuf> =\n let y: StrBuf = x.unwrap();\n ~~~\n \n-To return a [`MaybeOwned`](http://static.rust-lang.org/doc/master/std/str/enum.MaybeOwned.html) use the str helper function [`from_utf8_lossy`](http://static.rust-lang.org/doc/master/std/str/fn.from_utf8_owned.html).  This function also replaces non-valid utf-8 sequences with U+FFFD replacement character.\n+To return a [`MaybeOwned`](../std/str/enum.MaybeOwned.html) use the str helper\n+function [`from_utf8_lossy`](../std/str/fn.from_utf8_owned.html).\n+This function also replaces non-valid utf-8 sequences with U+FFFD replacement\n+character.\n \n ~~~\n use std::str;\n@@ -78,7 +85,13 @@ let y = str::from_utf8_lossy(x);\n \n ## How do I read from a file?\n \n-Use [`File::open`](http://static.rust-lang.org/doc/master/std/io/fs/struct.File.html#method.open) to create a [`File`](http://static.rust-lang.org/doc/master/std/io/fs/struct.File.html) struct, which implements the [`Reader`](http://static.rust-lang.org/doc/master/std/io/trait.Reader.html) trait.\n+Use\n+[`File::open`](../std/io/fs/struct.File.html#method.open)\n+to create a\n+[`File`](../std/io/fs/struct.File.html)\n+struct, which implements the\n+[`Reader`](../std/io/trait.Reader.html)\n+trait.\n \n ~~~ {.ignore}\n use std::path::Path;\n@@ -91,7 +104,7 @@ let reader : File = File::open(&path).unwrap_or_else(on_error);\n \n ## How do I iterate over the lines in a file?\n \n-Use the [`lines`](http://static.rust-lang.org/doc/master/std/io/trait.Buffer.html#method.lines) method on a [`BufferedReader`](http://static.rust-lang.org/doc/master/std/io/buffered/struct.BufferedReader.html).\n+Use the [`lines`](../std/io/trait.Buffer.html#method.lines) method on a [`BufferedReader`](../std/io/buffered/struct.BufferedReader.html).\n \n ~~~\n use std::io::BufferedReader;\n@@ -109,7 +122,7 @@ for line in reader.lines() {\n \n ## How do I search for a substring?\n \n-Use the [`find_str`](http://static.rust-lang.org/doc/master/std/str/trait.StrSlice.html#tymethod.find_str) method.\n+Use the [`find_str`](../std/str/trait.StrSlice.html#tymethod.find_str) method.\n \n ~~~\n let str = \"Hello, this is some random string\";\n@@ -120,7 +133,7 @@ let index: Option<uint> = str.find_str(\"rand\");\n \n ## How do I get the length of a vector?\n \n-The [`Container`](http://static.rust-lang.org/doc/master/std/container/trait.Container.html) trait provides the `len` method.\n+The [`Container`](../std/container/trait.Container.html) trait provides the `len` method.\n \n ~~~\n let u: ~[u32] = ~[0, 1, 2];\n@@ -132,7 +145,7 @@ println!(\"u: {}, v: {}, w: {}\", u.len(), v.len(), w.len()); // 3, 4, 5\n \n ## How do I iterate over a vector?\n \n-Use the [`iter`](http://static.rust-lang.org/doc/master/std/vec/trait.ImmutableVector.html#tymethod.iter) method.\n+Use the [`iter`](../std/vec/trait.ImmutableVector.html#tymethod.iter) method.\n \n ~~~\n let values: ~[int] = ~[1, 2, 3, 4, 5];\n@@ -141,7 +154,10 @@ for value in values.iter() {  // value: &int\n }\n ~~~\n \n-(See also [`mut_iter`](http://static.rust-lang.org/doc/master/std/vec/trait.MutableVector.html#tymethod.mut_iter) which yields `&mut int` and [`move_iter`](http://static.rust-lang.org/doc/master/std/vec/trait.OwnedVector.html#tymethod.move_iter) which yields `int` while consuming the `values` vector.)\n+(See also [`mut_iter`](../std/vec/trait.MutableVector.html#tymethod.mut_iter)\n+which yields `&mut int` and\n+[`move_iter`](../std/vec/trait.OwnedVector.html#tymethod.move_iter) which yields\n+`int` while consuming the `values` vector.)\n \n # Type system\n "}, {"sha": "717902e01d5d59ca3198e99a00076a507ee2c8d4", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 144, "deletions": 52, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -89,11 +89,11 @@ Raw pointers have much fewer guarantees than other pointer types\n offered by the Rust language and libraries. For example, they\n \n - are not guaranteed to point to valid memory and are not even\n-  guaranteed to be non-null (unlike both `~` and `&`);\n-- do not have any automatic clean-up, unlike `~`, and so require\n+  guaranteed to be non-null (unlike both `Box` and `&`);\n+- do not have any automatic clean-up, unlike `Box`, and so require\n   manual resource management;\n - are plain-old-data, that is, they don't move ownership, again unlike\n-  `~`, hence the Rust compiler cannot protect against bugs like\n+  `Box`, hence the Rust compiler cannot protect against bugs like\n   use-after-free;\n - are considered sendable (if their contents is considered sendable),\n   so the compiler offers no assistance with ensuring their use is\n@@ -189,7 +189,7 @@ code:\n \n As an example, we give a reimplementation of owned boxes by wrapping\n `malloc` and `free`. Rust's move semantics and lifetimes mean this\n-reimplementation is as safe as the built-in `~` type.\n+reimplementation is as safe as the `Box` type.\n \n ```\n extern crate libc;\n@@ -198,13 +198,14 @@ use std::mem;\n use std::ptr;\n \n // Define a wrapper around the handle returned by the foreign code.\n-// Unique<T> has the same semantics as ~T\n+// Unique<T> has the same semantics as Box<T>\n pub struct Unique<T> {\n     // It contains a single raw, mutable pointer to the object in question.\n     ptr: *mut T\n }\n \n // Implement methods for creating and using the values in the box.\n+\n // NB: For simplicity and correctness, we require that T has kind Send\n // (owned boxes relax this restriction, and can contain managed (GC) boxes).\n // This is because, as implemented, the garbage collector would not know\n@@ -215,23 +216,26 @@ impl<T: Send> Unique<T> {\n             let ptr = malloc(std::mem::size_of::<T>() as size_t) as *mut T;\n             // we *need* valid pointer.\n             assert!(!ptr.is_null());\n-            // `*ptr` is uninitialized, and `*ptr = value` would attempt to destroy it\n-            // `overwrite` moves a value into this memory without\n-            // attempting to drop the original value.\n+            // `*ptr` is uninitialized, and `*ptr = value` would\n+            // attempt to destroy it `overwrite` moves a value into\n+            // this memory without attempting to drop the original\n+            // value.\n             mem::overwrite(&mut *ptr, value);\n             Unique{ptr: ptr}\n         }\n     }\n \n-    // the 'r lifetime results in the same semantics as `&*x` with ~T\n+    // the 'r lifetime results in the same semantics as `&*x` with\n+    // Box<T>\n     pub fn borrow<'r>(&'r self) -> &'r T {\n         // By construction, self.ptr is valid\n         unsafe { &*self.ptr }\n     }\n \n-    // the 'r lifetime results in the same semantics as `&mut *x` with ~T\n+    // the 'r lifetime results in the same semantics as `&mut *x` with\n+    // Box<T>\n     pub fn borrow_mut<'r>(&'r mut self) -> &'r mut T {\n-        unsafe { &mut*self.ptr }\n+        unsafe { &mut *self.ptr }\n     }\n }\n \n@@ -246,7 +250,6 @@ impl<T: Send> Unique<T> {\n impl<T: Send> Drop for Unique<T> {\n     fn drop(&mut self) {\n         unsafe {\n-\n             // Copy the object out from the pointer onto the stack,\n             // where it is covered by normal Rust destructor semantics\n             // and cleans itself up, if necessary\n@@ -428,11 +431,9 @@ this is undesirable, and can be avoided with the `#![no_std]`\n attribute attached to the crate.\n \n ```ignore\n-# // FIXME #12903: linking failures due to no_std\n-// the minimal library\n+// a minimal library\n #![crate_type=\"lib\"]\n #![no_std]\n-\n # // fn main() {} tricked you, rustdoc!\n ```\n \n@@ -444,20 +445,23 @@ default shim for the C `main` function with your own.\n The function marked `#[start]` is passed the command line parameters\n in the same format as a C:\n \n-```ignore\n-# // FIXME #12903: linking failures due to no_std\n+```\n #![no_std]\n \n-extern \"rust-intrinsic\" { fn abort() -> !; }\n-#[no_mangle] pub extern fn rust_stack_exhausted() {\n-    unsafe { abort() }\n-}\n+// Pull in the system libc library for what crt0.o likely requires\n+extern crate libc;\n \n+// Entry point for this program\n #[start]\n fn start(_argc: int, _argv: **u8) -> int {\n     0\n }\n \n+// These functions are invoked by the compiler, but not\n+// for a bare-bones hello world. These are normally\n+// provided by libstd.\n+#[lang = \"stack_exhausted\"] extern fn stack_exhausted() {}\n+#[lang = \"eh_personality\"] extern fn eh_personality() {}\n # // fn main() {} tricked you, rustdoc!\n ```\n \n@@ -467,29 +471,115 @@ correct ABI and the correct name, which requires overriding the\n compiler's name mangling too:\n \n ```ignore\n-# // FIXME #12903: linking failures due to no_std\n #![no_std]\n #![no_main]\n \n-extern \"rust-intrinsic\" { fn abort() -> !; }\n-#[no_mangle] pub extern fn rust_stack_exhausted() {\n-    unsafe { abort() }\n-}\n+extern crate libc;\n \n #[no_mangle] // ensure that this symbol is called `main` in the output\n-extern \"C\" fn main(_argc: int, _argv: **u8) -> int {\n+pub extern fn main(argc: int, argv: **u8) -> int {\n     0\n }\n \n+#[lang = \"stack_exhausted\"] extern fn stack_exhausted() {}\n+#[lang = \"eh_personality\"] extern fn eh_personality() {}\n # // fn main() {} tricked you, rustdoc!\n ```\n \n \n-Unfortunately the Rust compiler assumes that symbols with certain\n-names exist; and these have to be defined (or linked in). This is the\n-purpose of the `rust_stack_exhausted`: it is called when a function\n-detects that it will overflow its stack. The example above uses the\n-`abort` intrinsic which ensures that execution halts.\n+The compiler currently makes a few assumptions about symbols which are available\n+in the executable to call. Normally these functions are provided by the standard\n+library, but without it you must define your own.\n+\n+The first of these two functions, `stack_exhausted`, is invoked whenever stack\n+overflow is detected.  This function has a number of restrictions about how it\n+can be called and what it must do, but if the stack limit register is not being\n+maintained then a task always has an \"infinite stack\" and this function\n+shouldn't get triggered.\n+\n+The second of these two functions, `eh_personality`, is used by the failure\n+mechanisms of the compiler. This is often mapped to GCC's personality function\n+(see the [libstd implementation](../std/rt/unwind/) for more information), but\n+crates which do not trigger failure can be assured that this function is never\n+called.\n+\n+## Using libcore\n+\n+> **Note**: the core library's structure is unstable, and it is recommended to\n+> use the standard library instead wherever possible.\n+\n+With the above techniques, we've got a bare-metal executable running some Rust\n+code. There is a good deal of functionality provided by the standard library,\n+however, that is necessary to be productive in Rust. If the standard library is\n+not sufficient, then [libcore](../core/) is designed to be used instead.\n+\n+The core library has very few dependencies and is much more portable than the\n+standard library itself. Additionally, the core library has most of the\n+necessary functionality for writing idiomatic and effective Rust code.\n+\n+As an example, here is a program that will calculate the dot product of two\n+vectors provided from C, using idiomatic Rust practices.\n+\n+```\n+#![no_std]\n+\n+# extern crate libc;\n+extern crate core;\n+\n+use core::prelude::*;\n+\n+use core::mem;\n+use core::raw::Slice;\n+\n+#[no_mangle]\n+pub extern fn dot_product(a: *u32, a_len: u32,\n+                          b: *u32, b_len: u32) -> u32 {\n+    // Convert the provided arrays into Rust slices.\n+    // The core::raw module guarantees that the Slice\n+    // structure has the same memory layout as a &[T]\n+    // slice.\n+    //\n+    // This is an unsafe operation because the compiler\n+    // cannot tell the pointers are valid.\n+    let (a_slice, b_slice): (&[u32], &[u32]) = unsafe {\n+        mem::transmute((\n+            Slice { data: a, len: a_len as uint },\n+            Slice { data: b, len: b_len as uint },\n+        ))\n+    };\n+\n+    // Iterate over the slices, collecting the result\n+    let mut ret = 0;\n+    for (i, j) in a_slice.iter().zip(b_slice.iter()) {\n+        ret += (*i) * (*j);\n+    }\n+    return ret;\n+}\n+\n+#[lang = \"begin_unwind\"]\n+extern fn begin_unwind(args: &core::fmt::Arguments,\n+                       file: &str,\n+                       line: uint) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"stack_exhausted\"] extern fn stack_exhausted() {}\n+#[lang = \"eh_personality\"] extern fn eh_personality() {}\n+# #[start] fn start(argc: int, argv: **u8) -> int { 0 }\n+# fn main() {}\n+```\n+\n+Note that there is one extra lang item here which differs from the examples\n+above, `begin_unwind`. This must be defined by consumers of libcore because the\n+core library declares failure, but it does not define it. The `begin_unwind`\n+lang item is this crate's definition of failure, and it must be guaranteed to\n+never return.\n+\n+As can be seen in this example, the core library is intended to provide the\n+power of Rust in all circumstances, regardless of platform requirements. Further\n+libraries, such as liballoc, add functionality to libcore which make other\n+platform-specific assumptions, but continue to be more portable than the\n+standard library itself.\n \n # Interacting with the compiler internals\n \n@@ -512,6 +602,10 @@ libraries to interact directly with the compiler and vice versa:\n \n ## Intrinsics\n \n+> **Note**: intrinsics will forever have an unstable interface, it is\n+> recommended to use the stable interfaces of libcore rather than intrinsics\n+> directly.\n+\n These are imported as if they were FFI functions, with the special\n `rust-intrinsic` ABI. For example, if one was in a freestanding\n context, but wished to be able to `transmute` between types, and\n@@ -530,36 +624,33 @@ As with any other FFI functions, these are always `unsafe` to call.\n \n ## Lang items\n \n+> **Note**: lang items are often provided by crates in the Rust distribution,\n+> and lang items themselves have an unstable interface. It is recommended to use\n+> officially distributed crates instead of defining your own lang items.\n+\n The `rustc` compiler has certain pluggable operations, that is,\n functionality that isn't hard-coded into the language, but is\n implemented in libraries, with a special marker to tell the compiler\n it exists. The marker is the attribute `#[lang=\"...\"]` and there are\n various different values of `...`, i.e. various different \"lang\n items\".\n \n-For example, `~` pointers require two lang items, one for allocation\n-and one for deallocation. A freestanding program that uses the `~`\n+For example, `Box` pointers require two lang items, one for allocation\n+and one for deallocation. A freestanding program that uses the `Box`\n sugar for dynamic allocations via `malloc` and `free`:\n \n-```ignore\n-# // FIXME #12903: linking failures due to no_std\n+```\n #![no_std]\n \n-#[allow(ctypes)] // `uint` == `size_t` on Rust's platforms\n-extern {\n-    fn malloc(size: uint) -> *mut u8;\n-    fn free(ptr: *mut u8);\n+extern crate libc;\n \n+extern {\n     fn abort() -> !;\n }\n \n-#[no_mangle] pub extern fn rust_stack_exhausted() {\n-    unsafe { abort() }\n-}\n-\n #[lang=\"exchange_malloc\"]\n-unsafe fn allocate(size: uint) -> *mut u8 {\n-    let p = malloc(size);\n+unsafe fn allocate(size: uint, _align: uint) -> *mut u8 {\n+    let p = libc::malloc(size as libc::size_t) as *mut u8;\n \n     // malloc failed\n     if p as uint == 0 {\n@@ -569,18 +660,19 @@ unsafe fn allocate(size: uint) -> *mut u8 {\n     p\n }\n #[lang=\"exchange_free\"]\n-unsafe fn deallocate(ptr: *mut u8) {\n-    free(ptr)\n+unsafe fn deallocate(ptr: *mut u8, _size: uint, _align: uint) {\n+    libc::free(ptr as *mut libc::c_void)\n }\n \n #[start]\n-fn main(_argc: int, _argv: **u8) -> int {\n-    let _x = ~1;\n+fn main(argc: int, argv: **u8) -> int {\n+    let x = box 1;\n \n     0\n }\n \n-# // fn main() {} tricked you, rustdoc!\n+#[lang = \"stack_exhausted\"] extern fn stack_exhausted() {}\n+#[lang = \"eh_personality\"] extern fn eh_personality() {}\n ```\n \n Note the use of `abort`: the `exchange_malloc` lang item is assumed to\n@@ -602,6 +694,6 @@ Other features provided by lang items include:\n   `contravariant_lifetime`, `no_share_bound`, etc.\n \n Lang items are loaded lazily by the compiler; e.g. if one never uses\n-`~` then there is no need to define functions for `exchange_malloc`\n+`Box` then there is no need to define functions for `exchange_malloc`\n and `exchange_free`. `rustc` will emit an error when an item is needed\n but not found in the current crate or any that it depends on."}, {"sha": "a9df94d8138589afed13f599b659c9fe39440eac", "filename": "src/doc/not_found.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Fdoc%2Fnot_found.md", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Fdoc%2Fnot_found.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnot_found.md?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -13,8 +13,7 @@ Some things that might be helpful to you though:\n \n ## Reference\n * [The Rust official site](http://rust-lang.org)\n-* [The Rust reference manual](http://static.rust-lang.org/doc/master/rust.html) (* [PDF](http://static.rust-lang.org/doc/master/rust.pdf))\n+* [The Rust reference manual](http://doc.rust-lang.org/rust.html) (* [PDF](http://doc.rust-lang.org/rust.pdf))\n \n ## Docs\n-* [The standard library (stable)](http://doc.rust-lang.org/doc/0.10/std/index.html)\n-* [The standard library (master)](http://doc.rust-lang.org/doc/master/std/index.html)\n+* [The standard library](http://doc.rust-lang.org/std/)"}, {"sha": "d6cb782bd83bb8235148ba2dbfd1453f5e84880e", "filename": "src/doc/rustdoc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Fdoc%2Frustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Fdoc%2Frustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc.md?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -67,7 +67,7 @@ documentation:\n ~~~\n #[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n+      html_root_url = \"http://doc.rust-lang.org/\")];\n ~~~\n \n The `html_root_url` is the prefix that rustdoc will apply to any references to"}, {"sha": "7a0a166274282aea77e039c1437105e64257aad7", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -382,7 +382,7 @@ let y: uint = x as uint;\n assert!(y == 4u);\n ~~~~\n \n-[transmute]: http://static.rust-lang.org/doc/master/std/cast/fn.transmute.html\n+[transmute]: http://doc.rust-lang.org/std/mem/fn.transmute.html\n \n ## Syntax extensions\n \n@@ -409,7 +409,7 @@ println!(\"what is this thing: {:?}\", mystery_object);\n ~~~~\n \n [pf]: http://en.cppreference.com/w/cpp/io/c/fprintf\n-[fmt]: http://static.rust-lang.org/doc/master/std/fmt/index.html\n+[fmt]: http://doc.rust-lang.org/std/fmt/\n \n You can define your own syntax extensions with the macro system. For details,\n see the [macro tutorial][macros]. Note that macro definition is currently\n@@ -959,8 +959,8 @@ that are `Send`, but non-`Send` types can still *contain* types with custom\n destructors. Example of types which are not `Send` are [`Gc<T>`][gc] and\n [`Rc<T>`][rc], the shared-ownership types.\n \n-[gc]: http://static.rust-lang.org/doc/master/std/gc/struct.Gc.html\n-[rc]: http://static.rust-lang.org/doc/master/std/rc/struct.Rc.html\n+[gc]: http://doc.rust-lang.org/std/gc/struct.Gc.html\n+[rc]: http://doc.rust-lang.org/std/rc/struct.Rc.html\n \n # Implementing a linked list\n \n@@ -1486,7 +1486,7 @@ let mut x = 5;\n # x = 3;\n ~~~~\n \n-[refcell]: http://static.rust-lang.org/doc/master/std/cell/struct.RefCell.html\n+[refcell]: http://doc.rust-lang.org/std/cell/struct.RefCell.html\n \n # Dereferencing pointers\n "}, {"sha": "bf870e101eb86cc293416334f50c59b125cbf458", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -65,7 +65,7 @@\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![no_std]\n #![feature(phase)]"}, {"sha": "20c759e0c89291fa523eb6187313ea1ec7dbc573", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -25,7 +25,7 @@\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n #![allow(missing_doc)]\n \n extern crate collections;"}, {"sha": "4c5f55e53763c5480202e709df5eed07d4492ff4", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -18,7 +18,7 @@\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![feature(macro_rules, managed_boxes, default_type_params, phase)]\n "}, {"sha": "178ba9fa5b8fb3573a127feae88ef0f9ae022b7a", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -59,7 +59,7 @@ This `for` loop syntax can be applied to any iterator over any type.\n ## Iteration protocol and more\n \n More detailed information about iterators can be found in the [container\n-guide](http://static.rust-lang.org/doc/master/guide-container.html) with\n+guide](http://doc.rust-lang.org/guide-container.html) with\n the rest of the rust manuals.\n \n */"}, {"sha": "6de7e8bcacac5d13db9f82d8013762e99f8a0a7c", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -50,7 +50,7 @@\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![no_std]\n #![feature(globs, macro_rules, managed_boxes, phase)]"}, {"sha": "54f147dead8b68f02807ebaeb2c987e7b22b0acc", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -24,7 +24,7 @@ Simple [DEFLATE][def]-based compression. This is a wrapper around the\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n #![feature(phase)]\n #![deny(deprecated_owned_vector)]\n "}, {"sha": "194de7b2f4aee5a944950a6ae0a3daa411f5a56f", "filename": "src/libfourcc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibfourcc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibfourcc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfourcc%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -45,7 +45,7 @@ fn main() {\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![deny(deprecated_owned_vector)]\n #![feature(macro_registrar, managed_boxes)]"}, {"sha": "4f97a216ee21904b6bb4e10f76686364b68a8341", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -84,7 +84,7 @@\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n #![feature(globs, phase)]\n #![deny(missing_doc)]\n #![deny(deprecated_owned_vector)]"}, {"sha": "07b76afe2ad827429f7eec37ffeeafc1308bebef", "filename": "src/libglob/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibglob%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibglob%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibglob%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -29,7 +29,7 @@\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![deny(deprecated_owned_vector)]\n "}, {"sha": "4d86ab530f29d4b698251cdd118c13c1a6295072", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -272,7 +272,7 @@ pub fn main() {\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![experimental]\n "}, {"sha": "ddd958b3f341be4992e112ac28668fd5a6c8c9c3", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -203,7 +203,7 @@\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n \n // NB this does *not* include globs, please keep it that way.\n #![feature(macro_rules, phase)]"}, {"sha": "0e51d0a77701edb47ab7532fe4d5ba2780a6f8ed", "filename": "src/libhexfloat/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibhexfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibhexfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibhexfloat%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -42,7 +42,7 @@ fn main() {\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![deny(deprecated_owned_vector)]\n #![feature(macro_registrar, managed_boxes)]"}, {"sha": "fd05e54ad3ba1e221909171179acb99fdb479108", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -111,7 +111,7 @@ if logging is disabled, none of the components of the log will be executed.\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![feature(macro_rules)]\n #![deny(missing_doc, deprecated_owned_vector)]"}, {"sha": "d2d8ad06fdb469edb7319afaa8804d992dd9c686", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -47,7 +47,7 @@\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n #![deny(unused_result, unused_must_use)]\n #![allow(non_camel_case_types)]\n #![feature(macro_rules)]"}, {"sha": "d42c197cab79820ad24afbd8fd7496edd7d12317", "filename": "src/libnum/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibnum%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibnum%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -50,7 +50,7 @@\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![deny(deprecated_owned_vector)]\n "}, {"sha": "1c4132b961c4e1b44d1b2b0921a7095a731a3bbb", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -75,7 +75,7 @@ println!(\"{:?}\", tuple_ptr)\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![feature(macro_rules, managed_boxes, phase)]\n #![deny(deprecated_owned_vector)]"}, {"sha": "4cb51361f27fb9ef5a1b0effb5346db9a4fa6b5c", "filename": "src/libregex/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibregex%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibregex%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -359,7 +359,7 @@\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![feature(macro_rules, phase)]\n #![deny(missing_doc, deprecated_owned_vector)]"}, {"sha": "0b28ccbbd14387e3cfec5ca1881f9084c8e2c19b", "filename": "src/libregex_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibregex_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibregex_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex_macros%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -17,7 +17,7 @@\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![feature(macro_registrar, managed_boxes, quote)]\n "}, {"sha": "8c804d4d254e122d72663e2693b7e06ba8891dad", "filename": "src/librlibc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibrlibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibrlibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrlibc%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -25,7 +25,7 @@\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![no_std]\n #![experimental]"}, {"sha": "c870ee5e8f7acf4b2fa69d9d5ba4a635b9564529", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -42,7 +42,7 @@ pub fn main_args(args: &[StrBuf]) -> int {\n }\n \n static BUG_REPORT_URL: &'static str =\n-    \"http://static.rust-lang.org/doc/master/complement-bugreport.html\";\n+    \"http://doc.rust-lang.org/complement-bugreport.html\";\n \n fn run_compiler(args: &[StrBuf]) {\n     let matches = match handle_options(Vec::from_slice(args)) {"}, {"sha": "350dec767680163f60374a8b6930e54840484e02", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -25,7 +25,7 @@ This API is completely unstable and subject to change.\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+      html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![allow(deprecated)]\n #![feature(macro_rules, globs, struct_variant, managed_boxes, quote,"}, {"sha": "64619b636a33a5b22b72caaa21066bb645dfd85a", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -220,10 +220,10 @@ pub enum AutoRef {\n     /// Convert from T to &T\n     AutoPtr(Region, ast::Mutability),\n \n-    /// Convert from ~[]/&[] to &[] (or str)\n+    /// Convert from ~[]/&[] to &[] or str\n     AutoBorrowVec(Region, ast::Mutability),\n \n-    /// Convert from ~[]/&[] to &&[] (or str)\n+    /// Convert from ~[]/&[] to &&[] or str\n     AutoBorrowVecRef(Region, ast::Mutability),\n \n     /// Convert from T to *T"}, {"sha": "57a2ffee03a5b39c4c2e0b142f431e73c0f44390", "filename": "src/libsemver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibsemver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibsemver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsemver%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -34,7 +34,7 @@\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n #![deny(deprecated_owned_vector)]\n \n use std::char;"}, {"sha": "ce1d49406fbe59422fd8421f28d513a9eb9df266", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -20,7 +20,7 @@ Core encoding and decoding interfaces.\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n #![feature(macro_rules, managed_boxes, default_type_params, phase)]\n \n // test harness access"}, {"sha": "51cf2aabf55a52ddc4945686f604870e20fddd6f", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -32,7 +32,7 @@\n //!\n //! ## Pervasive types\n //!\n-//! The [`option`](option/index.html) and [`result`](result/index.html)\n+//! The [`option`](option/index.html) and [`result`](../core/result/index.html)\n //! modules define optional and error-handling types, `Option` and `Result`.\n //! [`iter`](../core/iter/index.html) defines Rust's iterator protocol\n //! along with a wide variety of iterators.\n@@ -102,7 +102,7 @@\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n #![feature(macro_rules, globs, asm, managed_boxes, thread_local, link_args,\n            simd, linkage, default_type_params, phase, concat_idents, quad_precision_float)]\n "}, {"sha": "e0cc57a4967feab4e17225ca08e4581c02d0c6a4", "filename": "src/libsync/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibsync%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibsync%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -18,7 +18,7 @@\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n #![feature(phase)]\n #![deny(deprecated_owned_vector)]\n "}, {"sha": "77c335b8936100b19486bc2e9061de0e3d3ff268", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -350,7 +350,7 @@ pub fn test_cfg<AM: AttrMetaMethods, It: Iterator<AM>>\n     no_cfgs || some_cfg_matches\n }\n \n-/// Represents the #[deprecated=\"foo\"] (etc) attributes.\n+/// Represents the #[deprecated=\"foo\"] and friends attributes.\n pub struct Stability {\n     pub level: StabilityLevel,\n     pub text: Option<InternedString>"}, {"sha": "4185458bfbe6197a2f296ffb0383d70ccc83b31a", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -22,7 +22,7 @@ pub fn expand_syntax_ext(ecx: &mut base::ExtCtxt,\n                          -> Box<base::MacResult> {\n     ecx.span_err(sp, \"`fmt!` is deprecated, use `format!` instead\");\n     ecx.parse_sess.span_diagnostic.span_note(sp,\n-        \"see http://static.rust-lang.org/doc/master/std/fmt/index.html \\\n+        \"see http://doc.rust-lang.org/std/fmt/ \\\n          for documentation\");\n \n     base::MacExpr::new(ecx.expr_uint(sp, 2))"}, {"sha": "52612bb4decd38a88e50dfb229bcd11134bab1d4", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -24,7 +24,7 @@ This API is completely unstable and subject to change.\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![feature(macro_rules, globs, managed_boxes, default_type_params, phase,\n            quote)]"}, {"sha": "d454ad08e4f0fe478020d1b5a32f245bb617654a", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -45,7 +45,7 @@\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![feature(macro_rules, phase)]\n "}, {"sha": "6bc49c5e4de2c05d1c439e26458131a11a547069", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -30,7 +30,7 @@\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![feature(asm, macro_rules, phase)]\n #![deny(deprecated_owned_vector)]"}, {"sha": "abc5bb6f7bfa1b393be6b15df09142b0756c98f2", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -17,7 +17,7 @@\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n #![feature(phase)]\n #![deny(deprecated_owned_vector)]\n "}, {"sha": "6ecde2897fee1d4cb6829e7102a4cd7130ffaed2", "filename": "src/liburl/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Fliburl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Fliburl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliburl%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -16,7 +16,7 @@\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n #![feature(default_type_params)]\n \n extern crate collections;"}, {"sha": "3398885c6fe7c6b18fd7b27c3898fa516493c96d", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -60,7 +60,7 @@ Examples of string representations:\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n \n #![feature(default_type_params)]\n "}, {"sha": "01f7ce9794fcb6c0cd341734a525f00f5c2f43b2", "filename": "src/libworkcache/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibworkcache%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0960a12239a473c2608e068824f565d6cd63966/src%2Flibworkcache%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibworkcache%2Flib.rs?ref=a0960a12239a473c2608e068824f565d6cd63966", "patch": "@@ -80,7 +80,7 @@\n #![license = \"MIT/ASL2\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n #![feature(phase)]\n #![allow(visible_private_types)]\n #![deny(deprecated_owned_vector)]"}]}