{"sha": "2d1bd57e60a141fc2a460539b69e228cc1d7010e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMWJkNTdlNjBhMTQxZmMyYTQ2MDUzOWI2OWUyMjhjYzFkNzAxMGU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-20T02:42:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-20T02:42:53Z"}, "message": "Rollup merge of #73027 - doctorn:issue-72690, r=estebank\n\nMake `need_type_info_err` more conservative\n\nMakes sure arg patterns we are going to suggest on are actually contained within the span of the obligation that caused the inference error (credit to @lcnr for suggesting this fix).\n\nThere's a subtle trade-off regarding the handling of local patterns which I've left a comment about.\n\nResolves #72690", "tree": {"sha": "0886921d20d9554cc8ef9f7e8256f7fe2b805721", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0886921d20d9554cc8ef9f7e8256f7fe2b805721"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d1bd57e60a141fc2a460539b69e228cc1d7010e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7XetCRBK7hj4Ov3rIwAAdHIIAD7xbQIl9rkIRXbPQo78PsHN\nia2BvkeDnH8xaj5hDRh7+h+W0cbw3DQHmm29Ab8+ni8XJrXEOu1ONFbRMEs8o930\nPMUenoO4gT2h9kGIAIbnttSJ9k7s2qecXikfqj3NE4O3kK7iGSzt7qmii+Oh8kJW\nr4nBvcx2Sw65dEgq1rwsTkMfQyPL6kU+I5LtdvU7HjZpEjUHu0X21UxR4OQaj1Nf\nAlLaN+0Bpco6dDhORlQdPLCXMcw/Zu7FLndbOzvmU5FnndtD7X3HGB1LYKb4cf3z\nQzwlKEjoUWbHSWwmpyXxVofp5SBLDRCeBf2YEhmelmzNFsz60H3B125jSU8IF/0=\n=qO4c\n-----END PGP SIGNATURE-----\n", "payload": "tree 0886921d20d9554cc8ef9f7e8256f7fe2b805721\nparent dac512e04aa7d670efa1f2f4258dc86a39b1e453\nparent b4ddd9183103586ba1456241b9c117a420bb6d6b\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592620973 -0700\ncommitter GitHub <noreply@github.com> 1592620973 -0700\n\nRollup merge of #73027 - doctorn:issue-72690, r=estebank\n\nMake `need_type_info_err` more conservative\n\nMakes sure arg patterns we are going to suggest on are actually contained within the span of the obligation that caused the inference error (credit to @lcnr for suggesting this fix).\n\nThere's a subtle trade-off regarding the handling of local patterns which I've left a comment about.\n\nResolves #72690\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1bd57e60a141fc2a460539b69e228cc1d7010e", "html_url": "https://github.com/rust-lang/rust/commit/2d1bd57e60a141fc2a460539b69e228cc1d7010e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d1bd57e60a141fc2a460539b69e228cc1d7010e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dac512e04aa7d670efa1f2f4258dc86a39b1e453", "url": "https://api.github.com/repos/rust-lang/rust/commits/dac512e04aa7d670efa1f2f4258dc86a39b1e453", "html_url": "https://github.com/rust-lang/rust/commit/dac512e04aa7d670efa1f2f4258dc86a39b1e453"}, {"sha": "b4ddd9183103586ba1456241b9c117a420bb6d6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4ddd9183103586ba1456241b9c117a420bb6d6b", "html_url": "https://github.com/rust-lang/rust/commit/b4ddd9183103586ba1456241b9c117a420bb6d6b"}], "stats": {"total": 188, "additions": 178, "deletions": 10}, "files": [{"sha": "1687bcc1556367900976f3ce64074720feceabba", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2d1bd57e60a141fc2a460539b69e228cc1d7010e/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1bd57e60a141fc2a460539b69e228cc1d7010e/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=2d1bd57e60a141fc2a460539b69e228cc1d7010e", "patch": "@@ -88,6 +88,17 @@ impl<'a, 'tcx> Visitor<'tcx> for FindHirNodeVisitor<'a, 'tcx> {\n         if let (None, Some(ty)) =\n             (self.found_local_pattern, self.node_ty_contains_target(local.hir_id))\n         {\n+            // FIXME: There's a trade-off here - we can either check that our target span\n+            // is contained in `local.span` or not. If we choose to check containment\n+            // we can avoid some spurious suggestions (see #72690), but we lose\n+            // the ability to report on things like:\n+            //\n+            // ```\n+            // let x = vec![];\n+            // ```\n+            //\n+            // because the target span will be in the macro expansion of `vec![]`.\n+            // At present we choose not to check containment.\n             self.found_local_pattern = Some(&*local.pat);\n             self.found_node_ty = Some(ty);\n         }\n@@ -99,8 +110,10 @@ impl<'a, 'tcx> Visitor<'tcx> for FindHirNodeVisitor<'a, 'tcx> {\n             if let (None, Some(ty)) =\n                 (self.found_arg_pattern, self.node_ty_contains_target(param.hir_id))\n             {\n-                self.found_arg_pattern = Some(&*param.pat);\n-                self.found_node_ty = Some(ty);\n+                if self.target_span.contains(param.pat.span) {\n+                    self.found_arg_pattern = Some(&*param.pat);\n+                    self.found_node_ty = Some(ty);\n+                }\n             }\n         }\n         intravisit::walk_body(self, body);"}, {"sha": "0c6d11cd3211d836dc09577f9cafd085225cefb1", "filename": "src/test/ui/closure-expected-type/expect-two-infer-vars-supply-ty-with-bound-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d1bd57e60a141fc2a460539b69e228cc1d7010e/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d1bd57e60a141fc2a460539b69e228cc1d7010e/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr?ref=2d1bd57e60a141fc2a460539b69e228cc1d7010e", "patch": "@@ -1,8 +1,8 @@\n error[E0282]: type annotations needed\n-  --> $DIR/expect-two-infer-vars-supply-ty-with-bound-region.rs:8:27\n+  --> $DIR/expect-two-infer-vars-supply-ty-with-bound-region.rs:8:5\n    |\n LL |     with_closure(|x: u32, y| {});\n-   |                           ^ consider giving this closure parameter a type\n+   |     ^^^^^^^^^^^^ cannot infer type for type parameter `B` declared on the function `with_closure`\n \n error: aborting due to previous error\n "}, {"sha": "75be4a11efd22dab804500b0d60b17bdf48468df", "filename": "src/test/ui/issues/issue-23046.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d1bd57e60a141fc2a460539b69e228cc1d7010e/src%2Ftest%2Fui%2Fissues%2Fissue-23046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1bd57e60a141fc2a460539b69e228cc1d7010e/src%2Ftest%2Fui%2Fissues%2Fissue-23046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23046.rs?ref=2d1bd57e60a141fc2a460539b69e228cc1d7010e", "patch": "@@ -14,7 +14,7 @@ pub fn let_<'var, VAR, F: for<'v> Fn(Expr<'v, VAR>) -> Expr<'v, VAR>>\n }\n \n fn main() {\n-    let ex = |x| { //~ ERROR type annotations needed\n-        let_(add(x,x), |y| {\n+    let ex = |x| {\n+        let_(add(x,x), |y| { //~ ERROR type annotations needed\n             let_(add(x, x), |x|x)})};\n }"}, {"sha": "77555fce7c460bbff07b074bb9884dca84521ce2", "filename": "src/test/ui/issues/issue-23046.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2d1bd57e60a141fc2a460539b69e228cc1d7010e/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d1bd57e60a141fc2a460539b69e228cc1d7010e/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr?ref=2d1bd57e60a141fc2a460539b69e228cc1d7010e", "patch": "@@ -1,8 +1,13 @@\n-error[E0282]: type annotations needed for `Expr<'_, VAR>`\n-  --> $DIR/issue-23046.rs:17:15\n+error[E0282]: type annotations needed for the closure `fn(Expr<'_, _>) -> Expr<'_, _>`\n+  --> $DIR/issue-23046.rs:18:9\n    |\n-LL |     let ex = |x| {\n-   |               ^ consider giving this closure parameter the explicit type `Expr<'_, VAR>`, where the type parameter `VAR` is specified\n+LL |         let_(add(x,x), |y| {\n+   |         ^^^^ cannot infer type for type parameter `VAR` declared on the function `let_`\n+   |\n+help: give this closure an explicit return type without `_` placeholders\n+   |\n+LL |             let_(add(x, x), |x|-> Expr<'_, _> { x })})};\n+   |                                ^^^^^^^^^^^^^^^^   ^\n \n error: aborting due to previous error\n "}, {"sha": "4edbd9ca15de7d5bac3031f745d3e39fe2a07893", "filename": "src/test/ui/issues/issue-72690.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/2d1bd57e60a141fc2a460539b69e228cc1d7010e/src%2Ftest%2Fui%2Fissues%2Fissue-72690.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d1bd57e60a141fc2a460539b69e228cc1d7010e/src%2Ftest%2Fui%2Fissues%2Fissue-72690.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72690.rs?ref=2d1bd57e60a141fc2a460539b69e228cc1d7010e", "patch": "@@ -0,0 +1,62 @@\n+fn no_err() {\n+    |x: String| x;\n+    let _ = String::from(\"x\");\n+}\n+\n+fn err() {\n+    String::from(\"x\".as_ref()); //~ ERROR type annotations needed\n+}\n+\n+fn arg_pat_closure_err() {\n+    |x| String::from(\"x\".as_ref()); //~ ERROR type annotations needed\n+}\n+\n+fn local_pat_closure_err() {\n+    let _ = \"x\".as_ref(); //~ ERROR type annotations needed\n+}\n+\n+fn err_first_arg_pat() {\n+    String::from(\"x\".as_ref()); //~ ERROR type annotations needed\n+    |x: String| x;\n+}\n+\n+fn err_second_arg_pat() {\n+    |x: String| x;\n+    String::from(\"x\".as_ref()); //~ ERROR type annotations needed\n+}\n+\n+fn err_mid_arg_pat() {\n+    |x: String| x;\n+    |x: String| x;\n+    |x: String| x;\n+    |x: String| x;\n+    String::from(\"x\".as_ref()); //~ ERROR type annotations needed\n+    |x: String| x;\n+    |x: String| x;\n+    |x: String| x;\n+    |x: String| x;\n+}\n+\n+fn err_first_local_pat() {\n+    String::from(\"x\".as_ref()); //~ ERROR type annotations needed\n+    let _ = String::from(\"x\");\n+}\n+\n+fn err_second_local_pat() {\n+    let _ = String::from(\"x\");\n+    String::from(\"x\".as_ref()); //~ ERROR type annotations needed\n+}\n+\n+fn err_mid_local_pat() {\n+    let _ = String::from(\"x\");\n+    let _ = String::from(\"x\");\n+    let _ = String::from(\"x\");\n+    let _ = String::from(\"x\");\n+    String::from(\"x\".as_ref()); //~ ERROR type annotations needed\n+    let _ = String::from(\"x\");\n+    let _ = String::from(\"x\");\n+    let _ = String::from(\"x\");\n+    let _ = String::from(\"x\");\n+}\n+\n+fn main() {}"}, {"sha": "64e78ddf60474b5f844723e4593dc6d2c5b2aa9b", "filename": "src/test/ui/issues/issue-72690.stderr", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/2d1bd57e60a141fc2a460539b69e228cc1d7010e/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d1bd57e60a141fc2a460539b69e228cc1d7010e/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72690.stderr?ref=2d1bd57e60a141fc2a460539b69e228cc1d7010e", "patch": "@@ -0,0 +1,88 @@\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-72690.rs:7:5\n+   |\n+LL |     String::from(\"x\".as_ref());\n+   |     ^^^^^^^^^^^^ cannot infer type for struct `std::string::String`\n+   |\n+   = note: cannot satisfy `std::string::String: std::convert::From<&_>`\n+   = note: required by `std::convert::From::from`\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-72690.rs:11:6\n+   |\n+LL |     |x| String::from(\"x\".as_ref());\n+   |      ^ consider giving this closure parameter a type\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-72690.rs:15:17\n+   |\n+LL |     let _ = \"x\".as_ref();\n+   |                 ^^^^^^ cannot infer type for type `str`\n+   |\n+   = note: cannot satisfy `str: std::convert::AsRef<_>`\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-72690.rs:19:5\n+   |\n+LL |     String::from(\"x\".as_ref());\n+   |     ^^^^^^^^^^^^ cannot infer type for struct `std::string::String`\n+   |\n+   = note: cannot satisfy `std::string::String: std::convert::From<&_>`\n+   = note: required by `std::convert::From::from`\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-72690.rs:25:5\n+   |\n+LL |     String::from(\"x\".as_ref());\n+   |     ^^^^^^^^^^^^ cannot infer type for struct `std::string::String`\n+   |\n+   = note: cannot satisfy `std::string::String: std::convert::From<&_>`\n+   = note: required by `std::convert::From::from`\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-72690.rs:33:5\n+   |\n+LL |     String::from(\"x\".as_ref());\n+   |     ^^^^^^^^^^^^ cannot infer type for struct `std::string::String`\n+   |\n+   = note: cannot satisfy `std::string::String: std::convert::From<&_>`\n+   = note: required by `std::convert::From::from`\n+\n+error[E0283]: type annotations needed for `std::string::String`\n+  --> $DIR/issue-72690.rs:41:5\n+   |\n+LL |     String::from(\"x\".as_ref());\n+   |     ^^^^^^^^^^^^ cannot infer type for struct `std::string::String`\n+LL |     let _ = String::from(\"x\");\n+   |         - consider giving this pattern a type\n+   |\n+   = note: cannot satisfy `std::string::String: std::convert::From<&_>`\n+   = note: required by `std::convert::From::from`\n+\n+error[E0283]: type annotations needed for `std::string::String`\n+  --> $DIR/issue-72690.rs:47:5\n+   |\n+LL |     let _ = String::from(\"x\");\n+   |         - consider giving this pattern a type\n+LL |     String::from(\"x\".as_ref());\n+   |     ^^^^^^^^^^^^ cannot infer type for struct `std::string::String`\n+   |\n+   = note: cannot satisfy `std::string::String: std::convert::From<&_>`\n+   = note: required by `std::convert::From::from`\n+\n+error[E0283]: type annotations needed for `std::string::String`\n+  --> $DIR/issue-72690.rs:55:5\n+   |\n+LL |     let _ = String::from(\"x\");\n+   |         - consider giving this pattern a type\n+...\n+LL |     String::from(\"x\".as_ref());\n+   |     ^^^^^^^^^^^^ cannot infer type for struct `std::string::String`\n+   |\n+   = note: cannot satisfy `std::string::String: std::convert::From<&_>`\n+   = note: required by `std::convert::From::from`\n+\n+error: aborting due to 9 previous errors\n+\n+Some errors have detailed explanations: E0282, E0283.\n+For more information about an error, try `rustc --explain E0282`."}]}