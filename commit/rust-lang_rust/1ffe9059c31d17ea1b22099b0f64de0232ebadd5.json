{"sha": "1ffe9059c31d17ea1b22099b0f64de0232ebadd5", "node_id": "C_kwDOAAsO6NoAKDFmZmU5MDU5YzMxZDE3ZWExYjIyMDk5YjBmNjRkZTAyMzJlYmFkZDU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-28T16:57:40Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-04T21:51:44Z"}, "message": "Reject borrows of projections in ConstProp.", "tree": {"sha": "8d83e17c2fb766e01967e6e09f849405edb7b934", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d83e17c2fb766e01967e6e09f849405edb7b934"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ffe9059c31d17ea1b22099b0f64de0232ebadd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ffe9059c31d17ea1b22099b0f64de0232ebadd5", "html_url": "https://github.com/rust-lang/rust/commit/1ffe9059c31d17ea1b22099b0f64de0232ebadd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ffe9059c31d17ea1b22099b0f64de0232ebadd5/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2caebc4a61a39e6e618129f312bc4be174fb7be", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2caebc4a61a39e6e618129f312bc4be174fb7be", "html_url": "https://github.com/rust-lang/rust/commit/e2caebc4a61a39e6e618129f312bc4be174fb7be"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "7f995c69a4879cbbf47780f9e0c4902ae7c6f11f", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1ffe9059c31d17ea1b22099b0f64de0232ebadd5/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ffe9059c31d17ea1b22099b0f64de0232ebadd5/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=1ffe9059c31d17ea1b22099b0f64de0232ebadd5", "patch": "@@ -714,13 +714,22 @@ impl CanConstProp {\n     }\n }\n \n-impl Visitor<'_> for CanConstProp {\n+impl<'tcx> Visitor<'tcx> for CanConstProp {\n+    fn visit_place(&mut self, place: &Place<'tcx>, mut context: PlaceContext, loc: Location) {\n+        use rustc_middle::mir::visit::PlaceContext::*;\n+\n+        // Dereferencing just read the addess of `place.local`.\n+        if place.projection.first() == Some(&PlaceElem::Deref) {\n+            context = NonMutatingUse(NonMutatingUseContext::Copy);\n+        }\n+\n+        self.visit_local(place.local, context, loc);\n+        self.visit_projection(place.as_ref(), context, loc);\n+    }\n+\n     fn visit_local(&mut self, local: Local, context: PlaceContext, _: Location) {\n         use rustc_middle::mir::visit::PlaceContext::*;\n         match context {\n-            // Projections are fine, because `&mut foo.x` will be caught by\n-            // `MutatingUseContext::Borrow` elsewhere.\n-            MutatingUse(MutatingUseContext::Projection)\n             // These are just stores, where the storing is not propagatable, but there may be later\n             // mutations of the same local via `Store`\n             | MutatingUse(MutatingUseContext::Call)\n@@ -751,7 +760,6 @@ impl Visitor<'_> for CanConstProp {\n             NonMutatingUse(NonMutatingUseContext::Copy)\n             | NonMutatingUse(NonMutatingUseContext::Move)\n             | NonMutatingUse(NonMutatingUseContext::Inspect)\n-            | NonMutatingUse(NonMutatingUseContext::Projection)\n             | NonMutatingUse(NonMutatingUseContext::PlaceMention)\n             | NonUse(_) => {}\n \n@@ -771,6 +779,8 @@ impl Visitor<'_> for CanConstProp {\n                 trace!(\"local {:?} can't be propagated because it's used: {:?}\", local, context);\n                 self.can_const_prop[local] = ConstPropMode::NoPropagation;\n             }\n+            MutatingUse(MutatingUseContext::Projection)\n+            | NonMutatingUse(NonMutatingUseContext::Projection) => bug!(\"visit_place should not pass {context:?} for {local:?}\"),\n         }\n     }\n }"}, {"sha": "d50b12044ceb27d332433d28b2dc4c9d37dde23c", "filename": "tests/mir-opt/const_prop/address_of_pair.fn0.ConstProp.diff", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1ffe9059c31d17ea1b22099b0f64de0232ebadd5/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.fn0.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1ffe9059c31d17ea1b22099b0f64de0232ebadd5/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.fn0.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Faddress_of_pair.fn0.ConstProp.diff?ref=1ffe9059c31d17ea1b22099b0f64de0232ebadd5", "patch": "@@ -23,25 +23,20 @@\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/address_of_pair.rs:+1:9: +1:17\n--         _2 = (const 1_i32, const false); // scope 0 at $DIR/address_of_pair.rs:+1:20: +1:30\n-+         _2 = const (1_i32, false);       // scope 0 at $DIR/address_of_pair.rs:+1:20: +1:30\n+          _2 = (const 1_i32, const false); // scope 0 at $DIR/address_of_pair.rs:+1:20: +1:30\n           StorageLive(_3);                 // scope 1 at $DIR/address_of_pair.rs:+2:9: +2:12\n           _3 = &raw mut (_2.1: bool);      // scope 1 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n--         _2 = (const 1_i32, const false); // scope 2 at $DIR/address_of_pair.rs:+3:5: +3:22\n-+         _2 = const (1_i32, false);       // scope 2 at $DIR/address_of_pair.rs:+3:5: +3:22\n+          _2 = (const 1_i32, const false); // scope 2 at $DIR/address_of_pair.rs:+3:5: +3:22\n           StorageLive(_4);                 // scope 2 at $DIR/address_of_pair.rs:+4:5: +6:6\n           (*_3) = const true;              // scope 3 at $DIR/address_of_pair.rs:+5:9: +5:20\n           _4 = const ();                   // scope 3 at $DIR/address_of_pair.rs:+4:5: +6:6\n           StorageDead(_4);                 // scope 2 at $DIR/address_of_pair.rs:+6:5: +6:6\n           StorageLive(_5);                 // scope 2 at $DIR/address_of_pair.rs:+7:9: +7:12\n           StorageLive(_6);                 // scope 2 at $DIR/address_of_pair.rs:+7:16: +7:22\n--         _6 = (_2.1: bool);               // scope 2 at $DIR/address_of_pair.rs:+7:16: +7:22\n--         _5 = Not(move _6);               // scope 2 at $DIR/address_of_pair.rs:+7:15: +7:22\n-+         _6 = const false;                // scope 2 at $DIR/address_of_pair.rs:+7:16: +7:22\n-+         _5 = const true;                 // scope 2 at $DIR/address_of_pair.rs:+7:15: +7:22\n+          _6 = (_2.1: bool);               // scope 2 at $DIR/address_of_pair.rs:+7:16: +7:22\n+          _5 = Not(move _6);               // scope 2 at $DIR/address_of_pair.rs:+7:15: +7:22\n           StorageDead(_6);                 // scope 2 at $DIR/address_of_pair.rs:+7:21: +7:22\n--         _0 = _5;                         // scope 4 at $DIR/address_of_pair.rs:+8:12: +8:15\n-+         _0 = const true;                 // scope 4 at $DIR/address_of_pair.rs:+8:12: +8:15\n+          _0 = _5;                         // scope 4 at $DIR/address_of_pair.rs:+8:12: +8:15\n           StorageDead(_5);                 // scope 2 at $DIR/address_of_pair.rs:+9:1: +9:2\n           StorageDead(_3);                 // scope 1 at $DIR/address_of_pair.rs:+9:1: +9:2\n           StorageDead(_2);                 // scope 0 at $DIR/address_of_pair.rs:+9:1: +9:2"}, {"sha": "a5f52d08957c8fb2bcd507b8edea6d68b488c534", "filename": "tests/mir-opt/const_prop_miscompile.bar.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ffe9059c31d17ea1b22099b0f64de0232ebadd5/tests%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1ffe9059c31d17ea1b22099b0f64de0232ebadd5/tests%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff?ref=1ffe9059c31d17ea1b22099b0f64de0232ebadd5", "patch": "@@ -19,8 +19,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n--         _1 = (const 1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n-+         _1 = const (1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n+          _1 = (const 1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n           StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:+2:5: +4:6\n           StorageLive(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:+3:10: +3:22\n           _3 = &raw mut (_1.0: i32);       // scope 2 at $DIR/const_prop_miscompile.rs:+3:10: +3:22"}, {"sha": "42ddc2a56208a82e57a2eb289186c65e4ee82012", "filename": "tests/mir-opt/const_prop_miscompile.foo.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ffe9059c31d17ea1b22099b0f64de0232ebadd5/tests%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1ffe9059c31d17ea1b22099b0f64de0232ebadd5/tests%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff?ref=1ffe9059c31d17ea1b22099b0f64de0232ebadd5", "patch": "@@ -16,8 +16,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:+1:9: +1:14\n--         _1 = (const 1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n-+         _1 = const (1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n+          _1 = (const 1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:+1:17: +1:21\n           StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:+2:6: +2:14\n           _2 = &mut (_1.0: i32);           // scope 1 at $DIR/const_prop_miscompile.rs:+2:6: +2:14\n           (*_2) = const 5_i32;             // scope 1 at $DIR/const_prop_miscompile.rs:+2:5: +2:18"}]}