{"sha": "7889373730343f9f7cebc5d649907a3003692280", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ODkzNzM3MzAzNDNmOWY3Y2ViYzVkNjQ5OTA3YTMwMDM2OTIyODA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-02T08:36:56Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-09-09T12:38:34Z"}, "message": "make as_leaf return a raw pointer, to reduce aliasing assumptions", "tree": {"sha": "a254d2053209785d1d0ae4f16deeb39dcd06db59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a254d2053209785d1d0ae4f16deeb39dcd06db59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7889373730343f9f7cebc5d649907a3003692280", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7889373730343f9f7cebc5d649907a3003692280", "html_url": "https://github.com/rust-lang/rust/commit/7889373730343f9f7cebc5d649907a3003692280", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7889373730343f9f7cebc5d649907a3003692280/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f76eda3f01ba8e9714b579dc3e563ee973ade83d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f76eda3f01ba8e9714b579dc3e563ee973ade83d", "html_url": "https://github.com/rust-lang/rust/commit/f76eda3f01ba8e9714b579dc3e563ee973ade83d"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "ce4a7e1bdd7da32aa3c1ec1f25b40f7c90611565", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7889373730343f9f7cebc5d649907a3003692280/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7889373730343f9f7cebc5d649907a3003692280/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=7889373730343f9f7cebc5d649907a3003692280", "patch": "@@ -316,7 +316,9 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n     /// Note that, despite being safe, calling this function can have the side effect\n     /// of invalidating mutable references that unsafe code has created.\n     pub fn len(&self) -> usize {\n-        self.as_leaf().len as usize\n+        // Crucially, we only access the `len` field here. There might be outstanding mutable references\n+        // to keys/values that we must not invalidate.\n+        unsafe { (*self.as_leaf()).len as usize }\n     }\n \n     /// Returns the height of this node in the whole tree. Zero height denotes the\n@@ -334,11 +336,14 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n     /// If the node is a leaf, this function simply opens up its data.\n     /// If the node is an internal node, so not a leaf, it does have all the data a leaf has\n     /// (header, keys and values), and this function exposes that.\n-    fn as_leaf(&self) -> &LeafNode<K, V> {\n+    ///\n+    /// Returns a raw ptr to avoid invalidating other references to this node\n+    /// (such as during iteration).\n+    fn as_leaf(&self) -> *const LeafNode<K, V> {\n         // The node must be valid for at least the LeafNode portion.\n         // This is not a reference in the NodeRef type because we don't know if\n         // it should be unique or shared.\n-        unsafe { self.node.as_ref() }\n+        self.node.as_ptr()\n     }\n \n     /// Borrows a view into the keys stored in the node.\n@@ -361,7 +366,7 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n     pub fn ascend(\n         self,\n     ) -> Result<Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>, Self> {\n-        let parent_as_leaf = self.as_leaf().parent as *const LeafNode<K, V>;\n+        let parent_as_leaf = unsafe { (*self.as_leaf()).parent as *const LeafNode<K, V> };\n         if let Some(non_zero) = NonNull::new(parent_as_leaf as *mut _) {\n             Ok(Handle {\n                 node: NodeRef {\n@@ -370,7 +375,7 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n                     root: self.root,\n                     _marker: PhantomData,\n                 },\n-                idx: unsafe { usize::from(*self.as_leaf().parent_idx.as_ptr()) },\n+                idx: unsafe { usize::from(*(*self.as_leaf()).parent_idx.as_ptr()) },\n                 _marker: PhantomData,\n             })\n         } else {\n@@ -475,13 +480,13 @@ impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {\n impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {\n     fn into_key_slice(self) -> &'a [K] {\n         unsafe {\n-            slice::from_raw_parts(MaybeUninit::slice_as_ptr(&self.as_leaf().keys), self.len())\n+            slice::from_raw_parts(MaybeUninit::slice_as_ptr(&(*self.as_leaf()).keys), self.len())\n         }\n     }\n \n     fn into_val_slice(self) -> &'a [V] {\n         unsafe {\n-            slice::from_raw_parts(MaybeUninit::slice_as_ptr(&self.as_leaf().vals), self.len())\n+            slice::from_raw_parts(MaybeUninit::slice_as_ptr(&(*self.as_leaf()).vals), self.len())\n         }\n     }\n }"}]}