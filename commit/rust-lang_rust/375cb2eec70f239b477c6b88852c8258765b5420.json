{"sha": "375cb2eec70f239b477c6b88852c8258765b5420", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NWNiMmVlYzcwZjIzOWI0NzdjNmI4ODg1MmM4MjU4NzY1YjU0MjA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-18T16:01:04Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-24T19:56:02Z"}, "message": "Improve some expected/found error messages from parser", "tree": {"sha": "66f238cc9c9ba00e7f7e146e80731a2588deb4ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66f238cc9c9ba00e7f7e146e80731a2588deb4ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/375cb2eec70f239b477c6b88852c8258765b5420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/375cb2eec70f239b477c6b88852c8258765b5420", "html_url": "https://github.com/rust-lang/rust/commit/375cb2eec70f239b477c6b88852c8258765b5420", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/375cb2eec70f239b477c6b88852c8258765b5420/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8f5047430aa78c2d1ff30b5960cdbde24daab84", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f5047430aa78c2d1ff30b5960cdbde24daab84", "html_url": "https://github.com/rust-lang/rust/commit/a8f5047430aa78c2d1ff30b5960cdbde24daab84"}], "stats": {"total": 82, "additions": 61, "deletions": 21}, "files": [{"sha": "939f126640d99f1e6fb799b58e155ce22ee36ac6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 49, "deletions": 12, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/375cb2eec70f239b477c6b88852c8258765b5420/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375cb2eec70f239b477c6b88852c8258765b5420/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=375cb2eec70f239b477c6b88852c8258765b5420", "patch": "@@ -192,14 +192,22 @@ pub enum TokenType {\n     Token(token::Token),\n     Keyword(keywords::Keyword),\n     Operator,\n+    Lifetime,\n+    Ident,\n+    Path,\n+    Type,\n }\n \n impl TokenType {\n     fn to_string(&self) -> String {\n         match *self {\n             TokenType::Token(ref t) => format!(\"`{}`\", Parser::token_to_string(t)),\n-            TokenType::Operator => \"an operator\".to_string(),\n             TokenType::Keyword(kw) => format!(\"`{}`\", kw.name()),\n+            TokenType::Operator => \"an operator\".to_string(),\n+            TokenType::Lifetime => \"lifetime\".to_string(),\n+            TokenType::Ident => \"identifier\".to_string(),\n+            TokenType::Path => \"path\".to_string(),\n+            TokenType::Type => \"type\".to_string(),\n         }\n     }\n }\n@@ -552,6 +560,33 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    fn check_ident(&mut self) -> bool {\n+        if self.token.is_ident() {\n+            true\n+        } else {\n+            self.expected_tokens.push(TokenType::Ident);\n+            false\n+        }\n+    }\n+\n+    fn check_path(&mut self) -> bool {\n+        if self.token.is_path_start() {\n+            true\n+        } else {\n+            self.expected_tokens.push(TokenType::Path);\n+            false\n+        }\n+    }\n+\n+    fn check_type(&mut self) -> bool {\n+        if self.token.can_begin_type() {\n+            true\n+        } else {\n+            self.expected_tokens.push(TokenType::Type);\n+            false\n+        }\n+    }\n+\n     /// Expect and consume an `&`. If `&&` is seen, replace it with a single\n     /// `&` and continue. If an `&` is not seen, signal an error.\n     fn expect_and(&mut self) -> PResult<'a, ()> {\n@@ -1802,7 +1837,10 @@ impl<'a> Parser<'a> {\n                     name: ident.name\n                 })\n             }\n-            _ => None\n+            _ => {\n+                self.expected_tokens.push(TokenType::Lifetime);\n+                None\n+            }\n         }\n     }\n \n@@ -3953,7 +3991,7 @@ impl<'a> Parser<'a> {\n                                   \"`?` may only modify trait bounds, not lifetime bounds\");\n                 }\n                 bounds.push(RegionTyParamBound(lifetime));\n-            } else if self.token.is_keyword(keywords::For) || self.token.is_path_start() {\n+            } else {if self.check_keyword(keywords::For) || self.check_path() {\n                 let poly_trait_ref = self.parse_poly_trait_ref()?;\n                 let modifier = if question.is_some() {\n                     TraitBoundModifier::Maybe\n@@ -3963,7 +4001,7 @@ impl<'a> Parser<'a> {\n                 bounds.push(TraitTyParamBound(poly_trait_ref, modifier));\n             } else {\n                 break\n-            }\n+            }}\n \n             // Trailing plus is not allowed for now and we have to detect it.\n             let is_bound_start = |token: &token::Token| {\n@@ -4047,7 +4085,7 @@ impl<'a> Parser<'a> {\n                     self.span_err(self.prev_span,\n                         \"lifetime parameters must be declared prior to type parameters\");\n                 }\n-            } else if self.token.is_ident() {\n+            } else {if self.check_ident() {\n                 // Parse type parameter.\n                 ty_params.push(self.parse_ty_param(attrs)?);\n                 seen_ty_param = true;\n@@ -4059,7 +4097,7 @@ impl<'a> Parser<'a> {\n                         &format!(\"trailing attribute after {} parameters\", param_kind));\n                 }\n                 break\n-            }\n+            }}\n \n             if !self.eat(&token::Comma) {\n                 break\n@@ -4105,15 +4143,14 @@ impl<'a> Parser<'a> {\n         let mut seen_type = false;\n         let mut seen_binding = false;\n         loop {\n-            let eq_is_next = self.look_ahead(1, |t| t == &token::Eq); // borrowck workaround\n             if let Some(lifetime) = self.eat_lifetime() {\n                 // Parse lifetime argument.\n                 lifetimes.push(lifetime);\n                 if seen_type || seen_binding {\n                     self.span_err(self.prev_span,\n                         \"lifetime parameters must be declared prior to type parameters\");\n                 }\n-            } else if self.token.is_ident() && eq_is_next {\n+            } else {if self.check_ident() && self.look_ahead(1, |t| t == &token::Eq) {\n                 // Parse associated type binding.\n                 let lo = self.span.lo;\n                 let ident = self.parse_ident()?;\n@@ -4126,7 +4163,7 @@ impl<'a> Parser<'a> {\n                     span: mk_sp(lo, self.prev_span.hi),\n                 });\n                 seen_binding = true;\n-            } else if self.token.can_begin_type() {\n+            } else if self.check_type() {\n                 // Parse type argument.\n                 types.push(self.parse_ty()?);\n                 if seen_binding {\n@@ -4136,7 +4173,7 @@ impl<'a> Parser<'a> {\n                 seen_type = true;\n             } else {\n                 break\n-            }\n+            }}\n \n             if !self.eat(&token::Comma) {\n                 break\n@@ -4192,7 +4229,7 @@ impl<'a> Parser<'a> {\n                         bounds: bounds,\n                     }\n                 ));\n-            } else if self.token.can_begin_type() {\n+            } else {if self.check_type() {\n                 // Parse optional `for<'a, 'b>`.\n                 // This `for` is parsed greedily and applies to the whole predicate,\n                 // the bounded type can have its own `for` applying only to it.\n@@ -4230,7 +4267,7 @@ impl<'a> Parser<'a> {\n                 }\n             } else {\n                 break\n-            }\n+            }}\n \n             if !self.eat(&token::Comma) {\n                 break"}, {"sha": "e5ed46d2cb3b01c575be7f351eae779f0ce94d6d", "filename": "src/test/compile-fail/issue-20616-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/375cb2eec70f239b477c6b88852c8258765b5420/src%2Ftest%2Fcompile-fail%2Fissue-20616-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375cb2eec70f239b477c6b88852c8258765b5420/src%2Ftest%2Fcompile-fail%2Fissue-20616-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-3.rs?ref=375cb2eec70f239b477c6b88852c8258765b5420", "patch": "@@ -22,7 +22,7 @@ type Type_1_<'a, T> = &'a T;\n //type Type_2 = Type_1_<'static ()>; // error: expected `,` or `>` after lifetime name, found `(`\n \n \n-type Type_3<T> = Box<T,,>; //~ error: expected `>`, found `,`\n+type Type_3<T> = Box<T,,>; //~ error: expected one of `>`, identifier, lifetime, or type, found `,`\n \n \n //type Type_4<T> = Type_1_<'static,, T>; // error: expected type, found `,`"}, {"sha": "9b731289e138bd17aa845f7977fda72cbf40f508", "filename": "src/test/compile-fail/issue-20616-4.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/375cb2eec70f239b477c6b88852c8258765b5420/src%2Ftest%2Fcompile-fail%2Fissue-20616-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375cb2eec70f239b477c6b88852c8258765b5420/src%2Ftest%2Fcompile-fail%2Fissue-20616-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-4.rs?ref=375cb2eec70f239b477c6b88852c8258765b5420", "patch": "@@ -25,7 +25,8 @@ type Type_1_<'a, T> = &'a T;\n //type Type_3<T> = Box<T,,>; // error: expected type, found `,`\n \n \n-type Type_4<T> = Type_1_<'static,, T>; //~ error: expected `>`, found `,`\n+type Type_4<T> = Type_1_<'static,, T>;\n+//~^ error: expected one of `>`, identifier, lifetime, or type, found `,`\n \n \n type Type_5_<'a> = Type_1_<'a, ()>;"}, {"sha": "5e3b024da9a075c86f4726cd3e9cecff732857e8", "filename": "src/test/compile-fail/issue-20616-5.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/375cb2eec70f239b477c6b88852c8258765b5420/src%2Ftest%2Fcompile-fail%2Fissue-20616-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375cb2eec70f239b477c6b88852c8258765b5420/src%2Ftest%2Fcompile-fail%2Fissue-20616-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-5.rs?ref=375cb2eec70f239b477c6b88852c8258765b5420", "patch": "@@ -31,7 +31,8 @@ type Type_1_<'a, T> = &'a T;\n type Type_5_<'a> = Type_1_<'a, ()>;\n \n \n-type Type_5<'a> = Type_1_<'a, (),,>; //~ error: expected `>`, found `,`\n+type Type_5<'a> = Type_1_<'a, (),,>;\n+//~^ error: expected one of `>`, identifier, lifetime, or type, found `,`\n \n \n //type Type_6 = Type_5_<'a,,>; // error: expected type, found `,`"}, {"sha": "b6ee26f9f62b88a87be7445a4f779c1f10af3b99", "filename": "src/test/compile-fail/issue-20616-6.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/375cb2eec70f239b477c6b88852c8258765b5420/src%2Ftest%2Fcompile-fail%2Fissue-20616-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375cb2eec70f239b477c6b88852c8258765b5420/src%2Ftest%2Fcompile-fail%2Fissue-20616-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-6.rs?ref=375cb2eec70f239b477c6b88852c8258765b5420", "patch": "@@ -34,7 +34,8 @@ type Type_5_<'a> = Type_1_<'a, ()>;\n //type Type_5<'a> = Type_1_<'a, (),,>; // error: expected type, found `,`\n \n \n-type Type_6 = Type_5_<'a,,>; //~ error: expected `>`, found `,`\n+type Type_6 = Type_5_<'a,,>;\n+//~^ error: expected one of `>`, identifier, lifetime, or type, found `,`\n \n \n //type Type_7 = Box<(),,>; // error: expected type, found `,`"}, {"sha": "fef3dd4e31d5ad787e6beb68815ccc307055e1bf", "filename": "src/test/compile-fail/issue-20616-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/375cb2eec70f239b477c6b88852c8258765b5420/src%2Ftest%2Fcompile-fail%2Fissue-20616-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375cb2eec70f239b477c6b88852c8258765b5420/src%2Ftest%2Fcompile-fail%2Fissue-20616-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-7.rs?ref=375cb2eec70f239b477c6b88852c8258765b5420", "patch": "@@ -37,7 +37,7 @@ type Type_5_<'a> = Type_1_<'a, ()>;\n //type Type_6 = Type_5_<'a,,>; // error: expected type, found `,`\n \n \n-type Type_7 = Box<(),,>; //~ error: expected `>`, found `,`\n+type Type_7 = Box<(),,>; //~ error: expected one of `>`, identifier, lifetime, or type, found `,`\n \n \n //type Type_8<'a,,> = &'a (); // error: expected ident, found `,`"}, {"sha": "b7bef47c4f4425bed0f00262cb6b6bf602036ef2", "filename": "src/test/compile-fail/issue-20616-8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/375cb2eec70f239b477c6b88852c8258765b5420/src%2Ftest%2Fcompile-fail%2Fissue-20616-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375cb2eec70f239b477c6b88852c8258765b5420/src%2Ftest%2Fcompile-fail%2Fissue-20616-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-8.rs?ref=375cb2eec70f239b477c6b88852c8258765b5420", "patch": "@@ -40,7 +40,7 @@ type Type_5_<'a> = Type_1_<'a, ()>;\n //type Type_7 = Box<(),,>; // error: expected type, found `,`\n \n \n-type Type_8<'a,,> = &'a (); //~ error: expected `>`, found `,`\n+type Type_8<'a,,> = &'a (); //~ error: expected one of `>`, identifier, or lifetime, found `,`\n \n \n //type Type_9<T,,> = Box<T>; // error: expected identifier, found `,`"}, {"sha": "5c16d24cef854e1ac2a458a313a85916f0e44ba9", "filename": "src/test/compile-fail/issue-20616-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/375cb2eec70f239b477c6b88852c8258765b5420/src%2Ftest%2Fcompile-fail%2Fissue-20616-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375cb2eec70f239b477c6b88852c8258765b5420/src%2Ftest%2Fcompile-fail%2Fissue-20616-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-9.rs?ref=375cb2eec70f239b477c6b88852c8258765b5420", "patch": "@@ -43,4 +43,4 @@ type Type_5_<'a> = Type_1_<'a, ()>;\n //type Type_8<'a,,> = &'a (); // error: expected identifier, found `,`\n \n \n-type Type_9<T,,> = Box<T>; //~ error: expected `>`, found `,`\n+type Type_9<T,,> = Box<T>; //~ error: expected one of `>`, identifier, or lifetime, found `,`"}, {"sha": "e04431598156c8febff8ac6672e3c31df4746a7e", "filename": "src/test/parse-fail/bounds-lifetime-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/375cb2eec70f239b477c6b88852c8258765b5420/src%2Ftest%2Fparse-fail%2Fbounds-lifetime-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375cb2eec70f239b477c6b88852c8258765b5420/src%2Ftest%2Fparse-fail%2Fbounds-lifetime-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbounds-lifetime-3.rs?ref=375cb2eec70f239b477c6b88852c8258765b5420", "patch": "@@ -10,6 +10,6 @@\n \n // compile-flags: -Z parse-only\n \n-type A = for<,> fn(); //~ ERROR expected `>`, found `,`\n+type A = for<,> fn(); //~ ERROR expected one of `>`, identifier, or lifetime, found `,`\n \n fn main() {}"}, {"sha": "ffcacdf357df5abd00b60d8c1a689f062aea9136", "filename": "src/test/parse-fail/bounds-lifetime-where-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/375cb2eec70f239b477c6b88852c8258765b5420/src%2Ftest%2Fparse-fail%2Fbounds-lifetime-where-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375cb2eec70f239b477c6b88852c8258765b5420/src%2Ftest%2Fparse-fail%2Fbounds-lifetime-where-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbounds-lifetime-where-2.rs?ref=375cb2eec70f239b477c6b88852c8258765b5420", "patch": "@@ -10,6 +10,6 @@\n \n // compile-flags: -Z parse-only\n \n-type A where , = u8; //~ ERROR expected `=`, found `,`\n+type A where , = u8; //~ ERROR expected one of `=`, lifetime, or type, found `,`\n \n fn main() {}"}]}