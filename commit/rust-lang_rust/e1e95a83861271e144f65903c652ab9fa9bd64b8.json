{"sha": "e1e95a83861271e144f65903c652ab9fa9bd64b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZTk1YTgzODYxMjcxZTE0NGY2NTkwM2M2NTJhYjlmYTliZDY0Yjg=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-06-26T23:50:20Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-06-26T23:50:20Z"}, "message": "Use force_bits when casting from a pointer", "tree": {"sha": "d1ca907b68beec93d85aef0a75a9e9b7ede6dccf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1ca907b68beec93d85aef0a75a9e9b7ede6dccf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1e95a83861271e144f65903c652ab9fa9bd64b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1e95a83861271e144f65903c652ab9fa9bd64b8", "html_url": "https://github.com/rust-lang/rust/commit/e1e95a83861271e144f65903c652ab9fa9bd64b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1e95a83861271e144f65903c652ab9fa9bd64b8/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3e2cec29225a46298ec4ebf082f34ebd7cfeecf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e2cec29225a46298ec4ebf082f34ebd7cfeecf", "html_url": "https://github.com/rust-lang/rust/commit/d3e2cec29225a46298ec4ebf082f34ebd7cfeecf"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "bd012d4c2bf57ecc08f12630bfd59f366f232c52", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e1e95a83861271e144f65903c652ab9fa9bd64b8/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e95a83861271e144f65903c652ab9fa9bd64b8/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=e1e95a83861271e144f65903c652ab9fa9bd64b8", "patch": "@@ -242,14 +242,31 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n         ty: Ty<'tcx>\n     ) -> InterpResult<'tcx, Scalar<M::PointerTag>> {\n         use rustc::ty::TyKind::*;\n-        match ty.sty {\n+\n+        let size = match ty.sty {\n             // Casting to a reference or fn pointer is not permitted by rustc,\n             // no need to support it here.\n-            RawPtr(_) |\n-            Int(IntTy::Isize) |\n-            Uint(UintTy::Usize) => Ok(ptr.into()),\n-            Int(_) | Uint(_) => err!(ReadPointerAsBytes),\n-            _ => err!(Unimplemented(format!(\"ptr to {:?} cast\", ty))),\n+            RawPtr(_) => return Ok(ptr.into()),\n+            Int(IntTy::Isize) | Uint(UintTy::Usize) => {\n+                let size = self.memory.pointer_size();\n+                if let Ok(bits) = self.force_bits(Scalar::Ptr(ptr), size) {\n+                    return Ok(Scalar::from_uint(bits, size));\n+                } \n+                return Ok(ptr.into());\n+            }\n+            // If the target type is a sized integer, we need the its size to perform the pointer cast\n+            Int(i) => i.bit_width().unwrap(),\n+            Uint(i) => i.bit_width().unwrap(),\n+            // Casting to any other type is not implemented\n+            _ => return err!(Unimplemented(format!(\"ptr to {:?} cast\", ty))),\n+        };\n+\n+        let size = Size::from_bits(size as u64);\n+\n+        if let Ok(bits) = self.force_bits(Scalar::Ptr(ptr), size) {\n+            Ok(Scalar::from_uint(bits, size))\n+        } else {\n+            err!(ReadPointerAsBytes)\n         }\n     }\n "}]}