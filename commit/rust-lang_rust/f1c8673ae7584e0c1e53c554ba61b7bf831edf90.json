{"sha": "f1c8673ae7584e0c1e53c554ba61b7bf831edf90", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYzg2NzNhZTc1ODRlMGMxZTUzYzU1NGJhNjFiN2JmODMxZWRmOTA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-27T10:47:26Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-27T16:22:45Z"}, "message": "Fix issues with git converting CRLF to CR\n\nUI tests now run on asmjs-unknown-emscripten, ignore tests with inline assembly which is not supported on emscripten targets", "tree": {"sha": "9a19bf143838f64ebc2ae04c14443b53e75be740", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a19bf143838f64ebc2ae04c14443b53e75be740"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1c8673ae7584e0c1e53c554ba61b7bf831edf90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1c8673ae7584e0c1e53c554ba61b7bf831edf90", "html_url": "https://github.com/rust-lang/rust/commit/f1c8673ae7584e0c1e53c554ba61b7bf831edf90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42a317a1cd53a0324427a61aee98c17be350df3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/42a317a1cd53a0324427a61aee98c17be350df3b", "html_url": "https://github.com/rust-lang/rust/commit/42a317a1cd53a0324427a61aee98c17be350df3b"}], "stats": {"total": 112, "additions": 63, "deletions": 49}, "files": [{"sha": "b62ade73aa993cd778a1a9356ddfbcbd63b5f3e1", "filename": "src/test/ui/.gitattributes", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2F.gitattributes", "raw_url": "https://github.com/rust-lang/rust/raw/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2F.gitattributes", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2F.gitattributes?ref=f1c8673ae7584e0c1e53c554ba61b7bf831edf90", "patch": "@@ -1 +1,2 @@\n-trailing-carriage-return-in-string.rs -text\n\\ No newline at end of file\n+lexer-crlf-line-endings-string-literal-doc-comment.rs -text\n+trailing-carriage-return-in-string.rs -text"}, {"sha": "2440e3a446eb4777442afac2136bda5b95a37880", "filename": "src/test/ui/error-codes/E0661.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs?ref=f1c8673ae7584e0c1e53c554ba61b7bf831edf90", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n #![feature(asm)]\n \n fn main() {"}, {"sha": "58f7e7fa0f919222fdae9ffb3ef9072843e19dbb", "filename": "src/test/ui/error-codes/E0661.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr?ref=f1c8673ae7584e0c1e53c554ba61b7bf831edf90", "patch": "@@ -1,5 +1,5 @@\n error[E0661]: output operand constraint lacks '=' or '+'\n-  --> $DIR/E0661.rs:5:18\n+  --> $DIR/E0661.rs:7:18\n    |\n LL |     asm!(\"nop\" : \"r\"(a));\n    |                  ^^^"}, {"sha": "343ed27f83f7e7a125ba9d893a044a7685b5c8eb", "filename": "src/test/ui/error-codes/E0662.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0662.rs?ref=f1c8673ae7584e0c1e53c554ba61b7bf831edf90", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n #![feature(asm)]\n \n fn main() {"}, {"sha": "3b2f7632f39c2650b2276670e1d6f9c53f5e39d7", "filename": "src/test/ui/error-codes/E0662.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0662.stderr?ref=f1c8673ae7584e0c1e53c554ba61b7bf831edf90", "patch": "@@ -1,5 +1,5 @@\n error[E0662]: input operand constraint contains '='\n-  --> $DIR/E0662.rs:6:12\n+  --> $DIR/E0662.rs:8:12\n    |\n LL |          : \"=test\"(\"a\")\n    |            ^^^^^^^"}, {"sha": "cfbb4b37758cecac211b3b6e21981a96326d80da", "filename": "src/test/ui/error-codes/E0663.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0663.rs?ref=f1c8673ae7584e0c1e53c554ba61b7bf831edf90", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n #![feature(asm)]\n \n fn main() {"}, {"sha": "4ac0a85f26dc61ae96efda88d6365987d13d25d5", "filename": "src/test/ui/error-codes/E0663.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0663.stderr?ref=f1c8673ae7584e0c1e53c554ba61b7bf831edf90", "patch": "@@ -1,5 +1,5 @@\n error[E0663]: input operand constraint contains '+'\n-  --> $DIR/E0663.rs:6:12\n+  --> $DIR/E0663.rs:8:12\n    |\n LL |          : \"+test\"(\"a\")\n    |            ^^^^^^^"}, {"sha": "fe70c9f96e06d85e7848269005019696476f576c", "filename": "src/test/ui/error-codes/E0664.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0664.rs?ref=f1c8673ae7584e0c1e53c554ba61b7bf831edf90", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n #![feature(asm)]\n \n fn main() {"}, {"sha": "435e465920bc23e01f08548794c7feeeae5fa4bd", "filename": "src/test/ui/error-codes/E0664.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0664.stderr?ref=f1c8673ae7584e0c1e53c554ba61b7bf831edf90", "patch": "@@ -1,5 +1,5 @@\n error[E0664]: clobber should not be surrounded by braces\n-  --> $DIR/E0664.rs:7:12\n+  --> $DIR/E0664.rs:9:12\n    |\n LL |          : \"{eax}\"\n    |            ^^^^^^^"}, {"sha": "1fce279c9ef3dc6886bdc520510f8f2ca3c32c0a", "filename": "src/test/ui/feature-gates/feature-gate-asm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs?ref=f1c8673ae7584e0c1e53c554ba61b7bf831edf90", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n fn main() {\n     unsafe {\n         asm!(\"\"); //~ ERROR inline assembly is not stable enough"}, {"sha": "bfa4c87bed53aaa86f0fa0a55ebb8f211099c728", "filename": "src/test/ui/feature-gates/feature-gate-asm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr?ref=f1c8673ae7584e0c1e53c554ba61b7bf831edf90", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: use of unstable library feature 'asm': inline assembly is not stable enough for use and is subject to change\n-  --> $DIR/feature-gate-asm.rs:3:9\n+  --> $DIR/feature-gate-asm.rs:5:9\n    |\n LL |         asm!(\"\");\n    |         ^^^"}, {"sha": "82900eb7e6c47dfdc6c789101f7354c6bed15571", "filename": "src/test/ui/feature-gates/feature-gate-asm2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs?ref=f1c8673ae7584e0c1e53c554ba61b7bf831edf90", "patch": "@@ -1,4 +1,5 @@\n // gate-test-asm\n+// ignore-emscripten\n \n fn main() {\n     unsafe {"}, {"sha": "e985818f30e5fe0a5b423d96a20a88b58cb39cda", "filename": "src/test/ui/feature-gates/feature-gate-asm2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr?ref=f1c8673ae7584e0c1e53c554ba61b7bf831edf90", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: use of unstable library feature 'asm': inline assembly is not stable enough for use and is subject to change\n-  --> $DIR/feature-gate-asm2.rs:5:26\n+  --> $DIR/feature-gate-asm2.rs:6:26\n    |\n LL |         println!(\"{:?}\", asm!(\"\"));\n    |                          ^^^"}, {"sha": "09e8d55c06b8e5e409c6acc2a0470f7627f3af02", "filename": "src/test/ui/issues/issue-53787-inline-assembler-macro.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.rs?ref=f1c8673ae7584e0c1e53c554ba61b7bf831edf90", "patch": "@@ -1,5 +1,7 @@\n // Regression test for Issue #53787: Fix ICE when creating a label in inline assembler with macros.\n \n+// ignore-emscripten\n+\n #![feature(asm)]\n \n macro_rules! fake_jump {"}, {"sha": "6a4416d78f3cfde9c322547ed631d8fe49382cf7", "filename": "src/test/ui/issues/issue-53787-inline-assembler-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.stderr?ref=f1c8673ae7584e0c1e53c554ba61b7bf831edf90", "patch": "@@ -1,5 +1,5 @@\n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/issue-53787-inline-assembler-macro.rs:21:16\n+  --> $DIR/issue-53787-inline-assembler-macro.rs:23:16\n    |\n LL |     fake_jump!(\"FirstFunc\");\n    |                ^^^^^^^^^^^"}, {"sha": "ada253aacfb906c15801110bc29a66b8a6fca9e1", "filename": "src/test/ui/lexer-crlf-line-endings-string-literal-doc-comment.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Flexer-crlf-line-endings-string-literal-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1c8673ae7584e0c1e53c554ba61b7bf831edf90/src%2Ftest%2Fui%2Flexer-crlf-line-endings-string-literal-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexer-crlf-line-endings-string-literal-doc-comment.rs?ref=f1c8673ae7584e0c1e53c554ba61b7bf831edf90", "patch": "@@ -1,41 +1,41 @@\n-// run-pass\n-// ignore-tidy-cr ignore-license\n-// ignore-tidy-cr (repeated again because of tidy bug)\n-// license is ignored because tidy can't handle the CRLF here properly.\n-\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-\n-// N.B., this file needs CRLF line endings. The .gitattributes file in\n-// this directory should enforce it.\n-\n-// ignore-pretty issue #37195\n-\n-/// Doc comment that ends in CRLF\n-pub fn foo() {}\n-\n-/** Block doc comment that\n- *  contains CRLF characters\n- */\n-pub fn bar() {}\n-\n-fn main() {\n-    let s = \"string\n-literal\";\n-    assert_eq!(s, \"string\\nliteral\");\n-\n-    let s = \"literal with \\\n-             escaped newline\";\n-    assert_eq!(s, \"literal with escaped newline\");\n-\n-    let s = r\"string\n-literal\";\n-    assert_eq!(s, \"string\\nliteral\");\n-    let s = br\"byte string\n-literal\";\n-    assert_eq!(s, \"byte string\\nliteral\".as_bytes());\n-\n-    // validate that our source file has CRLF endings\n-    let source = include_str!(\"lexer-crlf-line-endings-string-literal-doc-comment.rs\");\n-    assert!(source.contains(\"string\\r\\nliteral\"));\n-}\n+// run-pass\r\n+// ignore-tidy-cr ignore-license\r\n+// ignore-tidy-cr (repeated again because of tidy bug)\r\n+// license is ignored because tidy can't handle the CRLF here properly.\r\n+\r\n+// http://rust-lang.org/COPYRIGHT.\r\n+//\r\n+\r\n+// N.B., this file needs CRLF line endings. The .gitattributes file in\r\n+// this directory should enforce it.\r\n+\r\n+// ignore-pretty issue #37195\r\n+\r\n+/// Doc comment that ends in CRLF\r\n+pub fn foo() {}\r\n+\r\n+/** Block doc comment that\r\n+ *  contains CRLF characters\r\n+ */\r\n+pub fn bar() {}\r\n+\r\n+fn main() {\r\n+    let s = \"string\r\n+literal\";\r\n+    assert_eq!(s, \"string\\nliteral\");\r\n+\r\n+    let s = \"literal with \\\r\n+             escaped newline\";\r\n+    assert_eq!(s, \"literal with escaped newline\");\r\n+\r\n+    let s = r\"string\r\n+literal\";\r\n+    assert_eq!(s, \"string\\nliteral\");\r\n+    let s = br\"byte string\r\n+literal\";\r\n+    assert_eq!(s, \"byte string\\nliteral\".as_bytes());\r\n+\r\n+    // validate that our source file has CRLF endings\r\n+    let source = include_str!(\"lexer-crlf-line-endings-string-literal-doc-comment.rs\");\r\n+    assert!(source.contains(\"string\\r\\nliteral\"));\r\n+}\r"}]}