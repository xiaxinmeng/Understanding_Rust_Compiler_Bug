{"sha": "1c3e95e0a5d4bfc06d15a52b322567a83c948f72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjM2U5NWUwYTVkNGJmYzA2ZDE1YTUyYjMyMjU2N2E4M2M5NDhmNzI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-18T18:31:31Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-18T18:31:31Z"}, "message": "Roll back the expr->lval change. We're now LL(1) again.", "tree": {"sha": "77cc196fe7db2799d0297db78977771cbee42ade", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77cc196fe7db2799d0297db78977771cbee42ade"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c3e95e0a5d4bfc06d15a52b322567a83c948f72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c3e95e0a5d4bfc06d15a52b322567a83c948f72", "html_url": "https://github.com/rust-lang/rust/commit/1c3e95e0a5d4bfc06d15a52b322567a83c948f72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c3e95e0a5d4bfc06d15a52b322567a83c948f72/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0", "html_url": "https://github.com/rust-lang/rust/commit/57c7e94c8f8d456c1737bd7dd2bf5c6962003cd0"}], "stats": {"total": 167, "additions": 39, "deletions": 128}, "files": [{"sha": "a33373f4305b9a4f06ec75ce2e8e3b5c2c254e8c", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c3e95e0a5d4bfc06d15a52b322567a83c948f72/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3e95e0a5d4bfc06d15a52b322567a83c948f72/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=1c3e95e0a5d4bfc06d15a52b322567a83c948f72", "patch": "@@ -90,15 +90,10 @@ tag expr_ {\n     expr_cast(@expr, @ty);\n     expr_if(@expr, block, option[block]);\n     expr_block(block);\n-    expr_assign(@lval, @expr);\n-    expr_lval(@lval);\n-}\n-\n-type lval = spanned[lval_];\n-tag lval_ {\n-    lval_field(@expr, ident);\n-    lval_index(@expr, @expr);\n-    lval_name(name, option[referent]);\n+    expr_assign(@expr /* TODO: @expr : is_lval(@expr) */, @expr);\n+    expr_field(@expr, ident);\n+    expr_index(@expr, @expr);\n+    expr_name(name, option[referent]);\n }\n \n type lit = spanned[lit_];"}, {"sha": "9393a02f07c94de7851f8b74a284fe4c45fd6e5f", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 3, "deletions": 50, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/1c3e95e0a5d4bfc06d15a52b322567a83c948f72/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3e95e0a5d4bfc06d15a52b322567a83c948f72/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=1c3e95e0a5d4bfc06d15a52b322567a83c948f72", "patch": "@@ -227,43 +227,6 @@ io fn parse_name(parser p, ast.ident id) -> ast.name {\n     ret spanned(lo, tys.span, rec(ident=id, types=tys.node));\n }\n \n-/** Parses any field or index selectors. */\n-io fn parse_selectors(parser p, @ast.expr ex) -> @ast.expr {\n-    if (p.peek() == token.DOT) {\n-        auto lo = p.get_span();\n-        p.bump();\n-\n-        alt (p.peek()) {\n-            case (token.LPAREN) {\n-                p.bump();\n-\n-                auto idx = parse_expr(p);\n-                expect(p, token.RPAREN);\n-\n-                auto hi = p.get_span();\n-                auto lval = @spanned(lo, hi, ast.lval_index(ex, idx));\n-                auto lval_ex = @spanned(lo, hi, ast.expr_lval(lval));\n-                ret parse_selectors(p, lval_ex);\n-            }\n-\n-            case (token.IDENT(?ident)) {\n-                p.bump();\n-\n-                auto hi = p.get_span();\n-                auto lval = @spanned(lo, hi, ast.lval_field(ex, ident));\n-                auto lval_ex = @spanned(lo, hi, ast.expr_lval(lval));\n-                ret parse_selectors(p, lval_ex);\n-            }\n-\n-            case (_) {\n-                p.err(\"expecting '(' or field name after identifier\");\n-            }\n-        }\n-    }\n-\n-    ret ex;\n-}\n-\n io fn parse_possibly_mutable_expr(parser p) -> tup(bool, @ast.expr) {\n     auto mut;\n     if (p.peek() == token.MUTABLE) {\n@@ -335,14 +298,6 @@ io fn parse_bottom_expr(parser p) -> @ast.expr {\n             ex = ast.expr_rec(es.node);\n         }\n \n-        case (token.IDENT(?i)) {\n-            auto n = parse_name(p, i);\n-            hi = p.get_span();\n-            auto lval = ast.lval_name(n, none[ast.referent]);\n-            auto lval_sp = @spanned(lo, hi, lval);\n-            ex = ast.expr_lval(lval_sp);\n-        }\n-\n         case (_) {\n             alt (parse_lit(p)) {\n                 case (some[ast.lit](?lit)) {\n@@ -356,7 +311,7 @@ io fn parse_bottom_expr(parser p) -> @ast.expr {\n         }\n     }\n \n-    ret parse_selectors(p, @spanned(lo, hi, ex));\n+    ret @spanned(lo, hi, ex);\n }\n \n io fn parse_path_expr(parser p) -> @ast.expr {\n@@ -372,15 +327,13 @@ io fn parse_path_expr(parser p) -> @ast.expr {\n                     case (token.IDENT(?i)) {\n                         hi = p.get_span();\n                         p.bump();\n-                        auto lv = @spanned(lo, hi, ast.lval_field(e, i));\n-                        e = @spanned(lo, hi, ast.expr_lval(lv));\n+                        e = @spanned(lo, hi, ast.expr_field(e, i));\n                     }\n \n                     case (token.LPAREN) {\n                         auto ix = parse_bottom_expr(p);\n                         hi = ix.span;\n-                        auto lv = @spanned(lo, hi, ast.lval_index(e, ix));\n-                        e = @spanned(lo, hi, ast.expr_lval(lv));\n+                        e = @spanned(lo, hi, ast.expr_index(e, ix));\n                     }\n                 }\n             }"}, {"sha": "f8c058ff35dd5bb3405c0a7ac6a969358bf73fca", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 32, "deletions": 69, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/1c3e95e0a5d4bfc06d15a52b322567a83c948f72/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c3e95e0a5d4bfc06d15a52b322567a83c948f72/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=1c3e95e0a5d4bfc06d15a52b322567a83c948f72", "patch": "@@ -14,7 +14,6 @@ import front.ast.name;\n import front.ast.path;\n import front.ast.ty;\n import front.ast.expr;\n-import front.ast.lval;\n import front.ast.stmt;\n import front.ast.block;\n import front.ast.item;\n@@ -78,21 +77,17 @@ type ast_fold[ENV] =\n          block blk) -> @expr)                     fold_expr_block,\n \n      (fn(&ENV e, &span sp,\n-         @lval lhs, @expr rhs) -> @expr)          fold_expr_assign,\n+         @expr lhs, @expr rhs) -> @expr)          fold_expr_assign,\n \n      (fn(&ENV e, &span sp,\n-         @lval lv) -> @expr)                      fold_expr_lval,\n+         @expr e, ident i) -> @expr)              fold_expr_field,\n \n-     // Lvalue folds.\n      (fn(&ENV e, &span sp,\n-         @expr e, ident i) -> @lval)              fold_lval_field,\n-\n-     (fn(&ENV e, &span sp,\n-         @expr e, @expr ix) -> @lval)             fold_lval_index,\n+         @expr e, @expr ix) -> @expr)             fold_expr_index,\n \n      (fn(&ENV e, &span sp,\n          &name n,\n-         &option[referent] r) -> @lval)           fold_lval_name,\n+         &option[referent] r) -> @expr)           fold_expr_name,\n \n      // Decl folds.\n      (fn(&ENV e, &span sp,\n@@ -143,7 +138,6 @@ type ast_fold[ENV] =\n      (fn(&ENV e, @item i) -> ENV) update_env_for_item,\n      (fn(&ENV e, @stmt s) -> ENV) update_env_for_stmt,\n      (fn(&ENV e, @decl i) -> ENV) update_env_for_decl,\n-     (fn(&ENV e, @lval l) -> ENV) update_env_for_lval,\n      (fn(&ENV e, @expr x) -> ENV) update_env_for_expr,\n      (fn(&ENV e, @ty t) -> ENV) update_env_for_ty,\n \n@@ -244,34 +238,6 @@ fn fold_decl[ENV](&ENV env, ast_fold[ENV] fld, @decl d) -> @decl {\n     fail;\n }\n \n-fn fold_lval[ENV](&ENV env, ast_fold[ENV] fld, @lval lv) -> @lval {\n-    let ENV env_ = fld.update_env_for_lval(env, lv);\n-\n-    if (!fld.keep_going(env_)) {\n-        ret lv;\n-    }\n-\n-    alt (lv.node) {\n-        case (ast.lval_field(?e, ?i)) {\n-            auto ee = fold_expr(env_, fld, e);\n-            ret fld.fold_lval_field(env_, lv.span, ee, i);\n-        }\n-\n-        case (ast.lval_index(?e, ?ix)) {\n-            auto ee = fold_expr(env_, fld, e);\n-            auto iix = fold_expr(env_, fld, ix);\n-            ret fld.fold_lval_index(env_, lv.span, ee, iix);\n-        }\n-\n-        case (ast.lval_name(?n, ?r)) {\n-            auto n_ = fold_name(env_, fld, n);\n-            ret fld.fold_lval_name(env_, lv.span, n, r);\n-        }\n-    }\n-\n-    fail;   // shoudn't be reached\n-}\n-\n // FIXME: Weird bug. Due to the way we auto-deref + in +=, we can't append a\n // boxed value to a vector-of-boxes using +=.  Best to figure out a way to fix\n // this. Deref-on-demand or something? It's a hazard of the ambiguity between\n@@ -367,14 +333,25 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n         }\n \n         case (ast.expr_assign(?lhs, ?rhs)) {\n-            auto llhs = fold_lval(env_, fld, lhs);\n+            auto llhs = fold_expr(env_, fld, lhs);\n             auto rrhs = fold_expr(env_, fld, rhs);\n             ret fld.fold_expr_assign(env_, e.span, llhs, rrhs);\n         }\n \n-        case (ast.expr_lval(?lv)) {\n-            auto llv = fold_lval(env_, fld, lv);\n-            ret fld.fold_expr_lval(env_, e.span, llv);\n+        case (ast.expr_field(?e, ?i)) {\n+            auto ee = fold_expr(env_, fld, e);\n+            ret fld.fold_expr_field(env_, e.span, ee, i);\n+        }\n+\n+        case (ast.expr_index(?e, ?ix)) {\n+            auto ee = fold_expr(env_, fld, e);\n+            auto iix = fold_expr(env_, fld, ix);\n+            ret fld.fold_expr_index(env_, e.span, ee, iix);\n+        }\n+\n+        case (ast.expr_name(?n, ?r)) {\n+            auto n_ = fold_name(env_, fld, n);\n+            ret fld.fold_expr_name(env_, e.span, n, r);\n         }\n     }\n \n@@ -604,30 +581,23 @@ fn identity_fold_expr_block[ENV](&ENV env, &span sp, block blk) -> @expr {\n }\n \n fn identity_fold_expr_assign[ENV](&ENV env, &span sp,\n-                                  @lval lhs, @expr rhs) -> @expr {\n+                                  @expr lhs, @expr rhs) -> @expr {\n     ret @respan(sp, ast.expr_assign(lhs, rhs));\n }\n \n-fn identity_fold_expr_lval[ENV](&ENV env, &span sp, @lval lv) -> @expr {\n-    ret @respan(sp, ast.expr_lval(lv));\n-}\n-\n-\n-// Lvalue identities.\n-\n-fn identity_fold_lval_field[ENV](&ENV env, &span sp,\n-                                 @expr e, ident i) -> @lval {\n-    ret @respan(sp, ast.lval_field(e, i));\n+fn identity_fold_expr_field[ENV](&ENV env, &span sp,\n+                                 @expr e, ident i) -> @expr {\n+    ret @respan(sp, ast.expr_field(e, i));\n }\n \n-fn identity_fold_lval_index[ENV](&ENV env, &span sp,\n-                                 @expr e, @expr ix) -> @lval {\n-    ret @respan(sp, ast.lval_index(e, ix));\n+fn identity_fold_expr_index[ENV](&ENV env, &span sp,\n+                                 @expr e, @expr ix) -> @expr {\n+    ret @respan(sp, ast.expr_index(e, ix));\n }\n \n-fn identity_fold_lval_name[ENV](&ENV env, &span sp,\n-                                &name n, &option[referent] r) -> @lval {\n-    ret @respan(sp, ast.lval_name(n, r));\n+fn identity_fold_expr_name[ENV](&ENV env, &span sp,\n+                                &name n, &option[referent] r) -> @expr {\n+    ret @respan(sp, ast.expr_name(n, r));\n }\n \n \n@@ -722,10 +692,6 @@ fn identity_update_env_for_decl[ENV](&ENV e, @decl d) -> ENV {\n     ret e;\n }\n \n-fn identity_update_env_for_lval[ENV](&ENV e, @lval l) -> ENV {\n-    ret e;\n-}\n-\n fn identity_update_env_for_expr[ENV](&ENV e, @expr x) -> ENV {\n     ret e;\n }\n@@ -769,11 +735,9 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_expr_if     = bind identity_fold_expr_if[ENV](_,_,_,_,_),\n          fold_expr_block  = bind identity_fold_expr_block[ENV](_,_,_),\n          fold_expr_assign = bind identity_fold_expr_assign[ENV](_,_,_,_),\n-         fold_expr_lval   = bind identity_fold_expr_lval[ENV](_,_,_),\n-\n-         fold_lval_field  = bind identity_fold_lval_field[ENV](_,_,_,_),\n-         fold_lval_index  = bind identity_fold_lval_index[ENV](_,_,_,_),\n-         fold_lval_name   = bind identity_fold_lval_name[ENV](_,_,_,_),\n+         fold_expr_field  = bind identity_fold_expr_field[ENV](_,_,_,_),\n+         fold_expr_index  = bind identity_fold_expr_index[ENV](_,_,_,_),\n+         fold_expr_name   = bind identity_fold_expr_name[ENV](_,_,_,_),\n \n          fold_decl_local  = bind identity_fold_decl_local[ENV](_,_,_,_,_),\n          fold_decl_item   = bind identity_fold_decl_item[ENV](_,_,_,_),\n@@ -796,7 +760,6 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          update_env_for_item = bind identity_update_env_for_item[ENV](_,_),\n          update_env_for_stmt = bind identity_update_env_for_stmt[ENV](_,_),\n          update_env_for_decl = bind identity_update_env_for_decl[ENV](_,_),\n-         update_env_for_lval = bind identity_update_env_for_lval[ENV](_,_),\n          update_env_for_expr = bind identity_update_env_for_expr[ENV](_,_),\n          update_env_for_ty = bind identity_update_env_for_ty[ENV](_,_),\n "}]}