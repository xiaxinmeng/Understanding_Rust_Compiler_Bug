{"sha": "f9f3063cfaa792435ed88a92927bb2641388a7c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZjMwNjNjZmFhNzkyNDM1ZWQ4OGE5MjkyN2JiMjY0MTM4OGE3YzY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-05-20T17:58:41Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-05-22T17:03:08Z"}, "message": "Update tests", "tree": {"sha": "3f9145e70c8c6392fea9ec62586430f2ef57983e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f9145e70c8c6392fea9ec62586430f2ef57983e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9f3063cfaa792435ed88a92927bb2641388a7c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9f3063cfaa792435ed88a92927bb2641388a7c6", "html_url": "https://github.com/rust-lang/rust/commit/f9f3063cfaa792435ed88a92927bb2641388a7c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9f3063cfaa792435ed88a92927bb2641388a7c6/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d8a0733ae58749db958e929aa14108b869f7540", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d8a0733ae58749db958e929aa14108b869f7540", "html_url": "https://github.com/rust-lang/rust/commit/3d8a0733ae58749db958e929aa14108b869f7540"}], "stats": {"total": 1345, "additions": 462, "deletions": 883}, "files": [{"sha": "c1564cf07e68aa9f629855975a15f3448c4011a1", "filename": "src/test/ui/borrowck/issue-45983.migrate.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.migrate.stderr?ref=3d8a0733ae58749db958e929aa14108b869f7540", "patch": "@@ -1,12 +0,0 @@\n-error: borrowed data cannot be stored outside of its closure\n-  --> $DIR/issue-45983.rs:20:27\n-   |\n-LL |     let x = None;\n-   |         - borrowed data cannot be stored into here...\n-LL |     give_any(|y| x = Some(y));\n-   |              ---          ^ cannot be stored outside of its closure\n-   |              |\n-   |              ...because it cannot outlive this closure\n-\n-error: aborting due to previous error\n-"}, {"sha": "51bb4dee6762a3a688d9b01548d77969d6bf0d94", "filename": "src/test/ui/borrowck/issue-45983.nll.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr?ref=3d8a0733ae58749db958e929aa14108b869f7540", "patch": "@@ -1,21 +0,0 @@\n-error[E0521]: borrowed data escapes outside of closure\n-  --> $DIR/issue-45983.rs:20:18\n-   |\n-LL |     let x = None;\n-   |         - `x` declared here, outside of the closure body\n-LL |     give_any(|y| x = Some(y));\n-   |               -  ^^^^^^^^^^^ `y` escapes the closure body here\n-   |               |\n-   |               `y` is a reference that is only valid in the closure body\n-\n-error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/issue-45983.rs:20:18\n-   |\n-LL |     let x = None;\n-   |         - help: consider changing this to be mutable: `mut x`\n-LL |     give_any(|y| x = Some(y));\n-   |                  ^^^^^^^^^^^ cannot assign\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0594`."}, {"sha": "6784f6f86a010a31eb7590be12834b58624b9117", "filename": "src/test/ui/borrowck/issue-45983.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,24 +1,12 @@\n // As documented in Issue #45983, this test is evaluating the quality\n // of our diagnostics on erroneous code using higher-ranked closures.\n \n-// revisions: migrate nll\n-\n-// Since we are testing nll (and migration) explicitly as a separate\n-// revisions, don't worry about the --compare-mode=nll on this test.\n-\n-// ignore-compare-mode-nll\n-// ignore-compare-mode-polonius\n-\n-//[nll]compile-flags: -Z borrowck=mir\n-\n fn give_any<F: for<'r> FnOnce(&'r ())>(f: F) {\n     f(&());\n }\n \n fn main() {\n-    let x = None;\n+    let mut x = None;\n     give_any(|y| x = Some(y));\n-    //[migrate]~^ ERROR borrowed data cannot be stored outside of its closure\n-    //[nll]~^^ ERROR borrowed data escapes outside of closure\n-    //[nll]~| ERROR cannot assign to `x`, as it is not declared as mutable\n+    //~^ ERROR borrowed data escapes outside of closure\n }"}, {"sha": "efd414a2d44fffd30f6f5fc8dc551b4324f45445", "filename": "src/test/ui/borrowck/issue-45983.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,9 +1,9 @@\n error[E0521]: borrowed data escapes outside of closure\n-  --> $DIR/regions-escape-bound-fn-2.rs:8:18\n+  --> $DIR/issue-45983.rs:10:18\n    |\n LL |     let mut x = None;\n    |         ----- `x` declared here, outside of the closure body\n-LL |     with_int(|y| x = Some(y));\n+LL |     give_any(|y| x = Some(y));\n    |               -  ^^^^^^^^^^^ `y` escapes the closure body here\n    |               |\n    |               `y` is a reference that is only valid in the closure body", "previous_filename": "src/test/ui/borrowck/regions-escape-bound-fn-2.nll.stderr"}, {"sha": "20afecfe5de79f01db7429d9ae5aefc98fce5528", "filename": "src/test/ui/borrowck/issue-7573.nll.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr?ref=3d8a0733ae58749db958e929aa14108b869f7540", "patch": "@@ -1,14 +0,0 @@\n-error[E0521]: borrowed data escapes outside of closure\n-  --> $DIR/issue-7573.rs:21:9\n-   |\n-LL |     let mut lines_to_use: Vec<&CrateId> = Vec::new();\n-   |         ---------------- `lines_to_use` declared here, outside of the closure body\n-LL |\n-LL |     let push_id = |installed_id: &CrateId| {\n-   |                    ------------ `installed_id` is a reference that is only valid in the closure body\n-...\n-LL |         lines_to_use.push(installed_id);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `installed_id` escapes the closure body here\n-\n-error: aborting due to previous error\n-"}, {"sha": "7c07411533ff072b63e3743b284c85941039a1e1", "filename": "src/test/ui/borrowck/issue-7573.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.rs?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,36 +1,34 @@\n pub struct CrateId {\n     local_path: String,\n-    junk: String\n+    junk: String,\n }\n \n impl CrateId {\n     fn new(s: &str) -> CrateId {\n-        CrateId {\n-            local_path: s.to_string(),\n-            junk: \"wutevs\".to_string()\n-        }\n+        CrateId { local_path: s.to_string(), junk: \"wutevs\".to_string() }\n     }\n }\n \n pub fn remove_package_from_database() {\n     let mut lines_to_use: Vec<&CrateId> = Vec::new();\n-        //~^ NOTE cannot infer an appropriate lifetime\n+    //~^ NOTE `lines_to_use` declared here, outside of the closure body\n     let push_id = |installed_id: &CrateId| {\n-        //~^ NOTE borrowed data cannot outlive this closure\n-        //~| NOTE ...so that variable is valid at time of its declaration\n+        //~^ NOTE `installed_id` is a reference that is only valid in the closure body\n         lines_to_use.push(installed_id);\n-        //~^ ERROR borrowed data cannot be stored outside of its closure\n-        //~| NOTE cannot be stored outside of its closure\n+        //~^ ERROR borrowed data escapes outside of closure\n+        //~| NOTE `installed_id` escapes the closure body here\n     };\n     list_database(push_id);\n \n     for l in &lines_to_use {\n         println!(\"{}\", l.local_path);\n     }\n-\n }\n \n-pub fn list_database<F>(mut f: F) where F: FnMut(&CrateId) {\n+pub fn list_database<F>(mut f: F)\n+where\n+    F: FnMut(&CrateId),\n+{\n     let stuff = [\"foo\", \"bar\"];\n \n     for l in &stuff {"}, {"sha": "815419db833e55362d82b5b739086e7d384a24f3", "filename": "src/test/ui/borrowck/issue-7573.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,16 +1,14 @@\n-error: borrowed data cannot be stored outside of its closure\n-  --> $DIR/issue-7573.rs:21:27\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/issue-7573.rs:17:9\n    |\n LL |     let mut lines_to_use: Vec<&CrateId> = Vec::new();\n-   |                               - cannot infer an appropriate lifetime...\n+   |         ---------------- `lines_to_use` declared here, outside of the closure body\n LL |\n LL |     let push_id = |installed_id: &CrateId| {\n-   |         -------   ------------------------ borrowed data cannot outlive this closure\n-   |         |\n-   |         ...so that variable is valid at time of its declaration\n-...\n+   |                    ------------ `installed_id` is a reference that is only valid in the closure body\n+LL |\n LL |         lines_to_use.push(installed_id);\n-   |                           ^^^^^^^^^^^^ cannot be stored outside of its closure\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `installed_id` escapes the closure body here\n \n error: aborting due to previous error\n "}, {"sha": "0e98d98cf87b3f1c36bb297ae8683d2059fca4ed", "filename": "src/test/ui/borrowck/regions-escape-bound-fn-2.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.rs?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,10 +1,13 @@\n-fn with_int<F>(f: F) where F: FnOnce(&isize) {\n+fn with_int<F>(f: F)\n+where\n+    F: FnOnce(&isize),\n+{\n     let x = 3;\n     f(&x);\n }\n \n fn main() {\n     let mut x = None;\n     with_int(|y| x = Some(y));\n-    //~^ ERROR borrowed data cannot be stored outside of its closure\n+    //~^ ERROR borrowed data escapes outside of closure\n }"}, {"sha": "1dc60bb15545223e37ca33a8d3991c976f5679eb", "filename": "src/test/ui/borrowck/regions-escape-bound-fn-2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,12 +1,12 @@\n-error: borrowed data cannot be stored outside of its closure\n-  --> $DIR/regions-escape-bound-fn-2.rs:8:27\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/regions-escape-bound-fn-2.rs:11:18\n    |\n LL |     let mut x = None;\n-   |         ----- borrowed data cannot be stored into here...\n+   |         ----- `x` declared here, outside of the closure body\n LL |     with_int(|y| x = Some(y));\n-   |              ---          ^ cannot be stored outside of its closure\n-   |              |\n-   |              ...because it cannot outlive this closure\n+   |               -  ^^^^^^^^^^^ `y` escapes the closure body here\n+   |               |\n+   |               `y` is a reference that is only valid in the closure body\n \n error: aborting due to previous error\n "}, {"sha": "d304de92c7e1891462515dee167bfcbd735d3c8d", "filename": "src/test/ui/borrowck/regions-escape-bound-fn.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.nll.stderr?ref=3d8a0733ae58749db958e929aa14108b869f7540", "patch": "@@ -1,12 +0,0 @@\n-error[E0521]: borrowed data escapes outside of closure\n-  --> $DIR/regions-escape-bound-fn.rs:8:18\n-   |\n-LL |     let mut x: Option<&isize> = None;\n-   |         ----- `x` declared here, outside of the closure body\n-LL |     with_int(|y| x = Some(y));\n-   |               -  ^^^^^^^^^^^ `y` escapes the closure body here\n-   |               |\n-   |               `y` is a reference that is only valid in the closure body\n-\n-error: aborting due to previous error\n-"}, {"sha": "f896ae7bdada25cf22c3b6b8cc387b5b135c5188", "filename": "src/test/ui/borrowck/regions-escape-bound-fn.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.rs?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,10 +1,13 @@\n-fn with_int<F>(f: F) where F: FnOnce(&isize) {\n+fn with_int<F>(f: F)\n+where\n+    F: FnOnce(&isize),\n+{\n     let x = 3;\n     f(&x);\n }\n \n fn main() {\n     let mut x: Option<&isize> = None;\n     with_int(|y| x = Some(y));\n-    //~^ ERROR borrowed data cannot be stored outside of its closure\n+    //~^ ERROR borrowed data escapes outside of closure\n }"}, {"sha": "5c548ec2876a33cd760d3094b0db063593a9c305", "filename": "src/test/ui/borrowck/regions-escape-bound-fn.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,12 +1,12 @@\n-error: borrowed data cannot be stored outside of its closure\n-  --> $DIR/regions-escape-bound-fn.rs:8:27\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/regions-escape-bound-fn.rs:11:18\n    |\n LL |     let mut x: Option<&isize> = None;\n-   |         ----- borrowed data cannot be stored into here...\n+   |         ----- `x` declared here, outside of the closure body\n LL |     with_int(|y| x = Some(y));\n-   |              ---          ^ cannot be stored outside of its closure\n-   |              |\n-   |              ...because it cannot outlive this closure\n+   |               -  ^^^^^^^^^^^ `y` escapes the closure body here\n+   |               |\n+   |               `y` is a reference that is only valid in the closure body\n \n error: aborting due to previous error\n "}, {"sha": "d9931302f75fcbe428ddce88e052d61d3975c12a", "filename": "src/test/ui/borrowck/regions-escape-unboxed-closure.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.nll.stderr?ref=3d8a0733ae58749db958e929aa14108b869f7540", "patch": "@@ -1,12 +0,0 @@\n-error[E0521]: borrowed data escapes outside of closure\n-  --> $DIR/regions-escape-unboxed-closure.rs:6:23\n-   |\n-LL |     let mut x: Option<&isize> = None;\n-   |         ----- `x` declared here, outside of the closure body\n-LL |     with_int(&mut |y| x = Some(y));\n-   |                    -  ^^^^^^^^^^^ `y` escapes the closure body here\n-   |                    |\n-   |                    `y` is a reference that is only valid in the closure body\n-\n-error: aborting due to previous error\n-"}, {"sha": "f01e47122d1e1cf6678b1d58d266f718b8085961", "filename": "src/test/ui/borrowck/regions-escape-unboxed-closure.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.rs?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,8 +1,7 @@\n-fn with_int(f: &mut dyn FnMut(&isize)) {\n-}\n+fn with_int(f: &mut dyn FnMut(&isize)) {}\n \n fn main() {\n     let mut x: Option<&isize> = None;\n     with_int(&mut |y| x = Some(y));\n-    //~^ ERROR borrowed data cannot be stored outside of its closure\n+    //~^ ERROR borrowed data escapes outside of closure\n }"}, {"sha": "f2a49e70d27164bfa61740c803eeebed4cd02e45", "filename": "src/test/ui/borrowck/regions-escape-unboxed-closure.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,12 +1,12 @@\n-error: borrowed data cannot be stored outside of its closure\n-  --> $DIR/regions-escape-unboxed-closure.rs:6:32\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/regions-escape-unboxed-closure.rs:5:23\n    |\n LL |     let mut x: Option<&isize> = None;\n-   |         ----- borrowed data cannot be stored into here...\n+   |         ----- `x` declared here, outside of the closure body\n LL |     with_int(&mut |y| x = Some(y));\n-   |                   ---          ^ cannot be stored outside of its closure\n-   |                   |\n-   |                   ...because it cannot outlive this closure\n+   |                    -  ^^^^^^^^^^^ `y` escapes the closure body here\n+   |                    |\n+   |                    `y` is a reference that is only valid in the closure body\n \n error: aborting due to previous error\n "}, {"sha": "89107e799bd2207c4f26a4f62e38ceb0cf27c35a", "filename": "src/test/ui/c-variadic/variadic-ffi-4.nll.stderr", "status": "removed", "additions": 0, "deletions": 123, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.nll.stderr?ref=3d8a0733ae58749db958e929aa14108b869f7540", "patch": "@@ -1,123 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-4.rs:8:5\n-   |\n-LL | pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f> {\n-   |                                     --            -- has type `core::ffi::VaListImpl<'1>`\n-   |                                     |\n-   |                                     lifetime `'f` defined here\n-LL |     ap\n-   |     ^^ function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'f`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-4.rs:8:5\n-   |\n-LL | pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f> {\n-   |                                     --            -- has type `core::ffi::VaListImpl<'1>`\n-   |                                     |\n-   |                                     lifetime `'f` defined here\n-LL |     ap\n-   |     ^^ returning this value requires that `'1` must outlive `'f`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-4.rs:12:5\n-   |\n-LL | pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaListImpl<'static> {\n-   |                                               -- has type `core::ffi::VaListImpl<'1>`\n-LL |     ap\n-   |     ^^ returning this value requires that `'1` must outlive `'static`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-4.rs:16:33\n-   |\n-LL |     let _ = ap.with_copy(|ap| { ap });\n-   |                           ---   ^^ returning this value requires that `'1` must outlive `'2`\n-   |                           | |\n-   |                           | return type of closure is core::ffi::VaList<'2, '_>\n-   |                           has type `core::ffi::VaList<'1, '_>`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-4.rs:20:5\n-   |\n-LL | pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-   |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n-   |                                               |\n-   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n-LL |     *ap0 = ap1;\n-   |     ^^^^ assignment requires that `'1` must outlive `'2`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-4.rs:20:5\n-   |\n-LL | pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-   |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n-   |                                               |\n-   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n-LL |     *ap0 = ap1;\n-   |     ^^^^ assignment requires that `'2` must outlive `'1`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-4.rs:24:5\n-   |\n-LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n-   |                                               ---                   ------- has type `core::ffi::VaListImpl<'2>`\n-   |                                               |\n-   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n-LL |     ap0 = &mut ap1;\n-   |     ^^^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-4.rs:24:5\n-   |\n-LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n-   |                                               ---                   ------- has type `core::ffi::VaListImpl<'2>`\n-   |                                               |\n-   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n-LL |     ap0 = &mut ap1;\n-   |     ^^^^^^^^^^^^^^ assignment requires that `'2` must outlive `'1`\n-\n-error[E0384]: cannot assign to immutable argument `ap0`\n-  --> $DIR/variadic-ffi-4.rs:24:5\n-   |\n-LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n-   |                                               --- help: make this binding mutable: `mut ap0`\n-LL |     ap0 = &mut ap1;\n-   |     ^^^^^^^^^^^^^^ cannot assign to immutable argument\n-\n-error[E0597]: `ap1` does not live long enough\n-  --> $DIR/variadic-ffi-4.rs:24:11\n-   |\n-LL | pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n-   |                                                    - let's call the lifetime of this reference `'3`\n-LL |     ap0 = &mut ap1;\n-   |     ------^^^^^^^^\n-   |     |     |\n-   |     |     borrowed value does not live long enough\n-   |     assignment requires that `ap1` is borrowed for `'3`\n-...\n-LL | }\n-   | - `ap1` dropped here while still borrowed\n-\n-error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-4.rs:31:12\n-   |\n-LL | pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-   |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n-   |                                               |\n-   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n-LL |     *ap0 = ap1.clone();\n-   |            ^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/variadic-ffi-4.rs:31:12\n-   |\n-LL | pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-   |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n-   |                                               |\n-   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n-LL |     *ap0 = ap1.clone();\n-   |            ^^^^^^^^^^^ argument requires that `'2` must outlive `'1`\n-\n-error: aborting due to 12 previous errors\n-\n-Some errors have detailed explanations: E0384, E0597.\n-For more information about an error, try `rustc --explain E0384`."}, {"sha": "80640379422590b8e6391c1406d048c6b87326d1", "filename": "src/test/ui/c-variadic/variadic-ffi-4.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.rs?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,32 +1,38 @@\n-#![crate_type=\"lib\"]\n+#![crate_type = \"lib\"]\n #![no_std]\n #![feature(c_variadic)]\n \n use core::ffi::{VaList, VaListImpl};\n \n pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f> {\n-    ap //~ ERROR: mismatched types\n+    ap\n+    //~^ ERROR: lifetime may not live long enough\n+    //~| ERROR: lifetime may not live long enough\n }\n \n pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaListImpl<'static> {\n-    ap //~ ERROR: mismatched types\n+    ap //~ ERROR: lifetime may not live long enough\n }\n \n pub unsafe extern \"C\" fn no_escape2(_: usize, ap: ...) {\n-    let _ = ap.with_copy(|ap| { ap }); //~ ERROR: cannot infer an appropriate lifetime\n+    let _ = ap.with_copy(|ap| ap); //~ ERROR: lifetime may not live long enough\n }\n \n pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-    *ap0 = ap1; //~ ERROR: mismatched types\n+    *ap0 = ap1;\n+    //~^ ERROR: lifetime may not live long enough\n+    //~| ERROR: lifetime may not live long enough\n }\n \n-pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n+pub unsafe extern \"C\" fn no_escape4(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n     ap0 = &mut ap1;\n-    //~^ ERROR: a value of type `core::ffi::VaListImpl<'_>` is borrowed for too long\n-    //~| ERROR: mismatched types\n-    //~| ERROR: cannot infer an appropriate lifetime\n+    //~^ ERROR: `ap1` does not live long enough\n+    //~| ERROR: lifetime may not live long enough\n+    //~| ERROR: lifetime may not live long enough\n }\n \n pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-    *ap0 = ap1.clone(); //~ ERROR: mismatched types\n+    *ap0 = ap1.clone();\n+    //~^ ERROR: lifetime may not live long enough\n+    //~| ERROR: lifetime may not live long enough\n }"}, {"sha": "65623501569e1099957f6ab89dece3c21b925b39", "filename": "src/test/ui/c-variadic/variadic-ffi-4.stderr", "status": "modified", "additions": 86, "deletions": 189, "changes": 275, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,217 +1,114 @@\n-error[E0308]: mismatched types\n+error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-4.rs:8:5\n    |\n+LL | pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f> {\n+   |                                     --            -- has type `core::ffi::VaListImpl<'1>`\n+   |                                     |\n+   |                                     lifetime `'f` defined here\n LL |     ap\n-   |     ^^ lifetime mismatch\n-   |\n-   = note: expected struct `core::ffi::VaListImpl<'f>`\n-              found struct `core::ffi::VaListImpl<'_>`\n-note: the scope of call-site for function at 7:78...\n-  --> $DIR/variadic-ffi-4.rs:7:78\n-   |\n-LL |   pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f> {\n-   |  ______________________________________________________________________________^\n-LL | |     ap\n-LL | | }\n-   | |_^\n-note: ...does not necessarily outlive the lifetime `'f` as defined on the function body at 7:37\n-  --> $DIR/variadic-ffi-4.rs:7:37\n+   |     ^^ function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'f`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variadic-ffi-4.rs:8:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape0<'f>(_: usize, ap: ...) -> VaListImpl<'f> {\n-   |                                     ^^\n+   |                                     --            -- has type `core::ffi::VaListImpl<'1>`\n+   |                                     |\n+   |                                     lifetime `'f` defined here\n+LL |     ap\n+   |     ^^ returning this value requires that `'1` must outlive `'f`\n \n-error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-4.rs:12:5\n+error: lifetime may not live long enough\n+  --> $DIR/variadic-ffi-4.rs:14:5\n    |\n+LL | pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaListImpl<'static> {\n+   |                                               -- has type `core::ffi::VaListImpl<'1>`\n LL |     ap\n-   |     ^^ lifetime mismatch\n-   |\n-   = note: expected struct `core::ffi::VaListImpl<'static>`\n-              found struct `core::ffi::VaListImpl<'_>`\n-note: the scope of call-site for function at 11:79...\n-  --> $DIR/variadic-ffi-4.rs:11:79\n-   |\n-LL |   pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaListImpl<'static> {\n-   |  _______________________________________________________________________________^\n-LL | |     ap\n-LL | | }\n-   | |_^\n-   = note: ...does not necessarily outlive the static lifetime\n+   |     ^^ returning this value requires that `'1` must outlive `'static`\n \n-error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/variadic-ffi-4.rs:16:33\n-   |\n-LL |     let _ = ap.with_copy(|ap| { ap });\n-   |                                 ^^\n-   |\n-note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 16:26...\n-  --> $DIR/variadic-ffi-4.rs:16:26\n-   |\n-LL |     let _ = ap.with_copy(|ap| { ap });\n-   |                          ^^^^^^^^^^^\n-note: ...so that the expression is assignable\n-  --> $DIR/variadic-ffi-4.rs:16:33\n-   |\n-LL |     let _ = ap.with_copy(|ap| { ap });\n-   |                                 ^^\n-   = note: expected  `core::ffi::VaList<'_, '_>`\n-              found  `core::ffi::VaList<'_, '_>`\n-note: but, the lifetime must be valid for the method call at 16:13...\n-  --> $DIR/variadic-ffi-4.rs:16:13\n-   |\n-LL |     let _ = ap.with_copy(|ap| { ap });\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...so type `core::ffi::VaList<'_, '_>` of expression is valid during the expression\n-  --> $DIR/variadic-ffi-4.rs:16:13\n-   |\n-LL |     let _ = ap.with_copy(|ap| { ap });\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+error: lifetime may not live long enough\n+  --> $DIR/variadic-ffi-4.rs:18:31\n+   |\n+LL |     let _ = ap.with_copy(|ap| ap);\n+   |                           --- ^^ returning this value requires that `'1` must outlive `'2`\n+   |                           | |\n+   |                           | return type of closure is core::ffi::VaList<'2, '_>\n+   |                           has type `core::ffi::VaList<'1, '_>`\n \n-error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-4.rs:20:12\n+error: lifetime may not live long enough\n+  --> $DIR/variadic-ffi-4.rs:22:5\n    |\n+LL | pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+   |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n+   |                                               |\n+   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n LL |     *ap0 = ap1;\n-   |            ^^^ lifetime mismatch\n-   |\n-   = note: expected struct `core::ffi::VaListImpl<'_>`\n-              found struct `core::ffi::VaListImpl<'_>`\n-note: the scope of call-site for function at 19:87...\n-  --> $DIR/variadic-ffi-4.rs:19:87\n-   |\n-LL |   pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-   |  _______________________________________________________________________________________^\n-LL | |     *ap0 = ap1;\n-LL | | }\n-   | |_^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 19:1\n-  --> $DIR/variadic-ffi-4.rs:19:1\n-   |\n-LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-LL | |     *ap0 = ap1;\n-LL | | }\n-   | |_^\n+   |     ^^^^ assignment requires that `'1` must outlive `'2`\n \n-error[E0490]: a value of type `core::ffi::VaListImpl<'_>` is borrowed for too long\n-  --> $DIR/variadic-ffi-4.rs:24:11\n+error: lifetime may not live long enough\n+  --> $DIR/variadic-ffi-4.rs:22:5\n    |\n-LL |     ap0 = &mut ap1;\n-   |           ^^^^^^^^\n-   |\n-note: the type is valid for the anonymous lifetime #1 defined on the function body at 23:1\n-  --> $DIR/variadic-ffi-4.rs:23:1\n-   |\n-LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n-LL | |     ap0 = &mut ap1;\n-LL | |\n-LL | |\n-LL | |\n-LL | | }\n-   | |_^\n-note: but the borrow lasts for the scope of call-site for function at 23:83\n-  --> $DIR/variadic-ffi-4.rs:23:83\n-   |\n-LL |   pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n-   |  ___________________________________________________________________________________^\n-LL | |     ap0 = &mut ap1;\n-LL | |\n-LL | |\n-LL | |\n-LL | | }\n-   | |_^\n+LL | pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+   |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n+   |                                               |\n+   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n+LL |     *ap0 = ap1;\n+   |     ^^^^ assignment requires that `'2` must outlive `'1`\n \n-error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-4.rs:24:11\n+error: lifetime may not live long enough\n+  --> $DIR/variadic-ffi-4.rs:28:5\n    |\n+LL | pub unsafe extern \"C\" fn no_escape4(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+   |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n+   |                                               |\n+   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n LL |     ap0 = &mut ap1;\n-   |           ^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected mutable reference `&mut core::ffi::VaListImpl<'_>`\n-              found mutable reference `&mut core::ffi::VaListImpl<'_>`\n-note: the scope of call-site for function at 23:83...\n-  --> $DIR/variadic-ffi-4.rs:23:83\n-   |\n-LL |   pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n-   |  ___________________________________________________________________________________^\n-LL | |     ap0 = &mut ap1;\n-LL | |\n-LL | |\n-LL | |\n-LL | | }\n-   | |_^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 23:1\n-  --> $DIR/variadic-ffi-4.rs:23:1\n-   |\n-LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n-LL | |     ap0 = &mut ap1;\n-LL | |\n-LL | |\n-LL | |\n-LL | | }\n-   | |_^\n+   |     ^^^^^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n-error[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n-  --> $DIR/variadic-ffi-4.rs:24:11\n+error: lifetime may not live long enough\n+  --> $DIR/variadic-ffi-4.rs:28:5\n    |\n+LL | pub unsafe extern \"C\" fn no_escape4(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+   |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n+   |                                               |\n+   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n LL |     ap0 = &mut ap1;\n-   |           ^^^^^^^^\n-   |\n-note: first, the lifetime cannot outlive the scope of call-site for function at 23:83...\n-  --> $DIR/variadic-ffi-4.rs:23:83\n-   |\n-LL |   pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n-   |  ___________________________________________________________________________________^\n-LL | |     ap0 = &mut ap1;\n-LL | |\n-LL | |\n-LL | |\n-LL | | }\n-   | |_^\n-note: ...so that the type `core::ffi::VaListImpl<'_>` is not borrowed for too long\n-  --> $DIR/variadic-ffi-4.rs:24:11\n-   |\n-LL |     ap0 = &mut ap1;\n-   |           ^^^^^^^^\n-note: but, the lifetime must be valid for the anonymous lifetime #1 defined on the function body at 23:1...\n-  --> $DIR/variadic-ffi-4.rs:23:1\n-   |\n-LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaListImpl, mut ap1: ...) {\n-LL | |     ap0 = &mut ap1;\n-LL | |\n-LL | |\n-LL | |\n-LL | | }\n-   | |_^\n-note: ...so that reference does not outlive borrowed content\n-  --> $DIR/variadic-ffi-4.rs:24:11\n+   |     ^^^^^^^^^^^^^^ assignment requires that `'2` must outlive `'1`\n+\n+error[E0597]: `ap1` does not live long enough\n+  --> $DIR/variadic-ffi-4.rs:28:11\n    |\n+LL | pub unsafe extern \"C\" fn no_escape4(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+   |                                                        - let's call the lifetime of this reference `'3`\n LL |     ap0 = &mut ap1;\n-   |           ^^^^^^^^\n+   |     ------^^^^^^^^\n+   |     |     |\n+   |     |     borrowed value does not live long enough\n+   |     assignment requires that `ap1` is borrowed for `'3`\n+...\n+LL | }\n+   | - `ap1` dropped here while still borrowed\n \n-error[E0308]: mismatched types\n-  --> $DIR/variadic-ffi-4.rs:31:12\n+error: lifetime may not live long enough\n+  --> $DIR/variadic-ffi-4.rs:35:12\n    |\n+LL | pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+   |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n+   |                                               |\n+   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n LL |     *ap0 = ap1.clone();\n-   |            ^^^^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected struct `core::ffi::VaListImpl<'_>`\n-              found struct `core::ffi::VaListImpl<'_>`\n-note: the scope of call-site for function at 30:87...\n-  --> $DIR/variadic-ffi-4.rs:30:87\n-   |\n-LL |   pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-   |  _______________________________________________________________________________________^\n-LL | |     *ap0 = ap1.clone();\n-LL | | }\n-   | |_^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 30:1\n-  --> $DIR/variadic-ffi-4.rs:30:1\n+   |            ^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/variadic-ffi-4.rs:35:12\n    |\n-LL | / pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n-LL | |     *ap0 = ap1.clone();\n-LL | | }\n-   | |_^\n+LL | pub unsafe extern \"C\" fn no_escape5(_: usize, mut ap0: &mut VaListImpl, mut ap1: ...) {\n+   |                                               -------                   ------- has type `core::ffi::VaListImpl<'2>`\n+   |                                               |\n+   |                                               has type `&mut core::ffi::VaListImpl<'1>`\n+LL |     *ap0 = ap1.clone();\n+   |            ^^^^^^^^^^^ argument requires that `'2` must outlive `'1`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 11 previous errors\n \n-Some errors have detailed explanations: E0308, E0495.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "52bca8dd63e1f6c47094033476be55389f1eb5cc", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region-2.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.nll.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/expect-region-supply-region-2.rs:14:30\n+   |\n+LL | fn expect_bound_supply_named<'x>() {\n+   |                              -- lifetime `'x` defined here\n+...\n+LL |     closure_expecting_bound(|x: &'x u32| {\n+   |                              ^  - let's call the lifetime of this reference `'1`\n+   |                              |\n+   |                              requires that `'1` must outlive `'x`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/expect-region-supply-region-2.rs:14:30\n+   |\n+LL | fn expect_bound_supply_named<'x>() {\n+   |                              -- lifetime `'x` defined here\n+...\n+LL |     closure_expecting_bound(|x: &'x u32| {\n+   |                              ^ requires that `'x` must outlive `'static`\n+   |\n+   = help: consider replacing `'x` with `'static`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7405b1a1e3a288d0eadadc7218c232b15f129d92", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region-2.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.rs?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -0,0 +1,24 @@\n+#![allow(warnings)]\n+\n+fn closure_expecting_bound<F>(_: F)\n+where\n+    F: FnOnce(&u32),\n+{\n+}\n+\n+fn expect_bound_supply_named<'x>() {\n+    let mut f: Option<&u32> = None;\n+\n+    // Here we give a type annotation that `x` should be free. We get\n+    // an error because of that.\n+    closure_expecting_bound(|x: &'x u32| {\n+        //~^ ERROR mismatched types\n+        //~| ERROR mismatched types\n+\n+        // Borrowck doesn't get a chance to run, but if it did it should error\n+        // here.\n+        f = Some(x);\n+    });\n+}\n+\n+fn main() {}"}, {"sha": "7f527904a69e5c3fbf6a4c7682a4905f99fceafb", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region-2.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region-2.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -0,0 +1,55 @@\n+error[E0308]: mismatched types\n+  --> $DIR/expect-region-supply-region-2.rs:14:33\n+   |\n+LL |     closure_expecting_bound(|x: &'x u32| {\n+   |                                 ^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected reference `&u32`\n+              found reference `&'x u32`\n+note: the anonymous lifetime #2 defined on the body at 14:29...\n+  --> $DIR/expect-region-supply-region-2.rs:14:29\n+   |\n+LL |       closure_expecting_bound(|x: &'x u32| {\n+   |  _____________________________^\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |         f = Some(x);\n+LL | |     });\n+   | |_____^\n+note: ...does not necessarily outlive the lifetime `'x` as defined on the function body at 9:30\n+  --> $DIR/expect-region-supply-region-2.rs:9:30\n+   |\n+LL | fn expect_bound_supply_named<'x>() {\n+   |                              ^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expect-region-supply-region-2.rs:14:33\n+   |\n+LL |     closure_expecting_bound(|x: &'x u32| {\n+   |                                 ^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected reference `&u32`\n+              found reference `&'x u32`\n+note: the lifetime `'x` as defined on the function body at 9:30...\n+  --> $DIR/expect-region-supply-region-2.rs:9:30\n+   |\n+LL | fn expect_bound_supply_named<'x>() {\n+   |                              ^^\n+note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 14:29\n+  --> $DIR/expect-region-supply-region-2.rs:14:29\n+   |\n+LL |       closure_expecting_bound(|x: &'x u32| {\n+   |  _____________________________^\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | |         f = Some(x);\n+LL | |     });\n+   | |_____^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "d7d716ed4cb0a52b572470d55ef6519080a5f51c", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region.nll.stderr", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr?ref=3d8a0733ae58749db958e929aa14108b869f7540", "patch": "@@ -1,44 +0,0 @@\n-error[E0521]: borrowed data escapes outside of closure\n-  --> $DIR/expect-region-supply-region.rs:18:9\n-   |\n-LL |     let mut f: Option<&u32> = None;\n-   |         ----- `f` declared here, outside of the closure body\n-LL |     closure_expecting_bound(|x| {\n-   |                              - `x` is a reference that is only valid in the closure body\n-LL |         f = Some(x);\n-   |         ^^^^^^^^^^^ `x` escapes the closure body here\n-\n-error[E0521]: borrowed data escapes outside of closure\n-  --> $DIR/expect-region-supply-region.rs:28:9\n-   |\n-LL |     let mut f: Option<&u32> = None;\n-   |         ----- `f` declared here, outside of the closure body\n-LL |     closure_expecting_bound(|x: &u32| {\n-   |                              - `x` is a reference that is only valid in the closure body\n-LL |         f = Some(x);\n-   |         ^^^^^^^^^^^ `x` escapes the closure body here\n-\n-error: lifetime may not live long enough\n-  --> $DIR/expect-region-supply-region.rs:37:30\n-   |\n-LL | fn expect_bound_supply_named<'x>() {\n-   |                              -- lifetime `'x` defined here\n-...\n-LL |     closure_expecting_bound(|x: &'x u32| {\n-   |                              ^  - let's call the lifetime of this reference `'1`\n-   |                              |\n-   |                              requires that `'1` must outlive `'x`\n-\n-error: lifetime may not live long enough\n-  --> $DIR/expect-region-supply-region.rs:37:30\n-   |\n-LL | fn expect_bound_supply_named<'x>() {\n-   |                              -- lifetime `'x` defined here\n-...\n-LL |     closure_expecting_bound(|x: &'x u32| {\n-   |                              ^ requires that `'x` must outlive `'static`\n-   |\n-   = help: consider replacing `'x` with `'static`\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "55c6aa795c26a8ad0d9e99c466b1d6fc5e4323ff", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region.rs", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.rs?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,12 +1,14 @@\n #![allow(warnings)]\n \n fn closure_expecting_bound<F>(_: F)\n-    where F: FnOnce(&u32)\n+where\n+    F: FnOnce(&u32),\n {\n }\n \n fn closure_expecting_free<'a, F>(_: F)\n-    where F: FnOnce(&'a u32)\n+where\n+    F: FnOnce(&'a u32),\n {\n }\n \n@@ -15,7 +17,7 @@ fn expect_bound_supply_nothing() {\n     // it to escape into `f`:\n     let mut f: Option<&u32> = None;\n     closure_expecting_bound(|x| {\n-        f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n+        f = Some(x); //~ ERROR borrowed data escapes outside of closure\n     });\n }\n \n@@ -25,22 +27,7 @@ fn expect_bound_supply_bound() {\n     // closure:\n     let mut f: Option<&u32> = None;\n     closure_expecting_bound(|x: &u32| {\n-        f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n-    });\n-}\n-\n-fn expect_bound_supply_named<'x>() {\n-    let mut f: Option<&u32> = None;\n-\n-    // Here we give a type annotation that `x` should be free. We get\n-    // an error because of that.\n-    closure_expecting_bound(|x: &'x u32| {\n-        //~^ ERROR mismatched types\n-        //~| ERROR mismatched types\n-\n-        // And we still cannot let `x` escape into `f`.\n-        f = Some(x);\n-        //~^ ERROR borrowed data cannot be stored outside of its closure\n+        f = Some(x); //~ ERROR borrowed data escapes outside of closure\n     });\n }\n \n@@ -67,4 +54,4 @@ fn expect_free_supply_named<'x>() {\n     closure_expecting_free(|x: &'x u32| f = Some(x)); // OK\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "213071abfffc3252ea1009728c72078c59cb68ea", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region.stderr", "status": "modified", "additions": 11, "deletions": 76, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,87 +1,22 @@\n-error: borrowed data cannot be stored outside of its closure\n-  --> $DIR/expect-region-supply-region.rs:18:18\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/expect-region-supply-region.rs:20:9\n    |\n LL |     let mut f: Option<&u32> = None;\n-   |         ----- borrowed data cannot be stored into here...\n+   |         ----- `f` declared here, outside of the closure body\n LL |     closure_expecting_bound(|x| {\n-   |                             --- ...because it cannot outlive this closure\n+   |                              - `x` is a reference that is only valid in the closure body\n LL |         f = Some(x);\n-   |                  ^ cannot be stored outside of its closure\n+   |         ^^^^^^^^^^^ `x` escapes the closure body here\n \n-error: borrowed data cannot be stored outside of its closure\n-  --> $DIR/expect-region-supply-region.rs:28:18\n+error[E0521]: borrowed data escapes outside of closure\n+  --> $DIR/expect-region-supply-region.rs:30:9\n    |\n LL |     let mut f: Option<&u32> = None;\n-   |         ----- borrowed data cannot be stored into here...\n+   |         ----- `f` declared here, outside of the closure body\n LL |     closure_expecting_bound(|x: &u32| {\n-   |                             --------- ...because it cannot outlive this closure\n+   |                              - `x` is a reference that is only valid in the closure body\n LL |         f = Some(x);\n-   |                  ^ cannot be stored outside of its closure\n+   |         ^^^^^^^^^^^ `x` escapes the closure body here\n \n-error[E0308]: mismatched types\n-  --> $DIR/expect-region-supply-region.rs:37:33\n-   |\n-LL |     closure_expecting_bound(|x: &'x u32| {\n-   |                                 ^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected reference `&u32`\n-              found reference `&'x u32`\n-note: the anonymous lifetime #2 defined on the body at 37:29...\n-  --> $DIR/expect-region-supply-region.rs:37:29\n-   |\n-LL |       closure_expecting_bound(|x: &'x u32| {\n-   |  _____________________________^\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | |     });\n-   | |_____^\n-note: ...does not necessarily outlive the lifetime `'x` as defined on the function body at 32:30\n-  --> $DIR/expect-region-supply-region.rs:32:30\n-   |\n-LL | fn expect_bound_supply_named<'x>() {\n-   |                              ^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/expect-region-supply-region.rs:37:33\n-   |\n-LL |     closure_expecting_bound(|x: &'x u32| {\n-   |                                 ^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected reference `&u32`\n-              found reference `&'x u32`\n-note: the lifetime `'x` as defined on the function body at 32:30...\n-  --> $DIR/expect-region-supply-region.rs:32:30\n-   |\n-LL | fn expect_bound_supply_named<'x>() {\n-   |                              ^^\n-note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 37:29\n-  --> $DIR/expect-region-supply-region.rs:37:29\n-   |\n-LL |       closure_expecting_bound(|x: &'x u32| {\n-   |  _____________________________^\n-LL | |\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | |     });\n-   | |_____^\n-\n-error: borrowed data cannot be stored outside of its closure\n-  --> $DIR/expect-region-supply-region.rs:42:18\n-   |\n-LL |     let mut f: Option<&u32> = None;\n-   |         ----- borrowed data cannot be stored into here...\n-...\n-LL |     closure_expecting_bound(|x: &'x u32| {\n-   |                             ------------ ...because it cannot outlive this closure\n-...\n-LL |         f = Some(x);\n-   |                  ^ cannot be stored outside of its closure\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "a1c33bbcd5f751a1ec2254bbf2e16e9db7061bab", "filename": "src/test/ui/error-codes/E0490.nll.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Ferror-codes%2FE0490.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Ferror-codes%2FE0490.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0490.nll.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -0,0 +1,28 @@\n+error: lifetime may not live long enough\n+  --> $DIR/E0490.rs:2:12\n+   |\n+LL | fn f<'a, 'b>(y: &'b ()) {\n+   |      --  -- lifetime `'b` defined here\n+   |      |\n+   |      lifetime `'a` defined here\n+LL |     let x: &'a _ = &y;\n+   |            ^^^^^ type annotation requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/E0490.rs:2:20\n+   |\n+LL | fn f<'a, 'b>(y: &'b ()) {\n+   |      -- lifetime `'a` defined here\n+LL |     let x: &'a _ = &y;\n+   |            -----   ^^ borrowed value does not live long enough\n+   |            |\n+   |            type annotation requires that `y` is borrowed for `'a`\n+...\n+LL | }\n+   |  - `y` dropped here while still borrowed\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "36bafa2bd868c74297ca6cb37d30635846d77b25", "filename": "src/test/ui/error-codes/E0490.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Ferror-codes%2FE0490.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Ferror-codes%2FE0490.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0490.rs?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -0,0 +1,8 @@\n+fn f<'a, 'b>(y: &'b ()) {\n+    let x: &'a _ = &y;\n+    //~^ E0490\n+    //~| E0495\n+    //~| E0495\n+}\n+\n+fn main() {}"}, {"sha": "03fce213605e3dfed04fc0e428d93561ed055533", "filename": "src/test/ui/error-codes/E0490.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Ferror-codes%2FE0490.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Ferror-codes%2FE0490.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0490.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -0,0 +1,76 @@\n+error[E0490]: a value of type `&'b ()` is borrowed for too long\n+  --> $DIR/E0490.rs:2:20\n+   |\n+LL |     let x: &'a _ = &y;\n+   |                    ^^\n+   |\n+note: the type is valid for the lifetime `'a` as defined on the function body at 1:6\n+  --> $DIR/E0490.rs:1:6\n+   |\n+LL | fn f<'a, 'b>(y: &'b ()) {\n+   |      ^^\n+note: but the borrow lasts for the lifetime `'b` as defined on the function body at 1:10\n+  --> $DIR/E0490.rs:1:10\n+   |\n+LL | fn f<'a, 'b>(y: &'b ()) {\n+   |          ^^\n+\n+error[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n+  --> $DIR/E0490.rs:2:20\n+   |\n+LL |     let x: &'a _ = &y;\n+   |                    ^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime `'b` as defined on the function body at 1:10...\n+  --> $DIR/E0490.rs:1:10\n+   |\n+LL | fn f<'a, 'b>(y: &'b ()) {\n+   |          ^^\n+note: ...so that the type `&'b ()` is not borrowed for too long\n+  --> $DIR/E0490.rs:2:20\n+   |\n+LL |     let x: &'a _ = &y;\n+   |                    ^^\n+note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 1:6...\n+  --> $DIR/E0490.rs:1:6\n+   |\n+LL | fn f<'a, 'b>(y: &'b ()) {\n+   |      ^^\n+note: ...so that reference does not outlive borrowed content\n+  --> $DIR/E0490.rs:2:20\n+   |\n+LL |     let x: &'a _ = &y;\n+   |                    ^^\n+\n+error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n+  --> $DIR/E0490.rs:2:20\n+   |\n+LL |     let x: &'a _ = &y;\n+   |                    ^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime `'b` as defined on the function body at 1:10...\n+  --> $DIR/E0490.rs:1:10\n+   |\n+LL | fn f<'a, 'b>(y: &'b ()) {\n+   |          ^^\n+note: ...so that the expression is assignable\n+  --> $DIR/E0490.rs:2:20\n+   |\n+LL |     let x: &'a _ = &y;\n+   |                    ^^\n+   = note: expected  `&'a &()`\n+              found  `&'a &'b ()`\n+note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 1:6...\n+  --> $DIR/E0490.rs:1:6\n+   |\n+LL | fn f<'a, 'b>(y: &'b ()) {\n+   |      ^^\n+note: ...so that the reference type `&'a &()` does not outlive the data it points at\n+  --> $DIR/E0490.rs:2:12\n+   |\n+LL |     let x: &'a _ = &y;\n+   |            ^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "5140d1a9a7add00c84aa82def33936333a355888", "filename": "src/test/ui/error-codes/E0621-does-not-trigger-for-closures.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr?ref=3d8a0733ae58749db958e929aa14108b869f7540", "patch": "@@ -1,11 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/E0621-does-not-trigger-for-closures.rs:15:45\n-   |\n-LL |     invoke(&x, |a, b| if a > b { a } else { b });\n-   |                    --                       ^ returning this value requires that `'1` must outlive `'2`\n-   |                    ||\n-   |                    |return type of closure is &'2 i32\n-   |                    has type `&'1 i32`\n-\n-error: aborting due to previous error\n-"}, {"sha": "44f174c0fb76f3692993567ec98a62ab3e18606c", "filename": "src/test/ui/error-codes/E0621-does-not-trigger-for-closures.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.rs?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,9 +1,7 @@\n-// Test that we give the generic E0495 when one of the free regions is\n+// Test that we give the generic error when one of the free regions is\n // bound in a closure (rather than suggesting a change to the signature\n // of the closure, which is not specified in `foo` but rather in `invoke`).\n \n-// FIXME - This might be better as a UI test, but the finer details\n-// of the error seem to vary on different machines.\n fn invoke<'a, F>(x: &'a i32, f: F) -> &'a i32\n where F: FnOnce(&'a i32, &i32) -> &'a i32\n {\n@@ -12,7 +10,7 @@ where F: FnOnce(&'a i32, &i32) -> &'a i32\n }\n \n fn foo<'a>(x: &'a i32) {\n-    invoke(&x, |a, b| if a > b { a } else { b }); //~ ERROR E0495\n+    invoke(&x, |a, b| if a > b { a } else { b }); //~ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "b9edeb8346bdc9973cd712f3a3ffad0f91317ffb", "filename": "src/test/ui/error-codes/E0621-does-not-trigger-for-closures.stderr", "status": "modified", "additions": 6, "deletions": 25, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,30 +1,11 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n-  --> $DIR/E0621-does-not-trigger-for-closures.rs:15:5\n+error: lifetime may not live long enough\n+  --> $DIR/E0621-does-not-trigger-for-closures.rs:13:45\n    |\n LL |     invoke(&x, |a, b| if a > b { a } else { b });\n-   |     ^^^^^^\n-   |\n-note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 15:16...\n-  --> $DIR/E0621-does-not-trigger-for-closures.rs:15:16\n-   |\n-LL |     invoke(&x, |a, b| if a > b { a } else { b });\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...so that reference does not outlive borrowed content\n-  --> $DIR/E0621-does-not-trigger-for-closures.rs:15:45\n-   |\n-LL |     invoke(&x, |a, b| if a > b { a } else { b });\n-   |                                             ^\n-note: but, the lifetime must be valid for the call at 15:5...\n-  --> $DIR/E0621-does-not-trigger-for-closures.rs:15:5\n-   |\n-LL |     invoke(&x, |a, b| if a > b { a } else { b });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...so type `&i32` of expression is valid during the expression\n-  --> $DIR/E0621-does-not-trigger-for-closures.rs:15:5\n-   |\n-LL |     invoke(&x, |a, b| if a > b { a } else { b });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    --                       ^ returning this value requires that `'1` must outlive `'2`\n+   |                    ||\n+   |                    |return type of closure is &'2 i32\n+   |                    has type `&'1 i32`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`."}, {"sha": "b42ff1486f0a85b3cee9b368831e4bd26a0c5809", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -4,17 +4,11 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n    |                                                                          ^^^^^^^^^^^^^^^^^^\n    |\n-note: hidden type `Ordinary<'_>` captures the scope of call-site for function at 23:1\n-  --> $DIR/ordinary-bounds-unrelated.rs:23:1\n+note: hidden type `Ordinary<'_>` captures lifetime smaller than the function body\n+  --> $DIR/ordinary-bounds-unrelated.rs:18:74\n    |\n-LL | / {\n-LL | |     // Hidden type `Ordinary<'0>` with constraints:\n-LL | |     //\n-LL | |     // ```\n-...  |\n-LL | |     if condition() { a } else { b }\n-LL | | }\n-   | |_^\n+LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n+   |                                                                          ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "254643c406caefe00f7b071da26d1d720c8c1cff", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -4,17 +4,11 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n    |                                                              ^^^^^^^^^^^^^^^^^^\n    |\n-note: hidden type `Ordinary<'_>` captures the scope of call-site for function at 22:1\n-  --> $DIR/ordinary-bounds-unsuited.rs:22:1\n+note: hidden type `Ordinary<'_>` captures lifetime smaller than the function body\n+  --> $DIR/ordinary-bounds-unsuited.rs:20:62\n    |\n-LL | / {\n-LL | |     // We return a value:\n-LL | |     //\n-LL | |     // ```\n-...  |\n-LL | |     if condition() { a } else { b }\n-LL | | }\n-   | |_^\n+LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n+   |                                                              ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ff35b9ada45cd379dd66bc40e5e806ce62f5e22d", "filename": "src/test/ui/regions/regions-close-object-into-object-5.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.rs?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -6,22 +6,21 @@ trait A<T>\n     fn get(&self) -> T { panic!() }\n }\n \n-struct B<'a, T:'a>(&'a (A<T>+'a));\n+struct B<'a, T: 'a>(&'a (A<T> + 'a));\n \n trait X { fn foo(&self) {} }\n \n impl<'a, T> X for B<'a, T> {}\n \n-fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n+fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n     // oh dear!\n     box B(&*v) as Box<X>\n-        //~^ ERROR the parameter type `T` may not live long enough\n-        //~| ERROR the parameter type `T` may not live long enough\n-        //~| ERROR the parameter type `T` may not live long enough\n-        //~| ERROR the parameter type `T` may not live long enough\n-        //~| ERROR the parameter type `T` may not live long enough\n-        //~| ERROR the parameter type `T` may not live long enough\n-        //~| ERROR the parameter type `T` may not live long enough\n+    //~^ ERROR the parameter type `T` may not live long enough\n+    //~| ERROR the parameter type `T` may not live long enough\n+    //~| ERROR the parameter type `T` may not live long enough\n+    //~| ERROR the parameter type `T` may not live long enough\n+    //~| ERROR the parameter type `T` may not live long enough\n+    //~| ERROR the parameter type `T` may not live long enough\n }\n \n fn main() {}"}, {"sha": "2bcdcd1864e2f1772a6e0f6294d66cfceb620223", "filename": "src/test/ui/regions/regions-close-object-into-object-5.stderr", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,7 +1,7 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:5\n    |\n-LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n+LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n@@ -13,25 +13,10 @@ note: ...so that the type `B<'_, T>` will meet its required lifetime bounds\n LL |     box B(&*v) as Box<X>\n    |     ^^^^^^^^^^\n \n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:17:5\n-   |\n-LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n-LL |     // oh dear!\n-LL |     box B(&*v) as Box<X>\n-   |     ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that it can be closed over into an object\n-  --> $DIR/regions-close-object-into-object-5.rs:17:5\n-   |\n-LL |     box B(&*v) as Box<X>\n-   |     ^^^^^^^^^^^^^^^^^^^^\n-\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:9\n    |\n-LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n+LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n@@ -46,7 +31,7 @@ LL |     box B(&*v) as Box<X>\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:9\n    |\n-LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n+LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n@@ -61,7 +46,7 @@ LL |     box B(&*v) as Box<X>\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:11\n    |\n-LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n+LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n@@ -76,7 +61,7 @@ LL |     box B(&*v) as Box<X>\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:11\n    |\n-LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n+LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n@@ -91,7 +76,7 @@ LL |     box B(&*v) as Box<X>\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:17:11\n    |\n-LL | fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n+LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     // oh dear!\n LL |     box B(&*v) as Box<X>\n@@ -103,6 +88,6 @@ note: ...so that the type `(dyn A<T> + 'static)` is not borrowed for too long\n LL |     box B(&*v) as Box<X>\n    |           ^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0310`."}, {"sha": "3101d815881b17fcd6442581dcefd58cd99acd00", "filename": "src/test/ui/regions/regions-close-over-type-parameter-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,13 +1,13 @@\n error[E0310]: the parameter type `A` may not live long enough\n-  --> $DIR/regions-close-over-type-parameter-1.rs:10:5\n+  --> $DIR/regions-close-over-type-parameter-1.rs:12:5\n    |\n LL |     box v as Box<dyn SomeTrait + 'static>\n    |     ^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `A: 'static`...\n \n error[E0309]: the parameter type `A` may not live long enough\n-  --> $DIR/regions-close-over-type-parameter-1.rs:20:5\n+  --> $DIR/regions-close-over-type-parameter-1.rs:21:5\n    |\n LL |     box v as Box<dyn SomeTrait + 'b>\n    |     ^^^^^"}, {"sha": "6e708a5f70fbd828edd106b96fed18ea85042e00", "filename": "src/test/ui/regions/regions-close-over-type-parameter-1.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.rs?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -4,22 +4,22 @@\n // an object. This should yield errors unless `A` (and the object)\n // both have suitable bounds.\n \n-trait SomeTrait { fn get(&self) -> isize; }\n+trait SomeTrait {\n+    fn get(&self) -> isize;\n+}\n \n-fn make_object1<A:SomeTrait>(v: A) -> Box<dyn SomeTrait + 'static> {\n+fn make_object1<A: SomeTrait>(v: A) -> Box<dyn SomeTrait + 'static> {\n     box v as Box<dyn SomeTrait + 'static>\n-        //~^ ERROR the parameter type `A` may not live long enough\n-        //~| ERROR the parameter type `A` may not live long enough\n+    //~^ ERROR the parameter type `A` may not live long enough\n }\n \n-fn make_object2<'a,A:SomeTrait+'a>(v: A) -> Box<dyn SomeTrait + 'a> {\n+fn make_object2<'a, A: SomeTrait + 'a>(v: A) -> Box<dyn SomeTrait + 'a> {\n     box v as Box<dyn SomeTrait + 'a>\n }\n \n-fn make_object3<'a,'b,A:SomeTrait+'a>(v: A) -> Box<dyn SomeTrait + 'b> {\n+fn make_object3<'a, 'b, A: SomeTrait + 'a>(v: A) -> Box<dyn SomeTrait + 'b> {\n     box v as Box<dyn SomeTrait + 'b>\n-        //~^ ERROR the parameter type `A` may not live long enough\n-        //~| ERROR the parameter type `A` may not live long enough\n+    //~^ ERROR the parameter type `A` may not live long enough\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "a7509cb608c6b71aa19e3991a054b36242795efc", "filename": "src/test/ui/regions/regions-close-over-type-parameter-1.stderr", "status": "modified", "additions": 8, "deletions": 36, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,60 +1,32 @@\n error[E0310]: the parameter type `A` may not live long enough\n-  --> $DIR/regions-close-over-type-parameter-1.rs:10:5\n+  --> $DIR/regions-close-over-type-parameter-1.rs:12:5\n    |\n-LL | fn make_object1<A:SomeTrait>(v: A) -> Box<dyn SomeTrait + 'static> {\n+LL | fn make_object1<A: SomeTrait>(v: A) -> Box<dyn SomeTrait + 'static> {\n    |                 -- help: consider adding an explicit lifetime bound...: `A: 'static +`\n LL |     box v as Box<dyn SomeTrait + 'static>\n    |     ^^^^^\n    |\n note: ...so that the type `A` will meet its required lifetime bounds\n-  --> $DIR/regions-close-over-type-parameter-1.rs:10:5\n+  --> $DIR/regions-close-over-type-parameter-1.rs:12:5\n    |\n LL |     box v as Box<dyn SomeTrait + 'static>\n    |     ^^^^^\n \n-error[E0310]: the parameter type `A` may not live long enough\n-  --> $DIR/regions-close-over-type-parameter-1.rs:10:5\n-   |\n-LL | fn make_object1<A:SomeTrait>(v: A) -> Box<dyn SomeTrait + 'static> {\n-   |                 -- help: consider adding an explicit lifetime bound...: `A: 'static +`\n-LL |     box v as Box<dyn SomeTrait + 'static>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that it can be closed over into an object\n-  --> $DIR/regions-close-over-type-parameter-1.rs:10:5\n-   |\n-LL |     box v as Box<dyn SomeTrait + 'static>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0309]: the parameter type `A` may not live long enough\n-  --> $DIR/regions-close-over-type-parameter-1.rs:20:5\n+  --> $DIR/regions-close-over-type-parameter-1.rs:21:5\n    |\n-LL | fn make_object3<'a,'b,A:SomeTrait+'a>(v: A) -> Box<dyn SomeTrait + 'b> {\n-   |                       -- help: consider adding an explicit lifetime bound...: `A: 'b +`\n+LL | fn make_object3<'a, 'b, A: SomeTrait + 'a>(v: A) -> Box<dyn SomeTrait + 'b> {\n+   |                         -- help: consider adding an explicit lifetime bound...: `A: 'b +`\n LL |     box v as Box<dyn SomeTrait + 'b>\n    |     ^^^^^\n    |\n note: ...so that the type `A` will meet its required lifetime bounds\n-  --> $DIR/regions-close-over-type-parameter-1.rs:20:5\n+  --> $DIR/regions-close-over-type-parameter-1.rs:21:5\n    |\n LL |     box v as Box<dyn SomeTrait + 'b>\n    |     ^^^^^\n \n-error[E0309]: the parameter type `A` may not live long enough\n-  --> $DIR/regions-close-over-type-parameter-1.rs:20:5\n-   |\n-LL | fn make_object3<'a,'b,A:SomeTrait+'a>(v: A) -> Box<dyn SomeTrait + 'b> {\n-   |                       -- help: consider adding an explicit lifetime bound...: `A: 'b +`\n-LL |     box v as Box<dyn SomeTrait + 'b>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: ...so that it can be closed over into an object\n-  --> $DIR/regions-close-over-type-parameter-1.rs:20:5\n-   |\n-LL |     box v as Box<dyn SomeTrait + 'b>\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0309, E0310.\n For more information about an error, try `rustc --explain E0309`."}, {"sha": "9f425125b9896eca564b1efc5b232e9c0e3a2564", "filename": "src/test/ui/regions/regions-escape-method.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.nll.stderr?ref=3d8a0733ae58749db958e929aa14108b869f7540", "patch": "@@ -1,11 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/regions-escape-method.rs:15:13\n-   |\n-LL |     s.f(|p| p)\n-   |          -- ^ returning this value requires that `'1` must outlive `'2`\n-   |          ||\n-   |          |return type of closure is &'2 i32\n-   |          has type `&'1 i32`\n-\n-error: aborting due to previous error\n-"}, {"sha": "69c01ae6906cb86c20df592de359a87a68a82cf1", "filename": "src/test/ui/regions/regions-escape-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.rs?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -12,5 +12,5 @@ impl S {\n \n fn main() {\n     let s = S;\n-    s.f(|p| p) //~ ERROR cannot infer\n+    s.f(|p| p) //~ ERROR lifetime may not live long enough\n }"}, {"sha": "9f425125b9896eca564b1efc5b232e9c0e3a2564", "filename": "src/test/ui/regions/regions-escape-method.stderr", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,32 +1,11 @@\n-error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n+error: lifetime may not live long enough\n   --> $DIR/regions-escape-method.rs:15:13\n    |\n LL |     s.f(|p| p)\n-   |             ^\n-   |\n-note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 15:9...\n-  --> $DIR/regions-escape-method.rs:15:9\n-   |\n-LL |     s.f(|p| p)\n-   |         ^^^^^\n-note: ...so that the expression is assignable\n-  --> $DIR/regions-escape-method.rs:15:13\n-   |\n-LL |     s.f(|p| p)\n-   |             ^\n-   = note: expected  `&i32`\n-              found  `&i32`\n-note: but, the lifetime must be valid for the method call at 15:5...\n-  --> $DIR/regions-escape-method.rs:15:5\n-   |\n-LL |     s.f(|p| p)\n-   |     ^^^^^^^^^^\n-note: ...so that a type/lifetime parameter is in scope here\n-  --> $DIR/regions-escape-method.rs:15:5\n-   |\n-LL |     s.f(|p| p)\n-   |     ^^^^^^^^^^\n+   |          -- ^ returning this value requires that `'1` must outlive `'2`\n+   |          ||\n+   |          |return type of closure is &'2 i32\n+   |          has type `&'1 i32`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`."}, {"sha": "cae6c33ac6e1759b00ff891f06aaf16cfa6f338a", "filename": "src/test/ui/regions/regions-escape-via-trait-or-not.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.nll.stderr?ref=3d8a0733ae58749db958e929aa14108b869f7540", "patch": "@@ -1,11 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/regions-escape-via-trait-or-not.rs:18:14\n-   |\n-LL |     with(|o| o)\n-   |           -- ^ returning this value requires that `'1` must outlive `'2`\n-   |           ||\n-   |           |return type of closure is &'2 isize\n-   |           has type `&'1 isize`\n-\n-error: aborting due to previous error\n-"}, {"sha": "ac0e56de4a0300eb73839fae3503dd2250bd64a2", "filename": "src/test/ui/regions/regions-escape-via-trait-or-not.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.rs?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -15,7 +15,7 @@ fn with<R:Deref, F>(f: F) -> isize where F: FnOnce(&isize) -> R {\n }\n \n fn return_it() -> isize {\n-    with(|o| o) //~ ERROR cannot infer\n+    with(|o| o) //~ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "cae6c33ac6e1759b00ff891f06aaf16cfa6f338a", "filename": "src/test/ui/regions/regions-escape-via-trait-or-not.stderr", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,32 +1,11 @@\n-error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n+error: lifetime may not live long enough\n   --> $DIR/regions-escape-via-trait-or-not.rs:18:14\n    |\n LL |     with(|o| o)\n-   |              ^\n-   |\n-note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 18:10...\n-  --> $DIR/regions-escape-via-trait-or-not.rs:18:10\n-   |\n-LL |     with(|o| o)\n-   |          ^^^^^\n-note: ...so that the expression is assignable\n-  --> $DIR/regions-escape-via-trait-or-not.rs:18:14\n-   |\n-LL |     with(|o| o)\n-   |              ^\n-   = note: expected  `&isize`\n-              found  `&isize`\n-note: but, the lifetime must be valid for the expression at 18:5...\n-  --> $DIR/regions-escape-via-trait-or-not.rs:18:5\n-   |\n-LL |     with(|o| o)\n-   |     ^^^^\n-note: ...so type `fn([closure@$DIR/regions-escape-via-trait-or-not.rs:18:10: 18:15]) -> isize {with::<&isize, [closure@$DIR/regions-escape-via-trait-or-not.rs:18:10: 18:15]>}` of expression is valid during the expression\n-  --> $DIR/regions-escape-via-trait-or-not.rs:18:5\n-   |\n-LL |     with(|o| o)\n-   |     ^^^^\n+   |           -- ^ returning this value requires that `'1` must outlive `'2`\n+   |           ||\n+   |           |return type of closure is &'2 isize\n+   |           has type `&'1 isize`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`."}, {"sha": "ca51555a07749355b46a7d02bdd995d97022a486", "filename": "src/test/ui/regions/regions-infer-call-3.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.nll.stderr?ref=3d8a0733ae58749db958e929aa14108b869f7540", "patch": "@@ -1,11 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/regions-infer-call-3.rs:8:24\n-   |\n-LL |     let z = with(|y| { select(x, y) });\n-   |                   --   ^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\n-   |                   ||\n-   |                   |return type of closure is &'2 isize\n-   |                   has type `&'1 isize`\n-\n-error: aborting due to previous error\n-"}, {"sha": "063ec84288d1f79a57dde81a7362d86392b6fb3d", "filename": "src/test/ui/regions/regions-infer-call-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.rs?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -6,7 +6,7 @@ fn with<T, F>(f: F) -> T where F: FnOnce(&isize) -> T {\n \n fn manip<'a>(x: &'a isize) -> isize {\n     let z = with(|y| { select(x, y) });\n-    //~^ ERROR cannot infer\n+    //~^ ERROR lifetime may not live long enough\n     *z\n }\n "}, {"sha": "ca51555a07749355b46a7d02bdd995d97022a486", "filename": "src/test/ui/regions/regions-infer-call-3.stderr", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,30 +1,11 @@\n-error[E0495]: cannot infer an appropriate lifetime for lifetime parameter 'r in function call due to conflicting requirements\n+error: lifetime may not live long enough\n   --> $DIR/regions-infer-call-3.rs:8:24\n    |\n LL |     let z = with(|y| { select(x, y) });\n-   |                        ^^^^^^^^^^^^\n-   |\n-note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 8:18...\n-  --> $DIR/regions-infer-call-3.rs:8:18\n-   |\n-LL |     let z = with(|y| { select(x, y) });\n-   |                  ^^^^^^^^^^^^^^^^^^^^\n-note: ...so that reference does not outlive borrowed content\n-  --> $DIR/regions-infer-call-3.rs:8:34\n-   |\n-LL |     let z = with(|y| { select(x, y) });\n-   |                                  ^\n-note: but, the lifetime must be valid for the call at 8:13...\n-  --> $DIR/regions-infer-call-3.rs:8:13\n-   |\n-LL |     let z = with(|y| { select(x, y) });\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...so type `&isize` of expression is valid during the expression\n-  --> $DIR/regions-infer-call-3.rs:8:13\n-   |\n-LL |     let z = with(|y| { select(x, y) });\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   --   ^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\n+   |                   ||\n+   |                   |return type of closure is &'2 isize\n+   |                   has type `&'1 isize`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`."}, {"sha": "4c275b19492c69a0d6088f0721969a2badfee555", "filename": "src/test/ui/regions/regions-return-ref-to-upvar-issue-17403.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d8a0733ae58749db958e929aa14108b869f7540/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.nll.stderr?ref=3d8a0733ae58749db958e929aa14108b869f7540", "patch": "@@ -1,13 +0,0 @@\n-error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/regions-return-ref-to-upvar-issue-17403.rs:7:24\n-   |\n-LL |         let mut f = || &mut x;\n-   |                      - ^^^^^^ returns a reference to a captured variable which escapes the closure body\n-   |                      |\n-   |                      inferred to be a `FnMut` closure\n-   |\n-   = note: `FnMut` closures only have access to their captured variables while they are executing...\n-   = note: ...therefore, they cannot allow references to captured variables to escape\n-\n-error: aborting due to previous error\n-"}, {"sha": "86e759f088a549e7d4aa8f87577810e28b8bb1c7", "filename": "src/test/ui/regions/regions-return-ref-to-upvar-issue-17403.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.rs?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     // Unboxed closure case\n     {\n         let mut x = 0;\n-        let mut f = || &mut x; //~ ERROR cannot infer\n+        let mut f = || &mut x; //~ ERROR captured variable cannot escape `FnMut` closure body\n         let x = f();\n         let y = f();\n     }"}, {"sha": "4c275b19492c69a0d6088f0721969a2badfee555", "filename": "src/test/ui/regions/regions-return-ref-to-upvar-issue-17403.stderr", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.stderr?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -1,30 +1,13 @@\n-error[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n+error: captured variable cannot escape `FnMut` closure body\n   --> $DIR/regions-return-ref-to-upvar-issue-17403.rs:7:24\n    |\n LL |         let mut f = || &mut x;\n-   |                        ^^^^^^\n+   |                      - ^^^^^^ returns a reference to a captured variable which escapes the closure body\n+   |                      |\n+   |                      inferred to be a `FnMut` closure\n    |\n-note: first, the lifetime cannot outlive the lifetime `'_` as defined on the body at 7:21...\n-  --> $DIR/regions-return-ref-to-upvar-issue-17403.rs:7:21\n-   |\n-LL |         let mut f = || &mut x;\n-   |                     ^^^^^^^^^\n-note: ...so that closure can access `x`\n-  --> $DIR/regions-return-ref-to-upvar-issue-17403.rs:7:24\n-   |\n-LL |         let mut f = || &mut x;\n-   |                        ^^^^^^\n-note: but, the lifetime must be valid for the call at 9:17...\n-  --> $DIR/regions-return-ref-to-upvar-issue-17403.rs:9:17\n-   |\n-LL |         let y = f();\n-   |                 ^^^\n-note: ...so type `&mut i32` of expression is valid during the expression\n-  --> $DIR/regions-return-ref-to-upvar-issue-17403.rs:9:17\n-   |\n-LL |         let y = f();\n-   |                 ^^^\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`."}, {"sha": "cdcf89e4e614e31263fc0b327eceafb6fe410f24", "filename": "src/test/ui/symbol-names/impl1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f3063cfaa792435ed88a92927bb2641388a7c6/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs?ref=f9f3063cfaa792435ed88a92927bb2641388a7c6", "patch": "@@ -3,8 +3,8 @@\n // revisions: legacy v0\n //[legacy]compile-flags: -Z symbol-mangling-version=legacy\n     //[v0]compile-flags: -Z symbol-mangling-version=v0\n-//[legacy]normalize-stderr-32bit: \"hdb62078998ce7ea8\" -> \"SYMBOL_HASH\"\n-//[legacy]normalize-stderr-64bit: \"h62e540f14f879d56\" -> \"SYMBOL_HASH\"\n+//[legacy]normalize-stderr-32bit: \"h5ef5dfc14aeecbfc\" -> \"SYMBOL_HASH\"\n+//[legacy]normalize-stderr-64bit: \"h9e54d216f70fcbc5\" -> \"SYMBOL_HASH\"\n \n #![feature(optin_builtin_traits, rustc_attrs)]\n #![allow(dead_code)]"}]}