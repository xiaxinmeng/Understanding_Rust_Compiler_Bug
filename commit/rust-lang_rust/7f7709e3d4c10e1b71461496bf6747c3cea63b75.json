{"sha": "7f7709e3d4c10e1b71461496bf6747c3cea63b75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNzcwOWUzZDRjMTBlMWI3MTQ2MTQ5NmJmNjc0N2MzY2VhNjNiNzU=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-12-31T01:46:30Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-02-22T19:11:15Z"}, "message": "Generalized article_and_description", "tree": {"sha": "9a12f3002ed5894e239511bdf8e0a3da01c91364", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a12f3002ed5894e239511bdf8e0a3da01c91364"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f7709e3d4c10e1b71461496bf6747c3cea63b75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f7709e3d4c10e1b71461496bf6747c3cea63b75", "html_url": "https://github.com/rust-lang/rust/commit/7f7709e3d4c10e1b71461496bf6747c3cea63b75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f7709e3d4c10e1b71461496bf6747c3cea63b75/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a", "html_url": "https://github.com/rust-lang/rust/commit/3eeefc21f1a3ed9755c072c83808ed5c087b8c9a"}], "stats": {"total": 97, "additions": 83, "deletions": 14}, "files": [{"sha": "fd2f58d24f8ddd1408c3bb0051dc76e713a54167", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f7709e3d4c10e1b71461496bf6747c3cea63b75/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f7709e3d4c10e1b71461496bf6747c3cea63b75/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=7f7709e3d4c10e1b71461496bf6747c3cea63b75", "patch": "@@ -209,7 +209,7 @@ fn validate_hir_id_for_typeck_tables(\n             ty::tls::with(|tcx| {\n                 bug!(\n                     \"node {} with HirId::owner {:?} cannot be placed in \\\n-                        TypeckTables with local_id_root {:?}\",\n+                     TypeckTables with local_id_root {:?}\",\n                     tcx.hir().node_to_string(hir_id),\n                     DefId::local(hir_id.owner),\n                     local_id_root\n@@ -1512,6 +1512,20 @@ impl<'tcx> TyCtxt<'tcx> {\n                 .subst(*self, self.mk_substs([self.lifetimes.re_static.into()].iter())),\n         )\n     }\n+\n+    /// Returns a displayable description and article for the given `def_id` (e.g. `(\"a\", \"closure\")`).\n+    pub fn article_and_description(\n+        &self,\n+        def_id: crate::hir::def_id::DefId,\n+    ) -> (&'static str, &'static str) {\n+        self.def_kind(def_id).map_or_else(\n+            || {\n+                // TODO: is it a problem to try to use the ty here?\n+                self.type_of(def_id).kind.article_and_description()\n+            },\n+            |def_kind| (def_kind.article(), def_kind.descr(def_id)),\n+        )\n+    }\n }\n \n impl<'tcx> GlobalCtxt<'tcx> {"}, {"sha": "a54bf4d7eff38d03f6872a7f563740058b48c4a6", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7f7709e3d4c10e1b71461496bf6747c3cea63b75/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f7709e3d4c10e1b71461496bf6747c3cea63b75/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=7f7709e3d4c10e1b71461496bf6747c3cea63b75", "patch": "@@ -254,6 +254,41 @@ pub enum TyKind<'tcx> {\n     Error,\n }\n \n+impl<'tcx> TyKind<'tcx> {\n+    pub fn article_and_description(&self) -> (&'static str, &'static str) {\n+        match *self {\n+            Bool => (\"a\", \"boolean value\"),\n+            Char => (\"a\", \"character\"),\n+            Int(..) => (\"a\", \"signed interger\"),\n+            Uint(..) => (\"an\", \"unsigned integer\"),\n+            Float(..) => (\"a\", \"floating point number\"),\n+            Adt(..) => (\"an\", \"abstract data type\"),\n+            Foreign(..) => (\"a\", \"foreign type\"),\n+            Str => (\"a\", \"string slice\"),\n+            Array(..) => (\"an\", \"array\"),\n+            Slice(..) => (\"a\", \"slice\"),\n+            RawPtr(..) => (\"a\", \"raw pointer\"),\n+            Ref(..) => (\"a\", \"reference\"),\n+            FnDef(..) => (\"a\", \"function\"),\n+            FnPtr(..) => (\"a\", \"function pointer\"),\n+            Dynamic(..) => (\"a\", \"trait object\"),\n+            Closure(..) => (\"a\", \"closure\"),\n+            Generator(..) => (\"a\", \"generator\"),\n+            GeneratorWitness(..) => (\"a\", \"generator witness\"),\n+            Never => (\"a\", \"never\"),\n+            Tuple(..) => (\"a\", \"tuple\"),\n+            Projection(..) => (\"a\", \"projection\"),\n+            UnnormalizedProjection(..) => (\"an\", \"unnormalized projection\"),\n+            Opaque(..) => (\"an\", \"opaque type\"),\n+            Param(..) => (\"a\", \"type parameter\"),\n+            Bound(..) => (\"a\", \"bound type variable\"),\n+            Placeholder(..) => (\"a\", \"universally quantified higher-ranked type\"),\n+            Infer(..) => (\"an\", \"inference variable\"),\n+            Error => (\"a\", \"type error\"),\n+        }\n+    }\n+}\n+\n // `TyKind` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n static_assert_size!(TyKind<'_>, 24);"}, {"sha": "41a99d1125b5de9507ae63c38dc9b1201ad6a884", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f7709e3d4c10e1b71461496bf6747c3cea63b75/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f7709e3d4c10e1b71461496bf6747c3cea63b75/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=7f7709e3d4c10e1b71461496bf6747c3cea63b75", "patch": "@@ -1257,7 +1257,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n             _ => bug!(\n                 \"report_escaping_closure_capture called with unexpected constraint \\\n-                       category: `{:?}`\",\n+                 category: `{:?}`\",\n                 category\n             ),\n         };\n@@ -1279,8 +1279,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             let tables = tcx.typeck_tables_of(self.mir_def_id);\n             let mir_hir_id = tcx.hir().def_index_to_hir_id(self.mir_def_id.index);\n             match tables.node_type(mir_hir_id).kind {\n-                ty::Closure(..) => \"closure\",\n-                ty::Generator(..) => \"generator\",\n+                ref kind @ ty::Closure(..) | ref kind @ ty::Generator(..) => {\n+                    kind.article_and_description().1\n+                }\n                 _ => bug!(\"Closure body doesn't have a closure or generator type\"),\n             }\n         } else {"}, {"sha": "0f0fd64844a8d618b2c3a3d97a3e9b73475486d5", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f7709e3d4c10e1b71461496bf6747c3cea63b75/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f7709e3d4c10e1b71461496bf6747c3cea63b75/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=7f7709e3d4c10e1b71461496bf6747c3cea63b75", "patch": "@@ -427,18 +427,15 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             errci.outlived_fr,\n         );\n \n-        let escapes_from = match self.regioncx.universal_regions().defining_ty {\n-            DefiningTy::Closure(..) => \"closure\",\n-            DefiningTy::Generator(..) => \"generator\",\n-            DefiningTy::FnDef(..) => \"function\",\n-            DefiningTy::Const(..) => \"const\",\n-        };\n+        let (_, escapes_from) =\n+            self.infcx.tcx.article_and_description(self.universal_regions.defining_ty.def_id());\n \n         // Revert to the normal error in these cases.\n         // Assignments aren't \"escapes\" in function items.\n         if (fr_name_and_span.is_none() && outlived_fr_name_and_span.is_none())\n-            || (*category == ConstraintCategory::Assignment && escapes_from == \"function\")\n-            || escapes_from == \"const\"\n+            || (*category == ConstraintCategory::Assignment\n+                && self.universal_regions.defining_ty.is_fn_def())\n+            || self.universal_regions.defining_ty.is_closure()\n         {\n             return self.report_general_error(&ErrorConstraintInfo {\n                 fr_is_local: true,\n@@ -504,8 +501,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let mut diag =\n             self.infcx.tcx.sess.struct_span_err(*span, \"lifetime may not live long enough\");\n \n-        let mir_def_name =\n-            if self.infcx.tcx.is_closure(self.mir_def_id) { \"closure\" } else { \"function\" };\n+        let (_, mir_def_name) = self.infcx.tcx.article_and_description(self.mir_def_id);\n \n         let fr_name = self.give_region_a_name(*fr).unwrap();\n         fr_name.highlight_region_name(&mut diag);"}, {"sha": "777eea22eb639bc73bc23a5523da976ad00d2534", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7f7709e3d4c10e1b71461496bf6747c3cea63b75/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f7709e3d4c10e1b71461496bf6747c3cea63b75/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=7f7709e3d4c10e1b71461496bf6747c3cea63b75", "patch": "@@ -131,6 +131,29 @@ impl<'tcx> DefiningTy<'tcx> {\n             DefiningTy::FnDef(..) | DefiningTy::Const(..) => 0,\n         }\n     }\n+\n+    pub fn is_closure(&self) -> bool {\n+        match *self {\n+            DefiningTy::Closure(..) => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn is_fn_def(&self) -> bool {\n+        match *self {\n+            DefiningTy::FnDef(..) => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn def_id(&self) -> DefId {\n+        match *self {\n+            DefiningTy::Closure(def_id, ..) => def_id,\n+            DefiningTy::Generator(def_id, ..) => def_id,\n+            DefiningTy::FnDef(def_id, ..) => def_id,\n+            DefiningTy::Const(def_id, ..) => def_id,\n+        }\n+    }\n }\n \n #[derive(Debug)]"}]}