{"sha": "8c17a3e7cb0717fbc849f2a8250e8f5b88a1a3c7", "node_id": "C_kwDOAAsO6NoAKDhjMTdhM2U3Y2IwNzE3ZmJjODQ5ZjJhODI1MGU4ZjViODhhMWEzYzc", "commit": {"author": {"name": "Ibraheem Ahmed", "email": "ibraheem@ibraheem.ca", "date": "2022-10-17T23:17:10Z"}, "committer": {"name": "Ibraheem Ahmed", "email": "ibraheem@ibraheem.ca", "date": "2022-11-10T04:20:02Z"}, "message": "remove extra spinning from `mpsc::Receiver::recv`", "tree": {"sha": "3e48af96260ed735a310bea2f9b6de462db2093d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e48af96260ed735a310bea2f9b6de462db2093d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c17a3e7cb0717fbc849f2a8250e8f5b88a1a3c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c17a3e7cb0717fbc849f2a8250e8f5b88a1a3c7", "html_url": "https://github.com/rust-lang/rust/commit/8c17a3e7cb0717fbc849f2a8250e8f5b88a1a3c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c17a3e7cb0717fbc849f2a8250e8f5b88a1a3c7/comments", "author": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb394c026a1645d5511c987006ef190755289451", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb394c026a1645d5511c987006ef190755289451", "html_url": "https://github.com/rust-lang/rust/commit/cb394c026a1645d5511c987006ef190755289451"}], "stats": {"total": 32, "additions": 6, "deletions": 26}, "files": [{"sha": "dfa477021031a7c3020228d99f1da6aef25b77d2", "filename": "library/std/src/sync/mpmc/array.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8c17a3e7cb0717fbc849f2a8250e8f5b88a1a3c7/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c17a3e7cb0717fbc849f2a8250e8f5b88a1a3c7/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Farray.rs?ref=8c17a3e7cb0717fbc849f2a8250e8f5b88a1a3c7", "patch": "@@ -379,19 +379,9 @@ impl<T> Channel<T> {\n     pub(crate) fn recv(&self, deadline: Option<Instant>) -> Result<T, RecvTimeoutError> {\n         let token = &mut Token::default();\n         loop {\n-            // Try receiving a message several times.\n-            let backoff = Backoff::new();\n-            loop {\n-                if self.start_recv(token) {\n-                    let res = unsafe { self.read(token) };\n-                    return res.map_err(|_| RecvTimeoutError::Disconnected);\n-                }\n-\n-                if backoff.is_completed() {\n-                    break;\n-                } else {\n-                    backoff.snooze();\n-                }\n+            if self.start_recv(token) {\n+                let res = unsafe { self.read(token) };\n+                return res.map_err(|_| RecvTimeoutError::Disconnected);\n             }\n \n             if let Some(d) = deadline {"}, {"sha": "4761125e483f8d9a2dc189ba28705a0e4ee7f43b", "filename": "library/std/src/sync/mpmc/list.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8c17a3e7cb0717fbc849f2a8250e8f5b88a1a3c7/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c17a3e7cb0717fbc849f2a8250e8f5b88a1a3c7/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpmc%2Flist.rs?ref=8c17a3e7cb0717fbc849f2a8250e8f5b88a1a3c7", "patch": "@@ -418,19 +418,9 @@ impl<T> Channel<T> {\n     pub(crate) fn recv(&self, deadline: Option<Instant>) -> Result<T, RecvTimeoutError> {\n         let token = &mut Token::default();\n         loop {\n-            // Try receiving a message several times.\n-            let backoff = Backoff::new();\n-            loop {\n-                if self.start_recv(token) {\n-                    unsafe {\n-                        return self.read(token).map_err(|_| RecvTimeoutError::Disconnected);\n-                    }\n-                }\n-\n-                if backoff.is_completed() {\n-                    break;\n-                } else {\n-                    backoff.snooze();\n+            if self.start_recv(token) {\n+                unsafe {\n+                    return self.read(token).map_err(|_| RecvTimeoutError::Disconnected);\n                 }\n             }\n "}]}