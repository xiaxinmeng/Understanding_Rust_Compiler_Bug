{"sha": "b153219556e20cb9f0e70c6a064cdfd10469ea32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNTMyMTk1NTZlMjBjYjlmMGU3MGM2YTA2NGNkZmQxMDQ2OWVhMzI=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-09-04T00:36:55Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-05T03:09:51Z"}, "message": "std::str: Deny surrogates in is_utf8\n\nReject codepoints \\uD800 to \\uDFFF which are the surrogates\n(reserved/unused codepoints that are invalid to encode into UTF-8)\n\nThe surrogates is the only hole of invalid codepoints in the range from\n\\u0 to \\u10FFFF.", "tree": {"sha": "9898ec0910efb8c595047bafcf4276510aeab8fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9898ec0910efb8c595047bafcf4276510aeab8fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b153219556e20cb9f0e70c6a064cdfd10469ea32", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b153219556e20cb9f0e70c6a064cdfd10469ea32", "html_url": "https://github.com/rust-lang/rust/commit/b153219556e20cb9f0e70c6a064cdfd10469ea32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b153219556e20cb9f0e70c6a064cdfd10469ea32/comments", "author": null, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b49e9fa794addc197e58743bdc120cb9740b73c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b49e9fa794addc197e58743bdc120cb9740b73c0", "html_url": "https://github.com/rust-lang/rust/commit/b49e9fa794addc197e58743bdc120cb9740b73c0"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "704a9f058568630508540a42acc1fd945569af0c", "filename": "src/libstd/str.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b153219556e20cb9f0e70c6a064cdfd10469ea32/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b153219556e20cb9f0e70c6a064cdfd10469ea32/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=b153219556e20cb9f0e70c6a064cdfd10469ea32", "patch": "@@ -799,6 +799,8 @@ pub fn is_utf8(v: &[u8]) -> bool {\n             //        first  C2 80        last DF BF\n             // 3-byte encoding is for codepoints  \\u0800 to  \\uffff\n             //        first  E0 A0 80     last EF BF BF\n+            //   excluding surrogates codepoints  \\ud800 to  \\udfff\n+            //               ED A0 80 to       ED BF BF\n             // 4-byte encoding is for codepoints \\u10000 to \\u10ffff\n             //        first  F0 90 80 80  last F4 8F BF BF\n             //\n@@ -812,8 +814,6 @@ pub fn is_utf8(v: &[u8]) -> bool {\n             // UTF8-4      = %xF0 %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) /\n             //               %xF4 %x80-8F 2( UTF8-tail )\n             // UTF8-tail   = %x80-BF\n-            // --\n-            // This code allows surrogate pairs: \\uD800 to \\uDFFF -> ED A0 80 to ED BF BF\n             match w {\n                 2 => if unsafe_get(v, i + 1) & 192u8 != TAG_CONT_U8 {\n                     return false\n@@ -822,7 +822,9 @@ pub fn is_utf8(v: &[u8]) -> bool {\n                             unsafe_get(v, i + 1),\n                             unsafe_get(v, i + 2) & 192u8) {\n                     (0xE0        , 0xA0 .. 0xBF, TAG_CONT_U8) => (),\n-                    (0xE1 .. 0xEF, 0x80 .. 0xBF, TAG_CONT_U8) => (),\n+                    (0xE1 .. 0xEC, 0x80 .. 0xBF, TAG_CONT_U8) => (),\n+                    (0xED        , 0x80 .. 0x9F, TAG_CONT_U8) => (),\n+                    (0xEE .. 0xEF, 0x80 .. 0xBF, TAG_CONT_U8) => (),\n                     _ => return false,\n                 },\n                 _ => match (v_i,\n@@ -3012,6 +3014,7 @@ mod tests {\n \n     #[test]\n     fn test_is_utf8() {\n+        // deny overlong encodings\n         assert!(!is_utf8([0xc0, 0x80]));\n         assert!(!is_utf8([0xc0, 0xae]));\n         assert!(!is_utf8([0xe0, 0x80, 0x80]));\n@@ -3020,9 +3023,15 @@ mod tests {\n         assert!(!is_utf8([0xf0, 0x82, 0x82, 0xac]));\n         assert!(!is_utf8([0xf4, 0x90, 0x80, 0x80]));\n \n+        // deny surrogates\n+        assert!(!is_utf8([0xED, 0xA0, 0x80]));\n+        assert!(!is_utf8([0xED, 0xBF, 0xBF]));\n+\n         assert!(is_utf8([0xC2, 0x80]));\n         assert!(is_utf8([0xDF, 0xBF]));\n         assert!(is_utf8([0xE0, 0xA0, 0x80]));\n+        assert!(is_utf8([0xED, 0x9F, 0xBF]));\n+        assert!(is_utf8([0xEE, 0x80, 0x80]));\n         assert!(is_utf8([0xEF, 0xBF, 0xBF]));\n         assert!(is_utf8([0xF0, 0x90, 0x80, 0x80]));\n         assert!(is_utf8([0xF4, 0x8F, 0xBF, 0xBF]));"}]}