{"sha": "ffc13b2f80dfe60895bb415175fa246d7247a33c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYzEzYjJmODBkZmU2MDg5NWJiNDE1MTc1ZmEyNDZkNzI0N2EzM2M=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-07-21T16:41:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-07-28T16:05:04Z"}, "message": "Store `crate_disambiguator` as an `InternedString`\n\nWe used to use `Name`, but the session outlives the tokenizer, which\nmeans that attempts to read this field after trans has complete\notherwise panic. All reads want an `InternedString` anyhow.", "tree": {"sha": "fb945c4dad4a88f85609136da280a93fcd64d9e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb945c4dad4a88f85609136da280a93fcd64d9e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffc13b2f80dfe60895bb415175fa246d7247a33c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffc13b2f80dfe60895bb415175fa246d7247a33c", "html_url": "https://github.com/rust-lang/rust/commit/ffc13b2f80dfe60895bb415175fa246d7247a33c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffc13b2f80dfe60895bb415175fa246d7247a33c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b38c4bdea7acf72b8322660de5a4f86d561a65c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b38c4bdea7acf72b8322660de5a4f86d561a65c", "html_url": "https://github.com/rust-lang/rust/commit/2b38c4bdea7acf72b8322660de5a4f86d561a65c"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "cee18232ec98a05b71e2400ffc63b9a30bb833b3", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ffc13b2f80dfe60895bb415175fa246d7247a33c/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffc13b2f80dfe60895bb415175fa246d7247a33c/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=ffc13b2f80dfe60895bb415175fa246d7247a33c", "patch": "@@ -80,7 +80,7 @@ pub struct Session {\n     // forms a unique global identifier for the crate. It is used to allow\n     // multiple crates with the same name to coexist. See the\n     // trans::back::symbol_names module for more information.\n-    pub crate_disambiguator: Cell<ast::Name>,\n+    pub crate_disambiguator: RefCell<token::InternedString>,\n     pub features: RefCell<feature_gate::Features>,\n \n     /// The maximum recursion limit for potentially infinitely recursive\n@@ -106,6 +106,9 @@ pub struct Session {\n }\n \n impl Session {\n+    pub fn local_crate_disambiguator(&self) -> token::InternedString {\n+        self.crate_disambiguator.borrow().clone()\n+    }\n     pub fn struct_span_warn<'a, S: Into<MultiSpan>>(&'a self,\n                                                     sp: S,\n                                                     msg: &str)\n@@ -438,7 +441,7 @@ pub fn build_session_(sopts: config::Options,\n         plugin_attributes: RefCell::new(Vec::new()),\n         crate_types: RefCell::new(Vec::new()),\n         dependency_formats: RefCell::new(FnvHashMap()),\n-        crate_disambiguator: Cell::new(token::intern(\"\")),\n+        crate_disambiguator: RefCell::new(token::intern(\"\").as_str()),\n         features: RefCell::new(feature_gate::Features::new()),\n         recursion_limit: Cell::new(64),\n         next_node_id: Cell::new(1),"}, {"sha": "5444dd9476120ed2f8cb01418c7bb14b81afb83c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffc13b2f80dfe60895bb415175fa246d7247a33c/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffc13b2f80dfe60895bb415175fa246d7247a33c/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ffc13b2f80dfe60895bb415175fa246d7247a33c", "patch": "@@ -504,7 +504,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn crate_disambiguator(self, cnum: ast::CrateNum) -> token::InternedString {\n         if cnum == LOCAL_CRATE {\n-            self.sess.crate_disambiguator.get().as_str()\n+            self.sess.local_crate_disambiguator()\n         } else {\n             self.sess.cstore.crate_disambiguator(cnum)\n         }"}, {"sha": "e1fb7d05b72683a5cf95b6b9717b3a72b0d7c2fa", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ffc13b2f80dfe60895bb415175fa246d7247a33c/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffc13b2f80dfe60895bb415175fa246d7247a33c/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ffc13b2f80dfe60895bb415175fa246d7247a33c", "patch": "@@ -566,7 +566,8 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n     });\n \n     *sess.crate_types.borrow_mut() = collect_crate_types(sess, &krate.attrs);\n-    sess.crate_disambiguator.set(token::intern(&compute_crate_disambiguator(sess)));\n+    *sess.crate_disambiguator.borrow_mut() =\n+        token::intern(&compute_crate_disambiguator(sess)).as_str();\n \n     time(time_passes, \"recursion limit\", || {\n         middle::recursion_limit::update_recursion_limit(sess, &krate);"}, {"sha": "70704f5dec0d29d80a213288e1ef7cfddd68ed0c", "filename": "src/librustc_incremental/calculate_svh.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ffc13b2f80dfe60895bb415175fa246d7247a33c/src%2Flibrustc_incremental%2Fcalculate_svh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffc13b2f80dfe60895bb415175fa246d7247a33c/src%2Flibrustc_incremental%2Fcalculate_svh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh.rs?ref=ffc13b2f80dfe60895bb415175fa246d7247a33c", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'tcx> SvhCalculate for TyCtxt<'a, 'tcx, 'tcx> {\n         // to ensure it is not incorporating implementation artifacts into\n         // the hash that are not otherwise visible.)\n \n-        let crate_disambiguator = self.sess.crate_disambiguator.get();\n+        let crate_disambiguator = self.sess.local_crate_disambiguator();\n         let krate = self.map.krate();\n \n         // FIXME: this should use SHA1, not SipHash. SipHash is not built to\n@@ -47,10 +47,10 @@ impl<'a, 'tcx> SvhCalculate for TyCtxt<'a, 'tcx, 'tcx> {\n         // FIXME(#32753) -- at (*) we `to_le` for endianness, but is\n         // this enough, and does it matter anyway?\n         \"crate_disambiguator\".hash(&mut state);\n-        crate_disambiguator.as_str().len().to_le().hash(&mut state); // (*)\n-        crate_disambiguator.as_str().hash(&mut state);\n+        crate_disambiguator.len().to_le().hash(&mut state); // (*)\n+        crate_disambiguator.hash(&mut state);\n \n-        debug!(\"crate_disambiguator: {:?}\", crate_disambiguator.as_str());\n+        debug!(\"crate_disambiguator: {:?}\", crate_disambiguator);\n         debug!(\"state: {:?}\", state);\n \n         {"}, {"sha": "0b60fc386a7bbd8a84d2392fadc448499ae00851", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffc13b2f80dfe60895bb415175fa246d7247a33c/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffc13b2f80dfe60895bb415175fa246d7247a33c/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=ffc13b2f80dfe60895bb415175fa246d7247a33c", "patch": "@@ -243,7 +243,7 @@ impl<'a> CrateReader<'a> {\n \n         // Check for (potential) conflicts with the local crate\n         if self.local_crate_name == crate_name &&\n-           self.sess.crate_disambiguator.get().as_str() == disambiguator {\n+           self.sess.local_crate_disambiguator() == disambiguator {\n             span_fatal!(self.sess, span, E0519,\n                         \"the current crate is indistinguishable from one of its \\\n                          dependencies: it has the same crate-name `{}` and was \\"}, {"sha": "c896263de948ec295040a5e27b92c5a80fb3fd11", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffc13b2f80dfe60895bb415175fa246d7247a33c/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffc13b2f80dfe60895bb415175fa246d7247a33c/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=ffc13b2f80dfe60895bb415175fa246d7247a33c", "patch": "@@ -1893,7 +1893,7 @@ fn encode_metadata_inner(rbml_w: &mut Encoder,\n     encode_crate_name(rbml_w, &ecx.link_meta.crate_name);\n     encode_crate_triple(rbml_w, &ecx.tcx.sess.opts.target_triple);\n     encode_hash(rbml_w, &ecx.link_meta.crate_hash);\n-    encode_crate_disambiguator(rbml_w, &ecx.tcx.sess.crate_disambiguator.get().as_str());\n+    encode_crate_disambiguator(rbml_w, &ecx.tcx.sess.local_crate_disambiguator());\n     encode_dylib_dependency_formats(rbml_w, &ecx);\n     encode_panic_strategy(rbml_w, &ecx);\n "}]}