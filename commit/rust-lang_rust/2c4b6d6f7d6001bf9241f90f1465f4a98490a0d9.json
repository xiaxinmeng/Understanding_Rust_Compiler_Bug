{"sha": "2c4b6d6f7d6001bf9241f90f1465f4a98490a0d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNGI2ZDZmN2Q2MDAxYmY5MjQxZjkwZjE0NjVmNGE5ODQ5MGEwZDk=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-11T00:46:09Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2014-07-13T17:10:38Z"}, "message": "add make_method method to MacResult trait\n\nthis allows macro results to be parsed as methods", "tree": {"sha": "6d8f02407a344a97aaca64ef48e9c799d5524061", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d8f02407a344a97aaca64ef48e9c799d5524061"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c4b6d6f7d6001bf9241f90f1465f4a98490a0d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c4b6d6f7d6001bf9241f90f1465f4a98490a0d9", "html_url": "https://github.com/rust-lang/rust/commit/2c4b6d6f7d6001bf9241f90f1465f4a98490a0d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c4b6d6f7d6001bf9241f90f1465f4a98490a0d9/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c8bb5a68a82afc0a94769b115988f4012e5991b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c8bb5a68a82afc0a94769b115988f4012e5991b", "html_url": "https://github.com/rust-lang/rust/commit/6c8bb5a68a82afc0a94769b115988f4012e5991b"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "56484c4ba59dfbbda0fd1d290ad5e269374260c3", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2c4b6d6f7d6001bf9241f90f1465f4a98490a0d9/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4b6d6f7d6001bf9241f90f1465f4a98490a0d9/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=2c4b6d6f7d6001bf9241f90f1465f4a98490a0d9", "patch": "@@ -104,6 +104,9 @@ pub type IdentMacroExpanderFn =\n /// just into the compiler's internal macro table, for `make_def`).\n pub trait MacResult {\n     /// Define a new macro.\n+    // this should go away; the idea that a macro might expand into\n+    // either a macro definition or an expression, depending on what\n+    // the context wants, is kind of silly.\n     fn make_def(&self) -> Option<MacroDef> {\n         None\n     }\n@@ -115,6 +118,12 @@ pub trait MacResult {\n     fn make_items(&self) -> Option<SmallVector<Gc<ast::Item>>> {\n         None\n     }\n+\n+    /// Create zero or more methods.\n+    fn make_methods(&self) -> Option<SmallVector<Gc<ast::Method>>> {\n+        None\n+    }\n+\n     /// Create a pattern.\n     fn make_pat(&self) -> Option<Gc<ast::Pat>> {\n         None\n@@ -222,6 +231,7 @@ impl DummyResult {\n             span: sp,\n         }\n     }\n+\n }\n \n impl MacResult for DummyResult {\n@@ -232,6 +242,14 @@ impl MacResult for DummyResult {\n         Some(DummyResult::raw_pat(self.span))\n     }\n     fn make_items(&self) -> Option<SmallVector<Gc<ast::Item>>> {\n+        // this code needs a comment... why not always just return the Some() ?\n+        if self.expr_only {\n+            None\n+        } else {\n+            Some(SmallVector::zero())\n+        }\n+    }\n+    fn make_methods(&self) -> Option<SmallVector<Gc<ast::Method>>> {\n         if self.expr_only {\n             None\n         } else {"}, {"sha": "1eb37abb781a3d73e2f111fe4ebe734b707feed7", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2c4b6d6f7d6001bf9241f90f1465f4a98490a0d9/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4b6d6f7d6001bf9241f90f1465f4a98490a0d9/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=2c4b6d6f7d6001bf9241f90f1465f4a98490a0d9", "patch": "@@ -38,7 +38,7 @@ struct ParserAnyMacro<'a> {\n impl<'a> ParserAnyMacro<'a> {\n     /// Make sure we don't have any tokens left to parse, so we don't\n     /// silently drop anything. `allow_semi` is so that \"optional\"\n-    /// semilons at the end of normal expressions aren't complained\n+    /// semicolons at the end of normal expressions aren't complained\n     /// about e.g. the semicolon in `macro_rules! kapow( () => {\n     /// fail!(); } )` doesn't get picked up by .parse_expr(), but it's\n     /// allowed to be there.\n@@ -73,6 +73,9 @@ impl<'a> MacResult for ParserAnyMacro<'a> {\n         let mut ret = SmallVector::zero();\n         loop {\n             let mut parser = self.parser.borrow_mut();\n+            // so... do outer attributes attached to the macro invocation\n+            // just disappear? This question applies to make_methods, as\n+            // well.\n             match parser.parse_item_with_outer_attributes() {\n                 Some(item) => ret.push(item),\n                 None => break\n@@ -81,6 +84,20 @@ impl<'a> MacResult for ParserAnyMacro<'a> {\n         self.ensure_complete_parse(false);\n         Some(ret)\n     }\n+\n+    fn make_methods(&self) -> Option<SmallVector<Gc<ast::Method>>> {\n+        let mut ret = SmallVector::zero();\n+        loop {\n+            let mut parser = self.parser.borrow_mut();\n+            match parser.token {\n+                EOF => break,\n+                _ => ret.push(parser.parse_method(None))\n+            }\n+        }\n+        self.ensure_complete_parse(false);\n+        Some(ret)\n+    }\n+\n     fn make_stmt(&self) -> Option<Gc<ast::Stmt>> {\n         let attrs = self.parser.borrow_mut().parse_outer_attributes();\n         let ret = self.parser.borrow_mut().parse_stmt(attrs);"}]}