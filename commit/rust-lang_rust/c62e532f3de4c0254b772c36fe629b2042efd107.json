{"sha": "c62e532f3de4c0254b772c36fe629b2042efd107", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MmU1MzJmM2RlNGMwMjU0Yjc3MmMzNmZlNjI5YjIwNDJlZmQxMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-22T23:31:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-22T23:31:08Z"}, "message": "Auto merge of #40748 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 13 pull requests\n\n- Successful merges: #40509, #40523, #40548, #40578, #40619, #40689, #40690, #40692, #40704, #40722, #40723, #40725, #40732\n- Failed merges:", "tree": {"sha": "ba6bc78a81ee801d4598b390cee6ff0ebd0b52d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba6bc78a81ee801d4598b390cee6ff0ebd0b52d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c62e532f3de4c0254b772c36fe629b2042efd107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c62e532f3de4c0254b772c36fe629b2042efd107", "html_url": "https://github.com/rust-lang/rust/commit/c62e532f3de4c0254b772c36fe629b2042efd107", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c62e532f3de4c0254b772c36fe629b2042efd107/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c4f2c64c6759a82f143e23964a46a65c67509c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c4f2c64c6759a82f143e23964a46a65c67509c9", "html_url": "https://github.com/rust-lang/rust/commit/8c4f2c64c6759a82f143e23964a46a65c67509c9"}, {"sha": "0e57709161e137c67291e2786806db761048984c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e57709161e137c67291e2786806db761048984c", "html_url": "https://github.com/rust-lang/rust/commit/0e57709161e137c67291e2786806db761048984c"}], "stats": {"total": 345, "additions": 232, "deletions": 113}, "files": [{"sha": "fca7d1cc5bd3c9d4c1afb75535ae219441752ef7", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -16,7 +16,7 @@ Read [\"Installing Rust\"] from [The Book].\n \n 1. Make sure you have installed the dependencies:\n \n-   * `g++` 4.7 or later or `clang++` 3.x\n+   * `g++` 4.7 or later or `clang++` 3.x or later\n    * `python` 2.7 (but not 3.x)\n    * GNU `make` 3.81 or later\n    * `cmake` 3.4.3 or later"}, {"sha": "0e7ebf12a2a91ad46964477afcdaee128ae893c0", "filename": "appveyor.yml", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -43,14 +43,14 @@ environment:\n   # *not* use debug assertions and llvm assertions. This is because they take\n   # too long on appveyor and this is tested by rustbuild below.\n   - MSYS_BITS: 32\n-    RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n+    RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-ninja\n     SCRIPT: python x.py test\n     MINGW_URL: https://s3.amazonaws.com/rust-lang-ci\n     MINGW_ARCHIVE: i686-4.9.2-release-win32-dwarf-rt_v4-rev4.7z\n     MINGW_DIR: mingw32\n   - MSYS_BITS: 64\n     SCRIPT: python x.py test\n-    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n+    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-ninja\n     MINGW_URL: https://s3.amazonaws.com/rust-lang-ci\n     MINGW_ARCHIVE: x86_64-4.9.2-release-win32-seh-rt_v4-rev4.7z\n     MINGW_DIR: mingw64\n@@ -68,15 +68,15 @@ environment:\n     SCRIPT: python x.py dist\n     DEPLOY: 1\n   - MSYS_BITS: 32\n-    RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-extended\n+    RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-extended --enable-ninja\n     SCRIPT: python x.py dist\n     MINGW_URL: https://s3.amazonaws.com/rust-lang-ci\n     MINGW_ARCHIVE: i686-4.9.2-release-win32-dwarf-rt_v4-rev4.7z\n     MINGW_DIR: mingw32\n     DEPLOY: 1\n   - MSYS_BITS: 64\n     SCRIPT: python x.py dist\n-    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-extended\n+    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-extended --enable-ninja\n     MINGW_URL: https://s3.amazonaws.com/rust-lang-ci\n     MINGW_ARCHIVE: x86_64-4.9.2-release-win32-seh-rt_v4-rev4.7z\n     MINGW_DIR: mingw64\n@@ -116,9 +116,16 @@ install:\n \n   # Download and install sccache\n   - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-16-sccache-x86_64-pc-windows-msvc\n-  - mv 2017-03-16-sccache-x86_64-pc-windows-msvc sccache\n+  - mv 2017-03-16-sccache-x86_64-pc-windows-msvc sccache.exe\n   - set PATH=%PATH%;%CD%\n \n+  # Download and install ninja\n+  #\n+  # Note that this is originally from the github releases patch of Ninja\n+  - appveyor-retry appveyor DownloadFile https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-03-15-ninja-win.zip\n+  - 7z x 2017-03-15-ninja-win.zip\n+  # - set PATH=%PATH%;%CD% -- this already happens above for sccache\n+\n   # Install InnoSetup to get `iscc` used to produce installers\n   - appveyor-retry choco install -y InnoSetup\n   - set PATH=\"C:\\Program Files (x86)\\Inno Setup 5\";%PATH%"}, {"sha": "52ebf401aefd6d3eff0eab632e4dee97b1df6ac7", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -23,7 +23,7 @@ use std::process;\n use num_cpus;\n use rustc_serialize::Decodable;\n use toml::{Parser, Decoder, Value};\n-use util::push_exe_path;\n+use util::{exe, push_exe_path};\n \n /// Global configuration for the entire build and/or bootstrap.\n ///\n@@ -584,10 +584,10 @@ impl Config {\n                     self.python = Some(path);\n                 }\n                 \"CFG_ENABLE_CCACHE\" if value == \"1\" => {\n-                    self.ccache = Some(\"ccache\".to_string());\n+                    self.ccache = Some(exe(\"ccache\", &self.build));\n                 }\n                 \"CFG_ENABLE_SCCACHE\" if value == \"1\" => {\n-                    self.ccache = Some(\"sccache\".to_string());\n+                    self.ccache = Some(exe(\"sccache\", &self.build));\n                 }\n                 \"CFG_CONFIGURE_ARGS\" if value.len() > 0 => {\n                     self.configure_args = value.split_whitespace()"}, {"sha": "9bd223ca406b1170a24942d6474f9e8a56f4a420", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -1 +1 @@\n-Subproject commit e6d6caab41471f7115a621029bd428a812c5260e\n+Subproject commit 9bd223ca406b1170a24942d6474f9e8a56f4a420"}, {"sha": "9effcfc774c7743bc55a7756741ed2ad263680ff", "filename": "src/doc/unstable-book/src/sort-unstable.md", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Fdoc%2Funstable-book%2Fsrc%2Fsort-unstable.md", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Fdoc%2Funstable-book%2Fsrc%2Fsort-unstable.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fsort-unstable.md?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -6,4 +6,35 @@ The tracking issue for this feature is: [#40585]\n \n ------------------------\n \n+The default `sort` method on slices is stable. In other words, it guarantees\n+that the original order of equal elements is preserved after sorting. The\n+method has several undesirable characteristics:\n \n+1. It allocates a sizable chunk of memory.\n+2. If you don't need stability, it is not as performant as it could be.\n+\n+An alternative is the new `sort_unstable` feature, which includes these\n+methods for sorting slices:\n+\n+1. `sort_unstable`\n+2. `sort_unstable_by`\n+3. `sort_unstable_by_key`\n+\n+Unstable sorting is generally faster and makes no allocations. The majority\n+of real-world sorting needs doesn't require stability, so these methods can\n+very often come in handy.\n+\n+Another important difference is that `sort` lives in `libstd` and\n+`sort_unstable` lives in `libcore`. The reason is that the former makes\n+allocations and the latter doesn't.\n+\n+A simple example:\n+\n+```rust\n+#![feature(sort_unstable)]\n+\n+let mut v = [-5, 4, 1, -3, 2];\n+\n+v.sort_unstable();\n+assert!(v == [-5, -3, 1, 2, 4]);\n+```"}, {"sha": "efa96ca468e0143e23a6e0ef73dd4e6d6979a191", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -930,13 +930,13 @@ impl<'a, T> Hole<'a, T> {\n         self.pos\n     }\n \n-    /// Return a reference to the element removed\n+    /// Returns a reference to the element removed.\n     #[inline]\n     fn element(&self) -> &T {\n         self.elt.as_ref().unwrap()\n     }\n \n-    /// Return a reference to the element at `index`.\n+    /// Returns a reference to the element at `index`.\n     ///\n     /// Unsafe because index must be within the data slice and not equal to pos.\n     #[inline]"}, {"sha": "bed216ba3d111b83dd10fac0657854d2de7c08b1", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -526,7 +526,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         }\n     }\n \n-    /// Returns true if the map contains a value for the specified key.\n+    /// Returns `true` if the map contains a value for the specified key.\n     ///\n     /// The key may be any borrowed form of the map's key type, but the ordering\n     /// on the borrowed form *must* match the ordering on the key type.\n@@ -1965,7 +1965,7 @@ impl<K, V> BTreeMap<K, V> {\n         self.length\n     }\n \n-    /// Returns true if the map contains no elements.\n+    /// Returns `true` if the map contains no elements.\n     ///\n     /// # Examples\n     ///"}, {"sha": "9dbb61379379e9177145482ee3267c1c658c25db", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -415,7 +415,7 @@ impl<T: Ord> BTreeSet<T> {\n         self.map.len()\n     }\n \n-    /// Returns true if the set contains no elements.\n+    /// Returns `true` if the set contains no elements.\n     ///\n     /// # Examples\n     ///"}, {"sha": "e56b94b2e1ea296d7c8531a647f2959b2c553bc9", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -106,7 +106,7 @@ impl<E: CLike> EnumSet<E> {\n         self.bits.count_ones() as usize\n     }\n \n-    /// Returns true if the `EnumSet` is empty.\n+    /// Returns `true` if the `EnumSet` is empty.\n     pub fn is_empty(&self) -> bool {\n         self.bits == 0\n     }"}, {"sha": "06d89a6a70b4a8a845051c9116bf9952a04fd171", "filename": "src/libcollections/range.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcollections%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcollections%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Frange.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -20,9 +20,9 @@ use Bound::{self, Excluded, Included, Unbounded};\n /// **RangeArgument** is implemented by Rust's built-in range types, produced\n /// by range syntax like `..`, `a..`, `..b` or `c..d`.\n pub trait RangeArgument<T: ?Sized> {\n-    /// Start index bound\n+    /// Start index bound.\n     ///\n-    /// Return start value as a `Bound`\n+    /// Returns the start value as a `Bound`.\n     ///\n     /// # Examples\n     ///\n@@ -42,9 +42,9 @@ pub trait RangeArgument<T: ?Sized> {\n     /// ```\n     fn start(&self) -> Bound<&T>;\n \n-    /// End index bound\n+    /// End index bound.\n     ///\n-    /// Return end value as a `Bound`\n+    /// Returns the end value as a `Bound`.\n     ///\n     /// # Examples\n     ///"}, {"sha": "d3723ace9efb332f4349be1bf37e62b3878cf55c", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -195,7 +195,7 @@ impl<T> [T] {\n         core_slice::SliceExt::is_empty(self)\n     }\n \n-    /// Returns the first element of a slice, or `None` if it is empty.\n+    /// Returns the first element of the slice, or `None` if it is empty.\n     ///\n     /// # Examples\n     ///\n@@ -212,7 +212,7 @@ impl<T> [T] {\n         core_slice::SliceExt::first(self)\n     }\n \n-    /// Returns a mutable pointer to the first element of a slice, or `None` if it is empty.\n+    /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.\n     ///\n     /// # Examples\n     ///\n@@ -230,7 +230,7 @@ impl<T> [T] {\n         core_slice::SliceExt::first_mut(self)\n     }\n \n-    /// Returns the first and all the rest of the elements of a slice, or `None` if it is empty.\n+    /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.\n     ///\n     /// # Examples\n     ///\n@@ -248,7 +248,7 @@ impl<T> [T] {\n         core_slice::SliceExt::split_first(self)\n     }\n \n-    /// Returns the first and all the rest of the elements of a slice, or `None` if it is empty.\n+    /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.\n     ///\n     /// # Examples\n     ///\n@@ -268,7 +268,7 @@ impl<T> [T] {\n         core_slice::SliceExt::split_first_mut(self)\n     }\n \n-    /// Returns the last and all the rest of the elements of a slice, or `None` if it is empty.\n+    /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.\n     ///\n     /// # Examples\n     ///\n@@ -287,7 +287,7 @@ impl<T> [T] {\n \n     }\n \n-    /// Returns the last and all the rest of the elements of a slice, or `None` if it is empty.\n+    /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.\n     ///\n     /// # Examples\n     ///\n@@ -307,7 +307,7 @@ impl<T> [T] {\n         core_slice::SliceExt::split_last_mut(self)\n     }\n \n-    /// Returns the last element of a slice, or `None` if it is empty.\n+    /// Returns the last element of the slice, or `None` if it is empty.\n     ///\n     /// # Examples\n     ///\n@@ -485,7 +485,7 @@ impl<T> [T] {\n         core_slice::SliceExt::as_mut_ptr(self)\n     }\n \n-    /// Swaps two elements in a slice.\n+    /// Swaps two elements in the slice.\n     ///\n     /// # Arguments\n     ///\n@@ -509,7 +509,7 @@ impl<T> [T] {\n         core_slice::SliceExt::swap(self, a, b)\n     }\n \n-    /// Reverses the order of elements in a slice, in place.\n+    /// Reverses the order of elements in the slice, in place.\n     ///\n     /// # Example\n     ///\n@@ -955,7 +955,7 @@ impl<T> [T] {\n         core_slice::SliceExt::ends_with(self, needle)\n     }\n \n-    /// Binary search a sorted slice for a given element.\n+    /// Binary searches this sorted slice for a given element.\n     ///\n     /// If the value is found then `Ok` is returned, containing the\n     /// index of the matching element; if the value is not found then\n@@ -984,7 +984,7 @@ impl<T> [T] {\n         core_slice::SliceExt::binary_search(self, x)\n     }\n \n-    /// Binary search a sorted slice with a comparator function.\n+    /// Binary searches this sorted slice with a comparator function.\n     ///\n     /// The comparator function should implement an order consistent\n     /// with the sort order of the underlying slice, returning an\n@@ -1023,7 +1023,7 @@ impl<T> [T] {\n         core_slice::SliceExt::binary_search_by(self, f)\n     }\n \n-    /// Binary search a sorted slice with a key extraction function.\n+    /// Binary searches this sorted slice with a key extraction function.\n     ///\n     /// Assumes that the slice is sorted by the key, for instance with\n     /// [`sort_by_key`] using the same key extraction function.\n@@ -1092,7 +1092,7 @@ impl<T> [T] {\n         merge_sort(self, |a, b| a.lt(b));\n     }\n \n-    /// Sorts the slice using `compare` to compare elements.\n+    /// Sorts the slice with a comparator function.\n     ///\n     /// This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.\n     ///\n@@ -1125,7 +1125,7 @@ impl<T> [T] {\n         merge_sort(self, |a, b| compare(a, b) == Less);\n     }\n \n-    /// Sorts the slice using `f` to extract a key to compare elements by.\n+    /// Sorts the slice with a key extraction function.\n     ///\n     /// This sort is stable (i.e. does not reorder equal elements) and `O(n log n)` worst-case.\n     ///\n@@ -1191,8 +1191,8 @@ impl<T> [T] {\n         core_slice::SliceExt::sort_unstable(self);\n     }\n \n-    /// Sorts the slice using `compare` to compare elements, but may not preserve the order of\n-    /// equal elements.\n+    /// Sorts the slice with a comparator function, but may not preserve the order of equal\n+    /// elements.\n     ///\n     /// This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),\n     /// and `O(n log n)` worst-case.\n@@ -1231,8 +1231,8 @@ impl<T> [T] {\n         core_slice::SliceExt::sort_unstable_by(self, compare);\n     }\n \n-    /// Sorts the slice using `f` to extract a key to compare elements by, but may not preserve the\n-    /// order of equal elements.\n+    /// Sorts the slice with a key extraction function, but may not preserve the order of equal\n+    /// elements.\n     ///\n     /// This sort is unstable (i.e. may reorder equal elements), in-place (i.e. does not allocate),\n     /// and `O(n log n)` worst-case.\n@@ -1313,7 +1313,6 @@ impl<T> [T] {\n         core_slice::SliceExt::copy_from_slice(self, src)\n     }\n \n-\n     /// Copies `self` into a new `Vec`.\n     ///\n     /// # Examples"}, {"sha": "8abc9ca7e9fe87b19ee29c632480122bda4a7853", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -204,7 +204,7 @@ impl str {\n         core_str::StrExt::len(self)\n     }\n \n-    /// Returns true if this slice has a length of zero bytes.\n+    /// Returns `true` if `self` has a length of zero bytes.\n     ///\n     /// # Examples\n     ///"}, {"sha": "cb92236ec736cf8928f92da43e8efb5921d7feea", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -133,7 +133,7 @@ impl<T> VecDeque<T> {\n         ptr::write(self.ptr().offset(off as isize), value);\n     }\n \n-    /// Returns true if and only if the buffer is at capacity\n+    /// Returns `true` if and only if the buffer is at full capacity.\n     #[inline]\n     fn is_full(&self) -> bool {\n         self.cap() - self.len() == 1\n@@ -788,7 +788,7 @@ impl<T> VecDeque<T> {\n         count(self.tail, self.head, self.cap())\n     }\n \n-    /// Returns true if the buffer contains no elements\n+    /// Returns `true` if the `VecDeque` is empty.\n     ///\n     /// # Examples\n     ///"}, {"sha": "338e5c7fd95b47a07d7e780b3af976e6922830c5", "filename": "src/libcore/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -137,7 +137,7 @@ impl fmt::Debug for Any + Send {\n }\n \n impl Any {\n-    /// Returns true if the boxed type is the same as `T`.\n+    /// Returns `true` if the boxed type is the same as `T`.\n     ///\n     /// # Examples\n     ///"}, {"sha": "7db35359a1f7d427433a69d9a100f8a5587bfc1b", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -210,7 +210,7 @@ pub enum Ordering {\n }\n \n impl Ordering {\n-    /// Reverse the `Ordering`.\n+    /// Reverses the `Ordering`.\n     ///\n     /// * `Less` becomes `Greater`.\n     /// * `Greater` becomes `Less`.\n@@ -616,7 +616,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     }\n }\n \n-/// Compare and return the minimum of two values.\n+/// Compares and returns the minimum of two values.\n ///\n /// Returns the first argument if the comparison determines them to be equal.\n ///\n@@ -634,7 +634,7 @@ pub fn min<T: Ord>(v1: T, v2: T) -> T {\n     if v1 <= v2 { v1 } else { v2 }\n }\n \n-/// Compare and return the maximum of two values.\n+/// Compares and returns the maximum of two values.\n ///\n /// Returns the second argument if the comparison determines them to be equal.\n ///"}, {"sha": "618edf48abd04370a43073368ac33bedb3129754", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -518,13 +518,13 @@ pub trait Iterator {\n \n     /// Creates an iterator that both filters and maps.\n     ///\n-    /// The closure must return an [`Option<T>`]. `filter_map()` creates an\n+    /// The closure must return an [`Option<T>`]. `filter_map` creates an\n     /// iterator which calls this closure on each element. If the closure\n     /// returns [`Some(element)`][`Some`], then that element is returned. If the\n     /// closure returns [`None`], it will try again, and call the closure on the\n     /// next element, seeing if it will return [`Some`].\n     ///\n-    /// Why `filter_map()` and not just [`filter()`].[`map`]? The key is in this\n+    /// Why `filter_map` and not just [`filter`].[`map`]? The key is in this\n     /// part:\n     ///\n     /// [`filter`]: #method.filter\n@@ -534,7 +534,7 @@ pub trait Iterator {\n     ///\n     /// In other words, it removes the [`Option<T>`] layer automatically. If your\n     /// mapping is already returning an [`Option<T>`] and you want to skip over\n-    /// [`None`]s, then `filter_map()` is much, much nicer to use.\n+    /// [`None`]s, then `filter_map` is much, much nicer to use.\n     ///\n     /// # Examples\n     ///"}, {"sha": "c4d54d2c7b81df6abb3adad2670d8afaf8f2003d", "filename": "src/libcore/iter_private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fiter_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fiter_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter_private.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -22,7 +22,7 @@\n #[doc(hidden)]\n pub unsafe trait TrustedRandomAccess : ExactSizeIterator {\n     unsafe fn get_unchecked(&mut self, i: usize) -> Self::Item;\n-    /// Return `true` if getting an iterator element may have\n+    /// Returns `true` if getting an iterator element may have\n     /// side effects. Remember to take inner iterators into account.\n     fn may_have_side_effect() -> bool;\n }"}, {"sha": "8904322ca48f77b01db9b8a9bbbafe19c02438f7", "filename": "src/libcore/num/bignum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fbignum.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -148,14 +148,14 @@ macro_rules! define_bignum {\n                 $name { size: sz, base: base }\n             }\n \n-            /// Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\n+            /// Returns the internal digits as a slice `[a, b, c, ...]` such that the numeric\n             /// value is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\n             /// the digit type.\n             pub fn digits(&self) -> &[$ty] {\n                 &self.base[..self.size]\n             }\n \n-            /// Return the `i`-th bit where bit 0 is the least significant one.\n+            /// Returns the `i`-th bit where bit 0 is the least significant one.\n             /// In other words, the bit with weight `2^i`.\n             pub fn get_bit(&self, i: usize) -> u8 {\n                 use mem;\n@@ -166,7 +166,7 @@ macro_rules! define_bignum {\n                 ((self.base[d] >> b) & 1) as u8\n             }\n \n-            /// Returns true if the bignum is zero.\n+            /// Returns `true` if the bignum is zero.\n             pub fn is_zero(&self) -> bool {\n                 self.digits().iter().all(|&v| v == 0)\n             }"}, {"sha": "df343c9d45f20ffa64a47ecb01f6c4af0d6071f3", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -2568,17 +2568,17 @@ pub trait Float: Sized {\n                                  implementable outside the standard library\")]\n     fn one() -> Self;\n \n-    /// Returns true if this value is NaN and false otherwise.\n+    /// Returns `true` if this value is NaN and false otherwise.\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn is_nan(self) -> bool;\n-    /// Returns true if this value is positive infinity or negative infinity and\n+    /// Returns `true` if this value is positive infinity or negative infinity and\n     /// false otherwise.\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn is_infinite(self) -> bool;\n-    /// Returns true if this number is neither infinite nor NaN.\n+    /// Returns `true` if this number is neither infinite nor NaN.\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn is_finite(self) -> bool;\n-    /// Returns true if this number is neither zero, infinite, denormal, or NaN.\n+    /// Returns `true` if this number is neither zero, infinite, denormal, or NaN.\n     #[stable(feature = \"core\", since = \"1.6.0\")]\n     fn is_normal(self) -> bool;\n     /// Returns the category that this number falls into."}, {"sha": "d2830a6d00cec149ba22e64c98db7de2ce23d63c", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -380,7 +380,7 @@ pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {\n \n #[lang = \"const_ptr\"]\n impl<T: ?Sized> *const T {\n-    /// Returns true if the pointer is null.\n+    /// Returns `true` if the pointer is null.\n     ///\n     /// # Examples\n     ///\n@@ -504,7 +504,7 @@ impl<T: ?Sized> *const T {\n \n #[lang = \"mut_ptr\"]\n impl<T: ?Sized> *mut T {\n-    /// Returns true if the pointer is null.\n+    /// Returns `true` if the pointer is null.\n     ///\n     /// # Examples\n     ///"}, {"sha": "6ec8a37dfa4330042e62996c4b956f1a3b75a770", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -268,7 +268,7 @@ impl<T, E> Result<T, E> {\n     // Querying the contained values\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Returns true if the result is `Ok`.\n+    /// Returns `true` if the result is `Ok`.\n     ///\n     /// # Examples\n     ///\n@@ -290,7 +290,7 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Returns true if the result is `Err`.\n+    /// Returns `true` if the result is `Err`.\n     ///\n     /// # Examples\n     ///"}, {"sha": "af492b3c63976089744aade562e703545c5b2e1b", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -1511,15 +1511,15 @@ fn ptrdistance<T>(start: *const T, end: *const T) -> usize {\n trait PointerExt : Copy {\n     unsafe fn slice_offset(self, i: isize) -> Self;\n \n-    /// Increment self by 1, but return the old value\n+    /// Increments `self` by 1, but returns the old value.\n     #[inline(always)]\n     unsafe fn post_inc(&mut self) -> Self {\n         let current = *self;\n         *self = self.slice_offset(1);\n         current\n     }\n \n-    /// Decrement self by 1, and return the new value\n+    /// Decrements `self` by 1, and returns the new value.\n     #[inline(always)]\n     unsafe fn pre_dec(&mut self) -> Self {\n         *self = self.slice_offset(-1);\n@@ -1545,7 +1545,7 @@ impl<T> PointerExt for *mut T {\n /// splitn, splitn_mut etc can be implemented once.\n #[doc(hidden)]\n trait SplitIter: DoubleEndedIterator {\n-    /// Mark the underlying iterator as complete, extracting the remaining\n+    /// Marks the underlying iterator as complete, extracting the remaining\n     /// portion of the slice.\n     fn finish(&mut self) -> Option<Self::Item>;\n }\n@@ -2267,11 +2267,11 @@ pub fn heapsort<T, F>(v: &mut [T], mut is_less: F)\n //\n \n extern {\n-    /// Call implementation provided memcmp\n+    /// Calls implementation provided memcmp.\n     ///\n     /// Interprets the data as u8.\n     ///\n-    /// Return 0 for equal, < 0 for less than and > 0 for greater\n+    /// Returns 0 for equal, < 0 for less than and > 0 for greater\n     /// than.\n     // FIXME(#32610): Return type should be c_int\n     fn memcmp(s1: *const u8, s2: *const u8, n: usize) -> i32;"}, {"sha": "d13d537d99301781dd6aa246c4008d529354e320", "filename": "src/libcore/slice/sort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fsort.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -104,7 +104,7 @@ fn shift_tail<T, F>(v: &mut [T], is_less: &mut F)\n \n /// Partially sorts a slice by shifting several out-of-order elements around.\n ///\n-/// Returns true if the slice is sorted at the end. This function is `O(n)` worst-case.\n+/// Returns `true` if the slice is sorted at the end. This function is `O(n)` worst-case.\n #[cold]\n fn partial_insertion_sort<T, F>(v: &mut [T], is_less: &mut F) -> bool\n     where F: FnMut(&T, &T) -> bool\n@@ -528,7 +528,7 @@ fn break_patterns<T>(v: &mut [T]) {\n     }\n }\n \n-/// Chooses a pivot in `v` and returns the index and true if the slice is likely already sorted.\n+/// Chooses a pivot in `v` and returns the index and `true` if the slice is likely already sorted.\n ///\n /// Elements in `v` might be reordered in the process.\n fn choose_pivot<T, F>(v: &mut [T], is_less: &mut F) -> (usize, bool)"}, {"sha": "dfb6936da6bda4d1f381aa9ef28dc208a3940850", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -332,7 +332,7 @@ impl fmt::Display for Utf8Error {\n Section: Iterators\n */\n \n-/// Iterator for the char (representing *Unicode Scalar Values*) of a string\n+/// Iterator for the char (representing *Unicode Scalar Values*) of a string.\n ///\n /// Created with the method [`chars`].\n ///\n@@ -343,13 +343,13 @@ pub struct Chars<'a> {\n     iter: slice::Iter<'a, u8>\n }\n \n-/// Return the initial codepoint accumulator for the first byte.\n+/// Returns the initial codepoint accumulator for the first byte.\n /// The first byte is special, only want bottom 5 bits for width 2, 4 bits\n /// for width 3, and 3 bits for width 4.\n #[inline]\n fn utf8_first_byte(byte: u8, width: u32) -> u32 { (byte & (0x7F >> width)) as u32 }\n \n-/// Return the value of `ch` updated with continuation byte `byte`.\n+/// Returns the value of `ch` updated with continuation byte `byte`.\n #[inline]\n fn utf8_acc_cont_byte(ch: u32, byte: u8) -> u32 { (ch << 6) | (byte & CONT_MASK) as u32 }\n \n@@ -1244,13 +1244,13 @@ Section: UTF-8 validation\n // use truncation to fit u64 into usize\n const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;\n \n-/// Return `true` if any byte in the word `x` is nonascii (>= 128).\n+/// Returns `true` if any byte in the word `x` is nonascii (>= 128).\n #[inline]\n fn contains_nonascii(x: usize) -> bool {\n     (x & NONASCII_MASK) != 0\n }\n \n-/// Walk through `iter` checking that it's a valid UTF-8 sequence,\n+/// Walks through `iter` checking that it's a valid UTF-8 sequence,\n /// returning `true` in that case, or, if it is invalid, `false` with\n /// `iter` reset such that it is pointing at the first byte in the\n /// invalid sequence.\n@@ -1389,16 +1389,16 @@ static UTF8_CHAR_WIDTH: [u8; 256] = [\n 4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0, // 0xFF\n ];\n \n-/// Given a first byte, determine how many bytes are in this UTF-8 character\n+/// Given a first byte, determines how many bytes are in this UTF-8 character.\n #[unstable(feature = \"str_internals\", issue = \"0\")]\n #[inline]\n pub fn utf8_char_width(b: u8) -> usize {\n     return UTF8_CHAR_WIDTH[b as usize] as usize;\n }\n \n-/// Mask of the value bits of a continuation byte\n+/// Mask of the value bits of a continuation byte.\n const CONT_MASK: u8 = 0b0011_1111;\n-/// Value of the tag bits (tag mask is !CONT_MASK) of a continuation byte\n+/// Value of the tag bits (tag mask is !CONT_MASK) of a continuation byte.\n const TAG_CONT_U8: u8 = 0b1000_0000;\n \n /*"}, {"sha": "7bab4a8d725dc2bcdfd87fdde54c44d639c3973c", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -12,6 +12,7 @@ use hir::def_id::DefId;\n use util::nodemap::NodeMap;\n use syntax::ast;\n use syntax::ext::base::MacroKind;\n+use syntax_pos::Span;\n use hir;\n \n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n@@ -116,6 +117,7 @@ pub type ExportMap = NodeMap<Vec<Export>>;\n pub struct Export {\n     pub name: ast::Name, // The name of the target.\n     pub def: Def, // The definition of the target.\n+    pub span: Span, // The span of the target definition.\n }\n \n impl CtorKind {"}, {"sha": "c2ad598b0c503c49acf8c080596f84360f411048", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -683,7 +683,7 @@ impl<'a, 'tcx> CrateMetadata {\n                         },\n                         ext.kind()\n                     );\n-                    callback(def::Export { name: name, def: def });\n+                    callback(def::Export { name: name, def: def, span: DUMMY_SP });\n                 }\n             }\n             return\n@@ -720,6 +720,7 @@ impl<'a, 'tcx> CrateMetadata {\n                                 callback(def::Export {\n                                     def: def,\n                                     name: self.item_name(child_index),\n+                                    span: self.entry(child_index).span.decode(self),\n                                 });\n                             }\n                         }\n@@ -732,34 +733,26 @@ impl<'a, 'tcx> CrateMetadata {\n                 }\n \n                 let def_key = self.def_key(child_index);\n+                let span = child.span.decode(self);\n                 if let (Some(def), Some(name)) =\n                     (self.get_def(child_index), def_key.disambiguated_data.data.get_opt_name()) {\n-                    callback(def::Export {\n-                        def: def,\n-                        name: name,\n-                    });\n+                    callback(def::Export { def: def, name: name, span: span });\n                     // For non-reexport structs and variants add their constructors to children.\n                     // Reexport lists automatically contain constructors when necessary.\n                     match def {\n                         Def::Struct(..) => {\n                             if let Some(ctor_def_id) = self.get_struct_ctor_def_id(child_index) {\n                                 let ctor_kind = self.get_ctor_kind(child_index);\n                                 let ctor_def = Def::StructCtor(ctor_def_id, ctor_kind);\n-                                callback(def::Export {\n-                                    def: ctor_def,\n-                                    name: name,\n-                                });\n+                                callback(def::Export { def: ctor_def, name: name, span: span });\n                             }\n                         }\n                         Def::Variant(def_id) => {\n                             // Braced variants, unlike structs, generate unusable names in\n                             // value namespace, they are reserved for possible future use.\n                             let ctor_kind = self.get_ctor_kind(child_index);\n                             let ctor_def = Def::VariantCtor(def_id, ctor_kind);\n-                            callback(def::Export {\n-                                def: ctor_def,\n-                                name: name,\n-                            });\n+                            callback(def::Export { def: ctor_def, name: name, span: span });\n                         }\n                         _ => {}\n                     }"}, {"sha": "c33d5b9b6e16bb14bb4980039c00deac67c22c5c", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -605,7 +605,7 @@ impl<'a> Resolver<'a> {\n             let ident = Ident::with_empty_ctxt(name);\n             let result = self.resolve_ident_in_module(module, ident, MacroNS, false, None);\n             if let Ok(binding) = result {\n-                self.macro_exports.push(Export { name: name, def: binding.def() });\n+                self.macro_exports.push(Export { name: name, def: binding.def(), span: span });\n             } else {\n                 span_err!(self.session, span, E0470, \"reexported macro not found\");\n             }"}, {"sha": "99fc1c142f6815fd2cc097699e3fd0be0e02cd2b", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -653,7 +653,7 @@ impl<'a> Resolver<'a> {\n \n         if attr::contains_name(&item.attrs, \"macro_export\") {\n             let def = Def::Macro(def_id, MacroKind::Bang);\n-            self.macro_exports.push(Export { name: ident.name, def: def });\n+            self.macro_exports.push(Export { name: ident.name, def: def, span: item.span });\n         }\n     }\n "}, {"sha": "2f4ac12cd7363bf2604c8d738206947802300f27", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -21,7 +21,7 @@ use rustc::ty;\n use rustc::lint::builtin::PRIVATE_IN_PUBLIC;\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::*;\n-use rustc::util::nodemap::FxHashSet;\n+use rustc::util::nodemap::FxHashMap;\n \n use syntax::ast::{Ident, NodeId};\n use syntax::ext::base::Determinacy::{self, Determined, Undetermined};\n@@ -763,10 +763,11 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         *module.globs.borrow_mut() = Vec::new();\n \n         let mut reexports = Vec::new();\n+        let mut exported_macro_names = FxHashMap();\n         if module as *const _ == self.graph_root as *const _ {\n-            let mut exported_macro_names = FxHashSet();\n-            for export in mem::replace(&mut self.macro_exports, Vec::new()).into_iter().rev() {\n-                if exported_macro_names.insert(export.name) {\n+            let macro_exports = mem::replace(&mut self.macro_exports, Vec::new());\n+            for export in macro_exports.into_iter().rev() {\n+                if exported_macro_names.insert(export.name, export.span).is_none() {\n                     reexports.push(export);\n                 }\n             }\n@@ -786,7 +787,17 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                     if !def.def_id().is_local() {\n                         self.session.cstore.export_macros(def.def_id().krate);\n                     }\n-                    reexports.push(Export { name: ident.name, def: def });\n+                    if let Def::Macro(..) = def {\n+                        if let Some(&span) = exported_macro_names.get(&ident.name) {\n+                            let msg =\n+                                format!(\"a macro named `{}` has already been exported\", ident);\n+                            self.session.struct_span_err(span, &msg)\n+                                .span_label(span, &format!(\"`{}` already exported\", ident))\n+                                .span_note(binding.span, \"previous macro export here\")\n+                                .emit();\n+                        }\n+                    }\n+                    reexports.push(Export { name: ident.name, def: def, span: binding.span });\n                 }\n             }\n "}, {"sha": "0136faef28d8cc1413517a7243b146ba7e45d4d7", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -1223,6 +1223,28 @@ fn main() {\n ```\n \"##,\n \n+E0090: r##\"\n+You gave too few lifetime parameters. Example:\n+\n+```compile_fail,E0090\n+fn foo<'a: 'b, 'b: 'a>() {}\n+\n+fn main() {\n+    foo::<'static>(); // error, expected 2 lifetime parameters\n+}\n+```\n+\n+Please check you give the right number of lifetime parameters. Example:\n+\n+```\n+fn foo<'a: 'b, 'b: 'a>() {}\n+\n+fn main() {\n+    foo::<'static, 'static>();\n+}\n+```\n+\"##,\n+\n E0091: r##\"\n You gave an unnecessary type parameter in a type alias. Erroneous code\n example:\n@@ -4120,7 +4142,6 @@ register_diagnostics! {\n //  E0068,\n //  E0085,\n //  E0086,\n-    E0090,\n     E0103, // @GuillaumeGomez: I was unable to get this error, try your best!\n     E0104,\n //  E0123,"}, {"sha": "9f2d02c14dde0a4bece13c75d1e2167685e9e403", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -1096,9 +1096,9 @@ impl fmt::Display for clean::ImportSource {\n impl fmt::Display for clean::TypeBinding {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         if f.alternate() {\n-            write!(f, \"{}={:#}\", self.name, self.ty)\n+            write!(f, \"{} = {:#}\", self.name, self.ty)\n         } else {\n-            write!(f, \"{}={}\", self.name, self.ty)\n+            write!(f, \"{} = {}\", self.name, self.ty)\n         }\n     }\n }"}, {"sha": "10fde67a45674b7cf1efd8e258a4e7f2cf981cbd", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -2808,7 +2808,7 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n             }\n             AssocItemRender::DerefFor { trait_, type_, deref_mut_ } => {\n                 write!(w, \"<h2 id='deref-methods'>Methods from \\\n-                               {}&lt;Target={}&gt;</h2>\", trait_, type_)?;\n+                               {}&lt;Target = {}&gt;</h2>\", trait_, type_)?;\n                 RenderMode::ForDeref { mut_: deref_mut_ }\n             }\n         };"}, {"sha": "74ec3691b3860be2d6d7173f9b36445c53a90f84", "filename": "src/librustdoc/html/static/styles/main.css", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -45,14 +45,6 @@ pre {\n \tbackground-color: #fff;\n }\n \n-.sidebar {\n-    background-color: #F1F1F1;\n-}\n-\n-.sidebar .current {\n-    background-color: #fff;\n-}\n-\n .sidebar .location {\n \tborder-color: #000;\n \tbackground-color: #fff;"}, {"sha": "53d7e54ee5b7b26a8759989eda330b27b1fb5e5c", "filename": "src/test/compile-fail/duplicate-check-macro-exports.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Ftest%2Fcompile-fail%2Fduplicate-check-macro-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Ftest%2Fcompile-fail%2Fduplicate-check-macro-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fduplicate-check-macro-exports.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(use_extern_macros)]\n+\n+pub use std::panic; //~ NOTE previous macro export here\n+\n+#[macro_export]\n+macro_rules! panic { () => {} } //~ ERROR a macro named `panic` has already been exported\n+//~| NOTE `panic` already exported\n+\n+fn main() {}"}, {"sha": "84ff2dc4d0d61933971daab0e2d5367b4155206a", "filename": "src/test/run-pass/macro-nested_definition_issue-31946.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Ftest%2Frun-pass%2Fmacro-nested_definition_issue-31946.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Ftest%2Frun-pass%2Fmacro-nested_definition_issue-31946.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-nested_definition_issue-31946.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!(\"{}\", {\n+        macro_rules! foo {\n+            ($name:expr) => { concat!(\"hello \", $name) }\n+        }\n+        foo!(\"rust\")\n+    });\n+}"}, {"sha": "36f44295953f0c3fd644eb5497a4629b84c45c7c", "filename": "src/test/rustdoc/doc-assoc-item.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Ftest%2Frustdoc%2Fdoc-assoc-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Ftest%2Frustdoc%2Fdoc-assoc-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-assoc-item.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Foo<T> {\n+    x: T,\n+}\n+\n+pub trait Bar {\n+    type Fuu;\n+\n+    fn foo(foo: Self::Fuu);\n+}\n+\n+// @has doc_assoc_item/struct.Foo.html '//*[@class=\"impl\"]' 'impl<T: Bar<Fuu = u32>> Foo<T>'\n+impl<T: Bar<Fuu = u32>> Foo<T> {\n+    pub fn new(t: T) -> Foo<T> {\n+        Foo {\n+            x: t,\n+        }\n+    }\n+}"}, {"sha": "49fac20035fc0b617d3689829ae169cde0f7699a", "filename": "src/test/rustdoc/issue-20646.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Ftest%2Frustdoc%2Fissue-20646.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Ftest%2Frustdoc%2Fissue-20646.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-20646.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -23,14 +23,14 @@ pub trait Trait {\n }\n \n // @has issue_20646/fn.fun.html \\\n-//      '//*[@class=\"rust fn\"]' 'where T: Trait<Output=i32>'\n+//      '//*[@class=\"rust fn\"]' 'where T: Trait<Output = i32>'\n pub fn fun<T>(_: T) where T: Trait<Output=i32> {}\n \n pub mod reexport {\n     // @has issue_20646/reexport/trait.Trait.html \\\n     //      '//*[@id=\"associatedtype.Output\"]' \\\n     //      'type Output'\n     // @has issue_20646/reexport/fn.fun.html \\\n-    //      '//*[@class=\"rust fn\"]' 'where T: Trait<Output=i32>'\n+    //      '//*[@class=\"rust fn\"]' 'where T: Trait<Output = i32>'\n     pub use issue_20646::{Trait, fun};\n }"}, {"sha": "657739c65b1f5348e93ca1490fed842802b1d869", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c62e532f3de4c0254b772c36fe629b2042efd107/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=c62e532f3de4c0254b772c36fe629b2042efd107", "patch": "@@ -486,11 +486,9 @@ pub fn make_test(config: &Config, testpaths: &TestPaths) -> test::TestDescAndFn\n }\n \n fn stamp(config: &Config, testpaths: &TestPaths) -> PathBuf {\n-    let stamp_name = format!(\"{}-H-{}-T-{}-S-{}.stamp\",\n+    let stamp_name = format!(\"{}-{}.stamp\",\n                              testpaths.file.file_name().unwrap()\n                                            .to_str().unwrap(),\n-                             config.host,\n-                             config.target,\n                              config.stage_id);\n     config.build_base.canonicalize()\n           .unwrap_or(config.build_base.clone())"}]}