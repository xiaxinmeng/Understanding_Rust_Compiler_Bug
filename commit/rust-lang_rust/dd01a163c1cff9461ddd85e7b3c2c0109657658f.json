{"sha": "dd01a163c1cff9461ddd85e7b3c2c0109657658f", "node_id": "C_kwDOAAsO6NoAKGRkMDFhMTYzYzFjZmY5NDYxZGRkODVlN2IzYzJjMDEwOTY1NzY1OGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-31T17:19:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-31T17:19:10Z"}, "message": "Auto merge of #106275 - Nilstrieb:const-eval-select-me-some-compile-time, r=thomcc\n\nUse some more `const_eval_select` in pointer methods for compile times\n\nBuilds on top of #105435\n\n`is_aligned_to` is _huge_ with calling `align_offset`, so this should cut it down a lot.\n\nThis shows up in https://github.com/rust-lang/rust/issues/65031#issuecomment-1367574340", "tree": {"sha": "62bd151417ba1efcce39d5c16dac90fe33c0182c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62bd151417ba1efcce39d5c16dac90fe33c0182c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd01a163c1cff9461ddd85e7b3c2c0109657658f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd01a163c1cff9461ddd85e7b3c2c0109657658f", "html_url": "https://github.com/rust-lang/rust/commit/dd01a163c1cff9461ddd85e7b3c2c0109657658f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd01a163c1cff9461ddd85e7b3c2c0109657658f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "726bbfc8f0d6eb431dfa620c1c8fc3848020cd3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/726bbfc8f0d6eb431dfa620c1c8fc3848020cd3c", "html_url": "https://github.com/rust-lang/rust/commit/726bbfc8f0d6eb431dfa620c1c8fc3848020cd3c"}, {"sha": "a8f50453d0426de82b939bb1bbbd42af1a8a3d22", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f50453d0426de82b939bb1bbbd42af1a8a3d22", "html_url": "https://github.com/rust-lang/rust/commit/a8f50453d0426de82b939bb1bbbd42af1a8a3d22"}], "stats": {"total": 88, "additions": 66, "deletions": 22}, "files": [{"sha": "0a74c03d70f3a6cf17c95e9a059d49f2960f0945", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/dd01a163c1cff9461ddd85e7b3c2c0109657658f/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd01a163c1cff9461ddd85e7b3c2c0109657658f/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=dd01a163c1cff9461ddd85e7b3c2c0109657658f", "patch": "@@ -1,6 +1,6 @@\n use super::*;\n use crate::cmp::Ordering::{self, Equal, Greater, Less};\n-use crate::intrinsics;\n+use crate::intrinsics::{self, const_eval_select};\n use crate::mem;\n use crate::slice::{self, SliceIndex};\n \n@@ -34,12 +34,23 @@ impl<T: ?Sized> *const T {\n     #[rustc_const_unstable(feature = \"const_ptr_is_null\", issue = \"74939\")]\n     #[inline]\n     pub const fn is_null(self) -> bool {\n-        // Compare via a cast to a thin pointer, so fat pointers are only\n-        // considering their \"data\" part for null-ness.\n-        match (self as *const u8).guaranteed_eq(null()) {\n-            None => false,\n-            Some(res) => res,\n+        #[inline]\n+        fn runtime_impl(ptr: *const u8) -> bool {\n+            ptr.addr() == 0\n         }\n+\n+        #[inline]\n+        const fn const_impl(ptr: *const u8) -> bool {\n+            // Compare via a cast to a thin pointer, so fat pointers are only\n+            // considering their \"data\" part for null-ness.\n+            match (ptr).guaranteed_eq(null_mut()) {\n+                None => false,\n+                Some(res) => res,\n+            }\n+        }\n+\n+        // SAFETY: The two versions are equivalent at runtime.\n+        unsafe { const_eval_select((self as *const u8,), const_impl, runtime_impl) }\n     }\n \n     /// Casts to a pointer of another type.\n@@ -1587,11 +1598,22 @@ impl<T: ?Sized> *const T {\n             panic!(\"is_aligned_to: align is not a power-of-two\");\n         }\n \n-        // We can't use the address of `self` in a `const fn`, so we use `align_offset` instead.\n-        // The cast to `()` is used to\n-        //   1. deal with fat pointers; and\n-        //   2. ensure that `align_offset` doesn't actually try to compute an offset.\n-        self.cast::<()>().align_offset(align) == 0\n+        #[inline]\n+        fn runtime_impl(ptr: *const (), align: usize) -> bool {\n+            ptr.addr() & (align - 1) == 0\n+        }\n+\n+        #[inline]\n+        const fn const_impl(ptr: *const (), align: usize) -> bool {\n+            // We can't use the address of `self` in a `const fn`, so we use `align_offset` instead.\n+            // The cast to `()` is used to\n+            //   1. deal with fat pointers; and\n+            //   2. ensure that `align_offset` doesn't actually try to compute an offset.\n+            ptr.align_offset(align) == 0\n+        }\n+\n+        // SAFETY: The two versions are equivalent at runtime.\n+        unsafe { const_eval_select((self.cast::<()>(), align), const_impl, runtime_impl) }\n     }\n }\n "}, {"sha": "d70fb70c79fa4dc6dacc84297e67a062235bd8d8", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/dd01a163c1cff9461ddd85e7b3c2c0109657658f/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd01a163c1cff9461ddd85e7b3c2c0109657658f/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=dd01a163c1cff9461ddd85e7b3c2c0109657658f", "patch": "@@ -1,6 +1,6 @@\n use super::*;\n use crate::cmp::Ordering::{self, Equal, Greater, Less};\n-use crate::intrinsics;\n+use crate::intrinsics::{self, const_eval_select};\n use crate::slice::{self, SliceIndex};\n \n impl<T: ?Sized> *mut T {\n@@ -33,12 +33,23 @@ impl<T: ?Sized> *mut T {\n     #[rustc_const_unstable(feature = \"const_ptr_is_null\", issue = \"74939\")]\n     #[inline]\n     pub const fn is_null(self) -> bool {\n-        // Compare via a cast to a thin pointer, so fat pointers are only\n-        // considering their \"data\" part for null-ness.\n-        match (self as *mut u8).guaranteed_eq(null_mut()) {\n-            None => false,\n-            Some(res) => res,\n+        #[inline]\n+        fn runtime_impl(ptr: *mut u8) -> bool {\n+            ptr.addr() == 0\n         }\n+\n+        #[inline]\n+        const fn const_impl(ptr: *mut u8) -> bool {\n+            // Compare via a cast to a thin pointer, so fat pointers are only\n+            // considering their \"data\" part for null-ness.\n+            match (ptr).guaranteed_eq(null_mut()) {\n+                None => false,\n+                Some(res) => res,\n+            }\n+        }\n+\n+        // SAFETY: The two versions are equivalent at runtime.\n+        unsafe { const_eval_select((self as *mut u8,), const_impl, runtime_impl) }\n     }\n \n     /// Casts to a pointer of another type.\n@@ -1859,11 +1870,22 @@ impl<T: ?Sized> *mut T {\n             panic!(\"is_aligned_to: align is not a power-of-two\");\n         }\n \n-        // We can't use the address of `self` in a `const fn`, so we use `align_offset` instead.\n-        // The cast to `()` is used to\n-        //   1. deal with fat pointers; and\n-        //   2. ensure that `align_offset` doesn't actually try to compute an offset.\n-        self.cast::<()>().align_offset(align) == 0\n+        #[inline]\n+        fn runtime_impl(ptr: *mut (), align: usize) -> bool {\n+            ptr.addr() & (align - 1) == 0\n+        }\n+\n+        #[inline]\n+        const fn const_impl(ptr: *mut (), align: usize) -> bool {\n+            // We can't use the address of `self` in a `const fn`, so we use `align_offset` instead.\n+            // The cast to `()` is used to\n+            //   1. deal with fat pointers; and\n+            //   2. ensure that `align_offset` doesn't actually try to compute an offset.\n+            ptr.align_offset(align) == 0\n+        }\n+\n+        // SAFETY: The two versions are equivalent at runtime.\n+        unsafe { const_eval_select((self.cast::<()>(), align), const_impl, runtime_impl) }\n     }\n }\n "}]}