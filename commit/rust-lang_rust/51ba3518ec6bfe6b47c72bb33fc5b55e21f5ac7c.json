{"sha": "51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxYmEzNTE4ZWM2YmZlNmI0N2M3MmJiMzNmYzViNTVlMjFmNWFjN2M=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-06-16T01:16:42Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-06-21T23:11:11Z"}, "message": "Remove some singleton vector appends.", "tree": {"sha": "0e33762e056b93018d7981f43686ab33e3286c88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e33762e056b93018d7981f43686ab33e3286c88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c", "html_url": "https://github.com/rust-lang/rust/commit/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d1e41561128899d6c29cef81a85be4303298698", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d1e41561128899d6c29cef81a85be4303298698", "html_url": "https://github.com/rust-lang/rust/commit/4d1e41561128899d6c29cef81a85be4303298698"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "7c4ada9baa7fd5891b0f1661301b4994bf7b1a8d", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c", "patch": "@@ -316,7 +316,7 @@ fn load_crate(filename: str) -> option<crate> {\n \n                 alt *attr_name {\n                     \"std\" | \"core\" { }\n-                    _ { e.deps += [query]; }\n+                    _ { vec::push(e.deps, query); }\n                 }\n             }\n             _ { }\n@@ -775,7 +775,7 @@ fn install_source(c: cargo, path: str) {\n     let mut cratefiles = [];\n     for os::walk_dir(\".\") {|p|\n         if str::ends_with(p, \".rc\") {\n-            cratefiles += [p];\n+            vec::push(cratefiles, p);\n         }\n     }\n "}, {"sha": "06428a993d2aa8a7e810d3666247f02c2fa559ff", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c", "patch": "@@ -139,7 +139,7 @@ fn make_tests(config: config) -> [test::test_desc] {\n         let file = file;\n         #debug(\"inspecting file %s\", file);\n         if is_test(config, file) {\n-            tests += [make_test(config, file)]\n+            vec::push(tests, make_test(config, file))\n         }\n     }\n     ret tests;"}, {"sha": "642e2073e6bf676dad56192688b595fc1b9c4e3b", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c", "patch": "@@ -31,7 +31,7 @@ fn load_props(testfile: str) -> test_props {\n     let mut pp_exact = option::none;\n     for iter_header(testfile) {|ln|\n         alt parse_error_pattern(ln) {\n-          option::some(ep) { error_patterns += [ep]; }\n+          option::some(ep) { vec::push(error_patterns, ep) }\n           option::none { }\n         };\n \n@@ -44,11 +44,11 @@ fn load_props(testfile: str) -> test_props {\n         }\n \n         option::iter(parse_aux_build(ln)) {|ab|\n-            aux_builds += [ab];\n+            vec::push(aux_builds, ab);\n         }\n \n         option::iter(parse_exec_env(ln)) {|ee|\n-            exec_env += [ee];\n+            vec::push(exec_env, ee);\n         }\n     };\n     ret {"}, {"sha": "b3344bece7ab0619cdfc082abf82fdc99119c1f8", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c", "patch": "@@ -19,7 +19,7 @@ fn target_env(lib_path: str, prog: str) -> [(str,str)] {\n         else { (k,v) }\n     };\n     if str::ends_with(prog, \"rustc.exe\") {\n-        env += [(\"RUST_THREADS\", \"1\")]\n+        vec::push(env, (\"RUST_THREADS\", \"1\"));\n     }\n     ret env;\n }"}, {"sha": "749af7d9f73501ae446f0f6e859667ae37ad8f85", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c", "patch": "@@ -104,7 +104,7 @@ fn run_pretty_test(config: config, props: test_props, testfile: str) {\n                           procres);\n         }\n \n-        srcs += [procres.stdout];\n+        vec::push(srcs, procres.stdout);\n         round += 1;\n     }\n "}, {"sha": "4773a331c130a20fcd2e1a1fad1b5617c358a057", "filename": "src/fuzzer/cycles.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c/src%2Ffuzzer%2Fcycles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c/src%2Ffuzzer%2Fcycles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Fcycles.rs?ref=51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c", "patch": "@@ -62,7 +62,7 @@ fn test_cycles(r : rand::rng, k: uint, n: uint)\n \n     // Create a graph with no edges\n     range(0u, vlen) {|_i|\n-        v += [mut empty_pointy()];\n+        vec::push(v, empty_pointy());\n     }\n \n     // Fill in the graph with random edges, with density k/n\n@@ -77,7 +77,7 @@ fn test_cycles(r : rand::rng, k: uint, n: uint)\n           // https://github.com/mozilla/rust/issues/1899\n \n         if (likelihood(r, k, n)) { v[i].m = [p(choice(r, v))]; }\n-        if (likelihood(r, k, n)) { v[i].n += [mut p(choice(r, v))]; }\n+        if (likelihood(r, k, n)) { vec::push(v[i].n, mut p(choice(r, v))); }\n         if (likelihood(r, k, n)) { v[i].o = {x: 0, y: p(choice(r, v))}; }\n     }\n "}, {"sha": "7c59ceeef008eebd1f968365751a33e54d81c627", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c", "patch": "@@ -129,7 +129,7 @@ fn stash_ty_if(c: fn@(@ast::ty, test_mode)->bool,\n                e: @ast::ty,\n                tm: test_mode) {\n     if c(e, tm) {\n-        *es += [*e];\n+        vec::push(*es,*e);\n     } else {/* now my indices are wrong :( */ }\n }\n "}, {"sha": "9ea4d888fb286044fc2e3635dc8eeef294e04be7", "filename": "src/fuzzer/ivec_fuzz.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c/src%2Ffuzzer%2Fivec_fuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c/src%2Ffuzzer%2Fivec_fuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Fivec_fuzz.rs?ref=51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c", "patch": "@@ -57,11 +57,11 @@ fn vec_edits<T: copy>(v: [T], xs: [T]) -> [[T]] {\n \n     if Lv != 1u {\n         // When Lv == 1u, this is redundant with omit.\n-        edits += [[]];\n+        vec::push(edits, []);\n     }\n     if Lv >= 3u {\n         // When Lv == 2u, this is redundant with swap.\n-        edits += [vec::reversed(v)];\n+        vec::push(edits, vec::reversed(v));\n     }\n     ix(0u, 1u, Lv) {|i| edits += [vec_omit(v, i)]; }\n     ix(0u, 1u, Lv) {|i| edits += [vec_dup(v, i)]; }\n@@ -71,10 +71,10 @@ fn vec_edits<T: copy>(v: [T], xs: [T]) -> [[T]] {\n \n     ix(0u, 1u, len(xs)) {|j|\n         ix(0u, 1u, Lv) {|i|\n-            edits += [vec_poke(v, i, xs[j])];\n+            vec::push(edits, vec_poke(v, i, xs[j]));\n         }\n         ix(0u, 0u, Lv) {|i|\n-            edits += [vec_insert(v, i, xs[j])];\n+            vec::push(edits, vec_insert(v, i, xs[j]));\n         }\n     }\n "}, {"sha": "3f5c00c313ffd8620a0b6f661e4e7f2b0b4d2e94", "filename": "src/fuzzer/rand_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c/src%2Ffuzzer%2Frand_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c/src%2Ffuzzer%2Frand_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Frand_util.rs?ref=51ba3518ec6bfe6b47c72bb33fc5b55e21f5ac7c", "patch": "@@ -62,7 +62,7 @@ fn weighted_vec<T: copy>(v : [weighted<T>]) -> [T] {\n     for {weight: weight, item: item} in v {\n         let i = 0u;\n         while i < weight {\n-            r += [item];\n+            vec::push(r, item);\n             i += 1u;\n         }\n     }"}]}