{"sha": "c4c69143a996a9065a040e7d99c31da7b1ad7a81", "node_id": "C_kwDOAAsO6NoAKGM0YzY5MTQzYTk5NmE5MDY1YTA0MGU3ZDk5YzMxZGE3YjFhZDdhODE", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-29T14:44:28Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-04-29T14:45:17Z"}, "message": "Always return false in futex_wake on {Free,DragonFly}BSD.", "tree": {"sha": "a76090727fc4f1a8289a63a99c57142a8c3d71d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a76090727fc4f1a8289a63a99c57142a8c3d71d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4c69143a996a9065a040e7d99c31da7b1ad7a81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4c69143a996a9065a040e7d99c31da7b1ad7a81", "html_url": "https://github.com/rust-lang/rust/commit/c4c69143a996a9065a040e7d99c31da7b1ad7a81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4c69143a996a9065a040e7d99c31da7b1ad7a81/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b4df22f550417d55b32632ccee86a67aca63868", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b4df22f550417d55b32632ccee86a67aca63868", "html_url": "https://github.com/rust-lang/rust/commit/0b4df22f550417d55b32632ccee86a67aca63868"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "fd046bdf19d6b623cffbc9eb6deecb30b98bce5f", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4c69143a996a9065a040e7d99c31da7b1ad7a81/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c69143a996a9065a040e7d99c31da7b1ad7a81/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=c4c69143a996a9065a040e7d99c31da7b1ad7a81", "patch": "@@ -104,6 +104,8 @@ pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -\n ///\n /// Returns true if this actually woke up such a thread,\n /// or false if no thread was waiting on this futex.\n+///\n+/// On some platforms, this always returns false.\n #[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"netbsd\"))]\n pub fn futex_wake(futex: &AtomicU32) -> bool {\n     let ptr = futex as *const AtomicU32;\n@@ -135,9 +137,9 @@ pub fn futex_wake_all(futex: &AtomicU32) {\n     }\n }\n \n-// FreeBSD doesn't tell us how many threads are woken up, so this doesn't return a bool.\n+// FreeBSD doesn't tell us how many threads are woken up, so this always returns false.\n #[cfg(target_os = \"freebsd\")]\n-pub fn futex_wake(futex: &AtomicU32) {\n+pub fn futex_wake(futex: &AtomicU32) -> bool {\n     use crate::ptr::null_mut;\n     unsafe {\n         libc::_umtx_op(\n@@ -148,6 +150,7 @@ pub fn futex_wake(futex: &AtomicU32) {\n             null_mut(),\n         )\n     };\n+    false\n }\n \n #[cfg(target_os = \"freebsd\")]\n@@ -231,10 +234,11 @@ pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -\n     r == 0 || super::os::errno() != libc::ETIMEDOUT\n }\n \n-// DragonflyBSD doesn't tell us how many threads are woken up, so this doesn't return a bool.\n+// DragonflyBSD doesn't tell us how many threads are woken up, so this always returns false.\n #[cfg(target_os = \"dragonfly\")]\n-pub fn futex_wake(futex: &AtomicU32) {\n+pub fn futex_wake(futex: &AtomicU32) -> bool {\n     unsafe { libc::umtx_wakeup(futex as *const AtomicU32 as *const i32, 1) };\n+    false\n }\n \n #[cfg(target_os = \"dragonfly\")]"}, {"sha": "57f6d58840db18eb3800fc216a49ce4e09beba36", "filename": "library/std/src/sys/unix/locks/futex_rwlock.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c4c69143a996a9065a040e7d99c31da7b1ad7a81/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c69143a996a9065a040e7d99c31da7b1ad7a81/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex_rwlock.rs?ref=c4c69143a996a9065a040e7d99c31da7b1ad7a81", "patch": "@@ -283,18 +283,11 @@ impl RwLock {\n     /// writer that was about to go to sleep.\n     fn wake_writer(&self) -> bool {\n         self.writer_notify.fetch_add(1, Release);\n-        cfg_if::cfg_if! {\n-            if #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))] {\n-                // FreeBSD and DragonFlyBSD don't tell us whether they woke up any threads or not.\n-                // So, we always return `false` here, as that still results in correct behaviour.\n-                // The downside is an extra syscall in case both readers and writers were waiting,\n-                // and unnecessarily waking up readers when a writer is about to attempt to lock the lock.\n-                futex_wake(&self.writer_notify);\n-                false\n-            } else {\n-                futex_wake(&self.writer_notify)\n-            }\n-        }\n+        futex_wake(&self.writer_notify)\n+        // Note that FreeBSD and DragonFlyBSD don't tell us whether they woke\n+        // up any threads or not, and always return `false` here. That still\n+        // results in correct behaviour: it just means readers get woken up as\n+        // well in case both readers and writers were waiting.\n     }\n \n     /// Spin for a while, but stop directly at the given condition."}]}