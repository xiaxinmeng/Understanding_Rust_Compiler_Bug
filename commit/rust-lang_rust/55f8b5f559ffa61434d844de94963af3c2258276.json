{"sha": "55f8b5f559ffa61434d844de94963af3c2258276", "node_id": "C_kwDOAAsO6NoAKDU1ZjhiNWY1NTlmZmE2MTQzNGQ4NDRkZTk0OTYzYWYzYzIyNTgyNzY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-27T10:46:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-27T10:46:43Z"}, "message": "Rollup merge of #91062 - jsha:static-file-replace, r=jyn514,GuillaumeGomez\n\nrustdoc: Consolidate static-file replacement mechanism\n\nThere were a few places in rustdoc where we would take static JS or CSS and rewrite it at doc generation time to insert values. This consolidates all the CSS instances into one CSS file and replaces the JS examples with data- attributes on the rustdoc-vars div.\n\nDemo https://rustdoc.crud.net/jsha/static-file-replace/test_docs/\n\nr? ``@GuillaumeGomez``", "tree": {"sha": "33eb2ff517fa87867897d3dbb194e2fab37b793d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33eb2ff517fa87867897d3dbb194e2fab37b793d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55f8b5f559ffa61434d844de94963af3c2258276", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhogyTCRBK7hj4Ov3rIwAAiAsIAD1mr5fouvk7/0k/4T47VK5Q\n54t4MN5auzhgDiPiJjBmA6rKlJ+y5+UMkWTlDHLc5ExOzF6IKXsjuDOoRKtf3JVd\nkFOsHZAJU5CZ4fBrplkUnyfolQKseETiAvAL/VDLw2TFKMmXefKz+FhSaqKdC43r\nfCvwNq4UKTBVUD8dJqtWCC9kknzSiVFC1YnrBYMaXpNej2CM3Iff3a1W2zxNuGcK\n9JFuJwtCCFxlolJ08xjsVHhEAN3bAE0IwcmNCBE67E+nqVEhVWPCYWT0J5I5caOW\naEkmWhe1IWW2LXlKVKJjarf5dwekcViKozUhRhBbr3LtuIpTsoEN+RXVY/f+3jQ=\n=1TiJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 33eb2ff517fa87867897d3dbb194e2fab37b793d\nparent 8fb58e5eced05e493a0431ee291ad955fb32cacf\nparent d9afca58081e09c7dd9fa5c874810e05dce18d49\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638010003 +0100\ncommitter GitHub <noreply@github.com> 1638010003 +0100\n\nRollup merge of #91062 - jsha:static-file-replace, r=jyn514,GuillaumeGomez\n\nrustdoc: Consolidate static-file replacement mechanism\n\nThere were a few places in rustdoc where we would take static JS or CSS and rewrite it at doc generation time to insert values. This consolidates all the CSS instances into one CSS file and replaces the JS examples with data- attributes on the rustdoc-vars div.\n\nDemo https://rustdoc.crud.net/jsha/static-file-replace/test_docs/\n\nr? ``@GuillaumeGomez``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55f8b5f559ffa61434d844de94963af3c2258276", "html_url": "https://github.com/rust-lang/rust/commit/55f8b5f559ffa61434d844de94963af3c2258276", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55f8b5f559ffa61434d844de94963af3c2258276/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fb58e5eced05e493a0431ee291ad955fb32cacf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fb58e5eced05e493a0431ee291ad955fb32cacf", "html_url": "https://github.com/rust-lang/rust/commit/8fb58e5eced05e493a0431ee291ad955fb32cacf"}, {"sha": "d9afca58081e09c7dd9fa5c874810e05dce18d49", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9afca58081e09c7dd9fa5c874810e05dce18d49", "html_url": "https://github.com/rust-lang/rust/commit/d9afca58081e09c7dd9fa5c874810e05dce18d49"}], "stats": {"total": 250, "additions": 118, "deletions": 132}, "files": [{"sha": "04bcade156a9d33f8f4fdbb822ec7050a463c694", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55f8b5f559ffa61434d844de94963af3c2258276/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f8b5f559ffa61434d844de94963af3c2258276/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=55f8b5f559ffa61434d844de94963af3c2258276", "patch": "@@ -552,7 +552,7 @@ impl Options {\n                     ))\n                     .emit();\n                 }\n-                themes.push(StylePath { path: theme_file, disabled: true });\n+                themes.push(StylePath { path: theme_file });\n             }\n         }\n "}, {"sha": "8eadbf63f33d91e02cf683b857676049a1e4b90c", "filename": "src/librustdoc/error.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55f8b5f559ffa61434d844de94963af3c2258276/src%2Flibrustdoc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f8b5f559ffa61434d844de94963af3c2258276/src%2Flibrustdoc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ferror.rs?ref=55f8b5f559ffa61434d844de94963af3c2258276", "patch": "@@ -39,7 +39,10 @@ macro_rules! try_none {\n         match $e {\n             Some(e) => e,\n             None => {\n-                return Err(Error::new(io::Error::new(io::ErrorKind::Other, \"not found\"), $file));\n+                return Err(<crate::error::Error as crate::docfs::PathError>::new(\n+                    io::Error::new(io::ErrorKind::Other, \"not found\"),\n+                    $file,\n+                ));\n             }\n         }\n     }};"}, {"sha": "3d3fa3aaeaa519f803fac82b7377d1fb6fa030d5", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/55f8b5f559ffa61434d844de94963af3c2258276/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f8b5f559ffa61434d844de94963af3c2258276/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=55f8b5f559ffa61434d844de94963af3c2258276", "patch": "@@ -2,8 +2,8 @@ use std::path::PathBuf;\n \n use rustc_data_structures::fx::FxHashMap;\n \n+use crate::error::Error;\n use crate::externalfiles::ExternalHtml;\n-use crate::html::escape::Escape;\n use crate::html::format::{Buffer, Print};\n use crate::html::render::{ensure_trailing_slash, StylePath};\n \n@@ -50,10 +50,11 @@ struct PageLayout<'a> {\n     static_root_path: &'a str,\n     page: &'a Page<'a>,\n     layout: &'a Layout,\n-    style_files: String,\n+    themes: Vec<String>,\n     sidebar: String,\n     content: String,\n     krate_with_trailing_slash: String,\n+    crate rustdoc_version: &'a str,\n }\n \n crate fn render<T: Print, S: Print>(\n@@ -66,29 +67,24 @@ crate fn render<T: Print, S: Print>(\n ) -> String {\n     let static_root_path = page.get_static_root_path();\n     let krate_with_trailing_slash = ensure_trailing_slash(&layout.krate).to_string();\n-    let style_files = style_files\n+    let mut themes: Vec<String> = style_files\n         .iter()\n-        .filter_map(|t| t.path.file_stem().map(|stem| (stem, t.disabled)))\n-        .filter_map(|t| t.0.to_str().map(|path| (path, t.1)))\n-        .map(|t| {\n-            format!(\n-                r#\"<link rel=\"stylesheet\" type=\"text/css\" href=\"{}.css\" {} {}>\"#,\n-                Escape(&format!(\"{}{}{}\", static_root_path, t.0, page.resource_suffix)),\n-                if t.1 { \"disabled\" } else { \"\" },\n-                if t.0 == \"light\" { \"id=\\\"themeStyle\\\"\" } else { \"\" }\n-            )\n-        })\n-        .collect::<String>();\n+        .map(StylePath::basename)\n+        .collect::<Result<_, Error>>()\n+        .unwrap_or_default();\n+    themes.sort();\n+    let rustdoc_version = rustc_interface::util::version_str().unwrap_or(\"unknown version\");\n     let content = Buffer::html().to_display(t); // Note: This must happen before making the sidebar.\n     let sidebar = Buffer::html().to_display(sidebar);\n     let teractx = tera::Context::from_serialize(PageLayout {\n         static_root_path,\n         page,\n         layout,\n-        style_files,\n+        themes,\n         sidebar,\n         content,\n         krate_with_trailing_slash,\n+        rustdoc_version,\n     })\n     .unwrap();\n     templates.render(\"page.html\", &teractx).unwrap()"}, {"sha": "365d959ad9f3b3dd962f4e962e1062f8a473559b", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/55f8b5f559ffa61434d844de94963af3c2258276/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f8b5f559ffa61434d844de94963af3c2258276/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=55f8b5f559ffa61434d844de94963af3c2258276", "patch": "@@ -504,9 +504,9 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         // by the browser as the theme stylesheet. The theme system (hackily) works by\n         // changing the href to this stylesheet. All other themes are disabled to\n         // prevent rule conflicts\n-        scx.style_files.push(StylePath { path: PathBuf::from(\"light.css\"), disabled: false });\n-        scx.style_files.push(StylePath { path: PathBuf::from(\"dark.css\"), disabled: true });\n-        scx.style_files.push(StylePath { path: PathBuf::from(\"ayu.css\"), disabled: true });\n+        scx.style_files.push(StylePath { path: PathBuf::from(\"light.css\") });\n+        scx.style_files.push(StylePath { path: PathBuf::from(\"dark.css\") });\n+        scx.style_files.push(StylePath { path: PathBuf::from(\"ayu.css\") });\n \n         let dst = output;\n         scx.ensure_dir(&dst)?;\n@@ -596,9 +596,13 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         page.description = \"Settings of Rustdoc\";\n         page.root_path = \"./\";\n \n-        let mut style_files = self.shared.style_files.clone();\n         let sidebar = \"<h2 class=\\\"location\\\">Settings</h2><div class=\\\"sidebar-elems\\\"></div>\";\n-        style_files.push(StylePath { path: PathBuf::from(\"settings.css\"), disabled: false });\n+        let theme_names: Vec<String> = self\n+            .shared\n+            .style_files\n+            .iter()\n+            .map(StylePath::basename)\n+            .collect::<Result<_, Error>>()?;\n         let v = layout::render(\n             &self.shared.templates,\n             &self.shared.layout,\n@@ -607,9 +611,9 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             settings(\n                 self.shared.static_root_path.as_deref().unwrap_or(\"./\"),\n                 &self.shared.resource_suffix,\n-                &self.shared.style_files,\n+                theme_names,\n             )?,\n-            &style_files,\n+            &self.shared.style_files,\n         );\n         self.shared.fs.write(settings_file, v)?;\n         if let Some(ref redirections) = self.shared.redirections {"}, {"sha": "08022d526fefb71c5f87af68a7a3d8d6334d8915", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/55f8b5f559ffa61434d844de94963af3c2258276/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f8b5f559ffa61434d844de94963af3c2258276/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=55f8b5f559ffa61434d844de94963af3c2258276", "patch": "@@ -64,7 +64,6 @@ use serde::ser::SerializeSeq;\n use serde::{Serialize, Serializer};\n \n use crate::clean::{self, ItemId, RenderedLink, SelfTy};\n-use crate::docfs::PathError;\n use crate::error::Error;\n use crate::formats::cache::Cache;\n use crate::formats::item_type::ItemType;\n@@ -173,8 +172,12 @@ impl Serialize for TypeWithKind {\n crate struct StylePath {\n     /// The path to the theme\n     crate path: PathBuf,\n-    /// What the `disabled` attribute should be set to in the HTML tag\n-    crate disabled: bool,\n+}\n+\n+impl StylePath {\n+    pub fn basename(&self) -> Result<String, Error> {\n+        Ok(try_none!(try_none!(self.path.file_stem(), &self.path).to_str(), &self.path).to_string())\n+    }\n }\n \n fn write_srclink(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer) {\n@@ -353,7 +356,7 @@ enum Setting {\n         js_data_name: &'static str,\n         description: &'static str,\n         default_value: &'static str,\n-        options: Vec<(String, String)>,\n+        options: Vec<String>,\n     },\n }\n \n@@ -393,10 +396,9 @@ impl Setting {\n                 options\n                     .iter()\n                     .map(|opt| format!(\n-                        \"<option value=\\\"{}\\\" {}>{}</option>\",\n-                        opt.0,\n-                        if opt.0 == default_value { \"selected\" } else { \"\" },\n-                        opt.1,\n+                        \"<option value=\\\"{name}\\\" {}>{name}</option>\",\n+                        if opt == default_value { \"selected\" } else { \"\" },\n+                        name = opt,\n                     ))\n                     .collect::<String>(),\n                 root_path,\n@@ -421,18 +423,7 @@ impl<T: Into<Setting>> From<(&'static str, Vec<T>)> for Setting {\n     }\n }\n \n-fn settings(root_path: &str, suffix: &str, themes: &[StylePath]) -> Result<String, Error> {\n-    let theme_names: Vec<(String, String)> = themes\n-        .iter()\n-        .map(|entry| {\n-            let theme =\n-                try_none!(try_none!(entry.path.file_stem(), &entry.path).to_str(), &entry.path)\n-                    .to_string();\n-\n-            Ok((theme.clone(), theme))\n-        })\n-        .collect::<Result<_, Error>>()?;\n-\n+fn settings(root_path: &str, suffix: &str, theme_names: Vec<String>) -> Result<String, Error> {\n     // (id, explanation, default value)\n     let settings: &[Setting] = &[\n         (\n@@ -469,10 +460,11 @@ fn settings(root_path: &str, suffix: &str, themes: &[StylePath]) -> Result<Strin\n             <span class=\\\"in-band\\\">Rustdoc settings</span>\\\n         </h1>\\\n         <div class=\\\"settings\\\">{}</div>\\\n-        <script src=\\\"{}settings{}.js\\\"></script>\",\n+        <link rel=\\\"stylesheet\\\" href=\\\"{root_path}settings{suffix}.css\\\">\\\n+        <script src=\\\"{root_path}settings{suffix}.js\\\"></script>\",\n         settings.iter().map(|s| s.display(root_path, suffix)).collect::<String>(),\n-        root_path,\n-        suffix\n+        root_path = root_path,\n+        suffix = suffix\n     ))\n }\n "}, {"sha": "0d5ba8e80d2429464ca2a1e842b8cc38de524558", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 24, "deletions": 62, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/55f8b5f559ffa61434d844de94963af3c2258276/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f8b5f559ffa61434d844de94963af3c2258276/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=55f8b5f559ffa61434d844de94963af3c2258276", "patch": "@@ -181,42 +181,34 @@ pub(super) fn write_shared(\n         cx.write_shared(SharedResource::InvocationSpecific { basename: p }, content, &options.emit)\n     };\n \n-    fn add_background_image_to_css(\n-        cx: &Context<'_>,\n-        css: &mut String,\n-        rule: &str,\n-        file: &'static str,\n-    ) {\n-        css.push_str(&format!(\n-            \"{} {{ background-image: url({}); }}\",\n-            rule,\n-            SharedResource::ToolchainSpecific { basename: file }\n+    // Given \"foo.svg\", return e.g. \"url(\\\"foo1.58.0.svg\\\")\"\n+    fn ver_url(cx: &Context<'_>, basename: &'static str) -> String {\n+        format!(\n+            \"url(\\\"{}\\\")\",\n+            SharedResource::ToolchainSpecific { basename }\n                 .path(cx)\n                 .file_name()\n                 .unwrap()\n                 .to_str()\n                 .unwrap()\n-        ))\n+        )\n     }\n \n-    // Add all the static files. These may already exist, but we just\n-    // overwrite them anyway to make sure that they're fresh and up-to-date.\n-    let mut rustdoc_css = static_files::RUSTDOC_CSS.to_owned();\n-    add_background_image_to_css(\n-        cx,\n-        &mut rustdoc_css,\n-        \"details.undocumented[open] > summary::before, \\\n-         details.rustdoc-toggle[open] > summary::before, \\\n-         details.rustdoc-toggle[open] > summary.hideme::before\",\n-        \"toggle-minus.svg\",\n-    );\n-    add_background_image_to_css(\n+    // We use the AUTOREPLACE mechanism to inject into our static JS and CSS certain\n+    // values that are only known at doc build time. Since this mechanism is somewhat\n+    // surprising when reading the code, please limit it to rustdoc.css.\n+    write_minify(\n+        \"rustdoc.css\",\n+        static_files::RUSTDOC_CSS\n+            .replace(\n+                \"/* AUTOREPLACE: */url(\\\"toggle-minus.svg\\\")\",\n+                &ver_url(cx, \"toggle-minus.svg\"),\n+            )\n+            .replace(\"/* AUTOREPLACE: */url(\\\"toggle-plus.svg\\\")\", &ver_url(cx, \"toggle-plus.svg\"))\n+            .replace(\"/* AUTOREPLACE: */url(\\\"down-arrow.svg\\\")\", &ver_url(cx, \"down-arrow.svg\")),\n         cx,\n-        &mut rustdoc_css,\n-        \"details.undocumented > summary::before, details.rustdoc-toggle > summary::before\",\n-        \"toggle-plus.svg\",\n-    );\n-    write_minify(\"rustdoc.css\", rustdoc_css, cx, options)?;\n+        options,\n+    )?;\n \n     // Add all the static files. These may already exist, but we just\n     // overwrite them anyway to make sure that they're fresh and up-to-date.\n@@ -228,12 +220,12 @@ pub(super) fn write_shared(\n     let mut themes: FxHashSet<String> = FxHashSet::default();\n \n     for entry in &cx.shared.style_files {\n-        let theme = try_none!(try_none!(entry.path.file_stem(), &entry.path).to_str(), &entry.path);\n+        let theme = entry.basename()?;\n         let extension =\n             try_none!(try_none!(entry.path.extension(), &entry.path).to_str(), &entry.path);\n \n         // Handle the official themes\n-        match theme {\n+        match theme.as_str() {\n             \"light\" => write_minify(\"light.css\", static_files::themes::LIGHT, cx, options)?,\n             \"dark\" => write_minify(\"dark.css\", static_files::themes::DARK, cx, options)?,\n             \"ayu\" => write_minify(\"ayu.css\", static_files::themes::AYU, cx, options)?,\n@@ -265,45 +257,15 @@ pub(super) fn write_shared(\n     let mut themes: Vec<&String> = themes.iter().collect();\n     themes.sort();\n \n-    // FIXME: this should probably not be a toolchain file since it depends on `--theme`.\n-    // But it seems a shame to copy it over and over when it's almost always the same.\n-    // Maybe we can change the representation to move this out of main.js?\n-    write_minify(\n-        \"main.js\",\n-        static_files::MAIN_JS\n-            .replace(\n-                \"/* INSERT THEMES HERE */\",\n-                &format!(\" = {}\", serde_json::to_string(&themes).unwrap()),\n-            )\n-            .replace(\n-                \"/* INSERT RUSTDOC_VERSION HERE */\",\n-                &format!(\n-                    \"rustdoc {}\",\n-                    rustc_interface::util::version_str().unwrap_or(\"unknown version\")\n-                ),\n-            ),\n-        cx,\n-        options,\n-    )?;\n+    write_minify(\"main.js\", static_files::MAIN_JS, cx, options)?;\n     write_minify(\"search.js\", static_files::SEARCH_JS, cx, options)?;\n     write_minify(\"settings.js\", static_files::SETTINGS_JS, cx, options)?;\n \n     if cx.include_sources {\n         write_minify(\"source-script.js\", static_files::sidebar::SOURCE_SCRIPT, cx, options)?;\n     }\n \n-    {\n-        write_minify(\n-            \"storage.js\",\n-            format!(\n-                \"var resourcesSuffix = \\\"{}\\\";{}\",\n-                cx.shared.resource_suffix,\n-                static_files::STORAGE_JS\n-            ),\n-            cx,\n-            options,\n-        )?;\n-    }\n+    write_minify(\"storage.js\", static_files::STORAGE_JS, cx, options)?;\n \n     if cx.shared.layout.scrape_examples_extension {\n         cx.write_minify("}, {"sha": "fceb508bc4ff5e41461d6398fc073ecb126fd93a", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55f8b5f559ffa61434d844de94963af3c2258276/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/55f8b5f559ffa61434d844de94963af3c2258276/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=55f8b5f559ffa61434d844de94963af3c2258276", "patch": "@@ -828,6 +828,7 @@ h2.small-section-header > .anchor {\n \tbackground-color: transparent;\n \tbackground-size: 20px;\n \tbackground-position: calc(100% - 1px) 56%;\n+\tbackground-image: /* AUTOREPLACE: */url(\"down-arrow.svg\");\n }\n .search-container > .top-button {\n \tposition: absolute;\n@@ -1610,6 +1611,16 @@ details.rustdoc-toggle[open] > summary.hideme > span {\n \tdisplay: none;\n }\n \n+details.undocumented[open] > summary::before,\n+details.rustdoc-toggle[open] > summary::before,\n+details.rustdoc-toggle[open] > summary.hideme::before {\n+\tbackground-image: /* AUTOREPLACE: */url(\"toggle-minus.svg\");\n+}\n+\n+details.undocumented > summary::before, details.rustdoc-toggle > summary::before {\n+\tbackground-image: /* AUTOREPLACE: */url(\"toggle-plus.svg\");\n+}\n+\n details.rustdoc-toggle[open] > summary::before,\n details.rustdoc-toggle[open] > summary.hideme::before {\n \twidth: 17px;"}, {"sha": "5661d4973342f034c207b2b9beb725b934fdd80e", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/55f8b5f559ffa61434d844de94963af3c2258276/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/55f8b5f559ffa61434d844de94963af3c2258276/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=55f8b5f559ffa61434d844de94963af3c2258276", "patch": "@@ -37,14 +37,29 @@ if (!DOMTokenList.prototype.remove) {\n     };\n }\n \n-(function () {\n-    var rustdocVars = document.getElementById(\"rustdoc-vars\");\n-    if (rustdocVars) {\n-        window.rootPath = rustdocVars.attributes[\"data-root-path\"].value;\n-        window.currentCrate = rustdocVars.attributes[\"data-current-crate\"].value;\n-        window.searchJS = rustdocVars.attributes[\"data-search-js\"].value;\n-        window.searchIndexJS = rustdocVars.attributes[\"data-search-index-js\"].value;\n+// Get a value from the rustdoc-vars div, which is used to convey data from\n+// Rust to the JS. If there is no such element, return null.\n+function getVar(name) {\n+    var el = document.getElementById(\"rustdoc-vars\");\n+    if (el) {\n+        return el.attributes[\"data-\" + name].value;\n+    } else {\n+        return null;\n     }\n+}\n+\n+// Given a basename (e.g. \"storage\") and an extension (e.g. \".js\"), return a URL\n+// for a resource under the root-path, with the resource-suffix.\n+function resourcePath(basename, extension) {\n+    return getVar(\"root-path\") + basename + getVar(\"resource-suffix\") + extension;\n+}\n+\n+\n+(function () {\n+    window.rootPath = getVar(\"root-path\");\n+    window.currentCrate = getVar(\"current-crate\");\n+    window.searchJS =  resourcePath(\"search\", \".js\");\n+    window.searchIndexJS = resourcePath(\"search-index\", \".js\");\n     var sidebarVars = document.getElementById(\"sidebar-vars\");\n     if (sidebarVars) {\n         window.sidebarCurrent = {\n@@ -115,7 +130,7 @@ function hideThemeButtonState() {\n (function () {\n     var themeChoices = getThemesElement();\n     var themePicker = getThemePickerElement();\n-    var availableThemes/* INSERT THEMES HERE */;\n+    var availableThemes = getVar(\"themes\").split(\",\");\n \n     function switchThemeButtonState() {\n         if (themeChoices.style.display === \"block\") {\n@@ -980,7 +995,7 @@ function hideThemeButtonState() {\n         var rustdoc_version = document.createElement(\"span\");\n         rustdoc_version.className = \"bottom\";\n         var rustdoc_version_code = document.createElement(\"code\");\n-        rustdoc_version_code.innerText = \"/* INSERT RUSTDOC_VERSION HERE */\";\n+        rustdoc_version_code.innerText = \"rustdoc \" + getVar(\"rustdoc-version\");\n         rustdoc_version.appendChild(rustdoc_version_code);\n \n         container.appendChild(rustdoc_version);"}, {"sha": "606c237aea7d01bd5d5c728720043d0f3285d33c", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55f8b5f559ffa61434d844de94963af3c2258276/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/55f8b5f559ffa61434d844de94963af3c2258276/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=55f8b5f559ffa61434d844de94963af3c2258276", "patch": "@@ -1,5 +1,3 @@\n-// From rust:\n-/* global resourcesSuffix */\n var darkThemes = [\"dark\", \"ayu\"];\n window.currentTheme = document.getElementById(\"themeStyle\");\n window.mainTheme = document.getElementById(\"mainThemeStyle\");\n@@ -107,9 +105,8 @@ function getCurrentValue(name) {\n }\n \n function switchTheme(styleElem, mainStyleElem, newTheme, saveTheme) {\n-    var fullBasicCss = \"rustdoc\" + resourcesSuffix + \".css\";\n-    var fullNewTheme = newTheme + resourcesSuffix + \".css\";\n-    var newHref = mainStyleElem.href.replace(fullBasicCss, fullNewTheme);\n+    var newHref = mainStyleElem.href.replace(\n+        /\\/rustdoc([^/]*)\\.css/, \"/\" + newTheme + \"$1\" + \".css\");\n \n     // If this new value comes from a system setting or from the previously\n     // saved theme, no need to save it."}, {"sha": "2a783c6da57e4f67713d58b01a78cb1bf4f1a28a", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/55f8b5f559ffa61434d844de94963af3c2258276/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/55f8b5f559ffa61434d844de94963af3c2258276/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=55f8b5f559ffa61434d844de94963af3c2258276", "patch": "@@ -12,7 +12,16 @@\n     <link rel=\"stylesheet\" type=\"text/css\" {# -#}\n           href=\"{{static_root_path | safe}}rustdoc{{page.resource_suffix}}.css\" {# -#}\n           id=\"mainThemeStyle\"> {#- -#}\n-    {{- style_files | safe -}}\n+    {%- for theme in themes -%}\n+        <link rel=\"stylesheet\" type=\"text/css\" {# -#}\n+            href=\"{{static_root_path | safe}}{{theme}}{{page.resource_suffix}}.css\" {#- -#}\n+        {%- if theme == \"light\" -%}\n+            id=\"themeStyle\"\n+        {%- else -%}\n+            disabled\n+        {%- endif -%}\n+        >\n+    {%- endfor -%}\n     <script id=\"default-settings\" {# -#}\n       {% for k, v in layout.default_settings %}\n         data-{{k}}=\"{{v}}\"\n@@ -49,11 +58,6 @@\n             href=\"{{static_root_path | safe}}favicon{{page.resource_suffix}}.svg\"> {#- -#}\n     {%- endif -%}\n     {{- layout.external_html.in_header | safe -}}\n-    <style type=\"text/css\"> {#- -#}\n-    #crate-search{ {#- -#}\n-        background-image:url(\"{{static_root_path | safe}}down-arrow{{page.resource_suffix}}.svg\"); {#- -#}\n-    } {#- -#}\n-    </style> {#- -#}\n </head> {#- -#}\n <body class=\"rustdoc {{page.css_class}}\"> {#- -#}\n     <!--[if lte IE 11]> {#- -#}\n@@ -114,8 +118,10 @@\n     <div id=\"rustdoc-vars\" {# -#}\n          data-root-path=\"{{page.root_path | safe}}\" {# -#}\n          data-current-crate=\"{{layout.krate}}\" {# -#}\n-         data-search-index-js=\"{{page.root_path | safe}}search-index{{page.resource_suffix}}.js\" {# -#}\n-         data-search-js=\"{{static_root_path | safe}}search{{page.resource_suffix}}.js\"> {#- -#}\n+         data-themes=\"{{themes | join(sep=\",\") }}\" {# -#}\n+         data-resource-suffix=\"{{page.resource_suffix}}\" {# -#}\n+         data-rustdoc-version=\"{{rustdoc_version}}\" {# -#}\n+    > {#- -#}\n     </div>\n </body> {#- -#}\n </html> {#- -#}"}, {"sha": "f1d49b9fcb20ae98d5eea6d56731d4cc870dd1f0", "filename": "src/test/rustdoc/static-root-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55f8b5f559ffa61434d844de94963af3c2258276/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f8b5f559ffa61434d844de94963af3c2258276/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs?ref=55f8b5f559ffa61434d844de94963af3c2258276", "patch": "@@ -3,7 +3,7 @@\n // @has static_root_path/struct.SomeStruct.html\n // @matches - '\"/cache/main\\.js\"'\n // @!matches - '\"\\.\\./main\\.js\"'\n-// @matches - '\"\\.\\./search-index\\.js\"'\n+// @matches - 'data-root-path=\"\\.\\./\"'\n // @!matches - '\"/cache/search-index\\.js\"'\n pub struct SomeStruct;\n "}]}