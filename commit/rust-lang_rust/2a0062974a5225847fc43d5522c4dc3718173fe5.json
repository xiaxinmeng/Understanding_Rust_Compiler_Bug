{"sha": "2a0062974a5225847fc43d5522c4dc3718173fe5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMDA2Mjk3NGE1MjI1ODQ3ZmM0M2Q1NTIyYzRkYzM3MTgxNzNmZTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-09T21:22:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-09T21:22:36Z"}, "message": "Auto merge of #51459 - kennytm:dist-at-stage-0, r=Mark-Simulacrum\n\nMiscellaneous changes to rustbuild and CI.\n\n1. Don't build LLVM when running rust-installer.\n2. If toolstate is unchanged, don't push a commit to the toolstate repo.\n3. Allow `./x.py build src/librustc_codegen_llvm`\n4. Added log to track #50887.", "tree": {"sha": "077ac9a505164152767016a05e764d2d5a0a10e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/077ac9a505164152767016a05e764d2d5a0a10e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a0062974a5225847fc43d5522c4dc3718173fe5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a0062974a5225847fc43d5522c4dc3718173fe5", "html_url": "https://github.com/rust-lang/rust/commit/2a0062974a5225847fc43d5522c4dc3718173fe5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a0062974a5225847fc43d5522c4dc3718173fe5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61d88318aa66669fba061e9af529365172d63cd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/61d88318aa66669fba061e9af529365172d63cd0", "html_url": "https://github.com/rust-lang/rust/commit/61d88318aa66669fba061e9af529365172d63cd0"}, {"sha": "ab5e3e66b57cded1127303d32adf35502d3e1fa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5e3e66b57cded1127303d32adf35502d3e1fa0", "html_url": "https://github.com/rust-lang/rust/commit/ab5e3e66b57cded1127303d32adf35502d3e1fa0"}], "stats": {"total": 87, "additions": 59, "deletions": 28}, "files": [{"sha": "2e6722cf85563926a0297da1cfed8ee4959d169b", "filename": ".travis.yml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a0062974a5225847fc43d5522c4dc3718173fe5/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/2a0062974a5225847fc43d5522c4dc3718173fe5/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=2a0062974a5225847fc43d5522c4dc3718173fe5", "patch": "@@ -284,6 +284,9 @@ after_failure:\n       -exec head -750 {} \\;\n       -exec echo travis_fold\":\"end:crashlog \\; || true\n \n+  # see #50887\n+  - head -30 ./obj/build/x86_64-unknown-linux-gnu/native/asan/build/lib/asan/clang_rt.asan-dynamic-i386.vers || true\n+\n   # attempt to debug anything killed by the oom killer on linux, just to see if\n   # it happened\n   - dmesg | grep -i kill"}, {"sha": "d482a0d565027a6675be76c31bbc04c6a91abb92", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a0062974a5225847fc43d5522c4dc3718173fe5/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0062974a5225847fc43d5522c4dc3718173fe5/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=2a0062974a5225847fc43d5522c4dc3718173fe5", "patch": "@@ -339,6 +339,7 @@ impl<'a> Builder<'a> {\n                 compile::Std,\n                 compile::Test,\n                 compile::Rustc,\n+                compile::CodegenBackend,\n                 compile::StartupObjects,\n                 tool::BuildManifest,\n                 tool::Rustbook,"}, {"sha": "0c164d86332a815cd215b77d99c12dc6596a538e", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2a0062974a5225847fc43d5522c4dc3718173fe5/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0062974a5225847fc43d5522c4dc3718173fe5/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=2a0062974a5225847fc43d5522c4dc3718173fe5", "patch": "@@ -254,7 +254,7 @@ pub fn prepare_tool_cargo(\n }\n \n macro_rules! tool {\n-    ($($name:ident, $path:expr, $tool_name:expr, $mode:expr;)+) => {\n+    ($($name:ident, $path:expr, $tool_name:expr, $mode:expr $(,llvm_tools = $llvm:expr)*;)+) => {\n         #[derive(Copy, Clone)]\n         pub enum Tool {\n             $(\n@@ -269,6 +269,13 @@ macro_rules! tool {\n                 };\n                 mode\n             }\n+\n+            /// Whether this tool requires LLVM to run\n+            pub fn uses_llvm_tools(&self) -> bool {\n+                match self {\n+                    $(Tool::$name => true $(&& $llvm)*,)+\n+                }\n+            }\n         }\n \n         impl<'a> Builder<'a> {\n@@ -333,6 +340,9 @@ macro_rules! tool {\n     }\n }\n \n+// FIXME(#51459): We have only checked that RustInstaller does not require\n+// the LLVM binaries when running. We should go through all tools to determine\n+// if they really need LLVM binaries, and make `llvm_tools` a required argument.\n tool!(\n     Rustbook, \"src/tools/rustbook\", \"rustbook\", Mode::ToolRustc;\n     ErrorIndex, \"src/tools/error_index_generator\", \"error_index_generator\", Mode::ToolRustc;\n@@ -343,7 +353,7 @@ tool!(\n     Compiletest, \"src/tools/compiletest\", \"compiletest\", Mode::ToolTest;\n     BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::ToolStd;\n     RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\", Mode::ToolStd;\n-    RustInstaller, \"src/tools/rust-installer\", \"fabricate\", Mode::ToolStd;\n+    RustInstaller, \"src/tools/rust-installer\", \"fabricate\", Mode::ToolStd, llvm_tools = false;\n     RustdocTheme, \"src/tools/rustdoc-themes\", \"rustdoc-themes\", Mode::ToolStd;\n );\n \n@@ -586,19 +596,19 @@ impl<'a> Builder<'a> {\n     pub fn tool_cmd(&self, tool: Tool) -> Command {\n         let mut cmd = Command::new(self.tool_exe(tool));\n         let compiler = self.compiler(self.tool_default_stage(tool), self.config.build);\n-        self.prepare_tool_cmd(compiler, tool.get_mode(), &mut cmd);\n+        self.prepare_tool_cmd(compiler, tool, &mut cmd);\n         cmd\n     }\n \n     /// Prepares the `cmd` provided to be able to run the `compiler` provided.\n     ///\n     /// Notably this munges the dynamic library lookup path to point to the\n     /// right location to run `compiler`.\n-    fn prepare_tool_cmd(&self, compiler: Compiler, mode: Mode, cmd: &mut Command) {\n+    fn prepare_tool_cmd(&self, compiler: Compiler, tool: Tool, cmd: &mut Command) {\n         let host = &compiler.host;\n         let mut lib_paths: Vec<PathBuf> = vec![\n             PathBuf::from(&self.sysroot_libdir(compiler, compiler.host)),\n-            self.cargo_out(compiler, mode, *host).join(\"deps\"),\n+            self.cargo_out(compiler, tool.get_mode(), *host).join(\"deps\"),\n         ];\n \n         // On MSVC a tool may invoke a C compiler (e.g. compiletest in run-make\n@@ -621,17 +631,19 @@ impl<'a> Builder<'a> {\n \n         // Add the llvm/bin directory to PATH since it contains lots of\n         // useful, platform-independent tools\n-        if let Some(llvm_bin_path) = self.llvm_bin_path() {\n-            if host.contains(\"windows\") {\n-                // On Windows, PATH and the dynamic library path are the same,\n-                // so we just add the LLVM bin path to lib_path\n-                lib_paths.push(llvm_bin_path);\n-            } else {\n-                let old_path = env::var_os(\"PATH\").unwrap_or_default();\n-                let new_path = env::join_paths(iter::once(llvm_bin_path)\n-                        .chain(env::split_paths(&old_path)))\n-                    .expect(\"Could not add LLVM bin path to PATH\");\n-                cmd.env(\"PATH\", new_path);\n+        if tool.uses_llvm_tools() {\n+            if let Some(llvm_bin_path) = self.llvm_bin_path() {\n+                if host.contains(\"windows\") {\n+                    // On Windows, PATH and the dynamic library path are the same,\n+                    // so we just add the LLVM bin path to lib_path\n+                    lib_paths.push(llvm_bin_path);\n+                } else {\n+                    let old_path = env::var_os(\"PATH\").unwrap_or_default();\n+                    let new_path = env::join_paths(iter::once(llvm_bin_path)\n+                            .chain(env::split_paths(&old_path)))\n+                        .expect(\"Could not add LLVM bin path to PATH\");\n+                    cmd.env(\"PATH\", new_path);\n+                }\n             }\n         }\n "}, {"sha": "208aab434ce1fa84f289b5e0c044a4bda3afd0fc", "filename": "src/ci/docker/x86_64-gnu-tools/checkregression.py", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2a0062974a5225847fc43d5522c4dc3718173fe5/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fcheckregression.py", "raw_url": "https://github.com/rust-lang/rust/raw/2a0062974a5225847fc43d5522c4dc3718173fe5/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fcheckregression.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fcheckregression.py?ref=2a0062974a5225847fc43d5522c4dc3718173fe5", "patch": "@@ -18,6 +18,7 @@\n     os_name = sys.argv[1]\n     toolstate_file = sys.argv[2]\n     current_state = sys.argv[3]\n+    verb = sys.argv[4] # 'regressed' or 'changed'\n \n     with open(toolstate_file, 'r') as f:\n         toolstate = json.load(f)\n@@ -29,10 +30,17 @@\n         tool = cur['tool']\n         state = cur[os_name]\n         new_state = toolstate.get(tool, '')\n-        if new_state < state:\n+        if verb == 'regressed':\n+            updated = new_state < state\n+        elif verb == 'changed':\n+            updated = new_state != state\n+        else:\n+            print('Unknown verb {}'.format(updated))\n+            sys.exit(2)\n+        if updated:\n             print(\n-                'Error: The state of \"{}\" has regressed from \"{}\" to \"{}\"'\n-                .format(tool, state, new_state)\n+                'The state of \"{}\" has {} from \"{}\" to \"{}\"'\n+                .format(tool, verb, state, new_state)\n             )\n             regressed = True\n "}, {"sha": "d26be93861c0fa29f8b697ac988bddd053e4c7c3", "filename": "src/ci/docker/x86_64-gnu-tools/checktools.sh", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2a0062974a5225847fc43d5522c4dc3718173fe5/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2a0062974a5225847fc43d5522c4dc3718173fe5/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh?ref=2a0062974a5225847fc43d5522c4dc3718173fe5", "patch": "@@ -91,19 +91,26 @@ status_check() {\n \n status_check \"submodule_changed\"\n \n-if [ \"$RUST_RELEASE_CHANNEL\" = nightly -a -n \"${TOOLSTATE_REPO_ACCESS_TOKEN+is_set}\" ]; then\n-    . \"$(dirname $0)/repo.sh\"\n-    MESSAGE_FILE=$(mktemp -t msg.XXXXXX)\n-    echo \"($OS CI update)\" > \"$MESSAGE_FILE\"\n-    commit_toolstate_change \"$MESSAGE_FILE\" \\\n+CHECK_NOT=\"$(dirname $0)/checkregression.py\"\n+change_toolstate() {\n+    # only update the history\n+    if python2.7 \"$CHECK_NOT\" \"$OS\" \"$TOOLSTATE_FILE\" \"_data/latest.json\" changed; then\n+        echo 'Toolstate is not changed. Not updating.'\n+    else\n+        if [ $SIX_WEEK_CYCLE -eq 5 ]; then\n+            python2.7 \"$CHECK_NOT\" \"$OS\" \"$TOOLSTATE_FILE\" \"_data/latest.json\" regressed\n+        fi\n         sed -i \"1 a\\\\\n $COMMIT\\t$(cat \"$TOOLSTATE_FILE\")\n \" \"history/$OS.tsv\"\n-    # if we are at the last week in the 6-week release cycle, reject any kind of regression.\n-    if [ $SIX_WEEK_CYCLE -eq 5 ]; then\n-        python2.7 \"$(dirname $0)/checkregression.py\" \\\n-            \"$OS\" \"$TOOLSTATE_FILE\" \"rust-toolstate/_data/latest.json\"\n     fi\n+}\n+\n+if [ \"$RUST_RELEASE_CHANNEL\" = nightly -a -n \"${TOOLSTATE_REPO_ACCESS_TOKEN+is_set}\" ]; then\n+    . \"$(dirname $0)/repo.sh\"\n+    MESSAGE_FILE=$(mktemp -t msg.XXXXXX)\n+    echo \"($OS CI update)\" > \"$MESSAGE_FILE\"\n+    commit_toolstate_change \"$MESSAGE_FILE\" change_toolstate\n     rm -f \"$MESSAGE_FILE\"\n     exit 0\n fi"}]}