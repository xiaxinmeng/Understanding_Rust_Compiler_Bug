{"sha": "849ae5d8815c54d135eb9d58cae77c2e6dcac55a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0OWFlNWQ4ODE1YzU0ZDEzNWViOWQ1OGNhZTc3YzJlNmRjYWM1NWE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2014-08-20T10:53:50Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2014-08-27T13:19:14Z"}, "message": "debuginfo: Emit different autotest debugger scripts depending on GDB version.", "tree": {"sha": "ceb472feaae7c7a2b63305c2a5dce26663252326", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceb472feaae7c7a2b63305c2a5dce26663252326"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/849ae5d8815c54d135eb9d58cae77c2e6dcac55a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/849ae5d8815c54d135eb9d58cae77c2e6dcac55a", "html_url": "https://github.com/rust-lang/rust/commit/849ae5d8815c54d135eb9d58cae77c2e6dcac55a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/849ae5d8815c54d135eb9d58cae77c2e6dcac55a/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6974b4f1b52556e191ade6653e9a9440d1d19610", "url": "https://api.github.com/repos/rust-lang/rust/commits/6974b4f1b52556e191ade6653e9a9440d1d19610", "html_url": "https://github.com/rust-lang/rust/commit/6974b4f1b52556e191ade6653e9a9440d1d19610"}], "stats": {"total": 245, "additions": 210, "deletions": 35}, "files": [{"sha": "1d6c387caa7c669811a7fa936bd4dd3b2840728d", "filename": "configure", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/849ae5d8815c54d135eb9d58cae77c2e6dcac55a/configure", "raw_url": "https://github.com/rust-lang/rust/raw/849ae5d8815c54d135eb9d58cae77c2e6dcac55a/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=849ae5d8815c54d135eb9d58cae77c2e6dcac55a", "patch": "@@ -515,6 +515,13 @@ probe CFG_LUALATEX         lualatex\n probe CFG_GDB              gdb\n probe CFG_LLDB             lldb\n \n+if [ ! -z \"$CFG_GDB\" ]\n+then\n+    # Extract the version\n+    CFG_GDB_VERSION=$($CFG_GDB --version 2>/dev/null | head -1)\n+    putvar CFG_GDB_VERSION\n+fi\n+\n if [ ! -z \"$CFG_LLDB\" ]\n then\n     # If CFG_LLDB_PYTHON_DIR is not already set from the outside and valid, try to read it from"}, {"sha": "d95f886e078896cb4649f3905883310401bcbe62", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/849ae5d8815c54d135eb9d58cae77c2e6dcac55a/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/849ae5d8815c54d135eb9d58cae77c2e6dcac55a/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=849ae5d8815c54d135eb9d58cae77c2e6dcac55a", "patch": "@@ -623,6 +623,7 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) := \\\n         --stage-id stage$(1)-$(2) \\\n         --target $(2) \\\n         --host $(3) \\\n+        --gdb-version=\"$(CFG_GDB_VERSION)\" \\\n         --android-cross-path=$(CFG_ANDROID_CROSS_PATH) \\\n         --adb-path=$(CFG_ADB) \\\n         --adb-test-dir=$(CFG_ADB_TEST_DIR) \\"}, {"sha": "afe2d071461a0317356c811f443b8f803e5bb8a8", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/849ae5d8815c54d135eb9d58cae77c2e6dcac55a/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849ae5d8815c54d135eb9d58cae77c2e6dcac55a/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=849ae5d8815c54d135eb9d58cae77c2e6dcac55a", "patch": "@@ -130,6 +130,9 @@ pub struct Config {\n     // Host triple for the compiler being invoked\n     pub host: String,\n \n+    // Version of GDB\n+    pub gdb_version: Option<String>,\n+\n     // Path to the android tools\n     pub android_cross_path: Path,\n "}, {"sha": "31b37070d2f139f7f04ceb69bc76c9c25719e09b", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/849ae5d8815c54d135eb9d58cae77c2e6dcac55a/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849ae5d8815c54d135eb9d58cae77c2e6dcac55a/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=849ae5d8815c54d135eb9d58cae77c2e6dcac55a", "patch": "@@ -81,6 +81,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n           optflag(\"\", \"jit\", \"run tests under the JIT\"),\n           optopt(\"\", \"target\", \"the target to build for\", \"TARGET\"),\n           optopt(\"\", \"host\", \"the host to build for\", \"HOST\"),\n+          optopt(\"\", \"gdb-version\", \"the version of GDB used\", \"MAJOR.MINOR\"),\n           optopt(\"\", \"android-cross-path\", \"Android NDK standalone path\", \"PATH\"),\n           optopt(\"\", \"adb-path\", \"path to the android debugger\", \"PATH\"),\n           optopt(\"\", \"adb-test-dir\", \"path to tests for the android debugger\", \"PATH\"),\n@@ -157,6 +158,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         jit: matches.opt_present(\"jit\"),\n         target: opt_str2(matches.opt_str(\"target\")),\n         host: opt_str2(matches.opt_str(\"host\")),\n+        gdb_version: extract_gdb_version(matches.opt_str(\"gdb-version\")),\n         android_cross_path: opt_path(matches, \"android-cross-path\"),\n         adb_path: opt_str2(matches.opt_str(\"adb-path\")),\n         adb_test_dir: opt_str2(matches.opt_str(\"adb-test-dir\")),\n@@ -376,3 +378,20 @@ pub fn make_metrics_test_closure(config: &Config, testfile: &Path) -> test::Test\n         runtest::run_metrics(config, testfile, mm)\n     })\n }\n+\n+fn extract_gdb_version(full_version_line: Option<String>) -> Option<String> {\n+    match full_version_line {\n+        Some(full_version_line) => {\n+            let full_version_line = full_version_line.as_slice().trim();\n+            let re = Regex::new(r\"[^0-9]([0-9]\\.[0-9])([^0-9]|$)\").unwrap();\n+\n+            match re.captures(full_version_line) {\n+                Some(captures) => {\n+                    Some(captures.at(1).to_string())\n+                }\n+                None => None\n+            }\n+        },\n+        None => None\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "9ad2582dec8456d60c6d52d4aaf2534a6f6f1e8e", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 54, "deletions": 15, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/849ae5d8815c54d135eb9d58cae77c2e6dcac55a/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849ae5d8815c54d135eb9d58cae77c2e6dcac55a/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=849ae5d8815c54d135eb9d58cae77c2e6dcac55a", "patch": "@@ -12,6 +12,8 @@ use common::Config;\n use common;\n use util;\n \n+use std::from_str::FromStr;\n+\n pub struct TestProps {\n     // Lines that should be expected, in order, on standard out\n     pub error_patterns: Vec<String> ,\n@@ -142,23 +144,42 @@ pub fn is_test_ignored(config: &Config, testfile: &Path) -> bool {\n         format!(\"ignore-{}\",\n                 config.stage_id.as_slice().split('-').next().unwrap())\n     }\n+    fn ignore_gdb(config: &Config, line: &str) -> bool {\n+        if config.mode != common::DebugInfoGdb {\n+            return false;\n+        }\n \n-    let val = iter_header(testfile, |ln| {\n-        if parse_name_directive(ln, \"ignore-test\") {\n-            false\n-        } else if parse_name_directive(ln, ignore_target(config).as_slice()) {\n-            false\n-        } else if parse_name_directive(ln, ignore_stage(config).as_slice()) {\n-            false\n-        } else if config.mode == common::Pretty &&\n-                parse_name_directive(ln, \"ignore-pretty\") {\n-            false\n-        } else if config.target != config.host &&\n-                parse_name_directive(ln, \"ignore-cross-compile\") {\n-            false\n-        } else {\n-            true\n+        if parse_name_directive(line, \"ignore-gdb\") {\n+            return true;\n         }\n+\n+        match config.gdb_version {\n+            Some(ref actual_version) => {\n+                if line.contains(\"min-gdb-version\") {\n+                    let min_version = line.trim()\n+                                          .split(' ')\n+                                          .last()\n+                                          .expect(\"Malformed GDB version directive\");\n+                    // Ignore if actual version is smaller the minimum required\n+                    // version\n+                    gdb_version_to_int(actual_version.as_slice()) <\n+                        gdb_version_to_int(min_version.as_slice())\n+                } else {\n+                    false\n+                }\n+            }\n+            None => false\n+        }\n+    }\n+\n+    let val = iter_header(testfile, |ln| {\n+        !parse_name_directive(ln, \"ignore-test\") &&\n+        !parse_name_directive(ln, ignore_target(config).as_slice()) &&\n+        !parse_name_directive(ln, ignore_stage(config).as_slice()) &&\n+        !(config.mode == common::Pretty && parse_name_directive(ln, \"ignore-pretty\")) &&\n+        !(config.target != config.host && parse_name_directive(ln, \"ignore-cross-compile\")) &&\n+        !ignore_gdb(config, ln) &&\n+        !(config.mode == common::DebugInfoLldb && parse_name_directive(ln, \"ignore-lldb\"))\n     });\n \n     !val\n@@ -278,3 +299,21 @@ pub fn parse_name_value_directive(line: &str, directive: &str)\n         None => None\n     }\n }\n+\n+pub fn gdb_version_to_int(version_string: &str) -> int {\n+    let error_string = format!(\n+        \"Encountered GDB version string with unexpected format: {}\",\n+        version_string);\n+    let error_string = error_string.as_slice();\n+\n+    let components: Vec<&str> = version_string.trim().split('.').collect();\n+\n+    if components.len() != 2 {\n+        fail!(\"{}\", error_string);\n+    }\n+\n+    let major: int = FromStr::from_str(components[0]).expect(error_string);\n+    let minor: int = FromStr::from_str(components[1]).expect(error_string);\n+\n+    return major * 1000 + minor;\n+}"}, {"sha": "6a1e1c6cc76bc07c3202550182a4167dfaf8790a", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/849ae5d8815c54d135eb9d58cae77c2e6dcac55a/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849ae5d8815c54d135eb9d58cae77c2e6dcac55a/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=849ae5d8815c54d135eb9d58cae77c2e6dcac55a", "patch": "@@ -466,11 +466,39 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                                                        .unwrap()\n                                                        .to_string();\n             // write debugger script\n-            let script_str = [\n-                \"set charset UTF-8\".to_string(),\n-                cmds,\n-                \"quit\\n\".to_string()\n-            ].connect(\"\\n\");\n+            let mut script_str = String::with_capacity(2048);\n+\n+            script_str.push_str(\"set charset UTF-8\\n\");\n+            script_str.push_str(\"show version\\n\");\n+\n+            match config.gdb_version {\n+                Some(ref version) => {\n+                    if header::gdb_version_to_int(version.as_slice()) >\n+                        header::gdb_version_to_int(\"7.4\") {\n+                        // Add the directory containing the pretty printers to\n+                        // GDB's script auto loading safe path ...\n+                        script_str.push_str(\n+                            format!(\"add-auto-load-safe-path {}\\n\",\n+                                    rust_pp_module_abs_path.as_slice())\n+                                .as_slice());\n+                        // ... and also the test directory\n+                        script_str.push_str(\n+                            format!(\"add-auto-load-safe-path {}\\n\",\n+                                    config.build_base.as_str().unwrap())\n+                                .as_slice());\n+                    }\n+                }\n+                _ => { /* nothing to do */ }\n+            }\n+\n+            // Load the target executable\n+            script_str.push_str(format!(\"file {}\\n\",\n+                                        exe_file.as_str().unwrap())\n+                                    .as_slice());\n+\n+            script_str.push_str(cmds.as_slice());\n+            script_str.push_str(\"quit\\n\");\n+\n             debug!(\"script_str = {}\", script_str);\n             dump_output_file(config,\n                              testfile,\n@@ -500,15 +528,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n                 vec!(\"-quiet\".to_string(),\n                      \"-batch\".to_string(),\n                      \"-nx\".to_string(),\n-                     // Add the directory containing the pretty printers to\n-                     // GDB's script auto loading safe path ...\n-                     format!(\"-iex=add-auto-load-safe-path {}\",\n-                             rust_pp_module_abs_path.as_slice()),\n-                     // ... and also the test directory\n-                     format!(\"-iex=add-auto-load-safe-path {}\",\n-                             config.build_base.as_str().unwrap()),\n-                     format!(\"-command={}\", debugger_script.as_str().unwrap()),\n-                     exe_file.as_str().unwrap().to_string());\n+                     format!(\"-command={}\", debugger_script.as_str().unwrap()));\n \n             let proc_args = ProcArgs {\n                 prog: debugger(),"}, {"sha": "e8a6427c1d7317cb6590835cc1e2347e1a7d7f1c", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/849ae5d8815c54d135eb9d58cae77c2e6dcac55a/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/849ae5d8815c54d135eb9d58cae77c2e6dcac55a/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=849ae5d8815c54d135eb9d58cae77c2e6dcac55a", "patch": "@@ -80,8 +80,7 @@ def rust_pretty_printer_lookup_function(val):\n     discriminant_name, discriminant_val = extract_discriminant_value(val)\n     return rust_pretty_printer_lookup_function(val[enum_members[discriminant_val]])\n \n-\n-\n+  # No pretty printer has been found\n   return None\n \n #=------------------------------------------------------------------------------\n@@ -99,10 +98,17 @@ def to_string(self):\n   def children(self):\n     cs = []\n     for field in self.val.type.fields():\n-      field_name = field.name;\n+      field_name = field.name\n+      # Normally the field name is used as a key to access the field value,\n+      # because that's also supported in older versions of GDB...\n+      field_key = field_name\n       if field_name == None:\n         field_name = \"\"\n-      name_value_tuple = ( field_name, self.val[field] )\n+        # ... but for fields without a name (as in tuples), we have to fall back\n+        # to the newer method of using the field object directly as key. In\n+        # older versions of GDB, this will just fail.\n+        field_key = field\n+      name_value_tuple = ( field_name, self.val[field_key] )\n       cs.append( name_value_tuple )\n \n     if self.hide_first_field:\n@@ -222,4 +228,4 @@ def get_field_at_index(val, index):\n   for field in val.type.fields():\n     if i == index:\n       return field\n-  return None\n\\ No newline at end of file\n+  return None"}, {"sha": "e9daf31be2cd2515be84fc1dc5a655d45bbe3d02", "filename": "src/test/debuginfo/gdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/849ae5d8815c54d135eb9d58cae77c2e6dcac55a/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849ae5d8815c54d135eb9d58cae77c2e6dcac55a/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs?ref=849ae5d8815c54d135eb9d58cae77c2e6dcac55a", "patch": "@@ -0,0 +1,75 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test uses only GDB Python API features which should be available in\n+// older versions of GDB too. A more extensive test can be found in\n+// gdb-pretty-struct-and-enums.rs\n+\n+// ignore-tidy-linelength\n+// ignore-lldb\n+// ignore-android: FIXME(#10381)\n+// compile-flags:-g\n+// gdb-use-pretty-printer\n+\n+// The following line actually doesn't have to do anything with pretty printing,\n+// it just tells GDB to print values on one line:\n+// gdb-command: set print pretty off\n+\n+// gdb-command: rbreak zzz\n+// gdb-command: run\n+// gdb-command: finish\n+\n+// gdb-command: print regular_struct\n+// gdb-check:$1 = RegularStruct = {the_first_field = 101, the_second_field = 102.5, the_third_field = false}\n+\n+// gdb-command: print empty_struct\n+// gdb-check:$2 = EmptyStruct\n+\n+// gdb-command: print c_style_enum1\n+// gdb-check:$3 = CStyleEnumVar1\n+\n+// gdb-command: print c_style_enum2\n+// gdb-check:$4 = CStyleEnumVar2\n+\n+// gdb-command: print c_style_enum3\n+// gdb-check:$5 = CStyleEnumVar3\n+\n+struct RegularStruct {\n+    the_first_field: int,\n+    the_second_field: f64,\n+    the_third_field: bool,\n+}\n+\n+struct EmptyStruct;\n+\n+enum CStyleEnum {\n+    CStyleEnumVar1,\n+    CStyleEnumVar2,\n+    CStyleEnumVar3,\n+}\n+\n+fn main() {\n+\n+    let regular_struct = RegularStruct {\n+        the_first_field: 101,\n+        the_second_field: 102.5,\n+        the_third_field: false\n+    };\n+\n+    let empty_struct = EmptyStruct;\n+\n+    let c_style_enum1 = CStyleEnumVar1;\n+    let c_style_enum2 = CStyleEnumVar2;\n+    let c_style_enum3 = CStyleEnumVar3;\n+\n+    zzz();\n+}\n+\n+fn zzz() { () }"}, {"sha": "5ef63da71af8cf2ce2a894466824d6d1835d6132", "filename": "src/test/debuginfo/gdb-pretty-struct-and-enums.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/849ae5d8815c54d135eb9d58cae77c2e6dcac55a/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/849ae5d8815c54d135eb9d58cae77c2e6dcac55a/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs?ref=849ae5d8815c54d135eb9d58cae77c2e6dcac55a", "patch": "@@ -14,6 +14,11 @@\n // compile-flags:-g\n // gdb-use-pretty-printer\n \n+// This test uses some GDB Python API features (e.g. accessing anonymous fields)\n+// which are only available in newer GDB version. The following directive will\n+// case the test runner to ignore this test if an older GDB version is used:\n+// min-gdb-version 7.7\n+\n // The following line actually doesn't have to do anything with pretty printing,\n // it just tells GDB to print values on one line:\n // gdb-command: set print pretty off\n@@ -164,4 +169,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() { () }\n\\ No newline at end of file\n+fn zzz() { () }"}]}