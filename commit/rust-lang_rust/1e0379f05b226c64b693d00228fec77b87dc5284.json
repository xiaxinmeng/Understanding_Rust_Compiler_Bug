{"sha": "1e0379f05b226c64b693d00228fec77b87dc5284", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMDM3OWYwNWIyMjZjNjRiNjkzZDAwMjI4ZmVjNzdiODdkYzUyODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-17T06:16:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-17T06:16:22Z"}, "message": "auto merge of #14224 : michaelwoerister/rust/simd-update, r=alexcrichton\n\nThis is a small change that improves the DWARF description of SIMD types by exposing their type name to debuginfo.", "tree": {"sha": "44d3ef6be31b6165a8c7c16dd968a1f9af99a78a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44d3ef6be31b6165a8c7c16dd968a1f9af99a78a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e0379f05b226c64b693d00228fec77b87dc5284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e0379f05b226c64b693d00228fec77b87dc5284", "html_url": "https://github.com/rust-lang/rust/commit/1e0379f05b226c64b693d00228fec77b87dc5284", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e0379f05b226c64b693d00228fec77b87dc5284/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11e17c8705f39754c837fe5c6306d9d5edd04a20", "url": "https://api.github.com/repos/rust-lang/rust/commits/11e17c8705f39754c837fe5c6306d9d5edd04a20", "html_url": "https://github.com/rust-lang/rust/commit/11e17c8705f39754c837fe5c6306d9d5edd04a20"}, {"sha": "3fabb1178f6cce66e94a10ddc179b8320d61b739", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fabb1178f6cce66e94a10ddc179b8320d61b739", "html_url": "https://github.com/rust-lang/rust/commit/3fabb1178f6cce66e94a10ddc179b8320d61b739"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "c481efec8f1dfd63ff90caebcd654714f21fbc56", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1e0379f05b226c64b693d00228fec77b87dc5284/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e0379f05b226c64b693d00228fec77b87dc5284/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=1e0379f05b226c64b693d00228fec77b87dc5284", "patch": "@@ -1224,25 +1224,42 @@ impl MemberDescriptionFactory {\n }\n \n struct StructMemberDescriptionFactory {\n-    fields: Vec<ty::field> ,\n+    fields: Vec<ty::field>,\n+    is_simd: bool,\n     span: Span,\n }\n \n impl StructMemberDescriptionFactory {\n-    fn create_member_descriptions(&self, cx: &CrateContext)\n-                                  -> Vec<MemberDescription> {\n-        self.fields.iter().map(|field| {\n+    fn create_member_descriptions(&self, cx: &CrateContext) -> Vec<MemberDescription> {\n+        if self.fields.len() == 0 {\n+            return Vec::new();\n+        }\n+\n+        let field_size = if self.is_simd {\n+            machine::llsize_of_alloc(cx, type_of::type_of(cx, self.fields.get(0).mt.ty))\n+        } else {\n+            0xdeadbeef\n+        };\n+\n+        self.fields.iter().enumerate().map(|(i, field)| {\n             let name = if field.ident.name == special_idents::unnamed_field.name {\n                 \"\".to_strbuf()\n             } else {\n                 token::get_ident(field.ident).get().to_strbuf()\n             };\n \n+            let offset = if self.is_simd {\n+                assert!(field_size != 0xdeadbeef);\n+                FixedMemberOffset { bytes: i as u64 * field_size }\n+            } else {\n+                ComputedMemberOffset\n+            };\n+\n             MemberDescription {\n                 name: name,\n                 llvm_type: type_of::type_of(cx, field.mt.ty),\n                 type_metadata: type_metadata(cx, field.mt.ty, self.span),\n-                offset: ComputedMemberOffset,\n+                offset: offset,\n             }\n         }).collect()\n     }\n@@ -1278,6 +1295,7 @@ fn prepare_struct_metadata(cx: &CrateContext,\n         file_metadata: file_metadata,\n         member_description_factory: StructMD(StructMemberDescriptionFactory {\n             fields: fields,\n+            is_simd: ty::type_is_simd(cx.tcx(), struct_type),\n             span: span,\n         }),\n     }\n@@ -1690,7 +1708,7 @@ fn prepare_enum_metadata(cx: &CrateContext,\n }\n \n enum MemberOffset {\n-    FixedMemberOffset { bytes: uint },\n+    FixedMemberOffset { bytes: u64 },\n     // For ComputedMemberOffset, the offset is read from the llvm type definition\n     ComputedMemberOffset\n }\n@@ -2225,13 +2243,7 @@ fn type_metadata(cx: &CrateContext,\n             trait_metadata(cx, def_id, t, substs, store, bounds)\n         }\n         ty::ty_struct(def_id, ref substs) => {\n-            if ty::type_is_simd(cx.tcx(), t) {\n-                let element_type = ty::simd_type(cx.tcx(), t);\n-                let len = ty::simd_size(cx.tcx(), t);\n-                fixed_vec_metadata(cx, element_type, len, usage_site_span)\n-            } else {\n-                prepare_struct_metadata(cx, t, def_id, substs, usage_site_span).finalize(cx)\n-            }\n+            prepare_struct_metadata(cx, t, def_id, substs, usage_site_span).finalize(cx)\n         }\n         ty::ty_tup(ref elements) => {\n             prepare_tuple_metadata(cx,"}]}