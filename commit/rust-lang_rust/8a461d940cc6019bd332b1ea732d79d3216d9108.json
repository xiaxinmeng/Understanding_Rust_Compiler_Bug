{"sha": "8a461d940cc6019bd332b1ea732d79d3216d9108", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNDYxZDk0MGNjNjAxOWJkMzMyYjFlYTczMmQ3OWQzMjE2ZDkxMDg=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2016-03-29T17:12:31Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-04-05T17:58:58Z"}, "message": "suggest adding a where-clause when that can help\n\nsuggest adding a where-clause when there is an unmet trait-bound that\ncan be satisfied if some type can implement it.", "tree": {"sha": "847015cb866fee03fcc9ebb78c4d8baefd7b1551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/847015cb866fee03fcc9ebb78c4d8baefd7b1551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a461d940cc6019bd332b1ea732d79d3216d9108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a461d940cc6019bd332b1ea732d79d3216d9108", "html_url": "https://github.com/rust-lang/rust/commit/8a461d940cc6019bd332b1ea732d79d3216d9108", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a461d940cc6019bd332b1ea732d79d3216d9108/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "513d9f208cc52ab71e2899db30aaead5c82c1a74", "url": "https://api.github.com/repos/rust-lang/rust/commits/513d9f208cc52ab71e2899db30aaead5c82c1a74", "html_url": "https://github.com/rust-lang/rust/commit/513d9f208cc52ab71e2899db30aaead5c82c1a74"}], "stats": {"total": 719, "additions": 421, "deletions": 298}, "files": [{"sha": "1b7a0da0112bd2bca262954e3d917c902aafffef", "filename": "src/doc/book/closures.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Fdoc%2Fbook%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Fdoc%2Fbook%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fclosures.md?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -371,14 +371,13 @@ assert_eq!(6, answer);\n This gives us these long, related errors:\n \n ```text\n-error: the trait `core::marker::Sized` is not implemented for the type\n-`core::ops::Fn(i32) -> i32` [E0277]\n+error: the predicate `core::ops::Fn(i32) -> i32 : core::marker::Sized` is not satisfied [E0277]\n fn factory() -> (Fn(i32) -> i32) {\n                 ^~~~~~~~~~~~~~~~\n note: `core::ops::Fn(i32) -> i32` does not have a constant size known at compile-time\n fn factory() -> (Fn(i32) -> i32) {\n                 ^~~~~~~~~~~~~~~~\n-error: the trait `core::marker::Sized` is not implemented for the type `core::ops::Fn(i32) -> i32` [E0277]\n+error: the predicate `core::ops::Fn(i32) -> i32 : core::marker::Sized` is not satisfied [E0277]\n let f = factory();\n     ^\n note: `core::ops::Fn(i32) -> i32` does not have a constant size known at compile-time"}, {"sha": "8b918d3cfeff8ffa5bbe6e3079f4c95949587c28", "filename": "src/doc/book/concurrency.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Fdoc%2Fbook%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Fdoc%2Fbook%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fconcurrency.md?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -231,8 +231,8 @@ fn main() {\n This won't work, however, and will give us the error:\n \n ```text\n-13:9: 13:22 error: the trait `core::marker::Send` is not\n-            implemented for the type `alloc::rc::Rc<collections::vec::Vec<i32>>`\n+13:9: 13:22 error: the predicate `alloc::rc::Rc<collections::vec::Vec<i32>> : core::marker::Send`\n+            is not satisfied\n ...\n 13:9: 13:22 note: `alloc::rc::Rc<collections::vec::Vec<i32>>`\n             cannot be sent between threads safely"}, {"sha": "00aa33a9308c60d3ab3487cb83d011200d6a672a", "filename": "src/doc/book/traits.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Fdoc%2Fbook%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Fdoc%2Fbook%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftraits.md?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -154,7 +154,7 @@ print_area(5);\n We get a compile-time error:\n \n ```text\n-error: the trait `HasArea` is not implemented for the type `_` [E0277]\n+error: the predicate `_ : HasArea` is not satisfied [E0277]\n ```\n \n ## Trait bounds on generic structs\n@@ -496,7 +496,7 @@ impl FooBar for Baz {\n If we forget to implement `Foo`, Rust will tell us:\n \n ```text\n-error: the trait `main::Foo` is not implemented for the type `main::Baz` [E0277]\n+error: the predicate `main::Baz : main::Foo` is not satisfied [E0277]\n ```\n \n # Deriving"}, {"sha": "c98274a6649bd902c13fd9bfc5c7990d59458533", "filename": "src/doc/book/vectors.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Fdoc%2Fbook%2Fvectors.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Fdoc%2Fbook%2Fvectors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fvectors.md?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -56,8 +56,8 @@ v[j];\n Indexing with a non-`usize` type gives an error that looks like this:\n \n ```text\n-error: the trait `core::ops::Index<i32>` is not implemented for the type\n-`collections::vec::Vec<_>` [E0277]\n+error: the predicate `collections::vec::Vec<_> : core::ops::Index<i32>`\n+is not satisfied [E0277]\n v[j];\n ^~~~\n note: the type `collections::vec::Vec<_>` cannot be indexed by `i32`"}, {"sha": "3fb7f620eeea533f52c128da0519ab61ec565010", "filename": "src/doc/nomicon/coercions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Fdoc%2Fnomicon%2Fcoercions.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Fdoc%2Fnomicon%2Fcoercions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fcoercions.md?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -64,7 +64,7 @@ fn main() {\n ```\n \n ```text\n-<anon>:10:5: 10:8 error: the trait `Trait` is not implemented for the type `&mut i32` [E0277]\n+<anon>:10:5: 10:8 error: the predicate `&mut i32 : Trait` is not satisfied [E0277]\n <anon>:10     foo(t);\n               ^~~\n ```"}, {"sha": "51c453c784e95f2797cff95811dee477d359cfd9", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -1006,8 +1006,7 @@ fn some_func<T: Foo>(foo: T) {\n fn main() {\n     // we now call the method with the i32 type, which doesn't implement\n     // the Foo trait\n-    some_func(5i32); // error: the trait `Foo` is not implemented for the\n-                     //        type `i32`\n+    some_func(5i32); // error: the predicate `i32 : Foo` is not satisfied\n }\n ```\n "}, {"sha": "82b5dc66f7c421bdcc9aab353e5050eed0c8926c", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 71, "deletions": 12, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -13,10 +13,12 @@ use super::{\n     FulfillmentErrorCode,\n     MismatchedProjectionTypes,\n     Obligation,\n+    ObligationCause,\n     ObligationCauseCode,\n     OutputTypeParameterMismatch,\n     TraitNotObjectSafe,\n     PredicateObligation,\n+    SelectionContext,\n     SelectionError,\n     ObjectSafetyViolation,\n     MethodViolationCode,\n@@ -26,8 +28,9 @@ use super::{\n use fmt_macros::{Parser, Piece, Position};\n use middle::def_id::DefId;\n use infer::InferCtxt;\n-use ty::{self, ToPredicate, ToPolyTraitRef, TraitRef, Ty, TyCtxt, TypeFoldable};\n+use ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt};\n use ty::fast_reject;\n+use ty::fold::{TypeFoldable, TypeFolder};\n use util::nodemap::{FnvHashMap, FnvHashSet};\n \n use std::cmp;\n@@ -100,9 +103,10 @@ pub fn report_projection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n     }\n }\n \n-fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n-                                     trait_ref: &TraitRef<'tcx>,\n-                                     span: Span) -> Option<String> {\n+fn on_unimplemented_note<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n+                                   trait_ref: ty::PolyTraitRef<'tcx>,\n+                                   span: Span) -> Option<String> {\n+    let trait_ref = trait_ref.skip_binder();\n     let def_id = trait_ref.def_id;\n     let mut report = None;\n     for item in infcx.tcx.get_attrs(def_id).iter() {\n@@ -357,14 +361,20 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                             let trait_ref = trait_predicate.to_poly_trait_ref();\n                             let mut err = struct_span_err!(\n                                 infcx.tcx.sess, obligation.cause.span, E0277,\n-                                \"the trait `{}` is not implemented for the type `{}`\",\n-                                trait_ref, trait_ref.self_ty());\n-\n-                            // Check if it has a custom \"#[rustc_on_unimplemented]\"\n-                            // error message, report with that message if it does\n-                            let custom_note = report_on_unimplemented(infcx, &trait_ref.0,\n-                                                                      obligation.cause.span);\n-                            if let Some(s) = custom_note {\n+                                \"the predicate `{}` is not satisfied\",\n+                                trait_ref.to_predicate());\n+\n+                            // Try to report a good error message.\n+\n+                            if !trait_ref.has_infer_types() &&\n+                                predicate_can_apply(infcx, trait_ref)\n+                            {\n+                                err.fileline_help(obligation.cause.span, &format!(\n+                                    \"consider adding a `where {}` bound\",\n+                                    trait_ref.to_predicate()\n+                                    ));\n+                            } else if let Some(s) = on_unimplemented_note(infcx, trait_ref,\n+                                                                          obligation.cause.span) {\n                                 err.fileline_note(obligation.cause.span, &s);\n                             } else {\n                                 let simp = fast_reject::simplify_type(infcx.tcx,\n@@ -644,6 +654,55 @@ pub fn maybe_report_ambiguity<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n     }\n }\n \n+/// Returns whether the trait predicate may apply for *some* assignment\n+/// to the type parameters.\n+fn predicate_can_apply<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n+                                 pred: ty::PolyTraitRef<'tcx>)\n+                                 -> bool\n+{\n+    struct ParamToVarFolder<'a, 'tcx: 'a> {\n+        infcx: &'a InferCtxt<'a, 'tcx>,\n+        var_map: FnvHashMap<Ty<'tcx>, Ty<'tcx>>\n+    }\n+\n+    impl<'a, 'tcx> TypeFolder<'tcx> for ParamToVarFolder<'a, 'tcx>\n+    {\n+        fn tcx(&self) -> &TyCtxt<'tcx> { self.infcx.tcx }\n+\n+        fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+            if let ty::TyParam(..) = ty.sty {\n+                let infcx = self.infcx;\n+                self.var_map.entry(ty).or_insert_with(|| infcx.next_ty_var())\n+            } else {\n+                ty.super_fold_with(self)\n+            }\n+        }\n+    }\n+\n+    infcx.probe(|_| {\n+        let mut selcx = SelectionContext::new(infcx);\n+\n+        let cleaned_pred = pred.fold_with(&mut ParamToVarFolder {\n+            infcx: infcx,\n+            var_map: FnvHashMap()\n+        });\n+\n+        let cleaned_pred = super::project::normalize(\n+            &mut selcx,\n+            ObligationCause::dummy(),\n+            &cleaned_pred\n+        ).value;\n+\n+        let obligation = Obligation::new(\n+            ObligationCause::dummy(),\n+            cleaned_pred.to_predicate()\n+        );\n+\n+        selcx.evaluate_obligation(&obligation)\n+    })\n+}\n+\n+\n fn need_type_info<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                             span: Span,\n                             ty: Ty<'tcx>)"}, {"sha": "48bfa84fa8666cb6a5e29db6c3c5d2d18b1554b0", "filename": "src/test/compile-fail/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -31,5 +31,5 @@ trait Add<RHS=Self> {\n fn ice<A>(a: A) {\n     let r = loop {};\n     r = r + a;\n-    //~^ ERROR not implemented\n+    //~^ ERROR E0277\n }"}, {"sha": "cd21fb949cb84190aa147147adff53868501b9c0", "filename": "src/test/compile-fail/associated-types-bound-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -24,7 +24,7 @@ pub trait GetToInt\n fn foo<G>(g: G) -> isize\n     where G : GetToInt\n {\n-    ToInt::to_int(&g.get()) //~ ERROR not implemented\n+    ToInt::to_int(&g.get()) //~ ERROR E0277\n }\n \n fn bar<G : GetToInt>(g: G) -> isize"}, {"sha": "a8aee5fd0a593daf09abc3fe455fd9906091bc2b", "filename": "src/test/compile-fail/associated-types-for-unimpl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fassociated-types-for-unimpl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fassociated-types-for-unimpl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-for-unimpl-trait.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -15,7 +15,7 @@ trait Get {\n \n trait Other {\n     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-    //~^ ERROR the trait `Get` is not implemented for the type `Self`\n+    //~^ ERROR the predicate `Self : Get` is not satisfied\n }\n \n fn main() {"}, {"sha": "32068633df6a1baf9d82bdfeb352bd593adf5ea0", "filename": "src/test/compile-fail/associated-types-invalid-trait-ref-issue-18865.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-invalid-trait-ref-issue-18865.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -18,7 +18,7 @@ trait Foo<T> {\n \n fn f<T:Foo<isize>>(t: &T) {\n     let u: <T as Foo<usize>>::Bar = t.get_bar();\n-    //~^ ERROR the trait `Foo<usize>` is not implemented for the type `T`\n+    //~^ ERROR the predicate `T : Foo<usize>` is not satisfied\n }\n \n fn main() { }"}, {"sha": "19f0e27fa55b18c7b0a125be573a427d194836d2", "filename": "src/test/compile-fail/associated-types-no-suitable-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -19,7 +19,7 @@ struct Struct {\n \n impl Struct {\n     fn uhoh<T>(foo: <T as Get>::Value) {}\n-    //~^ ERROR the trait `Get` is not implemented for the type `T`\n+    //~^ ERROR the predicate `T : Get` is not satisfied\n }\n \n fn main() {"}, {"sha": "63e76f7eeaa51c060203632ed45e576f032a7b11", "filename": "src/test/compile-fail/associated-types-no-suitable-supertrait-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait-2.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -25,7 +25,7 @@ trait Get {\n \n trait Other {\n     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-    //~^ ERROR the trait `Get` is not implemented for the type `Self`\n+    //~^ ERROR the predicate `Self : Get` is not satisfied\n }\n \n fn main() { }"}, {"sha": "38f5be37bd1eded6b19d559a0bd4f093a5ee0780", "filename": "src/test/compile-fail/associated-types-no-suitable-supertrait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -25,12 +25,12 @@ trait Get {\n \n trait Other {\n     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n-    //~^ ERROR the trait `Get` is not implemented for the type `Self`\n+    //~^ ERROR the predicate `Self : Get` is not satisfied\n }\n \n impl<T:Get> Other for T {\n     fn uhoh<U:Get>(&self, foo: U, bar: <(T, U) as Get>::Value) {}\n-    //~^ ERROR the trait `Get` is not implemented for the type `(T, U)`\n+    //~^ ERROR the predicate `(T, U) : Get` is not satisfied\n }\n \n fn main() { }"}, {"sha": "ee228899bb378da311c238569294386db075c144", "filename": "src/test/compile-fail/associated-types-path-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -38,12 +38,12 @@ pub fn f1_int_uint() {\n \n pub fn f1_uint_uint() {\n     f1(2u32, 4u32);\n-    //~^ ERROR the trait `Foo` is not implemented\n+    //~^ ERROR `u32 : Foo` is not satisfied\n }\n \n pub fn f1_uint_int() {\n     f1(2u32, 4i32);\n-    //~^ ERROR the trait `Foo` is not implemented\n+    //~^ ERROR `u32 : Foo` is not satisfied\n }\n \n pub fn f2_int() {"}, {"sha": "468b40e697185d07cf0fb608464982cb30f340c5", "filename": "src/test/compile-fail/associated-types-unsized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -14,7 +14,7 @@ trait Get {\n }\n \n fn foo<T:Get>(t: T) {\n-    let x = t.get(); //~ ERROR the trait `std::marker::Sized` is not implemented\n+    let x = t.get(); //~ ERROR `<T as Get>::Value : std::marker::Sized` is not\n }\n \n fn main() {"}, {"sha": "4de6600f2d242ef5cc491760b5cc54359b3242da", "filename": "src/test/compile-fail/bad-method-typaram-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn foo<T:'static>() {\n-    1.bar::<T>(); //~ ERROR `std::marker::Send` is not implemented\n+    1.bar::<T>(); //~ ERROR `T : std::marker::Send` is not satisfied\n }\n \n trait bar {"}, {"sha": "d25d0081c56658b6c0f481a55eb93a7efcbbc187", "filename": "src/test/compile-fail/bad-sized.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -12,7 +12,7 @@ trait Trait {}\n \n pub fn main() {\n     let x: Vec<Trait + Sized> = Vec::new();\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n-    //~| ERROR the trait `std::marker::Sized` is not implemented\n-    //~| ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `Trait + Sized : std::marker::Sized` is not satisfied\n+    //~| ERROR `Trait + Sized : std::marker::Sized` is not satisfied\n+    //~| ERROR `Trait + Sized : std::marker::Sized` is not satisfied\n }"}, {"sha": "03ab94e5908f68957c793f95a9f16ddc8738c0fc", "filename": "src/test/compile-fail/builtin-superkinds-double-superkind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -13,9 +13,9 @@\n \n trait Foo : Send+Sync { }\n \n-impl <T: Sync+'static> Foo for (T,) { } //~ ERROR the trait `std::marker::Send` is not implemented\n+impl <T: Sync+'static> Foo for (T,) { } //~ ERROR `T : std::marker::Send` is not satisfied\n \n-impl <T: Send> Foo for (T,T) { } //~ ERROR the trait `std::marker::Sync` is not implemented\n+impl <T: Send> Foo for (T,T) { } //~ ERROR `T : std::marker::Sync` is not satisfied\n \n impl <T: Send+Sync> Foo for (T,T,T) { } // (ok)\n "}, {"sha": "1063280ea2656894c8153f7d5f563754eb68e269", "filename": "src/test/compile-fail/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -22,6 +22,6 @@ struct X<T>(T);\n impl <T:Sync> RequiresShare for X<T> { }\n \n impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n-//~^ ERROR the trait `std::marker::Send` is not implemented\n+//~^ ERROR `T : std::marker::Send` is not satisfied\n \n fn main() { }"}, {"sha": "40625fc82aa90e91523f394fcb79072833391b15", "filename": "src/test/compile-fail/builtin-superkinds-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -14,6 +14,6 @@\n trait Foo : Send { }\n \n impl Foo for std::rc::Rc<i8> { }\n-//~^ ERROR the trait `std::marker::Send` is not implemented\n+//~^ ERROR `std::rc::Rc<i8> : std::marker::Send` is not satisfied\n \n fn main() { }"}, {"sha": "7e05c6462ffa6d5b6b8eb7a7bfcb23405a99541c", "filename": "src/test/compile-fail/builtin-superkinds-typaram-not-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -12,6 +12,6 @@\n \n trait Foo : Send { }\n \n-impl <T: Sync+'static> Foo for T { } //~ ERROR the trait `std::marker::Send` is not implemented\n+impl <T: Sync+'static> Foo for T { } //~ ERROR `T : std::marker::Send` is not satisfied\n \n fn main() { }"}, {"sha": "2bc4d82ef0a4c6efaac7333858329e3eb4855ba1", "filename": "src/test/compile-fail/cast-rfc0401.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -91,7 +91,7 @@ fn main()\n     let _ = 42usize as *const [u8]; //~ ERROR casting\n     let _ = v as *const [u8]; //~ ERROR cannot cast\n     let _ = fat_v as *const Foo;\n-    //~^ ERROR `std::marker::Sized` is not implemented for the type `[u8]`\n+    //~^ ERROR the predicate `[u8] : std::marker::Sized` is not satisfied\n     //~^^ HELP run `rustc --explain E0277` to see a detailed explanation\n     //~^^^ NOTE `[u8]` does not have a constant size known at compile-time\n     //~^^^^ NOTE required for the cast to the object type `Foo`\n@@ -106,7 +106,7 @@ fn main()\n \n     let a : *const str = \"hello\";\n     let _ = a as *const Foo;\n-    //~^ ERROR `std::marker::Sized` is not implemented for the type `str`\n+    //~^ ERROR the predicate `str : std::marker::Sized` is not satisfied\n     //~^^ HELP run `rustc --explain E0277` to see a detailed explanation\n     //~^^^ NOTE `str` does not have a constant size known at compile-time\n     //~^^^^ NOTE required for the cast to the object type `Foo`"}, {"sha": "ed18ed62111cc5f75e9377abc03619fa294028b4", "filename": "src/test/compile-fail/closure-bounds-cant-promote-superkind-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-cant-promote-superkind-in-struct.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -13,7 +13,7 @@ struct X<F> where F: FnOnce() + 'static + Send {\n }\n \n fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n-    //~^ ERROR the trait `std::marker::Send` is not implemented for the type\n+    //~^ ERROR `F : std::marker::Send` is not satisfied\n     return X { field: blk };\n }\n "}, {"sha": "b618cd07760d61cbf268f16d883cab95ee500605", "filename": "src/test/compile-fail/closure-bounds-subtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -21,7 +21,7 @@ fn give_any<F>(f: F) where F: FnOnce() {\n \n fn give_owned<F>(f: F) where F: FnOnce() + Send {\n     take_any(f);\n-    take_const_owned(f); //~ ERROR the trait `std::marker::Sync` is not implemented for the type\n+    take_const_owned(f); //~ ERROR `F : std::marker::Sync` is not satisfied\n }\n \n fn main() {}"}, {"sha": "eb063f5bc8c3c904c612108252bf189c0023855a", "filename": "src/test/compile-fail/cross-fn-cache-hole.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fcross-fn-cache-hole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fcross-fn-cache-hole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcross-fn-cache-hole.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -23,7 +23,7 @@ trait Bar<X> { }\n \n // We don't always check where clauses for sanity, but in this case\n // wfcheck does report an error here:\n-fn vacuous<A>() //~ ERROR the trait `Bar<u32>` is not implemented for the type `i32`\n+fn vacuous<A>() //~ ERROR the predicate `i32 : Bar<u32>` is not satisfied\n     where i32: Foo<u32, A>\n {\n     // ... the original intention was to check that we don't use that"}, {"sha": "d767fc3263624711cb687c4639aadc2962b65ee8", "filename": "src/test/compile-fail/deriving-no-inner-impl-error-message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fderiving-no-inner-impl-error-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fderiving-no-inner-impl-error-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-no-inner-impl-error-message.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -18,7 +18,7 @@ struct E {\n #[derive(Clone)]\n struct C {\n     x: NoCloneOrEq\n-    //~^ ERROR the trait `std::clone::Clone` is not implemented for the type `NoCloneOrEq`\n+    //~^ ERROR `NoCloneOrEq : std::clone::Clone` is not satisfied\n }\n \n "}, {"sha": "6b81804e028be89cbf49f2681d7bf9b04e066109", "filename": "src/test/compile-fail/deriving-span-Default-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -17,7 +17,7 @@ struct Error;\n \n #[derive(Default)]\n struct Struct {\n-    x: Error //~ ERROR `std::default::Default` is not implemented\n+    x: Error //~ ERROR `Error : std::default::Default` is not satisfied\n }\n \n fn main() {}"}, {"sha": "3e6428c7d579b8843aaec9085f658e0334880d16", "filename": "src/test/compile-fail/destructure-trait-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -35,7 +35,7 @@ fn main() {\n     // n == m\n     let &x = &1isize as &T;      //~ ERROR type `&T` cannot be dereferenced\n     let &&x = &(&1isize as &T);  //~ ERROR type `&T` cannot be dereferenced\n-    let box x = box 1isize as Box<T>; //~ ERROR the trait `std::marker::Sized` is not implemented\n+    let box x = box 1isize as Box<T>; //~ ERROR `T : std::marker::Sized` is not satisfied\n \n     // n > m\n     let &&x = &1isize as &T;"}, {"sha": "6e2380da6a13c7b254a6c4483c8bdea8d7f16c88", "filename": "src/test/compile-fail/dst-bad-assign-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -44,5 +44,5 @@ pub fn main() {\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = *z;\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `ToBar : std::marker::Sized` is not satisfied\n }"}, {"sha": "ab874d4e877c05e70fe51d0776685d9e6ef3e6bd", "filename": "src/test/compile-fail/dst-bad-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -49,5 +49,5 @@ pub fn main() {\n     //~| found `Bar1`\n     //~| expected trait ToBar\n     //~| found struct `Bar1`\n-    //~| ERROR the trait `std::marker::Sized` is not implemented for the type `ToBar`\n+    //~| ERROR `ToBar : std::marker::Sized` is not satisfied\n }"}, {"sha": "2413bbae84c065fd41387b3a4ccc8d6ff15c657e", "filename": "src/test/compile-fail/dst-bad-coerce1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -28,5 +28,5 @@ pub fn main() {\n     let f1 = Fat { ptr: Foo };\n     let f2: &Fat<Foo> = &f1;\n     let f3: &Fat<Bar> = f2;\n-    //~^ ERROR the trait `Bar` is not implemented for the type `Foo`\n+    //~^ ERROR `Foo : Bar` is not satisfied\n }"}, {"sha": "0b9d99396f7c4dd84421927de777871b7a38e690", "filename": "src/test/compile-fail/dst-bad-deep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -21,5 +21,5 @@ pub fn main() {\n     let f: Fat<[isize; 3]> = Fat { ptr: [5, 6, 7] };\n     let g: &Fat<[isize]> = &f;\n     let h: &Fat<Fat<[isize]>> = &Fat { ptr: *g };\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `[isize] : std::marker::Sized` is not satisfied\n }"}, {"sha": "36bd1a98ca9192dd11ba015c8ac176f4a176577a", "filename": "src/test/compile-fail/dst-object-from-unsized-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-object-from-unsized-type.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -16,22 +16,22 @@ impl Foo for [u8] {}\n \n fn test1<T: ?Sized + Foo>(t: &T) {\n     let u: &Foo = t;\n-    //~^ ERROR `std::marker::Sized` is not implemented for the type `T`\n+    //~^ ERROR `T : std::marker::Sized` is not satisfied\n }\n \n fn test2<T: ?Sized + Foo>(t: &T) {\n     let v: &Foo = t as &Foo;\n-    //~^ ERROR `std::marker::Sized` is not implemented for the type `T`\n+    //~^ ERROR `T : std::marker::Sized` is not satisfied\n }\n \n fn test3() {\n     let _: &[&Foo] = &[\"hi\"];\n-    //~^ ERROR `std::marker::Sized` is not implemented for the type `str`\n+    //~^ ERROR `str : std::marker::Sized` is not satisfied\n }\n \n fn test4(x: &[u8]) {\n     let _: &Foo = x as &Foo;\n-    //~^ ERROR `std::marker::Sized` is not implemented for the type `[u8]`\n+    //~^ ERROR `[u8] : std::marker::Sized` is not satisfied\n }\n \n fn main() { }"}, {"sha": "37500871563585669ab3e519e83db508fae84f4f", "filename": "src/test/compile-fail/dst-sized-trait-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -15,9 +15,9 @@\n trait Foo<T> : Sized { fn take(self, x: &T) { } } // Note: T is sized\n \n impl Foo<[isize]> for usize { }\n-//~^ ERROR the trait `std::marker::Sized` is not implemented for the type `[isize]`\n+//~^ ERROR `[isize] : std::marker::Sized` is not satisfied\n \n impl Foo<isize> for [usize] { }\n-//~^ ERROR the trait `std::marker::Sized` is not implemented for the type `[usize]`\n+//~^ ERROR `[usize] : std::marker::Sized` is not satisfied\n \n pub fn main() { }"}, {"sha": "8b1e2fc19663dc448d87583e81eff3d2fd3b8919", "filename": "src/test/compile-fail/error-should-say-copy-not-pod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ferror-should-say-copy-not-pod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ferror-should-say-copy-not-pod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ferror-should-say-copy-not-pod.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -13,5 +13,5 @@\n fn check_bound<T:Copy>(_: T) {}\n \n fn main() {\n-    check_bound(\"nocopy\".to_string()); //~ ERROR the trait `std::marker::Copy` is not implemented\n+    check_bound(\"nocopy\".to_string()); //~ ERROR : std::marker::Copy` is not satisfied\n }"}, {"sha": "89ed960c8913ba87b8ccd18b82ea07de4a00a4d6", "filename": "src/test/compile-fail/extern-wrong-value-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -17,6 +17,6 @@ fn main() {\n     // extern functions are extern \"C\" fn\n     let _x: extern \"C\" fn() = f; // OK\n     is_fn(f);\n-    //~^ ERROR the trait `std::ops::Fn<()>` is not implemented for the type `extern \"C\" fn()\n-    //~| ERROR the trait `std::ops::FnOnce<()>` is not implemented for the type `extern \"C\" fn()\n+    //~^ ERROR `extern \"C\" fn() {f} : std::ops::Fn<()>` is not satisfied\n+    //~| ERROR `extern \"C\" fn() {f} : std::ops::FnOnce<()>` is not satisfied\n }"}, {"sha": "8cbfc520ff449cc32cdf3933389d7719613d7554", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -34,6 +34,6 @@ fn main() {\n     //~| found box\n \n     needs_fn(1);\n-    //~^ ERROR `std::ops::Fn<(isize,)>`\n-    //~| ERROR `std::ops::FnOnce<(isize,)>`\n+    //~^ ERROR : std::ops::Fn<(isize,)>`\n+    //~| ERROR : std::ops::FnOnce<(isize,)>`\n }"}, {"sha": "8b127ca179585771111ef549d563cceb3866af25", "filename": "src/test/compile-fail/for-loop-bogosity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -24,7 +24,7 @@ pub fn main() {\n         x: 1,\n         y: 2,\n     };\n-    for x in bogus { //~ ERROR `std::iter::Iterator` is not implemented for the type `MyStruct`\n+    for x in bogus { //~ ERROR `MyStruct : std::iter::Iterator`\n         drop(x);\n     }\n }"}, {"sha": "845429d4b0c0b37a07c89fd0500d0389fe888ed0", "filename": "src/test/compile-fail/hrtb-conflate-regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fhrtb-conflate-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fhrtb-conflate-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-conflate-regions.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -35,6 +35,6 @@ impl<'a> Foo<(&'a isize, &'a isize)> for SomeStruct\n }\n \n fn a() { want_foo1::<SomeStruct>(); } // OK -- foo wants just one region\n-fn b() { want_foo2::<SomeStruct>(); } //~ ERROR not implemented\n+fn b() { want_foo2::<SomeStruct>(); } //~ ERROR E0277\n \n fn main() { }"}, {"sha": "b55dccec2d56f95adec0155cfaae1dd679d5ee1d", "filename": "src/test/compile-fail/hrtb-higher-ranker-supertraits-transitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits-transitive.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -54,7 +54,7 @@ fn want_qux<B>(b: &B)\n     where B : Qux\n {\n     want_foo_for_any_tcx(b);\n-    want_bar_for_any_ccx(b); //~ ERROR not implemented\n+    want_bar_for_any_ccx(b); //~ ERROR E0277\n }\n \n fn main() {}"}, {"sha": "4c5add4aceaaf15273f468de48cc5e2731bce19a", "filename": "src/test/compile-fail/hrtb-higher-ranker-supertraits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-higher-ranker-supertraits.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -25,7 +25,7 @@ fn want_foo_for_some_tcx<'x,F>(f: &'x F)\n     where F : Foo<'x>\n {\n     want_foo_for_some_tcx(f);\n-    want_foo_for_any_tcx(f); //~ ERROR not implemented\n+    want_foo_for_any_tcx(f); //~ ERROR E0277\n }\n \n fn want_foo_for_any_tcx<F>(f: &F)\n@@ -42,7 +42,7 @@ fn want_bar_for_some_ccx<'x,B>(b: &B)\n     want_foo_for_any_tcx(b);\n \n     want_bar_for_some_ccx(b);\n-    want_bar_for_any_ccx(b); //~ ERROR not implemented\n+    want_bar_for_any_ccx(b); //~ ERROR E0277\n }\n \n fn want_bar_for_any_ccx<B>(b: &B)"}, {"sha": "270e6b9f183a7a7c94521f1612c53fb4800e3471", "filename": "src/test/compile-fail/hrtb-just-for-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fhrtb-just-for-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fhrtb-just-for-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-just-for-static.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -31,7 +31,7 @@ fn give_any() {\n struct StaticInt;\n impl Foo<&'static isize> for StaticInt { }\n fn give_static() {\n-    want_hrtb::<StaticInt>() //~ ERROR `for<'a> Foo<&'a isize>` is not implemented\n+    want_hrtb::<StaticInt>() //~ ERROR `for<'a> StaticInt : Foo<&'a isize>` is not satisfied\n }\n \n fn main() { }"}, {"sha": "24e59e6c29e353dd24965a85b09163173d4c6e8f", "filename": "src/test/compile-fail/hrtb-perfect-forwarding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fhrtb-perfect-forwarding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fhrtb-perfect-forwarding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-perfect-forwarding.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -53,7 +53,7 @@ fn foo_hrtb_bar_not<'b,T>(mut t: T)\n     // be implemented. Thus to satisfy `&mut T : for<'a> Foo<&'a\n     // isize>`, we require `T : for<'a> Bar<&'a isize>`, but the where\n     // clause only specifies `T : Bar<&'b isize>`.\n-    foo_hrtb_bar_not(&mut t); //~ ERROR `for<'a> Bar<&'a isize>` is not implemented for the type `T`\n+    foo_hrtb_bar_not(&mut t); //~ ERROR `for<'a> T : Bar<&'a isize>` is not satisfied\n }\n \n fn foo_hrtb_bar_hrtb<T>(mut t: T)"}, {"sha": "dd14d0c91545880f5850977f0c645b44404e91b0", "filename": "src/test/compile-fail/ifmt-unimpl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fifmt-unimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fifmt-unimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fifmt-unimpl.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     format!(\"{:X}\", \"3\");\n-    //~^ ERROR: the trait `std::fmt::UpperHex` is not implemented\n+    //~^ ERROR: `str : std::fmt::UpperHex` is not satisfied\n }"}, {"sha": "12696585a9e619f8865303afab1d8c5d62e330d9", "filename": "src/test/compile-fail/impl-bounds-checking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fimpl-bounds-checking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fimpl-bounds-checking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-bounds-checking.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -17,7 +17,7 @@ trait Getter<T: Clone2> {\n     fn get(&self) -> T;\n }\n \n-impl Getter<isize> for isize { //~ ERROR the trait `Clone2` is not implemented\n+impl Getter<isize> for isize { //~ ERROR `isize : Clone2` is not satisfied\n     fn get(&self) -> isize { *self }\n }\n "}, {"sha": "f8979686038b00c2ef8239e1b7bf8f4cd9c5fd79", "filename": "src/test/compile-fail/indexing-requires-a-uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -13,7 +13,7 @@\n \n fn main() {\n     fn bar<T>(_: T) {}\n-    [0][0u8]; //~ ERROR: the trait `std::ops::Index<u8>` is not implemented\n+    [0][0u8]; //~ ERROR: `[_] : std::ops::Index<u8>` is not satisfied\n \n     [0][0]; // should infer to be a usize\n "}, {"sha": "897aca66cbfd466705cc089e5a8b42e50d0e68f8", "filename": "src/test/compile-fail/integral-indexing.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -13,14 +13,14 @@ pub fn main() {\n     let s: String = \"abcdef\".to_string();\n     v[3_usize];\n     v[3];\n-    v[3u8];  //~ERROR the trait `std::ops::Index<u8>` is not implemented\n-    v[3i8];  //~ERROR the trait `std::ops::Index<i8>` is not implemented\n-    v[3u32]; //~ERROR the trait `std::ops::Index<u32>` is not implemented\n-    v[3i32]; //~ERROR the trait `std::ops::Index<i32>` is not implemented\n+    v[3u8];  //~ERROR : std::ops::Index<u8>` is not satisfied\n+    v[3i8];  //~ERROR : std::ops::Index<i8>` is not satisfied\n+    v[3u32]; //~ERROR : std::ops::Index<u32>` is not satisfied\n+    v[3i32]; //~ERROR : std::ops::Index<i32>` is not satisfied\n     s.as_bytes()[3_usize];\n     s.as_bytes()[3];\n-    s.as_bytes()[3u8];  //~ERROR the trait `std::ops::Index<u8>` is not implemented\n-    s.as_bytes()[3i8];  //~ERROR the trait `std::ops::Index<i8>` is not implemented\n-    s.as_bytes()[3u32]; //~ERROR the trait `std::ops::Index<u32>` is not implemented\n-    s.as_bytes()[3i32]; //~ERROR the trait `std::ops::Index<i32>` is not implemented\n+    s.as_bytes()[3u8];  //~ERROR : std::ops::Index<u8>` is not satisfied\n+    s.as_bytes()[3i8];  //~ERROR : std::ops::Index<i8>` is not satisfied\n+    s.as_bytes()[3u32]; //~ERROR : std::ops::Index<u32>` is not satisfied\n+    s.as_bytes()[3i32]; //~ERROR : std::ops::Index<i32>` is not satisfied\n }"}, {"sha": "20da46dcaa29be76eab2d0ba248ef732be4fc8c8", "filename": "src/test/compile-fail/issue-14084.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -13,5 +13,5 @@\n \n fn main() {\n     () <- 0;\n-    //~^ ERROR: the trait `std::ops::Placer<_>` is not implemented\n+    //~^ ERROR: `() : std::ops::Placer<_>` is not satisfied\n }"}, {"sha": "6f4e9887dc6e619b0f89ca6c69a78e588a30d0c9", "filename": "src/test/compile-fail/issue-14366.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14366.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let _x = \"test\" as &::std::any::Any;\n-//~^ ERROR the trait `std::marker::Sized` is not implemented for the type `str`\n+//~^ ERROR `str : std::marker::Sized` is not satisfied\n }"}, {"sha": "790000a3f9234702aede2023d1ba0ffb4e18b418", "filename": "src/test/compile-fail/issue-15756.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15756.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -15,7 +15,7 @@ fn dft_iter<'a, T>(arg1: Chunks<'a,T>, arg2: ChunksMut<'a,T>)\n {\n     for\n     &mut something\n-//~^ ERROR the trait `std::marker::Sized` is not implemented for the type `[T]`\n+//~^ ERROR `[T] : std::marker::Sized` is not satisfied\n     in arg2\n     {\n     }"}, {"sha": "79d2224aad6f5465edf9e207f6f220970f3b0574", "filename": "src/test/compile-fail/issue-16538.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -19,7 +19,7 @@ mod Y {\n }\n \n static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n-//~^ ERROR the trait `std::marker::Sync` is not implemented for the type\n+//~^ ERROR `*const usize : std::marker::Sync` is not satisfied\n //~| ERROR cannot refer to other statics by value, use the address-of operator or a constant instead\n //~| ERROR E0015\n "}, {"sha": "edd9b6e0c066edde6ad29642bf76422e79ac5d8d", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -14,5 +14,5 @@\n fn main() {\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     (|| Box::new(*(&[0][..])))();\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented for the type `[_]`\n+    //~^ ERROR `[_] : std::marker::Sized` is not satisfied\n }"}, {"sha": "1bb3b794135238797fdb670cff6da72a704d095a", "filename": "src/test/compile-fail/issue-17718-static-sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -17,6 +17,6 @@ impl !Sync for Foo {}\n \n static FOO: usize = 3;\n static BAR: Foo = Foo;\n-//~^ ERROR: the trait `std::marker::Sync` is not implemented\n+//~^ ERROR: `Foo : std::marker::Sync` is not satisfied\n \n fn main() {}"}, {"sha": "6b40811bf04f8934150b9304954bcd41a609bd1c", "filename": "src/test/compile-fail/issue-18107.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -12,7 +12,7 @@ pub trait AbstractRenderer {}\n \n fn _create_render(_: &()) ->\n     AbstractRenderer\n-//~^ ERROR: the trait `std::marker::Sized` is not implemented\n+//~^ ERROR: `AbstractRenderer + 'static : std::marker::Sized` is not satisfied\n {\n     match 0 {\n         _ => unimplemented!()"}, {"sha": "5318b18be5c7ffdf034eb183df17b97d99e86c07", "filename": "src/test/compile-fail/issue-18611.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-18611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-18611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18611.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn add_state(op: <isize as HasState>::State) {\n-//~^ ERROR the trait `HasState` is not implemented for the type `isize`\n+//~^ ERROR `isize : HasState` is not satisfied\n }\n \n trait HasState {"}, {"sha": "2742162de531e08210563cd83aae949f424ad8d6", "filename": "src/test/compile-fail/issue-18919.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-18919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-18919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18919.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -11,7 +11,7 @@\n type FuncType<'f> = Fn(&isize) -> isize + 'f;\n \n fn ho_func(f: Option<FuncType>) {\n-    //~^ ERROR: the trait `std::marker::Sized` is not implemented for the type\n+    //~^ ERROR: `for<'r> std::ops::Fn(&'r isize) -> isize : std::marker::Sized` is not satisfied\n }\n \n fn main() {}"}, {"sha": "f37693d8a584ec8c50e44d35dbc75fd3018bb61e", "filename": "src/test/compile-fail/issue-1920-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1920-1.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -18,5 +18,5 @@ fn assert_clone<T>() where T : Clone { }\n \n fn main() {\n     assert_clone::<foo::core::sync::atomic::AtomicBool>();\n-    //~^ ERROR the trait `foo::core::clone::Clone` is not implemented for the type `foo::core::\n+    //~^ ERROR `foo::core::sync::atomic::AtomicBool : foo::core::clone::Clone` is not satisfied\n }"}, {"sha": "c8d7bcaecf93319501282036896c52dd3f159e65", "filename": "src/test/compile-fail/issue-1920-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-1920-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-1920-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1920-2.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -16,5 +16,5 @@ fn assert_clone<T>() where T : Clone { }\n \n fn main() {\n     assert_clone::<bar::sync::atomic::AtomicBool>();\n-    //~^ ERROR the trait `bar::clone::Clone` is not implemented for the type `bar::sync::atomic::\n+    //~^ ERROR `bar::sync::atomic::AtomicBool : bar::clone::Clone` is not satisfied\n }"}, {"sha": "c0252deda24ce7f31b780a0ce1f12d13bbc75123", "filename": "src/test/compile-fail/issue-1920-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1920-3.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -20,5 +20,5 @@ fn assert_clone<T>() where T : Clone { }\n \n fn main() {\n     assert_clone::<foo::core::sync::atomic::AtomicBool>();\n-    //~^ ERROR the trait `core::clone::Clone` is not implemented for the type `core::sync::atomic::\n+    //~^ ERROR `core::sync::atomic::AtomicBool : core::clone::Clone` is not satisfied\n }"}, {"sha": "a54fc0a314b61a4859b75806340fb48ac11f2a38", "filename": "src/test/compile-fail/issue-20005.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -15,7 +15,7 @@ trait From<Src> {\n }\n \n trait To {\n-    fn to<Dst>(  //~ ERROR the trait `std::marker::Sized` is not implemented\n+    fn to<Dst>(  //~ ERROR `Self : std::marker::Sized` is not satisfied\n         self\n     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n         From::from(self)"}, {"sha": "5e60e2a36f62362edac5259a1c2310acf91b618c", "filename": "src/test/compile-fail/issue-20162.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-20162.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-20162.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20162.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -13,5 +13,5 @@ struct X { x: i32 }\n fn main() {\n     let mut b: Vec<X> = vec![];\n     b.sort();\n-    //~^ ERROR the trait `std::cmp::Ord` is not implemented for the type `X`\n+    //~^ ERROR `X : std::cmp::Ord` is not satisfied\n }"}, {"sha": "2634370fe902af293dcbc0442fe240b4db25c9cd", "filename": "src/test/compile-fail/issue-20605.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -10,7 +10,7 @@\n \n fn changer<'a>(mut things: Box<Iterator<Item=&'a mut u8>>) {\n     for item in *things { *item = 0 }\n-//~^ ERROR the trait `std::marker::Sized` is not implemented for the type `std::iter::Iterator\n+//~^ ERROR `std::iter::Iterator<Item=&mut u8> : std::marker::Sized` is not satisfied\n }\n \n fn main() {}"}, {"sha": "7d9ae0543c752aae2c1f00d93e7e980378601e0b", "filename": "src/test/compile-fail/issue-21160.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-21160.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-21160.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21160.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -16,6 +16,6 @@ impl Bar {\n \n #[derive(Hash)]\n struct Foo(Bar);\n-//~^ error: the trait `std::hash::Hash` is not implemented for the type `Bar`\n+//~^ error: `Bar : std::hash::Hash` is not satisfied\n \n fn main() {}"}, {"sha": "452ae5df40a9a97d2614aedd55c6bd6c516a6281", "filename": "src/test/compile-fail/issue-21659-show-relevant-trait-impls-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-1.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -32,7 +32,7 @@ fn main() {\n     let f1 = Bar;\n \n     f1.foo(1usize);\n-    //~^ error: the trait `Foo<usize>` is not implemented for the type `Bar`\n+    //~^ error: the predicate `Bar : Foo<usize>` is not satisfied\n     //~| help: the following implementations were found:\n     //~| help:   <Bar as Foo<i32>>\n     //~| help:   <Bar as Foo<u8>>"}, {"sha": "8f52004f598b8b03baa2df5a2c3ea31e34923430", "filename": "src/test/compile-fail/issue-21659-show-relevant-trait-impls-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21659-show-relevant-trait-impls-2.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -36,7 +36,7 @@ fn main() {\n     let f1 = Bar;\n \n     f1.foo(1usize);\n-    //~^ error: the trait `Foo<usize>` is not implemented for the type `Bar`\n+    //~^ error: the predicate `Bar : Foo<usize>` is not satisfied\n     //~| help: the following implementations were found:\n     //~| help:   <Bar as Foo<i8>>\n     //~| help:   <Bar as Foo<i16>>"}, {"sha": "2f0611a2086e740d7f38d2596b38b21afd85b964", "filename": "src/test/compile-fail/issue-21763.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-21763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-21763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21763.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -17,5 +17,5 @@ fn foo<T: Send>() {}\n \n fn main() {\n     foo::<HashMap<Rc<()>, Rc<()>>>();\n-    //~^ ERROR: the trait `std::marker::Send` is not implemented for the type `std::rc::Rc<()>`\n+    //~^ ERROR: `std::rc::Rc<()> : std::marker::Send` is not satisfied\n }"}, {"sha": "29bef8c966a4cfd33b7ccddc4db97d08a153e242", "filename": "src/test/compile-fail/issue-22034.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-22034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-22034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22034.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let ptr: *mut () = 0 as *mut _;\n     let _: &mut Fn() = unsafe {\n         &mut *(ptr as *mut Fn())\n-        //~^ ERROR the trait `std::ops::Fn<()>` is not implemented\n-        //~| ERROR the trait `std::ops::FnOnce<()>` is not implemented\n+        //~^ ERROR `() : std::ops::Fn<()>` is not satisfied\n+        //~| ERROR `() : std::ops::FnOnce<()>` is not satisfied\n     };\n }"}, {"sha": "402b9a04496e9a4aeaa73652ca9bfd1cbfb905f3", "filename": "src/test/compile-fail/issue-22645.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-22645.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-22645.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22645.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -22,6 +22,6 @@ impl<RHS: Scalar> Add <RHS> for Bob {\n \n fn main() {\n   let b = Bob + 3.5;\n-  b + 3 //~ ERROR: is not implemented\n+  b + 3 //~ ERROR E0277\n   //~^ ERROR: mismatched types\n }"}, {"sha": "9d0b559d13d36c9662e66672636139833d3ac469", "filename": "src/test/compile-fail/issue-25076.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-25076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-25076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25076.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -17,5 +17,5 @@ fn do_fold<B, F: InOut<B, Out=B>>(init: B, f: F) {}\n fn bot<T>() -> T { loop {} }\n \n fn main() {\n-    do_fold(bot(), ()); //~ ERROR is not implemented for the type `()`\n+    do_fold(bot(), ()); //~ ERROR `() : InOut<_>` is not satisfied\n }"}, {"sha": "aac282370c6466f6066f8017810601bcd8de5a21", "filename": "src/test/compile-fail/issue-28098.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-28098.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-28098.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28098.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -10,13 +10,13 @@\n \n fn main() {\n     let _ = Iterator::next(&mut ());\n-    //~^ ERROR the trait `std::iter::Iterator` is not implemented\n+    //~^ ERROR `() : std::iter::Iterator` is not satisfied\n \n     for _ in false {}\n-    //~^ ERROR the trait `std::iter::Iterator` is not implemented\n+    //~^ ERROR `bool : std::iter::Iterator` is not satisfied\n \n     let _ = Iterator::next(&mut ());\n-    //~^ ERROR the trait `std::iter::Iterator` is not implemented\n+    //~^ ERROR `() : std::iter::Iterator` is not satisfied\n \n     other()\n }\n@@ -25,11 +25,11 @@ pub fn other() {\n     // check errors are still reported globally\n \n     let _ = Iterator::next(&mut ());\n-    //~^ ERROR the trait `std::iter::Iterator` is not implemented\n+    //~^ ERROR `() : std::iter::Iterator` is not satisfied\n \n     let _ = Iterator::next(&mut ());\n-    //~^ ERROR the trait `std::iter::Iterator` is not implemented\n+    //~^ ERROR `() : std::iter::Iterator` is not satisfied\n \n     for _ in false {}\n-    //~^ ERROR the trait `std::iter::Iterator` is not implemented\n+    //~^ ERROR `bool : std::iter::Iterator` is not satisfied\n }"}, {"sha": "118644ef2cb60706fb51526042e1a1403bac2c9c", "filename": "src/test/compile-fail/issue-5035-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -11,6 +11,6 @@\n trait I {}\n type K = I+'static;\n \n-fn foo(_x: K) {} //~ ERROR: the trait `std::marker::Sized` is not implemented\n+fn foo(_x: K) {} //~ ERROR: `I + 'static : std::marker::Sized` is not satisfied\n \n fn main() {}"}, {"sha": "0058d5af62e4ee80c9209fef19f60ac2b433b78e", "filename": "src/test/compile-fail/issue-5883.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -15,8 +15,8 @@ struct Struct {\n }\n \n fn new_struct(r: A+'static)\n-    -> Struct { //~^  ERROR the trait `std::marker::Sized` is not implemented\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    -> Struct { //~^  ERROR `A + 'static : std::marker::Sized` is not satisfied\n+    //~^ ERROR `A + 'static : std::marker::Sized` is not satisfied\n     Struct { r: r }\n }\n "}, {"sha": "c676c95ad25ea3f064401ffb4767597577a67693", "filename": "src/test/compile-fail/issue-7013.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -34,5 +34,5 @@ struct A {\n \n fn main() {\n     let a = A {v: box B{v: None} as Box<Foo+Send>};\n-    //~^ ERROR the trait `std::marker::Send` is not implemented\n+    //~^ ERROR `std::rc::Rc<std::cell::RefCell<A>> : std::marker::Send` is not satisfied\n }"}, {"sha": "8d4ebbe720717cd94a1400ae50eb99beeb38f6b1", "filename": "src/test/compile-fail/issue-7364.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -16,6 +16,6 @@ use std::cell::RefCell;\n // Regression test for issue 7364\n static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n //~^ ERROR allocations are not allowed in statics\n-//~| ERROR the trait `std::marker::Sync` is not implemented for the type\n+//~| ERROR `std::cell::RefCell<isize> : std::marker::Sync` is not satisfied\n \n fn main() { }"}, {"sha": "08b4e1a45f3368669be85be0838ca9763c63ca8d", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -34,26 +34,26 @@ fn test<'a,T,U:Copy>(_: &'a isize) {\n     assert_copy::<&'a [isize]>();\n \n     // ...unless they are mutable\n-    assert_copy::<&'static mut isize>(); //~ ERROR `std::marker::Copy` is not implemented\n-    assert_copy::<&'a mut isize>();  //~ ERROR `std::marker::Copy` is not implemented\n+    assert_copy::<&'static mut isize>(); //~ ERROR : std::marker::Copy` is not satisfied\n+    assert_copy::<&'a mut isize>();  //~ ERROR : std::marker::Copy` is not satisfied\n \n     // boxes are not ok\n-    assert_copy::<Box<isize>>();   //~ ERROR `std::marker::Copy` is not implemented\n-    assert_copy::<String>();   //~ ERROR `std::marker::Copy` is not implemented\n-    assert_copy::<Vec<isize> >(); //~ ERROR `std::marker::Copy` is not implemented\n-    assert_copy::<Box<&'a mut isize>>(); //~ ERROR `std::marker::Copy` is not implemented\n+    assert_copy::<Box<isize>>();   //~ ERROR : std::marker::Copy` is not satisfied\n+    assert_copy::<String>();   //~ ERROR : std::marker::Copy` is not satisfied\n+    assert_copy::<Vec<isize> >(); //~ ERROR : std::marker::Copy` is not satisfied\n+    assert_copy::<Box<&'a mut isize>>(); //~ ERROR : std::marker::Copy` is not satisfied\n \n     // borrowed object types are generally ok\n     assert_copy::<&'a Dummy>();\n     assert_copy::<&'a (Dummy+Copy)>();\n     assert_copy::<&'static (Dummy+Copy)>();\n \n     // owned object types are not ok\n-    assert_copy::<Box<Dummy>>(); //~ ERROR `std::marker::Copy` is not implemented\n-    assert_copy::<Box<Dummy+Copy>>(); //~ ERROR `std::marker::Copy` is not implemented\n+    assert_copy::<Box<Dummy>>(); //~ ERROR : std::marker::Copy` is not satisfied\n+    assert_copy::<Box<Dummy+Copy>>(); //~ ERROR : std::marker::Copy` is not satisfied\n \n     // mutable object types are not ok\n-    assert_copy::<&'a mut (Dummy+Copy)>();  //~ ERROR `std::marker::Copy` is not implemented\n+    assert_copy::<&'a mut (Dummy+Copy)>();  //~ ERROR : std::marker::Copy` is not satisfied\n \n     // unsafe ptrs are ok\n     assert_copy::<*const isize>();\n@@ -71,10 +71,10 @@ fn test<'a,T,U:Copy>(_: &'a isize) {\n     assert_copy::<MyStruct>();\n \n     // structs containing non-POD are not ok\n-    assert_copy::<MyNoncopyStruct>(); //~ ERROR `std::marker::Copy` is not implemented\n+    assert_copy::<MyNoncopyStruct>(); //~ ERROR : std::marker::Copy` is not satisfied\n \n     // ref counted types are not ok\n-    assert_copy::<Rc<isize>>();   //~ ERROR `std::marker::Copy` is not implemented\n+    assert_copy::<Rc<isize>>();   //~ ERROR : std::marker::Copy` is not satisfied\n }\n \n pub fn main() {"}, {"sha": "cf51e9bd60817b7c7bf1e28d396d512810e5807f", "filename": "src/test/compile-fail/kindck-impl-type-params-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -21,5 +21,5 @@ fn take_param<T:Foo>(foo: &T) { }\n fn main() {\n     let x: Box<_> = box 3;\n     take_param(&x);\n-    //~^ ERROR the trait `std::marker::Copy` is not implemented\n+    //~^ ERROR `Box<_> : std::marker::Copy` is not satisfied\n }"}, {"sha": "53ad4d1163bfad59b0da9ec0c786c252617f6407", "filename": "src/test/compile-fail/kindck-impl-type-params.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -26,13 +26,13 @@ impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n fn f<T>(val: T) {\n     let t: S<T> = S(marker::PhantomData);\n     let a = &t as &Gettable<T>;\n-    //~^ ERROR the trait `std::marker::Send` is not implemented\n+    //~^ ERROR : std::marker::Send` is not satisfied\n }\n \n fn g<T>(val: T) {\n     let t: S<T> = S(marker::PhantomData);\n     let a: &Gettable<T> = &t;\n-    //~^ ERROR the trait `std::marker::Send` is not implemented\n+    //~^ ERROR : std::marker::Send` is not satisfied\n }\n \n fn foo<'a>() {\n@@ -44,15 +44,15 @@ fn foo<'a>() {\n fn foo2<'a>() {\n     let t: Box<S<String>> = box S(marker::PhantomData);\n     let a = t as Box<Gettable<String>>;\n-    //~^ ERROR the trait `std::marker::Copy` is not implemented\n+    //~^ ERROR : std::marker::Copy` is not satisfied\n }\n \n fn foo3<'a>() {\n     struct Foo; // does not impl Copy\n \n     let t: Box<S<Foo>> = box S(marker::PhantomData);\n     let a: Box<Gettable<Foo>> = t;\n-    //~^ ERROR the trait `std::marker::Copy` is not implemented\n+    //~^ ERROR : std::marker::Copy` is not satisfied\n }\n \n fn main() { }"}, {"sha": "dd77c2c138f4622df9b7a129959b05fb95e37d46", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -18,5 +18,5 @@ fn bar<F:FnOnce() + Send>(_: F) { }\n fn main() {\n     let x = Rc::new(3);\n     bar(move|| foo(x));\n-    //~^ ERROR `std::marker::Send` is not implemented\n+    //~^ ERROR : std::marker::Send` is not satisfied\n }"}, {"sha": "bd0e5642b9ccddd5813b91f7607260240daefae2", "filename": "src/test/compile-fail/kindck-send-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -20,11 +20,11 @@ trait Message : Send { }\n \n fn object_ref_with_static_bound_not_ok() {\n     assert_send::<&'static (Dummy+'static)>();\n-    //~^ ERROR the trait `std::marker::Sync` is not implemented\n+    //~^ ERROR : std::marker::Sync` is not satisfied\n }\n \n fn box_object_with_no_bound_not_ok<'a>() {\n-    assert_send::<Box<Dummy>>(); //~ ERROR the trait `std::marker::Send` is not implemented\n+    assert_send::<Box<Dummy>>(); //~ ERROR : std::marker::Send` is not satisfied\n }\n \n fn object_with_send_bound_ok() {"}, {"sha": "da56fccde2d4ab93f252a185beb66a4253e6b45e", "filename": "src/test/compile-fail/kindck-send-object1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -18,7 +18,7 @@ trait Dummy { }\n // careful with object types, who knows what they close over...\n fn test51<'a>() {\n     assert_send::<&'a Dummy>();\n-    //~^ ERROR the trait `std::marker::Sync` is not implemented\n+    //~^ ERROR : std::marker::Sync` is not satisfied\n }\n fn test52<'a>() {\n     assert_send::<&'a (Dummy+Sync)>();\n@@ -37,7 +37,7 @@ fn test61() {\n // them not ok\n fn test_71<'a>() {\n     assert_send::<Box<Dummy+'a>>();\n-    //~^ ERROR the trait `std::marker::Send` is not implemented\n+    //~^ ERROR : std::marker::Send` is not satisfied\n }\n \n fn main() { }"}, {"sha": "e52a6e12efc96bf66b80e956705d3dc5275821d0", "filename": "src/test/compile-fail/kindck-send-object2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -14,11 +14,11 @@ fn assert_send<T:Send>() { }\n trait Dummy { }\n \n fn test50() {\n-    assert_send::<&'static Dummy>(); //~ ERROR the trait `std::marker::Sync` is not implemented\n+    assert_send::<&'static Dummy>(); //~ ERROR : std::marker::Sync` is not satisfied\n }\n \n fn test53() {\n-    assert_send::<Box<Dummy>>(); //~ ERROR the trait `std::marker::Send` is not implemented\n+    assert_send::<Box<Dummy>>(); //~ ERROR : std::marker::Send` is not satisfied\n }\n \n // ...unless they are properly bounded"}, {"sha": "583381a1c28f5b23fc9753f8e2ef25f9b1dde529", "filename": "src/test/compile-fail/kindck-send-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -19,7 +19,7 @@ fn test32() { assert_send::<Vec<isize> >(); }\n \n // but not if they own a bad thing\n fn test40() {\n-    assert_send::<Box<*mut u8>>(); //~ ERROR `std::marker::Send` is not implemented\n+    assert_send::<Box<*mut u8>>(); //~ ERROR : std::marker::Send` is not satisfied\n }\n \n fn main() { }"}, {"sha": "c7eca74f7800c24a4843527bc07c11cc972213cd", "filename": "src/test/compile-fail/kindck-send-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -14,7 +14,7 @@ fn assert_send<T:Send>() { }\n \n fn test71<'a>() {\n     assert_send::<*mut &'a isize>();\n-    //~^ ERROR the trait `core::marker::Send` is not implemented for the type\n+    //~^ ERROR `*mut &'a isize : core::marker::Send` is not satisfied\n }\n \n fn main() {"}, {"sha": "b2957a71a56c795d117731315af47b6d3651bec3", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -28,5 +28,5 @@ fn main() {\n     let x: Box<Map<isize, isize>> = x;\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let y: Box<Map<usize, isize>> = Box::new(x);\n-    //~^ ERROR the trait `Map<usize, isize>` is not implemented\n+    //~^ ERROR `Box<Map<isize, isize>> : Map<usize, isize>` is not satisfied\n }"}, {"sha": "a24a91a4d540a9d7d0aec56acb288fc2b932432e", "filename": "src/test/compile-fail/mut-not-freeze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -15,5 +15,5 @@ fn f<T: Sync>(_: T) {}\n fn main() {\n     let x = RefCell::new(0);\n     f(x);\n-    //~^ ERROR `std::marker::Sync` is not implemented\n+    //~^ ERROR `std::cell::RefCell<_> : std::marker::Sync` is not satisfied\n }"}, {"sha": "bb2fdbc555b7dfd47bc2276bd7950541bd8db189", "filename": "src/test/compile-fail/mutable-enum-indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -24,5 +24,5 @@ fn bar<T: Sync>(_: T) {}\n \n fn main() {\n     let x = Foo::A(NoSync);\n-    bar(&x); //~ ERROR the trait `std::marker::Sync` is not implemented\n+    bar(&x); //~ ERROR `NoSync : std::marker::Sync` is not satisfied\n }"}, {"sha": "81d174256ee2a0d24d9a48ab8086da4047690371", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -33,7 +33,7 @@ fn main() {\n     let x = foo(Port(Rc::new(())));\n \n     thread::spawn(move|| {\n-        //~^ ERROR `std::marker::Send` is not implemented\n+        //~^ ERROR `std::rc::Rc<()> : std::marker::Send` is not satisfied\n         let y = x;\n         println!(\"{:?}\", y);\n     });"}, {"sha": "966d932f2a41a4048ab26ffee511214ac3ff9291", "filename": "src/test/compile-fail/no_send-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -24,5 +24,5 @@ fn bar<T: Send>(_: T) {}\n fn main() {\n     let x = Foo::A(NoSend);\n     bar(x);\n-    //~^ ERROR `std::marker::Send` is not implemented\n+    //~^ ERROR `NoSend : std::marker::Send` is not satisfied\n }"}, {"sha": "b6c7e1ad05af4559572f093e9ea8bee106fead09", "filename": "src/test/compile-fail/no_send-rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -15,5 +15,5 @@ fn bar<T: Send>(_: T) {}\n fn main() {\n     let x = Rc::new(5);\n     bar(x);\n-    //~^ ERROR `std::marker::Send` is not implemented\n+    //~^ ERROR `std::rc::Rc<_> : std::marker::Send` is not satisfied\n }"}, {"sha": "037753e6c5fa6965913f2ac96a5a556b839e057f", "filename": "src/test/compile-fail/no_send-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fno_send-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fno_send-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-struct.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -23,5 +23,5 @@ fn bar<T: Send>(_: T) {}\n fn main() {\n     let x = Foo { a: 5 };\n     bar(x);\n-    //~^ ERROR the trait `std::marker::Send` is not implemented\n+    //~^ ERROR `Foo : std::marker::Send` is not satisfied\n }"}, {"sha": "be52dd41826416c9f0013c8edffc2c66b84015fd", "filename": "src/test/compile-fail/no_share-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -22,5 +22,5 @@ fn bar<T: Sync>(_: T) {}\n fn main() {\n     let x = Foo::A(NoSync);\n     bar(x);\n-    //~^ ERROR the trait `std::marker::Sync` is not implemented\n+    //~^ ERROR `NoSync : std::marker::Sync` is not satisfied\n }"}, {"sha": "944bcb48ab05ff2ce1fa0f16a8099071b48bfa63", "filename": "src/test/compile-fail/no_share-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -20,5 +20,5 @@ fn bar<T: Sync>(_: T) {}\n fn main() {\n     let x = Foo { a: 5 };\n     bar(x);\n-    //~^ ERROR the trait `std::marker::Sync` is not implemented\n+    //~^ ERROR `Foo : std::marker::Sync` is not satisfied\n }"}, {"sha": "e5de03a08486c5854685bcb95449c1db11e7071e", "filename": "src/test/compile-fail/not-panic-safe-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-3.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -18,5 +18,5 @@ use std::cell::RefCell;\n fn assert<T: RecoverSafe + ?Sized>() {}\n \n fn main() {\n-    assert::<Arc<RefCell<i32>>>(); //~ ERROR: is not implemented\n+    assert::<Arc<RefCell<i32>>>(); //~ ERROR E0277\n }"}, {"sha": "0301c8dd935c7fe71876b226c9d18041028c5959", "filename": "src/test/compile-fail/not-panic-safe-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe-5.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -17,5 +17,5 @@ use std::cell::UnsafeCell;\n fn assert<T: RecoverSafe + ?Sized>() {}\n \n fn main() {\n-    assert::<*const UnsafeCell<i32>>(); //~ ERROR: is not implemented\n+    assert::<*const UnsafeCell<i32>>(); //~ ERROR E0277\n }"}, {"sha": "fd0f830a17d877ec79beb9383dd85de6a50e9de2", "filename": "src/test/compile-fail/not-panic-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-panic-safe.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -16,5 +16,5 @@ use std::panic::RecoverSafe;\n fn assert<T: RecoverSafe + ?Sized>() {}\n \n fn main() {\n-    assert::<&mut i32>(); //~ ERROR: RecoverSafe` is not implemented\n+    assert::<&mut i32>(); //~ ERROR: RecoverSafe` is not satisfied\n }"}, {"sha": "3955e3a040c5f3159289a748d16060b969c12b9b", "filename": "src/test/compile-fail/not-sync.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -16,19 +16,19 @@ fn test<T: Sync>() {}\n \n fn main() {\n     test::<Cell<i32>>();\n-    //~^ ERROR marker::Sync` is not implemented for the type `std::cell::Cell<i32>`\n+    //~^ ERROR `std::cell::Cell<i32> : std::marker::Sync` is not satisfied\n     test::<RefCell<i32>>();\n-    //~^ ERROR marker::Sync` is not implemented for the type `std::cell::RefCell<i32>`\n+    //~^ ERROR `std::cell::RefCell<i32> : std::marker::Sync` is not satisfied\n \n     test::<Rc<i32>>();\n-    //~^ ERROR marker::Sync` is not implemented for the type `std::rc::Rc<i32>`\n+    //~^ ERROR `std::rc::Rc<i32> : std::marker::Sync` is not satisfied\n     test::<Weak<i32>>();\n-    //~^ ERROR marker::Sync` is not implemented for the type `std::rc::Weak<i32>`\n+    //~^ ERROR `std::rc::Weak<i32> : std::marker::Sync` is not satisfied\n \n     test::<Receiver<i32>>();\n-    //~^ ERROR marker::Sync` is not implemented for the type `std::sync::mpsc::Receiver<i32>`\n+    //~^ ERROR `std::sync::mpsc::Receiver<i32> : std::marker::Sync` is not satisfied\n     test::<Sender<i32>>();\n-    //~^ ERROR marker::Sync` is not implemented for the type `std::sync::mpsc::Sender<i32>`\n+    //~^ ERROR `std::sync::mpsc::Sender<i32> : std::marker::Sync` is not satisfied\n     test::<SyncSender<i32>>();\n-    //~^ ERROR marker::Sync` is not implemented for the type `std::sync::mpsc::SyncSender<i32>`\n+    //~^ ERROR `std::sync::mpsc::SyncSender<i32> : std::marker::Sync` is not satisfied\n }"}, {"sha": "6673a87e9e4e47362bfa77db2768e6320352a1d6", "filename": "src/test/compile-fail/object-does-not-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -14,5 +14,5 @@\n trait Foo {}\n fn take_foo<F:Foo>(f: F) {}\n fn take_object(f: Box<Foo>) { take_foo(f); }\n-//~^ ERROR the trait `Foo` is not implemented\n+//~^ ERROR `Box<Foo> : Foo` is not satisfied\n fn main() {}"}, {"sha": "0006b29979cad31ba7d47090bacbd7e6b2f77391", "filename": "src/test/compile-fail/phantom-oibit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -31,11 +31,11 @@ struct Nested<T>(T);\n fn is_zen<T: Zen>(_: T) {}\n \n fn not_sync<T>(x: Guard<T>) {\n-    is_zen(x)  //~ error: the trait `std::marker::Sync` is not implemented for the type `T`\n+    is_zen(x)  //~ error: `T : std::marker::Sync` is not satisfied\n }\n \n fn nested_not_sync<T>(x: Nested<Guard<T>>) {\n-    is_zen(x)  //~ error: the trait `std::marker::Sync` is not implemented for the type `T`\n+    is_zen(x)  //~ error: `T : std::marker::Sync` is not satisfied\n }\n \n fn main() {}"}, {"sha": "25b7465a1641f004079c3793bce4c3bf7b4d4ccd", "filename": "src/test/compile-fail/range-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-1.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -22,6 +22,6 @@ pub fn main() {\n     // Unsized type.\n     let arr: &[_] = &[1, 2, 3];\n     let range = *arr..;\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n-    //~| ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `[_] : std::marker::Sized` is not satisfied\n+    //~| ERROR `[_] : std::marker::Sized` is not satisfied\n }"}, {"sha": "7cac3f41d546d712b490f3e090e41dd3adef2134", "filename": "src/test/compile-fail/reflect-assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Freflect-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Freflect-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freflect-assoc.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -24,7 +24,7 @@ struct Struct<T>(T);\n fn is_reflect<T:Reflect>() { }\n \n fn a<T>() {\n-    is_reflect::<Box<Get<Output=T>>>(); //~ ERROR not implemented\n+    is_reflect::<Box<Get<Output=T>>>(); //~ ERROR E0277\n }\n \n fn ok_a<T: Reflect>() {"}, {"sha": "476b498ae6492157b8b270ffe9158613e9317413", "filename": "src/test/compile-fail/reflect-object-param.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Freflect-object-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Freflect-object-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freflect-object-param.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -23,23 +23,23 @@ struct Struct<T>(T);\n fn is_reflect<T:Reflect>() { }\n \n fn a<T>() {\n-    is_reflect::<T>(); //~ ERROR not implemented\n+    is_reflect::<T>(); //~ ERROR E0277\n }\n \n fn ok_a<T: Reflect>() {\n     is_reflect::<T>(); // OK\n }\n \n fn b<T>() {\n-    is_reflect::<Box<Get<T>>>(); //~ ERROR not implemented\n+    is_reflect::<Box<Get<T>>>(); //~ ERROR E0277\n }\n \n fn ok_b<T: Reflect>() {\n     is_reflect::<Box<Get<T>>>(); // OK\n }\n \n fn c<T>() {\n-    is_reflect::<Box<Get<Struct<T>>>>(); //~ ERROR not implemented\n+    is_reflect::<Box<Get<Struct<T>>>>(); //~ ERROR E0277\n }\n \n fn main() {"}, {"sha": "fdd569e2c1b3fe9bac4540d766b8e7f196b0c554", "filename": "src/test/compile-fail/reflect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freflect.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -22,15 +22,15 @@ struct Struct<T>(T);\n fn is_reflect<T:Reflect>() { }\n \n fn c<T>() {\n-    is_reflect::<Struct<T>>(); //~ ERROR not implemented\n+    is_reflect::<Struct<T>>(); //~ ERROR E0277\n }\n \n fn ok_c<T: Reflect>() {\n     is_reflect::<Struct<T>>(); // OK\n }\n \n fn d<T>() {\n-    is_reflect::<(i32, T)>(); //~ ERROR not implemented\n+    is_reflect::<(i32, T)>(); //~ ERROR E0277\n }\n \n fn main() {"}, {"sha": "3553d0dab312694e932e8a6c10a0c11bb0184884", "filename": "src/test/compile-fail/repeat-to-run-dtor-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -25,5 +25,5 @@ impl Drop for Foo {\n fn main() {\n     let a = Foo { x: 3 };\n     let _ = [ a; 5 ];\n-    //~^ ERROR the trait `std::marker::Copy` is not implemented for the type `Foo`\n+    //~^ ERROR `Foo : std::marker::Copy` is not satisfied\n }"}, {"sha": "61fa3cbfe69e00998ebdeeb28be8fad263df8547", "filename": "src/test/compile-fail/str-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -10,5 +10,5 @@\n \n pub fn main() {\n     let s: &str = \"hello\";\n-    let c: u8 = s[4]; //~ ERROR the trait `std::ops::Index<_>` is not implemented\n+    let c: u8 = s[4]; //~ ERROR `str : std::ops::Index<_>` is not satisfied\n }"}, {"sha": "f372a17e045c02f3d4caa7ca9deffc7d90a8b266", "filename": "src/test/compile-fail/str-mut-idx.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -12,11 +12,11 @@ fn bot<T>() -> T { loop {} }\n \n fn mutate(s: &mut str) {\n     s[1..2] = bot();\n-    //~^ ERROR `std::marker::Sized` is not implemented for the type `str`\n-    //~| ERROR `std::marker::Sized` is not implemented for the type `str`\n+    //~^ ERROR `str : std::marker::Sized` is not satisfied\n+    //~| ERROR `str : std::marker::Sized` is not satisfied\n     s[1usize] = bot();\n-    //~^ ERROR `std::ops::Index<usize>` is not implemented for the type `str`\n-    //~| ERROR `std::ops::IndexMut<usize>` is not implemented for the type `str`\n+    //~^ ERROR `str : std::ops::Index<usize>` is not satisfied\n+    //~| ERROR `str : std::ops::IndexMut<usize>` is not satisfied\n }\n \n pub fn main() {}"}, {"sha": "a11df776e06d3ba1e2dc6f0add3390d80a92da6b", "filename": "src/test/compile-fail/task-rng-isnt-sendable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -16,5 +16,5 @@ fn test_send<S: Send>() {}\n \n pub fn main() {\n     test_send::<rand::ThreadRng>();\n-    //~^ ERROR `std::marker::Send` is not implemented\n+    //~^ ERROR : std::marker::Send` is not satisfied\n }"}, {"sha": "0a771ecf63f18a0b079d9bd2cdf962f99755b5be", "filename": "src/test/compile-fail/trait-bounds-not-on-bare-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -15,7 +15,7 @@ trait Foo {\n // This should emit the less confusing error, not the more confusing one.\n \n fn foo(_x: Foo + Send) {\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `Foo + Send + 'static : std::marker::Sized` is not satisfied\n }\n \n fn main() { }"}, {"sha": "6a271a7b7497ffd84493874bf966c2c6b19b4c05", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-in-fns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-in-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-in-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-in-fns.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -21,10 +21,10 @@ enum Bar<T:Trait> {\n }\n \n fn explode(x: Foo<u32>) {}\n-//~^ ERROR not implemented\n+//~^ ERROR E0277\n \n fn kaboom(y: Bar<f32>) {}\n-//~^ ERROR not implemented\n+//~^ ERROR E0277\n \n fn main() {\n }"}, {"sha": "77abe6f7f7473c084a0886d80ac66d9df2af839c", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-in-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-in-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-in-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-in-impls.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -28,7 +28,7 @@ trait PolyTrait<T>\n struct Struct;\n \n impl PolyTrait<Foo<u16>> for Struct {\n-//~^ ERROR not implemented\n+//~^ ERROR E0277\n }\n \n fn main() {"}, {"sha": "9e680d17fb9ef5a8c865b8e1834d655f3f712109", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-locals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -18,10 +18,10 @@ struct Foo<T:Trait> {\n \n fn main() {\n     let foo = Foo {\n-    //~^ ERROR not implemented\n+    //~^ ERROR E0277\n         x: 3\n     };\n \n     let baz: Foo<usize> = loop { };\n-    //~^ ERROR not implemented\n+    //~^ ERROR E0277\n }"}, {"sha": "2b59fdcae3534a8658466f457bcca0cb277d1a79", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-static.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -17,7 +17,7 @@ struct Foo<T:Trait> {\n }\n \n static X: Foo<usize> = Foo {\n-//~^ ERROR not implemented\n+//~^ ERROR E0277\n     x: 1,\n };\n "}, {"sha": "975de00d02a33aa729057533a21374b0aaf72ef0", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-xc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -15,10 +15,10 @@ extern crate trait_bounds_on_structs_and_enums_xc;\n use trait_bounds_on_structs_and_enums_xc::{Bar, Foo, Trait};\n \n fn explode(x: Foo<usize>) {}\n-//~^ ERROR not implemented\n+//~^ ERROR E0277\n \n fn kaboom(y: Bar<f32>) {}\n-//~^ ERROR not implemented\n+//~^ ERROR E0277\n \n fn main() {\n }"}, {"sha": "515684bcf42d275e585186be160a0edd4ea2805f", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-xc1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc1.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -16,10 +16,10 @@ use trait_bounds_on_structs_and_enums_xc::{Bar, Foo, Trait};\n \n fn main() {\n     let foo = Foo {\n-    //~^ ERROR not implemented\n+    //~^ ERROR E0277\n         x: 3\n     };\n     let bar: Bar<f64> = return;\n-    //~^ ERROR not implemented\n+    //~^ ERROR E0277\n     let _ = bar;\n }"}, {"sha": "8dd38544d3c9e86baa8a94c285b702947ec01c07", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -21,32 +21,32 @@ enum Bar<T:Trait> {\n }\n \n impl<T> Foo<T> {\n-//~^ ERROR the trait `Trait` is not implemented\n+//~^ ERROR `T : Trait` is not satisfied\n     fn uhoh() {}\n }\n \n struct Baz {\n-    a: Foo<isize>, //~ ERROR not implemented\n+    a: Foo<isize>, //~ ERROR E0277\n }\n \n enum Boo {\n-    Quux(Bar<usize>), //~ ERROR not implemented\n+    Quux(Bar<usize>), //~ ERROR E0277\n }\n \n struct Badness<U> {\n-    b: Foo<U>, //~ ERROR not implemented\n+    b: Foo<U>, //~ ERROR E0277\n }\n \n enum MoreBadness<V> {\n-    EvenMoreBadness(Bar<V>), //~ ERROR not implemented\n+    EvenMoreBadness(Bar<V>), //~ ERROR E0277\n }\n \n struct TupleLike(\n-    Foo<i32>, //~ ERROR not implemented\n+    Foo<i32>, //~ ERROR E0277\n );\n \n enum Enum {\n-    DictionaryLike { field: Bar<u8> }, //~ ERROR not implemented\n+    DictionaryLike { field: Bar<u8> }, //~ ERROR E0277\n }\n \n fn main() {"}, {"sha": "85c26368f9f2c24daa41a44755fe7bab5dadde47", "filename": "src/test/compile-fail/trait-coercion-generic-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -25,6 +25,6 @@ impl Trait<&'static str> for Struct {\n fn main() {\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let s: Box<Trait<isize>> = Box::new(Struct { person: \"Fred\" });\n-    //~^ ERROR the trait `Trait<isize>` is not implemented for the type `Struct`\n+    //~^ ERROR `Struct : Trait<isize>` is not satisfied\n     s.f(1);\n }"}, {"sha": "8827cccd0f365984d882a702115f0eaf9580af6d", "filename": "src/test/compile-fail/trait-suggest-where-clause.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-suggest-where-clause.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem;\n+\n+struct Misc<T:?Sized>(T);\n+\n+fn check<T: Iterator, U: ?Sized>() {\n+    // suggest a where-clause, if needed\n+    mem::size_of::<U>();\n+    //~^ ERROR `U : std::marker::Sized` is not satisfied\n+    //~| HELP E0277\n+    //~| HELP consider adding a `where U : std::marker::Sized` bound\n+    //~| NOTE required by `std::mem::size_of`\n+\n+    mem::size_of::<Misc<U>>();\n+    //~^ ERROR `U : std::marker::Sized` is not satisfied\n+    //~| HELP E0277\n+    //~| HELP consider adding a `where U : std::marker::Sized` bound\n+    //~| NOTE required because it appears within the type `Misc<U>`\n+    //~| NOTE required by `std::mem::size_of`\n+\n+    // ... even if T occurs as a type parameter\n+\n+    <u64 as From<T>>::from;\n+    //~^ ERROR `u64 : std::convert::From<T>` is not satisfied\n+    //~| HELP E0277\n+    //~| HELP consider adding a `where u64 : std::convert::From<T>` bound\n+    //~| NOTE required by `std::convert::From::from`\n+\n+    <u64 as From<<T as Iterator>::Item>>::from;\n+    //~^ ERROR `u64 : std::convert::From<<T as std::iter::Iterator>::Item>` is not satisfied\n+    //~| HELP E0277\n+    //~| HELP consider adding a `where u64 :\n+    //~| NOTE required by `std::convert::From::from`\n+\n+    // ... but not if there are inference variables\n+\n+    <Misc<_> as From<T>>::from;\n+    //~^ ERROR `Misc<_> : std::convert::From<T>` is not satisfied\n+    //~| HELP E0277\n+    //~| NOTE required by `std::convert::From::from`\n+\n+    // ... and also not if the error is not related to the type\n+\n+    mem::size_of::<[T]>();\n+    //~^ ERROR `[T] : std::marker::Sized` is not satisfied\n+    //~| HELP E0277\n+    //~| NOTE `[T]` does not have a constant size\n+    //~| NOTE required by `std::mem::size_of`\n+\n+    mem::size_of::<[&U]>();\n+    //~^ ERROR `[&U] : std::marker::Sized` is not satisfied\n+    //~| HELP E0277\n+    //~| NOTE `[&U]` does not have a constant size\n+    //~| NOTE required by `std::mem::size_of`\n+}\n+\n+fn main() {\n+}"}, {"sha": "4a266dd07e6b95d03b59f0d1da392ff459a4ff1d", "filename": "src/test/compile-fail/traits-negative-impls.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -31,40 +31,40 @@ fn dummy() {\n     impl !Send for TestType {}\n \n     Outer(TestType);\n-    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `dummy::TestType`\n-    //~| ERROR the trait `std::marker::Send` is not implemented for the type `dummy::TestType`\n+    //~^ ERROR `dummy::TestType : std::marker::Send` is not satisfied\n+    //~| ERROR `dummy::TestType : std::marker::Send` is not satisfied\n }\n \n fn dummy1b() {\n     struct TestType;\n     impl !Send for TestType {}\n \n     is_send(TestType);\n-    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `dummy1b::TestType`\n+    //~^ ERROR `dummy1b::TestType : std::marker::Send` is not satisfied\n }\n \n fn dummy1c() {\n     struct TestType;\n     impl !Send for TestType {}\n \n     is_send((8, TestType));\n-    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `dummy1c::TestType`\n+    //~^ ERROR `dummy1c::TestType : std::marker::Send` is not satisfied\n }\n \n fn dummy2() {\n     struct TestType;\n     impl !Send for TestType {}\n \n     is_send(Box::new(TestType));\n-    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `dummy2::TestType`\n+    //~^ ERROR `dummy2::TestType : std::marker::Send` is not satisfied\n }\n \n fn dummy3() {\n     struct TestType;\n     impl !Send for TestType {}\n \n     is_send(Box::new(Outer2(TestType)));\n-    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `dummy3::TestType`\n+    //~^ ERROR `dummy3::TestType : std::marker::Send` is not satisfied\n }\n \n fn main() {\n@@ -74,5 +74,5 @@ fn main() {\n     // This will complain about a missing Send impl because `Sync` is implement *just*\n     // for T that are `Send`. Look at #20366 and #19950\n     is_sync(Outer2(TestType));\n-    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `main::TestType`\n+    //~^ ERROR `main::TestType : std::marker::Send` is not satisfied\n }"}, {"sha": "244f75a35926252e44c3bdd8da5311d4b6f36af3", "filename": "src/test/compile-fail/traits-repeated-supertrait-ambig.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftraits-repeated-supertrait-ambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftraits-repeated-supertrait-ambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-repeated-supertrait-ambig.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -33,21 +33,21 @@ impl CompareTo<u64> for i64 {\n impl CompareToInts for i64 { }\n \n fn with_obj(c: &CompareToInts) -> bool {\n-    c.same_as(22) //~ ERROR `CompareTo<i32>` is not implemented\n+    c.same_as(22) //~ ERROR `CompareToInts : CompareTo<i32>` is not satisfied\n }\n \n fn with_trait<C:CompareToInts>(c: &C) -> bool {\n-    c.same_as(22) //~ ERROR `CompareTo<i32>` is not implemented\n+    c.same_as(22) //~ ERROR `C : CompareTo<i32>` is not satisfied\n }\n \n fn with_ufcs1<C:CompareToInts>(c: &C) -> bool {\n-    CompareToInts::same_as(c, 22) //~ ERROR `CompareTo<i32>` is not implemented\n+    CompareToInts::same_as(c, 22) //~ ERROR `CompareToInts : CompareTo<i32>` is not satisfied\n }\n \n fn with_ufcs2<C:CompareToInts>(c: &C) -> bool {\n-    CompareTo::same_as(c, 22) //~ ERROR `CompareTo<i32>` is not implemented\n+    CompareTo::same_as(c, 22) //~ ERROR `C : CompareTo<i32>` is not satisfied\n }\n \n fn main() {\n-    assert_eq!(22_i64.same_as(22), true); //~ ERROR `CompareTo<i32>` is not implemented\n+    assert_eq!(22_i64.same_as(22), true); //~ ERROR `i64 : CompareTo<i32>` is not satisfied\n }"}, {"sha": "d07282763d85b398f44893fed97f11e6cc11640f", "filename": "src/test/compile-fail/type-params-in-different-spaces-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -17,13 +17,13 @@ trait Tr<T> : Sized {\n \n trait A:    Tr<Self> {\n     fn test<U>(u: U) -> Self {\n-        Tr::op(u)   //~ ERROR not implemented\n+        Tr::op(u)   //~ ERROR E0277\n     }\n }\n \n trait B<T>: Tr<T> {\n     fn test<U>(u: U) -> Self {\n-        Tr::op(u)   //~ ERROR not implemented\n+        Tr::op(u)   //~ ERROR E0277\n     }\n }\n "}, {"sha": "f8342c333a3638cc7bc42e9ecb3f5d1db3e84b49", "filename": "src/test/compile-fail/typeck-default-trait-impl-assoc-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-assoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-assoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-assoc-type.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -16,7 +16,7 @@ trait Trait {\n     fn dummy(&self) { }\n }\n fn bar<T:Trait+Send>() {\n-    is_send::<T::AssocType>(); //~ ERROR not implemented\n+    is_send::<T::AssocType>(); //~ ERROR E0277\n }\n \n fn is_send<T:Send>() {"}, {"sha": "93800d3907a6796a3c9f758e642ef7d33d4b0668", "filename": "src/test/compile-fail/typeck-default-trait-impl-constituent-types-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types-2.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -26,5 +26,5 @@ fn main() {\n     is_mytrait::<MyS>();\n \n     is_mytrait::<(MyS2, MyS)>();\n-    //~^ ERROR the trait `MyTrait` is not implemented for the type `MyS2`\n+    //~^ ERROR `MyS2 : MyTrait` is not satisfied\n }"}, {"sha": "a49047524e665631a2b830e686c9db25f3b0b5a8", "filename": "src/test/compile-fail/typeck-default-trait-impl-constituent-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -29,5 +29,5 @@ fn main() {\n     is_mytrait::<MyS>();\n \n     is_mytrait::<MyS2>();\n-    //~^ ERROR the trait `MyTrait` is not implemented for the type `MyS2`\n+    //~^ ERROR `MyS2 : MyTrait` is not satisfied\n }"}, {"sha": "0158cbcfcda8f9383c0a5d0a36b76c8cb98e97e1", "filename": "src/test/compile-fail/typeck-default-trait-impl-negation-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-send.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -27,5 +27,5 @@ fn is_send<T: Send>() {}\n fn main() {\n     is_send::<MySendable>();\n     is_send::<MyNotSendable>();\n-    //~^ ERROR the trait `std::marker::Send` is not implemented for the type `MyNotSendable`\n+    //~^ ERROR `MyNotSendable : std::marker::Send` is not satisfied\n }"}, {"sha": "6cfc9bc5f5eceb990f076350b2ef6f6e61590525", "filename": "src/test/compile-fail/typeck-default-trait-impl-negation-sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-sync.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -43,11 +43,11 @@ fn is_sync<T: Sync>() {}\n fn main() {\n     is_sync::<MySync>();\n     is_sync::<MyNotSync>();\n-    //~^ ERROR the trait `std::marker::Sync` is not implemented for the type `MyNotSync`\n+    //~^ ERROR `MyNotSync : std::marker::Sync` is not satisfied\n \n     is_sync::<MyTypeWUnsafe>();\n-    //~^ ERROR the trait `std::marker::Sync` is not implemented for the type `std::cell::UnsafeCell<u8>`\n+    //~^ ERROR `std::cell::UnsafeCell<u8> : std::marker::Sync` is not satisfied\n \n     is_sync::<MyTypeManaged>();\n-    //~^ ERROR the trait `std::marker::Sync` is not implemented for the type `Managed`\n+    //~^ ERROR `Managed : std::marker::Sync` is not satisfied\n }"}, {"sha": "98e617ee6659eaeb108ff6aeeab50a81059de352", "filename": "src/test/compile-fail/typeck-default-trait-impl-negation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -33,10 +33,10 @@ fn is_my_unsafe_trait<T: MyUnsafeTrait>() {}\n fn main() {\n     is_my_trait::<ThisImplsTrait>();\n     is_my_trait::<ThisImplsUnsafeTrait>();\n-    //~^ ERROR the trait `MyTrait` is not implemented for the type `ThisImplsUnsafeTrait`\n+    //~^ ERROR `ThisImplsUnsafeTrait : MyTrait` is not satisfied\n \n     is_my_unsafe_trait::<ThisImplsTrait>();\n-    //~^ ERROR the trait `MyUnsafeTrait` is not implemented for the type `ThisImplsTrait`\n+    //~^ ERROR `ThisImplsTrait : MyUnsafeTrait` is not satisfied\n \n     is_my_unsafe_trait::<ThisImplsUnsafeTrait>();\n }"}, {"sha": "109b2ed24ea13dc499f6657ed3a531ce89f3e294", "filename": "src/test/compile-fail/typeck-default-trait-impl-precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -27,5 +27,5 @@ impl Signed for i32 { }\n fn main() {\n     is_defaulted::<&'static i32>();\n     is_defaulted::<&'static u32>();\n-    //~^ ERROR the trait `Signed` is not implemented for the type `u32`\n+    //~^ ERROR `u32 : Signed` is not satisfied\n }"}, {"sha": "0c548b3bd990961465eab24ea223550b31f5b943", "filename": "src/test/compile-fail/typeck-default-trait-impl-send-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-send-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-send-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-send-param.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -12,7 +12,7 @@\n // an explicit trait bound.\n \n fn foo<T>() {\n-    is_send::<T>() //~ ERROR not implemented\n+    is_send::<T>() //~ ERROR E0277\n }\n \n fn is_send<T:Send>() {"}, {"sha": "81c4a3c5a5190a225e8c64c2ea31a54d52736ec8", "filename": "src/test/compile-fail/typeck-default-trait-impl-supertrait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -24,6 +24,6 @@ fn foo<T:MyTrait>() { bar::<T>() }\n fn bar<T:NotImplemented>() { }\n \n fn main() {\n-    foo::<i32>(); //~ ERROR the trait `NotImplemented` is not implemented for the type `i32`\n-    bar::<i64>(); //~ ERROR the trait `NotImplemented` is not implemented for the type `i64`\n+    foo::<i32>(); //~ ERROR `i32 : NotImplemented` is not satisfied\n+    bar::<i64>(); //~ ERROR `i64 : NotImplemented` is not satisfied\n }"}, {"sha": "29379d549611dc94c099fc4768a9b87f3e138fd5", "filename": "src/test/compile-fail/typeck-default-trait-impl-trait-where-clause-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause-2.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -29,7 +29,7 @@ fn bar<T:NotImplemented>() { }\n \n fn test() {\n     bar::<Option<i32>>();\n-    //~^ ERROR the trait `NotImplemented` is not implemented for the type `std::option::Option<i32>`\n+    //~^ ERROR `std::option::Option<i32> : NotImplemented` is not satisfied\n }\n \n fn main() {"}, {"sha": "a3a80e17e403bab1e082a345d03484436e6b02ff", "filename": "src/test/compile-fail/typeck-default-trait-impl-trait-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -26,7 +26,7 @@ impl NotImplemented for i32 {}\n impl MyTrait for .. {}\n \n fn foo<T:MyTrait>() {\n-    //~^ ERROR the trait `NotImplemented` is not implemented for the type `std::option::Option<T>`\n+    //~^ ERROR `std::option::Option<T> : NotImplemented` is not satisfied\n     // This should probably typecheck. This is #20671.\n }\n "}, {"sha": "f34bae3be3ca0b486e9019f4287ffee3805a8529", "filename": "src/test/compile-fail/typeck-unsafe-always-share.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Verify that UnsafeCell is *always* sync regardless if `T` is sync.\n+// Verify that UnsafeCell is *always* !Sync regardless if `T` is sync.\n \n #![feature(optin_builtin_traits)]\n \n@@ -27,16 +27,16 @@ fn test<T: Sync>(s: T) {}\n fn main() {\n     let us = UnsafeCell::new(MySync{u: UnsafeCell::new(0)});\n     test(us);\n-    //~^ ERROR `std::marker::Sync` is not implemented\n+    //~^ ERROR `std::cell::UnsafeCell<MySync<_>> : std::marker::Sync` is not satisfied\n \n     let uns = UnsafeCell::new(NoSync);\n     test(uns);\n-    //~^ ERROR `std::marker::Sync` is not implemented\n+    //~^ ERROR `std::cell::UnsafeCell<NoSync> : std::marker::Sync` is not satisfied\n \n     let ms = MySync{u: uns};\n     test(ms);\n-    //~^ ERROR `std::marker::Sync` is not implemented\n+    //~^ ERROR `std::cell::UnsafeCell<NoSync> : std::marker::Sync` is not satisfied\n \n     test(NoSync);\n-    //~^ ERROR `std::marker::Sync` is not implemented\n+    //~^ ERROR `NoSync : std::marker::Sync` is not satisfied\n }"}, {"sha": "792c4a8ca3c7c5707b803888ed5253e3047ebfc8", "filename": "src/test/compile-fail/ufcs-qpath-self-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-self-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-self-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fufcs-qpath-self-mismatch.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -12,7 +12,7 @@ use std::ops::Add;\n \n fn main() {\n     <i32 as Add<u32>>::add(1, 2);\n-    //~^ ERROR the trait `std::ops::Add<u32>` is not implemented for the type `i32`\n+    //~^ ERROR `i32 : std::ops::Add<u32>` is not satisfied\n     <i32 as Add<i32>>::add(1u32, 2);\n     //~^ ERROR mismatched types\n     <i32 as Add<i32>>::add(1, 2u32);"}, {"sha": "849f7e0573cffdca02ebc120a4db5969a7c6c9bd", "filename": "src/test/compile-fail/unboxed-closure-sugar-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -29,7 +29,7 @@ fn test<'a,'b>() {\n \n     // In angle version, we supply something other than the default\n     eq::< Foo<(isize,),isize,Output=()>,      Foo(isize)                      >();\n-    //~^ ERROR not implemented\n+    //~^ ERROR E0277\n \n     // Supply default explicitly.\n     eq::< Foo<(isize,),(isize,),Output=()>,   Foo(isize)                      >();"}, {"sha": "0cf44a2ca61c27cf94ae31bf0e00fe371db2823a", "filename": "src/test/compile-fail/unboxed-closure-sugar-equiv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-equiv.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -52,7 +52,7 @@ fn test<'a,'b>() {\n     // Errors expected:\n     eq::< Foo<(),Output=()>,\n           Foo(char)                                               >();\n-    //~^^ ERROR not implemented\n+    //~^^ ERROR E0277\n }\n \n fn main() { }"}, {"sha": "b25b331880679fc2a638859dadca0f8275b5b392", "filename": "src/test/compile-fail/unboxed-closures-fnmut-as-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-fnmut-as-fn.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -36,5 +36,5 @@ fn call_it<F:Fn(isize)->isize>(f: &F, x: isize) -> isize {\n \n fn main() {\n     let x = call_it(&S, 22);\n-    //~^ ERROR not implemented\n+    //~^ ERROR E0277\n }"}, {"sha": "cba7ad82ee16343ee3a5b8fa97d6a75ceee734e0", "filename": "src/test/compile-fail/unboxed-closures-unsafe-extern-fn.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -22,19 +22,19 @@ fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n \n fn a() {\n     let x = call_it(&square, 22);\n-    //~^ ERROR not implemented\n-    //~| ERROR not implemented\n+    //~^ ERROR E0277\n+    //~| ERROR E0277\n }\n \n fn b() {\n     let y = call_it_mut(&mut square, 22);\n-    //~^ ERROR not implemented\n-    //~| ERROR not implemented\n+    //~^ ERROR E0277\n+    //~| ERROR E0277\n }\n \n fn c() {\n     let z = call_it_once(square, 22);\n-    //~^ ERROR not implemented\n+    //~^ ERROR E0277\n }\n \n fn main() { }"}, {"sha": "dd891bc473cef97a9216b307694fe45a8cd12f75", "filename": "src/test/compile-fail/unboxed-closures-wrong-abi.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -22,19 +22,19 @@ fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n \n fn a() {\n     let x = call_it(&square, 22);\n-    //~^ ERROR not implemented\n-    //~| ERROR not implemented\n+    //~^ ERROR E0277\n+    //~| ERROR E0277\n }\n \n fn b() {\n     let y = call_it_mut(&mut square, 22);\n-    //~^ ERROR not implemented\n-    //~| ERROR not implemented\n+    //~^ ERROR E0277\n+    //~| ERROR E0277\n }\n \n fn c() {\n     let z = call_it_once(square, 22);\n-    //~^ ERROR not implemented\n+    //~^ ERROR E0277\n }\n \n fn main() { }"}, {"sha": "f9edd5df6739f22c88cae7b45fd719bd23038c35", "filename": "src/test/compile-fail/unboxed-closures-wrong-arg-type-extern-fn.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -23,19 +23,19 @@ fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n \n fn a() {\n     let x = call_it(&square, 22);\n-    //~^ ERROR not implemented\n-    //~| ERROR not implemented\n+    //~^ ERROR E0277\n+    //~| ERROR E0277\n }\n \n fn b() {\n     let y = call_it_mut(&mut square, 22);\n-    //~^ ERROR not implemented\n-    //~| ERROR not implemented\n+    //~^ ERROR E0277\n+    //~| ERROR E0277\n }\n \n fn c() {\n     let z = call_it_once(square, 22);\n-    //~^ ERROR not implemented\n+    //~^ ERROR E0277\n }\n \n fn main() { }"}, {"sha": "c0a27e98faffa30d40d0deb830849e5bbedb9899", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -17,5 +17,5 @@ fn main() {\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let i = Box::new(Rc::new(100));\n     f(i);\n-    //~^ ERROR `std::marker::Send` is not implemented\n+    //~^ ERROR `std::rc::Rc<_> : std::marker::Send` is not satisfied\n }"}, {"sha": "ae767464060410297b73342747e623bdf1b7d7b3", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -35,8 +35,8 @@ fn main() {\n     let r1 = vec!(Box::new(r { i: i1 }));\n     let r2 = vec!(Box::new(r { i: i2 }));\n     f(clone(&r1), clone(&r2));\n-    //~^ ERROR the trait `std::clone::Clone` is not implemented for the type\n-    //~^^ ERROR the trait `std::clone::Clone` is not implemented for the type\n+    //~^ ERROR `r<'_> : std::clone::Clone` is not satisfied\n+    //~^^ ERROR `r<'_> : std::clone::Clone` is not satisfied\n     println!(\"{:?}\", (r2, i1.get()));\n     println!(\"{:?}\", (r1, i2.get()));\n }"}, {"sha": "49642ac1490c82f597e42649b49b2a160b068876", "filename": "src/test/compile-fail/unsized-bare-typaram.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn bar<T: Sized>() { }\n-fn foo<T: ?Sized>() { bar::<T>() } //~ ERROR the trait `std::marker::Sized` is not implemented\n+fn foo<T: ?Sized>() { bar::<T>() } //~ ERROR `T : std::marker::Sized` is not satisfied\n fn main() { }"}, {"sha": "bd5b705511d4fd5165840402557a5c026eca02cd", "filename": "src/test/compile-fail/unsized-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -15,14 +15,14 @@ fn not_sized<T: ?Sized>() { }\n enum Foo<U> { FooSome(U), FooNone }\n fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-//~^ ERROR the trait `std::marker::Sized` is not implemented\n+//~^ ERROR `T : std::marker::Sized` is not satisfied\n //\n // Not OK: `T` is not sized.\n \n enum Bar<U: ?Sized> { BarSome(U), BarNone }\n fn bar1<T: ?Sized>() { not_sized::<Bar<T>>() }\n fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n-//~^ ERROR the trait `std::marker::Sized` is not implemented\n+//~^ ERROR `T : std::marker::Sized` is not satisfied\n //\n // Not OK: `Bar<T>` is not sized, but it should be.\n "}, {"sha": "4d0774f2ce44157743fbdc6135a37874b7808eb7", "filename": "src/test/compile-fail/unsized-inherent-impl-self-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-inherent-impl-self-type.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -14,7 +14,7 @@\n \n struct S5<Y>(Y);\n \n-impl<X: ?Sized> S5<X> { //~ ERROR not implemented\n+impl<X: ?Sized> S5<X> { //~ ERROR E0277\n }\n \n fn main() { }"}, {"sha": "94f15033cb705f9caf6b881aacc34c2be1065e0a", "filename": "src/test/compile-fail/unsized-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -15,14 +15,14 @@ fn not_sized<T: ?Sized>() { }\n struct Foo<T> { data: T }\n fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n-//~^ ERROR the trait `std::marker::Sized` is not implemented\n+//~^ ERROR `T : std::marker::Sized` is not satisfied\n //\n // Not OK: `T` is not sized.\n \n struct Bar<T: ?Sized> { data: T }\n fn bar1<T: ?Sized>() { not_sized::<Bar<T>>() }\n fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n-//~^ ERROR the trait `std::marker::Sized` is not implemented\n+//~^ ERROR `T : std::marker::Sized` is not satisfied\n //\n // Not OK: `Bar<T>` is not sized, but it should be.\n "}, {"sha": "c919bdf924f6566bb8b707451d7b860e3e397e31", "filename": "src/test/compile-fail/unsized-trait-impl-self-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-self-type.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -17,7 +17,7 @@ trait T3<Z: ?Sized> {\n \n struct S5<Y>(Y);\n \n-impl<X: ?Sized> T3<X> for S5<X> { //~ ERROR not implemented\n+impl<X: ?Sized> T3<X> for S5<X> { //~ ERROR E0277\n }\n \n fn main() { }"}, {"sha": "bd420d940d51dd88d0961981ee08981983824e4c", "filename": "src/test/compile-fail/unsized-trait-impl-trait-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-trait-impl-trait-arg.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -16,7 +16,7 @@ trait T2<Z> {\n }\n struct S4<Y: ?Sized>(Box<Y>);\n impl<X: ?Sized> T2<X> for S4<X> {\n-    //~^ ERROR `std::marker::Sized` is not implemented for the type `X`\n+    //~^ ERROR `X : std::marker::Sized` is not satisfied\n }\n \n fn main() { }"}, {"sha": "061f0695df7df3f7d0210292f7a1774a8ef26ab0", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -15,7 +15,7 @@ use std::marker;\n // Unbounded.\n fn f1<X: ?Sized>(x: &X) {\n     f2::<X>(x);\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `X : std::marker::Sized` is not satisfied\n }\n fn f2<X>(x: &X) {\n }\n@@ -26,7 +26,7 @@ trait T {\n }\n fn f3<X: ?Sized + T>(x: &X) {\n     f4::<X>(x);\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `X : std::marker::Sized` is not satisfied\n }\n fn f4<X: T>(x: &X) {\n }\n@@ -40,7 +40,7 @@ fn f5<Y>(x: &Y) {}\n fn f6<X: ?Sized>(x: &X) {}\n fn f7<X: ?Sized>(x1: &E<X>, x2: &E<X>) {\n     f5(x1);\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `X : std::marker::Sized` is not satisfied\n     f6(x2); // ok\n }\n \n@@ -52,19 +52,19 @@ struct S<X: ?Sized> {\n \n fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n     f5(x1);\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `X : std::marker::Sized` is not satisfied\n     f6(x2); // ok\n }\n \n // Test some tuples.\n fn f9<X: ?Sized>(x1: Box<S<X>>, x2: Box<E<X>>) {\n     f5(&(*x1, 34));\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `X : std::marker::Sized` is not satisfied\n }\n \n fn f10<X: ?Sized>(x1: Box<S<X>>, x2: Box<E<X>>) {\n     f5(&(32, *x2));\n-    //~^ ERROR the trait `std::marker::Sized` is not implemented\n+    //~^ ERROR `X : std::marker::Sized` is not satisfied\n }\n \n pub fn main() {"}, {"sha": "1abc45d5df81d7805f94d95993310cd3a3eda5ab", "filename": "src/test/compile-fail/unsized5.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized5.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -11,27 +11,27 @@\n // Test `?Sized` types not allowed in fields (except the last one).\n \n struct S1<X: ?Sized> {\n-    f1: X, //~ ERROR `std::marker::Sized` is not implemented\n+    f1: X, //~ ERROR `X : std::marker::Sized` is not satisfied\n     f2: isize,\n }\n struct S2<X: ?Sized> {\n     f: isize,\n-    g: X, //~ ERROR `std::marker::Sized` is not implemented\n+    g: X, //~ ERROR `X : std::marker::Sized` is not satisfied\n     h: isize,\n }\n struct S3 {\n-    f: str, //~ ERROR `std::marker::Sized` is not implemented\n+    f: str, //~ ERROR `str : std::marker::Sized` is not satisfied\n     g: [usize]\n }\n struct S4 {\n-    f: [u8], //~ ERROR `std::marker::Sized` is not implemented\n+    f: [u8], //~ ERROR `[u8] : std::marker::Sized` is not satisfied\n     g: usize\n }\n enum E<X: ?Sized> {\n-    V1(X, isize), //~ERROR `std::marker::Sized` is not implemented\n+    V1(X, isize), //~ERROR `X : std::marker::Sized` is not satisfied\n }\n enum F<X: ?Sized> {\n-    V2{f1: X, f: isize}, //~ERROR `std::marker::Sized` is not implemented\n+    V2{f1: X, f: isize}, //~ERROR `X : std::marker::Sized` is not satisfied\n }\n \n pub fn main() {"}, {"sha": "7545794bd23e3ec5d52b456fa3a42ddb7a64051e", "filename": "src/test/compile-fail/unsized6.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized6.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -15,27 +15,27 @@ trait T {}\n fn f1<X: ?Sized>(x: &X) {\n     let _: X; // <-- this is OK, no bindings created, no initializer.\n     let _: (isize, (X, isize)); // same\n-    let y: X; //~ERROR the trait `std::marker::Sized` is not implemented\n-    let y: (isize, (X, isize)); //~ERROR the trait `std::marker::Sized` is not implemented\n+    let y: X; //~ERROR `X : std::marker::Sized` is not satisfied\n+    let y: (isize, (X, isize)); //~ERROR `X : std::marker::Sized` is not satisfied\n }\n fn f2<X: ?Sized + T>(x: &X) {\n-    let y: X; //~ERROR the trait `std::marker::Sized` is not implemented\n-    let y: (isize, (X, isize)); //~ERROR the trait `std::marker::Sized` is not implemented\n+    let y: X; //~ERROR `X : std::marker::Sized` is not satisfied\n+    let y: (isize, (X, isize)); //~ERROR `X : std::marker::Sized` is not satisfied\n }\n \n fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-    let y: X = *x1; //~ERROR the trait `std::marker::Sized` is not implemented\n-    let y = *x2; //~ERROR the trait `std::marker::Sized` is not implemented\n-    let (y, z) = (*x3, 4); //~ERROR the trait `std::marker::Sized` is not implemented\n+    let y: X = *x1; //~ERROR `X : std::marker::Sized` is not satisfied\n+    let y = *x2; //~ERROR `X : std::marker::Sized` is not satisfied\n+    let (y, z) = (*x3, 4); //~ERROR `X : std::marker::Sized` is not satisfied\n }\n fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-    let y: X = *x1;         //~ERROR the trait `std::marker::Sized` is not implemented\n-    let y = *x2;            //~ERROR the trait `std::marker::Sized` is not implemented\n-    let (y, z) = (*x3, 4); //~ERROR the trait `std::marker::Sized` is not implemented\n+    let y: X = *x1;         //~ERROR `X : std::marker::Sized` is not satisfied\n+    let y = *x2;            //~ERROR `X : std::marker::Sized` is not satisfied\n+    let (y, z) = (*x3, 4); //~ERROR `X : std::marker::Sized` is not satisfied\n }\n \n-fn g1<X: ?Sized>(x: X) {} //~ERROR the trait `std::marker::Sized` is not implemented\n-fn g2<X: ?Sized + T>(x: X) {} //~ERROR the trait `std::marker::Sized` is not implemented\n+fn g1<X: ?Sized>(x: X) {} //~ERROR `X : std::marker::Sized` is not satisfied\n+fn g2<X: ?Sized + T>(x: X) {} //~ERROR `X : std::marker::Sized` is not satisfied\n \n pub fn main() {\n }"}, {"sha": "5aa1f1336796b684ab59088d61ad72959ebc2b69", "filename": "src/test/compile-fail/unsized7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized7.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -20,7 +20,7 @@ trait T1<Z: T> {\n \n struct S3<Y: ?Sized>(Box<Y>);\n impl<X: ?Sized + T> T1<X> for S3<X> {\n-    //~^ ERROR `std::marker::Sized` is not implemented for the type `X`\n+    //~^ ERROR `X : std::marker::Sized` is not satisfied\n }\n \n fn main() { }"}, {"sha": "e32cb32a74d6bac62074fe84801a17fabb8b3190", "filename": "src/test/compile-fail/vtable-res-trait-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -24,7 +24,7 @@ impl TraitB for isize {\n \n fn call_it<B:TraitB>(b: B)  -> isize {\n     let y = 4;\n-    b.gimme_an_a(y) //~ ERROR the trait `TraitA` is not implemented\n+    b.gimme_an_a(y) //~ ERROR `_ : TraitA` is not satisfied\n }\n \n fn main() {"}, {"sha": "b797c9780acba5181523cd88e5b1d5d069b0ec7b", "filename": "src/test/compile-fail/wf-impl-associated-type-trait.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fwf-impl-associated-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fwf-impl-associated-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwf-impl-associated-type-trait.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -25,9 +25,8 @@ pub trait Foo {\n \n impl<T> Foo for T {\n     type Bar = MySet<T>;\n-    //~^ ERROR the trait `MyHash` is not implemented for the type `T`\n+    //~^ ERROR the predicate `T : MyHash` is not satisfied\n }\n \n #[rustc_error]\n fn main() { }\n-"}, {"sha": "42e9fa2614ccc1deac672a07faf5f5f17b9949b8", "filename": "src/test/compile-fail/where-clause-constraints-are-local-for-inherent-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-inherent-impl.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -21,7 +21,7 @@ impl<T> Foo<T> {\n \n     fn fails_copy(self) {\n         require_copy(self.x);\n-        //~^ ERROR the trait `std::marker::Copy` is not implemented for the type `T`\n+        //~^ ERROR the predicate `T : std::marker::Copy` is not satisfied\n     }\n }\n "}, {"sha": "889cf85221b73c721a9bd7a3f38c9abd085d3ac5", "filename": "src/test/compile-fail/where-clause-constraints-are-local-for-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clause-constraints-are-local-for-trait-impl.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -26,7 +26,7 @@ impl<T> Foo<T> for Bar<T> {\n \n     fn fails_copy(self) {\n         require_copy(self.x);\n-        //~^ ERROR the trait `std::marker::Copy` is not implemented for the type `T`\n+        //~^ ERROR the predicate `T : std::marker::Copy` is not satisfied\n     }\n }\n "}, {"sha": "0f682582c3ebeeddf1a7f5c0aa70a5a047a24693", "filename": "src/test/compile-fail/where-clause-method-substituion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fwhere-clause-method-substituion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fwhere-clause-method-substituion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clause-method-substituion.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -28,5 +28,5 @@ impl Bar<X> for isize {\n \n fn main() {\n     1.method::<X>();\n-    //~^ ERROR the trait `Foo<X>` is not implemented for the type `X`\n+    //~^ ERROR the predicate `X : Foo<X>` is not satisfied\n }"}, {"sha": "34ff872ac15fa3fb7e5024a48f6757b7bb55b204", "filename": "src/test/compile-fail/where-clauses-method-unsatisfied.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-method-unsatisfied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-method-unsatisfied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-method-unsatisfied.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -26,5 +26,5 @@ impl<T> Foo<T> {\n fn main() {\n     let x = Foo { value: Bar };\n     x.equals(&x);\n-    //~^ ERROR the trait `std::cmp::Eq` is not implemented for the type `Bar`\n+    //~^ ERROR `Bar : std::cmp::Eq` is not satisfied\n }"}, {"sha": "0410d7c05839b85d9314e07337cffa5b4c7b18d4", "filename": "src/test/compile-fail/where-clauses-unsatisfied.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-unsatisfied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-unsatisfied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-unsatisfied.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -15,5 +15,5 @@ struct Struct;\n \n fn main() {\n     drop(equal(&Struct, &Struct))\n-    //~^ ERROR the trait `std::cmp::Eq` is not implemented\n+    //~^ ERROR the predicate `Struct : std::cmp::Eq` is not satisfied\n }"}, {"sha": "1baaed3dd37835781ec91fe42d2edec001e5339d", "filename": "src/test/compile-fail/where-for-self-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fwhere-for-self-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a461d940cc6019bd332b1ea732d79d3216d9108/src%2Ftest%2Fcompile-fail%2Fwhere-for-self-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-for-self-2.rs?ref=8a461d940cc6019bd332b1ea732d79d3216d9108", "patch": "@@ -29,5 +29,5 @@ fn foo<T>(x: &T)\n \n fn main() {\n     foo(&X);\n-    //~^ error: `for<'a> Bar` is not implemented\n+    //~^ error: `for<'a> &'a _ : Bar` is not satisfied\n }"}]}