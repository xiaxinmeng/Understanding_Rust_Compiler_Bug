{"sha": "d162b97c4bb63302d19f4d6ae61a369ba278ff42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNjJiOTdjNGJiNjMzMDJkMTlmNGQ2YWU2MWEzNjliYTI3OGZmNDI=", "commit": {"author": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-07-14T10:50:50Z"}, "committer": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-07-14T11:57:46Z"}, "message": "Teach EmitterWriter about the dangers of quasi-quoting", "tree": {"sha": "e36b9a02296c671c4ca8f15fed701c930be73208", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e36b9a02296c671c4ca8f15fed701c930be73208"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d162b97c4bb63302d19f4d6ae61a369ba278ff42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d162b97c4bb63302d19f4d6ae61a369ba278ff42", "html_url": "https://github.com/rust-lang/rust/commit/d162b97c4bb63302d19f4d6ae61a369ba278ff42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d162b97c4bb63302d19f4d6ae61a369ba278ff42/comments", "author": null, "committer": null, "parents": [{"sha": "1fd014a9654e11ae1bc7c0793c6b01b157d825cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fd014a9654e11ae1bc7c0793c6b01b157d825cd", "html_url": "https://github.com/rust-lang/rust/commit/1fd014a9654e11ae1bc7c0793c6b01b157d825cd"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "6c47c01d0fb1e9bc1060cdcc95271e5fc48cf570", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d162b97c4bb63302d19f4d6ae61a369ba278ff42/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d162b97c4bb63302d19f4d6ae61a369ba278ff42/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=d162b97c4bb63302d19f4d6ae61a369ba278ff42", "patch": "@@ -166,6 +166,9 @@ impl EmitterWriter {\n \n         if let Some(ref cm) = self.cm {\n             for span_label in msp.span_labels() {\n+                if span_label.span == DUMMY_SP || span_label.span == COMMAND_LINE_SP {\n+                    continue;\n+                }\n                 let lo = cm.lookup_char_pos(span_label.span.lo);\n                 let mut hi = cm.lookup_char_pos(span_label.span.hi);\n                 let mut is_minimized = false;\n@@ -386,15 +389,19 @@ impl EmitterWriter {\n         let mut max = 0;\n         if let Some(ref cm) = self.cm {\n             for primary_span in msp.primary_spans() {\n-                let hi = cm.lookup_char_pos(primary_span.hi);\n-                if hi.line > max {\n-                    max = hi.line;\n+                if primary_span != &DUMMY_SP && primary_span != &COMMAND_LINE_SP {\n+                    let hi = cm.lookup_char_pos(primary_span.hi);\n+                    if hi.line > max {\n+                        max = hi.line;\n+                    }\n                 }\n             }\n             for span_label in msp.span_labels() {\n-                let hi = cm.lookup_char_pos(span_label.span.hi);\n-                if hi.line > max {\n-                    max = hi.line;\n+                if span_label.span != DUMMY_SP && span_label.span != COMMAND_LINE_SP {\n+                    let hi = cm.lookup_char_pos(span_label.span.hi);\n+                    if hi.line > max {\n+                        max = hi.line;\n+                    }\n                 }\n             }\n         }\n@@ -456,7 +463,13 @@ impl EmitterWriter {\n         let primary_lo =\n             if let (Some(ref cm), Some(ref primary_span)) = (self.cm.as_ref(),\n                                                              msp.primary_span().as_ref()) {\n-                cm.lookup_char_pos(primary_span.lo)\n+                if primary_span != &&DUMMY_SP && primary_span != &&COMMAND_LINE_SP {\n+                    cm.lookup_char_pos(primary_span.lo)\n+                }\n+                else {\n+                    emit_to_destination(&buffer.render(), level, &mut self.dst)?;\n+                    return Ok(());\n+                }\n             } else {\n                 // If we don't have span information, emit and exit\n                 emit_to_destination(&buffer.render(), level, &mut self.dst)?;"}]}