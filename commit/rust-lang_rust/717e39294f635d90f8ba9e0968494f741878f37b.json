{"sha": "717e39294f635d90f8ba9e0968494f741878f37b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxN2UzOTI5NGY2MzVkOTBmOGJhOWUwOTY4NDk0Zjc0MTg3OGYzN2I=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-07-22T20:52:53Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-07-22T21:03:19Z"}, "message": "address review comments\n\nI split the RFC1592 commit out", "tree": {"sha": "d7dbdecc5ec88d04b97c2dce57bb2c5efe2772f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7dbdecc5ec88d04b97c2dce57bb2c5efe2772f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/717e39294f635d90f8ba9e0968494f741878f37b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/717e39294f635d90f8ba9e0968494f741878f37b", "html_url": "https://github.com/rust-lang/rust/commit/717e39294f635d90f8ba9e0968494f741878f37b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/717e39294f635d90f8ba9e0968494f741878f37b/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23bb1df1e52dd17062cd135b5be70ba55d5af147", "url": "https://api.github.com/repos/rust-lang/rust/commits/23bb1df1e52dd17062cd135b5be70ba55d5af147", "html_url": "https://github.com/rust-lang/rust/commit/23bb1df1e52dd17062cd135b5be70ba55d5af147"}], "stats": {"total": 159, "additions": 74, "deletions": 85}, "files": [{"sha": "87882c5528ec163cd60fce350bc9071066f9c639", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/717e39294f635d90f8ba9e0968494f741878f37b/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717e39294f635d90f8ba9e0968494f741878f37b/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=717e39294f635d90f8ba9e0968494f741878f37b", "patch": "@@ -196,12 +196,6 @@ pub enum TypeOrigin {\n     // FIXME(eddyb) #11161 is the original Expr required?\n     ExprAssignable(Span),\n \n-    // Relating trait refs when resolving vtables\n-    RelateTraitRefs(Span),\n-\n-    // Relating self types when resolving vtables\n-    RelateSelfType(Span),\n-\n     // Relating trait type parameters to those found in impl etc\n     RelateOutputImplTypes(Span),\n \n@@ -228,16 +222,17 @@ pub enum TypeOrigin {\n \n     // intrinsic has wrong type\n     IntrinsicType(Span),\n+\n+    // method receiver\n+    MethodReceiver(Span),\n }\n \n impl TypeOrigin {\n     fn as_failure_str(&self) -> &'static str {\n         match self {\n             &TypeOrigin::Misc(_) |\n-            &TypeOrigin::RelateSelfType(_) |\n             &TypeOrigin::RelateOutputImplTypes(_) |\n             &TypeOrigin::ExprAssignable(_) => \"mismatched types\",\n-            &TypeOrigin::RelateTraitRefs(_) => \"mismatched traits\",\n             &TypeOrigin::MethodCompatCheck(_) => \"method not compatible with trait\",\n             &TypeOrigin::MatchExpressionArm(_, _, source) => match source {\n                 hir::MatchSource::IfLetDesugar{..} => \"`if let` arms have incompatible types\",\n@@ -250,6 +245,7 @@ impl TypeOrigin {\n             &TypeOrigin::MainFunctionType(_) => \"main function has wrong type\",\n             &TypeOrigin::StartFunctionType(_) => \"start function has wrong type\",\n             &TypeOrigin::IntrinsicType(_) => \"intrinsic has wrong type\",\n+            &TypeOrigin::MethodReceiver(_) => \"mismatched method receiver\",\n         }\n     }\n \n@@ -258,8 +254,6 @@ impl TypeOrigin {\n             &TypeOrigin::Misc(_) => \"types are compatible\",\n             &TypeOrigin::MethodCompatCheck(_) => \"method type is compatible with trait\",\n             &TypeOrigin::ExprAssignable(_) => \"expression is assignable\",\n-            &TypeOrigin::RelateTraitRefs(_) => \"traits are compatible\",\n-            &TypeOrigin::RelateSelfType(_) => \"self type matches impl self type\",\n             &TypeOrigin::RelateOutputImplTypes(_) => {\n                 \"trait type parameters matches those specified on the impl\"\n             }\n@@ -271,6 +265,7 @@ impl TypeOrigin {\n             &TypeOrigin::MainFunctionType(_) => \"`main` function has the correct type\",\n             &TypeOrigin::StartFunctionType(_) => \"`start` function has the correct type\",\n             &TypeOrigin::IntrinsicType(_) => \"intrinsic has the correct type\",\n+            &TypeOrigin::MethodReceiver(_) => \"method receiver has the correct type\",\n         }\n     }\n }\n@@ -1806,8 +1801,6 @@ impl TypeOrigin {\n             TypeOrigin::MethodCompatCheck(span) => span,\n             TypeOrigin::ExprAssignable(span) => span,\n             TypeOrigin::Misc(span) => span,\n-            TypeOrigin::RelateTraitRefs(span) => span,\n-            TypeOrigin::RelateSelfType(span) => span,\n             TypeOrigin::RelateOutputImplTypes(span) => span,\n             TypeOrigin::MatchExpressionArm(match_span, _, _) => match_span,\n             TypeOrigin::IfExpression(span) => span,\n@@ -1817,6 +1810,7 @@ impl TypeOrigin {\n             TypeOrigin::MainFunctionType(span) => span,\n             TypeOrigin::StartFunctionType(span) => span,\n             TypeOrigin::IntrinsicType(span) => span,\n+            TypeOrigin::MethodReceiver(span) => span,\n         }\n     }\n }"}, {"sha": "2eb08cab1aa9f647ccce04ea3e218510213831b4", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/717e39294f635d90f8ba9e0968494f741878f37b/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717e39294f635d90f8ba9e0968494f741878f37b/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=717e39294f635d90f8ba9e0968494f741878f37b", "patch": "@@ -384,15 +384,6 @@ pub fn note_const_eval_err<'a, 'tcx>(\n                 diag.span_label(err.span, &message);\n             }\n         }\n-        ConstEvalErrDescription::ExpectedFound { error, expected, found } => {\n-            if check_old_school() {\n-                diag.note(&error);\n-            } else {\n-                diag.span_label(err.span, &error);\n-            }\n-            diag.note(&format!(\"expected `{}`\", expected));\n-            diag.note(&format!(\"found `{}`\", found));\n-        }\n     }\n \n     if !primary_span.contains(err.span) {\n@@ -477,26 +468,13 @@ impl From<ConstMathErr> for ErrKind {\n #[derive(Clone, Debug)]\n pub enum ConstEvalErrDescription<'a> {\n     Simple(Cow<'a, str>),\n-    ExpectedFound {\n-        error: Cow<'a, str>,\n-        expected: Cow<'a, str>,\n-        found: Cow<'a, str>\n-    }\n }\n \n impl<'a> ConstEvalErrDescription<'a> {\n     /// Return a one-line description of the error, for lints and such\n     pub fn into_oneline(self) -> Cow<'a, str> {\n         match self {\n             ConstEvalErrDescription::Simple(simple) => simple,\n-            ConstEvalErrDescription::ExpectedFound {\n-                error,\n-                expected,\n-                found\n-            } => {\n-                format!(\"{}: expected `{}`, found `{}`\", error, expected, found)\n-                    .into_cow()\n-            }\n         }\n     }\n }\n@@ -554,11 +532,7 @@ impl ConstEvalErr {\n                  the constant evaluator\"),\n \n             TypeMismatch(ref expected, ref got) => {\n-                ExpectedFound {\n-                    error: \"mismatched types\".into_cow(),\n-                    expected: <&str>::into_cow(expected),\n-                    found: got.description().into_cow()\n-                }\n+                simple!(\"expected {}, found {}\", expected, got.description())\n             },\n             BadType(ref i) => simple!(\"value of wrong type: {:?}\", i),\n             ErroneousReferencedConstant(_) => simple!(\"could not evaluate referenced constant\"),"}, {"sha": "1f3a83ebc1d567da7a2ae7174213e62feaafd451", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/717e39294f635d90f8ba9e0968494f741878f37b/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717e39294f635d90f8ba9e0968494f741878f37b/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=717e39294f635d90f8ba9e0968494f741878f37b", "patch": "@@ -33,7 +33,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn demand_eqtype(&self, sp: Span, expected: Ty<'tcx>, actual: Ty<'tcx>) {\n-        let origin = TypeOrigin::Misc(sp);\n+        self.demand_eqtype_with_origin(TypeOrigin::Misc(sp), expected, actual);\n+    }\n+\n+    pub fn demand_eqtype_with_origin(&self,\n+                                     origin: TypeOrigin,\n+                                     expected: Ty<'tcx>,\n+                                     actual: Ty<'tcx>)\n+    {\n         match self.eq_types(false, origin, actual, expected) {\n             Ok(InferOk { obligations, .. }) => {\n                 // FIXME(#32730) propagate obligations"}, {"sha": "907cb734c2ff9f00128641761e20eb9543b323fe", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/717e39294f635d90f8ba9e0968494f741878f37b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717e39294f635d90f8ba9e0968494f741878f37b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=717e39294f635d90f8ba9e0968494f741878f37b", "patch": "@@ -13,6 +13,7 @@ use constrained_type_params::{identify_constrained_type_params, Parameter};\n use CrateCtxt;\n use hir::def_id::DefId;\n use middle::region::{CodeExtent};\n+use rustc::infer::TypeOrigin;\n use rustc::ty::subst::{self, TypeSpace, FnSpace, ParamSpace, SelfSpace};\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -157,7 +158,10 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n         }\n     }\n \n-    fn check_trait_or_impl_item(&mut self, item_id: ast::NodeId, span: Span) {\n+    fn check_trait_or_impl_item(&mut self,\n+                                item_id: ast::NodeId,\n+                                span: Span,\n+                                sig_if_method: Option<&hir::MethodSig>) {\n         let code = self.code.clone();\n         self.for_id(item_id, span).with_fcx(|fcx, this| {\n             let free_substs = &fcx.parameter_environment.free_substs;\n@@ -182,7 +186,8 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n                     let predicates = fcx.instantiate_bounds(span, free_substs, &method.predicates);\n                     this.check_fn_or_method(fcx, span, &method_ty, &predicates,\n                                             free_id_outlive, &mut implied_bounds);\n-                    this.check_method_receiver(fcx, span, &method,\n+                    let sig_if_method = sig_if_method.expect(\"bad signature for method\");\n+                    this.check_method_receiver(fcx, sig_if_method, &method,\n                                                free_id_outlive, self_ty);\n                 }\n                 ty::TypeTraitItem(assoc_type) => {\n@@ -405,20 +410,15 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n \n     fn check_method_receiver<'fcx, 'tcx>(&mut self,\n                                          fcx: &FnCtxt<'fcx, 'gcx, 'tcx>,\n-                                         span: Span,\n+                                         method_sig: &hir::MethodSig,\n                                          method: &ty::Method<'tcx>,\n                                          free_id_outlive: CodeExtent,\n                                          self_ty: ty::Ty<'tcx>)\n     {\n         // check that the type of the method's receiver matches the\n         // method's first parameter.\n-\n-        let free_substs = &fcx.parameter_environment.free_substs;\n-        let fty = fcx.instantiate_type_scheme(span, free_substs, &method.fty);\n-        let sig = fcx.tcx.liberate_late_bound_regions(free_id_outlive, &fty.sig);\n-\n-        debug!(\"check_method_receiver({:?},cat={:?},self_ty={:?},sig={:?})\",\n-               method.name, method.explicit_self, self_ty, sig);\n+        debug!(\"check_method_receiver({:?},cat={:?},self_ty={:?})\",\n+               method.name, method.explicit_self, self_ty);\n \n         let rcvr_ty = match method.explicit_self {\n             ty::ExplicitSelfCategory::Static => return,\n@@ -431,13 +431,23 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n             }\n             ty::ExplicitSelfCategory::ByBox => fcx.tcx.mk_box(self_ty)\n         };\n+\n+        let span = method_sig.decl.inputs[0].pat.span;\n+\n+        let free_substs = &fcx.parameter_environment.free_substs;\n+        let fty = fcx.instantiate_type_scheme(span, free_substs, &method.fty);\n+        let sig = fcx.tcx.liberate_late_bound_regions(free_id_outlive, &fty.sig);\n+\n+        debug!(\"check_method_receiver: sig={:?}\", sig);\n+\n         let rcvr_ty = fcx.instantiate_type_scheme(span, free_substs, &rcvr_ty);\n         let rcvr_ty = fcx.tcx.liberate_late_bound_regions(free_id_outlive,\n                                                           &ty::Binder(rcvr_ty));\n \n         debug!(\"check_method_receiver: receiver ty = {:?}\", rcvr_ty);\n \n-        fcx.demand_eqtype(span, rcvr_ty, sig.inputs[0]);\n+        let origin = TypeOrigin::MethodReceiver(span);\n+        fcx.demand_eqtype_with_origin(origin, rcvr_ty, sig.inputs[0]);\n     }\n \n     fn check_variances_for_type_defn(&self,\n@@ -552,13 +562,21 @@ impl<'ccx, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n \n     fn visit_trait_item(&mut self, trait_item: &'v hir::TraitItem) {\n         debug!(\"visit_trait_item: {:?}\", trait_item);\n-        self.check_trait_or_impl_item(trait_item.id, trait_item.span);\n+        let method_sig = match trait_item.node {\n+            hir::TraitItem_::MethodTraitItem(ref sig, _) => Some(sig),\n+            _ => None\n+        };\n+        self.check_trait_or_impl_item(trait_item.id, trait_item.span, method_sig);\n         intravisit::walk_trait_item(self, trait_item)\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'v hir::ImplItem) {\n         debug!(\"visit_impl_item: {:?}\", impl_item);\n-        self.check_trait_or_impl_item(impl_item.id, impl_item.span);\n+        let method_sig = match impl_item.node {\n+            hir::ImplItemKind::Method(ref sig, _) => Some(sig),\n+            _ => None\n+        };\n+        self.check_trait_or_impl_item(impl_item.id, impl_item.span, method_sig);\n         intravisit::walk_impl_item(self, impl_item)\n     }\n }"}, {"sha": "9e7a5ecae105a2b123a51519f20a2944b26bfe6a", "filename": "src/test/compile-fail/const-eval-overflow-4b.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/717e39294f635d90f8ba9e0968494f741878f37b/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717e39294f635d90f8ba9e0968494f741878f37b/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs?ref=717e39294f635d90f8ba9e0968494f741878f37b", "patch": "@@ -21,9 +21,7 @@ use std::{u8, u16, u32, u64, usize};\n const A_I8_T\n     : [u32; (i8::MAX as i8 + 1u8) as usize]\n     //~^ ERROR constant evaluation error [E0080]\n-    //~| mismatched types\n-    //~| expected `i8`\n-    //~| found `u8`\n+    //~| expected i8, found u8\n     = [0; (i8::MAX as usize) + 1];\n \n "}, {"sha": "c73b7e831b3217051eb1eef9b64372af92abda81", "filename": "src/test/compile-fail/discrim-ill-typed.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/717e39294f635d90f8ba9e0968494f741878f37b/src%2Ftest%2Fcompile-fail%2Fdiscrim-ill-typed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717e39294f635d90f8ba9e0968494f741878f37b/src%2Ftest%2Fcompile-fail%2Fdiscrim-ill-typed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdiscrim-ill-typed.rs?ref=717e39294f635d90f8ba9e0968494f741878f37b", "patch": "@@ -26,7 +26,7 @@ fn f_i8() {\n         Ok2,\n         OhNo = 0_u8,\n         //~^ ERROR E0080\n-        //~| mismatched types\n+        //~| expected i8, found u8\n     }\n \n     let x = A::Ok;\n@@ -39,7 +39,7 @@ fn f_u8() {\n         Ok2,\n         OhNo = 0_i8,\n         //~^ ERROR E0080\n-        //~| mismatched types\n+        //~| expected u8, found i8\n     }\n \n     let x = A::Ok;\n@@ -52,7 +52,7 @@ fn f_i16() {\n         Ok2,\n         OhNo = 0_u16,\n         //~^ ERROR E0080\n-        //~| mismatched types\n+        //~| expected i16, found u16\n     }\n \n     let x = A::Ok;\n@@ -65,7 +65,7 @@ fn f_u16() {\n         Ok2,\n         OhNo = 0_i16,\n         //~^ ERROR E0080\n-        //~| mismatched types\n+        //~| expected u16, found i16\n     }\n \n     let x = A::Ok;\n@@ -78,7 +78,7 @@ fn f_i32() {\n         Ok2,\n         OhNo = 0_u32,\n         //~^ ERROR E0080\n-        //~| mismatched types\n+        //~| expected i32, found u32\n     }\n \n     let x = A::Ok;\n@@ -91,7 +91,7 @@ fn f_u32() {\n         Ok2,\n         OhNo = 0_i32,\n         //~^ ERROR E0080\n-        //~| mismatched types\n+        //~| expected u32, found i32\n     }\n \n     let x = A::Ok;\n@@ -104,7 +104,7 @@ fn f_i64() {\n         Ok2,\n         OhNo = 0_u64,\n         //~^ ERROR E0080\n-        //~| mismatched types\n+        //~| expected i64, found u64\n     }\n \n     let x = A::Ok;\n@@ -117,7 +117,7 @@ fn f_u64() {\n         Ok2,\n         OhNo = 0_i64,\n         //~^ ERROR E0080\n-        //~| mismatched types\n+        //~| expected u64, found i64\n     }\n \n     let x = A::Ok;"}, {"sha": "f8aa1ea95f0f66d51039d8bb09d1c11502bf1ec2", "filename": "src/test/compile-fail/explicit-self-lifetime-mismatch.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/717e39294f635d90f8ba9e0968494f741878f37b/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717e39294f635d90f8ba9e0968494f741878f37b/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs?ref=717e39294f635d90f8ba9e0968494f741878f37b", "patch": "@@ -14,15 +14,17 @@ struct Foo<'a,'b> {\n }\n \n impl<'a,'b> Foo<'a,'b> {\n-    fn bar(self: Foo<'b,'a>) {}\n-    //~^ ERROR mismatched types\n+    fn bar(\n+        self\n+    //~^ ERROR mismatched method receiver\n     //~| expected type `Foo<'a, 'b>`\n     //~| found type `Foo<'b, 'a>`\n     //~| lifetime mismatch\n-    //~| ERROR mismatched types\n+    //~| ERROR mismatched method receiver\n     //~| expected type `Foo<'a, 'b>`\n     //~| found type `Foo<'b, 'a>`\n     //~| lifetime mismatch\n+            : Foo<'b,'a>) {}\n }\n \n fn main() {}"}, {"sha": "664d62e87ae61cf2f61a5f45d308275ce6f60856", "filename": "src/test/compile-fail/issue-17740.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/717e39294f635d90f8ba9e0968494f741878f37b/src%2Ftest%2Fcompile-fail%2Fissue-17740.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717e39294f635d90f8ba9e0968494f741878f37b/src%2Ftest%2Fcompile-fail%2Fissue-17740.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17740.rs?ref=717e39294f635d90f8ba9e0968494f741878f37b", "patch": "@@ -14,11 +14,11 @@ struct Foo<'a> {\n \n impl <'a> Foo<'a>{\n     fn bar(self: &mut Foo) {\n-    //~^ mismatched types\n+    //~^ mismatched method receiver\n     //~| expected type `&mut Foo<'a>`\n     //~| found type `&mut Foo<'_>`\n     //~| lifetime mismatch\n-    //~| mismatched types\n+    //~| mismatched method receiver\n     //~| expected type `&mut Foo<'a>`\n     //~| found type `&mut Foo<'_>`\n     //~| lifetime mismatch"}, {"sha": "ef91188c5d166bd1d8de2e11c18a3a82517627f2", "filename": "src/test/compile-fail/issue-26194.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/717e39294f635d90f8ba9e0968494f741878f37b/src%2Ftest%2Fcompile-fail%2Fissue-26194.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717e39294f635d90f8ba9e0968494f741878f37b/src%2Ftest%2Fcompile-fail%2Fissue-26194.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26194.rs?ref=717e39294f635d90f8ba9e0968494f741878f37b", "patch": "@@ -12,7 +12,7 @@ struct S(String);\n \n impl S {\n     fn f(self: *mut S) -> String { self.0 }\n-    //~^ ERROR mismatched types\n+    //~^ ERROR mismatched method receiver\n }\n \n fn main() { S(\"\".to_owned()).f(); }"}, {"sha": "91a07dd9ba6dd68ede4d5bf9129a180f1d579d89", "filename": "src/test/compile-fail/issue-8761.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/717e39294f635d90f8ba9e0968494f741878f37b/src%2Ftest%2Fcompile-fail%2Fissue-8761.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717e39294f635d90f8ba9e0968494f741878f37b/src%2Ftest%2Fcompile-fail%2Fissue-8761.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8761.rs?ref=717e39294f635d90f8ba9e0968494f741878f37b", "patch": "@@ -11,12 +11,10 @@\n enum Foo {\n     A = 1i64,\n     //~^ ERROR constant evaluation error\n-    //~| expected `isize`\n-    //~| found `i64`\n+    //~| expected isize, found i64\n     B = 2u8\n     //~^ ERROR constant evaluation error\n-    //~| expected `isize`\n-    //~| found `u8`\n+    //~| expected isize, found u8\n }\n \n fn main() {}"}, {"sha": "3a7e9cc4191ec2af4de80bacf0579705aefe9bd8", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/717e39294f635d90f8ba9e0968494f741878f37b/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717e39294f635d90f8ba9e0968494f741878f37b/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=717e39294f635d90f8ba9e0968494f741878f37b", "patch": "@@ -39,14 +39,12 @@ fn main() {\n     //~| ERROR expected usize for repeat count, found string literal [E0306]\n     let f = [0; -4_isize];\n     //~^ ERROR constant evaluation error\n-    //~| expected `usize`\n-    //~| found `isize`\n+    //~| expected usize, found isize\n     //~| ERROR mismatched types\n     //~| expected usize, found isize\n     let f = [0_usize; -1_isize];\n     //~^ ERROR constant evaluation error\n-    //~| expected `usize`\n-    //~| found `isize`\n+    //~| expected usize, found isize\n     //~| ERROR mismatched types\n     //~| expected usize, found isize\n     struct G {"}, {"sha": "a98b7cd43090f3768723cdc4fdb175eb4a91d410", "filename": "src/test/compile-fail/ufcs-explicit-self-bad.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/717e39294f635d90f8ba9e0968494f741878f37b/src%2Ftest%2Fcompile-fail%2Fufcs-explicit-self-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/717e39294f635d90f8ba9e0968494f741878f37b/src%2Ftest%2Fcompile-fail%2Fufcs-explicit-self-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fufcs-explicit-self-bad.rs?ref=717e39294f635d90f8ba9e0968494f741878f37b", "patch": "@@ -15,7 +15,7 @@ struct Foo {\n }\n \n impl Foo {\n-    fn foo(self: isize, x: isize) -> isize {  //~ ERROR mismatched types\n+    fn foo(self: isize, x: isize) -> isize {  //~ ERROR mismatched method receiver\n         self.f + x\n     }\n }\n@@ -25,10 +25,10 @@ struct Bar<T> {\n }\n \n impl<T> Bar<T> {\n-    fn foo(self: Bar<isize>, x: isize) -> isize { //~ ERROR mismatched types\n+    fn foo(self: Bar<isize>, x: isize) -> isize { //~ ERROR mismatched method receiver\n         x\n     }\n-    fn bar(self: &Bar<usize>, x: isize) -> isize {   //~ ERROR mismatched types\n+    fn bar(self: &Bar<usize>, x: isize) -> isize {   //~ ERROR mismatched method receiver\n         x\n     }\n }\n@@ -41,14 +41,14 @@ trait SomeTrait {\n \n impl<'a, T> SomeTrait for &'a Bar<T> {\n     fn dummy1(self: &&'a Bar<T>) { }\n-    fn dummy2(self: &Bar<T>) {} //~ ERROR mismatched types\n-    //~^ ERROR mismatched types\n+    fn dummy2(self: &Bar<T>) {} //~ ERROR mismatched method receiver\n+    //~^ ERROR mismatched method receiver\n     fn dummy3(self: &&Bar<T>) {}\n-    //~^ ERROR mismatched types\n+    //~^ ERROR mismatched method receiver\n     //~| expected type `&&'a Bar<T>`\n     //~| found type `&&Bar<T>`\n     //~| lifetime mismatch\n-    //~| ERROR mismatched types\n+    //~| ERROR mismatched method receiver\n     //~| expected type `&&'a Bar<T>`\n     //~| found type `&&Bar<T>`\n     //~| lifetime mismatch"}]}