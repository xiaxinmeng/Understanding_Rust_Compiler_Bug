{"sha": "40fffc9e3fe1664240683a2e86f2d14827417ef5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZmZmYzllM2ZlMTY2NDI0MDY4M2EyZTg2ZjJkMTQ4Mjc0MTdlZjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T16:58:44Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-22T01:14:26Z"}, "message": "Some nits and cleanup", "tree": {"sha": "301cef96642441482bcaa07025a53fb1642c78b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/301cef96642441482bcaa07025a53fb1642c78b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40fffc9e3fe1664240683a2e86f2d14827417ef5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40fffc9e3fe1664240683a2e86f2d14827417ef5", "html_url": "https://github.com/rust-lang/rust/commit/40fffc9e3fe1664240683a2e86f2d14827417ef5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40fffc9e3fe1664240683a2e86f2d14827417ef5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d215411911c2f6e5a68a12686c930352f68d2031", "url": "https://api.github.com/repos/rust-lang/rust/commits/d215411911c2f6e5a68a12686c930352f68d2031", "html_url": "https://github.com/rust-lang/rust/commit/d215411911c2f6e5a68a12686c930352f68d2031"}], "stats": {"total": 96, "additions": 55, "deletions": 41}, "files": [{"sha": "c5ef55154de00ce09882be3f549ce65ff2fadc3c", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 52, "deletions": 41, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/40fffc9e3fe1664240683a2e86f2d14827417ef5/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40fffc9e3fe1664240683a2e86f2d14827417ef5/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=40fffc9e3fe1664240683a2e86f2d14827417ef5", "patch": "@@ -152,6 +152,8 @@ enum SelectionCandidate<'tcx> {\n \n     ObjectCandidate,\n \n+    BuiltinObjectCandidate,\n+\n     ErrorCandidate,\n }\n \n@@ -818,21 +820,24 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 debug!(\"obligation self ty is {}\",\n                        obligation.predicate.0.self_ty().repr(self.tcx()));\n \n+                // User-defined copy impls are permitted, but only for\n+                // structs and enums.\n                 try!(self.assemble_candidates_from_impls(obligation, &mut candidates));\n \n+                // For other types, we'll use the builtin rules.\n                 try!(self.assemble_builtin_bound_candidates(ty::BoundCopy,\n                                                             stack,\n                                                             &mut candidates));\n             }\n             Some(bound @ ty::BoundSized) => {\n-                // Sized and Copy are always automatically computed.\n+                // Sized is never implementable by end-users, it is\n+                // always automatically computed.\n                 try!(self.assemble_builtin_bound_candidates(bound, stack, &mut candidates));\n             }\n \n-            _ => {\n-                // For the time being, we ignore user-defined impls for builtin-bounds, other than\n-                // `Copy`.\n-                // (And unboxed candidates only apply to the Fn/FnMut/etc traits.)\n+            Some(ty::BoundSend) |\n+            Some(ty::BoundSync) |\n+            None => {\n                 try!(self.assemble_closure_candidates(obligation, &mut candidates));\n                 try!(self.assemble_fn_pointer_candidates(obligation, &mut candidates));\n                 try!(self.assemble_candidates_from_impls(obligation, &mut candidates));\n@@ -1178,7 +1183,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         if data.bounds.builtin_bounds.contains(&bound) {\n                             debug!(\"assemble_candidates_from_object_ty: matched builtin bound, \\\n                             pushing candidate\");\n-                            candidates.vec.push(BuiltinCandidate(bound));\n+                            candidates.vec.push(BuiltinObjectCandidate);\n                             return;\n                         }\n                     }\n@@ -1272,6 +1277,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             (&ImplCandidate(..), &ParamCandidate(..)) |\n             (&ClosureCandidate(..), &ParamCandidate(..)) |\n             (&FnPointerCandidate(..), &ParamCandidate(..)) |\n+            (&BuiltinObjectCandidate(..), &ParamCandidate(_)) |\n             (&BuiltinCandidate(..), &ParamCandidate(..)) => {\n                 // We basically prefer always prefer to use a\n                 // where-clause over another option. Where clauses\n@@ -1359,7 +1365,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ok(If(Vec::new()))\n             }\n \n-            ty::ty_uniq(referent_ty) => {  // Box<T>\n+            ty::ty_uniq(_) => {  // Box<T>\n                 match bound {\n                     ty::BoundCopy => {\n                         Err(Unimplemented)\n@@ -1369,26 +1375,20 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         Ok(If(Vec::new()))\n                     }\n \n-                    ty::BoundSync |\n-                    ty::BoundSend => {\n-                        Ok(If(vec![referent_ty]))\n+                    ty::BoundSync | ty::BoundSend => {\n+                        self.tcx().sess.bug(\"Send/Sync shouldn't occur in builtin_bounds()\");\n                     }\n                 }\n             }\n \n             ty::ty_ptr(..) => {     // *const T, *mut T\n                 match bound {\n-                    ty::BoundCopy |\n-                    ty::BoundSized => {\n+                    ty::BoundCopy | ty::BoundSized => {\n                         Ok(If(Vec::new()))\n                     }\n \n-                    ty::BoundSync |\n-                    ty::BoundSend => {\n-                        self.tcx().sess.bug(\n-                            &format!(\n-                                \"raw pointers should have a negative \\\n-                                 impl for `Send` and `Sync`\")[]);\n+                    ty::BoundSync | ty::BoundSend => {\n+                        self.tcx().sess.bug(\"Send/Sync shouldn't occur in builtin_bounds()\");\n                     }\n                 }\n             }\n@@ -1398,7 +1398,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     ty::BoundSized => {\n                         Err(Unimplemented)\n                     }\n-                    ty::BoundCopy | ty::BoundSync | ty::BoundSend => {\n+                    ty::BoundCopy => {\n                         if data.bounds.builtin_bounds.contains(&bound) {\n                             Ok(If(Vec::new()))\n                         } else {\n@@ -1417,6 +1417,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             Err(Unimplemented)\n                         }\n                     }\n+                    ty::BoundSync | ty::BoundSend => {\n+                        self.tcx().sess.bug(\"Send/Sync shouldn't occur in builtin_bounds()\");\n+                    }\n                 }\n             }\n \n@@ -1441,9 +1444,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         Ok(If(Vec::new()))\n                     }\n \n-                    ty::BoundSync |\n-                    ty::BoundSend => {\n-                        Ok(If(vec![referent_ty]))\n+                    ty::BoundSync | ty::BoundSend => {\n+                        self.tcx().sess.bug(\"Send/Sync shouldn't occur in builtin_bounds()\");\n                     }\n                 }\n             }\n@@ -1472,23 +1474,20 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         }\n                     }\n \n-                    ty::BoundSync |\n-                    ty::BoundSend => {\n-                        Ok(If(vec![element_ty]))\n+                    ty::BoundSync | ty::BoundSend => {\n+                        self.tcx().sess.bug(\"Send/Sync shouldn't occur in builtin_bounds()\");\n                     }\n                 }\n             }\n \n             ty::ty_str => {\n                 // Equivalent to [u8]\n                 match bound {\n-                    ty::BoundSync |\n-                    ty::BoundSend => {\n-                        Ok(If(Vec::new()))\n+                    ty::BoundSync | ty::BoundSend => {\n+                        self.tcx().sess.bug(\"Send/Sync shouldn't occur in builtin_bounds()\");\n                     }\n \n-                    ty::BoundCopy |\n-                    ty::BoundSized => {\n+                    ty::BoundCopy | ty::BoundSized => {\n                         Err(Unimplemented)\n                     }\n                 }\n@@ -1576,15 +1575,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // \"opened\" unsized/existential type (one that has\n                 // been dereferenced)\n                 match bound {\n-                    ty::BoundCopy |\n-                    ty::BoundSync |\n-                    ty::BoundSend => {\n+                    ty::BoundCopy => {\n                         Ok(If(vec!(ty)))\n                     }\n \n                     ty::BoundSized => {\n                         Err(Unimplemented)\n                     }\n+\n+                    ty::BoundSync |\n+                    ty::BoundSend => {\n+                        self.tcx().sess.bug(\"Send/Sync shouldn't occur in builtin_bounds()\");\n+                    }\n                 }\n             }\n             ty::ty_err => {\n@@ -1606,16 +1608,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         {\n             // First check for markers and other nonsense.\n             match bound {\n-                ty::BoundCopy => {\n-                    return Ok(ParameterBuiltin)\n-                }\n+                // Fallback to whatever user-defined impls exist in this case.\n+                ty::BoundCopy => Ok(ParameterBuiltin),\n \n-                ty::BoundSend |\n-                ty::BoundSync |\n-                ty::BoundSized => { }\n-            }\n+                // Sized if all the component types are sized.\n+                ty::BoundSized => Ok(If(types)),\n \n-            Ok(If(types))\n+                // Shouldn't be coming through here.\n+                ty::BoundSend | ty::BoundSync => unreachable!(),\n+            }\n         }\n     }\n \n@@ -1739,6 +1740,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ok(VtableClosure(closure_def_id, substs))\n             }\n \n+            BuiltinObjectCandidate => {\n+                // This indicates something like `(Trait+Send) :\n+                // Send`. In this case, we know that this holds\n+                // because that's what the object type is telling us,\n+                // and there's really no additional obligations to\n+                // prove and no types in particular to unify etc.\n+                Ok(VtableParam(Vec::new()))\n+            }\n+\n             ObjectCandidate => {\n                 let data = self.confirm_object_candidate(obligation);\n                 Ok(VtableObject(data))\n@@ -2449,6 +2459,7 @@ impl<'tcx> Repr<'tcx> for SelectionCandidate<'tcx> {\n             PhantomFnCandidate => format!(\"PhantomFnCandidate\"),\n             ErrorCandidate => format!(\"ErrorCandidate\"),\n             BuiltinCandidate(b) => format!(\"BuiltinCandidate({:?})\", b),\n+            BuiltinObjectCandidate => format!(\"BuiltinObjectCandidate\"),\n             ParamCandidate(ref a) => format!(\"ParamCandidate({})\", a.repr(tcx)),\n             ImplCandidate(a) => format!(\"ImplCandidate({})\", a.repr(tcx)),\n             DefaultImplCandidate(t) => format!(\"DefaultImplCandidate({:?})\", t),"}, {"sha": "26624c051c91115790ad2537eeba387839274c98", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40fffc9e3fe1664240683a2e86f2d14827417ef5/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40fffc9e3fe1664240683a2e86f2d14827417ef5/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=40fffc9e3fe1664240683a2e86f2d14827417ef5", "patch": "@@ -25,6 +25,9 @@ use util::ppaux::Repr;\n pub fn check(tcx: &ty::ctxt) {\n     let mut overlap = OverlapChecker { tcx: tcx };\n     overlap.check_for_overlapping_impls();\n+\n+    // this secondary walk specifically checks for impls of defaulted\n+    // traits, for which additional overlap rules exist\n     visit::walk_crate(&mut overlap, tcx.map.krate());\n }\n "}]}