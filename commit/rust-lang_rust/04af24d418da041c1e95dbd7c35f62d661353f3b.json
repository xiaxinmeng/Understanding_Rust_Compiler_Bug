{"sha": "04af24d418da041c1e95dbd7c35f62d661353f3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YWYyNGQ0MThkYTA0MWMxZTk1ZGJkN2MzNWY2MmQ2NjEzNTNmM2I=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-13T15:31:35Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-13T15:31:35Z"}, "message": "Don't use codegen_call_inner in codegen_drop", "tree": {"sha": "941ec66d6d4d57b5d701895fb7175929a312c739", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/941ec66d6d4d57b5d701895fb7175929a312c739"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04af24d418da041c1e95dbd7c35f62d661353f3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04af24d418da041c1e95dbd7c35f62d661353f3b", "html_url": "https://github.com/rust-lang/rust/commit/04af24d418da041c1e95dbd7c35f62d661353f3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04af24d418da041c1e95dbd7c35f62d661353f3b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40cdcf0e5eb9cd09c26d26e51e3fb784c4bb7411", "url": "https://api.github.com/repos/rust-lang/rust/commits/40cdcf0e5eb9cd09c26d26e51e3fb784c4bb7411", "html_url": "https://github.com/rust-lang/rust/commit/40cdcf0e5eb9cd09c26d26e51e3fb784c4bb7411"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "5b81b48a09cde98f83a0979ab3fefaa317da90ab", "filename": "src/abi/mod.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/04af24d418da041c1e95dbd7c35f62d661353f3b/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04af24d418da041c1e95dbd7c35f62d661353f3b/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=04af24d418da041c1e95dbd7c35f62d661353f3b", "patch": "@@ -655,19 +655,18 @@ pub(crate) fn codegen_drop<'tcx>(\n         // we don't actually need to drop anything\n     } else {\n         let drop_fn_ty = drop_fn.monomorphic_ty(fx.tcx);\n+        let fn_sig = fx.tcx.normalize_erasing_late_bound_regions(\n+            ParamEnv::reveal_all(),\n+            &drop_fn_ty.fn_sig(fx.tcx),\n+        );\n+        assert_eq!(fn_sig.output(), fx.tcx.mk_unit());\n+\n         match ty.kind {\n             ty::Dynamic(..) => {\n                 let (ptr, vtable) = drop_place.to_ptr_maybe_unsized();\n                 let ptr = ptr.get_addr(fx);\n                 let drop_fn = crate::vtable::drop_fn_of_obj(fx, vtable.unwrap());\n \n-                let fn_sig = fx.tcx.normalize_erasing_late_bound_regions(\n-                    ParamEnv::reveal_all(),\n-                    &drop_fn_ty.fn_sig(fx.tcx),\n-                );\n-\n-                assert_eq!(fn_sig.output(), fx.tcx.mk_unit());\n-\n                 let sig = clif_sig_from_fn_sig(\n                     fx.tcx,\n                     fx.triple(),\n@@ -679,6 +678,15 @@ pub(crate) fn codegen_drop<'tcx>(\n                 fx.bcx.ins().call_indirect(sig, drop_fn, &[ptr]);\n             }\n             _ => {\n+                let instance = match drop_fn_ty.kind {\n+                    ty::FnDef(def_id, substs) => {\n+                        Instance::resolve(fx.tcx, ParamEnv::reveal_all(), def_id, substs).unwrap()\n+                    }\n+                    _ => unreachable!(\"{:?}\", drop_fn_ty),\n+                };\n+\n+                assert!(!matches!(instance.def, InstanceDef::Virtual(_, _)));\n+\n                 let arg_place = CPlace::new_stack_slot(\n                     fx,\n                     fx.layout_of(fx.tcx.mk_ref(\n@@ -691,7 +699,18 @@ pub(crate) fn codegen_drop<'tcx>(\n                 );\n                 drop_place.write_place_ref(fx, arg_place);\n                 let arg_value = arg_place.to_cvalue(fx);\n-                codegen_call_inner(fx, span, None, drop_fn_ty, vec![arg_value], None);\n+                let arg_value = adjust_arg_for_abi(fx, arg_value);\n+\n+                let mut call_args: Vec<Value> = arg_value.into_iter().collect::<Vec<_>>();\n+\n+                if instance.def.requires_caller_location(fx.tcx) {\n+                    // Pass the caller location for `#[track_caller]`.\n+                    let caller_location = fx.get_caller_location(span);\n+                    call_args.extend(adjust_arg_for_abi(fx, caller_location).into_iter());\n+                }\n+\n+                let func_ref = fx.get_function_ref(instance);\n+                fx.bcx.ins().call(func_ref, &call_args);\n             }\n         }\n     }"}]}