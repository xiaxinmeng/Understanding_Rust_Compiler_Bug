{"sha": "fa2bc4f40005c7b318ec91dac3222141bf8e9833", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMmJjNGY0MDAwNWM3YjMxOGVjOTFkYWMzMjIyMTQxYmY4ZTk4MzM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-08-26T17:16:33Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-02T17:08:58Z"}, "message": "Directly access the module for use suggestions.", "tree": {"sha": "9f7142620ef9ac7ecd0cac5d0d72b5d61c2937bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f7142620ef9ac7ecd0cac5d0d72b5d61c2937bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa2bc4f40005c7b318ec91dac3222141bf8e9833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa2bc4f40005c7b318ec91dac3222141bf8e9833", "html_url": "https://github.com/rust-lang/rust/commit/fa2bc4f40005c7b318ec91dac3222141bf8e9833", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa2bc4f40005c7b318ec91dac3222141bf8e9833/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec973d9ce7bc02577efde54929ad38bcf5a40eb", "html_url": "https://github.com/rust-lang/rust/commit/7ec973d9ce7bc02577efde54929ad38bcf5a40eb"}], "stats": {"total": 96, "additions": 34, "deletions": 62}, "files": [{"sha": "c60d82d0cabc579e819b76f6cbac2049b53f818e", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 34, "deletions": 62, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/fa2bc4f40005c7b318ec91dac3222141bf8e9833/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa2bc4f40005c7b318ec91dac3222141bf8e9833/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=fa2bc4f40005c7b318ec91dac3222141bf8e9833", "patch": "@@ -6,8 +6,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace, Res};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n-use rustc_hir::intravisit;\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ExprKind, Node, QPath};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -1011,8 +1010,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         candidates: Vec<DefId>,\n     ) {\n         let module_did = self.tcx.parent_module(self.body_id);\n-        let module_id = self.tcx.hir().local_def_id_to_hir_id(module_did);\n-        let (span, found_use) = UsePlacementFinder::check(self.tcx, module_id);\n+        let (span, found_use) = find_use_placement(self.tcx, module_did);\n         if let Some(span) = span {\n             let path_strings = candidates.iter().map(|did| {\n                 // Produce an additional newline to separate the new use statement\n@@ -1605,60 +1603,38 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     providers.all_traits = compute_all_traits;\n }\n \n-struct UsePlacementFinder<'tcx> {\n-    target_module: hir::HirId,\n-    span: Option<Span>,\n-    found_use: bool,\n-    tcx: TyCtxt<'tcx>,\n-}\n-\n-impl UsePlacementFinder<'tcx> {\n-    fn check(tcx: TyCtxt<'tcx>, target_module: hir::HirId) -> (Option<Span>, bool) {\n-        let mut finder = UsePlacementFinder { target_module, span: None, found_use: false, tcx };\n-        tcx.hir().walk_crate(&mut finder);\n-        (finder.span, finder.found_use)\n-    }\n-}\n-\n-impl intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n-    fn visit_mod(&mut self, module: &'tcx hir::Mod<'tcx>, _: Span, hir_id: hir::HirId) {\n-        if self.span.is_some() {\n-            return;\n-        }\n-        if hir_id != self.target_module {\n-            intravisit::walk_mod(self, module, hir_id);\n-            return;\n-        }\n-        // Find a `use` statement.\n-        for &item_id in module.item_ids {\n-            let item = self.tcx.hir().item(item_id);\n-            match item.kind {\n-                hir::ItemKind::Use(..) => {\n-                    // Don't suggest placing a `use` before the prelude\n-                    // import or other generated ones.\n-                    if !item.span.from_expansion() {\n-                        self.span = Some(item.span.shrink_to_lo());\n-                        self.found_use = true;\n-                        return;\n-                    }\n+fn find_use_placement<'tcx>(tcx: TyCtxt<'tcx>, target_module: LocalDefId) -> (Option<Span>, bool) {\n+    let mut span = None;\n+    let mut found_use = false;\n+    let (module, _, _) = tcx.hir().get_module(target_module);\n+\n+    // Find a `use` statement.\n+    for &item_id in module.item_ids {\n+        let item = tcx.hir().item(item_id);\n+        match item.kind {\n+            hir::ItemKind::Use(..) => {\n+                // Don't suggest placing a `use` before the prelude\n+                // import or other generated ones.\n+                if !item.span.from_expansion() {\n+                    span = Some(item.span.shrink_to_lo());\n+                    found_use = true;\n+                    break;\n                 }\n-                // Don't place `use` before `extern crate`...\n-                hir::ItemKind::ExternCrate(_) => {}\n-                // ...but do place them before the first other item.\n-                _ => {\n-                    if self.span.map_or(true, |span| item.span < span) {\n-                        if !item.span.from_expansion() {\n-                            self.span = Some(item.span.shrink_to_lo());\n-                            // Don't insert between attributes and an item.\n-                            let attrs = self.tcx.hir().attrs(item.hir_id());\n-                            // Find the first attribute on the item.\n-                            // FIXME: This is broken for active attributes.\n-                            for attr in attrs {\n-                                if !attr.span.is_dummy()\n-                                    && self.span.map_or(true, |span| attr.span < span)\n-                                {\n-                                    self.span = Some(attr.span.shrink_to_lo());\n-                                }\n+            }\n+            // Don't place `use` before `extern crate`...\n+            hir::ItemKind::ExternCrate(_) => {}\n+            // ...but do place them before the first other item.\n+            _ => {\n+                if span.map_or(true, |span| item.span < span) {\n+                    if !item.span.from_expansion() {\n+                        span = Some(item.span.shrink_to_lo());\n+                        // Don't insert between attributes and an item.\n+                        let attrs = tcx.hir().attrs(item.hir_id());\n+                        // Find the first attribute on the item.\n+                        // FIXME: This is broken for active attributes.\n+                        for attr in attrs {\n+                            if !attr.span.is_dummy() && span.map_or(true, |span| attr.span < span) {\n+                                span = Some(attr.span.shrink_to_lo());\n                             }\n                         }\n                     }\n@@ -1667,11 +1643,7 @@ impl intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n         }\n     }\n \n-    type Map = intravisit::ErasedMap<'tcx>;\n-\n-    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n-        intravisit::NestedVisitorMap::None\n-    }\n+    (span, found_use)\n }\n \n fn print_disambiguation_help("}]}