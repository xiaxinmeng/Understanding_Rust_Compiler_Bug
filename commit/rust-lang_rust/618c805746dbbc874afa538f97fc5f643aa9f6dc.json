{"sha": "618c805746dbbc874afa538f97fc5f643aa9f6dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxOGM4MDU3NDZkYmJjODc0YWZhNTM4Zjk3ZmM1ZjY0M2FhOWY2ZGM=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-06-30T18:59:39Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-06-30T18:59:39Z"}, "message": "Remove alloc/malloc/calloc/realloc doc aliases", "tree": {"sha": "2be60776df27afd62a579e9762a176f5ac89be26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2be60776df27afd62a579e9762a176f5ac89be26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/618c805746dbbc874afa538f97fc5f643aa9f6dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/618c805746dbbc874afa538f97fc5f643aa9f6dc", "html_url": "https://github.com/rust-lang/rust/commit/618c805746dbbc874afa538f97fc5f643aa9f6dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/618c805746dbbc874afa538f97fc5f643aa9f6dc/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "868c702d0c9a471a28fb55f0148eb1e3e8b1dcc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/868c702d0c9a471a28fb55f0148eb1e3e8b1dcc5", "html_url": "https://github.com/rust-lang/rust/commit/868c702d0c9a471a28fb55f0148eb1e3e8b1dcc5"}], "stats": {"total": 14, "additions": 0, "deletions": 14}, "files": [{"sha": "53bfe02d0e7a31d43d8c56790a402cd3fbbfc748", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/618c805746dbbc874afa538f97fc5f643aa9f6dc/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618c805746dbbc874afa538f97fc5f643aa9f6dc/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=618c805746dbbc874afa538f97fc5f643aa9f6dc", "patch": "@@ -187,8 +187,6 @@ impl<T> Box<T> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[inline(always)]\n-    #[doc(alias = \"alloc\")]\n-    #[doc(alias = \"malloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(x: T) -> Self {\n         box x\n@@ -239,7 +237,6 @@ impl<T> Box<T> {\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n-    #[doc(alias = \"calloc\")]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_zeroed() -> Box<mem::MaybeUninit<T>> {\n         Self::new_zeroed_in(Global)"}, {"sha": "189da9f06392add94c1ac45a83e982a28715d4f1", "filename": "library/alloc/src/macros.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618c805746dbbc874afa538f97fc5f643aa9f6dc/library%2Falloc%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618c805746dbbc874afa538f97fc5f643aa9f6dc/library%2Falloc%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fmacros.rs?ref=618c805746dbbc874afa538f97fc5f643aa9f6dc", "patch": "@@ -35,8 +35,6 @@\n ///\n /// [`Vec`]: crate::vec::Vec\n #[cfg(not(test))]\n-#[doc(alias = \"alloc\")]\n-#[doc(alias = \"malloc\")]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable(box_syntax, liballoc_internals)]"}, {"sha": "a9c627534fd82e9a2f22658ddd216ae0e6a7d8bb", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618c805746dbbc874afa538f97fc5f643aa9f6dc/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618c805746dbbc874afa538f97fc5f643aa9f6dc/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=618c805746dbbc874afa538f97fc5f643aa9f6dc", "patch": "@@ -419,8 +419,6 @@ impl String {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n-    #[doc(alias = \"alloc\")]\n-    #[doc(alias = \"malloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(capacity: usize) -> String {\n         String { vec: Vec::with_capacity(capacity) }"}, {"sha": "08c46cf2f4f2766bfd47691c98dc03069330fa44", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/618c805746dbbc874afa538f97fc5f643aa9f6dc/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618c805746dbbc874afa538f97fc5f643aa9f6dc/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=618c805746dbbc874afa538f97fc5f643aa9f6dc", "patch": "@@ -459,7 +459,6 @@ impl<T> Vec<T> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n-    #[doc(alias = \"malloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(capacity: usize) -> Self {\n         Self::with_capacity_in(capacity, Global)\n@@ -799,7 +798,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// assert!(vec.capacity() >= 11);\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[doc(alias = \"realloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reserve(&mut self, additional: usize) {\n         self.buf.reserve(self.len, additional);\n@@ -826,7 +824,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// assert!(vec.capacity() >= 11);\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[doc(alias = \"realloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.buf.reserve_exact(self.len, additional);\n@@ -864,7 +861,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// }\n     /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n     /// ```\n-    #[doc(alias = \"realloc\")]\n     #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n     pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.buf.try_reserve(self.len, additional)\n@@ -906,7 +902,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// }\n     /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n     /// ```\n-    #[doc(alias = \"realloc\")]\n     #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n     pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.buf.try_reserve_exact(self.len, additional)\n@@ -927,7 +922,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// assert!(vec.capacity() >= 3);\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[doc(alias = \"realloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn shrink_to_fit(&mut self) {\n         // The capacity is never less than the length, and there's nothing to do when\n@@ -958,7 +952,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// assert!(vec.capacity() >= 3);\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[doc(alias = \"realloc\")]\n     #[unstable(feature = \"shrink_to\", reason = \"new API\", issue = \"56431\")]\n     pub fn shrink_to(&mut self, min_capacity: usize) {\n         if self.capacity() > min_capacity {"}]}