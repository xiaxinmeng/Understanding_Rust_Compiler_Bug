{"sha": "7637fd588bfee93d627474a18dcbf11a81803665", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MzdmZDU4OGJmZWU5M2Q2Mjc0NzRhMThkY2JmMTFhODE4MDM2NjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-26T04:10:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-26T04:10:13Z"}, "message": "Auto merge of #83503 - Dylan-DPC:rollup-mqvjfav, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #83055 ([rustdoc] Don't document stripped items in JSON renderer.)\n - #83437 (Refactor #82270 as lint instead of an error)\n - #83444 (Fix bootstrap tests on beta)\n - #83456 (Add docs for Vec::from functions)\n - #83463 (ExitStatusExt: Fix missing word in two docs messages)\n - #83470 (Fix patch note about #80653 not mentioning nested nor recursive)\n - #83485 (Mark asm tests as requiring LLVM 10.0.1)\n - #83486 (Don't ICE when using `#[global_alloc]` on a non-item statement)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f27d975515727ef5279c2650b088fda0f2a4872e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f27d975515727ef5279c2650b088fda0f2a4872e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7637fd588bfee93d627474a18dcbf11a81803665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7637fd588bfee93d627474a18dcbf11a81803665", "html_url": "https://github.com/rust-lang/rust/commit/7637fd588bfee93d627474a18dcbf11a81803665", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7637fd588bfee93d627474a18dcbf11a81803665/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ced530534de1a77504b6229e6303d37a12282ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ced530534de1a77504b6229e6303d37a12282ee", "html_url": "https://github.com/rust-lang/rust/commit/0ced530534de1a77504b6229e6303d37a12282ee"}, {"sha": "b0bec9553429639fc20dcc224f7525d99c325655", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0bec9553429639fc20dcc224f7525d99c325655", "html_url": "https://github.com/rust-lang/rust/commit/b0bec9553429639fc20dcc224f7525d99c325655"}], "stats": {"total": 552, "additions": 393, "deletions": 159}, "files": [{"sha": "9b0f310e3ae44fe03949bc0c1b4ca81b51e25ec4", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -1219,6 +1219,12 @@ dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n \n+[[package]]\n+name = \"fs-err\"\n+version = \"2.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bcd1163ae48bda72a20ae26d66a04d3094135cadab911cff418ae5e33f253431\"\n+\n [[package]]\n name = \"fs_extra\"\n version = \"1.1.0\"\n@@ -1748,6 +1754,7 @@ checksum = \"92c245af8786f6ac35f95ca14feca9119e71339aaab41e878e7cdd655c97e9e5\"\n name = \"jsondocck\"\n version = \"0.1.0\"\n dependencies = [\n+ \"fs-err\",\n  \"getopts\",\n  \"jsonpath_lib\",\n  \"lazy_static\","}, {"sha": "3cd253afbcd3b5844d9f3a7bc21ef5a9f2ea7a72", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -87,7 +87,7 @@ Cargo\n Rustdoc\n -------\n \n-- [Rustdoc will now include documentation for methods available from `Deref` traits.][80653]\n+- [Rustdoc will now include documentation for methods available from _nested_ `Deref` traits.][80653]\n - [You can now provide a `--default-theme` flag which sets the default theme to use for\n   documentation.][79642]\n "}, {"sha": "e6afc81d0396afabb5377322104cd339bf94809a", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 30, "deletions": 65, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -7,11 +7,10 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_expand::base::{self, *};\n use rustc_parse::parser::Parser;\n use rustc_parse_format as parse;\n-use rustc_span::{\n-    symbol::{kw, sym, Symbol},\n-    BytePos,\n-};\n+use rustc_session::lint;\n+use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{InnerSpan, Span};\n+use rustc_target::asm::InlineAsmArch;\n \n struct AsmArgs {\n     templates: Vec<P<ast::Expr>>,\n@@ -402,8 +401,6 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n     let mut line_spans = Vec::with_capacity(args.templates.len());\n     let mut curarg = 0;\n \n-    let default_dialect = ecx.sess.inline_asm_dialect();\n-\n     for template_expr in args.templates.into_iter() {\n         if !template.is_empty() {\n             template.push(ast::InlineAsmTemplatePiece::String(\"\\n\".to_string()));\n@@ -430,56 +427,36 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n         let template_str = &template_str.as_str();\n         let template_snippet = ecx.source_map().span_to_snippet(template_sp).ok();\n \n-        if let Some(snippet) = &template_snippet {\n-            let snippet = snippet.trim_matches('\"');\n-            match default_dialect {\n-                ast::LlvmAsmDialect::Intel => {\n-                    if let Some(span) = check_syntax_directive(snippet, \".intel_syntax\") {\n-                        let span = template_span.from_inner(span);\n-                        let mut err = ecx.struct_span_err(span, \"intel syntax is the default syntax on this target, and trying to use this directive may cause issues\");\n-                        err.span_suggestion(\n-                            span,\n-                            \"remove this assembler directive\",\n-                            \"\".to_string(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                        err.emit();\n-                    }\n-\n-                    if let Some(span) = check_syntax_directive(snippet, \".att_syntax\") {\n-                        let span = template_span.from_inner(span);\n-                        let mut err = ecx.struct_span_err(span, \"using the .att_syntax directive may cause issues, use the att_syntax option instead\");\n-                        let asm_end = sp.hi() - BytePos(2);\n-                        let suggestions = vec![\n-                            (span, \"\".to_string()),\n-                            (\n-                                Span::new(asm_end, asm_end, sp.ctxt()),\n-                                \", options(att_syntax)\".to_string(),\n-                            ),\n-                        ];\n-                        err.multipart_suggestion(\n-                        \"remove the assembler directive and replace it with options(att_syntax)\",\n-                        suggestions,\n-                        Applicability::MachineApplicable,\n-                    );\n-                        err.emit();\n+        if let Some(InlineAsmArch::X86 | InlineAsmArch::X86_64) = ecx.sess.asm_arch {\n+            let find_span = |needle: &str| -> Span {\n+                if let Some(snippet) = &template_snippet {\n+                    if let Some(pos) = snippet.find(needle) {\n+                        let end = pos\n+                            + &snippet[pos..]\n+                                .find(|c| matches!(c, '\\n' | ';' | '\\\\' | '\"'))\n+                                .unwrap_or(snippet[pos..].len() - 1);\n+                        let inner = InnerSpan::new(pos, end);\n+                        return template_sp.from_inner(inner);\n                     }\n                 }\n-                ast::LlvmAsmDialect::Att => {\n-                    if let Some(span) = check_syntax_directive(snippet, \".att_syntax\") {\n-                        let span = template_span.from_inner(span);\n-                        let mut err = ecx.struct_span_err(span, \"att syntax is the default syntax on this target, and trying to use this directive may cause issues\");\n-                        err.span_suggestion(\n-                            span,\n-                            \"remove this assembler directive\",\n-                            \"\".to_string(),\n-                            Applicability::MachineApplicable,\n-                        );\n-                        err.emit();\n-                    }\n+                template_sp\n+            };\n \n-                    // Use of .intel_syntax is ignored\n-                }\n+            if template_str.contains(\".intel_syntax\") {\n+                ecx.parse_sess().buffer_lint(\n+                    lint::builtin::BAD_ASM_STYLE,\n+                    find_span(\".intel_syntax\"),\n+                    ecx.resolver.lint_node_id(ecx.current_expansion.id),\n+                    \"avoid using `.intel_syntax`, Intel syntax is the default\",\n+                );\n+            }\n+            if template_str.contains(\".att_syntax\") {\n+                ecx.parse_sess().buffer_lint(\n+                    lint::builtin::BAD_ASM_STYLE,\n+                    find_span(\".att_syntax\"),\n+                    ecx.resolver.lint_node_id(ecx.current_expansion.id),\n+                    \"avoid using `.att_syntax`, prefer using `options(att_syntax)` instead\",\n+                );\n             }\n         }\n \n@@ -690,15 +667,3 @@ pub fn expand_asm<'cx>(\n         }\n     }\n }\n-\n-fn check_syntax_directive<S: AsRef<str>>(piece: S, syntax: &str) -> Option<InnerSpan> {\n-    let piece = piece.as_ref();\n-    if let Some(idx) = piece.find(syntax) {\n-        let end =\n-            idx + &piece[idx..].find(|c| matches!(c, '\\n' | ';')).unwrap_or(piece[idx..].len());\n-        // Offset by one because these represent the span with the \" removed\n-        Some(InnerSpan::new(idx + 1, end + 1))\n-    } else {\n-        None\n-    }\n-}"}, {"sha": "a97cac7e514c98082c8591acaa441840ac9edacc", "filename": "compiler/rustc_builtin_macros/src/global_allocator.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fglobal_allocator.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -14,31 +14,31 @@ pub fn expand(\n     ecx: &mut ExtCtxt<'_>,\n     _span: Span,\n     meta_item: &ast::MetaItem,\n-    mut item: Annotatable,\n+    item: Annotatable,\n ) -> Vec<Annotatable> {\n     check_builtin_macro_attribute(ecx, meta_item, sym::global_allocator);\n \n-    let not_static = |item: Annotatable| {\n+    let orig_item = item.clone();\n+    let not_static = || {\n         ecx.sess.parse_sess.span_diagnostic.span_err(item.span(), \"allocators must be statics\");\n-        vec![item]\n+        vec![orig_item.clone()]\n     };\n-    let orig_item = item.clone();\n-    let mut is_stmt = false;\n \n     // Allow using `#[global_allocator]` on an item statement\n-    if let Annotatable::Stmt(stmt) = &item {\n-        if let StmtKind::Item(item_) = &stmt.kind {\n-            item = Annotatable::Item(item_.clone());\n-            is_stmt = true;\n-        }\n-    }\n-\n-    let item = match item {\n+    // FIXME - if we get deref patterns, use them to reduce duplication here\n+    let (item, is_stmt) = match &item {\n         Annotatable::Item(item) => match item.kind {\n-            ItemKind::Static(..) => item,\n-            _ => return not_static(Annotatable::Item(item)),\n+            ItemKind::Static(..) => (item, false),\n+            _ => return not_static(),\n+        },\n+        Annotatable::Stmt(stmt) => match &stmt.kind {\n+            StmtKind::Item(item_) => match item_.kind {\n+                ItemKind::Static(..) => (item_, true),\n+                _ => return not_static(),\n+            },\n+            _ => return not_static(),\n         },\n-        _ => return not_static(item),\n+        _ => return not_static(),\n     };\n \n     // Generate a bunch of new items using the AllocFnFactory"}, {"sha": "cd4d01ddc058e0514417b7d6786d229cfe8fbe2b", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -2486,6 +2486,52 @@ declare_lint! {\n     \"using only a subset of a register for inline asm inputs\",\n }\n \n+declare_lint! {\n+    /// The `bad_asm_style` lint detects the use of the `.intel_syntax` and\n+    /// `.att_syntax` directives.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,ignore (fails on system llvm)\n+    /// #![feature(asm)]\n+    ///\n+    /// fn main() {\n+    ///     #[cfg(target_arch=\"x86_64\")]\n+    ///     unsafe {\n+    ///         asm!(\n+    ///             \".att_syntax\",\n+    ///             \"movl {0}, {0}\", in(reg) 0usize\n+    ///         );\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// This will produce:\n+    ///\n+    /// ```text\n+    ///  warning: avoid using `.att_syntax`, prefer using `options(att_syntax)` instead\n+    ///  --> test.rs:7:14\n+    ///   |\n+    /// 7 |             \".att_syntax\",\n+    ///   |              ^^^^^^^^^^^\n+    /// 8 |             \"movq {0}, {0}\", out(reg) _,\n+    /// 9 |         );\n+    ///   |         - help: add option: `, options(att_syntax)`\n+    ///   |\n+    ///   = note: `#[warn(bad_asm_style)]` on by default\n+    /// ```\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// On x86, `asm!` uses the intel assembly syntax by default. While this\n+    /// can be switched using assembler directives like `.att_syntax`, using the\n+    /// `att_syntax` option is recomended instead because it will also properly\n+    /// prefix register placeholders with `%` as required by AT&T syntax.\n+    pub BAD_ASM_STYLE,\n+    Warn,\n+    \"incorrect use of inline assembly\",\n+}\n+\n declare_lint! {\n     /// The `unsafe_op_in_unsafe_fn` lint detects unsafe operations in unsafe\n     /// functions without an explicit unsafe block."}, {"sha": "ca9214c03a89596300139e88f27593a4dc638c7d", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -793,13 +793,6 @@ impl Session {\n         }\n     }\n \n-    pub fn inline_asm_dialect(&self) -> rustc_ast::LlvmAsmDialect {\n-        match self.asm_arch {\n-            Some(InlineAsmArch::X86 | InlineAsmArch::X86_64) => rustc_ast::LlvmAsmDialect::Intel,\n-            _ => rustc_ast::LlvmAsmDialect::Att,\n-        }\n-    }\n-\n     pub fn relocation_model(&self) -> RelocModel {\n         self.opts.cg.relocation_model.unwrap_or(self.target.relocation_model)\n     }"}, {"sha": "ff93c772b5b81f35ab681c3e9827de485a6ba0fc", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -2712,6 +2712,13 @@ impl<T, A: Allocator> AsMut<[T]> for Vec<T, A> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Clone> From<&[T]> for Vec<T> {\n+    /// Allocate a `Vec<T>` and fill it by cloning `s`'s items.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(Vec::from(&[1, 2, 3][..]), vec![1, 2, 3]);\n+    /// ```\n     #[cfg(not(test))]\n     fn from(s: &[T]) -> Vec<T> {\n         s.to_vec()\n@@ -2724,6 +2731,13 @@ impl<T: Clone> From<&[T]> for Vec<T> {\n \n #[stable(feature = \"vec_from_mut\", since = \"1.19.0\")]\n impl<T: Clone> From<&mut [T]> for Vec<T> {\n+    /// Allocate a `Vec<T>` and fill it by cloning `s`'s items.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(Vec::from(&mut [1, 2, 3][..]), vec![1, 2, 3]);\n+    /// ```\n     #[cfg(not(test))]\n     fn from(s: &mut [T]) -> Vec<T> {\n         s.to_vec()\n@@ -2740,6 +2754,13 @@ impl<T, const N: usize> From<[T; N]> for Vec<T> {\n     fn from(s: [T; N]) -> Vec<T> {\n         <[T]>::into_vec(box s)\n     }\n+    /// Allocate a `Vec<T>` and move `s`'s items into it.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(Vec::from([1, 2, 3]), vec![1, 2, 3]);\n+    /// ```\n     #[cfg(test)]\n     fn from(s: [T; N]) -> Vec<T> {\n         crate::slice::into_vec(box s)\n@@ -2751,6 +2772,20 @@ impl<'a, T> From<Cow<'a, [T]>> for Vec<T>\n where\n     [T]: ToOwned<Owned = Vec<T>>,\n {\n+    /// Convert a clone-on-write slice into a vector.\n+    ///\n+    /// If `s` already owns a `Vec<T>`, it will be returned directly.\n+    /// If `s` is borrowing a slice, a new `Vec<T>` will be allocated and\n+    /// filled by cloning `s`'s items into it.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # use std::borrow::Cow;\n+    /// let o: Cow<[i32]> = Cow::Owned(vec![1, 2, 3]);\n+    /// let b: Cow<[i32]> = Cow::Borrowed(&[1, 2, 3]);\n+    /// assert_eq!(Vec::from(o), Vec::from(b));\n+    /// ```\n     fn from(s: Cow<'a, [T]>) -> Vec<T> {\n         s.into_owned()\n     }\n@@ -2760,6 +2795,15 @@ where\n #[cfg(not(test))]\n #[stable(feature = \"vec_from_box\", since = \"1.18.0\")]\n impl<T, A: Allocator> From<Box<[T], A>> for Vec<T, A> {\n+    /// Convert a boxed slice into a vector by transferring ownership of\n+    /// the existing heap allocation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let b: Box<[i32]> = vec![1, 2, 3].into_boxed_slice();\n+    /// assert_eq!(Vec::from(b), vec![1, 2, 3]);\n+    /// ```\n     fn from(s: Box<[T], A>) -> Self {\n         let len = s.len();\n         Self { buf: RawVec::from_box(s), len }\n@@ -2770,13 +2814,30 @@ impl<T, A: Allocator> From<Box<[T], A>> for Vec<T, A> {\n #[cfg(not(test))]\n #[stable(feature = \"box_from_vec\", since = \"1.20.0\")]\n impl<T, A: Allocator> From<Vec<T, A>> for Box<[T], A> {\n+    /// Convert a vector into a boxed slice.\n+    ///\n+    /// If `v` has excess capacity, its items will be moved into a\n+    /// newly-allocated buffer with exactly the right capacity.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());\n+    /// ```\n     fn from(v: Vec<T, A>) -> Self {\n         v.into_boxed_slice()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<&str> for Vec<u8> {\n+    /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(Vec::from(\"123\"), vec![b'1', b'2', b'3']);\n+    /// ```\n     fn from(s: &str) -> Vec<u8> {\n         From::from(s.as_bytes())\n     }"}, {"sha": "bc3bc0dcb0ce38343f2c702b63f724c6c11e2bf8", "filename": "library/std/src/sys/unix/ext/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -227,14 +227,14 @@ pub trait ExitStatusExt: Sealed {\n     /// If the process was stopped by a signal, returns that signal.\n     ///\n     /// In other words, if `WIFSTOPPED`, this returns `WSTOPSIG`.  This is only possible if the status came from\n-    /// a `wait` system call which was passed `WUNTRACED`, was then converted into an `ExitStatus`.\n+    /// a `wait` system call which was passed `WUNTRACED`, and was then converted into an `ExitStatus`.\n     #[unstable(feature = \"unix_process_wait_more\", issue = \"80695\")]\n     fn stopped_signal(&self) -> Option<i32>;\n \n     /// Whether the process was continued from a stopped status.\n     ///\n     /// Ie, `WIFCONTINUED`.  This is only possible if the status came from a `wait` system call\n-    /// which was passed `WCONTINUED`, was then converted into an `ExitStatus`.\n+    /// which was passed `WCONTINUED`, and was then converted into an `ExitStatus`.\n     #[unstable(feature = \"unix_process_wait_more\", issue = \"80695\")]\n     fn continued(&self) -> bool;\n "}, {"sha": "a881512e988ed67dd4e3cb4fee96675529296259", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -585,8 +585,11 @@ mod dist {\n             rustfix_coverage: false,\n             pass: None,\n         };\n+        // Make sure rustfmt binary not being found isn't an error.\n+        config.channel = \"beta\".to_string();\n         let build = Build::new(config);\n         let mut builder = Builder::new(&build);\n+\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Test), &[]);\n         let a = TargetSelection::from_user(\"A\");\n "}, {"sha": "4e0f3a4e3c31737208e477adb5abdef1d86037c5", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -13,6 +13,11 @@ crate trait FormatRenderer<'tcx>: Sized {\n     /// Gives a description of the renderer. Used for performance profiling.\n     fn descr() -> &'static str;\n \n+    /// Whether to call `item` recursivly for modules\n+    ///\n+    /// This is true for html, and false for json. See #80664\n+    const RUN_ON_MODULE: bool;\n+\n     /// Sets up any state required for the renderer. When this is called the cache has already been\n     /// populated.\n     fn init(\n@@ -68,7 +73,7 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n \n     let unknown = Symbol::intern(\"<unknown item>\");\n     while let Some((mut cx, item)) = work.pop() {\n-        if item.is_mod() {\n+        if item.is_mod() && T::RUN_ON_MODULE {\n             // modules are special because they add a namespace. We also need to\n             // recurse into the items of the module as well.\n             let name = item.name.as_ref().unwrap().to_string();"}, {"sha": "0ffb4d616da1a1f0ad76444eec83651a55e2daa9", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -290,6 +290,8 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         \"html\"\n     }\n \n+    const RUN_ON_MODULE: bool = true;\n+\n     fn init(\n         mut krate: clean::Crate,\n         options: RenderOptions,"}, {"sha": "c470dc5700513b6f91902be0b9dc1b4c429e0158", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -198,7 +198,8 @@ fn from_clean_item_kind(item: clean::ItemKind, tcx: TyCtxt<'_>, name: &Option<Sy\n             bounds: g.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n             default: t.map(|x| x.into_tcx(tcx)),\n         },\n-        StrippedItem(inner) => from_clean_item_kind(*inner, tcx, name),\n+        // `convert_item` early returns `None` for striped items\n+        StrippedItem(_) => unreachable!(),\n         PrimitiveItem(_) | KeywordItem(_) => {\n             panic!(\"{:?} is not supported for JSON output\", item)\n         }"}, {"sha": "db3a0c5ceb167cc0d684ead3c7c455d650de8a28", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -129,6 +129,8 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         \"json\"\n     }\n \n+    const RUN_ON_MODULE: bool = false;\n+\n     fn init(\n         krate: clean::Crate,\n         options: RenderOptions,\n@@ -169,8 +171,10 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                 e.impls = self.get_impls(id)\n             }\n             let removed = self.index.borrow_mut().insert(from_def_id(id), new_item.clone());\n+\n             // FIXME(adotinthevoid): Currently, the index is duplicated. This is a sanity check\n-            // to make sure the items are unique.\n+            // to make sure the items are unique. The main place this happens is when an item, is\n+            // reexported in more than one place. See `rustdoc-json/reexport/in_root_and_mod`\n             if let Some(old_item) = removed {\n                 assert_eq!(old_item, new_item);\n             }"}, {"sha": "d4a44b17392bea37ba5f45164de2eaf89e9812f4", "filename": "src/test/assembly/asm/aarch64-modifiers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Faarch64-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Faarch64-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Faarch64-modifiers.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -1,4 +1,4 @@\n-// no-system-llvm\n+// min-llvm-version: 10.0.1\n // assembly-output: emit-asm\n // compile-flags: -O\n // compile-flags: --target aarch64-unknown-linux-gnu"}, {"sha": "aa25562d323595bd214dc73122c1404b4eeac1ba", "filename": "src/test/assembly/asm/aarch64-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -1,4 +1,4 @@\n-// no-system-llvm\n+// min-llvm-version: 10.0.1\n // assembly-output: emit-asm\n // compile-flags: --target aarch64-unknown-linux-gnu\n // needs-llvm-components: aarch64"}, {"sha": "bb6cc1c9873563b9a628def3f8305ab45136c15a", "filename": "src/test/assembly/asm/arm-modifiers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -1,4 +1,4 @@\n-// no-system-llvm\n+// min-llvm-version: 10.0.1\n // assembly-output: emit-asm\n // compile-flags: -O\n // compile-flags: --target armv7-unknown-linux-gnueabihf"}, {"sha": "b16fde571afac7d4c5920d9afc595f72f379a61f", "filename": "src/test/assembly/asm/arm-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -1,4 +1,4 @@\n-// no-system-llvm\n+// min-llvm-version: 10.0.1\n // assembly-output: emit-asm\n // compile-flags: --target armv7-unknown-linux-gnueabihf\n // compile-flags: -C target-feature=+neon"}, {"sha": "40352cdb4cdf2760273dcf13cf8cae26f595c26a", "filename": "src/test/assembly/asm/hexagon-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -1,4 +1,4 @@\n-// no-system-llvm\n+// min-llvm-version: 10.0.1\n // assembly-output: emit-asm\n // compile-flags: --target hexagon-unknown-linux-musl\n // needs-llvm-components: hexagon"}, {"sha": "60cfebdd99290bb51965cfae44aa92731f41359d", "filename": "src/test/assembly/asm/mips-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fmips-types.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -1,4 +1,4 @@\n-// no-system-llvm\n+// min-llvm-version: 10.0.1\n // revisions: mips32 mips64\n // assembly-output: emit-asm\n //[mips32] compile-flags: --target mips-unknown-linux-gnu"}, {"sha": "75b6371fb70957ea7a9b72eb0c83caaafc6bd405", "filename": "src/test/assembly/asm/nvptx-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -1,4 +1,4 @@\n-// no-system-llvm\n+// min-llvm-version: 10.0.1\n // assembly-output: emit-asm\n // compile-flags: --target nvptx64-nvidia-cuda\n // compile-flags: --crate-type cdylib"}, {"sha": "1ba73fcac9d3c5417387906ef9f3f185b4a503cd", "filename": "src/test/assembly/asm/riscv-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -1,4 +1,4 @@\n-// no-system-llvm\n+// min-llvm-version: 10.0.1\n // revisions: riscv64 riscv32\n // assembly-output: emit-asm\n //[riscv64] compile-flags: --target riscv64imac-unknown-none-elf"}, {"sha": "a071a850c22b588cd25aa8c56fcf0af4db013161", "filename": "src/test/assembly/asm/wasm-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fwasm-types.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -1,4 +1,4 @@\n-// no-system-llvm\n+// min-llvm-version: 10.0.1\n // assembly-output: emit-asm\n // compile-flags: --target wasm32-unknown-unknown\n // compile-flags: --crate-type cdylib"}, {"sha": "da2dc51d69e32275c353b60ea15cc4979da2c567", "filename": "src/test/assembly/asm/x86-modifiers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Fx86-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Fx86-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fx86-modifiers.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -1,4 +1,4 @@\n-// no-system-llvm\n+// min-llvm-version: 10.0.1\n // revisions: x86_64 i686\n // assembly-output: emit-asm\n // compile-flags: -O"}, {"sha": "e0190d3bdaed14bb6835640920beddde98fe1f5d", "filename": "src/test/assembly/asm/x86-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -1,4 +1,4 @@\n-// no-system-llvm\n+// min-llvm-version: 10.0.1\n // revisions: x86_64 i686\n // assembly-output: emit-asm\n //[x86_64] compile-flags: --target x86_64-unknown-linux-gnu"}, {"sha": "5b27f3f45457d120f0bce01691a38465906341c5", "filename": "src/test/codegen/alloc-optimisation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fcodegen%2Falloc-optimisation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fcodegen%2Falloc-optimisation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Falloc-optimisation.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -1,5 +1,5 @@\n //\n-// no-system-llvm\n+// min-llvm-version: 10.0.1\n // compile-flags: -O\n #![crate_type=\"lib\"]\n "}, {"sha": "e3cecbdd7ff2fbc3a9913a1200edbfe9c47e4356", "filename": "src/test/rustdoc-json/reexport/in_root_and_mod.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -0,0 +1,15 @@\n+#![feature(no_core)]\n+#![no_core]\n+\n+mod foo {\n+    // @set foo_id = in_root_and_mod.json \"$.index[*][?(@.name=='Foo')].id\"\n+    pub struct Foo;\n+}\n+\n+// @has - \"$.index[*][?(@.name=='in_root_and_mod')].inner.items[*]\" $foo_id\n+pub use foo::Foo;\n+\n+pub mod bar {\n+    // @has - \"$.index[*][?(@.name=='bar')].inner.items[*]\" $foo_id\n+    pub use crate::foo::Foo;\n+}"}, {"sha": "2daadf7620ca0b8e1ccce38e1d28930fc31a8436", "filename": "src/test/rustdoc-json/reexport/in_root_and_mod_pub.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fin_root_and_mod_pub.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -0,0 +1,20 @@\n+#![feature(no_core)]\n+#![no_core]\n+\n+pub mod foo {\n+    // @set bar_id = in_root_and_mod_pub.json \"$.index[*][?(@.name=='Bar')].id\"\n+    // @has - \"$.index[*][?(@.name=='foo')].inner.items[*]\" $bar_id\n+    pub struct Bar;\n+}\n+\n+// @set root_import_id = - \"$.index[*][?(@.inner.source=='foo::Bar')].id\"\n+// @is - \"$.index[*][?(@.inner.source=='foo::Bar')].inner.id\" $bar_id\n+// @has - \"$.index[*][?(@.name=='in_root_and_mod_pub')].inner.items[*]\" $root_import_id\n+pub use foo::Bar;\n+\n+pub mod baz {\n+    // @set baz_import_id = - \"$.index[*][?(@.inner.source=='crate::foo::Bar')].id\"\n+    // @is - \"$.index[*][?(@.inner.source=='crate::foo::Bar')].inner.id\" $bar_id\n+    // @has - \"$.index[*][?(@.name=='baz')].inner.items[*]\" $baz_import_id\n+    pub use crate::foo::Bar;\n+}"}, {"sha": "fb8296f23374ae3bd20358c42ba36a3055ec8a1c", "filename": "src/test/rustdoc-json/reexport/rename_private.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_private.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -0,0 +1,14 @@\n+// edition:2018\n+\n+#![no_core]\n+#![feature(no_core)]\n+// @!has rename_private.json \"$.index[*][?(@.name=='inner')]\"\n+mod inner {\n+    // @!has - \"$.index[*][?(@.name=='Public')]\"\n+    pub struct Public;\n+}\n+\n+// @set newname_id = - \"$.index[*][?(@.name=='NewName')].id\"\n+// @is - \"$.index[*][?(@.name=='NewName')].kind\" \\\"struct\\\"\n+// @has - \"$.index[*][?(@.name=='rename_private')].inner.items[*]\" $newname_id\n+pub use inner::Public as NewName;"}, {"sha": "22bc790713dd7f166fc05e0be309564cf990c5bf", "filename": "src/test/ui/asm/const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fui%2Fasm%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fui%2Fasm%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fconst.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -1,4 +1,4 @@\n-// no-system-llvm\n+// min-llvm-version: 10.0.1\n // only-x86_64\n // run-pass\n "}, {"sha": "56e6572fc6703c27c100c953f91c884e39e7c927", "filename": "src/test/ui/asm/inline-syntax.arm.stderr", "status": "modified", "additions": 67, "deletions": 7, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.arm.stderr?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -1,14 +1,74 @@\n-error: att syntax is the default syntax on this target, and trying to use this directive may cause issues\n-  --> $DIR/inline-syntax.rs:23:15\n+error: unknown directive\n+  --> $DIR/inline-syntax.rs:22:15\n+   |\n+LL |         asm!(\".intel_syntax noprefix\", \"nop\");\n+   |               ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:2\n+   |\n+LL |     .intel_syntax noprefix\n+   |     ^\n+\n+error: unknown directive\n+  --> $DIR/inline-syntax.rs:25:15\n+   |\n+LL |         asm!(\".intel_syntax aaa noprefix\", \"nop\");\n+   |               ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:2\n+   |\n+LL |     .intel_syntax aaa noprefix\n+   |     ^\n+\n+error: unknown directive\n+  --> $DIR/inline-syntax.rs:28:15\n    |\n LL |         asm!(\".att_syntax noprefix\", \"nop\");\n-   |               ^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+   |               ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:2\n+   |\n+LL |     .att_syntax noprefix\n+   |     ^\n \n-error: att syntax is the default syntax on this target, and trying to use this directive may cause issues\n-  --> $DIR/inline-syntax.rs:26:15\n+error: unknown directive\n+  --> $DIR/inline-syntax.rs:31:15\n    |\n LL |         asm!(\".att_syntax bbb noprefix\", \"nop\");\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+   |               ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:2\n+   |\n+LL |     .att_syntax bbb noprefix\n+   |     ^\n+\n+error: unknown directive\n+  --> $DIR/inline-syntax.rs:34:15\n+   |\n+LL |         asm!(\".intel_syntax noprefix; nop\");\n+   |               ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:1:2\n+   |\n+LL |     .intel_syntax noprefix; nop\n+   |     ^\n+\n+error: unknown directive\n+  --> $DIR/inline-syntax.rs:40:13\n+   |\n+LL |             .intel_syntax noprefix\n+   |             ^\n+   |\n+note: instantiated into assembly here\n+  --> <inline asm>:2:13\n+   |\n+LL |             .intel_syntax noprefix\n+   |             ^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "78dde5a58e1500f1708a2898df809bf781866b6b", "filename": "src/test/ui/asm/inline-syntax.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -1,9 +1,12 @@\n // needs-llvm-components: arm\n // revisions: x86_64 arm\n //[x86_64] compile-flags: --target x86_64-unknown-linux-gnu\n+//[x86_64] check-pass\n //[arm] compile-flags: --target armv7-unknown-linux-gnueabihf\n+//[arm] build-fail\n \n #![feature(no_core, lang_items, rustc_attrs)]\n+#![crate_type = \"rlib\"]\n #![no_core]\n \n #[rustc_builtin_macro]\n@@ -14,26 +17,30 @@ macro_rules! asm {\n #[lang = \"sized\"]\n trait Sized {}\n \n-fn main() {\n+pub fn main() {\n     unsafe {\n         asm!(\".intel_syntax noprefix\", \"nop\");\n-        //[x86_64]~^ ERROR intel syntax is the default syntax on this target\n+        //[x86_64]~^ WARN avoid using `.intel_syntax`\n+        //[arm]~^^ ERROR unknown directive\n         asm!(\".intel_syntax aaa noprefix\", \"nop\");\n-        //[x86_64]~^ ERROR intel syntax is the default syntax on this target\n+        //[x86_64]~^ WARN avoid using `.intel_syntax`\n+        //[arm]~^^ ERROR unknown directive\n         asm!(\".att_syntax noprefix\", \"nop\");\n-        //[x86_64]~^ ERROR using the .att_syntax directive may cause issues\n-        //[arm]~^^ att syntax is the default syntax on this target\n+        //[x86_64]~^ WARN avoid using `.att_syntax`\n+        //[arm]~^^ ERROR unknown directive\n         asm!(\".att_syntax bbb noprefix\", \"nop\");\n-        //[x86_64]~^ ERROR using the .att_syntax directive may cause issues\n-        //[arm]~^^ att syntax is the default syntax on this target\n+        //[x86_64]~^ WARN avoid using `.att_syntax`\n+        //[arm]~^^ ERROR unknown directive\n         asm!(\".intel_syntax noprefix; nop\");\n-        //[x86_64]~^ ERROR intel syntax is the default syntax on this target\n+        //[x86_64]~^ WARN avoid using `.intel_syntax`\n+        //[arm]~^^ ERROR unknown directive\n \n         asm!(\n             r\"\n             .intel_syntax noprefix\n             nop\"\n         );\n-        //[x86_64]~^^^ ERROR intel syntax is the default syntax on this target\n+        //[x86_64]~^^^ WARN avoid using `.intel_syntax`\n+        //[arm]~^^^^ ERROR unknown directive\n     }\n }"}, {"sha": "5c03d3a002c5a2af770746595a80871473690949", "filename": "src/test/ui/asm/inline-syntax.x86_64.stderr", "status": "modified", "additions": 20, "deletions": 30, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finline-syntax.x86_64.stderr?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -1,50 +1,40 @@\n-error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n-  --> $DIR/inline-syntax.rs:19:15\n+warning: avoid using `.intel_syntax`, Intel syntax is the default\n+  --> $DIR/inline-syntax.rs:22:15\n    |\n LL |         asm!(\".intel_syntax noprefix\", \"nop\");\n-   |               ^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+   |               ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(bad_asm_style)]` on by default\n \n-error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n-  --> $DIR/inline-syntax.rs:21:15\n+warning: avoid using `.intel_syntax`, Intel syntax is the default\n+  --> $DIR/inline-syntax.rs:25:15\n    |\n LL |         asm!(\".intel_syntax aaa noprefix\", \"nop\");\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: using the .att_syntax directive may cause issues, use the att_syntax option instead\n-  --> $DIR/inline-syntax.rs:23:15\n+warning: avoid using `.att_syntax`, prefer using `options(att_syntax)` instead\n+  --> $DIR/inline-syntax.rs:28:15\n    |\n LL |         asm!(\".att_syntax noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: remove the assembler directive and replace it with options(att_syntax)\n-   |\n-LL |         asm!(\"\", \"nop\", options(att_syntax));\n-   |              --       ^^^^^^^^^^^^^^^^^^^^^\n \n-error: using the .att_syntax directive may cause issues, use the att_syntax option instead\n-  --> $DIR/inline-syntax.rs:26:15\n+warning: avoid using `.att_syntax`, prefer using `options(att_syntax)` instead\n+  --> $DIR/inline-syntax.rs:31:15\n    |\n LL |         asm!(\".att_syntax bbb noprefix\", \"nop\");\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: remove the assembler directive and replace it with options(att_syntax)\n-   |\n-LL |         asm!(\"\", \"nop\", options(att_syntax));\n-   |              --       ^^^^^^^^^^^^^^^^^^^^^\n \n-error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n-  --> $DIR/inline-syntax.rs:29:15\n+warning: avoid using `.intel_syntax`, Intel syntax is the default\n+  --> $DIR/inline-syntax.rs:34:15\n    |\n LL |         asm!(\".intel_syntax noprefix; nop\");\n-   |               ^^^^^^^^^^^^^^^^^^^^^^ help: remove this assembler directive\n+   |               ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: intel syntax is the default syntax on this target, and trying to use this directive may cause issues\n-  --> $DIR/inline-syntax.rs:34:14\n+warning: avoid using `.intel_syntax`, Intel syntax is the default\n+  --> $DIR/inline-syntax.rs:40:13\n    |\n-LL |               .intel_syntax noprefix\n-   |  ______________^\n-LL | |             nop\"\n-   | |_ help: remove this assembler directive\n+LL |             .intel_syntax noprefix\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+warning: 6 warnings emitted\n "}, {"sha": "26be3eae459f94d360ab1c7ce824a5ac469d436f", "filename": "src/test/ui/asm/srcloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fui%2Fasm%2Fsrcloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fui%2Fasm%2Fsrcloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fsrcloc.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -1,4 +1,4 @@\n-// no-system-llvm\n+// min-llvm-version: 10.0.1\n // only-x86_64\n // build-fail\n "}, {"sha": "58463a90944609b01db563e40cee24e2fd4239fd", "filename": "src/test/ui/asm/sym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fui%2Fasm%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fui%2Fasm%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fsym.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -1,4 +1,4 @@\n-// no-system-llvm\n+// min-llvm-version: 10.0.1\n // only-x86_64\n // only-linux\n // run-pass"}, {"sha": "25adc5d25780b1f0e1bc6895258f85dd4cacca1d", "filename": "src/test/ui/proc-macro/issue-83469-global-alloc-invalid-stmt.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83469-global-alloc-invalid-stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83469-global-alloc-invalid-stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83469-global-alloc-invalid-stmt.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for issue #83469\n+// Ensures that we recover from `#[global_alloc]` on an invalid\n+// stmt without an ICE\n+\n+fn outer() {\n+    #[global_allocator]\n+    fn inner() {} //~ ERROR allocators must be statics\n+}\n+\n+fn main() {}"}, {"sha": "ec0e3c4c7546f8c28f9a3f647f1e85a8d25ac733", "filename": "src/test/ui/proc-macro/issue-83469-global-alloc-invalid-stmt.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83469-global-alloc-invalid-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83469-global-alloc-invalid-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83469-global-alloc-invalid-stmt.stderr?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -0,0 +1,8 @@\n+error: allocators must be statics\n+  --> $DIR/issue-83469-global-alloc-invalid-stmt.rs:7:5\n+   |\n+LL |     fn inner() {}\n+   |     ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "a6efc4c9a6b5bbd8d28755076a3f05fbc095d29f", "filename": "src/tools/jsondocck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftools%2Fjsondocck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftools%2Fjsondocck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2FCargo.toml?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -12,3 +12,4 @@ lazy_static = \"1.4\"\n shlex = \"0.1\"\n serde = \"1.0\"\n serde_json = \"1.0\"\n+fs-err = \"2.5.0\""}, {"sha": "a188750c56ae307df54b08a0fe143d9a3bc74b1a", "filename": "src/tools/jsondocck/src/cache.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fcache.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -1,8 +1,10 @@\n use crate::error::CkError;\n use serde_json::Value;\n use std::collections::HashMap;\n+use std::io;\n use std::path::{Path, PathBuf};\n-use std::{fs, io};\n+\n+use fs_err as fs;\n \n #[derive(Debug)]\n pub struct Cache {\n@@ -31,7 +33,11 @@ impl Cache {\n             self.last_path = Some(resolve.clone());\n             resolve\n         } else {\n-            self.last_path.as_ref().unwrap().clone()\n+            self.last_path\n+                .as_ref()\n+                // FIXME: Point to a line number\n+                .expect(\"No last path set. Make sure to specify a full path before using `-`\")\n+                .clone()\n         }\n     }\n "}, {"sha": "216890d59ad6c53ceddf76629618caa33fd7e541", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7637fd588bfee93d627474a18dcbf11a81803665/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=7637fd588bfee93d627474a18dcbf11a81803665", "patch": "@@ -239,7 +239,20 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n             let val = cache.get_value(&command.args[0])?;\n             let results = select(&val, &command.args[1]).unwrap();\n             let pat = string_to_value(&command.args[2], cache);\n-            results.len() == 1 && results[0] == pat.as_ref()\n+            let is = results.len() == 1 && results[0] == pat.as_ref();\n+            if !command.negated && !is {\n+                return Err(CkError::FailedCheck(\n+                    format!(\n+                        \"{} matched to {:?}, but expected {:?}\",\n+                        &command.args[1],\n+                        results,\n+                        pat.as_ref()\n+                    ),\n+                    command,\n+                ));\n+            } else {\n+                is\n+            }\n         }\n         CommandKind::Set => {\n             // @set <name> = <path> <jsonpath>\n@@ -299,7 +312,10 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n \n fn string_to_value<'a>(s: &str, cache: &'a Cache) -> Cow<'a, Value> {\n     if s.starts_with(\"$\") {\n-        Cow::Borrowed(&cache.variables[&s[1..]])\n+        Cow::Borrowed(&cache.variables.get(&s[1..]).unwrap_or_else(|| {\n+            // FIXME(adotinthevoid): Show line number\n+            panic!(\"No variable: `{}`. Current state: `{:?}`\", &s[1..], cache.variables)\n+        }))\n     } else {\n         Cow::Owned(serde_json::from_str(s).unwrap())\n     }"}]}