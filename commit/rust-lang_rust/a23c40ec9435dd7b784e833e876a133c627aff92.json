{"sha": "a23c40ec9435dd7b784e833e876a133c627aff92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyM2M0MGVjOTQzNWRkN2I3ODRlODMzZTg3NmExMzNjNjI3YWZmOTI=", "commit": {"author": {"name": "Aaron Stillwell", "email": "aaron@stillwell.tech", "date": "2019-02-17T15:17:46Z"}, "committer": {"name": "Aaron Stillwell", "email": "aaron@stillwell.tech", "date": "2019-02-17T15:17:46Z"}, "message": "Add alias methods to PathBuf for underlying OsString\n\nImplemented the following methods on PathBuf which\nforward to the underlying OsString.\n\n- capacity\n- with_capacity\n- clear\n- reserve\n- reserve_exact\n- shrink_to_fit\n- shrink_to", "tree": {"sha": "7d5dc844c53141ca5d1c1e1433745bb70e7fcc73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d5dc844c53141ca5d1c1e1433745bb70e7fcc73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a23c40ec9435dd7b784e833e876a133c627aff92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a23c40ec9435dd7b784e833e876a133c627aff92", "html_url": "https://github.com/rust-lang/rust/commit/a23c40ec9435dd7b784e833e876a133c627aff92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a23c40ec9435dd7b784e833e876a133c627aff92/comments", "author": {"login": "aaronstillwell", "id": 6533711, "node_id": "MDQ6VXNlcjY1MzM3MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/6533711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaronstillwell", "html_url": "https://github.com/aaronstillwell", "followers_url": "https://api.github.com/users/aaronstillwell/followers", "following_url": "https://api.github.com/users/aaronstillwell/following{/other_user}", "gists_url": "https://api.github.com/users/aaronstillwell/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaronstillwell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaronstillwell/subscriptions", "organizations_url": "https://api.github.com/users/aaronstillwell/orgs", "repos_url": "https://api.github.com/users/aaronstillwell/repos", "events_url": "https://api.github.com/users/aaronstillwell/events{/privacy}", "received_events_url": "https://api.github.com/users/aaronstillwell/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aaronstillwell", "id": 6533711, "node_id": "MDQ6VXNlcjY1MzM3MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/6533711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aaronstillwell", "html_url": "https://github.com/aaronstillwell", "followers_url": "https://api.github.com/users/aaronstillwell/followers", "following_url": "https://api.github.com/users/aaronstillwell/following{/other_user}", "gists_url": "https://api.github.com/users/aaronstillwell/gists{/gist_id}", "starred_url": "https://api.github.com/users/aaronstillwell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aaronstillwell/subscriptions", "organizations_url": "https://api.github.com/users/aaronstillwell/orgs", "repos_url": "https://api.github.com/users/aaronstillwell/repos", "events_url": "https://api.github.com/users/aaronstillwell/events{/privacy}", "received_events_url": "https://api.github.com/users/aaronstillwell/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8af675a07576940ba24e3d91abd10b029b937946", "url": "https://api.github.com/repos/rust-lang/rust/commits/8af675a07576940ba24e3d91abd10b029b937946", "html_url": "https://github.com/rust-lang/rust/commit/8af675a07576940ba24e3d91abd10b029b937946"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "3e7949565507eca7b8e69e10b85e3249cbaf6f96", "filename": "src/libstd/path.rs", "status": "modified", "additions": 81, "deletions": 1, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/a23c40ec9435dd7b784e833e876a133c627aff92/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a23c40ec9435dd7b784e833e876a133c627aff92/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=a23c40ec9435dd7b784e833e876a133c627aff92", "patch": "@@ -1137,14 +1137,40 @@ impl PathBuf {\n     ///\n     /// ```\n     /// use std::path::PathBuf;\n-    ///\n+    /// \n     /// let path = PathBuf::new();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> PathBuf {\n         PathBuf { inner: OsString::new() }\n     }\n \n+    /// Creates a new `PathBuf` with a given capacity used to create the \n+    /// internal [`OsString`]. See [`with_capacity`] defined on [`OsString`].\n+    ///\n+    /// # Examples\n+    /// \n+    /// ```\n+    /// use std::path::PathBuf;\n+    /// \n+    /// let path = PathBuf::with_capacity(10);\n+    /// let capacity = path.capacity();\n+    /// \n+    /// // This push is done without reallocating\n+    /// path.push(r\"C:\\\");\n+    ///\n+    /// assert_eq!(capacity, path.capacity());\n+    /// ```\n+    /// \n+    /// [`with_capacity`]: ../ffi/struct.OsString.html#method.with_capacity\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[stable(feature = \"path_buf_os_string_methods\", since = \"1.33.0\")]\n+    pub fn with_capacity(capacity: usize) -> PathBuf {\n+        PathBuf {\n+            inner: OsString::with_capacity(capacity)\n+        }\n+    }\n+\n     /// Coerces to a [`Path`] slice.\n     ///\n     /// [`Path`]: struct.Path.html\n@@ -1373,6 +1399,60 @@ impl PathBuf {\n         let rw = Box::into_raw(self.inner.into_boxed_os_str()) as *mut Path;\n         unsafe { Box::from_raw(rw) }\n     }\n+\n+    /// Invokes [`capacity`] on the underlying instance of [`OsString`].\n+    ///\n+    /// [`capacity`]: ../ffi/struct.OsString.html#method.capacity\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[stable(feature = \"path_buf_os_string_methods\", since = \"1.33.0\")]\n+    pub fn capacity(self) -> usize {\n+        self.inner.capacity()\n+    }\n+\n+    /// Invokes [`clear`] on the underlying instance of [`OsString`].\n+    ///\n+    /// [`clear`]: ../ffi/struct.OsString.html#method.clear\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[stable(feature = \"path_buf_os_string_methods\", since = \"1.33.0\")]\n+    pub fn clear(mut self) {\n+        self.inner.clear()\n+    }\n+\n+    /// Invokes [`reserve`] on the underlying instance of [`OsString`].\n+    ///\n+    /// [`reserve`]: ../ffi/struct.OsString.html#method.reserve\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[stable(feature = \"path_buf_os_string_methods\", since = \"1.33.0\")]\n+    pub fn reserve(mut self, additional: usize) {\n+        self.inner.reserve(additional)\n+    }\n+\n+    /// Invokes [`reserve_exact`] on the underlying instance of [`OsString`].\n+    ///\n+    /// [`reserve_exact`]: ../ffi/struct.OsString.html#method.reserve_exact\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[stable(feature = \"path_buf_os_string_methods\", since = \"1.33.0\")]\n+    pub fn reserve_exact(mut self, additional: usize) {\n+        self.inner.reserve_exact(additional)\n+    }\n+\n+    /// Invokes [`shrink_to_fit`] on the underlying instance of [`OsString`].\n+    ///\n+    /// [`shrink_to_fit`]: ../ffi/struct.OsString.html#method.shrink_to_fit\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[stable(feature = \"path_buf_os_string_methods\", since = \"1.33.0\")]\n+    pub fn shrink_to_fit(mut self) {\n+        self.inner.shrink_to_fit()\n+    }\n+\n+    /// Invokes [`shrink_to`] on the underlying instance of [`OsString`].\n+    ///\n+    /// [`shrink_to`]: ../ffi/struct.OsString.html#method.shrink_to\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[stable(feature = \"path_buf_os_string_methods\", since = \"1.33.0\")]\n+    pub fn shrink_to(mut self, min_capacity: usize) {\n+        self.inner.shrink_to(min_capacity)\n+    }\n }\n \n #[stable(feature = \"box_from_path\", since = \"1.17.0\")]"}]}