{"sha": "98fdcb0b9d8b66a5feef1e45c06aeec93919d254", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZmRjYjBiOWQ4YjY2YTVmZWVmMWU0NWMwNmFlZWM5MzkxOWQyNTQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-08T03:34:57Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-08T03:34:57Z"}, "message": "librustc: De-mode pattern bindings. r=nmatsakis", "tree": {"sha": "d1d01fe8cf77c4be5a2331b606a2de7774e380a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1d01fe8cf77c4be5a2331b606a2de7774e380a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98fdcb0b9d8b66a5feef1e45c06aeec93919d254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98fdcb0b9d8b66a5feef1e45c06aeec93919d254", "html_url": "https://github.com/rust-lang/rust/commit/98fdcb0b9d8b66a5feef1e45c06aeec93919d254", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "184f5102b37c9a52342382fe9e88144a62cd9782", "url": "https://api.github.com/repos/rust-lang/rust/commits/184f5102b37c9a52342382fe9e88144a62cd9782", "html_url": "https://github.com/rust-lang/rust/commit/184f5102b37c9a52342382fe9e88144a62cd9782"}], "stats": {"total": 207, "additions": 99, "deletions": 108}, "files": [{"sha": "91c0d03657724a818bb5293ce47057884bdd8a23", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=98fdcb0b9d8b66a5feef1e45c06aeec93919d254", "patch": "@@ -248,12 +248,12 @@ fn compile_upto(sess: Session, cfg: ast::crate_cfg,\n         time(time_passes, ~\"loop checking\", ||\n              middle::check_loop::check_crate(ty_cx, crate));\n \n-        time(time_passes, ~\"alt checking\", ||\n-             middle::check_alt::check_crate(ty_cx, method_map, crate));\n-\n         time(time_passes, ~\"mode computation\", ||\n              middle::mode::compute_modes(ty_cx, method_map, crate));\n \n+        time(time_passes, ~\"alt checking\", ||\n+             middle::check_alt::check_crate(ty_cx, method_map, crate));\n+\n         let last_use_map =\n             time(time_passes, ~\"liveness checking\", ||\n                  middle::liveness::check_crate(ty_cx, method_map, crate));"}, {"sha": "eafbe8b16abcf1a8a41501105f3b5e15800447cf", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=98fdcb0b9d8b66a5feef1e45c06aeec93919d254", "patch": "@@ -529,20 +529,9 @@ impl gather_loan_ctxt {\n                         self.guarantee_valid(cmt, mutbl, scope_r);\n                     }\n                   }\n-                  ast::bind_by_implicit_ref => {\n-                    // Note: there is a discussion of the function of\n-                    // cat_discr in the method preserve():\n-                    let cmt1 = self.bccx.cat_discr(cmt, alt_id);\n-                    let arm_scope = ty::re_scope(arm_id);\n-\n-                    // We used to remember the mutability of the location\n-                    // that this binding refers to and use it later when\n-                    // categorizing the binding.  This hack is being\n-                    // removed in favor of ref mode bindings.\n-                    //\n-                    // self.bccx.binding_map.insert(pat.id, cmt1.mutbl);\n-\n-                    self.guarantee_valid(cmt1, m_const, arm_scope);\n+                  ast::bind_infer => {\n+                    // Nothing to do here; this is either a copy or a move;\n+                    // thus either way there is nothing to check. Yay!\n                   }\n                 }\n               }"}, {"sha": "737b0892763f5b9c3ed61b5d59abbf17379425c0", "filename": "src/librustc/middle/check_alt.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs?ref=98fdcb0b9d8b66a5feef1e45c06aeec93919d254", "patch": "@@ -592,15 +592,25 @@ fn check_legality_of_move_bindings(cx: @AltCheckCtxt,\n     let mut by_ref_span = None;\n     let mut any_by_move = false;\n     for pats.each |pat| {\n-        do pat_bindings(def_map, *pat) |bm, _id, span, _path| {\n+        do pat_bindings(def_map, *pat) |bm, id, span, _path| {\n             match bm {\n-                bind_by_ref(_) | bind_by_implicit_ref => {\n+                bind_by_ref(_) => {\n                     by_ref_span = Some(span);\n                 }\n                 bind_by_move => {\n                     any_by_move = true;\n                 }\n-                _ => { }\n+                bind_by_value => {}\n+                bind_infer => {\n+                    match cx.tcx.value_modes.find(id) {\n+                        Some(MoveValue) => any_by_move = true,\n+                        Some(CopyValue) | Some(ReadValue) => {}\n+                        None => {\n+                            cx.tcx.sess.span_bug(span, ~\"no mode for pat \\\n+                                                         binding\");\n+                        }\n+                    }\n+                }\n             }\n         }\n     }"}, {"sha": "1b007c8c4b772f178c35022b9c65f214a0ab77a6", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=98fdcb0b9d8b66a5feef1e45c06aeec93919d254", "patch": "@@ -767,27 +767,6 @@ fn check_item_non_camel_case_types(cx: ty::ctxt, it: @ast::item) {\n     }\n }\n \n-fn check_pat(tcx: ty::ctxt, pat: @ast::pat) {\n-    debug!(\"lint check_pat pat=%s\", pat_to_str(pat, tcx.sess.intr()));\n-\n-    do pat_bindings(tcx.def_map, pat) |binding_mode, id, span, path| {\n-        match binding_mode {\n-          ast::bind_by_ref(_) | ast::bind_by_value | ast::bind_by_move => {}\n-          ast::bind_by_implicit_ref => {\n-            let pat_ty = ty::node_id_to_type(tcx, id);\n-            let kind = ty::type_kind(tcx, pat_ty);\n-            if !ty::kind_is_safe_for_default_mode(kind) {\n-                tcx.sess.span_lint(\n-                    deprecated_pattern, id, id,\n-                    span,\n-                    fmt!(\"binding `%s` should use ref or copy mode\",\n-                         tcx.sess.str_of(path_to_ident(path))));\n-            }\n-          }\n-        }\n-    }\n-}\n-\n fn check_fn(tcx: ty::ctxt, fk: visit::fn_kind, decl: ast::fn_decl,\n             _body: ast::blk, span: span, id: ast::node_id) {\n     debug!(\"lint check_fn fk=%? id=%?\", fk, id);\n@@ -904,8 +883,6 @@ fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n             check_item(it, tcx),\n         visit_fn: |fk, decl, body, span, id|\n             check_fn(tcx, fk, decl, body, span, id),\n-        visit_pat: |pat|\n-            check_pat(tcx, pat),\n         .. *visit::default_simple_visitor()\n     });\n     visit::visit_crate(*crate, (), v);"}, {"sha": "e8fcbf123562cacfe303ffb8039532ef54643ea1", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=98fdcb0b9d8b66a5feef1e45c06aeec93919d254", "patch": "@@ -390,9 +390,7 @@ impl IrMaps {\n           Arg(id, _, by_copy) |\n           Local(LocalInfo {id: id, kind: FromLetNoInitializer, _}) |\n           Local(LocalInfo {id: id, kind: FromLetWithInitializer, _}) |\n-          Local(LocalInfo {id: id, kind: FromMatch(bind_by_value), _}) |\n-          Local(LocalInfo {id: id, kind: FromMatch(bind_by_ref(_)), _}) |\n-          Local(LocalInfo {id: id, kind: FromMatch(bind_by_move), _}) => {\n+          Local(LocalInfo {id: id, kind: FromMatch(_), _}) => {\n             let v = match self.last_use_map.find(expr_id) {\n               Some(v) => v,\n               None => {\n@@ -405,8 +403,7 @@ impl IrMaps {\n             (*v).push(id);\n           }\n           Arg(_, _, by_ref) |\n-          Arg(_, _, by_val) | Self | ImplicitRet |\n-          Local(LocalInfo {kind: FromMatch(bind_by_implicit_ref), _}) => {\n+          Arg(_, _, by_val) | Self | ImplicitRet => {\n             debug!(\"--but it is not owned\");\n           }\n         }"}, {"sha": "9f06cf6c7ce7824b369fc48436a0931c922150aa", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=98fdcb0b9d8b66a5feef1e45c06aeec93919d254", "patch": "@@ -636,28 +636,12 @@ impl &mem_categorization_ctxt {\n               mutbl:m, ty:expr_ty}\n           }\n \n-          ast::def_binding(vid, ast::bind_by_value) |\n-          ast::def_binding(vid, ast::bind_by_move)  |\n-          ast::def_binding(vid, ast::bind_by_ref(_)) => {\n+          ast::def_binding(vid, _) => {\n             // by-value/by-ref bindings are local variables\n             @{id:id, span:span,\n               cat:cat_local(vid), lp:Some(@lp_local(vid)),\n               mutbl:m_imm, ty:expr_ty}\n           }\n-\n-          ast::def_binding(pid, ast::bind_by_implicit_ref) => {\n-            // implicit-by-ref bindings are \"special\" since they are\n-            // implicit pointers.\n-\n-            // Technically, the mutability is not always imm, but we\n-            // (choose to be) unsound for the moment since these\n-            // implicit refs are going away and it reduces external\n-            // dependencies.\n-\n-            @{id:id, span:span,\n-              cat:cat_binding(pid), lp:None,\n-              mutbl:m_imm, ty:expr_ty}\n-          }\n         }\n     }\n "}, {"sha": "91ec4b8ffba3412a983d2555d903c62f3a13d2be", "filename": "src/librustc/middle/mode.rs", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fmiddle%2Fmode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fmiddle%2Fmode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmode.rs?ref=98fdcb0b9d8b66a5feef1e45c06aeec93919d254", "patch": "@@ -1,14 +1,16 @@\n+use middle::pat_util;\n use middle::ty;\n use middle::ty::{CopyValue, MoveValue, ReadValue, ValueMode, ctxt};\n use middle::typeck::{method_map, method_map_entry};\n \n use core::vec;\n use std::map::HashMap;\n-use syntax::ast::{box, by_copy, by_move, by_ref, by_val, crate, deref, expr};\n-use syntax::ast::{expr_addr_of, expr_assign, expr_assign_op, expr_binary};\n-use syntax::ast::{expr_call, expr_copy, expr_field, expr_index, expr_match};\n-use syntax::ast::{expr_method_call, expr_paren, expr_path, expr_swap};\n-use syntax::ast::{expr_unary, neg, node_id, not, sty_uniq, sty_value, uniq};\n+use syntax::ast::{bind_infer, box, by_copy, by_move, by_ref, by_val, crate};\n+use syntax::ast::{deref, expr, expr_addr_of, expr_assign, expr_assign_op};\n+use syntax::ast::{expr_binary, expr_call, expr_copy, expr_field, expr_index};\n+use syntax::ast::{expr_match, expr_method_call, expr_paren, expr_path};\n+use syntax::ast::{expr_swap, expr_unary, neg, node_id, not, pat, pat_ident};\n+use syntax::ast::{sty_uniq, sty_value, uniq};\n use syntax::visit;\n use syntax::visit::vt;\n \n@@ -166,18 +168,21 @@ fn compute_modes_for_expr(expr: @expr,\n             record_mode_for_expr(expr, cx);\n         }\n         expr_match(head, ref arms) => {\n+            // We must do this first so that `arms_have_by_move_bindings`\n+            // below knows which bindings are moves.\n+            for arms.each |arm| {\n+                (v.visit_arm)(*arm, cx, v);\n+            }\n+\n             let by_move_bindings_present =\n-                pat_util::arms_have_by_move_bindings(cx.tcx.def_map, *arms);\n+                pat_util::arms_have_by_move_bindings(cx.tcx, *arms);\n             if by_move_bindings_present {\n                 // Propagate the current mode flag downward.\n                 visit::visit_expr(expr, cx, v);\n             } else {\n                 // We aren't moving into any pattern, so this is just a read.\n                 let head_cx = VisitContext { mode: ReadValue, ..cx };\n                 compute_modes_for_expr(head, head_cx, v);\n-                for arms.each |arm| {\n-                    (v.visit_arm)(*arm, cx, v);\n-                }\n             }\n         }\n         _ => {\n@@ -188,9 +193,28 @@ fn compute_modes_for_expr(expr: @expr,\n     }\n }\n \n+fn compute_modes_for_pat(pat: @pat,\n+                         &&cx: VisitContext,\n+                         v: vt<VisitContext>) {\n+    match pat.node {\n+        pat_ident(bind_infer, _, _)\n+                if pat_util::pat_is_binding(cx.tcx.def_map, pat) => {\n+            if ty::type_implicitly_moves(cx.tcx, ty::pat_ty(cx.tcx, pat)) {\n+                cx.tcx.value_modes.insert(pat.id, MoveValue);\n+            } else {\n+                cx.tcx.value_modes.insert(pat.id, CopyValue);\n+            }\n+        }\n+        _ => {}\n+    }\n+\n+    visit::visit_pat(pat, cx, v);\n+}\n+\n pub fn compute_modes(tcx: ctxt, method_map: method_map, crate: @crate) {\n     let visitor = visit::mk_vt(@{\n         visit_expr: compute_modes_for_expr,\n+        visit_pat: compute_modes_for_pat,\n         .. *visit::default_visitor()\n     });\n     let callee_cx = VisitContext {"}, {"sha": "68210f19438466056cd6d3f0c952e2e413e660be", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=98fdcb0b9d8b66a5feef1e45c06aeec93919d254", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::ty::{CopyValue, MoveValue, ReadValue};\n+\n use syntax::ast::*;\n use syntax::ast_util;\n use syntax::ast_util::{path_to_ident, respan, walk_pat};\n@@ -93,16 +95,25 @@ fn pat_binding_ids(dm: resolve::DefMap, pat: @pat) -> ~[node_id] {\n     return found;\n }\n \n-fn arms_have_by_move_bindings(dm: resolve::DefMap, +arms: &[arm]) -> bool {\n+fn arms_have_by_move_bindings(tcx: ty::ctxt, +arms: &[arm]) -> bool {\n     for arms.each |arm| {\n         for arm.pats.each |pat| {\n             let mut found = false;\n-            do pat_bindings(dm, *pat) |binding_mode, _node_id, _span, _path| {\n+            do pat_bindings(tcx.def_map, *pat)\n+                    |binding_mode, node_id, span, _path| {\n                 match binding_mode {\n                     bind_by_move => found = true,\n-                    bind_by_implicit_ref |\n-                    bind_by_ref(*) |\n-                    bind_by_value => {}\n+                    bind_infer => {\n+                        match tcx.value_modes.find(node_id) {\n+                            Some(MoveValue) => found = true,\n+                            Some(CopyValue) | Some(ReadValue) => {}\n+                            None => {\n+                                tcx.sess.span_bug(span, ~\"pat binding not in \\\n+                                                          value mode map\");\n+                            }\n+                        }\n+                    }\n+                    bind_by_ref(*) | bind_by_value => {}\n                 }\n             }\n             if found { return true; }"}, {"sha": "1e72e9dfff9b0bf0cd542a26367aa9c4b4b3b39a", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=98fdcb0b9d8b66a5feef1e45c06aeec93919d254", "patch": "@@ -17,7 +17,6 @@ use middle::lang_items::LanguageItems;\n use middle::lint::{deny, allow, forbid, level, unused_imports, warn};\n use middle::pat_util::{pat_bindings};\n use syntax::ast::{_mod, add, arm};\n-use syntax::ast::{bind_by_ref, bind_by_implicit_ref, bind_by_value};\n use syntax::ast::{bitand, bitor, bitxor};\n use syntax::ast::{binding_mode, blk, capture_clause, class_ctor, class_dtor};\n use syntax::ast::{crate, crate_num, decl_item};"}, {"sha": "fbb51df39f7dce9f6349f6f68b445afa36cd6a22", "filename": "src/librustc/middle/trans/alt.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs?ref=98fdcb0b9d8b66a5feef1e45c06aeec93919d254", "patch": "@@ -154,6 +154,7 @@ use syntax::ast::def_id;\n use syntax::codemap::span;\n use syntax::print::pprust::pat_to_str;\n use middle::resolve::DefMap;\n+use middle::ty::{CopyValue, MoveValue, ReadValue};\n use back::abi;\n use std::map::HashMap;\n use dvec::DVec;\n@@ -1394,7 +1395,7 @@ fn trans_alt_inner(scope_cx: block,\n         // Note that we use the names because each binding will have many ids\n         // from the various alternatives.\n         let bindings_map = std::map::HashMap();\n-        do pat_bindings(tcx.def_map, arm.pats[0]) |bm, p_id, _s, path| {\n+        do pat_bindings(tcx.def_map, arm.pats[0]) |bm, p_id, s, path| {\n             let ident = path_to_ident(path);\n             let variable_ty = node_id_type(bcx, p_id);\n             let llvariable_ty = type_of::type_of(bcx.ccx(), variable_ty);\n@@ -1408,9 +1409,18 @@ fn trans_alt_inner(scope_cx: block,\n                     llmatch = alloca(bcx, T_ptr(llvariable_ty));\n                     trmode = TrByValue(is_move, alloca(bcx, llvariable_ty));\n                 }\n-                ast::bind_by_implicit_ref => {\n+                ast::bind_infer => {\n+                    // in this case also, the type of the variable will be T,\n+                    // but we need to store a *T\n+                    let is_move = match tcx.value_modes.find(p_id) {\n+                        None => {\n+                            tcx.sess.span_bug(s, ~\"no value mode\");\n+                        }\n+                        Some(MoveValue) => true,\n+                        Some(CopyValue) | Some(ReadValue) => false\n+                    };\n                     llmatch = alloca(bcx, T_ptr(llvariable_ty));\n-                    trmode = TrByImplicitRef;\n+                    trmode = TrByValue(is_move, alloca(bcx, llvariable_ty));\n                 }\n                 ast::bind_by_ref(_) => {\n                     llmatch = alloca(bcx, llvariable_ty);"}, {"sha": "48c6aa3bf73edac50f66d12e336117a066757c29", "filename": "src/librustc/middle/typeck/check/alt.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs?ref=98fdcb0b9d8b66a5feef1e45c06aeec93919d254", "patch": "@@ -358,13 +358,7 @@ fn check_pat(pcx: pat_ctxt, pat: @ast::pat, expected: ty::t) {\n             demand::eqtype(fcx, pat.span, region_ty, typ);\n           }\n           // otherwise the type of x is the expected type T\n-          ast::bind_by_value => {\n-            demand::eqtype(fcx, pat.span, expected, typ);\n-          }\n-          ast::bind_by_move => {\n-            demand::eqtype(fcx, pat.span, expected, typ);\n-          }\n-          ast::bind_by_implicit_ref => {\n+          ast::bind_by_value | ast::bind_by_move | ast::bind_infer => {\n             demand::eqtype(fcx, pat.span, expected, typ);\n           }\n         }"}, {"sha": "eb96e074a8258a9ad720006cea4785d9b82e0b36", "filename": "src/libstd/json.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=98fdcb0b9d8b66a5feef1e45c06aeec93919d254", "patch": "@@ -291,7 +291,7 @@ pub impl<\n             Number(v) => v.serialize(s),\n             String(ref v) => v.serialize(s),\n             Boolean(v) => v.serialize(s),\n-            List(v) => v.serialize(s),\n+            List(ref v) => v.serialize(s),\n             Object(ref v) => {\n                 do s.emit_rec || {\n                     let mut idx = 0;\n@@ -927,8 +927,8 @@ impl Json : Eq {\n                 match *other { Boolean(b1) => b0 == b1, _ => false },\n             Null =>\n                 match *other { Null => true, _ => false },\n-            List(v0) =>\n-                match *other { List(v1) => v0 == v1, _ => false },\n+            List(ref v0) =>\n+                match *other { List(ref v1) => v0 == v1, _ => false },\n             Object(ref d0) => {\n                 match *other {\n                     Object(ref d1) => {\n@@ -981,10 +981,10 @@ impl Json : Ord {\n                 }\n             }\n \n-            List(l0) => {\n+            List(ref l0) => {\n                 match *other {\n                     Number(_) | String(_) | Boolean(_) => false,\n-                    List(l1) => l0 < l1,\n+                    List(ref l1) => (*l0) < (*l1),\n                     Object(_) | Null => true\n                 }\n             }"}, {"sha": "aeb760375352ac28d266b156ab47cfdf54ce6cee", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=98fdcb0b9d8b66a5feef1e45c06aeec93919d254", "patch": "@@ -309,7 +309,7 @@ enum binding_mode {\n     bind_by_value,\n     bind_by_move,\n     bind_by_ref(ast::mutability),\n-    bind_by_implicit_ref\n+    bind_infer\n }\n \n impl binding_mode : to_bytes::IterBytes {\n@@ -322,7 +322,7 @@ impl binding_mode : to_bytes::IterBytes {\n           bind_by_ref(ref m) =>\n           to_bytes::iter_bytes_2(&2u8, m, lsb0, f),\n \n-          bind_by_implicit_ref =>\n+          bind_infer =>\n           3u8.iter_bytes(lsb0, f),\n         }\n     }\n@@ -349,9 +349,9 @@ impl binding_mode : cmp::Eq {\n                     _ => false\n                 }\n             }\n-            bind_by_implicit_ref => {\n+            bind_infer => {\n                 match (*other) {\n-                    bind_by_implicit_ref => true,\n+                    bind_infer => true,\n                     _ => false\n                 }\n             }"}, {"sha": "66d9e44ba2e383cbaeb4bab51002d5ae8ec264f8", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=98fdcb0b9d8b66a5feef1e45c06aeec93919d254", "patch": "@@ -134,7 +134,7 @@ impl ext_ctxt: ext_ctxt_ast_builder {\n             @{node: {is_mutbl: false,\n                      ty: self.ty_infer(),\n                      pat: @{id: self.next_id(),\n-                            node: ast::pat_ident(ast::bind_by_implicit_ref,\n+                            node: ast::pat_ident(ast::bind_infer,\n                                                  path(~[ident],\n                                                       dummy_sp()),\n                                                  None),"}, {"sha": "1bd3f970573c4053be3fa9dd978a26eb83e6c97a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=98fdcb0b9d8b66a5feef1e45c06aeec93919d254", "patch": "@@ -23,7 +23,7 @@ use obsolete::{\n     ObsoleteModeInFnType, ObsoleteMoveInit, ObsoleteBinaryMove,\n };\n use ast::{_mod, add, arg, arm, attribute,\n-             bind_by_ref, bind_by_implicit_ref, bind_by_value, bind_by_move,\n+             bind_by_ref, bind_infer, bind_by_value, bind_by_move,\n              bitand, bitor, bitxor, blk, blk_check_mode, box, by_copy,\n              by_move, by_ref, by_val, capture_clause,\n              capture_item, class_immutable, class_mutable,\n@@ -1925,9 +1925,7 @@ impl Parser {\n             } else {\n                 subpat = @{\n                     id: self.get_id(),\n-                    node: pat_ident(bind_by_implicit_ref,\n-                                    fieldpath,\n-                                    None),\n+                    node: pat_ident(bind_infer, fieldpath, None),\n                     span: self.last_span\n                 };\n             }\n@@ -2054,9 +2052,7 @@ impl Parser {\n                 } else if self.eat_keyword(~\"move\") {\n                     binding_mode = bind_by_move;\n                 } else if refutable {\n-                    // XXX: Should be bind_by_value, but that's not\n-                    // backward compatible.\n-                    binding_mode = bind_by_implicit_ref;\n+                    binding_mode = bind_infer;\n                 } else {\n                     binding_mode = bind_by_value;\n                 }"}, {"sha": "d9642e08475f1c2afbc93d519028f50652503ff4", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98fdcb0b9d8b66a5feef1e45c06aeec93919d254/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=98fdcb0b9d8b66a5feef1e45c06aeec93919d254", "patch": "@@ -1573,7 +1573,7 @@ fn print_pat(s: ps, &&pat: @ast::pat, refutable: bool) {\n                   ast::bind_by_value => {\n                       word_nbsp(s, ~\"copy\");\n                   }\n-                  ast::bind_by_implicit_ref => {}\n+                  ast::bind_infer => {}\n               }\n           }\n           print_path(s, path, true);"}]}