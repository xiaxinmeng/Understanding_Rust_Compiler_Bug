{"sha": "9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllYjNhN2NlYWZkMWUyYzE5MjQxNzdjYWExOGM3Y2MwYzI1YjQxM2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-11T22:00:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-11T22:00:00Z"}, "message": "Auto merge of #79349 - Nemo157:issue-79201, r=jyn514\n\nApply `doc(cfg)` from parent items while collecting trait impls\n\nBecause trait impls bypass the standard `clean` hierarchy they do not participate in the `propagate_doc_cfg` pass, so instead we need to pre-collect all possible `doc(cfg)` attributes that will apply to them when cleaning.\n\nfixes #79201", "tree": {"sha": "a68004e4e691ad675d5faa8ef2722ecfd13ba126", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a68004e4e691ad675d5faa8ef2722ecfd13ba126"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e", "html_url": "https://github.com/rust-lang/rust/commit/9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2225ee1b62ff089917434aefd9b2bf509cfa087f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2225ee1b62ff089917434aefd9b2bf509cfa087f", "html_url": "https://github.com/rust-lang/rust/commit/2225ee1b62ff089917434aefd9b2bf509cfa087f"}, {"sha": "d93f1d6c04fab017a24d868dd766a290321e636c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d93f1d6c04fab017a24d868dd766a290321e636c", "html_url": "https://github.com/rust-lang/rust/commit/d93f1d6c04fab017a24d868dd766a290321e636c"}], "stats": {"total": 84, "additions": 76, "deletions": 8}, "files": [{"sha": "cef0e36505c6f691dd4b7c6f0ae7f4b8e9f10d91", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e", "patch": "@@ -339,9 +339,6 @@ crate fn build_impl(\n         return;\n     }\n \n-    let attrs = merge_attrs(cx, parent_module.into(), load_attrs(cx, did), attrs);\n-    debug!(\"merged_attrs={:?}\", attrs);\n-\n     let tcx = cx.tcx;\n     let associated_trait = tcx.impl_trait_ref(did);\n \n@@ -435,7 +432,7 @@ crate fn build_impl(\n \n     debug!(\"build_impl: impl {:?} for {:?}\", trait_.def_id(), for_.def_id());\n \n-    ret.push(clean::Item::from_def_id_and_parts(\n+    let mut item = clean::Item::from_def_id_and_parts(\n         did,\n         None,\n         clean::ImplItem(clean::Impl {\n@@ -450,7 +447,10 @@ crate fn build_impl(\n             blanket_impl: None,\n         }),\n         cx,\n-    ));\n+    );\n+    item.attrs = merge_attrs(cx, parent_module.into(), load_attrs(cx, did), attrs);\n+    debug!(\"merged_attrs={:?}\", item.attrs);\n+    ret.push(item);\n }\n \n fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>) -> clean::Module {"}, {"sha": "1e9bc67de04b833bccf478cae1419f8726016ea7", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e", "patch": "@@ -5,6 +5,7 @@ use crate::fold::DocFolder;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_middle::ty::DefIdTree;\n use rustc_span::symbol::sym;\n \n crate const COLLECT_TRAIT_IMPLS: Pass = Pass {\n@@ -90,7 +91,32 @@ crate fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n         for &impl_node in cx.tcx.hir().trait_impls(trait_did) {\n             let impl_did = cx.tcx.hir().local_def_id(impl_node);\n             cx.tcx.sess.time(\"build_local_trait_impl\", || {\n-                inline::build_impl(cx, None, impl_did.to_def_id(), None, &mut new_items);\n+                let mut extra_attrs = Vec::new();\n+                let mut parent = cx.tcx.parent(impl_did.to_def_id());\n+                while let Some(did) = parent {\n+                    extra_attrs.extend(\n+                        cx.tcx\n+                            .get_attrs(did)\n+                            .iter()\n+                            .filter(|attr| attr.has_name(sym::doc))\n+                            .filter(|attr| {\n+                                if let Some([attr]) = attr.meta_item_list().as_deref() {\n+                                    attr.has_name(sym::cfg)\n+                                } else {\n+                                    false\n+                                }\n+                            })\n+                            .cloned(),\n+                    );\n+                    parent = cx.tcx.parent(did);\n+                }\n+                inline::build_impl(\n+                    cx,\n+                    None,\n+                    impl_did.to_def_id(),\n+                    Some(&extra_attrs),\n+                    &mut new_items,\n+                );\n             });\n         }\n     }"}, {"sha": "51a5837829909cc546b11e6e9fe6a341e85b652c", "filename": "src/test/rustdoc/doc-cfg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-cfg.rs?ref=9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e", "patch": "@@ -25,12 +25,13 @@ pub mod unix_only {\n     // @has doc_cfg/unix_only/trait.ArmOnly.html \\\n     //  '//*[@id=\"main\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n     //  'This is supported on Unix and ARM only.'\n-    // @count - '//*[@class=\"stab portability\"]' 2\n+    // @count - '//*[@class=\"stab portability\"]' 1\n     #[doc(cfg(target_arch = \"arm\"))]\n     pub trait ArmOnly {\n         fn unix_and_arm_only_function();\n     }\n \n+    #[doc(cfg(target_arch = \"arm\"))]\n     impl ArmOnly for super::Portable {\n         fn unix_and_arm_only_function() {}\n     }"}, {"sha": "f95d79cd493ea4cd7b4e23402a97c1a6feff8e1f", "filename": "src/test/rustdoc/issue-79201.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e/src%2Ftest%2Frustdoc%2Fissue-79201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e/src%2Ftest%2Frustdoc%2Fissue-79201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-79201.rs?ref=9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e", "patch": "@@ -0,0 +1,41 @@\n+#![feature(doc_cfg)]\n+\n+// @has 'issue_79201/trait.Foo.html'\n+// @count   - '//*[@class=\"stab portability\"]' 6\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature foo-root'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature foo-public-mod'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature foo-private-mod'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature foo-fn'\n+// @matches - '//*[@class=\"stab portability\"]' 'crate feature foo-method'\n+\n+pub trait Foo {}\n+\n+#[doc(cfg(feature = \"foo-root\"))]\n+impl crate::Foo for usize {}\n+\n+#[doc(cfg(feature = \"foo-public-mod\"))]\n+pub mod public {\n+    impl crate::Foo for u8 {}\n+}\n+\n+#[doc(cfg(feature = \"foo-private-mod\"))]\n+mod private {\n+    impl crate::Foo for u16 {}\n+}\n+\n+#[doc(cfg(feature = \"foo-const\"))]\n+const _: () = {\n+    impl crate::Foo for u32 {}\n+};\n+\n+#[doc(cfg(feature = \"foo-fn\"))]\n+fn __() {\n+    impl crate::Foo for u64 {}\n+}\n+\n+#[doc(cfg(feature = \"foo-method\"))]\n+impl dyn Foo {\n+    fn __() {\n+        impl crate::Foo for u128 {}\n+    }\n+}"}, {"sha": "ccef005173d92c6896c572c83281ae126328ceec", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=9eb3a7ceafd1e2c1924177caa18c7cc0c25b413e", "patch": "@@ -2442,7 +2442,7 @@ impl<'test> TestCx<'test> {\n             })\n         };\n         let mut diff = Command::new(\"diff\");\n-        diff.args(&[\"-u\", \"-r\"]).args(&[out_dir, &compare_dir]);\n+        diff.args(&[\"-u\", \"-r\"]).args(&[&compare_dir, out_dir]);\n \n         let output = if let Some(pager) = pager {\n             let diff_pid = diff.stdout(Stdio::piped()).spawn().expect(\"failed to run `diff`\");"}]}