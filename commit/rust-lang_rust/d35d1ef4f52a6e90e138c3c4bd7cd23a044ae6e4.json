{"sha": "d35d1ef4f52a6e90e138c3c4bd7cd23a044ae6e4", "node_id": "C_kwDOAAsO6NoAKGQzNWQxZWY0ZjUyYTZlOTBlMTM4YzNjNGJkN2NkMjNhMDQ0YWU2ZTQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-01-27T14:52:24Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-02T15:40:11Z"}, "message": "Remove unnecessary field", "tree": {"sha": "12a78991ef104b53536d20299d741725be706173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12a78991ef104b53536d20299d741725be706173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d35d1ef4f52a6e90e138c3c4bd7cd23a044ae6e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d35d1ef4f52a6e90e138c3c4bd7cd23a044ae6e4", "html_url": "https://github.com/rust-lang/rust/commit/d35d1ef4f52a6e90e138c3c4bd7cd23a044ae6e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d35d1ef4f52a6e90e138c3c4bd7cd23a044ae6e4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b49b8e2d52f421c45349214bc805710e6ba5da4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b49b8e2d52f421c45349214bc805710e6ba5da4", "html_url": "https://github.com/rust-lang/rust/commit/5b49b8e2d52f421c45349214bc805710e6ba5da4"}], "stats": {"total": 36, "additions": 12, "deletions": 24}, "files": [{"sha": "7231bc70904f208f90d9556f82f01d2fcc8b0a5b", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d35d1ef4f52a6e90e138c3c4bd7cd23a044ae6e4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35d1ef4f52a6e90e138c3c4bd7cd23a044ae6e4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=d35d1ef4f52a6e90e138c3c4bd7cd23a044ae6e4", "patch": "@@ -26,9 +26,6 @@ use super::InferResult;\n /// appear in the return type).\n #[derive(Clone, Debug)]\n pub struct OpaqueTypeDecl<'tcx> {\n-    /// The opaque type (`ty::Opaque`) for this declaration.\n-    pub opaque_type: Ty<'tcx>,\n-\n     /// The hidden types that have been inferred for this opaque type.\n     /// There can be multiple, but they are all `lub`ed together at the end\n     /// to obtain the canonical hidden type.\n@@ -82,11 +79,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             return Ok(InferOk { value: (), obligations: vec![] });\n         }\n         if self.defining_use_anchor.is_some() {\n-            let process = |a: Ty<'tcx>, b: Ty<'tcx>| {\n-                if !matches!(a.kind(), ty::Opaque(..)) {\n-                    return None;\n-                }\n-                self.fold_opaque_ty_new(a, cause.clone(), param_env, b)\n+            let process = |a: Ty<'tcx>, b: Ty<'tcx>| match *a.kind() {\n+                ty::Opaque(def_id, substs) => self.fold_opaque_ty_new(\n+                    OpaqueTypeKey { def_id, substs },\n+                    cause.clone(),\n+                    param_env,\n+                    b,\n+                ),\n+                _ => None,\n             };\n             if let Some(res) = process(a, b) {\n                 res\n@@ -118,7 +118,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             let origin = self.opaque_ty_origin_unchecked(key.def_id, cause.span);\n             let prev = self.inner.borrow_mut().opaque_types().register(\n                 key,\n-                opaque_type,\n                 OpaqueHiddenType { ty: hidden_ty, span: cause.span },\n                 origin,\n             );\n@@ -482,7 +481,7 @@ impl UseKind {\n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     fn fold_opaque_ty_new(\n         &self,\n-        opaque_type: Ty<'tcx>,\n+        opaque_type_key: OpaqueTypeKey<'tcx>,\n         cause: ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         hidden_ty: Ty<'tcx>,\n@@ -521,26 +520,17 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         //     let x = || foo(); // returns the Opaque assoc with `foo`\n         // }\n         // ```\n-        let opaque_type_key = opaque_type.expect_opaque_type();\n         if let Some(origin) = self.opaque_type_origin(opaque_type_key.def_id, cause.span) {\n-            return Some(self.fold_opaque_ty(\n-                opaque_type,\n-                cause,\n-                param_env,\n-                opaque_type_key,\n-                origin,\n-                hidden_ty,\n-            ));\n+            return Some(self.fold_opaque_ty(cause, param_env, opaque_type_key, origin, hidden_ty));\n         }\n \n-        debug!(?opaque_type, \"encountered opaque outside its definition scope\",);\n+        debug!(?opaque_type_key, \"encountered opaque outside its definition scope\",);\n         None\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n     fn fold_opaque_ty(\n         &self,\n-        opaque_type: Ty<'tcx>,\n         cause: ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n@@ -560,7 +550,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let mut obligations = vec![];\n         let prev = self.inner.borrow_mut().opaque_types().register(\n             OpaqueTypeKey { def_id, substs },\n-            opaque_type,\n             OpaqueHiddenType { ty: hidden_ty, span },\n             origin,\n         );"}, {"sha": "9b8f225ce367b650c28b5e0daa1cae3e64023d8b", "filename": "compiler/rustc_infer/src/infer/opaque_types/table.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d35d1ef4f52a6e90e138c3c4bd7cd23a044ae6e4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35d1ef4f52a6e90e138c3c4bd7cd23a044ae6e4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types%2Ftable.rs?ref=d35d1ef4f52a6e90e138c3c4bd7cd23a044ae6e4", "patch": "@@ -72,7 +72,6 @@ impl<'a, 'tcx> OpaqueTypeTable<'a, 'tcx> {\n     pub fn register(\n         &mut self,\n         key: OpaqueTypeKey<'tcx>,\n-        opaque_type: Ty<'tcx>,\n         hidden_type: OpaqueHiddenType<'tcx>,\n         origin: OpaqueTyOrigin,\n     ) -> Option<Ty<'tcx>> {\n@@ -81,7 +80,7 @@ impl<'a, 'tcx> OpaqueTypeTable<'a, 'tcx> {\n             self.undo_log.push(UndoLog::OpaqueTypes(key, Some(prev)));\n             return Some(prev.ty);\n         }\n-        let decl = OpaqueTypeDecl { opaque_type, hidden_type, origin };\n+        let decl = OpaqueTypeDecl { hidden_type, origin };\n         self.storage.opaque_types.insert(key, decl);\n         self.undo_log.push(UndoLog::OpaqueTypes(key, None));\n         None"}]}