{"sha": "0df39bfff7840800454d6704fe4eee646d1f0ec7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZjM5YmZmZjc4NDA4MDA0NTRkNjcwNGZlNGVlZTY0NmQxZjBlYzc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-12-17T13:08:09Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-12-18T09:44:26Z"}, "message": "Fix ?Sized where bound not being displayed at the correct place", "tree": {"sha": "557b9d40e8721ac0c918823950932d8d90033b84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/557b9d40e8721ac0c918823950932d8d90033b84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0df39bfff7840800454d6704fe4eee646d1f0ec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0df39bfff7840800454d6704fe4eee646d1f0ec7", "html_url": "https://github.com/rust-lang/rust/commit/0df39bfff7840800454d6704fe4eee646d1f0ec7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0df39bfff7840800454d6704fe4eee646d1f0ec7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdae618418abc58a1da5e565f2b124cdfebb5682", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdae618418abc58a1da5e565f2b124cdfebb5682", "html_url": "https://github.com/rust-lang/rust/commit/bdae618418abc58a1da5e565f2b124cdfebb5682"}], "stats": {"total": 46, "additions": 41, "deletions": 5}, "files": [{"sha": "914365b003e18472a7a909020138e70daca7bd61", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0df39bfff7840800454d6704fe4eee646d1f0ec7/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df39bfff7840800454d6704fe4eee646d1f0ec7/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=0df39bfff7840800454d6704fe4eee646d1f0ec7", "patch": "@@ -448,8 +448,7 @@ fn build_static(cx: &DocContext, did: DefId, mutable: bool) -> clean::Static {\n ///\n /// The inverse of this filtering logic can be found in the `Clean`\n /// implementation for `AssociatedType`\n-fn filter_non_trait_generics(trait_did: DefId, mut g: clean::Generics)\n-                             -> clean::Generics {\n+fn filter_non_trait_generics(trait_did: DefId, mut g: clean::Generics) -> clean::Generics {\n     for pred in &mut g.where_predicates {\n         match *pred {\n             clean::WherePredicate::BoundPredicate {"}, {"sha": "fe7dfc4477f96ce38c3e279e5d1a89dc4d8d44c1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0df39bfff7840800454d6704fe4eee646d1f0ec7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df39bfff7840800454d6704fe4eee646d1f0ec7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0df39bfff7840800454d6704fe4eee646d1f0ec7", "patch": "@@ -1190,16 +1190,36 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n pub struct Generics {\n     pub lifetimes: Vec<Lifetime>,\n     pub type_params: Vec<TyParam>,\n-    pub where_predicates: Vec<WherePredicate>\n+    pub where_predicates: Vec<WherePredicate>,\n }\n \n impl Clean<Generics> for hir::Generics {\n     fn clean(&self, cx: &DocContext) -> Generics {\n-        Generics {\n+        let mut g = Generics {\n             lifetimes: self.lifetimes.clean(cx),\n             type_params: self.ty_params.clean(cx),\n             where_predicates: self.where_clause.predicates.clean(cx)\n+        };\n+\n+        // Some duplicates are generated for ?Sized bounds between type params and where\n+        // predicates. The point in here is to move the bounds definitions from type params\n+        // to where predicates when such cases occur.\n+        for where_pred in &mut g.where_predicates {\n+            match *where_pred {\n+                WherePredicate::BoundPredicate { ty: Generic(ref name), ref mut bounds } => {\n+                    if bounds.is_empty() {\n+                        for type_params in &mut g.type_params {\n+                            if &type_params.name == name {\n+                                mem::swap(bounds, &mut type_params.bounds);\n+                                break\n+                            }\n+                        }\n+                    }\n+                }\n+                _ => continue,\n+            }\n         }\n+        g\n     }\n }\n \n@@ -1225,7 +1245,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n         let mut where_predicates = preds.predicates.to_vec().clean(cx);\n \n         // Type parameters and have a Sized bound by default unless removed with\n-        // ?Sized.  Scan through the predicates and mark any type parameter with\n+        // ?Sized. Scan through the predicates and mark any type parameter with\n         // a Sized bound, removing the bounds as we find them.\n         //\n         // Note that associated types also have a sized bound by default, but we"}, {"sha": "63ebb16e5e0096a961e4574829d2a14040cda39a", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0df39bfff7840800454d6704fe4eee646d1f0ec7/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df39bfff7840800454d6704fe4eee646d1f0ec7/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=0df39bfff7840800454d6704fe4eee646d1f0ec7", "patch": "@@ -38,6 +38,7 @@ pub fn where_clauses(cx: &DocContext, clauses: Vec<WP>) -> Vec<WP> {\n     let mut lifetimes = Vec::new();\n     let mut equalities = Vec::new();\n     let mut tybounds = Vec::new();\n+\n     for clause in clauses {\n         match clause {\n             WP::BoundPredicate { ty, bounds } => {"}, {"sha": "c175c839c0f21525a8659b0992d50889f00fb121", "filename": "src/test/rustdoc/where-sized.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0df39bfff7840800454d6704fe4eee646d1f0ec7/src%2Ftest%2Frustdoc%2Fwhere-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df39bfff7840800454d6704fe4eee646d1f0ec7/src%2Ftest%2Frustdoc%2Fwhere-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwhere-sized.rs?ref=0df39bfff7840800454d6704fe4eee646d1f0ec7", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has foo/fn.foo.html\n+// @has - '//*[@class=\"rust fn\"]' 'pub fn foo<X, Y: ?Sized>(_: &X)'\n+// @has - '//*[@class=\"rust fn\"]' 'where X: ?Sized,'\n+pub fn foo<X, Y: ?Sized>(_: &X) where X: ?Sized {}"}]}