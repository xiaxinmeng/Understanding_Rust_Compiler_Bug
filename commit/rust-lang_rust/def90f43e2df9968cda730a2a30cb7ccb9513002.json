{"sha": "def90f43e2df9968cda730a2a30cb7ccb9513002", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZjkwZjQzZTJkZjk5NjhjZGE3MzBhMmEzMGNiN2NjYjk1MTMwMDI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-04-10T10:55:34Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-04-11T00:55:30Z"}, "message": "Fix tests. Add Vec<u8> conversion to StrBuf.", "tree": {"sha": "e6c5f1ab3a51699595d15ffc96216e42aef68be5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6c5f1ab3a51699595d15ffc96216e42aef68be5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/def90f43e2df9968cda730a2a30cb7ccb9513002", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/def90f43e2df9968cda730a2a30cb7ccb9513002", "html_url": "https://github.com/rust-lang/rust/commit/def90f43e2df9968cda730a2a30cb7ccb9513002", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/def90f43e2df9968cda730a2a30cb7ccb9513002/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8e45ea7c054b4ad6fb82ec3a9fcf1736b4d7260", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8e45ea7c054b4ad6fb82ec3a9fcf1736b4d7260", "html_url": "https://github.com/rust-lang/rust/commit/d8e45ea7c054b4ad6fb82ec3a9fcf1736b4d7260"}], "stats": {"total": 148, "additions": 88, "deletions": 60}, "files": [{"sha": "9d08bf1766887247ef0b3c39fb2a5222e322ab3d", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/def90f43e2df9968cda730a2a30cb7ccb9513002/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/def90f43e2df9968cda730a2a30cb7ccb9513002/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=def90f43e2df9968cda730a2a30cb7ccb9513002", "patch": "@@ -1595,6 +1595,7 @@ pub type SetAlgebraItems<'a, T, H> =\n mod test_map {\n     use super::HashMap;\n     use std::cmp::Equiv;\n+    use std::hash::Hash;\n     use std::iter::{Iterator,range_inclusive,range_step_inclusive};\n     use std::local_data;\n     use std::vec;\n@@ -1607,6 +1608,12 @@ mod test_map {\n             this == *other\n         }\n     }\n+    impl<S: Writer> Hash<S> for KindaIntLike {\n+        fn hash(&self, state: &mut S) {\n+            let KindaIntLike(this) = *self;\n+            this.hash(state)\n+        }\n+    }\n \n     #[test]\n     fn test_create_capacity_zero() {\n@@ -1848,11 +1855,12 @@ mod test_map {\n     }\n \n     #[test]\n+    #[allow(experimental)]\n     fn test_pop_equiv() {\n         let mut m = HashMap::new();\n         m.insert(1, 2);\n-        assert_eq!(m.pop_equiv(&KindaIntLike(1), Some(2)));\n-        assert_eq!(m.pop_equiv(&KindaIntLike(1), None));\n+        assert_eq!(m.pop_equiv(&KindaIntLike(1)), Some(2));\n+        assert_eq!(m.pop_equiv(&KindaIntLike(1)), None);\n     }\n \n     #[test]"}, {"sha": "3cad5bf8175a232b30a904fe6f720ea6444556f2", "filename": "src/libglob/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/def90f43e2df9968cda730a2a30cb7ccb9513002/src%2Flibglob%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/def90f43e2df9968cda730a2a30cb7ccb9513002/src%2Flibglob%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibglob%2Flib.rs?ref=def90f43e2df9968cda730a2a30cb7ccb9513002", "patch": "@@ -462,8 +462,8 @@ impl Pattern {\n fn fill_todo(todo: &mut Vec<(Path, uint)>, patterns: &[Pattern], idx: uint, path: &Path,\n              options: MatchOptions) {\n     // convert a pattern that's just many Char(_) to a string\n-    fn pattern_as_str(pattern: &Pattern) -> Option<~str> {\n-        let mut s = ~\"\";\n+    fn pattern_as_str(pattern: &Pattern) -> Option<StrBuf> {\n+        let mut s = StrBuf::new();\n         for token in pattern.tokens.iter() {\n             match *token {\n                 Char(c) => s.push_char(c),\n@@ -493,8 +493,8 @@ fn fill_todo(todo: &mut Vec<(Path, uint)>, patterns: &[Pattern], idx: uint, path\n             // continue. So instead of passing control back to the iterator,\n             // we can just check for that one entry and potentially recurse\n             // right away.\n-            let special = \".\" == s || \"..\" == s;\n-            let next_path = path.join(s);\n+            let special = \".\" == s.as_slice() || \"..\" == s.as_slice();\n+            let next_path = path.join(s.as_slice());\n             if (special && path.is_dir()) || (!special && next_path.exists()) {\n                 add(todo, next_path);\n             }"}, {"sha": "e3bb938995bf3cb78c2f2ada1c2eaa8bcfe0c64c", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/def90f43e2df9968cda730a2a30cb7ccb9513002/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/def90f43e2df9968cda730a2a30cb7ccb9513002/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=def90f43e2df9968cda730a2a30cb7ccb9513002", "patch": "@@ -402,7 +402,7 @@ fn make_command_line(prog: &str, args: &[~str]) -> ~str {\n         cmd.push_char(' ');\n         append_arg(&mut cmd, *arg);\n     }\n-    return cmd.to_owned_str();\n+    return cmd.into_owned();\n \n     fn append_arg(cmd: &mut StrBuf, arg: &str) {\n         let quote = arg.chars().any(|c| c == ' ' || c == '\\t');"}, {"sha": "4a523e3d09e69ceac5c40cf43025bf479a28f6a6", "filename": "src/libstd/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/def90f43e2df9968cda730a2a30cb7ccb9513002/src%2Flibstd%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/def90f43e2df9968cda730a2a30cb7ccb9513002/src%2Flibstd%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash%2Fsip.rs?ref=def90f43e2df9968cda730a2a30cb7ccb9513002", "patch": "@@ -291,7 +291,7 @@ mod tests {\n     use iter::Iterator;\n     use num::ToStrRadix;\n     use option::{Some, None};\n-    use str::{Str, OwnedStr};\n+    use str::Str;\n     use strbuf::StrBuf;\n     use slice::{Vector, ImmutableVector, OwnedVector};\n     use self::test::BenchHarness;"}, {"sha": "1fcc9c6465aeace4e027d92ebf71ec27d3dbe30b", "filename": "src/libstd/strbuf.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/def90f43e2df9968cda730a2a30cb7ccb9513002/src%2Flibstd%2Fstrbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/def90f43e2df9968cda730a2a30cb7ccb9513002/src%2Flibstd%2Fstrbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstrbuf.rs?ref=def90f43e2df9968cda730a2a30cb7ccb9513002", "patch": "@@ -20,9 +20,11 @@ use iter::{Extendable, FromIterator, Iterator, range};\n use option::{None, Option, Some};\n use ptr::RawPtr;\n use slice::{OwnedVector, Vector};\n+use str;\n use str::{OwnedStr, Str, StrSlice};\n use vec::Vec;\n \n+/// A growable string stored as a UTF-8 encoded buffer.\n #[deriving(Clone, Eq, Ord, TotalEq, TotalOrd)]\n pub struct StrBuf {\n     vec: Vec<u8>,\n@@ -69,6 +71,23 @@ impl StrBuf {\n         }\n     }\n \n+    /// Tries to create a new string buffer from the given byte\n+    /// vector, validating that the vector is UTF-8 encoded.\n+    #[inline]\n+    pub fn from_utf8(vec: Vec<u8>) -> Option<StrBuf> {\n+        if str::is_utf8(vec.as_slice()) {\n+            Some(StrBuf { vec: vec })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Return the underlying byte buffer, encoded as UTF-8.\n+    #[inline]\n+    pub fn into_bytes(self) -> Vec<u8> {\n+        self.vec\n+    }\n+\n     /// Pushes the given string onto this buffer; then, returns `self` so that it can be used\n     /// again.\n     #[inline]\n@@ -100,6 +119,7 @@ impl StrBuf {\n         self.vec.push_all(string.as_bytes())\n     }\n \n+    /// Push `ch` onto the given string `count` times.\n     #[inline]\n     pub fn grow(&mut self, count: uint, ch: char) {\n         for _ in range(0, count) {\n@@ -352,4 +372,3 @@ mod tests {\n         s.truncate(1);\n     }\n }\n-"}, {"sha": "5ea84feffde68ba7dafa9685d4f1a8299c9fcdae", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 33, "deletions": 24, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/def90f43e2df9968cda730a2a30cb7ccb9513002/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/def90f43e2df9968cda730a2a30cb7ccb9513002/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=def90f43e2df9968cda730a2a30cb7ccb9513002", "patch": "@@ -32,53 +32,62 @@ struct CreatureInfo {\n     color: color\n }\n \n-fn show_color(cc: color) -> ~str {\n+fn show_color(cc: color) -> &'static str {\n     match cc {\n-        Red    => {~\"red\"}\n-        Yellow => {~\"yellow\"}\n-        Blue   => {~\"blue\"}\n+        Red    => \"red\",\n+        Yellow => \"yellow\",\n+        Blue   => \"blue\"\n     }\n }\n \n-fn show_color_list(set: Vec<color>) -> ~str {\n+fn show_color_list(set: Vec<color>) -> StrBuf {\n     let mut out = StrBuf::new();\n     for col in set.iter() {\n         out.push_char(' ');\n         out.push_str(show_color(*col));\n     }\n-    return out.to_owned_str();\n+    out\n }\n \n-fn show_digit(nn: uint) -> ~str {\n+fn show_digit(nn: uint) -> &'static str {\n     match nn {\n-        0 => {~\"zero\"}\n-        1 => {~\"one\"}\n-        2 => {~\"two\"}\n-        3 => {~\"three\"}\n-        4 => {~\"four\"}\n-        5 => {~\"five\"}\n-        6 => {~\"six\"}\n-        7 => {~\"seven\"}\n-        8 => {~\"eight\"}\n-        9 => {~\"nine\"}\n+        0 => {\"zero\"}\n+        1 => {\"one\"}\n+        2 => {\"two\"}\n+        3 => {\"three\"}\n+        4 => {\"four\"}\n+        5 => {\"five\"}\n+        6 => {\"six\"}\n+        7 => {\"seven\"}\n+        8 => {\"eight\"}\n+        9 => {\"nine\"}\n         _ => {fail!(\"expected digits from 0 to 9...\")}\n     }\n }\n \n-fn show_number(nn: uint) -> ~str {\n-    let mut out = ~\"\";\n+fn show_number(nn: uint) -> StrBuf {\n+    let mut out = vec![];\n     let mut num = nn;\n     let mut dig;\n-\n-    if num == 0 { out = show_digit(0) };\n+    let mut len = 0;\n+    if num == 0 { out.push(show_digit(0)) };\n \n     while num != 0 {\n         dig = num % 10;\n         num = num / 10;\n-        out = show_digit(dig) + \" \" + out;\n+        out.push(\" \");\n+        let s = show_digit(dig);\n+        out.push(s);\n+        len += 1 + s.len();\n     }\n+    len += 1;\n+    out.push(\" \");\n \n-    return ~\" \" + out;\n+    let mut ret = StrBuf::with_capacity(len);\n+    for s in out.iter().rev() {\n+        ret.push_str(*s);\n+    }\n+    ret\n }\n \n fn transform(aa: color, bb: color) -> color {\n@@ -125,7 +134,7 @@ fn creature(\n             option::None => {\n                 // log creatures met and evil clones of self\n                 let report = format!(\"{} {}\",\n-                                     creatures_met, show_number(evil_clones_met));\n+                                     creatures_met, show_number(evil_clones_met).as_slice());\n                 to_rendezvous_log.send(report);\n                 break;\n             }"}, {"sha": "9dd76f5e475d8eb84ba2c843e7707b17e1ce146e", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/def90f43e2df9968cda730a2a30cb7ccb9513002/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/def90f43e2df9968cda730a2a30cb7ccb9513002/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=def90f43e2df9968cda730a2a30cb7ccb9513002", "patch": "@@ -15,17 +15,11 @@\n \n extern crate collections;\n \n-use std::cmp::Ord;\n-use std::comm;\n use collections::HashMap;\n use std::mem::replace;\n use std::option;\n use std::os;\n-use std::io;\n-use std::str;\n use std::strbuf::StrBuf;\n-use std::task;\n-use std::vec;\n \n fn f64_cmp(x: f64, y: f64) -> Ordering {\n     // arbitrarily decide that NaNs are larger than everything.\n@@ -66,16 +60,14 @@ fn sort_and_fmt(mm: &HashMap<Vec<u8> , uint>, total: uint) -> ~str {\n \n    let mut buffer = StrBuf::new();\n    for &(ref k, v) in pairs_sorted.iter() {\n-       unsafe {\n-           buffer.push_str(format!(\"{} {:0.3f}\\n\",\n-                                   k.as_slice()\n-                                    .to_ascii()\n-                                    .to_upper()\n-                                    .into_str(), v));\n-       }\n+       buffer.push_str(format!(\"{} {:0.3f}\\n\",\n+                               k.as_slice()\n+                               .to_ascii()\n+                               .to_upper()\n+                               .into_str(), v));\n    }\n \n-   return buffer.to_owned_str();\n+   return buffer.into_owned();\n }\n \n // given a map, search for the frequency of a pattern"}, {"sha": "a1daf45cea9025e113806b3a105b94b9da2cd55f", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/def90f43e2df9968cda730a2a30cb7ccb9513002/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/def90f43e2df9968cda730a2a30cb7ccb9513002/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=def90f43e2df9968cda730a2a30cb7ccb9513002", "patch": "@@ -11,8 +11,6 @@\n // ignore-android see #10393 #13206\n // ignore-pretty\n \n-use std::ascii::OwnedStrAsciiExt;\n-use std::str;\n use std::strbuf::StrBuf;\n use std::slice;\n \n@@ -50,8 +48,7 @@ impl Code {\n         string.bytes().fold(Code(0u64), |a, b| a.push_char(b))\n     }\n \n-    // FIXME: Inefficient.\n-    fn unpack(&self, frame: uint) -> ~str {\n+    fn unpack(&self, frame: uint) -> StrBuf {\n         let mut key = self.hash();\n         let mut result = Vec::new();\n         for _ in range(0, frame) {\n@@ -60,7 +57,7 @@ impl Code {\n         }\n \n         result.reverse();\n-        str::from_utf8_owned(result.move_iter().collect()).unwrap()\n+        StrBuf::from_utf8(result).unwrap()\n     }\n }\n \n@@ -239,7 +236,7 @@ fn print_frequencies(frequencies: &Table, frame: uint) {\n \n     for &(count, key) in vector.iter().rev() {\n         println!(\"{} {:.3f}\",\n-                 key.unpack(frame),\n+                 key.unpack(frame).as_slice(),\n                  (count as f32 * 100.0) / (total_count as f32));\n     }\n     println!(\"\");\n@@ -249,14 +246,17 @@ fn print_occurrences(frequencies: &mut Table, occurrence: &'static str) {\n     frequencies.lookup(Code::pack(occurrence), PrintCallback(occurrence))\n }\n \n-fn get_sequence<R: Buffer>(r: &mut R, key: &str) -> ~[u8] {\n-    let mut res = StrBuf::new();\n+fn get_sequence<R: Buffer>(r: &mut R, key: &str) -> Vec<u8> {\n+    let mut res = Vec::new();\n     for l in r.lines().map(|l| l.ok().unwrap())\n         .skip_while(|l| key != l.slice_to(key.len())).skip(1)\n     {\n-        res.push_str(l.trim());\n+        res.push_all(l.trim().as_bytes());\n     }\n-    res.to_owned_str().into_ascii_upper().into_bytes()\n+    for b in res.mut_iter() {\n+        *b = b.to_ascii().to_upper().to_byte();\n+    }\n+    res\n }\n \n fn main() {\n@@ -268,17 +268,17 @@ fn main() {\n     };\n \n     let mut frequencies = Table::new();\n-    generate_frequencies(&mut frequencies, input, 1);\n+    generate_frequencies(&mut frequencies, input.as_slice(), 1);\n     print_frequencies(&frequencies, 1);\n \n     frequencies = Table::new();\n-    generate_frequencies(&mut frequencies, input, 2);\n+    generate_frequencies(&mut frequencies, input.as_slice(), 2);\n     print_frequencies(&frequencies, 2);\n \n     for occurrence in OCCURRENCES.iter() {\n         frequencies = Table::new();\n         generate_frequencies(&mut frequencies,\n-                             input,\n+                             input.as_slice(),\n                              occurrence.len());\n         print_occurrences(&mut frequencies, *occurrence);\n     }"}]}