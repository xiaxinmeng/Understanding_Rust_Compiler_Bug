{"sha": "735bee273690940e9944291c70ab808cbc1062c1", "node_id": "C_kwDOAAsO6NoAKDczNWJlZTI3MzY5MDk0MGU5OTQ0MjkxYzcwYWI4MDhjYmMxMDYyYzE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-07T19:12:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-07T19:12:59Z"}, "message": "implement simd_saturating intrinsics", "tree": {"sha": "77a6c6fefea4530e4d1c2b74eb7f2a61c6795b0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77a6c6fefea4530e4d1c2b74eb7f2a61c6795b0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/735bee273690940e9944291c70ab808cbc1062c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/735bee273690940e9944291c70ab808cbc1062c1", "html_url": "https://github.com/rust-lang/rust/commit/735bee273690940e9944291c70ab808cbc1062c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/735bee273690940e9944291c70ab808cbc1062c1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64b086a8e26cbf7daddcf4581e6351a55718a913", "url": "https://api.github.com/repos/rust-lang/rust/commits/64b086a8e26cbf7daddcf4581e6351a55718a913", "html_url": "https://github.com/rust-lang/rust/commit/64b086a8e26cbf7daddcf4581e6351a55718a913"}], "stats": {"total": 31, "additions": 28, "deletions": 3}, "files": [{"sha": "dcc365ef0ad9b51cc363f807a4641755665d4a1c", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/735bee273690940e9944291c70ab808cbc1062c1/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/735bee273690940e9944291c70ab808cbc1062c1/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=735bee273690940e9944291c70ab808cbc1062c1", "patch": "@@ -1 +1 @@\n-297273c45b205820a4c055082c71677197a40b55\n+d137c3a7bd3b180317044f8ccb9a8b4b3bb07db3"}, {"sha": "49c9c0fb0d9657beb25df8017ee959b128d13145", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/735bee273690940e9944291c70ab808cbc1062c1/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735bee273690940e9944291c70ab808cbc1062c1/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=735bee273690940e9944291c70ab808cbc1062c1", "patch": "@@ -372,7 +372,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"simd_gt\"\n             | \"simd_ge\"\n             | \"simd_fmax\"\n-            | \"simd_fmin\" => {\n+            | \"simd_fmin\"\n+            | \"simd_saturating_add\"\n+            | \"simd_saturating_sub\" => {\n                 use mir::BinOp;\n \n                 let &[ref left, ref right] = check_arg_count(args)?;\n@@ -385,6 +387,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n                 enum Op {\n                     MirOp(BinOp),\n+                    SaturatingOp(BinOp),\n                     FMax,\n                     FMin,\n                 }\n@@ -407,6 +410,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     \"simd_ge\" => Op::MirOp(BinOp::Ge),\n                     \"simd_fmax\" => Op::FMax,\n                     \"simd_fmin\" => Op::FMin,\n+                    \"simd_saturating_add\" => Op::SaturatingOp(BinOp::Add),\n+                    \"simd_saturating_sub\" => Op::SaturatingOp(BinOp::Sub),\n                     _ => unreachable!(),\n                 };\n \n@@ -442,6 +447,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         Op::FMin => {\n                             fmin_op(&left, &right)?\n                         }\n+                        Op::SaturatingOp(mir_op) => {\n+                            this.saturating_arith(mir_op, &left, &right)?\n+                        }\n                     };\n                     this.write_scalar(val, &dest.into())?;\n                 }"}, {"sha": "b87bd4fd6ad2a585c79d85faddd17375f0e1bac7", "filename": "tests/run-pass/portable-simd.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/735bee273690940e9944291c70ab808cbc1062c1/tests%2Frun-pass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/735bee273690940e9944291c70ab808cbc1062c1/tests%2Frun-pass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fportable-simd.rs?ref=735bee273690940e9944291c70ab808cbc1062c1", "patch": "@@ -102,10 +102,27 @@ fn simd_ops_i32() {\n     assert_eq!(a % b, i32x4::from_array([0, 0, 1, 2]));\n     assert_eq!(i32x2::splat(i32::MIN) % i32x2::splat(-1), i32x2::splat(0));\n     assert_eq!(b.abs(), i32x4::from_array([1, 2, 3, 4]));\n-    // FIXME not a per-lane method (https://github.com/rust-lang/rust/issues/94682)\n+    // FIXME not a per-lane method (https://github.com/rust-lang/portable-simd/issues/247)\n     // assert_eq!(a.max(b * i32x4::splat(4)), i32x4::from_array([10, 10, 12, 10]));\n     // assert_eq!(a.min(b * i32x4::splat(4)), i32x4::from_array([4, 8, 10, -16]));\n \n+    assert_eq!(\n+        i8x4::from_array([i8::MAX, -23, 23, i8::MIN]).saturating_add(i8x4::from_array([1, i8::MIN, i8::MAX, 28])),\n+        i8x4::from_array([i8::MAX, i8::MIN, i8::MAX, -100])\n+    );\n+    assert_eq!(\n+        i8x4::from_array([i8::MAX, -28, 27, 42]).saturating_sub(i8x4::from_array([1, i8::MAX, i8::MAX, -80])),\n+        i8x4::from_array([126, i8::MIN, -100, 122])\n+    );\n+    assert_eq!(\n+        u8x4::from_array([u8::MAX, 0, 23, 42]).saturating_add(u8x4::from_array([1, 1, u8::MAX, 200])),\n+        u8x4::from_array([u8::MAX, 1, u8::MAX, 242])\n+    );\n+    assert_eq!(\n+        u8x4::from_array([u8::MAX, 0, 23, 42]).saturating_sub(u8x4::from_array([1, 1, u8::MAX, 200])),\n+        u8x4::from_array([254, 0, 0, 0])\n+    );\n+\n     assert_eq!(!b, i32x4::from_array([!1, !2, !3, !-4]));\n     assert_eq!(b << i32x4::splat(2), i32x4::from_array([4, 8, 12, -16]));\n     assert_eq!(b >> i32x4::splat(1), i32x4::from_array([0, 1, 1, -2]));"}]}