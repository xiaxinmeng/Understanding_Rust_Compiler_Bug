{"sha": "d95d6516b4aef52b3556bd61afe33e9f37bcd2df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NWQ2NTE2YjRhZWY1MmIzNTU2YmQ2MWFmZTMzZTlmMzdiY2QyZGY=", "commit": {"author": {"name": "Dale Wijnand", "email": "dale.wijnand@gmail.com", "date": "2018-07-05T10:37:50Z"}, "committer": {"name": "Dale Wijnand", "email": "dale.wijnand@gmail.com", "date": "2018-07-05T10:37:50Z"}, "message": "Consistently call it \"Clippy\", not clippy or rust-clippy\n\nAs per discussion on the Clippy 1.0 RFC", "tree": {"sha": "1ce197e062209aec92d6c794c63ff05dc68417fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ce197e062209aec92d6c794c63ff05dc68417fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d95d6516b4aef52b3556bd61afe33e9f37bcd2df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEERGS9JmrgEHKCFADQTyVuPRUd9e8FAls99P4ACgkQTyVuPRUd\n9e8pUA//UdK1aJx+h/7Y0wJXxF5zBmDvM5K9Z5m/HbqbTczL7W2FwCFUuJqb2JE3\n8sTulrUzWJH8zjpPGrojtq8AI3R9GQHE4v5HfLAOCgsBb7//R7FzU68+MksYNSsr\niCPURn3yXo+Qb3jVpDE+VsiyeeAn3CGETr7WZEi2DYk/ZzrDj67qzJFIJQnSYJzz\nhmw6Y+CM0cD+HmRay6t8Tj20Z0XdiKC3a2/nad2z2yAFzTlgVoXaoznzgBGulSVk\njgyUraHyGgv1MmZxuhPC5YPsyWH/4Sq6miHpFs5ZOqFcubA7HHg/xdDh12mzH5JZ\nwzrAnTGA94R3i1pf3jai6wNyYa9sy+3AaOKPDwBp8pwHbogVzpYe7X7NgweEYxgC\nWO/VGh892ujtZ03HMBCZ6FdWxSN7jX0rAK9vefsI7pkTnQjYFp19QrZP6RHOASXB\nwI+9xh/JRuICyINyoxDs/oNubkcLU4Gj1htfUEcsbvgPAfvwWbC/7XM61sGFM60k\n8aF/4FFM7ut2HDaPcURDt/7Werm+yEDtbiH5xKq2ddxerm8JXvbX1RTCRq4fozbe\n5UQAt10WT2y9jYxUd/6eHHdy9PHpowwtQM1sG6jHM13IIsMifx4aPE9SBuXLX6aG\nphE+tTJwhe6vuslxfkHg5X2+pzbIqtzdmqIyV6LaeG2BfXJO3NM=\n=lVXo\n-----END PGP SIGNATURE-----", "payload": "tree 1ce197e062209aec92d6c794c63ff05dc68417fd\nparent 6c70013f93a18c1ca7990efa8b1464acc6e18ce7\nauthor Dale Wijnand <dale.wijnand@gmail.com> 1530787070 +0100\ncommitter Dale Wijnand <dale.wijnand@gmail.com> 1530787070 +0100\n\nConsistently call it \"Clippy\", not clippy or rust-clippy\n\nAs per discussion on the Clippy 1.0 RFC\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d95d6516b4aef52b3556bd61afe33e9f37bcd2df", "html_url": "https://github.com/rust-lang/rust/commit/d95d6516b4aef52b3556bd61afe33e9f37bcd2df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d95d6516b4aef52b3556bd61afe33e9f37bcd2df/comments", "author": {"login": "dwijnand", "id": 344610, "node_id": "MDQ6VXNlcjM0NDYxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/344610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwijnand", "html_url": "https://github.com/dwijnand", "followers_url": "https://api.github.com/users/dwijnand/followers", "following_url": "https://api.github.com/users/dwijnand/following{/other_user}", "gists_url": "https://api.github.com/users/dwijnand/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwijnand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwijnand/subscriptions", "organizations_url": "https://api.github.com/users/dwijnand/orgs", "repos_url": "https://api.github.com/users/dwijnand/repos", "events_url": "https://api.github.com/users/dwijnand/events{/privacy}", "received_events_url": "https://api.github.com/users/dwijnand/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dwijnand", "id": 344610, "node_id": "MDQ6VXNlcjM0NDYxMA==", "avatar_url": "https://avatars.githubusercontent.com/u/344610?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dwijnand", "html_url": "https://github.com/dwijnand", "followers_url": "https://api.github.com/users/dwijnand/followers", "following_url": "https://api.github.com/users/dwijnand/following{/other_user}", "gists_url": "https://api.github.com/users/dwijnand/gists{/gist_id}", "starred_url": "https://api.github.com/users/dwijnand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dwijnand/subscriptions", "organizations_url": "https://api.github.com/users/dwijnand/orgs", "repos_url": "https://api.github.com/users/dwijnand/repos", "events_url": "https://api.github.com/users/dwijnand/events{/privacy}", "received_events_url": "https://api.github.com/users/dwijnand/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c70013f93a18c1ca7990efa8b1464acc6e18ce7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c70013f93a18c1ca7990efa8b1464acc6e18ce7", "html_url": "https://github.com/rust-lang/rust/commit/6c70013f93a18c1ca7990efa8b1464acc6e18ce7"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "d29aa80160ca2fa4f3dc4412c57401d789881a90", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d95d6516b4aef52b3556bd61afe33e9f37bcd2df/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/d95d6516b4aef52b3556bd61afe33e9f37bcd2df/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=d95d6516b4aef52b3556bd61afe33e9f37bcd2df", "patch": "@@ -1,4 +1,4 @@\n-# Contributing to rust-clippy\n+# Contributing to Clippy\n \n Hello fellow Rustacean! Great to see your interest in compiler internals and lints!\n \n@@ -63,7 +63,7 @@ an AST expression). `match_def_path()` in Clippy's `utils` module can also be us\n \n ## Writing code\n \n-Compiling clippy from scratch can take almost a minute or more depending on your machine.\n+Compiling Clippy from scratch can take almost a minute or more depending on your machine.\n However, since Rust 1.24.0 incremental compilation is enabled by default and compile times for small changes should be quick.\n \n [Llogiq's blog post on lints](https://llogiq.github.io/2015/06/04/workflows.html) is a nice primer\n@@ -74,7 +74,7 @@ of this.\n \n ### Author lint\n \n-There is also the internal `author` lint to generate clippy code that detects the offending pattern. It does not work for all of the Rust syntax, but can give a good starting point.\n+There is also the internal `author` lint to generate Clippy code that detects the offending pattern. It does not work for all of the Rust syntax, but can give a good starting point.\n \n First, create a new UI test file in the `tests/ui/` directory with the pattern you want to match:\n \n@@ -148,7 +148,7 @@ Therefore you should use `tests/ui/update-all-references.sh` (after running\n ### Testing manually\n \n Manually testing against an example file is useful if you have added some\n-`println!`s and test suite output becomes unreadable.  To try clippy with your\n+`println!`s and test suite output becomes unreadable.  To try Clippy with your\n local modifications, run `cargo run --bin clippy-driver -- -L ./target/debug input.rs` from the\n working copy root.\n "}, {"sha": "b85605dc3b316f64d4f5ccd7eac6d0f909e98876", "filename": "PUBLISH.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95d6516b4aef52b3556bd61afe33e9f37bcd2df/PUBLISH.md", "raw_url": "https://github.com/rust-lang/rust/raw/d95d6516b4aef52b3556bd61afe33e9f37bcd2df/PUBLISH.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/PUBLISH.md?ref=d95d6516b4aef52b3556bd61afe33e9f37bcd2df", "patch": "@@ -1,4 +1,4 @@\n-Steps to publish a new clippy version\n+Steps to publish a new Clippy version\n \n - Bump `package.version` in `./Cargo.toml` (no need to manually bump `dependencies.clippy_lints.version`).\n - Write a changelog entry."}, {"sha": "5bd3981260e15ad08d53137eb552e7f3bd9ef4f4", "filename": "README.md", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d95d6516b4aef52b3556bd61afe33e9f37bcd2df/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d95d6516b4aef52b3556bd61afe33e9f37bcd2df/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d95d6516b4aef52b3556bd61afe33e9f37bcd2df", "patch": "@@ -1,6 +1,6 @@\n-We are currently in the process of discussing Clippy 1.0 via the RFC process in https://github.com/rust-lang/rfcs/pull/2476 . The RFC's goal is to clarify policies around lint categorizations and the policy around which lints should be in the compiler and which lints should be in clippy. Please leave your thoughts on the RFC PR.\n+We are currently in the process of discussing Clippy 1.0 via the RFC process in https://github.com/rust-lang/rfcs/pull/2476 . The RFC's goal is to clarify policies around lint categorizations and the policy around which lints should be in the compiler and which lints should be in Clippy. Please leave your thoughts on the RFC PR.\n \n-# rust-clippy\n+# Clippy\n \n [![Build Status](https://travis-ci.org/rust-lang-nursery/rust-clippy.svg?branch=master)](https://travis-ci.org/rust-lang-nursery/rust-clippy)\n [![Windows Build status](https://ci.appveyor.com/api/projects/status/id677xpw1dguo7iw?svg=true)](https://ci.appveyor.com/project/rust-lang-libs/rust-clippy)\n@@ -11,7 +11,7 @@ A collection of lints to catch common mistakes and improve your [Rust](https://g\n \n [There are 273 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n \n-We have a bunch of lint categories to allow you to choose how much clippy is supposed to ~~annoy~~ help you:\n+We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n \n * `clippy` (everything that has no false positives)\n * `clippy_pedantic` (everything)\n@@ -33,11 +33,11 @@ Table of contents:\n ## Usage\n \n Since this is a tool for helping the developer of a library or application\n-write better code, it is recommended not to include clippy as a hard dependency.\n+write better code, it is recommended not to include Clippy as a hard dependency.\n Options include using it as an optional dependency, as a cargo subcommand, or\n as an included feature during build. All of these options are detailed below.\n \n-As a general rule clippy will only work with the *latest* Rust nightly for now.\n+As a general rule Clippy will only work with the *latest* Rust nightly for now.\n \n To install Rust nightly, the recommended way is to use [rustup](https://rustup.rs/):\n \n@@ -47,7 +47,7 @@ rustup install nightly\n \n ### As a cargo subcommand (`cargo clippy`)\n \n-One way to use clippy is by installing clippy through cargo as a cargo\n+One way to use Clippy is by installing Clippy through cargo as a cargo\n subcommand.\n \n ```terminal\n@@ -56,7 +56,7 @@ cargo +nightly install clippy\n \n (The `+nightly` is not necessary if your default `rustup` install is nightly)\n \n-Now you can run clippy by invoking `cargo +nightly clippy`.\n+Now you can run Clippy by invoking `cargo +nightly clippy`.\n \n To update the subcommand together with the latest nightly use the [rust-update](rust-update) script or run:\n \n@@ -66,24 +66,24 @@ cargo +nightly install --force clippy\n ```\n \n In case you are not using rustup, you need to set the environment flag\n-`SYSROOT` during installation so clippy knows where to find `librustc` and\n+`SYSROOT` during installation so Clippy knows where to find `librustc` and\n similar crates.\n \n ```terminal\n SYSROOT=/path/to/rustc/sysroot cargo install clippy\n ```\n \n-### Running clippy from the command line without installing it\n+### Running Clippy from the command line without installing it\n \n-To have cargo compile your crate with clippy without clippy installation\n+To have cargo compile your crate with Clippy without Clippy installation\n in your code, you can use:\n \n ```terminal\n cargo run --bin cargo-clippy --manifest-path=path_to_clippys_Cargo.toml\n ```\n \n *[Note](https://github.com/rust-lang-nursery/rust-clippy/wiki#a-word-of-warning):*\n-Be sure that clippy was compiled with the same version of rustc that cargo invokes here!\n+Be sure that Clippy was compiled with the same version of rustc that cargo invokes here!\n \n ## Configuration\n \n@@ -117,7 +117,7 @@ You can add options  to `allow`/`warn`/`deny`:\n Note: `deny` produces errors instead of warnings.\n \n For convenience, `cargo clippy` automatically defines a `cargo-clippy`\n-feature. This lets you set lint levels and compile with or without clippy\n+feature. This lets you set lint levels and compile with or without Clippy\n transparently:\n \n ```rust\n@@ -126,12 +126,12 @@ transparently:\n \n ## Updating rustc\n \n-Sometimes, rustc moves forward without clippy catching up. Therefore updating\n-rustc may leave clippy a non-functional state until we fix the resulting\n+Sometimes, rustc moves forward without Clippy catching up. Therefore updating\n+rustc may leave Clippy a non-functional state until we fix the resulting\n breakage.\n \n You can use the [rust-update](rust-update) script to update rustc only if\n-clippy would also update correctly.\n+Clippy would also update correctly.\n \n ## License\n "}, {"sha": "9d05678f718cb721fec00b8dc6f8f4979e8a3238", "filename": "build.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d95d6516b4aef52b3556bd61afe33e9f37bcd2df/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d6516b4aef52b3556bd61afe33e9f37bcd2df/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=d95d6516b4aef52b3556bd61afe33e9f37bcd2df", "patch": "@@ -1,8 +1,8 @@\n-//! This build script ensures that clippy is not compiled with an\n+//! This build script ensures that Clippy is not compiled with an\n //! incompatible version of rust. It will panic with a descriptive\n //! error message instead.\n //!\n-//! We specifially want to ensure that clippy is only built with a\n+//! We specifially want to ensure that Clippy is only built with a\n //! rustc version that is newer or equal to the one specified in the\n //! `min_version.txt` file.\n //!\n@@ -63,7 +63,7 @@ fn check_rustc_version() {\n         eprintln!(\n             \"\\n{} {}\",\n             Red.bold().paint(\"error:\"),\n-            \"clippy requires a nightly version of Rust.\"\n+            \"Clippy requires a nightly version of Rust.\"\n         );\n         print_version_err(&current_version, &*current_date_str);\n         eprintln!(\n@@ -80,7 +80,7 @@ fn check_rustc_version() {\n         eprintln!(\n             \"\\n{} {}\",\n             Red.bold().paint(\"error:\"),\n-            \"clippy does not support this version of rustc nightly.\"\n+            \"Clippy does not support this version of rustc nightly.\"\n         );\n         eprintln!(\n             \"> {}{}{}\","}, {"sha": "00826805e1617b5e80db08168b668f8e1f5b087d", "filename": "util/lintlib.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95d6516b4aef52b3556bd61afe33e9f37bcd2df/util%2Flintlib.py", "raw_url": "https://github.com/rust-lang/rust/raw/d95d6516b4aef52b3556bd61afe33e9f37bcd2df/util%2Flintlib.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Flintlib.py?ref=d95d6516b4aef52b3556bd61afe33e9f37bcd2df", "patch": "@@ -44,7 +44,7 @@ def parse_lints(lints, filepath):\n                     last_comment.append(line[3:])\n                 elif line.startswith(\"declare_lint!\"):\n                     import sys\n-                    print \"don't use `declare_lint!` in clippy, use `declare_clippy_lint!` instead\"\n+                    print \"don't use `declare_lint!` in Clippy, use `declare_clippy_lint!` instead\"\n                     sys.exit(42)\n                 elif line.startswith(\"declare_clippy_lint!\"):\n                     comment = False"}]}