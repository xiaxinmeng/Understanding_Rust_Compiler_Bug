{"sha": "2fa90e736b026ee979d9eb59178dc1f792228250", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYTkwZTczNmIwMjZlZTk3OWQ5ZWI1OTE3OGRjMWY3OTIyMjgyNTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-28T08:12:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-28T08:12:42Z"}, "message": "better recovery for exprs", "tree": {"sha": "adba3a569241a2030bf66e4e0b24ac5ffeaccbc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adba3a569241a2030bf66e4e0b24ac5ffeaccbc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fa90e736b026ee979d9eb59178dc1f792228250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa90e736b026ee979d9eb59178dc1f792228250", "html_url": "https://github.com/rust-lang/rust/commit/2fa90e736b026ee979d9eb59178dc1f792228250", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fa90e736b026ee979d9eb59178dc1f792228250/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13110f48e948d7554500aefc336e72f96041386b", "url": "https://api.github.com/repos/rust-lang/rust/commits/13110f48e948d7554500aefc336e72f96041386b", "html_url": "https://github.com/rust-lang/rust/commit/13110f48e948d7554500aefc336e72f96041386b"}], "stats": {"total": 290, "additions": 263, "deletions": 27}, "files": [{"sha": "34056b3c0e496b3e893bdef50b8f59af00c00ed7", "filename": "crates/libeditor/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Flib.rs?ref=2fa90e736b026ee979d9eb59178dc1f792228250", "patch": "@@ -27,7 +27,7 @@ pub use self::{\n         ActionResult,\n         flip_comma, add_derive, add_impl,\n     },\n-    typing::join_lines,\n+    typing::{join_lines, on_eq_typed},\n     completion::scope_completion,\n };\n "}, {"sha": "48a8d6bb0517a6667ea137ba209103fef06e12ea", "filename": "crates/libeditor/src/typing.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibeditor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibeditor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Ftyping.rs?ref=2fa90e736b026ee979d9eb59178dc1f792228250", "patch": "@@ -7,11 +7,11 @@ use libsyntax2::{\n         walk::preorder,\n         find_covering_node,\n     },\n-    text_utils::intersect,\n+    text_utils::{intersect, contains_offset_nonstrict},\n     SyntaxKind::*,\n };\n \n-use {ActionResult, EditBuilder};\n+use {ActionResult, EditBuilder, find_node_at_offset};\n \n pub fn join_lines(file: &File, range: TextRange) -> ActionResult {\n     let range = if range.is_empty() {\n@@ -56,6 +56,26 @@ pub fn join_lines(file: &File, range: TextRange) -> ActionResult {\n     }\n }\n \n+pub fn on_eq_typed(file: &File, offset: TextUnit) -> Option<ActionResult> {\n+    let let_stmt: ast::LetStmt = find_node_at_offset(file.syntax(), offset)?;\n+    if let_stmt.has_semi() {\n+        return None;\n+    }\n+    if let Some(expr) = let_stmt.initializer() {\n+        let expr_range = expr.syntax().range();\n+        if contains_offset_nonstrict(expr_range, offset) && offset != expr_range.start() {\n+            return None;\n+        }\n+    }\n+    let offset = let_stmt.syntax().range().end();\n+    let mut edit = EditBuilder::new();\n+    edit.insert(offset, \";\".to_string());\n+    Some(ActionResult {\n+        edit: edit.finish(),\n+        cursor_position: None,\n+    })\n+}\n+\n fn remove_newline(\n     edit: &mut EditBuilder,\n     node: SyntaxNodeRef,"}, {"sha": "17926d5ae466f59d3abe951eb6165d1e83d7c720", "filename": "crates/libeditor/tests/test.rs", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibeditor%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibeditor%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Ftests%2Ftest.rs?ref=2fa90e736b026ee979d9eb59178dc1f792228250", "patch": "@@ -9,7 +9,7 @@ use libeditor::{\n     ActionResult,\n     highlight, runnables, extend_selection, file_structure,\n     flip_comma, add_derive, add_impl, matching_brace,\n-    join_lines, scope_completion,\n+    join_lines, on_eq_typed, scope_completion,\n };\n \n #[test]\n@@ -227,7 +227,7 @@ pub fn reparse(&self, edit: &AtomEdit) -> File {\n #[test]\n fn test_join_lines_selection() {\n     fn do_check(before: &str, after: &str) {\n-        let (sel, before) = extract_range(&before);\n+        let (sel, before) = extract_range(before);\n         let file = file(&before);\n         let result = join_lines(&file, sel);\n         let actual = result.edit.apply(&before);\n@@ -256,6 +256,48 @@ struct Foo { f: u32 }\n \");\n }\n \n+#[test]\n+fn test_on_eq_typed() {\n+    fn do_check(before: &str, after: &str) {\n+        let (offset, before) = extract_offset(before);\n+        let file = file(&before);\n+        let result = on_eq_typed(&file, offset).unwrap();\n+        let actual = result.edit.apply(&before);\n+        assert_eq_text!(after, &actual);\n+    }\n+\n+    do_check(r\"\n+fn foo() {\n+    let foo =<|>\n+}\n+\", r\"\n+fn foo() {\n+    let foo =;\n+}\n+\");\n+    do_check(r\"\n+fn foo() {\n+    let foo =<|> 1 + 1\n+}\n+\", r\"\n+fn foo() {\n+    let foo = 1 + 1;\n+}\n+\");\n+//     do_check(r\"\n+// fn foo() {\n+//     let foo =<|>\n+//     let bar = 1;\n+// }\n+// \", r\"\n+// fn foo() {\n+//     let foo =;\n+//     let bar = 1;\n+// }\n+// \");\n+\n+}\n+\n #[test]\n fn test_completion() {\n     fn do_check(code: &str, expected_completions: &str) {"}, {"sha": "6181aada8c9c595c702be3295e33dc3edde2ae7b", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 77, "deletions": 1, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=2fa90e736b026ee979d9eb59178dc1f792228250", "patch": "@@ -439,6 +439,24 @@ impl<'a> ExprStmt<'a> {\n     }\n }\n \n+// ExternCrateItem\n+#[derive(Debug, Clone, Copy)]\n+pub struct ExternCrateItem<'a> {\n+    syntax: SyntaxNodeRef<'a>,\n+}\n+\n+impl<'a> AstNode<'a> for ExternCrateItem<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            EXTERN_CRATE_ITEM => Some(ExternCrateItem { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<'a> ExternCrateItem<'a> {}\n+\n // FieldExpr\n #[derive(Debug, Clone, Copy)]\n pub struct FieldExpr<'a> {\n@@ -839,11 +857,51 @@ impl<'a> AstNode<'a> for Module<'a> {\n impl<'a> ast::NameOwner<'a> for Module<'a> {}\n impl<'a> ast::AttrsOwner<'a> for Module<'a> {}\n impl<'a> Module<'a> {\n-    pub fn modules(self) -> impl Iterator<Item = Module<'a>> + 'a {\n+    pub fn items(self) -> impl Iterator<Item = ModuleItem<'a>> + 'a {\n         super::children(self)\n     }\n }\n \n+// ModuleItem\n+#[derive(Debug, Clone, Copy)]\n+pub enum ModuleItem<'a> {\n+    StructDef(StructDef<'a>),\n+    EnumDef(EnumDef<'a>),\n+    FnDef(FnDef<'a>),\n+    TraitDef(TraitDef<'a>),\n+    ImplItem(ImplItem<'a>),\n+    UseItem(UseItem<'a>),\n+    ExternCrateItem(ExternCrateItem<'a>),\n+}\n+\n+impl<'a> AstNode<'a> for ModuleItem<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            STRUCT_DEF => Some(ModuleItem::StructDef(StructDef { syntax })),\n+            ENUM_DEF => Some(ModuleItem::EnumDef(EnumDef { syntax })),\n+            FN_DEF => Some(ModuleItem::FnDef(FnDef { syntax })),\n+            TRAIT_DEF => Some(ModuleItem::TraitDef(TraitDef { syntax })),\n+            IMPL_ITEM => Some(ModuleItem::ImplItem(ImplItem { syntax })),\n+            USE_ITEM => Some(ModuleItem::UseItem(UseItem { syntax })),\n+            EXTERN_CRATE_ITEM => Some(ModuleItem::ExternCrateItem(ExternCrateItem { syntax })),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> {\n+        match self {\n+            ModuleItem::StructDef(inner) => inner.syntax(),\n+            ModuleItem::EnumDef(inner) => inner.syntax(),\n+            ModuleItem::FnDef(inner) => inner.syntax(),\n+            ModuleItem::TraitDef(inner) => inner.syntax(),\n+            ModuleItem::ImplItem(inner) => inner.syntax(),\n+            ModuleItem::UseItem(inner) => inner.syntax(),\n+            ModuleItem::ExternCrateItem(inner) => inner.syntax(),\n+        }\n+    }\n+}\n+\n+impl<'a> ModuleItem<'a> {}\n+\n // Name\n #[derive(Debug, Clone, Copy)]\n pub struct Name<'a> {\n@@ -1762,6 +1820,24 @@ impl<'a> AstNode<'a> for TypeRef<'a> {\n \n impl<'a> TypeRef<'a> {}\n \n+// UseItem\n+#[derive(Debug, Clone, Copy)]\n+pub struct UseItem<'a> {\n+    syntax: SyntaxNodeRef<'a>,\n+}\n+\n+impl<'a> AstNode<'a> for UseItem<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            USE_ITEM => Some(UseItem { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<'a> UseItem<'a> {}\n+\n // WhereClause\n #[derive(Debug, Clone, Copy)]\n pub struct WhereClause<'a> {"}, {"sha": "9941138a7ace59a7dc698b5c7fc61693b83006a5", "filename": "crates/libsyntax2/src/ast/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs?ref=2fa90e736b026ee979d9eb59178dc1f792228250", "patch": "@@ -115,6 +115,15 @@ impl<'a> Module<'a> {\n     }\n }\n \n+impl<'a> LetStmt<'a> {\n+    pub fn has_semi(self) -> bool {\n+        match self.syntax().last_child() {\n+            None => false,\n+            Some(node) => node.kind() == SEMI,\n+        }\n+    }\n+}\n+\n impl<'a> IfExpr<'a> {\n     pub fn then_branch(self) -> Option<Block<'a>> {\n         self.blocks().nth(0)"}, {"sha": "7217a46336ff2a5d84a2bdbe12226089f14f2844", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=2fa90e736b026ee979d9eb59178dc1f792228250", "patch": "@@ -273,7 +273,7 @@ Grammar(\n         \"Module\": (\n             traits: [\"NameOwner\", \"AttrsOwner\"],\n             collections: [\n-                [\"modules\", \"Module\"]\n+                [\"items\", \"ModuleItem\"]\n             ]\n         ),\n         \"ConstDef\": ( traits: [\n@@ -331,6 +331,10 @@ Grammar(\n                 \"AttrsOwner\"\n             ],\n         ),\n+        \"ModuleItem\": (\n+            enum: [\"StructDef\", \"EnumDef\", \"FnDef\", \"TraitDef\", \"ImplItem\",\n+                   \"UseItem\", \"ExternCrateItem\" ]\n+        ),\n \n         \"TupleExpr\": (),\n         \"ArrayExpr\": (),\n@@ -479,6 +483,8 @@ Grammar(\n         ),\n         \"Param\": (\n             options: [[\"pat\", \"Pat\"]],\n-        )\n+        ),\n+        \"UseItem\": (),\n+        \"ExternCrateItem\": (),\n     },\n )"}, {"sha": "0769bb5a8be0196b85930e6296bf471b161ec58d", "filename": "crates/libsyntax2/src/grammar/expressions/atom.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=2fa90e736b026ee979d9eb59178dc1f792228250", "patch": "@@ -33,6 +33,9 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet =\n                    RETURN_KW, IDENT, SELF_KW, SUPER_KW, COLONCOLON, BREAK_KW, CONTINUE_KW, LIFETIME ],\n     ];\n \n+const EXPR_RECOVERY_SET: TokenSet =\n+    token_set![LET_KW];\n+\n pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<CompletedMarker> {\n     match literal(p) {\n         Some(m) => return Some(m),\n@@ -73,7 +76,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<CompletedMark\n         CONTINUE_KW => continue_expr(p),\n         BREAK_KW => break_expr(p),\n         _ => {\n-            p.err_and_bump(\"expected expression\");\n+            p.err_recover(\"expected expression\", EXPR_RECOVERY_SET);\n             return None;\n         }\n     };"}, {"sha": "10b9b64ac64467fc3e1dd7e78b14c0629f47dcb4", "filename": "crates/libsyntax2/src/parser_api.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibsyntax2%2Fsrc%2Fparser_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibsyntax2%2Fsrc%2Fparser_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fparser_api.rs?ref=2fa90e736b026ee979d9eb59178dc1f792228250", "patch": "@@ -12,6 +12,8 @@ fn mask(kind: SyntaxKind) -> u128 {\n }\n \n impl TokenSet {\n+    const EMPTY: TokenSet = TokenSet(0);\n+\n     pub fn contains(&self, kind: SyntaxKind) -> bool {\n         self.0 & mask(kind) != 0\n     }\n@@ -139,12 +141,21 @@ impl<'t> Parser<'t> {\n \n     /// Create an error node and consume the next token.\n     pub(crate) fn err_and_bump(&mut self, message: &str) {\n-        let m = self.start();\n-        self.error(message);\n-        if !self.at(SyntaxKind::L_CURLY) && !self.at(SyntaxKind::R_CURLY) {\n+        self.err_recover(message, TokenSet::EMPTY);\n+    }\n+\n+    /// Create an error node and consume the next token.\n+    pub(crate) fn err_recover(&mut self, message: &str, recovery_set: TokenSet) {\n+        if self.at(SyntaxKind::L_CURLY)\n+            || self.at(SyntaxKind::R_CURLY)\n+            || recovery_set.contains(self.current()) {\n+            self.error(message);\n+        } else {\n+            let m = self.start();\n+            self.error(message);\n             self.bump();\n+            m.complete(self, ERROR);\n         }\n-        m.complete(self, ERROR);\n     }\n }\n "}, {"sha": "f0be287ada1141bc93025df15634bc9b46a20082", "filename": "crates/libsyntax2/tests/data/parser/err/0017_incomplete_binexpr.txt", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0017_incomplete_binexpr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0017_incomplete_binexpr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0017_incomplete_binexpr.txt?ref=2fa90e736b026ee979d9eb59178dc1f792228250", "patch": "@@ -35,13 +35,12 @@ ROOT@[0; 47)\n           INT_NUMBER@[33; 35) \"92\"\n         SEMI@[35; 36)\n       WHITESPACE@[36; 41)\n-      BIN_EXPR@[41; 45)\n+      BIN_EXPR@[41; 44)\n         LITERAL@[41; 42)\n           INT_NUMBER@[41; 42) \"1\"\n         WHITESPACE@[42; 43)\n         PLUS@[43; 44)\n-        WHITESPACE@[44; 45)\n         err: `expected expression`\n-        ERROR@[45; 45)\n+      WHITESPACE@[44; 45)\n       R_CURLY@[45; 46)\n   WHITESPACE@[46; 47)"}, {"sha": "58e39a3411be9062f5e421e808d7ffb764fa994e", "filename": "crates/libsyntax2/tests/data/parser/err/0018_incomplete_fn.txt", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0018_incomplete_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0018_incomplete_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0018_incomplete_fn.txt?ref=2fa90e736b026ee979d9eb59178dc1f792228250", "patch": "@@ -11,12 +11,12 @@ ROOT@[0; 183)\n     ITEM_LIST@[14; 182)\n       L_CURLY@[14; 15)\n       WHITESPACE@[15; 20)\n-      FN_DEF@[20; 181)\n+      FN_DEF@[20; 180)\n         FN_KW@[20; 22)\n         WHITESPACE@[22; 23)\n         NAME@[23; 32)\n           IDENT@[23; 32) \"new_scope\"\n-        PARAM_LIST@[32; 181)\n+        PARAM_LIST@[32; 180)\n           L_PAREN@[32; 33)\n           PARAM@[33; 38)\n             REF_PAT@[33; 35)\n@@ -163,17 +163,16 @@ ROOT@[0; 183)\n               err: `expected parameters`\n               err: `expected COMMA`\n           WHITESPACE@[169; 170)\n-          PARAM@[170; 181)\n+          PARAM@[170; 180)\n             BIND_PAT@[170; 180)\n               NAME@[170; 180)\n                 IDENT@[170; 180) \"set_parent\"\n                 err: `expected COLON`\n-            WHITESPACE@[180; 181)\n-            err: `expected type`\n-            err: `expected COMMA`\n-            err: `expected value parameter`\n-            err: `expected R_PAREN`\n-            err: `expected a block`\n-            ERROR@[181; 181)\n+                err: `expected type`\n+                err: `expected COMMA`\n+                err: `expected value parameter`\n+                err: `expected R_PAREN`\n+                err: `expected a block`\n+      WHITESPACE@[180; 181)\n       R_CURLY@[181; 182)\n   WHITESPACE@[182; 183)"}, {"sha": "52bddd494cf043d7cea45be4b8875756984e0fc3", "filename": "crates/libsyntax2/tests/data/parser/err/0019_let_recover.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0019_let_recover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0019_let_recover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0019_let_recover.rs?ref=2fa90e736b026ee979d9eb59178dc1f792228250", "patch": "@@ -0,0 +1,4 @@\n+fn foo() {\n+    let foo =\n+    let bar = 1;\n+}"}, {"sha": "9ffa9d78181bd09f20df7f8c1a31043ac4520a47", "filename": "crates/libsyntax2/tests/data/parser/err/0019_let_recover.txt", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0019_let_recover.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0019_let_recover.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0019_let_recover.txt?ref=2fa90e736b026ee979d9eb59178dc1f792228250", "patch": "@@ -0,0 +1,39 @@\n+ROOT@[0; 44)\n+  FN_DEF@[0; 43)\n+    FN_KW@[0; 2)\n+    WHITESPACE@[2; 3)\n+    NAME@[3; 6)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 8)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+    WHITESPACE@[8; 9)\n+    BLOCK@[9; 43)\n+      L_CURLY@[9; 10)\n+      WHITESPACE@[10; 15)\n+      LET_STMT@[15; 24)\n+        LET_KW@[15; 18)\n+        WHITESPACE@[18; 19)\n+        BIND_PAT@[19; 22)\n+          NAME@[19; 22)\n+            IDENT@[19; 22) \"foo\"\n+        WHITESPACE@[22; 23)\n+        EQ@[23; 24)\n+        err: `expected expression`\n+        err: `expected SEMI`\n+      WHITESPACE@[24; 29)\n+      LET_STMT@[29; 41)\n+        LET_KW@[29; 32)\n+        WHITESPACE@[32; 33)\n+        BIND_PAT@[33; 36)\n+          NAME@[33; 36)\n+            IDENT@[33; 36) \"bar\"\n+        WHITESPACE@[36; 37)\n+        EQ@[37; 38)\n+        WHITESPACE@[38; 39)\n+        LITERAL@[39; 40)\n+          INT_NUMBER@[39; 40) \"1\"\n+        SEMI@[40; 41)\n+      WHITESPACE@[41; 42)\n+      R_CURLY@[42; 43)\n+  WHITESPACE@[43; 44)"}, {"sha": "7456aea8a21b514c386cf5b5368b0af2a5baa7ec", "filename": "crates/server/src/caps.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Fserver%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Fserver%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fcaps.rs?ref=2fa90e736b026ee979d9eb59178dc1f792228250", "patch": "@@ -5,6 +5,7 @@ use languageserver_types::{\n     TextDocumentSyncKind,\n     ExecuteCommandOptions,\n     CompletionOptions,\n+    DocumentOnTypeFormattingOptions,\n };\n \n pub fn server_capabilities() -> ServerCapabilities {\n@@ -35,7 +36,10 @@ pub fn server_capabilities() -> ServerCapabilities {\n         code_lens_provider: None,\n         document_formatting_provider: None,\n         document_range_formatting_provider: None,\n-        document_on_type_formatting_provider: None,\n+        document_on_type_formatting_provider: Some(DocumentOnTypeFormattingOptions {\n+            first_trigger_character: \"=\".to_string(),\n+            more_trigger_character: None,\n+        }),\n         rename_provider: None,\n         color_provider: None,\n         execute_command_provider: Some(ExecuteCommandOptions {"}, {"sha": "ca5cd5ab169d7704eb30c8d1f35fb7fa224bd2ff", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=2fa90e736b026ee979d9eb59178dc1f792228250", "patch": "@@ -314,6 +314,25 @@ pub fn handle_completion(\n     Ok(Some(req::CompletionResponse::Array(items)))\n }\n \n+pub fn handle_on_type_formatting(\n+    world: ServerWorld,\n+    params: req::DocumentOnTypeFormattingParams,\n+) -> Result<Option<Vec<TextEdit>>> {\n+    if params.ch != \"=\" {\n+        return Ok(None);\n+    }\n+\n+    let file_id = params.text_document.try_conv_with(&world)?;\n+    let line_index = world.analysis().file_line_index(file_id)?;\n+    let offset = params.position.conv_with(&line_index);\n+    let file = world.analysis().file_syntax(file_id)?;\n+    let action = match libeditor::on_eq_typed(&file, offset) {\n+        None => return Ok(None),\n+        Some(action) => action,\n+    };\n+    Ok(Some(action.edit.conv_with(&line_index)))\n+}\n+\n pub fn handle_execute_command(\n     world: ServerWorld,\n     mut params: req::ExecuteCommandParams,"}, {"sha": "accb13878419b954bf74bd9cf7bf68770fd53798", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=2fa90e736b026ee979d9eb59178dc1f792228250", "patch": "@@ -31,6 +31,7 @@ use {\n         handle_completion,\n         handle_runnables,\n         handle_decorations,\n+        handle_on_type_formatting,\n     },\n };\n \n@@ -161,6 +162,9 @@ fn on_request(\n     handle_request_on_threadpool::<req::DecorationsRequest>(\n         &mut req, pool, world, sender, handle_decorations,\n     )?;\n+    handle_request_on_threadpool::<req::OnTypeFormatting>(\n+        &mut req, pool, world, sender, handle_on_type_formatting,\n+    )?;\n     dispatch::handle_request::<req::ExecuteCommand, _>(&mut req, |params, resp| {\n         io.send(RawMsg::Response(resp.into_response(Ok(None))?));\n "}, {"sha": "881069b1f02e29688ab3c966687a7915b7d7430b", "filename": "crates/server/src/req.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Fserver%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa90e736b026ee979d9eb59178dc1f792228250/crates%2Fserver%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Freq.rs?ref=2fa90e736b026ee979d9eb59178dc1f792228250", "patch": "@@ -14,6 +14,7 @@ pub use languageserver_types::{\n     TextDocumentPositionParams,\n     TextEdit,\n     CompletionParams, CompletionResponse,\n+    DocumentOnTypeFormattingParams,\n };\n \n "}]}