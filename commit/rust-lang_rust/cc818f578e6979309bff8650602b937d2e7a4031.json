{"sha": "cc818f578e6979309bff8650602b937d2e7a4031", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjODE4ZjU3OGU2OTc5MzA5YmZmODY1MDYwMmI5MzdkMmU3YTQwMzE=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-03-11T13:04:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-11T13:04:28Z"}, "message": "Merge pull request #2519 from ordovicia/issue-2516\n\nFix #2516", "tree": {"sha": "7070c4422a0a4dbdb0293ef71a3fe4acc54fbe3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7070c4422a0a4dbdb0293ef71a3fe4acc54fbe3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc818f578e6979309bff8650602b937d2e7a4031", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJapSlcCRBK7hj4Ov3rIwAAdHIIAAX04GDIQsEcWqYeyraA4cs/\njKmc1+/S4/7EbZ6XGb6x2kE3Of8dh9BoEbdk9ceYZXalwQVnb03riV4g98r/wy1b\nOrMkSG240hchPR7stJucfys73cXMcSWuMVi7ec+gM2yWqgTaReAUwt6Q3DEn/ohC\nqvgGkF6A2IxhoXNUb30O0LjBCFPizrM0Gvd6MKJlVW972sXLeeRYubMQxi8w3Om2\nM1DMoG+FWV7hXSts0y4CAYfbuyjxsbd7UD3jdXi0CjjI7fR79SVADCqW8FuCO2Pn\nnbssAfuO3igWATKWwikv0mq4s01sOs78hZMWkVDaMGkFeAEYGhxt6DdTPWjaSUU=\n=q5j4\n-----END PGP SIGNATURE-----\n", "payload": "tree 7070c4422a0a4dbdb0293ef71a3fe4acc54fbe3c\nparent 6776e5123a4f471979aa64cf01f84085a4824b72\nparent d63716343538497c628122d54f4f57893594b9e0\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1520773468 +0100\ncommitter GitHub <noreply@github.com> 1520773468 +0100\n\nMerge pull request #2519 from ordovicia/issue-2516\n\nFix #2516"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc818f578e6979309bff8650602b937d2e7a4031", "html_url": "https://github.com/rust-lang/rust/commit/cc818f578e6979309bff8650602b937d2e7a4031", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc818f578e6979309bff8650602b937d2e7a4031/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6776e5123a4f471979aa64cf01f84085a4824b72", "url": "https://api.github.com/repos/rust-lang/rust/commits/6776e5123a4f471979aa64cf01f84085a4824b72", "html_url": "https://github.com/rust-lang/rust/commit/6776e5123a4f471979aa64cf01f84085a4824b72"}, {"sha": "d63716343538497c628122d54f4f57893594b9e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d63716343538497c628122d54f4f57893594b9e0", "html_url": "https://github.com/rust-lang/rust/commit/d63716343538497c628122d54f4f57893594b9e0"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "36457023d9280a0664c7912dc2401cca418cb9ac", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc818f578e6979309bff8650602b937d2e7a4031/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cc818f578e6979309bff8650602b937d2e7a4031/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=cc818f578e6979309bff8650602b937d2e7a4031", "patch": "@@ -49,6 +49,7 @@ lazy_static = \"1.0\"\n serde_derive = \"1.0\"\n clippy-mini-macro-test = { version = \"0.2\", path = \"mini-macro\" }\n serde = \"1.0\"\n+derive-new = \"0.5\"\n \n [features]\n debugging = []"}, {"sha": "a63447575ef6db9f8cc68bddb925039125ed7f0f", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc818f578e6979309bff8650602b937d2e7a4031/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc818f578e6979309bff8650602b937d2e7a4031/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=cc818f578e6979309bff8650602b937d2e7a4031", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::{is_range_expression, match_var, span_lint_and_sugg};\n+use utils::{in_macro, is_range_expression, match_var, span_lint_and_sugg};\n \n /// **What it does:** Checks for fields in struct literals where shorthands\n /// could be used.\n@@ -36,10 +36,10 @@ impl LintPass for RedundantFieldNames {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantFieldNames {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        // Do not care about range expressions.\n-        // They could have redundant field name when desugared to structs.\n-        // e.g. `start..end` is desugared to `Range { start: start, end: end }`\n-        if is_range_expression(expr.span) {\n+        // Ignore all macros including range expressions.\n+        // They can have redundant field names when expanded.\n+        // e.g. range expression `start..end` is desugared to `Range { start: start, end: end }`\n+        if in_macro(expr.span) || is_range_expression(expr.span) {\n             return;\n         }\n "}, {"sha": "98b6e16c450c4d28cf6b060982045a107c5b68ed", "filename": "tests/ui/redundant_field_names.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc818f578e6979309bff8650602b937d2e7a4031/tests%2Fui%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc818f578e6979309bff8650602b937d2e7a4031/tests%2Fui%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.rs?ref=cc818f578e6979309bff8650602b937d2e7a4031", "patch": "@@ -2,6 +2,9 @@\n #![allow(unused_variables)]\n #![feature(inclusive_range, inclusive_range_syntax)]\n \n+#[macro_use]\n+extern crate derive_new;\n+\n use std::ops::{Range, RangeFrom, RangeTo, RangeInclusive, RangeToInclusive};\n \n mod foo {\n@@ -16,6 +19,11 @@ struct Person {\n     foo: u8,\n }\n \n+#[derive(new)]\n+pub struct S {\n+    v: String,\n+}\n+\n fn main() {\n     let gender: u8 = 42;\n     let age = 0;"}, {"sha": "91db8a5f0d16c628d125d1125753b3d2716606eb", "filename": "tests/ui/redundant_field_names.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cc818f578e6979309bff8650602b937d2e7a4031/tests%2Fui%2Fredundant_field_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc818f578e6979309bff8650602b937d2e7a4031/tests%2Fui%2Fredundant_field_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_field_names.stderr?ref=cc818f578e6979309bff8650602b937d2e7a4031", "patch": "@@ -1,57 +1,57 @@\n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:26:9\n+  --> $DIR/redundant_field_names.rs:34:9\n    |\n-26 |         gender: gender,\n+34 |         gender: gender,\n    |         ^^^^^^^^^^^^^^ help: replace it with: `gender`\n    |\n    = note: `-D redundant-field-names` implied by `-D warnings`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:27:9\n+  --> $DIR/redundant_field_names.rs:35:9\n    |\n-27 |         age: age,\n+35 |         age: age,\n    |         ^^^^^^^^ help: replace it with: `age`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:45:25\n+  --> $DIR/redundant_field_names.rs:53:25\n    |\n-45 |     let _ = RangeFrom { start: start };\n+53 |     let _ = RangeFrom { start: start };\n    |                         ^^^^^^^^^^^^ help: replace it with: `start`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:46:23\n+  --> $DIR/redundant_field_names.rs:54:23\n    |\n-46 |     let _ = RangeTo { end: end };\n+54 |     let _ = RangeTo { end: end };\n    |                       ^^^^^^^^ help: replace it with: `end`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:47:21\n+  --> $DIR/redundant_field_names.rs:55:21\n    |\n-47 |     let _ = Range { start: start, end: end };\n+55 |     let _ = Range { start: start, end: end };\n    |                     ^^^^^^^^^^^^ help: replace it with: `start`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:47:35\n+  --> $DIR/redundant_field_names.rs:55:35\n    |\n-47 |     let _ = Range { start: start, end: end };\n+55 |     let _ = Range { start: start, end: end };\n    |                                   ^^^^^^^^ help: replace it with: `end`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:48:30\n+  --> $DIR/redundant_field_names.rs:56:30\n    |\n-48 |     let _ = RangeInclusive { start: start, end: end };\n+56 |     let _ = RangeInclusive { start: start, end: end };\n    |                              ^^^^^^^^^^^^ help: replace it with: `start`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:48:44\n+  --> $DIR/redundant_field_names.rs:56:44\n    |\n-48 |     let _ = RangeInclusive { start: start, end: end };\n+56 |     let _ = RangeInclusive { start: start, end: end };\n    |                                            ^^^^^^^^ help: replace it with: `end`\n \n error: redundant field names in struct initialization\n-  --> $DIR/redundant_field_names.rs:49:32\n+  --> $DIR/redundant_field_names.rs:57:32\n    |\n-49 |     let _ = RangeToInclusive { end: end };\n+57 |     let _ = RangeToInclusive { end: end };\n    |                                ^^^^^^^^ help: replace it with: `end`\n \n error: aborting due to 9 previous errors"}]}