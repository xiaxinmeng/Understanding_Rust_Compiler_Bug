{"sha": "8e8c97e5fde0321da6e706d2f193cb3f395de1b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOGM5N2U1ZmRlMDMyMWRhNmU3MDZkMmYxOTNjYjNmMzk1ZGUxYjY=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-10-03T03:49:04Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-12-02T13:30:30Z"}, "message": "Ensure predecessors are recomputed at critical points, fixes panics", "tree": {"sha": "ee9ce2c6d7d00e21d80339e205f2b68cdb422c76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee9ce2c6d7d00e21d80339e205f2b68cdb422c76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e8c97e5fde0321da6e706d2f193cb3f395de1b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e8c97e5fde0321da6e706d2f193cb3f395de1b6", "html_url": "https://github.com/rust-lang/rust/commit/8e8c97e5fde0321da6e706d2f193cb3f395de1b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e8c97e5fde0321da6e706d2f193cb3f395de1b6/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "570e4182e8377f6194b5c7d3654d5753472f4ef4", "url": "https://api.github.com/repos/rust-lang/rust/commits/570e4182e8377f6194b5c7d3654d5753472f4ef4", "html_url": "https://github.com/rust-lang/rust/commit/570e4182e8377f6194b5c7d3654d5753472f4ef4"}], "stats": {"total": 62, "additions": 40, "deletions": 22}, "files": [{"sha": "d9530ac0791da5aa305df16f6fe42da2b5bff868", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8e8c97e5fde0321da6e706d2f193cb3f395de1b6/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8c97e5fde0321da6e706d2f193cb3f395de1b6/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=8e8c97e5fde0321da6e706d2f193cb3f395de1b6", "patch": "@@ -210,12 +210,14 @@ impl<'tcx> Body<'tcx> {\n         &mut self, bb: BasicBlock\n     ) -> &mut Option<Terminator<'tcx>> {\n         // FIXME we should look into improving the cache invalidation\n+        debug!(\"Invalidating predecessors cache through opt terminator for block at : {:?}\", self.span.data());\n         self.predecessors_cache = None;\n         &mut self.basic_blocks[bb].terminator\n     }\n \n     pub fn basic_block_terminator_mut(&mut self, bb: BasicBlock) -> &mut Terminator<'tcx> {\n         // FIXME we should look into improving the cache invalidation\n+        debug!(\"Invalidating predecessors cache through terminator for block at : {:?}\", self.span.data());\n         self.predecessors_cache = None;\n         self.basic_blocks[bb].terminator_mut()\n     }\n@@ -229,36 +231,35 @@ impl<'tcx> Body<'tcx> {\n \n     #[inline]\n     pub fn unwrap_predecessors(&self) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n-        assert!(self.predecessors_cache.is_some());\n+        assert!(self.predecessors_cache.is_some(), \"Expected predecessors_cache to be `Some(...)` for block at: {:?}\", self.span.data());\n         self.predecessors_cache.as_ref().unwrap()\n     }\n \n     #[inline]\n-    /// This will recompute the predecessors cache if it is not available\n-    pub fn predecessors(&mut self) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n+    pub fn ensure_predecessors(&mut self) {\n         if self.predecessors_cache.is_none() {\n-            self.predecessors_cache = Some(self.calculate_predecessors())\n-        }\n-\n-        self.predecessors_cache.as_ref().unwrap()\n-    }\n-\n-    fn calculate_predecessors(&self) -> IndexVec<BasicBlock, Vec<BasicBlock>> {\n-        let mut result = IndexVec::from_elem(vec![], self.basic_blocks());\n-        for (bb, data) in self.basic_blocks().iter_enumerated() {\n-            if let Some(ref term) = data.terminator {\n-                for &tgt in term.successors() {\n-                    result[tgt].push(bb);\n+            let mut result = IndexVec::from_elem(vec![], self.basic_blocks());\n+            for (bb, data) in self.basic_blocks().iter_enumerated() {\n+                if let Some(ref term) = data.terminator {\n+                    for &tgt in term.successors() {\n+                        result[tgt].push(bb);\n+                    }\n                 }\n             }\n+\n+            self.predecessors_cache = Some(result)\n         }\n+    }\n \n-        result\n+    #[inline]\n+    /// This will recompute the predecessors cache if it is not available\n+    pub fn predecessors(&mut self) -> &IndexVec<BasicBlock, Vec<BasicBlock>> {\n+        self.ensure_predecessors();\n+        self.predecessors_cache.as_ref().unwrap()\n     }\n \n     #[inline]\n     pub fn predecessors_for(&self, bb: BasicBlock) -> &[BasicBlock] {\n-        // FIXME(nashenas88) could this be predecessors sometimes too?\n         &self.unwrap_predecessors()[bb]\n     }\n "}, {"sha": "6e36764fb807b0822b0ee29ee735fd43c25867e9", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e8c97e5fde0321da6e706d2f193cb3f395de1b6/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8c97e5fde0321da6e706d2f193cb3f395de1b6/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=8e8c97e5fde0321da6e706d2f193cb3f395de1b6", "patch": "@@ -123,6 +123,8 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n         &add_call_guards::CriticalCallEdges,\n     ]);\n \n+    result.ensure_predecessors();\n+\n     debug!(\"make_shim({:?}) = {:?}\", instance, result);\n \n     tcx.arena.alloc(result)\n@@ -909,12 +911,13 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> &Body<'_> {\n         is_cleanup: false\n     };\n \n-    let body = new_body(\n+    let mut body = new_body(\n         IndexVec::from_elem_n(start_block, 1),\n         local_decls,\n         sig.inputs().len(),\n         span,\n     );\n+    body.ensure_predecessors();\n \n     crate::util::dump_mir(\n         tcx,"}, {"sha": "db1ef863351c0d57b273c81c2cb2d456ce2c11f4", "filename": "src/librustc_mir/transform/ensure_predecessors_cache.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8e8c97e5fde0321da6e706d2f193cb3f395de1b6/src%2Flibrustc_mir%2Ftransform%2Fensure_predecessors_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8c97e5fde0321da6e706d2f193cb3f395de1b6/src%2Flibrustc_mir%2Ftransform%2Fensure_predecessors_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fensure_predecessors_cache.rs?ref=8e8c97e5fde0321da6e706d2f193cb3f395de1b6", "patch": "@@ -2,14 +2,25 @@ use rustc::mir::Body;\n use rustc::ty::TyCtxt;\n use crate::transform::{MirPass, MirSource};\n \n-pub struct EnsurePredecessorsCache;\n+pub struct EnsurePredecessorsCache {\n+    label: String,\n+}\n+\n+impl EnsurePredecessorsCache {\n+    pub fn new<S: Into<String>>(label: S) -> Self {\n+        Self {\n+            label: label.into(),\n+        }\n+    }\n+}\n \n impl<'tcx> MirPass<'tcx> for EnsurePredecessorsCache {\n     fn run_pass(&self, _: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+        debug!(\"{}: Ensure predecessors cache: {:?}\", self.label, body.span.data());\n         // predecessors is lazily calculated. We want to ensure that the cache is properly filled\n-        // before the next stages of compilation, since thise following stages will only be allowed\n+        // before the next stages of compilation, since these following stages will only be allowed\n         // to read the cache and not generate it. If the cache is already up to date, this line is\n         // a nop.\n-        let _predecessors = body.predecessors();\n+        body.ensure_predecessors();\n     }\n }"}, {"sha": "76e89ce5cf2041d11b49c776a491f8b7f68f088a", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e8c97e5fde0321da6e706d2f193cb3f395de1b6/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8c97e5fde0321da6e706d2f193cb3f395de1b6/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=8e8c97e5fde0321da6e706d2f193cb3f395de1b6", "patch": "@@ -249,6 +249,7 @@ fn mir_validated(\n         // What we need to run borrowck etc.\n         &promote_pass,\n         &simplify::SimplifyCfg::new(\"qualify-consts\"),\n+        &ensure_predecessors_cache::EnsurePredecessorsCache::new(\"qualify-consts\"),\n     ]);\n     let promoted = promote_pass.promoted_fragments.into_inner();\n     (tcx.alloc_steal_mir(body), tcx.alloc_steal_promoted(promoted))\n@@ -296,6 +297,8 @@ fn run_optimization_passes<'tcx>(\n         &uniform_array_move_out::RestoreSubsliceArrayMoveOut::new(tcx),\n         &inline::Inline,\n \n+        // State transform requires that predecessors have been predefined\n+        &ensure_predecessors_cache::EnsurePredecessorsCache::new(\"pre-state-transform\"),\n         // Lowering generator control-flow and variables\n         // has to happen before we do anything else to them.\n         &generator::StateTransform,\n@@ -314,7 +317,7 @@ fn run_optimization_passes<'tcx>(\n         &simplify::SimplifyLocals,\n \n         &add_call_guards::CriticalCallEdges,\n-        &ensure_predecessors_cache::EnsurePredecessorsCache,\n+        &ensure_predecessors_cache::EnsurePredecessorsCache::new(\"before-opt-dump\"),\n         &dump_mir::Marker(\"PreCodegen\"),\n     ]);\n }"}]}