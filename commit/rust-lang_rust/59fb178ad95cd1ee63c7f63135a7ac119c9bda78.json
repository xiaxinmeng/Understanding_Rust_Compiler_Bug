{"sha": "59fb178ad95cd1ee63c7f63135a7ac119c9bda78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZmIxNzhhZDk1Y2QxZWU2M2M3ZjYzMTM1YTdhYzExOWM5YmRhNzg=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-11T18:38:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-11T18:38:45Z"}, "message": "Rollup merge of #52253 - ljedrz:dyn_librustc_data_structures, r=cramertj\n\nDeny bare trait objects in in src/librustc_data_structures\n\nEnforce `#![deny(bare_trait_objects)]` in `src/librustc_data_structures`.", "tree": {"sha": "80e067bbee144bf0f1f3ecc1c5083e131df714de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80e067bbee144bf0f1f3ecc1c5083e131df714de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59fb178ad95cd1ee63c7f63135a7ac119c9bda78", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbRk61CRBK7hj4Ov3rIwAAdHIIAKiQ8JqzSkNjxoa0H5XkcOjA\n4m7XzoVYJnF1AyD0+0/cOC0vaX7A+kN7LCduMMW1VvgiWyMky59gUokBn4STArMb\n9HhT9XP/9mVa++jxGbupObmy+4ySWVwyzWTRZEMZSWoqWx9jll1lI5itSlOkm2SM\nFjltGc+spjRnV+kKMwC5JZO7RD6EzEUj9tvzDcD+a51uhkv7n3dn4/94vNFXOqjZ\nb8gd+RwaREwApmG5Im2Nhy5iHHbkWGlutKxuTsSy5WXRr50xyrg304YoY8ByEbme\nM3B0g5dyM4I0/BYu1KJamFMUtwB6WbXuYuaBokbYoqXMVD1hZ3fE7+n2OSmuDdg=\n=1ORk\n-----END PGP SIGNATURE-----\n", "payload": "tree 80e067bbee144bf0f1f3ecc1c5083e131df714de\nparent dcc536fc14571d3f0cf7e20edf20c5c12ae13dfb\nparent 6cfd49e8dd8c09122c8b4f98ca3e7a33080e6e80\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1531334325 -0600\ncommitter GitHub <noreply@github.com> 1531334325 -0600\n\nRollup merge of #52253 - ljedrz:dyn_librustc_data_structures, r=cramertj\n\nDeny bare trait objects in in src/librustc_data_structures\n\nEnforce `#![deny(bare_trait_objects)]` in `src/librustc_data_structures`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59fb178ad95cd1ee63c7f63135a7ac119c9bda78", "html_url": "https://github.com/rust-lang/rust/commit/59fb178ad95cd1ee63c7f63135a7ac119c9bda78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59fb178ad95cd1ee63c7f63135a7ac119c9bda78/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcc536fc14571d3f0cf7e20edf20c5c12ae13dfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcc536fc14571d3f0cf7e20edf20c5c12ae13dfb", "html_url": "https://github.com/rust-lang/rust/commit/dcc536fc14571d3f0cf7e20edf20c5c12ae13dfb"}, {"sha": "6cfd49e8dd8c09122c8b4f98ca3e7a33080e6e80", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cfd49e8dd8c09122c8b4f98ca3e7a33080e6e80", "html_url": "https://github.com/rust-lang/rust/commit/6cfd49e8dd8c09122c8b4f98ca3e7a33080e6e80"}], "stats": {"total": 58, "additions": 30, "deletions": 28}, "files": [{"sha": "2cca31f70a092ce82fa07146bad432148d121e10", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59fb178ad95cd1ee63c7f63135a7ac119c9bda78/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59fb178ad95cd1ee63c7f63135a7ac119c9bda78/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=59fb178ad95cd1ee63c7f63135a7ac119c9bda78", "patch": "@@ -16,6 +16,8 @@\n //!\n //! This API is completely unstable and subject to change.\n \n+#![deny(bare_trait_objects)]\n+\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"https://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]"}, {"sha": "02640a71010e2daf5a7d501987a839451be0203f", "filename": "src/librustc_data_structures/owning_ref/mod.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/59fb178ad95cd1ee63c7f63135a7ac119c9bda78/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59fb178ad95cd1ee63c7f63135a7ac119c9bda78/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs?ref=59fb178ad95cd1ee63c7f63135a7ac119c9bda78", "patch": "@@ -1046,7 +1046,7 @@ unsafe impl<O, T: ?Sized> Send for OwningRefMut<O, T>\n unsafe impl<O, T: ?Sized> Sync for OwningRefMut<O, T>\n     where O: Sync, for<'a> (&'a mut T): Sync {}\n \n-impl Debug for Erased {\n+impl Debug for dyn Erased {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"<Erased>\",)\n     }\n@@ -1166,35 +1166,35 @@ pub type MutexGuardRefMut<'a, T, U = T> = OwningRefMut<MutexGuard<'a, T>, U>;\n pub type RwLockWriteGuardRefMut<'a, T, U = T> = OwningRef<RwLockWriteGuard<'a, T>, U>;\n \n unsafe impl<'a, T: 'a> IntoErased<'a> for Box<T> {\n-    type Erased = Box<Erased + 'a>;\n+    type Erased = Box<dyn Erased + 'a>;\n     fn into_erased(self) -> Self::Erased {\n         self\n     }\n }\n unsafe impl<'a, T: 'a> IntoErased<'a> for Rc<T> {\n-    type Erased = Rc<Erased + 'a>;\n+    type Erased = Rc<dyn Erased + 'a>;\n     fn into_erased(self) -> Self::Erased {\n         self\n     }\n }\n unsafe impl<'a, T: 'a> IntoErased<'a> for Arc<T> {\n-    type Erased = Arc<Erased + 'a>;\n+    type Erased = Arc<dyn Erased + 'a>;\n     fn into_erased(self) -> Self::Erased {\n         self\n     }\n }\n \n unsafe impl<'a, T: Send + 'a> IntoErasedSend<'a> for Box<T> {\n-    type Erased = Box<Erased + Send + 'a>;\n+    type Erased = Box<dyn Erased + Send + 'a>;\n     fn into_erased_send(self) -> Self::Erased {\n         self\n     }\n }\n \n unsafe impl<'a, T: Send + 'a> IntoErasedSendSync<'a> for Box<T> {\n-    type Erased = Box<Erased + Sync + Send + 'a>;\n+    type Erased = Box<dyn Erased + Sync + Send + 'a>;\n     fn into_erased_send_sync(self) -> Self::Erased {\n-        let result: Box<Erased + Send + 'a> = self;\n+        let result: Box<dyn Erased + Send + 'a> = self;\n         // This is safe since Erased can always implement Sync\n         // Only the destructor is available and it takes &mut self\n         unsafe {\n@@ -1204,21 +1204,21 @@ unsafe impl<'a, T: Send + 'a> IntoErasedSendSync<'a> for Box<T> {\n }\n \n unsafe impl<'a, T: Send + Sync + 'a> IntoErasedSendSync<'a> for Arc<T> {\n-    type Erased = Arc<Erased + Send + Sync + 'a>;\n+    type Erased = Arc<dyn Erased + Send + Sync + 'a>;\n     fn into_erased_send_sync(self) -> Self::Erased {\n         self\n     }\n }\n \n /// Typedef of a owning reference that uses an erased `Box` as the owner.\n-pub type ErasedBoxRef<U> = OwningRef<Box<Erased>, U>;\n+pub type ErasedBoxRef<U> = OwningRef<Box<dyn Erased>, U>;\n /// Typedef of a owning reference that uses an erased `Rc` as the owner.\n-pub type ErasedRcRef<U> = OwningRef<Rc<Erased>, U>;\n+pub type ErasedRcRef<U> = OwningRef<Rc<dyn Erased>, U>;\n /// Typedef of a owning reference that uses an erased `Arc` as the owner.\n-pub type ErasedArcRef<U> = OwningRef<Arc<Erased>, U>;\n+pub type ErasedArcRef<U> = OwningRef<Arc<dyn Erased>, U>;\n \n /// Typedef of a mutable owning reference that uses an erased `Box` as the owner.\n-pub type ErasedBoxRefMut<U> = OwningRefMut<Box<Erased>, U>;\n+pub type ErasedBoxRefMut<U> = OwningRefMut<Box<dyn Erased>, U>;\n \n #[cfg(test)]\n mod tests {\n@@ -1443,8 +1443,8 @@ mod tests {\n             let c: OwningRef<Rc<Vec<u8>>, [u8]> = unsafe {a.map_owner(Rc::new)};\n             let d: OwningRef<Rc<Box<[u8]>>, [u8]> = unsafe {b.map_owner(Rc::new)};\n \n-            let e: OwningRef<Rc<Erased>, [u8]> = c.erase_owner();\n-            let f: OwningRef<Rc<Erased>, [u8]> = d.erase_owner();\n+            let e: OwningRef<Rc<dyn Erased>, [u8]> = c.erase_owner();\n+            let f: OwningRef<Rc<dyn Erased>, [u8]> = d.erase_owner();\n \n             let _g = e.clone();\n             let _h = f.clone();\n@@ -1460,16 +1460,16 @@ mod tests {\n             let c: OwningRef<Box<Vec<u8>>, [u8]> = a.map_owner_box();\n             let d: OwningRef<Box<Box<[u8]>>, [u8]> = b.map_owner_box();\n \n-            let _e: OwningRef<Box<Erased>, [u8]> = c.erase_owner();\n-            let _f: OwningRef<Box<Erased>, [u8]> = d.erase_owner();\n+            let _e: OwningRef<Box<dyn Erased>, [u8]> = c.erase_owner();\n+            let _f: OwningRef<Box<dyn Erased>, [u8]> = d.erase_owner();\n         }\n \n         #[test]\n         fn try_map1() {\n             use std::any::Any;\n \n             let x = Box::new(123_i32);\n-            let y: Box<Any> = x;\n+            let y: Box<dyn Any> = x;\n \n             OwningRef::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_ok();\n         }\n@@ -1479,7 +1479,7 @@ mod tests {\n             use std::any::Any;\n \n             let x = Box::new(123_i32);\n-            let y: Box<Any> = x;\n+            let y: Box<dyn Any> = x;\n \n             OwningRef::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_err();\n         }\n@@ -1843,8 +1843,8 @@ mod tests {\n             let c: OwningRefMut<Box<Vec<u8>>, [u8]> = unsafe {a.map_owner(Box::new)};\n             let d: OwningRefMut<Box<Box<[u8]>>, [u8]> = unsafe {b.map_owner(Box::new)};\n \n-            let _e: OwningRefMut<Box<Erased>, [u8]> = c.erase_owner();\n-            let _f: OwningRefMut<Box<Erased>, [u8]> = d.erase_owner();\n+            let _e: OwningRefMut<Box<dyn Erased>, [u8]> = c.erase_owner();\n+            let _f: OwningRefMut<Box<dyn Erased>, [u8]> = d.erase_owner();\n         }\n \n         #[test]\n@@ -1857,16 +1857,16 @@ mod tests {\n             let c: OwningRefMut<Box<Vec<u8>>, [u8]> = a.map_owner_box();\n             let d: OwningRefMut<Box<Box<[u8]>>, [u8]> = b.map_owner_box();\n \n-            let _e: OwningRefMut<Box<Erased>, [u8]> = c.erase_owner();\n-            let _f: OwningRefMut<Box<Erased>, [u8]> = d.erase_owner();\n+            let _e: OwningRefMut<Box<dyn Erased>, [u8]> = c.erase_owner();\n+            let _f: OwningRefMut<Box<dyn Erased>, [u8]> = d.erase_owner();\n         }\n \n         #[test]\n         fn try_map1() {\n             use std::any::Any;\n \n             let x = Box::new(123_i32);\n-            let y: Box<Any> = x;\n+            let y: Box<dyn Any> = x;\n \n             OwningRefMut::new(y).try_map_mut(|x| x.downcast_mut::<i32>().ok_or(())).is_ok();\n         }\n@@ -1876,7 +1876,7 @@ mod tests {\n             use std::any::Any;\n \n             let x = Box::new(123_i32);\n-            let y: Box<Any> = x;\n+            let y: Box<dyn Any> = x;\n \n             OwningRefMut::new(y).try_map_mut(|x| x.downcast_mut::<i32>().ok_or(())).is_err();\n         }\n@@ -1886,7 +1886,7 @@ mod tests {\n             use std::any::Any;\n \n             let x = Box::new(123_i32);\n-            let y: Box<Any> = x;\n+            let y: Box<dyn Any> = x;\n \n             OwningRefMut::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_ok();\n         }\n@@ -1896,7 +1896,7 @@ mod tests {\n             use std::any::Any;\n \n             let x = Box::new(123_i32);\n-            let y: Box<Any> = x;\n+            let y: Box<dyn Any> = x;\n \n             OwningRefMut::new(y).try_map(|x| x.downcast_ref::<i32>().ok_or(())).is_err();\n         }"}, {"sha": "d4c6b1c2ced812fc4ddce1fedc8988180ec8665d", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59fb178ad95cd1ee63c7f63135a7ac119c9bda78/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59fb178ad95cd1ee63c7f63135a7ac119c9bda78/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=59fb178ad95cd1ee63c7f63135a7ac119c9bda78", "patch": "@@ -88,7 +88,7 @@ cfg_if! {\n             t.into_iter()\n         }\n \n-        pub type MetadataRef = OwningRef<Box<Erased>, [u8]>;\n+        pub type MetadataRef = OwningRef<Box<dyn Erased>, [u8]>;\n \n         pub use std::rc::Rc as Lrc;\n         pub use std::rc::Weak as Weak;\n@@ -268,7 +268,7 @@ cfg_if! {\n             t.into_par_iter()\n         }\n \n-        pub type MetadataRef = OwningRef<Box<Erased + Send + Sync>, [u8]>;\n+        pub type MetadataRef = OwningRef<Box<dyn Erased + Send + Sync>, [u8]>;\n \n         /// This makes locks panic if they are already held.\n         /// It is only useful when you are running in a single thread"}]}