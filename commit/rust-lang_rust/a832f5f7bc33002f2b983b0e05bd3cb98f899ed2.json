{"sha": "a832f5f7bc33002f2b983b0e05bd3cb98f899ed2", "node_id": "C_kwDOAAsO6NoAKGE4MzJmNWY3YmMzMzAwMmYyYjk4M2IwZTA1YmQzY2I5OGY4OTllZDI", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-10-17T23:41:57Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-01-29T13:52:19Z"}, "message": "Create `core::fmt::ArgumentV1` with generics instead of fn pointer", "tree": {"sha": "3e3a9e8302cdacf70e71d13cd6f112a8d115d9b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e3a9e8302cdacf70e71d13cd6f112a8d115d9b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2", "html_url": "https://github.com/rust-lang/rust/commit/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfe15646761a75f0259e204cab071565eed2b1e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe15646761a75f0259e204cab071565eed2b1e5", "html_url": "https://github.com/rust-lang/rust/commit/bfe15646761a75f0259e204cab071565eed2b1e5"}], "stats": {"total": 170, "additions": 98, "deletions": 72}, "files": [{"sha": "453f2163da1bd6c3df60eba0f6f1afdb705afc2e", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=a832f5f7bc33002f2b983b0e05bd3cb98f899ed2", "patch": "@@ -877,11 +877,21 @@ impl<'a, 'b> Context<'a, 'b> {\n                 return ecx.expr_call_global(macsp, path, vec![arg]);\n             }\n         };\n+        let new_fn_name = match trait_ {\n+            \"Display\" => \"new_display\",\n+            \"Debug\" => \"new_debug\",\n+            \"LowerExp\" => \"new_lower_exp\",\n+            \"UpperExp\" => \"new_upper_exp\",\n+            \"Octal\" => \"new_octal\",\n+            \"Pointer\" => \"new_pointer\",\n+            \"Binary\" => \"new_binary\",\n+            \"LowerHex\" => \"new_lower_hex\",\n+            \"UpperHex\" => \"new_upper_hex\",\n+            _ => unreachable!(),\n+        };\n \n-        let path = ecx.std_path(&[sym::fmt, Symbol::intern(trait_), sym::fmt]);\n-        let format_fn = ecx.path_global(sp, path);\n-        let path = ecx.std_path(&[sym::fmt, sym::ArgumentV1, sym::new]);\n-        ecx.expr_call_global(macsp, path, vec![arg, ecx.expr_path(format_fn)])\n+        let path = ecx.std_path(&[sym::fmt, sym::ArgumentV1, Symbol::intern(new_fn_name)]);\n+        ecx.expr_call_global(sp, path, vec![arg])\n     }\n }\n "}, {"sha": "5ea0efde9c0c152307ce9d41b9c002b211fc02b5", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 21, "deletions": 41, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=a832f5f7bc33002f2b983b0e05bd3cb98f899ed2", "patch": "@@ -42,54 +42,28 @@ impl<'tcx> Visitor<'tcx> for FunctionItemRefChecker<'_, 'tcx> {\n         } = &terminator.kind\n         {\n             let source_info = *self.body.source_info(location);\n-            // Only handle function calls outside macros\n-            if !source_info.span.from_expansion() {\n-                let func_ty = func.ty(self.body, self.tcx);\n-                if let ty::FnDef(def_id, substs_ref) = *func_ty.kind() {\n-                    // Handle calls to `transmute`\n-                    if self.tcx.is_diagnostic_item(sym::transmute, def_id) {\n-                        let arg_ty = args[0].ty(self.body, self.tcx);\n-                        for generic_inner_ty in arg_ty.walk() {\n-                            if let GenericArgKind::Type(inner_ty) = generic_inner_ty.unpack() {\n-                                if let Some((fn_id, fn_substs)) =\n-                                    FunctionItemRefChecker::is_fn_ref(inner_ty)\n-                                {\n-                                    let span = self.nth_arg_span(&args, 0);\n-                                    self.emit_lint(fn_id, fn_substs, source_info, span);\n-                                }\n+            let func_ty = func.ty(self.body, self.tcx);\n+            if let ty::FnDef(def_id, substs_ref) = *func_ty.kind() {\n+                // Handle calls to `transmute`\n+                if self.tcx.is_diagnostic_item(sym::transmute, def_id) {\n+                    let arg_ty = args[0].ty(self.body, self.tcx);\n+                    for generic_inner_ty in arg_ty.walk() {\n+                        if let GenericArgKind::Type(inner_ty) = generic_inner_ty.unpack() {\n+                            if let Some((fn_id, fn_substs)) =\n+                                FunctionItemRefChecker::is_fn_ref(inner_ty)\n+                            {\n+                                let span = self.nth_arg_span(&args, 0);\n+                                self.emit_lint(fn_id, fn_substs, source_info, span);\n                             }\n                         }\n-                    } else {\n-                        self.check_bound_args(def_id, substs_ref, &args, source_info);\n                     }\n+                } else {\n+                    self.check_bound_args(def_id, substs_ref, &args, source_info);\n                 }\n             }\n         }\n         self.super_terminator(terminator, location);\n     }\n-\n-    /// Emits a lint for function references formatted with `fmt::Pointer::fmt` by macros. These\n-    /// cases are handled as operands instead of call terminators to avoid any dependence on\n-    /// unstable, internal formatting details like whether `fmt` is called directly or not.\n-    fn visit_operand(&mut self, operand: &Operand<'tcx>, location: Location) {\n-        let source_info = *self.body.source_info(location);\n-        if source_info.span.from_expansion() {\n-            let op_ty = operand.ty(self.body, self.tcx);\n-            if let ty::FnDef(def_id, substs_ref) = *op_ty.kind() {\n-                if self.tcx.is_diagnostic_item(sym::pointer_trait_fmt, def_id) {\n-                    let param_ty = substs_ref.type_at(0);\n-                    if let Some((fn_id, fn_substs)) = FunctionItemRefChecker::is_fn_ref(param_ty) {\n-                        // The operand's ctxt wouldn't display the lint since it's inside a macro so\n-                        // we have to use the callsite's ctxt.\n-                        let callsite_ctxt = source_info.span.source_callsite().ctxt();\n-                        let span = source_info.span.with_ctxt(callsite_ctxt);\n-                        self.emit_lint(fn_id, fn_substs, source_info, span);\n-                    }\n-                }\n-            }\n-        }\n-        self.super_operand(operand, location);\n-    }\n }\n \n impl<'tcx> FunctionItemRefChecker<'_, 'tcx> {\n@@ -119,7 +93,13 @@ impl<'tcx> FunctionItemRefChecker<'_, 'tcx> {\n                                 if let Some((fn_id, fn_substs)) =\n                                     FunctionItemRefChecker::is_fn_ref(subst_ty)\n                                 {\n-                                    let span = self.nth_arg_span(args, arg_num);\n+                                    let mut span = self.nth_arg_span(args, arg_num);\n+                                    if span.from_expansion() {\n+                                        // The operand's ctxt wouldn't display the lint since it's inside a macro so\n+                                        // we have to use the callsite's ctxt.\n+                                        let callsite_ctxt = span.source_callsite().ctxt();\n+                                        span = span.with_ctxt(callsite_ctxt);\n+                                    }\n                                     self.emit_lint(fn_id, fn_substs, source_info, span);\n                                 }\n                             }"}, {"sha": "e1ea98813031aac5b15b675c995e7eb32756f3ac", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=a832f5f7bc33002f2b983b0e05bd3cb98f899ed2", "patch": "@@ -308,9 +308,21 @@ static USIZE_MARKER: fn(&usize, &mut Formatter<'_>) -> Result = |ptr, _| {\n     loop {}\n };\n \n+macro_rules! arg_new {\n+    ($f: ident, $t: ident) => {\n+        #[doc(hidden)]\n+        #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n+        #[inline]\n+        pub fn $f<'b, T: $t>(x: &'b T) -> ArgumentV1<'_> {\n+            Self::new(x, $t::fmt)\n+        }\n+    };\n+}\n+\n impl<'a> ArgumentV1<'a> {\n     #[doc(hidden)]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n+    #[inline]\n     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {\n         // SAFETY: `mem::transmute(x)` is safe because\n         //     1. `&'b T` keeps the lifetime it originated with `'b`\n@@ -323,6 +335,16 @@ impl<'a> ArgumentV1<'a> {\n         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }\n     }\n \n+    arg_new!(new_display, Display);\n+    arg_new!(new_debug, Debug);\n+    arg_new!(new_octal, Octal);\n+    arg_new!(new_lower_hex, LowerHex);\n+    arg_new!(new_upper_hex, UpperHex);\n+    arg_new!(new_pointer, Pointer);\n+    arg_new!(new_binary, Binary);\n+    arg_new!(new_lower_exp, LowerExp);\n+    arg_new!(new_upper_exp, UpperExp);\n+\n     #[doc(hidden)]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n     pub fn from_usize(x: &usize) -> ArgumentV1<'_> {"}, {"sha": "e463099a5ee4795186d28aab4710755993fabb4e", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.closure.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.closure.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.closure.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.closure.txt?ref=a832f5f7bc33002f2b983b0e05bd3cb98f899ed2", "patch": "@@ -29,8 +29,8 @@\n    29|      1|    some_string = Some(String::from(\"the string content\"));\n    30|      1|    let\n    31|      1|        a\n-   32|       |    =\n-   33|       |        ||\n+   32|      1|    =\n+   33|      1|        ||\n    34|      0|    {\n    35|      0|        let mut countdown = 0;\n    36|      0|        if is_false {\n@@ -116,8 +116,8 @@\n   116|      1|\n   117|      1|    let\n   118|      1|        _unused_closure\n-  119|      1|    =\n-  120|      1|        |\n+  119|       |    =\n+  120|       |        |\n   121|       |            mut countdown\n   122|       |        |\n   123|      0|    {"}, {"sha": "c2d5143a61816f881992c53bf2c3fa2a412201dc", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_crate.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt?ref=a832f5f7bc33002f2b983b0e05bd3cb98f899ed2", "patch": "@@ -19,12 +19,12 @@\n    18|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n    19|      2|}\n   ------------------\n-  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n+  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n   |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}\n   ------------------\n-  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n+  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n   |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}\n@@ -36,12 +36,12 @@\n    22|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n    23|      2|}\n   ------------------\n-  | used_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n+  | used_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n   |   21|      1|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   22|      1|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n   |   23|      1|}\n   ------------------\n-  | used_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n+  | used_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n   |   21|      1|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   22|      1|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n   |   23|      1|}"}, {"sha": "dab31cbf4ac9eef4770d4c4a0b292c5da3f0aa25", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_inline_crate.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt?ref=a832f5f7bc33002f2b983b0e05bd3cb98f899ed2", "patch": "@@ -42,12 +42,12 @@\n    40|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n    41|      2|}\n   ------------------\n-  | used_inline_crate::used_only_from_bin_crate_generic_function::<&str>:\n+  | used_inline_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n   |   39|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   40|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   41|      1|}\n   ------------------\n-  | used_inline_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n+  | used_inline_crate::used_only_from_bin_crate_generic_function::<&str>:\n   |   39|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   40|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   41|      1|}\n@@ -61,12 +61,12 @@\n    46|      4|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n    47|      4|}\n   ------------------\n-  | used_inline_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n+  | used_inline_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n   |   45|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   46|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n   |   47|      2|}\n   ------------------\n-  | used_inline_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n+  | used_inline_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n   |   45|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   46|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n   |   47|      2|}"}, {"sha": "464e1e1cda779460d20a07af635f4e63d8248f26", "filename": "src/test/ui/attributes/key-value-expansion.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr?ref=a832f5f7bc33002f2b983b0e05bd3cb98f899ed2", "patch": "@@ -18,8 +18,7 @@ LL | bug!();\n error: unexpected token: `{\n            let res =\n                ::alloc::fmt::format(::core::fmt::Arguments::new_v1(&[\"\"],\n-                                                                   &[::core::fmt::ArgumentV1::new(&\"u8\",\n-                                                                                                  ::core::fmt::Display::fmt)]));\n+                                                                   &[::core::fmt::ArgumentV1::new_display(&\"u8\")]));\n            res\n        }.as_str()`\n   --> $DIR/key-value-expansion.rs:48:23"}, {"sha": "aee782a1c5b8529bbd1b95747c55a05c031d975b", "filename": "src/test/ui/closures/print/closure-print-generic-trim-off-verbose-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-trim-off-verbose-2.stderr?ref=a832f5f7bc33002f2b983b0e05bd3cb98f899ed2", "patch": "@@ -9,7 +9,7 @@ LL |         let c1 : () = c;\n    |                  expected due to this\n    |\n    = note: expected unit type `()`\n-                found closure `[mod1::f<T>::{closure#0} closure_substs=(unavailable) substs=[T, _#19t, extern \"rust-call\" fn(()), _#20t]]`\n+                found closure `[mod1::f<T>::{closure#0} closure_substs=(unavailable) substs=[T, _#16t, extern \"rust-call\" fn(()), _#15t]]`\n help: use parentheses to call this closure\n    |\n LL |         let c1 : () = c();"}, {"sha": "6a994ce718eac75e4d6515ef2c2e36c93a6641f2", "filename": "src/test/ui/closures/print/closure-print-generic-verbose-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-2.stderr?ref=a832f5f7bc33002f2b983b0e05bd3cb98f899ed2", "patch": "@@ -9,7 +9,7 @@ LL |         let c1 : () = c;\n    |                  expected due to this\n    |\n    = note: expected unit type `()`\n-                found closure `[f<T>::{closure#0} closure_substs=(unavailable) substs=[T, _#19t, extern \"rust-call\" fn(()), _#20t]]`\n+                found closure `[f<T>::{closure#0} closure_substs=(unavailable) substs=[T, _#16t, extern \"rust-call\" fn(()), _#15t]]`\n help: use parentheses to call this closure\n    |\n LL |         let c1 : () = c();"}, {"sha": "6e8dd79219106c69985584843efc8f574612ee1c", "filename": "src/test/ui/fmt/ifmt-unimpl.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr?ref=a832f5f7bc33002f2b983b0e05bd3cb98f899ed2", "patch": "@@ -5,6 +5,11 @@ LL |     format!(\"{:X}\", \"3\");\n    |                     ^^^ the trait `UpperHex` is not implemented for `str`\n    |\n    = note: required because of the requirements on the impl of `UpperHex` for `&str`\n+note: required by a bound in `ArgumentV1::<'a>::new_upper_hex`\n+  --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+   |\n+LL |     arg_new!(new_upper_hex, UpperHex);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ArgumentV1::<'a>::new_upper_hex`\n    = note: this error originates in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "378fdc97dd315559ceb83bf4b93f59d0625c2bcb", "filename": "src/test/ui/issues/issue-69455.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr?ref=a832f5f7bc33002f2b983b0e05bd3cb98f899ed2", "patch": "@@ -1,14 +1,14 @@\n error[E0282]: type annotations needed\n-  --> $DIR/issue-69455.rs:29:5\n+  --> $DIR/issue-69455.rs:29:20\n    |\n LL |     type Output;\n    |     ------------ `<Self as Test<Rhs>>::Output` defined here\n ...\n LL |     println!(\"{}\", 23u64.test(xs.iter().sum()));\n-   |     ^^^^^^^^^^^^^^^---------------------------^\n-   |     |              |\n-   |     |              this method call resolves to `<Self as Test<Rhs>>::Output`\n-   |     cannot infer type for type parameter `T` declared on the associated function `new`\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    |\n+   |                    this method call resolves to `<Self as Test<Rhs>>::Output`\n+   |                    cannot infer type for type parameter `T` declared on the associated function `new_display`\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "a75f6b86a9bae4de295769ec1a72c5bfcd4db38c", "filename": "src/tools/clippy/clippy_utils/src/macros.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a832f5f7bc33002f2b983b0e05bd3cb98f899ed2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmacros.rs?ref=a832f5f7bc33002f2b983b0e05bd3cb98f899ed2", "patch": "@@ -339,15 +339,13 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n         expr_visitor_no_bodies(|e| {\n             // if we're still inside of the macro definition...\n             if e.span.ctxt() == expr.span.ctxt() {\n-                // ArgumnetV1::new(<value>, <format_trait>::fmt)\n+                // ArgumnetV1::new_<format_trait>(<value>)\n                 if_chain! {\n-                    if let ExprKind::Call(callee, [val, fmt_path]) = e.kind;\n+                    if let ExprKind::Call(callee, [val]) = e.kind;\n                     if let ExprKind::Path(QPath::TypeRelative(ty, seg)) = callee.kind;\n-                    if seg.ident.name == sym::new;\n                     if let hir::TyKind::Path(QPath::Resolved(_, path)) = ty.kind;\n                     if path.segments.last().unwrap().ident.name == sym::ArgumentV1;\n-                    if let ExprKind::Path(QPath::Resolved(_, path)) = fmt_path.kind;\n-                    if let [.., fmt_trait, _fmt] = path.segments;\n+                    if seg.ident.name.as_str().starts_with(\"new_\");\n                     then {\n                         let val_idx = if_chain! {\n                             if val.span.ctxt() == expr.span.ctxt();\n@@ -361,7 +359,19 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n                                 formatters.len()\n                             }\n                         };\n-                        formatters.push((val_idx, fmt_trait.ident.name));\n+                        let fmt_trait = match seg.ident.name.as_str() {\n+                            \"new_display\" => \"Display\",\n+                            \"new_debug\" => \"Debug\",\n+                            \"new_lower_exp\" => \"LowerExp\",\n+                            \"new_upper_exp\" => \"UpperExp\",\n+                            \"new_octal\" => \"Octal\",\n+                            \"new_pointer\" => \"Pointer\",\n+                            \"new_binary\" => \"Binary\",\n+                            \"new_lower_hex\" => \"LowerHex\",\n+                            \"new_upper_hex\" => \"UpperHex\",\n+                            _ => unreachable!(),\n+                        };\n+                        formatters.push((val_idx, Symbol::intern(fmt_trait)));\n                     }\n                 }\n                 if let ExprKind::Struct(QPath::Resolved(_, path), ..) = e.kind {"}]}