{"sha": "a8286927800f2e9f050f0d8c3d6797d5f0885656", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4Mjg2OTI3ODAwZjJlOWYwNTBmMGQ4YzNkNjc5N2Q1ZjA4ODU2NTY=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-10-25T16:27:28Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-10-25T16:27:28Z"}, "message": "Use BasicBlockData::terminator", "tree": {"sha": "f725d64f1d8abed2e02beb80b6fe6c98801de576", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f725d64f1d8abed2e02beb80b6fe6c98801de576"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8286927800f2e9f050f0d8c3d6797d5f0885656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8286927800f2e9f050f0d8c3d6797d5f0885656", "html_url": "https://github.com/rust-lang/rust/commit/a8286927800f2e9f050f0d8c3d6797d5f0885656", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8286927800f2e9f050f0d8c3d6797d5f0885656/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d6ff885852e669a59013629193b74c2458005af", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d6ff885852e669a59013629193b74c2458005af", "html_url": "https://github.com/rust-lang/rust/commit/6d6ff885852e669a59013629193b74c2458005af"}], "stats": {"total": 35, "additions": 13, "deletions": 22}, "files": [{"sha": "85f7bbb637ca4f6c256f3f70ec1b999d5f6ed197", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a8286927800f2e9f050f0d8c3d6797d5f0885656/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8286927800f2e9f050f0d8c3d6797d5f0885656/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=a8286927800f2e9f050f0d8c3d6797d5f0885656", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n         let mir = cx.tcx.optimized_mir(def_id);\n \n         for (bb, bbdata) in mir.basic_blocks().iter_enumerated() {\n-            let terminator = unwrap_or_continue!(&bbdata.terminator);\n+            let terminator = bbdata.terminator();\n \n             // Give up on loops\n             if terminator.successors().any(|s| *s == bb) {\n@@ -130,7 +130,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                 if ps.len() != 1 {\n                     continue;\n                 }\n-                let pred_terminator = unwrap_or_continue!(&mir[ps[0]].terminator);\n+                let pred_terminator = mir[ps[0]].terminator();\n \n                 let pred_arg = if_chain! {\n                     if let Some((pred_fn_def_id, pred_arg, pred_arg_ty, Some(res))) =\n@@ -152,11 +152,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n             };\n \n             let used_later = traversal::ReversePostorder::new(&mir, bb).skip(1).any(|(tbb, tdata)| {\n-                if let Some(term) = &tdata.terminator {\n-                    // Give up on loops\n-                    if term.successors().any(|s| *s == bb) {\n-                        return true;\n-                    }\n+                // Give up on loops\n+                if tdata.terminator().successors().any(|s| *s == bb) {\n+                    return true;\n                 }\n \n                 let mut vis = LocalUseVisitor {\n@@ -256,12 +254,7 @@ struct LocalUseVisitor {\n \n impl<'tcx> mir::visit::Visitor<'tcx> for LocalUseVisitor {\n     fn visit_basic_block_data(&mut self, block: mir::BasicBlock, data: &mir::BasicBlockData<'tcx>) {\n-        let mir::BasicBlockData {\n-            statements,\n-            terminator,\n-            is_cleanup: _,\n-        } = data;\n-\n+        let statements = &data.statements;\n         for (statement_index, statement) in statements.iter().enumerate() {\n             self.visit_statement(block, statement, mir::Location { block, statement_index });\n \n@@ -271,16 +264,14 @@ impl<'tcx> mir::visit::Visitor<'tcx> for LocalUseVisitor {\n             }\n         }\n \n-        if let Some(terminator) = terminator {\n-            self.visit_terminator(\n+        self.visit_terminator(\n+            block,\n+            data.terminator(),\n+            mir::Location {\n                 block,\n-                terminator,\n-                mir::Location {\n-                    block,\n-                    statement_index: statements.len(),\n-                },\n-            );\n-        }\n+                statement_index: statements.len(),\n+            },\n+        );\n     }\n \n     fn visit_local(&mut self, local: &mir::Local, ctx: PlaceContext<'tcx>, _: mir::Location) {"}]}