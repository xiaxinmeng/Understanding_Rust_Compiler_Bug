{"sha": "e8f875813d75f5547c2e1e8b139c89a6275c0ccb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4Zjg3NTgxM2Q3NWY1NTQ3YzJlMWU4YjEzOWM4OWE2Mjc1YzBjY2I=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-09-28T05:11:03Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-09-28T05:11:03Z"}, "message": "all: remove trailing spaces", "tree": {"sha": "f6f9560183e6c3435c9e7edc9118c2fe3970bfac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6f9560183e6c3435c9e7edc9118c2fe3970bfac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8f875813d75f5547c2e1e8b139c89a6275c0ccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8f875813d75f5547c2e1e8b139c89a6275c0ccb", "html_url": "https://github.com/rust-lang/rust/commit/e8f875813d75f5547c2e1e8b139c89a6275c0ccb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8f875813d75f5547c2e1e8b139c89a6275c0ccb/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15e3774cb4a6536cdb6c01edaa93315743b9f49a", "url": "https://api.github.com/repos/rust-lang/rust/commits/15e3774cb4a6536cdb6c01edaa93315743b9f49a", "html_url": "https://github.com/rust-lang/rust/commit/15e3774cb4a6536cdb6c01edaa93315743b9f49a"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "f5ad37a71be44c56bfbad0a51204cd8ae9890b17", "filename": "src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f875813d75f5547c2e1e8b139c89a6275c0ccb/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f875813d75f5547c2e1e8b139c89a6275c0ccb/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=e8f875813d75f5547c2e1e8b139c89a6275c0ccb", "patch": "@@ -95,8 +95,8 @@ fn is_self_sig(sig: &MethodSig) -> bool {\n         false } else { sig.decl.inputs.len() == 1 }\n }\n \n-fn check_cmp(cx: &LateContext, span: Span, left: &Expr, right: &Expr, op: &str) {    \n-    // check if we are in an is_empty() method \n+fn check_cmp(cx: &LateContext, span: Span, left: &Expr, right: &Expr, op: &str) {\n+    // check if we are in an is_empty() method\n     if let Some(name) = get_item_name(cx, left) {\n         if name.as_str() == \"is_empty\" { return; }\n     }"}, {"sha": "f78012864a0a6922784f4a233f972652339d7b24", "filename": "tests/compile-fail/bit_masks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f875813d75f5547c2e1e8b139c89a6275c0ccb/tests%2Fcompile-fail%2Fbit_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f875813d75f5547c2e1e8b139c89a6275c0ccb/tests%2Fcompile-fail%2Fbit_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbit_masks.rs?ref=e8f875813d75f5547c2e1e8b139c89a6275c0ccb", "patch": "@@ -27,7 +27,7 @@ fn main() {\n \n     x & 192 == 128; // ok, tests for bit 7 and not bit 6\n     x & 0xffc0 == 0xfe80; // ok\n-    \n+\n     // this also now works with constants\n     x & THREE_BITS == 8; //~ERROR incompatible bit mask\n     x | EVEN_MORE_REDIRECTION < 7; //~ERROR incompatible bit mask"}, {"sha": "70cc1919be4243b2d213d4df450f493b5e08bc43", "filename": "tests/compile-fail/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8f875813d75f5547c2e1e8b139c89a6275c0ccb/tests%2Fcompile-fail%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f875813d75f5547c2e1e8b139c89a6275c0ccb/tests%2Fcompile-fail%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast.rs?ref=e8f875813d75f5547c2e1e8b139c89a6275c0ccb", "patch": "@@ -45,7 +45,7 @@ fn main() {\n     1usize as f32; //~ERROR casting usize to f32 causes a loss of precision (usize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n     1isize as i32; //~ERROR casting isize to i32 may truncate the value on targets with 64-bit wide pointers\n     1isize as u32; //~ERROR casting isize to u32 may lose the sign of the value\n-                  //~^ERROR casting isize to u32 may truncate the value on targets with 64-bit wide pointers       \n+                  //~^ERROR casting isize to u32 may truncate the value on targets with 64-bit wide pointers\n     1usize as u32; //~ERROR casting usize to u32 may truncate the value on targets with 64-bit wide pointers\n     1usize as i32; //~ERROR casting usize to i32 may truncate the value on targets with 64-bit wide pointers\n                   //~^ERROR casting usize to i32 may wrap around the value on targets with 32-bit wide pointers\n@@ -60,4 +60,4 @@ fn main() {\n     1u32 as usize; // Should not trigger any lint\n     1i32 as isize; // Neither should this\n     1i32 as usize; //~ERROR casting i32 to usize may lose the sign of the value\n-}\n\\ No newline at end of file\n+}"}, {"sha": "e55a0390ff324cf80478bc1116f771ab40673f7b", "filename": "tests/compile-fail/unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8f875813d75f5547c2e1e8b139c89a6275c0ccb/tests%2Fcompile-fail%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8f875813d75f5547c2e1e8b139c89a6275c0ccb/tests%2Fcompile-fail%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funicode.rs?ref=e8f875813d75f5547c2e1e8b139c89a6275c0ccb", "patch": "@@ -17,7 +17,7 @@ fn canon() {\n #[deny(non_ascii_literal)]\n fn uni() {\n     print!(\"\u00dcben!\"); //~ERROR literal non-ASCII character detected\n-    print!(\"\\u{DC}ben!\"); // this is okay \n+    print!(\"\\u{DC}ben!\"); // this is okay\n }\n \n fn main() {"}]}