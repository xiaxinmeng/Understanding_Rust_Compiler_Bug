{"sha": "7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNmRmYjQ1MWExZDcxYzBmZmEzOTY4OGNmZGViOGY3NTAwZTExZTE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-26T07:39:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-26T07:39:08Z"}, "message": "Rollup merge of #73597 - ayazhafiz:i/const-span, r=ecstatic-morse\n\nRecord span of `const` kw in GenericParamKind\n\nContext: this is needed for a fix of https://github.com/rust-lang/rustfmt/issues/4263,\nwhich currently records the span of a const generic param incorrectly\nbecause the location of the `const` kw is not known.\n\nI am not sure how to add tests for this; any guidance in how to do so\nwould be appreciated :slightly_smiling_face:", "tree": {"sha": "8863f4350b86ca2d53e66c1b6fe538df3a903e0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8863f4350b86ca2d53e66c1b6fe538df3a903e0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe9aYcCRBK7hj4Ov3rIwAAdHIIAFVNGguJKahqbUaRrBukKRMi\n9liI875OZf/fvHpLMxMceUdUfxUHRxr1auDvntyIdymBnYYgDNS4pE9HxiRONN//\n8qVXceXrz8K8vUiL/M6c7oBDSC8jZbGUNW77tBtfbuaxs9Pl0gUeTuBQpkv8+HPv\nGuIaHWhXIFfSzxwsR6BnuzBGQ0V3Ajh3QpW5LajA6AqgUuD8kY1KosI1ZkcrTyvf\n/6kuIpEFUNK3637h8WEIzAqAd/QKhkSJn2npCSDDSeKDdmco8frdyb+fgun0Gikh\n3WBtYOb9dINJwAYewIASQlVqGwOY3MXmvFnV/5hn8ACHRrJIYwsN8KfqPNk2tgM=\n=kJk0\n-----END PGP SIGNATURE-----\n", "payload": "tree 8863f4350b86ca2d53e66c1b6fe538df3a903e0a\nparent 81d2d3cf35127632927559c4eb78cfd17ff41c17\nparent 86f6c0e0861f4d223d00280107cd0b31b6ebb85b\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593157148 -0700\ncommitter GitHub <noreply@github.com> 1593157148 -0700\n\nRollup merge of #73597 - ayazhafiz:i/const-span, r=ecstatic-morse\n\nRecord span of `const` kw in GenericParamKind\n\nContext: this is needed for a fix of https://github.com/rust-lang/rustfmt/issues/4263,\nwhich currently records the span of a const generic param incorrectly\nbecause the location of the `const` kw is not known.\n\nI am not sure how to add tests for this; any guidance in how to do so\nwould be appreciated :slightly_smiling_face:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1", "html_url": "https://github.com/rust-lang/rust/commit/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81d2d3cf35127632927559c4eb78cfd17ff41c17", "url": "https://api.github.com/repos/rust-lang/rust/commits/81d2d3cf35127632927559c4eb78cfd17ff41c17", "html_url": "https://github.com/rust-lang/rust/commit/81d2d3cf35127632927559c4eb78cfd17ff41c17"}, {"sha": "86f6c0e0861f4d223d00280107cd0b31b6ebb85b", "url": "https://api.github.com/repos/rust-lang/rust/commits/86f6c0e0861f4d223d00280107cd0b31b6ebb85b", "html_url": "https://github.com/rust-lang/rust/commit/86f6c0e0861f4d223d00280107cd0b31b6ebb85b"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "99fbb1ee3ea834ddb73c0e7cfea0aeb19dcc7525", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1", "patch": "@@ -335,6 +335,8 @@ pub enum GenericParamKind {\n     },\n     Const {\n         ty: P<Ty>,\n+        /// Span of the `const` keyword.\n+        kw_span: Span,\n     },\n }\n "}, {"sha": "3fd2815daa14fcb165074e0545e1a9115b1cc2ac", "filename": "src/librustc_ast/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1/src%2Flibrustc_ast%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1/src%2Flibrustc_ast%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fmut_visit.rs?ref=7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1", "patch": "@@ -762,7 +762,7 @@ pub fn noop_flat_map_generic_param<T: MutVisitor>(\n         GenericParamKind::Type { default } => {\n             visit_opt(default, |default| vis.visit_ty(default));\n         }\n-        GenericParamKind::Const { ty } => {\n+        GenericParamKind::Const { ty, kw_span: _ } => {\n             vis.visit_ty(ty);\n         }\n     }"}, {"sha": "863f525bdc8f35c4b9f7aa72fcbf27880822a211", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1", "patch": "@@ -2230,7 +2230,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                 (hir::ParamName::Plain(param.ident), kind)\n             }\n-            GenericParamKind::Const { ref ty } => {\n+            GenericParamKind::Const { ref ty, kw_span: _ } => {\n                 let ty = self\n                     .with_anonymous_lifetime_mode(AnonymousLifetimeMode::ReportError, |this| {\n                         this.lower_ty(&ty, ImplTraitContext::disallowed())"}, {"sha": "975881d9a0ac0c898895c5318320f3dd6f9660a0", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1", "patch": "@@ -1135,9 +1135,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             generics.params.iter().map(|param| {\n                 let ident = Some(param.ident.to_string());\n                 let (kind, ident) = match &param.kind {\n-                    GenericParamKind::Lifetime { .. } => (ParamKindOrd::Lifetime, ident),\n-                    GenericParamKind::Type { .. } => (ParamKindOrd::Type, ident),\n-                    GenericParamKind::Const { ref ty } => {\n+                    GenericParamKind::Lifetime => (ParamKindOrd::Lifetime, ident),\n+                    GenericParamKind::Type { default: _ } => (ParamKindOrd::Type, ident),\n+                    GenericParamKind::Const { ref ty, kw_span: _ } => {\n                         let ty = pprust::ty_to_string(ty);\n                         (ParamKindOrd::Const, Some(format!(\"const {}: {}\", param.ident, ty)))\n                     }"}, {"sha": "86faa1f086ce2bf4edbac2fba0dc58626b811465", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1", "patch": "@@ -2578,7 +2578,7 @@ impl<'a> State<'a> {\n                         s.print_type(default)\n                     }\n                 }\n-                ast::GenericParamKind::Const { ref ty } => {\n+                ast::GenericParamKind::Const { ref ty, kw_span: _ } => {\n                     s.word_space(\"const\");\n                     s.print_ident(param.ident);\n                     s.s.space();"}, {"sha": "dc21be3b296aa16db1a128158501efbda5637dd4", "filename": "src/librustc_builtin_macros/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs?ref=7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1", "patch": "@@ -123,7 +123,7 @@ fn inject_impl_of_structural_trait(\n                 *default = None;\n                 ast::GenericArg::Type(cx.ty_ident(span, param.ident))\n             }\n-            ast::GenericParamKind::Const { ty: _ } => {\n+            ast::GenericParamKind::Const { ty: _, kw_span: _ } => {\n                 ast::GenericArg::Const(cx.const_ident(span, param.ident))\n             }\n         })"}, {"sha": "47794746126daa02579ccc7fc822c80d03d3110b", "filename": "src/librustc_parse/parser/generics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs?ref=7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1", "patch": "@@ -47,21 +47,21 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_const_param(&mut self, preceding_attrs: Vec<Attribute>) -> PResult<'a, GenericParam> {\n-        let lo = self.token.span;\n+        let const_span = self.token.span;\n \n         self.expect_keyword(kw::Const)?;\n         let ident = self.parse_ident()?;\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n \n-        self.sess.gated_spans.gate(sym::const_generics, lo.to(self.prev_token.span));\n+        self.sess.gated_spans.gate(sym::const_generics, const_span.to(self.prev_token.span));\n \n         Ok(GenericParam {\n             ident,\n             id: ast::DUMMY_NODE_ID,\n             attrs: preceding_attrs.into(),\n             bounds: Vec::new(),\n-            kind: GenericParamKind::Const { ty },\n+            kind: GenericParamKind::Const { ty, kw_span: const_span },\n             is_placeholder: false,\n         })\n     }"}, {"sha": "b8fb813ea155f71626eb89904348243084d67564", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1", "patch": "@@ -536,8 +536,8 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n \n         for param in &generics.params {\n             match param.kind {\n-                GenericParamKind::Lifetime { .. } => self.visit_generic_param(param),\n-                GenericParamKind::Type { ref default, .. } => {\n+                GenericParamKind::Lifetime => self.visit_generic_param(param),\n+                GenericParamKind::Type { ref default } => {\n                     for bound in &param.bounds {\n                         self.visit_param_bound(bound);\n                     }\n@@ -551,7 +551,7 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                     // Allow all following defaults to refer to this type parameter.\n                     default_ban_rib.bindings.remove(&Ident::with_dummy_span(param.ident.name));\n                 }\n-                GenericParamKind::Const { ref ty } => {\n+                GenericParamKind::Const { ref ty, kw_span: _ } => {\n                     for bound in &param.bounds {\n                         self.visit_param_bound(bound);\n                     }"}, {"sha": "e19a79dd8dad164dd40cc84a1a37f52740bb5bca", "filename": "src/tools/clippy/clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=7f6dfb451a1d71c0ffa39688cfdeb8f7500e11e1", "patch": "@@ -476,7 +476,7 @@ pub fn eq_generic_param(l: &GenericParam, r: &GenericParam) -> bool {\n         && match (&l.kind, &r.kind) {\n             (Lifetime, Lifetime) => true,\n             (Type { default: l }, Type { default: r }) => both(l, r, |l, r| eq_ty(l, r)),\n-            (Const { ty: l }, Const { ty: r }) => eq_ty(l, r),\n+            (Const { ty: l, kw_span: _ }, Const { ty: r, kw_span: _ }) => eq_ty(l, r),\n             _ => false,\n         }\n         && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))"}]}