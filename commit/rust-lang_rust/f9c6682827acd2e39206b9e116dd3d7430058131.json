{"sha": "f9c6682827acd2e39206b9e116dd3d7430058131", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YzY2ODI4MjdhY2QyZTM5MjA2YjllMTE2ZGQzZDc0MzAwNTgxMzE=", "commit": {"author": {"name": "bzzzz", "email": "evgeny.barbashov@gmail.com", "date": "2019-02-20T08:10:25Z"}, "committer": {"name": "bzzzz", "email": "evgeny.barbashov@gmail.com", "date": "2019-02-20T08:10:25Z"}, "message": "Make needless_range_loop not applicable to structures without iter method", "tree": {"sha": "fcf05ecce5fab1e82adc32bfaaa21795dbd36707", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcf05ecce5fab1e82adc32bfaaa21795dbd36707"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9c6682827acd2e39206b9e116dd3d7430058131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c6682827acd2e39206b9e116dd3d7430058131", "html_url": "https://github.com/rust-lang/rust/commit/f9c6682827acd2e39206b9e116dd3d7430058131", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9c6682827acd2e39206b9e116dd3d7430058131/comments", "author": {"login": "bzzzzzz", "id": 9977957, "node_id": "MDQ6VXNlcjk5Nzc5NTc=", "avatar_url": "https://avatars.githubusercontent.com/u/9977957?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bzzzzzz", "html_url": "https://github.com/bzzzzzz", "followers_url": "https://api.github.com/users/bzzzzzz/followers", "following_url": "https://api.github.com/users/bzzzzzz/following{/other_user}", "gists_url": "https://api.github.com/users/bzzzzzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bzzzzzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bzzzzzz/subscriptions", "organizations_url": "https://api.github.com/users/bzzzzzz/orgs", "repos_url": "https://api.github.com/users/bzzzzzz/repos", "events_url": "https://api.github.com/users/bzzzzzz/events{/privacy}", "received_events_url": "https://api.github.com/users/bzzzzzz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bzzzzzz", "id": 9977957, "node_id": "MDQ6VXNlcjk5Nzc5NTc=", "avatar_url": "https://avatars.githubusercontent.com/u/9977957?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bzzzzzz", "html_url": "https://github.com/bzzzzzz", "followers_url": "https://api.github.com/users/bzzzzzz/followers", "following_url": "https://api.github.com/users/bzzzzzz/following{/other_user}", "gists_url": "https://api.github.com/users/bzzzzzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bzzzzzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bzzzzzz/subscriptions", "organizations_url": "https://api.github.com/users/bzzzzzz/orgs", "repos_url": "https://api.github.com/users/bzzzzzz/repos", "events_url": "https://api.github.com/users/bzzzzzz/events{/privacy}", "received_events_url": "https://api.github.com/users/bzzzzzz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "075c212849ad2207c0b0ccbd0ec6cc5b1f392275", "url": "https://api.github.com/repos/rust-lang/rust/commits/075c212849ad2207c0b0ccbd0ec6cc5b1f392275", "html_url": "https://github.com/rust-lang/rust/commit/075c212849ad2207c0b0ccbd0ec6cc5b1f392275"}], "stats": {"total": 131, "additions": 89, "deletions": 42}, "files": [{"sha": "fcf6a879b91574d1c553f5dcc55e62ed5f533632", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9c6682827acd2e39206b9e116dd3d7430058131/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c6682827acd2e39206b9e116dd3d7430058131/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=f9c6682827acd2e39206b9e116dd3d7430058131", "patch": "@@ -27,7 +27,7 @@ use syntax_pos::BytePos;\n \n use crate::utils::paths;\n use crate::utils::{\n-    get_enclosing_block, get_parent_expr, higher, is_integer_literal, is_refutable, last_path_segment,\n+    get_enclosing_block, get_parent_expr, has_iter_method, higher, is_integer_literal, is_refutable, last_path_segment,\n     match_trait_method, match_type, match_var, multispan_sugg, snippet, snippet_opt, snippet_with_applicability,\n     span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then, SpanlessEq,\n };\n@@ -1118,6 +1118,12 @@ fn check_for_loop_range<'a, 'tcx>(\n                     }\n                 }\n \n+                // don't lint if the container that is indexed does not have .iter() method\n+                let has_iter = has_iter_method(cx, indexed_ty);\n+                if has_iter.is_none() {\n+                    return;\n+                }\n+\n                 // don't lint if the container that is indexed into is also used without\n                 // indexing\n                 if visitor.referenced.contains(&indexed) {"}, {"sha": "477ad1613afeac785aabddac1d5925f03861428b", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 17, "deletions": 41, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f9c6682827acd2e39206b9e116dd3d7430058131/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c6682827acd2e39206b9e116dd3d7430058131/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=f9c6682827acd2e39206b9e116dd3d7430058131", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::paths;\n use crate::utils::sugg;\n use crate::utils::{\n-    get_arg_name, get_parent_expr, get_trait_def_id, implements_trait, in_macro, is_copy, is_expn_of, is_self,\n+    get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, implements_trait, in_macro, is_copy, is_expn_of, is_self,\n     is_self_ty, iter_input_pats, last_path_segment, match_def_path, match_path, match_qpath, match_trait_method,\n     match_type, match_var, method_calls, method_chain_args, remove_blocks, return_ty, same_tys, single_segment_path,\n     snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_sugg,\n@@ -2228,47 +2228,23 @@ fn ty_has_iter_method(\n     cx: &LateContext<'_, '_>,\n     self_ref_ty: ty::Ty<'_>,\n ) -> Option<(&'static Lint, &'static str, &'static str)> {\n-    // FIXME: instead of this hard-coded list, we should check if `<adt>::iter`\n-    // exists and has the desired signature. Unfortunately FnCtxt is not exported\n-    // so we can't use its `lookup_method` method.\n-    static INTO_ITER_COLLECTIONS: [(&Lint, &[&str]); 13] = [\n-        (INTO_ITER_ON_REF, &paths::VEC),\n-        (INTO_ITER_ON_REF, &paths::OPTION),\n-        (INTO_ITER_ON_REF, &paths::RESULT),\n-        (INTO_ITER_ON_REF, &paths::BTREESET),\n-        (INTO_ITER_ON_REF, &paths::BTREEMAP),\n-        (INTO_ITER_ON_REF, &paths::VEC_DEQUE),\n-        (INTO_ITER_ON_REF, &paths::LINKED_LIST),\n-        (INTO_ITER_ON_REF, &paths::BINARY_HEAP),\n-        (INTO_ITER_ON_REF, &paths::HASHSET),\n-        (INTO_ITER_ON_REF, &paths::HASHMAP),\n-        (INTO_ITER_ON_ARRAY, &[\"std\", \"path\", \"PathBuf\"]),\n-        (INTO_ITER_ON_REF, &[\"std\", \"path\", \"Path\"]),\n-        (INTO_ITER_ON_REF, &[\"std\", \"sync\", \"mpsc\", \"Receiver\"]),\n-    ];\n-\n-    let (self_ty, mutbl) = match self_ref_ty.sty {\n-        ty::Ref(_, self_ty, mutbl) => (self_ty, mutbl),\n-        _ => unreachable!(),\n-    };\n-    let method_name = match mutbl {\n-        hir::MutImmutable => \"iter\",\n-        hir::MutMutable => \"iter_mut\",\n-    };\n-\n-    let def_id = match self_ty.sty {\n-        ty::Array(..) => return Some((INTO_ITER_ON_ARRAY, \"array\", method_name)),\n-        ty::Slice(..) => return Some((INTO_ITER_ON_REF, \"slice\", method_name)),\n-        ty::Adt(adt, _) => adt.did,\n-        _ => return None,\n-    };\n-\n-    for (lint, path) in &INTO_ITER_COLLECTIONS {\n-        if match_def_path(cx.tcx, def_id, path) {\n-            return Some((lint, path.last().unwrap(), method_name));\n-        }\n+    if let Some(ty_name) = has_iter_method(cx, self_ref_ty) {\n+        let lint = match ty_name {\n+            \"array\" | \"PathBuf\" => INTO_ITER_ON_ARRAY,\n+            _ => INTO_ITER_ON_REF,\n+        };\n+        let mutbl = match self_ref_ty.sty {\n+            ty::Ref(_, _, mutbl) => mutbl,\n+            _ => unreachable!(),\n+        };\n+        let method_name = match mutbl {\n+            hir::MutImmutable => \"iter\",\n+            hir::MutMutable => \"iter_mut\",\n+        };\n+        Some((lint, ty_name, method_name))\n+    } else {\n+        None\n     }\n-    None\n }\n \n fn lint_into_iter(cx: &LateContext<'_, '_>, expr: &hir::Expr, self_ref_ty: ty::Ty<'_>, method_span: Span) {"}, {"sha": "ce4213327b9298e8569448ed30e3c78087c30b52", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f9c6682827acd2e39206b9e116dd3d7430058131/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c6682827acd2e39206b9e116dd3d7430058131/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=f9c6682827acd2e39206b9e116dd3d7430058131", "patch": "@@ -1155,6 +1155,50 @@ pub fn any_parent_is_automatically_derived(tcx: TyCtxt<'_, '_, '_>, node: NodeId\n     false\n }\n \n+/// Returns true if ty has `iter` or `iter_mut` methods\n+pub fn has_iter_method(\n+    cx: &LateContext<'_, '_>,\n+    probably_ref_ty: ty::Ty<'_>,\n+) -> Option<&'static str> {\n+    // FIXME: instead of this hard-coded list, we should check if `<adt>::iter`\n+    // exists and has the desired signature. Unfortunately FnCtxt is not exported\n+    // so we can't use its `lookup_method` method.\n+    static INTO_ITER_COLLECTIONS: [&[&str]; 13] = [\n+        &paths::VEC,\n+        &paths::OPTION,\n+        &paths::RESULT,\n+        &paths::BTREESET,\n+        &paths::BTREEMAP,\n+        &paths::VEC_DEQUE,\n+        &paths::LINKED_LIST,\n+        &paths::BINARY_HEAP,\n+        &paths::HASHSET,\n+        &paths::HASHMAP,\n+        &paths::PATH_BUF,\n+        &paths::PATH,\n+        &paths::RECIEVER,\n+    ];\n+\n+    let ty_to_check = match probably_ref_ty.sty {\n+        ty::Ref(_, ty_to_check, _) => ty_to_check,\n+        _ => probably_ref_ty,\n+    };\n+\n+    let def_id = match ty_to_check.sty {\n+        ty::Array(..) => return Some(\"array\"),\n+        ty::Slice(..) => return Some(\"slice\"),\n+        ty::Adt(adt, _) => adt.did,\n+        _ => return None,\n+    };\n+\n+    for path in &INTO_ITER_COLLECTIONS {\n+        if match_def_path(cx.tcx, def_id, path) {\n+            return Some(path.last().unwrap());\n+        }\n+    }\n+    None\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::{trim_multiline, without_block_comments};"}, {"sha": "a6b3203fbef4355d4239a2720a5c6091d1100d1d", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9c6682827acd2e39206b9e116dd3d7430058131/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c6682827acd2e39206b9e116dd3d7430058131/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=f9c6682827acd2e39206b9e116dd3d7430058131", "patch": "@@ -62,6 +62,7 @@ pub const ORD: [&str; 3] = [\"core\", \"cmp\", \"Ord\"];\n pub const OS_STRING: [&str; 4] = [\"std\", \"ffi\", \"os_str\", \"OsString\"];\n pub const OS_STR_TO_OS_STRING: [&str; 5] = [\"std\", \"ffi\", \"os_str\", \"OsStr\", \"to_os_string\"];\n pub const PARTIAL_ORD: [&str; 3] = [\"core\", \"cmp\", \"PartialOrd\"];\n+pub const PATH: [&str; 3] = [\"std\", \"path\", \"Path\"];\n pub const PATH_BUF: [&str; 3] = [\"std\", \"path\", \"PathBuf\"];\n pub const PATH_TO_PATH_BUF: [&str; 4] = [\"std\", \"path\", \"Path\", \"to_path_buf\"];\n pub const PTR_NULL: [&str; 2] = [\"ptr\", \"null\"];\n@@ -80,6 +81,7 @@ pub const RANGE_TO_INCLUSIVE: [&str; 3] = [\"core\", \"ops\", \"RangeToInclusive\"];\n pub const RANGE_TO_INCLUSIVE_STD: [&str; 3] = [\"std\", \"ops\", \"RangeToInclusive\"];\n pub const RANGE_TO_STD: [&str; 3] = [\"std\", \"ops\", \"RangeTo\"];\n pub const RC: [&str; 3] = [\"alloc\", \"rc\", \"Rc\"];\n+pub const RECIEVER: [&str; 4] = [\"std\", \"sync\", \"mpsc\", \"Receiver\"];\n pub const REGEX: [&str; 3] = [\"regex\", \"re_unicode\", \"Regex\"];\n pub const REGEX_BUILDER_NEW: [&str; 5] = [\"regex\", \"re_builder\", \"unicode\", \"RegexBuilder\", \"new\"];\n pub const REGEX_BYTES_BUILDER_NEW: [&str; 5] = [\"regex\", \"re_builder\", \"bytes\", \"RegexBuilder\", \"new\"];"}, {"sha": "70ad6eac65f6d59dced91a7ad969c50b4d472adc", "filename": "tests/ui/needless_range_loop.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f9c6682827acd2e39206b9e116dd3d7430058131/tests%2Fui%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c6682827acd2e39206b9e116dd3d7430058131/tests%2Fui%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.rs?ref=f9c6682827acd2e39206b9e116dd3d7430058131", "patch": "@@ -85,4 +85,23 @@ fn main() {\n     for i in 0..vec.len() {\n         vec[i] = Some(1).unwrap_or_else(|| panic!(\"error on {}\", i));\n     }\n+\n+    // #3788\n+    let test = Test {\n+        inner: vec![1, 2, 3, 4],\n+    };\n+    for i in 0..2 {\n+        println!(\"{}\", test[i]);\n+    }\n+}\n+\n+struct Test {\n+    inner: Vec<usize>,\n+}\n+\n+impl std::ops::Index<usize> for Test {\n+    type Output = usize;\n+    fn index(&self, index: usize) -> &Self::Output {\n+        &self.inner[index]\n+    }\n }"}]}