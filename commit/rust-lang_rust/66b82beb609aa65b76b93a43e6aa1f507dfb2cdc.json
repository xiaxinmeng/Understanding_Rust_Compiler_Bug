{"sha": "66b82beb609aa65b76b93a43e6aa1f507dfb2cdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YjgyYmViNjA5YWE2NWI3NmI5M2E0M2U2YWExZjUwN2RmYjJjZGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-22T03:52:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-22T03:52:23Z"}, "message": "Auto merge of #33830 - moosingin3space:feature/mutable-high-priority-binaryheap, r=alexcrichton\n\nMutable access to the top element of a BinaryHeap\n\nAn implementation of the library change discussed here: https://github.com/rust-lang/rfcs/issues/1626", "tree": {"sha": "a4300739df4028fa8d2853a45cefd85d42aba6fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4300739df4028fa8d2853a45cefd85d42aba6fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66b82beb609aa65b76b93a43e6aa1f507dfb2cdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66b82beb609aa65b76b93a43e6aa1f507dfb2cdc", "html_url": "https://github.com/rust-lang/rust/commit/66b82beb609aa65b76b93a43e6aa1f507dfb2cdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66b82beb609aa65b76b93a43e6aa1f507dfb2cdc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8deebe3d678dcc65dce713e894544e234f1c474", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8deebe3d678dcc65dce713e894544e234f1c474", "html_url": "https://github.com/rust-lang/rust/commit/b8deebe3d678dcc65dce713e894544e234f1c474"}, {"sha": "2a34a7b83914f3ff7d2d52827b4c92bffefb5f92", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a34a7b83914f3ff7d2d52827b4c92bffefb5f92", "html_url": "https://github.com/rust-lang/rust/commit/2a34a7b83914f3ff7d2d52827b4c92bffefb5f92"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "140801737bc4c28166a379584fc70edc32cb830b", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/66b82beb609aa65b76b93a43e6aa1f507dfb2cdc/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b82beb609aa65b76b93a43e6aa1f507dfb2cdc/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=66b82beb609aa65b76b93a43e6aa1f507dfb2cdc", "patch": "@@ -151,6 +151,7 @@\n #![allow(missing_docs)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use core::ops::{Drop, Deref, DerefMut};\n use core::iter::FromIterator;\n use core::mem::swap;\n use core::mem::size_of;\n@@ -218,6 +219,37 @@ pub struct BinaryHeap<T> {\n     data: Vec<T>,\n }\n \n+/// A container object that represents the result of the [`peek_mut()`] method\n+/// on `BinaryHeap`. See its documentation for details.\n+///\n+/// [`peek_mut()`]: struct.BinaryHeap.html#method.peek_mut\n+#[unstable(feature = \"binary_heap_peek_mut\", issue = \"34392\")]\n+pub struct PeekMut<'a, T: 'a + Ord> {\n+    heap: &'a mut BinaryHeap<T>\n+}\n+\n+#[unstable(feature = \"binary_heap_peek_mut\", issue = \"34392\")]\n+impl<'a, T: Ord> Drop for PeekMut<'a, T> {\n+    fn drop(&mut self) {\n+        self.heap.sift_down(0);\n+    }\n+}\n+\n+#[unstable(feature = \"binary_heap_peek_mut\", issue = \"34392\")]\n+impl<'a, T: Ord> Deref for PeekMut<'a, T> {\n+    type Target = T;\n+    fn deref(&self) -> &T {\n+        &self.heap.data[0]\n+    }\n+}\n+\n+#[unstable(feature = \"binary_heap_peek_mut\", issue = \"34392\")]\n+impl<'a, T: Ord> DerefMut for PeekMut<'a, T> {\n+    fn deref_mut(&mut self) -> &mut T {\n+        &mut self.heap.data[0]\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Clone> Clone for BinaryHeap<T> {\n     fn clone(&self) -> Self {\n@@ -323,6 +355,42 @@ impl<T: Ord> BinaryHeap<T> {\n         self.data.get(0)\n     }\n \n+    /// Returns a mutable reference to the greatest item in the binary heap, or\n+    /// `None` if it is empty.\n+    ///\n+    /// Note: If the `PeekMut` value is leaked, the heap may be in an\n+    /// inconsistent state.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(binary_heap_peek_mut)]\n+    /// use std::collections::BinaryHeap;\n+    /// let mut heap = BinaryHeap::new();\n+    /// assert!(heap.peek_mut().is_none());\n+    ///\n+    /// heap.push(1);\n+    /// heap.push(5);\n+    /// heap.push(2);\n+    /// {\n+    ///     let mut val = heap.peek_mut().unwrap();\n+    ///     *val = 0;\n+    /// }\n+    /// assert_eq!(heap.peek(), Some(&2));\n+    /// ```\n+    #[unstable(feature = \"binary_heap_peek_mut\", issue = \"34392\")]\n+    pub fn peek_mut(&mut self) -> Option<PeekMut<T>> {\n+        if self.is_empty() {\n+            None\n+        } else {\n+            Some(PeekMut {\n+                heap: self\n+            })\n+        }\n+    }\n+\n     /// Returns the number of elements the binary heap can hold without reallocating.\n     ///\n     /// # Examples"}, {"sha": "be933abe41fe201f8d1c8be9efd9e88d1b708de0", "filename": "src/libcollectionstest/binary_heap.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/66b82beb609aa65b76b93a43e6aa1f507dfb2cdc/src%2Flibcollectionstest%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b82beb609aa65b76b93a43e6aa1f507dfb2cdc/src%2Flibcollectionstest%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbinary_heap.rs?ref=66b82beb609aa65b76b93a43e6aa1f507dfb2cdc", "patch": "@@ -81,6 +81,18 @@ fn test_peek_and_pop() {\n     }\n }\n \n+#[test]\n+fn test_peek_mut() {\n+    let data = vec![2, 4, 6, 2, 1, 8, 10, 3, 5, 7, 0, 9, 1];\n+    let mut heap = BinaryHeap::from(data);\n+    assert_eq!(heap.peek(), Some(&10));\n+    {\n+        let mut top = heap.peek_mut().unwrap();\n+        *top -= 2;\n+    }\n+    assert_eq!(heap.peek(), Some(&9));\n+}\n+\n #[test]\n fn test_push() {\n     let mut heap = BinaryHeap::from(vec![2, 4, 9]);\n@@ -192,6 +204,12 @@ fn test_empty_peek() {\n     assert!(empty.peek().is_none());\n }\n \n+#[test]\n+fn test_empty_peek_mut() {\n+    let mut empty = BinaryHeap::<i32>::new();\n+    assert!(empty.peek_mut().is_none());\n+}\n+\n #[test]\n fn test_empty_replace() {\n     let mut heap = BinaryHeap::new();"}, {"sha": "6161bad7468c6c330efbabaf35ab697f6d6e0ad2", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/66b82beb609aa65b76b93a43e6aa1f507dfb2cdc/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b82beb609aa65b76b93a43e6aa1f507dfb2cdc/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=66b82beb609aa65b76b93a43e6aa1f507dfb2cdc", "patch": "@@ -12,6 +12,7 @@\n \n #![feature(binary_heap_extras)]\n #![feature(binary_heap_append)]\n+#![feature(binary_heap_peek_mut)]\n #![feature(box_syntax)]\n #![feature(btree_append)]\n #![feature(btree_split_off)]"}]}