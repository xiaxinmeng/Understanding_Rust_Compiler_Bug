{"sha": "f61394f0bd9c7d5951d2f70207177ff5a6b038fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MTM5NGYwYmQ5YzdkNTk1MWQyZjcwMjA3MTc3ZmY1YTZiMDM4ZmE=", "commit": {"author": {"name": "Sunjay Varma", "email": "varma.sunjay@gmail.com", "date": "2017-09-22T02:18:47Z"}, "committer": {"name": "Sunjay Varma", "email": "varma.sunjay@gmail.com", "date": "2017-10-18T02:14:14Z"}, "message": "Lifting Generics from MethodSig to TraitItem and ImplItem since we want to support generics in each variant of TraitItem and ImplItem", "tree": {"sha": "443eef3b6b3c8c6a557ed21af366037eb35e5fd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/443eef3b6b3c8c6a557ed21af366037eb35e5fd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f61394f0bd9c7d5951d2f70207177ff5a6b038fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f61394f0bd9c7d5951d2f70207177ff5a6b038fa", "html_url": "https://github.com/rust-lang/rust/commit/f61394f0bd9c7d5951d2f70207177ff5a6b038fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/comments", "author": {"login": "sunjay", "id": 530939, "node_id": "MDQ6VXNlcjUzMDkzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/530939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunjay", "html_url": "https://github.com/sunjay", "followers_url": "https://api.github.com/users/sunjay/followers", "following_url": "https://api.github.com/users/sunjay/following{/other_user}", "gists_url": "https://api.github.com/users/sunjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunjay/subscriptions", "organizations_url": "https://api.github.com/users/sunjay/orgs", "repos_url": "https://api.github.com/users/sunjay/repos", "events_url": "https://api.github.com/users/sunjay/events{/privacy}", "received_events_url": "https://api.github.com/users/sunjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunjay", "id": 530939, "node_id": "MDQ6VXNlcjUzMDkzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/530939?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunjay", "html_url": "https://github.com/sunjay", "followers_url": "https://api.github.com/users/sunjay/followers", "following_url": "https://api.github.com/users/sunjay/following{/other_user}", "gists_url": "https://api.github.com/users/sunjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunjay/subscriptions", "organizations_url": "https://api.github.com/users/sunjay/orgs", "repos_url": "https://api.github.com/users/sunjay/repos", "events_url": "https://api.github.com/users/sunjay/events{/privacy}", "received_events_url": "https://api.github.com/users/sunjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6d7514545cbe83e771a400d04049b96dfb210cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d7514545cbe83e771a400d04049b96dfb210cd", "html_url": "https://github.com/rust-lang/rust/commit/f6d7514545cbe83e771a400d04049b96dfb210cd"}], "stats": {"total": 91, "additions": 51, "deletions": 40}, "files": [{"sha": "f3363bde6e7a9f8e6d147c03fe9b2f43a7ab01d6", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f61394f0bd9c7d5951d2f70207177ff5a6b038fa", "patch": "@@ -1548,15 +1548,15 @@ impl<'a> LoweringContext<'a> {\n                     }\n                     TraitItemKind::Method(ref sig, None) => {\n                         let names = this.lower_fn_args_to_names(&sig.decl);\n-                        hir::TraitItemKind::Method(this.lower_method_sig(sig),\n+                        hir::TraitItemKind::Method(this.lower_method_sig(&i.generics, sig),\n                                                    hir::TraitMethod::Required(names))\n                     }\n                     TraitItemKind::Method(ref sig, Some(ref body)) => {\n                         let body_id = this.lower_body(Some(&sig.decl), |this| {\n                             let body = this.lower_block(body, false);\n                             this.expr_block(body, ThinVec::new())\n                         });\n-                        hir::TraitItemKind::Method(this.lower_method_sig(sig),\n+                        hir::TraitItemKind::Method(this.lower_method_sig(&i.generics, sig),\n                                                    hir::TraitMethod::Provided(body_id))\n                     }\n                     TraitItemKind::Type(ref bounds, ref default) => {\n@@ -1615,7 +1615,7 @@ impl<'a> LoweringContext<'a> {\n                             let body = this.lower_block(body, false);\n                             this.expr_block(body, ThinVec::new())\n                         });\n-                        hir::ImplItemKind::Method(this.lower_method_sig(sig), body_id)\n+                        hir::ImplItemKind::Method(this.lower_method_sig(&i.generics, sig), body_id)\n                     }\n                     ImplItemKind::Type(ref ty) => hir::ImplItemKind::Type(this.lower_ty(ty)),\n                     ImplItemKind::Macro(..) => panic!(\"Shouldn't exist any more\"),\n@@ -1727,9 +1727,9 @@ impl<'a> LoweringContext<'a> {\n         })\n     }\n \n-    fn lower_method_sig(&mut self, sig: &MethodSig) -> hir::MethodSig {\n+    fn lower_method_sig(&mut self, generics: &Generics, sig: &MethodSig) -> hir::MethodSig {\n         hir::MethodSig {\n-            generics: self.lower_generics(&sig.generics),\n+            generics: self.lower_generics(generics),\n             abi: sig.abi,\n             unsafety: self.lower_unsafety(sig.unsafety),\n             constness: self.lower_constness(sig.constness),"}, {"sha": "8d546a66ef5c0e054a42dd85ab65966adfe04580", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f61394f0bd9c7d5951d2f70207177ff5a6b038fa", "patch": "@@ -723,7 +723,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n                 ItemRibKind\n             }\n             FnKind::Method(_, sig, _, _) => {\n-                self.visit_generics(&sig.generics);\n                 MethodRibKind(!sig.decl.has_self())\n             }\n             FnKind::Closure(_) => ClosureRibKind(node_id),\n@@ -1864,6 +1863,7 @@ impl<'a> Resolver<'a> {\n \n                         for trait_item in trait_items {\n                             this.check_proc_macro_attrs(&trait_item.attrs);\n+                            this.visit_generics(&trait_item.generics);\n \n                             match trait_item.node {\n                                 TraitItemKind::Const(ref ty, ref default) => {\n@@ -1880,7 +1880,7 @@ impl<'a> Resolver<'a> {\n                                 }\n                                 TraitItemKind::Method(ref sig, _) => {\n                                     let type_parameters =\n-                                        HasTypeParameters(&sig.generics,\n+                                        HasTypeParameters(&trait_item.generics,\n                                                           MethodRibKind(!sig.decl.has_self()));\n                                     this.with_type_parameter_rib(type_parameters, |this| {\n                                         visit::walk_trait_item(this, trait_item)\n@@ -2075,6 +2075,7 @@ impl<'a> Resolver<'a> {\n                         this.with_current_self_type(self_type, |this| {\n                             for impl_item in impl_items {\n                                 this.check_proc_macro_attrs(&impl_item.attrs);\n+                                this.visit_generics(&impl_item.generics);\n                                 this.resolve_visibility(&impl_item.vis);\n                                 match impl_item.node {\n                                     ImplItemKind::Const(..) => {\n@@ -2097,7 +2098,7 @@ impl<'a> Resolver<'a> {\n                                         // We also need a new scope for the method-\n                                         // specific type parameters.\n                                         let type_parameters =\n-                                            HasTypeParameters(&sig.generics,\n+                                            HasTypeParameters(&impl_item.generics,\n                                                             MethodRibKind(!sig.decl.has_self()));\n                                         this.with_type_parameter_rib(type_parameters, |this| {\n                                             visit::walk_impl_item(this, impl_item);"}, {"sha": "c57d5305d807a16af394b9d79f0006906eb8de8a", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=f61394f0bd9c7d5951d2f70207177ff5a6b038fa", "patch": "@@ -354,23 +354,24 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                       body: Option<&'l ast::Block>,\n                       id: ast::NodeId,\n                       name: ast::Ident,\n+                      generics: &'l ast::Generics,\n                       vis: ast::Visibility,\n                       span: Span) {\n         debug!(\"process_method: {}:{}\", id, name);\n \n         if let Some(mut method_data) = self.save_ctxt.get_method_data(id, name.name, span) {\n \n-            let sig_str = ::make_signature(&sig.decl, &sig.generics);\n+            let sig_str = ::make_signature(&sig.decl, &generics);\n             if body.is_some() {\n                 self.nest_tables(id, |v| {\n                     v.process_formals(&sig.decl.inputs, &method_data.qualname)\n                 });\n             }\n \n-            self.process_generic_params(&sig.generics, span, &method_data.qualname, id);\n+            self.process_generic_params(&generics, span, &method_data.qualname, id);\n \n             method_data.value = sig_str;\n-            method_data.sig = sig::method_signature(id, name, sig, &self.save_ctxt);\n+            method_data.sig = sig::method_signature(id, name, generics, sig, &self.save_ctxt);\n             self.dumper.dump_def(vis == ast::Visibility::Public, method_data);\n         }\n \n@@ -1007,6 +1008,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                                     body.as_ref().map(|x| &**x),\n                                     trait_item.id,\n                                     trait_item.ident,\n+                                    &trait_item.generics,\n                                     ast::Visibility::Public,\n                                     trait_item.span);\n             }\n@@ -1066,6 +1068,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                                     Some(body),\n                                     impl_item.id,\n                                     impl_item.ident,\n+                                    &impl_item.generics,\n                                     impl_item.vis.clone(),\n                                     impl_item.span);\n             }"}, {"sha": "88f574d513bd8f7395607b3e87abc3698884948a", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=f61394f0bd9c7d5951d2f70207177ff5a6b038fa", "patch": "@@ -77,13 +77,14 @@ pub fn variant_signature(variant: &ast::Variant, scx: &SaveContext) -> Option<Si\n \n pub fn method_signature(id: NodeId,\n                         ident: ast::Ident,\n+                        generics: &ast::Generics,\n                         m: &ast::MethodSig,\n                         scx: &SaveContext)\n                         -> Option<Signature> {\n     if !scx.config.signatures {\n         return None;\n     }\n-    make_method_signature(id, ident, m, scx).ok()\n+    make_method_signature(id, ident, generics, m, scx).ok()\n }\n \n pub fn assoc_const_signature(id: NodeId,\n@@ -895,6 +896,7 @@ fn make_assoc_const_signature(id: NodeId,\n \n fn make_method_signature(id: NodeId,\n                          ident: ast::Ident,\n+                         generics: &ast::Generics,\n                          m: &ast::MethodSig,\n                          scx: &SaveContext)\n                          -> Result {\n@@ -915,7 +917,7 @@ fn make_method_signature(id: NodeId,\n \n     let mut sig = name_and_generics(text,\n                                     0,\n-                                    &m.generics,\n+                                    generics,\n                                     id,\n                                     ident,\n                                     scx)?;"}, {"sha": "b985ac78056a498e1d4059564ee7091a17597740", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f61394f0bd9c7d5951d2f70207177ff5a6b038fa", "patch": "@@ -1178,7 +1178,6 @@ pub struct MethodSig {\n     pub constness: Spanned<Constness>,\n     pub abi: Abi,\n     pub decl: P<FnDecl>,\n-    pub generics: Generics,\n }\n \n /// Represents an item declaration within a trait declaration,\n@@ -1190,6 +1189,7 @@ pub struct TraitItem {\n     pub id: NodeId,\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n+    pub generics: Generics,\n     pub node: TraitItemKind,\n     pub span: Span,\n     /// See `Item::tokens` for what this is\n@@ -1211,6 +1211,7 @@ pub struct ImplItem {\n     pub vis: Visibility,\n     pub defaultness: Defaultness,\n     pub attrs: Vec<Attribute>,\n+    pub generics: Generics,\n     pub node: ImplItemKind,\n     pub span: Span,\n     /// See `Item::tokens` for what this is"}, {"sha": "2f5b386346bc8a4d91287ae1926e152f6e0f38d2", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=f61394f0bd9c7d5951d2f70207177ff5a6b038fa", "patch": "@@ -32,6 +32,7 @@ pub fn placeholder(kind: ExpansionKind, id: ast::NodeId) -> Expansion {\n \n     let ident = keywords::Invalid.ident();\n     let attrs = Vec::new();\n+    let generics = ast::Generics::default();\n     let vis = ast::Visibility::Inherited;\n     let span = DUMMY_SP;\n     let expr_placeholder = || P(ast::Expr {\n@@ -49,12 +50,12 @@ pub fn placeholder(kind: ExpansionKind, id: ast::NodeId) -> Expansion {\n             tokens: None,\n         }))),\n         ExpansionKind::TraitItems => Expansion::TraitItems(SmallVector::one(ast::TraitItem {\n-            id, span, ident, attrs,\n+            id, span, ident, attrs, generics,\n             node: ast::TraitItemKind::Macro(mac_placeholder()),\n             tokens: None,\n         })),\n         ExpansionKind::ImplItems => Expansion::ImplItems(SmallVector::one(ast::ImplItem {\n-            id, span, ident, vis, attrs,\n+            id, span, ident, vis, attrs, generics,\n             node: ast::ImplItemKind::Macro(mac_placeholder()),\n             defaultness: ast::Defaultness::Final,\n             tokens: None,"}, {"sha": "518386a2ad29ce60ae774c8cdb6c599ae590202e", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=f61394f0bd9c7d5951d2f70207177ff5a6b038fa", "patch": "@@ -943,6 +943,7 @@ pub fn noop_fold_trait_item<T: Folder>(i: TraitItem, folder: &mut T)\n         id: folder.new_id(i.id),\n         ident: folder.fold_ident(i.ident),\n         attrs: fold_attrs(i.attrs, folder),\n+        generics: folder.fold_generics(i.generics),\n         node: match i.node {\n             TraitItemKind::Const(ty, default) => {\n                 TraitItemKind::Const(folder.fold_ty(ty),\n@@ -972,6 +973,7 @@ pub fn noop_fold_impl_item<T: Folder>(i: ImplItem, folder: &mut T)\n         vis: folder.fold_vis(i.vis),\n         ident: folder.fold_ident(i.ident),\n         attrs: fold_attrs(i.attrs, folder),\n+        generics: folder.fold_generics(i.generics),\n         defaultness: i.defaultness,\n         node: match i.node  {\n             ast::ImplItemKind::Const(ty, expr) => {\n@@ -1074,7 +1076,6 @@ pub fn noop_fold_foreign_item<T: Folder>(ni: ForeignItem, folder: &mut T) -> For\n \n pub fn noop_fold_method_sig<T: Folder>(sig: MethodSig, folder: &mut T) -> MethodSig {\n     MethodSig {\n-        generics: folder.fold_generics(sig.generics),\n         abi: sig.abi,\n         unsafety: sig.unsafety,\n         constness: sig.constness,"}, {"sha": "b0ed4c4e0ee52af0aa879d2f31ff8427c8f62c63", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f61394f0bd9c7d5951d2f70207177ff5a6b038fa", "patch": "@@ -1287,10 +1287,10 @@ impl<'a> Parser<'a> {\n                          mut attrs: Vec<Attribute>) -> PResult<'a, TraitItem> {\n         let lo = self.span;\n \n-        let (name, node) = if self.eat_keyword(keywords::Type) {\n+        let (name, node, generics) = if self.eat_keyword(keywords::Type) {\n             let TyParam {ident, bounds, default, ..} = self.parse_ty_param(vec![])?;\n             self.expect(&token::Semi)?;\n-            (ident, TraitItemKind::Type(bounds, default))\n+            (ident, TraitItemKind::Type(bounds, default), ast::Generics::default())\n         } else if self.is_const_item() {\n             self.expect_keyword(keywords::Const)?;\n             let ident = self.parse_ident()?;\n@@ -1305,7 +1305,7 @@ impl<'a> Parser<'a> {\n                 self.expect(&token::Semi)?;\n                 None\n             };\n-            (ident, TraitItemKind::Const(ty, default))\n+            (ident, TraitItemKind::Const(ty, default), ast::Generics::default())\n         } else if self.token.is_path_start() {\n             // trait item macro.\n             // code copied from parse_macro_use_or_failure... abstraction!\n@@ -1328,7 +1328,7 @@ impl<'a> Parser<'a> {\n             }\n \n             let mac = respan(lo.to(self.prev_span), Mac_ { path: pth, tts: tts });\n-            (keywords::Invalid.ident(), ast::TraitItemKind::Macro(mac))\n+            (keywords::Invalid.ident(), ast::TraitItemKind::Macro(mac), ast::Generics::default())\n         } else {\n             let (constness, unsafety, abi) = self.parse_fn_front_matter()?;\n \n@@ -1341,13 +1341,12 @@ impl<'a> Parser<'a> {\n                 // definition...\n                 p.parse_arg_general(false)\n             })?;\n-\n             generics.where_clause = self.parse_where_clause()?;\n+\n             let sig = ast::MethodSig {\n                 unsafety,\n                 constness,\n                 decl: d,\n-                generics,\n                 abi,\n             };\n \n@@ -1370,13 +1369,14 @@ impl<'a> Parser<'a> {\n                     return Err(self.fatal(&format!(\"expected `;` or `{{`, found `{}`\", token_str)));\n                 }\n             };\n-            (ident, ast::TraitItemKind::Method(sig, body))\n+            (ident, ast::TraitItemKind::Method(sig, body), generics)\n         };\n \n         Ok(TraitItem {\n             id: ast::DUMMY_NODE_ID,\n             ident: name,\n             attrs,\n+            generics,\n             node,\n             span: lo.to(self.prev_span),\n             tokens: None,\n@@ -4901,12 +4901,12 @@ impl<'a> Parser<'a> {\n         let lo = self.span;\n         let vis = self.parse_visibility(false)?;\n         let defaultness = self.parse_defaultness()?;\n-        let (name, node) = if self.eat_keyword(keywords::Type) {\n+        let (name, node, generics) = if self.eat_keyword(keywords::Type) {\n             let name = self.parse_ident()?;\n             self.expect(&token::Eq)?;\n             let typ = self.parse_ty()?;\n             self.expect(&token::Semi)?;\n-            (name, ast::ImplItemKind::Type(typ))\n+            (name, ast::ImplItemKind::Type(typ), ast::Generics::default())\n         } else if self.is_const_item() {\n             self.expect_keyword(keywords::Const)?;\n             let name = self.parse_ident()?;\n@@ -4915,11 +4915,11 @@ impl<'a> Parser<'a> {\n             self.expect(&token::Eq)?;\n             let expr = self.parse_expr()?;\n             self.expect(&token::Semi)?;\n-            (name, ast::ImplItemKind::Const(typ, expr))\n+            (name, ast::ImplItemKind::Const(typ, expr), ast::Generics::default())\n         } else {\n-            let (name, inner_attrs, node) = self.parse_impl_method(&vis, at_end)?;\n+            let (name, inner_attrs, generics, node) = self.parse_impl_method(&vis, at_end)?;\n             attrs.extend(inner_attrs);\n-            (name, node)\n+            (name, node, generics)\n         };\n \n         Ok(ImplItem {\n@@ -4929,6 +4929,7 @@ impl<'a> Parser<'a> {\n             vis,\n             defaultness,\n             attrs,\n+            generics,\n             node,\n             tokens: None,\n         })\n@@ -4986,7 +4987,7 @@ impl<'a> Parser<'a> {\n \n     /// Parse a method or a macro invocation in a trait impl.\n     fn parse_impl_method(&mut self, vis: &Visibility, at_end: &mut bool)\n-                         -> PResult<'a, (Ident, Vec<ast::Attribute>, ast::ImplItemKind)> {\n+                         -> PResult<'a, (Ident, Vec<ast::Attribute>, ast::Generics, ast::ImplItemKind)> {\n         // code copied from parse_macro_use_or_failure... abstraction!\n         if self.token.is_path_start() {\n             // Method macro.\n@@ -5013,7 +5014,7 @@ impl<'a> Parser<'a> {\n             }\n \n             let mac = respan(lo.to(self.prev_span), Mac_ { path: pth, tts: tts });\n-            Ok((keywords::Invalid.ident(), vec![], ast::ImplItemKind::Macro(mac)))\n+            Ok((keywords::Invalid.ident(), vec![], ast::Generics::default(), ast::ImplItemKind::Macro(mac)))\n         } else {\n             let (constness, unsafety, abi) = self.parse_fn_front_matter()?;\n             let ident = self.parse_ident()?;\n@@ -5022,8 +5023,7 @@ impl<'a> Parser<'a> {\n             generics.where_clause = self.parse_where_clause()?;\n             *at_end = true;\n             let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n-            Ok((ident, inner_attrs, ast::ImplItemKind::Method(ast::MethodSig {\n-                generics,\n+            Ok((ident, inner_attrs, generics, ast::ImplItemKind::Method(ast::MethodSig {\n                 abi,\n                 unsafety,\n                 constness,"}, {"sha": "b9a7fa04a0611fa131c24c4d5f57e0af94a622f3", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f61394f0bd9c7d5951d2f70207177ff5a6b038fa", "patch": "@@ -1525,6 +1525,7 @@ impl<'a> State<'a> {\n \n     pub fn print_method_sig(&mut self,\n                             ident: ast::Ident,\n+                            generics: &ast::Generics,\n                             m: &ast::MethodSig,\n                             vis: &ast::Visibility)\n                             -> io::Result<()> {\n@@ -1533,7 +1534,7 @@ impl<'a> State<'a> {\n                       m.constness.node,\n                       m.abi,\n                       Some(ident),\n-                      &m.generics,\n+                      &generics,\n                       vis)\n     }\n \n@@ -1553,7 +1554,7 @@ impl<'a> State<'a> {\n                 if body.is_some() {\n                     self.head(\"\")?;\n                 }\n-                self.print_method_sig(ti.ident, sig, &ast::Visibility::Inherited)?;\n+                self.print_method_sig(ti.ident, &ti.generics, sig, &ast::Visibility::Inherited)?;\n                 if let Some(ref body) = *body {\n                     self.nbsp()?;\n                     self.print_block_with_attrs(body, &ti.attrs)?;\n@@ -1592,7 +1593,7 @@ impl<'a> State<'a> {\n             }\n             ast::ImplItemKind::Method(ref sig, ref body) => {\n                 self.head(\"\")?;\n-                self.print_method_sig(ii.ident, sig, &ii.vis)?;\n+                self.print_method_sig(ii.ident, &ii.generics, sig, &ii.vis)?;\n                 self.nbsp()?;\n                 self.print_block_with_attrs(body, &ii.attrs)?;\n             }"}, {"sha": "e74296c06a901ad2c0810b5b2db82c71bcad9d38", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=f61394f0bd9c7d5951d2f70207177ff5a6b038fa", "patch": "@@ -543,8 +543,7 @@ pub fn walk_fn<'a, V>(visitor: &mut V, kind: FnKind<'a>, declaration: &'a FnDecl\n             walk_fn_decl(visitor, declaration);\n             visitor.visit_block(body);\n         }\n-        FnKind::Method(_, sig, _, body) => {\n-            visitor.visit_generics(&sig.generics);\n+        FnKind::Method(_, _, _, body) => {\n             walk_fn_decl(visitor, declaration);\n             visitor.visit_block(body);\n         }\n@@ -558,13 +557,13 @@ pub fn walk_fn<'a, V>(visitor: &mut V, kind: FnKind<'a>, declaration: &'a FnDecl\n pub fn walk_trait_item<'a, V: Visitor<'a>>(visitor: &mut V, trait_item: &'a TraitItem) {\n     visitor.visit_ident(trait_item.span, trait_item.ident);\n     walk_list!(visitor, visit_attribute, &trait_item.attrs);\n+    visitor.visit_generics(&trait_item.generics);\n     match trait_item.node {\n         TraitItemKind::Const(ref ty, ref default) => {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, default);\n         }\n         TraitItemKind::Method(ref sig, None) => {\n-            visitor.visit_generics(&sig.generics);\n             walk_fn_decl(visitor, &sig.decl);\n         }\n         TraitItemKind::Method(ref sig, Some(ref body)) => {\n@@ -585,6 +584,7 @@ pub fn walk_impl_item<'a, V: Visitor<'a>>(visitor: &mut V, impl_item: &'a ImplIt\n     visitor.visit_vis(&impl_item.vis);\n     visitor.visit_ident(impl_item.span, impl_item.ident);\n     walk_list!(visitor, visit_attribute, &impl_item.attrs);\n+    visitor.visit_generics(&impl_item.generics);\n     match impl_item.node {\n         ImplItemKind::Const(ref ty, ref expr) => {\n             visitor.visit_ty(ty);"}, {"sha": "18897047538f17576b0b3de49e6e89720377cfa9", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f61394f0bd9c7d5951d2f70207177ff5a6b038fa/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=f61394f0bd9c7d5951d2f70207177ff5a6b038fa", "patch": "@@ -506,6 +506,7 @@ impl<'a> TraitDef<'a> {\n                 vis: ast::Visibility::Inherited,\n                 defaultness: ast::Defaultness::Final,\n                 attrs: Vec::new(),\n+                generics: Generics::default(),\n                 node: ast::ImplItemKind::Type(type_def.to_ty(cx, self.span, type_ident, generics)),\n                 tokens: None,\n             }\n@@ -921,12 +922,12 @@ impl<'a> MethodDef<'a> {\n         ast::ImplItem {\n             id: ast::DUMMY_NODE_ID,\n             attrs: self.attributes.clone(),\n+            generics: fn_generics,\n             span: trait_.span,\n             vis: ast::Visibility::Inherited,\n             defaultness: ast::Defaultness::Final,\n             ident: method_ident,\n             node: ast::ImplItemKind::Method(ast::MethodSig {\n-                                                generics: fn_generics,\n                                                 abi,\n                                                 unsafety,\n                                                 constness:"}]}