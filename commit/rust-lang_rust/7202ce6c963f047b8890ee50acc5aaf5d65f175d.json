{"sha": "7202ce6c963f047b8890ee50acc5aaf5d65f175d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMDJjZTZjOTYzZjA0N2I4ODkwZWU1MGFjYzVhYWY1ZDY1ZjE3NWQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-02T10:46:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-02T10:46:58Z"}, "message": "Revert \"Use block_def_map in body lowering\"", "tree": {"sha": "4424b450134591652648d4709715655975fe3ba7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4424b450134591652648d4709715655975fe3ba7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7202ce6c963f047b8890ee50acc5aaf5d65f175d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgGS2iCRBK7hj4Ov3rIwAAdHIIAGe826CPgzH5hcPlH+ia9tzK\nZyT1Ljn86mzhRN1u8+pYrOo7mjwsBNHo6xtaB4zZbR/OuaIwfHOB93w+mjCGb2cH\n3r0l2QeDu04ROKVOJ+hTJYkvSbyuLk95riWbzDeDVoAZhnKGhjrbZEh9GFszb1WS\nRR2An1kU2Z/9uHcAXJOodoPOHSGXh/Syz1+fT0sDZFTUKNY8PSXeITsIBLznb31i\nUCGnCuZ9X04QO74rOpMna75k16skb/hSO6Hm762hZLGNe6dbrWzaLZD5lDbQBDSb\nLVXw7/JK1smPayN0LTv9y91oNQO0XZKyxEl1SqNQKPYCqpkPJ/9l8cAn4wghRYI=\n=DhB9\n-----END PGP SIGNATURE-----\n", "payload": "tree 4424b450134591652648d4709715655975fe3ba7\nparent 3c1fcfcd1b79430c1ea97eea4ce0c89c9c793cdb\nauthor Jonas Schievink <jonasschievink@gmail.com> 1612262818 +0100\ncommitter GitHub <noreply@github.com> 1612262818 +0100\n\nRevert \"Use block_def_map in body lowering\"\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7202ce6c963f047b8890ee50acc5aaf5d65f175d", "html_url": "https://github.com/rust-lang/rust/commit/7202ce6c963f047b8890ee50acc5aaf5d65f175d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7202ce6c963f047b8890ee50acc5aaf5d65f175d/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c1fcfcd1b79430c1ea97eea4ce0c89c9c793cdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c1fcfcd1b79430c1ea97eea4ce0c89c9c793cdb", "html_url": "https://github.com/rust-lang/rust/commit/3c1fcfcd1b79430c1ea97eea4ce0c89c9c793cdb"}], "stats": {"total": 257, "additions": 96, "deletions": 161}, "files": [{"sha": "b9ecf22fa5f20236bead91e87a2583defcdfa614", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7202ce6c963f047b8890ee50acc5aaf5d65f175d/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7202ce6c963f047b8890ee50acc5aaf5d65f175d/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=7202ce6c963f047b8890ee50acc5aaf5d65f175d", "patch": "@@ -46,7 +46,7 @@ pub(crate) struct CfgExpander {\n \n pub(crate) struct Expander {\n     cfg_expander: CfgExpander,\n-    def_map: Arc<DefMap>,\n+    crate_def_map: Arc<DefMap>,\n     current_file_id: HirFileId,\n     ast_id_map: Arc<AstIdMap>,\n     module: ModuleId,\n@@ -91,7 +91,7 @@ impl Expander {\n         let ast_id_map = db.ast_id_map(current_file_id);\n         Expander {\n             cfg_expander,\n-            def_map: crate_def_map,\n+            crate_def_map,\n             current_file_id,\n             ast_id_map,\n             module,\n@@ -102,6 +102,7 @@ impl Expander {\n     pub(crate) fn enter_expand<T: ast::AstNode>(\n         &mut self,\n         db: &dyn DefDatabase,\n+        local_scope: Option<&ItemScope>,\n         macro_call: ast::MacroCall,\n     ) -> ExpandResult<Option<(Mark, T)>> {\n         if self.recursion_limit + 1 > EXPANSION_RECURSION_LIMIT {\n@@ -111,12 +112,18 @@ impl Expander {\n \n         let macro_call = InFile::new(self.current_file_id, &macro_call);\n \n-        let resolver =\n-            |path: ModPath| -> Option<MacroDefId> { self.resolve_path_as_macro(db, &path) };\n+        let resolver = |path: ModPath| -> Option<MacroDefId> {\n+            if let Some(local_scope) = local_scope {\n+                if let Some(def) = path.as_ident().and_then(|n| local_scope.get_legacy_macro(n)) {\n+                    return Some(def);\n+                }\n+            }\n+            self.resolve_path_as_macro(db, &path)\n+        };\n \n         let mut err = None;\n         let call_id =\n-            macro_call.as_call_id_with_errors(db, self.def_map.krate(), resolver, &mut |e| {\n+            macro_call.as_call_id_with_errors(db, self.crate_def_map.krate(), resolver, &mut |e| {\n                 err.get_or_insert(e);\n             });\n         let call_id = match call_id {\n@@ -197,7 +204,7 @@ impl Expander {\n     }\n \n     fn resolve_path_as_macro(&self, db: &dyn DefDatabase, path: &ModPath) -> Option<MacroDefId> {\n-        self.def_map\n+        self.crate_def_map\n             .resolve_path(db, self.module.local_id, path, BuiltinShadowMode::Other)\n             .0\n             .take_macros()"}, {"sha": "209965fcaf74116de7d5e97e0246c8fdbc6ff20e", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7202ce6c963f047b8890ee50acc5aaf5d65f175d/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7202ce6c963f047b8890ee50acc5aaf5d65f175d/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=7202ce6c963f047b8890ee50acc5aaf5d65f175d", "patch": "@@ -1,7 +1,7 @@\n //! Transforms `ast::Expr` into an equivalent `hir_def::expr::Expr`\n //! representation.\n \n-use std::{any::type_name, mem, sync::Arc};\n+use std::{any::type_name, sync::Arc};\n \n use either::Either;\n use hir_expand::{\n@@ -36,8 +36,8 @@ use crate::{\n     item_tree::{ItemTree, ItemTreeId, ItemTreeNode},\n     path::{GenericArgs, Path},\n     type_ref::{Mutability, Rawness, TypeRef},\n-    AdtId, BlockLoc, ConstLoc, ContainerId, DefWithBodyId, EnumLoc, FunctionLoc, Intern,\n-    ModuleDefId, StaticLoc, StructLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n+    AdtId, ConstLoc, ContainerId, DefWithBodyId, EnumLoc, FunctionLoc, Intern, ModuleDefId,\n+    StaticLoc, StructLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n };\n \n use super::{diagnostics::BodyDiagnostic, ExprSource, PatSource};\n@@ -152,8 +152,8 @@ impl ExprCollector<'_> {\n     fn alloc_expr_desugared(&mut self, expr: Expr) -> ExprId {\n         self.make_expr(expr, Err(SyntheticSyntax))\n     }\n-    fn unit(&mut self) -> ExprId {\n-        self.alloc_expr_desugared(Expr::Tuple { exprs: Vec::new() })\n+    fn empty_block(&mut self) -> ExprId {\n+        self.alloc_expr_desugared(Expr::Block { statements: Vec::new(), tail: None, label: None })\n     }\n     fn missing_expr(&mut self) -> ExprId {\n         self.alloc_expr_desugared(Expr::Missing)\n@@ -222,7 +222,7 @@ impl ExprCollector<'_> {\n                                 MatchArm { pat, expr: then_branch, guard: None },\n                                 MatchArm {\n                                     pat: placeholder_pat,\n-                                    expr: else_branch.unwrap_or_else(|| self.unit()),\n+                                    expr: else_branch.unwrap_or_else(|| self.empty_block()),\n                                     guard: None,\n                                 },\n                             ];\n@@ -561,7 +561,7 @@ impl ExprCollector<'_> {\n         let outer_file = self.expander.current_file_id;\n \n         let macro_call = self.expander.to_source(AstPtr::new(&e));\n-        let res = self.expander.enter_expand(self.db, e);\n+        let res = self.expander.enter_expand(self.db, Some(&self.body.item_scope), e);\n \n         match &res.err {\n             Some(ExpandError::UnresolvedProcMacro) => {\n@@ -697,27 +697,12 @@ impl ExprCollector<'_> {\n     }\n \n     fn collect_block(&mut self, block: ast::BlockExpr) -> ExprId {\n-        let ast_id = self.expander.ast_id(&block);\n-        let block_loc = BlockLoc { ast_id, module: self.expander.module };\n-        let block_id = self.db.intern_block(block_loc);\n-        let def_map = self.db.block_def_map(block_id);\n-        let root = def_map.module_id(def_map.root());\n-        let prev_def_map = mem::replace(&mut self.expander.def_map, def_map);\n-        let prev_module = mem::replace(&mut self.expander.module, root);\n-\n+        let syntax_node_ptr = AstPtr::new(&block.clone().into());\n         self.collect_stmts_items(block.statements());\n         let statements =\n             block.statements().filter_map(|s| self.collect_stmt(s)).flatten().collect();\n         let tail = block.tail_expr().map(|e| self.collect_expr(e));\n-        let syntax_node_ptr = AstPtr::new(&block.clone().into());\n-        let expr_id = self.alloc_expr(\n-            Expr::Block { id: block_id, statements, tail, label: None },\n-            syntax_node_ptr,\n-        );\n-\n-        self.expander.def_map = prev_def_map;\n-        self.expander.module = prev_module;\n-        expr_id\n+        self.alloc_expr(Expr::Block { statements, tail, label: None }, syntax_node_ptr)\n     }\n \n     fn collect_stmts_items(&mut self, stmts: ast::AstChildren<ast::Stmt>) {\n@@ -847,7 +832,7 @@ impl ExprCollector<'_> {\n                 if annotation == BindingAnnotation::Unannotated && subpat.is_none() {\n                     // This could also be a single-segment path pattern. To\n                     // decide that, we need to try resolving the name.\n-                    let (resolved, _) = self.expander.def_map.resolve_path(\n+                    let (resolved, _) = self.expander.crate_def_map.resolve_path(\n                         self.db,\n                         self.expander.module.local_id,\n                         &name.clone().into(),"}, {"sha": "2e5d0a01e76ea323b073b14509f08f7b802aad8e", "filename": "crates/hir_def/src/body/tests.rs", "status": "modified", "additions": 2, "deletions": 114, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/7202ce6c963f047b8890ee50acc5aaf5d65f175d/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7202ce6c963f047b8890ee50acc5aaf5d65f175d/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests.rs?ref=7202ce6c963f047b8890ee50acc5aaf5d65f175d", "patch": "@@ -1,10 +1,7 @@\n-mod block;\n-\n-use base_db::{fixture::WithFixture, FilePosition, SourceDatabase};\n-use expect_test::Expect;\n+use base_db::{fixture::WithFixture, SourceDatabase};\n use test_utils::mark;\n \n-use crate::{test_db::TestDB, BlockId, ModuleDefId};\n+use crate::{test_db::TestDB, ModuleDefId};\n \n use super::*;\n \n@@ -34,115 +31,6 @@ fn check_diagnostics(ra_fixture: &str) {\n     db.check_diagnostics();\n }\n \n-fn block_def_map_at(ra_fixture: &str) -> Arc<DefMap> {\n-    let (db, position) = crate::test_db::TestDB::with_position(ra_fixture);\n-\n-    let krate = db.crate_graph().iter().next().unwrap();\n-    let def_map = db.crate_def_map(krate);\n-\n-    let mut block =\n-        block_at_pos(&db, &def_map, position).expect(\"couldn't find enclosing function or block\");\n-    loop {\n-        let def_map = db.block_def_map(block);\n-        let new_block = block_at_pos(&db, &def_map, position);\n-        match new_block {\n-            Some(new_block) => {\n-                assert_ne!(block, new_block);\n-                block = new_block;\n-            }\n-            None => {\n-                return def_map;\n-            }\n-        }\n-    }\n-}\n-\n-fn block_at_pos(db: &dyn DefDatabase, def_map: &DefMap, position: FilePosition) -> Option<BlockId> {\n-    let mut size = None;\n-    let mut fn_def = None;\n-    for (_, module) in def_map.modules() {\n-        let file_id = module.definition_source(db).file_id;\n-        if file_id != position.file_id.into() {\n-            continue;\n-        }\n-        let root = db.parse_or_expand(file_id).unwrap();\n-        let ast_map = db.ast_id_map(file_id);\n-        let item_tree = db.item_tree(file_id);\n-        for decl in module.scope.declarations() {\n-            if let ModuleDefId::FunctionId(it) = decl {\n-                let ast = ast_map.get(item_tree[it.lookup(db).id.value].ast_id).to_node(&root);\n-                let range = ast.syntax().text_range();\n-\n-                // Find the smallest (innermost) function containing the cursor.\n-                if !range.contains(position.offset) {\n-                    continue;\n-                }\n-\n-                let new_size = match size {\n-                    None => range.len(),\n-                    Some(size) => {\n-                        if range.len() < size {\n-                            range.len()\n-                        } else {\n-                            size\n-                        }\n-                    }\n-                };\n-                if size != Some(new_size) {\n-                    size = Some(new_size);\n-                    fn_def = Some(it);\n-                }\n-            }\n-        }\n-    }\n-\n-    let (body, source_map) = db.body_with_source_map(fn_def?.into());\n-\n-    // Now find the smallest encompassing block expression in the function body.\n-    let mut size = None;\n-    let mut block_id = None;\n-    for (expr_id, expr) in body.exprs.iter() {\n-        if let Expr::Block { id, .. } = expr {\n-            if let Ok(ast) = source_map.expr_syntax(expr_id) {\n-                if ast.file_id != position.file_id.into() {\n-                    continue;\n-                }\n-\n-                let root = db.parse_or_expand(ast.file_id).unwrap();\n-                let ast = ast.value.to_node(&root);\n-                let range = ast.syntax().text_range();\n-\n-                if !range.contains(position.offset) {\n-                    continue;\n-                }\n-\n-                let new_size = match size {\n-                    None => range.len(),\n-                    Some(size) => {\n-                        if range.len() < size {\n-                            range.len()\n-                        } else {\n-                            size\n-                        }\n-                    }\n-                };\n-                if size != Some(new_size) {\n-                    size = Some(new_size);\n-                    block_id = Some(*id);\n-                }\n-            }\n-        }\n-    }\n-\n-    Some(block_id.expect(\"can't find block containing cursor\"))\n-}\n-\n-fn check_at(ra_fixture: &str, expect: Expect) {\n-    let def_map = block_def_map_at(ra_fixture);\n-    let actual = def_map.dump();\n-    expect.assert_eq(&actual);\n-}\n-\n #[test]\n fn your_stack_belongs_to_me() {\n     mark::check!(your_stack_belongs_to_me);"}, {"sha": "e7b7724f75fb245157d55f4d7e144673b0c17560", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7202ce6c963f047b8890ee50acc5aaf5d65f175d/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7202ce6c963f047b8890ee50acc5aaf5d65f175d/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=7202ce6c963f047b8890ee50acc5aaf5d65f175d", "patch": "@@ -262,7 +262,7 @@ fn collect_items(\n                 let root = db.parse_or_expand(file_id).unwrap();\n                 let call = ast_id_map.get(call.ast_id).to_node(&root);\n \n-                if let Some((mark, mac)) = expander.enter_expand(db, call).value {\n+                if let Some((mark, mac)) = expander.enter_expand(db, None, call).value {\n                     let src: InFile<ast::MacroItems> = expander.to_source(mac);\n                     let item_tree = db.item_tree(src.file_id);\n                     let iter ="}, {"sha": "5be838f4a7d842ae7fb45011eebadae56e5ea011", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7202ce6c963f047b8890ee50acc5aaf5d65f175d/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7202ce6c963f047b8890ee50acc5aaf5d65f175d/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=7202ce6c963f047b8890ee50acc5aaf5d65f175d", "patch": "@@ -20,7 +20,6 @@ use crate::{\n     builtin_type::{BuiltinFloat, BuiltinInt},\n     path::{GenericArgs, Path},\n     type_ref::{Mutability, Rawness, TypeRef},\n-    BlockId,\n };\n \n pub type ExprId = Idx<Expr>;\n@@ -57,7 +56,6 @@ pub enum Expr {\n         else_branch: Option<ExprId>,\n     },\n     Block {\n-        id: BlockId,\n         statements: Vec<Statement>,\n         tail: Option<ExprId>,\n         label: Option<LabelId>,"}, {"sha": "42d9f09472dab3abc77d9a56c028d6b203c4cffb", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7202ce6c963f047b8890ee50acc5aaf5d65f175d/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7202ce6c963f047b8890ee50acc5aaf5d65f175d/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=7202ce6c963f047b8890ee50acc5aaf5d65f175d", "patch": "@@ -24,7 +24,7 @@ use la_arena::{Arena, Idx, RawIdx};\n use profile::Count;\n use rustc_hash::FxHashMap;\n use smallvec::SmallVec;\n-use syntax::{ast, match_ast, SyntaxKind};\n+use syntax::{ast, match_ast};\n use test_utils::mark;\n \n use crate::{\n@@ -80,10 +80,6 @@ impl ItemTree {\n     pub(crate) fn item_tree_query(db: &dyn DefDatabase, file_id: HirFileId) -> Arc<ItemTree> {\n         let _p = profile::span(\"item_tree_query\").detail(|| format!(\"{:?}\", file_id));\n         let syntax = if let Some(node) = db.parse_or_expand(file_id) {\n-            if node.kind() == SyntaxKind::ERROR {\n-                // FIXME: not 100% sure why these crop up, but return an empty tree to avoid a panic\n-                return Default::default();\n-            }\n             node\n         } else {\n             return Default::default();"}, {"sha": "6169b3bbcbdd851a000bb8bc51f243dcfb400008", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7202ce6c963f047b8890ee50acc5aaf5d65f175d/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7202ce6c963f047b8890ee50acc5aaf5d65f175d/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=7202ce6c963f047b8890ee50acc5aaf5d65f175d", "patch": "@@ -201,10 +201,8 @@ impl DefMap {\n         let block: BlockLoc = db.lookup_intern_block(block_id);\n         let parent = block.module.def_map(db);\n \n-        let item_tree = db.item_tree(block.ast_id.file_id);\n-        if item_tree.inner_items_of_block(block.ast_id.value).is_empty() {\n-            return parent.clone();\n-        }\n+        // FIXME: It would be good to just return the parent map when the block has no items, but\n+        // we rely on `def_map.block` in a few places, which is `Some` for the inner `DefMap`.\n \n         let block_info =\n             BlockInfo { block: block_id, parent, parent_module: block.module.local_id };"}, {"sha": "b36d0b59bd73ac62a91a45e7d2bfeef36b0f54b3", "filename": "crates/hir_def/src/nameres/tests.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/7202ce6c963f047b8890ee50acc5aaf5d65f175d/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7202ce6c963f047b8890ee50acc5aaf5d65f175d/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=7202ce6c963f047b8890ee50acc5aaf5d65f175d", "patch": "@@ -4,27 +4,91 @@ mod macros;\n mod mod_resolution;\n mod diagnostics;\n mod primitives;\n+mod block;\n \n use std::sync::Arc;\n \n-use base_db::{fixture::WithFixture, SourceDatabase};\n+use base_db::{fixture::WithFixture, FilePosition, SourceDatabase};\n use expect_test::{expect, Expect};\n+use syntax::AstNode;\n use test_utils::mark;\n \n-use crate::{db::DefDatabase, nameres::*, test_db::TestDB};\n+use crate::{db::DefDatabase, nameres::*, test_db::TestDB, Lookup};\n \n fn compute_crate_def_map(ra_fixture: &str) -> Arc<DefMap> {\n     let db = TestDB::with_files(ra_fixture);\n     let krate = db.crate_graph().iter().next().unwrap();\n     db.crate_def_map(krate)\n }\n \n+fn compute_block_def_map(ra_fixture: &str) -> Arc<DefMap> {\n+    let (db, position) = TestDB::with_position(ra_fixture);\n+\n+    // FIXME: perhaps we should make this use body lowering tests instead?\n+\n+    let module = db.module_for_file(position.file_id);\n+    let mut def_map = db.crate_def_map(module.krate);\n+    while let Some(new_def_map) = descend_def_map_at_position(&db, position, def_map.clone()) {\n+        def_map = new_def_map;\n+    }\n+\n+    // FIXME: select the right module, not the root\n+\n+    def_map\n+}\n+\n+fn descend_def_map_at_position(\n+    db: &dyn DefDatabase,\n+    position: FilePosition,\n+    def_map: Arc<DefMap>,\n+) -> Option<Arc<DefMap>> {\n+    for (local_id, module_data) in def_map.modules() {\n+        let mod_def = module_data.origin.definition_source(db);\n+        let ast_map = db.ast_id_map(mod_def.file_id);\n+        let item_tree = db.item_tree(mod_def.file_id);\n+        let root = db.parse_or_expand(mod_def.file_id).unwrap();\n+        for item in module_data.scope.declarations() {\n+            match item {\n+                ModuleDefId::FunctionId(it) => {\n+                    // Technically blocks can be inside any type (due to arrays and const generics),\n+                    // and also in const/static initializers. For tests we only really care about\n+                    // functions though.\n+\n+                    let ast = ast_map.get(item_tree[it.lookup(db).id.value].ast_id).to_node(&root);\n+\n+                    if ast.syntax().text_range().contains(position.offset) {\n+                        // Cursor inside function, descend into its body's DefMap.\n+                        // Note that we don't handle block *expressions* inside function bodies.\n+                        let ast_map = db.ast_id_map(position.file_id.into());\n+                        let ast_id = ast_map.ast_id(&ast.body().unwrap());\n+                        let block = BlockLoc {\n+                            ast_id: InFile::new(position.file_id.into(), ast_id),\n+                            module: def_map.module_id(local_id),\n+                        };\n+                        let block_id = db.intern_block(block);\n+                        return Some(db.block_def_map(block_id));\n+                    }\n+                }\n+                _ => continue,\n+            }\n+        }\n+    }\n+\n+    None\n+}\n+\n fn check(ra_fixture: &str, expect: Expect) {\n     let def_map = compute_crate_def_map(ra_fixture);\n     let actual = def_map.dump();\n     expect.assert_eq(&actual);\n }\n \n+fn check_at(ra_fixture: &str, expect: Expect) {\n+    let def_map = compute_block_def_map(ra_fixture);\n+    let actual = def_map.dump();\n+    expect.assert_eq(&actual);\n+}\n+\n #[test]\n fn crate_def_map_smoke_test() {\n     check("}, {"sha": "6cc65951352cc0ac6449ab5a911988051e929d57", "filename": "crates/hir_def/src/nameres/tests/block.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7202ce6c963f047b8890ee50acc5aaf5d65f175d/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7202ce6c963f047b8890ee50acc5aaf5d65f175d/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fblock.rs?ref=7202ce6c963f047b8890ee50acc5aaf5d65f175d", "patch": "@@ -1,5 +1,4 @@\n use super::*;\n-use expect_test::expect;\n \n #[test]\n fn inner_item_smoke() {", "previous_filename": "crates/hir_def/src/body/tests/block.rs"}, {"sha": "d7351d21270193138c6d380e1f894648d4b9dfd3", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7202ce6c963f047b8890ee50acc5aaf5d65f175d/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7202ce6c963f047b8890ee50acc5aaf5d65f175d/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=7202ce6c963f047b8890ee50acc5aaf5d65f175d", "patch": "@@ -137,7 +137,7 @@ impl<'a> InferenceContext<'a> {\n \n                 self.coerce_merge_branch(&then_ty, &else_ty)\n             }\n-            Expr::Block { statements, tail, label, id: _ } => match label {\n+            Expr::Block { statements, tail, label } => match label {\n                 Some(_) => {\n                     let break_ty = self.table.new_type_var();\n                     self.breakables.push(BreakableContext {"}]}