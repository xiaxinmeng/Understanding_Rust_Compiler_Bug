{"sha": "d30b36efc528e7391357d8d2f599c6cf2e427fd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMGIzNmVmYzUyOGU3MzkxMzU3ZDhkMmY1OTljNmNmMmU0MjdmZDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-16T12:47:51Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-16T12:47:51Z"}, "message": "state also in the intro that UnsafeCell has no effect on &mut", "tree": {"sha": "1c5ff88a1bb65654e0ee83b71997b2abe037ae50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c5ff88a1bb65654e0ee83b71997b2abe037ae50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d30b36efc528e7391357d8d2f599c6cf2e427fd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d30b36efc528e7391357d8d2f599c6cf2e427fd2", "html_url": "https://github.com/rust-lang/rust/commit/d30b36efc528e7391357d8d2f599c6cf2e427fd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d30b36efc528e7391357d8d2f599c6cf2e427fd2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02785dabad07d19b8c76a7f86763801d5d3497ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/02785dabad07d19b8c76a7f86763801d5d3497ff", "html_url": "https://github.com/rust-lang/rust/commit/02785dabad07d19b8c76a7f86763801d5d3497ff"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "0aaf5269a3d47c81e52fad46b7bb3640689fffc2", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d30b36efc528e7391357d8d2f599c6cf2e427fd2/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d30b36efc528e7391357d8d2f599c6cf2e427fd2/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=d30b36efc528e7391357d8d2f599c6cf2e427fd2", "patch": "@@ -1412,8 +1412,9 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n /// If you have a reference `&SomeStruct`, then normally in Rust all fields of `SomeStruct` are\n /// immutable. The compiler makes optimizations based on the knowledge that `&T` is not mutably\n /// aliased or mutated, and that `&mut T` is unique. `UnsafeCell<T>` is the only core language\n-/// feature to work around this restriction. All other types that allow internal mutability, such as\n-/// `Cell<T>` and `RefCell<T>`, use `UnsafeCell` to wrap their internal data.\n+/// feature to work around the restriction that `&T` may not be mutated. All other types that\n+/// allow internal mutability, such as `Cell<T>` and `RefCell<T>`, use `UnsafeCell` to wrap their\n+/// internal data. There is *no* legal way to obtain aliasing `&mut`, not even with `UnsafeCell<T>`.\n ///\n /// The `UnsafeCell` API itself is technically very simple: it gives you a raw pointer `*mut T` to\n /// its contents. It is up to _you_ as the abstraction designer to use that raw pointer correctly."}]}