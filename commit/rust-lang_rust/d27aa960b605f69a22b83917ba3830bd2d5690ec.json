{"sha": "d27aa960b605f69a22b83917ba3830bd2d5690ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyN2FhOTYwYjYwNWY2OWEyMmI4MzkxN2JhMzgzMGJkMmQ1NjkwZWM=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-07T17:14:03Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-09T20:22:30Z"}, "message": "Remove unused Display implementation for consts", "tree": {"sha": "14ae389b0717a16ec420456104a4b159c9cd8e3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14ae389b0717a16ec420456104a4b159c9cd8e3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d27aa960b605f69a22b83917ba3830bd2d5690ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d27aa960b605f69a22b83917ba3830bd2d5690ec", "html_url": "https://github.com/rust-lang/rust/commit/d27aa960b605f69a22b83917ba3830bd2d5690ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d27aa960b605f69a22b83917ba3830bd2d5690ec/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34812e82d066dc1b3ef89df4272300662374f907", "url": "https://api.github.com/repos/rust-lang/rust/commits/34812e82d066dc1b3ef89df4272300662374f907", "html_url": "https://github.com/rust-lang/rust/commit/34812e82d066dc1b3ef89df4272300662374f907"}], "stats": {"total": 86, "additions": 0, "deletions": 86}, "files": [{"sha": "ddc8560c9b37f518ad1e1fcaad28fd9201e86319", "filename": "src/consts.rs", "status": "modified", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/d27aa960b605f69a22b83917ba3830bd2d5690ec/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d27aa960b605f69a22b83917ba3830bd2d5690ec/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=d27aa960b605f69a22b83917ba3830bd2d5690ec", "patch": "@@ -6,12 +6,10 @@ use rustc::middle::def::PathResolution;\n use rustc::middle::def::Def;\n use rustc_front::hir::*;\n use syntax::ptr::P;\n-use std::char;\n use std::cmp::PartialOrd;\n use std::cmp::Ordering::{self, Greater, Less, Equal};\n use std::rc::Rc;\n use std::ops::Deref;\n-use std::fmt;\n \n use syntax::ast::Lit_;\n use syntax::ast::LitIntType;\n@@ -173,90 +171,6 @@ impl PartialOrd for Constant {\n     }\n }\n \n-fn format_byte(fmt: &mut fmt::Formatter, b: u8) -> fmt::Result {\n-    if b == b'\\\\' {\n-        write!(fmt, \"\\\\\\\\\")\n-    } else if 0x20 <= b && b <= 0x7e {\n-        write!(fmt, \"{}\", char::from_u32(b as u32).expect(\"all u8 are valid char\"))\n-    } else if b == 0x0a {\n-        write!(fmt, \"\\\\n\")\n-    } else if b == 0x0d {\n-        write!(fmt, \"\\\\r\")\n-    } else {\n-        write!(fmt, \"\\\\x{:02x}\", b)\n-    }\n-}\n-\n-impl fmt::Display for Constant {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-            Constant::Str(ref s, _) => write!(fmt, \"{:?}\", s),\n-            Constant::Byte(ref b) => {\n-                write!(fmt, \"b'\")\n-                    .and_then(|_| format_byte(fmt, *b))\n-                    .and_then(|_| write!(fmt, \"'\"))\n-            }\n-            Constant::Binary(ref bs) => {\n-                try!(write!(fmt, \"b\\\"\"));\n-                for b in bs.iter() {\n-                    try!(format_byte(fmt, *b));\n-                }\n-                write!(fmt, \"\\\"\")\n-            }\n-            Constant::Char(ref c) => write!(fmt, \"'{}'\", c),\n-            Constant::Int(ref i, ref ity) => {\n-                let (sign, suffix) = match *ity {\n-                    LitIntType::SignedIntLit(ref sity, ref sign) => {\n-                        (if let Sign::Minus = *sign {\n-                            \"-\"\n-                        } else {\n-                            \"\"\n-                        },\n-                         sity.ty_to_string())\n-                    }\n-                    LitIntType::UnsignedIntLit(ref uity) => (\"\", uity.ty_to_string()),\n-                    LitIntType::UnsuffixedIntLit(ref sign) => {\n-                        (if let Sign::Minus = *sign {\n-                            \"-\"\n-                        } else {\n-                            \"\"\n-                        },\n-                         \"\".into())\n-                    }\n-                };\n-                write!(fmt, \"{}{}{}\", sign, i, suffix)\n-            }\n-            Constant::Float(ref s, ref fw) => {\n-                let suffix = match *fw {\n-                    FloatWidth::Fw32 => \"f32\",\n-                    FloatWidth::Fw64 => \"f64\",\n-                    FloatWidth::FwAny => \"\",\n-                };\n-                write!(fmt, \"{}{}\", s, suffix)\n-            }\n-            Constant::Bool(ref b) => write!(fmt, \"{}\", b),\n-            Constant::Repeat(ref c, ref n) => write!(fmt, \"[{}; {}]\", c, n),\n-            Constant::Vec(ref v) => {\n-                write!(fmt,\n-                       \"[{}]\",\n-                       v.iter()\n-                        .map(|i| format!(\"{}\", i))\n-                        .collect::<Vec<_>>()\n-                        .join(\", \"))\n-            }\n-            Constant::Tuple(ref t) => {\n-                write!(fmt,\n-                       \"({})\",\n-                       t.iter()\n-                        .map(|i| format!(\"{}\", i))\n-                        .collect::<Vec<_>>()\n-                        .join(\", \"))\n-            }\n-        }\n-    }\n-}\n-\n-\n fn lit_to_constant(lit: &Lit_) -> Constant {\n     match *lit {\n         Lit_::LitStr(ref is, style) => Constant::Str(is.to_string(), style),"}]}