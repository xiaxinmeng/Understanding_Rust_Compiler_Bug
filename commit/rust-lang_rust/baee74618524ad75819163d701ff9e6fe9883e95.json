{"sha": "baee74618524ad75819163d701ff9e6fe9883e95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZWU3NDYxODUyNGFkNzU4MTkxNjNkNzAxZmY5ZTZmZTk4ODNlOTU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-22T14:49:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-22T14:52:35Z"}, "message": "Share impl Scope between modules and blocks", "tree": {"sha": "c4280ec5ca8c0560f65884384c0537adfe825b22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4280ec5ca8c0560f65884384c0537adfe825b22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baee74618524ad75819163d701ff9e6fe9883e95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baee74618524ad75819163d701ff9e6fe9883e95", "html_url": "https://github.com/rust-lang/rust/commit/baee74618524ad75819163d701ff9e6fe9883e95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baee74618524ad75819163d701ff9e6fe9883e95/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c3ddcfa501060cff3a7f81c179f712ef072c808", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c3ddcfa501060cff3a7f81c179f712ef072c808", "html_url": "https://github.com/rust-lang/rust/commit/6c3ddcfa501060cff3a7f81c179f712ef072c808"}], "stats": {"total": 109, "additions": 56, "deletions": 53}, "files": [{"sha": "d3e4c50ae0608825b01f766b0e9007b8ec7efbc8", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/baee74618524ad75819163d701ff9e6fe9883e95/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baee74618524ad75819163d701ff9e6fe9883e95/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=baee74618524ad75819163d701ff9e6fe9883e95", "patch": "@@ -19,10 +19,11 @@ use crate::{\n     db::DefDatabase,\n     expr::{Expr, ExprId, Pat, PatId},\n     item_scope::BuiltinShadowMode,\n+    item_scope::ItemScope,\n     nameres::CrateDefMap,\n     path::{ModPath, Path},\n     src::HasSource,\n-    DefWithBodyId, HasModule, Lookup, ModuleDefId, ModuleId,\n+    DefWithBodyId, HasModule, Lookup, ModuleId,\n };\n \n pub(crate) struct Expander {\n@@ -135,7 +136,7 @@ pub struct Body {\n     pub params: Vec<PatId>,\n     /// The `ExprId` of the actual body expression.\n     pub body_expr: ExprId,\n-    pub defs: Vec<ModuleDefId>,\n+    pub item_scope: ItemScope,\n }\n \n pub type ExprPtr = Either<AstPtr<ast::Expr>, AstPtr<ast::RecordField>>;"}, {"sha": "7549240505800ad92013dab160612297e22ff8f8", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baee74618524ad75819163d701ff9e6fe9883e95/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baee74618524ad75819163d701ff9e6fe9883e95/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=baee74618524ad75819163d701ff9e6fe9883e95", "patch": "@@ -46,7 +46,7 @@ pub(super) fn lower(\n             pats: Arena::default(),\n             params: Vec::new(),\n             body_expr: ExprId::dummy(),\n-            defs: Vec::new(),\n+            item_scope: Default::default(),\n         },\n     }\n     .collect(params, body)\n@@ -532,7 +532,7 @@ where\n                 | ast::ModuleItem::ExternCrateItem(_)\n                 | ast::ModuleItem::Module(_) => continue,\n             };\n-            self.body.defs.push(def)\n+            self.body.item_scope.define_def(def)\n         }\n     }\n "}, {"sha": "8b6c773eeb5f6e2ca18f6772390a2f17eeef84db", "filename": "crates/ra_hir_def/src/child_by_source.rs", "status": "modified", "additions": 51, "deletions": 49, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/baee74618524ad75819163d701ff9e6fe9883e95/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baee74618524ad75819163d701ff9e6fe9883e95/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs?ref=baee74618524ad75819163d701ff9e6fe9883e95", "patch": "@@ -9,6 +9,7 @@ use either::Either;\n use crate::{\n     db::DefDatabase,\n     dyn_map::DynMap,\n+    item_scope::ItemScope,\n     keys,\n     src::{HasChildSource, HasSource},\n     AdtId, AssocItemId, DefWithBodyId, EnumId, EnumVariantId, ImplId, Lookup, ModuleDefId,\n@@ -73,59 +74,62 @@ impl ChildBySource for ImplId {\n \n impl ChildBySource for ModuleId {\n     fn child_by_source(&self, db: &impl DefDatabase) -> DynMap {\n-        let mut res = DynMap::default();\n-\n         let crate_def_map = db.crate_def_map(self.krate);\n         let module_data = &crate_def_map[self.local_id];\n-\n-        module_data.scope.declarations().for_each(|item| add_module_def(db, &mut res, item));\n-\n-        for imp in module_data.scope.impls() {\n-            let src = imp.lookup(db).source(db);\n-            res[keys::IMPL].insert(src, imp)\n-        }\n-\n-        res\n+        module_data.scope.child_by_source(db)\n     }\n }\n \n-fn add_module_def(db: &impl DefDatabase, map: &mut DynMap, item: ModuleDefId) {\n-    match item {\n-        ModuleDefId::FunctionId(func) => {\n-            let src = func.lookup(db).source(db);\n-            map[keys::FUNCTION].insert(src, func)\n-        }\n-        ModuleDefId::ConstId(konst) => {\n-            let src = konst.lookup(db).source(db);\n-            map[keys::CONST].insert(src, konst)\n-        }\n-        ModuleDefId::StaticId(statik) => {\n-            let src = statik.lookup(db).source(db);\n-            map[keys::STATIC].insert(src, statik)\n-        }\n-        ModuleDefId::TypeAliasId(ty) => {\n-            let src = ty.lookup(db).source(db);\n-            map[keys::TYPE_ALIAS].insert(src, ty)\n+impl ChildBySource for ItemScope {\n+    fn child_by_source(&self, db: &impl DefDatabase) -> DynMap {\n+        let mut res = DynMap::default();\n+        self.declarations().for_each(|item| add_module_def(db, &mut res, item));\n+        self.impls().for_each(|imp| add_impl(db, &mut res, imp));\n+        return res;\n+\n+        fn add_module_def(db: &impl DefDatabase, map: &mut DynMap, item: ModuleDefId) {\n+            match item {\n+                ModuleDefId::FunctionId(func) => {\n+                    let src = func.lookup(db).source(db);\n+                    map[keys::FUNCTION].insert(src, func)\n+                }\n+                ModuleDefId::ConstId(konst) => {\n+                    let src = konst.lookup(db).source(db);\n+                    map[keys::CONST].insert(src, konst)\n+                }\n+                ModuleDefId::StaticId(statik) => {\n+                    let src = statik.lookup(db).source(db);\n+                    map[keys::STATIC].insert(src, statik)\n+                }\n+                ModuleDefId::TypeAliasId(ty) => {\n+                    let src = ty.lookup(db).source(db);\n+                    map[keys::TYPE_ALIAS].insert(src, ty)\n+                }\n+                ModuleDefId::TraitId(trait_) => {\n+                    let src = trait_.lookup(db).source(db);\n+                    map[keys::TRAIT].insert(src, trait_)\n+                }\n+                ModuleDefId::AdtId(adt) => match adt {\n+                    AdtId::StructId(strukt) => {\n+                        let src = strukt.lookup(db).source(db);\n+                        map[keys::STRUCT].insert(src, strukt)\n+                    }\n+                    AdtId::UnionId(union_) => {\n+                        let src = union_.lookup(db).source(db);\n+                        map[keys::UNION].insert(src, union_)\n+                    }\n+                    AdtId::EnumId(enum_) => {\n+                        let src = enum_.lookup(db).source(db);\n+                        map[keys::ENUM].insert(src, enum_)\n+                    }\n+                },\n+                _ => (),\n+            }\n         }\n-        ModuleDefId::TraitId(trait_) => {\n-            let src = trait_.lookup(db).source(db);\n-            map[keys::TRAIT].insert(src, trait_)\n+        fn add_impl(db: &impl DefDatabase, map: &mut DynMap, imp: ImplId) {\n+            let src = imp.lookup(db).source(db);\n+            map[keys::IMPL].insert(src, imp)\n         }\n-        ModuleDefId::AdtId(adt) => match adt {\n-            AdtId::StructId(strukt) => {\n-                let src = strukt.lookup(db).source(db);\n-                map[keys::STRUCT].insert(src, strukt)\n-            }\n-            AdtId::UnionId(union_) => {\n-                let src = union_.lookup(db).source(db);\n-                map[keys::UNION].insert(src, union_)\n-            }\n-            AdtId::EnumId(enum_) => {\n-                let src = enum_.lookup(db).source(db);\n-                map[keys::ENUM].insert(src, enum_)\n-            }\n-        },\n-        _ => (),\n     }\n }\n \n@@ -167,9 +171,7 @@ impl ChildBySource for EnumId {\n \n impl ChildBySource for DefWithBodyId {\n     fn child_by_source(&self, db: &impl DefDatabase) -> DynMap {\n-        let mut res = DynMap::default();\n         let body = db.body(*self);\n-        body.defs.iter().copied().for_each(|item| add_module_def(db, &mut res, item));\n-        res\n+        body.item_scope.child_by_source(db)\n     }\n }"}]}