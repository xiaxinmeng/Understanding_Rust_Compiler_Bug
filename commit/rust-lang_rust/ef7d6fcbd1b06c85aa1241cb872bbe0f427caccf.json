{"sha": "ef7d6fcbd1b06c85aa1241cb872bbe0f427caccf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmN2Q2ZmNiZDFiMDZjODVhYTEyNDFjYjg3MmJiZTBmNDI3Y2FjY2Y=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-07-23T22:23:03Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-07-23T22:23:03Z"}, "message": "Remove generic-impl rendering filter", "tree": {"sha": "8696f98d34c52f19052fe3abaf7ca5e345530055", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8696f98d34c52f19052fe3abaf7ca5e345530055"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef7d6fcbd1b06c85aa1241cb872bbe0f427caccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef7d6fcbd1b06c85aa1241cb872bbe0f427caccf", "html_url": "https://github.com/rust-lang/rust/commit/ef7d6fcbd1b06c85aa1241cb872bbe0f427caccf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef7d6fcbd1b06c85aa1241cb872bbe0f427caccf/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eb0b05017267c063df08c74dc221cf761ab75cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb0b05017267c063df08c74dc221cf761ab75cd", "html_url": "https://github.com/rust-lang/rust/commit/6eb0b05017267c063df08c74dc221cf761ab75cd"}], "stats": {"total": 168, "additions": 83, "deletions": 85}, "files": [{"sha": "556d8462d3b966467d7b2f0d977e1d98976f2a1c", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 83, "deletions": 85, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/ef7d6fcbd1b06c85aa1241cb872bbe0f427caccf/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef7d6fcbd1b06c85aa1241cb872bbe0f427caccf/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=ef7d6fcbd1b06c85aa1241cb872bbe0f427caccf", "patch": "@@ -139,94 +139,92 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n         let mut traits = Vec::new();\n         if self.cx.crate_name != Some(\"core\".to_string()) &&\n            self.cx.access_levels.borrow().is_doc_reachable(def_id) {\n-            if let ty::TyAdt(_adt, _) = ty.sty {\n-                let real_name = name.clone().map(|name| Ident::from_str(&name));\n-                let param_env = self.cx.tcx.param_env(def_id);\n-                for &trait_def_id in self.cx.all_traits.iter() {\n-                    if !self.cx.access_levels.borrow().is_doc_reachable(trait_def_id) ||\n-                       self.cx.generated_synthetics\n-                              .borrow_mut()\n-                              .get(&(def_id, trait_def_id))\n-                              .is_some() {\n-                        continue\n-                    }\n-                    self.cx.tcx.for_each_relevant_impl(trait_def_id, ty, |impl_def_id| {\n-                        self.cx.tcx.infer_ctxt().enter(|infcx| {\n-                            let t_generics = infcx.tcx.generics_of(impl_def_id);\n-                            let trait_ref = infcx.tcx.impl_trait_ref(impl_def_id).unwrap();\n-\n-                            match infcx.tcx.type_of(impl_def_id).sty {\n-                                ::rustc::ty::TypeVariants::TyParam(_) => {},\n-                                _ => return,\n-                            }\n+            let real_name = name.clone().map(|name| Ident::from_str(&name));\n+            let param_env = self.cx.tcx.param_env(def_id);\n+            for &trait_def_id in self.cx.all_traits.iter() {\n+                if !self.cx.access_levels.borrow().is_doc_reachable(trait_def_id) ||\n+                   self.cx.generated_synthetics\n+                          .borrow_mut()\n+                          .get(&(def_id, trait_def_id))\n+                          .is_some() {\n+                    continue\n+                }\n+                self.cx.tcx.for_each_relevant_impl(trait_def_id, ty, |impl_def_id| {\n+                    self.cx.tcx.infer_ctxt().enter(|infcx| {\n+                        let t_generics = infcx.tcx.generics_of(impl_def_id);\n+                        let trait_ref = infcx.tcx.impl_trait_ref(impl_def_id).unwrap();\n+\n+                        match infcx.tcx.type_of(impl_def_id).sty {\n+                            ::rustc::ty::TypeVariants::TyParam(_) => {},\n+                            _ => return,\n+                        }\n \n-                            let substs = infcx.fresh_substs_for_item(DUMMY_SP, def_id);\n-                            let ty = ty.subst(infcx.tcx, substs);\n-                            let param_env = param_env.subst(infcx.tcx, substs);\n-\n-                            let impl_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id);\n-                            let trait_ref = trait_ref.subst(infcx.tcx, impl_substs);\n-\n-                            // Require the type the impl is implemented on to match\n-                            // our type, and ignore the impl if there was a mismatch.\n-                            let cause = traits::ObligationCause::dummy();\n-                            let eq_result = infcx.at(&cause, param_env)\n-                                                 .eq(trait_ref.self_ty(), ty);\n-                            if let Ok(InferOk { value: (), obligations }) = eq_result {\n-                                // FIXME(eddyb) ignoring `obligations` might cause false positives.\n-                                drop(obligations);\n-\n-                                let may_apply = infcx.predicate_may_hold(&traits::Obligation::new(\n-                                    cause.clone(),\n-                                    param_env,\n-                                    trait_ref.to_predicate(),\n-                                ));\n-                                if !may_apply {\n-                                    return\n-                                }\n-                                self.cx.generated_synthetics.borrow_mut()\n-                                                            .insert((def_id, trait_def_id));\n-                                let trait_ = hir::TraitRef {\n-                                    path: get_path_for_type(infcx.tcx,\n-                                                            trait_def_id,\n-                                                            hir::def::Def::Trait),\n-                                    ref_id: ast::DUMMY_NODE_ID,\n-                                };\n-                                let provided_trait_methods =\n-                                    infcx.tcx.provided_trait_methods(trait_def_id)\n-                                             .into_iter()\n-                                             .map(|meth| meth.ident.to_string())\n-                                             .collect();\n-\n-                                let ty = self.get_real_ty(def_id, def_ctor, &real_name, generics);\n-                                let predicates = infcx.tcx.predicates_of(def_id);\n-\n-                                traits.push(Item {\n-                                    source: infcx.tcx.def_span(impl_def_id).clean(self.cx),\n-                                    name: None,\n-                                    attrs: Default::default(),\n-                                    visibility: None,\n-                                    def_id: self.next_def_id(impl_def_id.krate),\n-                                    stability: None,\n-                                    deprecation: None,\n-                                    inner: ImplItem(Impl {\n-                                        unsafety: hir::Unsafety::Normal,\n-                                        generics: (t_generics, &predicates).clean(self.cx),\n-                                        provided_trait_methods,\n-                                        trait_: Some(trait_.clean(self.cx)),\n-                                        for_: ty.clean(self.cx),\n-                                        items: infcx.tcx.associated_items(impl_def_id)\n-                                                        .collect::<Vec<_>>()\n-                                                        .clean(self.cx),\n-                                        polarity: None,\n-                                        synthetic: true,\n-                                    }),\n-                                });\n-                                debug!(\"{:?} => {}\", trait_ref, may_apply);\n+                        let substs = infcx.fresh_substs_for_item(DUMMY_SP, def_id);\n+                        let ty = ty.subst(infcx.tcx, substs);\n+                        let param_env = param_env.subst(infcx.tcx, substs);\n+\n+                        let impl_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id);\n+                        let trait_ref = trait_ref.subst(infcx.tcx, impl_substs);\n+\n+                        // Require the type the impl is implemented on to match\n+                        // our type, and ignore the impl if there was a mismatch.\n+                        let cause = traits::ObligationCause::dummy();\n+                        let eq_result = infcx.at(&cause, param_env)\n+                                             .eq(trait_ref.self_ty(), ty);\n+                        if let Ok(InferOk { value: (), obligations }) = eq_result {\n+                            // FIXME(eddyb) ignoring `obligations` might cause false positives.\n+                            drop(obligations);\n+\n+                            let may_apply = infcx.predicate_may_hold(&traits::Obligation::new(\n+                                cause.clone(),\n+                                param_env,\n+                                trait_ref.to_predicate(),\n+                            ));\n+                            if !may_apply {\n+                                return\n                             }\n-                        });\n+                            self.cx.generated_synthetics.borrow_mut()\n+                                                        .insert((def_id, trait_def_id));\n+                            let trait_ = hir::TraitRef {\n+                                path: get_path_for_type(infcx.tcx,\n+                                                        trait_def_id,\n+                                                        hir::def::Def::Trait),\n+                                ref_id: ast::DUMMY_NODE_ID,\n+                            };\n+                            let provided_trait_methods =\n+                                infcx.tcx.provided_trait_methods(trait_def_id)\n+                                         .into_iter()\n+                                         .map(|meth| meth.ident.to_string())\n+                                         .collect();\n+\n+                            let ty = self.get_real_ty(def_id, def_ctor, &real_name, generics);\n+                            let predicates = infcx.tcx.predicates_of(def_id);\n+\n+                            traits.push(Item {\n+                                source: infcx.tcx.def_span(impl_def_id).clean(self.cx),\n+                                name: None,\n+                                attrs: Default::default(),\n+                                visibility: None,\n+                                def_id: self.next_def_id(impl_def_id.krate),\n+                                stability: None,\n+                                deprecation: None,\n+                                inner: ImplItem(Impl {\n+                                    unsafety: hir::Unsafety::Normal,\n+                                    generics: (t_generics, &predicates).clean(self.cx),\n+                                    provided_trait_methods,\n+                                    trait_: Some(trait_.clean(self.cx)),\n+                                    for_: ty.clean(self.cx),\n+                                    items: infcx.tcx.associated_items(impl_def_id)\n+                                                    .collect::<Vec<_>>()\n+                                                    .clean(self.cx),\n+                                    polarity: None,\n+                                    synthetic: true,\n+                                }),\n+                            });\n+                            debug!(\"{:?} => {}\", trait_ref, may_apply);\n+                        }\n                     });\n-                }\n+                });\n             }\n         }\n "}]}