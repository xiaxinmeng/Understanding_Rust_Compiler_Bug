{"sha": "88c944f96b426955933b77ca68c92990734769be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4Yzk0NGY5NmI0MjY5NTU5MzNiNzdjYTY4YzkyOTkwNzM0NzY5YmU=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-03-13T02:29:44Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-03-13T02:33:27Z"}, "message": "Remove some TextUnit->usize escapees", "tree": {"sha": "23e3903d5d9c7d72c32eb73649dd36b24eba6d38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23e3903d5d9c7d72c32eb73649dd36b24eba6d38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88c944f96b426955933b77ca68c92990734769be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88c944f96b426955933b77ca68c92990734769be", "html_url": "https://github.com/rust-lang/rust/commit/88c944f96b426955933b77ca68c92990734769be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88c944f96b426955933b77ca68c92990734769be/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f9f409538553fc709bbcad1a5c76968f36e5968", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f9f409538553fc709bbcad1a5c76968f36e5968", "html_url": "https://github.com/rust-lang/rust/commit/2f9f409538553fc709bbcad1a5c76968f36e5968"}], "stats": {"total": 58, "additions": 31, "deletions": 27}, "files": [{"sha": "62fadcdddf2859273f2432ab0550969b936cc25d", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c944f96b426955933b77ca68c92990734769be/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c944f96b426955933b77ca68c92990734769be/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=88c944f96b426955933b77ca68c92990734769be", "patch": "@@ -235,7 +235,7 @@ mod helpers {\n             (Some(assist), ExpectedResult::Target(target)) => {\n                 let action = assist.0[0].action.clone().unwrap();\n                 let range = action.target.expect(\"expected target on action\");\n-                assert_eq_text!(&before[range.start().to_usize()..range.end().to_usize()], target);\n+                assert_eq_text!(&before[range], target);\n             }\n             (Some(_), ExpectedResult::NotApplicable) => panic!(\"assist should not be applicable!\"),\n             (None, ExpectedResult::After(_)) | (None, ExpectedResult::Target(_)) => {"}, {"sha": "f58e436d1d4844427c275309c3e3d0d5270b7aa4", "filename": "crates/ra_ide/src/syntax_tree.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/88c944f96b426955933b77ca68c92990734769be/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c944f96b426955933b77ca68c92990734769be/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs?ref=88c944f96b426955933b77ca68c92990734769be", "patch": "@@ -5,7 +5,7 @@ use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo, AstNode, NodeOrToken, SourceFile,\n     SyntaxKind::{RAW_STRING, STRING},\n-    SyntaxToken, TextRange,\n+    SyntaxToken, TextRange, TextUnit,\n };\n \n pub use ra_db::FileId;\n@@ -56,19 +56,23 @@ fn syntax_tree_for_token(node: &SyntaxToken, text_range: TextRange) -> Option<St\n     let start = text_range.start() - node_range.start();\n \n     // how many characters we have selected\n-    let len = text_range.len().to_usize();\n+    let len = text_range.len();\n \n-    let node_len = node_range.len().to_usize();\n+    let node_len = node_range.len();\n \n-    let start = start.to_usize();\n+    let start = start;\n \n     // We want to cap our length\n     let len = len.min(node_len);\n \n     // Ensure our slice is inside the actual string\n-    let end = if start + len < text.len() { start + len } else { text.len() - start };\n+    let end = if start + len < TextUnit::of_str(&text) {\n+        start + len\n+    } else {\n+        TextUnit::of_str(&text) - start\n+    };\n \n-    let text = &text[start..end];\n+    let text = &text[TextRange::from_to(start, end)];\n \n     // Remove possible extra string quotes from the start\n     // and the end of the string"}, {"sha": "8ae745ff2a60322fb002ee250c27cf0e00e8c65d", "filename": "crates/ra_ide_db/src/line_index.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/88c944f96b426955933b77ca68c92990734769be/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c944f96b426955933b77ca68c92990734769be/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs?ref=88c944f96b426955933b77ca68c92990734769be", "patch": "@@ -59,7 +59,7 @@ impl LineIndex {\n             }\n \n             let char_len = TextUnit::of_char(c);\n-            if char_len.to_usize() > 1 {\n+            if char_len > TextUnit::from_usize(1) {\n                 utf16_chars.push(Utf16Char { start: curr_col, end: curr_col + char_len });\n             }\n \n@@ -101,23 +101,23 @@ impl LineIndex {\n             .filter(|it| !it.is_empty())\n     }\n \n-    fn utf8_to_utf16_col(&self, line: u32, mut col: TextUnit) -> usize {\n+    fn utf8_to_utf16_col(&self, line: u32, col: TextUnit) -> usize {\n         if let Some(utf16_chars) = self.utf16_lines.get(&line) {\n-            let mut correction = TextUnit::from_usize(0);\n+            let mut correction = 0;\n             for c in utf16_chars {\n                 if col >= c.end {\n-                    correction += c.len() - TextUnit::from_usize(1);\n+                    correction += c.len().to_usize() - 1;\n                 } else {\n                     // From here on, all utf16 characters come *after* the character we are mapping,\n                     // so we don't need to take them into account\n                     break;\n                 }\n             }\n \n-            col -= correction;\n+            col.to_usize() - correction\n+        } else {\n+            col.to_usize()\n         }\n-\n-        col.to_usize()\n     }\n \n     fn utf16_to_utf8_col(&self, line: u32, col: u32) -> TextUnit {"}, {"sha": "2ebbabdc6d1d5d41aedef057c7b1b65b60d930a2", "filename": "crates/ra_ide_db/src/line_index_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c944f96b426955933b77ca68c92990734769be/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c944f96b426955933b77ca68c92990734769be/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs?ref=88c944f96b426955933b77ca68c92990734769be", "patch": "@@ -145,7 +145,7 @@ impl Iterator for OffsetStepIter<'_> {\n                     Some((next, next_offset))\n                 } else {\n                     let char_len = TextUnit::of_char(c);\n-                    if char_len.to_usize() > 1 {\n+                    if char_len > TextUnit::from_usize(1) {\n                         let start = self.offset + TextUnit::from_usize(i);\n                         let end = start + char_len;\n                         let next = Step::Utf16Char(TextRange::from_to(start, end));"}, {"sha": "d1baaa60770f6a9c9ab0e6fcc4298be3cb2a3199", "filename": "crates/ra_syntax/src/parsing/lexer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88c944f96b426955933b77ca68c92990734769be/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c944f96b426955933b77ca68c92990734769be/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs?ref=88c944f96b426955933b77ca68c92990734769be", "patch": "@@ -65,7 +65,7 @@ pub fn tokenize(text: &str) -> (Vec<Token>, Vec<SyntaxError>) {\n /// Beware that unescape errors are not checked at tokenization time.\n pub fn lex_single_syntax_kind(text: &str) -> Option<(SyntaxKind, Option<SyntaxError>)> {\n     lex_first_token(text)\n-        .filter(|(token, _)| token.len.to_usize() == text.len())\n+        .filter(|(token, _)| token.len == TextUnit::of_str(text))\n         .map(|(token, error)| (token.kind, error))\n }\n \n@@ -75,7 +75,7 @@ pub fn lex_single_syntax_kind(text: &str) -> Option<(SyntaxKind, Option<SyntaxEr\n /// Beware that unescape errors are not checked at tokenization time.\n pub fn lex_single_valid_syntax_kind(text: &str) -> Option<SyntaxKind> {\n     lex_first_token(text)\n-        .filter(|(token, error)| !error.is_some() && token.len.to_usize() == text.len())\n+        .filter(|(token, error)| !error.is_some() && token.len == TextUnit::of_str(text))\n         .map(|(token, _error)| token.kind)\n }\n "}, {"sha": "d331d541eb212e69a7324bf7fbfc0a5b9afdb07b", "filename": "crates/ra_syntax/src/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88c944f96b426955933b77ca68c92990734769be/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c944f96b426955933b77ca68c92990734769be/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ftests.rs?ref=88c944f96b426955933b77ca68c92990734769be", "patch": "@@ -5,7 +5,7 @@ use std::{\n \n use test_utils::{collect_tests, dir_tests, project_dir, read_text};\n \n-use crate::{fuzz, tokenize, SourceFile, SyntaxError, Token};\n+use crate::{fuzz, tokenize, SourceFile, SyntaxError, TextRange, TextUnit, Token};\n \n #[test]\n fn lexer_tests() {\n@@ -120,11 +120,11 @@ fn assert_errors_are_absent(errors: &[SyntaxError], path: &Path) {\n \n fn dump_tokens_and_errors(tokens: &[Token], errors: &[SyntaxError], text: &str) -> String {\n     let mut acc = String::new();\n-    let mut offset = 0;\n+    let mut offset = TextUnit::from_usize(0);\n     for token in tokens {\n-        let token_len = token.len.to_usize();\n-        let token_text = &text[offset..offset + token_len];\n-        offset += token_len;\n+        let token_len = token.len;\n+        let token_text = &text[TextRange::offset_len(offset, token.len)];\n+        offset += token.len;\n         writeln!(acc, \"{:?} {} {:?}\", token.kind, token_len, token_text).unwrap();\n     }\n     for err in errors {"}, {"sha": "5c37a08a84bc0b39ccf38b74758777737867c89b", "filename": "crates/ra_text_edit/src/text_edit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88c944f96b426955933b77ca68c92990734769be/crates%2Fra_text_edit%2Fsrc%2Ftext_edit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c944f96b426955933b77ca68c92990734769be/crates%2Fra_text_edit%2Fsrc%2Ftext_edit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Ftext_edit.rs?ref=88c944f96b426955933b77ca68c92990734769be", "patch": "@@ -63,12 +63,12 @@ impl TextEdit {\n     }\n \n     pub fn apply(&self, text: &str) -> String {\n-        let mut total_len = text.len();\n+        let mut total_len = TextUnit::of_str(text);\n         for atom in self.atoms.iter() {\n-            total_len += atom.insert.len();\n-            total_len -= (atom.delete.end() - atom.delete.start()).to_usize();\n+            total_len += TextUnit::of_str(&atom.insert);\n+            total_len -= atom.delete.end() - atom.delete.start();\n         }\n-        let mut buf = String::with_capacity(total_len);\n+        let mut buf = String::with_capacity(total_len.to_usize());\n         let mut prev = 0;\n         for atom in self.atoms.iter() {\n             let start = atom.delete.start().to_usize();\n@@ -80,7 +80,7 @@ impl TextEdit {\n             prev = end;\n         }\n         buf.push_str(&text[prev..text.len()]);\n-        assert_eq!(buf.len(), total_len);\n+        assert_eq!(TextUnit::of_str(&buf), total_len);\n         buf\n     }\n "}]}