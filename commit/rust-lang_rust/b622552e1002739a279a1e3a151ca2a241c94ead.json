{"sha": "b622552e1002739a279a1e3a151ca2a241c94ead", "node_id": "C_kwDOAAsO6NoAKGI2MjI1NTJlMTAwMjczOWEyNzlhMWUzYTE1MWNhMmEyNDFjOTRlYWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-02T18:34:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-02T18:34:02Z"}, "message": "Rollup merge of #93221 - alyssaverkade:fix-93093, r=wesleywiser\n\n[borrowck] Fix help on mutating &self in async fns\n\nPreviously, when rustc was provided an async function that tried to\nmutate through a shared reference to an implicit self (as shown in the\nui test), rustc would suggest modifying the parameter signature\nto `&mut` + the fully qualified name of the ty (in the case of the repro\n`S`). If a user modified their code to match the suggestion, the\ncompiler would not accept it.\n\nThis commit modifies the suggestion so that when rustc is provided the\nui test that is also attached in this commit, it suggests (correctly)\n`&mut self`. We try to be careful about distinguishing between implicit\nand explicit self annotations, since the latter seem to be handled\ncorrectly already.\n\nThis is my first PR here so I'm pretty sure I probably missed something/could use better terminology. I also didn't try to make the match exhaustive since implicit self is the only real special case that I need to handle (that I'm aware of), and I'm pretty sure there's a cleaner way to do this so any advice would be greatly appreciated! (I'm also not terribly confident about how I wrote the ui tests)\n\nhere is your cc as requested `@compiler-errors`\n\nThis is an attempt to fix #93093", "tree": {"sha": "7ccaa587b51ad012fcccce581cb9a686d64af301", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ccaa587b51ad012fcccce581cb9a686d64af301"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b622552e1002739a279a1e3a151ca2a241c94ead", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh+s6aCRBK7hj4Ov3rIwAA/RQIACjjQ1Y2+UU9QegCFYOYqyfM\nj1l7UN6mw+5MUjS1LwiNDapC696z5l7pxrxBNQdo4NXDsaUTTQDZaHo5J6ovCz3A\nASY2Bc8wtp/Zez/N+joektAhgEvxDTNixkZd5GJG9qvBQBapWzVTDZgTIWirQEoF\nVBGDI4VU7JE3lgC5v5BFbGNNASeWBsM0hEZhzvWTi3owlRErmuNts1NogycmLDIq\n6Rq7+KvVUofI28r+fwSNIyGa0qolZWBVJZCefIQ6REMirsrazE/++B1OYTA80zUV\np2R58/8gJOzIRWDJ9XwxTcX8W6jSAmO9vCdN7YGYYOLJdYR1xQb4rFMj9Pb+UPQ=\n=OcDF\n-----END PGP SIGNATURE-----\n", "payload": "tree 7ccaa587b51ad012fcccce581cb9a686d64af301\nparent 21ffe45631072bd7755a01d1acf9971f82e7fc37\nparent b885700c7b1f8e9ba26e1f930dcb55ef56130b28\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643826842 +0100\ncommitter GitHub <noreply@github.com> 1643826842 +0100\n\nRollup merge of #93221 - alyssaverkade:fix-93093, r=wesleywiser\n\n[borrowck] Fix help on mutating &self in async fns\n\nPreviously, when rustc was provided an async function that tried to\nmutate through a shared reference to an implicit self (as shown in the\nui test), rustc would suggest modifying the parameter signature\nto `&mut` + the fully qualified name of the ty (in the case of the repro\n`S`). If a user modified their code to match the suggestion, the\ncompiler would not accept it.\n\nThis commit modifies the suggestion so that when rustc is provided the\nui test that is also attached in this commit, it suggests (correctly)\n`&mut self`. We try to be careful about distinguishing between implicit\nand explicit self annotations, since the latter seem to be handled\ncorrectly already.\n\nThis is my first PR here so I'm pretty sure I probably missed something/could use better terminology. I also didn't try to make the match exhaustive since implicit self is the only real special case that I need to handle (that I'm aware of), and I'm pretty sure there's a cleaner way to do this so any advice would be greatly appreciated! (I'm also not terribly confident about how I wrote the ui tests)\n\nhere is your cc as requested `@compiler-errors`\n\nThis is an attempt to fix #93093\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b622552e1002739a279a1e3a151ca2a241c94ead", "html_url": "https://github.com/rust-lang/rust/commit/b622552e1002739a279a1e3a151ca2a241c94ead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b622552e1002739a279a1e3a151ca2a241c94ead/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21ffe45631072bd7755a01d1acf9971f82e7fc37", "url": "https://api.github.com/repos/rust-lang/rust/commits/21ffe45631072bd7755a01d1acf9971f82e7fc37", "html_url": "https://github.com/rust-lang/rust/commit/21ffe45631072bd7755a01d1acf9971f82e7fc37"}, {"sha": "b885700c7b1f8e9ba26e1f930dcb55ef56130b28", "url": "https://api.github.com/repos/rust-lang/rust/commits/b885700c7b1f8e9ba26e1f930dcb55ef56130b28", "html_url": "https://github.com/rust-lang/rust/commit/b885700c7b1f8e9ba26e1f930dcb55ef56130b28"}], "stats": {"total": 58, "additions": 52, "deletions": 6}, "files": [{"sha": "049c3aab97933a6bcc2b8c7eb4b58c056a904f0a", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b622552e1002739a279a1e3a151ca2a241c94ead/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b622552e1002739a279a1e3a151ca2a241c94ead/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=b622552e1002739a279a1e3a151ca2a241c94ead", "patch": "@@ -488,12 +488,32 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                     // don't create labels for compiler-generated spans\n                                     Some(_) => None,\n                                     None => {\n-                                        let (span, suggestion) = suggest_ampmut(\n-                                            self.infcx.tcx,\n-                                            local_decl,\n-                                            opt_assignment_rhs_span,\n-                                            *opt_ty_info,\n-                                        );\n+                                        let (span, suggestion) = if name != kw::SelfLower {\n+                                            suggest_ampmut(\n+                                                self.infcx.tcx,\n+                                                local_decl,\n+                                                opt_assignment_rhs_span,\n+                                                *opt_ty_info,\n+                                            )\n+                                        } else {\n+                                            match local_decl.local_info.as_deref() {\n+                                                Some(LocalInfo::User(ClearCrossCrate::Set(\n+                                                    mir::BindingForm::Var(mir::VarBindingForm {\n+                                                        opt_ty_info: None,\n+                                                        ..\n+                                                    }),\n+                                                ))) => {\n+                                                    suggest_ampmut_self(self.infcx.tcx, local_decl)\n+                                                }\n+                                                // explicit self (eg `self: &'a Self`)\n+                                                _ => suggest_ampmut(\n+                                                    self.infcx.tcx,\n+                                                    local_decl,\n+                                                    opt_assignment_rhs_span,\n+                                                    *opt_ty_info,\n+                                                ),\n+                                            }\n+                                        };\n                                         Some((true, span, suggestion))\n                                     }\n                                 }"}, {"sha": "f4db5ecafac40a6be0600830a20bff70cc3de149", "filename": "src/test/ui/borrowck/issue-93093.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b622552e1002739a279a1e3a151ca2a241c94ead/src%2Ftest%2Fui%2Fborrowck%2Fissue-93093.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b622552e1002739a279a1e3a151ca2a241c94ead/src%2Ftest%2Fui%2Fborrowck%2Fissue-93093.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-93093.rs?ref=b622552e1002739a279a1e3a151ca2a241c94ead", "patch": "@@ -0,0 +1,14 @@\n+// edition:2018\n+struct S {\n+    foo: usize,\n+}\n+impl S {\n+    async fn bar(&self) { //~ HELP consider changing this to be a mutable reference\n+        //~| SUGGESTION &mut self\n+        self.foo += 1; //~ ERROR cannot assign to `self.foo`, which is behind a `&` reference [E0594]\n+    }\n+}\n+\n+fn main() {\n+    S { foo: 1 }.bar();\n+}"}, {"sha": "031128af47655e34fa8cef6f8552eb2f887afabe", "filename": "src/test/ui/borrowck/issue-93093.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b622552e1002739a279a1e3a151ca2a241c94ead/src%2Ftest%2Fui%2Fborrowck%2Fissue-93093.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b622552e1002739a279a1e3a151ca2a241c94ead/src%2Ftest%2Fui%2Fborrowck%2Fissue-93093.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-93093.stderr?ref=b622552e1002739a279a1e3a151ca2a241c94ead", "patch": "@@ -0,0 +1,12 @@\n+error[E0594]: cannot assign to `self.foo`, which is behind a `&` reference\n+  --> $DIR/issue-93093.rs:8:9\n+   |\n+LL |     async fn bar(&self) {\n+   |                  ----- help: consider changing this to be a mutable reference: `&mut self`\n+LL |\n+LL |         self.foo += 1;\n+   |         ^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be written\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}]}