{"sha": "d51cf9601c714a8383aecade7c98559dd4831625", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MWNmOTYwMWM3MTRhODM4M2FlY2FkZTdjOTg1NTlkZDQ4MzE2MjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-17T08:44:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-17T08:44:12Z"}, "message": "Auto merge of #81083 - ssomers:btree_drainy_refactor_1, r=Mark-Simulacrum\n\nBTreeMap: expose new_internal function and sanitize from_new_internal\n\n`new_internal` is the functional core of the imperative `push_internal_level`, and `from_new_internal` can easily do a proper job instead of returning a half-baked node.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "5fe5441f4ebb13aa370db429384dc4558da7e675", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fe5441f4ebb13aa370db429384dc4558da7e675"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d51cf9601c714a8383aecade7c98559dd4831625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d51cf9601c714a8383aecade7c98559dd4831625", "html_url": "https://github.com/rust-lang/rust/commit/d51cf9601c714a8383aecade7c98559dd4831625", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d51cf9601c714a8383aecade7c98559dd4831625/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49d7889da4b97b63f4d3e793a27b78a78326c1cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/49d7889da4b97b63f4d3e793a27b78a78326c1cd", "html_url": "https://github.com/rust-lang/rust/commit/49d7889da4b97b63f4d3e793a27b78a78326c1cd"}, {"sha": "d199c5b0206b964abadc8539ad4e959ec8e9413b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d199c5b0206b964abadc8539ad4e959ec8e9413b", "html_url": "https://github.com/rust-lang/rust/commit/d199c5b0206b964abadc8539ad4e959ec8e9413b"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "220c98b294cef06f71df4254e3d2438f6ab9efae", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf9601c714a8383aecade7c98559dd4831625/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf9601c714a8383aecade7c98559dd4831625/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=d51cf9601c714a8383aecade7c98559dd4831625", "patch": "@@ -142,8 +142,17 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::Leaf> {\n }\n \n impl<K, V> NodeRef<marker::Owned, K, V, marker::Internal> {\n+    fn new_internal(child: Root<K, V>) -> Self {\n+        let mut new_node = Box::new(unsafe { InternalNode::new() });\n+        new_node.edges[0].write(child.node);\n+        NodeRef::from_new_internal(new_node, child.height + 1)\n+    }\n+\n     fn from_new_internal(internal: Box<InternalNode<K, V>>, height: usize) -> Self {\n-        NodeRef { height, node: NonNull::from(Box::leak(internal)).cast(), _marker: PhantomData }\n+        let node = NonNull::from(Box::leak(internal)).cast();\n+        let mut this = NodeRef { height, node, _marker: PhantomData };\n+        this.borrow_mut().correct_all_childrens_parent_links();\n+        this\n     }\n }\n \n@@ -167,11 +176,7 @@ impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {\n     /// make that new node the root node, and return it. This increases the height by 1\n     /// and is the opposite of `pop_internal_level`.\n     pub fn push_internal_level(&mut self) -> NodeRef<marker::Mut<'_>, K, V, marker::Internal> {\n-        let mut new_node = Box::new(unsafe { InternalNode::new() });\n-        new_node.edges[0].write(self.node);\n-        let mut new_root = NodeRef::from_new_internal(new_node, self.height + 1);\n-        new_root.borrow_mut().first_edge().correct_parent_link();\n-        *self = new_root.forget_type();\n+        super::mem::take_mut(self, |old_root| NodeRef::new_internal(old_root).forget_type());\n \n         // `self.borrow_mut()`, except that we just forgot we're internal now:\n         NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n@@ -1193,9 +1198,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>,\n             );\n \n             let height = self.node.height;\n-            let mut right = NodeRef::from_new_internal(new_node, height);\n-\n-            right.borrow_mut().correct_childrens_parent_links(0..new_len + 1);\n+            let right = NodeRef::from_new_internal(new_node, height);\n \n             SplitResult { left: self.node, kv, right }\n         }"}, {"sha": "48ce9f2bd89c8cd04fd5ef892f4a81c3d3a62b18", "filename": "library/alloc/src/collections/btree/node/tests.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d51cf9601c714a8383aecade7c98559dd4831625/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d51cf9601c714a8383aecade7c98559dd4831625/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs?ref=d51cf9601c714a8383aecade7c98559dd4831625", "patch": "@@ -79,10 +79,8 @@ fn test_splitpoint() {\n #[test]\n fn test_partial_cmp_eq() {\n     let mut root1 = NodeRef::new_leaf();\n-    let mut leaf1 = root1.borrow_mut();\n-    leaf1.push(1, ());\n-    let mut root1 = root1.forget_type();\n-    root1.push_internal_level();\n+    root1.borrow_mut().push(1, ());\n+    let mut root1 = NodeRef::new_internal(root1.forget_type()).forget_type();\n     let root2 = Root::new();\n     root1.reborrow().assert_back_pointers();\n     root2.reborrow().assert_back_pointers();"}]}