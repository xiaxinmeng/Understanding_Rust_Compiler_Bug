{"sha": "38030ffb4e735b26260848b744c0910a5641e1db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MDMwZmZiNGU3MzViMjYyNjA4NDhiNzQ0YzA5MTBhNTY0MWUxZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-11T01:18:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-11T01:18:18Z"}, "message": "Auto merge of #78920 - jonas-schievink:rollup-w2mjsuh, r=jonas-schievink\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #76765 (Make it more clear what an about async fn's returns when referring to what it returns)\n - #78574 (Use check-pass instead of build-pass in regions ui test suite)\n - #78669 (Use check-pass instead of build-pass in some consts ui test suits)\n - #78847 (Assert that a return place is not used for indexing during integration)\n - #78854 (Workaround for \"could not fully normalize\" ICE )\n - #78875 (rustc_target: Further cleanup use of target options)\n - #78887 (Add comments to explain memory usage optimization)\n - #78890 (comment attribution fix)\n - #78896 (Clarified description of write! macro)\n - #78897 (Add missing newline to error message of the default OOM hook)\n - #78898 (add regression test for #78892)\n - #78908 ((rustdoc) [src] link for types defined by macros shows invocation, not defintion)\n - #78910 (Fix links to stabilized versions of some intrinsics)\n - #78912 (Add macro test for min-const-generics)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7cd5b04b2b71157b1112ad1f6fcd01c15db32a75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cd5b04b2b71157b1112ad1f6fcd01c15db32a75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38030ffb4e735b26260848b744c0910a5641e1db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38030ffb4e735b26260848b744c0910a5641e1db", "html_url": "https://github.com/rust-lang/rust/commit/38030ffb4e735b26260848b744c0910a5641e1db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38030ffb4e735b26260848b744c0910a5641e1db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf9cf7c923eb01146971429044f216a3ca905e06", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf9cf7c923eb01146971429044f216a3ca905e06", "html_url": "https://github.com/rust-lang/rust/commit/cf9cf7c923eb01146971429044f216a3ca905e06"}, {"sha": "fa4d0f232799a4f83490fc6f2d748dbf62c536c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4d0f232799a4f83490fc6f2d748dbf62c536c9", "html_url": "https://github.com/rust-lang/rust/commit/fa4d0f232799a4f83490fc6f2d748dbf62c536c9"}], "stats": {"total": 1773, "additions": 1089, "deletions": 684}, "files": [{"sha": "bb1d2967d6a4e2bb95954126e4f41b4c66a1219c", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -796,7 +796,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n     fn visit_expr(&mut self, expr: &'a Expr) {\n         match &expr.kind {\n-            ExprKind::LlvmInlineAsm(..) if !self.session.target.options.allow_asm => {\n+            ExprKind::LlvmInlineAsm(..) if !self.session.target.allow_asm => {\n                 struct_span_err!(\n                     self.session,\n                     expr.span,"}, {"sha": "cd4c982b192795af121f709de8e0afbf8f5eb5f1", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -37,7 +37,7 @@ struct TestCtxt<'a> {\n pub fn inject(sess: &Session, resolver: &mut dyn ResolverExpand, krate: &mut ast::Crate) {\n     let span_diagnostic = sess.diagnostic();\n     let panic_strategy = sess.panic_strategy();\n-    let platform_panic_strategy = sess.target.options.panic_strategy;\n+    let platform_panic_strategy = sess.target.panic_strategy;\n \n     // Check for #![reexport_test_harness_main = \"some_name\"] which gives the\n     // main test function the name `some_name` without hygiene. This needs to be"}, {"sha": "daf9fa6158f1c544fc59f3a65b2c7b8e7fe19216", "filename": "compiler/rustc_codegen_cranelift/src/archive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -63,9 +63,9 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             sess,\n             dst: output.to_path_buf(),\n             lib_search_paths: archive_search_paths(sess),\n-            use_gnu_style_archive: sess.target.options.archive_format == \"gnu\",\n+            use_gnu_style_archive: sess.target.archive_format == \"gnu\",\n             // FIXME fix builtin ranlib on macOS\n-            no_builtin_ranlib: sess.target.options.is_like_osx,\n+            no_builtin_ranlib: sess.target.is_like_osx,\n \n             src_archives,\n             entries,"}, {"sha": "85e8158af27ad5f9f8a6af1fde98c6c20c915006", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -50,7 +50,7 @@ impl<'tcx> DebugContext<'tcx> {\n             // TODO: this should be configurable\n             // macOS doesn't seem to support DWARF > 3\n             // 5 version is required for md5 file hash\n-            version: if tcx.sess.target.options.is_like_osx {\n+            version: if tcx.sess.target.is_like_osx {\n                 3\n             } else {\n                 // FIXME change to version 5 once the gdb and lldb shipping with the latest debian"}, {"sha": "c0245aa1e02138d494e5e4d955b5462f9a33f9be", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -320,8 +320,8 @@ fn codegen_global_asm(tcx: TyCtxt<'_>, cgu_name: &str, global_asm: &str) {\n     }\n \n     if cfg!(not(feature = \"inline_asm\"))\n-        || tcx.sess.target.options.is_like_osx\n-        || tcx.sess.target.options.is_like_windows\n+        || tcx.sess.target.is_like_osx\n+        || tcx.sess.target.is_like_windows\n     {\n         if global_asm.contains(\"__rust_probestack\") {\n             return;"}, {"sha": "2e3b9fb8364e493fca716d638e1d70f1a3fd3e5f", "filename": "compiler/rustc_codegen_cranelift/src/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -101,7 +101,7 @@ pub(crate) fn write_metadata<P: WriteMetadata>(\n     product.add_rustc_section(\n         rustc_middle::middle::exported_symbols::metadata_symbol_name(tcx),\n         compressed,\n-        tcx.sess.target.options.is_like_osx,\n+        tcx.sess.target.is_like_osx,\n     );\n \n     metadata"}, {"sha": "735c59d70c1201a87f322b26c29c687d8fdc4796", "filename": "compiler/rustc_codegen_cranelift/src/toolchain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftoolchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftoolchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftoolchain.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -91,7 +91,7 @@ fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                 } else if stem == \"link\" || stem == \"lld-link\" {\n                     LinkerFlavor::Msvc\n                 } else if stem == \"lld\" || stem == \"rust-lld\" {\n-                    LinkerFlavor::Lld(sess.target.options.lld_flavor)\n+                    LinkerFlavor::Lld(sess.target.lld_flavor)\n                 } else {\n                     // fall back to the value in the target spec\n                     sess.target.linker_flavor\n@@ -115,7 +115,7 @@ fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n \n     if let Some(ret) = infer_from(\n         sess,\n-        sess.target.options.linker.clone().map(PathBuf::from),\n+        sess.target.linker.clone().map(PathBuf::from),\n         Some(sess.target.linker_flavor),\n     ) {\n         return ret;"}, {"sha": "a5ea0b2a74c5c90f98632f84951ffc5182fadf44", "filename": "compiler/rustc_codegen_llvm/src/allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -57,7 +57,7 @@ pub(crate) unsafe fn codegen(\n         let name = format!(\"__rust_{}\", method.name);\n         let llfn = llvm::LLVMRustGetOrInsertFunction(llmod, name.as_ptr().cast(), name.len(), ty);\n \n-        if tcx.sess.target.options.default_hidden_visibility {\n+        if tcx.sess.target.default_hidden_visibility {\n             llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n         }\n         if tcx.sess.must_emit_unwind_tables() {\n@@ -98,7 +98,7 @@ pub(crate) unsafe fn codegen(\n     // -> ! DIFlagNoReturn\n     llvm::Attribute::NoReturn.apply_llfn(llvm::AttributePlace::Function, llfn);\n \n-    if tcx.sess.target.options.default_hidden_visibility {\n+    if tcx.sess.target.default_hidden_visibility {\n         llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n     }\n     if tcx.sess.must_emit_unwind_tables() {"}, {"sha": "87bcce07b34982bc7143f05c45c8af7424f02f85", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -90,8 +90,7 @@ fn set_instrument_function(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n \n         // The function name varies on platforms.\n         // See test/CodeGen/mcount.c in clang.\n-        let mcount_name =\n-            CString::new(cx.sess().target.options.target_mcount.as_str().as_bytes()).unwrap();\n+        let mcount_name = CString::new(cx.sess().target.mcount.as_str().as_bytes()).unwrap();\n \n         llvm::AddFunctionAttrStringValue(\n             llfn,\n@@ -105,7 +104,7 @@ fn set_instrument_function(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n     // Only use stack probes if the target specification indicates that we\n     // should be using stack probes\n-    if !cx.sess().target.options.stack_probes {\n+    if !cx.sess().target.stack_probes {\n         return;\n     }\n \n@@ -174,7 +173,6 @@ pub fn llvm_target_features(sess: &Session) -> impl Iterator<Item = &str> {\n         .split(',')\n         .filter(|f| !RUSTC_SPECIFIC_FEATURES.iter().any(|s| f.contains(s)));\n     sess.target\n-        .options\n         .features\n         .split(',')\n         .chain(cmdline)"}, {"sha": "4e7213853b015a596f32875f26807a88b7b2d5ba", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -206,7 +206,7 @@ impl<'a> LlvmArchiveBuilder<'a> {\n     }\n \n     fn llvm_archive_kind(&self) -> Result<ArchiveKind, &str> {\n-        let kind = &*self.config.sess.target.options.archive_format;\n+        let kind = &*self.config.sess.target.archive_format;\n         kind.parse().map_err(|_| kind)\n     }\n "}, {"sha": "e6acb6860be9efa3869755caeb68d320d3d36c44", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -129,13 +129,13 @@ pub fn target_machine_factory(\n     let use_softfp = sess.opts.cg.soft_float;\n \n     let ffunction_sections =\n-        sess.opts.debugging_opts.function_sections.unwrap_or(sess.target.options.function_sections);\n+        sess.opts.debugging_opts.function_sections.unwrap_or(sess.target.function_sections);\n     let fdata_sections = ffunction_sections;\n \n     let code_model = to_llvm_code_model(sess.code_model());\n \n     let features = attributes::llvm_target_features(sess).collect::<Vec<_>>();\n-    let mut singlethread = sess.target.options.singlethread;\n+    let mut singlethread = sess.target.singlethread;\n \n     // On the wasm target once the `atomics` feature is enabled that means that\n     // we're no longer single-threaded, or otherwise we don't want LLVM to\n@@ -151,22 +151,16 @@ pub fn target_machine_factory(\n     let cpu = SmallCStr::new(llvm_util::target_cpu(sess));\n     let features = features.join(\",\");\n     let features = CString::new(features).unwrap();\n-    let abi = SmallCStr::new(&sess.target.options.llvm_abiname);\n-    let trap_unreachable = sess.target.options.trap_unreachable;\n+    let abi = SmallCStr::new(&sess.target.llvm_abiname);\n+    let trap_unreachable = sess.target.trap_unreachable;\n     let emit_stack_size_section = sess.opts.debugging_opts.emit_stack_sizes;\n \n     let asm_comments = sess.asm_comments();\n-    let relax_elf_relocations = sess\n-        .opts\n-        .debugging_opts\n-        .relax_elf_relocations\n-        .unwrap_or(sess.target.options.relax_elf_relocations);\n-\n-    let use_init_array = !sess\n-        .opts\n-        .debugging_opts\n-        .use_ctors_section\n-        .unwrap_or(sess.target.options.use_ctors_section);\n+    let relax_elf_relocations =\n+        sess.opts.debugging_opts.relax_elf_relocations.unwrap_or(sess.target.relax_elf_relocations);\n+\n+    let use_init_array =\n+        !sess.opts.debugging_opts.use_ctors_section.unwrap_or(sess.target.use_ctors_section);\n \n     Arc::new(move || {\n         let tm = unsafe {"}, {"sha": "367c1f4811cdb8ebc2638add76108b989d12709e", "filename": "compiler/rustc_codegen_llvm/src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -176,7 +176,7 @@ pub fn get_fn(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) -> &'ll Value\n         // should use dllimport for functions.\n         if cx.use_dll_storage_attrs\n             && tcx.is_dllimport_foreign_item(instance_def_id)\n-            && tcx.sess.target.target_env != \"gnu\"\n+            && tcx.sess.target.env != \"gnu\"\n         {\n             unsafe {\n                 llvm::LLVMSetDLLStorageClass(llfn, llvm::DLLStorageClass::DllImport);"}, {"sha": "14dd245625d2556bc1496e43fe817c0531b38a51", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -91,7 +91,7 @@ fn set_global_alignment(cx: &CodegenCx<'ll, '_>, gv: &'ll Value, mut align: Alig\n     // The target may require greater alignment for globals than the type does.\n     // Note: GCC and Clang also allow `__attribute__((aligned))` on variables,\n     // which can force it to be smaller.  Rust doesn't support this yet.\n-    if let Some(min) = cx.sess().target.options.min_global_align {\n+    if let Some(min) = cx.sess().target.min_global_align {\n         match Align::from_bits(min) {\n             Ok(min) => align = align.max(min),\n             Err(err) => {\n@@ -283,7 +283,7 @@ impl CodegenCx<'ll, 'tcx> {\n             // argument validation.\n             debug_assert!(\n                 !(self.tcx.sess.opts.cg.linker_plugin_lto.enabled()\n-                    && self.tcx.sess.target.options.is_like_windows\n+                    && self.tcx.sess.target.is_like_windows\n                     && self.tcx.sess.opts.cg.prefer_dynamic)\n             );\n \n@@ -435,7 +435,7 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n                 // will use load-unaligned instructions instead, and thus avoiding the crash.\n                 //\n                 // We could remove this hack whenever we decide to drop macOS 10.10 support.\n-                if self.tcx.sess.target.options.is_like_osx {\n+                if self.tcx.sess.target.is_like_osx {\n                     // The `inspect` method is okay here because we checked relocations, and\n                     // because we are doing this access to inspect the final interpreter state\n                     // (not as part of the interpreter execution)."}, {"sha": "b6e922ca5456beb881886192e2b51ad72b271e01", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -129,7 +129,7 @@ pub unsafe fn create_module(\n     }\n \n     // Ensure the data-layout values hardcoded remain the defaults.\n-    if sess.target.options.is_builtin {\n+    if sess.target.is_builtin {\n         let tm = crate::back::write::create_informational_target_machine(tcx.sess);\n         llvm::LLVMRustSetDataLayoutFromTargetMachine(llmod, tm);\n         llvm::LLVMRustDisposeTargetMachine(tm);\n@@ -190,7 +190,7 @@ pub unsafe fn create_module(\n     }\n \n     // Control Flow Guard is currently only supported by the MSVC linker on Windows.\n-    if sess.target.options.is_like_msvc {\n+    if sess.target.is_like_msvc {\n         match sess.opts.cg.control_flow_guard {\n             CFGuard::Disabled => {}\n             CFGuard::NoChecks => {\n@@ -265,7 +265,7 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n         // linker will take care of everything. Fixing this problem will likely\n         // require adding a few attributes to Rust itself (feature gated at the\n         // start) and then strongly recommending static linkage on Windows!\n-        let use_dll_storage_attrs = tcx.sess.target.options.is_like_windows;\n+        let use_dll_storage_attrs = tcx.sess.target.is_like_windows;\n \n         let check_overflow = tcx.sess.overflow_checks();\n \n@@ -839,7 +839,7 @@ impl CodegenCx<'b, 'tcx> {\n             return eh_catch_typeinfo;\n         }\n         let tcx = self.tcx;\n-        assert!(self.sess().target.options.is_like_emscripten);\n+        assert!(self.sess().target.is_like_emscripten);\n         let eh_catch_typeinfo = match tcx.lang_items().eh_catch_typeinfo() {\n             Some(def_id) => self.get_static(def_id),\n             _ => {"}, {"sha": "38f50a6d621bb0bff399c6e9f7345debcafb870f", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/gdb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -67,5 +67,5 @@ pub fn needs_gdb_debug_scripts_section(cx: &CodegenCx<'_, '_>) -> bool {\n \n     !omit_gdb_pretty_printer_section\n         && cx.sess().opts.debuginfo != DebugInfo::None\n-        && cx.sess().target.options.emit_debug_gdb_scripts\n+        && cx.sess().target.emit_debug_gdb_scripts\n }"}, {"sha": "27b81ebcff67613bf282c4e52cb74dcac4c2ca22", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -870,7 +870,7 @@ fn basic_type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {\n \n     // When targeting MSVC, emit MSVC style type names for compatibility with\n     // .natvis visualizers (and perhaps other existing native debuggers?)\n-    let msvc_like_names = cx.tcx.sess.target.options.is_like_msvc;\n+    let msvc_like_names = cx.tcx.sess.target.is_like_msvc;\n \n     let (name, encoding) = match t.kind() {\n         ty::Never => (\"!\", DW_ATE_unsigned),\n@@ -981,7 +981,7 @@ pub fn compile_unit_metadata(\n     // if multiple object files with the same `DW_AT_name` are linked together.\n     // As a workaround we generate unique names for each object file. Those do\n     // not correspond to an actual source file but that should be harmless.\n-    if tcx.sess.target.options.is_like_osx {\n+    if tcx.sess.target.is_like_osx {\n         name_in_debuginfo.push(\"@\");\n         name_in_debuginfo.push(codegen_unit_name);\n     }\n@@ -1397,7 +1397,7 @@ fn prepare_union_metadata(\n /// on MSVC we have to use the fallback mode, because LLVM doesn't\n /// lower variant parts to PDB.\n fn use_enum_fallback(cx: &CodegenCx<'_, '_>) -> bool {\n-    cx.sess().target.options.is_like_msvc\n+    cx.sess().target.is_like_msvc\n }\n \n // FIXME(eddyb) maybe precompute this? Right now it's computed once"}, {"sha": "5065ff01aed0da0ffdb34afbd886e3fb03e78e07", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -122,12 +122,12 @@ pub fn finalize(cx: &CodegenCx<'_, '_>) {\n         // for macOS to understand. For more info see #11352\n         // This can be overridden using --llvm-opts -dwarf-version,N.\n         // Android has the same issue (#22398)\n-        if let Some(version) = cx.sess().target.options.dwarf_version {\n+        if let Some(version) = cx.sess().target.dwarf_version {\n             llvm::LLVMRustAddModuleFlag(cx.llmod, \"Dwarf Version\\0\".as_ptr().cast(), version)\n         }\n \n         // Indicate that we want CodeView debug information on MSVC\n-        if cx.sess().target.options.is_like_msvc {\n+        if cx.sess().target.is_like_msvc {\n             llvm::LLVMRustAddModuleFlag(cx.llmod, \"CodeView\\0\".as_ptr().cast(), 1)\n         }\n \n@@ -251,7 +251,7 @@ impl CodegenCx<'ll, '_> {\n         // For MSVC, omit the column number.\n         // Otherwise, emit it. This mimics clang behaviour.\n         // See discussion in https://github.com/rust-lang/rust/issues/42921\n-        if self.sess().target.options.is_like_msvc {\n+        if self.sess().target.is_like_msvc {\n             DebugLoc { file, line, col: None }\n         } else {\n             DebugLoc { file, line, col }\n@@ -387,7 +387,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             });\n \n             // Arguments types\n-            if cx.sess().target.options.is_like_msvc {\n+            if cx.sess().target.is_like_msvc {\n                 // FIXME(#42800):\n                 // There is a bug in MSDIA that leads to a crash when it encounters\n                 // a fixed-size array of `u8` or something zero-sized in a"}, {"sha": "0591e0a5c1279c24b93c9530673f68f7881a06c6", "filename": "compiler/rustc_codegen_llvm/src/declare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -42,7 +42,7 @@ fn declare_raw_fn(\n     // be merged.\n     llvm::SetUnnamedAddress(llfn, llvm::UnnamedAddr::Global);\n \n-    if cx.tcx.sess.opts.cg.no_redzone.unwrap_or(cx.tcx.sess.target.options.disable_redzone) {\n+    if cx.tcx.sess.opts.cg.no_redzone.unwrap_or(cx.tcx.sess.target.disable_redzone) {\n         llvm::Attribute::NoRedZone.apply_llfn(Function, llfn);\n     }\n "}, {"sha": "4f999f8b560b542b6b71de9bb54a1c048f24bb1c", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -367,7 +367,7 @@ fn try_intrinsic(\n         bx.store(bx.const_i32(0), dest, ret_align);\n     } else if wants_msvc_seh(bx.sess()) {\n         codegen_msvc_try(bx, try_func, data, catch_func, dest);\n-    } else if bx.sess().target.options.is_like_emscripten {\n+    } else if bx.sess().target.is_like_emscripten {\n         codegen_emcc_try(bx, try_func, data, catch_func, dest);\n     } else {\n         codegen_gnu_try(bx, try_func, data, catch_func, dest);"}, {"sha": "ab70f72dc613f02d93f7f9acf4045c289bc5806b", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -46,7 +46,7 @@ fn require_inited() {\n }\n \n unsafe fn configure_llvm(sess: &Session) {\n-    let n_args = sess.opts.cg.llvm_args.len() + sess.target.options.llvm_args.len();\n+    let n_args = sess.opts.cg.llvm_args.len() + sess.target.llvm_args.len();\n     let mut llvm_c_strs = Vec::with_capacity(n_args + 1);\n     let mut llvm_args = Vec::with_capacity(n_args + 1);\n \n@@ -57,7 +57,7 @@ unsafe fn configure_llvm(sess: &Session) {\n     }\n \n     let cg_opts = sess.opts.cg.llvm_args.iter();\n-    let tg_opts = sess.target.options.llvm_args.iter();\n+    let tg_opts = sess.target.llvm_args.iter();\n     let sess_args = cg_opts.chain(tg_opts);\n \n     let user_specified_args: FxHashSet<_> =\n@@ -84,19 +84,14 @@ unsafe fn configure_llvm(sess: &Session) {\n         if !sess.opts.debugging_opts.no_generate_arange_section {\n             add(\"-generate-arange-section\", false);\n         }\n-        match sess\n-            .opts\n-            .debugging_opts\n-            .merge_functions\n-            .unwrap_or(sess.target.options.merge_functions)\n-        {\n+        match sess.opts.debugging_opts.merge_functions.unwrap_or(sess.target.merge_functions) {\n             MergeFunctions::Disabled | MergeFunctions::Trampolines => {}\n             MergeFunctions::Aliases => {\n                 add(\"-mergefunc-use-aliases\", false);\n             }\n         }\n \n-        if sess.target.target_os == \"emscripten\" && sess.panic_strategy() == PanicStrategy::Unwind {\n+        if sess.target.os == \"emscripten\" && sess.panic_strategy() == PanicStrategy::Unwind {\n             add(\"-enable-emscripten-cxx-exceptions\", false);\n         }\n \n@@ -215,7 +210,7 @@ fn handle_native(name: &str) -> &str {\n pub fn target_cpu(sess: &Session) -> &str {\n     let name = match sess.opts.cg.target_cpu {\n         Some(ref s) => &**s,\n-        None => &*sess.target.options.cpu,\n+        None => &*sess.target.cpu,\n     };\n \n     handle_native(name)"}, {"sha": "3912d6a3a48b65cfb7184ebaf2fb1d579e36eda6", "filename": "compiler/rustc_codegen_llvm/src/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmetadata.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -104,7 +104,7 @@ pub fn metadata_section_name(target: &Target) -> &'static str {\n     // As a result, we choose a slightly shorter name! As to why\n     // `.note.rustc` works on MinGW, that's another good question...\n \n-    if target.options.is_like_osx { \"__DATA,.rustc\" } else { \".rustc\" }\n+    if target.is_like_osx { \"__DATA,.rustc\" } else { \".rustc\" }\n }\n \n fn read_metadata_section_name(_target: &Target) -> &'static str {"}, {"sha": "3fc56eecdd0dab652eb4fdae27afd4b84275d5cc", "filename": "compiler/rustc_codegen_llvm/src/va_arg.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -52,7 +52,7 @@ fn emit_direct_ptr_va_arg(\n     let next = bx.inbounds_gep(addr, &[full_direct_size]);\n     bx.store(next, va_list_addr, bx.tcx().data_layout.pointer_align.abi);\n \n-    if size.bytes() < slot_size.bytes() && &*bx.tcx().sess.target.target_endian == \"big\" {\n+    if size.bytes() < slot_size.bytes() && &*bx.tcx().sess.target.endian == \"big\" {\n         let adjusted_size = bx.cx().const_i32((slot_size.bytes() - size.bytes()) as i32);\n         let adjusted = bx.inbounds_gep(addr, &[adjusted_size]);\n         (bx.bitcast(adjusted, bx.cx().type_ptr_to(llty)), addr_align)\n@@ -105,7 +105,7 @@ fn emit_aapcs_va_arg(\n     let mut end = bx.build_sibling_block(\"va_arg.end\");\n     let zero = bx.const_i32(0);\n     let offset_align = Align::from_bytes(4).unwrap();\n-    assert!(&*bx.tcx().sess.target.target_endian == \"little\");\n+    assert!(&*bx.tcx().sess.target.endian == \"little\");\n \n     let gr_type = target_ty.is_any_ptr() || target_ty.is_integral();\n     let (reg_off, reg_top_index, slot_size) = if gr_type {\n@@ -175,22 +175,22 @@ pub(super) fn emit_va_arg(\n     let arch = &bx.cx.tcx.sess.target.arch;\n     match &**arch {\n         // Windows x86\n-        \"x86\" if target.options.is_like_windows => {\n+        \"x86\" if target.is_like_windows => {\n             emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(4).unwrap(), false)\n         }\n         // Generic x86\n         \"x86\" => emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(4).unwrap(), true),\n         // Windows AArch64\n-        \"aarch64\" if target.options.is_like_windows => {\n+        \"aarch64\" if target.is_like_windows => {\n             emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(8).unwrap(), false)\n         }\n         // macOS / iOS AArch64\n-        \"aarch64\" if target.options.is_like_osx => {\n+        \"aarch64\" if target.is_like_osx => {\n             emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(8).unwrap(), true)\n         }\n         \"aarch64\" => emit_aapcs_va_arg(bx, addr, target_ty),\n         // Windows x86_64\n-        \"x86_64\" if target.options.is_like_windows => {\n+        \"x86_64\" if target.is_like_windows => {\n             let target_ty_size = bx.cx.size_of(target_ty).bytes();\n             let indirect: bool = target_ty_size > 8 || !target_ty_size.is_power_of_two();\n             emit_ptr_va_arg(bx, addr, target_ty, indirect, Align::from_bytes(8).unwrap(), false)"}, {"sha": "c477ac6462acb21420303dcf06eedccb3b3c9ec9", "filename": "compiler/rustc_codegen_ssa/src/back/archive.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -7,10 +7,8 @@ use std::path::{Path, PathBuf};\n pub fn find_library(name: Symbol, search_paths: &[PathBuf], sess: &Session) -> PathBuf {\n     // On Windows, static libraries sometimes show up as libfoo.a and other\n     // times show up as foo.lib\n-    let oslibname = format!(\n-        \"{}{}{}\",\n-        sess.target.options.staticlib_prefix, name, sess.target.options.staticlib_suffix\n-    );\n+    let oslibname =\n+        format!(\"{}{}{}\", sess.target.staticlib_prefix, name, sess.target.staticlib_suffix);\n     let unixlibname = format!(\"lib{}.a\", name);\n \n     for path in search_paths {"}, {"sha": "5a627a0efa364bccb97883da01b2e676acccf000", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 46, "deletions": 50, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -151,9 +151,7 @@ fn get_linker(\n         Some(linker) if cfg!(windows) && linker.ends_with(\".bat\") => Command::bat_script(linker),\n         _ => match flavor {\n             LinkerFlavor::Lld(f) => Command::lld(linker, f),\n-            LinkerFlavor::Msvc\n-                if sess.opts.cg.linker.is_none() && sess.target.options.linker.is_none() =>\n-            {\n+            LinkerFlavor::Msvc if sess.opts.cg.linker.is_none() && sess.target.linker.is_none() => {\n                 Command::new(msvc_tool.as_ref().map(|t| t.path()).unwrap_or(linker))\n             }\n             _ => Command::new(linker),\n@@ -165,7 +163,7 @@ fn get_linker(\n     // MSVC needs to link with the Store versions of the runtime libraries (vcruntime, msvcrt, etc).\n     let t = &sess.target;\n     if (flavor == LinkerFlavor::Msvc || flavor == LinkerFlavor::Lld(LldFlavor::Link))\n-        && t.target_vendor == \"uwp\"\n+        && t.vendor == \"uwp\"\n     {\n         if let Some(ref tool) = msvc_tool {\n             let original_path = tool.path();\n@@ -197,7 +195,7 @@ fn get_linker(\n     // PATH for the child.\n     let mut new_path = sess.host_filesearch(PathKind::All).get_tools_search_paths(self_contained);\n     let mut msvc_changed_path = false;\n-    if sess.target.options.is_like_msvc {\n+    if sess.target.is_like_msvc {\n         if let Some(ref tool) = msvc_tool {\n             cmd.args(tool.args());\n             for &(ref k, ref v) in tool.env() {\n@@ -365,7 +363,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n             // After adding all files to the archive, we need to update the\n             // symbol table of the archive. This currently dies on macOS (see\n             // #11162), and isn't necessary there anyway\n-            if !sess.target.options.is_like_osx {\n+            if !sess.target.is_like_osx {\n                 ab.update_symbols();\n             }\n         }\n@@ -476,10 +474,10 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n \n     linker::disable_localization(&mut cmd);\n \n-    for &(ref k, ref v) in &sess.target.options.link_env {\n+    for &(ref k, ref v) in &sess.target.link_env {\n         cmd.env(k, v);\n     }\n-    for k in &sess.target.options.link_env_remove {\n+    for k in &sess.target.link_env_remove {\n         cmd.env_remove(k);\n     }\n \n@@ -515,7 +513,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         // if the linker doesn't support -no-pie then it should not default to\n         // linking executables as pie. Different versions of gcc seem to use\n         // different quotes in the error message so don't check for them.\n-        if sess.target.options.linker_is_gnu\n+        if sess.target.linker_is_gnu\n             && flavor != LinkerFlavor::Ld\n             && (out.contains(\"unrecognized command line option\")\n                 || out.contains(\"unknown argument\"))\n@@ -535,7 +533,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n \n         // Detect '-static-pie' used with an older version of gcc or clang not supporting it.\n         // Fallback from '-static-pie' to '-static' in that case.\n-        if sess.target.options.linker_is_gnu\n+        if sess.target.linker_is_gnu\n             && flavor != LinkerFlavor::Ld\n             && (out.contains(\"unrecognized command line option\")\n                 || out.contains(\"unknown argument\"))\n@@ -548,7 +546,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n             );\n             // Mirror `add_(pre,post)_link_objects` to replace CRT objects.\n             let self_contained = crt_objects_fallback(sess, crate_type);\n-            let opts = &sess.target.options;\n+            let opts = &sess.target;\n             let pre_objects = if self_contained {\n                 &opts.pre_link_objects_fallback\n             } else {\n@@ -670,7 +668,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n                 // is not a Microsoft LNK error then suggest a way to fix or\n                 // install the Visual Studio build tools.\n                 if let Some(code) = prog.status.code() {\n-                    if sess.target.options.is_like_msvc\n+                    if sess.target.is_like_msvc\n                         && flavor == LinkerFlavor::Msvc\n                         // Respect the command line override\n                         && sess.opts.cg.linker.is_none()\n@@ -741,7 +739,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n \n             linker_error.emit();\n \n-            if sess.target.options.is_like_msvc && linker_not_found {\n+            if sess.target.is_like_msvc && linker_not_found {\n                 sess.note_without_error(\n                     \"the msvc targets depend on the msvc linker \\\n                      but `link.exe` was not found\",\n@@ -758,7 +756,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n     // On macOS, debuggers need this utility to get run to do some munging of\n     // the symbols. Note, though, that if the object files are being preserved\n     // for their debug information there's no need for us to run dsymutil.\n-    if sess.target.options.is_like_osx\n+    if sess.target.is_like_osx\n         && sess.opts.debuginfo != DebugInfo::None\n         && !preserve_objects_for_their_debuginfo(sess)\n     {\n@@ -775,9 +773,7 @@ fn link_sanitizers(sess: &Session, crate_type: CrateType, linker: &mut dyn Linke\n     // executables only.\n     let needs_runtime = match crate_type {\n         CrateType::Executable => true,\n-        CrateType::Dylib | CrateType::Cdylib | CrateType::ProcMacro => {\n-            sess.target.options.is_like_osx\n-        }\n+        CrateType::Dylib | CrateType::Cdylib | CrateType::ProcMacro => sess.target.is_like_osx,\n         CrateType::Rlib | CrateType::Staticlib => false,\n     };\n \n@@ -846,7 +842,7 @@ pub fn ignored_for_lto(sess: &Session, info: &CrateInfo, cnum: CrateNum) -> bool\n     // If our target enables builtin function lowering in LLVM then the\n     // crates providing these functions don't participate in LTO (e.g.\n     // no_builtins or compiler builtins crates).\n-    !sess.target.options.no_builtins\n+    !sess.target.no_builtins\n         && (info.compiler_builtins == Some(cnum) || info.is_no_builtins.contains(&cnum))\n }\n \n@@ -906,7 +902,7 @@ fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                 } else if stem == \"link\" || stem == \"lld-link\" {\n                     LinkerFlavor::Msvc\n                 } else if stem == \"lld\" || stem == \"rust-lld\" {\n-                    LinkerFlavor::Lld(sess.target.options.lld_flavor)\n+                    LinkerFlavor::Lld(sess.target.lld_flavor)\n                 } else {\n                     // fall back to the value in the target spec\n                     sess.target.linker_flavor\n@@ -926,7 +922,7 @@ fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n \n     if let Some(ret) = infer_from(\n         sess,\n-        sess.target.options.linker.clone().map(PathBuf::from),\n+        sess.target.linker.clone().map(PathBuf::from),\n         Some(sess.target.linker_flavor),\n     ) {\n         return ret;\n@@ -962,7 +958,7 @@ fn preserve_objects_for_their_debuginfo(sess: &Session) -> bool {\n     // Basically as a result this just means that if we're on OSX and we're\n     // *not* running dsymutil then the object files are the only source of truth\n     // for debug information, so we must preserve them.\n-    if sess.target.options.is_like_osx {\n+    if sess.target.is_like_osx {\n         return !sess.opts.debugging_opts.run_dsymutil;\n     }\n \n@@ -988,7 +984,7 @@ fn print_native_static_libs(sess: &Session, all_native_libs: &[NativeLib]) {\n                 NativeLibKind::StaticNoBundle\n                 | NativeLibKind::Dylib\n                 | NativeLibKind::Unspecified => {\n-                    if sess.target.options.is_like_msvc {\n+                    if sess.target.is_like_msvc {\n                         Some(format!(\"{}.lib\", name))\n                     } else {\n                         Some(format!(\"-l{}\", name))\n@@ -1070,13 +1066,13 @@ fn exec_linker(\n     let mut args = String::new();\n     for arg in cmd2.take_args() {\n         args.push_str(\n-            &Escape { arg: arg.to_str().unwrap(), is_like_msvc: sess.target.options.is_like_msvc }\n+            &Escape { arg: arg.to_str().unwrap(), is_like_msvc: sess.target.is_like_msvc }\n                 .to_string(),\n         );\n         args.push('\\n');\n     }\n     let file = tmpdir.join(\"linker-arguments\");\n-    let bytes = if sess.target.options.is_like_msvc {\n+    let bytes = if sess.target.is_like_msvc {\n         let mut out = Vec::with_capacity((1 + args.len()) * 2);\n         // start the stream with a UTF-16 BOM\n         for c in std::iter::once(0xFEFF).chain(args.encode_utf16()) {\n@@ -1192,7 +1188,7 @@ fn link_output_kind(sess: &Session, crate_type: CrateType) -> LinkOutputKind {\n     };\n \n     // Adjust the output kind to target capabilities.\n-    let opts = &sess.target.options;\n+    let opts = &sess.target;\n     let pic_exe_supported = opts.position_independent_executables;\n     let static_pic_exe_supported = opts.static_position_independent_executables;\n     let static_dylib_supported = opts.crt_static_allows_dylibs;\n@@ -1233,14 +1229,14 @@ fn crt_objects_fallback(sess: &Session, crate_type: CrateType) -> bool {\n         return self_contained;\n     }\n \n-    match sess.target.options.crt_objects_fallback {\n+    match sess.target.crt_objects_fallback {\n         // FIXME: Find a better heuristic for \"native musl toolchain is available\",\n         // based on host and linker path, for example.\n         // (https://github.com/rust-lang/rust/pull/71769#issuecomment-626330237).\n         Some(CrtObjectsFallback::Musl) => sess.crt_static(Some(crate_type)),\n         Some(CrtObjectsFallback::Mingw) => {\n             sess.host == sess.target\n-                && sess.target.target_vendor != \"uwp\"\n+                && sess.target.vendor != \"uwp\"\n                 && detect_self_contained_mingw(&sess)\n         }\n         // FIXME: Figure out cases in which WASM needs to link with a native toolchain.\n@@ -1256,7 +1252,7 @@ fn add_pre_link_objects(\n     link_output_kind: LinkOutputKind,\n     self_contained: bool,\n ) {\n-    let opts = &sess.target.options;\n+    let opts = &sess.target;\n     let objects =\n         if self_contained { &opts.pre_link_objects_fallback } else { &opts.pre_link_objects };\n     for obj in objects.get(&link_output_kind).iter().copied().flatten() {\n@@ -1271,7 +1267,7 @@ fn add_post_link_objects(\n     link_output_kind: LinkOutputKind,\n     self_contained: bool,\n ) {\n-    let opts = &sess.target.options;\n+    let opts = &sess.target;\n     let objects =\n         if self_contained { &opts.post_link_objects_fallback } else { &opts.post_link_objects };\n     for obj in objects.get(&link_output_kind).iter().copied().flatten() {\n@@ -1282,17 +1278,17 @@ fn add_post_link_objects(\n /// Add arbitrary \"pre-link\" args defined by the target spec or from command line.\n /// FIXME: Determine where exactly these args need to be inserted.\n fn add_pre_link_args(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n-    if let Some(args) = sess.target.options.pre_link_args.get(&flavor) {\n+    if let Some(args) = sess.target.pre_link_args.get(&flavor) {\n         cmd.args(args);\n     }\n     cmd.args(&sess.opts.debugging_opts.pre_link_args);\n }\n \n /// Add a link script embedded in the target, if applicable.\n fn add_link_script(cmd: &mut dyn Linker, sess: &Session, tmpdir: &Path, crate_type: CrateType) {\n-    match (crate_type, &sess.target.options.link_script) {\n+    match (crate_type, &sess.target.link_script) {\n         (CrateType::Cdylib | CrateType::Executable, Some(script)) => {\n-            if !sess.target.options.linker_is_gnu {\n+            if !sess.target.linker_is_gnu {\n                 sess.fatal(\"can only use link script when linking with GNU-like linker\");\n             }\n \n@@ -1335,23 +1331,23 @@ fn add_late_link_args(\n             *ty == crate_type && list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n         });\n     if any_dynamic_crate {\n-        if let Some(args) = sess.target.options.late_link_args_dynamic.get(&flavor) {\n+        if let Some(args) = sess.target.late_link_args_dynamic.get(&flavor) {\n             cmd.args(args);\n         }\n     } else {\n-        if let Some(args) = sess.target.options.late_link_args_static.get(&flavor) {\n+        if let Some(args) = sess.target.late_link_args_static.get(&flavor) {\n             cmd.args(args);\n         }\n     }\n-    if let Some(args) = sess.target.options.late_link_args.get(&flavor) {\n+    if let Some(args) = sess.target.late_link_args.get(&flavor) {\n         cmd.args(args);\n     }\n }\n \n /// Add arbitrary \"post-link\" args defined by the target spec.\n /// FIXME: Determine where exactly these args need to be inserted.\n fn add_post_link_args(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n-    if let Some(args) = sess.target.options.post_link_args.get(&flavor) {\n+    if let Some(args) = sess.target.post_link_args.get(&flavor) {\n         cmd.args(args);\n     }\n }\n@@ -1453,7 +1449,7 @@ fn add_library_search_dirs(cmd: &mut dyn Linker, sess: &Session, self_contained:\n /// Add options making relocation sections in the produced ELF files read-only\n /// and suppressing lazy binding.\n fn add_relro_args(cmd: &mut dyn Linker, sess: &Session) {\n-    match sess.opts.debugging_opts.relro_level.unwrap_or(sess.target.options.relro_level) {\n+    match sess.opts.debugging_opts.relro_level.unwrap_or(sess.target.relro_level) {\n         RelroLevel::Full => cmd.full_relro(),\n         RelroLevel::Partial => cmd.partial_relro(),\n         RelroLevel::Off => cmd.no_relro(),\n@@ -1484,9 +1480,9 @@ fn add_rpath_args(\n         let mut rpath_config = RPathConfig {\n             used_crates: &codegen_results.crate_info.used_crates_dynamic,\n             out_filename: out_filename.to_path_buf(),\n-            has_rpath: sess.target.options.has_rpath,\n-            is_like_osx: sess.target.options.is_like_osx,\n-            linker_is_gnu: sess.target.options.linker_is_gnu,\n+            has_rpath: sess.target.has_rpath,\n+            is_like_osx: sess.target.is_like_osx,\n+            linker_is_gnu: sess.target.linker_is_gnu,\n             get_install_prefix_lib_path: &mut get_install_prefix_lib_path,\n         };\n         cmd.args(&rpath::get_rpath_flags(&mut rpath_config));\n@@ -1514,7 +1510,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     let base_cmd = get_linker(sess, path, flavor, crt_objects_fallback);\n     // FIXME: Move `/LIBPATH` addition for uwp targets from the linker construction\n     // to the linker args construction.\n-    assert!(base_cmd.get_args().is_empty() || sess.target.target_vendor == \"uwp\");\n+    assert!(base_cmd.get_args().is_empty() || sess.target.vendor == \"uwp\");\n     let cmd = &mut *codegen_results.linker_info.to_linker(base_cmd, &sess, flavor, target_cpu);\n     let link_output_kind = link_output_kind(sess, crate_type);\n \n@@ -1528,7 +1524,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     add_link_script(cmd, sess, tmpdir, crate_type);\n \n     // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n-    if sess.target.options.is_like_fuchsia && crate_type == CrateType::Executable {\n+    if sess.target.is_like_fuchsia && crate_type == CrateType::Executable {\n         let prefix = if sess.opts.debugging_opts.sanitizer.contains(SanitizerSet::ADDRESS) {\n             \"asan/\"\n         } else {\n@@ -1538,7 +1534,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     }\n \n     // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n-    if sess.target.options.eh_frame_header {\n+    if sess.target.eh_frame_header {\n         cmd.add_eh_frame_header();\n     }\n \n@@ -1551,7 +1547,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     add_pre_link_objects(cmd, sess, link_output_kind, crt_objects_fallback);\n \n     // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n-    if sess.target.options.is_like_emscripten {\n+    if sess.target.is_like_emscripten {\n         cmd.arg(\"-s\");\n         cmd.arg(if sess.panic_strategy() == PanicStrategy::Abort {\n             \"DISABLE_EXCEPTION_CATCHING=1\"\n@@ -1579,7 +1575,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     cmd.output_filename(out_filename);\n \n     // OBJECT-FILES-NO, AUDIT-ORDER\n-    if crate_type == CrateType::Executable && sess.target.options.is_like_windows {\n+    if crate_type == CrateType::Executable && sess.target.is_like_windows {\n         if let Some(ref s) = codegen_results.windows_subsystem {\n             cmd.subsystem(s);\n         }\n@@ -1623,7 +1619,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // OBJECT-FILES-NO, AUDIT-ORDER\n     // We want to prevent the compiler from accidentally leaking in any system libraries,\n     // so by default we tell linkers not to link to any default libraries.\n-    if !sess.opts.cg.default_linker_libraries && sess.target.options.no_default_libraries {\n+    if !sess.opts.cg.default_linker_libraries && sess.target.no_default_libraries {\n         cmd.no_default_libraries();\n     }\n \n@@ -1843,7 +1839,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n \n     // Converts a library file-stem into a cc -l argument\n     fn unlib<'a>(target: &Target, stem: &'a str) -> &'a str {\n-        if stem.starts_with(\"lib\") && !target.options.is_like_windows { &stem[3..] } else { stem }\n+        if stem.starts_with(\"lib\") && !target.is_like_windows { &stem[3..] } else { stem }\n     }\n \n     // Adds the static \"rlib\" versions of all crates to the command line.\n@@ -1938,7 +1934,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n                 // though, so we let that object file slide.\n                 let skip_because_lto = are_upstream_rust_objects_already_included(sess)\n                     && is_rust_object\n-                    && (sess.target.options.no_builtins\n+                    && (sess.target.no_builtins\n                         || !codegen_results.crate_info.is_no_builtins.contains(&cnum));\n \n                 if skip_because_cfg_say_so || skip_because_lto {\n@@ -2082,9 +2078,9 @@ fn are_upstream_rust_objects_already_included(sess: &Session) -> bool {\n \n fn add_apple_sdk(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n     let arch = &sess.target.arch;\n-    let os = &sess.target.target_os;\n+    let os = &sess.target.os;\n     let llvm_target = &sess.target.llvm_target;\n-    if sess.target.target_vendor != \"apple\"\n+    if sess.target.vendor != \"apple\"\n         || !matches!(os.as_str(), \"ios\" | \"tvos\")\n         || flavor != LinkerFlavor::Gcc\n     {"}, {"sha": "3df956c465e5e17433dce52dbd02e94bd405f1cb", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -184,7 +184,7 @@ impl<'a> GccLinker<'a> {\n         // * On OSX they have their own linker, not binutils'\n         // * For WebAssembly the only functional linker is LLD, which doesn't\n         //   support hint flags\n-        !self.sess.target.options.is_like_osx && self.sess.target.arch != \"wasm32\"\n+        !self.sess.target.is_like_osx && self.sess.target.arch != \"wasm32\"\n     }\n \n     // Some platforms take hints about whether a library is static or dynamic.\n@@ -232,7 +232,7 @@ impl<'a> GccLinker<'a> {\n \n     fn build_dylib(&mut self, out_filename: &Path) {\n         // On mac we need to tell the linker to let this library be rpathed\n-        if self.sess.target.options.is_like_osx {\n+        if self.sess.target.is_like_osx {\n             self.cmd.arg(\"-dynamiclib\");\n             self.linker_arg(\"-dylib\");\n \n@@ -248,17 +248,17 @@ impl<'a> GccLinker<'a> {\n             }\n         } else {\n             self.cmd.arg(\"-shared\");\n-            if self.sess.target.options.is_like_windows {\n+            if self.sess.target.is_like_windows {\n                 // The output filename already contains `dll_suffix` so\n                 // the resulting import library will have a name in the\n                 // form of libfoo.dll.a\n                 let implib_name =\n                     out_filename.file_name().and_then(|file| file.to_str()).map(|file| {\n                         format!(\n                             \"{}{}{}\",\n-                            self.sess.target.options.staticlib_prefix,\n+                            self.sess.target.staticlib_prefix,\n                             file,\n-                            self.sess.target.options.staticlib_suffix\n+                            self.sess.target.staticlib_suffix\n                         )\n                     });\n                 if let Some(implib_name) = implib_name {\n@@ -280,7 +280,7 @@ impl<'a> Linker for GccLinker<'a> {\n     fn set_output_kind(&mut self, output_kind: LinkOutputKind, out_filename: &Path) {\n         match output_kind {\n             LinkOutputKind::DynamicNoPicExe => {\n-                if !self.is_ld && self.sess.target.options.linker_is_gnu {\n+                if !self.is_ld && self.sess.target.linker_is_gnu {\n                     self.cmd.arg(\"-no-pie\");\n                 }\n             }\n@@ -291,7 +291,7 @@ impl<'a> Linker for GccLinker<'a> {\n             LinkOutputKind::StaticNoPicExe => {\n                 // `-static` works for both gcc wrapper and ld.\n                 self.cmd.arg(\"-static\");\n-                if !self.is_ld && self.sess.target.options.linker_is_gnu {\n+                if !self.is_ld && self.sess.target.linker_is_gnu {\n                     self.cmd.arg(\"-no-pie\");\n                 }\n             }\n@@ -320,7 +320,7 @@ impl<'a> Linker for GccLinker<'a> {\n         // any `#[link]` attributes in the `libc` crate, see #72782 for details.\n         // FIXME: Switch to using `#[link]` attributes in the `libc` crate\n         // similarly to other targets.\n-        if self.sess.target.target_os == \"vxworks\"\n+        if self.sess.target.os == \"vxworks\"\n             && matches!(\n                 output_kind,\n                 LinkOutputKind::StaticNoPicExe\n@@ -386,7 +386,7 @@ impl<'a> Linker for GccLinker<'a> {\n     fn link_whole_staticlib(&mut self, lib: Symbol, search_path: &[PathBuf]) {\n         self.hint_static();\n         let target = &self.sess.target;\n-        if !target.options.is_like_osx {\n+        if !target.is_like_osx {\n             self.linker_arg(\"--whole-archive\").cmd.arg(format!(\"-l{}\", lib));\n             self.linker_arg(\"--no-whole-archive\");\n         } else {\n@@ -400,7 +400,7 @@ impl<'a> Linker for GccLinker<'a> {\n \n     fn link_whole_rlib(&mut self, lib: &Path) {\n         self.hint_static();\n-        if self.sess.target.options.is_like_osx {\n+        if self.sess.target.is_like_osx {\n             self.linker_arg(\"-force_load\");\n             self.linker_arg(&lib);\n         } else {\n@@ -424,9 +424,9 @@ impl<'a> Linker for GccLinker<'a> {\n         // -dead_strip can't be part of the pre_link_args because it's also used\n         // for partial linking when using multiple codegen units (-r).  So we\n         // insert it here.\n-        if self.sess.target.options.is_like_osx {\n+        if self.sess.target.is_like_osx {\n             self.linker_arg(\"-dead_strip\");\n-        } else if self.sess.target.options.is_like_solaris {\n+        } else if self.sess.target.is_like_solaris {\n             self.linker_arg(\"-zignore\");\n \n         // If we're building a dylib, we don't use --gc-sections because LLVM\n@@ -440,7 +440,7 @@ impl<'a> Linker for GccLinker<'a> {\n     }\n \n     fn optimize(&mut self) {\n-        if !self.sess.target.options.linker_is_gnu {\n+        if !self.sess.target.linker_is_gnu {\n             return;\n         }\n \n@@ -454,7 +454,7 @@ impl<'a> Linker for GccLinker<'a> {\n     }\n \n     fn pgo_gen(&mut self) {\n-        if !self.sess.target.options.linker_is_gnu {\n+        if !self.sess.target.linker_is_gnu {\n             return;\n         }\n \n@@ -503,8 +503,7 @@ impl<'a> Linker for GccLinker<'a> {\n \n     fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType) {\n         // Symbol visibility in object files typically takes care of this.\n-        if crate_type == CrateType::Executable\n-            && self.sess.target.options.override_export_symbols.is_none()\n+        if crate_type == CrateType::Executable && self.sess.target.override_export_symbols.is_none()\n         {\n             return;\n         }\n@@ -513,21 +512,21 @@ impl<'a> Linker for GccLinker<'a> {\n         // The object files have far more public symbols than we actually want to export,\n         // so we hide them all here.\n \n-        if !self.sess.target.options.limit_rdylib_exports {\n+        if !self.sess.target.limit_rdylib_exports {\n             return;\n         }\n \n         if crate_type == CrateType::ProcMacro {\n             return;\n         }\n \n-        let is_windows = self.sess.target.options.is_like_windows;\n+        let is_windows = self.sess.target.is_like_windows;\n         let mut arg = OsString::new();\n         let path = tmpdir.join(if is_windows { \"list.def\" } else { \"list\" });\n \n         debug!(\"EXPORTED SYMBOLS:\");\n \n-        if self.sess.target.options.is_like_osx {\n+        if self.sess.target.is_like_osx {\n             // Write a plain, newline-separated list of symbols\n             let res: io::Result<()> = try {\n                 let mut f = BufWriter::new(File::create(&path)?);\n@@ -573,12 +572,12 @@ impl<'a> Linker for GccLinker<'a> {\n             }\n         }\n \n-        if self.sess.target.options.is_like_osx {\n+        if self.sess.target.is_like_osx {\n             if !self.is_ld {\n                 arg.push(\"-Wl,\")\n             }\n             arg.push(\"-exported_symbols_list,\");\n-        } else if self.sess.target.options.is_like_solaris {\n+        } else if self.sess.target.is_like_solaris {\n             if !self.is_ld {\n                 arg.push(\"-Wl,\")\n             }\n@@ -1203,7 +1202,7 @@ impl<'a> Linker for WasmLd<'a> {\n }\n \n fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<String> {\n-    if let Some(ref exports) = tcx.sess.target.options.override_export_symbols {\n+    if let Some(ref exports) = tcx.sess.target.override_export_symbols {\n         return exports.clone();\n     }\n \n@@ -1293,7 +1292,7 @@ impl<'a> Linker for PtxLinker<'a> {\n         // Provide the linker with fallback to internal `target-cpu`.\n         self.cmd.arg(\"--fallback-arch\").arg(match self.sess.opts.cg.target_cpu {\n             Some(ref s) => s,\n-            None => &self.sess.target.options.cpu,\n+            None => &self.sess.target.cpu,\n         });\n     }\n "}, {"sha": "9a6f8cde1b25d737d9721bfb5f325c842d25380c", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -229,8 +229,7 @@ fn exported_symbols_provider_local(\n         // needs to be exported.\n         // However, on platforms that don't allow for Rust dylibs, having\n         // external linkage is enough for monomorphization to be linked to.\n-        let need_visibility =\n-            tcx.sess.target.options.dynamic_linking && !tcx.sess.target.options.only_cdylib;\n+        let need_visibility = tcx.sess.target.dynamic_linking && !tcx.sess.target.only_cdylib;\n \n         let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n "}, {"sha": "b34bee3358b40615403b29b7dcb2243ed71ba1ef", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -139,7 +139,7 @@ impl ModuleConfig {\n \n         let emit_obj = if !should_emit_obj {\n             EmitObj::None\n-        } else if sess.target.options.obj_is_bitcode\n+        } else if sess.target.obj_is_bitcode\n             || (sess.opts.cg.linker_plugin_lto.enabled() && !no_builtins)\n         {\n             // This case is selected if the target uses objects as bitcode, or\n@@ -221,11 +221,11 @@ impl ModuleConfig {\n                 false\n             ),\n             emit_obj,\n-            bc_cmdline: sess.target.options.bitcode_llvm_cmdline.clone(),\n+            bc_cmdline: sess.target.bitcode_llvm_cmdline.clone(),\n \n             verify_llvm_ir: sess.verify_llvm_ir(),\n             no_prepopulate_passes: sess.opts.cg.no_prepopulate_passes,\n-            no_builtins: no_builtins || sess.target.options.no_builtins,\n+            no_builtins: no_builtins || sess.target.no_builtins,\n \n             // Exclude metadata and allocator modules from time_passes output,\n             // since they throw off the \"LLVM passes\" measurement.\n@@ -252,7 +252,7 @@ impl ModuleConfig {\n                 .opts\n                 .debugging_opts\n                 .merge_functions\n-                .unwrap_or(sess.target.options.merge_functions)\n+                .unwrap_or(sess.target.merge_functions)\n             {\n                 MergeFunctions::Disabled => false,\n                 MergeFunctions::Trampolines | MergeFunctions::Aliases => {\n@@ -388,7 +388,7 @@ fn need_bitcode_in_object(sess: &Session) -> bool {\n     let requested_for_rlib = sess.opts.cg.embed_bitcode\n         && sess.crate_types().contains(&CrateType::Rlib)\n         && sess.opts.output_types.contains_key(&OutputType::Exe);\n-    let forced_by_target = sess.target.options.forces_embed_bitcode;\n+    let forced_by_target = sess.target.forces_embed_bitcode;\n     requested_for_rlib || forced_by_target\n }\n \n@@ -1865,11 +1865,11 @@ fn msvc_imps_needed(tcx: TyCtxt<'_>) -> bool {\n     // something is wrong with commandline arg validation.\n     assert!(\n         !(tcx.sess.opts.cg.linker_plugin_lto.enabled()\n-            && tcx.sess.target.options.is_like_windows\n+            && tcx.sess.target.is_like_windows\n             && tcx.sess.opts.cg.prefer_dynamic)\n     );\n \n-    tcx.sess.target.options.is_like_windows &&\n+    tcx.sess.target.is_like_windows &&\n         tcx.sess.crate_types().iter().any(|ct| *ct == CrateType::Rlib) &&\n     // ThinLTO can't handle this workaround in all cases, so we don't\n     // emit the `__imp_` symbols. Instead we make them unnecessary by disallowing"}, {"sha": "5fe26dbf914022eec3a58f8543e9547fcf255418", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -326,7 +326,7 @@ fn cast_shift_rhs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n /// currently uses SEH-ish unwinding with DWARF info tables to the side (same as\n /// 64-bit MinGW) instead of \"full SEH\".\n pub fn wants_msvc_seh(sess: &Session) -> bool {\n-    sess.target.options.is_like_msvc\n+    sess.target.is_like_msvc\n }\n \n pub fn memcpy_ty<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n@@ -387,7 +387,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     ) -> Bx::Function {\n         // The entry function is either `int main(void)` or `int main(int argc, char **argv)`,\n         // depending on whether the target needs `argc` and `argv` to be passed in.\n-        let llfty = if cx.sess().target.options.main_needs_argc_argv {\n+        let llfty = if cx.sess().target.main_needs_argc_argv {\n             cx.type_func(&[cx.type_int(), cx.type_ptr_to(cx.type_i8p())], cx.type_int())\n         } else {\n             cx.type_func(&[], cx.type_int())\n@@ -459,7 +459,7 @@ fn get_argc_argv<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     cx: &'a Bx::CodegenCx,\n     bx: &mut Bx,\n ) -> (Bx::Value, Bx::Value) {\n-    if cx.sess().target.options.main_needs_argc_argv {\n+    if cx.sess().target.main_needs_argc_argv {\n         // Params from native `main()` used as args for rust start function\n         let param_argc = bx.get_param(0);\n         let param_argv = bx.get_param(1);"}, {"sha": "0b49a37907014b44c2760fe9d46b2662a1df4e58", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -33,7 +33,7 @@ pub fn push_debuginfo_type_name<'tcx>(\n ) {\n     // When targeting MSVC, emit C++ style type names for compatibility with\n     // .natvis visualizers (and perhaps other existing native debuggers?)\n-    let cpp_like_names = tcx.sess.target.options.is_like_msvc;\n+    let cpp_like_names = tcx.sess.target.is_like_msvc;\n \n     match *t.kind() {\n         ty::Bool => output.push_str(\"bool\"),"}, {"sha": "634a20bda9bfd96aaa4d18aa68a01cb7a7187cd7", "filename": "compiler/rustc_codegen_ssa/src/traits/type_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -51,11 +51,11 @@ pub trait DerivedTypeMethods<'tcx>: BaseTypeMethods<'tcx> + MiscMethods<'tcx> {\n     }\n \n     fn type_int(&self) -> Self::Type {\n-        match &self.sess().target.target_c_int_width[..] {\n+        match &self.sess().target.c_int_width[..] {\n             \"16\" => self.type_i16(),\n             \"32\" => self.type_i32(),\n             \"64\" => self.type_i64(),\n-            width => bug!(\"Unsupported target_c_int_width: {}\", width),\n+            width => bug!(\"Unsupported c_int_width: {}\", width),\n         }\n     }\n "}, {"sha": "59786059fae675d6001101bfc036b8ff8b3e999a", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 79, "deletions": 33, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -102,43 +102,89 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             None => String::new(),\n         };\n \n-        let (span_1, span_2, main_label, span_label) = match (sup_is_ret_type, sub_is_ret_type) {\n-            (None, None) => {\n-                let (main_label_1, span_label_1) = if ty_sup.hir_id == ty_sub.hir_id {\n+        let (span_1, span_2, main_label, span_label, future_return_type) =\n+            match (sup_is_ret_type, sub_is_ret_type) {\n+                (None, None) => {\n+                    let (main_label_1, span_label_1) = if ty_sup.hir_id == ty_sub.hir_id {\n+                        (\n+                            \"this type is declared with multiple lifetimes...\".to_owned(),\n+                            \"...but data with one lifetime flows into the other here\".to_owned(),\n+                        )\n+                    } else {\n+                        (\n+                            \"these two types are declared with different lifetimes...\".to_owned(),\n+                            format!(\"...but data{} flows{} here\", span_label_var1, span_label_var2),\n+                        )\n+                    };\n+                    (ty_sup.span, ty_sub.span, main_label_1, span_label_1, None)\n+                }\n+\n+                (Some(ret_span), _) => {\n+                    let sup_future = self.future_return_type(scope_def_id_sup);\n+                    let (return_type, action) = if let Some(_) = sup_future {\n+                        (\"returned future\", \"held across an await point\")\n+                    } else {\n+                        (\"return type\", \"returned\")\n+                    };\n+\n                     (\n-                        \"this type is declared with multiple lifetimes...\".to_owned(),\n-                        \"...but data with one lifetime flows into the other here\".to_owned(),\n+                        ty_sub.span,\n+                        ret_span,\n+                        format!(\n+                            \"this parameter and the {} are declared with different lifetimes...\",\n+                            return_type\n+                        ),\n+                        format!(\"...but data{} is {} here\", span_label_var1, action),\n+                        sup_future,\n                     )\n-                } else {\n+                }\n+                (_, Some(ret_span)) => {\n+                    let sub_future = self.future_return_type(scope_def_id_sub);\n+                    let (return_type, action) = if let Some(_) = sub_future {\n+                        (\"returned future\", \"held across an await point\")\n+                    } else {\n+                        (\"return type\", \"returned\")\n+                    };\n+\n                     (\n-                        \"these two types are declared with different lifetimes...\".to_owned(),\n-                        format!(\"...but data{} flows{} here\", span_label_var1, span_label_var2),\n+                        ty_sup.span,\n+                        ret_span,\n+                        format!(\n+                            \"this parameter and the {} are declared with different lifetimes...\",\n+                            return_type\n+                        ),\n+                        format!(\"...but data{} is {} here\", span_label_var1, action),\n+                        sub_future,\n                     )\n-                };\n-                (ty_sup.span, ty_sub.span, main_label_1, span_label_1)\n-            }\n-\n-            (Some(ret_span), _) => (\n-                ty_sub.span,\n-                ret_span,\n-                \"this parameter and the return type are declared with different lifetimes...\"\n-                    .to_owned(),\n-                format!(\"...but data{} is returned here\", span_label_var1),\n-            ),\n-            (_, Some(ret_span)) => (\n-                ty_sup.span,\n-                ret_span,\n-                \"this parameter and the return type are declared with different lifetimes...\"\n-                    .to_owned(),\n-                format!(\"...but data{} is returned here\", span_label_var1),\n-            ),\n-        };\n-\n-        struct_span_err!(self.tcx().sess, span, E0623, \"lifetime mismatch\")\n-            .span_label(span_1, main_label)\n-            .span_label(span_2, String::new())\n-            .span_label(span, span_label)\n-            .emit();\n+                }\n+            };\n+\n+        let mut e = struct_span_err!(self.tcx().sess, span, E0623, \"lifetime mismatch\");\n+\n+        e.span_label(span_1, main_label);\n+        e.span_label(span_2, String::new());\n+        e.span_label(span, span_label);\n+\n+        if let Some(t) = future_return_type {\n+            let snip = self\n+                .tcx()\n+                .sess\n+                .source_map()\n+                .span_to_snippet(t.span)\n+                .ok()\n+                .and_then(|s| match (&t.kind, s.as_str()) {\n+                    (rustc_hir::TyKind::Tup(&[]), \"\") => Some(\"()\".to_string()),\n+                    (_, \"\") => None,\n+                    _ => Some(s),\n+                })\n+                .unwrap_or(\"{unnamed_type}\".to_string());\n+\n+            e.span_label(\n+                t.span,\n+                &format!(\"this `async fn` implicitly returns an `impl Future<Output = {}>`\", snip),\n+            );\n+        }\n+        e.emit();\n         Some(ErrorReported)\n     }\n }"}, {"sha": "ca93b2777ab2aaf0931d068dd060e34098c4f931", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -85,6 +85,60 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         })\n     }\n \n+    pub(super) fn future_return_type(\n+        &self,\n+        local_def_id: LocalDefId,\n+    ) -> Option<&rustc_hir::Ty<'_>> {\n+        if let Some(hir::IsAsync::Async) = self.asyncness(local_def_id) {\n+            if let rustc_middle::ty::Opaque(def_id, _) =\n+                self.tcx().type_of(local_def_id).fn_sig(self.tcx()).output().skip_binder().kind()\n+            {\n+                match self.tcx().hir().get_if_local(*def_id) {\n+                    Some(hir::Node::Item(hir::Item {\n+                        kind:\n+                            hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n+                                bounds,\n+                                origin: hir::OpaqueTyOrigin::AsyncFn,\n+                                ..\n+                            }),\n+                        ..\n+                    })) => {\n+                        for b in bounds.iter() {\n+                            if let hir::GenericBound::LangItemTrait(\n+                                hir::LangItem::Future,\n+                                _span,\n+                                _hir_id,\n+                                generic_args,\n+                            ) = b\n+                            {\n+                                for type_binding in generic_args.bindings.iter() {\n+                                    if type_binding.ident.name == rustc_span::sym::Output {\n+                                        if let hir::TypeBindingKind::Equality { ty } =\n+                                            type_binding.kind\n+                                        {\n+                                            return Some(ty);\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n+        }\n+        None\n+    }\n+\n+    pub(super) fn asyncness(&self, local_def_id: LocalDefId) -> Option<hir::IsAsync> {\n+        // similar to the asyncness fn in rustc_ty::ty\n+        let hir_id = self.tcx().hir().local_def_id_to_hir_id(local_def_id);\n+        let node = self.tcx().hir().get(hir_id);\n+        let fn_like = rustc_middle::hir::map::blocks::FnLikeNode::from_node(node)?;\n+\n+        Some(fn_like.asyncness())\n+    }\n+\n     // Here, we check for the case where the anonymous region\n     // is in the return type.\n     // FIXME(#42703) - Need to handle certain cases here."}, {"sha": "c3afc9f048cf56309fb702f92a21f99f8dc3a9a1", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -127,7 +127,7 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n         if ty == CrateType::Staticlib\n             || (ty == CrateType::Executable\n                 && sess.crt_static(Some(ty))\n-                && !sess.target.options.crt_static_allows_dylibs)\n+                && !sess.target.crt_static_allows_dylibs)\n         {\n             for &cnum in tcx.crates().iter() {\n                 if tcx.dep_kind(cnum).macros_only() {"}, {"sha": "c4c025de8b3c4b99cdd0664f5f44668c1466b1ef", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -373,11 +373,10 @@ impl<'a> CrateLocator<'a> {\n         seen_paths: &mut FxHashSet<PathBuf>,\n     ) -> Result<Option<Library>, CrateError> {\n         // want: crate_name.dir_part() + prefix + crate_name.file_part + \"-\"\n-        let dylib_prefix =\n-            format!(\"{}{}{}\", self.target.options.dll_prefix, self.crate_name, extra_prefix);\n+        let dylib_prefix = format!(\"{}{}{}\", self.target.dll_prefix, self.crate_name, extra_prefix);\n         let rlib_prefix = format!(\"lib{}{}\", self.crate_name, extra_prefix);\n         let staticlib_prefix =\n-            format!(\"{}{}{}\", self.target.options.staticlib_prefix, self.crate_name, extra_prefix);\n+            format!(\"{}{}{}\", self.target.staticlib_prefix, self.crate_name, extra_prefix);\n \n         let mut candidates: FxHashMap<_, (FxHashMap<_, _>, FxHashMap<_, _>, FxHashMap<_, _>)> =\n             Default::default();\n@@ -405,17 +404,14 @@ impl<'a> CrateLocator<'a> {\n                 (&file[(rlib_prefix.len())..(file.len() - \".rlib\".len())], CrateFlavor::Rlib)\n             } else if file.starts_with(&rlib_prefix) && file.ends_with(\".rmeta\") {\n                 (&file[(rlib_prefix.len())..(file.len() - \".rmeta\".len())], CrateFlavor::Rmeta)\n-            } else if file.starts_with(&dylib_prefix)\n-                && file.ends_with(&self.target.options.dll_suffix)\n-            {\n+            } else if file.starts_with(&dylib_prefix) && file.ends_with(&self.target.dll_suffix) {\n                 (\n-                    &file\n-                        [(dylib_prefix.len())..(file.len() - self.target.options.dll_suffix.len())],\n+                    &file[(dylib_prefix.len())..(file.len() - self.target.dll_suffix.len())],\n                     CrateFlavor::Dylib,\n                 )\n             } else {\n                 if file.starts_with(&staticlib_prefix)\n-                    && file.ends_with(&self.target.options.staticlib_suffix)\n+                    && file.ends_with(&self.target.staticlib_suffix)\n                 {\n                     staticlibs\n                         .push(CrateMismatch { path: spf.path.clone(), got: \"static\".to_string() });\n@@ -679,8 +675,8 @@ impl<'a> CrateLocator<'a> {\n             };\n \n             if file.starts_with(\"lib\") && (file.ends_with(\".rlib\") || file.ends_with(\".rmeta\"))\n-                || file.starts_with(&self.target.options.dll_prefix)\n-                    && file.ends_with(&self.target.options.dll_suffix)\n+                || file.starts_with(&self.target.dll_prefix)\n+                    && file.ends_with(&self.target.dll_suffix)\n             {\n                 // Make sure there's at most one rlib and at most one dylib.\n                 // Note to take care and match against the non-canonicalized name:\n@@ -712,8 +708,8 @@ impl<'a> CrateLocator<'a> {\n             crate_name: self.crate_name,\n             root: self.root.cloned(),\n             triple: self.triple,\n-            dll_prefix: self.target.options.dll_prefix.clone(),\n-            dll_suffix: self.target.options.dll_suffix.clone(),\n+            dll_prefix: self.target.dll_prefix.clone(),\n+            dll_suffix: self.target.dll_suffix.clone(),\n             rejected_via_hash: self.rejected_via_hash,\n             rejected_via_triple: self.rejected_via_triple,\n             rejected_via_kind: self.rejected_via_kind,"}, {"sha": "2f7c2c2c405192397eb978ae4512016716d36c33", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -149,7 +149,7 @@ impl Collector<'tcx> {\n             }\n             return;\n         }\n-        let is_osx = self.tcx.sess.target.options.is_like_osx;\n+        let is_osx = self.tcx.sess.target.is_like_osx;\n         if lib.kind == NativeLibKind::Framework && !is_osx {\n             let msg = \"native frameworks are only available on macOS targets\";\n             match span {"}, {"sha": "63e95f25bb7f36c872304d9e1dc43f01f794be6e", "filename": "compiler/rustc_middle/src/ty/consts/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -168,7 +168,7 @@ impl ScalarInt {\n     #[inline(always)]\n     fn check_data(self) {\n         // Using a block `{self.data}` here to force a copy instead of using `self.data`\n-        // directly, because `assert_eq` takes references to its arguments and formatting\n+        // directly, because `debug_assert_eq` takes references to its arguments and formatting\n         // arguments and would thus borrow `self.data`. Since `Self`\n         // is a packed struct, that would create a possibly unaligned reference, which\n         // is UB."}, {"sha": "1e93c3650b890088b34a904ad3812c24bae75d62", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2601,15 +2601,14 @@ where\n         };\n \n         let target = &cx.tcx().sess.target;\n-        let target_env_gnu_like = matches!(&target.target_env[..], \"gnu\" | \"musl\");\n-        let win_x64_gnu =\n-            target.target_os == \"windows\" && target.arch == \"x86_64\" && target.target_env == \"gnu\";\n+        let target_env_gnu_like = matches!(&target.env[..], \"gnu\" | \"musl\");\n+        let win_x64_gnu = target.os == \"windows\" && target.arch == \"x86_64\" && target.env == \"gnu\";\n         let linux_s390x_gnu_like =\n-            target.target_os == \"linux\" && target.arch == \"s390x\" && target_env_gnu_like;\n+            target.os == \"linux\" && target.arch == \"s390x\" && target_env_gnu_like;\n         let linux_sparc64_gnu_like =\n-            target.target_os == \"linux\" && target.arch == \"sparc64\" && target_env_gnu_like;\n+            target.os == \"linux\" && target.arch == \"sparc64\" && target_env_gnu_like;\n         let linux_powerpc_gnu_like =\n-            target.target_os == \"linux\" && target.arch == \"powerpc\" && target_env_gnu_like;\n+            target.os == \"linux\" && target.arch == \"powerpc\" && target_env_gnu_like;\n         let rust_abi = matches!(sig.abi, RustIntrinsic | PlatformIntrinsic | Rust | RustCall);\n \n         // Handle safe Rust thin and fat pointers.\n@@ -2775,7 +2774,7 @@ where\n                     // anyway, we control all calls to it in libstd.\n                     Abi::Vector { .. }\n                         if abi != SpecAbi::PlatformIntrinsic\n-                            && cx.tcx().sess.target.options.simd_types_indirect =>\n+                            && cx.tcx().sess.target.simd_types_indirect =>\n                     {\n                         arg.make_indirect();\n                         return;"}, {"sha": "3f9f558223bb00dabc2d89860953553237da139e", "filename": "compiler/rustc_mir/src/dataflow/framework/engine.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -208,12 +208,19 @@ where\n             }\n         }\n \n+        // `state` is not actually used between iterations;\n+        // this is just an optimization to avoid reallocating\n+        // every iteration.\n         let mut state = analysis.bottom_value(body);\n         while let Some(bb) = dirty_queue.pop() {\n             let bb_data = &body[bb];\n \n-            // Apply the block transfer function, using the cached one if it exists.\n+            // Set the state to the entry state of the block.\n+            // This is equivalent to `state = entry_sets[bb].clone()`,\n+            // but it saves an allocation, thus improving compile times.\n             state.clone_from(&entry_sets[bb]);\n+\n+            // Apply the block transfer function, using the cached one if it exists.\n             match &apply_trans_for_block {\n                 Some(apply) => apply(bb, &mut state),\n                 None => A::Direction::apply_effects_in_block(&analysis, &mut state, bb, bb_data),"}, {"sha": "037b80e4bf2bb541e019907c32a668a6a1f80f97", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -532,7 +532,7 @@ fn mono_item_visibility(\n }\n \n fn default_visibility(tcx: TyCtxt<'_>, id: DefId, is_generic: bool) -> Visibility {\n-    if !tcx.sess.target.options.default_hidden_visibility {\n+    if !tcx.sess.target.default_hidden_visibility {\n         return Visibility::Default;\n     }\n "}, {"sha": "bb17df8dd0bd0b9a21200ac4405c177a4401da88", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -729,6 +729,12 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n     }\n \n     fn visit_place(&mut self, place: &mut Place<'tcx>, context: PlaceContext, location: Location) {\n+        for elem in place.projection {\n+            // FIXME: Make sure that return place is not used in an indexing projection, since it\n+            // won't be rebased as it is supposed to be.\n+            assert_ne!(ProjectionElem::Index(RETURN_PLACE), elem);\n+        }\n+\n         // If this is the `RETURN_PLACE`, we need to rebase any projections onto it.\n         let dest_proj_len = self.destination.projection.len();\n         if place.local == RETURN_PLACE && dest_proj_len > 0 {"}, {"sha": "4273d60000454164b684574ed160f22090a2c053", "filename": "compiler/rustc_passes/src/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -26,7 +26,7 @@ pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>, items: &mut lang_items::LanguageItem\n     if items.eh_personality().is_none() {\n         items.missing.push(LangItem::EhPersonality);\n     }\n-    if tcx.sess.target.options.is_like_emscripten && items.eh_catch_typeinfo().is_none() {\n+    if tcx.sess.target.is_like_emscripten && items.eh_catch_typeinfo().is_none() {\n         items.missing.push(LangItem::EhCatchTypeinfo);\n     }\n "}, {"sha": "876873393700f6960c4db9e16cbef89e6ce885a6", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -735,15 +735,15 @@ pub const fn default_lib_output() -> CrateType {\n }\n \n pub fn default_configuration(sess: &Session) -> CrateConfig {\n-    let end = &sess.target.target_endian;\n+    let end = &sess.target.endian;\n     let arch = &sess.target.arch;\n     let wordsz = sess.target.pointer_width.to_string();\n-    let os = &sess.target.target_os;\n-    let env = &sess.target.target_env;\n-    let vendor = &sess.target.target_vendor;\n+    let os = &sess.target.os;\n+    let env = &sess.target.env;\n+    let vendor = &sess.target.vendor;\n     let min_atomic_width = sess.target.min_atomic_width();\n     let max_atomic_width = sess.target.max_atomic_width();\n-    let atomic_cas = sess.target.options.atomic_cas;\n+    let atomic_cas = sess.target.atomic_cas;\n     let layout = TargetDataLayout::parse(&sess.target).unwrap_or_else(|err| {\n         sess.fatal(&err);\n     });\n@@ -752,7 +752,7 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n     ret.reserve(6); // the minimum number of insertions\n     // Target bindings.\n     ret.insert((sym::target_os, Some(Symbol::intern(os))));\n-    if let Some(ref fam) = sess.target.options.target_family {\n+    if let Some(ref fam) = sess.target.os_family {\n         ret.insert((sym::target_family, Some(Symbol::intern(fam))));\n         if fam == \"windows\" {\n             ret.insert((sym::windows, None));\n@@ -765,7 +765,7 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n     ret.insert((sym::target_pointer_width, Some(Symbol::intern(&wordsz))));\n     ret.insert((sym::target_env, Some(Symbol::intern(env))));\n     ret.insert((sym::target_vendor, Some(Symbol::intern(vendor))));\n-    if sess.target.options.has_elf_tls {\n+    if sess.target.has_elf_tls {\n         ret.insert((sym::target_thread_local, None));\n     }\n     for &(i, align) in &["}, {"sha": "777eea3f68d02bf8def1da207bd4e1b41d7960b1", "filename": "compiler/rustc_session/src/output.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foutput.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -150,17 +150,15 @@ pub fn filename_for_input(\n     match crate_type {\n         CrateType::Rlib => outputs.out_directory.join(&format!(\"lib{}.rlib\", libname)),\n         CrateType::Cdylib | CrateType::ProcMacro | CrateType::Dylib => {\n-            let (prefix, suffix) =\n-                (&sess.target.options.dll_prefix, &sess.target.options.dll_suffix);\n+            let (prefix, suffix) = (&sess.target.dll_prefix, &sess.target.dll_suffix);\n             outputs.out_directory.join(&format!(\"{}{}{}\", prefix, libname, suffix))\n         }\n         CrateType::Staticlib => {\n-            let (prefix, suffix) =\n-                (&sess.target.options.staticlib_prefix, &sess.target.options.staticlib_suffix);\n+            let (prefix, suffix) = (&sess.target.staticlib_prefix, &sess.target.staticlib_suffix);\n             outputs.out_directory.join(&format!(\"{}{}{}\", prefix, libname, suffix))\n         }\n         CrateType::Executable => {\n-            let suffix = &sess.target.options.exe_suffix;\n+            let suffix = &sess.target.exe_suffix;\n             let out_filename = outputs.path(OutputType::Exe);\n             if suffix.is_empty() { out_filename } else { out_filename.with_extension(&suffix[1..]) }\n         }\n@@ -177,29 +175,29 @@ pub fn filename_for_input(\n /// interaction with Rust code through static library is the only\n /// option for now\n pub fn default_output_for_target(sess: &Session) -> CrateType {\n-    if !sess.target.options.executables { CrateType::Staticlib } else { CrateType::Executable }\n+    if !sess.target.executables { CrateType::Staticlib } else { CrateType::Executable }\n }\n \n /// Checks if target supports crate_type as output\n pub fn invalid_output_for_target(sess: &Session, crate_type: CrateType) -> bool {\n     match crate_type {\n         CrateType::Cdylib | CrateType::Dylib | CrateType::ProcMacro => {\n-            if !sess.target.options.dynamic_linking {\n+            if !sess.target.dynamic_linking {\n                 return true;\n             }\n-            if sess.crt_static(Some(crate_type)) && !sess.target.options.crt_static_allows_dylibs {\n+            if sess.crt_static(Some(crate_type)) && !sess.target.crt_static_allows_dylibs {\n                 return true;\n             }\n         }\n         _ => {}\n     }\n-    if sess.target.options.only_cdylib {\n+    if sess.target.only_cdylib {\n         match crate_type {\n             CrateType::ProcMacro | CrateType::Dylib => return true,\n             _ => {}\n         }\n     }\n-    if !sess.target.options.executables && crate_type == CrateType::Executable {\n+    if !sess.target.executables && crate_type == CrateType::Executable {\n         return true;\n     }\n "}, {"sha": "d0aa280978976f3be31ea242a66d11c440f52bfa", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -663,7 +663,7 @@ impl Session {\n     /// Calculates the flavor of LTO to use for this compilation.\n     pub fn lto(&self) -> config::Lto {\n         // If our target has codegen requirements ignore the command line\n-        if self.target.options.requires_lto {\n+        if self.target.requires_lto {\n             return config::Lto::Fat;\n         }\n \n@@ -731,7 +731,7 @@ impl Session {\n     /// Returns the panic strategy for this compile session. If the user explicitly selected one\n     /// using '-C panic', use that, otherwise use the panic strategy defined by the target.\n     pub fn panic_strategy(&self) -> PanicStrategy {\n-        self.opts.cg.panic.unwrap_or(self.target.options.panic_strategy)\n+        self.opts.cg.panic.unwrap_or(self.target.panic_strategy)\n     }\n     pub fn fewer_names(&self) -> bool {\n         let more_names = self.opts.output_types.contains_key(&OutputType::LlvmAssembly)\n@@ -755,9 +755,9 @@ impl Session {\n \n     /// Check whether this compile session and crate type use static crt.\n     pub fn crt_static(&self, crate_type: Option<CrateType>) -> bool {\n-        if !self.target.options.crt_static_respected {\n+        if !self.target.crt_static_respected {\n             // If the target does not opt in to crt-static support, use its default.\n-            return self.target.options.crt_static_default;\n+            return self.target.crt_static_default;\n         }\n \n         let requested_features = self.opts.cg.target_feature.split(',');\n@@ -774,20 +774,20 @@ impl Session {\n             // We can't check `#![crate_type = \"proc-macro\"]` here.\n             false\n         } else {\n-            self.target.options.crt_static_default\n+            self.target.crt_static_default\n         }\n     }\n \n     pub fn relocation_model(&self) -> RelocModel {\n-        self.opts.cg.relocation_model.unwrap_or(self.target.options.relocation_model)\n+        self.opts.cg.relocation_model.unwrap_or(self.target.relocation_model)\n     }\n \n     pub fn code_model(&self) -> Option<CodeModel> {\n-        self.opts.cg.code_model.or(self.target.options.code_model)\n+        self.opts.cg.code_model.or(self.target.code_model)\n     }\n \n     pub fn tls_model(&self) -> TlsModel {\n-        self.opts.debugging_opts.tls_model.unwrap_or(self.target.options.tls_model)\n+        self.opts.debugging_opts.tls_model.unwrap_or(self.target.tls_model)\n     }\n \n     pub fn must_not_eliminate_frame_pointers(&self) -> bool {\n@@ -798,7 +798,7 @@ impl Session {\n         } else if let Some(x) = self.opts.cg.force_frame_pointers {\n             x\n         } else {\n-            !self.target.options.eliminate_frame_pointer\n+            !self.target.eliminate_frame_pointer\n         }\n     }\n \n@@ -822,7 +822,7 @@ impl Session {\n         // value, if it is provided, or disable them, if not.\n         if self.panic_strategy() == PanicStrategy::Unwind {\n             true\n-        } else if self.target.options.requires_uwtable {\n+        } else if self.target.requires_uwtable {\n             true\n         } else {\n             self.opts.cg.force_unwind_tables.unwrap_or(false)\n@@ -993,7 +993,7 @@ impl Session {\n         if let Some(n) = self.opts.cli_forced_codegen_units {\n             return n;\n         }\n-        if let Some(n) = self.target.options.default_codegen_units {\n+        if let Some(n) = self.target.default_codegen_units {\n             return n as usize;\n         }\n \n@@ -1078,11 +1078,11 @@ impl Session {\n     pub fn needs_plt(&self) -> bool {\n         // Check if the current target usually needs PLT to be enabled.\n         // The user can use the command line flag to override it.\n-        let needs_plt = self.target.options.needs_plt;\n+        let needs_plt = self.target.needs_plt;\n \n         let dbg_opts = &self.opts.debugging_opts;\n \n-        let relro_level = dbg_opts.relro_level.unwrap_or(self.target.options.relro_level);\n+        let relro_level = dbg_opts.relro_level.unwrap_or(self.target.relro_level);\n \n         // Only enable this optimization by default if full relro is also enabled.\n         // In this case, lazy binding was already unavailable, so nothing is lost.\n@@ -1106,7 +1106,7 @@ impl Session {\n         match self.opts.cg.link_dead_code {\n             Some(explicitly_set) => explicitly_set,\n             None => {\n-                self.opts.debugging_opts.instrument_coverage && !self.target.options.is_like_msvc\n+                self.opts.debugging_opts.instrument_coverage && !self.target.is_like_msvc\n                 // Issue #76038: (rustc `-Clink-dead-code` causes MSVC linker to produce invalid\n                 // binaries when LLVM InstrProf counters are enabled). As described by this issue,\n                 // the \"link dead code\" option produces incorrect binaries when compiled and linked\n@@ -1307,7 +1307,7 @@ pub fn build_session(\n \n     let loader = file_loader.unwrap_or(Box::new(RealFileLoader));\n     let hash_kind = sopts.debugging_opts.src_hash_algorithm.unwrap_or_else(|| {\n-        if target_cfg.options.is_like_msvc {\n+        if target_cfg.is_like_msvc {\n             SourceFileHashAlgorithm::Sha1\n         } else {\n             SourceFileHashAlgorithm::Md5\n@@ -1417,11 +1417,8 @@ pub fn build_session(\n         if candidate.join(\"library/std/src/lib.rs\").is_file() { Some(candidate) } else { None }\n     };\n \n-    let asm_arch = if target_cfg.options.allow_asm {\n-        InlineAsmArch::from_str(&target_cfg.arch).ok()\n-    } else {\n-        None\n-    };\n+    let asm_arch =\n+        if target_cfg.allow_asm { InlineAsmArch::from_str(&target_cfg.arch).ok() } else { None };\n \n     let sess = Session {\n         target: target_cfg,\n@@ -1487,7 +1484,7 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     // the `dllimport` attributes and `__imp_` symbols in that case.\n     if sess.opts.cg.linker_plugin_lto.enabled()\n         && sess.opts.cg.prefer_dynamic\n-        && sess.target.options.is_like_windows\n+        && sess.target.is_like_windows\n     {\n         sess.err(\n             \"Linker plugin based LTO is not supported together with \\\n@@ -1515,7 +1512,7 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n             );\n         }\n \n-        if sess.target.options.requires_uwtable && !include_uwtables {\n+        if sess.target.requires_uwtable && !include_uwtables {\n             sess.err(\n                 \"target requires unwind tables, they cannot be disabled with \\\n                      `-C force-unwind-tables=no`.\",\n@@ -1530,7 +1527,7 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     // We should only display this error if we're actually going to run PGO.\n     // If we're just supposed to print out some data, don't show the error (#61002).\n     if sess.opts.cg.profile_generate.enabled()\n-        && sess.target.options.is_like_msvc\n+        && sess.target.is_like_msvc\n         && sess.panic_strategy() == PanicStrategy::Unwind\n         && sess.opts.prints.iter().all(|&p| p == PrintRequest::NativeStaticLibs)\n     {"}, {"sha": "429a3375cd893f4f729fbfe37404510aac5d2807", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -562,7 +562,7 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n             \"x86_64\" => {\n                 if abi == spec::abi::Abi::SysV64 {\n                     x86_64::compute_abi_info(cx, self);\n-                } else if abi == spec::abi::Abi::Win64 || cx.target_spec().options.is_like_windows {\n+                } else if abi == spec::abi::Abi::Win64 || cx.target_spec().is_like_windows {\n                     x86_win64::compute_abi_info(self);\n                 } else {\n                     x86_64::compute_abi_info(cx, self);\n@@ -584,7 +584,7 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n             \"nvptx64\" => nvptx64::compute_abi_info(self),\n             \"hexagon\" => hexagon::compute_abi_info(self),\n             \"riscv32\" | \"riscv64\" => riscv::compute_abi_info(cx, self),\n-            \"wasm32\" if cx.target_spec().target_os != \"emscripten\" => {\n+            \"wasm32\" if cx.target_spec().os != \"emscripten\" => {\n                 wasm32_bindgen_compat::compute_abi_info(self)\n             }\n             \"wasm32\" | \"asmjs\" => wasm32::compute_abi_info(cx, self),"}, {"sha": "8c2a9d09a3d9a8d27eb8be29d82fc3197471ebb5", "filename": "compiler/rustc_target/src/abi/call/powerpc64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fpowerpc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fpowerpc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fpowerpc64.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -119,7 +119,7 @@ where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n     C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout + HasTargetSpec,\n {\n-    let abi = if cx.target_spec().target_env == \"musl\" {\n+    let abi = if cx.target_spec().env == \"musl\" {\n         ELFv2\n     } else {\n         match cx.data_layout().endian {"}, {"sha": "782c661c31fdb5b9f7aa0d1bcdf7443baf3ffe3f", "filename": "compiler/rustc_target/src/abi/call/riscv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -323,7 +323,7 @@ where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n     C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout + HasTargetSpec,\n {\n-    let flen = match &cx.target_spec().options.llvm_abiname[..] {\n+    let flen = match &cx.target_spec().llvm_abiname[..] {\n         \"ilp32f\" | \"lp64f\" => 32,\n         \"ilp32d\" | \"lp64d\" => 64,\n         _ => 0,"}, {"sha": "07bf1e94c617eee072e45bd3982fcc4bc3e34573", "filename": "compiler/rustc_target/src/abi/call/x86.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -41,10 +41,10 @@ where\n             // http://www.angelcode.com/dev/callconv/callconv.html\n             // Clang's ABI handling is in lib/CodeGen/TargetInfo.cpp\n             let t = cx.target_spec();\n-            if t.options.abi_return_struct_as_int {\n+            if t.abi_return_struct_as_int {\n                 // According to Clang, everyone but MSVC returns single-element\n                 // float aggregates directly in a floating-point register.\n-                if !t.options.is_like_msvc && is_single_fp_element(cx, fn_abi.ret.layout) {\n+                if !t.is_like_msvc && is_single_fp_element(cx, fn_abi.ret.layout) {\n                     match fn_abi.ret.layout.size.bytes() {\n                         4 => fn_abi.ret.cast_to(Reg::f32()),\n                         8 => fn_abi.ret.cast_to(Reg::f64()),"}, {"sha": "a43080b09e9a172d8344dbac4071f3323a6b74aa", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -156,11 +156,11 @@ impl TargetDataLayout {\n             Endian::Little => \"little\",\n             Endian::Big => \"big\",\n         };\n-        if endian_str != target.target_endian {\n+        if endian_str != target.endian {\n             return Err(format!(\n                 \"inconsistent target specification: \\\"data-layout\\\" claims \\\n                                 architecture is {}-endian, while \\\"target-endian\\\" is `{}`\",\n-                endian_str, target.target_endian\n+                endian_str, target.endian\n             ));\n         }\n "}, {"sha": "28000916e0c30a50c7927734948f5302824b5756", "filename": "compiler/rustc_target/src/asm/arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -61,7 +61,7 @@ impl ArmInlineAsmRegClass {\n \n // This uses the same logic as useR7AsFramePointer in LLVM\n fn frame_pointer_is_r7(mut has_feature: impl FnMut(&str) -> bool, target: &Target) -> bool {\n-    target.options.is_like_osx || (!target.options.is_like_windows && has_feature(\"thumb-mode\"))\n+    target.is_like_osx || (!target.is_like_windows && has_feature(\"thumb-mode\"))\n }\n \n fn frame_pointer_r11("}, {"sha": "7de809f76222db6aafbfa5e5217951ca9b3b9f3b", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -19,6 +19,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: arch.to_string(),\n-        options: TargetOptions { target_mcount: \"\\u{1}mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"\\u{1}mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "cc9338ff970e144187d47c12a0d6881e806a6509", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n         arch: \"aarch64\".to_string(),\n         options: TargetOptions {\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}_mcount\".to_string(),\n+            mcount: \"\\u{1}_mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "7bbfc8ec0f7b058c7192b566f0b3168d23d4aa25", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n         arch: \"aarch64\".to_string(),\n         options: TargetOptions {\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}_mcount\".to_string(),\n+            mcount: \"\\u{1}_mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "09efbdbb293fea00055eacd0407cffa73488626f", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_netbsd.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -10,6 +10,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        options: TargetOptions { target_mcount: \"__mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"__mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "d0ad45153d677decb2f7049f83cb2ad4241f550a", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -10,7 +10,7 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n-        target_vendor: String::new(),\n+        vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+strict-align,+neon,+fp-armv8\".to_string(),"}, {"sha": "41bd2182905c942a9b75abb22672bd945eaa4334", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_none_softfloat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_none_softfloat.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -10,7 +10,7 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n-        target_vendor: String::new(),\n+        vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+strict-align,-neon,-fp-armv8\".to_string(),"}, {"sha": "7b9f546c25a5c2de339b0774eb70d912a637c6f5", "filename": "compiler/rustc_target/src/spec/android_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fandroid_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2,7 +2,7 @@ use crate::spec::{LinkerFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut base = super::linux_base::opts();\n-    base.target_os = \"android\".to_string();\n+    base.os = \"android\".to_string();\n     // Many of the symbols defined in compiler-rt are also defined in libgcc.\n     // Android's linker doesn't like that by default.\n     base.pre_link_args"}, {"sha": "e271a6dec40d239027e4d95fcd581d9c972c010b", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -17,13 +17,13 @@ pub fn opts(os: &str) -> TargetOptions {\n     let version = macos_deployment_target();\n \n     TargetOptions {\n-        target_os: os.to_string(),\n-        target_vendor: \"apple\".to_string(),\n+        os: os.to_string(),\n+        vendor: \"apple\".to_string(),\n         // macOS has -dead_strip, which doesn't rely on function_sections\n         function_sections: false,\n         dynamic_linking: true,\n         executables: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         is_like_osx: true,\n         dwarf_version: Some(2),\n         has_rpath: true,"}, {"sha": "17b6fb21e09bfbbc39dd735a71aaeb61e5d8fdf4", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabi.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -12,7 +12,7 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             features: \"+strict-align,+v6\".to_string(),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "227709f0b0b58afe2ad069e51071df3a7c585255", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_gnueabihf.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -12,7 +12,7 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             features: \"+strict-align,+v6,+vfp2,-d32\".to_string(),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "53ff1001c204d68fd395667fcca762f671d9c1fc", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabi.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}mcount\".to_string(),\n+            mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "6d8a5f9f88bbbd8339ffcbbbfa9cc5cacd2f2e6f", "filename": "compiler/rustc_target/src/spec/arm_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_unknown_linux_musleabihf.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n         options: TargetOptions {\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}mcount\".to_string(),\n+            mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "36856305723711fcf7b8967579f5fbc5edf78a17", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabi.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,8 +11,8 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_vendor: String::new(),\n+            endian: \"big\".to_string(),\n+            vendor: String::new(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),"}, {"sha": "2ff3c8950c4837d38ff04221a7c49926774f5784", "filename": "compiler/rustc_target/src/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmebv7r_none_eabihf.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,8 +11,8 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_vendor: String::new(),\n+            endian: \"big\".to_string(),\n+            vendor: String::new(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),"}, {"sha": "7808437453caf5c826b7856bf9821cd4d4cfc515", "filename": "compiler/rustc_target/src/spec/armv4t_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -13,7 +13,7 @@ pub fn target() -> Target {\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             has_thumb_interworking: true,\n             ..base\n         },"}, {"sha": "d958354f5843eb9a267160d1048d147238b9b324", "filename": "compiler/rustc_target/src/spec/armv5te_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -13,7 +13,7 @@ pub fn target() -> Target {\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             has_thumb_interworking: true,\n             ..base\n         },"}, {"sha": "40d405c30a2bd13a69f6ba3ecc4a1ea95d73376c", "filename": "compiler/rustc_target/src/spec/armv5te_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv5te_unknown_linux_musleabi.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> Target {\n             // Atomic operations provided by compiler-builtins\n             max_atomic_width: Some(32),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}mcount\".to_string(),\n+            mcount: \"\\u{1}mcount\".to_string(),\n             has_thumb_interworking: true,\n             ..base\n         },"}, {"sha": "a149bd983b71b2f89b272dee22c8547783705f13", "filename": "compiler/rustc_target/src/spec/armv6_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_freebsd.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -9,11 +9,11 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n-            target_env: \"gnueabihf\".to_string(),\n+            env: \"gnueabihf\".to_string(),\n             features: \"+v6,+vfp2,-d32\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "6c81a458b9b1bdac2bdce8bb371f35101fa0bf9e", "filename": "compiler/rustc_target/src/spec/armv6_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -10,10 +10,10 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n-            target_env: \"eabihf\".to_string(),\n+            env: \"eabihf\".to_string(),\n             features: \"+v6,+vfp2,-d32\".to_string(),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"__mcount\".to_string(),\n+            mcount: \"__mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "d47ee541b25bab4dca5d2385c3cd7bf2c6a75763", "filename": "compiler/rustc_target/src/spec/armv7_unknown_cloudabi_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -13,6 +13,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n-        options: TargetOptions { target_mcount: \"\\u{1}mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"\\u{1}mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "6f24c6818fcd0c0df6d93ab4a1b035891b3a22a2", "filename": "compiler/rustc_target/src/spec/armv7_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_freebsd.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -9,11 +9,11 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n-            target_env: \"gnueabihf\".to_string(),\n+            env: \"gnueabihf\".to_string(),\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "13798e869b7f5ee3728e0486e5a06989b7c4eb47", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabi.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -16,7 +16,7 @@ pub fn target() -> Target {\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "f80f56ee3c580cd055d67b7907775c9761f8332b", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> Target {\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n+            mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "9f9f1bd79b0c176083d930e546a6421ee0aa5ed8", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabi.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -21,7 +21,7 @@ pub fn target() -> Target {\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}mcount\".to_string(),\n+            mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "59deee30ef260cd19e2db09355471624d2252dc0", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_musleabihf.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -20,7 +20,7 @@ pub fn target() -> Target {\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}mcount\".to_string(),\n+            mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "660525704c1b019a4644c92546074726d7499c02", "filename": "compiler/rustc_target/src/spec/armv7_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -9,12 +9,12 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n-            target_env: \"eabihf\".to_string(),\n+            env: \"eabihf\".to_string(),\n             features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"__mcount\".to_string(),\n+            mcount: \"__mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "742b403cff90cbfc09d9ae0108ce42bb9c0d7b75", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabi.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabi.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -10,8 +10,8 @@\n // bare-metal binaries (the `gcc` linker has the advantage that it knows where C\n // libraries and crt*.o are but it's not much of an advantage here); LLD is also\n // faster\n-// - `target_os` set to `none`. rationale: matches `thumb` targets\n-// - `target_{env,vendor}` set to an empty string. rationale: matches `thumb`\n+// - `os` set to `none`. rationale: matches `thumb` targets\n+// - `env` and `vendor` are set to an empty string. rationale: matches `thumb`\n // targets\n // - `panic_strategy` set to `abort`. rationale: matches `thumb` targets\n // - `relocation-model` set to `static`; also no PIE, no relro and no dynamic\n@@ -21,7 +21,7 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n-        target_vendor: String::new(),\n+        vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+v7,+thumb2,+soft-float,-neon,+strict-align\".to_string(),"}, {"sha": "b9cda18d6b46f4ec533025e0198f5d7da758a6d6", "filename": "compiler/rustc_target/src/spec/armv7a_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7a_none_eabihf.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -9,7 +9,7 @@ use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOp\n \n pub fn target() -> Target {\n     let opts = TargetOptions {\n-        target_vendor: String::new(),\n+        vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+v7,+vfp3,-d32,+thumb2,-neon,+strict-align\".to_string(),"}, {"sha": "440c2434907beaecefe5a8adace15367c692a258", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabi.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n-            target_vendor: String::new(),\n+            vendor: String::new(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),"}, {"sha": "c1bf332a72ddfbd6132fc8ecb8f8d83f51f64651", "filename": "compiler/rustc_target/src/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7r_none_eabihf.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n         arch: \"arm\".to_string(),\n \n         options: TargetOptions {\n-            target_vendor: String::new(),\n+            vendor: String::new(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),"}, {"sha": "b1adefe1a51e70406c13a92e18e967500af0e0c7", "filename": "compiler/rustc_target/src/spec/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -3,7 +3,6 @@ use super::{wasm32_unknown_emscripten, LinkerFlavor, Target};\n pub fn target() -> Target {\n     let mut target = wasm32_unknown_emscripten::target();\n     target\n-        .options\n         .post_link_args\n         .entry(LinkerFlavor::Em)\n         .or_default()"}, {"sha": "9cc10032c71dad12cc0d2497573fce47c9d66755", "filename": "compiler/rustc_target/src/spec/avr_gnu_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -10,8 +10,8 @@ pub fn target(target_cpu: String) -> Target {\n         llvm_target: \"avr-unknown-unknown\".to_string(),\n         pointer_width: 16,\n         options: TargetOptions {\n-            target_c_int_width: \"16\".to_string(),\n-            target_os: \"unknown\".to_string(),\n+            c_int_width: \"16\".to_string(),\n+            os: \"unknown\".to_string(),\n             cpu: target_cpu.clone(),\n             exe_suffix: \".elf\".to_string(),\n "}, {"sha": "20a095742ecf573ed24cb08bf719f9ed8c4ce806", "filename": "compiler/rustc_target/src/spec/cloudabi_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcloudabi_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcloudabi_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fcloudabi_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -12,9 +12,9 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"cloudabi\".to_string(),\n+        os: \"cloudabi\".to_string(),\n         executables: true,\n-        target_family: None,\n+        os_family: None,\n         linker_is_gnu: true,\n         pre_link_args: args,\n         position_independent_executables: true,"}, {"sha": "b96de7ab1ed19b2ca4b6b95836f59dea48cabe6a", "filename": "compiler/rustc_target/src/spec/dragonfly_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -16,10 +16,10 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"dragonfly\".to_string(),\n+        os: \"dragonfly\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n         pre_link_args: args,"}, {"sha": "c70c492716b30e1a09324570a2e4a9cd9dffeb6c", "filename": "compiler/rustc_target/src/spec/freebsd_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -16,10 +16,10 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"freebsd\".to_string(),\n+        os: \"freebsd\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n         pre_link_args: args,"}, {"sha": "e467c7c8f21e9989c6fab7b59792a3a71efaf70e", "filename": "compiler/rustc_target/src/spec/fuchsia_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -20,14 +20,14 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"fuchsia\".to_string(),\n-        target_vendor: String::new(),\n+        os: \"fuchsia\".to_string(),\n+        vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         lld_flavor: LldFlavor::Ld,\n         dynamic_linking: true,\n         executables: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         is_like_fuchsia: true,\n         linker_is_gnu: true,\n         has_rpath: false,"}, {"sha": "ec87645c4faaa1d40f88d615c5f0999c6106d83c", "filename": "compiler/rustc_target/src/spec/haiku_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2,11 +2,11 @@ use crate::spec::{RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n-        target_os: \"haiku\".to_string(),\n+        os: \"haiku\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: false,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         relro_level: RelroLevel::Full,\n         linker_is_gnu: true,\n         ..Default::default()"}, {"sha": "a75158a0ea0cb7ab91ca4164407b261fa9ab4f46", "filename": "compiler/rustc_target/src/spec/hermit_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -9,7 +9,7 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"hermit\".to_string(),\n+        os: \"hermit\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         linker: Some(\"rust-lld\".to_owned()),\n         executables: true,\n@@ -20,7 +20,7 @@ pub fn opts() -> TargetOptions {\n         position_independent_executables: true,\n         static_position_independent_executables: true,\n         relocation_model: RelocModel::Pic,\n-        target_family: None,\n+        os_family: None,\n         tls_model: TlsModel::InitialExec,\n         ..Default::default()\n     }"}, {"sha": "622f0d9a471982319542bee3ba132ba5554359ae", "filename": "compiler/rustc_target/src/spec/hermit_kernel_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_kernel_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -9,7 +9,7 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"hermit\".to_string(),\n+        os: \"hermit\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         disable_redzone: true,\n         linker: Some(\"rust-lld\".to_owned()),\n@@ -21,7 +21,7 @@ pub fn opts() -> TargetOptions {\n         position_independent_executables: true,\n         static_position_independent_executables: true,\n         relocation_model: RelocModel::Pic,\n-        target_family: None,\n+        os_family: None,\n         tls_model: TlsModel::InitialExec,\n         ..Default::default()\n     }"}, {"sha": "4a7779a6df0836b80fb3646b5b83915ac739a625", "filename": "compiler/rustc_target/src/spec/i586_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_pc_windows_msvc.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2,7 +2,7 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::i686_pc_windows_msvc::target();\n-    base.options.cpu = \"pentium\".to_string();\n+    base.cpu = \"pentium\".to_string();\n     base.llvm_target = \"i586-pc-windows-msvc\".to_string();\n     base\n }"}, {"sha": "7c92dda8a9df75d7e138dcbb80ae93d08ac53828", "filename": "compiler/rustc_target/src/spec/i586_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_gnu.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2,7 +2,7 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::i686_unknown_linux_gnu::target();\n-    base.options.cpu = \"pentium\".to_string();\n+    base.cpu = \"pentium\".to_string();\n     base.llvm_target = \"i586-unknown-linux-gnu\".to_string();\n     base\n }"}, {"sha": "1fea02bbee88f3de36913f05438887f89db4ecf8", "filename": "compiler/rustc_target/src/spec/i586_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_musl.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2,7 +2,7 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::i686_unknown_linux_musl::target();\n-    base.options.cpu = \"pentium\".to_string();\n+    base.cpu = \"pentium\".to_string();\n     base.llvm_target = \"i586-unknown-linux-musl\".to_string();\n     base\n }"}, {"sha": "0ab40340928cc5d991b3d9593dd634be2a006932", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -22,6 +22,6 @@ pub fn target() -> Target {\n             f64:32:64-f80:128-n8:16:32-S128\"\n             .to_string(),\n         arch: \"x86\".to_string(),\n-        options: TargetOptions { target_mcount: \"\\u{1}mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"\\u{1}mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "c22139b5875d6f5d7322f0dbd9ef0a5958deab37", "filename": "compiler/rustc_target/src/spec/i686_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -14,6 +14,6 @@ pub fn target() -> Target {\n             f64:32:64-f80:32-n8:16:32-S128\"\n             .to_string(),\n         arch: \"x86\".to_string(),\n-        options: TargetOptions { target_mcount: \"__mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"__mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "d9b5716c0418528202a5bcda0d48e8b8262370f2", "filename": "compiler/rustc_target/src/spec/illumos_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -16,11 +16,11 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"illumos\".to_string(),\n+        os: \"illumos\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         is_like_solaris: true,\n         limit_rdylib_exports: false, // Linker doesn't support this\n         eliminate_frame_pointer: false,"}, {"sha": "660fae5f5c7cd5675a08f16c71ddf6c2ab583324", "filename": "compiler/rustc_target/src/spec/l4re_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -17,15 +17,15 @@ pub fn opts() -> TargetOptions {\n     args.insert(LinkerFlavor::Gcc, vec![]);\n \n     TargetOptions {\n-        target_os: \"l4re\".to_string(),\n-        target_env: \"uclibc\".to_string(),\n+        os: \"l4re\".to_string(),\n+        env: \"uclibc\".to_string(),\n         linker_flavor: LinkerFlavor::Ld,\n         executables: true,\n         has_elf_tls: false,\n         panic_strategy: PanicStrategy::Abort,\n         linker: Some(\"ld\".to_string()),\n         pre_link_args: args,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         ..Default::default()\n     }\n }"}, {"sha": "a83cceb24ee9ff8cac556b5a17dd13cbf583fb15", "filename": "compiler/rustc_target/src/spec/linux_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -19,11 +19,11 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"linux\".to_string(),\n-        target_env: \"gnu\".to_string(),\n+        os: \"linux\".to_string(),\n+        env: \"gnu\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n         pre_link_args: args,"}, {"sha": "a5fc1649e7ffdd7d28d64e1a55d9ba0b0530b9bc", "filename": "compiler/rustc_target/src/spec/linux_kernel_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_kernel_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -8,7 +8,7 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_env: \"gnu\".to_string(),\n+        env: \"gnu\".to_string(),\n         disable_redzone: true,\n         panic_strategy: PanicStrategy::Abort,\n         stack_probes: true,"}, {"sha": "5038a967d0a0fac243fda72e0fa9d1e7a51a4d58", "filename": "compiler/rustc_target/src/spec/linux_musl_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_musl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_musl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_musl_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -4,7 +4,7 @@ use crate::spec::TargetOptions;\n pub fn opts() -> TargetOptions {\n     let mut base = super::linux_base::opts();\n \n-    base.target_env = \"musl\".to_string();\n+    base.env = \"musl\".to_string();\n     base.pre_link_objects_fallback = crt_objects::pre_musl_fallback();\n     base.post_link_objects_fallback = crt_objects::post_musl_fallback();\n     base.crt_objects_fallback = Some(CrtObjectsFallback::Musl);"}, {"sha": "ef6d50656e467c5f06fe2ea5f009eb3188043500", "filename": "compiler/rustc_target/src/spec/linux_uclibc_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_uclibc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_uclibc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_uclibc_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -1,5 +1,5 @@\n use crate::spec::TargetOptions;\n \n pub fn opts() -> TargetOptions {\n-    TargetOptions { target_env: \"uclibc\".to_string(), ..super::linux_base::opts() }\n+    TargetOptions { env: \"uclibc\".to_string(), ..super::linux_base::opts() }\n }"}, {"sha": "593be2549fd460b35d9646f4dfb453ee32939280", "filename": "compiler/rustc_target/src/spec/mips64_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -7,12 +7,12 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n+            endian: \"big\".to_string(),\n             // NOTE(mips64r2) matches C toolchain\n             cpu: \"mips64r2\".to_string(),\n             features: \"+mips64r2\".to_string(),\n             max_atomic_width: Some(64),\n-            target_mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "db8d0c04e6f5c269e8d3d75376aadd31eab7bfcb", "filename": "compiler/rustc_target/src/spec/mips64_unknown_linux_muslabi64.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64_unknown_linux_muslabi64.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,10 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n-        options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "eed8a56d86a4c3dff9b9984d014bcea68a47c22d", "filename": "compiler/rustc_target/src/spec/mips64el_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n             cpu: \"mips64r2\".to_string(),\n             features: \"+mips64r2\".to_string(),\n             max_atomic_width: Some(64),\n-            target_mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "766ed69df4bb8444ecb6ec8b4bedbcaa1ed0275b", "filename": "compiler/rustc_target/src/spec/mips64el_unknown_linux_muslabi64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_muslabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_muslabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips64el_unknown_linux_muslabi64.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,6 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n-        options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "b746ac351d711cea9c820223f002004900ac6b22", "filename": "compiler/rustc_target/src/spec/mips_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_gnu.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -7,11 +7,11 @@ pub fn target() -> Target {\n         data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n+            endian: \"big\".to_string(),\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+fpxx,+nooddspreg\".to_string(),\n             max_atomic_width: Some(32),\n-            target_mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "1ebe577bc1c4ac0e7bd446a2247cf8dc49d4e6dd", "filename": "compiler/rustc_target/src/spec/mips_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_musl.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,10 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n-        options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "2123d5e1a0f78cff55bf020168075940618fa9c8", "filename": "compiler/rustc_target/src/spec/mips_unknown_linux_uclibc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmips_unknown_linux_uclibc.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -7,11 +7,11 @@ pub fn target() -> Target {\n         data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n+            endian: \"big\".to_string(),\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+soft-float\".to_string(),\n             max_atomic_width: Some(32),\n-            target_mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".to_string(),\n \n             ..super::linux_uclibc_base::opts()\n         },"}, {"sha": "08c290e6ff151233c05b1c8acaf667f180c977bd", "filename": "compiler/rustc_target/src/spec/mipsel_sony_psp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -15,8 +15,8 @@ pub fn target() -> Target {\n         arch: \"mips\".to_string(),\n \n         options: TargetOptions {\n-            target_os: \"psp\".to_string(),\n-            target_vendor: \"sony\".to_string(),\n+            os: \"psp\".to_string(),\n+            vendor: \"sony\".to_string(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             cpu: \"mips2\".to_string(),\n             executables: true,"}, {"sha": "e0f8350ee88e3e897179ec09a295b586beaec8f1", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_gnu.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+fpxx,+nooddspreg\".to_string(),\n             max_atomic_width: Some(32),\n-            target_mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "3374cdd44858572224b05857c6febc0255b9e4b4", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_musl.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,6 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n-        options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "0831eb7a0a7d468773792011a7e75e3a133df257", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_linux_uclibc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_linux_uclibc.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+soft-float\".to_string(),\n             max_atomic_width: Some(32),\n-            target_mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".to_string(),\n \n             ..super::linux_uclibc_base::opts()\n         },"}, {"sha": "a8005927a7bebd4bb037718ec318889ba7cfdbfb", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -14,7 +14,7 @@ pub fn target() -> Target {\n         arch: \"mips\".to_string(),\n \n         options: TargetOptions {\n-            target_vendor: String::new(),\n+            vendor: String::new(),\n             linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n             cpu: \"mips32r2\".to_string(),\n             features: \"+mips32r2,+soft-float,+noabicalls\".to_string(),"}, {"sha": "9a649ec52a276d513c69ed653fce261d4a818000", "filename": "compiler/rustc_target/src/spec/mipsisa32r6_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6_unknown_linux_gnu.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -7,11 +7,11 @@ pub fn target() -> Target {\n         data_layout: \"E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64\".to_string(),\n         arch: \"mips\".to_string(),\n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n+            endian: \"big\".to_string(),\n             cpu: \"mips32r6\".to_string(),\n             features: \"+mips32r6\".to_string(),\n             max_atomic_width: Some(32),\n-            target_mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "20fbefe6f2e8d33a9170fc8456713fe19851c052", "filename": "compiler/rustc_target/src/spec/mipsisa32r6el_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6el_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6el_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa32r6el_unknown_linux_gnu.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n             cpu: \"mips32r6\".to_string(),\n             features: \"+mips32r6\".to_string(),\n             max_atomic_width: Some(32),\n-            target_mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "a5da3e5d42c4bf329898b5ed47e17ec51550f0e3", "filename": "compiler/rustc_target/src/spec/mipsisa64r6_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6_unknown_linux_gnuabi64.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -7,12 +7,12 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"mips64\".to_string(),\n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n+            endian: \"big\".to_string(),\n             // NOTE(mips64r6) matches C toolchain\n             cpu: \"mips64r6\".to_string(),\n             features: \"+mips64r6\".to_string(),\n             max_atomic_width: Some(64),\n-            target_mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "73fbbaed4d5b9c272cf1d8b767068fd8b9472175", "filename": "compiler/rustc_target/src/spec/mipsisa64r6el_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsisa64r6el_unknown_linux_gnuabi64.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> Target {\n             cpu: \"mips64r6\".to_string(),\n             features: \"+mips64r6\".to_string(),\n             max_atomic_width: Some(64),\n-            target_mcount: \"_mcount\".to_string(),\n+            mcount: \"_mcount\".to_string(),\n \n             ..super::linux_base::opts()\n         },"}, {"sha": "2a4ae786fb752bcdcb467bf6ee932e630e438cf3", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 82, "deletions": 68, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -39,7 +39,7 @@ use crate::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n use rustc_serialize::json::{Json, ToJson};\n use rustc_span::symbol::{sym, Symbol};\n use std::collections::BTreeMap;\n-use std::ops::Deref;\n+use std::ops::{Deref, DerefMut};\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n use std::{fmt, io};\n@@ -454,7 +454,7 @@ macro_rules! supported_targets {\n                 $( $($triple)|+ => $module::target(), )+\n                 _ => return None,\n             };\n-            t.options.is_builtin = true;\n+            t.is_builtin = true;\n             debug!(\"got builtin target: {:?}\", t);\n             Some(t)\n         }\n@@ -699,21 +699,25 @@ impl HasTargetSpec for Target {\n ///\n /// This has an implementation of `Default`, see each field for what the default is. In general,\n /// these try to take \"minimal defaults\" that don't assume anything about the runtime they run in.\n+///\n+/// `TargetOptions` as a separate structure is mostly an implementation detail of `Target`\n+/// construction, all its fields logically belong to `Target` and available from `Target`\n+/// through `Deref` impls.\n #[derive(PartialEq, Clone, Debug)]\n pub struct TargetOptions {\n     /// Whether the target is built-in or loaded from a custom target specification.\n     pub is_builtin: bool,\n \n     /// String to use as the `target_endian` `cfg` variable. Defaults to \"little\".\n-    pub target_endian: String,\n+    pub endian: String,\n     /// Width of c_int type. Defaults to \"32\".\n-    pub target_c_int_width: String,\n+    pub c_int_width: String,\n     /// OS name to use for conditional compilation. Defaults to \"none\".\n-    pub target_os: String,\n+    pub os: String,\n     /// Environment name to use for conditional compilation. Defaults to \"\".\n-    pub target_env: String,\n+    pub env: String,\n     /// Vendor name to use for conditional compilation. Defaults to \"unknown\".\n-    pub target_vendor: String,\n+    pub vendor: String,\n     /// Default linker flavor used if `-C linker-flavor` or `-C linker` are not passed\n     /// on the command line. Defaults to `LinkerFlavor::Gcc`.\n     pub linker_flavor: LinkerFlavor,\n@@ -804,7 +808,7 @@ pub struct TargetOptions {\n     /// String to append to the name of every static library. Defaults to \".a\".\n     pub staticlib_suffix: String,\n     /// OS family to use for conditional compilation. Valid options: \"unix\", \"windows\".\n-    pub target_family: Option<String>,\n+    pub os_family: Option<String>,\n     /// Whether the target toolchain's ABI supports returning small structs as an integer.\n     pub abi_return_struct_as_int: bool,\n     /// Whether the target toolchain is like macOS's. Only useful for compiling against iOS/macOS,\n@@ -965,7 +969,7 @@ pub struct TargetOptions {\n     pub merge_functions: MergeFunctions,\n \n     /// Use platform dependent mcount function\n-    pub target_mcount: String,\n+    pub mcount: String,\n \n     /// LLVM ABI name, corresponds to the '-mabi' parameter available in multilib C compilers\n     pub llvm_abiname: String,\n@@ -996,11 +1000,11 @@ impl Default for TargetOptions {\n     fn default() -> TargetOptions {\n         TargetOptions {\n             is_builtin: false,\n-            target_endian: \"little\".to_string(),\n-            target_c_int_width: \"32\".to_string(),\n-            target_os: \"none\".to_string(),\n-            target_env: String::new(),\n-            target_vendor: \"unknown\".to_string(),\n+            endian: \"little\".to_string(),\n+            c_int_width: \"32\".to_string(),\n+            os: \"none\".to_string(),\n+            env: String::new(),\n+            vendor: \"unknown\".to_string(),\n             linker_flavor: LinkerFlavor::Gcc,\n             linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.to_string()),\n             lld_flavor: LldFlavor::Ld,\n@@ -1024,7 +1028,7 @@ impl Default for TargetOptions {\n             exe_suffix: String::new(),\n             staticlib_prefix: \"lib\".to_string(),\n             staticlib_suffix: \".a\".to_string(),\n-            target_family: None,\n+            os_family: None,\n             abi_return_struct_as_int: false,\n             is_like_osx: false,\n             is_like_solaris: false,\n@@ -1081,7 +1085,7 @@ impl Default for TargetOptions {\n             limit_rdylib_exports: true,\n             override_export_symbols: None,\n             merge_functions: MergeFunctions::Aliases,\n-            target_mcount: \"mcount\".to_string(),\n+            mcount: \"mcount\".to_string(),\n             llvm_abiname: \"\".to_string(),\n             relax_elf_relocations: false,\n             llvm_args: vec![],\n@@ -1102,13 +1106,18 @@ impl Deref for Target {\n         &self.options\n     }\n }\n+impl DerefMut for Target {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        &mut self.options\n+    }\n+}\n \n impl Target {\n     /// Given a function ABI, turn it into the correct ABI for this target.\n     pub fn adjust_abi(&self, abi: Abi) -> Abi {\n         match abi {\n             Abi::System => {\n-                if self.options.is_like_windows && self.arch == \"x86\" {\n+                if self.is_like_windows && self.arch == \"x86\" {\n                     Abi::Stdcall\n                 } else {\n                     Abi::C\n@@ -1118,7 +1127,7 @@ impl Target {\n             // See https://docs.microsoft.com/en-us/cpp/cpp/argument-passing-and-naming-conventions\n             // and the individual pages for __stdcall et al.\n             Abi::Stdcall | Abi::Fastcall | Abi::Vectorcall | Abi::Thiscall => {\n-                if self.options.is_like_windows && self.arch != \"x86\" { Abi::C } else { abi }\n+                if self.is_like_windows && self.arch != \"x86\" { Abi::C } else { abi }\n             }\n             Abi::EfiApi => {\n                 if self.arch == \"x86_64\" {\n@@ -1134,17 +1143,17 @@ impl Target {\n     /// Minimum integer size in bits that this target can perform atomic\n     /// operations on.\n     pub fn min_atomic_width(&self) -> u64 {\n-        self.options.min_atomic_width.unwrap_or(8)\n+        self.min_atomic_width.unwrap_or(8)\n     }\n \n     /// Maximum integer size in bits that this target can perform atomic\n     /// operations on.\n     pub fn max_atomic_width(&self) -> u64 {\n-        self.options.max_atomic_width.unwrap_or_else(|| self.pointer_width.into())\n+        self.max_atomic_width.unwrap_or_else(|| self.pointer_width.into())\n     }\n \n     pub fn is_abi_supported(&self, abi: Abi) -> bool {\n-        abi.generic() || !self.options.unsupported_abis.contains(&abi)\n+        abi.generic() || !self.unsupported_abis.contains(&abi)\n     }\n \n     /// Loads a target descriptor from a JSON object.\n@@ -1177,19 +1186,19 @@ impl Target {\n             ($key_name:ident) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(s) = obj.find(&name).and_then(Json::as_string) {\n-                    base.options.$key_name = s.to_string();\n+                    base.$key_name = s.to_string();\n                 }\n             } );\n             ($key_name:ident = $json_name:expr) => ( {\n                 let name = $json_name;\n                 if let Some(s) = obj.find(&name).and_then(Json::as_string) {\n-                    base.options.$key_name = s.to_string();\n+                    base.$key_name = s.to_string();\n                 }\n             } );\n             ($key_name:ident, bool) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(s) = obj.find(&name).and_then(Json::as_boolean) {\n-                    base.options.$key_name = s;\n+                    base.$key_name = s;\n                 }\n             } );\n             ($key_name:ident, Option<u32>) => ( {\n@@ -1198,20 +1207,20 @@ impl Target {\n                     if s < 1 || s > 5 {\n                         return Err(\"Not a valid DWARF version number\".to_string());\n                     }\n-                    base.options.$key_name = Some(s as u32);\n+                    base.$key_name = Some(s as u32);\n                 }\n             } );\n             ($key_name:ident, Option<u64>) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(s) = obj.find(&name).and_then(Json::as_u64) {\n-                    base.options.$key_name = Some(s);\n+                    base.$key_name = Some(s);\n                 }\n             } );\n             ($key_name:ident, MergeFunctions) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n                     match s.parse::<MergeFunctions>() {\n-                        Ok(mergefunc) => base.options.$key_name = mergefunc,\n+                        Ok(mergefunc) => base.$key_name = mergefunc,\n                         _ => return Some(Err(format!(\"'{}' is not a valid value for \\\n                                                       merge-functions. Use 'disabled', \\\n                                                       'trampolines', or 'aliases'.\",\n@@ -1224,7 +1233,7 @@ impl Target {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n                     match s.parse::<RelocModel>() {\n-                        Ok(relocation_model) => base.options.$key_name = relocation_model,\n+                        Ok(relocation_model) => base.$key_name = relocation_model,\n                         _ => return Some(Err(format!(\"'{}' is not a valid relocation model. \\\n                                                       Run `rustc --print relocation-models` to \\\n                                                       see the list of supported values.\", s))),\n@@ -1236,7 +1245,7 @@ impl Target {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n                     match s.parse::<CodeModel>() {\n-                        Ok(code_model) => base.options.$key_name = Some(code_model),\n+                        Ok(code_model) => base.$key_name = Some(code_model),\n                         _ => return Some(Err(format!(\"'{}' is not a valid code model. \\\n                                                       Run `rustc --print code-models` to \\\n                                                       see the list of supported values.\", s))),\n@@ -1248,7 +1257,7 @@ impl Target {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n                     match s.parse::<TlsModel>() {\n-                        Ok(tls_model) => base.options.$key_name = tls_model,\n+                        Ok(tls_model) => base.$key_name = tls_model,\n                         _ => return Some(Err(format!(\"'{}' is not a valid TLS model. \\\n                                                       Run `rustc --print tls-models` to \\\n                                                       see the list of supported values.\", s))),\n@@ -1260,8 +1269,8 @@ impl Target {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n                     match s {\n-                        \"unwind\" => base.options.$key_name = PanicStrategy::Unwind,\n-                        \"abort\" => base.options.$key_name = PanicStrategy::Abort,\n+                        \"unwind\" => base.$key_name = PanicStrategy::Unwind,\n+                        \"abort\" => base.$key_name = PanicStrategy::Abort,\n                         _ => return Some(Err(format!(\"'{}' is not a valid value for \\\n                                                       panic-strategy. Use 'unwind' or 'abort'.\",\n                                                      s))),\n@@ -1273,7 +1282,7 @@ impl Target {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n                     match s.parse::<RelroLevel>() {\n-                        Ok(level) => base.options.$key_name = level,\n+                        Ok(level) => base.$key_name = level,\n                         _ => return Some(Err(format!(\"'{}' is not a valid value for \\\n                                                       relro-level. Use 'full', 'partial, or 'off'.\",\n                                                       s))),\n@@ -1284,23 +1293,31 @@ impl Target {\n             ($key_name:ident, list) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(v) = obj.find(&name).and_then(Json::as_array) {\n-                    base.options.$key_name = v.iter()\n+                    base.$key_name = v.iter()\n                         .map(|a| a.as_string().unwrap().to_string())\n                         .collect();\n                 }\n             } );\n             ($key_name:ident, opt_list) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(v) = obj.find(&name).and_then(Json::as_array) {\n-                    base.options.$key_name = Some(v.iter()\n+                    base.$key_name = Some(v.iter()\n                         .map(|a| a.as_string().unwrap().to_string())\n                         .collect());\n                 }\n             } );\n             ($key_name:ident, optional) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(o) = obj.find(&name[..]) {\n-                    base.options.$key_name = o\n+                    base.$key_name = o\n+                        .as_string()\n+                        .map(|s| s.to_string() );\n+                }\n+            } );\n+            ($key_name:ident = $json_name:expr, optional) => ( {\n+                let name = $json_name;\n+                if let Some(o) = obj.find(&name[..]) {\n+                    base.$key_name = o\n                         .as_string()\n                         .map(|s| s.to_string() );\n                 }\n@@ -1309,7 +1326,7 @@ impl Target {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n                     if let Some(flavor) = LldFlavor::from_str(&s) {\n-                        base.options.$key_name = flavor;\n+                        base.$key_name = flavor;\n                     } else {\n                         return Some(Err(format!(\n                             \"'{}' is not a valid value for lld-flavor. \\\n@@ -1323,7 +1340,7 @@ impl Target {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n                     match LinkerFlavor::from_str(s) {\n-                        Some(linker_flavor) => base.options.$key_name = linker_flavor,\n+                        Some(linker_flavor) => base.$key_name = linker_flavor,\n                         _ => return Some(Err(format!(\"'{}' is not a valid value for linker-flavor. \\\n                                                       Use {}\", s, LinkerFlavor::one_of()))),\n                     }\n@@ -1334,7 +1351,7 @@ impl Target {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n                     match s.parse::<CrtObjectsFallback>() {\n-                        Ok(fallback) => base.options.$key_name = Some(fallback),\n+                        Ok(fallback) => base.$key_name = Some(fallback),\n                         _ => return Some(Err(format!(\"'{}' is not a valid CRT objects fallback. \\\n                                                       Use 'musl', 'mingw' or 'wasm'\", s))),\n                     }\n@@ -1366,7 +1383,7 @@ impl Target {\n \n                         args.insert(kind, v);\n                     }\n-                    base.options.$key_name = args;\n+                    base.$key_name = args;\n                 }\n             } );\n             ($key_name:ident, link_args) => ( {\n@@ -1393,7 +1410,7 @@ impl Target {\n \n                         args.insert(flavor, v);\n                     }\n-                    base.options.$key_name = args;\n+                    base.$key_name = args;\n                 }\n             } );\n             ($key_name:ident, env) => ( {\n@@ -1405,7 +1422,7 @@ impl Target {\n                             if p.len() == 2 {\n                                 let k = p[0].to_string();\n                                 let v = p[1].to_string();\n-                                base.options.$key_name.push((k, v));\n+                                base.$key_name.push((k, v));\n                             }\n                         }\n                     }\n@@ -1414,11 +1431,11 @@ impl Target {\n         }\n \n         key!(is_builtin, bool);\n-        key!(target_endian);\n-        key!(target_c_int_width);\n-        key!(target_os = \"os\");\n-        key!(target_env = \"env\");\n-        key!(target_vendor = \"vendor\");\n+        key!(endian = \"target_endian\");\n+        key!(c_int_width = \"target_c_int_width\");\n+        key!(os);\n+        key!(env);\n+        key!(vendor);\n         key!(linker_flavor, LinkerFlavor)?;\n         key!(linker, optional);\n         key!(lld_flavor, LldFlavor)?;\n@@ -1452,7 +1469,7 @@ impl Target {\n         key!(exe_suffix);\n         key!(staticlib_prefix);\n         key!(staticlib_suffix);\n-        key!(target_family, optional);\n+        key!(os_family = \"target_family\", optional);\n         key!(abi_return_struct_as_int, bool);\n         key!(is_like_osx, bool);\n         key!(is_like_solaris, bool);\n@@ -1498,7 +1515,7 @@ impl Target {\n         key!(limit_rdylib_exports, bool);\n         key!(override_export_symbols, opt_list);\n         key!(merge_functions, MergeFunctions)?;\n-        key!(target_mcount);\n+        key!(mcount = \"target_mcount\");\n         key!(llvm_abiname);\n         key!(relax_elf_relocations, bool);\n         key!(llvm_args, list);\n@@ -1521,7 +1538,7 @@ impl Target {\n                                 ));\n                             }\n \n-                            base.options.unsupported_abis.push(abi)\n+                            base.unsupported_abis.push(abi)\n                         }\n                         None => {\n                             return Err(format!(\n@@ -1610,21 +1627,20 @@ impl ToJson for Target {\n         macro_rules! target_option_val {\n             ($attr:ident) => {{\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n-                if default.$attr != self.options.$attr {\n-                    d.insert(name, self.options.$attr.to_json());\n+                if default.$attr != self.$attr {\n+                    d.insert(name, self.$attr.to_json());\n                 }\n             }};\n             ($attr:ident, $key_name:expr) => {{\n                 let name = $key_name;\n-                if default.$attr != self.options.$attr {\n-                    d.insert(name.to_string(), self.options.$attr.to_json());\n+                if default.$attr != self.$attr {\n+                    d.insert(name.to_string(), self.$attr.to_json());\n                 }\n             }};\n             (link_args - $attr:ident) => {{\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n-                if default.$attr != self.options.$attr {\n+                if default.$attr != self.$attr {\n                     let obj = self\n-                        .options\n                         .$attr\n                         .iter()\n                         .map(|(k, v)| (k.desc().to_owned(), v.clone()))\n@@ -1634,9 +1650,8 @@ impl ToJson for Target {\n             }};\n             (env - $attr:ident) => {{\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n-                if default.$attr != self.options.$attr {\n+                if default.$attr != self.$attr {\n                     let obj = self\n-                        .options\n                         .$attr\n                         .iter()\n                         .map(|&(ref k, ref v)| k.clone() + \"=\" + &v)\n@@ -1652,11 +1667,11 @@ impl ToJson for Target {\n         target_val!(data_layout);\n \n         target_option_val!(is_builtin);\n-        target_option_val!(target_endian);\n-        target_option_val!(target_c_int_width);\n-        target_option_val!(target_os, \"os\");\n-        target_option_val!(target_env, \"env\");\n-        target_option_val!(target_vendor, \"vendor\");\n+        target_option_val!(endian, \"target_endian\");\n+        target_option_val!(c_int_width, \"target_c_int_width\");\n+        target_option_val!(os);\n+        target_option_val!(env);\n+        target_option_val!(vendor);\n         target_option_val!(linker_flavor);\n         target_option_val!(linker);\n         target_option_val!(lld_flavor);\n@@ -1690,7 +1705,7 @@ impl ToJson for Target {\n         target_option_val!(exe_suffix);\n         target_option_val!(staticlib_prefix);\n         target_option_val!(staticlib_suffix);\n-        target_option_val!(target_family);\n+        target_option_val!(os_family, \"target_family\");\n         target_option_val!(abi_return_struct_as_int);\n         target_option_val!(is_like_osx);\n         target_option_val!(is_like_solaris);\n@@ -1736,19 +1751,18 @@ impl ToJson for Target {\n         target_option_val!(limit_rdylib_exports);\n         target_option_val!(override_export_symbols);\n         target_option_val!(merge_functions);\n-        target_option_val!(target_mcount);\n+        target_option_val!(mcount, \"target_mcount\");\n         target_option_val!(llvm_abiname);\n         target_option_val!(relax_elf_relocations);\n         target_option_val!(llvm_args);\n         target_option_val!(use_ctors_section);\n         target_option_val!(eh_frame_header);\n         target_option_val!(has_thumb_interworking);\n \n-        if default.unsupported_abis != self.options.unsupported_abis {\n+        if default.unsupported_abis != self.unsupported_abis {\n             d.insert(\n                 \"unsupported-abis\".to_string(),\n-                self.options\n-                    .unsupported_abis\n+                self.unsupported_abis\n                     .iter()\n                     .map(|&name| Abi::name(name).to_json())\n                     .collect::<Vec<_>>()"}, {"sha": "ef966cb702ec451fe5e3afd085ab757e137dd46b", "filename": "compiler/rustc_target/src/spec/msp430_none_elf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsp430_none_elf.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -8,8 +8,8 @@ pub fn target() -> Target {\n         arch: \"msp430\".to_string(),\n \n         options: TargetOptions {\n-            target_c_int_width: \"16\".to_string(),\n-            target_vendor: String::new(),\n+            c_int_width: \"16\".to_string(),\n+            vendor: String::new(),\n             executables: true,\n \n             // The LLVM backend currently can't generate object files. To"}, {"sha": "a77d60bd9d74705ead46c79c000ce186eed72ff6", "filename": "compiler/rustc_target/src/spec/netbsd_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -14,10 +14,10 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"netbsd\".to_string(),\n+        os: \"netbsd\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         no_default_libraries: false,\n         has_rpath: true,"}, {"sha": "3c9c7d578fbd463db9223dcdaf8bcf7ade8c767c", "filename": "compiler/rustc_target/src/spec/nvptx64_nvidia_cuda.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -9,8 +9,8 @@ pub fn target() -> Target {\n         pointer_width: 64,\n \n         options: TargetOptions {\n-            target_os: \"cuda\".to_string(),\n-            target_vendor: \"nvidia\".to_string(),\n+            os: \"cuda\".to_string(),\n+            vendor: \"nvidia\".to_string(),\n             linker_flavor: LinkerFlavor::PtxLinker,\n             // The linker can be installed from `crates.io`.\n             linker: Some(\"rust-ptx-linker\".to_string()),"}, {"sha": "2b40a1ed945cf8f713cb2964543402a3758f392e", "filename": "compiler/rustc_target/src/spec/openbsd_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -16,10 +16,10 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"openbsd\".to_string(),\n+        os: \"openbsd\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n         abi_return_struct_as_int: true,"}, {"sha": "626865aa242fe6191428e49e651487c643dbd13b", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,10 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "27515ac6e1f9f84b09a93c70cf086d1c6ff99fbf", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -15,10 +15,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "231539756f375332aac2cf9e464cbe650a4f5f6c", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,10 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "1c83e3e64d4360976794d6f72d211333f7dbce3e", "filename": "compiler/rustc_target/src/spec/powerpc64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,6 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"E-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        options: TargetOptions { target_endian: \"big\".to_string(), ..base },\n+        options: TargetOptions { endian: \"big\".to_string(), ..base },\n     }\n }"}, {"sha": "3c4389c5a7ccaa85532ec05cde788bd93e6fe329", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,6 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"e-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "41c78a5f276334091c7d76fd60a4d2c0a2b37828", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,6 +11,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"e-m:e-i64:64-n32:64\".to_string(),\n         arch: \"powerpc64\".to_string(),\n-        options: TargetOptions { target_mcount: \"_mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "ece01705c45181e85ba9748d26ed4e95f2882980", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -10,10 +10,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n-        options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "35c28787471055cbe907b8d282fcd6dbc99bcfd8", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnuspe.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -10,10 +10,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n-        options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "49d329447893a0d4bcf5298e14e306ffc279f0b1", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -10,10 +10,6 @@ pub fn target() -> Target {\n         pointer_width: 32,\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n-        options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_mcount: \"_mcount\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { endian: \"big\".to_string(), mcount: \"_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "387d6cdc456a7032b3097ec816ee7766115c438b", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_netbsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -11,8 +11,8 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_mcount: \"__mcount\".to_string(),\n+            endian: \"big\".to_string(),\n+            mcount: \"__mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "20ffa07b9979f20f697e1e3c555ec4b0212cc729", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -12,7 +12,7 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n+            endian: \"big\".to_string(),\n             features: \"+secure-plt\".to_string(),\n             ..base\n         },"}, {"sha": "0e713fccd23b8a925fa98b088df6dee11878c6fc", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks_spe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -12,7 +12,7 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-p:32:32-i64:64-n32\".to_string(),\n         arch: \"powerpc\".to_string(),\n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n+            endian: \"big\".to_string(),\n             // feature msync would disable instruction 'fsync' which is not supported by fsl_p1p2\n             features: \"+secure-plt,+msync\".to_string(),\n             ..base"}, {"sha": "5ef705878a8ff98fa5805e4827d801d91350734e", "filename": "compiler/rustc_target/src/spec/redox_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -19,11 +19,11 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"redox\".to_string(),\n-        target_env: \"relibc\".to_string(),\n+        os: \"redox\".to_string(),\n+        env: \"relibc\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n         pre_link_args: args,"}, {"sha": "258b83a1c6e1b9a451b4bf4684346d2f3da3048e", "filename": "compiler/rustc_target/src/spec/s390x_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2,7 +2,7 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n-    base.target_endian = \"big\".to_string();\n+    base.endian = \"big\".to_string();\n     // z10 is the oldest CPU supported by LLVM\n     base.cpu = \"z10\".to_string();\n     // FIXME: The data_layout string below and the ABI implementation in"}, {"sha": "33e0cf8e96752b353ac7a375975a2906ba8062c9", "filename": "compiler/rustc_target/src/spec/solaris_base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2,12 +2,12 @@ use crate::spec::TargetOptions;\n \n pub fn opts() -> TargetOptions {\n     TargetOptions {\n-        target_os: \"solaris\".to_string(),\n-        target_vendor: \"sun\".to_string(),\n+        os: \"solaris\".to_string(),\n+        vendor: \"sun\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         is_like_solaris: true,\n         limit_rdylib_exports: false, // Linker doesn't support this\n         eh_frame_header: false,"}, {"sha": "4b5ee050d7265e3890c346cb5306ac29b71e57b3", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_linux_gnu.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2,7 +2,7 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n-    base.target_endian = \"big\".to_string();\n+    base.endian = \"big\".to_string();\n     base.cpu = \"v9\".to_string();\n     base.max_atomic_width = Some(64);\n "}, {"sha": "c8e90f832d034f042eb58b5494ae3df48ad8f090", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_netbsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -12,8 +12,8 @@ pub fn target() -> Target {\n         data_layout: \"E-m:e-i64:64-n32:64-S128\".to_string(),\n         arch: \"sparc64\".to_string(),\n         options: TargetOptions {\n-            target_endian: \"big\".to_string(),\n-            target_mcount: \"__mcount\".to_string(),\n+            endian: \"big\".to_string(),\n+            mcount: \"__mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "630ce6123f9ec992c736a49d32486d8b3966c53a", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2,7 +2,7 @@ use crate::spec::{LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n-    base.target_endian = \"big\".to_string();\n+    base.endian = \"big\".to_string();\n     base.cpu = \"v9\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);"}, {"sha": "8d7b34fe2cbfd380d81c7925014a8f942abd2cc3", "filename": "compiler/rustc_target/src/spec/sparc_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2,7 +2,7 @@ use crate::spec::{LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_base::opts();\n-    base.target_endian = \"big\".to_string();\n+    base.endian = \"big\".to_string();\n     base.cpu = \"v9\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-mv8plus\".to_string());"}, {"sha": "5f99e0b14f9fb1cdfffa6fae4652d7aa2fa963aa", "filename": "compiler/rustc_target/src/spec/sparcv9_sun_solaris.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2,7 +2,7 @@ use crate::spec::{LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::solaris_base::opts();\n-    base.target_endian = \"big\".to_string();\n+    base.endian = \"big\".to_string();\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n     // llvm calls this \"v9\"\n     base.cpu = \"v9\".to_string();"}, {"sha": "f348df7d5a716ddd9dfc49296134aebe52ae9296", "filename": "compiler/rustc_target/src/spec/tests/tests_impl.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -14,27 +14,27 @@ impl Target {\n         assert_eq!(\n             self.linker_flavor == LinkerFlavor::Msvc\n                 || self.linker_flavor == LinkerFlavor::Lld(LldFlavor::Link),\n-            self.options.lld_flavor == LldFlavor::Link,\n+            self.lld_flavor == LldFlavor::Link,\n         );\n         for args in &[\n-            &self.options.pre_link_args,\n-            &self.options.late_link_args,\n-            &self.options.late_link_args_dynamic,\n-            &self.options.late_link_args_static,\n-            &self.options.post_link_args,\n+            &self.pre_link_args,\n+            &self.late_link_args,\n+            &self.late_link_args_dynamic,\n+            &self.late_link_args_static,\n+            &self.post_link_args,\n         ] {\n             assert_eq!(\n                 args.get(&LinkerFlavor::Msvc),\n                 args.get(&LinkerFlavor::Lld(LldFlavor::Link)),\n             );\n             if args.contains_key(&LinkerFlavor::Msvc) {\n-                assert_eq!(self.options.lld_flavor, LldFlavor::Link);\n+                assert_eq!(self.lld_flavor, LldFlavor::Link);\n             }\n         }\n         assert!(\n-            (self.options.pre_link_objects_fallback.is_empty()\n-                && self.options.post_link_objects_fallback.is_empty())\n-                || self.options.crt_objects_fallback.is_some()\n+            (self.pre_link_objects_fallback.is_empty()\n+                && self.post_link_objects_fallback.is_empty())\n+                || self.crt_objects_fallback.is_some()\n         );\n     }\n }"}, {"sha": "e55046750275433a6f4190e7fbafa3cf87cac1a9", "filename": "compiler/rustc_target/src/spec/thumb_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -32,7 +32,7 @@ use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOpti\n pub fn opts() -> TargetOptions {\n     // See rust-lang/rfcs#1645 for a discussion about these defaults\n     TargetOptions {\n-        target_vendor: String::new(),\n+        vendor: String::new(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         executables: true,\n         // In most cases, LLD is good enough"}, {"sha": "a788167aede07a42f9f3caf2c0a60b12ad580a79", "filename": "compiler/rustc_target/src/spec/thumbv7neon_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_unknown_linux_musleabihf.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -24,7 +24,7 @@ pub fn target() -> Target {\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             unsupported_abis: super::arm_base::unsupported_abis(),\n-            target_mcount: \"\\u{1}mcount\".to_string(),\n+            mcount: \"\\u{1}mcount\".to_string(),\n             ..base\n         },\n     }"}, {"sha": "79fe77495e73154e2936e3c8c32fae92c282a99f", "filename": "compiler/rustc_target/src/spec/uefi_msvc_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -37,7 +37,7 @@ pub fn opts() -> TargetOptions {\n         .extend(pre_link_args_msvc);\n \n     TargetOptions {\n-        target_os: \"uefi\".to_string(),\n+        os: \"uefi\".to_string(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Link),\n         disable_redzone: true,\n         exe_suffix: \".efi\".to_string(),"}, {"sha": "70bc9ce3e0e2d7d0389feeac856dd340f0bcc9e4", "filename": "compiler/rustc_target/src/spec/vxworks_base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -17,14 +17,14 @@ pub fn opts() -> TargetOptions {\n     );\n \n     TargetOptions {\n-        target_os: \"vxworks\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"wrs\".to_string(),\n+        os: \"vxworks\".to_string(),\n+        env: \"gnu\".to_string(),\n+        vendor: \"wrs\".to_string(),\n         linker: Some(\"wr-c++\".to_string()),\n         exe_suffix: \".vxe\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         linker_is_gnu: true,\n         has_rpath: true,\n         pre_link_args: args,\n@@ -34,7 +34,7 @@ pub fn opts() -> TargetOptions {\n         crt_static_respected: true,\n         crt_static_allows_dylibs: true,\n         // VxWorks needs to implement this to support profiling\n-        target_mcount: \"_mcount\".to_string(),\n+        mcount: \"_mcount\".to_string(),\n         ..Default::default()\n     }\n }"}, {"sha": "c12757b8f98126d96269e1527259c35413f160e0", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> Target {\n     );\n \n     let opts = TargetOptions {\n-        target_os: \"emscripten\".to_string(),\n+        os: \"emscripten\".to_string(),\n         linker_flavor: LinkerFlavor::Em,\n         // emcc emits two files - a .js file to instantiate the wasm and supply platform\n         // functionality, and a .wasm file.\n@@ -27,7 +27,7 @@ pub fn target() -> Target {\n         is_like_emscripten: true,\n         panic_strategy: PanicStrategy::Unwind,\n         post_link_args,\n-        target_family: Some(\"unix\".to_string()),\n+        os_family: Some(\"unix\".to_string()),\n         ..wasm32_base::options()\n     };\n     Target {"}, {"sha": "6037aa5b4306e56a9d0565781ee84f7e65db1ca7", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -15,7 +15,7 @@ use super::{LinkerFlavor, LldFlavor, Target};\n \n pub fn target() -> Target {\n     let mut options = wasm32_base::options();\n-    options.target_os = \"unknown\".to_string();\n+    options.os = \"unknown\".to_string();\n     options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n     let clang_args = options.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap();\n "}, {"sha": "9c697674f397ad8d178c3363dfb8f9c26797bf87", "filename": "compiler/rustc_target/src/spec/wasm32_wasi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -78,8 +78,8 @@ use super::{crt_objects, LinkerFlavor, LldFlavor, Target};\n pub fn target() -> Target {\n     let mut options = wasm32_base::options();\n \n-    options.target_os = \"wasi\".to_string();\n-    options.target_vendor = String::new();\n+    options.os = \"wasi\".to_string();\n+    options.vendor = String::new();\n     options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n     options\n         .pre_link_args"}, {"sha": "f556a13a5197f2a7407b5651bbbb11f7bbeb79bb", "filename": "compiler/rustc_target/src/spec/windows_gnu_base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -62,9 +62,9 @@ pub fn opts() -> TargetOptions {\n     late_link_args_static.insert(LinkerFlavor::Lld(LldFlavor::Ld), static_unwind_libs);\n \n     TargetOptions {\n-        target_os: \"windows\".to_string(),\n-        target_env: \"gnu\".to_string(),\n-        target_vendor: \"pc\".to_string(),\n+        os: \"windows\".to_string(),\n+        env: \"gnu\".to_string(),\n+        vendor: \"pc\".to_string(),\n         // FIXME(#13846) this should be enabled for windows\n         function_sections: false,\n         linker: Some(\"gcc\".to_string()),\n@@ -75,7 +75,7 @@ pub fn opts() -> TargetOptions {\n         exe_suffix: \".exe\".to_string(),\n         staticlib_prefix: \"lib\".to_string(),\n         staticlib_suffix: \".a\".to_string(),\n-        target_family: Some(\"windows\".to_string()),\n+        os_family: Some(\"windows\".to_string()),\n         is_like_windows: true,\n         allows_weak_linkage: false,\n         pre_link_args,"}, {"sha": "c041245e32862e960751dbad2cb164b73eea4317", "filename": "compiler/rustc_target/src/spec/windows_msvc_base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -4,16 +4,16 @@ pub fn opts() -> TargetOptions {\n     let base = super::msvc_base::opts();\n \n     TargetOptions {\n-        target_os: \"windows\".to_string(),\n-        target_env: \"msvc\".to_string(),\n-        target_vendor: \"pc\".to_string(),\n+        os: \"windows\".to_string(),\n+        env: \"msvc\".to_string(),\n+        vendor: \"pc\".to_string(),\n         dynamic_linking: true,\n         dll_prefix: String::new(),\n         dll_suffix: \".dll\".to_string(),\n         exe_suffix: \".exe\".to_string(),\n         staticlib_prefix: String::new(),\n         staticlib_suffix: \".lib\".to_string(),\n-        target_family: Some(\"windows\".to_string()),\n+        os_family: Some(\"windows\".to_string()),\n         crt_static_allows_dylibs: true,\n         crt_static_respected: true,\n         requires_uwtable: true,"}, {"sha": "67d1be399b3f1f7141a8674f7676394f9830036a", "filename": "compiler/rustc_target/src/spec/windows_uwp_gnu_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -25,7 +25,7 @@ pub fn opts() -> TargetOptions {\n     late_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), mingw_libs);\n \n     TargetOptions {\n-        target_vendor: \"uwp\".to_string(),\n+        vendor: \"uwp\".to_string(),\n         executables: false,\n         limit_rdylib_exports: false,\n         late_link_args,"}, {"sha": "700ee5ec646dd3bc169a7f6a73bbe8d39061bad1", "filename": "compiler/rustc_target/src/spec/windows_uwp_msvc_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, LldFlavor, TargetOptions};\n pub fn opts() -> TargetOptions {\n     let mut opts = super::windows_msvc_base::opts();\n \n-    opts.target_vendor = \"uwp\".to_string();\n+    opts.vendor = \"uwp\".to_string();\n     let pre_link_args_msvc = vec![\"/APPCONTAINER\".to_string(), \"mincore.lib\".to_string()];\n     opts.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().extend(pre_link_args_msvc.clone());\n     opts.pre_link_args"}, {"sha": "edb33fe6e2b13a06dc1f822fa8fadd68f1496691", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -24,6 +24,6 @@ pub fn target() -> Target {\n         data_layout: \"e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: arch.to_string(),\n-        options: TargetOptions { target_mcount: \"\\u{1}mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"\\u{1}mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "74fb6f0a8341ca45a8dcdffe717210aea26cbd9c", "filename": "compiler/rustc_target/src/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -55,9 +55,9 @@ pub fn target() -> Target {\n         \"TEXT_SIZE\",\n     ];\n     let opts = TargetOptions {\n-        target_os: \"unknown\".into(),\n-        target_env: \"sgx\".into(),\n-        target_vendor: \"fortanix\".into(),\n+        os: \"unknown\".into(),\n+        env: \"sgx\".into(),\n+        vendor: \"fortanix\".into(),\n         linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n         dynamic_linking: false,\n         executables: true,"}, {"sha": "095c6f15c77ad354c74d58ae67b0608e9ed5492e", "filename": "compiler/rustc_target/src/spec/x86_64_rumprun_netbsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_rumprun_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_rumprun_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_rumprun_netbsd.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2,7 +2,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n-    base.target_vendor = \"rumprun\".to_string();\n+    base.vendor = \"rumprun\".to_string();\n     base.cpu = \"x86-64\".to_string();\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.linker = Some(\"x86_64-rumprun-netbsd-gcc\".to_string());\n@@ -20,6 +20,6 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        options: TargetOptions { target_mcount: \"__mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"__mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "7e91a6ddbe2964f77a04fc24a9559164671ab480", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -13,6 +13,6 @@ pub fn target() -> Target {\n         data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n             .to_string(),\n         arch: \"x86_64\".to_string(),\n-        options: TargetOptions { target_mcount: \"__mcount\".to_string(), ..base },\n+        options: TargetOptions { mcount: \"__mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "b431de90369444f0c84a95b38520794bc495ce91", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2653,7 +2653,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                             set.path.segments.iter().map(|x| x.ident.name).collect::<Vec<_>>();\n                         match segments.as_slice() {\n                             [sym::arm, sym::a32] | [sym::arm, sym::t32] => {\n-                                if !tcx.sess.target.options.has_thumb_interworking {\n+                                if !tcx.sess.target.has_thumb_interworking {\n                                     struct_span_err!(\n                                         tcx.sess.diagnostic(),\n                                         attr.span,"}, {"sha": "2c8bc3d53ef76e2f25b4b2c78e54ecca866a79ab", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2136,10 +2136,8 @@ impl<T> InPlaceDrop<T> {\n impl<T> Drop for InPlaceDrop<T> {\n     #[inline]\n     fn drop(&mut self) {\n-        if mem::needs_drop::<T>() {\n-            unsafe {\n-                ptr::drop_in_place(slice::from_raw_parts_mut(self.inner, self.len()));\n-            }\n+        unsafe {\n+            ptr::drop_in_place(slice::from_raw_parts_mut(self.inner, self.len()));\n         }\n     }\n }\n@@ -2871,10 +2869,8 @@ impl<T> IntoIter<T> {\n     }\n \n     fn drop_remaining(&mut self) {\n-        if mem::needs_drop::<T>() {\n-            unsafe {\n-                ptr::drop_in_place(self.as_mut_slice());\n-            }\n+        unsafe {\n+            ptr::drop_in_place(self.as_mut_slice());\n         }\n         self.ptr = self.end;\n     }"}, {"sha": "433f0129306bda281086245c5400fd2b3d4b4d62", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -788,7 +788,7 @@ extern \"rust-intrinsic\" {\n \n     /// The size of the referenced value in bytes.\n     ///\n-    /// The stabilized version of this intrinsic is [`size_of_val`].\n+    /// The stabilized version of this intrinsic is [`mem::size_of_val`].\n     #[rustc_const_unstable(feature = \"const_size_of_val\", issue = \"46571\")]\n     pub fn size_of_val<T: ?Sized>(_: *const T) -> usize;\n     /// The required alignment of the referenced value.\n@@ -1704,7 +1704,7 @@ extern \"rust-intrinsic\" {\n     /// Returns the number of variants of the type `T` cast to a `usize`;\n     /// if `T` has no variants, returns 0. Uninhabited variants will be counted.\n     ///\n-    /// The to-be-stabilized version of this intrinsic is [`variant_count`].\n+    /// The to-be-stabilized version of this intrinsic is [`mem::variant_count`].\n     #[rustc_const_unstable(feature = \"variant_count\", issue = \"73662\")]\n     pub fn variant_count<T>() -> usize;\n "}, {"sha": "fe3eff04b4ae59e15860f79dcf58a9b8df36b52e", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -318,7 +318,7 @@ macro_rules! r#try {\n \n /// Writes formatted data into a buffer.\n ///\n-/// This macro accepts a format string, a list of arguments, and a 'writer'. Arguments will be\n+/// This macro accepts a 'writer', a format string, and a list of arguments. Arguments will be\n /// formatted according to the specified format string and the result will be passed to the writer.\n /// The writer may be any value with a `write_fmt` method; generally this comes from an\n /// implementation of either the [`fmt::Write`] or the [`io::Write`] trait. The macro"}, {"sha": "375b015ccc8dfebb05fc28bd6839c7f683788053", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -316,7 +316,7 @@ pub fn take_alloc_error_hook() -> fn(Layout) {\n }\n \n fn default_alloc_error_hook(layout: Layout) {\n-    dumb_print(format_args!(\"memory allocation of {} bytes failed\", layout.size()));\n+    dumb_print(format_args!(\"memory allocation of {} bytes failed\\n\", layout.size()));\n }\n \n #[cfg(not(test))]"}, {"sha": "ec7932d8bbfa4c1d9611803a3a80579b2ef58edf", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -1967,18 +1967,23 @@ impl Clean<Span> for rustc_span::Span {\n             return Span::empty();\n         }\n \n+        // Get the macro invocation instead of the definition,\n+        // in case the span is result of a macro expansion.\n+        // (See rust-lang/rust#39726)\n+        let span = self.source_callsite();\n+\n         let sm = cx.sess().source_map();\n-        let filename = sm.span_to_filename(*self);\n-        let lo = sm.lookup_char_pos(self.lo());\n-        let hi = sm.lookup_char_pos(self.hi());\n+        let filename = sm.span_to_filename(span);\n+        let lo = sm.lookup_char_pos(span.lo());\n+        let hi = sm.lookup_char_pos(span.hi());\n         Span {\n             filename,\n             cnum: lo.file.cnum,\n             loline: lo.line,\n             locol: lo.col.to_usize(),\n             hiline: hi.line,\n             hicol: hi.col.to_usize(),\n-            original: *self,\n+            original: span,\n         }\n     }\n }"}, {"sha": "6a7dbb004a3626c29d5fc3d86fa3cda27c03bbff", "filename": "src/test/rustdoc/external-macro-src.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Frustdoc%2Fexternal-macro-src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Frustdoc%2Fexternal-macro-src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fexternal-macro-src.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -1,15 +1,12 @@\n // aux-build:external-macro-src.rs\n-// ignore-tidy-linelength\n \n #![crate_name = \"foo\"]\n \n #[macro_use]\n extern crate external_macro_src;\n \n-// @has foo/index.html '//a[@href=\"../src/foo/external-macro-src.rs.html#4-15\"]' '[src]'\n+// @has foo/index.html '//a[@href=\"../src/foo/external-macro-src.rs.html#3-12\"]' '[src]'\n \n // @has foo/struct.Foo.html\n-// @has - '//a[@href=\"https://example.com/src/external_macro_src/external-macro-src.rs.html#8\"]' '[src]'\n-// @has - '//a[@href=\"https://example.com/src/external_macro_src/external-macro-src.rs.html#9-13\"]' '[src]'\n-// @has - '//a[@href=\"https://example.com/src/external_macro_src/external-macro-src.rs.html#10-12\"]' '[src]'\n+// @has - '//a[@href=\"../src/foo/external-macro-src.rs.html#12\"]' '[src]'\n make_foo!();"}, {"sha": "bd6f38e912338226d93b5f997f603f29f279158e", "filename": "src/test/rustdoc/issue-26606.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Frustdoc%2Fissue-26606.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Frustdoc%2Fissue-26606.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-26606.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -7,5 +7,5 @@\n extern crate issue_26606_macro;\n \n // @has issue_26606/constant.FOO.html\n-// @has - '//a/@href' '../src/issue_26606_macro/issue-26606-macro.rs.html#3'\n+// @has - '//a[@href=\"../src/issue_26606/issue-26606.rs.html#11\"]' '[src]'\n make_item!(FOO);"}, {"sha": "5e56bb5819a104b55acc98780074265dfc32bd9f", "filename": "src/test/rustdoc/thread-local-src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Frustdoc%2Fthread-local-src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Frustdoc%2Fthread-local-src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fthread-local-src.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2,5 +2,5 @@\n \n // @has foo/index.html '//a[@href=\"../src/foo/thread-local-src.rs.html#1-6\"]' '[src]'\n \n-// @has foo/constant.FOO.html '//a/@href' 'https://doc.rust-lang.org/nightly/src/std/'\n+// @has foo/constant.FOO.html '//a[@href=\"../src/foo/thread-local-src.rs.html#6\"]' '[src]'\n thread_local!(pub static FOO: bool = false);"}, {"sha": "ac29cca9d3f602a8ac4c4f3da8320929823f481f", "filename": "src/test/ui/async-await/issues/issue-63388-1.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2,12 +2,14 @@ error[E0623]: lifetime mismatch\n   --> $DIR/issue-63388-1.rs:14:9\n    |\n LL |         &'a self, foo: &dyn Foo\n-   |         -------- this parameter and the return type are declared with different lifetimes...\n+   |         -------- this parameter and the returned future are declared with different lifetimes...\n LL |     ) -> &dyn Foo\n    |          --------\n+   |          |\n+   |          this `async fn` implicitly returns an `impl Future<Output = &dyn Foo>`\n LL |     {\n LL |         foo\n-   |         ^^^ ...but data from `foo` is returned here\n+   |         ^^^ ...but data from `foo` is held across an await point here\n \n error: aborting due to previous error\n "}, {"sha": "5041b39a9e9d1c9bab43a2ecfd4bf37aa306dd2a", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -4,8 +4,9 @@ error[E0623]: lifetime mismatch\n LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n    |                                           ------                ^^^^^^^^^^^^^^\n    |                                           |                     |\n-   |                                           |                     ...but data from `b` is returned here\n-   |                                           this parameter and the return type are declared with different lifetimes...\n+   |                                           |                     ...but data from `b` is held across an await point here\n+   |                                           |                     this `async fn` implicitly returns an `impl Future<Output = impl Trait<'a>>`\n+   |                                           this parameter and the returned future are declared with different lifetimes...\n \n error: aborting due to previous error\n "}, {"sha": "7f16f2f33de1a5875d022e68fd38fef2d602aa40", "filename": "src/test/ui/const-generics/min_const_generics/macro-fail.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -0,0 +1,48 @@\n+#![feature(min_const_generics)]\n+\n+struct Example<const N: usize>;\n+\n+macro_rules! external_macro {\n+  () => {{\n+    //~^ ERROR expected type\n+    const X: usize = 1337;\n+    X\n+  }}\n+}\n+\n+trait Marker<const N: usize> {}\n+impl<const N: usize> Marker<N> for Example<N> {}\n+\n+fn make_marker() -> impl Marker<gimme_a_const!(marker)> {\n+  //~^ ERROR wrong number of const\n+  //~| ERROR wrong number of type\n+  Example::<gimme_a_const!(marker)>\n+  //~^ ERROR wrong number of const\n+  //~| ERROR wrong number of type\n+}\n+\n+fn from_marker(_: impl Marker<{\n+    #[macro_export]\n+    macro_rules! inline { () => {{ 3 }} }; inline!()\n+}>) {}\n+\n+fn main() {\n+  let _ok = Example::<{\n+    #[macro_export]\n+    macro_rules! gimme_a_const {\n+      ($rusty: ident) => {{ let $rusty = 3; *&$rusty }}\n+      //~^ ERROR expected type\n+      //~| ERROR expected type\n+    };\n+    gimme_a_const!(run)\n+  }>;\n+\n+  let _fail = Example::<external_macro!()>;\n+  //~^ ERROR wrong number of const\n+  //~| ERROR wrong number of type\n+\n+  let _fail = Example::<gimme_a_const!()>;\n+  //~^ ERROR wrong number of const\n+  //~| ERROR wrong number of type\n+  //~| ERROR unexpected end of macro invocation\n+}"}, {"sha": "fe7a4a5c382693c2b082c86f9dfb8b3a91d98abb", "filename": "src/test/ui/const-generics/min_const_generics/macro-fail.stderr", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -0,0 +1,107 @@\n+error: expected type, found `{`\n+  --> $DIR/macro-fail.rs:33:27\n+   |\n+LL | fn make_marker() -> impl Marker<gimme_a_const!(marker)> {\n+   |                                 ----------------------\n+   |                                 |\n+   |                                 this macro call doesn't expand to a type\n+   |                                 in this macro invocation\n+...\n+LL |       ($rusty: ident) => {{ let $rusty = 3; *&$rusty }}\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: expected type, found `{`\n+  --> $DIR/macro-fail.rs:33:27\n+   |\n+LL |   Example::<gimme_a_const!(marker)>\n+   |             ----------------------\n+   |             |\n+   |             this macro call doesn't expand to a type\n+   |             in this macro invocation\n+...\n+LL |       ($rusty: ident) => {{ let $rusty = 3; *&$rusty }}\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: expected type, found `{`\n+  --> $DIR/macro-fail.rs:6:10\n+   |\n+LL |     () => {{\n+   |  __________^\n+LL | |\n+LL | |     const X: usize = 1337;\n+LL | |     X\n+LL | |   }}\n+   | |___^ expected type\n+...\n+LL |     let _fail = Example::<external_macro!()>;\n+   |                           -----------------\n+   |                           |\n+   |                           this macro call doesn't expand to a type\n+   |                           in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: unexpected end of macro invocation\n+  --> $DIR/macro-fail.rs:44:25\n+   |\n+LL |     macro_rules! gimme_a_const {\n+   |     -------------------------- when calling this macro\n+...\n+LL |   let _fail = Example::<gimme_a_const!()>;\n+   |                         ^^^^^^^^^^^^^^^^ missing tokens in macro arguments\n+\n+error[E0107]: wrong number of const arguments: expected 1, found 0\n+  --> $DIR/macro-fail.rs:16:26\n+   |\n+LL | fn make_marker() -> impl Marker<gimme_a_const!(marker)> {\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n+\n+error[E0107]: wrong number of type arguments: expected 0, found 1\n+  --> $DIR/macro-fail.rs:16:33\n+   |\n+LL | fn make_marker() -> impl Marker<gimme_a_const!(marker)> {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^ unexpected type argument\n+\n+error[E0107]: wrong number of const arguments: expected 1, found 0\n+  --> $DIR/macro-fail.rs:19:3\n+   |\n+LL |   Example::<gimme_a_const!(marker)>\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n+\n+error[E0107]: wrong number of type arguments: expected 0, found 1\n+  --> $DIR/macro-fail.rs:19:13\n+   |\n+LL |   Example::<gimme_a_const!(marker)>\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ unexpected type argument\n+\n+error[E0107]: wrong number of const arguments: expected 1, found 0\n+  --> $DIR/macro-fail.rs:40:15\n+   |\n+LL |   let _fail = Example::<external_macro!()>;\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n+\n+error[E0107]: wrong number of type arguments: expected 0, found 1\n+  --> $DIR/macro-fail.rs:40:25\n+   |\n+LL |   let _fail = Example::<external_macro!()>;\n+   |                         ^^^^^^^^^^^^^^^^^ unexpected type argument\n+\n+error[E0107]: wrong number of const arguments: expected 1, found 0\n+  --> $DIR/macro-fail.rs:44:15\n+   |\n+LL |   let _fail = Example::<gimme_a_const!()>;\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n+\n+error[E0107]: wrong number of type arguments: expected 0, found 1\n+  --> $DIR/macro-fail.rs:44:25\n+   |\n+LL |   let _fail = Example::<gimme_a_const!()>;\n+   |                         ^^^^^^^^^^^^^^^^ unexpected type argument\n+\n+error: aborting due to 12 previous errors\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "85ecce551d405f06d2d5ea805deb7326f13a44c2", "filename": "src/test/ui/const-generics/min_const_generics/macro.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -0,0 +1,57 @@\n+// run-pass\n+#![feature(min_const_generics)]\n+\n+struct Example<const N: usize>;\n+\n+macro_rules! external_macro {\n+  () => {{\n+    const X: usize = 1337;\n+    X\n+  }}\n+}\n+\n+trait Marker<const N: usize> {}\n+impl<const N: usize> Marker<N> for Example<N> {}\n+\n+fn make_marker() -> impl Marker<{\n+    #[macro_export]\n+    macro_rules! const_macro { () => {{ 3 }} }; inline!()\n+}> {\n+  Example::<{ const_macro!() }>\n+}\n+\n+fn from_marker(_: impl Marker<{\n+    #[macro_export]\n+    macro_rules! inline { () => {{ 3 }} }; inline!()\n+}>) {}\n+\n+fn main() {\n+  let _ok = Example::<{\n+    #[macro_export]\n+    macro_rules! gimme_a_const {\n+      ($rusty: ident) => {{ let $rusty = 3; *&$rusty }}\n+    };\n+    gimme_a_const!(run)\n+  }>;\n+\n+  let _ok = Example::<{ external_macro!() }>;\n+\n+  let _ok: [_; gimme_a_const!(blah)] = [0,0,0];\n+  let _ok: [[u8; gimme_a_const!(blah)]; gimme_a_const!(blah)];\n+  let _ok: [u8; gimme_a_const!(blah)];\n+\n+  let _ok: [u8; {\n+    #[macro_export]\n+    macro_rules! const_two { () => {{ 2 }} };\n+    const_two!()\n+  }];\n+\n+  let _ok = [0; {\n+    #[macro_export]\n+    macro_rules! const_three { () => {{ 3 }} };\n+    const_three!()\n+  }];\n+  let _ok = [0; const_three!()];\n+\n+  from_marker(make_marker());\n+}"}, {"sha": "07970b457a303070ee7db87d981d72869a3ef8e1", "filename": "src/test/ui/consts/const-block-non-item-statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-block-non-item-statement.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n enum Foo {\n     Bar = { let x = 1; 3 }"}, {"sha": "ea5c9ddc7ced32bc11b54441c1a3d25a4553da78", "filename": "src/test/ui/consts/const-fn-destructuring-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-destructuring-arg.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n const fn i((a, b): (u32, u32)) -> u32 {\n     a + b"}, {"sha": "b83acfb73cfc190c6dad58b2416ec43cb7f7863b", "filename": "src/test/ui/consts/const_let_assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n struct S(i32);\n "}, {"sha": "28265c85dd1f12add2f406221838959b58444f18", "filename": "src/test/ui/consts/const_let_assign2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign2.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -1,4 +1,4 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n pub struct AA {\n     pub data: [u8; 10],"}, {"sha": "6871977c79831c544e15c7f36c51a201bead3c67", "filename": "src/test/ui/default-alloc-error-hook.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fdefault-alloc-error-hook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fdefault-alloc-error-hook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdefault-alloc-error-hook.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -16,5 +16,5 @@ fn main() {\n     let me = env::current_exe().unwrap();\n     let output = Command::new(&me).arg(\"next\").output().unwrap();\n     assert!(!output.status.success(), \"{:?} is a success\", output.status);\n-    assert_eq!(str::from_utf8(&output.stderr).unwrap(), \"memory allocation of 42 bytes failed\");\n+    assert_eq!(str::from_utf8(&output.stderr).unwrap(), \"memory allocation of 42 bytes failed\\n\");\n }"}, {"sha": "2456d6a147488e68f87b5db6fd10dc366d23388d", "filename": "src/test/ui/issues/issue-76547.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fissues%2Fissue-76547.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fissues%2Fissue-76547.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76547.nll.stderr?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -0,0 +1,20 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-76547.rs:19:14\n+   |\n+LL | async fn fut(bufs: &mut [&mut [u8]]) {\n+   |              ^^^^  -     - let's call the lifetime of this reference `'2`\n+   |              |     |\n+   |              |     let's call the lifetime of this reference `'1`\n+   |              assignment requires that `'1` must outlive `'2`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-76547.rs:33:15\n+   |\n+LL | async fn fut2(bufs: &mut [&mut [u8]]) -> i32 {\n+   |               ^^^^  -     - let's call the lifetime of this reference `'2`\n+   |               |     |\n+   |               |     let's call the lifetime of this reference `'1`\n+   |               assignment requires that `'1` must outlive `'2`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "5b3ee5b95c4cb49356a53e5267db038d3333a6cb", "filename": "src/test/ui/issues/issue-76547.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fissues%2Fissue-76547.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fissues%2Fissue-76547.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76547.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -0,0 +1,38 @@\n+// Test for diagnostic improvement issue #76547\n+// edition:2018\n+\n+use std::{\n+    future::Future,\n+    task::{Context, Poll}\n+};\n+use std::pin::Pin;\n+\n+pub struct ListFut<'a>(&'a mut [&'a mut [u8]]);\n+impl<'a> Future for ListFut<'a> {\n+    type Output = ();\n+\n+    fn poll(self: Pin<&mut Self>, _cx: &mut Context) -> Poll<Self::Output> {\n+        unimplemented!()\n+    }\n+}\n+\n+async fn fut(bufs: &mut [&mut [u8]]) {\n+    ListFut(bufs).await\n+    //~^ ERROR lifetime mismatch\n+}\n+\n+pub struct ListFut2<'a>(&'a mut [&'a mut [u8]]);\n+impl<'a> Future for ListFut2<'a> {\n+    type Output = i32;\n+\n+    fn poll(self: Pin<&mut Self>, _cx: &mut Context) -> Poll<Self::Output> {\n+        unimplemented!()\n+    }\n+}\n+\n+async fn fut2(bufs: &mut [&mut [u8]]) -> i32 {\n+    ListFut2(bufs).await\n+    //~^ ERROR lifetime mismatch\n+}\n+\n+fn main() {}"}, {"sha": "9bfb0f28028cb823a1e336e5c8ec61dfb71a558c", "filename": "src/test/ui/issues/issue-76547.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fissues%2Fissue-76547.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fissues%2Fissue-76547.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76547.stderr?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -0,0 +1,25 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/issue-76547.rs:20:13\n+   |\n+LL | async fn fut(bufs: &mut [&mut [u8]]) {\n+   |                          ---------   -\n+   |                          |           |\n+   |                          |           this `async fn` implicitly returns an `impl Future<Output = ()>`\n+   |                          this parameter and the returned future are declared with different lifetimes...\n+LL |     ListFut(bufs).await\n+   |             ^^^^ ...but data from `bufs` is held across an await point here\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/issue-76547.rs:34:14\n+   |\n+LL | async fn fut2(bufs: &mut [&mut [u8]]) -> i32 {\n+   |                           ---------      ---\n+   |                           |              |\n+   |                           |              this `async fn` implicitly returns an `impl Future<Output = i32>`\n+   |                           this parameter and the returned future are declared with different lifetimes...\n+LL |     ListFut2(bufs).await\n+   |              ^^^^ ...but data from `bufs` is held across an await point here\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0623`."}, {"sha": "9d1fae7a234feb1dd5c5b5b891fca7d5bf78feb9", "filename": "src/test/ui/macros/issue-78892-substitution-in-statement-attr.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fmacros%2Fissue-78892-substitution-in-statement-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fmacros%2Fissue-78892-substitution-in-statement-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-78892-substitution-in-statement-attr.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+// regression test for #78892\n+\n+macro_rules! mac {\n+    ($lint_name:ident) => {{\n+        #[allow($lint_name)]\n+        let _ = ();\n+    }};\n+}\n+\n+fn main() {\n+    mac!(dead_code)\n+}"}, {"sha": "72d82da45344e70a487ca92b235e5d105bd584d7", "filename": "src/test/ui/regions/region-bound-extra-bound-in-inherent-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregion-bound-extra-bound-in-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregion-bound-extra-bound-in-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-bound-extra-bound-in-inherent-impl.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -1,7 +1,7 @@\n // Test related to #22779. In this case, the impl is an inherent impl,\n // so it doesn't have to match any trait, so no error results.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n \n struct MySlice<'a, T:'a>(&'a mut [T]);"}, {"sha": "68056370c44892952ffe1e7fddc11b0d3eeb4f81", "filename": "src/test/ui/regions/region-bound-same-bounds-in-trait-and-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregion-bound-same-bounds-in-trait-and-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregion-bound-same-bounds-in-trait-and-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-bound-same-bounds-in-trait-and-impl.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -1,7 +1,7 @@\n // Test related to #22779, but where the `'a:'b` relation\n // appears in the trait too. No error here.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n trait Tr<'a, T> {\n     fn renew<'b: 'a>(self) -> &'b mut [T] where 'a: 'b;"}, {"sha": "ddf3be690dd79d8eacc51aa8d41aa39314f6ad16", "filename": "src/test/ui/regions/region-object-lifetime-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-1.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -1,7 +1,7 @@\n // Various tests related to testing how region inference works\n // with respect to the object receivers.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(warnings)]\n \n trait Foo {"}, {"sha": "0536fa2a20f450829660521b2272eb6f118b8702", "filename": "src/test/ui/regions/region-object-lifetime-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-3.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -1,7 +1,7 @@\n // Various tests related to testing how region inference works\n // with respect to the object receivers.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(warnings)]\n \n trait Foo {"}, {"sha": "a481a9cc5fe8e4f223476ffb4df68e083bbc1202", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-2.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2,7 +2,7 @@\n // \"projection gap\": in this test, we know that `T: 'x`, and that is\n // enough to conclude that `T::Foo: 'x`.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "a627cbbd88f1881d3b3d9a448ce4e1ae8c4cef61", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-3.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2,7 +2,7 @@\n // \"projection gap\": in this test, we know that `T::Foo: 'x`, and that\n // is (naturally) enough to conclude that `T::Foo: 'x`.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "5158c2893404dd6ff62bc1bb6ee8046dba071b02", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-4.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2,7 +2,7 @@\n // \"projection gap\": in this test, we know that `T: 'x`, and that\n // is (naturally) enough to conclude that `T: 'x`.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n #![allow(unused_variables)]\n "}, {"sha": "15deaba5638aa1a8b95b58ddc5d1fbce999fc871", "filename": "src/test/ui/regions/regions-outlives-nominal-type-enum-region-rev.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region-rev.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -3,7 +3,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "7767c13c825b30ace67327236c3a0182096666bf", "filename": "src/test/ui/regions/regions-outlives-nominal-type-enum-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-region.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -3,7 +3,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "37415994210cda57ff18a3fb8242333dfca5fd22", "filename": "src/test/ui/regions/regions-outlives-nominal-type-enum-type-rev.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type-rev.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -3,7 +3,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "2e7f198d8c7c22feddec6bb6b6acbb28baacc9dc", "filename": "src/test/ui/regions/regions-outlives-nominal-type-enum-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-enum-type.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -3,7 +3,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "45155c7216603846716cd9d59e482c91c6589441", "filename": "src/test/ui/regions/regions-outlives-nominal-type-struct-region-rev.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region-rev.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -3,7 +3,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "bba8b2445249676b45a08bb2ecb0d3c5f6d4ad97", "filename": "src/test/ui/regions/regions-outlives-nominal-type-struct-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-region.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -3,7 +3,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "220d2e83cc0a68dd17270e536002444803b5cad0", "filename": "src/test/ui/regions/regions-outlives-nominal-type-struct-type-rev.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type-rev.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -3,7 +3,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "9ddcdb649d8ddcef6ac87198d32dbe29601fc60e", "filename": "src/test/ui/regions/regions-outlives-nominal-type-struct-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-nominal-type-struct-type.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -3,7 +3,7 @@\n //\n // Rule OutlivesNominalType from RFC 1214.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]"}, {"sha": "5f9700df1cbd6bc84b30ff1c6aad8267044c807b", "filename": "src/test/ui/regions/regions-outlives-projection-hrtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-hrtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-hrtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-hrtype.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -5,7 +5,7 @@\n // `'r` is bound, that leads to badness. This test checks that\n // everything works.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n \n trait TheTrait {"}, {"sha": "5c37a585a40b1c0fd9d83cad856a81338d714c8e", "filename": "src/test/ui/regions/regions-outlives-projection-trait-def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-trait-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-trait-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-trait-def.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -1,7 +1,7 @@\n // Test that `<F as Foo<'a>>::Type: 'b`, where `trait Foo<'a> { Type:\n // 'a; }`, does not require that `F: 'b`.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n \n trait SomeTrait<'a> {"}, {"sha": "ce34ffcc858151317e3fbd87379add0dd3bc3789", "filename": "src/test/ui/regions/regions-outlives-scalar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-scalar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-scalar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-scalar.rs?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -1,7 +1,7 @@\n // Test that scalar values outlive all regions.\n // Rule OutlivesScalar from RFC 1214.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// check-pass\n #![allow(dead_code)]\n \n struct Foo<'a> {"}, {"sha": "e6846fb40494faf3f33c08a05b95f5810fe1bb65", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.stderr", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -2,25 +2,28 @@ error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:52\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                          ----               ----   ^ ...but data from `f` is returned here\n-   |                          |\n-   |                          this parameter and the return type are declared with different lifetimes...\n+   |                          ----               ----   ^ ...but data from `f` is held across an await point here\n+   |                          |                  |\n+   |                          |                  this `async fn` implicitly returns an `impl Future<Output = &Foo>`\n+   |                          this parameter and the returned future are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:82\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                          -----                        -----------------          ^ ...but data from `f` is returned here\n-   |                          |\n-   |                          this parameter and the return type are declared with different lifetimes...\n+   |                          -----                        -----------------          ^ ...but data from `f` is held across an await point here\n+   |                          |                            |\n+   |                          |                            this `async fn` implicitly returns an `impl Future<Output = (Pin<&Foo>, &Foo)>`\n+   |                          this parameter and the returned future are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:64\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n-   |                                  -----                   ---   ^^^ ...but data from `arg` is returned here\n-   |                                  |\n-   |                                  this parameter and the return type are declared with different lifetimes...\n+   |                                  -----                   ---   ^^^ ...but data from `arg` is held across an await point here\n+   |                                  |                       |\n+   |                                  |                       this `async fn` implicitly returns an `impl Future<Output = &()>`\n+   |                                  this parameter and the returned future are declared with different lifetimes...\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3221d27085096ed6add6e183d8f421de1b42abca", "filename": "src/test/ui/self/elision/lt-ref-self-async.stderr", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -3,60 +3,66 @@ error[E0623]: lifetime mismatch\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       -----              ----\n-   |                       |\n-   |                       this parameter and the return type are declared with different lifetimes...\n+   |                       |                  |\n+   |                       |                  this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                       this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -----              ----\n-   |                             |\n-   |                             this parameter and the return type are declared with different lifetimes...\n+   |                             |                  |\n+   |                             |                  this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                             this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ----\n-   |                                     |\n-   |                                     this parameter and the return type are declared with different lifetimes...\n+   |                                     |                   |\n+   |                                     |                   this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                     this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ----\n-   |                                     |\n-   |                                     this parameter and the return type are declared with different lifetimes...\n+   |                                     |                   |\n+   |                                     |                   this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                     this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ----\n-   |                                             |\n-   |                                             this parameter and the return type are declared with different lifetimes...\n+   |                                             |                    |\n+   |                                             |                    this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                             this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/lt-ref-self-async.rs:35:9\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                         -----                ----\n-   |                                         |\n-   |                                         this parameter and the return type are declared with different lifetimes...\n+   |                                         |                    |\n+   |                                         |                    this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                         this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error: aborting due to 6 previous errors\n "}, {"sha": "b6ca986923d2e8c5736a0b34f707972a954e0574", "filename": "src/test/ui/self/elision/ref-mut-self-async.stderr", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -3,60 +3,66 @@ error[E0623]: lifetime mismatch\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                       ---------              ----\n-   |                       |\n-   |                       this parameter and the return type are declared with different lifetimes...\n+   |                       |                      |\n+   |                       |                      this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                       this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                             ---------              ----\n-   |                             |\n-   |                             this parameter and the return type are declared with different lifetimes...\n+   |                             |                      |\n+   |                             |                      this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                             this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                     ---------               ----\n-   |                                     |\n-   |                                     this parameter and the return type are declared with different lifetimes...\n+   |                                     |                       |\n+   |                                     |                       this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                     this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                     ---------               ----\n-   |                                     |\n-   |                                     this parameter and the return type are declared with different lifetimes...\n+   |                                     |                       |\n+   |                                     |                       this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                     this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                             ---------                ----\n-   |                                             |\n-   |                                             this parameter and the return type are declared with different lifetimes...\n+   |                                             |                        |\n+   |                                             |                        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                             this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-self-async.rs:35:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                             ---------                ----\n-   |                                             |\n-   |                                             this parameter and the return type are declared with different lifetimes...\n+   |                                             |                        |\n+   |                                             |                        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                             this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error: aborting due to 6 previous errors\n "}, {"sha": "eda15d76390b66d2d9f2adcd9da9ff436d0d0e36", "filename": "src/test/ui/self/elision/ref-mut-struct-async.stderr", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -3,50 +3,55 @@ error[E0623]: lifetime mismatch\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                               -----------              ----\n-   |                               |\n-   |                               this parameter and the return type are declared with different lifetimes...\n+   |                               |                        |\n+   |                               |                        this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                               this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -----------               ----\n-   |                                       |\n-   |                                       this parameter and the return type are declared with different lifetimes...\n+   |                                       |                         |\n+   |                                       |                         this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                       this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -----------               ----\n-   |                                       |\n-   |                                       this parameter and the return type are declared with different lifetimes...\n+   |                                       |                         |\n+   |                                       |                         this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                       this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -----------                ----\n-   |                                               |\n-   |                                               this parameter and the return type are declared with different lifetimes...\n+   |                                               |                          |\n+   |                                               |                          this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                               this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-mut-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -----------                ----\n-   |                                               |\n-   |                                               this parameter and the return type are declared with different lifetimes...\n+   |                                               |                          |\n+   |                                               |                          this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                               this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error: aborting due to 5 previous errors\n "}, {"sha": "b42caa88c6fef26df3e5f617cac6e96c27568b35", "filename": "src/test/ui/self/elision/ref-self-async.stderr", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -3,70 +3,77 @@ error[E0623]: lifetime mismatch\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       -----              ----\n-   |                       |\n-   |                       this parameter and the return type are declared with different lifetimes...\n+   |                       |                  |\n+   |                       |                  this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                       this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:29:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -----              ----\n-   |                             |\n-   |                             this parameter and the return type are declared with different lifetimes...\n+   |                             |                  |\n+   |                             |                  this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                             this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:33:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ----\n-   |                                     |\n-   |                                     this parameter and the return type are declared with different lifetimes...\n+   |                                     |                   |\n+   |                                     |                   this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                     this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:37:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ----\n-   |                                     |\n-   |                                     this parameter and the return type are declared with different lifetimes...\n+   |                                     |                   |\n+   |                                     |                   this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                     this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:41:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ----\n-   |                                             |\n-   |                                             this parameter and the return type are declared with different lifetimes...\n+   |                                             |                    |\n+   |                                             |                    this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                             this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:45:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ----\n-   |                                             |\n-   |                                             this parameter and the return type are declared with different lifetimes...\n+   |                                             |                    |\n+   |                                             |                    this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                             this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-self-async.rs:49:9\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                            -----                    ---\n-   |                                            |\n-   |                                            this parameter and the return type are declared with different lifetimes...\n+   |                                            |                        |\n+   |                                            |                        this `async fn` implicitly returns an `impl Future<Output = &u8>`\n+   |                                            this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error: aborting due to 7 previous errors\n "}, {"sha": "599becd308062631ee7bcca793c8217b6782ca29", "filename": "src/test/ui/self/elision/ref-struct-async.stderr", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/38030ffb4e735b26260848b744c0910a5641e1db/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr?ref=38030ffb4e735b26260848b744c0910a5641e1db", "patch": "@@ -3,50 +3,55 @@ error[E0623]: lifetime mismatch\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                               -------              ----\n-   |                               |\n-   |                               this parameter and the return type are declared with different lifetimes...\n+   |                               |                    |\n+   |                               |                    this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                               this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                       -------               ----\n-   |                                       |\n-   |                                       this parameter and the return type are declared with different lifetimes...\n+   |                                       |                     |\n+   |                                       |                     this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                       this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                       -------               ----\n-   |                                       |\n-   |                                       this parameter and the return type are declared with different lifetimes...\n+   |                                       |                     |\n+   |                                       |                     this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                       this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                               -------                ----\n-   |                                               |\n-   |                                               this parameter and the return type are declared with different lifetimes...\n+   |                                               |                      |\n+   |                                               |                      this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                               this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error[E0623]: lifetime mismatch\n   --> $DIR/ref-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                           -------                ----\n-   |                                           |\n-   |                                           this parameter and the return type are declared with different lifetimes...\n+   |                                           |                      |\n+   |                                           |                      this `async fn` implicitly returns an `impl Future<Output = &u32>`\n+   |                                           this parameter and the returned future are declared with different lifetimes...\n LL |         f\n-   |         ^ ...but data from `f` is returned here\n+   |         ^ ...but data from `f` is held across an await point here\n \n error: aborting due to 5 previous errors\n "}]}