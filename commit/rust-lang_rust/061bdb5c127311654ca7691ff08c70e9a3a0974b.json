{"sha": "061bdb5c127311654ca7691ff08c70e9a3a0974b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MWJkYjVjMTI3MzExNjU0Y2E3NjkxZmYwOGM3MGU5YTNhMDk3NGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-06T23:42:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-06T23:42:17Z"}, "message": "Auto merge of #46524 - eddyb:static-static, r=arielb1\n\nrustc_mir: promote references of statics from other statics.\n\nFixes #46522 by also allowing `STATIC_REF` in MIR const-qualification, not just AST rvalue promotion.", "tree": {"sha": "e024604d36ad86e113c2f1cb2fd932a550923e89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e024604d36ad86e113c2f1cb2fd932a550923e89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/061bdb5c127311654ca7691ff08c70e9a3a0974b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/061bdb5c127311654ca7691ff08c70e9a3a0974b", "html_url": "https://github.com/rust-lang/rust/commit/061bdb5c127311654ca7691ff08c70e9a3a0974b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/061bdb5c127311654ca7691ff08c70e9a3a0974b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4", "html_url": "https://github.com/rust-lang/rust/commit/5a2465e2b44ecdd3b5d835c0abe29e9a4c9dcfe4"}, {"sha": "292c6ac57f6a805091ac4384c3e5ba410a3c5fa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/292c6ac57f6a805091ac4384c3e5ba410a3c5fa2", "html_url": "https://github.com/rust-lang/rust/commit/292c6ac57f6a805091ac4384c3e5ba410a3c5fa2"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "2b2323928efba23aeac1b5a8dfcfd53eb2f859da", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/061bdb5c127311654ca7691ff08c70e9a3a0974b/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061bdb5c127311654ca7691ff08c70e9a3a0974b/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=061bdb5c127311654ca7691ff08c70e9a3a0974b", "patch": "@@ -41,6 +41,9 @@ use transform::{MirPass, MirSource};\n use super::promote_consts::{self, Candidate, TempState};\n \n bitflags! {\n+    // Borrows of temporaries can be promoted only if\n+    // they have none of these qualifications, with\n+    // the exception of `STATIC_REF` (in statics only).\n     struct Qualif: u8 {\n         // Constant containing interior mutability (UnsafeCell).\n         const MUTABLE_INTERIOR  = 1 << 0;\n@@ -65,10 +68,6 @@ bitflags! {\n         // promote_consts decided they weren't simple enough.\n         const NOT_PROMOTABLE    = 1 << 6;\n \n-        // Borrows of temporaries can be promoted only\n-        // if they have none of the above qualifications.\n-        const NEVER_PROMOTE     = 0b111_1111;\n-\n         // Const items can only have MUTABLE_INTERIOR\n         // and NOT_PROMOTABLE without producing an error.\n         const CONST_ERROR       = !Qualif::MUTABLE_INTERIOR.bits &\n@@ -197,7 +196,17 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n         self.add(original);\n     }\n \n-    /// Check if an Place with the current qualifications could\n+    /// Check if a Local with the current qualifications is promotable.\n+    fn can_promote(&mut self) -> bool {\n+        // References to statics are allowed, but only in other statics.\n+        if self.mode == Mode::Static || self.mode == Mode::StaticMut {\n+            (self.qualif - Qualif::STATIC_REF).is_empty()\n+        } else {\n+            self.qualif.is_empty()\n+        }\n+    }\n+\n+    /// Check if a Place with the current qualifications could\n     /// be consumed, by either an operand or a Deref projection.\n     fn try_consume(&mut self) -> bool {\n         if self.qualif.intersects(Qualif::STATIC) && self.mode != Mode::Fn {\n@@ -633,7 +642,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n \n                 // We might have a candidate for promotion.\n                 let candidate = Candidate::Ref(location);\n-                if !self.qualif.intersects(Qualif::NEVER_PROMOTE) {\n+                if self.can_promote() {\n                     // We can only promote direct borrows of temps.\n                     if let Place::Local(local) = *place {\n                         if self.mir.local_kind(local) == LocalKind::Temp {\n@@ -745,7 +754,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     this.visit_operand(arg, location);\n                     if is_shuffle && i == 2 && this.mode == Mode::Fn {\n                         let candidate = Candidate::ShuffleIndices(bb);\n-                        if !this.qualif.intersects(Qualif::NEVER_PROMOTE) {\n+                        if this.can_promote() {\n                             this.promotion_candidates.push(candidate);\n                         } else {\n                             span_err!(this.tcx.sess, this.span, E0526,"}, {"sha": "d0f8ed96f4cb345b517d0ba897d7349ad4d32c8f", "filename": "src/test/run-pass/issue-44373.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/061bdb5c127311654ca7691ff08c70e9a3a0974b/src%2Ftest%2Frun-pass%2Fissue-44373.rs", "raw_url": "https://github.com/rust-lang/rust/raw/061bdb5c127311654ca7691ff08c70e9a3a0974b/src%2Ftest%2Frun-pass%2Fissue-44373.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-44373.rs?ref=061bdb5c127311654ca7691ff08c70e9a3a0974b", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Z borrowck=compare\n+\n struct Foo(bool);\n \n struct Container(&'static [&'static Foo]);"}]}