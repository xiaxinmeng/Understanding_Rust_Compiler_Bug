{"sha": "2bb7e1e6edf58c39faabb67cfab63dd8109d8055", "node_id": "C_kwDOAAsO6NoAKDJiYjdlMWU2ZWRmNThjMzlmYWFiYjY3Y2ZhYjYzZGQ4MTA5ZDgwNTU", "commit": {"author": {"name": "YOSHIOKA Takuma", "email": "nop_thread@nops.red", "date": "2022-08-09T16:51:38Z"}, "committer": {"name": "YOSHIOKA Takuma", "email": "nop_thread@nops.red", "date": "2022-08-09T16:51:38Z"}, "message": "Guarantee `try_reserve` preserves the contents on error\n\nUpdate doc comments to make the guarantee explicit. However, some\nimplementations does not have the statement though.\n\n* `HashMap`, `HashSet`: require guarantees on hashbrown side.\n* `PathBuf`: simply redirecting to `OsString`.\n\nFixes #99606.", "tree": {"sha": "23f38608220364faa9a7b8887c70ca10d3cec27c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23f38608220364faa9a7b8887c70ca10d3cec27c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bb7e1e6edf58c39faabb67cfab63dd8109d8055", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQScvWaYiMMUAm6BQfbvIFmitkUY1wUCYvKQnQAKCRDvIFmitkUY\n1xBUAQCrZ2nrJAs47deuQCwqI6pqqEiaEbwUfGbt4DTq6ETN6wD/REqwFwdcafBH\nUA66WxDjq3uwxe3MjG/aZcMWMG3okAA=\n=oun8\n-----END PGP SIGNATURE-----", "payload": "tree 23f38608220364faa9a7b8887c70ca10d3cec27c\nparent cc4dd6fc9f1a5c798df269933c7e442b79661a86\nauthor YOSHIOKA Takuma <nop_thread@nops.red> 1660063898 +0900\ncommitter YOSHIOKA Takuma <nop_thread@nops.red> 1660063898 +0900\n\nGuarantee `try_reserve` preserves the contents on error\n\nUpdate doc comments to make the guarantee explicit. However, some\nimplementations does not have the statement though.\n\n* `HashMap`, `HashSet`: require guarantees on hashbrown side.\n* `PathBuf`: simply redirecting to `OsString`.\n\nFixes #99606.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bb7e1e6edf58c39faabb67cfab63dd8109d8055", "html_url": "https://github.com/rust-lang/rust/commit/2bb7e1e6edf58c39faabb67cfab63dd8109d8055", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bb7e1e6edf58c39faabb67cfab63dd8109d8055/comments", "author": {"login": "lo48576", "id": 1246590, "node_id": "MDQ6VXNlcjEyNDY1OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1246590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lo48576", "html_url": "https://github.com/lo48576", "followers_url": "https://api.github.com/users/lo48576/followers", "following_url": "https://api.github.com/users/lo48576/following{/other_user}", "gists_url": "https://api.github.com/users/lo48576/gists{/gist_id}", "starred_url": "https://api.github.com/users/lo48576/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lo48576/subscriptions", "organizations_url": "https://api.github.com/users/lo48576/orgs", "repos_url": "https://api.github.com/users/lo48576/repos", "events_url": "https://api.github.com/users/lo48576/events{/privacy}", "received_events_url": "https://api.github.com/users/lo48576/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lo48576", "id": 1246590, "node_id": "MDQ6VXNlcjEyNDY1OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1246590?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lo48576", "html_url": "https://github.com/lo48576", "followers_url": "https://api.github.com/users/lo48576/followers", "following_url": "https://api.github.com/users/lo48576/following{/other_user}", "gists_url": "https://api.github.com/users/lo48576/gists{/gist_id}", "starred_url": "https://api.github.com/users/lo48576/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lo48576/subscriptions", "organizations_url": "https://api.github.com/users/lo48576/orgs", "repos_url": "https://api.github.com/users/lo48576/repos", "events_url": "https://api.github.com/users/lo48576/events{/privacy}", "received_events_url": "https://api.github.com/users/lo48576/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc4dd6fc9f1a5c798df269933c7e442b79661a86", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4dd6fc9f1a5c798df269933c7e442b79661a86", "html_url": "https://github.com/rust-lang/rust/commit/cc4dd6fc9f1a5c798df269933c7e442b79661a86"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "4583bc9a158efc02c059e239c40962faf529f9ce", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2bb7e1e6edf58c39faabb67cfab63dd8109d8055/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb7e1e6edf58c39faabb67cfab63dd8109d8055/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=2bb7e1e6edf58c39faabb67cfab63dd8109d8055", "patch": "@@ -1010,7 +1010,8 @@ impl<T> BinaryHeap<T> {\n     /// current length. The allocator may reserve more space to speculatively\n     /// avoid frequent allocations. After calling `try_reserve`, capacity will be\n     /// greater than or equal to `self.len() + additional` if it returns\n-    /// `Ok(())`. Does nothing if capacity is already sufficient.\n+    /// `Ok(())`. Does nothing if capacity is already sufficient. This method\n+    /// preserves the contents even if an error occurs.\n     ///\n     /// # Errors\n     ///"}, {"sha": "41b6b6e4f528861f1adf0f35e2b42119a4803f3c", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2bb7e1e6edf58c39faabb67cfab63dd8109d8055/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb7e1e6edf58c39faabb67cfab63dd8109d8055/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=2bb7e1e6edf58c39faabb67cfab63dd8109d8055", "patch": "@@ -794,7 +794,8 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// in the given deque. The collection may reserve more space to speculatively avoid\n     /// frequent reallocations. After calling `try_reserve`, capacity will be\n     /// greater than or equal to `self.len() + additional` if it returns\n-    /// `Ok(())`. Does nothing if capacity is already sufficient.\n+    /// `Ok(())`. Does nothing if capacity is already sufficient. This method\n+    /// preserves the contents even if an error occurs.\n     ///\n     /// # Errors\n     ///"}, {"sha": "dce0beb4fe730d8dd9508f1705d4d2269a81bd23", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2bb7e1e6edf58c39faabb67cfab63dd8109d8055/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb7e1e6edf58c39faabb67cfab63dd8109d8055/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=2bb7e1e6edf58c39faabb67cfab63dd8109d8055", "patch": "@@ -1080,7 +1080,8 @@ impl String {\n     /// current length. The allocator may reserve more space to speculatively\n     /// avoid frequent allocations. After calling `try_reserve`, capacity will be\n     /// greater than or equal to `self.len() + additional` if it returns\n-    /// `Ok(())`. Does nothing if capacity is already sufficient.\n+    /// `Ok(())`. Does nothing if capacity is already sufficient. This method\n+    /// preserves the contents even if an error occurs.\n     ///\n     /// # Errors\n     ///"}, {"sha": "27027fa3a6fad8da5b526629b91697df5ca09e90", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2bb7e1e6edf58c39faabb67cfab63dd8109d8055/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb7e1e6edf58c39faabb67cfab63dd8109d8055/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=2bb7e1e6edf58c39faabb67cfab63dd8109d8055", "patch": "@@ -875,7 +875,8 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// in the given `Vec<T>`. The collection may reserve more space to speculatively avoid\n     /// frequent reallocations. After calling `try_reserve`, capacity will be\n     /// greater than or equal to `self.len() + additional` if it returns\n-    /// `Ok(())`. Does nothing if capacity is already sufficient.\n+    /// `Ok(())`. Does nothing if capacity is already sufficient. This method\n+    /// preserves the contents even if an error occurs.\n     ///\n     /// # Errors\n     ///"}, {"sha": "80ed34157e6dcd24b221c81a9dd50a12827dc892", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2bb7e1e6edf58c39faabb67cfab63dd8109d8055/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb7e1e6edf58c39faabb67cfab63dd8109d8055/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=2bb7e1e6edf58c39faabb67cfab63dd8109d8055", "patch": "@@ -290,7 +290,8 @@ impl OsString {\n     /// in the given `OsString`. The string may reserve more space to speculatively avoid\n     /// frequent reallocations. After calling `try_reserve`, capacity will be\n     /// greater than or equal to `self.len() + additional` if it returns `Ok(())`.\n-    /// Does nothing if capacity is already sufficient.\n+    /// Does nothing if capacity is already sufficient. This method preserves\n+    /// the contents even if an error occurs.\n     ///\n     /// See the main `OsString` documentation information about encoding and capacity units.\n     ///"}, {"sha": "33e20756163fd8761989eb9cf209053909575ed5", "filename": "library/std/src/sys_common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2bb7e1e6edf58c39faabb67cfab63dd8109d8055/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb7e1e6edf58c39faabb67cfab63dd8109d8055/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs?ref=2bb7e1e6edf58c39faabb67cfab63dd8109d8055", "patch": "@@ -236,7 +236,8 @@ impl Wtf8Buf {\n     /// in the given `Wtf8Buf`. The `Wtf8Buf` may reserve more space to avoid\n     /// frequent reallocations. After calling `try_reserve`, capacity will be\n     /// greater than or equal to `self.len() + additional`. Does nothing if\n-    /// capacity is already sufficient.\n+    /// capacity is already sufficient. This method preserves the contents even\n+    /// if an error occurs.\n     ///\n     /// # Errors\n     ///"}]}