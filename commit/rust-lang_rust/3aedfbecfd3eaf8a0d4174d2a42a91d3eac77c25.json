{"sha": "3aedfbecfd3eaf8a0d4174d2a42a91d3eac77c25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZWRmYmVjZmQzZWFmOGEwZDQxNzRkMmE0MmE5MWQzZWFjNzdjMjU=", "commit": {"author": {"name": "Nathan Corbyn", "email": "me@nathancorbyn.com", "date": "2020-06-08T12:54:20Z"}, "committer": {"name": "Nathan Corbyn", "email": "me@nathancorbyn.com", "date": "2020-06-08T12:54:20Z"}, "message": "Enforce unwind invariants", "tree": {"sha": "eb8f8b7d2f4ceba23245733ef6fb40f31103a42a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb8f8b7d2f4ceba23245733ef6fb40f31103a42a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3aedfbecfd3eaf8a0d4174d2a42a91d3eac77c25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3aedfbecfd3eaf8a0d4174d2a42a91d3eac77c25", "html_url": "https://github.com/rust-lang/rust/commit/3aedfbecfd3eaf8a0d4174d2a42a91d3eac77c25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3aedfbecfd3eaf8a0d4174d2a42a91d3eac77c25/comments", "author": {"login": "doctorn", "id": 6421560, "node_id": "MDQ6VXNlcjY0MjE1NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6421560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doctorn", "html_url": "https://github.com/doctorn", "followers_url": "https://api.github.com/users/doctorn/followers", "following_url": "https://api.github.com/users/doctorn/following{/other_user}", "gists_url": "https://api.github.com/users/doctorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/doctorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doctorn/subscriptions", "organizations_url": "https://api.github.com/users/doctorn/orgs", "repos_url": "https://api.github.com/users/doctorn/repos", "events_url": "https://api.github.com/users/doctorn/events{/privacy}", "received_events_url": "https://api.github.com/users/doctorn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "doctorn", "id": 6421560, "node_id": "MDQ6VXNlcjY0MjE1NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6421560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doctorn", "html_url": "https://github.com/doctorn", "followers_url": "https://api.github.com/users/doctorn/followers", "following_url": "https://api.github.com/users/doctorn/following{/other_user}", "gists_url": "https://api.github.com/users/doctorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/doctorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doctorn/subscriptions", "organizations_url": "https://api.github.com/users/doctorn/orgs", "repos_url": "https://api.github.com/users/doctorn/repos", "events_url": "https://api.github.com/users/doctorn/events{/privacy}", "received_events_url": "https://api.github.com/users/doctorn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73558160933b2764ed9a84b1b2b647e128eac3f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/73558160933b2764ed9a84b1b2b647e128eac3f8", "html_url": "https://github.com/rust-lang/rust/commit/73558160933b2764ed9a84b1b2b647e128eac3f8"}], "stats": {"total": 60, "additions": 41, "deletions": 19}, "files": [{"sha": "339b1469f123727b31157ca975a8226041f9d985", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 41, "deletions": 19, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3aedfbecfd3eaf8a0d4174d2a42a91d3eac77c25/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3aedfbecfd3eaf8a0d4174d2a42a91d3eac77c25/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=3aedfbecfd3eaf8a0d4174d2a42a91d3eac77c25", "patch": "@@ -11,6 +11,11 @@ use rustc_middle::{\n };\n use rustc_span::def_id::DefId;\n \n+enum EdgeKind {\n+    Unwind,\n+    Other,\n+}\n+\n pub struct Validator {\n     /// Describes at which point in the pipeline this validation is happening.\n     pub when: String,\n@@ -49,8 +54,25 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         );\n     }\n \n-    fn check_bb(&self, location: Location, bb: BasicBlock) {\n-        if self.body.basic_blocks().get(bb).is_none() {\n+    fn check_bb(&self, location: Location, bb: BasicBlock, edge_kind: EdgeKind) {\n+        if let Some(bb) = self.body.basic_blocks().get(bb) {\n+            let src = self.body.basic_blocks().get(location.block).unwrap();\n+            match (src.is_cleanup, bb.is_cleanup, edge_kind) {\n+                // Non-cleanup blocks can jump to non-cleanup blocks along non-unwind edges\n+                (false, false, EdgeKind::Other)\n+                // Non-cleanup blocks can jump to cleanup blocks along unwind edges\n+                | (false, true, EdgeKind::Unwind)\n+                // Cleanup blocks can jump to cleanup blocks along unwind edges\n+                | (true, true, EdgeKind::Unwind) => {}\n+                // All other jumps are invalid\n+                _ => {\n+                    self.fail(\n+                        location,\n+                        format!(\"encountered jump that does not respect unwind invariants {:?}\", bb)\n+                    )\n+                }\n+            }\n+        } else {\n             self.fail(location, format!(\"encountered jump to invalid basic block {:?}\", bb))\n         }\n     }\n@@ -92,7 +114,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         match &terminator.kind {\n             TerminatorKind::Goto { target } => {\n-                self.check_bb(location, *target);\n+                self.check_bb(location, *target, EdgeKind::Other);\n             }\n             TerminatorKind::SwitchInt { targets, values, .. } => {\n                 if targets.len() != values.len() + 1 {\n@@ -106,19 +128,19 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n                 for target in targets {\n-                    self.check_bb(location, *target);\n+                    self.check_bb(location, *target, EdgeKind::Other);\n                 }\n             }\n             TerminatorKind::Drop { target, unwind, .. } => {\n-                self.check_bb(location, *target);\n+                self.check_bb(location, *target, EdgeKind::Other);\n                 if let Some(unwind) = unwind {\n-                    self.check_bb(location, *unwind);\n+                    self.check_bb(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::DropAndReplace { target, unwind, .. } => {\n-                self.check_bb(location, *target);\n+                self.check_bb(location, *target, EdgeKind::Other);\n                 if let Some(unwind) = unwind {\n-                    self.check_bb(location, *unwind);\n+                    self.check_bb(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::Call { func, destination, cleanup, .. } => {\n@@ -131,10 +153,10 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     ),\n                 }\n                 if let Some((_, target)) = destination {\n-                    self.check_bb(location, *target);\n+                    self.check_bb(location, *target, EdgeKind::Other);\n                 }\n                 if let Some(cleanup) = cleanup {\n-                    self.check_bb(location, *cleanup);\n+                    self.check_bb(location, *cleanup, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::Assert { cond, target, cleanup, .. } => {\n@@ -148,30 +170,30 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                         ),\n                     );\n                 }\n-                self.check_bb(location, *target);\n+                self.check_bb(location, *target, EdgeKind::Other);\n                 if let Some(cleanup) = cleanup {\n-                    self.check_bb(location, *cleanup);\n+                    self.check_bb(location, *cleanup, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::Yield { resume, drop, .. } => {\n-                self.check_bb(location, *resume);\n+                self.check_bb(location, *resume, EdgeKind::Other);\n                 if let Some(drop) = drop {\n-                    self.check_bb(location, *drop);\n+                    self.check_bb(location, *drop, EdgeKind::Other);\n                 }\n             }\n             TerminatorKind::FalseEdge { real_target, imaginary_target } => {\n-                self.check_bb(location, *real_target);\n-                self.check_bb(location, *imaginary_target);\n+                self.check_bb(location, *real_target, EdgeKind::Other);\n+                self.check_bb(location, *imaginary_target, EdgeKind::Other);\n             }\n             TerminatorKind::FalseUnwind { real_target, unwind } => {\n-                self.check_bb(location, *real_target);\n+                self.check_bb(location, *real_target, EdgeKind::Other);\n                 if let Some(unwind) = unwind {\n-                    self.check_bb(location, *unwind);\n+                    self.check_bb(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::InlineAsm { destination, .. } => {\n                 if let Some(destination) = destination {\n-                    self.check_bb(location, *destination);\n+                    self.check_bb(location, *destination, EdgeKind::Other);\n                 }\n             }\n             // Nothing to validate for these."}]}