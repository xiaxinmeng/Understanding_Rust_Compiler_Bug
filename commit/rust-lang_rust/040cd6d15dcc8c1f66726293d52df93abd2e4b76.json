{"sha": "040cd6d15dcc8c1f66726293d52df93abd2e4b76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MGNkNmQxNWRjYzhjMWY2NjcyNjI5M2Q1MmRmOTNhYmQyZTRiNzY=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-05-19T20:16:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-19T20:16:26Z"}, "message": "Rollup merge of #42100 - michaelwoerister:fix-osx-multi-cgu-debuginfo, r=jdm\n\ndebuginfo: Generate unique DW_AT_names for compilation units to work around OSX linker bug\n\nThis should fix issue #39160 and does not seem to cause any problems.\n\ncc @tromey, @Manishearth\n\nr? @jdm", "tree": {"sha": "58817f4ea75abe5821f5df9fc2b039be1bf9de84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58817f4ea75abe5821f5df9fc2b039be1bf9de84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/040cd6d15dcc8c1f66726293d52df93abd2e4b76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/040cd6d15dcc8c1f66726293d52df93abd2e4b76", "html_url": "https://github.com/rust-lang/rust/commit/040cd6d15dcc8c1f66726293d52df93abd2e4b76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/040cd6d15dcc8c1f66726293d52df93abd2e4b76/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ded76ca214a9786582e5dd0cb81408006daeef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ded76ca214a9786582e5dd0cb81408006daeef3", "html_url": "https://github.com/rust-lang/rust/commit/5ded76ca214a9786582e5dd0cb81408006daeef3"}, {"sha": "b5acbd3f0360b221e9885be4c99957272b0ede82", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5acbd3f0360b221e9885be4c99957272b0ede82", "html_url": "https://github.com/rust-lang/rust/commit/b5acbd3f0360b221e9885be4c99957272b0ede82"}], "stats": {"total": 101, "additions": 87, "deletions": 14}, "files": [{"sha": "c2f2c63790a4c64d04ec9e9ca93ffb175364fc24", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/040cd6d15dcc8c1f66726293d52df93abd2e4b76/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040cd6d15dcc8c1f66726293d52df93abd2e4b76/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=040cd6d15dcc8c1f66726293d52df93abd2e4b76", "patch": "@@ -375,7 +375,10 @@ impl<'a, 'tcx> LocalCrateContext<'a, 'tcx> {\n \n             let dbg_cx = if shared.tcx.sess.opts.debuginfo != NoDebugInfo {\n                 let dctx = debuginfo::CrateDebugContext::new(llmod);\n-                debuginfo::metadata::compile_unit_metadata(shared, &dctx, shared.tcx.sess);\n+                debuginfo::metadata::compile_unit_metadata(shared,\n+                                                           codegen_unit.name(),\n+                                                           &dctx,\n+                                                           shared.tcx.sess);\n                 Some(dctx)\n             } else {\n                 None"}, {"sha": "7d8b8161abe0282e2751b87ab95e20be3cb1c8e4", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/040cd6d15dcc8c1f66726293d52df93abd2e4b76/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040cd6d15dcc8c1f66726293d52df93abd2e4b76/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=040cd6d15dcc8c1f66726293d52df93abd2e4b76", "patch": "@@ -762,31 +762,38 @@ fn pointer_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n }\n \n pub fn compile_unit_metadata(scc: &SharedCrateContext,\n+                             codegen_unit_name: &str,\n                              debug_context: &CrateDebugContext,\n                              sess: &Session)\n                              -> DIDescriptor {\n-    let compile_unit_name = match sess.local_crate_source_file {\n-        None => fallback_path(scc),\n-        Some(ref path) => {\n-            CString::new(&path[..]).unwrap()\n-        }\n+    let mut name_in_debuginfo = match sess.local_crate_source_file {\n+        Some(ref path) => path.clone(),\n+        None => scc.tcx().crate_name(LOCAL_CRATE).to_string(),\n     };\n \n-    debug!(\"compile_unit_metadata: {:?}\", compile_unit_name);\n+    // The OSX linker has an idiosyncrasy where it will ignore some debuginfo\n+    // if multiple object files with the same DW_AT_name are linked together.\n+    // As a workaround we generate unique names for each object file. Those do\n+    // not correspond to an actual source file but that should be harmless.\n+    if scc.sess().target.target.options.is_like_osx {\n+        name_in_debuginfo.push_str(\"@\");\n+        name_in_debuginfo.push_str(codegen_unit_name);\n+    }\n+\n+    debug!(\"compile_unit_metadata: {:?}\", name_in_debuginfo);\n     // FIXME(#41252) Remove \"clang LLVM\" if we can get GDB and LLVM to play nice.\n     let producer = format!(\"clang LLVM (rustc version {})\",\n                            (option_env!(\"CFG_VERSION\")).expect(\"CFG_VERSION\"));\n \n-    let compile_unit_name = compile_unit_name.as_ptr();\n-\n+    let name_in_debuginfo = CString::new(name_in_debuginfo).unwrap();\n     let work_dir = CString::new(&sess.working_dir.0[..]).unwrap();\n     let producer = CString::new(producer).unwrap();\n     let flags = \"\\0\";\n     let split_name = \"\\0\";\n \n     unsafe {\n         let file_metadata = llvm::LLVMRustDIBuilderCreateFile(\n-            debug_context.builder, compile_unit_name, work_dir.as_ptr());\n+            debug_context.builder, name_in_debuginfo.as_ptr(), work_dir.as_ptr());\n \n         return llvm::LLVMRustDIBuilderCreateCompileUnit(\n             debug_context.builder,\n@@ -798,10 +805,6 @@ pub fn compile_unit_metadata(scc: &SharedCrateContext,\n             0,\n             split_name.as_ptr() as *const _)\n     };\n-\n-    fn fallback_path(scc: &SharedCrateContext) -> CString {\n-        CString::new(scc.tcx().crate_name(LOCAL_CRATE).to_string()).unwrap()\n-    }\n }\n \n struct MetadataCreationResult {"}, {"sha": "f4f9f92396f2c20d3fb822eba05b41b247cc116a", "filename": "src/test/debuginfo/multi-cgu.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/040cd6d15dcc8c1f66726293d52df93abd2e4b76/src%2Ftest%2Fdebuginfo%2Fmulti-cgu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040cd6d15dcc8c1f66726293d52df93abd2e4b76/src%2Ftest%2Fdebuginfo%2Fmulti-cgu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmulti-cgu.rs?ref=040cd6d15dcc8c1f66726293d52df93abd2e4b76", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case makes sure that we get proper break points for binaries\n+// compiled with multiple codegen units. (see #39160)\n+\n+\n+// min-lldb-version: 310\n+\n+// compile-flags:-g -Ccodegen-units=2\n+\n+// === GDB TESTS ===============================================================\n+\n+// gdb-command:run\n+\n+// gdb-command:print xxx\n+// gdb-check:$1 = 12345\n+// gdb-command:continue\n+\n+// gdb-command:print yyy\n+// gdb-check:$2 = 67890\n+// gdb-command:continue\n+\n+\n+// === LLDB TESTS ==============================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print xxx\n+// lldb-check:[...]$0 = 12345\n+// lldb-command:continue\n+\n+// lldb-command:print yyy\n+// lldb-check:[...]$1 = 67890\n+// lldb-command:continue\n+\n+\n+#![feature(omit_gdb_pretty_printer_section)]\n+#![omit_gdb_pretty_printer_section]\n+\n+mod a {\n+    pub fn foo(xxx: u32) {\n+        super::_zzz(); // #break\n+    }\n+}\n+\n+mod b {\n+    pub fn bar(yyy: u64) {\n+        super::_zzz(); // #break\n+    }\n+}\n+\n+fn main() {\n+    a::foo(12345);\n+    b::bar(67890);\n+}\n+\n+#[inline(never)]\n+fn _zzz() {}"}]}