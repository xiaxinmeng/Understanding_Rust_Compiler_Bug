{"sha": "8dacfc2adac25b8e749a19623ce4db543bb33306", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYWNmYzJhZGFjMjViOGU3NDlhMTk2MjNjZTRkYjU0M2JiMzMzMDY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T10:07:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-03T10:07:01Z"}, "message": "Rollup merge of #66651 - Areredify:on-unimplemented-scope, r=davidtwco\n\nAdd `enclosing scope` parameter to `rustc_on_unimplemented`\n\nAdds a new parameter to `#[rustc_on_unimplemented]`, `enclosing scope`, which highlights the function or closure scope with a message.\n\nThe wip part refers to adding this annotation to `Try` trait to improve ergonomics (which I don't know how to do since I change both std and librustc)\n\nCloses #61709.", "tree": {"sha": "4347631bddde91e7243e60aa55c196531388d59e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4347631bddde91e7243e60aa55c196531388d59e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dacfc2adac25b8e749a19623ce4db543bb33306", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd5jPGCRBK7hj4Ov3rIwAAdHIIAFQDQujsD1rg6YPfk5Y0BulI\niu4aQQ5ofi0MeQJSFHTPdmQo1NWwNRRgisrQV/rnrn3j2ceSmoAtkediXTm6/mpq\n6VMKp5Y5S+n70Ul7gxgKYofd7L1VKPa26NxX/gj7scW6ccfS1AMlCUwB9jGQccrV\nY2fh7QW2slt0EmkUdLPRvPxLw55ZPT7CwDGcrgVbW8953OY0dTDGaFJp8Xetu4jo\nT+AHkT4CVfypSo/ismG0Yg/kENwc4bLllQeAiMs7XgW4oeMN0QVGbG/Ec9douOMM\n7lCwkXRDsvFU831n7NSDoN0hm7UsUG6Joy+7RKBMC8M4z34P4zsDXv+j+f92S/A=\n=9Gts\n-----END PGP SIGNATURE-----\n", "payload": "tree 4347631bddde91e7243e60aa55c196531388d59e\nparent 3045d22263b88e17e3ff2e824b25d727d31dea6d\nparent 1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575367621 +0100\ncommitter GitHub <noreply@github.com> 1575367621 +0100\n\nRollup merge of #66651 - Areredify:on-unimplemented-scope, r=davidtwco\n\nAdd `enclosing scope` parameter to `rustc_on_unimplemented`\n\nAdds a new parameter to `#[rustc_on_unimplemented]`, `enclosing scope`, which highlights the function or closure scope with a message.\n\nThe wip part refers to adding this annotation to `Try` trait to improve ergonomics (which I don't know how to do since I change both std and librustc)\n\nCloses #61709.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dacfc2adac25b8e749a19623ce4db543bb33306", "html_url": "https://github.com/rust-lang/rust/commit/8dacfc2adac25b8e749a19623ce4db543bb33306", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dacfc2adac25b8e749a19623ce4db543bb33306/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3045d22263b88e17e3ff2e824b25d727d31dea6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3045d22263b88e17e3ff2e824b25d727d31dea6d", "html_url": "https://github.com/rust-lang/rust/commit/3045d22263b88e17e3ff2e824b25d727d31dea6d"}, {"sha": "1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9", "html_url": "https://github.com/rust-lang/rust/commit/1d0c015f9b5e4da3695ed23f269dc51a8d09b8a9"}], "stats": {"total": 272, "additions": 235, "deletions": 37}, "files": [{"sha": "a748ee87ef99aa7ff915a872092522b2a7c35d33", "filename": "src/libcore/ops/try.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Flibcore%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Flibcore%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ftry.rs?ref=8dacfc2adac25b8e749a19623ce4db543bb33306", "patch": "@@ -5,19 +5,20 @@\n /// extracting those success or failure values from an existing instance and\n /// creating a new instance from a success or failure value.\n #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-#[rustc_on_unimplemented(\n+#[cfg_attr(not(bootstrap), rustc_on_unimplemented(\n on(all(\n any(from_method=\"from_error\", from_method=\"from_ok\"),\n from_desugaring=\"QuestionMark\"),\n message=\"the `?` operator can only be used in {ItemContext} \\\n                that returns `Result` or `Option` \\\n                (or another type that implements `{Try}`)\",\n-label=\"cannot use the `?` operator in {ItemContext} that returns `{Self}`\"),\n+label=\"cannot use the `?` operator in {ItemContext} that returns `{Self}`\",\n+enclosing_scope=\"this function should return `Result` or `Option` to accept `?`\"),\n on(all(from_method=\"into_result\", from_desugaring=\"QuestionMark\"),\n message=\"the `?` operator can only be applied to values \\\n                that implement `{Try}`\",\n label=\"the `?` operator cannot be applied to type `{Self}`\")\n-)]\n+))]\n #[doc(alias = \"?\")]\n pub trait Try {\n     /// The type of this value when viewed as successful."}, {"sha": "ba44c6c3b9a1f27cd993131bd1fb6e6a29ad6276", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=8dacfc2adac25b8e749a19623ce4db543bb33306", "patch": "@@ -521,7 +521,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         ) {\n             command.evaluate(self.tcx, trait_ref, &flags[..])\n         } else {\n-            OnUnimplementedNote::empty()\n+            OnUnimplementedNote::default()\n         }\n     }\n \n@@ -697,6 +697,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         fallback_has_occurred: bool,\n         points_at_arg: bool,\n     ) {\n+        let tcx = self.tcx;\n         let span = obligation.cause.span;\n \n         let mut err = match *error {\n@@ -732,6 +733,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             message,\n                             label,\n                             note,\n+                            enclosing_scope,\n                         } = self.on_unimplemented_note(trait_ref, obligation);\n                         let have_alt_message = message.is_some() || label.is_some();\n                         let is_try = self.tcx.sess.source_map().span_to_snippet(span)\n@@ -798,6 +800,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             // If it has a custom `#[rustc_on_unimplemented]` note, let's display it\n                             err.note(s.as_str());\n                         }\n+                        if let Some(ref s) = enclosing_scope {\n+                            let enclosing_scope_span = tcx.def_span(\n+                                tcx.hir()\n+                                    .opt_local_def_id(obligation.cause.body_id)\n+                                    .unwrap_or_else(|| {\n+                                        tcx.hir().body_owner_def_id(hir::BodyId {\n+                                            hir_id: obligation.cause.body_id,\n+                                        })\n+                                    }),\n+                            );\n+\n+                            err.span_label(enclosing_scope_span, s.as_str());\n+                        }\n \n                         self.suggest_borrow_on_unsized_slice(&obligation.cause.code, &mut err);\n                         self.suggest_fn_call(&obligation, &mut err, &trait_ref, points_at_arg);"}, {"sha": "604f39dcf293b3503a82355461208a10251be27b", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=8dacfc2adac25b8e749a19623ce4db543bb33306", "patch": "@@ -22,18 +22,15 @@ pub struct OnUnimplementedDirective {\n     pub message: Option<OnUnimplementedFormatString>,\n     pub label: Option<OnUnimplementedFormatString>,\n     pub note: Option<OnUnimplementedFormatString>,\n+    pub enclosing_scope: Option<OnUnimplementedFormatString>,\n }\n \n+#[derive(Default)]\n pub struct OnUnimplementedNote {\n     pub message: Option<String>,\n     pub label: Option<String>,\n     pub note: Option<String>,\n-}\n-\n-impl OnUnimplementedNote {\n-    pub fn empty() -> Self {\n-        OnUnimplementedNote { message: None, label: None, note: None }\n-    }\n+    pub enclosing_scope: Option<String>,\n }\n \n fn parse_error(\n@@ -85,24 +82,33 @@ impl<'tcx> OnUnimplementedDirective {\n         let mut message = None;\n         let mut label = None;\n         let mut note = None;\n+        let mut enclosing_scope = None;\n         let mut subcommands = vec![];\n+\n+        let parse_value = |value_str| {\n+                OnUnimplementedFormatString::try_parse(tcx, trait_def_id, value_str, span)\n+                    .map(Some)\n+            };\n+\n         for item in item_iter {\n             if item.check_name(sym::message) && message.is_none() {\n                 if let Some(message_) = item.value_str() {\n-                    message = Some(OnUnimplementedFormatString::try_parse(\n-                        tcx, trait_def_id, message_, span)?);\n+                    message = parse_value(message_)?;\n                     continue;\n                 }\n             } else if item.check_name(sym::label) && label.is_none() {\n                 if let Some(label_) = item.value_str() {\n-                    label = Some(OnUnimplementedFormatString::try_parse(\n-                        tcx, trait_def_id, label_, span)?);\n+                    label = parse_value(label_)?;\n                     continue;\n                 }\n             } else if item.check_name(sym::note) && note.is_none() {\n                 if let Some(note_) = item.value_str() {\n-                    note = Some(OnUnimplementedFormatString::try_parse(\n-                        tcx, trait_def_id, note_, span)?);\n+                    note = parse_value(note_)?;\n+                    continue;\n+                }\n+            } else if item.check_name(sym::enclosing_scope) && enclosing_scope.is_none() {\n+                if let Some(enclosing_scope_) = item.value_str() {\n+                    enclosing_scope = parse_value(enclosing_scope_)?;\n                     continue;\n                 }\n             } else if item.check_name(sym::on) && is_root &&\n@@ -130,7 +136,14 @@ impl<'tcx> OnUnimplementedDirective {\n         if errored {\n             Err(ErrorReported)\n         } else {\n-            Ok(OnUnimplementedDirective { condition, message, label, subcommands, note })\n+            Ok(OnUnimplementedDirective {\n+                condition,\n+                subcommands,\n+                message,\n+                label,\n+                note,\n+                enclosing_scope\n+            })\n         }\n     }\n \n@@ -157,6 +170,7 @@ impl<'tcx> OnUnimplementedDirective {\n                 label: Some(OnUnimplementedFormatString::try_parse(\n                     tcx, trait_def_id, value, attr.span)?),\n                 note: None,\n+                enclosing_scope: None,\n             }))\n         } else {\n             return Err(ErrorReported);\n@@ -174,6 +188,7 @@ impl<'tcx> OnUnimplementedDirective {\n         let mut message = None;\n         let mut label = None;\n         let mut note = None;\n+        let mut enclosing_scope = None;\n         info!(\"evaluate({:?}, trait_ref={:?}, options={:?})\", self, trait_ref, options);\n \n         for command in self.subcommands.iter().chain(Some(self)).rev() {\n@@ -202,6 +217,10 @@ impl<'tcx> OnUnimplementedDirective {\n             if let Some(ref note_) = command.note {\n                 note = Some(note_.clone());\n             }\n+\n+            if let Some(ref enclosing_scope_) = command.enclosing_scope {\n+                enclosing_scope = Some(enclosing_scope_.clone());\n+            }\n         }\n \n         let options: FxHashMap<Symbol, String> = options.into_iter()\n@@ -211,6 +230,7 @@ impl<'tcx> OnUnimplementedDirective {\n             label: label.map(|l| l.format(tcx, trait_ref, &options)),\n             message: message.map(|m| m.format(tcx, trait_ref, &options)),\n             note: note.map(|n| n.format(tcx, trait_ref, &options)),\n+            enclosing_scope: enclosing_scope.map(|e_s| e_s.format(tcx, trait_ref, &options)),\n         }\n     }\n }"}, {"sha": "88a325112ac6c7867f5a6bf844fcc9f782216a18", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=8dacfc2adac25b8e749a19623ce4db543bb33306", "patch": "@@ -280,6 +280,7 @@ symbols! {\n         Err,\n         Eq,\n         Equal,\n+        enclosing_scope,\n         except,\n         exclusive_range_pattern,\n         exhaustive_integer_patterns,"}, {"sha": "46f8f41076bf59679b368ed13f7fb3aabc136b6f", "filename": "src/test/ui/async-await/try-on-option-in-async.stderr", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr?ref=8dacfc2adac25b8e749a19623ce4db543bb33306", "patch": "@@ -1,26 +1,44 @@\n error[E0277]: the `?` operator can only be used in an async block that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/try-on-option-in-async.rs:8:9\n    |\n-LL |         x?;\n-   |         ^^ cannot use the `?` operator in an async block that returns `{integer}`\n+LL |       async {\n+   |  ___________-\n+LL | |         let x: Option<u32> = None;\n+LL | |         x?;\n+   | |         ^^ cannot use the `?` operator in an async block that returns `{integer}`\n+LL | |         22\n+LL | |     }.await\n+   | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `{integer}`\n    = note: required by `std::ops::Try::from_error`\n \n error[E0277]: the `?` operator can only be used in an async closure that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/try-on-option-in-async.rs:16:9\n    |\n-LL |         x?;\n-   |         ^^ cannot use the `?` operator in an async closure that returns `u32`\n+LL |       let async_closure = async || {\n+   |  __________________________________-\n+LL | |         let x: Option<u32> = None;\n+LL | |         x?;\n+   | |         ^^ cannot use the `?` operator in an async closure that returns `u32`\n+LL | |         22_u32\n+LL | |     };\n+   | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `u32`\n    = note: required by `std::ops::Try::from_error`\n \n error[E0277]: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/try-on-option-in-async.rs:25:5\n    |\n-LL |     x?;\n-   |     ^^ cannot use the `?` operator in an async function that returns `u32`\n+LL |   async fn an_async_function() -> u32 {\n+   |  _____________________________________-\n+LL | |     let x: Option<u32> = None;\n+LL | |     x?;\n+   | |     ^^ cannot use the `?` operator in an async function that returns `u32`\n+LL | |     22\n+LL | | }\n+   | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `u32`\n    = note: required by `std::ops::Try::from_error`"}, {"sha": "881bff63f5f63974cebc462cf46fc7e6eafae95e", "filename": "src/test/ui/on-unimplemented/enclosing-scope.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.rs?ref=8dacfc2adac25b8e749a19623ce4db543bb33306", "patch": "@@ -0,0 +1,27 @@\n+// Test scope annotations from `enclosing_scope` parameter\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_on_unimplemented(enclosing_scope=\"in this scope\")]\n+trait Trait{}\n+\n+struct Foo;\n+\n+fn f<T: Trait>(x: T) {}\n+\n+fn main() {\n+    let x = || {\n+        f(Foo{}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n+        let y = || {\n+            f(Foo{}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n+        };\n+    };\n+\n+    {\n+        {\n+            f(Foo{}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n+        }\n+    }\n+\n+    f(Foo{}); //~ ERROR the trait bound `Foo: Trait` is not satisfied\n+}"}, {"sha": "092e560330b4c55b40bd48da96989a528212ed80", "filename": "src/test/ui/on-unimplemented/enclosing-scope.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr?ref=8dacfc2adac25b8e749a19623ce4db543bb33306", "patch": "@@ -0,0 +1,66 @@\n+error[E0277]: the trait bound `Foo: Trait` is not satisfied\n+  --> $DIR/enclosing-scope.rs:14:11\n+   |\n+LL |   fn f<T: Trait>(x: T) {}\n+   |      -    ----- required by this bound in `f`\n+...\n+LL |       let x = || {\n+   |  _____________-\n+LL | |         f(Foo{});\n+   | |           ^^^^^ the trait `Trait` is not implemented for `Foo`\n+LL | |         let y = || {\n+LL | |             f(Foo{});\n+LL | |         };\n+LL | |     };\n+   | |_____- in this scope\n+\n+error[E0277]: the trait bound `Foo: Trait` is not satisfied\n+  --> $DIR/enclosing-scope.rs:16:15\n+   |\n+LL |   fn f<T: Trait>(x: T) {}\n+   |      -    ----- required by this bound in `f`\n+...\n+LL |           let y = || {\n+   |  _________________-\n+LL | |             f(Foo{});\n+   | |               ^^^^^ the trait `Trait` is not implemented for `Foo`\n+LL | |         };\n+   | |_________- in this scope\n+\n+error[E0277]: the trait bound `Foo: Trait` is not satisfied\n+  --> $DIR/enclosing-scope.rs:22:15\n+   |\n+LL |   fn f<T: Trait>(x: T) {}\n+   |      -    ----- required by this bound in `f`\n+LL | \n+LL | / fn main() {\n+LL | |     let x = || {\n+LL | |         f(Foo{});\n+LL | |         let y = || {\n+...  |\n+LL | |             f(Foo{});\n+   | |               ^^^^^ the trait `Trait` is not implemented for `Foo`\n+...  |\n+LL | |     f(Foo{});\n+LL | | }\n+   | |_- in this scope\n+\n+error[E0277]: the trait bound `Foo: Trait` is not satisfied\n+  --> $DIR/enclosing-scope.rs:26:7\n+   |\n+LL |   fn f<T: Trait>(x: T) {}\n+   |      -    ----- required by this bound in `f`\n+LL | \n+LL | / fn main() {\n+LL | |     let x = || {\n+LL | |         f(Foo{});\n+LL | |         let y = || {\n+...  |\n+LL | |     f(Foo{});\n+   | |       ^^^^^ the trait `Trait` is not implemented for `Foo`\n+LL | | }\n+   | |_- in this scope\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "1143bddfe45a35c60734c265b32b46484d28ec1b", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=8dacfc2adac25b8e749a19623ce4db543bb33306", "patch": "@@ -575,8 +575,17 @@ LL |     if (let 0 = 0)? {}\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/disallowed-positions.rs:46:8\n    |\n-LL |     if (let 0 = 0)? {}\n-   |        ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+LL | / fn nested_within_if_expr() {\n+LL | |     if &let 0 = 0 {}\n+LL | |\n+LL | |\n+...  |\n+LL | |     if (let 0 = 0)? {}\n+   | |        ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+...  |\n+LL | |     if let true = let true = true {}\n+LL | | }\n+   | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `()`\n    = note: required by `std::ops::Try::from_error`\n@@ -754,8 +763,17 @@ LL |     while (let 0 = 0)? {}\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/disallowed-positions.rs:110:11\n    |\n-LL |     while (let 0 = 0)? {}\n-   |           ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+LL | / fn nested_within_while_expr() {\n+LL | |     while &let 0 = 0 {}\n+LL | |\n+LL | |\n+...  |\n+LL | |     while (let 0 = 0)? {}\n+   | |           ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+...  |\n+LL | |     while let true = let true = true {}\n+LL | | }\n+   | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `()`\n    = note: required by `std::ops::Try::from_error`\n@@ -924,8 +942,17 @@ LL |     (let 0 = 0)?;\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/disallowed-positions.rs:183:5\n    |\n-LL |     (let 0 = 0)?;\n-   |     ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+LL | / fn outside_if_and_while_expr() {\n+LL | |     &let 0 = 0;\n+LL | |\n+LL | |     !let 0 = 0;\n+...  |\n+LL | |     (let 0 = 0)?;\n+   | |     ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+...  |\n+LL | |\n+LL | | }\n+   | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `()`\n    = note: required by `std::ops::Try::from_error`"}, {"sha": "ce3aca39fb8fb453184f075721c6604faeece6ed", "filename": "src/test/ui/try-on-option-diagnostics.stderr", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.stderr?ref=8dacfc2adac25b8e749a19623ce4db543bb33306", "patch": "@@ -1,17 +1,28 @@\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/try-on-option-diagnostics.rs:7:5\n    |\n-LL |     x?;\n-   |     ^^ cannot use the `?` operator in a function that returns `u32`\n+LL | / fn a_function() -> u32 {\n+LL | |     let x: Option<u32> = None;\n+LL | |     x?;\n+   | |     ^^ cannot use the `?` operator in a function that returns `u32`\n+LL | |     22\n+LL | | }\n+   | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `u32`\n    = note: required by `std::ops::Try::from_error`\n \n error[E0277]: the `?` operator can only be used in a closure that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/try-on-option-diagnostics.rs:14:9\n    |\n-LL |         x?;\n-   |         ^^ cannot use the `?` operator in a closure that returns `{integer}`\n+LL |       let a_closure = || {\n+   |  _____________________-\n+LL | |         let x: Option<u32> = None;\n+LL | |         x?;\n+   | |         ^^ cannot use the `?` operator in a closure that returns `{integer}`\n+LL | |         22\n+LL | |     };\n+   | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `{integer}`\n    = note: required by `std::ops::Try::from_error`"}, {"sha": "07615b52a48a5c77a0a9e6530ae0caae5817e1f2", "filename": "src/test/ui/try-on-option.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Ftest%2Fui%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Ftest%2Fui%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option.stderr?ref=8dacfc2adac25b8e749a19623ce4db543bb33306", "patch": "@@ -10,8 +10,13 @@ LL |     x?;\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/try-on-option.rs:13:5\n    |\n-LL |     x?;\n-   |     ^^ cannot use the `?` operator in a function that returns `u32`\n+LL | / fn bar() -> u32 {\n+LL | |     let x: Option<u32> = None;\n+LL | |     x?;\n+   | |     ^^ cannot use the `?` operator in a function that returns `u32`\n+LL | |     22\n+LL | | }\n+   | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `u32`\n    = note: required by `std::ops::Try::from_error`"}, {"sha": "d8ba264583e45b56b8381f606787207cc53c3f30", "filename": "src/test/ui/try-operator-on-main.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8dacfc2adac25b8e749a19623ce4db543bb33306/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr?ref=8dacfc2adac25b8e749a19623ce4db543bb33306", "patch": "@@ -1,8 +1,15 @@\n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/try-operator-on-main.rs:9:5\n    |\n-LL |     std::fs::File::open(\"foo\")?;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+LL | / fn main() {\n+LL | |     // error for a `Try` type on a non-`Try` fn\n+LL | |     std::fs::File::open(\"foo\")?;\n+   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+LL | |\n+...  |\n+LL | |     try_trait_generic::<()>();\n+LL | | }\n+   | |_- this function should return `Result` or `Option` to accept `?`\n    |\n    = help: the trait `std::ops::Try` is not implemented for `()`\n    = note: required by `std::ops::Try::from_error`"}]}