{"sha": "c8e49e4b25a10ebf9333742c3bb0724edf1ef2d9", "node_id": "C_kwDOAAsO6NoAKGM4ZTQ5ZTRiMjVhMTBlYmY5MzMzNzQyYzNiYjA3MjRlZGYxZWYyZDk", "commit": {"author": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-05-02T06:45:36Z"}, "committer": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-07-02T13:54:37Z"}, "message": "write the root position at the end", "tree": {"sha": "e354bb3841e19ac464760f5d60f31b68e95b7bd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e354bb3841e19ac464760f5d60f31b68e95b7bd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8e49e4b25a10ebf9333742c3bb0724edf1ef2d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e49e4b25a10ebf9333742c3bb0724edf1ef2d9", "html_url": "https://github.com/rust-lang/rust/commit/c8e49e4b25a10ebf9333742c3bb0724edf1ef2d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8e49e4b25a10ebf9333742c3bb0724edf1ef2d9/comments", "author": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b28b7c90cb5b11d0bba77a86fe119f5b775fe289", "url": "https://api.github.com/repos/rust-lang/rust/commits/b28b7c90cb5b11d0bba77a86fe119f5b775fe289", "html_url": "https://github.com/rust-lang/rust/commit/b28b7c90cb5b11d0bba77a86fe119f5b775fe289"}], "stats": {"total": 28, "additions": 10, "deletions": 18}, "files": [{"sha": "37ccf592aa5a89285857ed9012ebf73b2dfeb995", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e49e4b25a10ebf9333742c3bb0724edf1ef2d9/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e49e4b25a10ebf9333742c3bb0724edf1ef2d9/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=c8e49e4b25a10ebf9333742c3bb0724edf1ef2d9", "patch": "@@ -682,13 +682,13 @@ impl MetadataBlob {\n     }\n \n     pub(crate) fn get_rustc_version(&self) -> String {\n-        LazyValue::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())\n+        LazyValue::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len()).unwrap())\n             .decode(self)\n     }\n \n     pub(crate) fn get_root(&self) -> CrateRoot {\n         let slice = &self.blob()[..];\n-        let offset = METADATA_HEADER.len();\n+        let offset = slice.len() - 4;\n         let pos = (((slice[offset + 0] as u32) << 24)\n             | ((slice[offset + 1] as u32) << 16)\n             | ((slice[offset + 2] as u32) << 8)"}, {"sha": "c0750abf18873a9d2db7a8c962c8af36b6fe9d87", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c8e49e4b25a10ebf9333742c3bb0724edf1ef2d9/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e49e4b25a10ebf9333742c3bb0724edf1ef2d9/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=c8e49e4b25a10ebf9333742c3bb0724edf1ef2d9", "patch": "@@ -40,7 +40,7 @@ use rustc_span::{\n use rustc_target::abi::VariantIdx;\n use std::borrow::Borrow;\n use std::hash::Hash;\n-use std::io::{Read, Seek, Write};\n+use std::io::{Read, Write};\n use std::iter;\n use std::num::NonZeroUsize;\n use std::path::{Path, PathBuf};\n@@ -2215,9 +2215,6 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>, path: impl AsRef<Path>) {\n         .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"failed to create file encoder: {}\", err)));\n     encoder.emit_raw_bytes(METADATA_HEADER);\n \n-    // Will be filled with the root position after encoding everything.\n-    encoder.emit_raw_bytes(&[0, 0, 0, 0]);\n-\n     let source_map_files = tcx.sess.source_map().files();\n     let source_file_cache = (source_map_files[0].clone(), 0);\n     let required_source_files = Some(GrowableBitSet::with_capacity(source_map_files.len()));\n@@ -2247,25 +2244,20 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>, path: impl AsRef<Path>) {\n     // culminating in the `CrateRoot` which points to all of it.\n     let root = ecx.encode_crate_root();\n \n-    ecx.opaque.flush();\n-    let mut file = std::fs::OpenOptions::new()\n-        .write(true)\n-        .open(path.as_ref())\n-        .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"failed to open the file: {}\", err)));\n-\n     // Encode the root position.\n-    let header = METADATA_HEADER.len();\n-    file.seek(std::io::SeekFrom::Start(header as u64))\n-        .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"failed to seek the file: {}\", err)));\n     let pos = root.position.get();\n-    file.write_all(&[(pos >> 24) as u8, (pos >> 16) as u8, (pos >> 8) as u8, (pos >> 0) as u8])\n-        .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"failed to write to the file: {}\", err)));\n+    ecx.opaque.emit_raw_bytes(&[\n+        (pos >> 24) as u8,\n+        (pos >> 16) as u8,\n+        (pos >> 8) as u8,\n+        (pos >> 0) as u8,\n+    ]);\n \n     // Record metadata size for self-profiling\n     tcx.prof.artifact_size(\n         \"crate_metadata\",\n         \"crate_metadata\",\n-        file.metadata().unwrap().len() as u64,\n+        ecx.opaque.file().metadata().unwrap().len() as u64,\n     );\n }\n "}]}