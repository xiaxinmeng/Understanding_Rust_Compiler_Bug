{"sha": "0dfbbaf03b03618dcb7ba203ddc453533bb8d1b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZmJiYWYwM2IwMzYxOGRjYjdiYTIwM2RkYzQ1MzUzM2JiOGQxYjQ=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-21T18:05:27Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-02-22T10:09:21Z"}, "message": "Implement dyn Trait unsizing as well", "tree": {"sha": "ef862c881d191030007f6b6ef40ce2250d45c916", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef862c881d191030007f6b6ef40ce2250d45c916"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dfbbaf03b03618dcb7ba203ddc453533bb8d1b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dfbbaf03b03618dcb7ba203ddc453533bb8d1b4", "html_url": "https://github.com/rust-lang/rust/commit/0dfbbaf03b03618dcb7ba203ddc453533bb8d1b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dfbbaf03b03618dcb7ba203ddc453533bb8d1b4/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de39d221a15c0a146ed8adbdb1616692180948bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/de39d221a15c0a146ed8adbdb1616692180948bb", "html_url": "https://github.com/rust-lang/rust/commit/de39d221a15c0a146ed8adbdb1616692180948bb"}], "stats": {"total": 145, "additions": 136, "deletions": 9}, "files": [{"sha": "15356ab37d39aaa64ac05a937434ddbeed59dbe5", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0dfbbaf03b03618dcb7ba203ddc453533bb8d1b4/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfbbaf03b03618dcb7ba203ddc453533bb8d1b4/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=0dfbbaf03b03618dcb7ba203ddc453533bb8d1b4", "patch": "@@ -661,6 +661,17 @@ impl Ty {\n         }\n     }\n \n+    /// If this is a `dyn Trait` type, this returns the `Trait` part.\n+    pub fn dyn_trait_ref(&self) -> Option<&TraitRef> {\n+        match self {\n+            Ty::Dyn(bounds) => bounds.get(0).and_then(|b| match b {\n+                GenericPredicate::Implemented(trait_ref) => Some(trait_ref),\n+                _ => None,\n+            }),\n+            _ => None,\n+        }\n+    }\n+\n     fn builtin_deref(&self) -> Option<Ty> {\n         match self {\n             Ty::Apply(a_ty) => match a_ty.ctor {"}, {"sha": "b6fce937725abd36c82161b921305448c664c667", "filename": "crates/ra_hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0dfbbaf03b03618dcb7ba203ddc453533bb8d1b4/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfbbaf03b03618dcb7ba203ddc453533bb8d1b4/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=0dfbbaf03b03618dcb7ba203ddc453533bb8d1b4", "patch": "@@ -576,7 +576,6 @@ fn test() {\n     );\n }\n \n-#[ignore]\n #[test]\n fn coerce_unsize_trait_object() {\n     assert_snapshot!(\n@@ -600,6 +599,13 @@ fn test() {\n }\n \"#, true),\n         @r###\"\n+    [240; 300) '{     ...obj; }': ()\n+    [250; 253) 'obj': &dyn Bar\n+    [266; 268) '&S': &S\n+    [267; 268) 'S': S\n+    [278; 281) 'obj': &dyn Foo\n+    [294; 297) 'obj': &dyn Bar\n+    [294; 297): expected &dyn Foo, got &dyn Bar\n     \"###\n     );\n }"}, {"sha": "2317fcac369940444420c6bde2d2ee3a683b583a", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0dfbbaf03b03618dcb7ba203ddc453533bb8d1b4/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfbbaf03b03618dcb7ba203ddc453533bb8d1b4/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=0dfbbaf03b03618dcb7ba203ddc453533bb8d1b4", "patch": "@@ -335,6 +335,12 @@ pub struct ClosureFnTraitImplData {\n     fn_trait: FnTrait,\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct UnsizeToSuperTraitObjectData {\n+    trait_: TraitId,\n+    super_trait: TraitId,\n+}\n+\n /// An impl. Usually this comes from an impl block, but some built-in types get\n /// synthetic impls.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -345,6 +351,10 @@ pub enum Impl {\n     ClosureFnTraitImpl(ClosureFnTraitImplData),\n     /// [T; n]: Unsize<[T]>\n     UnsizeArray,\n+    /// T: Unsize<dyn Trait> where T: Trait\n+    UnsizeToTraitObject(TraitId),\n+    /// dyn Trait: Unsize<dyn SuperTrait> if Trait: SuperTrait\n+    UnsizeToSuperTraitObject(UnsizeToSuperTraitObjectData),\n }\n /// This exists just for Chalk, because our ImplIds are only unique per module.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "3c8dd4af867c3587dfcb3503a74d0ab0951de6fe", "filename": "crates/ra_hir_ty/src/traits/builtin.rs", "status": "modified", "additions": 105, "deletions": 7, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/0dfbbaf03b03618dcb7ba203ddc453533bb8d1b4/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfbbaf03b03618dcb7ba203ddc453533bb8d1b4/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs?ref=0dfbbaf03b03618dcb7ba203ddc453533bb8d1b4", "patch": "@@ -4,8 +4,12 @@ use hir_def::{expr::Expr, lang_item::LangItemTarget, TraitId, TypeAliasId};\n use hir_expand::name::name;\n use ra_db::CrateId;\n \n-use super::{AssocTyValue, Impl};\n-use crate::{db::HirDatabase, utils::generics, ApplicationTy, Substs, TraitRef, Ty, TypeCtor};\n+use super::{AssocTyValue, Impl, UnsizeToSuperTraitObjectData};\n+use crate::{\n+    db::HirDatabase,\n+    utils::{all_super_traits, generics},\n+    ApplicationTy, GenericPredicate, Substs, TraitRef, Ty, TypeCtor,\n+};\n \n pub(super) struct BuiltinImplData {\n     pub num_vars: usize,\n@@ -25,6 +29,8 @@ pub(super) fn get_builtin_impls(\n     db: &impl HirDatabase,\n     krate: CrateId,\n     ty: &Ty,\n+    // The first argument for the trait, if present\n+    arg: &Option<Ty>,\n     trait_: TraitId,\n     mut callback: impl FnMut(Impl),\n ) {\n@@ -43,14 +49,43 @@ pub(super) fn get_builtin_impls(\n             }\n         }\n     }\n+\n+    let unsize_trait = get_unsize_trait(db, krate);\n+    if let Some(actual_trait) = unsize_trait {\n+        if trait_ == actual_trait {\n+            get_builtin_unsize_impls(db, krate, ty, arg, callback);\n+        }\n+    }\n+}\n+\n+fn get_builtin_unsize_impls(\n+    db: &impl HirDatabase,\n+    krate: CrateId,\n+    ty: &Ty,\n+    // The first argument for the trait, if present\n+    arg: &Option<Ty>,\n+    mut callback: impl FnMut(Impl),\n+) {\n+    if !check_unsize_impl_prerequisites(db, krate) {\n+        return;\n+    }\n+\n     if let Ty::Apply(ApplicationTy { ctor: TypeCtor::Array, .. }) = ty {\n-        if let Some(actual_trait) = get_unsize_trait(db, krate) {\n-            if trait_ == actual_trait {\n-                if check_unsize_impl_prerequisites(db, krate) {\n-                    callback(Impl::UnsizeArray);\n-                }\n+        callback(Impl::UnsizeArray);\n+    }\n+\n+    if let Some(target_trait) = arg.as_ref().and_then(|t| t.dyn_trait_ref()) {\n+        if let Some(trait_ref) = ty.dyn_trait_ref() {\n+            let super_traits = all_super_traits(db, trait_ref.trait_);\n+            if super_traits.contains(&target_trait.trait_) {\n+                // callback(Impl::UnsizeToSuperTraitObject(UnsizeToSuperTraitObjectData {\n+                //     trait_: trait_ref.trait_,\n+                //     super_trait: target_trait.trait_,\n+                // }));\n             }\n         }\n+\n+        callback(Impl::UnsizeToTraitObject(target_trait.trait_));\n     }\n }\n \n@@ -59,6 +94,10 @@ pub(super) fn impl_datum(db: &impl HirDatabase, krate: CrateId, impl_: Impl) ->\n         Impl::ImplBlock(_) => unreachable!(),\n         Impl::ClosureFnTraitImpl(data) => closure_fn_trait_impl_datum(db, krate, data),\n         Impl::UnsizeArray => array_unsize_impl_datum(db, krate),\n+        Impl::UnsizeToTraitObject(trait_) => trait_object_unsize_impl_datum(db, krate, trait_),\n+        Impl::UnsizeToSuperTraitObject(data) => {\n+            super_trait_object_unsize_impl_datum(db, krate, data)\n+        }\n     }\n }\n \n@@ -216,6 +255,65 @@ fn array_unsize_impl_datum(db: &impl HirDatabase, krate: CrateId) -> BuiltinImpl\n     }\n }\n \n+// Trait object unsizing\n+\n+fn trait_object_unsize_impl_datum(\n+    db: &impl HirDatabase,\n+    krate: CrateId,\n+    trait_: TraitId,\n+) -> BuiltinImplData {\n+    // impl<T, T1, ...> Unsize<dyn Trait<T1, ...>> for T where T: Trait<T1, ...>\n+\n+    let unsize_trait = get_unsize_trait(db, krate) // get unsize trait\n+        // the existence of the Unsize trait has been checked before\n+        .expect(\"Unsize trait missing\");\n+\n+    let self_ty = Ty::Bound(0);\n+\n+    let substs = Substs::build_for_def(db, trait_)\n+        // this fits together nicely: $0 is our self type, and the rest are the type\n+        // args for the trait\n+        .fill_with_bound_vars(0)\n+        .build();\n+    let trait_ref = TraitRef { trait_, substs };\n+    // This is both the bound for the `dyn` type, *and* the bound for the impl!\n+    // This works because the self type for `dyn` is always Ty::Bound(0), which\n+    // we've also made the parameter for our impl self type.\n+    let bounds = vec![GenericPredicate::Implemented(trait_ref)];\n+\n+    let impl_substs = Substs::builder(2).push(self_ty).push(Ty::Dyn(bounds.clone().into())).build();\n+\n+    let trait_ref = TraitRef { trait_: unsize_trait, substs: impl_substs };\n+\n+    BuiltinImplData { num_vars: 1, trait_ref, where_clauses: bounds, assoc_ty_values: Vec::new() }\n+}\n+\n+fn super_trait_object_unsize_impl_datum(\n+    db: &impl HirDatabase,\n+    krate: CrateId,\n+    _data: UnsizeToSuperTraitObjectData,\n+) -> BuiltinImplData {\n+    // impl Unsize<dyn SuperTrait> for dyn Trait\n+\n+    let unsize_trait = get_unsize_trait(db, krate) // get unsize trait\n+        // the existence of the Unsize trait has been checked before\n+        .expect(\"Unsize trait missing\");\n+\n+    let substs = Substs::builder(2)\n+        // .push(Ty::Dyn(todo!()))\n+        // .push(Ty::Dyn(todo!()))\n+        .build();\n+\n+    let trait_ref = TraitRef { trait_: unsize_trait, substs };\n+\n+    BuiltinImplData {\n+        num_vars: 1,\n+        trait_ref,\n+        where_clauses: Vec::new(),\n+        assoc_ty_values: Vec::new(),\n+    }\n+}\n+\n fn get_fn_trait(\n     db: &impl HirDatabase,\n     krate: CrateId,"}, {"sha": "e1e430aeb09f1578a3dfe39f26e1e75d3c53ce90", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dfbbaf03b03618dcb7ba203ddc453533bb8d1b4/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dfbbaf03b03618dcb7ba203ddc453533bb8d1b4/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=0dfbbaf03b03618dcb7ba203ddc453533bb8d1b4", "patch": "@@ -572,8 +572,10 @@ where\n             .collect();\n \n         let ty: Ty = from_chalk(self.db, parameters[0].assert_ty_ref().clone());\n+        let arg: Option<Ty> =\n+            parameters.get(1).map(|p| from_chalk(self.db, p.assert_ty_ref().clone()));\n \n-        builtin::get_builtin_impls(self.db, self.krate, &ty, trait_, |i| {\n+        builtin::get_builtin_impls(self.db, self.krate, &ty, &arg, trait_, |i| {\n             result.push(i.to_chalk(self.db))\n         });\n "}]}