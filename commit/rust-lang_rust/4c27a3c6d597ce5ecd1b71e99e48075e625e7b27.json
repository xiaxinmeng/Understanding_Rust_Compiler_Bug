{"sha": "4c27a3c6d597ce5ecd1b71e99e48075e625e7b27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMjdhM2M2ZDU5N2NlNWVjZDFiNzFlOTllNDgwNzVlNjI1ZTdiMjc=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-06-08T01:14:51Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-07-08T14:42:48Z"}, "message": "trans: Enable falling back to on-demand instantiation for drop-glue and monomorphizations.\n\nSee issue #34151 for more information.", "tree": {"sha": "6c4a16a811b6774a6e8ea8b5dc99218db67a2e61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c4a16a811b6774a6e8ea8b5dc99218db67a2e61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c27a3c6d597ce5ecd1b71e99e48075e625e7b27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c27a3c6d597ce5ecd1b71e99e48075e625e7b27", "html_url": "https://github.com/rust-lang/rust/commit/4c27a3c6d597ce5ecd1b71e99e48075e625e7b27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c27a3c6d597ce5ecd1b71e99e48075e625e7b27/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7bc0b920f27f943bb841f3ace093a5449394497", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7bc0b920f27f943bb841f3ace093a5449394497", "html_url": "https://github.com/rust-lang/rust/commit/a7bc0b920f27f943bb841f3ace093a5449394497"}], "stats": {"total": 88, "additions": 66, "deletions": 22}, "files": [{"sha": "bcca008c5e9e074bc76d5880a2a04a87e9082d7b", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4c27a3c6d597ce5ecd1b71e99e48075e625e7b27/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c27a3c6d597ce5ecd1b71e99e48075e625e7b27/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=4c27a3c6d597ce5ecd1b71e99e48075e625e7b27", "patch": "@@ -2684,6 +2684,8 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         println!(\"n_null_glues: {}\", stats.n_null_glues.get());\n         println!(\"n_real_glues: {}\", stats.n_real_glues.get());\n \n+        println!(\"n_fallback_instantiations: {}\", stats.n_fallback_instantiations.get());\n+\n         println!(\"n_fns: {}\", stats.n_fns.get());\n         println!(\"n_monos: {}\", stats.n_monos.get());\n         println!(\"n_inlines: {}\", stats.n_inlines.get());\n@@ -2875,6 +2877,14 @@ fn collect_and_partition_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a\n     assert!(scx.tcx().sess.opts.cg.codegen_units == codegen_units.len() ||\n             scx.tcx().sess.opts.debugging_opts.incremental.is_some());\n \n+    {\n+        let mut ccx_map = scx.translation_items().borrow_mut();\n+\n+        for trans_item in items.iter().cloned() {\n+            ccx_map.insert(trans_item, TransItemState::PredictedButNotGenerated);\n+        }\n+    }\n+\n     if scx.sess().opts.debugging_opts.print_trans_items.is_some() {\n         let mut item_to_cgus = HashMap::new();\n \n@@ -2926,12 +2936,6 @@ fn collect_and_partition_translation_items<'a, 'tcx>(scx: &SharedCrateContext<'a\n         for item in item_keys {\n             println!(\"TRANS_ITEM {}\", item);\n         }\n-\n-        let mut ccx_map = scx.translation_items().borrow_mut();\n-\n-        for cgi in items {\n-            ccx_map.insert(cgi, TransItemState::PredictedButNotGenerated);\n-        }\n     }\n \n     (codegen_units, symbol_map)"}, {"sha": "8f700e2fe389b281c09b03a8285c08d9dda746cc", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c27a3c6d597ce5ecd1b71e99e48075e625e7b27/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c27a3c6d597ce5ecd1b71e99e48075e625e7b27/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=4c27a3c6d597ce5ecd1b71e99e48075e625e7b27", "patch": "@@ -53,6 +53,7 @@ pub struct Stats {\n     pub n_glues_created: Cell<usize>,\n     pub n_null_glues: Cell<usize>,\n     pub n_real_glues: Cell<usize>,\n+    pub n_fallback_instantiations: Cell<usize>,\n     pub n_fns: Cell<usize>,\n     pub n_monos: Cell<usize>,\n     pub n_inlines: Cell<usize>,\n@@ -406,6 +407,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n                 n_glues_created: Cell::new(0),\n                 n_null_glues: Cell::new(0),\n                 n_real_glues: Cell::new(0),\n+                n_fallback_instantiations: Cell::new(0),\n                 n_fns: Cell::new(0),\n                 n_monos: Cell::new(0),\n                 n_inlines: Cell::new(0),"}, {"sha": "468192d7f1144a85fca2f5d0c14d380d3f0b6fbf", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4c27a3c6d597ce5ecd1b71e99e48075e625e7b27/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c27a3c6d597ce5ecd1b71e99e48075e625e7b27/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=4c27a3c6d597ce5ecd1b71e99e48075e625e7b27", "patch": "@@ -234,13 +234,34 @@ fn get_drop_glue_core<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                 g: DropGlueKind<'tcx>) -> ValueRef {\n     let g = g.map_ty(|t| get_drop_glue_type(ccx.tcx(), t));\n     match ccx.drop_glues().borrow().get(&g) {\n-        Some(&(glue, _)) => glue,\n-        None => { bug!(\"Could not find drop glue for {:?} -- {} -- {}. \\\n-                        It should have be instantiated during the pre-definition phase\",\n-                       g,\n-                       TransItem::DropGlue(g).to_raw_string(),\n-                       ccx.codegen_unit().name) }\n+        Some(&(glue, _)) => return glue,\n+        None => {\n+            debug!(\"Could not find drop glue for {:?} -- {} -- {}. \\\n+                    Falling back to on-demand instantiation.\",\n+                    g,\n+                    TransItem::DropGlue(g).to_raw_string(),\n+                    ccx.codegen_unit().name);\n+\n+            ccx.stats().n_fallback_instantiations.set(ccx.stats()\n+                                                         .n_fallback_instantiations\n+                                                         .get() + 1);\n+        }\n     }\n+\n+    // FIXME: #34151\n+    // Normally, getting here would indicate a bug in trans::collector,\n+    // since it seems to have missed a translation item. When we are\n+    // translating with non-MIR-based trans, however, the results of the\n+    // collector are not entirely reliable since it bases its analysis\n+    // on MIR. Thus, we'll instantiate the missing function on demand in\n+    // this codegen unit, so that things keep working.\n+\n+    TransItem::DropGlue(g).predefine(ccx, llvm::LinkOnceODRLinkage);\n+    TransItem::DropGlue(g).define(ccx);\n+\n+    // Now that we made sure that the glue function is in ccx.drop_glues,\n+    // give it another try\n+    get_drop_glue_core(ccx, g)\n }\n \n pub fn implement_drop_glue<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,"}, {"sha": "71aacfdfe58acc90a91872e37a732572cec0884c", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4c27a3c6d597ce5ecd1b71e99e48075e625e7b27/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c27a3c6d597ce5ecd1b71e99e48075e625e7b27/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=4c27a3c6d597ce5ecd1b71e99e48075e625e7b27", "patch": "@@ -121,8 +121,25 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             ref attrs, node: hir::MethodTraitItem(\n                 hir::MethodSig { .. }, Some(_)), ..\n         }) => {\n-            attributes::from_fn_attrs(ccx, attrs, lldecl);\n-            llvm::SetLinkage(lldecl, llvm::ExternalLinkage);\n+            let trans_item = TransItem::Fn(instance);\n+\n+            if ccx.shared().translation_items().borrow().contains_key(&trans_item) {\n+                attributes::from_fn_attrs(ccx, attrs, lldecl);\n+                llvm::SetLinkage(lldecl, llvm::ExternalLinkage);\n+            } else {\n+                // FIXME: #34151\n+                // Normally, getting here would indicate a bug in trans::collector,\n+                // since it seems to have missed a translation item. When we are\n+                // translating with non-MIR based trans, however, the results of\n+                // the collector are not entirely reliable since it bases its\n+                // analysis on MIR. Thus, we'll instantiate the missing function\n+                // privately in this codegen unit, so that things keep working.\n+                ccx.stats().n_fallback_instantiations.set(ccx.stats()\n+                                                             .n_fallback_instantiations\n+                                                             .get() + 1);\n+                trans_item.predefine(ccx, llvm::PrivateLinkage);\n+                trans_item.define(ccx);\n+            }\n         }\n \n         hir_map::NodeVariant(_) | hir_map::NodeStructCtor(_) => {"}, {"sha": "edf5db81b1843bfc695ee89ed03db750f3e5b17f", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c27a3c6d597ce5ecd1b71e99e48075e625e7b27/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c27a3c6d597ce5ecd1b71e99e48075e625e7b27/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=4c27a3c6d597ce5ecd1b71e99e48075e625e7b27", "patch": "@@ -517,11 +517,11 @@ fn single_codegen_unit<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     if reachable.contains(&node_id) {\n                         llvm::ExternalLinkage\n                     } else {\n-                        llvm::InternalLinkage\n+                        llvm::PrivateLinkage\n                     }\n                 }\n                 TransItem::DropGlue(_) => {\n-                    llvm::InternalLinkage\n+                    llvm::PrivateLinkage\n                 }\n                 TransItem::Fn(instance) => {\n                     if trans_item.is_generic_fn() ||"}, {"sha": "2fc90b821feaebe53e14e06e582470441a179fcc", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c27a3c6d597ce5ecd1b71e99e48075e625e7b27/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c27a3c6d597ce5ecd1b71e99e48075e625e7b27/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=4c27a3c6d597ce5ecd1b71e99e48075e625e7b27", "patch": "@@ -108,19 +108,19 @@ impl<'a, 'tcx> TransItem<'tcx> {\n                ccx.codegen_unit().name);\n \n         let symbol_name = ccx.symbol_map()\n-                             .get(*self)\n-                             .expect(\"Name not present in SymbolMap?\");\n-        debug!(\"symbol {}\", symbol_name);\n+                             .get_or_compute(ccx.shared(), *self);\n+\n+        debug!(\"symbol {}\", &symbol_name);\n \n         match *self {\n             TransItem::Static(node_id) => {\n-                TransItem::predefine_static(ccx, node_id, linkage, symbol_name);\n+                TransItem::predefine_static(ccx, node_id, linkage, &symbol_name);\n             }\n             TransItem::Fn(instance) => {\n-                TransItem::predefine_fn(ccx, instance, linkage, symbol_name);\n+                TransItem::predefine_fn(ccx, instance, linkage, &symbol_name);\n             }\n             TransItem::DropGlue(dg) => {\n-                TransItem::predefine_drop_glue(ccx, dg, linkage, symbol_name);\n+                TransItem::predefine_drop_glue(ccx, dg, linkage, &symbol_name);\n             }\n         }\n "}]}