{"sha": "5984b1d86f0e7221c83c0d63b8d63fc0de9c5760", "node_id": "C_kwDOAAsO6NoAKDU5ODRiMWQ4NmYwZTcyMjFjODNjMGQ2M2I4ZDYzZmMwZGU5YzU3NjA", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-10-29T14:49:05Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-10-29T14:49:05Z"}, "message": "Revert \"Make the `c` feature for `compiler-builtins` opt-in instead of inferred\"\n\nThis reverts commit 3acb505ee560770c62bad5362f6caf7567d467b9\n(PR #101833).\n\nThe changes in this commit caused several bugs or at least\nincompatibilies. For now we're reverting this commit and will re-land it\nalongside fixes for those bugs.", "tree": {"sha": "c5c1fbe50f828a821931aeac86ba41df7f18d7ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5c1fbe50f828a821931aeac86ba41df7f18d7ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760", "html_url": "https://github.com/rust-lang/rust/commit/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33b530e04099465a8029ef581202d52f4075558e", "url": "https://api.github.com/repos/rust-lang/rust/commits/33b530e04099465a8029ef581202d52f4075558e", "html_url": "https://github.com/rust-lang/rust/commit/33b530e04099465a8029ef581202d52f4075558e"}], "stats": {"total": 66, "additions": 22, "deletions": 44}, "files": [{"sha": "2373fb2ec4fb04d5de652c08fc91be338212b4be", "filename": "config.toml.example", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=5984b1d86f0e7221c83c0d63b8d63fc0de9c5760", "patch": "@@ -291,10 +291,6 @@ changelog-seen = 2\n # on this runtime, such as `-C profile-generate` or `-C instrument-coverage`).\n #profiler = false\n \n-# Use the optimized LLVM C intrinsics for `compiler_builtins`, rather than Rust intrinsics.\n-# Requires the LLVM submodule to be managed by bootstrap (i.e. not external).\n-#optimized-compiler-builtins = false\n-\n # Indicates whether the native libraries linked into Cargo will be statically\n # linked or not.\n #cargo-native-static = false"}, {"sha": "18e780a108d5a5420f677c2706786111766967d9", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=5984b1d86f0e7221c83c0d63b8d63fc0de9c5760", "patch": "@@ -299,7 +299,9 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car\n \n     // Determine if we're going to compile in optimized C intrinsics to\n     // the `compiler-builtins` crate. These intrinsics live in LLVM's\n-    // `compiler-rt` repository.\n+    // `compiler-rt` repository, but our `src/llvm-project` submodule isn't\n+    // always checked out, so we need to conditionally look for this. (e.g. if\n+    // an external LLVM is used we skip the LLVM submodule checkout).\n     //\n     // Note that this shouldn't affect the correctness of `compiler-builtins`,\n     // but only its speed. Some intrinsics in C haven't been translated to Rust\n@@ -310,15 +312,8 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car\n     // If `compiler-rt` is available ensure that the `c` feature of the\n     // `compiler-builtins` crate is enabled and it's configured to learn where\n     // `compiler-rt` is located.\n-    let compiler_builtins_c_feature = if builder.config.optimized_compiler_builtins {\n-        if !builder.is_rust_llvm(target) {\n-            panic!(\n-                \"need a managed LLVM submodule for optimized intrinsics support; unset `llvm-config` or `optimized-compiler-builtins`\"\n-            );\n-        }\n-\n-        builder.update_submodule(&Path::new(\"src\").join(\"llvm-project\"));\n-        let compiler_builtins_root = builder.src.join(\"src/llvm-project/compiler-rt\");\n+    let compiler_builtins_root = builder.src.join(\"src/llvm-project/compiler-rt\");\n+    let compiler_builtins_c_feature = if compiler_builtins_root.exists() {\n         // Note that `libprofiler_builtins/build.rs` also computes this so if\n         // you're changing something here please also change that.\n         cargo.env(\"RUST_COMPILER_RT_ROOT\", &compiler_builtins_root);"}, {"sha": "34d5504827cfb37def8f20498f8ae511f5d82e34", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=5984b1d86f0e7221c83c0d63b8d63fc0de9c5760", "patch": "@@ -73,8 +73,6 @@ pub struct Config {\n     pub color: Color,\n     pub patch_binaries_for_nix: bool,\n     pub stage0_metadata: Stage0Metadata,\n-    /// Whether to use the `c` feature of the `compiler_builtins` crate.\n-    pub optimized_compiler_builtins: bool,\n \n     pub on_fail: Option<String>,\n     pub stage: u32,\n@@ -624,7 +622,6 @@ define_config! {\n         bench_stage: Option<u32> = \"bench-stage\",\n         patch_binaries_for_nix: Option<bool> = \"patch-binaries-for-nix\",\n         metrics: Option<bool> = \"metrics\",\n-        optimized_compiler_builtins: Option<bool> = \"optimized-compiler-builtins\",\n     }\n }\n \n@@ -1013,7 +1010,6 @@ impl Config {\n         set(&mut config.print_step_timings, build.print_step_timings);\n         set(&mut config.print_step_rusage, build.print_step_rusage);\n         set(&mut config.patch_binaries_for_nix, build.patch_binaries_for_nix);\n-        set(&mut config.optimized_compiler_builtins, build.optimized_compiler_builtins);\n \n         config.verbose = cmp::max(config.verbose, flags.verbose);\n "}, {"sha": "805633c926c3a49d68544ccaff3093f570815047", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=5984b1d86f0e7221c83c0d63b8d63fc0de9c5760", "patch": "@@ -1847,21 +1847,23 @@ fn add_env(builder: &Builder<'_>, cmd: &mut Command, target: TargetSelection) {\n ///\n /// Returns whether the files were actually copied.\n fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir: &Path) -> bool {\n-    if !builder.is_rust_llvm(target) {\n-        // If the LLVM was externally provided, then we don't currently copy\n-        // artifacts into the sysroot. This is not necessarily the right\n-        // choice (in particular, it will require the LLVM dylib to be in\n-        // the linker's load path at runtime), but the common use case for\n-        // external LLVMs is distribution provided LLVMs, and in that case\n-        // they're usually in the standard search path (e.g., /usr/lib) and\n-        // copying them here is going to cause problems as we may end up\n-        // with the wrong files and isn't what distributions want.\n-        //\n-        // This behavior may be revisited in the future though.\n-        //\n-        // If the LLVM is coming from ourselves (just from CI) though, we\n-        // still want to install it, as it otherwise won't be available.\n-        return false;\n+    if let Some(config) = builder.config.target_config.get(&target) {\n+        if config.llvm_config.is_some() && !builder.config.llvm_from_ci {\n+            // If the LLVM was externally provided, then we don't currently copy\n+            // artifacts into the sysroot. This is not necessarily the right\n+            // choice (in particular, it will require the LLVM dylib to be in\n+            // the linker's load path at runtime), but the common use case for\n+            // external LLVMs is distribution provided LLVMs, and in that case\n+            // they're usually in the standard search path (e.g., /usr/lib) and\n+            // copying them here is going to cause problems as we may end up\n+            // with the wrong files and isn't what distributions want.\n+            //\n+            // This behavior may be revisited in the future though.\n+            //\n+            // If the LLVM is coming from ourselves (just from CI) though, we\n+            // still want to install it, as it otherwise won't be available.\n+            return false;\n+        }\n     }\n \n     // On macOS, rustc (and LLVM tools) link to an unversioned libLLVM.dylib"}, {"sha": "5ddd3f180396466223ee2e6bf71c0947b3cbc126", "filename": "src/ci/docker/host-x86_64/disabled/dist-x86_64-haiku/Dockerfile", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-x86_64-haiku%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-x86_64-haiku%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-x86_64-haiku%2FDockerfile?ref=5984b1d86f0e7221c83c0d63b8d63fc0de9c5760", "patch": "@@ -47,6 +47,4 @@ ENV RUST_CONFIGURE_ARGS --disable-jemalloc \\\n   --set=$TARGET.cc=x86_64-unknown-haiku-gcc \\\n   --set=$TARGET.cxx=x86_64-unknown-haiku-g++ \\\n   --set=$TARGET.llvm-config=/bin/llvm-config-haiku\n-ENV EXTERNAL_LLVM 1\n-\n ENV SCRIPT python3 ../x.py dist --host=$HOST --target=$HOST"}, {"sha": "126c292b38ea1f7a179b5ddaea5762ddc648a715", "filename": "src/ci/docker/host-x86_64/dist-various-2/Dockerfile", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile?ref=5984b1d86f0e7221c83c0d63b8d63fc0de9c5760", "patch": "@@ -129,6 +129,4 @@ ENV RUST_CONFIGURE_ARGS --enable-extended --enable-lld --disable-docs \\\n   --set target.wasm32-wasi.wasi-root=/wasm32-wasi \\\n   --musl-root-armv7=/musl-armv7\n \n-ENV EXTERNAL_LLVM 1\n-\n ENV SCRIPT python3 ../x.py dist --host='' --target $TARGETS"}, {"sha": "23f2215c2d93cfbe85e3e06028f00793c96af05d", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-13-stage1/Dockerfile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13-stage1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13-stage1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13-stage1%2FDockerfile?ref=5984b1d86f0e7221c83c0d63b8d63fc0de9c5760", "patch": "@@ -29,7 +29,6 @@ RUN sh /scripts/sccache.sh\n # We are disabling CI LLVM since this builder is intentionally using a host\n # LLVM, rather than the typical src/llvm-project LLVM.\n ENV NO_DOWNLOAD_CI_LLVM 1\n-ENV EXTERNAL_LLVM 1\n \n # Using llvm-link-shared due to libffi issues -- see #34486\n ENV RUST_CONFIGURE_ARGS \\"}, {"sha": "8f6831bc54e63e6b693c031ab6d7cda8f701d7e8", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-13/Dockerfile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13%2FDockerfile?ref=5984b1d86f0e7221c83c0d63b8d63fc0de9c5760", "patch": "@@ -40,7 +40,6 @@ RUN sh /scripts/sccache.sh\n # We are disabling CI LLVM since this builder is intentionally using a host\n # LLVM, rather than the typical src/llvm-project LLVM.\n ENV NO_DOWNLOAD_CI_LLVM 1\n-ENV EXTERNAL_LLVM 1\n \n # Using llvm-link-shared due to libffi issues -- see #34486\n ENV RUST_CONFIGURE_ARGS \\"}, {"sha": "9a247fb60a8ee0535c20ecc4d5ab0f4e135c8ab4", "filename": "src/ci/run.sh", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5984b1d86f0e7221c83c0d63b8d63fc0de9c5760/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=5984b1d86f0e7221c83c0d63b8d63fc0de9c5760", "patch": "@@ -69,11 +69,6 @@ RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set rust.codegen-units-std=1\"\n # space required for CI artifacts.\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --dist-compression-formats=xz\"\n \n-# Enable the `c` feature for compiler_builtins, but only when the `compiler-rt` source is available.\n-if [ \"$EXTERNAL_LLVM\" = \"\" ]; then\n-  RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set build.optimized-compiler-builtins\"\n-fi\n-\n if [ \"$DIST_SRC\" = \"\" ]; then\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-dist-src\"\n fi"}]}