{"sha": "3d8a5cb9e67d0e38d2062bd7685aa5514305dfc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkOGE1Y2I5ZTY3ZDBlMzhkMjA2MmJkNzY4NWFhNTUxNDMwNWRmYzY=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-06-20T21:36:15Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-06-20T21:44:12Z"}, "message": "Remember the library files we used in rustc and pass them to the \"linker\".\nThis avoid the hardcoded -lstd, allows programs to use other crates and avoids\nany differences that may exist in the rustc and ld search logic.", "tree": {"sha": "ca77815fd66229bc0c64669c8deded58b01f4613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca77815fd66229bc0c64669c8deded58b01f4613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d8a5cb9e67d0e38d2062bd7685aa5514305dfc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d8a5cb9e67d0e38d2062bd7685aa5514305dfc6", "html_url": "https://github.com/rust-lang/rust/commit/3d8a5cb9e67d0e38d2062bd7685aa5514305dfc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d8a5cb9e67d0e38d2062bd7685aa5514305dfc6/comments", "author": null, "committer": null, "parents": [{"sha": "a2dcd08cc273bcc880fc9687bffc98796fa1f3c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2dcd08cc273bcc880fc9687bffc98796fa1f3c4", "html_url": "https://github.com/rust-lang/rust/commit/a2dcd08cc273bcc880fc9687bffc98796fa1f3c4"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "0acf1dfac873de9e919803ca21d4de3be19d1bc4", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3d8a5cb9e67d0e38d2062bd7685aa5514305dfc6/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d8a5cb9e67d0e38d2062bd7685aa5514305dfc6/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=3d8a5cb9e67d0e38d2062bd7685aa5514305dfc6", "patch": "@@ -271,7 +271,7 @@ fn build_session(@session::options sopts) -> session::session {\n     auto crate_cache = common::new_int_hash[session::crate_metadata]();\n     auto target_crate_num = 0;\n     auto sess =\n-        session::session(target_crate_num, target_cfg, sopts, crate_cache,\n+        session::session(target_crate_num, target_cfg, sopts, crate_cache, [],\n                          front::codemap::new_codemap(), 0u);\n     ret sess;\n }\n@@ -417,10 +417,13 @@ fn main(vec[str] args) {\n                 gcc_args = common_args;\n             }\n         }\n+\n+        gcc_args += sess.get_used_libraries();\n+\n         if (sopts.shared) {\n             gcc_args += [shared_cmd];\n         } else {\n-            gcc_args += [\"-Lrustllvm\", \"-lrustllvm\", \"-lstd\", \"-lm\", main];\n+            gcc_args += [\"-Lrustllvm\", \"-lrustllvm\", \"-lm\", main];\n         }\n         // We run 'gcc' here\n "}, {"sha": "695cf7e5606807d569cb8fdacd92d6237e6ba848", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d8a5cb9e67d0e38d2062bd7685aa5514305dfc6/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d8a5cb9e67d0e38d2062bd7685aa5514305dfc6/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=3d8a5cb9e67d0e38d2062bd7685aa5514305dfc6", "patch": "@@ -66,6 +66,7 @@ obj session(ast::crate_num cnum,\n             @config targ_cfg,\n             @options opts,\n             map::hashmap[int, crate_metadata] crates,\n+            mutable vec[str] used_libraries,\n             codemap::codemap cm,\n             mutable uint err_count) {\n     fn get_targ_cfg() -> @config { ret targ_cfg; }\n@@ -122,6 +123,19 @@ obj session(ast::crate_num cnum,\n         crates.insert(num, metadata);\n     }\n     fn has_external_crate(int num) -> bool { ret crates.contains_key(num); }\n+    fn add_used_library(&str lib) {\n+        // A program has a small number of libraries, so a vector is probably a\n+        // good data structure in here.\n+        for (str l in used_libraries) {\n+            if (l == lib) {\n+                ret;\n+            }\n+        }\n+        used_libraries += [lib];\n+    }\n+    fn get_used_libraries() -> vec[str] {\n+       ret used_libraries;\n+    }\n     fn get_codemap() -> codemap::codemap { ret cm; }\n     fn lookup_pos(uint pos) -> codemap::loc {\n         ret codemap::lookup_pos(cm, pos);"}, {"sha": "c57e7b732face8d39afe8baec456fffe67e24340", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d8a5cb9e67d0e38d2062bd7685aa5514305dfc6/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d8a5cb9e67d0e38d2062bd7685aa5514305dfc6/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=3d8a5cb9e67d0e38d2062bd7685aa5514305dfc6", "patch": "@@ -582,12 +582,13 @@ fn find_library_crate(&session::session sess, &ast::ident ident,\n     ret none;\n }\n \n-fn load_library_crate(&session::session sess, &int cnum, &ast::ident ident,\n+fn load_library_crate(&session::session sess, int cnum, &ast::ident ident,\n                       &vec[@ast::meta_item] metas,\n                       &vec[str] library_search_paths) {\n     alt (find_library_crate(sess, ident, metas, library_search_paths)) {\n         case (some(?t)) {\n             sess.set_external_crate(cnum, rec(name=ident, data=t._1));\n+            sess.add_used_library(t._0);\n             ret;\n         }\n         case (_) { }"}]}