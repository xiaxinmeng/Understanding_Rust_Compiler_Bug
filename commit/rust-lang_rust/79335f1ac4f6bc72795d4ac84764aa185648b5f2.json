{"sha": "79335f1ac4f6bc72795d4ac84764aa185648b5f2", "node_id": "C_kwDOAAsO6NoAKDc5MzM1ZjFhYzRmNmJjNzI3OTVkNGFjODQ3NjRhYTE4NTY0OGI1ZjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-19T11:12:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-19T11:12:31Z"}, "message": "Auto merge of #107064 - GuillaumeGomez:rollup-pbgu6r3, r=GuillaumeGomez\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #105977 (Transform async `ResumeTy` in generator transform)\n - #106927 (make `CastError::NeedsDeref` create a `MachineApplicable` suggestion)\n - #106931 (document + UI test `E0208` and make its output more user-friendly)\n - #107027 (Remove extra removal from test path)\n - #107037 (Fix Dominators::rank_partial_cmp to match documentation)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ef79cea087ec2d23b979acba391adb27a19b3761", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef79cea087ec2d23b979acba391adb27a19b3761"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79335f1ac4f6bc72795d4ac84764aa185648b5f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79335f1ac4f6bc72795d4ac84764aa185648b5f2", "html_url": "https://github.com/rust-lang/rust/commit/79335f1ac4f6bc72795d4ac84764aa185648b5f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79335f1ac4f6bc72795d4ac84764aa185648b5f2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0", "html_url": "https://github.com/rust-lang/rust/commit/705a96d39bbd97ac0cc8ae119b0f3c097ab62fc0"}, {"sha": "dee88e0fa2a9225fa20222b694523a798d5c4c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/dee88e0fa2a9225fa20222b694523a798d5c4c52", "html_url": "https://github.com/rust-lang/rust/commit/dee88e0fa2a9225fa20222b694523a798d5c4c52"}], "stats": {"total": 816, "additions": 716, "deletions": 100}, "files": [{"sha": "fb2a22e94a5272de50225f445eb42da50f1e562e", "filename": "compiler/rustc_data_structures/src/graph/dominators/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -299,7 +299,7 @@ impl<Node: Idx> Dominators<Node> {\n     /// of two unrelated nodes will also be consistent, but otherwise the order has no\n     /// meaning.) This method cannot be used to determine if either Node dominates the other.\n     pub fn rank_partial_cmp(&self, lhs: Node, rhs: Node) -> Option<Ordering> {\n-        self.post_order_rank[lhs].partial_cmp(&self.post_order_rank[rhs])\n+        self.post_order_rank[rhs].partial_cmp(&self.post_order_rank[lhs])\n     }\n }\n "}, {"sha": "1ae01106f2014c4362d29d3a4a306dde7f091bd0", "filename": "compiler/rustc_error_codes/src/error_codes/E0208.md", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0208.md", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0208.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0208.md?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -1 +1,46 @@\n #### This error code is internal to the compiler and will not be emitted with normal Rust code.\n+#### Note: this error code is no longer emitted by the compiler.\n+\n+This error code shows the variance of a type's generic parameters.\n+\n+Erroneous code example:\n+\n+```compile_fail\n+// NOTE: this feature is perma-unstable and should *only* be used for\n+//       testing purposes.\n+#![feature(rustc_attrs)]\n+\n+#[rustc_variance]\n+struct Foo<'a, T> { // error: deliberate error to display type's variance\n+    t: &'a mut T,\n+}\n+```\n+\n+which produces the following error:\n+\n+```text\n+error: [-, o]\n+ --> <anon>:4:1\n+  |\n+4 | struct Foo<'a, T> {\n+  | ^^^^^^^^^^^^^^^^^\n+```\n+\n+*Note that while `#[rustc_variance]` still exists and is used within the*\n+*compiler, it no longer is marked as `E0208` and instead has no error code.*\n+\n+This error is deliberately triggered with the `#[rustc_variance]` attribute\n+(`#![feature(rustc_attrs)]` must be enabled) and helps to show you the variance\n+of the type's generic parameters. You can read more about variance and\n+subtyping in [this section of the Rustnomicon]. For a more in depth look at\n+variance (including a more complete list of common variances) see\n+[this section of the Reference]. For information on how variance is implemented\n+in the compiler, see [this section of `rustc-dev-guide`].\n+\n+This error can be easily fixed by removing the `#[rustc_variance]` attribute,\n+the compiler's suggestion to comment it out can be applied automatically with\n+`rustfix`.\n+\n+[this section of the Rustnomicon]: https://doc.rust-lang.org/nomicon/subtyping.html\n+[this section of the Reference]: https://doc.rust-lang.org/reference/subtyping.html#variance\n+[this section of `rustc-dev-guide`]: https://rustc-dev-guide.rust-lang.org/variance.html"}, {"sha": "d6566860f8170a96d25bb96f3d2e08a56c88b6fc", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -1787,6 +1787,14 @@ impl Expr<'_> {\n         expr\n     }\n \n+    pub fn peel_borrows(&self) -> &Self {\n+        let mut expr = self;\n+        while let ExprKind::AddrOf(.., inner) = &expr.kind {\n+            expr = inner;\n+        }\n+        expr\n+    }\n+\n     pub fn can_have_side_effects(&self) -> bool {\n         match self.peel_drop_temps().kind {\n             ExprKind::Path(_) | ExprKind::Lit(_) => false,"}, {"sha": "54fa5702fbca4b49298e49472722991f023a9751", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -291,6 +291,7 @@ language_item_table! {\n     IdentityFuture,          sym::identity_future,     identity_future_fn,         Target::Fn,             GenericRequirement::None;\n     GetContext,              sym::get_context,         get_context_fn,             Target::Fn,             GenericRequirement::None;\n \n+    Context,                 sym::Context,             context,                    Target::Struct,         GenericRequirement::None;\n     FuturePoll,              sym::poll,                future_poll_fn,             Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n \n     FromFrom,                sym::from,                from_fn,                    Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;"}, {"sha": "5feeb92d3378251e9e551acf2a435c9c24134c62", "filename": "compiler/rustc_hir_analysis/src/variance/test.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Ftest.rs?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -1,4 +1,3 @@\n-use rustc_errors::struct_span_err;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::sym;\n \n@@ -8,8 +7,8 @@ pub fn test_variance(tcx: TyCtxt<'_>) {\n     for id in tcx.hir().items() {\n         if tcx.has_attr(id.owner_id.to_def_id(), sym::rustc_variance) {\n             let variances_of = tcx.variances_of(id.owner_id);\n-            struct_span_err!(tcx.sess, tcx.def_span(id.owner_id), E0208, \"{:?}\", variances_of)\n-                .emit();\n+\n+            tcx.sess.struct_span_err(tcx.def_span(id.owner_id), format!(\"{variances_of:?}\")).emit();\n         }\n     }\n }"}, {"sha": "712f9b87aed0ad623b3bcd77be096c07cb5ce5b1", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -31,6 +31,7 @@\n use super::FnCtxt;\n \n use crate::type_error_struct;\n+use hir::ExprKind;\n use rustc_errors::{\n     struct_span_err, Applicability, DelayDm, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n };\n@@ -151,7 +152,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n #[derive(Copy, Clone)]\n pub enum CastError {\n-    ErrorGuaranteed,\n+    ErrorGuaranteed(ErrorGuaranteed),\n \n     CastToBool,\n     CastToChar,\n@@ -176,8 +177,8 @@ pub enum CastError {\n }\n \n impl From<ErrorGuaranteed> for CastError {\n-    fn from(_: ErrorGuaranteed) -> Self {\n-        CastError::ErrorGuaranteed\n+    fn from(err: ErrorGuaranteed) -> Self {\n+        CastError::ErrorGuaranteed(err)\n     }\n }\n \n@@ -225,33 +226,36 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n \n     fn report_cast_error(&self, fcx: &FnCtxt<'a, 'tcx>, e: CastError) {\n         match e {\n-            CastError::ErrorGuaranteed => {\n+            CastError::ErrorGuaranteed(_) => {\n                 // an error has already been reported\n             }\n             CastError::NeedDeref => {\n-                let error_span = self.span;\n                 let mut err = make_invalid_casting_error(\n                     fcx.tcx.sess,\n                     self.span,\n                     self.expr_ty,\n                     self.cast_ty,\n                     fcx,\n                 );\n-                let cast_ty = fcx.ty_to_string(self.cast_ty);\n-                err.span_label(\n-                    error_span,\n-                    format!(\"cannot cast `{}` as `{}`\", fcx.ty_to_string(self.expr_ty), cast_ty),\n-                );\n-                if let Ok(snippet) = fcx.sess().source_map().span_to_snippet(self.expr_span) {\n-                    err.span_suggestion(\n-                        self.expr_span,\n-                        \"dereference the expression\",\n-                        format!(\"*{}\", snippet),\n-                        Applicability::MaybeIncorrect,\n+\n+                if matches!(self.expr.kind, ExprKind::AddrOf(..)) {\n+                    // get just the borrow part of the expression\n+                    let span = self.expr_span.with_hi(self.expr.peel_borrows().span.lo());\n+                    err.span_suggestion_verbose(\n+                        span,\n+                        \"remove the unneeded borrow\",\n+                        \"\",\n+                        Applicability::MachineApplicable,\n                     );\n                 } else {\n-                    err.span_help(self.expr_span, \"dereference the expression with `*`\");\n+                    err.span_suggestion_verbose(\n+                        self.expr_span.shrink_to_lo(),\n+                        \"dereference the expression\",\n+                        \"*\",\n+                        Applicability::MachineApplicable,\n+                    );\n                 }\n+\n                 err.emit();\n             }\n             CastError::NeedViaThinPtr | CastError::NeedViaPtr => {"}, {"sha": "ce04d8d21f4cdf2e4255d13faccc98f781d61681", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -1952,6 +1952,15 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_ty(GeneratorWitness(types))\n     }\n \n+    /// Creates a `&mut Context<'_>` [`Ty`] with erased lifetimes.\n+    pub fn mk_task_context(self) -> Ty<'tcx> {\n+        let context_did = self.require_lang_item(LangItem::Context, None);\n+        let context_adt_ref = self.adt_def(context_did);\n+        let context_substs = self.intern_substs(&[self.lifetimes.re_erased.into()]);\n+        let context_ty = self.mk_adt(context_adt_ref, context_substs);\n+        self.mk_mut_ref(self.lifetimes.re_erased, context_ty)\n+    }\n+\n     #[inline]\n     pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {\n         self.mk_ty_infer(TyVar(v))"}, {"sha": "c54348404536ad10cf8e05e2e2f9cbd2a60b10ed", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -341,11 +341,11 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n                     if a.is_in_same_bcb(b) {\n                         Some(Ordering::Equal)\n                     } else {\n-                        // Sort equal spans by dominator relationship, in reverse order (so\n-                        // dominators always come after the dominated equal spans). When later\n-                        // comparing two spans in order, the first will either dominate the second,\n-                        // or they will have no dominator relationship.\n-                        self.basic_coverage_blocks.dominators().rank_partial_cmp(b.bcb, a.bcb)\n+                        // Sort equal spans by dominator relationship (so dominators always come\n+                        // before the dominated equal spans). When later comparing two spans in\n+                        // order, the first will either dominate the second, or they will have no\n+                        // dominator relationship.\n+                        self.basic_coverage_blocks.dominators().rank_partial_cmp(a.bcb, b.bcb)\n                     }\n                 } else {\n                     // Sort hi() in reverse order so shorter spans are attempted after longer spans."}, {"sha": "39c61a34afcbdab70fa189af8a82527e35993f7e", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 111, "deletions": 7, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -460,6 +460,104 @@ fn replace_local<'tcx>(\n     new_local\n }\n \n+/// Transforms the `body` of the generator applying the following transforms:\n+///\n+/// - Eliminates all the `get_context` calls that async lowering created.\n+/// - Replace all `Local` `ResumeTy` types with `&mut Context<'_>` (`context_mut_ref`).\n+///\n+/// The `Local`s that have their types replaced are:\n+/// - The `resume` argument itself.\n+/// - The argument to `get_context`.\n+/// - The yielded value of a `yield`.\n+///\n+/// The `ResumeTy` hides a `&mut Context<'_>` behind an unsafe raw pointer, and the\n+/// `get_context` function is being used to convert that back to a `&mut Context<'_>`.\n+///\n+/// Ideally the async lowering would not use the `ResumeTy`/`get_context` indirection,\n+/// but rather directly use `&mut Context<'_>`, however that would currently\n+/// lead to higher-kinded lifetime errors.\n+/// See <https://github.com/rust-lang/rust/issues/105501>.\n+///\n+/// The async lowering step and the type / lifetime inference / checking are\n+/// still using the `ResumeTy` indirection for the time being, and that indirection\n+/// is removed here. After this transform, the generator body only knows about `&mut Context<'_>`.\n+fn transform_async_context<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+    let context_mut_ref = tcx.mk_task_context();\n+\n+    // replace the type of the `resume` argument\n+    replace_resume_ty_local(tcx, body, Local::new(2), context_mut_ref);\n+\n+    let get_context_def_id = tcx.require_lang_item(LangItem::GetContext, None);\n+\n+    for bb in BasicBlock::new(0)..body.basic_blocks.next_index() {\n+        let bb_data = &body[bb];\n+        if bb_data.is_cleanup {\n+            continue;\n+        }\n+\n+        match &bb_data.terminator().kind {\n+            TerminatorKind::Call { func, .. } => {\n+                let func_ty = func.ty(body, tcx);\n+                if let ty::FnDef(def_id, _) = *func_ty.kind() {\n+                    if def_id == get_context_def_id {\n+                        let local = eliminate_get_context_call(&mut body[bb]);\n+                        replace_resume_ty_local(tcx, body, local, context_mut_ref);\n+                    }\n+                } else {\n+                    continue;\n+                }\n+            }\n+            TerminatorKind::Yield { resume_arg, .. } => {\n+                replace_resume_ty_local(tcx, body, resume_arg.local, context_mut_ref);\n+            }\n+            _ => {}\n+        }\n+    }\n+}\n+\n+fn eliminate_get_context_call<'tcx>(bb_data: &mut BasicBlockData<'tcx>) -> Local {\n+    let terminator = bb_data.terminator.take().unwrap();\n+    if let TerminatorKind::Call { mut args, destination, target, .. } = terminator.kind {\n+        let arg = args.pop().unwrap();\n+        let local = arg.place().unwrap().local;\n+\n+        let arg = Rvalue::Use(arg);\n+        let assign = Statement {\n+            source_info: terminator.source_info,\n+            kind: StatementKind::Assign(Box::new((destination, arg))),\n+        };\n+        bb_data.statements.push(assign);\n+        bb_data.terminator = Some(Terminator {\n+            source_info: terminator.source_info,\n+            kind: TerminatorKind::Goto { target: target.unwrap() },\n+        });\n+        local\n+    } else {\n+        bug!();\n+    }\n+}\n+\n+#[cfg_attr(not(debug_assertions), allow(unused))]\n+fn replace_resume_ty_local<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    body: &mut Body<'tcx>,\n+    local: Local,\n+    context_mut_ref: Ty<'tcx>,\n+) {\n+    let local_ty = std::mem::replace(&mut body.local_decls[local].ty, context_mut_ref);\n+    // We have to replace the `ResumeTy` that is used for type and borrow checking\n+    // with `&mut Context<'_>` in MIR.\n+    #[cfg(debug_assertions)]\n+    {\n+        if let ty::Adt(resume_ty_adt, _) = local_ty.kind() {\n+            let expected_adt = tcx.adt_def(tcx.require_lang_item(LangItem::ResumeTy, None));\n+            assert_eq!(*resume_ty_adt, expected_adt);\n+        } else {\n+            panic!(\"expected `ResumeTy`, found `{:?}`\", local_ty);\n+        };\n+    }\n+}\n+\n struct LivenessInfo {\n     /// Which locals are live across any suspension point.\n     saved_locals: GeneratorSavedLocals,\n@@ -1283,13 +1381,13 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n             }\n         };\n \n-        let is_async_kind = body.generator_kind().unwrap() != GeneratorKind::Gen;\n+        let is_async_kind = matches!(body.generator_kind(), Some(GeneratorKind::Async(_)));\n         let (state_adt_ref, state_substs) = if is_async_kind {\n             // Compute Poll<return_ty>\n-            let state_did = tcx.require_lang_item(LangItem::Poll, None);\n-            let state_adt_ref = tcx.adt_def(state_did);\n-            let state_substs = tcx.intern_substs(&[body.return_ty().into()]);\n-            (state_adt_ref, state_substs)\n+            let poll_did = tcx.require_lang_item(LangItem::Poll, None);\n+            let poll_adt_ref = tcx.adt_def(poll_did);\n+            let poll_substs = tcx.intern_substs(&[body.return_ty().into()]);\n+            (poll_adt_ref, poll_substs)\n         } else {\n             // Compute GeneratorState<yield_ty, return_ty>\n             let state_did = tcx.require_lang_item(LangItem::GeneratorState, None);\n@@ -1303,13 +1401,19 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         // RETURN_PLACE then is a fresh unused local with type ret_ty.\n         let new_ret_local = replace_local(RETURN_PLACE, ret_ty, body, tcx);\n \n+        // Replace all occurrences of `ResumeTy` with `&mut Context<'_>` within async bodies.\n+        if is_async_kind {\n+            transform_async_context(tcx, body);\n+        }\n+\n         // We also replace the resume argument and insert an `Assign`.\n         // This is needed because the resume argument `_2` might be live across a `yield`, in which\n         // case there is no `Assign` to it that the transform can turn into a store to the generator\n         // state. After the yield the slot in the generator state would then be uninitialized.\n         let resume_local = Local::new(2);\n-        let new_resume_local =\n-            replace_local(resume_local, body.local_decls[resume_local].ty, body, tcx);\n+        let resume_ty =\n+            if is_async_kind { tcx.mk_task_context() } else { body.local_decls[resume_local].ty };\n+        let new_resume_local = replace_local(resume_local, resume_ty, body, tcx);\n \n         // When first entering the generator, move the resume argument into its new local.\n         let source_info = SourceInfo::outermost(body.span);"}, {"sha": "7597b8d126a9ceb55375ecdb2f9f523cd756e093", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -164,6 +164,7 @@ symbols! {\n         Capture,\n         Center,\n         Clone,\n+        Context,\n         Continue,\n         Copy,\n         Count,"}, {"sha": "91a505a72fae7a6be74b31e2b2ff0909af29b877", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -108,21 +108,41 @@ fn fn_sig_for_fn_abi<'tcx>(\n             // `Generator::resume(...) -> GeneratorState` function in case we\n             // have an ordinary generator, or the `Future::poll(...) -> Poll`\n             // function in case this is a special generator backing an async construct.\n-            let ret_ty = if tcx.generator_is_async(did) {\n-                let state_did = tcx.require_lang_item(LangItem::Poll, None);\n-                let state_adt_ref = tcx.adt_def(state_did);\n-                let state_substs = tcx.intern_substs(&[sig.return_ty.into()]);\n-                tcx.mk_adt(state_adt_ref, state_substs)\n+            let (resume_ty, ret_ty) = if tcx.generator_is_async(did) {\n+                // The signature should be `Future::poll(_, &mut Context<'_>) -> Poll<Output>`\n+                let poll_did = tcx.require_lang_item(LangItem::Poll, None);\n+                let poll_adt_ref = tcx.adt_def(poll_did);\n+                let poll_substs = tcx.intern_substs(&[sig.return_ty.into()]);\n+                let ret_ty = tcx.mk_adt(poll_adt_ref, poll_substs);\n+\n+                // We have to replace the `ResumeTy` that is used for type and borrow checking\n+                // with `&mut Context<'_>` which is used in codegen.\n+                #[cfg(debug_assertions)]\n+                {\n+                    if let ty::Adt(resume_ty_adt, _) = sig.resume_ty.kind() {\n+                        let expected_adt =\n+                            tcx.adt_def(tcx.require_lang_item(LangItem::ResumeTy, None));\n+                        assert_eq!(*resume_ty_adt, expected_adt);\n+                    } else {\n+                        panic!(\"expected `ResumeTy`, found `{:?}`\", sig.resume_ty);\n+                    };\n+                }\n+                let context_mut_ref = tcx.mk_task_context();\n+\n+                (context_mut_ref, ret_ty)\n             } else {\n+                // The signature should be `Generator::resume(_, Resume) -> GeneratorState<Yield, Return>`\n                 let state_did = tcx.require_lang_item(LangItem::GeneratorState, None);\n                 let state_adt_ref = tcx.adt_def(state_did);\n                 let state_substs = tcx.intern_substs(&[sig.yield_ty.into(), sig.return_ty.into()]);\n-                tcx.mk_adt(state_adt_ref, state_substs)\n+                let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n+\n+                (sig.resume_ty, ret_ty)\n             };\n \n             ty::Binder::bind_with_vars(\n                 tcx.mk_fn_sig(\n-                    [env_ty, sig.resume_ty].iter(),\n+                    [env_ty, resume_ty].iter(),\n                     &ret_ty,\n                     false,\n                     hir::Unsafety::Normal,"}, {"sha": "c4fb362094664196a354070a1a8a246062734959", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -112,6 +112,10 @@ pub unsafe fn get_context<'a, 'b>(cx: ResumeTy) -> &'a mut Context<'b> {\n     unsafe { &mut *cx.0.as_ptr().cast() }\n }\n \n+// FIXME(swatinem): This fn is currently needed to work around shortcomings\n+// in type and lifetime inference.\n+// See the comment at the bottom of `LoweringContext::make_async_expr` and\n+// <https://github.com/rust-lang/rust/issues/104826>.\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[inline]"}, {"sha": "89adfccd90135233ef2ac66b533571bbbc3eeae5", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -174,6 +174,7 @@ impl RawWakerVTable {\n /// Currently, `Context` only serves to provide access to a [`&Waker`](Waker)\n /// which can be used to wake the current task.\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n+#[cfg_attr(not(bootstrap), lang = \"Context\")]\n pub struct Context<'a> {\n     waker: &'a Waker,\n     // Ensure we future-proof against variance changes by forcing"}, {"sha": "3092c656cd729ba787276b95d199b2afbe15fb8f", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -775,7 +775,7 @@ fn make_test_name(\n ) -> test::TestName {\n     // Print the name of the file, relative to the repository root.\n     // `src_base` looks like `/path/to/rust/tests/ui`\n-    let root_directory = config.src_base.parent().unwrap().parent().unwrap().parent().unwrap();\n+    let root_directory = config.src_base.parent().unwrap().parent().unwrap();\n     let path = testpaths.file.strip_prefix(root_directory).unwrap();\n     let debugger = match config.debugger {\n         Some(d) => format!(\"-{}\", d),"}, {"sha": "5b84b51a035d4141ccd80a1d3cafd6522182fd5a", "filename": "src/tools/tidy/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -27,8 +27,7 @@ const ERROR_DOCS_PATH: &str = \"compiler/rustc_error_codes/src/error_codes/\";\n const ERROR_TESTS_PATH: &str = \"tests/ui/error-codes/\";\n \n // Error codes that (for some reason) can't have a doctest in their explanation. Error codes are still expected to provide a code example, even if untested.\n-const IGNORE_DOCTEST_CHECK: &[&str] =\n-    &[\"E0208\", \"E0464\", \"E0570\", \"E0601\", \"E0602\", \"E0640\", \"E0717\"];\n+const IGNORE_DOCTEST_CHECK: &[&str] = &[\"E0464\", \"E0570\", \"E0601\", \"E0602\", \"E0640\", \"E0717\"];\n \n // Error codes that don't yet have a UI test. This list will eventually be removed.\n const IGNORE_UI_TEST_CHECK: &[&str] ="}, {"sha": "2a7f90fe9476a4513c6bbe2478399b7022f0aa75", "filename": "tests/mir-opt/building/async_await.a-{closure#0}.generator_resume.0.mir", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fmir-opt%2Fbuilding%2Fasync_await.a-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fmir-opt%2Fbuilding%2Fasync_await.a-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fasync_await.a-%7Bclosure%230%7D.generator_resume.0.mir?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -0,0 +1,41 @@\n+// MIR for `a::{closure#0}` 0 generator_resume\n+/* generator_layout = GeneratorLayout {\n+    field_tys: {},\n+    variant_fields: {\n+        Unresumed(0): [],\n+        Returned (1): [],\n+        Panicked (2): [],\n+    },\n+    storage_conflicts: BitMatrix(0x0) {},\n+} */\n+\n+fn a::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:11:14: 11:16]>, _2: &mut Context<'_>) -> Poll<()> {\n+    debug _task_context => _4;           // in scope 0 at $DIR/async_await.rs:+0:14: +0:16\n+    let mut _0: std::task::Poll<()>;     // return place in scope 0 at $DIR/async_await.rs:+0:14: +0:16\n+    let mut _3: ();                      // in scope 0 at $DIR/async_await.rs:+0:14: +0:16\n+    let mut _4: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+0:14: +0:16\n+    let mut _5: u32;                     // in scope 0 at $DIR/async_await.rs:+0:14: +0:16\n+\n+    bb0: {\n+        _5 = discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:11:14: 11:16]))); // scope 0 at $DIR/async_await.rs:+0:14: +0:16\n+        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at $DIR/async_await.rs:+0:14: +0:16\n+    }\n+\n+    bb1: {\n+        _4 = move _2;                    // scope 0 at $DIR/async_await.rs:+0:14: +0:16\n+        _3 = const ();                   // scope 0 at $DIR/async_await.rs:+0:14: +0:16\n+        Deinit(_0);                      // scope 0 at $DIR/async_await.rs:+0:16: +0:16\n+        ((_0 as Ready).0: ()) = move _3; // scope 0 at $DIR/async_await.rs:+0:16: +0:16\n+        discriminant(_0) = 0;            // scope 0 at $DIR/async_await.rs:+0:16: +0:16\n+        discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:11:14: 11:16]))) = 1; // scope 0 at $DIR/async_await.rs:+0:16: +0:16\n+        return;                          // scope 0 at $DIR/async_await.rs:+0:16: +0:16\n+    }\n+\n+    bb2: {\n+        assert(const false, \"`async fn` resumed after completion\") -> bb2; // scope 0 at $DIR/async_await.rs:+0:14: +0:16\n+    }\n+\n+    bb3: {\n+        unreachable;                     // scope 0 at $DIR/async_await.rs:+0:14: +0:16\n+    }\n+}"}, {"sha": "05edc4797d4e552cd7f1aa3a6c03587f20e0ee20", "filename": "tests/mir-opt/building/async_await.b-{closure#0}.generator_resume.0.mir", "status": "added", "additions": 337, "deletions": 0, "changes": 337, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -0,0 +1,337 @@\n+// MIR for `b::{closure#0}` 0 generator_resume\n+/* generator_layout = GeneratorLayout {\n+    field_tys: {\n+        _0: impl std::future::Future<Output = ()>,\n+        _1: impl std::future::Future<Output = ()>,\n+    },\n+    variant_fields: {\n+        Unresumed(0): [],\n+        Returned (1): [],\n+        Panicked (2): [],\n+        Suspend0 (3): [_0],\n+        Suspend1 (4): [_1],\n+    },\n+    storage_conflicts: BitMatrix(2x2) {\n+        (_0, _0),\n+        (_1, _1),\n+    },\n+} */\n+\n+fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>, _2: &mut Context<'_>) -> Poll<()> {\n+    debug _task_context => _38;          // in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+    let mut _0: std::task::Poll<()>;     // return place in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+    let _3: ();                          // in scope 0 at $DIR/async_await.rs:+1:5: +1:14\n+    let mut _4: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+    let mut _5: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:5: +1:8\n+    let mut _6: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+    let mut _7: ();                      // in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+    let _8: ();                          // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+    let mut _9: std::task::Poll<()>;     // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+    let mut _10: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+    let mut _11: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+    let mut _12: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+    let mut _13: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+1:5: +1:14\n+    let mut _14: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+1:5: +1:14\n+    let mut _15: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+    let mut _16: isize;                  // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+    let mut _18: !;                      // in scope 0 at $DIR/async_await.rs:+1:5: +1:14\n+    let mut _19: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+    let mut _20: ();                     // in scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+    let mut _21: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+    let mut _22: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:5: +2:8\n+    let mut _23: impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+    let _24: ();                         // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+    let mut _25: std::task::Poll<()>;    // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+    let mut _26: std::pin::Pin<&mut impl std::future::Future<Output = ()>>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+    let mut _27: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+    let mut _28: &mut impl std::future::Future<Output = ()>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+    let mut _29: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+2:5: +2:14\n+    let mut _30: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+2:5: +2:14\n+    let mut _31: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+    let mut _32: isize;                  // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+    let mut _34: !;                      // in scope 0 at $DIR/async_await.rs:+2:5: +2:14\n+    let mut _35: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+    let mut _36: ();                     // in scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+    let mut _37: ();                     // in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+    let mut _38: &mut std::task::Context<'_>; // in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+    let mut _39: u32;                    // in scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+    scope 1 {\n+        debug __awaitee => (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>); // in scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        let _17: ();                     // in scope 1 at $DIR/async_await.rs:+1:5: +1:14\n+        scope 2 {\n+        }\n+        scope 3 {\n+            debug result => _17;         // in scope 3 at $DIR/async_await.rs:+1:5: +1:14\n+        }\n+    }\n+    scope 4 {\n+        debug __awaitee => (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>); // in scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        let _33: ();                     // in scope 4 at $DIR/async_await.rs:+2:5: +2:14\n+        scope 5 {\n+        }\n+        scope 6 {\n+            debug result => _33;         // in scope 6 at $DIR/async_await.rs:+2:5: +2:14\n+        }\n+    }\n+\n+    bb0: {\n+        _39 = discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))); // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+        switchInt(move _39) -> [0: bb1, 1: bb29, 3: bb27, 4: bb28, otherwise: bb30]; // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+    }\n+\n+    bb1: {\n+        _38 = move _2;                   // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+        StorageLive(_3);                 // scope 0 at $DIR/async_await.rs:+1:5: +1:14\n+        StorageLive(_4);                 // scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+        StorageLive(_5);                 // scope 0 at $DIR/async_await.rs:+1:5: +1:8\n+        _5 = a() -> bb2;                 // scope 0 at $DIR/async_await.rs:+1:5: +1:8\n+                                         // mir::Constant\n+                                         // + span: $DIR/async_await.rs:15:5: 15:6\n+                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {a}, val: Value(<ZST>) }\n+    }\n+\n+    bb2: {\n+        _4 = <impl Future<Output = ()> as IntoFuture>::into_future(move _5) -> bb3; // scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+                                         // mir::Constant\n+                                         // + span: $DIR/async_await.rs:15:8: 15:14\n+                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }\n+    }\n+\n+    bb3: {\n+        StorageDead(_5);                 // scope 0 at $DIR/async_await.rs:+1:13: +1:14\n+        nop;                             // scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+        (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>) = move _4; // scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+        goto -> bb4;                     // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+    }\n+\n+    bb4: {\n+        StorageLive(_8);                 // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        StorageLive(_9);                 // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        StorageLive(_10);                // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n+        StorageLive(_11);                // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n+        StorageLive(_12);                // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n+        _12 = &mut (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>); // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n+        _11 = &mut (*_12);               // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n+        _10 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _11) -> bb5; // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n+                                         // mir::Constant\n+                                         // + span: $DIR/async_await.rs:15:8: 15:14\n+                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }\n+    }\n+\n+    bb5: {\n+        StorageDead(_11);                // scope 2 at $DIR/async_await.rs:+1:13: +1:14\n+        StorageLive(_13);                // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n+        StorageLive(_14);                // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n+        StorageLive(_15);                // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n+        _15 = _38;                       // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n+        _14 = move _15;                  // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n+        goto -> bb6;                     // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n+    }\n+\n+    bb6: {\n+        _13 = &mut (*_14);               // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n+        StorageDead(_15);                // scope 2 at $DIR/async_await.rs:+1:13: +1:14\n+        _9 = <impl Future<Output = ()> as Future>::poll(move _10, move _13) -> bb7; // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n+                                         // mir::Constant\n+                                         // + span: $DIR/async_await.rs:15:8: 15:14\n+                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }\n+    }\n+\n+    bb7: {\n+        StorageDead(_13);                // scope 2 at $DIR/async_await.rs:+1:13: +1:14\n+        StorageDead(_10);                // scope 2 at $DIR/async_await.rs:+1:13: +1:14\n+        _16 = discriminant(_9);          // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        switchInt(move _16) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+    }\n+\n+    bb8: {\n+        _8 = const ();                   // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        StorageDead(_14);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n+        StorageDead(_12);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n+        StorageDead(_9);                 // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n+        StorageDead(_8);                 // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n+        StorageLive(_19);                // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        StorageLive(_20);                // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        _20 = ();                        // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        Deinit(_0);                      // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        discriminant(_0) = 1;            // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 3; // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        return;                          // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+    }\n+\n+    bb9: {\n+        unreachable;                     // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+    }\n+\n+    bb10: {\n+        StorageLive(_17);                // scope 1 at $DIR/async_await.rs:+1:5: +1:14\n+        _17 = ((_9 as Ready).0: ());     // scope 1 at $DIR/async_await.rs:+1:5: +1:14\n+        _3 = _17;                        // scope 3 at $DIR/async_await.rs:+1:5: +1:14\n+        StorageDead(_17);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n+        StorageDead(_14);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n+        StorageDead(_12);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n+        StorageDead(_9);                 // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n+        StorageDead(_8);                 // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n+        goto -> bb12;                    // scope 0 at $DIR/async_await.rs:+1:13: +1:14\n+    }\n+\n+    bb11: {\n+        StorageDead(_20);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n+        _38 = move _19;                  // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        StorageDead(_19);                // scope 1 at $DIR/async_await.rs:+1:13: +1:14\n+        _7 = const ();                   // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+        goto -> bb4;                     // scope 1 at $DIR/async_await.rs:+1:8: +1:14\n+    }\n+\n+    bb12: {\n+        nop;                             // scope 0 at $DIR/async_await.rs:+1:13: +1:14\n+        goto -> bb13;                    // scope 0 at $DIR/async_await.rs:+1:14: +1:15\n+    }\n+\n+    bb13: {\n+        StorageDead(_4);                 // scope 0 at $DIR/async_await.rs:+1:14: +1:15\n+        StorageDead(_3);                 // scope 0 at $DIR/async_await.rs:+1:14: +1:15\n+        StorageLive(_21);                // scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+        StorageLive(_22);                // scope 0 at $DIR/async_await.rs:+2:5: +2:8\n+        _22 = a() -> bb14;               // scope 0 at $DIR/async_await.rs:+2:5: +2:8\n+                                         // mir::Constant\n+                                         // + span: $DIR/async_await.rs:16:5: 16:6\n+                                         // + literal: Const { ty: fn() -> impl Future<Output = ()> {a}, val: Value(<ZST>) }\n+    }\n+\n+    bb14: {\n+        _21 = <impl Future<Output = ()> as IntoFuture>::into_future(move _22) -> bb15; // scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+                                         // mir::Constant\n+                                         // + span: $DIR/async_await.rs:16:8: 16:14\n+                                         // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }\n+    }\n+\n+    bb15: {\n+        StorageDead(_22);                // scope 0 at $DIR/async_await.rs:+2:13: +2:14\n+        nop;                             // scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+        (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>) = move _21; // scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+        goto -> bb16;                    // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+    }\n+\n+    bb16: {\n+        StorageLive(_24);                // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        StorageLive(_25);                // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        StorageLive(_26);                // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n+        StorageLive(_27);                // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n+        StorageLive(_28);                // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n+        _28 = &mut (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>); // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n+        _27 = &mut (*_28);               // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n+        _26 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _27) -> bb17; // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n+                                         // mir::Constant\n+                                         // + span: $DIR/async_await.rs:16:8: 16:14\n+                                         // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }\n+    }\n+\n+    bb17: {\n+        StorageDead(_27);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n+        StorageLive(_29);                // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n+        StorageLive(_30);                // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n+        StorageLive(_31);                // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n+        _31 = _38;                       // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n+        _30 = move _31;                  // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n+        goto -> bb18;                    // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n+    }\n+\n+    bb18: {\n+        _29 = &mut (*_30);               // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n+        StorageDead(_31);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n+        _25 = <impl Future<Output = ()> as Future>::poll(move _26, move _29) -> bb19; // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n+                                         // mir::Constant\n+                                         // + span: $DIR/async_await.rs:16:8: 16:14\n+                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }\n+    }\n+\n+    bb19: {\n+        StorageDead(_29);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n+        StorageDead(_26);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n+        _32 = discriminant(_25);         // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        switchInt(move _32) -> [0: bb22, 1: bb20, otherwise: bb21]; // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+    }\n+\n+    bb20: {\n+        _24 = const ();                  // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        StorageDead(_30);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n+        StorageDead(_28);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n+        StorageDead(_25);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n+        StorageDead(_24);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n+        StorageLive(_35);                // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        StorageLive(_36);                // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        _36 = ();                        // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        Deinit(_0);                      // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        discriminant(_0) = 1;            // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 4; // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        return;                          // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+    }\n+\n+    bb21: {\n+        unreachable;                     // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+    }\n+\n+    bb22: {\n+        StorageLive(_33);                // scope 4 at $DIR/async_await.rs:+2:5: +2:14\n+        _33 = ((_25 as Ready).0: ());    // scope 4 at $DIR/async_await.rs:+2:5: +2:14\n+        _37 = _33;                       // scope 6 at $DIR/async_await.rs:+2:5: +2:14\n+        StorageDead(_33);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n+        StorageDead(_30);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n+        StorageDead(_28);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n+        StorageDead(_25);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n+        StorageDead(_24);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n+        goto -> bb24;                    // scope 0 at $DIR/async_await.rs:+2:13: +2:14\n+    }\n+\n+    bb23: {\n+        StorageDead(_36);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n+        _38 = move _35;                  // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        StorageDead(_35);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n+        _7 = const ();                   // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        goto -> bb16;                    // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+    }\n+\n+    bb24: {\n+        nop;                             // scope 0 at $DIR/async_await.rs:+2:13: +2:14\n+        goto -> bb25;                    // scope 0 at $DIR/async_await.rs:+3:1: +3:2\n+    }\n+\n+    bb25: {\n+        StorageDead(_21);                // scope 0 at $DIR/async_await.rs:+3:1: +3:2\n+        goto -> bb26;                    // scope 0 at $DIR/async_await.rs:+3:1: +3:2\n+    }\n+\n+    bb26: {\n+        Deinit(_0);                      // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n+        ((_0 as Ready).0: ()) = move _37; // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n+        discriminant(_0) = 0;            // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n+        discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 1; // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n+        return;                          // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n+    }\n+\n+    bb27: {\n+        StorageLive(_3);                 // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+        StorageLive(_4);                 // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+        StorageLive(_19);                // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+        StorageLive(_20);                // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+        _19 = move _2;                   // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+        goto -> bb11;                    // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+    }\n+\n+    bb28: {\n+        StorageLive(_21);                // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+        StorageLive(_35);                // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+        StorageLive(_36);                // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+        _35 = move _2;                   // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+        goto -> bb23;                    // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+    }\n+\n+    bb29: {\n+        assert(const false, \"`async fn` resumed after completion\") -> bb29; // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+    }\n+\n+    bb30: {\n+        unreachable;                     // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+    }\n+}"}, {"sha": "0b991e3b8f8cc7ebb8d46161cd49839cc1f3db8b", "filename": "tests/mir-opt/building/async_await.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fmir-opt%2Fbuilding%2Fasync_await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fmir-opt%2Fbuilding%2Fasync_await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fasync_await.rs?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -0,0 +1,17 @@\n+// This test makes sure that the generator MIR pass eliminates all calls to\n+// `get_context`, and that the MIR argument type for an async fn and all locals\n+// related to `yield` are `&mut Context`, and its return type is `Poll`.\n+\n+// edition:2018\n+// compile-flags: -C panic=abort\n+\n+#![crate_type = \"lib\"]\n+\n+// EMIT_MIR async_await.a-{closure#0}.generator_resume.0.mir\n+async fn a() {}\n+\n+// EMIT_MIR async_await.b-{closure#0}.generator_resume.0.mir\n+pub async fn b() {\n+    a().await;\n+    a().await\n+}"}, {"sha": "c67d42889d69b3c7bb32b2128bdcf777146309a0", "filename": "tests/ui/error-codes/E0208.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Ferror-codes%2FE0208.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Ferror-codes%2FE0208.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0208.rs?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -0,0 +1,8 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_variance]\n+struct Foo<'a, T> { //~ ERROR [-, o]\n+    t: &'a mut T,\n+}\n+\n+fn main() {}"}, {"sha": "dbbb41e79500cbcd5b5fc862d64e915f0073ff46", "filename": "tests/ui/error-codes/E0208.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Ferror-codes%2FE0208.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Ferror-codes%2FE0208.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0208.stderr?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -0,0 +1,8 @@\n+error: [-, o]\n+  --> $DIR/E0208.rs:4:1\n+   |\n+LL | struct Foo<'a, T> {\n+   | ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "6f6c6513846cf228c0deeaad8c651af0faee273c", "filename": "tests/ui/error-codes/E0606.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Ferror-codes%2FE0606.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Ferror-codes%2FE0606.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0606.rs?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -1,3 +1,4 @@\n fn main() {\n-    &0u8 as u8; //~ ERROR E0606\n+    let x = &(&0u8 as u8); //~ ERROR E0606\n+    x as u8; //~ casting `&u8` as `u8` is invalid [E0606]\n }"}, {"sha": "2492eb299cc55b39de13f96225feee7ebfb76f79", "filename": "tests/ui/error-codes/E0606.stderr", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Ferror-codes%2FE0606.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Ferror-codes%2FE0606.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0606.stderr?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -1,12 +1,26 @@\n error[E0606]: casting `&u8` as `u8` is invalid\n-  --> $DIR/E0606.rs:2:5\n+  --> $DIR/E0606.rs:2:14\n    |\n-LL |     &0u8 as u8;\n-   |     ----^^^^^^\n-   |     |\n-   |     cannot cast `&u8` as `u8`\n-   |     help: dereference the expression: `*&0u8`\n+LL |     let x = &(&0u8 as u8);\n+   |              ^^^^^^^^^^^^\n+   |\n+help: remove the unneeded borrow\n+   |\n+LL -     let x = &(&0u8 as u8);\n+LL +     let x = &(0u8 as u8);\n+   |\n+\n+error[E0606]: casting `&u8` as `u8` is invalid\n+  --> $DIR/E0606.rs:3:5\n+   |\n+LL |     x as u8;\n+   |     ^^^^^^^\n+   |\n+help: dereference the expression\n+   |\n+LL |     *x as u8;\n+   |     +\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0606`."}, {"sha": "e8ee1d96942f782562f80881dabc2b6f78846af4", "filename": "tests/ui/error-festival.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-festival.stderr?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -69,10 +69,12 @@ error[E0606]: casting `&u8` as `u32` is invalid\n   --> $DIR/error-festival.rs:37:18\n    |\n LL |     let y: u32 = x as u32;\n-   |                  -^^^^^^^\n-   |                  |\n-   |                  cannot cast `&u8` as `u32`\n-   |                  help: dereference the expression: `*x`\n+   |                  ^^^^^^^^\n+   |\n+help: dereference the expression\n+   |\n+LL |     let y: u32 = *x as u32;\n+   |                  +\n \n error[E0607]: cannot cast thin pointer `*const u8` to fat pointer `*const [u8]`\n   --> $DIR/error-festival.rs:41:5"}, {"sha": "2a36a352c7341644a4c6a653b6b25bcc34e1a476", "filename": "tests/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -243,10 +243,12 @@ error[E0606]: casting `&{float}` as `f32` is invalid\n   --> $DIR/cast-rfc0401.rs:71:30\n    |\n LL |     vec![0.0].iter().map(|s| s as f32).collect::<Vec<f32>>();\n-   |                              -^^^^^^^\n-   |                              |\n-   |                              cannot cast `&{float}` as `f32`\n-   |                              help: dereference the expression: `*s`\n+   |                              ^^^^^^^^\n+   |\n+help: dereference the expression\n+   |\n+LL |     vec![0.0].iter().map(|s| *s as f32).collect::<Vec<f32>>();\n+   |                              +\n \n error: aborting due to 34 previous errors\n "}, {"sha": "4df2d8da3d6806ca5fa44b440f906204b1d329b0", "filename": "tests/ui/variance/variance-associated-consts.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Fvariance%2Fvariance-associated-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Fvariance%2Fvariance-associated-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvariance%2Fvariance-associated-consts.stderr?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -1,9 +1,8 @@\n-error[E0208]: [o]\n+error: [o]\n   --> $DIR/variance-associated-consts.rs:13:1\n    |\n LL | struct Foo<T: Trait> {\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0208`."}, {"sha": "51f17c7c2288720941d54229652087e97efdc416", "filename": "tests/ui/variance/variance-associated-types.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Fvariance%2Fvariance-associated-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Fvariance%2Fvariance-associated-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvariance%2Fvariance-associated-types.stderr?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -1,15 +1,14 @@\n-error[E0208]: [-, +]\n+error: [-, +]\n   --> $DIR/variance-associated-types.rs:13:1\n    |\n LL | struct Foo<'a, T : Trait<'a>> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [o, o]\n+error: [o, o]\n   --> $DIR/variance-associated-types.rs:18:1\n    |\n LL | struct Bar<'a, T : Trait<'a>> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0208`."}, {"sha": "55a760425ee592e6ab24d38560e0967796b1c86e", "filename": "tests/ui/variance/variance-object-types.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Fvariance%2Fvariance-object-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Fvariance%2Fvariance-object-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvariance%2Fvariance-object-types.stderr?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -1,9 +1,8 @@\n-error[E0208]: [o]\n+error: [o]\n   --> $DIR/variance-object-types.rs:7:1\n    |\n LL | struct Foo<'a> {\n    | ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0208`."}, {"sha": "eda02e9b03bb89b49fd1f3ea81c5fb6071c022d9", "filename": "tests/ui/variance/variance-regions-direct.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Fvariance%2Fvariance-regions-direct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Fvariance%2Fvariance-regions-direct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvariance%2Fvariance-regions-direct.stderr?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -1,45 +1,44 @@\n-error[E0208]: [-, -, -]\n+error: [-, -, -]\n   --> $DIR/variance-regions-direct.rs:9:1\n    |\n LL | struct Test2<'a, 'b, 'c> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [+, +, +]\n+error: [+, +, +]\n   --> $DIR/variance-regions-direct.rs:18:1\n    |\n LL | struct Test3<'a, 'b, 'c> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [-, o]\n+error: [-, o]\n   --> $DIR/variance-regions-direct.rs:27:1\n    |\n LL | struct Test4<'a, 'b:'a> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [+, o]\n+error: [+, o]\n   --> $DIR/variance-regions-direct.rs:35:1\n    |\n LL | struct Test5<'a, 'b:'a> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [-, o]\n+error: [-, o]\n   --> $DIR/variance-regions-direct.rs:45:1\n    |\n LL | struct Test6<'a, 'b:'a> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [*]\n+error: [*]\n   --> $DIR/variance-regions-direct.rs:52:1\n    |\n LL | struct Test7<'a> {\n    | ^^^^^^^^^^^^^^^^\n \n-error[E0208]: [+, -, o]\n+error: [+, -, o]\n   --> $DIR/variance-regions-direct.rs:59:1\n    |\n LL | enum Test8<'a, 'b, 'c:'b> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n \n-For more information about this error, try `rustc --explain E0208`."}, {"sha": "fa2f4d507f3d53ff11391a7a520182ef1b2e9ca6", "filename": "tests/ui/variance/variance-regions-indirect.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Fvariance%2Fvariance-regions-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Fvariance%2Fvariance-regions-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvariance%2Fvariance-regions-indirect.stderr?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -1,33 +1,32 @@\n-error[E0208]: [+, -, o, *]\n+error: [+, -, o, *]\n   --> $DIR/variance-regions-indirect.rs:8:1\n    |\n LL | enum Base<'a, 'b, 'c:'b, 'd> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [*, o, -, +]\n+error: [*, o, -, +]\n   --> $DIR/variance-regions-indirect.rs:15:1\n    |\n LL | struct Derived1<'w, 'x:'y, 'y, 'z> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [o, o, *]\n+error: [o, o, *]\n   --> $DIR/variance-regions-indirect.rs:20:1\n    |\n LL | struct Derived2<'a, 'b:'a, 'c> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [o, -, *]\n+error: [o, -, *]\n   --> $DIR/variance-regions-indirect.rs:25:1\n    |\n LL | struct Derived3<'a:'b, 'b, 'c> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [+, -, o]\n+error: [+, -, o]\n   --> $DIR/variance-regions-indirect.rs:30:1\n    |\n LL | struct Derived4<'a, 'b, 'c:'b> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0208`."}, {"sha": "5a73e541c3a173d047232305e99b7fcb65a8c1a6", "filename": "tests/ui/variance/variance-trait-bounds.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Fvariance%2Fvariance-trait-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Fvariance%2Fvariance-trait-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvariance%2Fvariance-trait-bounds.stderr?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -1,27 +1,26 @@\n-error[E0208]: [+, +]\n+error: [+, +]\n   --> $DIR/variance-trait-bounds.rs:16:1\n    |\n LL | struct TestStruct<U,T:Setter<U>> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [*, +]\n+error: [*, +]\n   --> $DIR/variance-trait-bounds.rs:21:1\n    |\n LL | enum TestEnum<U,T:Setter<U>> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [*, +]\n+error: [*, +]\n   --> $DIR/variance-trait-bounds.rs:26:1\n    |\n LL | struct TestContraStruct<U,T:Setter<U>> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [*, +]\n+error: [*, +]\n   --> $DIR/variance-trait-bounds.rs:31:1\n    |\n LL | struct TestBox<U,T:Getter<U>+Setter<U>> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0208`."}, {"sha": "7c46b553f43949459b0417b3dcf3d9e325e43ef5", "filename": "tests/ui/variance/variance-trait-object-bound.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Fvariance%2Fvariance-trait-object-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Fvariance%2Fvariance-trait-object-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvariance%2Fvariance-trait-object-bound.stderr?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -1,9 +1,8 @@\n-error[E0208]: [-]\n+error: [-]\n   --> $DIR/variance-trait-object-bound.rs:14:1\n    |\n LL | struct TOption<'a> {\n    | ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0208`."}, {"sha": "bb81644347693b4eb710565fffd2457f8a746ffb", "filename": "tests/ui/variance/variance-types-bounds.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Fvariance%2Fvariance-types-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Fvariance%2Fvariance-types-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvariance%2Fvariance-types-bounds.stderr?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -1,33 +1,32 @@\n-error[E0208]: [+, +]\n+error: [+, +]\n   --> $DIR/variance-types-bounds.rs:7:1\n    |\n LL | struct TestImm<A, B> {\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [+, o]\n+error: [+, o]\n   --> $DIR/variance-types-bounds.rs:13:1\n    |\n LL | struct TestMut<A, B:'static> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [+, o]\n+error: [+, o]\n   --> $DIR/variance-types-bounds.rs:19:1\n    |\n LL | struct TestIndirect<A:'static, B:'static> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [o, o]\n+error: [o, o]\n   --> $DIR/variance-types-bounds.rs:24:1\n    |\n LL | struct TestIndirect2<A:'static, B:'static> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [o, o]\n+error: [o, o]\n   --> $DIR/variance-types-bounds.rs:38:1\n    |\n LL | struct TestObject<A, R> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0208`."}, {"sha": "9f7f1d9b0e332fcbfde63357d01fcf9a1440d0f9", "filename": "tests/ui/variance/variance-types.stderr", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Fvariance%2Fvariance-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79335f1ac4f6bc72795d4ac84764aa185648b5f2/tests%2Fui%2Fvariance%2Fvariance-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvariance%2Fvariance-types.stderr?ref=79335f1ac4f6bc72795d4ac84764aa185648b5f2", "patch": "@@ -1,39 +1,38 @@\n-error[E0208]: [-, o, o]\n+error: [-, o, o]\n   --> $DIR/variance-types.rs:10:1\n    |\n LL | struct InvariantMut<'a,A:'a,B:'a> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [o]\n+error: [o]\n   --> $DIR/variance-types.rs:15:1\n    |\n LL | struct InvariantCell<A> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [o]\n+error: [o]\n   --> $DIR/variance-types.rs:20:1\n    |\n LL | struct InvariantIndirect<A> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [+]\n+error: [+]\n   --> $DIR/variance-types.rs:25:1\n    |\n LL | struct Covariant<A> {\n    | ^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [-]\n+error: [-]\n   --> $DIR/variance-types.rs:30:1\n    |\n LL | struct Contravariant<A> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0208]: [+, -, o]\n+error: [+, -, o]\n   --> $DIR/variance-types.rs:35:1\n    |\n LL | enum Enum<A,B,C> {\n    | ^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0208`."}]}