{"sha": "77c3bfa7429abf87b76ba84108df018d9e9d90e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3YzNiZmE3NDI5YWJmODdiNzZiYTg0MTA4ZGYwMThkOWU5ZDkwZTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-01-23T23:55:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-02-06T16:42:54Z"}, "message": "std: Remove cfg(cargobuild) annotations\n\nThese are all now no longer needed that we've only got rustbuild in tree.", "tree": {"sha": "dbcf69224b24f6820dfe103713a837e0074f0567", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbcf69224b24f6820dfe103713a837e0074f0567"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77c3bfa7429abf87b76ba84108df018d9e9d90e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77c3bfa7429abf87b76ba84108df018d9e9d90e2", "html_url": "https://github.com/rust-lang/rust/commit/77c3bfa7429abf87b76ba84108df018d9e9d90e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77c3bfa7429abf87b76ba84108df018d9e9d90e2/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce4abc35150425ac5ddf460b5a7b444da2140009", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce4abc35150425ac5ddf460b5a7b444da2140009", "html_url": "https://github.com/rust-lang/rust/commit/ce4abc35150425ac5ddf460b5a7b444da2140009"}], "stats": {"total": 212, "additions": 7, "deletions": 205}, "files": [{"sha": "429996126f92b6dd7d13fcfd1b0ce5d224842e98", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -93,11 +93,6 @@ system internals, try asking in [`#rust-internals`][pound-rust-internals].\n \n [bootstrap]: https://github.com/rust-lang/rust/tree/master/src/bootstrap/\n \n-> **Note**: the build system was recently rewritten from a jungle of makefiles\n-> to the current incarnation you'll see in `src/bootstrap`. If you experience\n-> bugs you can temporarily revert back to the makefiles with\n-> `--disable-rustbuild` passed to `./configure`.\n-\n ### Configuration\n \n Before you can start building the compiler you need to configure the build for"}, {"sha": "a3402bf399427be5dcc61f95f0f6df3b1f98831e", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -21,7 +21,6 @@ use std::process::Command;\n use build_helper::{run, rerun_if_changed_anything_in_dir, up_to_date};\n \n fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n     println!(\"cargo:rerun-if-changed=build.rs\");\n \n     // FIXME: This is a hack to support building targets that don't"}, {"sha": "8d81a09f5af0fbf947726145a61a7c8f42235e57", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -30,22 +30,6 @@ pub use imp::*;\n mod imp {\n     use libc::{c_int, c_void, size_t};\n \n-    // Linkage directives to pull in jemalloc and its dependencies.\n-    //\n-    // On some platforms we need to be sure to link in `pthread` which jemalloc\n-    // depends on, and specifically on android we need to also link to libgcc.\n-    // Currently jemalloc is compiled with gcc which will generate calls to\n-    // intrinsics that are libgcc specific (e.g. those intrinsics aren't present in\n-    // libcompiler-rt), so link that in to get that support.\n-    #[link(name = \"jemalloc\", kind = \"static\")]\n-    #[cfg_attr(target_os = \"android\", link(name = \"gcc\"))]\n-    #[cfg_attr(all(not(windows),\n-                   not(target_os = \"android\"),\n-                   not(target_env = \"musl\")),\n-               link(name = \"pthread\"))]\n-    #[cfg(not(cargobuild))]\n-    extern \"C\" {}\n-\n     // Note that the symbols here are prefixed by default on OSX and Windows (we\n     // don't explicitly request it), and on Android and DragonFly we explicitly\n     // request it as unprefixing cause segfaults (mismatches in allocators)."}, {"sha": "12016980a2c656be8c5ace4d6ea27285865ca26a", "filename": "src/libflate/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibflate%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibflate%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Fbuild.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -11,7 +11,6 @@\n extern crate gcc;\n \n fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n     gcc::Config::new()\n         .file(\"../rt/miniz.c\")\n         .compile(\"libminiz.a\");"}, {"sha": "dedec7b1609fadaea92cdaf9e1d970f42dfe4dd9", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -74,10 +74,6 @@ impl Drop for Bytes {\n     }\n }\n \n-#[link(name = \"miniz\", kind = \"static\")]\n-#[cfg(not(cargobuild))]\n-extern \"C\" {}\n-\n extern \"C\" {\n     /// Raw miniz compression function.\n     fn tdefl_compress_mem_to_heap(psrc_buf: *const c_void,"}, {"sha": "84abc6bc4a5132e248470e31ad231cf1e12b8aa5", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -301,10 +301,6 @@ unsafe extern \"C\" fn rust_eh_unwind_resume(panic_ctx: *mut u8) -> ! {\n // with any GCC runtime.\n #[cfg(all(target_os=\"windows\", target_arch = \"x86\", target_env=\"gnu\"))]\n pub mod eh_frame_registry {\n-    #[link(name = \"gcc_eh\")]\n-    #[cfg(not(cargobuild))]\n-    extern \"C\" {}\n-\n     extern \"C\" {\n         fn __register_frame_info(eh_frame_begin: *const u8, object: *mut u8);\n         fn __deregister_frame_info(eh_frame_begin: *const u8, object: *mut u8);"}, {"sha": "c74a9308e4eba4913aff70e4d598d8babf7d9c8b", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -47,8 +47,6 @@ fn detect_llvm_link(llvm_config: &Path) -> (&'static str, Option<&'static str>)\n }\n \n fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n-\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n     let llvm_config = env::var_os(\"LLVM_CONFIG\")\n         .map(PathBuf::from)"}, {"sha": "f300bf16145a736c92f95768eb911ada60f24c3e", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -422,13 +422,3 @@ impl Drop for OperandBundleDef {\n         }\n     }\n }\n-\n-// The module containing the native LLVM dependencies, generated by the build system\n-// Note that this must come after the rustllvm extern declaration so that\n-// parts of LLVM that rustllvm depends on aren't thrown away by the linker.\n-// Works to the above fix for #15460 to ensure LLVM dependencies that\n-// are only used by rustllvm don't get stripped by the linker.\n-#[cfg(not(cargobuild))]\n-mod llvmdeps {\n-    include! { env!(\"CFG_LLVM_LINKAGE_FILE\") }\n-}"}, {"sha": "fcb7af11dce2f061d2abbfd0bcc1e0af72ee6ad0", "filename": "src/librustdoc/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibrustdoc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibrustdoc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fbuild.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -11,7 +11,6 @@\n extern crate gcc;\n \n fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n     let mut cfg = gcc::Config::new();\n     cfg.file(\"../rt/hoedown/src/autolink.c\")\n        .file(\"../rt/hoedown/src/buffer.c\")"}, {"sha": "a0f4a3a87434845c7f464723bea9f47f4842c985", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -162,11 +162,6 @@ struct hoedown_buffer {\n     unit: libc::size_t,\n }\n \n-// hoedown FFI\n-#[link(name = \"hoedown\", kind = \"static\")]\n-#[cfg(not(cargobuild))]\n-extern {}\n-\n extern {\n     fn hoedown_html_renderer_new(render_flags: libc::c_uint,\n                                  nesting_level: libc::c_int)"}, {"sha": "0fca374f6e6d1035381faf7ba96498965663378b", "filename": "src/libstd/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -21,7 +21,6 @@ use std::process::Command;\n use build_helper::{run, rerun_if_changed_anything_in_dir, up_to_date};\n \n fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n     println!(\"cargo:rerun-if-changed=build.rs\");\n \n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");"}, {"sha": "4279db7754a81de60b5e7345aa813e54aa4e7d48", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -463,9 +463,6 @@ mod panicking;\n mod rand;\n mod memchr;\n \n-// This module just defines per-platform native library dependencies\n-mod rtdeps;\n-\n // The runtime entry point and a few unstable public functions used by the\n // compiler\n pub mod rt;"}, {"sha": "d76e8816ca45f3932b37baf92a35fcdf8fca5028", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -311,12 +311,12 @@ impl<'a> Location<'a> {\n }\n \n fn default_hook(info: &PanicInfo) {\n-    #[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n+    #[cfg(feature = \"backtrace\")]\n     use sys_common::backtrace;\n \n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n-    #[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n+    #[cfg(feature = \"backtrace\")]\n     let log_backtrace = {\n         let panics = update_panic_count(0);\n \n@@ -341,7 +341,7 @@ fn default_hook(info: &PanicInfo) {\n         let _ = writeln!(err, \"thread '{}' panicked at '{}', {}:{}\",\n                          name, msg, file, line);\n \n-        #[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n+        #[cfg(feature = \"backtrace\")]\n         {\n             use sync::atomic::{AtomicBool, Ordering};\n "}, {"sha": "5dc6ee2bc8c660921d7f1cac3062ce41525d0e47", "filename": "src/libstd/rtdeps.rs", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ce4abc35150425ac5ddf460b5a7b444da2140009/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4abc35150425ac5ddf460b5a7b444da2140009/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=ce4abc35150425ac5ddf460b5a7b444da2140009", "patch": "@@ -1,68 +0,0 @@\n-// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! This module contains the linkage attributes to all runtime dependencies of\n-//! the standard library This varies per-platform, but these libraries are\n-//! necessary for running libstd.\n-\n-#![cfg(not(cargobuild))]\n-\n-// LLVM implements the `frem` instruction as a call to `fmod`, which lives in\n-// libm. Hence, we must explicitly link to it.\n-//\n-// On Linux, librt and libdl are indirect dependencies via std,\n-// and binutils 2.22+ won't add them automatically\n-#[cfg(all(target_os = \"linux\", not(target_env = \"musl\")))]\n-#[link(name = \"dl\")]\n-#[link(name = \"pthread\")]\n-extern {}\n-\n-#[cfg(target_os = \"android\")]\n-#[link(name = \"dl\")]\n-#[link(name = \"log\")]\n-extern {}\n-\n-#[cfg(target_os = \"freebsd\")]\n-#[link(name = \"execinfo\")]\n-#[link(name = \"pthread\")]\n-extern {}\n-\n-#[cfg(any(target_os = \"dragonfly\",\n-          target_os = \"bitrig\",\n-          target_os = \"netbsd\",\n-          target_os = \"openbsd\"))]\n-#[link(name = \"pthread\")]\n-extern {}\n-\n-#[cfg(target_os = \"solaris\")]\n-#[link(name = \"socket\")]\n-#[link(name = \"posix4\")]\n-#[link(name = \"pthread\")]\n-extern {}\n-\n-// For PNaCl targets, nacl_io is a Pepper wrapper for some IO functions\n-// missing (ie always error) in Newlib.\n-#[cfg(all(target_os = \"nacl\", not(test)))]\n-#[link(name = \"nacl_io\", kind = \"static\")]\n-#[link(name = \"c++\", kind = \"static\")] // for `nacl_io` and EH.\n-#[link(name = \"pthread\", kind = \"static\")]\n-extern {}\n-\n-#[cfg(target_os = \"macos\")]\n-#[link(name = \"System\")]\n-extern {}\n-\n-#[cfg(target_os = \"ios\")]\n-#[link(name = \"System\")]\n-extern {}\n-\n-#[cfg(target_os = \"haiku\")]\n-#[link(name = \"network\")]\n-extern {}"}, {"sha": "6e35a472792c464de35268ebcd4897bb91d333eb", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -189,11 +189,6 @@ mod imp {\n             fn objc_msgSend_ul(obj: NsId, sel: Sel, ...) -> NsId;\n         }\n \n-        #[link(name = \"Foundation\", kind = \"framework\")]\n-        #[link(name = \"objc\")]\n-        #[cfg(not(cargobuild))]\n-        extern {}\n-\n         type Sel = *const libc::c_void;\n         type NsId = *const libc::c_void;\n "}, {"sha": "c57751a01d7c1b6f0293da4c000cd33b51e0dab4", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -33,7 +33,7 @@ pub mod weak;\n \n pub mod args;\n pub mod android;\n-#[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n+#[cfg(feature = \"backtrace\")]\n pub mod backtrace;\n pub mod condvar;\n pub mod env;"}, {"sha": "77ebad4e344c24adbcef0ae199fee1c7a9c8168b", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -257,10 +257,6 @@ mod imp {\n     #[allow(non_upper_case_globals)]\n     const kSecRandomDefault: *const SecRandom = ptr::null();\n \n-    #[link(name = \"Security\", kind = \"framework\")]\n-    #[cfg(not(cargobuild))]\n-    extern {}\n-\n     extern {\n         fn SecRandomCopyBytes(rnd: *const SecRandom,\n                               count: size_t, bytes: *mut u8) -> c_int;"}, {"sha": "e5010ca356449cfcf1c56e2145c3aab7c6c44f22", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -833,13 +833,6 @@ pub struct CONSOLE_READCONSOLE_CONTROL {\n }\n pub type PCONSOLE_READCONSOLE_CONTROL = *mut CONSOLE_READCONSOLE_CONTROL;\n \n-#[link(name = \"ws2_32\")]\n-#[link(name = \"userenv\")]\n-#[link(name = \"shell32\")]\n-#[link(name = \"advapi32\")]\n-#[cfg(not(cargobuild))]\n-extern {}\n-\n extern \"system\" {\n     pub fn WSAStartup(wVersionRequested: WORD,\n                       lpWSAData: LPWSADATA) -> c_int;"}, {"sha": "0bdbeddb112121b0a015925bc83fc866e4dd0b31", "filename": "src/libstd/sys_common/gnu/libbacktrace.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -39,9 +39,6 @@ pub fn print(w: &mut Write, idx: isize, addr: *mut libc::c_void,\n                       msg: *const libc::c_char,\n                       errnum: libc::c_int);\n     enum backtrace_state {}\n-    #[link(name = \"backtrace\", kind = \"static\")]\n-    #[cfg(all(not(test), not(cargobuild)))]\n-    extern {}\n \n     extern {\n         fn backtrace_create_state(filename: *const libc::c_char,"}, {"sha": "d4d3365dc0198a8129d08c6d10c28f0e85573de3", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -29,7 +29,7 @@ use sync::Once;\n use sys;\n \n pub mod at_exit_imp;\n-#[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n+#[cfg(feature = \"backtrace\")]\n pub mod backtrace;\n pub mod condvar;\n pub mod io;\n@@ -50,7 +50,7 @@ pub use sys::net;\n #[cfg(not(target_os = \"redox\"))]\n pub mod net;\n \n-#[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n+#[cfg(feature = \"backtrace\")]\n #[cfg(any(all(unix, not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"emscripten\"))),\n           all(windows, target_env = \"gnu\")))]\n pub mod gnu;"}, {"sha": "f18b694d3d0c70e5feb861718c31b1cee5f161ba", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -11,8 +11,6 @@\n use std::env;\n \n fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n-\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n \n     if target.contains(\"linux\") {"}, {"sha": "7fb58373251a515be8a104da34b7af5829918597", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -240,34 +240,3 @@ if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n     }\n }\n } // cfg_if!\n-\n-#[cfg_attr(any(all(target_os = \"linux\", not(target_env = \"musl\")),\n-               target_os = \"freebsd\",\n-               target_os = \"solaris\",\n-               target_os = \"haiku\",\n-               all(target_os = \"linux\",\n-                   target_env = \"musl\",\n-                   not(target_arch = \"x86\"),\n-                   not(target_arch = \"x86_64\"))),\n-           link(name = \"gcc_s\"))]\n-#[cfg_attr(all(target_os = \"linux\",\n-               target_env = \"musl\",\n-               any(target_arch = \"x86\", target_arch = \"x86_64\"),\n-               not(test)),\n-           link(name = \"unwind\", kind = \"static\"))]\n-#[cfg_attr(target_os = \"fuchsia\",\n-           link(name = \"unwind\"))]\n-#[cfg_attr(any(target_os = \"android\", target_os = \"openbsd\"),\n-           link(name = \"gcc\"))]\n-#[cfg_attr(all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n-           link(name = \"gcc\"))]\n-#[cfg_attr(all(target_os = \"netbsd\", target_vendor = \"rumprun\"),\n-           link(name = \"unwind\"))]\n-#[cfg_attr(target_os = \"dragonfly\",\n-           link(name = \"gcc_pic\"))]\n-#[cfg_attr(target_os = \"bitrig\",\n-           link(name = \"c++abi\"))]\n-#[cfg_attr(all(target_os = \"windows\", target_env = \"gnu\"),\n-           link(name = \"gcc_eh\"))]\n-#[cfg(not(cargobuild))]\n-extern \"C\" {}"}, {"sha": "3049875e86ea30cea6eee671de9187277e4e3b03", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -2,7 +2,6 @@\n authors = [\"The Rust Project Developers\"]\n name = \"compiletest\"\n version = \"0.0.0\"\n-build = \"build.rs\"\n \n [dependencies]\n log = \"0.3\""}, {"sha": "d5164b9b7591814430a77c9286ffab1b6cb19214", "filename": "src/tools/compiletest/build.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ce4abc35150425ac5ddf460b5a7b444da2140009/src%2Ftools%2Fcompiletest%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce4abc35150425ac5ddf460b5a7b444da2140009/src%2Ftools%2Fcompiletest%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fbuild.rs?ref=ce4abc35150425ac5ddf460b5a7b444da2140009", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n-}"}, {"sha": "c2997c8c160ef1c4b12dac9c796d0819ee371d90", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77c3bfa7429abf87b76ba84108df018d9e9d90e2/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=77c3bfa7429abf87b76ba84108df018d9e9d90e2", "patch": "@@ -21,16 +21,9 @@\n extern crate libc;\n extern crate test;\n extern crate getopts;\n-\n-#[cfg(cargobuild)]\n extern crate rustc_serialize;\n-#[cfg(not(cargobuild))]\n-extern crate serialize as rustc_serialize;\n-\n #[macro_use]\n extern crate log;\n-\n-#[cfg(cargobuild)]\n extern crate env_logger;\n \n use std::env;\n@@ -58,11 +51,7 @@ mod raise_fd_limit;\n mod uidiff;\n \n fn main() {\n-    #[cfg(cargobuild)]\n-    fn log_init() { env_logger::init().unwrap(); }\n-    #[cfg(not(cargobuild))]\n-    fn log_init() {}\n-    log_init();\n+    env_logger::init().unwrap();\n \n     let config = parse_config(env::args().collect());\n "}]}