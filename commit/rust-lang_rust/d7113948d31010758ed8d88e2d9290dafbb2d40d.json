{"sha": "d7113948d31010758ed8d88e2d9290dafbb2d40d", "node_id": "C_kwDOAAsO6NoAKGQ3MTEzOTQ4ZDMxMDEwNzU4ZWQ4ZDg4ZTJkOTI5MGRhZmJiMmQ0MGQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-12T06:25:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-12T06:25:49Z"}, "message": "Rollup merge of #106524 - compiler-errors:constructor-note, r=cjgillot\n\nLabel `struct/enum constructor` instead of `fn item`, mention that it should be called on type mismatch\n\nFixes #106516", "tree": {"sha": "81d570ed9160b78dcdd9b87ba1f5e305d2a447cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81d570ed9160b78dcdd9b87ba1f5e305d2a447cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7113948d31010758ed8d88e2d9290dafbb2d40d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjv6ftCRBK7hj4Ov3rIwAAXfkIAJeEqKHRzGd+93nCrGBZOHAB\nREs2/xIJ4kaOwIg/X9EtzI1NR3vvTnZ2lR5pbuIOGtp4E+uubc4mflJt20bOK5UM\nmIFuaA/UMj8DEGR7FzoU+aLK8mZ+4ys9dWSIUtpgkar5WbjGR9n8Kp283Hp2s2vm\nooH+Be9uCfODySOZoPbS+Ynt44bB7ABDeQoJr5HWyR7kS0bhI+BvhKapWUX+0O1B\naN+TKVsy3ako1tP8nmWV0EbID9e40U0lzbNZPOPikUq3VyyA3YY/byjEZ6y1Kvcw\nf5ejNGtWPUt2QHEDkrCDHUJxN98ERVUzGt/9Pn5IEokZPNKndoIjBJnFqJlkOfY=\n=1xEk\n-----END PGP SIGNATURE-----\n", "payload": "tree 81d570ed9160b78dcdd9b87ba1f5e305d2a447cf\nparent 54f6fea8184a3e431a2aadd249d3bcca9a0e0a82\nparent d375440dab2378dc3075755f388f2cbb242a3971\nauthor Michael Goulet <michael@errs.io> 1673504749 -0800\ncommitter GitHub <noreply@github.com> 1673504749 -0800\n\nRollup merge of #106524 - compiler-errors:constructor-note, r=cjgillot\n\nLabel `struct/enum constructor` instead of `fn item`, mention that it should be called on type mismatch\n\nFixes #106516\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7113948d31010758ed8d88e2d9290dafbb2d40d", "html_url": "https://github.com/rust-lang/rust/commit/d7113948d31010758ed8d88e2d9290dafbb2d40d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7113948d31010758ed8d88e2d9290dafbb2d40d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "url": "https://api.github.com/repos/rust-lang/rust/commits/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82", "html_url": "https://github.com/rust-lang/rust/commit/54f6fea8184a3e431a2aadd249d3bcca9a0e0a82"}, {"sha": "d375440dab2378dc3075755f388f2cbb242a3971", "url": "https://api.github.com/repos/rust-lang/rust/commits/d375440dab2378dc3075755f388f2cbb242a3971", "html_url": "https://github.com/rust-lang/rust/commit/d375440dab2378dc3075755f388f2cbb242a3971"}], "stats": {"total": 138, "additions": 78, "deletions": 60}, "files": [{"sha": "3372a1b0dcbe06e5ddafc2c475378eacba1d4077", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d7113948d31010758ed8d88e2d9290dafbb2d40d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7113948d31010758ed8d88e2d9290dafbb2d40d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=d7113948d31010758ed8d88e2d9290dafbb2d40d", "patch": "@@ -5,7 +5,7 @@ use crate::method::probe::{IsSuggestion, Mode, ProbeScope};\n use rustc_ast::util::parser::{ExprPrecedence, PREC_POSTFIX};\n use rustc_errors::{Applicability, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n-use rustc_hir::def::{CtorOf, DefKind};\n+use rustc_hir::def::{CtorKind, CtorOf, DefKind};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{\n     Expr, ExprKind, GenericBound, Node, Path, QPath, Stmt, StmtKind, TyKind, WherePredicate,\n@@ -417,10 +417,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else if self.suggest_else_fn_with_closure(err, expr, found, expected) {\n             return true;\n         } else if self.suggest_fn_call(err, expr, found, |output| self.can_coerce(output, expected))\n-            && let ty::FnDef(def_id, ..) = &found.kind()\n-            && let Some(sp) = self.tcx.hir().span_if_local(*def_id)\n+            && let ty::FnDef(def_id, ..) = *found.kind()\n+            && let Some(sp) = self.tcx.hir().span_if_local(def_id)\n         {\n-            err.span_label(sp, format!(\"{found} defined here\"));\n+            let name = self.tcx.item_name(def_id);\n+            let kind = self.tcx.def_kind(def_id);\n+            if let DefKind::Ctor(of, CtorKind::Fn) = kind {\n+                err.span_label(sp, format!(\"`{name}` defines {} constructor here, which should be called\", match of {\n+                    CtorOf::Struct => \"a struct\",\n+                    CtorOf::Variant => \"an enum variant\",\n+                }));\n+            } else {\n+                let descr = kind.descr(def_id);\n+                err.span_label(sp, format!(\"{descr} `{name}` defined here\"));\n+            }\n             return true;\n         } else if self.check_for_cast(err, expr, found, expected, expected_ty_expr) {\n             return true;"}, {"sha": "5d394f71f0d764024b33c0f2e4f047a61a8743e9", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d7113948d31010758ed8d88e2d9290dafbb2d40d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7113948d31010758ed8d88e2d9290dafbb2d40d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=d7113948d31010758ed8d88e2d9290dafbb2d40d", "patch": "@@ -2,10 +2,10 @@ use crate::traits::{ObligationCause, ObligationCauseCode};\n use crate::ty::diagnostics::suggest_constraining_type_param;\n use crate::ty::print::{with_forced_trimmed_paths, FmtPrinter, Printer};\n use crate::ty::{self, BoundRegionKind, Region, Ty, TyCtxt};\n-use hir::def::DefKind;\n use rustc_errors::Applicability::{MachineApplicable, MaybeIncorrect};\n use rustc_errors::{pluralize, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n+use rustc_hir::def::{CtorOf, DefKind};\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{BytePos, Span};\n@@ -319,7 +319,11 @@ impl<'tcx> Ty<'tcx> {\n                     .into()\n                 }\n             }\n-            ty::FnDef(..) => \"fn item\".into(),\n+            ty::FnDef(def_id, ..) => match tcx.def_kind(def_id) {\n+                DefKind::Ctor(CtorOf::Struct, _) => \"struct constructor\".into(),\n+                DefKind::Ctor(CtorOf::Variant, _) => \"enum constructor\".into(),\n+                _ => \"fn item\".into(),\n+            },\n             ty::FnPtr(_) => \"fn pointer\".into(),\n             ty::Dynamic(ref inner, ..) if let Some(principal) = inner.principal() => {\n                 format!(\"trait object `dyn {}`\", tcx.def_path_str(principal.def_id())).into()\n@@ -366,7 +370,11 @@ impl<'tcx> Ty<'tcx> {\n                 _ => \"reference\",\n             }\n             .into(),\n-            ty::FnDef(..) => \"fn item\".into(),\n+            ty::FnDef(def_id, ..) => match tcx.def_kind(def_id) {\n+                DefKind::Ctor(CtorOf::Struct, _) => \"struct constructor\".into(),\n+                DefKind::Ctor(CtorOf::Variant, _) => \"enum constructor\".into(),\n+                _ => \"fn item\".into(),\n+            },\n             ty::FnPtr(_) => \"fn pointer\".into(),\n             ty::Dynamic(..) => \"trait object\".into(),\n             ty::Closure(..) => \"closure\".into(),"}, {"sha": "acdc3be8c6763bcc8779dbcf8e190e8b20220bb8", "filename": "tests/ui/associated-types/substs-ppaux.normal.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Fassociated-types%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Fassociated-types%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fsubsts-ppaux.normal.stderr?ref=d7113948d31010758ed8d88e2d9290dafbb2d40d", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:16:17\n    |\n LL |     fn bar<'a, T>() where T: 'a {}\n-   |     --------------------------- fn() {<i8 as Foo<'static, 'static, u8>>::bar::<'static, char>} defined here\n+   |     --------------------------- associated function `bar` defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n    |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n@@ -20,7 +20,7 @@ error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:25:17\n    |\n LL |     fn bar<'a, T>() where T: 'a {}\n-   |     --------------------------- fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>} defined here\n+   |     --------------------------- associated function `bar` defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n    |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n@@ -38,7 +38,7 @@ error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:33:17\n    |\n LL |     fn baz() {}\n-   |     -------- fn() {<i8 as Foo<'static, 'static, u8>>::baz} defined here\n+   |     -------- associated function `baz` defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n    |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n@@ -56,7 +56,7 @@ error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:41:17\n    |\n LL | fn foo<'z>() where &'z (): Sized {\n-   | -------------------------------- fn() {foo::<'static>} defined here\n+   | -------------------------------- function `foo` defined here\n ...\n LL |     let x: () = foo::<'static>;\n    |            --   ^^^^^^^^^^^^^^ expected `()`, found fn item"}, {"sha": "e4f6ba573ca40c7b37a51266acd9e79b244ade36", "filename": "tests/ui/associated-types/substs-ppaux.verbose.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr?ref=d7113948d31010758ed8d88e2d9290dafbb2d40d", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:16:17\n    |\n LL |     fn bar<'a, T>() where T: 'a {}\n-   |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::bar::<ReStatic, char>} defined here\n+   |     --------------------------- associated function `bar` defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n    |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n@@ -20,7 +20,7 @@ error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:25:17\n    |\n LL |     fn bar<'a, T>() where T: 'a {}\n-   |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>} defined here\n+   |     --------------------------- associated function `bar` defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n    |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n@@ -38,7 +38,7 @@ error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:33:17\n    |\n LL |     fn baz() {}\n-   |     -------- fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::baz} defined here\n+   |     -------- associated function `baz` defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n    |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n@@ -56,7 +56,7 @@ error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:41:17\n    |\n LL | fn foo<'z>() where &'z (): Sized {\n-   | -------------------------------- fn() {foo::<ReStatic>} defined here\n+   | -------------------------------- function `foo` defined here\n ...\n LL |     let x: () = foo::<'static>;\n    |            --   ^^^^^^^^^^^^^^ expected `()`, found fn item"}, {"sha": "d600e934bd5775d2d543935f26df470c4e31caa6", "filename": "tests/ui/issues/issue-35241.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Fissues%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Fissues%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-35241.stderr?ref=d7113948d31010758ed8d88e2d9290dafbb2d40d", "patch": "@@ -2,15 +2,15 @@ error[E0308]: mismatched types\n   --> $DIR/issue-35241.rs:3:20\n    |\n LL | struct Foo(u32);\n-   | ---------- fn(u32) -> Foo {Foo} defined here\n+   | ---------- `Foo` defines a struct constructor here, which should be called\n LL |\n LL | fn test() -> Foo { Foo }\n-   |              ---   ^^^ expected struct `Foo`, found fn item\n+   |              ---   ^^^ expected struct `Foo`, found struct constructor\n    |              |\n    |              expected `Foo` because of return type\n    |\n-   = note: expected struct `Foo`\n-             found fn item `fn(u32) -> Foo {Foo}`\n+   = note:          expected struct `Foo`\n+           found struct constructor `fn(u32) -> Foo {Foo}`\n help: use parentheses to construct this tuple struct\n    |\n LL | fn test() -> Foo { Foo(/* u32 */) }"}, {"sha": "a24fe4d23ea2547e63c99936b3408afeb0db1a53", "filename": "tests/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=d7113948d31010758ed8d88e2d9290dafbb2d40d", "patch": "@@ -264,15 +264,15 @@ error[E0308]: mismatched types\n   --> $DIR/privacy-enum-ctor.rs:27:20\n    |\n LL |             Fn(u8),\n-   |             -- fn(u8) -> Z {Z::Fn} defined here\n+   |             -- `Fn` defines an enum variant constructor here, which should be called\n ...\n LL |         let _: Z = Z::Fn;\n-   |                -   ^^^^^ expected enum `Z`, found fn item\n+   |                -   ^^^^^ expected enum `Z`, found enum constructor\n    |                |\n    |                expected due to this\n    |\n-   = note: expected enum `Z`\n-           found fn item `fn(u8) -> Z {Z::Fn}`\n+   = note:          expected enum `Z`\n+           found enum constructor `fn(u8) -> Z {Z::Fn}`\n help: use parentheses to construct this tuple variant\n    |\n LL |         let _: Z = Z::Fn(/* u8 */);\n@@ -305,15 +305,15 @@ error[E0308]: mismatched types\n   --> $DIR/privacy-enum-ctor.rs:43:16\n    |\n LL |         Fn(u8),\n-   |         -- fn(u8) -> E {E::Fn} defined here\n+   |         -- `Fn` defines an enum variant constructor here, which should be called\n ...\n LL |     let _: E = m::E::Fn;\n-   |            -   ^^^^^^^^ expected enum `E`, found fn item\n+   |            -   ^^^^^^^^ expected enum `E`, found enum constructor\n    |            |\n    |            expected due to this\n    |\n-   = note: expected enum `E`\n-           found fn item `fn(u8) -> E {E::Fn}`\n+   = note:          expected enum `E`\n+           found enum constructor `fn(u8) -> E {E::Fn}`\n help: use parentheses to construct this tuple variant\n    |\n LL |     let _: E = m::E::Fn(/* u8 */);\n@@ -346,15 +346,15 @@ error[E0308]: mismatched types\n   --> $DIR/privacy-enum-ctor.rs:51:16\n    |\n LL |         Fn(u8),\n-   |         -- fn(u8) -> E {E::Fn} defined here\n+   |         -- `Fn` defines an enum variant constructor here, which should be called\n ...\n LL |     let _: E = E::Fn;\n-   |            -   ^^^^^ expected enum `E`, found fn item\n+   |            -   ^^^^^ expected enum `E`, found enum constructor\n    |            |\n    |            expected due to this\n    |\n-   = note: expected enum `E`\n-           found fn item `fn(u8) -> E {E::Fn}`\n+   = note:          expected enum `E`\n+           found enum constructor `fn(u8) -> E {E::Fn}`\n help: use parentheses to construct this tuple variant\n    |\n LL |     let _: E = E::Fn(/* u8 */);"}, {"sha": "4cbcd31fa5ec1f6e062f15791dedcc4e2fd3916b", "filename": "tests/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=d7113948d31010758ed8d88e2d9290dafbb2d40d", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:29:20\n    |\n LL | fn foo(a: usize, b: usize) -> usize { a }\n-   | ----------------------------------- fn(usize, usize) -> usize {foo} defined here\n+   | ----------------------------------- function `foo` defined here\n ...\n LL |     let _: usize = foo;\n    |            -----   ^^^ expected `usize`, found fn item\n@@ -20,15 +20,15 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:30:16\n    |\n LL | struct S(usize, usize);\n-   | -------- fn(usize, usize) -> S {S} defined here\n+   | -------- `S` defines a struct constructor here, which should be called\n ...\n LL |     let _: S = S;\n-   |            -   ^ expected struct `S`, found fn item\n+   |            -   ^ expected struct `S`, found struct constructor\n    |            |\n    |            expected due to this\n    |\n-   = note: expected struct `S`\n-             found fn item `fn(usize, usize) -> S {S}`\n+   = note:          expected struct `S`\n+           found struct constructor `fn(usize, usize) -> S {S}`\n help: use parentheses to construct this tuple struct\n    |\n LL |     let _: S = S(/* usize */, /* usize */);\n@@ -38,7 +38,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:31:20\n    |\n LL | fn bar() -> usize { 42 }\n-   | ----------------- fn() -> usize {bar} defined here\n+   | ----------------- function `bar` defined here\n ...\n LL |     let _: usize = bar;\n    |            -----   ^^^ expected `usize`, found fn item\n@@ -56,15 +56,15 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:32:16\n    |\n LL | struct V();\n-   | -------- fn() -> V {V} defined here\n+   | -------- `V` defines a struct constructor here, which should be called\n ...\n LL |     let _: V = V;\n-   |            -   ^ expected struct `V`, found fn item\n+   |            -   ^ expected struct `V`, found struct constructor\n    |            |\n    |            expected due to this\n    |\n-   = note: expected struct `V`\n-             found fn item `fn() -> V {V}`\n+   = note:          expected struct `V`\n+           found struct constructor `fn() -> V {V}`\n help: use parentheses to construct this tuple struct\n    |\n LL |     let _: V = V();\n@@ -74,7 +74,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:33:20\n    |\n LL |     fn baz(x: usize, y: usize) -> usize { x }\n-   |     ----------------------------------- fn(usize, usize) -> usize {<_ as T>::baz} defined here\n+   |     ----------------------------------- associated function `baz` defined here\n ...\n LL |     let _: usize = T::baz;\n    |            -----   ^^^^^^ expected `usize`, found fn item\n@@ -92,7 +92,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:34:20\n    |\n LL |     fn bat(x: usize) -> usize { 42 }\n-   |     ------------------------- fn(usize) -> usize {<_ as T>::bat} defined here\n+   |     ------------------------- associated function `bat` defined here\n ...\n LL |     let _: usize = T::bat;\n    |            -----   ^^^^^^ expected `usize`, found fn item\n@@ -110,15 +110,15 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:35:16\n    |\n LL |     A(usize),\n-   |     - fn(usize) -> E {E::A} defined here\n+   |     - `A` defines an enum variant constructor here, which should be called\n ...\n LL |     let _: E = E::A;\n-   |            -   ^^^^ expected enum `E`, found fn item\n+   |            -   ^^^^ expected enum `E`, found enum constructor\n    |            |\n    |            expected due to this\n    |\n-   = note: expected enum `E`\n-           found fn item `fn(usize) -> E {E::A}`\n+   = note:          expected enum `E`\n+           found enum constructor `fn(usize) -> E {E::A}`\n help: use parentheses to construct this tuple variant\n    |\n LL |     let _: E = E::A(/* usize */);\n@@ -134,7 +134,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:37:20\n    |\n LL |     fn baz(x: usize, y: usize) -> usize { x }\n-   |     ----------------------------------- fn(usize, usize) -> usize {<X as T>::baz} defined here\n+   |     ----------------------------------- associated function `baz` defined here\n ...\n LL |     let _: usize = X::baz;\n    |            -----   ^^^^^^ expected `usize`, found fn item\n@@ -152,7 +152,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:38:20\n    |\n LL |     fn bat(x: usize) -> usize { 42 }\n-   |     ------------------------- fn(usize) -> usize {<X as T>::bat} defined here\n+   |     ------------------------- associated function `bat` defined here\n ...\n LL |     let _: usize = X::bat;\n    |            -----   ^^^^^^ expected `usize`, found fn item\n@@ -170,7 +170,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:39:20\n    |\n LL |     fn bax(x: usize) -> usize { 42 }\n-   |     ------------------------- fn(usize) -> usize {<X as T>::bax} defined here\n+   |     ------------------------- associated function `bax` defined here\n ...\n LL |     let _: usize = X::bax;\n    |            -----   ^^^^^^ expected `usize`, found fn item\n@@ -188,7 +188,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:40:20\n    |\n LL |     fn bach(x: usize) -> usize;\n-   |     --------------------------- fn(usize) -> usize {<X as T>::bach} defined here\n+   |     --------------------------- associated function `bach` defined here\n ...\n LL |     let _: usize = X::bach;\n    |            -----   ^^^^^^^ expected `usize`, found fn item\n@@ -206,7 +206,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:41:20\n    |\n LL |     fn ban(&self) -> usize { 42 }\n-   |     ---------------------- for<'a> fn(&'a X) -> usize {<X as T>::ban} defined here\n+   |     ---------------------- associated function `ban` defined here\n ...\n LL |     let _: usize = X::ban;\n    |            -----   ^^^^^^ expected `usize`, found fn item\n@@ -224,7 +224,7 @@ error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:42:20\n    |\n LL |     fn bal(&self) -> usize;\n-   |     ----------------------- for<'a> fn(&'a X) -> usize {<X as T>::bal} defined here\n+   |     ----------------------- associated function `bal` defined here\n ...\n LL |     let _: usize = X::bal;\n    |            -----   ^^^^^^ expected `usize`, found fn item"}, {"sha": "96b3f8dab8da798350fc309543350bd5107bb50b", "filename": "tests/ui/typeck/issue-87181/empty-tuple-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.rs?ref=d7113948d31010758ed8d88e2d9290dafbb2d40d", "patch": "@@ -10,5 +10,5 @@ impl Foo {\n fn main() {\n     let thing = Bar { bar: Foo };\n     thing.bar.foo();\n-    //~^ ERROR no method named `foo` found for fn item `fn() -> Foo {Foo}` in the current scope [E0599]\n+    //~^ ERROR no method named `foo` found for struct constructor `fn() -> Foo {Foo}` in the current scope [E0599]\n }"}, {"sha": "f0ca49e6d1e3ec4cd185099a15a4e493ca536973", "filename": "tests/ui/typeck/issue-87181/empty-tuple-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.stderr?ref=d7113948d31010758ed8d88e2d9290dafbb2d40d", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `foo` found for fn item `fn() -> Foo {Foo}` in the current scope\n+error[E0599]: no method named `foo` found for struct constructor `fn() -> Foo {Foo}` in the current scope\n   --> $DIR/empty-tuple-method.rs:12:15\n    |\n LL |     thing.bar.foo();"}, {"sha": "ed01656ce72a319ee3c7a66efaff150538deb795", "filename": "tests/ui/typeck/issue-87181/enum-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.rs?ref=d7113948d31010758ed8d88e2d9290dafbb2d40d", "patch": "@@ -12,5 +12,5 @@ impl Foo {\n fn main() {\n     let thing = Bar { bar: Foo::Tup };\n     thing.bar.foo();\n-    //~^ ERROR no method named `foo` found for fn item `fn() -> Foo {Foo::Tup}` in the current scope [E0599]\n+    //~^ ERROR no method named `foo` found for enum constructor `fn() -> Foo {Foo::Tup}` in the current scope [E0599]\n }"}, {"sha": "d313a887abd986245ec22abe1830d5f8a6632396", "filename": "tests/ui/typeck/issue-87181/enum-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.stderr?ref=d7113948d31010758ed8d88e2d9290dafbb2d40d", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `foo` found for fn item `fn() -> Foo {Foo::Tup}` in the current scope\n+error[E0599]: no method named `foo` found for enum constructor `fn() -> Foo {Foo::Tup}` in the current scope\n   --> $DIR/enum-variant.rs:14:15\n    |\n LL |     thing.bar.foo();"}, {"sha": "6310984438c695227f840cce130ae899a34fcc11", "filename": "tests/ui/typeck/issue-87181/tuple-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.rs?ref=d7113948d31010758ed8d88e2d9290dafbb2d40d", "patch": "@@ -10,5 +10,5 @@ impl Foo {\n fn main() {\n     let thing = Bar { bar: Foo };\n     thing.bar.foo();\n-    //~^ ERROR no method named `foo` found for fn item `fn(u8, i32) -> Foo {Foo}` in the current scope [E0599]\n+    //~^ ERROR no method named `foo` found for struct constructor `fn(u8, i32) -> Foo {Foo}` in the current scope [E0599]\n }"}, {"sha": "de3dc15a54b12449e2f2226dae020d3bc3926184", "filename": "tests/ui/typeck/issue-87181/tuple-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.stderr?ref=d7113948d31010758ed8d88e2d9290dafbb2d40d", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `foo` found for fn item `fn(u8, i32) -> Foo {Foo}` in the current scope\n+error[E0599]: no method named `foo` found for struct constructor `fn(u8, i32) -> Foo {Foo}` in the current scope\n   --> $DIR/tuple-method.rs:12:15\n    |\n LL |     thing.bar.foo();"}, {"sha": "547cffffa2ee331e03c3afc475db691f6f6ec5d2", "filename": "tests/ui/typeck/issue-96738.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Ftypeck%2Fissue-96738.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7113948d31010758ed8d88e2d9290dafbb2d40d/tests%2Fui%2Ftypeck%2Fissue-96738.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-96738.stderr?ref=d7113948d31010758ed8d88e2d9290dafbb2d40d", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `nonexistent_method` found for fn item `fn(_) -> Option<_> {Option::<_>::Some}` in the current scope\n+error[E0599]: no method named `nonexistent_method` found for enum constructor `fn(_) -> Option<_> {Option::<_>::Some}` in the current scope\n   --> $DIR/issue-96738.rs:2:10\n    |\n LL |     Some.nonexistent_method();"}]}