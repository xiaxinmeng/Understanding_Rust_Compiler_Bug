{"sha": "01fc165517a404748a8050960f4c1606daac80b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZmMxNjU1MTdhNDA0NzQ4YTgwNTA5NjBmNGMxNjA2ZGFhYzgwYjk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-13T19:25:36Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-13T19:25:36Z"}, "message": "Attempt to correct buggy win32 timer code (causing tinderbox failures).", "tree": {"sha": "a6b0cc590e49f59f435c7cdc077c2aa8d2948448", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6b0cc590e49f59f435c7cdc077c2aa8d2948448"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01fc165517a404748a8050960f4c1606daac80b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01fc165517a404748a8050960f4c1606daac80b9", "html_url": "https://github.com/rust-lang/rust/commit/01fc165517a404748a8050960f4c1606daac80b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01fc165517a404748a8050960f4c1606daac80b9/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ece2d27205a7af7978d866b25cece95c786e24a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ece2d27205a7af7978d866b25cece95c786e24a0", "html_url": "https://github.com/rust-lang/rust/commit/ece2d27205a7af7978d866b25cece95c786e24a0"}], "stats": {"total": 78, "additions": 42, "deletions": 36}, "files": [{"sha": "aa4b7473c671197ddcaa2c9b5ad08d98bef654b6", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc165517a404748a8050960f4c1606daac80b9/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/01fc165517a404748a8050960f4c1606daac80b9/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=01fc165517a404748a8050960f4c1606daac80b9", "patch": "@@ -673,7 +673,7 @@ get_time(rust_task *task, uint32_t *sec, uint32_t *usec) {\n extern \"C\" CDECL void\n nano_time(rust_task *task, uint64_t *ns) {\n     timer t;\n-    *ns = t.nano_time();\n+    *ns = t.time_ns();\n }\n \n /**"}, {"sha": "321d10bd81154ce9dc5eae1b0b7c6b3879c4d39b", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/01fc165517a404748a8050960f4c1606daac80b9/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/01fc165517a404748a8050960f4c1606daac80b9/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=01fc165517a404748a8050960f4c1606daac80b9", "patch": "@@ -148,10 +148,11 @@ rust_scheduler::log_state() {\n     if (!running_tasks.is_empty()) {\n         log(NULL, log_note, \"running tasks:\");\n         for (size_t i = 0; i < running_tasks.length(); i++) {\n-            log(NULL, log_note, \"\\t task: %s @0x%\" PRIxPTR \" timeout: %d\",\n+            log(NULL, log_note, \"\\t task: %s @0x%\" PRIxPTR\n+                \" remaining: %\" PRId64 \" us\",\n                 running_tasks[i]->name,\n                 running_tasks[i],\n-                running_tasks[i]->yield_timer.get_timeout());\n+                running_tasks[i]->yield_timer.remaining_us());\n         }\n     }\n "}, {"sha": "b8fa6bd72ebf1fd291c9244f131793ed7d8c2e4a", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01fc165517a404748a8050960f4c1606daac80b9/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/01fc165517a404748a8050960f4c1606daac80b9/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=01fc165517a404748a8050960f4c1606daac80b9", "patch": "@@ -162,7 +162,7 @@ rust_task::start(uintptr_t spawnee_fn,\n \n     ctx.call((void *)task_start_wrapper, a, sp);\n \n-    yield_timer.reset(0);\n+    yield_timer.reset_us(0);\n     transition(&sched->newborn_tasks, &sched->running_tasks);\n }\n \n@@ -188,7 +188,7 @@ rust_task::yield(size_t nargs, size_t time_in_us) {\n \n     // FIXME: what is nargs for, and is it safe to ignore?\n \n-    yield_timer.reset(time_in_us);\n+    yield_timer.reset_us(time_in_us);\n \n     // Return to the scheduler.\n     ctx.next->swap(ctx);"}, {"sha": "ec3e1856ea42c5ed9cb2ebef912db6f70da6df3b", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01fc165517a404748a8050960f4c1606daac80b9/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/01fc165517a404748a8050960f4c1606daac80b9/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=01fc165517a404748a8050960f4c1606daac80b9", "patch": "@@ -170,8 +170,8 @@ upcall_yield(rust_task *task) {\n extern \"C\" CDECL void\n upcall_sleep(rust_task *task, size_t time_in_us) {\n     LOG_UPCALL_ENTRY(task);\n-    LOG(task, task, \"elapsed %d\",\n-              task->yield_timer.get_elapsed_time());\n+    LOG(task, task, \"elapsed %\" PRIu64 \" us\",\n+              task->yield_timer.elapsed_us());\n     LOG(task, task, \"sleep %d us\", time_in_us);\n     task->yield(2, time_in_us);\n }"}, {"sha": "2c0f92a1cf629f230fcf8864d10595f88d168ae8", "filename": "src/rt/sync/timer.cpp", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/01fc165517a404748a8050960f4c1606daac80b9/src%2Frt%2Fsync%2Ftimer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/01fc165517a404748a8050960f4c1606daac80b9/src%2Frt%2Fsync%2Ftimer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Ftimer.cpp?ref=01fc165517a404748a8050960f4c1606daac80b9", "patch": "@@ -5,43 +5,48 @@\n #include <mach/mach_time.h>\n #endif\n \n+uint64_t ns_per_s = 1000000000LL;\n+\n timer::timer() {\n #if __WIN32__\n-    uint64_t ticks_per_second;\n-    QueryPerformanceFrequency((LARGE_INTEGER *)&ticks_per_second);\n-    _ticks_per_ns = ticks_per_second / 1000;\n+    _ticks_per_s = 0LL;\n+    // FIXME: assert this works or have a workaround.\n+    QueryPerformanceFrequency((LARGE_INTEGER *)&_ticks_per_s);\n+    if (_ticks_per_s == 0LL) {\n+      _ticks_per_s = 1LL;\n+    }\n #endif\n-    reset(0);\n+    reset_us(0);\n }\n \n void\n-timer::reset(uint64_t timeout) {\n-    _start = get_time();\n-    _timeout = timeout;\n+timer::reset_us(uint64_t timeout_us) {\n+    _start_us = time_us();\n+    _timeout_us = timeout_us;\n }\n \n uint64_t\n-timer::get_elapsed_time() {\n-    return get_time() - _start;\n+timer::elapsed_us() {\n+    return time_us() - _start_us;\n }\n \n double\n-timer::get_elapsed_time_in_ms() {\n-    return (double) get_elapsed_time() / 1000.0;\n+timer::elapsed_ms() {\n+    return (double) elapsed_us() / 1000.0;\n }\n \n int64_t\n-timer::get_timeout() {\n-    return _timeout - get_elapsed_time();\n+timer::remaining_us() {\n+    return _timeout_us - elapsed_us();\n }\n \n bool\n timer::has_timed_out() {\n-    return get_timeout() <= 0;\n+    return remaining_us() <= 0;\n }\n \n uint64_t\n-timer::nano_time() {\n+timer::time_ns() {\n #ifdef __APPLE__\n     uint64_t time = mach_absolute_time();\n     mach_timebase_info_data_t info = {0, 0};\n@@ -53,17 +58,17 @@ timer::nano_time() {\n #elif __WIN32__\n     uint64_t ticks;\n     QueryPerformanceCounter((LARGE_INTEGER *)&ticks);\n-    return ticks / _ticks_per_ns;\n+    return ((ticks * ns_per_s) / _ticks_per_s);\n #else\n     timespec ts;\n     clock_gettime(CLOCK_MONOTONIC, &ts);\n-    return (ts.tv_sec * 1000000000LL + ts.tv_nsec);\n+    return (ts.tv_sec * ns_per_s + ts.tv_nsec);\n #endif\n }\n \n uint64_t\n-timer::get_time() {\n-    return nano_time() / 1000;\n+timer::time_us() {\n+    return time_ns() / 1000;\n }\n \n timer::~timer() {"}, {"sha": "ac06b3445c30440e3bd760e6c1e7b31641d334b2", "filename": "src/rt/sync/timer.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/01fc165517a404748a8050960f4c1606daac80b9/src%2Frt%2Fsync%2Ftimer.h", "raw_url": "https://github.com/rust-lang/rust/raw/01fc165517a404748a8050960f4c1606daac80b9/src%2Frt%2Fsync%2Ftimer.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Ftimer.h?ref=01fc165517a404748a8050960f4c1606daac80b9", "patch": "@@ -7,20 +7,20 @@\n \n class timer {\n private:\n-    uint64_t _start;\n-    uint64_t _timeout;\n-    uint64_t get_time();\n+    uint64_t _start_us;\n+    uint64_t _timeout_us;\n+    uint64_t time_us();\n #if __WIN32__\n-    uint64_t _ticks_per_ns;\n+    uint64_t _ticks_per_s;\n #endif\n public:\n     timer();\n-    void reset(uint64_t timeout);\n-    uint64_t get_elapsed_time();\n-    double get_elapsed_time_in_ms();\n-    int64_t get_timeout();\n+    void reset_us(uint64_t timeout);\n+    uint64_t elapsed_us();\n+    double elapsed_ms();\n+    int64_t remaining_us();\n     bool has_timed_out();\n-    uint64_t nano_time();\n+    uint64_t time_ns();\n     virtual ~timer();\n };\n "}, {"sha": "ec89da1ff927d37b00df20c75b54fb37d485230a", "filename": "src/rt/test/rust_test_harness.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01fc165517a404748a8050960f4c1606daac80b9/src%2Frt%2Ftest%2Frust_test_harness.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/01fc165517a404748a8050960f4c1606daac80b9/src%2Frt%2Ftest%2Frust_test_harness.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_harness.cpp?ref=01fc165517a404748a8050960f4c1606daac80b9", "patch": "@@ -30,7 +30,7 @@ rust_test_suite::run() {\n         timer timer;\n         bool result = tests[i]->run();\n         printf(\"test: %s %s %.2f ms\\n\", test->name(),\n-               result ? \"PASSED\" : \"FAILE\", timer.get_elapsed_time_in_ms());\n+               result ? \"PASS\" : \"FAIL\", timer.elapsed_ms());\n         if (result == false) {\n             pass = false;\n         }"}]}