{"sha": "b85c4d16d52c7f0a3fec5d4ce4d686f0a70fa512", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NWM0ZDE2ZDUyYzdmMGEzZmVjNWQ0Y2U0ZDY4NmYwYTcwZmE1MTI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-01T21:47:19Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-01T21:47:19Z"}, "message": "Fix bug in `OverflowOps` impl for unsigned integers.\n\nNamely, the special case treatment for `div`/`rem` is only applicable\nto signed integer values.\n\nClearly RFC 1027 would have saved us here!  ;)", "tree": {"sha": "24b66ba6638f806b4fc0cc6ba66a5216bd3f6f81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24b66ba6638f806b4fc0cc6ba66a5216bd3f6f81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b85c4d16d52c7f0a3fec5d4ce4d686f0a70fa512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b85c4d16d52c7f0a3fec5d4ce4d686f0a70fa512", "html_url": "https://github.com/rust-lang/rust/commit/b85c4d16d52c7f0a3fec5d4ce4d686f0a70fa512", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b85c4d16d52c7f0a3fec5d4ce4d686f0a70fa512/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c11748a54027dc5f89185dcbb39ff8996d71515", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c11748a54027dc5f89185dcbb39ff8996d71515", "html_url": "https://github.com/rust-lang/rust/commit/1c11748a54027dc5f89185dcbb39ff8996d71515"}], "stats": {"total": 52, "additions": 49, "deletions": 3}, "files": [{"sha": "28276d0bf0168b35677c43ea4b50f4d2d322f23b", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b85c4d16d52c7f0a3fec5d4ce4d686f0a70fa512/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85c4d16d52c7f0a3fec5d4ce4d686f0a70fa512/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=b85c4d16d52c7f0a3fec5d4ce4d686f0a70fa512", "patch": "@@ -30,7 +30,7 @@ use intrinsics::{i16_mul_with_overflow, u16_mul_with_overflow};\n use intrinsics::{i32_mul_with_overflow, u32_mul_with_overflow};\n use intrinsics::{i64_mul_with_overflow, u64_mul_with_overflow};\n \n-use ::{i8,i16,i32,i64,u8,u16,u32,u64};\n+use ::{i8,i16,i32,i64};\n \n #[unstable(feature = \"core\", reason = \"may be removed, renamed, or relocated\")]\n #[deprecated(since = \"1.0.0\", reason = \"moved to inherent methods\")]\n@@ -206,7 +206,7 @@ mod shift_max {\n     pub const u64: u32 = i64;\n }\n \n-macro_rules! overflowing_impl {\n+macro_rules! signed_overflowing_impl {\n     ($($t:ident)*) => ($(\n         impl OverflowingOps for $t {\n             #[inline(always)]\n@@ -259,7 +259,53 @@ macro_rules! overflowing_impl {\n     )*)\n }\n \n-overflowing_impl! { u8 u16 u32 u64 i8 i16 i32 i64 }\n+macro_rules! unsigned_overflowing_impl {\n+    ($($t:ident)*) => ($(\n+        impl OverflowingOps for $t {\n+            #[inline(always)]\n+            fn overflowing_add(self, rhs: $t) -> ($t, bool) {\n+                unsafe {\n+                    concat_idents!($t, _add_with_overflow)(self, rhs)\n+                }\n+            }\n+            #[inline(always)]\n+            fn overflowing_sub(self, rhs: $t) -> ($t, bool) {\n+                unsafe {\n+                    concat_idents!($t, _sub_with_overflow)(self, rhs)\n+                }\n+            }\n+            #[inline(always)]\n+            fn overflowing_mul(self, rhs: $t) -> ($t, bool) {\n+                unsafe {\n+                    concat_idents!($t, _mul_with_overflow)(self, rhs)\n+                }\n+            }\n+\n+            #[inline(always)]\n+            fn overflowing_div(self, rhs: $t) -> ($t, bool) {\n+                (self/rhs, false)\n+            }\n+            #[inline(always)]\n+            fn overflowing_rem(self, rhs: $t) -> ($t, bool) {\n+                (self % rhs, false)\n+            }\n+\n+            #[inline(always)]\n+            fn overflowing_shl(self, rhs: u32) -> ($t, bool) {\n+                (self << (rhs & self::shift_max::$t),\n+                 (rhs > self::shift_max::$t))\n+            }\n+            #[inline(always)]\n+            fn overflowing_shr(self, rhs: u32) -> ($t, bool) {\n+                (self >> (rhs & self::shift_max::$t),\n+                 (rhs > self::shift_max::$t))\n+            }\n+        }\n+    )*)\n+}\n+\n+signed_overflowing_impl! { i8 i16 i32 i64 }\n+unsigned_overflowing_impl! { u8 u16 u32 u64 }\n \n #[cfg(target_pointer_width = \"64\")]\n impl OverflowingOps for usize {"}]}