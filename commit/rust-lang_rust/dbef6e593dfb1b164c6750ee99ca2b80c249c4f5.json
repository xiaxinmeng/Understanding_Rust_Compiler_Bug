{"sha": "dbef6e593dfb1b164c6750ee99ca2b80c249c4f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZWY2ZTU5M2RmYjFiMTY0YzY3NTBlZTk5Y2EyYjgwYzI0OWM0ZjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-07T13:04:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-07T13:11:12Z"}, "message": "move borrowck tests to use ref, fix a few exposed shortcomings", "tree": {"sha": "e4046f2e7cf5eb81dbd6153217e0ed64865ab84a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4046f2e7cf5eb81dbd6153217e0ed64865ab84a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5", "html_url": "https://github.com/rust-lang/rust/commit/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "793c0a1116af40d8a84941525f148a3d785c3f0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/793c0a1116af40d8a84941525f148a3d785c3f0c", "html_url": "https://github.com/rust-lang/rust/commit/793c0a1116af40d8a84941525f148a3d785c3f0c"}], "stats": {"total": 104, "additions": 59, "deletions": 45}, "files": [{"sha": "cb25cb5382f79f3a3b4cc63e1aa2911158277c6d", "filename": "src/rustc/middle/typeck/check/alt.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs?ref=dbef6e593dfb1b164c6750ee99ca2b80c249c4f5", "patch": "@@ -166,7 +166,9 @@ fn check_pat(pcx: pat_ctxt, pat: @ast::pat, expected: ty::t) {\n             //    ref x | ref const x | ref mut x\n             // then the type of x is &M T where M is the mutability\n             // and T is the expected type\n-            let region_var = fcx.infcx.next_region_var_nb();\n+            let region_var =\n+                fcx.infcx.next_region_var({lb: some(pcx.block_region),\n+                                           ub: none});\n             let mt = {ty: expected, mutbl: mutbl};\n             let region_ty = ty::mk_rptr(tcx, region_var, mt);\n             demand::eqtype(fcx, pat.span, region_ty, typ);"}, {"sha": "e623c3ec0b980849a90cfae0a109fe8653c5e6ce", "filename": "src/rustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=dbef6e593dfb1b164c6750ee99ca2b80c249c4f5", "patch": "@@ -22,6 +22,7 @@ import syntax::print::pprust;\n import infer::{resolve_type, resolve_all, force_all,\n                resolve_rvar, force_rvar, fres};\n import middle::kind::check_owned;\n+import middle::pat_util::pat_bindings;\n \n enum rcx { rcx_({fcx: @fn_ctxt, mut errors_reported: uint}) }\n type rvt = visit::vt<@rcx>;\n@@ -80,7 +81,6 @@ fn regionck_visitor() -> rvt {\n                    visit_stmt: visit_stmt,\n                    visit_expr: visit_expr,\n                    visit_block: visit_block,\n-                   visit_pat: visit_pat,\n                    visit_local: visit_local\n                    with *visit::default_visitor()})\n }\n@@ -90,8 +90,26 @@ fn visit_item(_item: @ast::item, &&_rcx: @rcx, _v: rvt) {\n }\n \n fn visit_local(l: @ast::local, &&rcx: @rcx, v: rvt) {\n+    // Check to make sure that the regions in all local variables are\n+    // within scope.\n+    //\n+    // Note: we do this here rather than in visit_pat because we do\n+    // not wish to constrain the regions in *patterns* in quite the\n+    // same way.  `visit_node()` guarantees that the region encloses\n+    // the node in question, which ultimately constraints the regions\n+    // in patterns to enclose the match expression as a whole.  But we\n+    // want them to enclose the *arm*.  However, regions in patterns\n+    // must either derive from the discriminant or a ref pattern: in\n+    // the case of the discriminant, the regions will be constrained\n+    // when the type of the discriminant is checked.  In the case of a\n+    // ref pattern, the variable is created with a suitable lower\n+    // bound.\n     let e = rcx.errors_reported;\n     v.visit_pat(l.node.pat, rcx, v);\n+    let def_map = rcx.fcx.ccx.tcx.def_map;\n+    do pat_bindings(def_map, l.node.pat) |_bm, id, sp, _path| {\n+        visit_node(id, sp, rcx);\n+    }\n     if e != rcx.errors_reported {\n         return; // if decl has errors, skip initializer expr\n     }\n@@ -102,20 +120,6 @@ fn visit_local(l: @ast::local, &&rcx: @rcx, v: rvt) {\n     }\n }\n \n-fn visit_pat(p: @ast::pat, &&rcx: @rcx, v: rvt) {\n-    let fcx = rcx.fcx;\n-    match p.node {\n-      ast::pat_ident(_, path, _)\n-      if !pat_util::pat_is_variant(fcx.ccx.tcx.def_map, p) => {\n-        debug!{\"visit_pat binding=%s\", *path.idents[0]};\n-        visit_node(p.id, p.span, rcx);\n-      }\n-      _ => ()\n-    }\n-\n-    visit::visit_pat(p, rcx, v);\n-}\n-\n fn visit_block(b: ast::blk, &&rcx: @rcx, v: rvt) {\n     visit::visit_block(b, rcx, v);\n }"}, {"sha": "c8ed3f143df4092809347610e35dd7b2a93caf90", "filename": "src/test/compile-fail/borrowck-binding-mutbl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Ftest%2Fcompile-fail%2Fborrowck-binding-mutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Ftest%2Fcompile-fail%2Fborrowck-binding-mutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-binding-mutbl.rs?ref=dbef6e593dfb1b164c6750ee99ca2b80c249c4f5", "patch": "@@ -1,13 +1,13 @@\n-fn impure(_v: ~[int]) {\n+fn impure(_v: &[int]) {\n }\n \n fn main() {\n     let x = {mut f: ~[3]};\n \n     match x {\n-      {f: v} => {\n-        impure(v); //~ ERROR illegal borrow unless pure: unique value in aliasable, mutable location\n+      {f: ref mut v} => {\n+        impure(*v); //~ ERROR illegal borrow unless pure\n         //~^ NOTE impure due to access to impure function\n       }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "9bfc4cc1d0d052bbb49a142d7ff17fd764c60a5d", "filename": "src/test/compile-fail/borrowck-issue-2657-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs?ref=dbef6e593dfb1b164c6750ee99ca2b80c249c4f5", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n let x = some(~1);\n match x { //~ NOTE loan of immutable local variable granted here\n-  some(y) => {\n+  some(ref y) => {\n     let _a <- x; //~ ERROR moving out of immutable local variable prohibited due to outstanding loan\n   }\n   _ => {}"}, {"sha": "1444889bc755166f672fd0dbe787d748ae0c49af", "filename": "src/test/compile-fail/borrowck-issue-2657-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs?ref=dbef6e593dfb1b164c6750ee99ca2b80c249c4f5", "patch": "@@ -1,8 +1,8 @@\n fn main() {\n let x = some(~1);\n match x {\n-  some(y) => {\n-    let _b <- y; //~ ERROR moving out of pattern binding\n+  some(ref y) => {\n+    let _b <- *y; //~ ERROR moving out of dereference of immutable & pointer\n   }\n   _ => {}\n }"}, {"sha": "8655ea0ab70b415c8c63d192f64a2c2d6de6493c", "filename": "src/test/compile-fail/borrowck-no-cycle-in-exchange-heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs?ref=dbef6e593dfb1b164c6750ee99ca2b80c249c4f5", "patch": "@@ -6,8 +6,8 @@ fn main() {\n     let x = ~node({mut a: ~empty});\n     // Create a cycle!\n     match check *x { //~ NOTE loan of immutable local variable granted here\n-      node(y) => {\n+      node(ref y) => {\n         y.a <- x; //~ ERROR moving out of immutable local variable prohibited due to outstanding loan\n       }\n     };\n-}\n\\ No newline at end of file\n+}"}, {"sha": "84a78580141f7d86c046d55b0cf71275a6e5a591", "filename": "src/test/compile-fail/borrowck-pat-enum-in-box.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum-in-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum-in-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum-in-box.rs?ref=dbef6e593dfb1b164c6750ee99ca2b80c249c4f5", "patch": "@@ -1,13 +1,13 @@\n fn match_imm_box(v: &const @option<int>) -> int {\n     match *v {\n-      @some(i) => {i}\n+      @some(ref i) => {*i}\n       @none => {0}\n     }\n }\n \n fn match_const_box(v: &const @const option<int>) -> int {\n     match *v {\n-      @some(i) => { i } // ok because this is pure\n+      @some(ref i) => { *i } // ok because this is pure\n       @none => {0}\n     }\n }\n@@ -16,8 +16,8 @@ pure fn pure_process(_i: int) {}\n \n fn match_const_box_and_do_pure_things(v: &const @const option<int>) {\n     match *v {\n-      @some(i) => {\n-        pure_process(i)\n+      @some(ref i) => {\n+        pure_process(*i)\n       }\n       @none => {}\n     }\n@@ -27,8 +27,8 @@ fn process(_i: int) {}\n \n fn match_const_box_and_do_bad_things(v: &const @const option<int>) {\n     match *v {\n-      @some(i) => { //~ ERROR illegal borrow unless pure: enum variant in aliasable, mutable location\n-        process(i) //~ NOTE impure due to access to impure function\n+      @some(ref i) => { //~ ERROR illegal borrow unless pure\n+        process(*i) //~ NOTE impure due to access to impure function\n       }\n       @none => {}\n     }"}, {"sha": "bc30a2f13db9eba3f9577d2a8cff478972f8eb3c", "filename": "src/test/compile-fail/borrowck-pat-enum.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum.rs?ref=dbef6e593dfb1b164c6750ee99ca2b80c249c4f5", "patch": "@@ -1,7 +1,7 @@\n fn match_ref(&&v: option<int>) -> int {\n     match v {\n-      some(i) => {\n-        i\n+      some(ref i) => {\n+        *i\n       }\n       none => {0}\n     }\n@@ -16,7 +16,7 @@ fn match_ref_unused(&&v: option<int>) {\n \n fn match_const_reg(v: &const option<int>) -> int {\n     match *v {\n-      some(i) => {i} // OK because this is pure\n+      some(ref i) => {*i} // OK because this is pure\n       none => {0}\n     }\n }\n@@ -33,15 +33,15 @@ fn match_const_reg_unused(v: &const option<int>) {\n \n fn match_const_reg_impure(v: &const option<int>) {\n     match *v {\n-      some(i) => {impure(i)} //~ ERROR illegal borrow unless pure: enum variant in aliasable, mutable location\n+      some(ref i) => {impure(*i)} //~ ERROR illegal borrow unless pure\n       //~^ NOTE impure due to access to impure function\n       none => {}\n     }\n }\n \n fn match_imm_reg(v: &option<int>) {\n     match *v {\n-      some(i) => {impure(i)} // OK because immutable\n+      some(ref i) => {impure(*i)} // OK because immutable\n       none => {}\n     }\n }"}, {"sha": "fb3f13f909a1e474d12a66302434e155845d4e7a", "filename": "src/test/compile-fail/borrowck-pat-reassign-binding.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-binding.rs?ref=dbef6e593dfb1b164c6750ee99ca2b80c249c4f5", "patch": "@@ -4,9 +4,9 @@ fn main() {\n     let mut x: option<int> = none;\n     match x { //~ NOTE loan of mutable local variable granted here\n       none => {}\n-      some(i) => {\n+      some(ref i) => {\n         // Not ok: i is an outstanding ptr into x.\n-        x = some(i+1); //~ ERROR assigning to mutable local variable prohibited due to outstanding loan\n+        x = some(*i+1); //~ ERROR assigning to mutable local variable prohibited due to outstanding loan\n       }\n     }\n     copy x; // just to prevent liveness warnings"}, {"sha": "e0d96fb9e267cf44802746861c28cab22aacc882", "filename": "src/test/compile-fail/borrowck-pat-reassign-sometimes-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-sometimes-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-sometimes-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-reassign-sometimes-binding.rs?ref=dbef6e593dfb1b164c6750ee99ca2b80c249c4f5", "patch": "@@ -8,7 +8,7 @@ fn main() {\n         // fact no outstanding loan of x!\n         x = some(0);\n       }\n-      some(i) => {\n+      some(ref i) => {\n         x = some(1); //~ ERROR assigning to mutable local variable prohibited due to outstanding loan\n       }\n     }"}, {"sha": "aa16a272645ff069d617b7edc07b4ebe07d7ed77", "filename": "src/test/compile-fail/borrowck-unchecked-with-borrow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Ftest%2Fcompile-fail%2Fborrowck-unchecked-with-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Ftest%2Fcompile-fail%2Fborrowck-unchecked-with-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-unchecked-with-borrow.rs?ref=dbef6e593dfb1b164c6750ee99ca2b80c249c4f5", "patch": "@@ -3,10 +3,10 @@ fn impure(_i: int) {}\n // check that unchecked alone does not override borrowck:\n fn foo(v: &const option<int>) {\n     match *v {\n-      some(i) => {\n-        //~^ ERROR illegal borrow unless pure: enum variant in aliasable, mutable location\n+      some(ref i) => {\n+        //~^ ERROR illegal borrow unless pure\n         unchecked {\n-            impure(i); //~ NOTE impure due to access to impure function\n+            impure(*i); //~ NOTE impure due to access to impure function\n         }\n       }\n       none => {\n@@ -16,9 +16,9 @@ fn foo(v: &const option<int>) {\n \n fn bar(v: &const option<int>) {\n     match *v {\n-      some(i) => {\n+      some(ref i) => {\n         unsafe {\n-            impure(i);\n+            impure(*i);\n         }\n       }\n       none => {\n@@ -27,4 +27,4 @@ fn bar(v: &const option<int>) {\n }\n \n fn main() {\n-}\n\\ No newline at end of file\n+}"}, {"sha": "c81d87f3464b081020d765c2bce9fafc060c2a80", "filename": "src/test/run-pass/alt-ref-binding-mut-option.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Ftest%2Frun-pass%2Falt-ref-binding-mut-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbef6e593dfb1b164c6750ee99ca2b80c249c4f5/src%2Ftest%2Frun-pass%2Falt-ref-binding-mut-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-ref-binding-mut-option.rs?ref=dbef6e593dfb1b164c6750ee99ca2b80c249c4f5", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let mut v = some(22);\n+    match v {\n+      none => {}\n+      some(ref mut p) => { *p += 1; }\n+    }\n+    assert v == some(23);\n+}"}]}