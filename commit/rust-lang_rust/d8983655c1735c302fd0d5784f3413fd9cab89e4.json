{"sha": "d8983655c1735c302fd0d5784f3413fd9cab89e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4OTgzNjU1YzE3MzVjMzAyZmQwZDU3ODRmMzQxM2ZkOWNhYjg5ZTQ=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-11-28T21:23:38Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-11-28T21:23:38Z"}, "message": "Correctly detect `usize`/`isize` range overlaps", "tree": {"sha": "925e191e0fa60c63914a1218528d33d65a54b170", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/925e191e0fa60c63914a1218528d33d65a54b170"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8983655c1735c302fd0d5784f3413fd9cab89e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8983655c1735c302fd0d5784f3413fd9cab89e4", "html_url": "https://github.com/rust-lang/rust/commit/d8983655c1735c302fd0d5784f3413fd9cab89e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8983655c1735c302fd0d5784f3413fd9cab89e4/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ae328bef47dffcbf363e5ae873f419c06a5511d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae328bef47dffcbf363e5ae873f419c06a5511d", "html_url": "https://github.com/rust-lang/rust/commit/4ae328bef47dffcbf363e5ae873f419c06a5511d"}], "stats": {"total": 51, "additions": 20, "deletions": 31}, "files": [{"sha": "34c415987d8c0bac0506f01cfedc2ee9b27d34f7", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 12, "deletions": 29, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d8983655c1735c302fd0d5784f3413fd9cab89e4/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8983655c1735c302fd0d5784f3413fd9cab89e4/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=d8983655c1735c302fd0d5784f3413fd9cab89e4", "patch": "@@ -58,12 +58,6 @@ impl<'tcx> IntRange<'tcx> {\n         (*self.range.start(), *self.range.end())\n     }\n \n-    /// Don't treat `usize`/`isize` exhaustively unless the `precise_pointer_size_matching` feature\n-    /// is enabled.\n-    fn treat_exhaustively(&self, tcx: TyCtxt<'tcx>) -> bool {\n-        !self.ty.is_ptr_sized_integral() || tcx.features().precise_pointer_size_matching\n-    }\n-\n     #[inline]\n     fn integral_size_and_signed_bias(tcx: TyCtxt<'tcx>, ty: Ty<'_>) -> Option<(Size, u128)> {\n         match *ty.kind() {\n@@ -147,20 +141,15 @@ impl<'tcx> IntRange<'tcx> {\n         other.range.start() <= self.range.start() && self.range.end() <= other.range.end()\n     }\n \n-    fn intersection(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Option<Self> {\n+    fn intersection(&self, other: &Self) -> Option<Self> {\n         let ty = self.ty;\n         let (lo, hi) = self.boundaries();\n         let (other_lo, other_hi) = other.boundaries();\n-        if self.treat_exhaustively(tcx) {\n-            if lo <= other_hi && other_lo <= hi {\n-                let span = other.span;\n-                Some(IntRange { range: max(lo, other_lo)..=min(hi, other_hi), ty, span })\n-            } else {\n-                None\n-            }\n+        if lo <= other_hi && other_lo <= hi {\n+            let span = other.span;\n+            Some(IntRange { range: max(lo, other_lo)..=min(hi, other_hi), ty, span })\n         } else {\n-            // If the range should not be treated exhaustively, fallback to checking for inclusion.\n-            if self.is_subrange(other) { Some(self.clone()) } else { None }\n+            None\n         }\n     }\n \n@@ -271,7 +260,7 @@ impl<'tcx> IntRange<'tcx> {\n             .head_ctors(pcx.cx)\n             .filter_map(|ctor| ctor.as_int_range())\n             .filter_map(|range| {\n-                let intersection = self.intersection(pcx.cx.tcx, &range);\n+                let intersection = self.intersection(&range);\n                 let should_lint = self.suspicious_intersection(&range);\n                 if let (Some(range), 1, true) = (&intersection, row_len, should_lint) {\n                     // FIXME: for now, only check for overlapping ranges on simple range\n@@ -346,8 +335,8 @@ impl<'tcx> IntRange<'tcx> {\n     }\n \n     /// See `Constructor::is_covered_by`\n-    fn is_covered_by<'p>(&self, pcx: PatCtxt<'_, 'p, 'tcx>, other: &Self) -> bool {\n-        if self.intersection(pcx.cx.tcx, other).is_some() {\n+    fn is_covered_by(&self, other: &Self) -> bool {\n+        if self.intersection(other).is_some() {\n             // Constructor splitting should ensure that all intersections we encounter are actually\n             // inclusions.\n             assert!(self.is_subrange(other));\n@@ -694,11 +683,7 @@ impl<'tcx> Constructor<'tcx> {\n             Wildcard => Constructor::split_wildcard(pcx),\n             // Fast-track if the range is trivial. In particular, we don't do the overlapping\n             // ranges check.\n-            IntRange(ctor_range)\n-                if ctor_range.treat_exhaustively(pcx.cx.tcx) && !ctor_range.is_singleton() =>\n-            {\n-                ctor_range.split(pcx, hir_id)\n-            }\n+            IntRange(ctor_range) if !ctor_range.is_singleton() => ctor_range.split(pcx, hir_id),\n             Slice(slice @ Slice { kind: VarLen(..), .. }) => slice.split(pcx),\n             // Any other constructor can be used unchanged.\n             _ => smallvec![self.clone()],\n@@ -740,9 +725,7 @@ impl<'tcx> Constructor<'tcx> {\n             (Single, Single) => true,\n             (Variant(self_id), Variant(other_id)) => self_id == other_id,\n \n-            (IntRange(self_range), IntRange(other_range)) => {\n-                self_range.is_covered_by(pcx, other_range)\n-            }\n+            (IntRange(self_range), IntRange(other_range)) => self_range.is_covered_by(other_range),\n             (\n                 FloatRange(self_from, self_to, self_end),\n                 FloatRange(other_from, other_to, other_end),\n@@ -803,15 +786,15 @@ impl<'tcx> Constructor<'tcx> {\n             IntRange(range) => used_ctors\n                 .iter()\n                 .filter_map(|c| c.as_int_range())\n-                .any(|other| range.is_covered_by(pcx, other)),\n+                .any(|other| range.is_covered_by(other)),\n             Slice(slice) => used_ctors\n                 .iter()\n                 .filter_map(|c| c.as_slice())\n                 .any(|other| slice.is_covered_by(other)),\n             // This constructor is never covered by anything else\n             NonExhaustive => false,\n             Str(..) | FloatRange(..) | Opaque | Wildcard => {\n-                bug!(\"found unexpected ctor in all_ctors: {:?}\", self)\n+                span_bug!(pcx.span, \"found unexpected ctor in all_ctors: {:?}\", self)\n             }\n         }\n     }"}, {"sha": "6516925e93918b76679f7cf5ce6a48c358319113", "filename": "src/test/ui/pattern/usefulness/integer-ranges/reachability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8983655c1735c302fd0d5784f3413fd9cab89e4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Freachability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8983655c1735c302fd0d5784f3413fd9cab89e4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Freachability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Freachability.rs?ref=d8983655c1735c302fd0d5784f3413fd9cab89e4", "patch": "@@ -72,7 +72,7 @@ fn main() {\n     match 0usize {\n         0..10 => {},\n         10..20 => {},\n-        5..15 => {}, // FIXME: should be unreachable\n+        5..15 => {}, //~ ERROR unreachable pattern\n         _ => {},\n     }\n     // Chars between '\\u{D7FF}' and '\\u{E000}' are invalid even though ranges that contain them are"}, {"sha": "e6878d950d62561e48fd7024ef545479559656b0", "filename": "src/test/ui/pattern/usefulness/integer-ranges/reachability.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8983655c1735c302fd0d5784f3413fd9cab89e4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Freachability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8983655c1735c302fd0d5784f3413fd9cab89e4/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Freachability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Freachability.stderr?ref=d8983655c1735c302fd0d5784f3413fd9cab89e4", "patch": "@@ -124,6 +124,12 @@ error: unreachable pattern\n LL |         5..25 => {},\n    |         ^^^^^\n \n+error: unreachable pattern\n+  --> $DIR/reachability.rs:75:9\n+   |\n+LL |         5..15 => {},\n+   |         ^^^^^\n+\n error: unreachable pattern\n   --> $DIR/reachability.rs:82:9\n    |\n@@ -142,5 +148,5 @@ error: unreachable pattern\n LL |         BAR => {}\n    |         ^^^\n \n-error: aborting due to 23 previous errors\n+error: aborting due to 24 previous errors\n "}]}