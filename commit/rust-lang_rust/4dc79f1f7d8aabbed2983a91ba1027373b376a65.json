{"sha": "4dc79f1f7d8aabbed2983a91ba1027373b376a65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYzc5ZjFmN2Q4YWFiYmVkMjk4M2E5MWJhMTAyNzM3M2IzNzZhNjU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-28T10:49:29Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-21T22:12:44Z"}, "message": "Use Arena inside hir::Crate.", "tree": {"sha": "d14ce8549fc04e51e39fe1f0ae2b7c54cfb4bbe3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d14ce8549fc04e51e39fe1f0ae2b7c54cfb4bbe3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dc79f1f7d8aabbed2983a91ba1027373b376a65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc79f1f7d8aabbed2983a91ba1027373b376a65", "html_url": "https://github.com/rust-lang/rust/commit/4dc79f1f7d8aabbed2983a91ba1027373b376a65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dc79f1f7d8aabbed2983a91ba1027373b376a65/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc5deca2143a448d10a1241a777275e59448c94d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc5deca2143a448d10a1241a777275e59448c94d", "html_url": "https://github.com/rust-lang/rust/commit/fc5deca2143a448d10a1241a777275e59448c94d"}], "stats": {"total": 206, "additions": 109, "deletions": 97}, "files": [{"sha": "59d57c6ae24b8c71af34ae22178411799691f83e", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -93,7 +93,6 @@ macro_rules! arena_types {\n                         rustc::hir::def_id::CrateNum\n                     >\n                 >,\n-            [few] hir_forest: rustc::hir::map::Forest,\n             [few] diagnostic_items: rustc_data_structures::fx::FxHashMap<\n                 syntax::symbol::Symbol,\n                 rustc::hir::def_id::DefId,\n@@ -123,6 +122,10 @@ macro_rules! arena_types {\n             [few] crate_variances: rustc::ty::CrateVariancesMap<'tcx>,\n             [few] inferred_outlives_crate: rustc::ty::CratePredicatesMap<'tcx>,\n             [] upvars: rustc_data_structures::fx::FxIndexMap<rustc::hir::HirId, rustc::hir::Upvar>,\n+            // HIR nodes arenas\n+            [few] hir_forest: rustc::hir::map::Forest<$tcx>,\n+            [] attribute: syntax::ast::Attribute,\n+            [] macro_def: rustc::hir::MacroDef,\n         ], $tcx);\n     )\n }"}, {"sha": "e71e05678f35a6a15e044058075baaab133c8315", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -382,10 +382,10 @@ pub trait Visitor<'v>: Sized {\n }\n \n /// Walks the contents of a crate. See also `Crate::visit_all_items`.\n-pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate) {\n+pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate<'v>) {\n     visitor.visit_mod(&krate.module, krate.span, CRATE_HIR_ID);\n-    walk_list!(visitor, visit_attribute, &krate.attrs);\n-    walk_list!(visitor, visit_macro_def, &krate.exported_macros);\n+    walk_list!(visitor, visit_attribute, krate.attrs);\n+    walk_list!(visitor, visit_macro_def, krate.exported_macros);\n }\n \n pub fn walk_macro_def<'v, V: Visitor<'v>>(visitor: &mut V, macro_def: &'v MacroDef) {"}, {"sha": "a8f0c90ab3a5657dcd6f792e6a3ab750afacf8e9", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 34, "deletions": 27, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -35,6 +35,7 @@\n mod expr;\n mod item;\n \n+use crate::arena::Arena;\n use crate::dep_graph::DepGraph;\n use crate::hir::{self, ParamName};\n use crate::hir::HirVec;\n@@ -77,7 +78,7 @@ use rustc_error_codes::*;\n \n const HIR_ID_COUNTER_LOCKED: u32 = 0xFFFFFFFF;\n \n-pub struct LoweringContext<'a> {\n+pub struct LoweringContext<'a, 'hir: 'a> {\n     crate_root: Option<Symbol>,\n \n     /// Used to assign IDs to HIR nodes that do not directly correspond to AST nodes.\n@@ -90,6 +91,9 @@ pub struct LoweringContext<'a> {\n     /// librustc is independent of the parser, we use dynamic dispatch here.\n     nt_to_tokenstream: NtToTokenstream,\n \n+    /// Used to allocate HIR nodes\n+    arena: &'hir Arena<'hir>,\n+\n     /// The items being lowered are collected here.\n     items: BTreeMap<hir::HirId, hir::Item>,\n \n@@ -240,13 +244,14 @@ impl<'a> ImplTraitContext<'a> {\n     }\n }\n \n-pub fn lower_crate(\n-    sess: &Session,\n-    dep_graph: &DepGraph,\n-    krate: &Crate,\n-    resolver: &mut dyn Resolver,\n+pub fn lower_crate<'a, 'hir>(\n+    sess: &'a Session,\n+    dep_graph: &'a DepGraph,\n+    krate: &'a Crate,\n+    resolver: &'a mut dyn Resolver,\n     nt_to_tokenstream: NtToTokenstream,\n-) -> hir::Crate {\n+    arena: &'hir Arena<'hir>,\n+) -> hir::Crate<'hir> {\n     // We're constructing the HIR here; we don't care what we will\n     // read, since we haven't even constructed the *input* to\n     // incr. comp. yet.\n@@ -259,6 +264,7 @@ pub fn lower_crate(\n         sess,\n         resolver,\n         nt_to_tokenstream,\n+        arena,\n         items: BTreeMap::new(),\n         trait_items: BTreeMap::new(),\n         impl_items: BTreeMap::new(),\n@@ -382,19 +388,19 @@ impl<'a, 'b> Visitor<'a> for ImplTraitTypeIdVisitor<'b> {\n     }\n }\n \n-impl<'a> LoweringContext<'a> {\n-    fn lower_crate(mut self, c: &Crate) -> hir::Crate {\n+impl<'a, 'hir> LoweringContext<'a, 'hir> {\n+    fn lower_crate(mut self, c: &Crate) -> hir::Crate<'hir> {\n         /// Full-crate AST visitor that inserts into a fresh\n         /// `LoweringContext` any information that may be\n         /// needed from arbitrary locations in the crate,\n         /// e.g., the number of lifetime generic parameters\n         /// declared for every type and trait definition.\n-        struct MiscCollector<'tcx, 'interner> {\n-            lctx: &'tcx mut LoweringContext<'interner>,\n+        struct MiscCollector<'tcx, 'lowering, 'hir> {\n+            lctx: &'tcx mut LoweringContext<'lowering, 'hir>,\n             hir_id_owner: Option<NodeId>,\n         }\n \n-        impl MiscCollector<'_, '_> {\n+        impl MiscCollector<'_, '_, '_> {\n             fn allocate_use_tree_hir_id_counters(\n                 &mut self,\n                 tree: &UseTree,\n@@ -434,7 +440,7 @@ impl<'a> LoweringContext<'a> {\n             }\n         }\n \n-        impl<'tcx, 'interner> Visitor<'tcx> for MiscCollector<'tcx, 'interner> {\n+        impl<'tcx, 'lowering, 'hir> Visitor<'tcx> for MiscCollector<'tcx, 'lowering, 'hir> {\n             fn visit_pat(&mut self, p: &'tcx Pat) {\n                 if let PatKind::Paren(..) | PatKind::Rest = p.kind {\n                     // Doesn't generate a HIR node\n@@ -537,7 +543,7 @@ impl<'a> LoweringContext<'a> {\n         visit::walk_crate(&mut item::ItemLowerer { lctx: &mut self }, c);\n \n         let module = self.lower_mod(&c.module);\n-        let attrs = self.lower_attrs(&c.attrs);\n+        let attrs = self.arena.alloc_from_iter(self.lower_attrs(&c.attrs).into_iter());\n         let body_ids = body_ids(&self.bodies);\n \n         self.resolver\n@@ -548,8 +554,8 @@ impl<'a> LoweringContext<'a> {\n             module,\n             attrs,\n             span: c.span,\n-            exported_macros: hir::HirVec::from(self.exported_macros),\n-            non_exported_macro_attrs: hir::HirVec::from(self.non_exported_macro_attrs),\n+            exported_macros: self.arena.alloc_from_iter(self.exported_macros),\n+            non_exported_macro_attrs: self.arena.alloc_from_iter(self.non_exported_macro_attrs),\n             items: self.items,\n             trait_items: self.trait_items,\n             impl_items: self.impl_items,\n@@ -750,7 +756,7 @@ impl<'a> LoweringContext<'a> {\n         f: F,\n     ) -> (Vec<hir::GenericParam>, T)\n     where\n-        F: FnOnce(&mut LoweringContext<'_>) -> (Vec<hir::GenericParam>, T),\n+        F: FnOnce(&mut LoweringContext<'_, '_>) -> (Vec<hir::GenericParam>, T),\n     {\n         assert!(!self.is_collecting_in_band_lifetimes);\n         assert!(self.lifetimes_to_define.is_empty());\n@@ -867,7 +873,7 @@ impl<'a> LoweringContext<'a> {\n     // for them.\n     fn with_in_scope_lifetime_defs<T, F>(&mut self, params: &[GenericParam], f: F) -> T\n     where\n-        F: FnOnce(&mut LoweringContext<'_>) -> T,\n+        F: FnOnce(&mut LoweringContext<'_, '_>) -> T,\n     {\n         let old_len = self.in_scope_lifetimes.len();\n         let lt_def_names = params.iter().filter_map(|param| match param.kind {\n@@ -896,7 +902,7 @@ impl<'a> LoweringContext<'a> {\n         f: F,\n     ) -> (hir::Generics, T)\n     where\n-        F: FnOnce(&mut LoweringContext<'_>, &mut Vec<hir::GenericParam>) -> T,\n+        F: FnOnce(&mut LoweringContext<'_, '_>, &mut Vec<hir::GenericParam>) -> T,\n     {\n         let (in_band_defs, (mut lowered_generics, res)) = self.with_in_scope_lifetime_defs(\n             &generics.params,\n@@ -945,7 +951,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn with_dyn_type_scope<T, F>(&mut self, in_scope: bool, f: F) -> T\n     where\n-        F: FnOnce(&mut LoweringContext<'_>) -> T,\n+        F: FnOnce(&mut LoweringContext<'_, '_>) -> T,\n     {\n         let was_in_dyn_type = self.is_in_dyn_type;\n         self.is_in_dyn_type = in_scope;\n@@ -959,7 +965,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn with_new_scopes<T, F>(&mut self, f: F) -> T\n     where\n-        F: FnOnce(&mut LoweringContext<'_>) -> T,\n+        F: FnOnce(&mut LoweringContext<'_, '_>) -> T,\n     {\n         let was_in_loop_condition = self.is_in_loop_condition;\n         self.is_in_loop_condition = false;\n@@ -1446,7 +1452,7 @@ impl<'a> LoweringContext<'a> {\n         span: Span,\n         fn_def_id: Option<DefId>,\n         opaque_ty_node_id: NodeId,\n-        lower_bounds: impl FnOnce(&mut LoweringContext<'_>) -> hir::GenericBounds,\n+        lower_bounds: impl FnOnce(&mut LoweringContext<'_, '_>) -> hir::GenericBounds,\n     ) -> hir::TyKind {\n         debug!(\n             \"lower_opaque_impl_trait(fn_def_id={:?}, opaque_ty_node_id={:?}, span={:?})\",\n@@ -1563,8 +1569,8 @@ impl<'a> LoweringContext<'a> {\n         // This visitor walks over `impl Trait` bounds and creates defs for all lifetimes that\n         // appear in the bounds, excluding lifetimes that are created within the bounds.\n         // E.g., `'a`, `'b`, but not `'c` in `impl for<'c> SomeTrait<'a, 'b, 'c>`.\n-        struct ImplTraitLifetimeCollector<'r, 'a> {\n-            context: &'r mut LoweringContext<'a>,\n+        struct ImplTraitLifetimeCollector<'r, 'a, 'hir> {\n+            context: &'r mut LoweringContext<'a, 'hir>,\n             parent: DefIndex,\n             opaque_ty_id: NodeId,\n             collect_elided_lifetimes: bool,\n@@ -1574,7 +1580,7 @@ impl<'a> LoweringContext<'a> {\n             output_lifetime_params: Vec<hir::GenericParam>,\n         }\n \n-        impl<'r, 'a, 'v> hir::intravisit::Visitor<'v> for ImplTraitLifetimeCollector<'r, 'a> {\n+        impl<'r, 'a, 'v, 'hir> hir::intravisit::Visitor<'v> for ImplTraitLifetimeCollector<'r, 'a, 'hir> {\n             fn nested_visit_map<'this>(\n                 &'this mut self,\n             ) -> hir::intravisit::NestedVisitorMap<'this, 'v> {\n@@ -2757,8 +2763,9 @@ impl<'a> LoweringContext<'a> {\n         let node = match p.kind {\n             PatKind::Wild => hir::PatKind::Wild,\n             PatKind::Ident(ref binding_mode, ident, ref sub) => {\n-                let lower_sub = |this: &mut Self| sub.as_ref().map(|x| this.lower_pat(x));\n-                self.lower_pat_ident(p, binding_mode, ident, lower_sub)\n+                let lower_sub = |this: &mut Self| sub.as_ref().map(|s| this.lower_pat(&*s));\n+                let node = self.lower_pat_ident(p, binding_mode, ident, lower_sub);\n+                node\n             }\n             PatKind::Lit(ref e) => hir::PatKind::Lit(P(self.lower_expr(e))),\n             PatKind::TupleStruct(ref path, ref pats) => {"}, {"sha": "08b00ce69addbb08463a03998f32e04dc4cc5b31", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -13,7 +13,7 @@ use syntax::symbol::{sym, Symbol};\n \n use rustc_error_codes::*;\n \n-impl LoweringContext<'_> {\n+impl LoweringContext<'_, '_> {\n     fn lower_exprs(&mut self, exprs: &[AstP<Expr>]) -> HirVec<hir::Expr> {\n         exprs.iter().map(|x| self.lower_expr(x)).collect()\n     }\n@@ -473,7 +473,7 @@ impl LoweringContext<'_> {\n         ret_ty: Option<AstP<Ty>>,\n         span: Span,\n         async_gen_kind: hir::AsyncGeneratorKind,\n-        body: impl FnOnce(&mut LoweringContext<'_>) -> hir::Expr,\n+        body: impl FnOnce(&mut LoweringContext<'_, '_>) -> hir::Expr,\n     ) -> hir::ExprKind {\n         let output = match ret_ty {\n             Some(ty) => FunctionRetTy::Ty(ty),\n@@ -909,7 +909,7 @@ impl LoweringContext<'_> {\n \n     fn with_catch_scope<T, F>(&mut self, catch_id: NodeId, f: F) -> T\n     where\n-        F: FnOnce(&mut LoweringContext<'_>) -> T,\n+        F: FnOnce(&mut LoweringContext<'_, '_>) -> T,\n     {\n         let len = self.catch_scopes.len();\n         self.catch_scopes.push(catch_id);\n@@ -928,7 +928,7 @@ impl LoweringContext<'_> {\n \n     fn with_loop_scope<T, F>(&mut self, loop_id: NodeId, f: F) -> T\n     where\n-        F: FnOnce(&mut LoweringContext<'_>) -> T,\n+        F: FnOnce(&mut LoweringContext<'_, '_>) -> T,\n     {\n         // We're no longer in the base loop's condition; we're in another loop.\n         let was_in_loop_condition = self.is_in_loop_condition;\n@@ -953,7 +953,7 @@ impl LoweringContext<'_> {\n \n     fn with_loop_condition_scope<T, F>(&mut self, f: F) -> T\n     where\n-        F: FnOnce(&mut LoweringContext<'_>) -> T,\n+        F: FnOnce(&mut LoweringContext<'_, '_>) -> T,\n     {\n         let was_in_loop_condition = self.is_in_loop_condition;\n         self.is_in_loop_condition = true;"}, {"sha": "a4c9394c92d38ec234fc99ba45ccdd9f3b53a82b", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -24,11 +24,11 @@ use syntax_pos::Span;\n \n use rustc_error_codes::*;\n \n-pub(super) struct ItemLowerer<'tcx, 'interner> {\n-    pub(super) lctx: &'tcx mut LoweringContext<'interner>,\n+pub(super) struct ItemLowerer<'a, 'lowering, 'hir> {\n+    pub(super) lctx: &'a mut LoweringContext<'lowering, 'hir>,\n }\n \n-impl<'tcx, 'interner> ItemLowerer<'tcx, 'interner> {\n+impl<'a, 'lowering, 'hir> ItemLowerer<'a, 'lowering, 'hir> {\n     fn with_trait_impl_ref<F>(&mut self, trait_impl_ref: &Option<TraitRef>, f: F)\n     where\n         F: FnOnce(&mut Self),\n@@ -44,8 +44,8 @@ impl<'tcx, 'interner> ItemLowerer<'tcx, 'interner> {\n     }\n }\n \n-impl<'tcx, 'interner> Visitor<'tcx> for ItemLowerer<'tcx, 'interner> {\n-    fn visit_mod(&mut self, m: &'tcx Mod, _s: Span, _attrs: &[Attribute], n: NodeId) {\n+impl<'a, 'lowering, 'hir> Visitor<'a> for ItemLowerer<'a, 'lowering, 'hir> {\n+    fn visit_mod(&mut self, m: &'a Mod, _s: Span, _attrs: &[Attribute], n: NodeId) {\n         let hir_id = self.lctx.lower_node_id(n);\n \n         self.lctx.modules.insert(hir_id, hir::ModuleItems {\n@@ -60,7 +60,7 @@ impl<'tcx, 'interner> Visitor<'tcx> for ItemLowerer<'tcx, 'interner> {\n         self.lctx.current_module = old;\n     }\n \n-    fn visit_item(&mut self, item: &'tcx Item) {\n+    fn visit_item(&mut self, item: &'a Item) {\n         let mut item_hir_id = None;\n         self.lctx.with_hir_id_owner(item.id, |lctx| {\n             lctx.without_in_scope_lifetime_defs(|lctx| {\n@@ -85,7 +85,7 @@ impl<'tcx, 'interner> Visitor<'tcx> for ItemLowerer<'tcx, 'interner> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, item: &'tcx AssocItem) {\n+    fn visit_trait_item(&mut self, item: &'a AssocItem) {\n         self.lctx.with_hir_id_owner(item.id, |lctx| {\n             let hir_item = lctx.lower_trait_item(item);\n             let id = hir::TraitItemId { hir_id: hir_item.hir_id };\n@@ -96,7 +96,7 @@ impl<'tcx, 'interner> Visitor<'tcx> for ItemLowerer<'tcx, 'interner> {\n         visit::walk_trait_item(self, item);\n     }\n \n-    fn visit_impl_item(&mut self, item: &'tcx AssocItem) {\n+    fn visit_impl_item(&mut self, item: &'a AssocItem) {\n         self.lctx.with_hir_id_owner(item.id, |lctx| {\n             let hir_item = lctx.lower_impl_item(item);\n             let id = hir::ImplItemId { hir_id: hir_item.hir_id };\n@@ -107,7 +107,7 @@ impl<'tcx, 'interner> Visitor<'tcx> for ItemLowerer<'tcx, 'interner> {\n     }\n }\n \n-impl LoweringContext<'_> {\n+impl LoweringContext<'_, '_> {\n     // Same as the method above, but accepts `hir::GenericParam`s\n     // instead of `ast::GenericParam`s.\n     // This should only be used with generics that have already had their\n@@ -116,7 +116,7 @@ impl LoweringContext<'_> {\n     fn with_parent_item_lifetime_defs<T>(\n         &mut self,\n         parent_hir_id: hir::HirId,\n-        f: impl FnOnce(&mut LoweringContext<'_>) -> T,\n+        f: impl FnOnce(&mut LoweringContext<'_, '_>) -> T,\n     ) -> T {\n         let old_len = self.in_scope_lifetimes.len();\n \n@@ -144,7 +144,7 @@ impl LoweringContext<'_> {\n     // from their surrounding environment.\n     fn without_in_scope_lifetime_defs<T>(\n         &mut self,\n-        f: impl FnOnce(&mut LoweringContext<'_>) -> T,\n+        f: impl FnOnce(&mut LoweringContext<'_, '_>) -> T,\n     ) -> T {\n         let old_in_scope_lifetimes = std::mem::replace(&mut self.in_scope_lifetimes, vec![]);\n \n@@ -1055,7 +1055,7 @@ impl LoweringContext<'_> {\n \n     fn lower_body(\n         &mut self,\n-        f: impl FnOnce(&mut LoweringContext<'_>) -> (HirVec<hir::Param>, hir::Expr),\n+        f: impl FnOnce(&mut LoweringContext<'_, '_>) -> (HirVec<hir::Param>, hir::Expr),\n     ) -> hir::BodyId {\n         let prev_gen_kind = self.generator_kind.take();\n         let (parameters, result) = f(self);\n@@ -1076,7 +1076,7 @@ impl LoweringContext<'_> {\n     pub(super) fn lower_fn_body(\n         &mut self,\n         decl: &FnDecl,\n-        body: impl FnOnce(&mut LoweringContext<'_>) -> hir::Expr,\n+        body: impl FnOnce(&mut LoweringContext<'_, '_>) -> hir::Expr,\n     ) -> hir::BodyId {\n         self.lower_body(|this| (\n             decl.inputs.iter().map(|x| this.lower_param(x)).collect(),"}, {"sha": "f472bc6d38e2a892c0e01ac32234a582b90f3e14", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -22,7 +22,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n /// A visitor that walks over the HIR and collects `Node`s into a HIR map.\n pub(super) struct NodeCollector<'a, 'hir> {\n     /// The crate\n-    krate: &'hir Crate,\n+    krate: &'hir Crate<'hir>,\n \n     /// Source map\n     source_map: &'a SourceMap,\n@@ -99,7 +99,7 @@ where\n \n impl<'a, 'hir> NodeCollector<'a, 'hir> {\n     pub(super) fn root(sess: &'a Session,\n-                       krate: &'hir Crate,\n+                       krate: &'hir Crate<'hir>,\n                        dep_graph: &'a DepGraph,\n                        definitions: &'a definitions::Definitions,\n                        hir_to_node_id: &'a FxHashMap<HirId, NodeId>,"}, {"sha": "a44dbeb03661545fca0b55116fa8b2993b3f0023", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -153,28 +153,28 @@ impl<'hir> Entry<'hir> {\n }\n \n /// Stores a crate and any number of inlined items from other crates.\n-pub struct Forest {\n-    krate: Crate,\n+pub struct Forest<'hir> {\n+    krate: Crate<'hir>,\n     pub dep_graph: DepGraph,\n }\n \n-impl Forest {\n-    pub fn new(krate: Crate, dep_graph: &DepGraph) -> Forest {\n+impl Forest<'hir> {\n+    pub fn new(krate: Crate<'hir>, dep_graph: &DepGraph) -> Forest<'hir> {\n         Forest {\n             krate,\n             dep_graph: dep_graph.clone(),\n         }\n     }\n \n-    pub fn krate(&self) -> &Crate {\n+    pub fn krate(&self) -> &Crate<'hir> {\n         self.dep_graph.read(DepNode::new_no_params(DepKind::Krate));\n         &self.krate\n     }\n \n     /// This is used internally in the dependency tracking system.\n     /// Use the `krate` method to ensure your dependency on the\n     /// crate is tracked.\n-    pub fn untracked_krate(&self) -> &Crate {\n+    pub fn untracked_krate(&self) -> &Crate<'hir> {\n         &self.krate\n     }\n }\n@@ -189,7 +189,7 @@ pub(super) type HirEntryMap<'hir> = IndexVec<DefIndex, IndexVec<ItemLocalId, Opt\n #[derive(Clone)]\n pub struct Map<'hir> {\n     /// The backing storage for all the AST nodes.\n-    pub forest: &'hir Forest,\n+    pub forest: &'hir Forest<'hir>,\n \n     /// Same as the dep_graph in forest, just available with one fewer\n     /// deref. This is a gratuitous micro-optimization.\n@@ -439,7 +439,7 @@ impl<'hir> Map<'hir> {\n         self.lookup(id).cloned()\n     }\n \n-    pub fn krate(&self) -> &'hir Crate {\n+    pub fn krate(&self) -> &'hir Crate<'hir> {\n         self.forest.krate()\n     }\n \n@@ -1257,7 +1257,7 @@ impl Named for ImplItem { fn name(&self) -> Name { self.ident.name } }\n \n pub fn map_crate<'hir>(sess: &crate::session::Session,\n                        cstore: &CrateStoreDyn,\n-                       forest: &'hir Forest,\n+                       forest: &'hir Forest<'hir>,\n                        definitions: Definitions)\n                        -> Map<'hir> {\n     let _prof_timer = sess.prof.generic_activity(\"build_hir_map\");"}, {"sha": "aa2bde07e6f0cdf5c9ba0d7e68480765962d4f8b", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -742,13 +742,13 @@ pub struct ModuleItems {\n ///\n /// [rustc guide]: https://rust-lang.github.io/rustc-guide/hir.html\n #[derive(RustcEncodable, RustcDecodable, Debug)]\n-pub struct Crate {\n+pub struct Crate<'hir> {\n     pub module: Mod,\n-    pub attrs: HirVec<Attribute>,\n+    pub attrs: &'hir [Attribute],\n     pub span: Span,\n-    pub exported_macros: HirVec<MacroDef>,\n+    pub exported_macros: &'hir [MacroDef],\n     // Attributes from non-exported macros, kept only for collecting the library feature list.\n-    pub non_exported_macro_attrs: HirVec<Attribute>,\n+    pub non_exported_macro_attrs: &'hir [Attribute],\n \n     // N.B., we use a `BTreeMap` here so that `visit_all_items` iterates\n     // over the ids in increasing order. In principle it should not\n@@ -774,7 +774,7 @@ pub struct Crate {\n     pub modules: BTreeMap<HirId, ModuleItems>,\n }\n \n-impl Crate {\n+impl Crate<'_> {\n     pub fn item(&self, id: HirId) -> &Item {\n         &self.items[&id]\n     }"}, {"sha": "fd121f6a9b7f6c5f12be7d9582e90118fb434e63", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -52,7 +52,7 @@ pub struct NoAnn;\n impl PpAnn for NoAnn {}\n pub const NO_ANN: &dyn PpAnn = &NoAnn;\n \n-impl PpAnn for hir::Crate {\n+impl PpAnn for hir::Crate<'a> {\n     fn try_fetch_item(&self, item: hir::HirId) -> Option<&hir::Item> {\n         Some(self.item(item))\n     }\n@@ -107,7 +107,7 @@ pub const INDENT_UNIT: usize = 4;\n /// it can scan the input text for comments to copy forward.\n pub fn print_crate<'a>(cm: &'a SourceMap,\n                        sess: &ParseSess,\n-                       krate: &hir::Crate,\n+                       krate: &hir::Crate<'a>,\n                        filename: FileName,\n                        input: String,\n                        ann: &'a dyn PpAnn) -> String {"}, {"sha": "77a9bcd67a5ce562a2c4a277ec8dea8af0772e7c", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -56,7 +56,7 @@ pub enum NodeIdHashingMode {\n /// We could also just store a plain reference to the `hir::Crate` but we want\n /// to avoid that the crate is used to get untracked access to all of the HIR.\n #[derive(Clone, Copy)]\n-struct BodyResolver<'tcx>(&'tcx hir::Crate);\n+struct BodyResolver<'tcx>(&'tcx hir::Crate<'tcx>);\n \n impl<'tcx> BodyResolver<'tcx> {\n     /// Returns a reference to the `hir::Body` with the given `BodyId`.\n@@ -72,7 +72,7 @@ impl<'a> StableHashingContext<'a> {\n     /// leaking data out of the tracking system.\n     #[inline]\n     pub fn new(sess: &'a Session,\n-               krate: &'a hir::Crate,\n+               krate: &'a hir::Crate<'a>,\n                definitions: &'a Definitions,\n                cstore: &'a dyn CrateStore)\n                -> Self {"}, {"sha": "20bc1793dc14a45faa414a8110a84232c40c6364", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -90,8 +90,8 @@ macro_rules! late_lint_methods {\n             fn check_body(a: &$hir hir::Body);\n             fn check_body_post(a: &$hir hir::Body);\n             fn check_name(a: Span, b: ast::Name);\n-            fn check_crate(a: &$hir hir::Crate);\n-            fn check_crate_post(a: &$hir hir::Crate);\n+            fn check_crate(a: &$hir hir::Crate<$hir>);\n+            fn check_crate_post(a: &$hir hir::Crate<$hir>);\n             fn check_mod(a: &$hir hir::Mod, b: Span, c: hir::HirId);\n             fn check_mod_post(a: &$hir hir::Mod, b: Span, c: hir::HirId);\n             fn check_foreign_item(a: &$hir hir::ForeignItem);\n@@ -562,7 +562,7 @@ fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> &LintLevelMap {\n \n     let push = builder.levels.push(&krate.attrs, &store);\n     builder.levels.register_id(hir::CRATE_HIR_ID);\n-    for macro_def in &krate.exported_macros {\n+    for macro_def in krate.exported_macros {\n        builder.levels.register_id(macro_def.hir_id);\n     }\n     intravisit::walk_crate(&mut builder, krate);"}, {"sha": "c38ab525ce4558382a601c43182d6b985ce17b0c", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -157,7 +157,7 @@ impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n pub fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n     let mut collector = LibFeatureCollector::new(tcx);\n     let krate = tcx.hir().krate();\n-    for attr in &krate.non_exported_macro_attrs {\n+    for attr in krate.non_exported_macro_attrs {\n         collector.visit_attribute(attr);\n     }\n     intravisit::walk_crate(&mut collector, krate);"}, {"sha": "97e4cf7212447ed418fd2a6f6268583ed08419c5", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -73,7 +73,7 @@ where\n }\n fn call_with_pp_support_hir<A, F>(ppmode: &PpSourceMode, tcx: TyCtxt<'_>, f: F) -> A\n where\n-    F: FnOnce(&dyn HirPrinterSupport<'_>, &hir::Crate) -> A,\n+    F: FnOnce(&dyn HirPrinterSupport<'_>, &hir::Crate<'_>) -> A,\n {\n     match *ppmode {\n         PpmNormal => {"}, {"sha": "8b692d84b11f3168e942b9b440f5e7c40facb469", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -47,7 +47,7 @@ pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n             available_cgus\n         };\n \n-        for attr in &tcx.hir().krate().attrs {\n+        for attr in tcx.hir().krate().attrs {\n             ams.check_attr(attr);\n         }\n     })"}, {"sha": "e1c4c86d9d6aa4ff41bc3e9c77c1847f058e58e7", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -446,17 +446,18 @@ fn configure_and_expand_inner<'a>(\n     Ok((krate, resolver))\n }\n \n-pub fn lower_to_hir(\n-    sess: &Session,\n+pub fn lower_to_hir<'res, 'tcx>(\n+    sess: &'tcx Session,\n     lint_store: &lint::LintStore,\n-    resolver: &mut Resolver<'_>,\n-    dep_graph: &DepGraph,\n-    krate: &ast::Crate,\n-) -> Result<hir::map::Forest> {\n+    resolver: &'res mut Resolver<'_>,\n+    dep_graph: &'res DepGraph,\n+    krate: &'res ast::Crate,\n+    arena: &'tcx Arena<'tcx>,\n+) -> Result<hir::map::Forest<'tcx>> {\n     // Lower AST to HIR.\n     let hir_forest = time(sess, \"lowering AST -> HIR\", || {\n         let nt_to_tokenstream = rustc_parse::nt_to_tokenstream;\n-        let hir_crate = lower_crate(sess, &dep_graph, &krate, resolver, nt_to_tokenstream);\n+        let hir_crate = lower_crate(sess, &dep_graph, &krate, resolver, nt_to_tokenstream, arena);\n \n         if sess.opts.debugging_opts.hir_stats {\n             hir_stats::print_hir_stats(&hir_crate);\n@@ -738,7 +739,7 @@ impl<'tcx> QueryContext<'tcx> {\n pub fn create_global_ctxt<'tcx>(\n     compiler: &'tcx Compiler,\n     lint_store: Lrc<lint::LintStore>,\n-    hir_forest: &'tcx hir::map::Forest,\n+    hir_forest: &'tcx hir::map::Forest<'tcx>,\n     mut resolver_outputs: ResolverOutputs,\n     outputs: OutputFilenames,\n     crate_name: &str,"}, {"sha": "d6de9d5f4e43cc3854110b4abd3908a718c16168", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -82,7 +82,7 @@ pub struct Queries<'tcx> {\n     register_plugins: Query<(ast::Crate, Lrc<LintStore>)>,\n     expansion: Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n-    lower_to_hir: Query<(&'tcx hir::map::Forest, Steal<ResolverOutputs>)>,\n+    lower_to_hir: Query<(&'tcx hir::map::Forest<'tcx>, Steal<ResolverOutputs>)>,\n     prepare_outputs: Query<OutputFilenames>,\n     global_ctxt: Query<QueryContext<'tcx>>,\n     ongoing_codegen: Query<Box<dyn Any>>,\n@@ -216,7 +216,7 @@ impl<'tcx> Queries<'tcx> {\n \n     pub fn lower_to_hir(\n         &'tcx self,\n-    ) -> Result<&Query<(&'tcx hir::map::Forest, Steal<ResolverOutputs>)>> {\n+    ) -> Result<&Query<(&'tcx hir::map::Forest<'tcx>, Steal<ResolverOutputs>)>> {\n         self.lower_to_hir.compute(|| {\n             let expansion_result = self.expansion()?;\n             let peeked = expansion_result.peek();\n@@ -229,7 +229,8 @@ impl<'tcx> Queries<'tcx> {\n                     lint_store,\n                     resolver,\n                     &*self.dep_graph()?.peek(),\n-                    &krate\n+                    &krate,\n+                    &self.arena,\n                 )\n             })?;\n             let hir = self.arena.alloc(hir);"}, {"sha": "2e4f8e7aabcda07327dc5381efa0a6ed8a718f67", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -378,10 +378,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         self.doc_hidden_stack.pop().expect(\"empty doc_hidden_stack\");\n     }\n \n-    fn check_crate(&mut self, cx: &LateContext<'_, '_>, krate: &hir::Crate) {\n+    fn check_crate(&mut self, cx: &LateContext<'_, '_>, krate: &hir::Crate<'_>) {\n         self.check_missing_docs_attrs(cx, None, &krate.attrs, krate.span, \"crate\");\n \n-        for macro_def in &krate.exported_macros {\n+        for macro_def in krate.exported_macros {\n             let has_doc = macro_def.attrs.iter().any(|a| has_doc(a));\n             if !has_doc {\n                 cx.span_lint(MISSING_DOCS,"}, {"sha": "5649789e2c5d29bfc03bb86bab70e1d5d7cf883d", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -342,7 +342,7 @@ impl<'tcx> EncodeContext<'tcx> {\n         let vis = Spanned { span: syntax_pos::DUMMY_SP, node: hir::VisibilityKind::Public };\n         self.encode_info_for_mod(hir::CRATE_HIR_ID, &krate.module, &krate.attrs, &vis);\n         krate.visit_all_item_likes(&mut self.as_deep_visitor());\n-        for macro_def in &krate.exported_macros {\n+        for macro_def in krate.exported_macros {\n             self.visit_macro_def(macro_def);\n         }\n     }"}, {"sha": "fb5052fedb2fd50f928e9b46233207ddcb0c392d", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -355,7 +355,7 @@ fn has_allow_dead_code_or_lang_attr(\n //     * Implementation of a trait method\n struct LifeSeeder<'k, 'tcx> {\n     worklist: Vec<hir::HirId>,\n-    krate: &'k hir::Crate,\n+    krate: &'k hir::Crate<'k>,\n     tcx: TyCtxt<'tcx>,\n     // see `MarkSymbolVisitor::struct_constructors`\n     struct_constructors: FxHashMap<hir::HirId, hir::HirId>,\n@@ -429,7 +429,7 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n fn create_and_seed_worklist<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     access_levels: &privacy::AccessLevels,\n-    krate: &hir::Crate,\n+    krate: &hir::Crate<'_>,\n ) -> (Vec<hir::HirId>, FxHashMap<hir::HirId, hir::HirId>) {\n     let worklist = access_levels.map.iter().filter_map(|(&id, level)| {\n         if level >= &privacy::AccessLevel::Reachable {\n@@ -457,7 +457,7 @@ fn create_and_seed_worklist<'tcx>(\n fn find_live<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     access_levels: &privacy::AccessLevels,\n-    krate: &hir::Crate,\n+    krate: &hir::Crate<'_>,\n ) -> FxHashSet<hir::HirId> {\n     let (worklist, struct_constructors) = create_and_seed_worklist(tcx, access_levels, krate);\n     let mut symbol_visitor = MarkSymbolVisitor {"}, {"sha": "60c486b30d40ee06f2e14192482af9138024915b", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -23,12 +23,12 @@ struct NodeData {\n }\n \n struct StatCollector<'k> {\n-    krate: Option<&'k hir::Crate>,\n+    krate: Option<&'k hir::Crate<'k>>,\n     data: FxHashMap<&'static str, NodeData>,\n     seen: FxHashSet<Id>,\n }\n \n-pub fn print_hir_stats(krate: &hir::Crate) {\n+pub fn print_hir_stats(krate: &hir::Crate<'_>) {\n     let mut collector = StatCollector {\n         krate: Some(krate),\n         data: FxHashMap::default(),"}, {"sha": "1ab703db83c035cedacd4670c7985244ad5fd942", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -1076,7 +1076,7 @@ struct UsePlacementFinder<'tcx> {\n impl UsePlacementFinder<'tcx> {\n     fn check(\n         tcx: TyCtxt<'tcx>,\n-        krate: &'tcx hir::Crate,\n+        krate: &'tcx hir::Crate<'tcx>,\n         target_module: hir::HirId,\n     ) -> (Option<Span>, bool) {\n         let mut finder = UsePlacementFinder {"}, {"sha": "7ec7f460987b57603b30f4cb007179edb8d9960b", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc79f1f7d8aabbed2983a91ba1027373b376a65/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=4dc79f1f7d8aabbed2983a91ba1027373b376a65", "patch": "@@ -72,7 +72,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     pub fn visit(mut self, krate: &'tcx hir::Crate) -> Module<'tcx> {\n         let mut module = self.visit_mod_contents(krate.span,\n-                                              &krate.attrs,\n+                                              krate.attrs,\n                                               &Spanned { span: syntax_pos::DUMMY_SP,\n                                                         node: hir::VisibilityKind::Public },\n                                               hir::CRATE_HIR_ID,\n@@ -213,7 +213,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_mod_contents(&mut self, span: Span, attrs: &'tcx hir::HirVec<ast::Attribute>,\n+    fn visit_mod_contents(&mut self, span: Span, attrs: &'tcx [ast::Attribute],\n                               vis: &'tcx hir::Visibility, id: hir::HirId,\n                               m: &'tcx hir::Mod,\n                               name: Option<ast::Name>) -> Module<'tcx> {"}]}