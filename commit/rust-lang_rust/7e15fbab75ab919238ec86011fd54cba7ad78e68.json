{"sha": "7e15fbab75ab919238ec86011fd54cba7ad78e68", "node_id": "C_kwDOAAsO6NoAKDdlMTVmYmFiNzVhYjkxOTIzOGVjODYwMTFmZDU0Y2JhN2FkNzhlNjg", "commit": {"author": {"name": "nidnogg", "email": "henriquevt98@gmail.com", "date": "2022-08-16T21:34:13Z"}, "committer": {"name": "nidnogg", "email": "henriquevt98@gmail.com", "date": "2022-08-16T21:34:13Z"}, "message": "Added first migration for repeated expressions without syntax vars", "tree": {"sha": "728b1b442ca7f702ddb23b3b1d1cd61b01792056", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/728b1b442ca7f702ddb23b3b1d1cd61b01792056"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e15fbab75ab919238ec86011fd54cba7ad78e68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e15fbab75ab919238ec86011fd54cba7ad78e68", "html_url": "https://github.com/rust-lang/rust/commit/7e15fbab75ab919238ec86011fd54cba7ad78e68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e15fbab75ab919238ec86011fd54cba7ad78e68/comments", "author": {"login": "nidnogg", "id": 17261185, "node_id": "MDQ6VXNlcjE3MjYxMTg1", "avatar_url": "https://avatars.githubusercontent.com/u/17261185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nidnogg", "html_url": "https://github.com/nidnogg", "followers_url": "https://api.github.com/users/nidnogg/followers", "following_url": "https://api.github.com/users/nidnogg/following{/other_user}", "gists_url": "https://api.github.com/users/nidnogg/gists{/gist_id}", "starred_url": "https://api.github.com/users/nidnogg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nidnogg/subscriptions", "organizations_url": "https://api.github.com/users/nidnogg/orgs", "repos_url": "https://api.github.com/users/nidnogg/repos", "events_url": "https://api.github.com/users/nidnogg/events{/privacy}", "received_events_url": "https://api.github.com/users/nidnogg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nidnogg", "id": 17261185, "node_id": "MDQ6VXNlcjE3MjYxMTg1", "avatar_url": "https://avatars.githubusercontent.com/u/17261185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nidnogg", "html_url": "https://github.com/nidnogg", "followers_url": "https://api.github.com/users/nidnogg/followers", "following_url": "https://api.github.com/users/nidnogg/following{/other_user}", "gists_url": "https://api.github.com/users/nidnogg/gists{/gist_id}", "starred_url": "https://api.github.com/users/nidnogg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nidnogg/subscriptions", "organizations_url": "https://api.github.com/users/nidnogg/orgs", "repos_url": "https://api.github.com/users/nidnogg/repos", "events_url": "https://api.github.com/users/nidnogg/events{/privacy}", "received_events_url": "https://api.github.com/users/nidnogg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a39bdb1d6b9eaf23f2636baee0949d67890abcd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a39bdb1d6b9eaf23f2636baee0949d67890abcd8", "html_url": "https://github.com/rust-lang/rust/commit/a39bdb1d6b9eaf23f2636baee0949d67890abcd8"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "42519fd22ce630e1c0c1bfbe43af91e1b40db09c", "filename": "compiler/rustc_error_messages/locales/en-US/expand.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e15fbab75ab919238ec86011fd54cba7ad78e68/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7e15fbab75ab919238ec86011fd54cba7ad78e68/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fexpand.ftl?ref=7e15fbab75ab919238ec86011fd54cba7ad78e68", "patch": "@@ -3,3 +3,6 @@ expand_explain_doc_comment_outer =\n \n expand_explain_doc_comment_inner =\n     inner doc comments expand to `#![doc = \"...\"]`, which is what this macro attempted to match\n+\n+expand_expr_repeat_no_syntax_vars = \n+    attempted to repeat an expression containing no syntax variables matched as repeating at this depth"}, {"sha": "69090cb457e7568e04d4e8db96e455e64fccb308", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e15fbab75ab919238ec86011fd54cba7ad78e68/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e15fbab75ab919238ec86011fd54cba7ad78e68/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=7e15fbab75ab919238ec86011fd54cba7ad78e68", "patch": "@@ -9,6 +9,7 @@ use rustc_errors::{pluralize, PResult};\n use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed};\n use rustc_span::hygiene::{LocalExpnId, Transparency};\n use rustc_span::symbol::{sym, Ident, MacroRulesNormalizedIdent};\n+use rustc_macros::SessionDiagnostic;\n use rustc_span::Span;\n \n use smallvec::{smallvec, SmallVec};\n@@ -53,6 +54,13 @@ impl<'a> Iterator for Frame<'a> {\n     }\n }\n \n+#[derive(SessionDiagnostic)]\n+#[error(expand::expr_repeat_no_syntax_vars)]\n+struct NoSyntaxVarsExprRepeat {\n+    #[primary_span]\n+    span: Span,\n+}\n+\n /// This can do Macro-By-Example transcription.\n /// - `interp` is a map of meta-variables to the tokens (non-terminals) they matched in the\n ///   invocation. We are assuming we already know there is a match.\n@@ -165,11 +173,7 @@ pub(super) fn transcribe<'a>(\n             seq @ mbe::TokenTree::Sequence(_, delimited) => {\n                 match lockstep_iter_size(&seq, interp, &repeats) {\n                     LockstepIterSize::Unconstrained => {\n-                        return Err(cx.struct_span_err(\n-                            seq.span(), /* blame macro writer */\n-                            \"attempted to repeat an expression containing no syntax variables \\\n-                             matched as repeating at this depth\",\n-                        ));\n+                        return Err(cx.create_err(NoSyntaxVarsExprRepeat { span: seq.span() }));\n                     }\n \n                     LockstepIterSize::Contradiction(msg) => {"}]}