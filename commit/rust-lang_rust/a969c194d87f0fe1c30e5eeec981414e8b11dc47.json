{"sha": "a969c194d87f0fe1c30e5eeec981414e8b11dc47", "node_id": "C_kwDOAAsO6NoAKGE5NjljMTk0ZDg3ZjBmZTFjMzBlNWVlZWM5ODE0MTRlOGIxMWRjNDc", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-01-19T19:52:52Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-01-27T03:28:31Z"}, "message": "fix up subst_identity vs skip_binder; add some FIXMEs as identified in review", "tree": {"sha": "81f5854b62a6a2822174dda3b139c8a2f079c05a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81f5854b62a6a2822174dda3b139c8a2f079c05a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a969c194d87f0fe1c30e5eeec981414e8b11dc47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a969c194d87f0fe1c30e5eeec981414e8b11dc47", "html_url": "https://github.com/rust-lang/rust/commit/a969c194d87f0fe1c30e5eeec981414e8b11dc47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a969c194d87f0fe1c30e5eeec981414e8b11dc47/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab40ba2fb1c034554f12a0f8ada3f5f3e42ad592", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab40ba2fb1c034554f12a0f8ada3f5f3e42ad592", "html_url": "https://github.com/rust-lang/rust/commit/ab40ba2fb1c034554f12a0f8ada3f5f3e42ad592"}], "stats": {"total": 82, "additions": 37, "deletions": 45}, "files": [{"sha": "18d2caa149bfbabc1b889c1f7fb0aad390b3b4ba", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a969c194d87f0fe1c30e5eeec981414e8b11dc47/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a969c194d87f0fe1c30e5eeec981414e8b11dc47/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=a969c194d87f0fe1c30e5eeec981414e8b11dc47", "patch": "@@ -1136,7 +1136,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             && let self_ty = infcx.replace_bound_vars_with_fresh_vars(\n                                 fn_call_span,\n                                 LateBoundRegionConversionTime::FnCall,\n-                                tcx.fn_sig(method_did).subst_identity().input(0),\n+                                // FIXME: should use `subst` with the method substs.\n+                                // Probably need to add `method_substs` to `CallKind`\n+                                tcx.fn_sig(method_did).skip_binder().input(0),\n                             )\n                             && infcx.can_eq(self.param_env, ty, self_ty).is_ok()\n                         {"}, {"sha": "780d5271619e7ef90a4af4a0172eb7aaf639ad80", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a969c194d87f0fe1c30e5eeec981414e8b11dc47/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a969c194d87f0fe1c30e5eeec981414e8b11dc47/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=a969c194d87f0fe1c30e5eeec981414e8b11dc47", "patch": "@@ -422,8 +422,8 @@ fn extract_bad_args_for_implies_lint<'tcx>(\n \n     // Map late-bound regions from trait to impl, so the names are right.\n     let mapping = std::iter::zip(\n-        tcx.fn_sig(trait_m.def_id).subst_identity().bound_vars(),\n-        tcx.fn_sig(impl_m.def_id).subst_identity().bound_vars(),\n+        tcx.fn_sig(trait_m.def_id).skip_binder().bound_vars(),\n+        tcx.fn_sig(impl_m.def_id).skip_binder().bound_vars(),\n     )\n     .filter_map(|(impl_bv, trait_bv)| {\n         if let ty::BoundVariableKind::Region(impl_bv) = impl_bv\n@@ -540,7 +540,7 @@ fn compare_asyncness<'tcx>(\n     trait_item_span: Option<Span>,\n ) -> Result<(), ErrorGuaranteed> {\n     if tcx.asyncness(trait_m.def_id) == hir::IsAsync::Async {\n-        match tcx.fn_sig(impl_m.def_id).subst_identity().skip_binder().output().kind() {\n+        match tcx.fn_sig(impl_m.def_id).skip_binder().skip_binder().output().kind() {\n             ty::Alias(ty::Opaque, ..) => {\n                 // allow both `async fn foo()` and `fn foo() -> impl Future`\n             }"}, {"sha": "d0d819d9687bbd673211447b5eeeb84fef955104", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a969c194d87f0fe1c30e5eeec981414e8b11dc47/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a969c194d87f0fe1c30e5eeec981414e8b11dc47/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=a969c194d87f0fe1c30e5eeec981414e8b11dc47", "patch": "@@ -867,8 +867,8 @@ fn infer_placeholder_type<'a>(\n             }\n \n             match ty.kind() {\n-                ty::FnDef(def_id, _) => {\n-                    self.tcx.mk_fn_ptr(self.tcx.fn_sig(*def_id).subst_identity())\n+                ty::FnDef(def_id, substs) => {\n+                    self.tcx.mk_fn_ptr(self.tcx.fn_sig(*def_id).subst(self.tcx, substs))\n                 }\n                 // FIXME: non-capturing closures should also suggest a function pointer\n                 ty::Closure(..) | ty::Generator(..) => {"}, {"sha": "19b8fb96cde37133145ed156b3477c887c8225ee", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a969c194d87f0fe1c30e5eeec981414e8b11dc47/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a969c194d87f0fe1c30e5eeec981414e8b11dc47/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=a969c194d87f0fe1c30e5eeec981414e8b11dc47", "patch": "@@ -603,6 +603,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let substs = ty::InternalSubsts::for_item(self.tcx, m.def_id, |param, _| {\n                     self.var_for_def(deref.span, param)\n                 });\n+                let mutability =\n+                    match self.tcx.fn_sig(m.def_id).skip_binder().input(0).skip_binder().kind() {\n+                        ty::Ref(_, _, hir::Mutability::Mut) => \"&mut \",\n+                        ty::Ref(_, _, _) => \"&\",\n+                        _ => \"\",\n+                    };\n                 vec![\n                     (\n                         deref.span.until(base.span),\n@@ -611,18 +617,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             with_no_trimmed_paths!(\n                                 self.tcx.def_path_str_with_substs(m.def_id, substs,)\n                             ),\n-                            match self\n-                                .tcx\n-                                .fn_sig(m.def_id)\n-                                .subst_identity()\n-                                .input(0)\n-                                .skip_binder()\n-                                .kind()\n-                            {\n-                                ty::Ref(_, _, hir::Mutability::Mut) => \"&mut \",\n-                                ty::Ref(_, _, _) => \"&\",\n-                                _ => \"\",\n-                            },\n+                            mutability,\n                         ),\n                     ),\n                     match &args[..] {"}, {"sha": "65ca47bfe538bbd5c42cb8854ee9dfa1adcc601b", "filename": "compiler/rustc_hir_typeck/src/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a969c194d87f0fe1c30e5eeec981414e8b11dc47/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a969c194d87f0fe1c30e5eeec981414e8b11dc47/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fconfirm.rs?ref=a969c194d87f0fe1c30e5eeec981414e8b11dc47", "patch": "@@ -503,9 +503,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n \n         debug!(\"method_predicates after subst = {:?}\", method_predicates);\n \n-        let sig = self.tcx.fn_sig(def_id);\n-\n-        let sig = sig.subst(self.tcx, all_substs);\n+        let sig = self.tcx.fn_sig(def_id).subst(self.tcx, all_substs);\n         debug!(\"type scheme substituted, sig={:?}\", sig);\n \n         let sig = self.replace_bound_vars_with_fresh_vars(sig);"}, {"sha": "60d4dc326eea16f837983767fc138d6ffda50a5d", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a969c194d87f0fe1c30e5eeec981414e8b11dc47/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a969c194d87f0fe1c30e5eeec981414e8b11dc47/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=a969c194d87f0fe1c30e5eeec981414e8b11dc47", "patch": "@@ -399,8 +399,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // N.B., instantiate late-bound regions before normalizing the\n         // function signature so that normalization does not need to deal\n         // with bound regions.\n-        let fn_sig = tcx.fn_sig(def_id);\n-        let fn_sig = fn_sig.subst(self.tcx, substs);\n+        let fn_sig = tcx.fn_sig(def_id).subst(self.tcx, substs);\n         let fn_sig =\n             self.replace_bound_vars_with_fresh_vars(obligation.cause.span, infer::FnCall, fn_sig);\n "}, {"sha": "9fc4c16fb071d2dbac212436a8187cca2d836a2a", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a969c194d87f0fe1c30e5eeec981414e8b11dc47/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a969c194d87f0fe1c30e5eeec981414e8b11dc47/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=a969c194d87f0fe1c30e5eeec981414e8b11dc47", "patch": "@@ -921,26 +921,22 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         expected: Ty<'tcx>,\n     ) -> bool {\n         match method.kind {\n-            ty::AssocKind::Fn => {\n-                let fty = self.tcx.fn_sig(method.def_id);\n-                self.probe(|_| {\n-                    let substs = self.fresh_substs_for_item(self.span, method.def_id);\n-                    let fty = fty.subst(self.tcx, substs);\n-                    let fty =\n-                        self.replace_bound_vars_with_fresh_vars(self.span, infer::FnCall, fty);\n-\n-                    if let Some(self_ty) = self_ty {\n-                        if self\n-                            .at(&ObligationCause::dummy(), self.param_env)\n-                            .sup(fty.inputs()[0], self_ty)\n-                            .is_err()\n-                        {\n-                            return false;\n-                        }\n+            ty::AssocKind::Fn => self.probe(|_| {\n+                let substs = self.fresh_substs_for_item(self.span, method.def_id);\n+                let fty = self.tcx.fn_sig(method.def_id).subst(self.tcx, substs);\n+                let fty = self.replace_bound_vars_with_fresh_vars(self.span, infer::FnCall, fty);\n+\n+                if let Some(self_ty) = self_ty {\n+                    if self\n+                        .at(&ObligationCause::dummy(), self.param_env)\n+                        .sup(fty.inputs()[0], self_ty)\n+                        .is_err()\n+                    {\n+                        return false;\n                     }\n-                    self.can_sub(self.param_env, fty.output(), expected).is_ok()\n-                })\n-            }\n+                }\n+                self.can_sub(self.param_env, fty.output(), expected).is_ok()\n+            }),\n             _ => false,\n         }\n     }"}, {"sha": "aa19b1fdb5efae9dcb89029dba67be035855dc34", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a969c194d87f0fe1c30e5eeec981414e8b11dc47/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a969c194d87f0fe1c30e5eeec981414e8b11dc47/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=a969c194d87f0fe1c30e5eeec981414e8b11dc47", "patch": "@@ -161,7 +161,8 @@ impl<'tcx> FunctionItemRefChecker<'_, 'tcx> {\n             .as_ref()\n             .assert_crate_local()\n             .lint_root;\n-        let fn_sig = self.tcx.fn_sig(fn_id).skip_binder();\n+        // FIXME: use existing printing routines to print the function signature\n+        let fn_sig = self.tcx.fn_sig(fn_id).subst(self.tcx, fn_substs);\n         let unsafety = fn_sig.unsafety().prefix_str();\n         let abi = match fn_sig.abi() {\n             Abi::Rust => String::from(\"\"),"}, {"sha": "e969bb6db9ec44ab4e0ad8a0fcd955c140e8f05d", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a969c194d87f0fe1c30e5eeec981414e8b11dc47/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a969c194d87f0fe1c30e5eeec981414e8b11dc47/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=a969c194d87f0fe1c30e5eeec981414e8b11dc47", "patch": "@@ -198,6 +198,7 @@ where\n                 // Something like `fn() -> Priv {my_func}` is considered a private type even if\n                 // `my_func` is public, so we need to visit signatures.\n                 if let ty::FnDef(..) = ty.kind() {\n+                    // FIXME: this should probably use `substs` from `FnDef`\n                     tcx.fn_sig(def_id).subst_identity().visit_with(self)?;\n                 }\n                 // Inherent static methods don't have self type in substs."}, {"sha": "961c04974e508bc6ca69dc8b320a423ab5afb000", "filename": "compiler/rustc_ty_utils/src/implied_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a969c194d87f0fe1c30e5eeec981414e8b11dc47/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a969c194d87f0fe1c30e5eeec981414e8b11dc47/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fimplied_bounds.rs?ref=a969c194d87f0fe1c30e5eeec981414e8b11dc47", "patch": "@@ -9,12 +9,12 @@ pub fn provide(providers: &mut ty::query::Providers) {\n fn assumed_wf_types(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::List<Ty<'_>> {\n     match tcx.def_kind(def_id) {\n         DefKind::Fn => {\n-            let sig = tcx.fn_sig(def_id).skip_binder();\n+            let sig = tcx.fn_sig(def_id).subst_identity();\n             let liberated_sig = tcx.liberate_late_bound_regions(def_id, sig);\n             liberated_sig.inputs_and_output\n         }\n         DefKind::AssocFn => {\n-            let sig = tcx.fn_sig(def_id).skip_binder();\n+            let sig = tcx.fn_sig(def_id).subst_identity();\n             let liberated_sig = tcx.liberate_late_bound_regions(def_id, sig);\n             let mut assumed_wf_types: Vec<_> =\n                 tcx.assumed_wf_types(tcx.parent(def_id)).as_slice().into();"}]}