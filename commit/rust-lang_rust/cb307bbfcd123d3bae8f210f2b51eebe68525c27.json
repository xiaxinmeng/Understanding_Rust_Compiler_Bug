{"sha": "cb307bbfcd123d3bae8f210f2b51eebe68525c27", "node_id": "C_kwDOAAsO6NoAKGNiMzA3YmJmY2QxMjNkM2JhZThmMjEwZjJiNTFlZWJlNjg1MjVjMjc", "commit": {"author": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-03-28T08:32:31Z"}, "committer": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-03-28T08:48:12Z"}, "message": "Address review comments", "tree": {"sha": "ae335b24b014e0e16fdba544522bc6abd798afe9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae335b24b014e0e16fdba544522bc6abd798afe9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb307bbfcd123d3bae8f210f2b51eebe68525c27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb307bbfcd123d3bae8f210f2b51eebe68525c27", "html_url": "https://github.com/rust-lang/rust/commit/cb307bbfcd123d3bae8f210f2b51eebe68525c27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb307bbfcd123d3bae8f210f2b51eebe68525c27/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86872059ed143e93f04130578d8b2d1561d5f3a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/86872059ed143e93f04130578d8b2d1561d5f3a7", "html_url": "https://github.com/rust-lang/rust/commit/86872059ed143e93f04130578d8b2d1561d5f3a7"}], "stats": {"total": 143, "additions": 102, "deletions": 41}, "files": [{"sha": "21c65f9d6f04d0194cf80a9ec32aad71f96d0d5d", "filename": "clippy_lints/src/crate_in_macro_def.rs", "status": "modified", "additions": 43, "deletions": 17, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/cb307bbfcd123d3bae8f210f2b51eebe68525c27/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb307bbfcd123d3bae8f210f2b51eebe68525c27/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs?ref=cb307bbfcd123d3bae8f210f2b51eebe68525c27", "patch": "@@ -1,24 +1,24 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use rustc_ast::ast::MacroDef;\n-use rustc_ast::node_id::NodeId;\n+use rustc_ast::ast::{AttrKind, Attribute, Item, ItemKind};\n use rustc_ast::token::{Token, TokenKind};\n use rustc_ast::tokenstream::{TokenStream, TokenTree};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::Span;\n+use rustc_span::{symbol::sym, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for use of `crate` as opposed to `$crate` in a macro definition.\n     ///\n     /// ### Why is this bad?\n-    /// `crate` refers to the macro call's crate, whereas `$crate` refers to the macro\n-    /// definition's crate. Rarely is the former intended. See:\n+    /// `crate` refers to the macro call's crate, whereas `$crate` refers to the macro definition's\n+    /// crate. Rarely is the former intended. See:\n     /// https://doc.rust-lang.org/reference/macros-by-example.html#hygiene\n     ///\n     /// ### Example\n     /// ```rust\n+    /// #[macro_export]\n     /// macro_rules! print_message {\n     ///     () => {\n     ///         println!(\"{}\", crate::MESSAGE);\n@@ -28,13 +28,21 @@ declare_clippy_lint! {\n     /// ```\n     /// Use instead:\n     /// ```rust\n+    /// #[macro_export]\n     /// macro_rules! print_message {\n     ///     () => {\n     ///         println!(\"{}\", $crate::MESSAGE);\n     ///     };\n     /// }\n     /// pub const MESSAGE: &str = \"Hello!\";\n     /// ```\n+    ///\n+    /// Note that if the use of `crate` is intentional, an `allow` attribute can be applied to the\n+    /// macro definition, e.g.:\n+    /// ```rust,ignore\n+    /// #[allow(clippy::crate_in_macro_def)]\n+    /// macro_rules! ok { ... crate::foo ... }\n+    /// ```\n     #[clippy::version = \"1.61.0\"]\n     pub CRATE_IN_MACRO_DEF,\n     correctness,\n@@ -43,18 +51,36 @@ declare_clippy_lint! {\n declare_lint_pass!(CrateInMacroDef => [CRATE_IN_MACRO_DEF]);\n \n impl EarlyLintPass for CrateInMacroDef {\n-    fn check_mac_def(&mut self, cx: &EarlyContext<'_>, macro_def: &MacroDef, _: NodeId) {\n-        let tts = macro_def.body.inner_tokens();\n-        if let Some(span) = contains_unhygienic_crate_reference(&tts) {\n-            span_lint_and_sugg(\n-                cx,\n-                CRATE_IN_MACRO_DEF,\n-                span,\n-                \"reference to the macro call's crate, which is rarely intended\",\n-                \"if reference to the macro definition's crate is intended, use\",\n-                String::from(\"$crate\"),\n-                Applicability::MachineApplicable,\n-            );\n+    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n+        if_chain! {\n+            if item.attrs.iter().any(is_macro_export);\n+            if let ItemKind::MacroDef(macro_def) = &item.kind;\n+            let tts = macro_def.body.inner_tokens();\n+            if let Some(span) = contains_unhygienic_crate_reference(&tts);\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    CRATE_IN_MACRO_DEF,\n+                    span,\n+                    \"reference to the macro call's crate, which is rarely intended\",\n+                    \"if reference to the macro definition's crate is intended, use\",\n+                    String::from(\"$crate\"),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+fn is_macro_export(attr: &Attribute) -> bool {\n+    if_chain! {\n+        if let AttrKind::Normal(attr_item, _) = &attr.kind;\n+        if let [segment] = attr_item.path.segments.as_slice();\n+        if segment.ident.name == sym::macro_export;\n+        then {\n+            true\n+        } else {\n+            false\n         }\n     }\n }"}, {"sha": "680b2eb1da723d7696878d7d9f1ed2d27f69ebc7", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb307bbfcd123d3bae8f210f2b51eebe68525c27/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb307bbfcd123d3bae8f210f2b51eebe68525c27/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=cb307bbfcd123d3bae8f210f2b51eebe68525c27", "patch": "@@ -123,7 +123,7 @@ macro_rules! define_Conf {\n \n         #[cfg(feature = \"internal\")]\n         pub mod metadata {\n-            use $crate::utils::internal_lints::metadata_collector::ClippyConfiguration;\n+            use crate::utils::internal_lints::metadata_collector::ClippyConfiguration;\n \n             macro_rules! wrap_option {\n                 () => (None);"}, {"sha": "9fc594be311e2fd23fe01dfc552b2ff703f1c483", "filename": "tests/ui/crate_in_macro_def.fixed", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cb307bbfcd123d3bae8f210f2b51eebe68525c27/tests%2Fui%2Fcrate_in_macro_def.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cb307bbfcd123d3bae8f210f2b51eebe68525c27/tests%2Fui%2Fcrate_in_macro_def.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_in_macro_def.fixed?ref=cb307bbfcd123d3bae8f210f2b51eebe68525c27", "patch": "@@ -1,8 +1,8 @@\n // run-rustfix\n #![warn(clippy::crate_in_macro_def)]\n \n-#[macro_use]\n mod hygienic {\n+    #[macro_export]\n     macro_rules! print_message_hygienic {\n         () => {\n             println!(\"{}\", $crate::hygienic::MESSAGE);\n@@ -12,8 +12,8 @@ mod hygienic {\n     pub const MESSAGE: &str = \"Hello!\";\n }\n \n-#[macro_use]\n mod unhygienic {\n+    #[macro_export]\n     macro_rules! print_message_unhygienic {\n         () => {\n             println!(\"{}\", $crate::unhygienic::MESSAGE);\n@@ -23,7 +23,34 @@ mod unhygienic {\n     pub const MESSAGE: &str = \"Hello!\";\n }\n \n+mod unhygienic_intentionally {\n+    // For cases where the use of `crate` is intentional, applying `allow` to the macro definition\n+    // should suppress the lint.\n+    #[allow(clippy::crate_in_macro_def)]\n+    #[macro_export]\n+    macro_rules! print_message_unhygienic_intentionally {\n+        () => {\n+            println!(\"{}\", crate::CALLER_PROVIDED_MESSAGE);\n+        };\n+    }\n+}\n+\n+#[macro_use]\n+mod not_exported {\n+    macro_rules! print_message_not_exported {\n+        () => {\n+            println!(\"{}\", crate::not_exported::MESSAGE);\n+        };\n+    }\n+\n+    pub const MESSAGE: &str = \"Hello!\";\n+}\n+\n fn main() {\n     print_message_hygienic!();\n     print_message_unhygienic!();\n+    print_message_unhygienic_intentionally!();\n+    print_message_not_exported!();\n }\n+\n+pub const CALLER_PROVIDED_MESSAGE: &str = \"Hello!\";"}, {"sha": "ac456108e4ab15fb842d210c5605dcb9d3342122", "filename": "tests/ui/crate_in_macro_def.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cb307bbfcd123d3bae8f210f2b51eebe68525c27/tests%2Fui%2Fcrate_in_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb307bbfcd123d3bae8f210f2b51eebe68525c27/tests%2Fui%2Fcrate_in_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_in_macro_def.rs?ref=cb307bbfcd123d3bae8f210f2b51eebe68525c27", "patch": "@@ -1,8 +1,8 @@\n // run-rustfix\n #![warn(clippy::crate_in_macro_def)]\n \n-#[macro_use]\n mod hygienic {\n+    #[macro_export]\n     macro_rules! print_message_hygienic {\n         () => {\n             println!(\"{}\", $crate::hygienic::MESSAGE);\n@@ -12,8 +12,8 @@ mod hygienic {\n     pub const MESSAGE: &str = \"Hello!\";\n }\n \n-#[macro_use]\n mod unhygienic {\n+    #[macro_export]\n     macro_rules! print_message_unhygienic {\n         () => {\n             println!(\"{}\", crate::unhygienic::MESSAGE);\n@@ -23,7 +23,34 @@ mod unhygienic {\n     pub const MESSAGE: &str = \"Hello!\";\n }\n \n+mod unhygienic_intentionally {\n+    // For cases where the use of `crate` is intentional, applying `allow` to the macro definition\n+    // should suppress the lint.\n+    #[allow(clippy::crate_in_macro_def)]\n+    #[macro_export]\n+    macro_rules! print_message_unhygienic_intentionally {\n+        () => {\n+            println!(\"{}\", crate::CALLER_PROVIDED_MESSAGE);\n+        };\n+    }\n+}\n+\n+#[macro_use]\n+mod not_exported {\n+    macro_rules! print_message_not_exported {\n+        () => {\n+            println!(\"{}\", crate::not_exported::MESSAGE);\n+        };\n+    }\n+\n+    pub const MESSAGE: &str = \"Hello!\";\n+}\n+\n fn main() {\n     print_message_hygienic!();\n     print_message_unhygienic!();\n+    print_message_unhygienic_intentionally!();\n+    print_message_not_exported!();\n }\n+\n+pub const CALLER_PROVIDED_MESSAGE: &str = \"Hello!\";"}, {"sha": "d6b30fd96152fcc4455c634a16bf15f88b762042", "filename": "tests/ui/crate_in_macro_def_allow.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/86872059ed143e93f04130578d8b2d1561d5f3a7/tests%2Fui%2Fcrate_in_macro_def_allow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86872059ed143e93f04130578d8b2d1561d5f3a7/tests%2Fui%2Fcrate_in_macro_def_allow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_in_macro_def_allow.rs?ref=86872059ed143e93f04130578d8b2d1561d5f3a7", "patch": "@@ -1,19 +0,0 @@\n-#![warn(clippy::crate_in_macro_def)]\n-\n-#[macro_use]\n-mod intentional {\n-    // For cases where use of `crate` is intentional, applying `allow` to the macro definition\n-    // should suppress the lint.\n-    #[allow(clippy::crate_in_macro_def)]\n-    macro_rules! print_message {\n-        () => {\n-            println!(\"{}\", crate::CALLER_PROVIDED_MESSAGE);\n-        };\n-    }\n-}\n-\n-fn main() {\n-    print_message!();\n-}\n-\n-pub const CALLER_PROVIDED_MESSAGE: &str = \"Hello!\";"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/crate_in_macro_def_allow.stderr", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/86872059ed143e93f04130578d8b2d1561d5f3a7/tests%2Fui%2Fcrate_in_macro_def_allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86872059ed143e93f04130578d8b2d1561d5f3a7/tests%2Fui%2Fcrate_in_macro_def_allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_in_macro_def_allow.stderr?ref=86872059ed143e93f04130578d8b2d1561d5f3a7"}]}