{"sha": "533bdfbdbc52c87d03959a4d58be6301f157da6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzM2JkZmJkYmM1MmM4N2QwMzk1OWE0ZDU4YmU2MzAxZjE1N2RhNmU=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-08-17T18:46:44Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2019-08-17T19:34:30Z"}, "message": "Fix assertions_on_constants lint", "tree": {"sha": "47cde827d159ee21837a2d339c16f6984a226521", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47cde827d159ee21837a2d339c16f6984a226521"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/533bdfbdbc52c87d03959a4d58be6301f157da6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/533bdfbdbc52c87d03959a4d58be6301f157da6e", "html_url": "https://github.com/rust-lang/rust/commit/533bdfbdbc52c87d03959a4d58be6301f157da6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/533bdfbdbc52c87d03959a4d58be6301f157da6e/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "439284b58400be98036117d053815eb24472fee7", "url": "https://api.github.com/repos/rust-lang/rust/commits/439284b58400be98036117d053815eb24472fee7", "html_url": "https://github.com/rust-lang/rust/commit/439284b58400be98036117d053815eb24472fee7"}], "stats": {"total": 63, "additions": 30, "deletions": 33}, "files": [{"sha": "32ca1cc1bb99fea654cee0a0f7703a96c2e6b6f8", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 30, "deletions": 33, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/533bdfbdbc52c87d03959a4d58be6301f157da6e/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/533bdfbdbc52c87d03959a4d58be6301f157da6e/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=533bdfbdbc52c87d03959a4d58be6301f157da6e", "patch": "@@ -1,11 +1,9 @@\n-use if_chain::if_chain;\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n-use syntax_pos::Span;\n \n use crate::consts::{constant, Constant};\n-use crate::utils::{in_macro_or_desugar, is_direct_expn_of, span_help_and_lint};\n+use crate::utils::{in_macro_or_desugar, is_direct_expn_of, is_expn_of, span_help_and_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `assert!(true)` and `assert!(false)` calls.\n@@ -33,40 +31,39 @@ declare_lint_pass!(AssertionsOnConstants => [ASSERTIONS_ON_CONSTANTS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        let mut is_debug_assert = false;\n-        if let Some(assert_span) = is_direct_expn_of(e.span, \"assert\") {\n-            if in_macro_or_desugar(assert_span) {\n-                return;\n-            }\n-            if let Some(debug_assert_span) = is_direct_expn_of(assert_span, \"debug_assert\") {\n-                if in_macro_or_desugar(debug_assert_span) {\n-                    return;\n-                }\n-                is_debug_assert = true;\n-            }\n+        let lint_assert_cb = |is_debug_assert: bool| {\n             if let ExprKind::Unary(_, ref lit) = e.node {\n-                if let Some((bool_const, _)) = constant(cx, cx.tables, lit) {\n-                    if let Constant::Bool(is_true) bool_const {\n-                        if is_true {\n-                            span_help_and_lint(\n-                                cx,\n-                                ASSERTIONS_ON_CONSTANTS,\n-                                e.span,\n-                                \"`assert!(true)` will be optimized out by the compiler\",\n-                                \"remove it\"\n-                            );\n-                        } else if !is_debug_assert {\n-                            span_help_and_lint(\n-                                cx,\n-                                ASSERTIONS_ON_CONSTANTS,\n-                                e.span,\n-                                \"`assert!(false)` should probably be replaced\",\n-                                \"use `panic!()` or `unreachable!()`\"\n-                            );\n-                        }\n+                if let Some((Constant::Bool(is_true), _)) = constant(cx, cx.tables, lit) {\n+                    if is_true {\n+                        span_help_and_lint(\n+                            cx,\n+                            ASSERTIONS_ON_CONSTANTS,\n+                            e.span,\n+                            \"`assert!(true)` will be optimized out by the compiler\",\n+                            \"remove it\",\n+                        );\n+                    } else if !is_debug_assert {\n+                        span_help_and_lint(\n+                            cx,\n+                            ASSERTIONS_ON_CONSTANTS,\n+                            e.span,\n+                            \"`assert!(false)` should probably be replaced\",\n+                            \"use `panic!()` or `unreachable!()`\",\n+                        );\n                     }\n                 }\n             }\n+        };\n+        if let Some(debug_assert_span) = is_expn_of(e.span, \"debug_assert\") {\n+            if in_macro_or_desugar(debug_assert_span) {\n+                return;\n+            }\n+            lint_assert_cb(true);\n+        } else if let Some(assert_span) = is_direct_expn_of(e.span, \"assert\") {\n+            if in_macro_or_desugar(assert_span) {\n+                return;\n+            }\n+            lint_assert_cb(false);\n         }\n     }\n }"}]}