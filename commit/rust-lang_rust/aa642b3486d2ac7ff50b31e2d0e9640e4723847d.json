{"sha": "aa642b3486d2ac7ff50b31e2d0e9640e4723847d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNjQyYjM0ODZkMmFjN2ZmNTBiMzFlMmQwZTk2NDBlNDcyMzg0N2Q=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-13T19:21:19Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-16T07:18:56Z"}, "message": "addressed comments", "tree": {"sha": "3196f118dd89dc5fc88953ab3ef11023eb24991a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3196f118dd89dc5fc88953ab3ef11023eb24991a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa642b3486d2ac7ff50b31e2d0e9640e4723847d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa642b3486d2ac7ff50b31e2d0e9640e4723847d", "html_url": "https://github.com/rust-lang/rust/commit/aa642b3486d2ac7ff50b31e2d0e9640e4723847d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa642b3486d2ac7ff50b31e2d0e9640e4723847d/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "038aa0e8e958a78f01f7a322e2465fd4488fa021", "url": "https://api.github.com/repos/rust-lang/rust/commits/038aa0e8e958a78f01f7a322e2465fd4488fa021", "html_url": "https://github.com/rust-lang/rust/commit/038aa0e8e958a78f01f7a322e2465fd4488fa021"}], "stats": {"total": 123, "additions": 45, "deletions": 78}, "files": [{"sha": "62649653a6972374b5be5bfb901882e28f52d3eb", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aa642b3486d2ac7ff50b31e2d0e9640e4723847d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa642b3486d2ac7ff50b31e2d0e9640e4723847d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=aa642b3486d2ac7ff50b31e2d0e9640e4723847d", "patch": "@@ -2231,17 +2231,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn all_impls(&self, trait_def_id: ast::DefId) -> Vec<ast::DefId> {\n         ty::populate_implementations_for_trait_if_necessary(self.tcx(), trait_def_id);\n \n-        let mut trait_impls = match self.tcx().trait_impls.borrow().get(&trait_def_id) {\n+        match self.tcx().trait_impls.borrow().get(&trait_def_id) {\n             None => Vec::new(),\n             Some(impls) => impls.borrow().clone()\n-        };\n-\n-        match self.tcx().trait_negative_impls.borrow().get(&trait_def_id) {\n-            None => {},\n-            Some(impls) => trait_impls.push_all(impls.borrow().as_slice()),\n-        };\n-\n-        trait_impls\n+        }\n     }\n \n     fn impl_obligations(&mut self,"}, {"sha": "c72fbc745651a5049b8bc096d9e77cc8126a5074", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aa642b3486d2ac7ff50b31e2d0e9640e4723847d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa642b3486d2ac7ff50b31e2d0e9640e4723847d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=aa642b3486d2ac7ff50b31e2d0e9640e4723847d", "patch": "@@ -750,9 +750,6 @@ pub struct ctxt<'tcx> {\n     /// Maps a trait onto a list of impls of that trait.\n     pub trait_impls: RefCell<DefIdMap<Rc<RefCell<Vec<ast::DefId>>>>>,\n \n-    /// Maps a trait onto a list of negative impls of that trait.\n-    pub trait_negative_impls: RefCell<DefIdMap<Rc<RefCell<Vec<ast::DefId>>>>>,\n-\n     /// Maps a DefId of a type to a list of its inherent impls.\n     /// Contains implementations of methods that are inherent to a type.\n     /// Methods in these implementations don't need to be exported.\n@@ -1894,7 +1891,7 @@ pub type PolyTypeOutlivesPredicate<'tcx> = PolyOutlivesPredicate<Ty<'tcx>, ty::R\n /// normal trait predicate (`T : TraitRef<...>`) and one of these\n /// predicates. Form #2 is a broader form in that it also permits\n /// equality between arbitrary types. Processing an instance of Form\n-/// \\#2 eventually yields one of these `ProjectionPredicate`\n+/// #2 eventually yields one of these `ProjectionPredicate`\n /// instances to normalize the LHS.\n #[derive(Clone, PartialEq, Eq, Hash, Show)]\n pub struct ProjectionPredicate<'tcx> {\n@@ -2415,7 +2412,6 @@ pub fn mk_ctxt<'tcx>(s: Session,\n         destructor_for_type: RefCell::new(DefIdMap::new()),\n         destructors: RefCell::new(DefIdSet::new()),\n         trait_impls: RefCell::new(DefIdMap::new()),\n-        trait_negative_impls: RefCell::new(DefIdMap::new()),\n         inherent_impls: RefCell::new(DefIdMap::new()),\n         impl_items: RefCell::new(DefIdMap::new()),\n         used_unsafe: RefCell::new(NodeSet::new()),\n@@ -6006,22 +6002,15 @@ pub fn record_trait_implementation(tcx: &ctxt,\n                                    trait_def_id: DefId,\n                                    impl_def_id: DefId) {\n \n-    let trait_impls = match trait_impl_polarity(tcx, impl_def_id)  {\n-        Some(ast::ImplPolarity::Positive) => &tcx.trait_impls,\n-        Some(ast::ImplPolarity::Negative) => &tcx.trait_negative_impls,\n-        _ => tcx.sess.bug(&format!(\"tried to record a non-impl item with id {:?}\",\n-                                  impl_def_id)[])\n-    };\n-\n-    match trait_impls.borrow().get(&trait_def_id) {\n+    match tcx.trait_impls.borrow().get(&trait_def_id) {\n         Some(impls_for_trait) => {\n             impls_for_trait.borrow_mut().push(impl_def_id);\n             return;\n         }\n         None => {}\n     }\n \n-    trait_impls.borrow_mut().insert(trait_def_id, Rc::new(RefCell::new(vec!(impl_def_id))));\n+    tcx.trait_impls.borrow_mut().insert(trait_def_id, Rc::new(RefCell::new(vec!(impl_def_id))));\n }\n \n /// Populates the type context with all the implementations for the given type"}, {"sha": "159b9d853c49742609bec4c3c16cba20e54f6df3", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa642b3486d2ac7ff50b31e2d0e9640e4723847d/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa642b3486d2ac7ff50b31e2d0e9640e4723847d/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=aa642b3486d2ac7ff50b31e2d0e9640e4723847d", "patch": "@@ -39,13 +39,7 @@ impl<'cx, 'tcx> OverlapChecker<'cx, 'tcx> {\n         // check can populate this table further with impls from other\n         // crates.\n         let trait_def_ids: Vec<(ast::DefId, Vec<ast::DefId>)> =\n-            self.tcx.trait_impls.borrow().iter().map(|(&k, v)| {\n-                let mut impls = v.borrow().clone();\n-                if let Some(neg_impls) = self.tcx.trait_negative_impls.borrow().get(&k) {\n-                    impls.push_all(neg_impls.borrow().as_slice());\n-                }\n-                (k, impls)\n-            }).collect();\n+            self.tcx.trait_impls.borrow().iter().map(|(&k, v)| (k, v.borrow().clone())).collect();\n \n         for &(trait_def_id, ref impls) in trait_def_ids.iter() {\n             self.check_for_overlapping_impls_of_trait(trait_def_id, impls);"}, {"sha": "c9dfb8201a98acb968382bb4d87dfb7b35406436", "filename": "src/test/compile-fail/coherence-conflicting-negative-trait-impl.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aa642b3486d2ac7ff50b31e2d0e9640e4723847d/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa642b3486d2ac7ff50b31e2d0e9640e4723847d/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs?ref=aa642b3486d2ac7ff50b31e2d0e9640e4723847d", "patch": "@@ -10,11 +10,20 @@\n \n #![feature(optin_builtin_traits)]\n \n-struct TestType;\n+trait MyTrait {}\n \n-unsafe impl Send for TestType {}\n+struct TestType<T>;\n+\n+unsafe impl<T: MyTrait> Send for TestType<T> {}\n+//~^ ERROR conflicting implementations for trait `core::marker::Send`\n+//~^^ ERROR conflicting implementations for trait `core::marker::Send`\n+\n+impl<T: MyTrait> !Send for TestType<T> {}\n //~^ ERROR conflicting implementations for trait `core::marker::Send`\n \n-impl !Send for TestType {}\n+unsafe impl<T> Send for TestType<T> {}\n+//~^ ERROR error: conflicting implementations for trait `core::marker::Send`\n+\n+impl !Send for TestType<i32> {}\n \n fn main() {}"}, {"sha": "f9f965e1ae39dc2a5a6ae78adb18c119f9b98b80", "filename": "src/test/compile-fail/coherence-orphan.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa642b3486d2ac7ff50b31e2d0e9640e4723847d/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa642b3486d2ac7ff50b31e2d0e9640e4723847d/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-orphan.rs?ref=aa642b3486d2ac7ff50b31e2d0e9640e4723847d", "patch": "@@ -8,8 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n // aux-build:coherence-orphan-lib.rs\n \n+#![feature(optin_builtin_traits)]\n+\n extern crate \"coherence-orphan-lib\" as lib;\n \n use lib::TheTrait;\n@@ -22,4 +25,7 @@ impl TheTrait<TheType> for isize { } //~ ERROR E0117\n \n impl TheTrait<isize> for TheType { }\n \n+impl !Send for Vec<isize> { } //~ ERROR E0117\n+//~^ ERROR conflicting\n+\n fn main() { }"}, {"sha": "cd253b2f9e5dc85f6059d962f5bd5480b206ae64", "filename": "src/test/compile-fail/marker-no-send.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/038aa0e8e958a78f01f7a322e2465fd4488fa021/src%2Ftest%2Fcompile-fail%2Fmarker-no-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038aa0e8e958a78f01f7a322e2465fd4488fa021/src%2Ftest%2Fcompile-fail%2Fmarker-no-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmarker-no-send.rs?ref=038aa0e8e958a78f01f7a322e2465fd4488fa021", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-stage1\n-// ignore-stage2\n-// ignore-stage3\n-\n-use std::marker;\n-\n-fn foo<P:Send>(p: P) { }\n-\n-fn main()\n-{\n-    foo(marker::NoSend); //~ ERROR the trait `core::marker::Send` is not implemented\n-}"}, {"sha": "d86b6a0a674eb8adad7d0897f3adf57aac7493d9", "filename": "src/test/compile-fail/marker-no-share.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/038aa0e8e958a78f01f7a322e2465fd4488fa021/src%2Ftest%2Fcompile-fail%2Fmarker-no-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038aa0e8e958a78f01f7a322e2465fd4488fa021/src%2Ftest%2Fcompile-fail%2Fmarker-no-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmarker-no-share.rs?ref=038aa0e8e958a78f01f7a322e2465fd4488fa021", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-stage1\n-// ignore-stage2\n-// ignore-stage3\n-\n-use std::marker;\n-\n-fn foo<P: Sync>(p: P) { }\n-\n-fn main()\n-{\n-    foo(marker::NoSync); //~ ERROR the trait `core::marker::Sync` is not implemented\n-}"}, {"sha": "3ef760053c709fc8b9115b0981b59ea15d4c3ee4", "filename": "src/test/compile-fail/traits-negative-impls.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aa642b3486d2ac7ff50b31e2d0e9640e4723847d/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa642b3486d2ac7ff50b31e2d0e9640e4723847d/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-negative-impls.rs?ref=aa642b3486d2ac7ff50b31e2d0e9640e4723847d", "patch": "@@ -8,6 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// The dummy functions are used to avoid adding new cfail files.\n+// What happens is that the compiler attempts to squash duplicates and some\n+// errors are not reported. This way, we make sure that, for each function, different\n+// typeck phases are involved and all errors are reported.\n+\n #![feature(optin_builtin_traits)]\n \n use std::marker::Send;\n@@ -24,13 +29,28 @@ unsafe impl<T: Send> Sync for Outer2<T> {}\n fn is_send<T: Send>(_: T) {}\n fn is_sync<T: Sync>(_: T) {}\n \n-fn main() {\n+fn dummy() {\n     Outer(TestType);\n     //~^ ERROR the trait `core::marker::Send` is not implemented for the type `TestType`\n \n     is_send(TestType);\n     //~^ ERROR the trait `core::marker::Send` is not implemented for the type `TestType`\n \n+    is_send((8, TestType));\n+    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `TestType`\n+}\n+\n+fn dummy2() {\n+    is_send(Box::new(TestType));\n+    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `TestType`\n+}\n+\n+fn dummy3() {\n+    is_send(Box::new(Outer2(TestType)));\n+    //~^ ERROR the trait `core::marker::Send` is not implemented for the type `TestType`\n+}\n+\n+fn main() {\n     // This will complain about a missing Send impl because `Sync` is implement *just*\n     // for T that are `Send`. Look at #20366 and #19950\n     is_sync(Outer2(TestType));"}]}