{"sha": "ab3bec91d77150e434ac1480fbb3935213e33dca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiM2JlYzkxZDc3MTUwZTQzNGFjMTQ4MGZiYjM5MzUyMTNlMzNkY2E=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-04T22:43:02Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-10T23:13:12Z"}, "message": "libstd: Remove some cells involved in\n`deschedule_running_task_and_then`.", "tree": {"sha": "f0060ee28e481bd72a2c767a55efdebe63db3748", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0060ee28e481bd72a2c767a55efdebe63db3748"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab3bec91d77150e434ac1480fbb3935213e33dca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab3bec91d77150e434ac1480fbb3935213e33dca", "html_url": "https://github.com/rust-lang/rust/commit/ab3bec91d77150e434ac1480fbb3935213e33dca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab3bec91d77150e434ac1480fbb3935213e33dca/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cac9fe76349120ea2373f3ce47a561271b5e8b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cac9fe76349120ea2373f3ce47a561271b5e8b6", "html_url": "https://github.com/rust-lang/rust/commit/7cac9fe76349120ea2373f3ce47a561271b5e8b6"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "5e867bcdfbac6655649f871650f2d777365ea082", "filename": "src/libstd/rt/tube.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab3bec91d77150e434ac1480fbb3935213e33dca/src%2Flibstd%2Frt%2Ftube.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3bec91d77150e434ac1480fbb3935213e33dca/src%2Flibstd%2Frt%2Ftube.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftube.rs?ref=ab3bec91d77150e434ac1480fbb3935213e33dca", "patch": "@@ -88,7 +88,6 @@ impl<T> Clone for Tube<T> {\n \n #[cfg(test)]\n mod test {\n-    use cell::Cell;\n     use rt::test::*;\n     use rt::rtio::EventLoop;\n     use rt::sched::Scheduler;\n@@ -100,11 +99,10 @@ mod test {\n     fn simple_test() {\n         do run_in_newsched_task {\n             let mut tube: Tube<int> = Tube::new();\n-            let tube_clone = tube.clone();\n-            let tube_clone_cell = Cell::new(tube_clone);\n+            let mut tube_clone = Some(tube.clone());\n             let sched: ~Scheduler = Local::take();\n             sched.deschedule_running_task_and_then(|sched, task| {\n-                let mut tube_clone = tube_clone_cell.take();\n+                let mut tube_clone = tube_clone.take_unwrap();\n                 tube_clone.send(1);\n                 sched.enqueue_blocked_task(task);\n             });\n@@ -117,11 +115,10 @@ mod test {\n     fn blocking_test() {\n         do run_in_newsched_task {\n             let mut tube: Tube<int> = Tube::new();\n-            let tube_clone = tube.clone();\n-            let tube_clone = Cell::new(tube_clone);\n+            let mut tube_clone = Some(tube.clone());\n             let sched: ~Scheduler = Local::take();\n             sched.deschedule_running_task_and_then(|sched, task| {\n-                let tube_clone = tube_clone.take();\n+                let tube_clone = tube_clone.take_unwrap();\n                 do sched.event_loop.callback {\n                     let mut tube_clone = tube_clone;\n                     // The task should be blocked on this now and\n@@ -141,11 +138,10 @@ mod test {\n \n         do run_in_newsched_task {\n             let mut tube: Tube<int> = Tube::new();\n-            let tube_clone = tube.clone();\n-            let tube_clone = Cell::new(tube_clone);\n+            let mut tube_clone = Some(tube.clone());\n             let sched: ~Scheduler = Local::take();\n             sched.deschedule_running_task_and_then(|sched, task| {\n-                callback_send(tube_clone.take(), 0);\n+                callback_send(tube_clone.take_unwrap(), 0);\n \n                 fn callback_send(tube: Tube<int>, i: int) {\n                     if i == 100 {"}, {"sha": "4f78ade3f08fbc5b39ad8d7be7c58ee789139f9c", "filename": "src/libstd/select.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab3bec91d77150e434ac1480fbb3935213e33dca/src%2Flibstd%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3bec91d77150e434ac1480fbb3935213e33dca/src%2Flibstd%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fselect.rs?ref=ab3bec91d77150e434ac1480fbb3935213e33dca", "patch": "@@ -60,7 +60,7 @@ pub fn select<A: Select>(ports: &mut [A]) -> uint {\n     let c = Cell::new(c);\n \n     (|| {\n-        let c = Cell::new(c.take());\n+        let mut c = Some(c.take());\n         let sched: ~Scheduler = Local::take();\n         sched.deschedule_running_task_and_then(|sched, task| {\n             let task_handles = task.make_selectable(ports.len());\n@@ -74,8 +74,10 @@ pub fn select<A: Select>(ports: &mut [A]) -> uint {\n                 }\n             }\n \n-            let c = Cell::new(c.take());\n-            do sched.event_loop.callback { c.take().send_deferred(()) }\n+            let c = c.take_unwrap();\n+            do sched.event_loop.callback {\n+                c.send_deferred(())\n+            }\n         })\n     }).finally(|| {\n         // Unkillable is necessary not because getting killed is dangerous here,\n@@ -133,7 +135,6 @@ mod test {\n     use vec::*;\n     use comm::GenericChan;\n     use task;\n-    use cell::Cell;\n     use iter::{Iterator, range};\n \n     #[test] #[should_fail]\n@@ -246,9 +247,7 @@ mod test {\n             let (p3,c3) = oneshot();\n             let (p4,c4) = oneshot();\n \n-            let x = Cell::new((c2, p3, c4));\n             do task::spawn {\n-                let (c2, p3, c4) = x.take();\n                 p3.recv();   // handshake parent\n                 c4.send(()); // normal receive\n                 task::deschedule();\n@@ -284,10 +283,9 @@ mod test {\n                             let (p,c) = oneshot();\n                             ports.push(p);\n                             if send_on_chans.contains(&i) {\n-                                let c = Cell::new(c);\n                                 do spawntask_random {\n                                     task::deschedule();\n-                                    c.take().send(());\n+                                    c.send(());\n                                 }\n                             }\n                         }"}]}