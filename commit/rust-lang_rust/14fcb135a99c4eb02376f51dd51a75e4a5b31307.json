{"sha": "14fcb135a99c4eb02376f51dd51a75e4a5b31307", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZmNiMTM1YTk5YzRlYjAyMzc2ZjUxZGQ1MWE3NWU0YTViMzEzMDc=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-16T08:42:48Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-16T10:46:57Z"}, "message": "Improve resolution of impls\n\nIssue #1227", "tree": {"sha": "345b9da98ee27ff86fdaf6fcec555be7359ce018", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/345b9da98ee27ff86fdaf6fcec555be7359ce018"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14fcb135a99c4eb02376f51dd51a75e4a5b31307", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14fcb135a99c4eb02376f51dd51a75e4a5b31307", "html_url": "https://github.com/rust-lang/rust/commit/14fcb135a99c4eb02376f51dd51a75e4a5b31307", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14fcb135a99c4eb02376f51dd51a75e4a5b31307/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7efef989011307bb9bb1679c9022c17bffecd2f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7efef989011307bb9bb1679c9022c17bffecd2f6", "html_url": "https://github.com/rust-lang/rust/commit/7efef989011307bb9bb1679c9022c17bffecd2f6"}], "stats": {"total": 51, "additions": 33, "deletions": 18}, "files": [{"sha": "bc095e992f0a2fb52f153111218f1d97ec047dc0", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/14fcb135a99c4eb02376f51dd51a75e4a5b31307/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14fcb135a99c4eb02376f51dd51a75e4a5b31307/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=14fcb135a99c4eb02376f51dd51a75e4a5b31307", "patch": "@@ -2,7 +2,7 @@\n import syntax::{ast, ast_util, codemap};\n import syntax::ast::*;\n import ast::{ident, fn_ident, def, def_id, node_id};\n-import syntax::ast_util::{local_def, def_id_of_def};\n+import syntax::ast_util::{local_def, def_id_of_def, is_exported};\n \n import metadata::{csearch, cstore};\n import driver::session::session;\n@@ -494,7 +494,8 @@ fn resolve_import(e: env, defid: ast::def_id, name: ast::ident,\n                 impls: [@ast::item]) {\n         let val = lookup(ns_value), typ = lookup(ns_type),\n             md = lookup(ns_module);\n-        if is_none(val) && is_none(typ) && is_none(md) {\n+        if is_none(val) && is_none(typ) && is_none(md) &&\n+           vec::len(impls) == 0u {\n             unresolved_err(e, cx, sp, name, \"import\");\n         } else {\n             e.imports.insert(id, resolved(val, typ, md, @impls, name, sp));\n@@ -1112,7 +1113,7 @@ fn lookup_in_local_native_mod(e: env, node_id: node_id, sp: span, id: ident,\n fn lookup_in_local_mod(e: env, node_id: node_id, sp: span, id: ident,\n                        ns: namespace, dr: dir) -> option::t<def> {\n     let info = e.mod_map.get(node_id);\n-    if dr == outside && !ast_util::is_exported(id, option::get(info.m)) {\n+    if dr == outside && !is_exported(id, option::get(info.m)) {\n         // if we're in a native mod, then dr==inside, so info.m is some _mod\n         ret none::<def>; // name is not visible\n     }\n@@ -1637,12 +1638,22 @@ fn resolve_impls(e: @env, c: @ast::crate) {\n }\n \n fn find_impls_in_view_item(e: env, vi: @ast::view_item,\n-                           &impls: [@ast::item]) {\n+                           &impls: [@ast::item], sc: iscopes) {\n     alt vi.node {\n-      ast::view_item_import(ident, _, id) {\n-        // FIXME if single name, simply look in our own iscope\n-        alt e.imports.get(id) {\n-          resolved(_, _, _, is, _, _) { impls += *is; }\n+      ast::view_item_import(_, pt, id) {\n+        let found = [];\n+        if vec::len(*pt) == 1u {\n+            list::iter(sc) {|level|\n+                if vec::len(found) > 0u { ret; }\n+                for imp in *level {\n+                    if imp.ident == pt[0] { found += [imp]; }\n+                }\n+                if vec::len(found) > 0u { impls += found; }\n+            }\n+        } else {\n+            alt e.imports.get(id) {\n+              resolved(_, _, _, is, _, _) { impls += *is; }\n+            }\n         }\n       }\n       ast::view_item_import_from(base, names, _) {\n@@ -1667,26 +1678,28 @@ fn find_impls_in_view_item(e: env, vi: @ast::view_item,\n }\n \n fn find_impls_in_item(i: @ast::item, &impls: [@ast::item],\n-                      name: option::t<ident>, _dir: dir) {\n-    // FIXME check exports\n+                      name: option::t<ident>,\n+                      ck_exports: option::t<ast::_mod>) {\n     alt i.node {\n       ast::item_impl(_, _, _) {\n-        if alt name { some(n) { n == i.ident } _ { true } } {\n+        if alt name { some(n) { n == i.ident } _ { true } } &&\n+           alt ck_exports { some(m) { is_exported(i.ident, m) } _ { true } } {\n             impls += [i];\n         }\n       }\n       _ {}\n     }\n }\n \n+// FIXME[impl] external importing of impls\n fn find_impls_in_mod(e: env, m: def, &impls: [@ast::item],\n                      name: option::t<ident>) {\n     alt m {\n       ast::def_mod(defid) {\n-        // FIXME external importing of impls\n         if defid.crate == ast::local_crate {\n-            for i in option::get(e.mod_map.get(defid.node).m).items {\n-                find_impls_in_item(i, impls, name, outside);\n+            let md = option::get(e.mod_map.get(defid.node).m);\n+            for i in md.items {\n+                find_impls_in_item(i, impls, name, some(md));\n             }\n         }\n       }\n@@ -1699,11 +1712,13 @@ type iscopes = list<@[@ast::item]>;\n fn visit_block_with_impl_scope(e: @env, b: ast::blk, sc: iscopes,\n                                v: vt<iscopes>) {\n     let impls = [];\n-    for vi in b.node.view_items { find_impls_in_view_item(*e, vi, impls); }\n+    for vi in b.node.view_items {\n+        find_impls_in_view_item(*e, vi, impls, sc);\n+    }\n     for st in b.node.stmts {\n         alt st.node {\n           ast::stmt_decl(@{node: ast::decl_item(i), _}, _) {\n-            find_impls_in_item(i, impls, none, inside);\n+            find_impls_in_item(i, impls, none, none);\n           }\n           _ {}\n         }\n@@ -1715,8 +1730,8 @@ fn visit_block_with_impl_scope(e: @env, b: ast::blk, sc: iscopes,\n fn visit_mod_with_impl_scope(e: @env, m: ast::_mod, s: span, sc: iscopes,\n                              v: vt<iscopes>) {\n     let impls = [];\n-    for vi in m.view_items { find_impls_in_view_item(*e, vi, impls); }\n-    for i in m.items { find_impls_in_item(i, impls, none, inside); }\n+    for vi in m.view_items { find_impls_in_view_item(*e, vi, impls, sc); }\n+    for i in m.items { find_impls_in_item(i, impls, none, none); }\n     visit::visit_mod(m, s, vec::len(impls) > 0u ? cons(@impls, @sc) : sc, v);\n }\n "}]}