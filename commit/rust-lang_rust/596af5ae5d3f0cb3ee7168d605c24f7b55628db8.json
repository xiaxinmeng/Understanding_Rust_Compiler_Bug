{"sha": "596af5ae5d3f0cb3ee7168d605c24f7b55628db8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NmFmNWFlNWQzZjBjYjNlZTcxNjhkNjA1YzI0ZjdiNTU2MjhkYjg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-28T05:30:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-28T05:30:01Z"}, "message": "Rollup merge of #73763 - davidtwco:terminal-width-json-emitter, r=estebank\n\nerrors: use `-Z terminal-width` in JSON emitter\n\nThis PR makes the JSON emitter use `-Z terminal-width` in the \"rendered\" field of the JSON output.\n\nr? @estebank", "tree": {"sha": "7826703c26b79b7393f795283312f69609e7df52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7826703c26b79b7393f795283312f69609e7df52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/596af5ae5d3f0cb3ee7168d605c24f7b55628db8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe+CrZCRBK7hj4Ov3rIwAAdHIIAJq95Eg9pA13OatQo1d5uR0J\nBF59JrWut58VAI40XG/PMYJFiWBWveaX11/NPNk7/mjS7ctYQUFzgde5Tvf++0+B\n4dbOLorIuS4XemBo/j1Mh1tnQWq+KgfIed4n1c17xwhGRxZII58ArzZVzOXYQ3hI\nG4FhVINRB6ASJOjSbxU1Crfxci/Bi+bsou8QaHDGywisN/l5byOirsk2qiEWfxdP\nEkTmlQqzW6tbDyM288qdFp8K54tnxKRemPRjpQhxiIxEEA+3G2IoTWf37u+ZAugn\nMJEKw88zzK1w5OBJ1lvV96iPCwV/whyeGYUwJZQfeEeLKIXdo2zhMZ7F6QhA0hE=\n=SmPj\n-----END PGP SIGNATURE-----\n", "payload": "tree 7826703c26b79b7393f795283312f69609e7df52\nparent d5205f23d3ba4b51e56b2c1a7ca68f8a1b9fa15f\nparent 3678e5c97e701c265ecada08cf6a6f52f8bac3cc\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593322201 -0700\ncommitter GitHub <noreply@github.com> 1593322201 -0700\n\nRollup merge of #73763 - davidtwco:terminal-width-json-emitter, r=estebank\n\nerrors: use `-Z terminal-width` in JSON emitter\n\nThis PR makes the JSON emitter use `-Z terminal-width` in the \"rendered\" field of the JSON output.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/596af5ae5d3f0cb3ee7168d605c24f7b55628db8", "html_url": "https://github.com/rust-lang/rust/commit/596af5ae5d3f0cb3ee7168d605c24f7b55628db8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/596af5ae5d3f0cb3ee7168d605c24f7b55628db8/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5205f23d3ba4b51e56b2c1a7ca68f8a1b9fa15f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5205f23d3ba4b51e56b2c1a7ca68f8a1b9fa15f", "html_url": "https://github.com/rust-lang/rust/commit/d5205f23d3ba4b51e56b2c1a7ca68f8a1b9fa15f"}, {"sha": "3678e5c97e701c265ecada08cf6a6f52f8bac3cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3678e5c97e701c265ecada08cf6a6f52f8bac3cc", "html_url": "https://github.com/rust-lang/rust/commit/3678e5c97e701c265ecada08cf6a6f52f8bac3cc"}], "stats": {"total": 103, "additions": 96, "deletions": 7}, "files": [{"sha": "24186198fd2b15b11c1d8ccd7e9b04b8347a6ebb", "filename": "src/librustc_errors/json.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/596af5ae5d3f0cb3ee7168d605c24f7b55628db8/src%2Flibrustc_errors%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596af5ae5d3f0cb3ee7168d605c24f7b55628db8/src%2Flibrustc_errors%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fjson.rs?ref=596af5ae5d3f0cb3ee7168d605c24f7b55628db8", "patch": "@@ -36,6 +36,7 @@ pub struct JsonEmitter {\n     pretty: bool,\n     ui_testing: bool,\n     json_rendered: HumanReadableErrorType,\n+    terminal_width: Option<usize>,\n     macro_backtrace: bool,\n }\n \n@@ -45,6 +46,7 @@ impl JsonEmitter {\n         source_map: Lrc<SourceMap>,\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n+        terminal_width: Option<usize>,\n         macro_backtrace: bool,\n     ) -> JsonEmitter {\n         JsonEmitter {\n@@ -54,13 +56,15 @@ impl JsonEmitter {\n             pretty,\n             ui_testing: false,\n             json_rendered,\n+            terminal_width,\n             macro_backtrace,\n         }\n     }\n \n     pub fn basic(\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n+        terminal_width: Option<usize>,\n         macro_backtrace: bool,\n     ) -> JsonEmitter {\n         let file_path_mapping = FilePathMapping::empty();\n@@ -69,6 +73,7 @@ impl JsonEmitter {\n             Lrc::new(SourceMap::new(file_path_mapping)),\n             pretty,\n             json_rendered,\n+            terminal_width,\n             macro_backtrace,\n         )\n     }\n@@ -79,6 +84,7 @@ impl JsonEmitter {\n         source_map: Lrc<SourceMap>,\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n+        terminal_width: Option<usize>,\n         macro_backtrace: bool,\n     ) -> JsonEmitter {\n         JsonEmitter {\n@@ -88,6 +94,7 @@ impl JsonEmitter {\n             pretty,\n             ui_testing: false,\n             json_rendered,\n+            terminal_width,\n             macro_backtrace,\n         }\n     }\n@@ -247,7 +254,13 @@ impl Diagnostic {\n         let buf = BufWriter::default();\n         let output = buf.clone();\n         je.json_rendered\n-            .new_emitter(Box::new(buf), Some(je.sm.clone()), false, None, je.macro_backtrace)\n+            .new_emitter(\n+                Box::new(buf),\n+                Some(je.sm.clone()),\n+                false,\n+                je.terminal_width,\n+                je.macro_backtrace,\n+            )\n             .ui_testing(je.ui_testing)\n             .emit_diagnostic(diag);\n         let output = Arc::try_unwrap(output.0).unwrap().into_inner().unwrap();"}, {"sha": "fcd5dab94a6c25efe39d6c0f0a2ea23dabe3665a", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/596af5ae5d3f0cb3ee7168d605c24f7b55628db8/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596af5ae5d3f0cb3ee7168d605c24f7b55628db8/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=596af5ae5d3f0cb3ee7168d605c24f7b55628db8", "patch": "@@ -1061,8 +1061,15 @@ fn default_emitter(\n             }\n         }\n         (config::ErrorOutputType::Json { pretty, json_rendered }, None) => Box::new(\n-            JsonEmitter::stderr(Some(registry), source_map, pretty, json_rendered, macro_backtrace)\n-                .ui_testing(sopts.debugging_opts.ui_testing),\n+            JsonEmitter::stderr(\n+                Some(registry),\n+                source_map,\n+                pretty,\n+                json_rendered,\n+                sopts.debugging_opts.terminal_width,\n+                macro_backtrace,\n+            )\n+            .ui_testing(sopts.debugging_opts.ui_testing),\n         ),\n         (config::ErrorOutputType::Json { pretty, json_rendered }, Some(dst)) => Box::new(\n             JsonEmitter::new(\n@@ -1071,6 +1078,7 @@ fn default_emitter(\n                 source_map,\n                 pretty,\n                 json_rendered,\n+                sopts.debugging_opts.terminal_width,\n                 macro_backtrace,\n             )\n             .ui_testing(sopts.debugging_opts.ui_testing),\n@@ -1416,7 +1424,7 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n             Box::new(EmitterWriter::stderr(color_config, None, short, false, None, false))\n         }\n         config::ErrorOutputType::Json { pretty, json_rendered } => {\n-            Box::new(JsonEmitter::basic(pretty, json_rendered, false))\n+            Box::new(JsonEmitter::basic(pretty, json_rendered, None, false))\n         }\n     };\n     let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n@@ -1431,7 +1439,7 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n             Box::new(EmitterWriter::stderr(color_config, None, short, false, None, false))\n         }\n         config::ErrorOutputType::Json { pretty, json_rendered } => {\n-            Box::new(JsonEmitter::basic(pretty, json_rendered, false))\n+            Box::new(JsonEmitter::basic(pretty, json_rendered, None, false))\n         }\n     };\n     let handler = rustc_errors::Handler::with_emitter(true, None, emitter);"}, {"sha": "38f202e84accba9b69a3fc303205a9041ff12351", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/596af5ae5d3f0cb3ee7168d605c24f7b55628db8/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596af5ae5d3f0cb3ee7168d605c24f7b55628db8/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=596af5ae5d3f0cb3ee7168d605c24f7b55628db8", "patch": "@@ -193,8 +193,15 @@ pub fn new_handler(\n                 Lrc::new(source_map::SourceMap::new(source_map::FilePathMapping::empty()))\n             });\n             Box::new(\n-                JsonEmitter::stderr(None, source_map, pretty, json_rendered, false)\n-                    .ui_testing(debugging_opts.ui_testing),\n+                JsonEmitter::stderr(\n+                    None,\n+                    source_map,\n+                    pretty,\n+                    json_rendered,\n+                    debugging_opts.terminal_width,\n+                    false,\n+                )\n+                .ui_testing(debugging_opts.ui_testing),\n             )\n         }\n     };"}, {"sha": "e445a84fd012e7b2089b3d848bcbaed194dd986e", "filename": "src/test/ui/terminal-width/flag-human.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/596af5ae5d3f0cb3ee7168d605c24f7b55628db8/src%2Ftest%2Fui%2Fterminal-width%2Fflag-human.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596af5ae5d3f0cb3ee7168d605c24f7b55628db8/src%2Ftest%2Fui%2Fterminal-width%2Fflag-human.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fflag-human.rs?ref=596af5ae5d3f0cb3ee7168d605c24f7b55628db8", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags: -Z terminal-width=20\n+\n+// This test checks that `-Z terminal-width` effects the human error output by restricting it to an\n+// arbitrarily low value so that the effect is visible.\n+\n+fn main() {\n+    let _: () = 42;\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "393dcf2b82845b1da2a4d6d0352d44c7cdc978a1", "filename": "src/test/ui/terminal-width/flag-human.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/596af5ae5d3f0cb3ee7168d605c24f7b55628db8/src%2Ftest%2Fui%2Fterminal-width%2Fflag-human.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/596af5ae5d3f0cb3ee7168d605c24f7b55628db8/src%2Ftest%2Fui%2Fterminal-width%2Fflag-human.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fflag-human.stderr?ref=596af5ae5d3f0cb3ee7168d605c24f7b55628db8", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/flag-human.rs:7:17\n+   |\n+LL | ..._: () = 42;\n+   |       --   ^^ expected `()`, found integer\n+   |       |\n+   |       expected due to this\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "eabdc59ddedd548ccdcb96982a43266fe1cc6abf", "filename": "src/test/ui/terminal-width/flag-json.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/596af5ae5d3f0cb3ee7168d605c24f7b55628db8/src%2Ftest%2Fui%2Fterminal-width%2Fflag-json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/596af5ae5d3f0cb3ee7168d605c24f7b55628db8/src%2Ftest%2Fui%2Fterminal-width%2Fflag-json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fflag-json.rs?ref=596af5ae5d3f0cb3ee7168d605c24f7b55628db8", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags: -Z terminal-width=20 --error-format=json\n+\n+// This test checks that `-Z terminal-width` effects the JSON error output by restricting it to an\n+// arbitrarily low value so that the effect is visible.\n+\n+fn main() {\n+    let _: () = 42;\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "29730ccdd4ed7014c2f5bcab6dc89939b72ccf08", "filename": "src/test/ui/terminal-width/flag-json.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/596af5ae5d3f0cb3ee7168d605c24f7b55628db8/src%2Ftest%2Fui%2Fterminal-width%2Fflag-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/596af5ae5d3f0cb3ee7168d605c24f7b55628db8/src%2Ftest%2Fui%2Fterminal-width%2Fflag-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fflag-json.stderr?ref=596af5ae5d3f0cb3ee7168d605c24f7b55628db8", "patch": "@@ -0,0 +1,32 @@\n+{\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0308\n+let x: i32 = \\\"I am not a number!\\\";\n+//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n+//      |             |\n+//      |    initializing expression;\n+//      |    compiler infers type `&str`\n+//      |\n+//    type `i32` assigned to variable `x`\n+```\n+\n+This error occurs when the compiler is unable to infer the concrete type of a\n+variable. It can occur in several cases, the most common being a mismatch\n+between two types: the type the author explicitly assigned, and the type the\n+compiler inferred.\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/flag-json.rs\",\"byte_start\":244,\"byte_end\":246,\"line_start\":7,\"line_end\":7,\"column_start\":17,\"column_end\":19,\"is_primary\":true,\"text\":[{\"text\":\"    let _: () = 42;\",\"highlight_start\":17,\"highlight_end\":19}],\"label\":\"expected `()`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/flag-json.rs\",\"byte_start\":239,\"byte_end\":241,\"line_start\":7,\"line_end\":7,\"column_start\":12,\"column_end\":14,\"is_primary\":false,\"text\":[{\"text\":\"    let _: () = 42;\",\"highlight_start\":12,\"highlight_end\":14}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"error[E0308]: mismatched types\n+  --> $DIR/flag-json.rs:7:17\n+   |\n+LL | ..._: () = 42;\n+   |       --   ^^ expected `()`, found integer\n+   |       |\n+   |       expected due to this\n+\n+\"}\n+{\"message\":\"aborting due to previous error\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to previous error\n+\n+\"}\n+{\"message\":\"For more information about this error, try `rustc --explain E0308`.\",\"code\":null,\"level\":\"failure-note\",\"spans\":[],\"children\":[],\"rendered\":\"For more information about this error, try `rustc --explain E0308`.\n+\"}"}]}