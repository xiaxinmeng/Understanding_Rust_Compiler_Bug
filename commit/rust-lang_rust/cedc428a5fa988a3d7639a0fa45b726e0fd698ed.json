{"sha": "cedc428a5fa988a3d7639a0fa45b726e0fd698ed", "node_id": "C_kwDOAAsO6NoAKGNlZGM0MjhhNWZhOTg4YTNkNzYzOWEwZmE0NWI3MjZlMGZkNjk4ZWQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-07T13:01:25Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-05T17:24:21Z"}, "message": "fix the layout of repr(align) enums", "tree": {"sha": "aedc7b3f6a960ae07307f5af7a337627daf2543f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aedc7b3f6a960ae07307f5af7a337627daf2543f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cedc428a5fa988a3d7639a0fa45b726e0fd698ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cedc428a5fa988a3d7639a0fa45b726e0fd698ed", "html_url": "https://github.com/rust-lang/rust/commit/cedc428a5fa988a3d7639a0fa45b726e0fd698ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cedc428a5fa988a3d7639a0fa45b726e0fd698ed/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54f79babae06d3772c067f696e5b12db822ae25f", "url": "https://api.github.com/repos/rust-lang/rust/commits/54f79babae06d3772c067f696e5b12db822ae25f", "html_url": "https://github.com/rust-lang/rust/commit/54f79babae06d3772c067f696e5b12db822ae25f"}], "stats": {"total": 207, "additions": 203, "deletions": 4}, "files": [{"sha": "e20f94b15c6ac09ed1a23ee240f7b3ebb85d29c1", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cedc428a5fa988a3d7639a0fa45b726e0fd698ed/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedc428a5fa988a3d7639a0fa45b726e0fd698ed/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=cedc428a5fa988a3d7639a0fa45b726e0fd698ed", "patch": "@@ -1418,9 +1418,9 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n                 if layout_variants.iter().all(|v| v.abi.is_uninhabited()) {\n                     abi = Abi::Uninhabited;\n-                } else if tag.size(dl) == size || variants.iter().all(|layout| layout.is_empty()) {\n-                    // Without latter check aligned enums with custom discriminant values\n-                    // Would result in ICE see the issue #92464 for more info\n+                } else if tag.size(dl) == size {\n+                    // Make sure we only use scalar layout when the enum is entirely its\n+                    // own tag (i.e. it has no padding nor any non-ZST variant fields).\n                     abi = Abi::Scalar(tag);\n                 } else {\n                     // Try to use a ScalarPair for all tagged enums."}, {"sha": "7fbfc760d09c89bfd3bf8e82e1402500b860fe09", "filename": "src/test/ui/aligned_enum_cast.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cedc428a5fa988a3d7639a0fa45b726e0fd698ed/src%2Ftest%2Fui%2Faligned_enum_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedc428a5fa988a3d7639a0fa45b726e0fd698ed/src%2Ftest%2Fui%2Faligned_enum_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faligned_enum_cast.rs?ref=cedc428a5fa988a3d7639a0fa45b726e0fd698ed", "patch": "@@ -11,5 +11,13 @@ enum Aligned {\n fn main() {\n     let aligned = Aligned::Zero;\n     let fo = aligned as u8;\n-    println!(\"foo {}\",fo);\n+    println!(\"foo {}\", fo);\n+    println!(\"{}\", tou8(Aligned::Zero));\n+}\n+\n+#[inline(never)]\n+fn tou8(al: Aligned) -> u8 {\n+    // Cast behind a function call so ConstProp does not see it\n+    // (so that we can test codegen).\n+    al as u8\n }"}, {"sha": "ae1e6b012c39b83183a69951c071d632cc0b80fd", "filename": "src/test/ui/layout/issue-96185-overaligned-enum.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cedc428a5fa988a3d7639a0fa45b726e0fd698ed/src%2Ftest%2Fui%2Flayout%2Fissue-96185-overaligned-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cedc428a5fa988a3d7639a0fa45b726e0fd698ed/src%2Ftest%2Fui%2Flayout%2Fissue-96185-overaligned-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fissue-96185-overaligned-enum.rs?ref=cedc428a5fa988a3d7639a0fa45b726e0fd698ed", "patch": "@@ -0,0 +1,19 @@\n+// normalize-stderr-test \"pref: Align\\([1-8] bytes\\)\" -> \"pref: $$PREF_ALIGN\"\n+#![crate_type = \"lib\"]\n+#![feature(rustc_attrs)]\n+\n+// This cannot use `Scalar` abi since there is padding.\n+#[rustc_layout(debug)]\n+#[repr(align(8))]\n+pub enum Aligned1 { //~ ERROR: layout_of\n+    Zero = 0,\n+    One = 1,\n+}\n+\n+// This should use `Scalar` abi.\n+#[rustc_layout(debug)]\n+#[repr(align(1))]\n+pub enum Aligned2 { //~ ERROR: layout_of\n+    Zero = 0,\n+    One = 1,\n+}"}, {"sha": "8dc364fa7c9bdada9497c0618d2ff5a06b3b5a4d", "filename": "src/test/ui/layout/issue-96185-overaligned-enum.stderr", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/cedc428a5fa988a3d7639a0fa45b726e0fd698ed/src%2Ftest%2Fui%2Flayout%2Fissue-96185-overaligned-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cedc428a5fa988a3d7639a0fa45b726e0fd698ed/src%2Ftest%2Fui%2Flayout%2Fissue-96185-overaligned-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fissue-96185-overaligned-enum.stderr?ref=cedc428a5fa988a3d7639a0fa45b726e0fd698ed", "patch": "@@ -0,0 +1,172 @@\n+error: layout_of(Aligned1) = Layout {\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size(0 bytes),\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Initialized {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(8 bytes),\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       size: Size(8 bytes),\n+                   },\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 1,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(8 bytes),\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       size: Size(8 bytes),\n+                   },\n+               ],\n+           },\n+           abi: Aggregate {\n+               sized: true,\n+           },\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align(8 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           size: Size(8 bytes),\n+       }\n+  --> $DIR/issue-96185-overaligned-enum.rs:8:1\n+   |\n+LL | pub enum Aligned1 {\n+   | ^^^^^^^^^^^^^^^^^\n+\n+error: layout_of(Aligned2) = Layout {\n+           fields: Arbitrary {\n+               offsets: [\n+                   Size(0 bytes),\n+               ],\n+               memory_index: [\n+                   0,\n+               ],\n+           },\n+           variants: Multiple {\n+               tag: Initialized {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+               tag_encoding: Direct,\n+               tag_field: 0,\n+               variants: [\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 0,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(1 bytes),\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       size: Size(1 bytes),\n+                   },\n+                   Layout {\n+                       fields: Arbitrary {\n+                           offsets: [],\n+                           memory_index: [],\n+                       },\n+                       variants: Single {\n+                           index: 1,\n+                       },\n+                       abi: Aggregate {\n+                           sized: true,\n+                       },\n+                       largest_niche: None,\n+                       align: AbiAndPrefAlign {\n+                           abi: Align(1 bytes),\n+                           pref: $PREF_ALIGN,\n+                       },\n+                       size: Size(1 bytes),\n+                   },\n+               ],\n+           },\n+           abi: Scalar(\n+               Initialized {\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+           ),\n+           largest_niche: Some(\n+               Niche {\n+                   offset: Size(0 bytes),\n+                   value: Int(\n+                       I8,\n+                       false,\n+                   ),\n+                   valid_range: 0..=1,\n+               },\n+           ),\n+           align: AbiAndPrefAlign {\n+               abi: Align(1 bytes),\n+               pref: $PREF_ALIGN,\n+           },\n+           size: Size(1 bytes),\n+       }\n+  --> $DIR/issue-96185-overaligned-enum.rs:16:1\n+   |\n+LL | pub enum Aligned2 {\n+   | ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}