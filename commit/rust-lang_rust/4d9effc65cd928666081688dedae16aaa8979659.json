{"sha": "4d9effc65cd928666081688dedae16aaa8979659", "node_id": "C_kwDOAAsO6NoAKDRkOWVmZmM2NWNkOTI4NjY2MDgxNjg4ZGVkYWUxNmFhYTg5Nzk2NTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-22T19:05:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-22T19:05:58Z"}, "message": "Rollup merge of #108176 - compiler-errors:bad-lexical-region-resolve-bug, r=oli-obk\n\nDon't delay `ReError` bug during lexical region resolve\n\nLexical region resolution returns a list of `RegionResolutionError` which don't necessarily correspond to diagnostics being emitted. The compiler may, validly, throw away these resolution errors and do something else. Therefore it's not valid to use `ReError` during lifetime resolution, since we may actually be on a totally fine compilation path.\n\nFor example, the `implied_bounds_entailment` lint runs region resolution twice, and only emits an error if it fails both times. If we delay a bug and create a `ReError` during this first run, then we will ICE.\n\nFixes #108170\n\n----\n\nSide-note: this is conceptually equivalent to how we can't necessarily delay bugs or create `ty::Error` during trait solving/fulfillment, since the compiler is allowed to throw away these fulfillment errors to do other things. It's only once we actually emit an error (`report_region_errors` / `report_fulfillment_errors`)", "tree": {"sha": "05ca3330e4b318afb9f9ca5c1d3e5cb6c0632c48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05ca3330e4b318afb9f9ca5c1d3e5cb6c0632c48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d9effc65cd928666081688dedae16aaa8979659", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj9meWCRBK7hj4Ov3rIwAAL8QIAIglmZ00Q2f/fG46Xx5JmucE\nUniuJe8z3Ndmx8BITqRKrJ1KwpklOwR9V7cJseenAFlCL9Y2bG+B/5TpTCXzaL28\ney7wIWuM6sk66ES4Tw5w2GY+lzAIpVn+WTrMLSg4EwlVaIwsZCJFs7ADM3Xws/Rh\n5tIQ1tz2zljWY6ADh8P3zZZu4f1X98pgcTvp3K09db3ejvTl4jISuEvAnYH5lnLu\nInAj7v6li2wgJwE0kAmS/BjSJ6IU8mNYLHZNncfQf8mt9D504ena+0PWVSwPLnuc\nA7pr63lCxT+Doa2Oqb0f1psgeJ0ODAtGj9wVknrN/f59jHSacmHkWGZxsFNz3G0=\n=ExxO\n-----END PGP SIGNATURE-----\n", "payload": "tree 05ca3330e4b318afb9f9ca5c1d3e5cb6c0632c48\nparent 0982eab8394535b8f3c2a7d814f31c8c41fb3b96\nparent 90cf0cc6c2332cc40e22856a40af1b436baae84b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677092758 +0100\ncommitter GitHub <noreply@github.com> 1677092758 +0100\n\nRollup merge of #108176 - compiler-errors:bad-lexical-region-resolve-bug, r=oli-obk\n\nDon't delay `ReError` bug during lexical region resolve\n\nLexical region resolution returns a list of `RegionResolutionError` which don't necessarily correspond to diagnostics being emitted. The compiler may, validly, throw away these resolution errors and do something else. Therefore it's not valid to use `ReError` during lifetime resolution, since we may actually be on a totally fine compilation path.\n\nFor example, the `implied_bounds_entailment` lint runs region resolution twice, and only emits an error if it fails both times. If we delay a bug and create a `ReError` during this first run, then we will ICE.\n\nFixes #108170\n\n----\n\nSide-note: this is conceptually equivalent to how we can't necessarily delay bugs or create `ty::Error` during trait solving/fulfillment, since the compiler is allowed to throw away these fulfillment errors to do other things. It's only once we actually emit an error (`report_region_errors` / `report_fulfillment_errors`)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d9effc65cd928666081688dedae16aaa8979659", "html_url": "https://github.com/rust-lang/rust/commit/4d9effc65cd928666081688dedae16aaa8979659", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d9effc65cd928666081688dedae16aaa8979659/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0982eab8394535b8f3c2a7d814f31c8c41fb3b96", "url": "https://api.github.com/repos/rust-lang/rust/commits/0982eab8394535b8f3c2a7d814f31c8c41fb3b96", "html_url": "https://github.com/rust-lang/rust/commit/0982eab8394535b8f3c2a7d814f31c8c41fb3b96"}, {"sha": "90cf0cc6c2332cc40e22856a40af1b436baae84b", "url": "https://api.github.com/repos/rust-lang/rust/commits/90cf0cc6c2332cc40e22856a40af1b436baae84b", "html_url": "https://github.com/rust-lang/rust/commit/90cf0cc6c2332cc40e22856a40af1b436baae84b"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "e6b7602f334cb3db85c17b200cf7292e405c1901", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d9effc65cd928666081688dedae16aaa8979659/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9effc65cd928666081688dedae16aaa8979659/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=4d9effc65cd928666081688dedae16aaa8979659", "patch": "@@ -1046,7 +1046,7 @@ impl<'tcx> LexicalRegionResolutions<'tcx> {\n             ty::ReVar(rid) => match self.values[rid] {\n                 VarValue::Empty(_) => r,\n                 VarValue::Value(r) => r,\n-                VarValue::ErrorValue => tcx.mk_re_error_misc(),\n+                VarValue::ErrorValue => tcx.lifetimes.re_static,\n             },\n             _ => r,\n         };"}, {"sha": "f37b27a82b3637685649dcf00419e05aae654049", "filename": "tests/ui/regions/resolve-re-error-ice.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4d9effc65cd928666081688dedae16aaa8979659/tests%2Fui%2Fregions%2Fresolve-re-error-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d9effc65cd928666081688dedae16aaa8979659/tests%2Fui%2Fregions%2Fresolve-re-error-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fresolve-re-error-ice.rs?ref=4d9effc65cd928666081688dedae16aaa8979659", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+\n+// Allow this for now, can remove this UI test when this becomes a hard error.\n+#![allow(implied_bounds_entailment)]\n+\n+use std::collections::hash_map::{Keys, HashMap};\n+use std::marker::PhantomData;\n+\n+trait MapAssertion<'a, K, V, R> {\n+    fn key_set(&self) -> Subject<Keys<K, V>, (), R>;\n+}\n+\n+struct Subject<'a, T, V, R>(PhantomData<(&'a T, V, R)>);\n+\n+impl<'a, K, V, R> MapAssertion<'a, K, V, R> for Subject<'a, HashMap<K, V>, (), R>\n+{\n+    fn key_set(&self) -> Subject<'a, Keys<K, V>, (), R> {\n+        todo!()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e7003e1c32f6477b0314db23f7ca8105bd43560d", "filename": "tests/ui/regions/resolve-re-error-ice.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4d9effc65cd928666081688dedae16aaa8979659/tests%2Fui%2Fregions%2Fresolve-re-error-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d9effc65cd928666081688dedae16aaa8979659/tests%2Fui%2Fregions%2Fresolve-re-error-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fresolve-re-error-ice.stderr?ref=4d9effc65cd928666081688dedae16aaa8979659", "patch": "@@ -0,0 +1,15 @@\n+Future incompatibility report: Future breakage diagnostic:\n+warning: impl method assumes more implied bounds than the corresponding trait method\n+  --> $DIR/resolve-re-error-ice.rs:17:16\n+   |\n+LL |     fn key_set(&self) -> Subject<'a, Keys<K, V>, (), R> {\n+   |                ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace this type to make the impl signature compatible: `Subject<'_, std::collections::hash_map::Keys<'_, K, V>, (), R>`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #105572 <https://github.com/rust-lang/rust/issues/105572>\n+note: the lint level is defined here\n+  --> $DIR/resolve-re-error-ice.rs:4:10\n+   |\n+LL | #![allow(implied_bounds_entailment)]\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+"}]}