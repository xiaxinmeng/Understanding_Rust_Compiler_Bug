{"sha": "52da091ee687f3d065713626a10b4cc961f04f75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZGEwOTFlZTY4N2YzZDA2NTcxMzYyNmExMGI0Y2M5NjFmMDRmNzU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-08T21:59:24Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-09T14:18:05Z"}, "message": "Differentiate between tuple structs and tuple variants", "tree": {"sha": "cc392ecf4db7a75342ba0f0c7330b458eea4d127", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc392ecf4db7a75342ba0f0c7330b458eea4d127"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52da091ee687f3d065713626a10b4cc961f04f75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52da091ee687f3d065713626a10b4cc961f04f75", "html_url": "https://github.com/rust-lang/rust/commit/52da091ee687f3d065713626a10b4cc961f04f75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52da091ee687f3d065713626a10b4cc961f04f75/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efa62d66e36306fba6025528aee381dd165fa8bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/efa62d66e36306fba6025528aee381dd165fa8bd", "html_url": "https://github.com/rust-lang/rust/commit/efa62d66e36306fba6025528aee381dd165fa8bd"}], "stats": {"total": 84, "additions": 62, "deletions": 22}, "files": [{"sha": "b85738dd29a6d835255235d06e60be19bbb6341f", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52da091ee687f3d065713626a10b4cc961f04f75/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52da091ee687f3d065713626a10b4cc961f04f75/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=52da091ee687f3d065713626a10b4cc961f04f75", "patch": "@@ -287,7 +287,7 @@ impl<'hir> Map<'hir> {\n         self.definitions.def_index_to_hir_id(def_id.to_def_id().index)\n     }\n \n-    fn def_kind(&self, hir_id: HirId) -> Option<DefKind> {\n+    pub fn def_kind(&self, hir_id: HirId) -> Option<DefKind> {\n         let node = if let Some(node) = self.find(hir_id) {\n             node\n         } else {"}, {"sha": "629b8da355e2354a30a7c37a8f79dd4f673f8deb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/52da091ee687f3d065713626a10b4cc961f04f75/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52da091ee687f3d065713626a10b4cc961f04f75/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=52da091ee687f3d065713626a10b4cc961f04f75", "patch": "@@ -3839,6 +3839,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::FnDef(..) | ty::FnPtr(_) => {}\n             _ => return false,\n         }\n+        let hir = self.tcx.hir();\n \n         let sig = found.fn_sig(self.tcx);\n         let sig = self\n@@ -3849,25 +3850,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let (mut sugg_call, applicability) = if sig.inputs().is_empty() {\n                 (String::new(), Applicability::MachineApplicable)\n             } else {\n-                (\"...\".to_owned(), Applicability::HasPlaceholders)\n+                (\"...\".to_string(), Applicability::HasPlaceholders)\n             };\n             let mut msg = \"call this function\";\n             if let ty::FnDef(def_id, ..) = found.sty {\n-                match self.tcx.hir().get_if_local(def_id) {\n+                match hir.get_if_local(def_id) {\n                     Some(Node::Item(hir::Item {\n                         node: ItemKind::Fn(.., body_id),\n                         ..\n                     })) => {\n-                        let body = self.tcx.hir().body(*body_id);\n+                        let body = hir.body(*body_id);\n                         sugg_call = body.arguments.iter()\n-                            .map(|arg| hir::print::to_string(\n-                                hir::print::NO_ANN,\n-                                |s| s.print_pat(&arg.pat),\n-                            )).collect::<Vec<_>>().join(\", \");\n+                            .map(|arg| match &arg.pat.node {\n+                                hir::PatKind::Binding(_, _, ident, None) => ident.to_string(),\n+                                _ => \"_\".to_string(),\n+                            }).collect::<Vec<_>>().join(\", \");\n                     }\n-                    Some(Node::Ctor(hir::VariantData::Tuple(field, _))) => {\n-                        sugg_call = field.iter().map(|_| \"_\").collect::<Vec<_>>().join(\", \");\n-                        msg = \"instatiate this tuple struct\";\n+                    Some(Node::Ctor(hir::VariantData::Tuple(fields, _))) => {\n+                        sugg_call = fields.iter().map(|_| \"_\").collect::<Vec<_>>().join(\", \");\n+                        match hir.as_local_hir_id(def_id).and_then(|hir_id| hir.def_kind(hir_id)) {\n+                            Some(hir::def::DefKind::Ctor(hir::def::CtorOf::Variant, _)) => {\n+                                msg = \"instatiate this tuple variant\";\n+                            }\n+                            Some(hir::def::DefKind::Ctor(hir::def::CtorOf::Struct, _)) => {\n+                                msg = \"instatiate this tuple struct\";\n+                            }\n+                            _ => {}\n+                        }\n                     }\n                     _ => {}\n                 }"}, {"sha": "3e924f7d161bd05824a5b19b115eeb30ea11969e", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52da091ee687f3d065713626a10b4cc961f04f75/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52da091ee687f3d065713626a10b4cc961f04f75/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=52da091ee687f3d065713626a10b4cc961f04f75", "patch": "@@ -202,7 +202,7 @@ LL |         let _: Z = Z::Fn;\n    |                    ^^^^^\n    |                    |\n    |                    expected enum `m::n::Z`, found fn item\n-   |                    help: use parentheses to instatiate this tuple struct: `Z::Fn(_)`\n+   |                    help: use parentheses to instatiate this tuple variant: `Z::Fn(_)`\n    |\n    = note: expected type `m::n::Z`\n               found type `fn(u8) -> m::n::Z {m::n::Z::Fn}`\n@@ -232,7 +232,7 @@ LL |     let _: E = m::E::Fn;\n    |                ^^^^^^^^\n    |                |\n    |                expected enum `m::E`, found fn item\n-   |                help: use parentheses to instatiate this tuple struct: `m::E::Fn(_)`\n+   |                help: use parentheses to instatiate this tuple variant: `m::E::Fn(_)`\n    |\n    = note: expected type `m::E`\n               found type `fn(u8) -> m::E {m::E::Fn}`\n@@ -262,7 +262,7 @@ LL |     let _: E = E::Fn;\n    |                ^^^^^\n    |                |\n    |                expected enum `m::E`, found fn item\n-   |                help: use parentheses to instatiate this tuple struct: `E::Fn(_)`\n+   |                help: use parentheses to instatiate this tuple variant: `E::Fn(_)`\n    |\n    = note: expected type `m::E`\n               found type `fn(u8) -> m::E {m::E::Fn}`"}, {"sha": "838ef78e4fd6a2a9de496a24adfeaf63ea7586ae", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52da091ee687f3d065713626a10b4cc961f04f75/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52da091ee687f3d065713626a10b4cc961f04f75/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.rs?ref=52da091ee687f3d065713626a10b4cc961f04f75", "patch": "@@ -3,6 +3,10 @@ fn foo(a: usize, b: usize) -> usize { a }\n fn bar() -> usize { 42 }\n \n struct S(usize, usize);\n+enum E {\n+    A(usize),\n+    B { a: usize },\n+}\n struct V();\n \n trait T {\n@@ -17,4 +21,6 @@ fn main() {\n     let _: V = V; //~ ERROR mismatched types\n     let _: usize = T::baz; //~ ERROR mismatched types\n     let _: usize = T::bat; //~ ERROR mismatched types\n+    let _: E = E::A; //~ ERROR mismatched types\n+    let _: E = E::B; //~ ERROR expected value, found struct variant `E::B`\n }"}, {"sha": "cb128822fcce860fc2a6f3ab1188e76fe62e7edc", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/52da091ee687f3d065713626a10b4cc961f04f75/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52da091ee687f3d065713626a10b4cc961f04f75/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=52da091ee687f3d065713626a10b4cc961f04f75", "patch": "@@ -1,5 +1,14 @@\n+error[E0423]: expected value, found struct variant `E::B`\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:25:16\n+   |\n+LL |     let _: E = E::B;\n+   |                ^^^-\n+   |                |  |\n+   |                |  help: a tuple variant with a similar name exists: `A`\n+   |                did you mean `E::B { /* fields */ }`?\n+\n error[E0308]: mismatched types\n-  --> $DIR/fn-or-tuple-struct-without-args.rs:14:20\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:18:20\n    |\n LL | fn foo(a: usize, b: usize) -> usize { a }\n    | ----------------------------------- fn(usize, usize) -> usize {foo} defined here\n@@ -14,7 +23,7 @@ LL |     let _: usize = foo;\n               found type `fn(usize, usize) -> usize {foo}`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-or-tuple-struct-without-args.rs:15:16\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:19:16\n    |\n LL | struct S(usize, usize);\n    | ----------------------- fn(usize, usize) -> S {S} defined here\n@@ -29,7 +38,7 @@ LL |     let _: S = S;\n               found type `fn(usize, usize) -> S {S}`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-or-tuple-struct-without-args.rs:16:20\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:20:20\n    |\n LL | fn bar() -> usize { 42 }\n    | ----------------- fn() -> usize {bar} defined here\n@@ -44,7 +53,7 @@ LL |     let _: usize = bar;\n               found type `fn() -> usize {bar}`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-or-tuple-struct-without-args.rs:17:16\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:21:16\n    |\n LL | struct V();\n    | ----------- fn() -> V {V} defined here\n@@ -59,7 +68,7 @@ LL |     let _: V = V;\n               found type `fn() -> V {V}`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-or-tuple-struct-without-args.rs:18:20\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:22:20\n    |\n LL |     fn baz(x: usize, y: usize) -> usize { x }\n    |     ----------------------------------- fn(usize, usize) -> usize {<_ as T>::baz} defined here\n@@ -74,7 +83,7 @@ LL |     let _: usize = T::baz;\n               found type `fn(usize, usize) -> usize {<_ as T>::baz}`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-or-tuple-struct-without-args.rs:19:20\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:23:20\n    |\n LL |     fn bat() -> usize { 42 }\n    |     ----------------- fn() -> usize {<_ as T>::bat} defined here\n@@ -88,6 +97,22 @@ LL |     let _: usize = T::bat;\n    = note: expected type `usize`\n               found type `fn() -> usize {<_ as T>::bat}`\n \n-error: aborting due to 6 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:24:16\n+   |\n+LL |     A(usize),\n+   |     -------- fn(usize) -> E {E::A} defined here\n+...\n+LL |     let _: E = E::A;\n+   |                ^^^^\n+   |                |\n+   |                expected enum `E`, found fn item\n+   |                help: use parentheses to instatiate this tuple variant: `E::A(_)`\n+   |\n+   = note: expected type `E`\n+              found type `fn(usize) -> E {E::A}`\n+\n+error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0308, E0423.\n+For more information about an error, try `rustc --explain E0308`."}]}