{"sha": "802bb578e40111d08726bd5930b90f8873c94257", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMmJiNTc4ZTQwMTExZDA4NzI2YmQ1OTMwYjkwZjg4NzNjOTQyNTc=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-05-11T21:11:20Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-05-11T21:11:20Z"}, "message": "trans: Use CrateContext::empty_substs_for_def_id() instead of Substs::empty() where appropriate.", "tree": {"sha": "9f8cf520ed8e081f237ab29b17ad66e65fac8889", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f8cf520ed8e081f237ab29b17ad66e65fac8889"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/802bb578e40111d08726bd5930b90f8873c94257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/802bb578e40111d08726bd5930b90f8873c94257", "html_url": "https://github.com/rust-lang/rust/commit/802bb578e40111d08726bd5930b90f8873c94257", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/802bb578e40111d08726bd5930b90f8873c94257/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64bc3c266cf97e2050bcf3a8565c48a60ca1a762", "url": "https://api.github.com/repos/rust-lang/rust/commits/64bc3c266cf97e2050bcf3a8565c48a60ca1a762", "html_url": "https://github.com/rust-lang/rust/commit/64bc3c266cf97e2050bcf3a8565c48a60ca1a762"}], "stats": {"total": 66, "additions": 48, "deletions": 18}, "files": [{"sha": "b56027447a094271b42267199b2f2d4c7c37dc13", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/802bb578e40111d08726bd5930b90f8873c94257/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802bb578e40111d08726bd5930b90f8873c94257/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=802bb578e40111d08726bd5930b90f8873c94257", "patch": "@@ -494,7 +494,7 @@ fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         _ => bug!(\"expected fn item type, found {}\", ty)\n     };\n \n-    let instance = Instance::mono(ccx.tcx(), def_id);\n+    let instance = Instance::mono(ccx.shared(), def_id);\n     if let Some(&llfn) = ccx.instances().borrow().get(&instance) {\n         return immediate_rvalue(llfn, fn_ptr_ty);\n     }"}, {"sha": "d278c3c8320fdc243b383b2d36fd43dfd6b96242", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/802bb578e40111d08726bd5930b90f8873c94257/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802bb578e40111d08726bd5930b90f8873c94257/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=802bb578e40111d08726bd5930b90f8873c94257", "patch": "@@ -348,7 +348,7 @@ fn collect_items_rec<'a, 'tcx: 'a>(scx: &SharedCrateContext<'a, 'tcx>,\n             let mir = errors::expect(scx.sess().diagnostic(), scx.get_mir(def_id),\n                 || format!(\"Could not find MIR for static: {:?}\", def_id));\n \n-            let empty_substs = scx.tcx().mk_substs(Substs::empty());\n+            let empty_substs = scx.empty_substs_for_def_id(def_id);\n             let mut visitor = MirNeighborCollector {\n                 scx: scx,\n                 mir: &mir,\n@@ -496,10 +496,11 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                         .unwrap_or_else(|e| self.scx.sess().fatal(&e));\n \n                 assert!(can_have_local_instance(self.scx.tcx(), exchange_malloc_fn_def_id));\n+                let empty_substs = self.scx.empty_substs_for_def_id(exchange_malloc_fn_def_id);\n                 let exchange_malloc_fn_trans_item =\n                     create_fn_trans_item(self.scx.tcx(),\n                                          exchange_malloc_fn_def_id,\n-                                         self.scx.tcx().mk_substs(Substs::empty()),\n+                                         empty_substs,\n                                          self.param_substs);\n \n                 self.output.push(exchange_malloc_fn_trans_item);\n@@ -679,10 +680,11 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n                                          .unwrap_or_else(|e| scx.sess().fatal(&e));\n \n         assert!(can_have_local_instance(scx.tcx(), exchange_free_fn_def_id));\n+        let fn_substs = scx.empty_substs_for_def_id(exchange_free_fn_def_id);\n         let exchange_free_fn_trans_item =\n             create_fn_trans_item(scx.tcx(),\n                                  exchange_free_fn_def_id,\n-                                 scx.tcx().mk_substs(Substs::empty()),\n+                                 fn_substs,\n                                  scx.tcx().mk_substs(Substs::empty()));\n \n         output.push(exchange_free_fn_trans_item);\n@@ -1111,7 +1113,7 @@ impl<'b, 'a, 'v> hir_visit::Visitor<'v> for RootCollector<'b, 'a, 'v> {\n                     debug!(\"RootCollector: ItemFn({})\",\n                            def_id_to_string(self.scx.tcx(), def_id));\n \n-                    let instance = Instance::mono(self.scx.tcx(), def_id);\n+                    let instance = Instance::mono(self.scx, def_id);\n                     self.output.push(TransItem::Fn(instance));\n                 }\n             }\n@@ -1148,7 +1150,7 @@ impl<'b, 'a, 'v> hir_visit::Visitor<'v> for RootCollector<'b, 'a, 'v> {\n                     debug!(\"RootCollector: MethodImplItem({})\",\n                            def_id_to_string(self.scx.tcx(), def_id));\n \n-                    let instance = Instance::mono(self.scx.tcx(), def_id);\n+                    let instance = Instance::mono(self.scx, def_id);\n                     self.output.push(TransItem::Fn(instance));\n                 }\n             }"}, {"sha": "3e876eb3d7de079fc53d08ddd73d72711ac611b9", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/802bb578e40111d08726bd5930b90f8873c94257/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802bb578e40111d08726bd5930b90f8873c94257/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=802bb578e40111d08726bd5930b90f8873c94257", "patch": "@@ -1012,7 +1012,7 @@ pub fn get_static<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, def_id: DefId)\n                             -> Datum<'tcx, Lvalue> {\n     let ty = ccx.tcx().lookup_item_type(def_id).ty;\n \n-    let instance = Instance::mono(ccx.tcx(), def_id);\n+    let instance = Instance::mono(ccx.shared(), def_id);\n     if let Some(&g) = ccx.instances().borrow().get(&instance) {\n         return Datum::new(g, ty, Lvalue::new(\"static\"));\n     }"}, {"sha": "60c6af84ebbb6ecf8f56d1d1776a4cc19787614d", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/802bb578e40111d08726bd5930b90f8873c94257/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802bb578e40111d08726bd5930b90f8873c94257/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=802bb578e40111d08726bd5930b90f8873c94257", "patch": "@@ -488,6 +488,21 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n     pub fn translation_items(&self) -> &RefCell<FnvHashMap<TransItem<'tcx>, TransItemState>> {\n         &self.translation_items\n     }\n+\n+    /// Given the def-id of some item that has no type parameters, make\n+    /// a suitable \"empty substs\" for it.\n+    pub fn empty_substs_for_def_id(&self, item_def_id: DefId) -> &'tcx Substs<'tcx> {\n+        let scheme = self.tcx().lookup_item_type(item_def_id);\n+        self.empty_substs_for_scheme(&scheme)\n+    }\n+\n+    pub fn empty_substs_for_scheme(&self, scheme: &ty::TypeScheme<'tcx>)\n+                                   -> &'tcx Substs<'tcx> {\n+        assert!(scheme.generics.types.is_empty());\n+        self.tcx().mk_substs(\n+            Substs::new(VecPerParamSpace::empty(),\n+                        scheme.generics.regions.map(|_| ty::ReStatic)))\n+    }\n }\n \n impl<'tcx> LocalCrateContext<'tcx> {\n@@ -902,16 +917,12 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n     /// Given the def-id of some item that has no type parameters, make\n     /// a suitable \"empty substs\" for it.\n     pub fn empty_substs_for_def_id(&self, item_def_id: DefId) -> &'tcx Substs<'tcx> {\n-        let scheme = self.tcx().lookup_item_type(item_def_id);\n-        self.empty_substs_for_scheme(&scheme)\n+        self.shared().empty_substs_for_def_id(item_def_id)\n     }\n \n     pub fn empty_substs_for_scheme(&self, scheme: &ty::TypeScheme<'tcx>)\n                                    -> &'tcx Substs<'tcx> {\n-        assert!(scheme.generics.types.is_empty());\n-        self.tcx().mk_substs(\n-            Substs::new(VecPerParamSpace::empty(),\n-                        scheme.generics.regions.map(|_| ty::ReStatic)))\n+        self.shared().empty_substs_for_scheme(scheme)\n     }\n }\n "}, {"sha": "0403c7b1f757b89fb166b9744c869af6fa67627b", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/802bb578e40111d08726bd5930b90f8873c94257/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802bb578e40111d08726bd5930b90f8873c94257/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=802bb578e40111d08726bd5930b90f8873c94257", "patch": "@@ -854,6 +854,6 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n \n pub fn trans_static_initializer(ccx: &CrateContext, def_id: DefId)\n                                 -> Result<ValueRef, ConstEvalFailure> {\n-    let instance = Instance::mono(ccx.tcx(), def_id);\n+    let instance = Instance::mono(ccx.shared(), def_id);\n     MirConstContext::trans_def(ccx, instance, vec![]).map(|c| c.llval)\n }"}, {"sha": "dfaf84ecef02397faabed4ace6926b0140c51f97", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/802bb578e40111d08726bd5930b90f8873c94257/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802bb578e40111d08726bd5930b90f8873c94257/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=802bb578e40111d08726bd5930b90f8873c94257", "patch": "@@ -183,8 +183,8 @@ impl<'tcx> Instance<'tcx> {\n         assert!(substs.regions.iter().all(|&r| r == ty::ReStatic));\n         Instance { def: def_id, substs: substs }\n     }\n-    pub fn mono<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Instance<'tcx> {\n-        Instance::new(def_id, tcx.mk_substs(Substs::empty()))\n+    pub fn mono<'a>(scx: &SharedCrateContext<'a, 'tcx>, def_id: DefId) -> Instance<'tcx> {\n+        Instance::new(def_id, scx.empty_substs_for_def_id(def_id))\n     }\n }\n "}, {"sha": "284a227276dd0f2b2b1172bd169199b2f86e4f2b", "filename": "src/librustc_trans/symbol_names_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/802bb578e40111d08726bd5930b90f8873c94257/src%2Flibrustc_trans%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802bb578e40111d08726bd5930b90f8873c94257/src%2Flibrustc_trans%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsymbol_names_test.rs?ref=802bb578e40111d08726bd5930b90f8873c94257", "patch": "@@ -52,7 +52,7 @@ impl<'a, 'tcx> SymbolNamesTest<'a, 'tcx> {\n         for attr in tcx.get_attrs(def_id).iter() {\n             if attr.check_name(SYMBOL_NAME) {\n                 // for now, can only use on monomorphic names\n-                let instance = Instance::mono(tcx, def_id);\n+                let instance = Instance::mono(self.ccx.shared(), def_id);\n                 let name = symbol_names::exported_name(self.ccx, &instance);\n                 tcx.sess.span_err(attr.span, &format!(\"symbol-name({})\", name));\n             } else if attr.check_name(ITEM_PATH) {"}, {"sha": "d7c5c41a156ba4c239780301a87881fc42087953", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/802bb578e40111d08726bd5930b90f8873c94257/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802bb578e40111d08726bd5930b90f8873c94257/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=802bb578e40111d08726bd5930b90f8873c94257", "patch": "@@ -1,3 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Walks the crate looking for items/impl-items/trait-items that have\n+//! either a `rustc_symbol_name` or `rustc_item_path` attribute and\n+//! generates an error giving, respectively, the symbol name or\n+//! item-path. This is used for unit testing the code that generates\n+//! paths etc in all kinds of annoying scenarios.\n+\n use base::llvm_linkage_by_name;\n use glue::DropGlueKind;\n use llvm;\n@@ -333,7 +349,8 @@ impl<'tcx> TransItem<'tcx> {\n             },\n             TransItem::Static(node_id) => {\n                 let def_id = hir_map.local_def_id(node_id);\n-                let instance = Instance::mono(tcx, def_id);\n+                let empty_substs = tcx.mk_substs(subst::Substs::empty());\n+                let instance = Instance::new(def_id, empty_substs);\n                 to_string_internal(tcx, \"static \", instance)\n             },\n         };"}]}