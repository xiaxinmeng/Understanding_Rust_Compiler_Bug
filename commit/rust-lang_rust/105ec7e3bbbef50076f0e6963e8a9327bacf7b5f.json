{"sha": "105ec7e3bbbef50076f0e6963e8a9327bacf7b5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNWVjN2UzYmJiZWY1MDA3NmYwZTY5NjNlOGE5MzI3YmFjZjdiNWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-10T10:21:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-12T00:32:46Z"}, "message": "use obligations to propagate sub-typing instead of the TV code", "tree": {"sha": "f54223d1bf3625ca4153db54f3da5b3be18e2ca6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f54223d1bf3625ca4153db54f3da5b3be18e2ca6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/105ec7e3bbbef50076f0e6963e8a9327bacf7b5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/105ec7e3bbbef50076f0e6963e8a9327bacf7b5f", "html_url": "https://github.com/rust-lang/rust/commit/105ec7e3bbbef50076f0e6963e8a9327bacf7b5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/105ec7e3bbbef50076f0e6963e8a9327bacf7b5f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e4bdea0ae8b3b1995b002374db1a7b7639eb52d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4bdea0ae8b3b1995b002374db1a7b7639eb52d", "html_url": "https://github.com/rust-lang/rust/commit/4e4bdea0ae8b3b1995b002374db1a7b7639eb52d"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "1a94f12973de8a26d22de9e0fd8c062f4535d423", "filename": "src/librustc/infer/sub.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/105ec7e3bbbef50076f0e6963e8a9327bacf7b5f/src%2Flibrustc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/105ec7e3bbbef50076f0e6963e8a9327bacf7b5f/src%2Flibrustc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fsub.rs?ref=105ec7e3bbbef50076f0e6963e8a9327bacf7b5f", "patch": "@@ -12,8 +12,10 @@ use super::SubregionOrigin;\n use super::combine::CombineFields;\n use super::type_variable::{SubtypeOf, SupertypeOf};\n \n+use traits::Obligation;\n use ty::{self, Ty, TyCtxt};\n use ty::TyVar;\n+use ty::fold::TypeFoldable;\n use ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n use std::mem;\n \n@@ -79,10 +81,25 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n         let a = infcx.type_variables.borrow_mut().replace_if_possible(a);\n         let b = infcx.type_variables.borrow_mut().replace_if_possible(b);\n         match (&a.sty, &b.sty) {\n-            (&ty::TyInfer(TyVar(a_id)), &ty::TyInfer(TyVar(b_id))) => {\n-                infcx.type_variables\n-                    .borrow_mut()\n-                    .relate_vars(a_id, SubtypeOf, b_id);\n+            (&ty::TyInfer(TyVar(_)), &ty::TyInfer(TyVar(_))) => {\n+                // Shouldn't have any LBR here, so we can safely put\n+                // this under a binder below without fear of accidental\n+                // capture.\n+                assert!(!a.has_escaping_regions());\n+                assert!(!b.has_escaping_regions());\n+\n+                // can't make progress on `A <: B` if both A and B are\n+                // type variables, so record an obligation.\n+                self.fields.obligations.push(\n+                    Obligation::new(\n+                        self.fields.trace.cause.clone(),\n+                        ty::Predicate::Subtype(\n+                            ty::Binder(ty::SubtypePredicate {\n+                                a_is_expected: self.a_is_expected,\n+                                a,\n+                                b,\n+                            }))));\n+\n                 Ok(a)\n             }\n             (&ty::TyInfer(TyVar(a_id)), _) => {"}, {"sha": "ea243d65881ea23b2f2e0e0a2a587427839c9e70", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/105ec7e3bbbef50076f0e6963e8a9327bacf7b5f/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/105ec7e3bbbef50076f0e6963e8a9327bacf7b5f/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=105ec7e3bbbef50076f0e6963e8a9327bacf7b5f", "patch": "@@ -20,7 +20,8 @@ use hir::def_id::DefId;\n use middle::free_region::FreeRegionMap;\n use ty::subst::Substs;\n use ty::{self, Ty, TyCtxt, TypeFoldable, ToPredicate};\n-use infer::InferCtxt;\n+use ty::error::{ExpectedFound, TypeError};\n+use infer::{InferCtxt};\n \n use std::rc::Rc;\n use syntax::ast;\n@@ -214,6 +215,8 @@ pub struct FulfillmentError<'tcx> {\n pub enum FulfillmentErrorCode<'tcx> {\n     CodeSelectionError(SelectionError<'tcx>),\n     CodeProjectionError(MismatchedProjectionTypes<'tcx>),\n+    CodeSubtypeError(ExpectedFound<Ty<'tcx>>,\n+                     TypeError<'tcx>), // always comes from a SubtypePredicate\n     CodeAmbiguity,\n }\n "}, {"sha": "662b9e894ba3a0d9f51aa93a2f41ac57325ba70b", "filename": "src/test/compile-fail/issue-7813.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/105ec7e3bbbef50076f0e6963e8a9327bacf7b5f/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs", "raw_url": "https://github.com/rust-lang/rust/raw/105ec7e3bbbef50076f0e6963e8a9327bacf7b5f/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs?ref=105ec7e3bbbef50076f0e6963e8a9327bacf7b5f", "patch": "@@ -10,7 +10,6 @@\n \n fn main() {\n     let v = &[];\n-    let it = v.iter(); //~ ERROR type annotations needed [E0282]\n-                       //~| NOTE cannot infer type for `T`\n-                       //~| NOTE consider giving `it` a type\n+    //~^ NOTE consider giving `it` a type\n+    let it = v.iter(); //~ ERROR cannot infer type for `_`\n }"}]}