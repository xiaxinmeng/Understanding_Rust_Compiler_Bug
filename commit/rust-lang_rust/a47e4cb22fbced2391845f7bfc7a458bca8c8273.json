{"sha": "a47e4cb22fbced2391845f7bfc7a458bca8c8273", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0N2U0Y2IyMmZiY2VkMjM5MTg0NWY3YmZjN2E0NThiY2E4YzgyNzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-04T06:48:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-04T06:48:36Z"}, "message": "auto merge of #6229 : catamorphism/rust/warning-police, r=catamorphism", "tree": {"sha": "18f32cd44b67bf0678e5990ad199c566be5a0dfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18f32cd44b67bf0678e5990ad199c566be5a0dfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a47e4cb22fbced2391845f7bfc7a458bca8c8273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a47e4cb22fbced2391845f7bfc7a458bca8c8273", "html_url": "https://github.com/rust-lang/rust/commit/a47e4cb22fbced2391845f7bfc7a458bca8c8273", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a47e4cb22fbced2391845f7bfc7a458bca8c8273/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3ab74b8b933a1bc2c5f207ae5c023cf3e7aeb58", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ab74b8b933a1bc2c5f207ae5c023cf3e7aeb58", "html_url": "https://github.com/rust-lang/rust/commit/c3ab74b8b933a1bc2c5f207ae5c023cf3e7aeb58"}, {"sha": "2df8799f766c3a4871fe12761843ef9a5bc83659", "url": "https://api.github.com/repos/rust-lang/rust/commits/2df8799f766c3a4871fe12761843ef9a5bc83659", "html_url": "https://github.com/rust-lang/rust/commit/2df8799f766c3a4871fe12761843ef9a5bc83659"}], "stats": {"total": 43, "additions": 17, "deletions": 26}, "files": [{"sha": "fd695c16ea7cb9359408062a19a8bf7c4c3e70c4", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=a47e4cb22fbced2391845f7bfc7a458bca8c8273", "patch": "@@ -39,7 +39,7 @@ use result::Result;\n use comm::{stream, Chan, GenericChan, GenericPort, Port};\n use prelude::*;\n use result;\n-use task::rt::{task_id, sched_id, rust_task};\n+use task::rt::{task_id, sched_id};\n use util;\n use util::replace;\n use unstable::finally::Finally;"}, {"sha": "7cd218639c0a6ad1c923fc9b208a615b7c945279", "filename": "src/libcore/unstable/lang.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibcore%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibcore%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Flang.rs?ref=a47e4cb22fbced2391845f7bfc7a458bca8c8273", "patch": "@@ -17,7 +17,9 @@ use str;\n use sys;\n use unstable::exchange_alloc;\n use cast::transmute;\n+#[cfg(not(stage0))]\n use rt::{context, OldTaskContext};\n+#[cfg(not(stage0))]\n use rt::local_services::borrow_local_services;\n \n #[allow(non_camel_case_types)]"}, {"sha": "193f6fc8f0a3ba616e6cdd11caa0f3a2ee3f5adf", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=a47e4cb22fbced2391845f7bfc7a458bca8c8273", "patch": "@@ -196,7 +196,7 @@ fn get_metadata_section(os: os,\n         while llvm::LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) == False {\n             let name_buf = llvm::LLVMGetSectionName(si.llsi);\n             let name = unsafe { str::raw::from_c_str(name_buf) };\n-            debug!(\"get_matadata_section: name %s\", name);\n+            debug!(\"get_metadata_section: name %s\", name);\n             if name == read_meta_section_name(os) {\n                 let cbuf = llvm::LLVMGetSectionContents(si.llsi);\n                 let csz = llvm::LLVMGetSectionSize(si.llsi) as uint;"}, {"sha": "b8ab360b9e4e7a5e2a937404cb33f7e6da6541e9", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=a47e4cb22fbced2391845f7bfc7a458bca8c8273", "patch": "@@ -2096,8 +2096,7 @@ pub fn trans_tuple_struct(ccx: @CrateContext,\n }\n \n pub fn trans_enum_def(ccx: @CrateContext, enum_definition: &ast::enum_def,\n-                      id: ast::node_id,\n-                      path: @ast_map::path, vi: @~[ty::VariantInfo],\n+                      id: ast::node_id, vi: @~[ty::VariantInfo],\n                       i: &mut uint) {\n     for vec::each(enum_definition.variants) |variant| {\n         let disr_val = vi[*i].disr_val;\n@@ -2172,8 +2171,7 @@ pub fn trans_item(ccx: @CrateContext, item: &ast::item) {\n         if !generics.is_type_parameterized() {\n             let vi = ty::enum_variants(ccx.tcx, local_def(item.id));\n             let mut i = 0;\n-            trans_enum_def(ccx, enum_definition, item.id,\n-                           path, vi, &mut i);\n+            trans_enum_def(ccx, enum_definition, item.id, vi, &mut i);\n         }\n       }\n       ast::item_const(_, expr) => consts::trans_const(ccx, expr, item.id),\n@@ -2430,13 +2428,13 @@ pub fn get_item_val(ccx: @CrateContext, id: ast::node_id) -> ValueRef {\n       Some(&v) => v,\n       None => {\n         let mut exprt = false;\n-        let val = match *ccx.tcx.items.get(&id) {\n+        let val = match *tcx.items.get(&id) {\n           ast_map::node_item(i, pth) => {\n             let my_path = vec::append(/*bad*/copy *pth,\n                                       ~[path_name(i.ident)]);\n             match i.node {\n               ast::item_const(_, expr) => {\n-                let typ = ty::node_id_to_type(ccx.tcx, i.id);\n+                let typ = ty::node_id_to_type(tcx, i.id);\n                 let s = mangle_exported_name(ccx, my_path, typ);\n                 // We need the translated value here, because for enums the\n                 // LLVM type is not fully determined by the Rust type.\n@@ -2495,7 +2493,7 @@ pub fn get_item_val(ccx: @CrateContext, id: ast::node_id) -> ValueRef {\n                                 ni.attrs)\n                 }\n                 ast::foreign_item_const(*) => {\n-                    let typ = ty::node_id_to_type(ccx.tcx, ni.id);\n+                    let typ = ty::node_id_to_type(tcx, ni.id);\n                     let ident = ccx.sess.parse_sess.interner.get(ni.ident);\n                     let g = do str::as_c_str(*ident) |buf| {\n                         unsafe {\n@@ -2536,7 +2534,7 @@ pub fn get_item_val(ccx: @CrateContext, id: ast::node_id) -> ValueRef {\n             // Only register the constructor if this is a tuple-like struct.\n             match struct_def.ctor_id {\n                 None => {\n-                    ccx.tcx.sess.bug(~\"attempt to register a constructor of \\\n+                    tcx.sess.bug(~\"attempt to register a constructor of \\\n                                        a non-tuple-like struct\")\n                 }\n                 Some(ctor_id) => {"}, {"sha": "abf82c511e551ab17574c879c75b3b78a9f64133", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=a47e4cb22fbced2391845f7bfc7a458bca8c8273", "patch": "@@ -33,7 +33,7 @@ use core::to_bytes;\n use core::hashmap::{HashMap, HashSet};\n use std::smallintmap::SmallIntMap;\n use syntax::ast::*;\n-use syntax::ast_util::{is_local, local_def};\n+use syntax::ast_util::is_local;\n use syntax::ast_util;\n use syntax::attr;\n use syntax::codemap::span;"}, {"sha": "7a7dcbb8bfd8d06121a2ea671bd3056b4cc86469", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=a47e4cb22fbced2391845f7bfc7a458bca8c8273", "patch": "@@ -20,7 +20,6 @@\n #[allow(non_implicitly_copyable_typarams)];\n #[allow(non_camel_case_types)];\n #[deny(deprecated_pattern)];\n-#[deny(deprecated_mode)];\n \n extern mod std(vers = \"0.7-pre\");\n extern mod syntax(vers = \"0.7-pre\");"}, {"sha": "67b5e5e654ad0c552a97bb7a264145e5a84b0e98", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=a47e4cb22fbced2391845f7bfc7a458bca8c8273", "patch": "@@ -33,7 +33,6 @@\n // to waste time running the destructors of POD.\n \n use list::{MutList, MutCons, MutNil};\n-use list;\n \n use core::at_vec;\n use core::cast::{transmute, transmute_mut_region};\n@@ -79,7 +78,7 @@ struct Chunk {\n }\n \n pub struct Arena {\n-    // The head is seperated out from the list as a unbenchmarked\n+    // The head is separated out from the list as a unbenchmarked\n     // microoptimization, to avoid needing to case on the list to\n     // access the head.\n     priv head: Chunk,"}, {"sha": "a0312849a35cbe0cb04d230a106e45b19fa43871", "filename": "src/libstd/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=a47e4cb22fbced2391845f7bfc7a458bca8c8273", "patch": "@@ -23,7 +23,7 @@\n \n use core::cast;\n use core::cell::Cell;\n-use core::comm::{ChanOne, PortOne, oneshot, send_one};\n+use core::comm::{PortOne, oneshot, send_one};\n use core::pipes::recv;\n use core::task;\n "}, {"sha": "6278db617c7da16bc193ef9526af649eaa7b05e2", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=a47e4cb22fbced2391845f7bfc7a458bca8c8273", "patch": "@@ -11,8 +11,6 @@\n //! High-level interface to libuv's TCP functionality\n // FIXME #4425: Need FFI fixes\n \n-#[allow(deprecated_mode)];\n-\n use future;\n use future_spawn = future::spawn;\n use ip = net_ip;"}, {"sha": "ba3fd69e344c29f6ad56489144da25fae907299c", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=a47e4cb22fbced2391845f7bfc7a458bca8c8273", "patch": "@@ -10,8 +10,6 @@\n \n //! Types/fns concerning URLs (see RFC 3986)\n \n-#[allow(deprecated_mode)];\n-\n use core::cmp::Eq;\n use core::io::{Reader, ReaderUtil};\n use core::io;"}, {"sha": "f44d143004ede756dd9a522f8104f24f7da19d17", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=a47e4cb22fbced2391845f7bfc7a458bca8c8273", "patch": "@@ -8,16 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(deprecated_mode)];\n-\n use json;\n use sha1;\n use serialize::{Encoder, Encodable, Decoder, Decodable};\n use sort;\n \n use core::cell::Cell;\n use core::cmp;\n-use core::comm::{ChanOne, PortOne, oneshot, send_one};\n+use core::comm::{PortOne, oneshot, send_one};\n use core::either::{Either, Left, Right};\n use core::hashmap::HashMap;\n use core::io;"}, {"sha": "a6528160398e88b2aa8a8dace5cc63a492cf3b9d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a47e4cb22fbced2391845f7bfc7a458bca8c8273", "patch": "@@ -932,8 +932,8 @@ pub impl Parser {\n         loop {\n             match *self.token {\n                 token::MOD_SEP => {\n-                    match self.look_ahead(1u) {\n-                        token::IDENT(id,_) => {\n+                    match self.look_ahead(1) {\n+                        token::IDENT(*) => {\n                             self.bump();\n                             ids.push(self.parse_ident());\n                         }\n@@ -3693,7 +3693,7 @@ pub impl Parser {\n             items: _,\n             foreign_items: foreign_items\n         } = self.parse_foreign_items(first_item_attrs, true);\n-        let mut initial_attrs = attrs_remaining;\n+        let _initial_attrs = attrs_remaining;\n         assert!(*self.token == token::RBRACE);\n         ast::foreign_mod {\n             sort: sort,"}, {"sha": "cea3b20e97e7da67b0fa422c390726ea7a9af13d", "filename": "src/libsyntax/syntax.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibsyntax%2Fsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a47e4cb22fbced2391845f7bfc7a458bca8c8273/src%2Flibsyntax%2Fsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rc?ref=a47e4cb22fbced2391845f7bfc7a458bca8c8273", "patch": "@@ -22,7 +22,6 @@\n \n #[allow(vecs_implicitly_copyable)];\n #[allow(non_camel_case_types)];\n-#[deny(deprecated_mode)];\n #[deny(deprecated_pattern)];\n \n extern mod std(vers = \"0.7-pre\");"}]}