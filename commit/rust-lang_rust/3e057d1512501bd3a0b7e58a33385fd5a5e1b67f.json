{"sha": "3e057d1512501bd3a0b7e58a33385fd5a5e1b67f", "node_id": "C_kwDOAAsO6NoAKDNlMDU3ZDE1MTI1MDFiZDNhMGI3ZTU4YTMzMzg1ZmQ1YTVlMWI2N2Y", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-18T03:10:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-18T03:10:48Z"}, "message": "Rollup merge of #100669 - nnethercote:attribute-cleanups, r=spastorino\n\nAttribute cleanups\n\nr? `@ghost`", "tree": {"sha": "f6ca8313ab245e6b650556ff6c95a4e4f944283a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6ca8313ab245e6b650556ff6c95a4e4f944283a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi/a24CRBK7hj4Ov3rIwAAaYcIAG4CQifILI0oLUAK7+N11TS3\nwy1b2505LuI1IrF4wVolZOZmE3hymbi4C7I1ufUMX9Z2I8Vg8TrhiedGODbYDOAM\nq4Mi7exY0zoRLMbtBOppkbyYbE77o2tM4w/kwc6cYO/Uq6n/vbBCGFY3J1U3iD+C\nZ5dXzeOG8z5M64tz8Z53HTlqNjG3SRpCojbKlUkEaLnJ8fMV8HPsdVjnCfCng9YY\noPiWX7NVX60TX1FMtb154W8LrUoSQWTMNAxpPgX19pysVRkIgjQlwhcAkK9x0KBi\n/UOYSQz0FpwOVC2cWzJXyH97jAaSWi94Hrksr3pQ/jtz3Kot5hwF0Blqc+22i/8=\n=nI8a\n-----END PGP SIGNATURE-----\n", "payload": "tree f6ca8313ab245e6b650556ff6c95a4e4f944283a\nparent 8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1\nparent 52d8397985f8bbdc68e9b08f4cc80d6de5e916f8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660792248 +0200\ncommitter GitHub <noreply@github.com> 1660792248 +0200\n\nRollup merge of #100669 - nnethercote:attribute-cleanups, r=spastorino\n\nAttribute cleanups\n\nr? `@ghost`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f", "html_url": "https://github.com/rust-lang/rust/commit/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1", "html_url": "https://github.com/rust-lang/rust/commit/8b180ed3c02fdf988a3fb67f5ecb7dd3f2bc16d1"}, {"sha": "52d8397985f8bbdc68e9b08f4cc80d6de5e916f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/52d8397985f8bbdc68e9b08f4cc80d6de5e916f8", "html_url": "https://github.com/rust-lang/rust/commit/52d8397985f8bbdc68e9b08f4cc80d6de5e916f8"}], "stats": {"total": 35, "additions": 6, "deletions": 29}, "files": [{"sha": "77e0b6c55a80e5a03ee4afa671ed641c7a82f858", "filename": "compiler/rustc_builtin_macros/src/deriving/bounds.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs?ref=3e057d1512501bd3a0b7e58a33385fd5a5e1b67f", "patch": "@@ -15,7 +15,6 @@ pub fn expand_deriving_copy(\n ) {\n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: path_std!(marker::Copy),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "ee4c5aea1a3528001aaa1c93dd163134211fe751", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=3e057d1512501bd3a0b7e58a33385fd5a5e1b67f", "patch": "@@ -71,7 +71,6 @@ pub fn expand_deriving_clone(\n     let attrs = vec![cx.attribute(inline)];\n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: path_std!(clone::Clone),\n         additional_bounds: bounds,\n         generics: Bounds::empty(),"}, {"sha": "f99ee8cb2d53c1b5b7a9167ed125a1108c1753f6", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=3e057d1512501bd3a0b7e58a33385fd5a5e1b67f", "patch": "@@ -23,7 +23,6 @@ pub fn expand_deriving_eq(\n     let attrs = vec![cx.attribute(inline), cx.attribute(doc), cx.attribute(no_coverage)];\n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: path_std!(cmp::Eq),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "8aa16dfeb0f1f3e56dd4ba935e3c6a8997cb1b71", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/ord.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs?ref=3e057d1512501bd3a0b7e58a33385fd5a5e1b67f", "patch": "@@ -18,7 +18,6 @@ pub fn expand_deriving_ord(\n     let attrs = vec![cx.attribute(inline)];\n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: path_std!(cmp::Ord),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "73be9362e4eb47eea4eedeb56ee3104c137df76a", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=3e057d1512501bd3a0b7e58a33385fd5a5e1b67f", "patch": "@@ -98,7 +98,6 @@ pub fn expand_deriving_partial_eq(\n \n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: path_std!(cmp::PartialEq),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "137c779f81b842ae83a6ed9316395e80d4d1db63", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=3e057d1512501bd3a0b7e58a33385fd5a5e1b67f", "patch": "@@ -36,7 +36,6 @@ pub fn expand_deriving_partial_ord(\n \n     let trait_def = TraitDef {\n         span,\n-        attributes: vec![],\n         path: path_std!(cmp::PartialOrd),\n         additional_bounds: vec![],\n         generics: Bounds::empty(),"}, {"sha": "f82175af4f6f22f549689c27e586b82ab64bc5b9", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=3e057d1512501bd3a0b7e58a33385fd5a5e1b67f", "patch": "@@ -19,7 +19,6 @@ pub fn expand_deriving_debug(\n \n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: path_std!(fmt::Debug),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "47da0862b52fcd0306d060b91daeaa9f54f19686", "filename": "compiler/rustc_builtin_macros/src/deriving/decodable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs?ref=3e057d1512501bd3a0b7e58a33385fd5a5e1b67f", "patch": "@@ -22,7 +22,6 @@ pub fn expand_deriving_rustc_decodable(\n \n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: Path::new_(vec![krate, sym::Decodable], vec![], PathKind::Global),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "a431832080c0c1353eabf39d290b47c37332e43e", "filename": "compiler/rustc_builtin_macros/src/deriving/default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs?ref=3e057d1512501bd3a0b7e58a33385fd5a5e1b67f", "patch": "@@ -25,7 +25,6 @@ pub fn expand_deriving_default(\n     let attrs = vec![cx.attribute(inline)];\n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: Path::new(vec![kw::Default, sym::Default]),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "d43c66a5fa644c373c499616aa64b3ccadc8673e", "filename": "compiler/rustc_builtin_macros/src/deriving/encodable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs?ref=3e057d1512501bd3a0b7e58a33385fd5a5e1b67f", "patch": "@@ -106,7 +106,6 @@ pub fn expand_deriving_rustc_encodable(\n \n     let trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path: Path::new_(vec![krate, sym::Encodable], vec![], PathKind::Global),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "9882f7958aaa5a2e2b9d80e2a5f9dbb8ee0063b7", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=3e057d1512501bd3a0b7e58a33385fd5a5e1b67f", "patch": "@@ -184,8 +184,6 @@ pub struct TraitDef<'a> {\n     /// The span for the current #[derive(Foo)] header.\n     pub span: Span,\n \n-    pub attributes: Vec<ast::Attribute>,\n-\n     /// Path of the trait, including any type parameters\n     pub path: Path,\n \n@@ -605,7 +603,7 @@ impl<'a> TraitDef<'a> {\n                         param.bounds.iter().cloned()\n                     ).collect();\n \n-                cx.typaram(param.ident.span.with_ctxt(ctxt), param.ident, vec![], bounds, None)\n+                cx.typaram(param.ident.span.with_ctxt(ctxt), param.ident, bounds, None)\n             }\n             GenericParamKind::Const { ty, kw_span, .. } => {\n                 let const_nodefault_kind = GenericParamKind::Const {\n@@ -718,15 +716,13 @@ impl<'a> TraitDef<'a> {\n         let self_type = cx.ty_path(path);\n \n         let attr = cx.attribute(cx.meta_word(self.span, sym::automatically_derived));\n+        let attrs = vec![attr];\n         let opt_trait_ref = Some(trait_ref);\n \n-        let mut a = vec![attr];\n-        a.extend(self.attributes.iter().cloned());\n-\n         cx.item(\n             self.span,\n             Ident::empty(),\n-            a,\n+            attrs,\n             ast::ItemKind::Impl(Box::new(ast::Impl {\n                 unsafety: ast::Unsafe::No,\n                 polarity: ast::ImplPolarity::Positive,"}, {"sha": "36e2e29308694741deece6a0106b538a29ddc8b3", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/ty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs?ref=3e057d1512501bd3a0b7e58a33385fd5a5e1b67f", "patch": "@@ -146,7 +146,6 @@ fn mk_ty_param(\n     cx: &ExtCtxt<'_>,\n     span: Span,\n     name: Symbol,\n-    attrs: &[ast::Attribute],\n     bounds: &[Path],\n     self_ident: Ident,\n     self_generics: &Generics,\n@@ -158,7 +157,7 @@ fn mk_ty_param(\n             cx.trait_bound(path)\n         })\n         .collect();\n-    cx.typaram(span, Ident::new(name, span), attrs.to_owned(), bounds, None)\n+    cx.typaram(span, Ident::new(name, span), bounds, None)\n }\n \n /// Bounds on type parameters.\n@@ -183,7 +182,7 @@ impl Bounds {\n             .iter()\n             .map(|t| {\n                 let (name, ref bounds) = *t;\n-                mk_ty_param(cx, span, name, &[], &bounds, self_ty, self_generics)\n+                mk_ty_param(cx, span, name, &bounds, self_ty, self_generics)\n             })\n             .collect();\n "}, {"sha": "9aa170bec14d8bd8e736972fcec6d365e94f451c", "filename": "compiler/rustc_builtin_macros/src/deriving/hash.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs?ref=3e057d1512501bd3a0b7e58a33385fd5a5e1b67f", "patch": "@@ -21,7 +21,6 @@ pub fn expand_deriving_hash(\n     let arg = Path::new_local(typaram);\n     let hash_trait_def = TraitDef {\n         span,\n-        attributes: Vec::new(),\n         path,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),"}, {"sha": "0440bca53b232c3ab0be43a664db9326cb36679a", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=3e057d1512501bd3a0b7e58a33385fd5a5e1b67f", "patch": "@@ -107,14 +107,13 @@ impl<'a> ExtCtxt<'a> {\n         &self,\n         span: Span,\n         ident: Ident,\n-        attrs: Vec<ast::Attribute>,\n         bounds: ast::GenericBounds,\n         default: Option<P<ast::Ty>>,\n     ) -> ast::GenericParam {\n         ast::GenericParam {\n             ident: ident.with_span_pos(span),\n             id: ast::DUMMY_NODE_ID,\n-            attrs: attrs.into(),\n+            attrs: AttrVec::new(),\n             bounds,\n             kind: ast::GenericParamKind::Type { default },\n             is_placeholder: false,"}, {"sha": "2a38713d43b8a082e025f6a4dc5938a99b354918", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e057d1512501bd3a0b7e58a33385fd5a5e1b67f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=3e057d1512501bd3a0b7e58a33385fd5a5e1b67f", "patch": "@@ -820,8 +820,6 @@ pub(crate) trait AttributesExt {\n \n     fn inner_docs(&self) -> bool;\n \n-    fn other_attrs(&self) -> Vec<ast::Attribute>;\n-\n     fn cfg(&self, tcx: TyCtxt<'_>, hidden_cfg: &FxHashSet<Cfg>) -> Option<Arc<Cfg>>;\n }\n \n@@ -848,10 +846,6 @@ impl AttributesExt for [ast::Attribute] {\n         self.iter().find(|a| a.doc_str().is_some()).map_or(true, |a| a.style == AttrStyle::Inner)\n     }\n \n-    fn other_attrs(&self) -> Vec<ast::Attribute> {\n-        self.iter().filter(|attr| attr.doc_str().is_none()).cloned().collect()\n-    }\n-\n     fn cfg(&self, tcx: TyCtxt<'_>, hidden_cfg: &FxHashSet<Cfg>) -> Option<Arc<Cfg>> {\n         let sess = tcx.sess;\n         let doc_cfg_active = tcx.features().doc_cfg;"}]}