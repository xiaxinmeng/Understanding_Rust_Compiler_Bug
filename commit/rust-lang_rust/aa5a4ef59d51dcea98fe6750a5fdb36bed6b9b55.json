{"sha": "aa5a4ef59d51dcea98fe6750a5fdb36bed6b9b55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNWE0ZWY1OWQ1MWRjZWE5OGZlNjc1MGE1ZmRiMzZiZWQ2YjliNTU=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-11-30T03:55:26Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-11-30T22:12:39Z"}, "message": "Removed feature gate.", "tree": {"sha": "8cf0ee078ea0ff1d35b285c31620a44bf6bad998", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cf0ee078ea0ff1d35b285c31620a44bf6bad998"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa5a4ef59d51dcea98fe6750a5fdb36bed6b9b55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa5a4ef59d51dcea98fe6750a5fdb36bed6b9b55", "html_url": "https://github.com/rust-lang/rust/commit/aa5a4ef59d51dcea98fe6750a5fdb36bed6b9b55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa5a4ef59d51dcea98fe6750a5fdb36bed6b9b55/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d09466ceb1374bd0ff1c490bfd50133b8ca67558", "url": "https://api.github.com/repos/rust-lang/rust/commits/d09466ceb1374bd0ff1c490bfd50133b8ca67558", "html_url": "https://github.com/rust-lang/rust/commit/d09466ceb1374bd0ff1c490bfd50133b8ca67558"}], "stats": {"total": 63, "additions": 10, "deletions": 53}, "files": [{"sha": "fdac1e3b8165239b744c51b95c7fe4415040f33c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aa5a4ef59d51dcea98fe6750a5fdb36bed6b9b55/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5a4ef59d51dcea98fe6750a5fdb36bed6b9b55/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=aa5a4ef59d51dcea98fe6750a5fdb36bed6b9b55", "patch": "@@ -2373,13 +2373,9 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         self.with_current_self_item(item, |this| {\n             this.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind), |this| {\n                 let item_def_id = this.definitions.local_def_id(item.id);\n-                if this.session.features_untracked().self_in_typedefs {\n-                    this.with_self_rib(Def::SelfTy(None, Some(item_def_id)), |this| {\n-                        visit::walk_item(this, item);\n-                    });\n-                } else {\n+                this.with_self_rib(Def::SelfTy(None, Some(item_def_id)), |this| {\n                     visit::walk_item(this, item);\n-                }\n+                });\n             });\n         });\n     }\n@@ -3185,16 +3181,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             if is_self_type(path, ns) {\n                 __diagnostic_used!(E0411);\n                 err.code(DiagnosticId::Error(\"E0411\".into()));\n-                let available_in = if this.session.features_untracked().self_in_typedefs {\n-                    \"impls, traits, and type definitions\"\n-                } else {\n-                    \"traits and impls\"\n-                };\n-                err.span_label(span, format!(\"`Self` is only available in {}\", available_in));\n-                if this.current_self_item.is_some() && nightly_options::is_nightly_build() {\n-                    err.help(\"add #![feature(self_in_typedefs)] to the crate attributes \\\n-                              to enable\");\n-                }\n+                err.span_label(span, format!(\"`Self` is only available in impls, traits, \\\n+                                              and type definitions\"));\n                 return (err, Vec::new());\n             }\n             if is_self_value(path, ns) {"}, {"sha": "dd61fd6826f13cff08a4293ee96c4301c966afe3", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aa5a4ef59d51dcea98fe6750a5fdb36bed6b9b55/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5a4ef59d51dcea98fe6750a5fdb36bed6b9b55/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=aa5a4ef59d51dcea98fe6750a5fdb36bed6b9b55", "patch": "@@ -462,9 +462,6 @@ declare_features! (\n     // Allows `use x::y;` to resolve through `self::x`, not just `::x`\n     (active, uniform_paths, \"1.30.0\", Some(53130), None),\n \n-    // Allows `Self` in type definitions\n-    (active, self_in_typedefs, \"1.30.0\", Some(49303), None),\n-\n     // Allows unsized rvalues at arguments and parameters\n     (active, unsized_locals, \"1.30.0\", Some(48055), None),\n \n@@ -672,21 +669,23 @@ declare_features! (\n     (accepted, extern_prelude, \"1.30.0\", Some(44660), None),\n     // Parentheses in patterns\n     (accepted, pattern_parentheses, \"1.31.0\", Some(51087), None),\n-    // Allows the definition of `const fn` functions.\n+    // Allows the definition of `const fn` functions\n     (accepted, min_const_fn, \"1.31.0\", Some(53555), None),\n     // Scoped lints\n     (accepted, tool_lints, \"1.31.0\", Some(44690), None),\n     // impl<I:Iterator> Iterator for &mut Iterator\n     // impl Debug for Foo<'_>\n     (accepted, impl_header_lifetime_elision, \"1.31.0\", Some(15872), None),\n-    // `extern crate foo as bar;` puts `bar` into extern prelude.\n+    // `extern crate foo as bar;` puts `bar` into extern prelude\n     (accepted, extern_crate_item_prelude, \"1.31.0\", Some(55599), None),\n     // Allows use of the :literal macro fragment specifier (RFC 1576)\n     (accepted, macro_literal_matcher, \"1.31.0\", Some(35625), None),\n     // Use `?` as the Kleene \"at most one\" operator\n     (accepted, macro_at_most_once_rep, \"1.32.0\", Some(48075), None),\n-    // Self struct constructor  (RFC 2302)\n+    // `Self` struct constructor (RFC 2302)\n     (accepted, self_struct_ctor, \"1.32.0\", Some(51994), None),\n+    // `Self` in type definitions (RFC 2300)\n+    (accepted, self_in_typedefs, \"1.32.0\", Some(49303), None),\n );\n \n // If you change this, please modify `src/doc/unstable-book` as well. You must"}, {"sha": "84a7e18f91ad2cbd70d036252e3a770f3ea2d14e", "filename": "src/test/run-pass/self/self-in-typedefs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa5a4ef59d51dcea98fe6750a5fdb36bed6b9b55/src%2Ftest%2Frun-pass%2Fself%2Fself-in-typedefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa5a4ef59d51dcea98fe6750a5fdb36bed6b9b55/src%2Ftest%2Frun-pass%2Fself%2Fself-in-typedefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself%2Fself-in-typedefs.rs?ref=aa5a4ef59d51dcea98fe6750a5fdb36bed6b9b55", "patch": "@@ -9,12 +9,11 @@\n // except according to those terms.\n \n // run-pass\n-#![allow(unions_with_drop_fields)]\n \n-#![feature(self_in_typedefs)]\n #![feature(untagged_unions)]\n \n #![allow(dead_code)]\n+#![allow(unions_with_drop_fields)]\n \n enum A<'a, T: 'a>\n where"}, {"sha": "4b476a0a645b1541900a37d9536985c75ceb5e98", "filename": "src/test/ui/feature-gates/feature-gate-self_in_typedefs.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d09466ceb1374bd0ff1c490bfd50133b8ca67558/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09466ceb1374bd0ff1c490bfd50133b8ca67558/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.rs?ref=d09466ceb1374bd0ff1c490bfd50133b8ca67558", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-enum StackList<'a, T: 'a> {\n-    Nil,\n-    Cons(T, &'a Self)\n-    //~^ ERROR cannot find type `Self` in this scope\n-    //~| `Self` is only available in traits and impls\n-}\n-\n-fn main() {}"}, {"sha": "ab04953f3e50c1f6943d8e3b656e886b490a362f", "filename": "src/test/ui/feature-gates/feature-gate-self_in_typedefs.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d09466ceb1374bd0ff1c490bfd50133b8ca67558/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d09466ceb1374bd0ff1c490bfd50133b8ca67558/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self_in_typedefs.stderr?ref=d09466ceb1374bd0ff1c490bfd50133b8ca67558", "patch": "@@ -1,11 +0,0 @@\n-error[E0411]: cannot find type `Self` in this scope\n-  --> $DIR/feature-gate-self_in_typedefs.rs:13:17\n-   |\n-LL |     Cons(T, &'a Self)\n-   |                 ^^^^ `Self` is only available in traits and impls\n-   |\n-   = help: add #![feature(self_in_typedefs)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0411`."}]}