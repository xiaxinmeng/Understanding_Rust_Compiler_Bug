{"sha": "1f5e9ff362042fe815fddfdaf211f782aa944229", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNWU5ZmYzNjIwNDJmZTgxNWZkZGZkYWYyMTFmNzgyYWE5NDQyMjk=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-13T21:45:57Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-15T02:15:54Z"}, "message": "convert ast::struct_def to a struct", "tree": {"sha": "e6797d32f60d32d862ad171c5beade22974f6a1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6797d32f60d32d862ad171c5beade22974f6a1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f5e9ff362042fe815fddfdaf211f782aa944229", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5e9ff362042fe815fddfdaf211f782aa944229", "html_url": "https://github.com/rust-lang/rust/commit/1f5e9ff362042fe815fddfdaf211f782aa944229", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f5e9ff362042fe815fddfdaf211f782aa944229/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "530a113bfa2702b415e38f3168d5c95ee1d93718", "url": "https://api.github.com/repos/rust-lang/rust/commits/530a113bfa2702b415e38f3168d5c95ee1d93718", "html_url": "https://github.com/rust-lang/rust/commit/530a113bfa2702b415e38f3168d5c95ee1d93718"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "8e24bd0f38e93bc0bac06e184320025de43af066", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5e9ff362042fe815fddfdaf211f782aa944229/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5e9ff362042fe815fddfdaf211f782aa944229/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1f5e9ff362042fe815fddfdaf211f782aa944229", "patch": "@@ -3798,7 +3798,9 @@ fn ty_dtor(cx: ctxt, struct_id: def_id) -> DtorKind {\n     if is_local(struct_id) {\n        match cx.items.find(struct_id.node) {\n            Some(ast_map::node_item(@ast::item {\n-               node: ast::item_struct(@{ dtor: Some(ref dtor), _ }, _),\n+               node: ast::item_struct(@ast::struct_def { dtor: Some(ref dtor),\n+                                                         _ },\n+                                      _),\n                _\n            }, _)) =>\n                LegacyDtor(local_def((*dtor).node.id)),"}, {"sha": "5d92ed14c18df6ddf7a55f4e30f38f04a3d35b2b", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f5e9ff362042fe815fddfdaf211f782aa944229/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5e9ff362042fe815fddfdaf211f782aa944229/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=1f5e9ff362042fe815fddfdaf211f782aa944229", "patch": "@@ -371,7 +371,7 @@ fn fold_struct(\n fn strip_struct_extra_stuff(item: @ast::item) -> @ast::item {\n     let node = match item.node {\n         ast::item_struct(def, tys) => {\n-            let def = @{\n+            let def = @ast::struct_def {\n                 dtor: None, // Remove the drop { } block\n                 .. *def\n             };"}, {"sha": "c185fd364828d3da70305ac5f67c7d37aea4389d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5e9ff362042fe815fddfdaf211f782aa944229/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5e9ff362042fe815fddfdaf211f782aa944229/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1f5e9ff362042fe815fddfdaf211f782aa944229", "patch": "@@ -1501,15 +1501,15 @@ impl struct_field_kind : cmp::Eq {\n \n #[auto_encode]\n #[auto_decode]\n-type struct_def = {\n+struct struct_def {\n     fields: ~[@struct_field], /* fields */\n     /* (not including ctor or dtor) */\n     /* dtor is optional */\n     dtor: Option<struct_dtor>,\n     /* ID of the constructor. This is only used for tuple- or enum-like\n      * structs. */\n     ctor_id: Option<node_id>\n-};\n+}\n \n /*\n   FIXME (#3300): Should allow items to be anonymous. Right now"}, {"sha": "2e9876e286171aeeae9ed8233800c5e16ff662a3", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5e9ff362042fe815fddfdaf211f782aa944229/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5e9ff362042fe815fddfdaf211f782aa944229/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=1f5e9ff362042fe815fddfdaf211f782aa944229", "patch": "@@ -141,7 +141,7 @@ fn expand_auto_encode(\n \n                     ~[filter_attrs(*item), ser_impl]\n                 },\n-                ast::item_struct(@{ fields, _}, tps) => {\n+                ast::item_struct(@ast::struct_def { fields, _}, tps) => {\n                     let ser_impl = mk_struct_ser_impl(\n                         cx,\n                         item.span,\n@@ -207,7 +207,7 @@ fn expand_auto_decode(\n \n                     ~[filter_attrs(*item), deser_impl]\n                 },\n-                ast::item_struct(@{ fields, _}, tps) => {\n+                ast::item_struct(@ast::struct_def { fields, _}, tps) => {\n                     let deser_impl = mk_struct_deser_impl(\n                         cx,\n                         item.span,"}, {"sha": "c6a8bf7bd085cd8308b5e7c9402265ce4463609f", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5e9ff362042fe815fddfdaf211f782aa944229/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5e9ff362042fe815fddfdaf211f782aa944229/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=1f5e9ff362042fe815fddfdaf211f782aa944229", "patch": "@@ -281,7 +281,7 @@ fn fold_struct_def(struct_def: @ast::struct_def, fld: ast_fold)\n                                             .. dtor.node},\n                   span: dtor.span }\n     };\n-    return @{\n+    return @ast::struct_def {\n         fields: vec::map(struct_def.fields, |f| fold_struct_field(*f, fld)),\n         dtor: dtor,\n         ctor_id: option::map(&struct_def.ctor_id, |cid| fld.new_id(*cid))\n@@ -582,7 +582,7 @@ fn noop_fold_variant(v: variant_, fld: ast_fold) -> variant_ {\n                                                     .. dtor.node},\n                           .. *dtor }\n             };\n-            kind = struct_variant_kind(@{\n+            kind = struct_variant_kind(@ast::struct_def {\n                 fields: vec::map(struct_def.fields,\n                                  |f| fld.fold_struct_field(*f)),\n                 dtor: dtor,"}, {"sha": "db2d951eafe4ed844211d39fb10b580cdc2e9b2f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f5e9ff362042fe815fddfdaf211f782aa944229/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f5e9ff362042fe815fddfdaf211f782aa944229/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1f5e9ff362042fe815fddfdaf211f782aa944229", "patch": "@@ -2844,7 +2844,7 @@ impl Parser {\n         let _ = self.get_id();  // XXX: Workaround for crazy bug.\n         let new_id = self.get_id();\n         (class_name,\n-         item_struct(@{\n+         item_struct(@ast::struct_def {\n              fields: fields,\n              dtor: actual_dtor,\n              ctor_id: if is_tuple_like { Some(new_id) } else { None }\n@@ -3340,7 +3340,7 @@ impl Parser {\n                       span: d_s }\n         };\n \n-        return @{\n+        return @ast::struct_def {\n             fields: fields,\n             dtor: actual_dtor,\n             ctor_id: None"}]}