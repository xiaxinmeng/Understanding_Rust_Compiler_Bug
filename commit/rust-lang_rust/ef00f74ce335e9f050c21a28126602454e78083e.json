{"sha": "ef00f74ce335e9f050c21a28126602454e78083e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMDBmNzRjZTMzNWU5ZjA1MGMyMWEyODEyNjYwMjQ1NGU3ODA4M2U=", "commit": {"author": {"name": "Valentine Valyaeff", "email": "valentine.valyaeff@gmail.com", "date": "2019-08-27T02:23:55Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-08-27T02:23:55Z"}, "message": "Merge imports fix (#3753)", "tree": {"sha": "86e9e6fdec658ff7750d35dbce5317350389335e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86e9e6fdec658ff7750d35dbce5317350389335e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef00f74ce335e9f050c21a28126602454e78083e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef00f74ce335e9f050c21a28126602454e78083e", "html_url": "https://github.com/rust-lang/rust/commit/ef00f74ce335e9f050c21a28126602454e78083e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef00f74ce335e9f050c21a28126602454e78083e/comments", "author": {"login": "valff", "id": 12503689, "node_id": "MDQ6VXNlcjEyNTAzNjg5", "avatar_url": "https://avatars.githubusercontent.com/u/12503689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/valff", "html_url": "https://github.com/valff", "followers_url": "https://api.github.com/users/valff/followers", "following_url": "https://api.github.com/users/valff/following{/other_user}", "gists_url": "https://api.github.com/users/valff/gists{/gist_id}", "starred_url": "https://api.github.com/users/valff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/valff/subscriptions", "organizations_url": "https://api.github.com/users/valff/orgs", "repos_url": "https://api.github.com/users/valff/repos", "events_url": "https://api.github.com/users/valff/events{/privacy}", "received_events_url": "https://api.github.com/users/valff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c26c0e5abf6b7730a6614ee8b448b0018336a285", "url": "https://api.github.com/repos/rust-lang/rust/commits/c26c0e5abf6b7730a6614ee8b448b0018336a285", "html_url": "https://github.com/rust-lang/rust/commit/c26c0e5abf6b7730a6614ee8b448b0018336a285"}], "stats": {"total": 100, "additions": 64, "deletions": 36}, "files": [{"sha": "9fd541c61d8754279786bc50963f9c1217b17067", "filename": "src/imports.rs", "status": "modified", "additions": 33, "deletions": 36, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/ef00f74ce335e9f050c21a28126602454e78083e/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef00f74ce335e9f050c21a28126602454e78083e/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=ef00f74ce335e9f050c21a28126602454e78083e", "patch": "@@ -573,56 +573,53 @@ impl UseTree {\n     }\n \n     fn merge(&mut self, other: &UseTree) {\n-        let mut new_path = vec![];\n-        for (a, b) in self\n-            .path\n-            .clone()\n-            .iter_mut()\n-            .zip(other.path.clone().into_iter())\n-        {\n-            if *a == b {\n-                new_path.push(b);\n+        let mut prefix = 0;\n+        for (a, b) in self.path.iter().zip(other.path.iter()) {\n+            if *a == *b {\n+                prefix += 1;\n             } else {\n                 break;\n             }\n         }\n-        if let Some(merged) = merge_rest(&self.path, &other.path, new_path.len()) {\n-            new_path.push(merged);\n+        if let Some(new_path) = merge_rest(&self.path, &other.path, prefix) {\n+            self.path = new_path;\n             self.span = self.span.to(other.span);\n         }\n-        self.path = new_path;\n     }\n }\n \n-fn merge_rest(a: &[UseSegment], b: &[UseSegment], len: usize) -> Option<UseSegment> {\n-    let a_rest = &a[len..];\n-    let b_rest = &b[len..];\n-    if a_rest.is_empty() && b_rest.is_empty() {\n+fn merge_rest(a: &[UseSegment], b: &[UseSegment], mut len: usize) -> Option<Vec<UseSegment>> {\n+    if a.len() == len && b.len() == len {\n         return None;\n     }\n-    if a_rest.is_empty() {\n-        return Some(UseSegment::List(vec![\n-            UseTree::from_path(vec![UseSegment::Slf(None)], DUMMY_SP),\n-            UseTree::from_path(b_rest.to_vec(), DUMMY_SP),\n-        ]));\n-    }\n-    if b_rest.is_empty() {\n-        return Some(UseSegment::List(vec![\n-            UseTree::from_path(vec![UseSegment::Slf(None)], DUMMY_SP),\n-            UseTree::from_path(a_rest.to_vec(), DUMMY_SP),\n-        ]));\n-    }\n-    if let UseSegment::List(mut list) = a_rest[0].clone() {\n-        merge_use_trees_inner(&mut list, UseTree::from_path(b_rest.to_vec(), DUMMY_SP));\n-        list.sort();\n-        return Some(UseSegment::List(list));\n+    if a.len() != len && b.len() != len {\n+        if let UseSegment::List(mut list) = a[len].clone() {\n+            merge_use_trees_inner(&mut list, UseTree::from_path(b[len..].to_vec(), DUMMY_SP));\n+            list.sort();\n+            let mut new_path = b[..len].to_vec();\n+            new_path.push(UseSegment::List(list));\n+            return Some(new_path);\n+        }\n+    } else if len == 1 {\n+        let rest = if a.len() == len { &b[1..] } else { &a[1..] };\n+        return Some(vec![\n+            b[0].clone(),\n+            UseSegment::List(vec![\n+                UseTree::from_path(vec![UseSegment::Slf(None)], DUMMY_SP),\n+                UseTree::from_path(rest.to_vec(), DUMMY_SP),\n+            ]),\n+        ]);\n+    } else {\n+        len -= 1;\n     }\n     let mut list = vec![\n-        UseTree::from_path(a_rest.to_vec(), DUMMY_SP),\n-        UseTree::from_path(b_rest.to_vec(), DUMMY_SP),\n+        UseTree::from_path(a[len..].to_vec(), DUMMY_SP),\n+        UseTree::from_path(b[len..].to_vec(), DUMMY_SP),\n     ];\n     list.sort();\n-    Some(UseSegment::List(list))\n+    let mut new_path = b[..len].to_vec();\n+    new_path.push(UseSegment::List(list));\n+    Some(new_path)\n }\n \n impl PartialOrd for UseSegment {\n@@ -989,7 +986,7 @@ mod test {\n         }\n \n         test_merge!([\"a::b::{c, d}\", \"a::b::{e, f}\"], [\"a::b::{c, d, e, f}\"]);\n-        test_merge!([\"a::b::c\", \"a::b\"], [\"a::b::{self, c}\"]);\n+        test_merge!([\"a::b::c\", \"a::b\"], [\"a::{b, b::c}\"]);\n         test_merge!([\"a::b\", \"a::b\"], [\"a::b\"]);\n         test_merge!([\"a\", \"a::b\", \"a::b::c\"], [\"a::{self, b::{self, c}}\"]);\n         test_merge!("}, {"sha": "e11d9ab062a755458e7dd1187c169f7edf37f0b4", "filename": "tests/source/issue-3750.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ef00f74ce335e9f050c21a28126602454e78083e/tests%2Fsource%2Fissue-3750.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef00f74ce335e9f050c21a28126602454e78083e/tests%2Fsource%2Fissue-3750.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3750.rs?ref=ef00f74ce335e9f050c21a28126602454e78083e", "patch": "@@ -0,0 +1,16 @@\n+// rustfmt-merge_imports: true\n+\n+pub mod foo {\n+    pub mod bar {\n+        pub struct Bar;\n+    }\n+\n+    pub fn bar() {}\n+}\n+\n+use foo::bar;\n+use foo::bar::Bar;\n+\n+fn main() {\n+    bar();\n+}"}, {"sha": "93d4dc6df253aa78cb652216ce5b2e76eacb2765", "filename": "tests/target/issue-3750.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ef00f74ce335e9f050c21a28126602454e78083e/tests%2Ftarget%2Fissue-3750.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef00f74ce335e9f050c21a28126602454e78083e/tests%2Ftarget%2Fissue-3750.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3750.rs?ref=ef00f74ce335e9f050c21a28126602454e78083e", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-merge_imports: true\n+\n+pub mod foo {\n+    pub mod bar {\n+        pub struct Bar;\n+    }\n+\n+    pub fn bar() {}\n+}\n+\n+use foo::{bar, bar::Bar};\n+\n+fn main() {\n+    bar();\n+}"}]}