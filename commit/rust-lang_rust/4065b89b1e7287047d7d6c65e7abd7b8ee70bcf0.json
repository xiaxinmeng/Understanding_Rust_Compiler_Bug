{"sha": "4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0", "node_id": "C_kwDOAAsO6NoAKDQwNjViODliMWU3Mjg3MDQ3ZDdkNmM2NWU3YWJkN2I4ZWU3MGJjZjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-27T08:53:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-27T08:53:24Z"}, "message": "Auto merge of #100946 - jyn514:query-system-3, r=cjgillot\n\nSimplify the arguments to macros generated by the `rustc_queries` proc macro\n\nVery small cleanup. Based on https://github.com/rust-lang/rust/pull/100436 which modifies some of the same code.\n\nr? `@cjgillot`", "tree": {"sha": "2032680763d0fabe8cd59c556be7f471f71ce50f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2032680763d0fabe8cd59c556be7f471f71ce50f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0", "html_url": "https://github.com/rust-lang/rust/commit/4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997", "html_url": "https://github.com/rust-lang/rust/commit/d0e1491ecd6ab30a47ebe29f8a86463eacc6a997"}, {"sha": "b061550ed351751db4bb3dcc356f44daa9a3542d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b061550ed351751db4bb3dcc356f44daa9a3542d", "html_url": "https://github.com/rust-lang/rust/commit/b061550ed351751db4bb3dcc356f44daa9a3542d"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "f93fe2d519508e1e301d75134b2a592ad8ae7d61", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0", "patch": "@@ -265,13 +265,13 @@ fn add_query_description_impl(query: &Query, impls: &mut proc_macro2::TokenStrea\n         let try_load_from_disk = if let Some((tcx, id, block)) = modifiers.load_cached.as_ref() {\n             // Use custom code to load the query from disk\n             quote! {\n-                const TRY_LOAD_FROM_DISK: Option<fn(QueryCtxt<$tcx>, SerializedDepNodeIndex) -> Option<Self::Value>>\n+                const TRY_LOAD_FROM_DISK: Option<fn(QueryCtxt<'tcx>, SerializedDepNodeIndex) -> Option<Self::Value>>\n                     = Some(|#tcx, #id| { #block });\n             }\n         } else {\n             // Use the default code to load the query from disk\n             quote! {\n-                const TRY_LOAD_FROM_DISK: Option<fn(QueryCtxt<$tcx>, SerializedDepNodeIndex) -> Option<Self::Value>>\n+                const TRY_LOAD_FROM_DISK: Option<fn(QueryCtxt<'tcx>, SerializedDepNodeIndex) -> Option<Self::Value>>\n                     = Some(|tcx, id| tcx.on_disk_cache().as_ref()?.try_load_query_result(*tcx, id));\n             }\n         };\n@@ -298,7 +298,7 @@ fn add_query_description_impl(query: &Query, impls: &mut proc_macro2::TokenStrea\n                 false\n             }\n \n-            const TRY_LOAD_FROM_DISK: Option<fn(QueryCtxt<$tcx>, SerializedDepNodeIndex) -> Option<Self::Value>> = None;\n+            const TRY_LOAD_FROM_DISK: Option<fn(QueryCtxt<'tcx>, SerializedDepNodeIndex) -> Option<Self::Value>> = None;\n         }\n     };\n \n@@ -307,7 +307,7 @@ fn add_query_description_impl(query: &Query, impls: &mut proc_macro2::TokenStrea\n \n     let desc = quote! {\n         #[allow(unused_variables)]\n-        fn describe(tcx: QueryCtxt<$tcx>, key: Self::Key) -> String {\n+        fn describe(tcx: QueryCtxt<'tcx>, key: Self::Key) -> String {\n             let (#tcx, #key) = (*tcx, key);\n             ::rustc_middle::ty::print::with_no_trimmed_paths!(\n                 format!(#desc)\n@@ -316,7 +316,7 @@ fn add_query_description_impl(query: &Query, impls: &mut proc_macro2::TokenStrea\n     };\n \n     impls.extend(quote! {\n-        (#name<$tcx:tt>) => {\n+        (#name) => {\n             #desc\n             #cache\n         };\n@@ -411,15 +411,15 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n     TokenStream::from(quote! {\n         #[macro_export]\n         macro_rules! rustc_query_append {\n-            ([$($macro:tt)*]) => {\n-                $($macro)* {\n+            ($macro:ident !) => {\n+                $macro! {\n                     #query_stream\n                 }\n             }\n         }\n         macro_rules! rustc_dep_node_append {\n-            ([$($macro:tt)*][$($other:tt)*]) => {\n-                $($macro)*(\n+            ($macro:ident! [$($other:tt)*]) => {\n+                $macro!(\n                     $($other)*\n \n                     #dep_node_def_stream\n@@ -428,8 +428,8 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n         }\n         #[macro_export]\n         macro_rules! rustc_cached_queries {\n-            ($($macro:tt)*) => {\n-                $($macro)*(#cached_queries);\n+            ( $macro:ident! ) => {\n+                $macro!(#cached_queries);\n             }\n         }\n         #[macro_export]"}, {"sha": "65fc8a2e9cf5a4413e309a96726c9ea85126aae2", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0", "patch": "@@ -179,7 +179,7 @@ macro_rules! define_dep_nodes {\n     );\n }\n \n-rustc_dep_node_append!([define_dep_nodes!][\n+rustc_dep_node_append!(define_dep_nodes![\n     // We use this for most things when incr. comp. is turned off.\n     [] Null,\n "}, {"sha": "5665bb866d46c68218d2cf9a09f7fd6a99d184d4", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0", "patch": "@@ -332,7 +332,7 @@ macro_rules! define_callbacks {\n // Queries marked with `fatal_cycle` do not need the latter implementation,\n // as they will raise an fatal error on query cycles instead.\n \n-rustc_query_append! { [define_callbacks!] }\n+rustc_query_append! { define_callbacks! }\n \n mod sealed {\n     use super::{DefId, LocalDefId};"}, {"sha": "8ea09880694eab7e4f57dbd735cf6d56322d0080", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0", "patch": "@@ -54,7 +54,7 @@ fn describe_as_module(def_id: LocalDefId, tcx: TyCtxt<'_>) -> String {\n     }\n }\n \n-rustc_query_append! { [define_queries!] }\n+rustc_query_append! { define_queries! }\n \n impl<'tcx> Queries<'tcx> {\n     // Force codegen in the dyn-trait transformation in this crate."}, {"sha": "eab627c5d4c27edde273635a053f246ccf31be51", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0", "patch": "@@ -339,7 +339,7 @@ macro_rules! define_queries {\n         }\n \n         impl<'tcx> QueryDescription<QueryCtxt<'tcx>> for queries::$name<'tcx> {\n-            rustc_query_description! { $name<'tcx> }\n+            rustc_query_description! { $name }\n \n             type Cache = query_storage::$name<'tcx>;\n "}, {"sha": "260af0d54081560e6c35e9fff98d248f862bb422", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=4065b89b1e7287047d7d6c65e7abd7b8ee70bcf0", "patch": "@@ -320,5 +320,5 @@ pub fn alloc_self_profile_query_strings(tcx: TyCtxt<'_>) {\n         }\n     }\n \n-    rustc_query_append! { [alloc_once!] }\n+    rustc_query_append! { alloc_once! }\n }"}]}