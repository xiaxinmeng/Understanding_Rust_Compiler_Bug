{"sha": "19c68f6392ffeb118612755946e2aeadd32bd8c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YzY4ZjYzOTJmZmViMTE4NjEyNzU1OTQ2ZTJhZWFkZDMyYmQ4YzA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-10T11:34:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-10T11:34:47Z"}, "message": "Merge #9838\n\n9838: internal: document codebase stance on using functional combinators r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d81bdbbbc03e47b8debeacdb2437f3bb3426a872", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d81bdbbbc03e47b8debeacdb2437f3bb3426a872"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19c68f6392ffeb118612755946e2aeadd32bd8c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhEmRYCRBK7hj4Ov3rIwAA9LkIACLazsB6Z1/UkExuktARp2vS\nefOI/0dKmuiLzLy9w8/O+t/BGhTalavNYm8b7BFVq9sHzo7ZpuzfSgTSaSDP9YUz\nOUIAUl3CJaIHqLX8Sx+E4ckz7ZZfeIvkgfzcJtsAxs9DJ6lV5fk88WWEuPap4XIT\nMct3T/r5J2U5SSvCXpYro0IeZxe9L1iGNmxtImN32dQ3fmDAxa1BhzCbqFZ8kjWN\nAyoZOmsmpLSQqw/xrD3mbCqxbFJvx2xFK4xdGbJA4EcYRDb7rgdrkaLmf7No5DMM\n1fJwXr6gHAWVXv7RUm0i5yntLDZVN229C03EAABQ4DWurJYDv6OfucYySVFxLMo=\n=l5la\n-----END PGP SIGNATURE-----\n", "payload": "tree d81bdbbbc03e47b8debeacdb2437f3bb3426a872\nparent f2246fecef40fb86806fbe440df3b1eeb19a0f34\nparent 967c088e01e3e2967ff8f17a020bc28b3afa17fb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1628595287 +0000\ncommitter GitHub <noreply@github.com> 1628595287 +0000\n\nMerge #9838\n\n9838: internal: document codebase stance on using functional combinators r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19c68f6392ffeb118612755946e2aeadd32bd8c0", "html_url": "https://github.com/rust-lang/rust/commit/19c68f6392ffeb118612755946e2aeadd32bd8c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19c68f6392ffeb118612755946e2aeadd32bd8c0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2246fecef40fb86806fbe440df3b1eeb19a0f34", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2246fecef40fb86806fbe440df3b1eeb19a0f34", "html_url": "https://github.com/rust-lang/rust/commit/f2246fecef40fb86806fbe440df3b1eeb19a0f34"}, {"sha": "967c088e01e3e2967ff8f17a020bc28b3afa17fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/967c088e01e3e2967ff8f17a020bc28b3afa17fb", "html_url": "https://github.com/rust-lang/rust/commit/967c088e01e3e2967ff8f17a020bc28b3afa17fb"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "9d90aa4ca9a0c81f5401e4f6056603a79a855913", "filename": "docs/dev/style.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/19c68f6392ffeb118612755946e2aeadd32bd8c0/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/19c68f6392ffeb118612755946e2aeadd32bd8c0/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=19c68f6392ffeb118612755946e2aeadd32bd8c0", "patch": "@@ -925,6 +925,31 @@ Don't use the `ref` keyword.\n Today, it is redundant.\n Between `ref` and mach ergonomics, the latter is more ergonomic in most cases, and is simpler (does not require a keyword).\n \n+## Functional Combinators\n+\n+Use high order monadic combinators like `map`, `then`, only when they are a natural choice, don't bend the code to fit into some combinator.\n+If writing a chain of combinators creates friction, replace them with control flow constructs: `for`, `if`, `match`.\n+Mostly avoid `bool::then` and `Option::filter`.\n+\n+```rust\n+// GOOD\n+if !x.cond() {\n+    return None;\n+}\n+Some(x)\n+\n+// BAD\n+Some(x).filter(|it| it.cond())\n+```\n+\n+This rule is more \"soft\" then others, and boils down mostly to taste.\n+The guiding principle behind this rule is that code should be dense in computation, and sparse in the number of expressions per line.\n+The second example contains *less* computation -- `filter` function is an indirection for `if`, it doesn't do any useful work by itself.\n+At the same time, it is more crowded -- it takes more time to visually scan it.\n+\n+**Rationale:** consistency, playing to language's strengths.\n+Rust has first-class support for imperative control flow constructs like `for` and `if`, while functions are less first-class due to lack of universal function type, currying, and non-first-class effects (`?`, `.await`).\n+\n ## Helper Functions\n \n Avoid creating singe-use helper functions:"}]}