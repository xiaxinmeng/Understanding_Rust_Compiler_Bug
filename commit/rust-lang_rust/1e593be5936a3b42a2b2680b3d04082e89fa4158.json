{"sha": "1e593be5936a3b42a2b2680b3d04082e89fa4158", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNTkzYmU1OTM2YTNiNDJhMmIyNjgwYjNkMDQwODJlODlmYTQxNTg=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2018-09-24T14:28:53Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2018-09-27T23:54:00Z"}, "message": "Remap only source files in the command line", "tree": {"sha": "c8c0e6bd79061ca75e28de8dd8aef95b31e62251", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8c0e6bd79061ca75e28de8dd8aef95b31e62251"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e593be5936a3b42a2b2680b3d04082e89fa4158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e593be5936a3b42a2b2680b3d04082e89fa4158", "html_url": "https://github.com/rust-lang/rust/commit/1e593be5936a3b42a2b2680b3d04082e89fa4158", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e593be5936a3b42a2b2680b3d04082e89fa4158/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d45f87701ce9926ecd4f4e01c4a60443227de62d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d45f87701ce9926ecd4f4e01c4a60443227de62d", "html_url": "https://github.com/rust-lang/rust/commit/d45f87701ce9926ecd4f4e01c4a60443227de62d"}], "stats": {"total": 71, "additions": 32, "deletions": 39}, "files": [{"sha": "27176a821b4affa6e50d8b0587cac045a1e14c1d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e593be5936a3b42a2b2680b3d04082e89fa4158/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e593be5936a3b42a2b2680b3d04082e89fa4158/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=1e593be5936a3b42a2b2680b3d04082e89fa4158", "patch": "@@ -980,6 +980,7 @@ pub fn enable_save_analysis(control: &mut CompileController) {\n                                 state.expanded_crate.unwrap(),\n                                 state.analysis.unwrap(),\n                                 state.crate_name.unwrap(),\n+                                state.input,\n                                 None,\n                                 DumpHandler::new(state.out_dir,\n                                                  state.crate_name.unwrap()))"}, {"sha": "278880b841d975e115316a8876f446891c61c5b1", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1e593be5936a3b42a2b2680b3d04082e89fa4158/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e593be5936a3b42a2b2680b3d04082e89fa4158/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=1e593be5936a3b42a2b2680b3d04082e89fa4158", "patch": "@@ -25,12 +25,12 @@\n \n use rustc::hir::def::Def as HirDef;\n use rustc::hir::def_id::DefId;\n+use rustc::session::config::Input;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n \n use std::path::Path;\n use std::env;\n-use std::fs;\n \n use syntax::ast::{self, Attribute, NodeId, PatKind, CRATE_NODE_ID};\n use syntax::parse::token;\n@@ -173,20 +173,13 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         self.dumper.crate_prelude(data);\n     }\n \n-    pub fn dump_compilation_options(&mut self, crate_name: &str) {\n-        // Apply possible `remap-path-prefix` remapping to the raw command\n-        let command = {\n-            let mapping = self.tcx.sess.source_map().path_mapping();\n-            let remap_arg = |x: &str| -> String {\n-                match fs::canonicalize(x) {\n-                    Ok(path) => mapping.map_prefix(path).0.to_str().unwrap().to_owned(),\n-                    Err(_) => x.to_owned(), // Probably not a path, ignore\n-                }\n-            };\n-\n+    pub fn dump_compilation_options(&mut self, input: &Input, crate_name: &str) {\n+        // Apply possible `remap-path-prefix` remapping to the input source file\n+        // (and don't include remapping args anymore)\n+        let (program, arguments) = {\n             let remap_arg_indices = {\n                 let mut indices = FxHashSet();\n-                // rustc args are guaranteed to be valid UTF-8 (checked early)\n+                // Args are guaranteed to be valid UTF-8 (checked early)\n                 for (i, e) in env::args().enumerate() {\n                     if e.starts_with(\"--remap-path-prefix=\") {\n                         indices.insert(i);\n@@ -198,26 +191,30 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                 indices\n             };\n \n-            let args = env::args()\n+            let mut args = env::args()\n                 .enumerate()\n                 .filter(|(i, _)| !remap_arg_indices.contains(i))\n-                .map(|(_, elem)| {\n-                    let mut arg = elem.splitn(2, '=');\n-                    match (arg.next(), arg.next()) {\n-                        // Apart from `--remap...`, in `a=b` args usually only\n-                        // `b` is a path (e.g. `--extern some_crate=/path/to..`)\n-                        (Some(a), Some(b)) => format!(\"{}={}\", a, remap_arg(b)),\n-                        (Some(a), _) => remap_arg(a),\n-                        _ => unreachable!(),\n+                .map(|(_, arg)| {\n+                    match input {\n+                        Input::File(ref path) if path == Path::new(&arg) => {\n+                            let mapped = &self.tcx.sess.local_crate_source_file;\n+                            mapped\n+                                .as_ref()\n+                                .unwrap()\n+                                .to_string_lossy()\n+                                .into()\n+                        },\n+                        _ => arg,\n                     }\n-                }).collect::<Vec<_>>();\n+                });\n \n-            args.as_slice().join(\" \")\n+            (args.next().unwrap(), args.collect())\n         };\n \n         let data = CompilationOptions {\n             directory: self.tcx.sess.working_dir.0.clone(),\n-            command,\n+            program,\n+            arguments,\n             output: self.save_ctxt.compilation_output(crate_name),\n         };\n "}, {"sha": "e092fc786dde9c514641f12564944af3e1346ff8", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1e593be5936a3b42a2b2680b3d04082e89fa4158/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e593be5936a3b42a2b2680b3d04082e89fa4158/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=1e593be5936a3b42a2b2680b3d04082e89fa4158", "patch": "@@ -46,7 +46,7 @@ use rustc::hir::def::Def as HirDef;\n use rustc::hir::Node;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::cstore::ExternCrate;\n-use rustc::session::config::{CrateType, OutputType};\n+use rustc::session::config::{CrateType, Input, OutputType};\n use rustc::ty::{self, TyCtxt};\n use rustc_typeck::hir_ty_to_ty;\n use rustc_codegen_utils::link::{filename_for_metadata, out_filename};\n@@ -74,7 +74,7 @@ use span_utils::SpanUtils;\n \n use rls_data::config::Config;\n use rls_data::{\n-    CrateSource, Def, DefKind, ExternalCrateData, GlobalCrateId, Impl, ImplKind, MacroRef, Ref,\n+    Def, DefKind, ExternalCrateData, GlobalCrateId, Impl, ImplKind, MacroRef, Ref,\n     RefKind, Relation, RelationKind, SpanData,\n };\n \n@@ -143,11 +143,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     continue;\n                 }\n             };\n-            let src = self.tcx.used_crate_source(n);\n             let lo_loc = self.span_utils.sess.source_map().lookup_char_pos(span.lo());\n-            let map_prefix = |path: &PathBuf| -> PathBuf {\n-                self.tcx.sess.source_map().path_mapping().map_prefix(path.to_owned()).0\n-            };\n \n             result.push(ExternalCrateData {\n                 // FIXME: change file_name field to PathBuf in rls-data\n@@ -158,11 +154,6 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     name: self.tcx.crate_name(n).to_string(),\n                     disambiguator: self.tcx.crate_disambiguator(n).to_fingerprint().as_value(),\n                 },\n-                source: CrateSource {\n-                    dylib: src.dylib.as_ref().map(|(path, _)| map_prefix(path)),\n-                    rlib: src.rlib.as_ref().map(|(path, _)| map_prefix(path)),\n-                    rmeta: src.rmeta.as_ref().map(|(path, _)| map_prefix(path)),\n-                }\n             });\n         }\n \n@@ -1046,6 +1037,7 @@ pub trait SaveHandler {\n         save_ctxt: SaveContext<'l, 'tcx>,\n         krate: &ast::Crate,\n         cratename: &str,\n+        input: &'l Input,\n     );\n }\n \n@@ -1111,13 +1103,14 @@ impl<'a> SaveHandler for DumpHandler<'a> {\n         save_ctxt: SaveContext<'l, 'tcx>,\n         krate: &ast::Crate,\n         cratename: &str,\n+        input: &'l Input,\n     ) {\n         let output = &mut self.output_file(&save_ctxt);\n         let mut dumper = JsonDumper::new(output, save_ctxt.config.clone());\n         let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n \n         visitor.dump_crate_info(cratename, krate);\n-        visitor.dump_compilation_options(cratename);\n+        visitor.dump_compilation_options(input, cratename);\n         visit::walk_crate(&mut visitor, krate);\n     }\n }\n@@ -1133,6 +1126,7 @@ impl<'b> SaveHandler for CallbackHandler<'b> {\n         save_ctxt: SaveContext<'l, 'tcx>,\n         krate: &ast::Crate,\n         cratename: &str,\n+        input: &'l Input,\n     ) {\n         // We're using the JsonDumper here because it has the format of the\n         // save-analysis results that we will pass to the callback. IOW, we are\n@@ -1143,7 +1137,7 @@ impl<'b> SaveHandler for CallbackHandler<'b> {\n         let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n \n         visitor.dump_crate_info(cratename, krate);\n-        visitor.dump_compilation_options(cratename);\n+        visitor.dump_compilation_options(input, cratename);\n         visit::walk_crate(&mut visitor, krate);\n     }\n }\n@@ -1153,6 +1147,7 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n     krate: &ast::Crate,\n     analysis: &'l ty::CrateAnalysis,\n     cratename: &str,\n+    input: &'l Input,\n     config: Option<Config>,\n     mut handler: H,\n ) {\n@@ -1170,7 +1165,7 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n             impl_counter: Cell::new(0),\n         };\n \n-        handler.save(save_ctxt, krate, cratename)\n+        handler.save(save_ctxt, krate, cratename, input)\n     })\n }\n "}]}