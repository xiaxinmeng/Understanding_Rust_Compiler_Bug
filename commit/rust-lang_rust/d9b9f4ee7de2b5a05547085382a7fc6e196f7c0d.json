{"sha": "d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YjlmNGVlN2RlMmI1YTA1NTQ3MDg1MzgyYTdmYzZlMTk2ZjdjMGQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-05-13T18:58:26Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-05-19T14:42:14Z"}, "message": "fix conflicts", "tree": {"sha": "12c7e4703910ca2f83f06fc30541c1029b61be3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12c7e4703910ca2f83f06fc30541c1029b61be3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d", "html_url": "https://github.com/rust-lang/rust/commit/d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ee2335bfcc6974e73b344b948b71cacc1fc5ea4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4", "html_url": "https://github.com/rust-lang/rust/commit/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "b8d8e6ad0a1b5c23755e27212c1bd246cbc73a86", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d", "patch": "@@ -543,7 +543,7 @@ impl<T: ?Sized> Drop for Rc<T> {\n         unsafe {\n             let ptr = *self._ptr;\n             if !(*(&ptr as *const _ as *const *const ())).is_null() &&\n-               ptr as usize != mem::POST_DROP_USIZE {\n+               ptr as *const () as usize != mem::POST_DROP_USIZE {\n                 self.dec_strong();\n                 if self.strong() == 0 {\n                     // destroy the contained object\n@@ -1051,7 +1051,7 @@ impl<T: ?Sized> Drop for Weak<T> {\n         unsafe {\n             let ptr = *self._ptr;\n             if !(*(&ptr as *const _ as *const *const ())).is_null() &&\n-               ptr as usize != mem::POST_DROP_USIZE {\n+               ptr as *const () as usize != mem::POST_DROP_USIZE {\n                 self.dec_weak();\n                 // the weak count starts at 1, and will only go to zero if all\n                 // the strong pointers have disappeared."}, {"sha": "e5c9a81818319c19b43701960e2fa616c60c508b", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d", "patch": "@@ -2048,9 +2048,8 @@ fn trans_imm_cast<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         } else { llsrc };\n     }\n \n-    let _icx = push_ctxt(\"trans_cast\");\n-    let mut bcx = bcx;\n-    let ccx = bcx.ccx();\n+    let _icx = push_ctxt(\"trans_cast\"); let mut bcx = bcx; let ccx =\n+    bcx.ccx();\n \n     let t_in = expr_ty_adjusted(bcx, expr);\n     let t_out = node_id_type(bcx, id);\n@@ -2080,7 +2079,9 @@ fn trans_imm_cast<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         } else {\n             // Return the address\n             return immediate_rvalue_bcx(bcx,\n-                                        Load(bcx, get_dataptr(bcx, datum.val)),\n+                                        PointerCast(bcx,\n+                                                    Load(bcx, get_dataptr(bcx, datum.val)),\n+                                                    ll_t_out),\n                                         t_out).to_expr_datumblock();\n         }\n     }"}, {"sha": "d5e3139016f211e0ebdc1ba5102f389fdc57f6a3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d", "patch": "@@ -528,6 +528,9 @@ fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             upvar::closure_analyze_fn(&fcx, fn_id, decl, body);\n             fcx.select_all_obligations_or_error();\n             fcx.check_casts();\n+\n+            fcx.select_all_obligations_or_error(); // Casts can introduce new obligations.\n+\n             regionck::regionck_fn(&fcx, fn_id, fn_span, decl, body);\n             writeback::resolve_type_vars_in_fn(&fcx, decl, body);\n         }"}, {"sha": "69ef5421377a321d18278b5d7a8107f96a1adf2b", "filename": "src/test/compile-fail/cast-rfc0401.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs?ref=d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d", "patch": "@@ -56,7 +56,8 @@ fn main()\n \n     let _ = 42usize as *const [u8]; //~ ERROR illegal cast\n     let _ = v as *const [u8]; //~ ERROR illegal cast\n-    let _ = fat_v as *const Foo; //~ ERROR illegal cast\n+    let _ = fat_v as *const Foo;\n+    //~^ ERROR `core::marker::Sized` is not implemented for the type `[u8]`\n     let _ = foo as *const str; //~ ERROR illegal cast\n     let _ = foo as *mut str; //~ ERROR illegal cast\n     let _ = main as *mut str; //~ ERROR illegal cast"}, {"sha": "25cab09b7cb497ff59f9b933ecb13b69e2b53a53", "filename": "src/test/compile-fail/fat-ptr-cast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs?ref=d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+trait Trait {}\n+\n // Make sure casts between thin-pointer <-> fat pointer obey RFC401\n fn main() {\n     let a: &[i32] = &[1, 2, 3];\n@@ -17,7 +19,7 @@ fn main() {\n \n     a as usize; //~ ERROR illegal cast\n     b as usize; //~ ERROR non-scalar cast\n-    p as usize; //~ ERROR illegal cast\n+    p as usize; //~ ERROR illegal cast; cast through a raw pointer\n \n     // #22955\n     q as *const [i32]; //~ ERROR illegal cast"}, {"sha": "ec4c84a1a6b5edecf7d6f7d44c2c45c290ecb272", "filename": "src/test/run-pass/cast-rfc0401.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs?ref=d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d", "patch": "@@ -85,7 +85,9 @@ fn main()\n     assert_eq!(w as usize, lsz);\n \n     // ptr-ptr-cast (fat->thin)\n-    let u: *const [u8] = unsafe{&*p};    assert_eq!(u as *const u8, p as *const u8);\n+    let u: *const [u8] = unsafe{&*p};\n+    assert_eq!(u as *const u8, p as *const u8);\n+    assert_eq!(u as *const u16, p as *const u16);\n \n     // ptr-ptr-cast (both vk=Length)\n     let mut l : [u8; 2] = [0,1];"}, {"sha": "91637d111fe4f41d43e1399315ef32ca2a162b4a", "filename": "src/test/run-pass/fat-ptr-cast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d/src%2Ftest%2Frun-pass%2Ffat-ptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d/src%2Ftest%2Frun-pass%2Ffat-ptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffat-ptr-cast.rs?ref=d9b9f4ee7de2b5a05547085382a7fc6e196f7c0d", "patch": "@@ -32,18 +32,18 @@ fn main() {\n     // Test conversion to an address (usize).\n     let a: *const [i32; 3] = &[1, 2, 3];\n     let b: *const [i32] = a;\n-    assert!(a as usize == b as usize);\n+    assert!(a as usize == b as *const () as usize);\n \n     // And conversion to a void pointer/address for trait objects too.\n     let a: *mut Foo = &mut Bar;\n     let b = a as *mut ();\n-    let c = a as usize;\n-\n+    let c = a as *const () as usize;\n     let d = unsafe {\n         let r: raw::TraitObject = mem::transmute(a);\n         r.data\n     };\n \n     assert!(b == d);\n     assert!(c == d as usize);\n+\n }"}]}