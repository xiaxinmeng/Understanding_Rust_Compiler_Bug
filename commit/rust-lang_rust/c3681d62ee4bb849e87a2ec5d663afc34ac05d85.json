{"sha": "c3681d62ee4bb849e87a2ec5d663afc34ac05d85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNjgxZDYyZWU0YmI4NDllODdhMmVjNWQ2NjNhZmMzNGFjMDVkODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-27T00:05:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-27T00:05:57Z"}, "message": "Auto merge of #68122 - Centril:stabilize-transparent-enums, r=petrochenkov\n\nStabilize `#[repr(transparent)]` on `enum`s in Rust 1.42.0\n\n# Stabilization report\n\nThe following is the stabilization report for `#![feature(transparent_enums)]`.\n\nTracking issue: https://github.com/rust-lang/rust/issues/60405\n[Version target](https://forge.rust-lang.org/#current-release-versions): 1.42 (2020-01-30 => beta, 2020-03-12 => stable).\n\n## User guide\n\nA `struct` with only a single non-ZST field (let's call it `foo`) can be marked as `#[repr(transparent)]`. Such a `struct` has the same layout and ABI as `foo`. Here, we also extend this ability to `enum`s with only one variant, subject to the same restrictions as for the equivalent `struct`. That is, you can now write:\n\n```rust\n#[repr(transparent)]\nenum Foo { Bar(u8) }\n```\n\nwhich, in terms of layout and ABI, is equivalent to:\n\n```rust\n#[repr(transparent)]\nstruct Foo(u8);\n```\n\n## Motivation\n\nThis is not a major feature that will unlock new and important use-cases. The utility of `repr(transparent)` `enum`s is indeed limited. However, there is still some value in it:\n\n1. It provides conceptual simplification of the language in terms of treating univariant `enum`s and `struct`s the same, as both are product types. Indeed, languages like Haskell only have `data` as the only way to construct user-defined ADTs in the language.\n\n2. In rare occasions, it might be that the user started out with a univariant `enum` for whatever reason (e.g. they thought they might extend it later). Now they want to make this `enum` `transparent` without breaking users by turning it into a `struct`. By lifting the restriction here, now they can.\n\n## Technical specification\n\nThe reference specifies [`repr(transparent)` on a `struct`](https://doc.rust-lang.org/nightly/reference/type-layout.html#the-transparent-representation) as:\n\n> ### The transparent Representation\n>\n>  The `transparent` representation can only be used on `struct`s that have:\n>  - a single field with non-zero size, and\n>  - any number of fields with size 0 and alignment 1 (e.g. `PhantomData<T>`).\n>\n> Structs with this representation have the same layout and ABI as the single non-zero sized field.\n>\n> This is different than the `C` representation because a struct with the `C` representation will always have the ABI of a `C` `struct` while, for example, a struct with the `transparent` representation with a primitive field will have the ABI of the primitive field.\n>\n> Because this representation delegates type layout to another type, it cannot be used with any other representation.\n\nHere, we amend this to include univariant `enum`s as well with the same static restrictions and the same effects on dynamic semantics.\n\n## Tests\n\nAll the relevant tests are adjusted in the PR diff but are recounted here:\n\n- `src/test/ui/repr/repr-transparent.rs` checks that `repr(transparent)` on an `enum` must be univariant, rather than having zero or more than one variant. Restrictions on the fields inside the only variants, like for those on `struct`s, are also checked here.\n\n- A number of codegen tests are provided as well:\n    - `src/test/codegen/repr-transparent.rs` (the canonical test)\n    - `src/test/codegen/repr-transparent-aggregates-1.rs`\n    - `src/test/codegen/repr-transparent-aggregates-2.rs`\n    - `src/test/codegen/repr-transparent-aggregates-3.rs`\n\n- `src/test/ui/lint/lint-ctypes-enum.rs` tests the interactions with the `improper_ctypes` lint.\n\n## History\n\n- 2019-04-30, RFC https://github.com/rust-lang/rfcs/pull/2645\n  Author: @mjbshaw\n  Reviewers: The Language Team\n\n  This is the RFC that proposes allowing `#[repr(transparent)]` on `enum`s and `union`.\n\n- 2019-06-11, PR https://github.com/rust-lang/rust/pull/60463\n  Author: @mjbshaw\n  Reviewers: @varkor and @rkruppe\n\n  The PR implements the RFC aforementioned in full.\n\n- 2019, PR https://github.com/rust-lang/rust/pull/67323\n  Author: @Centril\n  Reviewers: @davidtwco\n\n  The PR reorganizes the static checks taking advantage of the fact that `struct`s and `union`s are internally represented as ADTs with a single variant.\n\n- This PR stabilizes `transparent_enums`.\n\n## Related / possible future work\n\nThe remaining work here is to figure out the semantics of `#[repr(transparent)]` on `union`s and stabilize those. This work continues to be tracked in https://github.com/rust-lang/rust/issues/60405.", "tree": {"sha": "489c1a73b8d3c876ff22802e3e7b928abd30a59b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/489c1a73b8d3c876ff22802e3e7b928abd30a59b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3681d62ee4bb849e87a2ec5d663afc34ac05d85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3681d62ee4bb849e87a2ec5d663afc34ac05d85", "html_url": "https://github.com/rust-lang/rust/commit/c3681d62ee4bb849e87a2ec5d663afc34ac05d85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a237641c7df8125b89b8f9c2a3594964ba8188f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a237641c7df8125b89b8f9c2a3594964ba8188f8", "html_url": "https://github.com/rust-lang/rust/commit/a237641c7df8125b89b8f9c2a3594964ba8188f8"}, {"sha": "25460ebef6ae94494fc89a736a2f51bef2ea55c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/25460ebef6ae94494fc89a736a2f51bef2ea55c3", "html_url": "https://github.com/rust-lang/rust/commit/25460ebef6ae94494fc89a736a2f51bef2ea55c3"}], "stats": {"total": 166, "additions": 33, "deletions": 133}, "files": [{"sha": "862411ab392031ee9315d4fc07edf5a61b04c6e9", "filename": "src/doc/unstable-book/src/language-features/transparent-enums.md", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftransparent-enums.md", "raw_url": "https://github.com/rust-lang/rust/raw/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftransparent-enums.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Ftransparent-enums.md?ref=a237641c7df8125b89b8f9c2a3594964ba8188f8", "patch": "@@ -1,93 +0,0 @@\n-# `transparent_enums`\n-\n-The tracking issue for this feature is [#60405]\n-\n-[60405]: https://github.com/rust-lang/rust/issues/60405\n-\n-----\n-\n-The `transparent_enums` feature allows you mark `enum`s as\n-`#[repr(transparent)]`. An `enum` may be `#[repr(transparent)]` if it has\n-exactly one variant, and that variant matches the same conditions which `struct`\n-requires for transparency. Some concrete illustrations follow.\n-\n-```rust\n-#![feature(transparent_enums)]\n-\n-// This enum has the same representation as `f32`.\n-#[repr(transparent)]\n-enum SingleFieldEnum {\n-    Variant(f32)\n-}\n-\n-// This enum has the same representation as `usize`.\n-#[repr(transparent)]\n-enum MultiFieldEnum {\n-    Variant { field: usize, nothing: () },\n-}\n-```\n-\n-For consistency with transparent `struct`s, `enum`s must have exactly one\n-non-zero-sized field. If all fields are zero-sized, the `enum` must not be\n-`#[repr(transparent)]`:\n-\n-```rust\n-#![feature(transparent_enums)]\n-\n-// This (non-transparent) enum is already valid in stable Rust:\n-pub enum GoodEnum {\n-    Nothing,\n-}\n-\n-// Error: transparent enum needs exactly one non-zero-sized field, but has 0\n-// #[repr(transparent)]\n-// pub enum BadEnum {\n-//     Nothing(()),\n-// }\n-\n-// Error: transparent enum needs exactly one non-zero-sized field, but has 0\n-// #[repr(transparent)]\n-// pub enum BadEmptyEnum {\n-//     Nothing,\n-// }\n-```\n-\n-The one exception is if the `enum` is generic over `T` and has a field of type\n-`T`, it may be `#[repr(transparent)]` even if `T` is a zero-sized type:\n-\n-```rust\n-#![feature(transparent_enums)]\n-\n-// This enum has the same representation as `T`.\n-#[repr(transparent)]\n-pub enum GenericEnum<T> {\n-    Variant(T, ()),\n-}\n-\n-// This is okay even though `()` is a zero-sized type.\n-pub const THIS_IS_OKAY: GenericEnum<()> = GenericEnum::Variant((), ());\n-```\n-\n-Transparent `enum`s require exactly one variant:\n-\n-```rust\n-// Error: transparent enum needs exactly one variant, but has 0\n-// #[repr(transparent)]\n-// pub enum TooFewVariants {\n-// }\n-\n-// Error: transparent enum needs exactly one variant, but has 2\n-// #[repr(transparent)]\n-// pub enum TooManyVariants {\n-//     First(usize),\n-//     Second,\n-// }\n-```\n-\n-Like transarent `struct`s, a transparent `enum` of type `E` has the same layout,\n-size, and ABI as its single non-ZST field. If it is generic over a type `T`, and\n-all its fields are ZSTs except for exactly one field of type `T`, then it has\n-the same layout and ABI as `T` (even if `T` is a ZST when monomorphized).\n-\n-Like transparent `struct`s, transparent `enum`s are FFI-safe if and only if\n-their underlying representation type is also FFI-safe."}, {"sha": "18dc3e30db1d4727b97dedb15d470da5017b29e5", "filename": "src/librustc_feature/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/src%2Flibrustc_feature%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/src%2Flibrustc_feature%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Faccepted.rs?ref=c3681d62ee4bb849e87a2ec5d663afc34ac05d85", "patch": "@@ -257,6 +257,8 @@ declare_features! (\n     /// Allows relaxing the coherence rules such that\n     /// `impl<T> ForeignTrait<LocalType> for ForeignType<T>` is permitted.\n     (accepted, re_rebalance_coherence, \"1.41.0\", Some(55437), None),\n+    /// Allows #[repr(transparent)] on univariant enums (RFC 2645).\n+    (accepted, transparent_enums, \"1.42.0\", Some(60405), None),\n     /// Allows using subslice patterns, `[a, .., b]` and `[a, xs @ .., b]`.\n     (accepted, slice_patterns, \"1.42.0\", Some(62254), None),\n "}, {"sha": "f20a57ea61c429745d4672981b220fb22c4a99aa", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=c3681d62ee4bb849e87a2ec5d663afc34ac05d85", "patch": "@@ -468,9 +468,6 @@ declare_features! (\n     /// Allows `if/while p && let q = r && ...` chains.\n     (active, let_chains, \"1.37.0\", Some(53667), None),\n \n-    /// Allows #[repr(transparent)] on enums (RFC 2645).\n-    (active, transparent_enums, \"1.37.0\", Some(60405), None),\n-\n     /// Allows #[repr(transparent)] on unions (RFC 2645).\n     (active, transparent_unions, \"1.37.0\", Some(60405), None),\n "}, {"sha": "1b60de92e4bc95df85f9bcd25d4640e960f18967", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c3681d62ee4bb849e87a2ec5d663afc34ac05d85", "patch": "@@ -2434,16 +2434,6 @@ fn check_transparent(tcx: TyCtxt<'_>, sp: Span, def_id: DefId) {\n     }\n     let sp = tcx.sess.source_map().def_span(sp);\n \n-    if adt.is_enum() && !tcx.features().transparent_enums {\n-        feature_err(\n-            &tcx.sess.parse_sess,\n-            sym::transparent_enums,\n-            sp,\n-            \"transparent enums are unstable\",\n-        )\n-        .emit();\n-    }\n-\n     if adt.is_union() && !tcx.features().transparent_unions {\n         feature_err(\n             &tcx.sess.parse_sess,"}, {"sha": "018a7ba4756a92ffaf0fabf457129891e36b071a", "filename": "src/test/codegen/repr-transparent-aggregates-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs?ref=c3681d62ee4bb849e87a2ec5d663afc34ac05d85", "patch": "@@ -10,7 +10,7 @@\n // ignore-windows\n // See repr-transparent.rs\n \n-#![feature(transparent_enums, transparent_unions)]\n+#![feature(transparent_unions)]\n \n #![crate_type=\"lib\"]\n "}, {"sha": "5669858672074da08a253cd89eb7624321c9c34e", "filename": "src/test/codegen/repr-transparent-aggregates-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs?ref=c3681d62ee4bb849e87a2ec5d663afc34ac05d85", "patch": "@@ -13,7 +13,7 @@\n // ignore-x86_64\n // See repr-transparent.rs\n \n-#![feature(transparent_enums, transparent_unions)]\n+#![feature(transparent_unions)]\n \n #![crate_type=\"lib\"]\n "}, {"sha": "e538be687801e67e6e07f1588121f3ef6f9cdb5d", "filename": "src/test/codegen/repr-transparent-aggregates-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs?ref=c3681d62ee4bb849e87a2ec5d663afc34ac05d85", "patch": "@@ -3,7 +3,7 @@\n // only-mips64\n // See repr-transparent.rs\n \n-#![feature(transparent_enums, transparent_unions)]\n+#![feature(transparent_unions)]\n \n #![crate_type=\"lib\"]\n "}, {"sha": "49fd015624ace3933affc473258e3f4a46f987a8", "filename": "src/test/codegen/repr-transparent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/src%2Ftest%2Fcodegen%2Frepr-transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/src%2Ftest%2Fcodegen%2Frepr-transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent.rs?ref=c3681d62ee4bb849e87a2ec5d663afc34ac05d85", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type=\"lib\"]\n-#![feature(repr_simd, transparent_enums, transparent_unions)]\n+#![feature(repr_simd, transparent_unions)]\n \n use std::marker::PhantomData;\n "}, {"sha": "0a7a73a168ed5b8d3ff968e017731f0ff2de08cd", "filename": "src/test/ui/feature-gates/feature-gate-transparent_enums.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_enums.rs?ref=a237641c7df8125b89b8f9c2a3594964ba8188f8", "patch": "@@ -1,6 +0,0 @@\n-#[repr(transparent)]\n-enum OkButUnstableEnum { //~ ERROR transparent enums are unstable\n-    Foo((), String, ()),\n-}\n-\n-fn main() {}"}, {"sha": "8e727c33f20f8eed16b7a87da713ddefa6f04122", "filename": "src/test/ui/feature-gates/feature-gate-transparent_enums.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a237641c7df8125b89b8f9c2a3594964ba8188f8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-transparent_enums.stderr?ref=a237641c7df8125b89b8f9c2a3594964ba8188f8", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: transparent enums are unstable\n-  --> $DIR/feature-gate-transparent_enums.rs:2:1\n-   |\n-LL | enum OkButUnstableEnum {\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/60405\n-   = help: add `#![feature(transparent_enums)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "ccda005575c6e6a5ee27209c50589ac1eda92f81", "filename": "src/test/ui/lint/lint-ctypes-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.rs?ref=c3681d62ee4bb849e87a2ec5d663afc34ac05d85", "patch": "@@ -1,4 +1,4 @@\n-#![feature(transparent_enums, transparent_unions)]\n+#![feature(transparent_unions)]\n #![feature(ptr_internals)]\n #![deny(improper_ctypes)]\n #![allow(dead_code)]"}, {"sha": "8fbdb4cc80b5e14bebc5fb9ac61b1841ddb11689", "filename": "src/test/ui/repr/repr-transparent.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.rs?ref=c3681d62ee4bb849e87a2ec5d663afc34ac05d85", "patch": "@@ -3,7 +3,7 @@\n // - repr-transparent-other-reprs.rs\n // - repr-transparent-other-items.rs\n \n-#![feature(repr_align, transparent_enums, transparent_unions)]\n+#![feature(transparent_unions)]\n \n use std::marker::PhantomData;\n \n@@ -60,6 +60,16 @@ enum TooManyVariants { //~ ERROR transparent enum needs exactly one variant, but\n     Bar,\n }\n \n+#[repr(transparent)]\n+enum NontrivialAlignZstEnum {\n+    Foo(u32, [u16; 0]), //~ ERROR alignment larger than 1\n+}\n+\n+#[repr(transparent)]\n+enum GenericAlignEnum<T> {\n+    Foo { bar: ZstAlign32<T>, baz: u32 } //~ ERROR alignment larger than 1\n+}\n+\n #[repr(transparent)]\n union UnitUnion { //~ ERROR transparent union needs exactly one non-zero-sized field, but has 0\n     u: (),"}, {"sha": "cbc74fbb6a2cf48b638f60fe14afbcdd8ddfceeb", "filename": "src/test/ui/repr/repr-transparent.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3681d62ee4bb849e87a2ec5d663afc34ac05d85/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-transparent.stderr?ref=c3681d62ee4bb849e87a2ec5d663afc34ac05d85", "patch": "@@ -94,14 +94,26 @@ LL |     Foo(String),\n LL |     Bar,\n    |     --- too many variants in `TooManyVariants`\n \n+error[E0691]: zero-sized field in transparent enum has alignment larger than 1\n+  --> $DIR/repr-transparent.rs:65:14\n+   |\n+LL |     Foo(u32, [u16; 0]),\n+   |              ^^^^^^^^ has alignment larger than 1\n+\n+error[E0691]: zero-sized field in transparent enum has alignment larger than 1\n+  --> $DIR/repr-transparent.rs:70:11\n+   |\n+LL |     Foo { bar: ZstAlign32<T>, baz: u32 }\n+   |           ^^^^^^^^^^^^^^^^^^ has alignment larger than 1\n+\n error[E0690]: transparent union needs exactly one non-zero-sized field, but has 0\n-  --> $DIR/repr-transparent.rs:64:1\n+  --> $DIR/repr-transparent.rs:74:1\n    |\n LL | union UnitUnion {\n    | ^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 0\n \n error[E0690]: transparent union needs exactly one non-zero-sized field, but has 2\n-  --> $DIR/repr-transparent.rs:69:1\n+  --> $DIR/repr-transparent.rs:79:1\n    |\n LL | union TooManyFields {\n    | ^^^^^^^^^^^^^^^^^^^ needs exactly one non-zero-sized field, but has 2\n@@ -110,7 +122,7 @@ LL |     u: u32,\n LL |     s: i32\n    |     ------ this field is non-zero-sized\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 17 previous errors\n \n Some errors have detailed explanations: E0084, E0690, E0691, E0731.\n For more information about an error, try `rustc --explain E0084`."}]}