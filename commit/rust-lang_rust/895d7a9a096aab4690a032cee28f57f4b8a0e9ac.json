{"sha": "895d7a9a096aab4690a032cee28f57f4b8a0e9ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NWQ3YTlhMDk2YWFiNDY5MGEwMzJjZWUyOGY1N2Y0YjhhMGU5YWM=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-01-31T20:15:18Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-03-21T19:43:48Z"}, "message": "implement TrustedRandomAccess for Ranges over int types", "tree": {"sha": "5611608833cb39148a23f13aafc164ebc12c1259", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5611608833cb39148a23f13aafc164ebc12c1259"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/895d7a9a096aab4690a032cee28f57f4b8a0e9ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/895d7a9a096aab4690a032cee28f57f4b8a0e9ac", "html_url": "https://github.com/rust-lang/rust/commit/895d7a9a096aab4690a032cee28f57f4b8a0e9ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/895d7a9a096aab4690a032cee28f57f4b8a0e9ac/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1438207c3d150ce42804e857537b12082c68c79b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1438207c3d150ce42804e857537b12082c68c79b", "html_url": "https://github.com/rust-lang/rust/commit/1438207c3d150ce42804e857537b12082c68c79b"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "4b293c596e7af6e702bacff670c27a5475e8c097", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/895d7a9a096aab4690a032cee28f57f4b8a0e9ac/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895d7a9a096aab4690a032cee28f57f4b8a0e9ac/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=895d7a9a096aab4690a032cee28f57f4b8a0e9ac", "patch": "@@ -3,7 +3,7 @@ use crate::convert::TryFrom;\n use crate::mem;\n use crate::ops::{self, Try};\n \n-use super::{FusedIterator, TrustedLen};\n+use super::{FusedIterator, TrustedLen, TrustedRandomAccess};\n \n /// Objects that have a notion of *successor* and *predecessor* operations.\n ///\n@@ -493,6 +493,18 @@ macro_rules! range_exact_iter_impl {\n     )*)\n }\n \n+/// Safety: This macro must only be used on types that are `Copy` and result in ranges\n+/// which have an exact `size_hint()` where the upper bound must not be `None`.\n+macro_rules! unsafe_range_trusted_random_access_impl {\n+    ($($t:ty)*) => ($(\n+        #[doc(hidden)]\n+        #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n+        unsafe impl TrustedRandomAccess for ops::Range<$t> {\n+            const MAY_HAVE_SIDE_EFFECT: bool = false;\n+        }\n+    )*)\n+}\n+\n macro_rules! range_incl_exact_iter_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n@@ -553,6 +565,18 @@ impl<A: Step> Iterator for ops::Range<A> {\n     fn max(mut self) -> Option<A> {\n         self.next_back()\n     }\n+\n+    #[inline]\n+    unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item\n+    where\n+        Self: TrustedRandomAccess,\n+    {\n+        // SAFETY: The TrustedRandomAccess contract requires that callers only  pass an index\n+        // that is in bounds.\n+        // Additionally Self: TrustedRandomAccess is only implemented for Copy types\n+        // which means even repeated reads of the same index would be safe.\n+        unsafe { Step::forward_unchecked(self.start.clone(), idx) }\n+    }\n }\n \n // These macros generate `ExactSizeIterator` impls for various range types.\n@@ -574,6 +598,23 @@ range_exact_iter_impl! {\n     u32\n     i32\n }\n+\n+unsafe_range_trusted_random_access_impl! {\n+    usize u8 u16\n+    isize i8 i16\n+}\n+\n+#[cfg(target_pointer_width = \"32\")]\n+unsafe_range_trusted_random_access_impl! {\n+    u32 i32\n+}\n+\n+#[cfg(target_pointer_width = \"64\")]\n+unsafe_range_trusted_random_access_impl! {\n+    u32 i32\n+    u64 i64\n+}\n+\n range_incl_exact_iter_impl! {\n     u8\n     i8"}]}