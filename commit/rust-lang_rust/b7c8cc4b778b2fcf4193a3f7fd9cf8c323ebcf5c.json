{"sha": "b7c8cc4b778b2fcf4193a3f7fd9cf8c323ebcf5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YzhjYzRiNzc4YjJmY2Y0MTkzYTNmN2ZkOWNmOGMzMjNlYmNmNWM=", "commit": {"author": {"name": "Anthony Ramine", "email": "n.oxyde@gmail.com", "date": "2018-04-11T15:25:18Z"}, "committer": {"name": "Anthony Ramine", "email": "n.oxyde@gmail.com", "date": "2018-04-26T13:07:04Z"}, "message": "Properly look for uninhabitedness when handling discriminants", "tree": {"sha": "1226d542d47a193c17c263b2bb5ac78737a2eb5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1226d542d47a193c17c263b2bb5ac78737a2eb5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7c8cc4b778b2fcf4193a3f7fd9cf8c323ebcf5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7c8cc4b778b2fcf4193a3f7fd9cf8c323ebcf5c", "html_url": "https://github.com/rust-lang/rust/commit/b7c8cc4b778b2fcf4193a3f7fd9cf8c323ebcf5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7c8cc4b778b2fcf4193a3f7fd9cf8c323ebcf5c/comments", "author": {"login": "nox", "id": 123095, "node_id": "MDQ6VXNlcjEyMzA5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/123095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nox", "html_url": "https://github.com/nox", "followers_url": "https://api.github.com/users/nox/followers", "following_url": "https://api.github.com/users/nox/following{/other_user}", "gists_url": "https://api.github.com/users/nox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nox/subscriptions", "organizations_url": "https://api.github.com/users/nox/orgs", "repos_url": "https://api.github.com/users/nox/repos", "events_url": "https://api.github.com/users/nox/events{/privacy}", "received_events_url": "https://api.github.com/users/nox/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nox", "id": 123095, "node_id": "MDQ6VXNlcjEyMzA5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/123095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nox", "html_url": "https://github.com/nox", "followers_url": "https://api.github.com/users/nox/followers", "following_url": "https://api.github.com/users/nox/following{/other_user}", "gists_url": "https://api.github.com/users/nox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nox/subscriptions", "organizations_url": "https://api.github.com/users/nox/orgs", "repos_url": "https://api.github.com/users/nox/repos", "events_url": "https://api.github.com/users/nox/events{/privacy}", "received_events_url": "https://api.github.com/users/nox/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eca70a0c55e9f081ebff9a7af6fa25390d99b4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eca70a0c55e9f081ebff9a7af6fa25390d99b4c", "html_url": "https://github.com/rust-lang/rust/commit/3eca70a0c55e9f081ebff9a7af6fa25390d99b4c"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "478f45e841d1c720e0dc6b0e188a3063b9a0fac6", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7c8cc4b778b2fcf4193a3f7fd9cf8c323ebcf5c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7c8cc4b778b2fcf4193a3f7fd9cf8c323ebcf5c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=b7c8cc4b778b2fcf4193a3f7fd9cf8c323ebcf5c", "patch": "@@ -850,6 +850,9 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n     ) -> EvalResult<'tcx, u128> {\n         let layout = self.layout_of(ty)?;\n         trace!(\"read_discriminant_value {:#?}\", layout);\n+        if layout.abi == layout::Abi::Uninhabited {\n+            return Ok(0);\n+        }\n \n         match layout.variants {\n             layout::Variants::Single { index } => {"}, {"sha": "3cadaef47bb660ac26242341bd90127662144f78", "filename": "src/librustc_trans/mir/place.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7c8cc4b778b2fcf4193a3f7fd9cf8c323ebcf5c/src%2Flibrustc_trans%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7c8cc4b778b2fcf4193a3f7fd9cf8c323ebcf5c/src%2Flibrustc_trans%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fplace.rs?ref=b7c8cc4b778b2fcf4193a3f7fd9cf8c323ebcf5c", "patch": "@@ -16,7 +16,7 @@ use rustc::mir::tcx::PlaceTy;\n use rustc_data_structures::indexed_vec::Idx;\n use base;\n use builder::Builder;\n-use common::{CodegenCx, C_usize, C_u8, C_u32, C_uint, C_int, C_null, C_uint_big};\n+use common::{CodegenCx, C_undef, C_usize, C_u8, C_u32, C_uint, C_int, C_null, C_uint_big};\n use consts;\n use type_of::LayoutLlvmExt;\n use type_::Type;\n@@ -264,6 +264,9 @@ impl<'a, 'tcx> PlaceRef<'tcx> {\n     /// Obtain the actual discriminant of a value.\n     pub fn trans_get_discr(self, bx: &Builder<'a, 'tcx>, cast_to: Ty<'tcx>) -> ValueRef {\n         let cast_to = bx.cx.layout_of(cast_to).immediate_llvm_type(bx.cx);\n+        if self.layout.abi == layout::Abi::Uninhabited {\n+            return C_undef(cast_to);\n+        }\n         match self.layout.variants {\n             layout::Variants::Single { index } => {\n                 return C_uint(cast_to, index as u64);"}, {"sha": "245f3ec11c96d6d2f2baf2989fcebbea0db8373f", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7c8cc4b778b2fcf4193a3f7fd9cf8c323ebcf5c/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7c8cc4b778b2fcf4193a3f7fd9cf8c323ebcf5c/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=b7c8cc4b778b2fcf4193a3f7fd9cf8c323ebcf5c", "patch": "@@ -22,7 +22,7 @@ use base;\n use builder::Builder;\n use callee;\n use common::{self, val_ty};\n-use common::{C_bool, C_u8, C_i32, C_u32, C_u64, C_null, C_usize, C_uint, C_uint_big};\n+use common::{C_bool, C_u8, C_i32, C_u32, C_u64, C_undef, C_null, C_usize, C_uint, C_uint_big};\n use consts;\n use monomorphize;\n use type_::Type;\n@@ -267,11 +267,17 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                     }\n                     mir::CastKind::Misc => {\n                         assert!(cast.is_llvm_immediate());\n+                        let ll_t_out = cast.immediate_llvm_type(bx.cx);\n+                        if operand.layout.abi == layout::Abi::Uninhabited {\n+                            return (bx, OperandRef {\n+                                val: OperandValue::Immediate(C_undef(ll_t_out)),\n+                                layout: cast,\n+                            });\n+                        }\n                         let r_t_in = CastTy::from_ty(operand.layout.ty)\n                             .expect(\"bad input type for cast\");\n                         let r_t_out = CastTy::from_ty(cast.ty).expect(\"bad output type for cast\");\n                         let ll_t_in = operand.layout.immediate_llvm_type(bx.cx);\n-                        let ll_t_out = cast.immediate_llvm_type(bx.cx);\n                         let llval = operand.immediate();\n \n                         let mut signed = false;"}]}