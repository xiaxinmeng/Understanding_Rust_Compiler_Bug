{"sha": "6a417d482899e13b1fbef5f5f9962f59e89e9e53", "node_id": "C_kwDOAAsO6NoAKDZhNDE3ZDQ4Mjg5OWUxM2IxZmJlZjVmNWY5OTYyZjU5ZTg5ZTllNTM", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-06-03T15:04:14Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-06-03T15:04:14Z"}, "message": "Lazily allocate+initialize locks.", "tree": {"sha": "6bf812e545a816dd9d361be00b6f9a3cfe200f36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bf812e545a816dd9d361be00b6f9a3cfe200f36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a417d482899e13b1fbef5f5f9962f59e89e9e53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a417d482899e13b1fbef5f5f9962f59e89e9e53", "html_url": "https://github.com/rust-lang/rust/commit/6a417d482899e13b1fbef5f5f9962f59e89e9e53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a417d482899e13b1fbef5f5f9962f59e89e9e53/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac5aa1ded529cd8317b351ba952ff9cd78b1e172", "html_url": "https://github.com/rust-lang/rust/commit/ac5aa1ded529cd8317b351ba952ff9cd78b1e172"}], "stats": {"total": 181, "additions": 145, "deletions": 36}, "files": [{"sha": "36534e0eff3fd91595f559ac011de1077a50f53d", "filename": "library/std/src/sys/sgx/condvar.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fcondvar.rs?ref=6a417d482899e13b1fbef5f5f9962f59e89e9e53", "patch": "@@ -1,4 +1,5 @@\n use crate::sys::locks::Mutex;\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n use crate::time::Duration;\n \n use super::waitqueue::{SpinMutex, WaitQueue, WaitVariable};\n@@ -7,16 +8,19 @@ pub struct Condvar {\n     inner: SpinMutex<WaitVariable<()>>,\n }\n \n-pub type MovableCondvar = Box<Condvar>;\n+pub(crate) type MovableCondvar = LazyBox<Condvar>;\n+\n+impl LazyInit for Condvar {\n+    fn init() -> Box<Self> {\n+        Box::new(Self::new())\n+    }\n+}\n \n impl Condvar {\n     pub const fn new() -> Condvar {\n         Condvar { inner: SpinMutex::new(WaitVariable::new(())) }\n     }\n \n-    #[inline]\n-    pub unsafe fn init(&mut self) {}\n-\n     #[inline]\n     pub unsafe fn notify_one(&self) {\n         let _ = WaitQueue::notify_one(self.inner.lock());"}, {"sha": "513cd77fd2aad17fff00752d6eba65d12b654929", "filename": "library/std/src/sys/sgx/mutex.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmutex.rs?ref=6a417d482899e13b1fbef5f5f9962f59e89e9e53", "patch": "@@ -1,11 +1,18 @@\n use super::waitqueue::{try_lock_or_false, SpinMutex, WaitQueue, WaitVariable};\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n \n pub struct Mutex {\n     inner: SpinMutex<WaitVariable<bool>>,\n }\n \n // not movable: see UnsafeList implementation\n-pub type MovableMutex = Box<Mutex>;\n+pub(crate) type MovableMutex = LazyBox<Mutex>;\n+\n+impl LazyInit for Mutex {\n+    fn init() -> Box<Self> {\n+        Box::new(Self::new())\n+    }\n+}\n \n // Implementation according to \u201cOperating Systems: Three Easy Pieces\u201d, chapter 28\n impl Mutex {"}, {"sha": "a97fb9ab026f02d57cc3f347ac5d62ac891d4c96", "filename": "library/std/src/sys/sgx/rwlock.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Frwlock.rs?ref=6a417d482899e13b1fbef5f5f9962f59e89e9e53", "patch": "@@ -2,6 +2,7 @@\n mod tests;\n \n use crate::num::NonZeroUsize;\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n \n use super::waitqueue::{\n     try_lock_or_false, NotifiedTcs, SpinMutex, SpinMutexGuard, WaitQueue, WaitVariable,\n@@ -13,7 +14,13 @@ pub struct RwLock {\n     writer: SpinMutex<WaitVariable<bool>>,\n }\n \n-pub type MovableRwLock = Box<RwLock>;\n+pub(crate) type MovableRwLock = LazyBox<RwLock>;\n+\n+impl LazyInit for RwLock {\n+    fn init() -> Box<Self> {\n+        Box::new(Self::new())\n+    }\n+}\n \n // Check at compile time that RwLock size matches C definition (see test_c_rwlock_initializer below)\n //"}, {"sha": "a9a1a32c5afb09b41c434739d8de6bdcba73e194", "filename": "library/std/src/sys/unix/locks/futex.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Ffutex.rs?ref=6a417d482899e13b1fbef5f5f9962f59e89e9e53", "patch": "@@ -115,9 +115,6 @@ impl Condvar {\n         Self { futex: AtomicU32::new(0) }\n     }\n \n-    #[inline]\n-    pub unsafe fn init(&mut self) {}\n-\n     // All the memory orderings here are `Relaxed`,\n     // because synchronization is done by unlocking and locking the mutex.\n "}, {"sha": "03400efa3c9aaf43d539d10d7fbea8bbadc95897", "filename": "library/std/src/sys/unix/locks/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fmod.rs?ref=6a417d482899e13b1fbef5f5f9962f59e89e9e53", "patch": "@@ -9,14 +9,14 @@ cfg_if::cfg_if! {\n     ))] {\n         mod futex;\n         mod futex_rwlock;\n-        pub use futex::{Mutex, MovableMutex, Condvar, MovableCondvar};\n-        pub use futex_rwlock::{RwLock, MovableRwLock};\n+        pub(crate) use futex::{Mutex, MovableMutex, MovableCondvar};\n+        pub(crate) use futex_rwlock::{RwLock, MovableRwLock};\n     } else {\n         mod pthread_mutex;\n         mod pthread_rwlock;\n         mod pthread_condvar;\n-        pub use pthread_mutex::{Mutex, MovableMutex};\n-        pub use pthread_rwlock::{RwLock, MovableRwLock};\n-        pub use pthread_condvar::{Condvar, MovableCondvar};\n+        pub(crate) use pthread_mutex::{Mutex, MovableMutex};\n+        pub(crate) use pthread_rwlock::{RwLock, MovableRwLock};\n+        pub(crate) use pthread_condvar::MovableCondvar;\n     }\n }"}, {"sha": "61c28d696bcaa2dd52b7eaccb726347537ddd8ad", "filename": "library/std/src/sys/unix/locks/pthread_condvar.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_condvar.rs?ref=6a417d482899e13b1fbef5f5f9962f59e89e9e53", "patch": "@@ -1,12 +1,13 @@\n use crate::cell::UnsafeCell;\n use crate::sys::locks::{pthread_mutex, Mutex};\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n use crate::time::Duration;\n \n pub struct Condvar {\n     inner: UnsafeCell<libc::pthread_cond_t>,\n }\n \n-pub type MovableCondvar = Box<Condvar>;\n+pub(crate) type MovableCondvar = LazyBox<Condvar>;\n \n unsafe impl Send for Condvar {}\n unsafe impl Sync for Condvar {}\n@@ -18,6 +19,14 @@ fn saturating_cast_to_time_t(value: u64) -> libc::time_t {\n     if value > <libc::time_t>::MAX as u64 { <libc::time_t>::MAX } else { value as libc::time_t }\n }\n \n+impl LazyInit for Condvar {\n+    fn init() -> Box<Self> {\n+        let mut condvar = Box::new(Self::new());\n+        unsafe { condvar.init() };\n+        condvar\n+    }\n+}\n+\n impl Condvar {\n     pub const fn new() -> Condvar {\n         // Might be moved and address is changing it is better to avoid\n@@ -32,14 +41,14 @@ impl Condvar {\n         target_os = \"android\",\n         target_os = \"redox\"\n     ))]\n-    pub unsafe fn init(&mut self) {}\n+    unsafe fn init(&mut self) {}\n \n     // NOTE: ESP-IDF's PTHREAD_COND_INITIALIZER support is not released yet\n     // So on that platform, init() should always be called\n     // Moreover, that platform does not have pthread_condattr_setclock support,\n     // hence that initialization should be skipped as well\n     #[cfg(target_os = \"espidf\")]\n-    pub unsafe fn init(&mut self) {\n+    unsafe fn init(&mut self) {\n         let r = libc::pthread_cond_init(self.inner.get(), crate::ptr::null());\n         assert_eq!(r, 0);\n     }\n@@ -52,7 +61,7 @@ impl Condvar {\n         target_os = \"redox\",\n         target_os = \"espidf\"\n     )))]\n-    pub unsafe fn init(&mut self) {\n+    unsafe fn init(&mut self) {\n         use crate::mem::MaybeUninit;\n         let mut attr = MaybeUninit::<libc::pthread_condattr_t>::uninit();\n         let r = libc::pthread_condattr_init(attr.as_mut_ptr());"}, {"sha": "916e898d8906e2a8e9d22a44173d7773a92a6a45", "filename": "library/std/src/sys/unix/locks/pthread_mutex.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_mutex.rs?ref=6a417d482899e13b1fbef5f5f9962f59e89e9e53", "patch": "@@ -1,12 +1,13 @@\n use crate::cell::UnsafeCell;\n use crate::mem::MaybeUninit;\n use crate::sys::cvt_nz;\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n \n pub struct Mutex {\n     inner: UnsafeCell<libc::pthread_mutex_t>,\n }\n \n-pub type MovableMutex = Box<Mutex>;\n+pub(crate) type MovableMutex = LazyBox<Mutex>;\n \n #[inline]\n pub unsafe fn raw(m: &Mutex) -> *mut libc::pthread_mutex_t {\n@@ -16,6 +17,14 @@ pub unsafe fn raw(m: &Mutex) -> *mut libc::pthread_mutex_t {\n unsafe impl Send for Mutex {}\n unsafe impl Sync for Mutex {}\n \n+impl LazyInit for Mutex {\n+    fn init() -> Box<Self> {\n+        let mut mutex = Box::new(Self::new());\n+        unsafe { mutex.init() };\n+        mutex\n+    }\n+}\n+\n impl Mutex {\n     pub const fn new() -> Mutex {\n         // Might be moved to a different address, so it is better to avoid"}, {"sha": "75e5759c7879d07caeea7c9a88f1ebd9c756ced4", "filename": "library/std/src/sys/unix/locks/pthread_rwlock.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs?ref=6a417d482899e13b1fbef5f5f9962f59e89e9e53", "patch": "@@ -1,17 +1,24 @@\n use crate::cell::UnsafeCell;\n use crate::sync::atomic::{AtomicUsize, Ordering};\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n \n pub struct RwLock {\n     inner: UnsafeCell<libc::pthread_rwlock_t>,\n     write_locked: UnsafeCell<bool>, // guarded by the `inner` RwLock\n     num_readers: AtomicUsize,\n }\n \n-pub type MovableRwLock = Box<RwLock>;\n+pub(crate) type MovableRwLock = LazyBox<RwLock>;\n \n unsafe impl Send for RwLock {}\n unsafe impl Sync for RwLock {}\n \n+impl LazyInit for RwLock {\n+    fn init() -> Box<Self> {\n+        Box::new(Self::new())\n+    }\n+}\n+\n impl RwLock {\n     pub const fn new() -> RwLock {\n         RwLock {"}, {"sha": "f27bf2b26bdaaaf88c397ffd5544e6600412298a", "filename": "library/std/src/sys/unsupported/locks/condvar.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Flocks%2Fcondvar.rs?ref=6a417d482899e13b1fbef5f5f9962f59e89e9e53", "patch": "@@ -10,9 +10,6 @@ impl Condvar {\n         Condvar {}\n     }\n \n-    #[inline]\n-    pub unsafe fn init(&mut self) {}\n-\n     #[inline]\n     pub unsafe fn notify_one(&self) {}\n "}, {"sha": "55b5ad314daf023ab0b3ca11d835ec740c10a827", "filename": "library/std/src/sys/wasm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs?ref=6a417d482899e13b1fbef5f5f9962f59e89e9e53", "patch": "@@ -54,8 +54,8 @@ cfg_if::cfg_if! {\n             #![allow(unsafe_op_in_unsafe_fn)]\n             mod futex;\n             mod futex_rwlock;\n-            pub use futex::{Mutex, MovableMutex, Condvar, MovableCondvar};\n-            pub use futex_rwlock::{RwLock, MovableRwLock};\n+            pub(crate) use futex::{Mutex, MovableMutex, Condvar, MovableCondvar};\n+            pub(crate) use futex_rwlock::{RwLock, MovableRwLock};\n         }\n         #[path = \"atomics/futex.rs\"]\n         pub mod futex;"}, {"sha": "59e2c1be0f0f2dc7f86bed106a1f01e061a2d0fe", "filename": "library/std/src/sys/windows/locks/condvar.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Flocks%2Fcondvar.rs?ref=6a417d482899e13b1fbef5f5f9962f59e89e9e53", "patch": "@@ -18,9 +18,6 @@ impl Condvar {\n         Condvar { inner: UnsafeCell::new(c::CONDITION_VARIABLE_INIT) }\n     }\n \n-    #[inline]\n-    pub unsafe fn init(&mut self) {}\n-\n     #[inline]\n     pub unsafe fn wait(&self, mutex: &Mutex) {\n         let r = c::SleepConditionVariableSRW(self.inner.get(), mutex::raw(mutex), c::INFINITE, 0);"}, {"sha": "1def0518e0a6fff0825ea90205c2c7b805d82cbb", "filename": "library/std/src/sys_common/condvar.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar.rs?ref=6a417d482899e13b1fbef5f5f9962f59e89e9e53", "patch": "@@ -15,9 +15,7 @@ pub struct Condvar {\n impl Condvar {\n     /// Creates a new condition variable for use.\n     pub fn new() -> Self {\n-        let mut c = imp::MovableCondvar::from(imp::Condvar::new());\n-        unsafe { c.init() };\n-        Self { inner: c, check: CondvarCheck::new() }\n+        Self { inner: imp::MovableCondvar::new(), check: CondvarCheck::new() }\n     }\n \n     /// Signals one waiter on this condition variable to wake up."}, {"sha": "ce8f36704877fe390558863f5821fc40fcd3c60b", "filename": "library/std/src/sys_common/condvar/check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs?ref=6a417d482899e13b1fbef5f5f9962f59e89e9e53", "patch": "@@ -1,6 +1,7 @@\n use crate::ptr;\n use crate::sync::atomic::{AtomicPtr, Ordering};\n use crate::sys::locks as imp;\n+use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n use crate::sys_common::mutex::MovableMutex;\n \n pub trait CondvarCheck {\n@@ -9,7 +10,7 @@ pub trait CondvarCheck {\n \n /// For boxed mutexes, a `Condvar` will check it's only ever used with the same\n /// mutex, based on its (stable) address.\n-impl CondvarCheck for Box<imp::Mutex> {\n+impl<T: LazyInit> CondvarCheck for LazyBox<T> {\n     type Check = SameMutexCheck;\n }\n "}, {"sha": "647c13d243724122f1a37cd0cc836b1d317b5c1b", "filename": "library/std/src/sys_common/lazy_box.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys_common%2Flazy_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys_common%2Flazy_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Flazy_box.rs?ref=6a417d482899e13b1fbef5f5f9962f59e89e9e53", "patch": "@@ -0,0 +1,77 @@\n+#![allow(dead_code)] // Only used on some platforms.\n+\n+// This is used to wrap pthread {Mutex, Condvar, RwLock} in.\n+\n+use crate::marker::PhantomData;\n+use crate::ops::{Deref, DerefMut};\n+use crate::ptr::null_mut;\n+use crate::sync::atomic::{\n+    AtomicPtr,\n+    Ordering::{AcqRel, Acquire},\n+};\n+\n+pub(crate) struct LazyBox<T: LazyInit> {\n+    ptr: AtomicPtr<T>,\n+    _phantom: PhantomData<T>,\n+}\n+\n+pub(crate) trait LazyInit {\n+    /// This is called before the box is allocated, to provide the value to\n+    /// move into the new box.\n+    ///\n+    /// It might be called more than once per LazyBox, as multiple threads\n+    /// might race to initialize it concurrently, each constructing and initializing\n+    /// their own box. (All but one of them will be destroyed right after.)\n+    fn init() -> Box<Self>;\n+}\n+\n+impl<T: LazyInit> LazyBox<T> {\n+    #[inline]\n+    pub const fn new() -> Self {\n+        Self { ptr: AtomicPtr::new(null_mut()), _phantom: PhantomData }\n+    }\n+\n+    #[inline]\n+    fn get_pointer(&self) -> *mut T {\n+        let ptr = self.ptr.load(Acquire);\n+        if ptr.is_null() { self.initialize() } else { ptr }\n+    }\n+\n+    #[cold]\n+    fn initialize(&self) -> *mut T {\n+        let new_ptr = Box::into_raw(T::init());\n+        match self.ptr.compare_exchange(null_mut(), new_ptr, AcqRel, Acquire) {\n+            Ok(_) => new_ptr,\n+            Err(ptr) => {\n+                // Lost the race to another thread.\n+                // Drop the box we created, and use the one from the other thread instead.\n+                drop(unsafe { Box::from_raw(new_ptr) });\n+                ptr\n+            }\n+        }\n+    }\n+}\n+\n+impl<T: LazyInit> Deref for LazyBox<T> {\n+    type Target = T;\n+    #[inline]\n+    fn deref(&self) -> &T {\n+        unsafe { &*self.get_pointer() }\n+    }\n+}\n+\n+impl<T: LazyInit> DerefMut for LazyBox<T> {\n+    #[inline]\n+    fn deref_mut(&mut self) -> &mut T {\n+        unsafe { &mut *self.get_pointer() }\n+    }\n+}\n+\n+impl<T: LazyInit> Drop for LazyBox<T> {\n+    fn drop(&mut self) {\n+        let ptr = *self.ptr.get_mut();\n+        if !ptr.is_null() {\n+            drop(unsafe { Box::from_raw(ptr) });\n+        }\n+    }\n+}"}, {"sha": "80f56bf7522b67edbf547f77cf8707fded8c9b21", "filename": "library/std/src/sys_common/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs?ref=6a417d482899e13b1fbef5f5f9962f59e89e9e53", "patch": "@@ -24,6 +24,7 @@ pub mod backtrace;\n pub mod condvar;\n pub mod fs;\n pub mod io;\n+pub mod lazy_box;\n pub mod memchr;\n pub mod mutex;\n pub mod process;"}, {"sha": "36ea888d8de499cb7d3b5a42dac69a32f11a5781", "filename": "library/std/src/sys_common/mutex.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmutex.rs?ref=6a417d482899e13b1fbef5f5f9962f59e89e9e53", "patch": "@@ -61,9 +61,7 @@ unsafe impl Sync for MovableMutex {}\n impl MovableMutex {\n     /// Creates a new mutex.\n     pub fn new() -> Self {\n-        let mut mutex = imp::MovableMutex::from(imp::Mutex::new());\n-        unsafe { mutex.init() };\n-        Self(mutex)\n+        Self(imp::MovableMutex::new())\n     }\n \n     pub(super) fn raw(&self) -> &imp::Mutex {"}, {"sha": "abc9fd561f1f60d89d97157474be1274a6b32007", "filename": "library/std/src/sys_common/rwlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a417d482899e13b1fbef5f5f9962f59e89e9e53/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frwlock.rs?ref=6a417d482899e13b1fbef5f5f9962f59e89e9e53", "patch": "@@ -74,7 +74,7 @@ pub struct MovableRwLock(imp::MovableRwLock);\n impl MovableRwLock {\n     /// Creates a new reader-writer lock for use.\n     pub fn new() -> Self {\n-        Self(imp::MovableRwLock::from(imp::RwLock::new()))\n+        Self(imp::MovableRwLock::new())\n     }\n \n     /// Acquires shared access to the underlying lock, blocking the current"}]}