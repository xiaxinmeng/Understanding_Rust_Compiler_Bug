{"sha": "f07802c0de9091a1f4c728c6b4ee1eca5a49b275", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNzgwMmMwZGU5MDkxYTFmNGM3MjhjNmI0ZWUxZWNhNWE0OWIyNzU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-23T10:32:07Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-24T05:22:27Z"}, "message": "decouple rustc_hir::print from crate", "tree": {"sha": "0fa56ffbbb569af64116a3dd696dfe31c03a1e8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fa56ffbbb569af64116a3dd696dfe31c03a1e8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f07802c0de9091a1f4c728c6b4ee1eca5a49b275", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f07802c0de9091a1f4c728c6b4ee1eca5a49b275", "html_url": "https://github.com/rust-lang/rust/commit/f07802c0de9091a1f4c728c6b4ee1eca5a49b275", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f07802c0de9091a1f4c728c6b4ee1eca5a49b275/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "342c5f33d097b2dc07a2dbc0ca45a37379d2ff60", "url": "https://api.github.com/repos/rust-lang/rust/commits/342c5f33d097b2dc07a2dbc0ca45a37379d2ff60", "html_url": "https://github.com/rust-lang/rust/commit/342c5f33d097b2dc07a2dbc0ca45a37379d2ff60"}], "stats": {"total": 164, "additions": 52, "deletions": 112}, "files": [{"sha": "2d11bc3dd978435b85d03e46d854313c7fec1957", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 7, "deletions": 77, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/f07802c0de9091a1f4c728c6b4ee1eca5a49b275/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07802c0de9091a1f4c728c6b4ee1eca5a49b275/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=f07802c0de9091a1f4c728c6b4ee1eca5a49b275", "patch": "@@ -2,11 +2,6 @@ use crate::def::{DefKind, Namespace, Res};\n use crate::def_id::DefId;\n crate use crate::hir_id::HirId;\n use crate::itemlikevisit;\n-use crate::print;\n-\n-crate use BlockCheckMode::*;\n-crate use FnRetTy::*;\n-crate use UnsafeSource::*;\n \n use rustc_ast::ast::{self, AsmDialect, CrateSugar, Ident, Name};\n use rustc_ast::ast::{AttrVec, Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, UintTy};\n@@ -169,12 +164,7 @@ impl fmt::Display for Lifetime {\n \n impl fmt::Debug for Lifetime {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(\n-            f,\n-            \"lifetime({}: {})\",\n-            self.hir_id,\n-            print::to_string(print::NO_ANN, |s| s.print_lifetime(self))\n-        )\n+        write!(f, \"lifetime({}: {})\", self.hir_id, self.name.ident())\n     }\n }\n \n@@ -191,7 +181,7 @@ impl Lifetime {\n /// A `Path` is essentially Rust's notion of a name; for instance,\n /// `std::cmp::PartialEq`. It's represented as a sequence of identifiers,\n /// along with a bunch of supporting information.\n-#[derive(RustcEncodable, RustcDecodable, HashStable_Generic)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct Path<'hir> {\n     pub span: Span,\n     /// The resolution for the path.\n@@ -206,18 +196,6 @@ impl Path<'_> {\n     }\n }\n \n-impl fmt::Debug for Path<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"path({})\", self)\n-    }\n-}\n-\n-impl fmt::Display for Path<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", print::to_string(print::NO_ANN, |s| s.print_path(self, false)))\n-    }\n-}\n-\n /// A segment of a path: an identifier, an optional lifetime, and a set of\n /// types.\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n@@ -758,25 +736,14 @@ pub struct Block<'hir> {\n     pub targeted_by_break: bool,\n }\n \n-#[derive(RustcEncodable, RustcDecodable, HashStable_Generic)]\n+#[derive(Debug, RustcEncodable, RustcDecodable, HashStable_Generic)]\n pub struct Pat<'hir> {\n     #[stable_hasher(ignore)]\n     pub hir_id: HirId,\n     pub kind: PatKind<'hir>,\n     pub span: Span,\n }\n \n-impl fmt::Debug for Pat<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(\n-            f,\n-            \"pat({}: {})\",\n-            self.hir_id,\n-            print::to_string(print::NO_ANN, |s| s.print_pat(self))\n-        )\n-    }\n-}\n-\n impl Pat<'_> {\n     // FIXME(#19596) this is a workaround, but there should be a better way\n     fn walk_short_(&self, it: &mut impl FnMut(&Pat<'_>) -> bool) -> bool {\n@@ -1118,26 +1085,15 @@ impl UnOp {\n }\n \n /// A statement.\n-#[derive(RustcEncodable, RustcDecodable, HashStable_Generic)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct Stmt<'hir> {\n     pub hir_id: HirId,\n     pub kind: StmtKind<'hir>,\n     pub span: Span,\n }\n \n-impl fmt::Debug for Stmt<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(\n-            f,\n-            \"stmt({}: {})\",\n-            self.hir_id,\n-            print::to_string(print::NO_ANN, |s| s.print_stmt(self))\n-        )\n-    }\n-}\n-\n /// The contents of a statement.\n-#[derive(RustcEncodable, RustcDecodable, HashStable_Generic)]\n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum StmtKind<'hir> {\n     /// A local (`let`) binding.\n     Local(&'hir Local<'hir>),\n@@ -1351,7 +1307,7 @@ pub struct AnonConst {\n }\n \n /// An expression.\n-#[derive(RustcEncodable, RustcDecodable)]\n+#[derive(Debug, RustcEncodable, RustcDecodable)]\n pub struct Expr<'hir> {\n     pub hir_id: HirId,\n     pub kind: ExprKind<'hir>,\n@@ -1472,17 +1428,6 @@ impl Expr<'_> {\n     }\n }\n \n-impl fmt::Debug for Expr<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(\n-            f,\n-            \"expr({}: {})\",\n-            self.hir_id,\n-            print::to_string(print::NO_ANN, |s| s.print_expr(self))\n-        )\n-    }\n-}\n-\n /// Checks if the specified expression is a built-in range literal.\n /// (See: `LoweringContext::lower_expr()`).\n ///\n@@ -1965,19 +1910,13 @@ impl TypeBinding<'_> {\n     }\n }\n \n-#[derive(RustcEncodable, RustcDecodable)]\n+#[derive(Debug, RustcEncodable, RustcDecodable)]\n pub struct Ty<'hir> {\n     pub hir_id: HirId,\n     pub kind: TyKind<'hir>,\n     pub span: Span,\n }\n \n-impl fmt::Debug for Ty<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"type({})\", print::to_string(print::NO_ANN, |s| s.print_type(self)))\n-    }\n-}\n-\n /// Not represented directly in the AST; referred to by name through a `ty_path`.\n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n #[derive(HashStable_Generic)]\n@@ -2182,15 +2121,6 @@ pub enum FnRetTy<'hir> {\n     Return(&'hir Ty<'hir>),\n }\n \n-impl fmt::Display for FnRetTy<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            Self::Return(ref ty) => print::to_string(print::NO_ANN, |s| s.print_type(ty)).fmt(f),\n-            Self::DefaultReturn(_) => \"()\".fmt(f),\n-        }\n-    }\n-}\n-\n impl FnRetTy<'_> {\n     pub fn span(&self) -> Span {\n         match *self {"}, {"sha": "f33ed3a72397b6b035576c7bfe69377a6a6a7ef4", "filename": "src/librustc_hir/print.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f07802c0de9091a1f4c728c6b4ee1eca5a49b275/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07802c0de9091a1f4c728c6b4ee1eca5a49b275/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=f07802c0de9091a1f4c728c6b4ee1eca5a49b275", "patch": "@@ -1006,10 +1006,10 @@ impl<'a> State<'a> {\n         close_box: bool,\n     ) {\n         match blk.rules {\n-            hir::UnsafeBlock(..) => self.word_space(\"unsafe\"),\n-            hir::PushUnsafeBlock(..) => self.word_space(\"push_unsafe\"),\n-            hir::PopUnsafeBlock(..) => self.word_space(\"pop_unsafe\"),\n-            hir::DefaultBlock => (),\n+            hir::BlockCheckMode::UnsafeBlock(..) => self.word_space(\"unsafe\"),\n+            hir::BlockCheckMode::PushUnsafeBlock(..) => self.word_space(\"push_unsafe\"),\n+            hir::BlockCheckMode::PopUnsafeBlock(..) => self.word_space(\"pop_unsafe\"),\n+            hir::BlockCheckMode::DefaultBlock => (),\n         }\n         self.maybe_print_comment(blk.span.lo());\n         self.ann.pre(self, AnnNode::Block(blk));\n@@ -1848,7 +1848,8 @@ impl<'a> State<'a> {\n                 self.print_block_unclosed(&blk);\n \n                 // If it is a user-provided unsafe block, print a comma after it\n-                if let hir::UnsafeBlock(hir::UserProvided) = blk.rules {\n+                if let hir::BlockCheckMode::UnsafeBlock(hir::UnsafeSource::UserProvided) = blk.rules\n+                {\n                     self.s.word(\",\");\n                 }\n             }\n@@ -1928,18 +1929,18 @@ impl<'a> State<'a> {\n         });\n         self.s.word(\"|\");\n \n-        if let hir::DefaultReturn(..) = decl.output {\n+        if let hir::FnRetTy::DefaultReturn(..) = decl.output {\n             return;\n         }\n \n         self.space_if_not_bol();\n         self.word_space(\"->\");\n         match decl.output {\n-            hir::Return(ref ty) => {\n+            hir::FnRetTy::Return(ref ty) => {\n                 self.print_type(&ty);\n                 self.maybe_print_comment(ty.span.lo())\n             }\n-            hir::DefaultReturn(..) => unreachable!(),\n+            hir::FnRetTy::DefaultReturn(..) => unreachable!(),\n         }\n     }\n \n@@ -2112,21 +2113,21 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_fn_output(&mut self, decl: &hir::FnDecl<'_>) {\n-        if let hir::DefaultReturn(..) = decl.output {\n+        if let hir::FnRetTy::DefaultReturn(..) = decl.output {\n             return;\n         }\n \n         self.space_if_not_bol();\n         self.ibox(INDENT_UNIT);\n         self.word_space(\"->\");\n         match decl.output {\n-            hir::DefaultReturn(..) => unreachable!(),\n-            hir::Return(ref ty) => self.print_type(&ty),\n+            hir::FnRetTy::DefaultReturn(..) => unreachable!(),\n+            hir::FnRetTy::Return(ref ty) => self.print_type(&ty),\n         }\n         self.end();\n \n         match decl.output {\n-            hir::Return(ref output) => self.maybe_print_comment(output.span.lo()),\n+            hir::FnRetTy::Return(ref output) => self.maybe_print_comment(output.span.lo()),\n             _ => {}\n         }\n     }"}, {"sha": "2cc5763a6f54ce6152a4849f10c605b91af731fc", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f07802c0de9091a1f4c728c6b4ee1eca5a49b275/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07802c0de9091a1f4c728c6b4ee1eca5a49b275/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=f07802c0de9091a1f4c728c6b4ee1eca5a49b275", "patch": "@@ -1313,14 +1313,18 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n             let is_local_static =\n                 if let DefKind::Static = kind { def_id.is_local() } else { false };\n             if !self.item_is_accessible(def_id) && !is_local_static {\n-                let name = match *qpath {\n-                    hir::QPath::Resolved(_, ref path) => path.to_string(),\n-                    hir::QPath::TypeRelative(_, ref segment) => segment.ident.to_string(),\n+                let sess = self.tcx.sess;\n+                let sm = sess.source_map();\n+                let name = match qpath {\n+                    hir::QPath::Resolved(_, path) => sm.span_to_snippet(path.span).ok(),\n+                    hir::QPath::TypeRelative(_, segment) => Some(segment.ident.to_string()),\n                 };\n                 let kind = kind.descr(def_id);\n-                self.tcx\n-                    .sess\n-                    .struct_span_err(span, &format!(\"{} `{}` is private\", kind, name))\n+                let msg = match name {\n+                    Some(name) => format!(\"{} `{}` is private\", kind, name),\n+                    None => format!(\"{} is private\", kind),\n+                };\n+                sess.struct_span_err(span, &msg)\n                     .span_label(span, &format!(\"private {}\", kind))\n                     .emit();\n                 return;"}, {"sha": "f8007b20b3527b8713705288f76282eab1dde196", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f07802c0de9091a1f4c728c6b4ee1eca5a49b275/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07802c0de9091a1f4c728c6b4ee1eca5a49b275/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=f07802c0de9091a1f4c728c6b4ee1eca5a49b275", "patch": "@@ -245,11 +245,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             {\n                 // check that the `if` expr without `else` is the fn body's expr\n                 if expr.span == span {\n-                    return self.get_fn_decl(hir_id).map(|(fn_decl, _)| {\n-                        (\n-                            fn_decl.output.span(),\n-                            format!(\"expected `{}` because of this return type\", fn_decl.output),\n-                        )\n+                    return self.get_fn_decl(hir_id).and_then(|(fn_decl, _)| {\n+                        let span = fn_decl.output.span();\n+                        let snippet = self.tcx.sess.source_map().span_to_snippet(span).ok()?;\n+                        Some((span, format!(\"expected `{}` because of this return type\", snippet)))\n                     });\n                 }\n             }"}, {"sha": "a8751506726a1581649a1c33bf0019c5012c7f47", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f07802c0de9091a1f4c728c6b4ee1eca5a49b275/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07802c0de9091a1f4c728c6b4ee1eca5a49b275/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=f07802c0de9091a1f4c728c6b4ee1eca5a49b275", "patch": "@@ -335,16 +335,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     err.span_label(call_expr.span, \"call expression requires function\");\n \n                     if let Some(span) = self.tcx.hir().res_span(def) {\n+                        let callee_ty = callee_ty.to_string();\n                         let label = match (unit_variant, inner_callee_path) {\n-                            (Some(path), _) => format!(\"`{}` defined here\", path),\n-                            (_, Some(hir::QPath::Resolved(_, path))) => format!(\n-                                \"`{}` defined here returns `{}`\",\n-                                path,\n-                                callee_ty.to_string()\n-                            ),\n-                            _ => format!(\"`{}` defined here\", callee_ty.to_string()),\n+                            (Some(path), _) => Some(format!(\"`{}` defined here\", path)),\n+                            (_, Some(hir::QPath::Resolved(_, path))) => {\n+                                self.tcx.sess.source_map().span_to_snippet(path.span).ok().map(\n+                                    |p| format!(\"`{}` defined here returns `{}`\", p, callee_ty),\n+                                )\n+                            }\n+                            _ => Some(format!(\"`{}` defined here\", callee_ty)),\n                         };\n-                        err.span_label(span, label);\n+                        if let Some(label) = label {\n+                            err.span_label(span, label);\n+                        }\n                     }\n                     err.emit();\n                 } else {"}, {"sha": "4e11246ac729491fce67fba59e04c500c3bd08f5", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f07802c0de9091a1f4c728c6b4ee1eca5a49b275/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07802c0de9091a1f4c728c6b4ee1eca5a49b275/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=f07802c0de9091a1f4c728c6b4ee1eca5a49b275", "patch": "@@ -696,10 +696,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     self,\n                     &cause,\n                     &mut |db| {\n-                        db.span_label(\n-                            fn_decl.output.span(),\n-                            format!(\"expected `{}` because of this return type\", fn_decl.output,),\n-                        );\n+                        let span = fn_decl.output.span();\n+                        if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                            db.span_label(\n+                                span,\n+                                format!(\"expected `{}` because of this return type\", snippet),\n+                            );\n+                        }\n                     },\n                     true,\n                 );"}]}