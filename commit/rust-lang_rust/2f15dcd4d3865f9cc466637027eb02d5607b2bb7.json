{"sha": "2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMTVkY2Q0ZDM4NjVmOWNjNDY2NjM3MDI3ZWIwMmQ1NjA3YjJiYjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-01T03:17:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-01T03:17:24Z"}, "message": "auto merge of #17584 : pcwalton/rust/range-patterns-dotdotdot, r=nick29581\n\nThis breaks code that looks like:\r\n\r\n    match foo {\r\n        1..3 => { ... }\r\n    }\r\n\r\nInstead, write:\r\n\r\n    match foo {\r\n        1...3 => { ... }\r\n    }\r\n\r\nCloses #17295.\r\n\r\nr? @nick29581", "tree": {"sha": "1a4d8526c45a53753c612bcbb6d283928c927cbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a4d8526c45a53753c612bcbb6d283928c927cbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "html_url": "https://github.com/rust-lang/rust/commit/2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57a05cf49b3149427e3fe190c07f8343a29ad86c", "url": "https://api.github.com/repos/rust-lang/rust/commits/57a05cf49b3149427e3fe190c07f8343a29ad86c", "html_url": "https://github.com/rust-lang/rust/commit/57a05cf49b3149427e3fe190c07f8343a29ad86c"}, {"sha": "416144b8279fbffceacea6d0fd90e0fd1f8ce53d", "url": "https://api.github.com/repos/rust-lang/rust/commits/416144b8279fbffceacea6d0fd90e0fd1f8ce53d", "html_url": "https://github.com/rust-lang/rust/commit/416144b8279fbffceacea6d0fd90e0fd1f8ce53d"}], "stats": {"total": 325, "additions": 161, "deletions": 164}, "files": [{"sha": "b48ccfc43742d51e839152a9cdea7b7ded08a5a7", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -1512,7 +1512,7 @@ fn _arm_exec_compiled_test(config: &Config,\n     for c in exitcode_out.as_slice().chars() {\n         if !c.is_digit() { break; }\n         exitcode = exitcode * 10 + match c {\n-            '0' .. '9' => c as int - ('0' as int),\n+            '0' ... '9' => c as int - ('0' as int),\n             _ => 101,\n         }\n     }"}, {"sha": "074dfc17b0d78abb08a7418e4fb667f180a4cc65", "filename": "src/doc/guide.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -3757,27 +3757,27 @@ match x {\n }\n ```\n \n-You can match a range of values with `..`:\n+You can match a range of values with `...`:\n \n ```{rust}\n let x = 1i;\n \n match x {\n-    1 .. 5 => println!(\"one through five\"),\n+    1 ... 5 => println!(\"one through five\"),\n     _ => println!(\"anything\"),\n }\n ```\n \n Ranges are mostly used with integers and single characters.\n \n-If you're matching multiple things, via a `|` or a `..`, you can bind\n+If you're matching multiple things, via a `|` or a `...`, you can bind\n the value to a name with `@`:\n \n ```{rust}\n let x = 1i;\n \n match x {\n-    x @ 1 .. 5 => println!(\"got {}\", x),\n+    x @ 1 ... 5 => println!(\"got {}\", x),\n     _ => println!(\"anything\"),\n }\n ```"}, {"sha": "3da3d4c580755e6a0fb0a2bbb434ff169b355366", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -3410,7 +3410,7 @@ may be specified with `..`. For example:\n \n let message = match x {\n   0 | 1  => \"not many\",\n-  2 .. 9 => \"a few\",\n+  2 ... 9 => \"a few\",\n   _      => \"lots\"\n };\n ```"}, {"sha": "d6adbd302645a0ba7777242b2e3c2792e69091ca", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -199,10 +199,10 @@ impl String {\n                     }\n                     3 => {\n                         match (byte, safe_get(v, i, total)) {\n-                            (0xE0        , 0xA0 .. 0xBF) => (),\n-                            (0xE1 .. 0xEC, 0x80 .. 0xBF) => (),\n-                            (0xED        , 0x80 .. 0x9F) => (),\n-                            (0xEE .. 0xEF, 0x80 .. 0xBF) => (),\n+                            (0xE0         , 0xA0 ... 0xBF) => (),\n+                            (0xE1 ... 0xEC, 0x80 ... 0xBF) => (),\n+                            (0xED         , 0x80 ... 0x9F) => (),\n+                            (0xEE ... 0xEF, 0x80 ... 0xBF) => (),\n                             _ => {\n                                 error!();\n                                 continue;\n@@ -217,9 +217,9 @@ impl String {\n                     }\n                     4 => {\n                         match (byte, safe_get(v, i, total)) {\n-                            (0xF0        , 0x90 .. 0xBF) => (),\n-                            (0xF1 .. 0xF3, 0x80 .. 0xBF) => (),\n-                            (0xF4        , 0x80 .. 0x8F) => (),\n+                            (0xF0         , 0x90 ... 0xBF) => (),\n+                            (0xF1 ... 0xF3, 0x80 ... 0xBF) => (),\n+                            (0xF4         , 0x80 ... 0x8F) => (),\n                             _ => {\n                                 error!();\n                                 continue;"}, {"sha": "1e87d11d3736766f7bfa5928bce92b278773129e", "filename": "src/libcore/char.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -123,9 +123,9 @@ pub fn to_digit(c: char, radix: uint) -> Option<uint> {\n         fail!(\"to_digit: radix is too high (maximum 36)\");\n     }\n     let val = match c {\n-      '0' .. '9' => c as uint - ('0' as uint),\n-      'a' .. 'z' => c as uint + 10u - ('a' as uint),\n-      'A' .. 'Z' => c as uint + 10u - ('A' as uint),\n+      '0' ... '9' => c as uint - ('0' as uint),\n+      'a' ... 'z' => c as uint + 10u - ('a' as uint),\n+      'A' ... 'Z' => c as uint + 10u - ('A' as uint),\n       _ => return None,\n     };\n     if val < radix { Some(val) }\n@@ -184,7 +184,7 @@ pub fn escape_unicode(c: char, f: |char|) {\n         let offset = offset as uint;\n         unsafe {\n             match ((c as i32) >> offset) & 0xf {\n-                i @ 0 .. 9 => { f(transmute('0' as i32 + i)); }\n+                i @ 0 ... 9 => { f(transmute('0' as i32 + i)); }\n                 i => { f(transmute('a' as i32 + (i - 10))); }\n             }\n         }\n@@ -211,7 +211,7 @@ pub fn escape_default(c: char, f: |char|) {\n         '\\\\' => { f('\\\\'); f('\\\\'); }\n         '\\'' => { f('\\\\'); f('\\''); }\n         '\"'  => { f('\\\\'); f('\"'); }\n-        '\\x20' .. '\\x7e' => { f(c); }\n+        '\\x20' ... '\\x7e' => { f(c); }\n         _ => c.escape_unicode(f),\n     }\n }"}, {"sha": "afcd0d1d645e6d9e38cf87e626ada16c1b094923", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -99,13 +99,13 @@ macro_rules! radix {\n     }\n }\n \n-radix!(Binary,    2, \"0b\", x @  0 .. 2 => b'0' + x)\n-radix!(Octal,     8, \"0o\", x @  0 .. 7 => b'0' + x)\n-radix!(Decimal,  10, \"\",   x @  0 .. 9 => b'0' + x)\n-radix!(LowerHex, 16, \"0x\", x @  0 .. 9 => b'0' + x,\n-                           x @ 10 ..15 => b'a' + (x - 10))\n-radix!(UpperHex, 16, \"0x\", x @  0 .. 9 => b'0' + x,\n-                           x @ 10 ..15 => b'A' + (x - 10))\n+radix!(Binary,    2, \"0b\", x @  0 ...  2 => b'0' + x)\n+radix!(Octal,     8, \"0o\", x @  0 ...  7 => b'0' + x)\n+radix!(Decimal,  10, \"\",   x @  0 ...  9 => b'0' + x)\n+radix!(LowerHex, 16, \"0x\", x @  0 ...  9 => b'0' + x,\n+                           x @ 10 ... 15 => b'a' + (x - 10))\n+radix!(UpperHex, 16, \"0x\", x @  0 ...  9 => b'0' + x,\n+                           x @ 10 ... 15 => b'A' + (x - 10))\n \n /// A radix with in the range of `2..36`.\n #[deriving(Clone, PartialEq)]\n@@ -124,7 +124,7 @@ impl GenericRadix for Radix {\n     fn base(&self) -> u8 { self.base }\n     fn digit(&self, x: u8) -> u8 {\n         match x {\n-            x @  0 ..9 => b'0' + x,\n+            x @  0 ... 9 => b'0' + x,\n             x if x < self.base() => b'a' + (x - 10),\n             x => fail!(\"number not in the range 0..{}: {}\", self.base() - 1, x),\n         }"}, {"sha": "fd7c63a6b3262c353f0e4b618c35a0d489cc24b9", "filename": "src/libcore/str.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -843,18 +843,18 @@ fn run_utf8_validation_iterator(iter: &mut slice::Items<u8>) -> bool {\n                 2 => if second & !CONT_MASK != TAG_CONT_U8 {err!()},\n                 3 => {\n                     match (first, second, next!() & !CONT_MASK) {\n-                        (0xE0        , 0xA0 .. 0xBF, TAG_CONT_U8) |\n-                        (0xE1 .. 0xEC, 0x80 .. 0xBF, TAG_CONT_U8) |\n-                        (0xED        , 0x80 .. 0x9F, TAG_CONT_U8) |\n-                        (0xEE .. 0xEF, 0x80 .. 0xBF, TAG_CONT_U8) => {}\n+                        (0xE0         , 0xA0 ... 0xBF, TAG_CONT_U8) |\n+                        (0xE1 ... 0xEC, 0x80 ... 0xBF, TAG_CONT_U8) |\n+                        (0xED         , 0x80 ... 0x9F, TAG_CONT_U8) |\n+                        (0xEE ... 0xEF, 0x80 ... 0xBF, TAG_CONT_U8) => {}\n                         _ => err!()\n                     }\n                 }\n                 4 => {\n                     match (first, second, next!() & !CONT_MASK, next!() & !CONT_MASK) {\n-                        (0xF0        , 0x90 .. 0xBF, TAG_CONT_U8, TAG_CONT_U8) |\n-                        (0xF1 .. 0xF3, 0x80 .. 0xBF, TAG_CONT_U8, TAG_CONT_U8) |\n-                        (0xF4        , 0x80 .. 0x8F, TAG_CONT_U8, TAG_CONT_U8) => {}\n+                        (0xF0         , 0x90 ... 0xBF, TAG_CONT_U8, TAG_CONT_U8) |\n+                        (0xF1 ... 0xF3, 0x80 ... 0xBF, TAG_CONT_U8, TAG_CONT_U8) |\n+                        (0xF4         , 0x80 ... 0x8F, TAG_CONT_U8, TAG_CONT_U8) => {}\n                         _ => err!()\n                     }\n                 }"}, {"sha": "5fbba286feadf0f34a82e80f595e1850d86161e4", "filename": "src/libdebug/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibdebug%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibdebug%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Frepr.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -227,7 +227,7 @@ impl<'a> ReprVisitor<'a> {\n                     self.writer.write(\"\\\"\".as_bytes())\n                 }\n             }\n-            '\\x20'..'\\x7e' => self.writer.write([ch as u8]),\n+            '\\x20'...'\\x7e' => self.writer.write([ch as u8]),\n             _ => {\n                 char::escape_unicode(ch, |c| {\n                     let _ = self.writer.write([c as u8]);"}, {"sha": "1c3904a89433e0e9c2bb2de4ccd6455579738e37", "filename": "src/libnative/io/tty_windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibnative%2Fio%2Ftty_windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibnative%2Fio%2Ftty_windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftty_windows.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -67,7 +67,7 @@ impl WindowsTTY {\n         // If the file descriptor is one of stdin, stderr, or stdout\n         // then it should not be closed by us\n         let closeme = match fd {\n-            0..2 => false,\n+            0...2 => false,\n             _ => true,\n         };\n         let handle = unsafe { get_osfhandle(fd) as HANDLE };"}, {"sha": "8ae7f070ddb25e6e10a27b8c7269f3675840adcc", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -98,9 +98,9 @@ impl Gamma {\n         assert!(scale > 0.0, \"Gamma::new called with scale <= 0\");\n \n         let repr = match shape {\n-            1.0        => One(Exp::new(1.0 / scale)),\n-            0.0 .. 1.0 => Small(GammaSmallShape::new_raw(shape, scale)),\n-            _          => Large(GammaLargeShape::new_raw(shape, scale))\n+            1.0         => One(Exp::new(1.0 / scale)),\n+            0.0 ... 1.0 => Small(GammaSmallShape::new_raw(shape, scale)),\n+            _           => Large(GammaLargeShape::new_raw(shape, scale))\n         };\n         Gamma { repr: repr }\n     }"}, {"sha": "085975580b7579865164037b03294c385419114f", "filename": "src/libregex/vm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibregex%2Fvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibregex%2Fvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fvm.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -512,7 +512,7 @@ pub fn is_word(c: Option<char>) -> bool {\n     };\n     // Try the common ASCII case before invoking binary search.\n     match c {\n-        '_' | '0' .. '9' | 'a' .. 'z' | 'A' .. 'Z' => true,\n+        '_' | '0' ... '9' | 'a' ... 'z' | 'A' ... 'Z' => true,\n         _ => PERLW.binary_search(|&(start, end)| {\n             if c >= start && c <= end {\n                 Equal"}, {"sha": "0708fdc6eba1e932abaaeaa05f89699ff77f50de", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -277,9 +277,9 @@ pub fn sanitize(s: &str) -> String {\n             '-' | ':' => result.push_char('.'),\n \n             // These are legal symbols\n-            'a' .. 'z'\n-            | 'A' .. 'Z'\n-            | '0' .. '9'\n+            'a' ... 'z'\n+            | 'A' ... 'Z'\n+            | '0' ... '9'\n             | '_' | '.' | '$' => result.push_char(c),\n \n             _ => {"}, {"sha": "35e42e3c54b23764fac9a5a79a804461b866089f", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -110,7 +110,7 @@ impl Svh {\n         fn hex(b: u64) -> char {\n             let b = (b & 0xf) as u8;\n             let b = match b {\n-                0 .. 9 => '0' as u8 + b,\n+                0 ... 9 => '0' as u8 + b,\n                 _ => 'a' as u8 + b - 10,\n             };\n             b as char"}, {"sha": "19dcc3c132cd7328a26db09a303ef35ce92b757b", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -224,9 +224,9 @@ impl<'a> FromBase64 for &'a [u8] {\n             let val = byte as u32;\n \n             match byte {\n-                b'A'..b'Z' => buf |= val - 0x41,\n-                b'a'..b'z' => buf |= val - 0x47,\n-                b'0'..b'9' => buf |= val + 0x04,\n+                b'A'...b'Z' => buf |= val - 0x41,\n+                b'a'...b'z' => buf |= val - 0x47,\n+                b'0'...b'9' => buf |= val + 0x04,\n                 b'+' | b'-' => buf |= 0x3E,\n                 b'/' | b'_' => buf |= 0x3F,\n                 b'\\r' | b'\\n' => continue,"}, {"sha": "ffe63f738cf974eb485e4485a1d580f60938ac4a", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -113,9 +113,9 @@ impl<'a> FromHex for &'a str {\n             buf <<= 4;\n \n             match byte {\n-                b'A'..b'F' => buf |= byte - b'A' + 10,\n-                b'a'..b'f' => buf |= byte - b'a' + 10,\n-                b'0'..b'9' => buf |= byte - b'0',\n+                b'A'...b'F' => buf |= byte - b'A' + 10,\n+                b'a'...b'f' => buf |= byte - b'a' + 10,\n+                b'0'...b'9' => buf |= byte - b'0',\n                 b' '|b'\\r'|b'\\n'|b'\\t' => {\n                     buf >>= 4;\n                     continue"}, {"sha": "3007e160bf8ae536078e643e20078dfb273901d0", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -1392,14 +1392,14 @@ impl<T: Iterator<char>> Parser<T> {\n \n                 // A leading '0' must be the only digit before the decimal point.\n                 match self.ch_or_null() {\n-                    '0' .. '9' => return self.error(InvalidNumber),\n+                    '0' ... '9' => return self.error(InvalidNumber),\n                     _ => ()\n                 }\n             },\n-            '1' .. '9' => {\n+            '1' ... '9' => {\n                 while !self.eof() {\n                     match self.ch_or_null() {\n-                        c @ '0' .. '9' => {\n+                        c @ '0' ... '9' => {\n                             accum *= 10;\n                             accum += (c as u64) - ('0' as u64);\n \n@@ -1423,14 +1423,14 @@ impl<T: Iterator<char>> Parser<T> {\n \n         // Make sure a digit follows the decimal place.\n         match self.ch_or_null() {\n-            '0' .. '9' => (),\n+            '0' ... '9' => (),\n              _ => return self.error(InvalidNumber)\n         }\n \n         let mut dec = 1.0;\n         while !self.eof() {\n             match self.ch_or_null() {\n-                c @ '0' .. '9' => {\n+                c @ '0' ... '9' => {\n                     dec /= 10.0;\n                     res += (((c as int) - ('0' as int)) as f64) * dec;\n                     self.bump();\n@@ -1457,12 +1457,12 @@ impl<T: Iterator<char>> Parser<T> {\n \n         // Make sure a digit follows the exponent place.\n         match self.ch_or_null() {\n-            '0' .. '9' => (),\n+            '0' ... '9' => (),\n             _ => return self.error(InvalidNumber)\n         }\n         while !self.eof() {\n             match self.ch_or_null() {\n-                c @ '0' .. '9' => {\n+                c @ '0' ... '9' => {\n                     exp *= 10;\n                     exp += (c as uint) - ('0' as uint);\n \n@@ -1488,7 +1488,7 @@ impl<T: Iterator<char>> Parser<T> {\n         while i < 4 && !self.eof() {\n             self.bump();\n             n = match self.ch_or_null() {\n-                c @ '0' .. '9' => n * 16 + ((c as u16) - ('0' as u16)),\n+                c @ '0' ... '9' => n * 16 + ((c as u16) - ('0' as u16)),\n                 'a' | 'A' => n * 16 + 10,\n                 'b' | 'B' => n * 16 + 11,\n                 'c' | 'C' => n * 16 + 12,\n@@ -1530,11 +1530,13 @@ impl<T: Iterator<char>> Parser<T> {\n                     'r' => res.push('\\r'),\n                     't' => res.push('\\t'),\n                     'u' => match try!(self.decode_hex_escape()) {\n-                        0xDC00 .. 0xDFFF => return self.error(LoneLeadingSurrogateInHexEscape),\n+                        0xDC00 ... 0xDFFF => {\n+                            return self.error(LoneLeadingSurrogateInHexEscape)\n+                        }\n \n                         // Non-BMP characters are encoded as a sequence of\n                         // two hex escapes, representing UTF-16 surrogates.\n-                        n1 @ 0xD800 .. 0xDBFF => {\n+                        n1 @ 0xD800 ... 0xDBFF => {\n                             match (self.next_char(), self.next_char()) {\n                                 (Some('\\\\'), Some('u')) => (),\n                                 _ => return self.error(UnexpectedEndOfHexEscape),\n@@ -1768,7 +1770,7 @@ impl<T: Iterator<char>> Parser<T> {\n             'n' => { self.parse_ident(\"ull\", NullValue) }\n             't' => { self.parse_ident(\"rue\", BooleanValue(true)) }\n             'f' => { self.parse_ident(\"alse\", BooleanValue(false)) }\n-            '0' .. '9' | '-' => self.parse_number(),\n+            '0' ... '9' | '-' => self.parse_number(),\n             '\"' => match self.parse_str() {\n                 Ok(s) => StringValue(s),\n                 Err(e) => Error(e),"}, {"sha": "b15f334e233e82197863e80b27ea2421146eed89", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -199,8 +199,8 @@ pub fn int_to_str_bytes_common<T: Int>(num: T, radix: uint, sign: SignFormat, f:\n             current_digit_signed\n         };\n         buf[cur] = match current_digit.to_u8().unwrap() {\n-            i @ 0..9 => b'0' + i,\n-            i        => b'a' + (i - 10),\n+            i @ 0...9 => b'0' + i,\n+            i         => b'a' + (i - 10),\n         };\n         cur += 1;\n "}, {"sha": "38c985af37082372b4aa3d2af68fe9f34a82b285", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -637,7 +637,7 @@ impl<'a> StringReader<'a> {\n                 'b' => { self.bump(); base = 2; num_digits = self.scan_digits(2); }\n                 'o' => { self.bump(); base = 8; num_digits = self.scan_digits(8); }\n                 'x' => { self.bump(); base = 16; num_digits = self.scan_digits(16); }\n-                '0'..'9' | '_' | '.' => {\n+                '0'...'9' | '_' | '.' => {\n                     num_digits = self.scan_digits(10) + 1;\n                 }\n                 'u' | 'i' => {"}, {"sha": "c8f1b7f9a8e6d39484af667fdd7f0a393c5f02c3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -3256,8 +3256,7 @@ impl<'a> Parser<'a> {\n             // These expressions are limited to literals (possibly\n             // preceded by unary-minus) or identifiers.\n             let val = self.parse_literal_maybe_minus();\n-            // FIXME(#17295) remove the DOTDOT option.\n-            if (self.token == token::DOTDOTDOT || self.token == token::DOTDOT) &&\n+            if (self.token == token::DOTDOTDOT) &&\n                     self.look_ahead(1, |t| {\n                         *t != token::COMMA && *t != token::RBRACKET\n                     }) {\n@@ -3302,16 +3301,12 @@ impl<'a> Parser<'a> {\n                 }\n             });\n \n-            // FIXME(#17295) remove the DOTDOT option.\n-            if self.look_ahead(1, |t| *t == token::DOTDOTDOT || *t == token::DOTDOT) &&\n+            if self.look_ahead(1, |t| *t == token::DOTDOTDOT) &&\n                     self.look_ahead(2, |t| {\n                         *t != token::COMMA && *t != token::RBRACKET\n                     }) {\n                 let start = self.parse_expr_res(RestrictionNoBarOp);\n-                // FIXME(#17295) remove the DOTDOT option (self.eat(&token::DOTDOTDOT)).\n-                if self.token == token::DOTDOTDOT || self.token == token::DOTDOT {\n-                    self.bump();\n-                }\n+                self.eat(&token::DOTDOTDOT);\n                 let end = self.parse_expr_res(RestrictionNoBarOp);\n                 pat = PatRange(start, end);\n             } else if is_plain_ident(&self.token) && !can_be_enum_or_struct {"}, {"sha": "736cacbdeb78a36b959d940598752d639361b6a0", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -256,15 +256,15 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables)\n                         if res.is_err() { return res }\n                         output.push_all(res.unwrap().as_slice())\n                     } else { return Err(\"stack is empty\".to_string()) },\n-                    ':'|'#'|' '|'.'|'0'..'9' => {\n+                    ':'|'#'|' '|'.'|'0'...'9' => {\n                         let mut flags = Flags::new();\n                         let mut fstate = FormatStateFlags;\n                         match cur {\n                             ':' => (),\n                             '#' => flags.alternate = true,\n                             ' ' => flags.space = true,\n                             '.' => fstate = FormatStatePrecision,\n-                            '0'..'9' => {\n+                            '0'...'9' => {\n                                 flags.width = cur as uint - '0' as uint;\n                                 fstate = FormatStateWidth;\n                             }\n@@ -339,7 +339,7 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables)\n                         stack.push(Number(i));\n                         state = Nothing;\n                     }\n-                    '0'..'9' => {\n+                    '0'...'9' => {\n                         state = IntConstant(i*10 + (cur as int - '0' as int));\n                         old_state = Nothing;\n                     }\n@@ -368,22 +368,22 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables)\n                     (FormatStateFlags,' ') => {\n                         flags.space = true;\n                     }\n-                    (FormatStateFlags,'0'..'9') => {\n+                    (FormatStateFlags,'0'...'9') => {\n                         flags.width = cur as uint - '0' as uint;\n                         *fstate = FormatStateWidth;\n                     }\n                     (FormatStateFlags,'.') => {\n                         *fstate = FormatStatePrecision;\n                     }\n-                    (FormatStateWidth,'0'..'9') => {\n+                    (FormatStateWidth,'0'...'9') => {\n                         let old = flags.width;\n                         flags.width = flags.width * 10 + (cur as uint - '0' as uint);\n                         if flags.width < old { return Err(\"format width overflow\".to_string()) }\n                     }\n                     (FormatStateWidth,'.') => {\n                         *fstate = FormatStatePrecision;\n                     }\n-                    (FormatStatePrecision,'0'..'9') => {\n+                    (FormatStatePrecision,'0'...'9') => {\n                         let old = flags.precision;\n                         flags.precision = flags.precision * 10 + (cur as uint - '0' as uint);\n                         if flags.precision < old {"}, {"sha": "4061db66ddf8f90f1d8c975ed02e792a2ce759e5", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -447,7 +447,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, String> {\n             pos = range.next;\n \n             match range.ch {\n-              '0' .. '9' => {\n+              '0' ... '9' => {\n                 value = value * 10_i32 + (range.ch as i32 - '0' as i32);\n               }\n               ' ' if ws => (),\n@@ -472,7 +472,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, String> {\n             let range = ss.char_range_at(pos);\n \n             match range.ch {\n-                '0' .. '9' => {\n+                '0' ... '9' => {\n                     pos = range.next;\n                     // This will drop digits after the nanoseconds place\n                     let digit = range.ch as i32 - '0' as i32;"}, {"sha": "f725cdba64ef5f0ff1f95b124967c99e731d4d30", "filename": "src/libunicode/u_char.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibunicode%2Fu_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibunicode%2Fu_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_char.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -22,7 +22,7 @@ use tables::{derived_property, property, general_category, conversions, charwidt\n /// code point\n pub fn is_alphabetic(c: char) -> bool {\n     match c {\n-        'a' .. 'z' | 'A' .. 'Z' => true,\n+        'a' ... 'z' | 'A' ... 'Z' => true,\n         c if c > '\\x7f' => derived_property::Alphabetic(c),\n         _ => false\n     }\n@@ -52,7 +52,7 @@ pub fn is_XID_continue(c: char) -> bool { derived_property::XID_Continue(c) }\n #[inline]\n pub fn is_lowercase(c: char) -> bool {\n     match c {\n-        'a' .. 'z' => true,\n+        'a' ... 'z' => true,\n         c if c > '\\x7f' => derived_property::Lowercase(c),\n         _ => false\n     }\n@@ -66,7 +66,7 @@ pub fn is_lowercase(c: char) -> bool {\n #[inline]\n pub fn is_uppercase(c: char) -> bool {\n     match c {\n-        'A' .. 'Z' => true,\n+        'A' ... 'Z' => true,\n         c if c > '\\x7f' => derived_property::Uppercase(c),\n         _ => false\n     }\n@@ -80,7 +80,7 @@ pub fn is_uppercase(c: char) -> bool {\n #[inline]\n pub fn is_whitespace(c: char) -> bool {\n     match c {\n-        ' ' | '\\x09' .. '\\x0d' => true,\n+        ' ' | '\\x09' ... '\\x0d' => true,\n         c if c > '\\x7f' => property::White_Space(c),\n         _ => false\n     }\n@@ -111,7 +111,7 @@ pub fn is_control(c: char) -> bool { general_category::Cc(c) }\n #[inline]\n pub fn is_digit(c: char) -> bool {\n     match c {\n-        '0' .. '9' => true,\n+        '0' ... '9' => true,\n         c if c > '\\x7f' => general_category::N(c),\n         _ => false\n     }"}, {"sha": "cb4940861ebc5dca3063f08b49e52e3a34a7eff5", "filename": "src/liburl/lib.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Fliburl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Fliburl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliburl%2Flib.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -190,9 +190,9 @@ fn encode_inner<T: BytesContainer>(c: T, full_url: bool) -> String {\n     c.container_as_bytes().iter().fold(String::new(), |mut out, &b| {\n         match b as char {\n             // unreserved:\n-            'A' .. 'Z'\n-            | 'a' .. 'z'\n-            | '0' .. '9'\n+            'A' ... 'Z'\n+            | 'a' ... 'z'\n+            | '0' ... '9'\n             | '-' | '.' | '_' | '~' => out.push_char(b as char),\n \n             // gen-delims:\n@@ -303,9 +303,9 @@ pub fn encode_form_urlencoded(m: &HashMap<String, Vec<String>>) -> String {\n     fn encode_plus<T: Str>(s: &T) -> String {\n         s.as_slice().bytes().fold(String::new(), |mut out, b| {\n             match b as char {\n-              'A' .. 'Z'\n-              | 'a' .. 'z'\n-              | '0' .. '9'\n+              'A' ... 'Z'\n+              | 'a' ... 'z'\n+              | '0' ... '9'\n               | '_' | '.' | '-' => out.push_char(b as char),\n               ' ' => out.push_char('+'),\n               ch => out.push_str(format!(\"%{:X}\", ch as uint).as_slice())\n@@ -473,9 +473,9 @@ pub fn query_to_str(query: &Query) -> String {\n pub fn get_scheme(rawurl: &str) -> DecodeResult<(&str, &str)> {\n     for (i,c) in rawurl.chars().enumerate() {\n         let result = match c {\n-            'A' .. 'Z'\n-            | 'a' .. 'z' => continue,\n-            '0' .. '9' | '+' | '-' | '.' => {\n+            'A' ... 'Z'\n+            | 'a' ... 'z' => continue,\n+            '0' ... '9' | '+' | '-' | '.' => {\n                 if i != 0 { continue }\n \n                 Err(\"url: Scheme must begin with a letter.\".to_string())\n@@ -538,15 +538,15 @@ fn get_authority(rawurl: &str) ->\n                                .skip(2) {\n         // deal with input class first\n         match c {\n-            '0' .. '9' => (),\n-            'A' .. 'F'\n-            | 'a' .. 'f' => {\n+            '0' ... '9' => (),\n+            'A' ... 'F'\n+            | 'a' ... 'f' => {\n                 if input == Digit {\n                     input = Hex;\n                 }\n             }\n-            'G' .. 'Z'\n-            | 'g' .. 'z'\n+            'G' ... 'Z'\n+            | 'g' ... 'z'\n             | '-' | '.' | '_' | '~' | '%'\n             | '&' |'\\'' | '(' | ')' | '+'\n             | '!' | '*' | ',' | ';' | '=' => input = Unreserved,\n@@ -671,9 +671,9 @@ fn get_path(rawurl: &str, is_authority: bool) -> DecodeResult<(String, &str)> {\n     let mut end = len;\n     for (i,c) in rawurl.chars().enumerate() {\n         match c {\n-          'A' .. 'Z'\n-          | 'a' .. 'z'\n-          | '0' .. '9'\n+          'A' ... 'Z'\n+          | 'a' ... 'z'\n+          | '0' ... '9'\n           | '&' |'\\'' | '(' | ')' | '.'\n           | '@' | ':' | '%' | '/' | '+'\n           | '!' | '*' | ',' | ';' | '='"}, {"sha": "f728205c3a57f58068aa8a9f6b130b0d2ab0e5dd", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -387,7 +387,7 @@ impl Uuid {\n         // Make sure all chars are either hex digits or hyphen\n         for (i, c) in us.chars().enumerate() {\n             match c {\n-                '0'..'9' | 'A'..'F' | 'a'..'f' | '-' => {},\n+                '0'...'9' | 'A'...'F' | 'a'...'f' | '-' => {},\n                 _ => return Err(ErrorInvalidCharacter(c, i)),\n             }\n         }"}, {"sha": "2b4c77bf9e8734a4dfbc56d53680e108b87cfaba", "filename": "src/test/compile-fail/match-ill-type1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type1.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     match 1 {\n-        1..2u => 1, //~ ERROR mismatched types in range\n+        1...2u => 1, //~ ERROR mismatched types in range\n         _ => 2,\n     };\n }"}, {"sha": "7a4451f99ab0cb7871b10c8465c17d49cfbd3e8f", "filename": "src/test/compile-fail/match-range-fail-dominate.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-dominate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-dominate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-dominate.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -16,31 +16,31 @@\n \n fn main() {\n     match 5u {\n-      1u .. 10u => { }\n-      5u .. 6u => { }\n+      1u ... 10u => { }\n+      5u ... 6u => { }\n       _ => {}\n     };\n \n     match 5u {\n-      3u .. 6u => { }\n-      4u .. 6u => { }\n+      3u ... 6u => { }\n+      4u ... 6u => { }\n       _ => {}\n     };\n \n     match 5u {\n-      4u .. 6u => { }\n-      4u .. 6u => { }\n+      4u ... 6u => { }\n+      4u ... 6u => { }\n       _ => {}\n     };\n \n     match 'c' {\n-      'A' .. 'z' => {}\n-      'a' .. 'z' => {}\n+      'A' ... 'z' => {}\n+      'a' ... 'z' => {}\n       _ => {}\n     };\n \n     match 1.0f64 {\n-      0.01f64 .. 6.5f64 => {}\n+      0.01f64 ... 6.5f64 => {}\n       0.02f64 => {}\n       _ => {}\n     };"}, {"sha": "9fbd1545fcf6769569c69ddf3bb92556c35b069b", "filename": "src/test/compile-fail/match-range-fail.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -14,16 +14,16 @@\n \n fn main() {\n     match 5u {\n-      6u .. 1u => { }\n+      6u ... 1u => { }\n       _ => { }\n     };\n \n     match \"wow\" {\n-      \"bar\" .. \"foo\" => { }\n+      \"bar\" ... \"foo\" => { }\n     };\n \n     match 5u {\n-      'c' .. 100u => { }\n+      'c' ... 100u => { }\n       _ => { }\n     };\n }"}, {"sha": "98d616ee3afb56629ee8a547fdd307fb436e2a53", "filename": "src/test/compile-fail/refutable-pattern-errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-errors.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n \n-fn func((1, (Some(1), 2..3)): (int, (Option<int>, int))) { }\n+fn func((1, (Some(1), 2...3)): (int, (Option<int>, int))) { }\n //~^ ERROR refutable pattern in function argument: `(_, _)` not covered\n \n fn main() {\n-    let (1i, (Some(1i), 2i..3i)) = (1i, (None, 2i));\n+    let (1i, (Some(1i), 2i...3i)) = (1i, (None, 2i));\n     //~^ ERROR refutable pattern in local binding: `(_, _)` not covered\n }"}, {"sha": "aa45bfd14541cded421085bd0d12c309baabf2e7", "filename": "src/test/run-pass/byte-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbyte-literals.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -33,7 +33,7 @@ pub fn main() {\n     }\n \n     match 100 {\n-        b'a' .. b'z' => {},\n+        b'a' ... b'z' => {},\n         _ => fail!()\n     }\n "}, {"sha": "a104ee6baaacec4fae4f610878b31ebaac441168", "filename": "src/test/run-pass/inferred-suffix-in-pattern-range.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -11,21 +11,21 @@\n pub fn main() {\n     let x = 2i;\n     let x_message = match x {\n-      0 .. 1     => { \"not many\".to_string() }\n+      0 ... 1    => { \"not many\".to_string() }\n       _          => { \"lots\".to_string() }\n     };\n     assert_eq!(x_message, \"lots\".to_string());\n \n     let y = 2i;\n     let y_message = match y {\n-      0 .. 1     => { \"not many\".to_string() }\n+      0 ... 1    => { \"not many\".to_string() }\n       _          => { \"lots\".to_string() }\n     };\n     assert_eq!(y_message, \"lots\".to_string());\n \n     let z = 1u64;\n     let z_message = match z {\n-      0 .. 1     => { \"not many\".to_string() }\n+      0 ... 1    => { \"not many\".to_string() }\n       _          => { \"lots\".to_string() }\n     };\n     assert_eq!(z_message, \"not many\".to_string());"}, {"sha": "ab2abc094f4db2f1000eb45f8c5ec5efd6762db8", "filename": "src/test/run-pass/issue-12582.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Frun-pass%2Fissue-12582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Frun-pass%2Fissue-12582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12582.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -17,15 +17,15 @@ pub fn main() {\n     assert_eq!(3i, match (x, y) {\n         (1, 1) => 1,\n         (2, 2) => 2,\n-        (1..2, 2) => 3,\n+        (1...2, 2) => 3,\n         _ => 4,\n     });\n \n     // nested tuple\n     assert_eq!(3i, match ((x, y),) {\n         ((1, 1),) => 1,\n         ((2, 2),) => 2,\n-        ((1..2, 2),) => 3,\n+        ((1...2, 2),) => 3,\n         _ => 4,\n     });\n }"}, {"sha": "6cd098aeb0f8c8761bcd1cf0f116b3d444381f9f", "filename": "src/test/run-pass/issue-13027.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Frun-pass%2Fissue-13027.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Frun-pass%2Fissue-13027.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13027.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -31,115 +31,115 @@ pub fn main() {\n fn lit_shadow_range() {\n     assert_eq!(2i, match 1i {\n         1 if false => 1i,\n-        1..2 => 2,\n+        1...2 => 2,\n         _ => 3\n     });\n \n     let x = 0i;\n     assert_eq!(2i, match x+1 {\n         0 => 0i,\n         1 if false => 1,\n-        1..2 => 2,\n+        1...2 => 2,\n         _ => 3\n     });\n \n     assert_eq!(2i, match val() {\n         1 if false => 1i,\n-        1..2 => 2,\n+        1...2 => 2,\n         _ => 3\n     });\n \n     assert_eq!(2i, match CONST {\n         0 => 0i,\n         1 if false => 1,\n-        1..2 => 2,\n+        1...2 => 2,\n         _ => 3\n     });\n \n     // value is out of the range of second arm, should match wildcard pattern\n     assert_eq!(3i, match 3i {\n         1 if false => 1i,\n-        1..2 => 2,\n+        1...2 => 2,\n         _ => 3\n     });\n }\n \n fn range_shadow_lit() {\n     assert_eq!(2i, match 1i {\n-        1..2 if false => 1i,\n+        1...2 if false => 1i,\n         1 => 2,\n         _ => 3\n     });\n \n     let x = 0i;\n     assert_eq!(2i, match x+1 {\n         0 => 0i,\n-        1..2 if false => 1,\n+        1...2 if false => 1,\n         1 => 2,\n         _ => 3\n     });\n \n     assert_eq!(2i, match val() {\n-        1..2 if false => 1i,\n+        1...2 if false => 1i,\n         1 => 2,\n         _ => 3\n     });\n \n     assert_eq!(2i, match CONST {\n         0 => 0i,\n-        1..2 if false => 1,\n+        1...2 if false => 1,\n         1 => 2,\n         _ => 3\n     });\n \n     // ditto\n     assert_eq!(3i, match 3i {\n-        1..2 if false => 1i,\n+        1...2 if false => 1i,\n         1 => 2,\n         _ => 3\n     });\n }\n \n fn range_shadow_range() {\n     assert_eq!(2i, match 1i {\n-        0..2 if false => 1i,\n-        1..3 => 2,\n+        0...2 if false => 1i,\n+        1...3 => 2,\n         _ => 3,\n     });\n \n     let x = 0i;\n     assert_eq!(2i, match x+1 {\n         100 => 0,\n-        0..2 if false => 1,\n-        1..3 => 2,\n+        0...2 if false => 1,\n+        1...3 => 2,\n         _ => 3,\n     });\n \n     assert_eq!(2i, match val() {\n-        0..2 if false => 1,\n-        1..3 => 2,\n+        0...2 if false => 1,\n+        1...3 => 2,\n         _ => 3,\n     });\n \n     assert_eq!(2i, match CONST {\n         100 => 0,\n-        0..2 if false => 1,\n-        1..3 => 2,\n+        0...2 if false => 1,\n+        1...3 => 2,\n         _ => 3,\n     });\n \n     // ditto\n     assert_eq!(3i, match 5i {\n-        0..2 if false => 1i,\n-        1..3 => 2,\n+        0...2 if false => 1i,\n+        1...3 => 2,\n         _ => 3,\n     });\n }\n \n fn multi_pats_shadow_lit() {\n     assert_eq!(2i, match 1i {\n         100 => 0i,\n-        0 | 1..10 if false => 1,\n+        0 | 1...10 if false => 1,\n         1 => 2,\n         _ => 3,\n     });\n@@ -148,8 +148,8 @@ fn multi_pats_shadow_lit() {\n fn multi_pats_shadow_range() {\n     assert_eq!(2i, match 1i {\n         100 => 0i,\n-        0 | 1..10 if false => 1,\n-        1..3 => 2,\n+        0 | 1...10 if false => 1,\n+        1...3 => 2,\n         _ => 3,\n     });\n }\n@@ -158,16 +158,16 @@ fn lit_shadow_multi_pats() {\n     assert_eq!(2i, match 1i {\n         100 => 0i,\n         1 if false => 1,\n-        0 | 1..10 => 2,\n+        0 | 1...10 => 2,\n         _ => 3,\n     });\n }\n \n fn range_shadow_multi_pats() {\n     assert_eq!(2i, match 1i {\n         100 => 0i,\n-        1..3 if false => 1,\n-        0 | 1..10 => 2,\n+        1...3 if false => 1,\n+        0 | 1...10 => 2,\n         _ => 3,\n     });\n }"}, {"sha": "b1607ef174bb2a4d1849c583d1bdff5023c6b039", "filename": "src/test/run-pass/issue-13867.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Frun-pass%2Fissue-13867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Frun-pass%2Fissue-13867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13867.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -18,38 +18,38 @@ enum Foo {\n \n fn main() {\n     let r = match (FooNullary, 'a') {\n-        (FooUint(..), 'a'..'z') => 1i,\n+        (FooUint(..), 'a'...'z') => 1i,\n         (FooNullary, 'x') => 2i,\n         _ => 0\n     };\n     assert_eq!(r, 0);\n \n     let r = match (FooUint(0), 'a') {\n-        (FooUint(1), 'a'..'z') => 1i,\n+        (FooUint(1), 'a'...'z') => 1i,\n         (FooUint(..), 'x') => 2i,\n         (FooNullary, 'a') => 3i,\n         _ => 0\n     };\n     assert_eq!(r, 0);\n \n     let r = match ('a', FooUint(0)) {\n-        ('a'..'z', FooUint(1)) => 1i,\n+        ('a'...'z', FooUint(1)) => 1i,\n         ('x', FooUint(..)) => 2i,\n         ('a', FooNullary) => 3i,\n         _ => 0\n     };\n     assert_eq!(r, 0);\n \n     let r = match ('a', 'a') {\n-        ('a'..'z', 'b') => 1i,\n-        ('x', 'a'..'z') => 2i,\n+        ('a'...'z', 'b') => 1i,\n+        ('x', 'a'...'z') => 2i,\n         _ => 0\n     };\n     assert_eq!(r, 0);\n \n     let r = match ('a', 'a') {\n-        ('a'..'z', 'b') => 1i,\n-        ('x', 'a'..'z') => 2i,\n+        ('a'...'z', 'b') => 1i,\n+        ('x', 'a'...'z') => 2i,\n         ('a', 'a') => 3i,\n         _ => 0\n     };"}, {"sha": "b86b9a83e35bcdc7a5fa88706d28c8183be67429", "filename": "src/test/run-pass/issue-7222.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Frun-pass%2Fissue-7222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Frun-pass%2Fissue-7222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7222.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -12,7 +12,7 @@ pub fn main() {\n     static FOO: f64 = 10.0;\n \n     match 0.0 {\n-        0.0 .. FOO => (),\n+        0.0 ... FOO => (),\n         _ => ()\n     }\n }"}, {"sha": "4761d2606fc2a9185beaa5f4ec7ffcfd5c9d437b", "filename": "src/test/run-pass/match-range.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f15dcd4d3865f9cc466637027eb02d5607b2bb7/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-range.rs?ref=2f15dcd4d3865f9cc466637027eb02d5607b2bb7", "patch": "@@ -12,32 +12,32 @@\n \n pub fn main() {\n     match 5u {\n-      1u..5u => {}\n+      1u...5u => {}\n       _ => fail!(\"should match range\"),\n     }\n     match 5u {\n-      6u..7u => fail!(\"shouldn't match range\"),\n+      6u...7u => fail!(\"shouldn't match range\"),\n       _ => {}\n     }\n     match 5u {\n       1u => fail!(\"should match non-first range\"),\n-      2u..6u => {}\n+      2u...6u => {}\n       _ => fail!(\"math is broken\")\n     }\n     match 'c' {\n-      'a'..'z' => {}\n+      'a'...'z' => {}\n       _ => fail!(\"should suppport char ranges\")\n     }\n     match -3i {\n-      -7..5 => {}\n+      -7...5 => {}\n       _ => fail!(\"should match signed range\")\n     }\n     match 3.0f64 {\n-      1.0..5.0 => {}\n+      1.0...5.0 => {}\n       _ => fail!(\"should match float range\")\n     }\n     match -1.5f64 {\n-      -3.6..3.6 => {}\n+      -3.6...3.6 => {}\n       _ => fail!(\"should match negative float range\")\n     }\n }"}]}