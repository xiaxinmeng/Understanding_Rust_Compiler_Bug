{"sha": "1b5c60f5491d8f992d89734e3027d5ba01fabfab", "node_id": "C_kwDOAAsO6NoAKDFiNWM2MGY1NDkxZDhmOTkyZDg5NzM0ZTMwMjdkNWJhMDFmYWJmYWI", "commit": {"author": {"name": "C\u00f4me ALLART", "email": "come.allart@etu.emse.fr", "date": "2022-01-07T13:04:03Z"}, "committer": {"name": "C\u00f4me ALLART", "email": "come.allart@etu.emse.fr", "date": "2022-01-07T13:07:35Z"}, "message": "refactor: apply suggestions\n\nSee PR #11194", "tree": {"sha": "cf25b20839bad3d0a0b18422f2492d2edf3e7b9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf25b20839bad3d0a0b18422f2492d2edf3e7b9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b5c60f5491d8f992d89734e3027d5ba01fabfab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b5c60f5491d8f992d89734e3027d5ba01fabfab", "html_url": "https://github.com/rust-lang/rust/commit/1b5c60f5491d8f992d89734e3027d5ba01fabfab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b5c60f5491d8f992d89734e3027d5ba01fabfab/comments", "author": null, "committer": null, "parents": [{"sha": "c2d3f908867335e393ac549a9e9c18d6c75f2996", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d3f908867335e393ac549a9e9c18d6c75f2996", "html_url": "https://github.com/rust-lang/rust/commit/c2d3f908867335e393ac549a9e9c18d6c75f2996"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "bb7c8b10102cb07d0b700f5578d19782e7254fac", "filename": "crates/ide_assists/src/handlers/generate_documentation_template.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b5c60f5491d8f992d89734e3027d5ba01fabfab/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5c60f5491d8f992d89734e3027d5ba01fabfab/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs?ref=1b5c60f5491d8f992d89734e3027d5ba01fabfab", "patch": "@@ -229,15 +229,17 @@ fn self_type(ast_func: &ast::Fn) -> Option<ast::Type> {\n \n /// Output the real name of `Self` like `MyType<T>`, without the lifetimes.\n fn self_type_without_lifetimes(ast_func: &ast::Fn) -> Option<String> {\n-    let path_segment =\n-        ast::PathType::cast(self_type(ast_func)?.syntax().clone())?.path()?.segment()?;\n+    let path_segment = match self_type(ast_func)? {\n+        ast::Type::PathType(path_type) => path_type.path()?.segment()?,\n+        _ => return None,\n+    };\n     let mut name = path_segment.name_ref()?.to_string();\n     let generics = path_segment\n         .generic_arg_list()?\n         .generic_args()\n         .filter(|generic| matches!(generic, ast::GenericArg::TypeArg(_)))\n         .map(|generic| generic.to_string());\n-    let generics: String = Itertools::intersperse(generics, \", \".to_string()).collect();\n+    let generics: String = generics.format(\", \").to_string();\n     if !generics.is_empty() {\n         name.push('<');\n         name.push_str(&generics);\n@@ -325,7 +327,7 @@ fn arguments_from_params(param_list: &ast::ParamList) -> String {\n         },\n         _ => \"_\".to_string(),\n     });\n-    Itertools::intersperse(args_iter, \", \".to_string()).collect()\n+    args_iter.format(\", \").to_string()\n }\n \n /// Helper function to build a function call. `None` if expected `self_name` was not provided"}]}