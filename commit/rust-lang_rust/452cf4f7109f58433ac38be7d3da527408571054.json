{"sha": "452cf4f7109f58433ac38be7d3da527408571054", "node_id": "C_kwDOAAsO6NoAKDQ1MmNmNGY3MTA5ZjU4NDMzYWMzOGJlN2QzZGE1Mjc0MDg1NzEwNTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-05T07:32:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-05T07:32:09Z"}, "message": "Auto merge of #103998 - Dylan-DPC:rollup-2nbmtc9, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #103621 (Correctly resolve Inherent Associated Types)\n - #103660 (improve `filesearch::get_or_default_sysroot`)\n - #103866 (Remove some return-type diagnostic booleans from `FnCtxt`)\n - #103867 (Remove `has_errors` from `FnCtxt`)\n - #103994 (Specify that `break` cannot be used outside of loop *or* labeled block)\n - #103995 (Small round of typo fixes)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5d1d5a5ac985033344fb4b5abe6b9d4a7a8960e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d1d5a5ac985033344fb4b5abe6b9d4a7a8960e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/452cf4f7109f58433ac38be7d3da527408571054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/452cf4f7109f58433ac38be7d3da527408571054", "html_url": "https://github.com/rust-lang/rust/commit/452cf4f7109f58433ac38be7d3da527408571054", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/452cf4f7109f58433ac38be7d3da527408571054/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b3e9090757da9a95b22f589fe39b6a4b5455b96", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3e9090757da9a95b22f589fe39b6a4b5455b96", "html_url": "https://github.com/rust-lang/rust/commit/5b3e9090757da9a95b22f589fe39b6a4b5455b96"}, {"sha": "47e6304e325463bc6608a6f1eb61391fa36dd76a", "url": "https://api.github.com/repos/rust-lang/rust/commits/47e6304e325463bc6608a6f1eb61391fa36dd76a", "html_url": "https://github.com/rust-lang/rust/commit/47e6304e325463bc6608a6f1eb61391fa36dd76a"}], "stats": {"total": 712, "additions": 300, "deletions": 412}, "files": [{"sha": "f230f50212a3b841ef1b5aff6dc5c9db566b55bb", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -3672,7 +3672,6 @@ dependencies = [\n name = \"rustc_interface\"\n version = \"0.0.0\"\n dependencies = [\n- \"libc\",\n  \"libloading\",\n  \"rustc-rayon\",\n  \"rustc-rayon-core\",\n@@ -3715,7 +3714,6 @@ dependencies = [\n  \"rustc_ty_utils\",\n  \"smallvec\",\n  \"tracing\",\n- \"winapi\",\n ]\n \n [[package]]\n@@ -4135,6 +4133,7 @@ name = \"rustc_session\"\n version = \"0.0.0\"\n dependencies = [\n  \"getopts\",\n+ \"libc\",\n  \"rustc_ast\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n@@ -4146,7 +4145,9 @@ dependencies = [\n  \"rustc_serialize\",\n  \"rustc_span\",\n  \"rustc_target\",\n+ \"smallvec\",\n  \"tracing\",\n+ \"winapi\",\n ]\n \n [[package]]"}, {"sha": "5a1ad792924fcf2ce45a784a9550e5af6d7603da", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -1123,7 +1123,8 @@ fn link_sanitizer_runtime(sess: &Session, linker: &mut dyn Linker, name: &str) {\n         if path.exists() {\n             return session_tlib;\n         } else {\n-            let default_sysroot = filesearch::get_or_default_sysroot();\n+            let default_sysroot =\n+                filesearch::get_or_default_sysroot().expect(\"Failed finding sysroot\");\n             let default_tlib = filesearch::make_target_lib_path(\n                 &default_sysroot,\n                 sess.opts.target_triple.triple(),"}, {"sha": "5239ff9dc0571d31e0bb58fd6b1e2044deb09b6e", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -451,8 +451,14 @@ passes_break_inside_async_block =\n     .async_block_label = enclosing `async` block\n \n passes_outside_loop =\n-    `{$name}` outside of a loop\n-    .label = cannot `{$name}` outside of a loop\n+    `{$name}` outside of a loop{$is_break ->\n+        [true] {\" or labeled block\"}\n+        *[false] {\"\"}\n+    }\n+    .label = cannot `{$name}` outside of a loop{$is_break ->\n+        [true] {\" or labeled block\"}\n+        *[false] {\"\"}\n+    }\n \n passes_unlabeled_in_labeled_block =\n     unlabeled `{$cf_type}` inside of a labeled block"}, {"sha": "9ad1d2bc542d7ce3ac96ae57dfc9b7b0c9c9c730", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -1910,6 +1910,20 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     }\n                 }\n             }\n+\n+            // see if we can satisfy using an inherent associated type\n+            for impl_ in tcx.inherent_impls(adt_def.did()) {\n+                let assoc_ty = tcx.associated_items(impl_).find_by_name_and_kind(\n+                    tcx,\n+                    assoc_ident,\n+                    ty::AssocKind::Type,\n+                    *impl_,\n+                );\n+                if let Some(assoc_ty) = assoc_ty {\n+                    let ty = tcx.type_of(assoc_ty.def_id);\n+                    return Ok((ty, DefKind::AssocTy, assoc_ty.def_id));\n+                }\n+            }\n         }\n \n         // Find the type of the associated item, and the trait where the associated"}, {"sha": "8d39fa81165ea6bdec7d832b39d3313f31f09b46", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -491,11 +491,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ..\n                 } = self.type_var_origin(expected)? else { return None; };\n \n-                let sig = *self\n-                    .typeck_results\n-                    .borrow()\n-                    .liberated_fn_sigs()\n-                    .get(hir::HirId::make_owner(self.body_id.owner.def_id))?;\n+                let sig = self.body_fn_sig()?;\n \n                 let substs = sig.output().walk().find_map(|arg| {\n                     if let ty::GenericArgKind::Type(ty) = arg.unpack()"}, {"sha": "80147d9009113f329cefc5ca4ada2d660210adad", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -31,13 +31,11 @@ pub(super) fn check_fn<'a, 'tcx>(\n     fn_id: hir::HirId,\n     body: &'tcx hir::Body<'tcx>,\n     can_be_generator: Option<hir::Movability>,\n-    return_type_pre_known: bool,\n ) -> (FnCtxt<'a, 'tcx>, Option<GeneratorTypes<'tcx>>) {\n     // Create the function context. This is either derived from scratch or,\n     // in the case of closures, based on the outer context.\n     let mut fcx = FnCtxt::new(inherited, param_env, body.value.hir_id);\n     fcx.ps.set(UnsafetyState::function(fn_sig.unsafety, fn_id));\n-    fcx.return_type_pre_known = return_type_pre_known;\n \n     let tcx = fcx.tcx;\n     let hir = tcx.hir();\n@@ -51,9 +49,6 @@ pub(super) fn check_fn<'a, 'tcx>(\n             decl.output.span(),\n             param_env,\n         ));\n-    // If we replaced declared_ret_ty with infer vars, then we must be inferring\n-    // an opaque type, so set a flag so we can improve diagnostics.\n-    fcx.return_type_has_opaque = ret_ty != declared_ret_ty;\n \n     fcx.ret_coercion = Some(RefCell::new(CoerceMany::new(ret_ty)));\n "}, {"sha": "09df50c76b73828500f0466c55e54bb2154adec9", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -83,8 +83,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         debug!(?bound_sig, ?liberated_sig);\n \n-        let return_type_pre_known = !liberated_sig.output().is_ty_infer();\n-\n         let generator_types = check_fn(\n             self,\n             self.param_env.without_const(),\n@@ -93,7 +91,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             expr.hir_id,\n             body,\n             gen,\n-            return_type_pre_known,\n         )\n         .1;\n "}, {"sha": "e8bf299b0378ea2241f04cd11c3fb29700a925df", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -1782,7 +1782,8 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n             // may occur at the first return expression we see in the closure\n             // (if it conflicts with the declared return type). Skip adding a\n             // note in this case, since it would be incorrect.\n-            && !fcx.return_type_pre_known\n+            && let Some(fn_sig) = fcx.body_fn_sig()\n+            && fn_sig.output().is_ty_var()\n         {\n             err.span_note(\n                 sp,"}, {"sha": "682dbab56bc15b0c63d91c21c415327fdb369308", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -220,7 +220,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Hide the outer diverging and has_errors flags.\n         let old_diverges = self.diverges.replace(Diverges::Maybe);\n-        let old_has_errors = self.has_errors.replace(false);\n \n         let ty = ensure_sufficient_stack(|| match &expr.kind {\n             hir::ExprKind::Path(\n@@ -259,7 +258,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Combine the diverging and has_error flags.\n         self.diverges.set(self.diverges.get() | old_diverges);\n-        self.has_errors.set(self.has_errors.get() | old_has_errors);\n \n         debug!(\"type of {} is...\", self.tcx.hir().node_to_string(expr.hir_id));\n         debug!(\"... {:?}, expected is {:?}\", ty, expected);\n@@ -840,7 +838,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return_expr_ty,\n         );\n \n-        if self.return_type_has_opaque {\n+        if let Some(fn_sig) = self.body_fn_sig()\n+            && fn_sig.output().has_opaque_types()\n+        {\n             // Point any obligations that were registered due to opaque type\n             // inference at the return expression.\n             self.select_obligations_where_possible(false, |errors| {"}, {"sha": "7563c543d3f19d55adc0e4a417115638ac7a7101", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -143,7 +143,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.typeck_results.borrow_mut().node_types_mut().insert(id, ty);\n \n         if ty.references_error() {\n-            self.has_errors.set(true);\n             self.set_tainted_by_errors();\n         }\n     }"}, {"sha": "e1955d838f253ebb2c524d5bf9c9ab88761a2037", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -1334,7 +1334,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Hide the outer diverging and `has_errors` flags.\n         let old_diverges = self.diverges.replace(Diverges::Maybe);\n-        let old_has_errors = self.has_errors.replace(false);\n \n         match stmt.kind {\n             hir::StmtKind::Local(l) => {\n@@ -1364,7 +1363,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Combine the diverging and `has_error` flags.\n         self.diverges.set(self.diverges.get() | old_diverges);\n-        self.has_errors.set(self.has_errors.get() | old_has_errors);\n     }\n \n     pub fn check_block_no_value(&self, blk: &'tcx hir::Block<'tcx>) {\n@@ -1544,11 +1542,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.diverges.set(prev_diverges);\n         }\n \n-        let mut ty = ctxt.coerce.unwrap().complete(self);\n-\n-        if self.has_errors.get() || ty.references_error() {\n-            ty = self.tcx.ty_error()\n-        }\n+        let ty = ctxt.coerce.unwrap().complete(self);\n \n         self.write_ty(blk.hir_id, ty);\n "}, {"sha": "72388baa261eae30def6f8dc8d449343b814c6ad", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/mod.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -112,21 +112,9 @@ pub struct FnCtxt<'a, 'tcx> {\n     /// the diverges flag is set to something other than `Maybe`.\n     pub(super) diverges: Cell<Diverges>,\n \n-    /// Whether any child nodes have any type errors.\n-    pub(super) has_errors: Cell<bool>,\n-\n     pub(super) enclosing_breakables: RefCell<EnclosingBreakables<'tcx>>,\n \n     pub(super) inh: &'a Inherited<'tcx>,\n-\n-    /// True if the function or closure's return type is known before\n-    /// entering the function/closure, i.e. if the return type is\n-    /// either given explicitly or inferred from, say, an `Fn*` trait\n-    /// bound. Used for diagnostic purposes only.\n-    pub(super) return_type_pre_known: bool,\n-\n-    /// True if the return type has an Opaque type\n-    pub(super) return_type_has_opaque: bool,\n }\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -145,14 +133,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             resume_yield_tys: None,\n             ps: Cell::new(UnsafetyState::function(hir::Unsafety::Normal, hir::CRATE_HIR_ID)),\n             diverges: Cell::new(Diverges::Maybe),\n-            has_errors: Cell::new(false),\n             enclosing_breakables: RefCell::new(EnclosingBreakables {\n                 stack: Vec::new(),\n                 by_id: Default::default(),\n             }),\n             inh,\n-            return_type_pre_known: true,\n-            return_type_has_opaque: false,\n         }\n     }\n "}, {"sha": "e3b3fb499b16ab888026d0f72ba480bc5003e7f4", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -22,6 +22,14 @@ use rustc_trait_selection::traits::error_reporting::DefIdOrName;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n+    pub(crate) fn body_fn_sig(&self) -> Option<ty::FnSig<'tcx>> {\n+        self.typeck_results\n+            .borrow()\n+            .liberated_fn_sigs()\n+            .get(self.tcx.hir().get_parent_node(self.body_id))\n+            .copied()\n+    }\n+\n     pub(in super::super) fn suggest_semicolon_at_end(&self, span: Span, err: &mut Diagnostic) {\n         err.span_suggestion_short(\n             span.shrink_to_hi(),"}, {"sha": "d1762598a5206760b70093fe16ab53d181d83039", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -250,7 +250,7 @@ fn typeck_with_fallback<'tcx>(\n                 param_env,\n                 fn_sig,\n             );\n-            check_fn(&inh, param_env, fn_sig, decl, id, body, None, true).0\n+            check_fn(&inh, param_env, fn_sig, decl, id, body, None).0\n         } else {\n             let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n             let expected_type = body_ty"}, {"sha": "2e526733df974b6e33a7c287505c46f200669f33", "filename": "compiler/rustc_interface/Cargo.toml", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_interface%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_interface%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2FCargo.toml?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -48,12 +48,6 @@ rustc_resolve = { path = \"../rustc_resolve\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_ty_utils = { path = \"../rustc_ty_utils\" }\n \n-[target.'cfg(unix)'.dependencies]\n-libc = \"0.2\"\n-\n-[target.'cfg(windows)'.dependencies]\n-winapi = { version = \"0.3\", features = [\"libloaderapi\"] }\n-\n [dev-dependencies]\n rustc_target = { path = \"../rustc_target\" }\n "}, {"sha": "62ee72f9883083185e691cae4e023eb319c0b25c", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 2, "deletions": 95, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -9,6 +9,7 @@ use rustc_session as session;\n use rustc_session::config::CheckCfg;\n use rustc_session::config::{self, CrateType};\n use rustc_session::config::{ErrorOutputType, Input, OutputFilenames};\n+use rustc_session::filesearch::sysroot_candidates;\n use rustc_session::lint::{self, BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::parse::CrateConfig;\n use rustc_session::{early_error, filesearch, output, Session};\n@@ -78,7 +79,7 @@ pub fn create_session(\n \n     let bundle = match rustc_errors::fluent_bundle(\n         sopts.maybe_sysroot.clone(),\n-        sysroot_candidates(),\n+        sysroot_candidates().to_vec(),\n         sopts.unstable_opts.translate_lang.clone(),\n         sopts.unstable_opts.translate_additional_ftl.as_deref(),\n         sopts.unstable_opts.translate_directionality_markers,\n@@ -273,100 +274,6 @@ fn get_rustc_path_inner(bin_path: &str) -> Option<PathBuf> {\n     })\n }\n \n-fn sysroot_candidates() -> Vec<PathBuf> {\n-    let target = session::config::host_triple();\n-    let mut sysroot_candidates = vec![filesearch::get_or_default_sysroot()];\n-    let path = current_dll_path().and_then(|s| s.canonicalize().ok());\n-    if let Some(dll) = path {\n-        // use `parent` twice to chop off the file name and then also the\n-        // directory containing the dll which should be either `lib` or `bin`.\n-        if let Some(path) = dll.parent().and_then(|p| p.parent()) {\n-            // The original `path` pointed at the `rustc_driver` crate's dll.\n-            // Now that dll should only be in one of two locations. The first is\n-            // in the compiler's libdir, for example `$sysroot/lib/*.dll`. The\n-            // other is the target's libdir, for example\n-            // `$sysroot/lib/rustlib/$target/lib/*.dll`.\n-            //\n-            // We don't know which, so let's assume that if our `path` above\n-            // ends in `$target` we *could* be in the target libdir, and always\n-            // assume that we may be in the main libdir.\n-            sysroot_candidates.push(path.to_owned());\n-\n-            if path.ends_with(target) {\n-                sysroot_candidates.extend(\n-                    path.parent() // chop off `$target`\n-                        .and_then(|p| p.parent()) // chop off `rustlib`\n-                        .and_then(|p| p.parent()) // chop off `lib`\n-                        .map(|s| s.to_owned()),\n-                );\n-            }\n-        }\n-    }\n-\n-    return sysroot_candidates;\n-\n-    #[cfg(unix)]\n-    fn current_dll_path() -> Option<PathBuf> {\n-        use std::ffi::{CStr, OsStr};\n-        use std::os::unix::prelude::*;\n-\n-        unsafe {\n-            let addr = current_dll_path as usize as *mut _;\n-            let mut info = mem::zeroed();\n-            if libc::dladdr(addr, &mut info) == 0 {\n-                info!(\"dladdr failed\");\n-                return None;\n-            }\n-            if info.dli_fname.is_null() {\n-                info!(\"dladdr returned null pointer\");\n-                return None;\n-            }\n-            let bytes = CStr::from_ptr(info.dli_fname).to_bytes();\n-            let os = OsStr::from_bytes(bytes);\n-            Some(PathBuf::from(os))\n-        }\n-    }\n-\n-    #[cfg(windows)]\n-    fn current_dll_path() -> Option<PathBuf> {\n-        use std::ffi::OsString;\n-        use std::io;\n-        use std::os::windows::prelude::*;\n-        use std::ptr;\n-\n-        use winapi::um::libloaderapi::{\n-            GetModuleFileNameW, GetModuleHandleExW, GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,\n-        };\n-\n-        unsafe {\n-            let mut module = ptr::null_mut();\n-            let r = GetModuleHandleExW(\n-                GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,\n-                current_dll_path as usize as *mut _,\n-                &mut module,\n-            );\n-            if r == 0 {\n-                info!(\"GetModuleHandleExW failed: {}\", io::Error::last_os_error());\n-                return None;\n-            }\n-            let mut space = Vec::with_capacity(1024);\n-            let r = GetModuleFileNameW(module, space.as_mut_ptr(), space.capacity() as u32);\n-            if r == 0 {\n-                info!(\"GetModuleFileNameW failed: {}\", io::Error::last_os_error());\n-                return None;\n-            }\n-            let r = r as usize;\n-            if r >= space.capacity() {\n-                info!(\"our buffer was too small? {}\", io::Error::last_os_error());\n-                return None;\n-            }\n-            space.set_len(r);\n-            let os = OsString::from_wide(&space);\n-            Some(PathBuf::from(os))\n-        }\n-    }\n-}\n-\n fn get_codegen_sysroot(maybe_sysroot: &Option<PathBuf>, backend_name: &str) -> MakeBackendFn {\n     // For now we only allow this function to be called once as it'll dlopen a\n     // few things, which seems to work best if we only do that once. In"}, {"sha": "1dbf0d642e2afdbbea56d0d49801ace8fb040199", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -956,6 +956,7 @@ pub struct OutsideLoop<'a> {\n     #[label]\n     pub span: Span,\n     pub name: &'a str,\n+    pub is_break: bool,\n }\n \n #[derive(Diagnostic)]"}, {"sha": "b4cf19e4a34f6ad2b46ad8bc48ed351153a0b333", "filename": "compiler/rustc_passes/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Floops.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -193,7 +193,7 @@ impl<'a, 'hir> CheckLoopVisitor<'a, 'hir> {\n                 self.sess.emit_err(BreakInsideAsyncBlock { span, closure_span, name });\n             }\n             Normal | AnonConst => {\n-                self.sess.emit_err(OutsideLoop { span, name });\n+                self.sess.emit_err(OutsideLoop { span, name, is_break: name == \"break\" });\n             }\n         }\n     }"}, {"sha": "a052f29334169ebd5d6478caf780b41fb8e4df0d", "filename": "compiler/rustc_session/Cargo.toml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2FCargo.toml?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -17,3 +17,10 @@ rustc_span = { path = \"../rustc_span\" }\n rustc_fs_util = { path = \"../rustc_fs_util\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n+smallvec = \"1.8.1\"\n+\n+[target.'cfg(unix)'.dependencies]\n+libc = \"0.2\"\n+\n+[target.'cfg(windows)'.dependencies]\n+winapi = { version = \"0.3\", features = [\"libloaderapi\"] }"}, {"sha": "aece29ca0cbf6197f509e73e7596fc191c684ea7", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -2447,7 +2447,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let sysroot = match &sysroot_opt {\n         Some(s) => s,\n         None => {\n-            tmp_buf = crate::filesearch::get_or_default_sysroot();\n+            tmp_buf = crate::filesearch::get_or_default_sysroot().expect(\"Failed finding sysroot\");\n             &tmp_buf\n         }\n     };"}, {"sha": "1b66773be6f0804a02627989199547c8c6616769", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 120, "deletions": 16, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -1,5 +1,6 @@\n //! A module for searching for libraries\n \n+use smallvec::{smallvec, SmallVec};\n use std::env;\n use std::fs;\n use std::iter::FromIterator;\n@@ -62,9 +63,99 @@ pub fn make_target_lib_path(sysroot: &Path, target_triple: &str) -> PathBuf {\n     PathBuf::from_iter([sysroot, Path::new(&rustlib_path), Path::new(\"lib\")])\n }\n \n+#[cfg(unix)]\n+fn current_dll_path() -> Result<PathBuf, String> {\n+    use std::ffi::{CStr, OsStr};\n+    use std::os::unix::prelude::*;\n+\n+    unsafe {\n+        let addr = current_dll_path as usize as *mut _;\n+        let mut info = std::mem::zeroed();\n+        if libc::dladdr(addr, &mut info) == 0 {\n+            return Err(\"dladdr failed\".into());\n+        }\n+        if info.dli_fname.is_null() {\n+            return Err(\"dladdr returned null pointer\".into());\n+        }\n+        let bytes = CStr::from_ptr(info.dli_fname).to_bytes();\n+        let os = OsStr::from_bytes(bytes);\n+        Ok(PathBuf::from(os))\n+    }\n+}\n+\n+#[cfg(windows)]\n+fn current_dll_path() -> Result<PathBuf, String> {\n+    use std::ffi::OsString;\n+    use std::io;\n+    use std::os::windows::prelude::*;\n+    use std::ptr;\n+\n+    use winapi::um::libloaderapi::{\n+        GetModuleFileNameW, GetModuleHandleExW, GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,\n+    };\n+\n+    unsafe {\n+        let mut module = ptr::null_mut();\n+        let r = GetModuleHandleExW(\n+            GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,\n+            current_dll_path as usize as *mut _,\n+            &mut module,\n+        );\n+        if r == 0 {\n+            return Err(format!(\"GetModuleHandleExW failed: {}\", io::Error::last_os_error()));\n+        }\n+        let mut space = Vec::with_capacity(1024);\n+        let r = GetModuleFileNameW(module, space.as_mut_ptr(), space.capacity() as u32);\n+        if r == 0 {\n+            return Err(format!(\"GetModuleFileNameW failed: {}\", io::Error::last_os_error()));\n+        }\n+        let r = r as usize;\n+        if r >= space.capacity() {\n+            return Err(format!(\"our buffer was too small? {}\", io::Error::last_os_error()));\n+        }\n+        space.set_len(r);\n+        let os = OsString::from_wide(&space);\n+        Ok(PathBuf::from(os))\n+    }\n+}\n+\n+pub fn sysroot_candidates() -> SmallVec<[PathBuf; 2]> {\n+    let target = crate::config::host_triple();\n+    let mut sysroot_candidates: SmallVec<[PathBuf; 2]> =\n+        smallvec![get_or_default_sysroot().expect(\"Failed finding sysroot\")];\n+    let path = current_dll_path().and_then(|s| Ok(s.canonicalize().map_err(|e| e.to_string())?));\n+    if let Ok(dll) = path {\n+        // use `parent` twice to chop off the file name and then also the\n+        // directory containing the dll which should be either `lib` or `bin`.\n+        if let Some(path) = dll.parent().and_then(|p| p.parent()) {\n+            // The original `path` pointed at the `rustc_driver` crate's dll.\n+            // Now that dll should only be in one of two locations. The first is\n+            // in the compiler's libdir, for example `$sysroot/lib/*.dll`. The\n+            // other is the target's libdir, for example\n+            // `$sysroot/lib/rustlib/$target/lib/*.dll`.\n+            //\n+            // We don't know which, so let's assume that if our `path` above\n+            // ends in `$target` we *could* be in the target libdir, and always\n+            // assume that we may be in the main libdir.\n+            sysroot_candidates.push(path.to_owned());\n+\n+            if path.ends_with(target) {\n+                sysroot_candidates.extend(\n+                    path.parent() // chop off `$target`\n+                        .and_then(|p| p.parent()) // chop off `rustlib`\n+                        .and_then(|p| p.parent()) // chop off `lib`\n+                        .map(|s| s.to_owned()),\n+                );\n+            }\n+        }\n+    }\n+\n+    return sysroot_candidates;\n+}\n+\n /// This function checks if sysroot is found using env::args().next(), and if it\n-/// is not found, uses env::current_exe() to imply sysroot.\n-pub fn get_or_default_sysroot() -> PathBuf {\n+/// is not found, finds sysroot from current rustc_driver dll.\n+pub fn get_or_default_sysroot() -> Result<PathBuf, String> {\n     // Follow symlinks.  If the resolved path is relative, make it absolute.\n     fn canonicalize(path: PathBuf) -> PathBuf {\n         let path = fs::canonicalize(&path).unwrap_or(path);\n@@ -74,17 +165,32 @@ pub fn get_or_default_sysroot() -> PathBuf {\n         fix_windows_verbatim_for_gcc(&path)\n     }\n \n-    // Use env::current_exe() to get the path of the executable following\n-    // symlinks/canonicalizing components.\n-    fn from_current_exe() -> PathBuf {\n-        match env::current_exe() {\n-            Ok(exe) => {\n-                let mut p = canonicalize(exe);\n-                p.pop();\n-                p.pop();\n-                p\n-            }\n-            Err(e) => panic!(\"failed to get current_exe: {e}\"),\n+    fn default_from_rustc_driver_dll() -> Result<PathBuf, String> {\n+        let dll = current_dll_path().and_then(|s| Ok(canonicalize(s)))?;\n+\n+        // `dll` will be in one of the following two:\n+        // - compiler's libdir: $sysroot/lib/*.dll\n+        // - target's libdir: $sysroot/lib/rustlib/$target/lib/*.dll\n+        //\n+        // use `parent` twice to chop off the file name and then also the\n+        // directory containing the dll\n+        let dir = dll.parent().and_then(|p| p.parent()).ok_or(format!(\n+            \"Could not move 2 levels upper using `parent()` on {}\",\n+            dll.display()\n+        ))?;\n+\n+        // if `dir` points target's dir, move up to the sysroot\n+        if dir.ends_with(crate::config::host_triple()) {\n+            dir.parent() // chop off `$target`\n+                .and_then(|p| p.parent()) // chop off `rustlib`\n+                .and_then(|p| p.parent()) // chop off `lib`\n+                .map(|s| s.to_owned())\n+                .ok_or(format!(\n+                    \"Could not move 3 levels upper using `parent()` on {}\",\n+                    dir.display()\n+                ))\n+        } else {\n+            Ok(dir.to_owned())\n         }\n     }\n \n@@ -118,7 +224,5 @@ pub fn get_or_default_sysroot() -> PathBuf {\n         }\n     }\n \n-    // Check if sysroot is found using env::args().next(), and if is not found,\n-    // use env::current_exe() to imply sysroot.\n-    from_env_args_next().unwrap_or_else(from_current_exe)\n+    Ok(from_env_args_next().unwrap_or(default_from_rustc_driver_dll()?))\n }"}, {"sha": "103521983578bc4d8670429afd93e6c3dde5cb6e", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -1309,7 +1309,7 @@ pub fn build_session(\n \n     let sysroot = match &sopts.maybe_sysroot {\n         Some(sysroot) => sysroot.clone(),\n-        None => filesearch::get_or_default_sysroot(),\n+        None => filesearch::get_or_default_sysroot().expect(\"Failed finding sysroot\"),\n     };\n \n     let target_cfg = config::build_target_config(&sopts, target_override, &sysroot);"}, {"sha": "e6a11218139d97c98eb9a0ba5f80bad413c7b24b", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -1856,7 +1856,7 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n /// }\n /// ```\n ///\n-/// Coverting in the other direction from a `&mut T`\n+/// Converting in the other direction from a `&mut T`\n /// to an `&UnsafeCell<T>` is allowed:\n ///\n /// ```rust"}, {"sha": "78808d489b25ab61ef6575f88642801332c54f01", "filename": "library/core/src/error.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/library%2Fcore%2Fsrc%2Ferror.md", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/library%2Fcore%2Fsrc%2Ferror.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ferror.md?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -46,7 +46,7 @@ These functions are equivalent, they either return the inner value if the\n `Result` is `Ok` or panic if the `Result` is `Err` printing the inner error\n as the source. The only difference between them is that with `expect` you\n provide a panic error message to be printed alongside the source, whereas\n-`unwrap` has a default message indicating only that you unwraped an `Err`.\n+`unwrap` has a default message indicating only that you unwrapped an `Err`.\n \n Of the two, `expect` is generally preferred since its `msg` field allows you\n to convey your intent and assumptions which makes tracking down the source"}, {"sha": "dafcd876744128885014528a859afe93451f20da", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -275,7 +275,7 @@ impl f32 {\n     /// This result is not an element of the function's codomain, but it is the\n     /// closest floating point number in the real numbers and thus fulfills the\n     /// property `self == self.div_euclid(rhs) * rhs + self.rem_euclid(rhs)`\n-    /// approximatively.\n+    /// approximately.\n     ///\n     /// # Examples\n     ///"}, {"sha": "77048f9a28f2516f18c43fe550f4ba1bb095fc1e", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -275,7 +275,7 @@ impl f64 {\n     /// This result is not an element of the function's codomain, but it is the\n     /// closest floating point number in the real numbers and thus fulfills the\n     /// property `self == self.div_euclid(rhs) * rhs + self.rem_euclid(rhs)`\n-    /// approximatively.\n+    /// approximately.\n     ///\n     /// # Examples\n     ///"}, {"sha": "81461de4f721f1d588f68a55c532fc4ea6ec7a9d", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -363,7 +363,7 @@ impl IO_STATUS_BLOCK {\n \n pub type LPOVERLAPPED_COMPLETION_ROUTINE = unsafe extern \"system\" fn(\n     dwErrorCode: DWORD,\n-    dwNumberOfBytesTransfered: DWORD,\n+    dwNumberOfBytesTransferred: DWORD,\n     lpOverlapped: *mut OVERLAPPED,\n );\n "}, {"sha": "9f26acc45205cde3ac32ffcf38747a5c8e0e7f95", "filename": "library/std/src/sys/windows/pipe.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -324,17 +324,18 @@ impl AnonPipe {\n         let mut async_result: Option<AsyncResult> = None;\n         struct AsyncResult {\n             error: u32,\n-            transfered: u32,\n+            transferred: u32,\n         }\n \n         // STEP 3: The callback.\n         unsafe extern \"system\" fn callback(\n             dwErrorCode: u32,\n-            dwNumberOfBytesTransfered: u32,\n+            dwNumberOfBytesTransferred: u32,\n             lpOverlapped: *mut c::OVERLAPPED,\n         ) {\n             // Set `async_result` using a pointer smuggled through `hEvent`.\n-            let result = AsyncResult { error: dwErrorCode, transfered: dwNumberOfBytesTransfered };\n+            let result =\n+                AsyncResult { error: dwErrorCode, transferred: dwNumberOfBytesTransferred };\n             *(*lpOverlapped).hEvent.cast::<Option<AsyncResult>>() = Some(result);\n         }\n \n@@ -365,7 +366,7 @@ impl AnonPipe {\n         // STEP 4: Return the result.\n         // `async_result` is always `Some` at this point\n         match result.error {\n-            c::ERROR_SUCCESS => Ok(result.transfered as usize),\n+            c::ERROR_SUCCESS => Ok(result.transferred as usize),\n             error => Err(io::Error::from_raw_os_error(error as _)),\n         }\n     }"}, {"sha": "16e2d9a3cfc3809363312223b769f794c4ec8b27", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -1381,7 +1381,8 @@ fn clean_qpath<'tcx>(hir_ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type\n                 ty::Projection(proj) => Res::Def(DefKind::Trait, proj.trait_ref(cx.tcx).def_id),\n                 // Rustdoc handles `ty::Error`s by turning them into `Type::Infer`s.\n                 ty::Error(_) => return Type::Infer,\n-                _ => bug!(\"clean: expected associated type, found `{:?}`\", ty),\n+                // Otherwise, this is an inherent associated type.\n+                _ => return clean_middle_ty(ty, cx, None),\n             };\n             let trait_ = clean_path(&hir::Path { span, res, segments: &[] }, cx);\n             register_res(cx, trait_.res);"}, {"sha": "94ea0e93bf6372e09ba9865a1261f4f83276c495", "filename": "src/test/rustdoc-ui/ambiguous-inherent-assoc-ty.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -1,3 +1,4 @@\n+// check-pass\n // This test ensures that rustdoc does not panic on inherented associated types\n // that are referred to without fully-qualified syntax.\n \n@@ -9,8 +10,4 @@ pub struct Struct;\n impl Struct {\n     pub type AssocTy = usize;\n     pub const AssocConst: Self::AssocTy = 42;\n-    //~^ ERROR ambiguous associated type\n-    //~| HELP use fully-qualified syntax\n-    //~| ERROR ambiguous associated type\n-    //~| HELP use fully-qualified syntax\n }"}, {"sha": "b963b722f66201708db4650dba2ad194c31b2597", "filename": "src/test/rustdoc-ui/ambiguous-inherent-assoc-ty.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b3e9090757da9a95b22f589fe39b6a4b5455b96/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b3e9090757da9a95b22f589fe39b6a4b5455b96/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.stderr?ref=5b3e9090757da9a95b22f589fe39b6a4b5455b96", "patch": "@@ -1,15 +0,0 @@\n-error[E0223]: ambiguous associated type\n-  --> $DIR/ambiguous-inherent-assoc-ty.rs:11:27\n-   |\n-LL |     pub const AssocConst: Self::AssocTy = 42;\n-   |                           ^^^^^^^^^^^^^ help: use fully-qualified syntax: `<Struct as Trait>::AssocTy`\n-\n-error[E0223]: ambiguous associated type\n-  --> $DIR/ambiguous-inherent-assoc-ty.rs:11:27\n-   |\n-LL |     pub const AssocConst: Self::AssocTy = 42;\n-   |                           ^^^^^^^^^^^^^ help: use fully-qualified syntax: `<Struct as Trait>::AssocTy`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0223`."}, {"sha": "2df7b6d7f63c62ce796cfa3cb9589fcfdd1d4412", "filename": "src/test/ui/array-slice-vec/array-break-length.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Farray-slice-vec%2Farray-break-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Farray-slice-vec%2Farray-break-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Farray-break-length.stderr?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -1,8 +1,8 @@\n-error[E0268]: `break` outside of a loop\n+error[E0268]: `break` outside of a loop or labeled block\n   --> $DIR/array-break-length.rs:3:17\n    |\n LL |         |_: [_; break]| {}\n-   |                 ^^^^^ cannot `break` outside of a loop\n+   |                 ^^^^^ cannot `break` outside of a loop or labeled block\n \n error[E0268]: `continue` outside of a loop\n   --> $DIR/array-break-length.rs:7:17"}, {"sha": "c579c962ffcc16dcc9c01c1587a814168b103e3e", "filename": "src/test/ui/assoc-inherent.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b3e9090757da9a95b22f589fe39b6a4b5455b96/src%2Ftest%2Fui%2Fassoc-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3e9090757da9a95b22f589fe39b6a4b5455b96/src%2Ftest%2Fui%2Fassoc-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassoc-inherent.rs?ref=5b3e9090757da9a95b22f589fe39b6a4b5455b96", "patch": "@@ -1,20 +0,0 @@\n-// Test that inherent associated types work with\n-// inherent_associated_types feature gate.\n-\n-#![feature(inherent_associated_types)]\n-#![allow(incomplete_features)]\n-\n-struct Foo;\n-\n-impl Foo {\n-    type Bar = isize;\n-}\n-\n-impl Foo {\n-    type Baz; //~ ERROR associated type in `impl` without body\n-}\n-\n-fn main() {\n-    let x : Foo::Bar; //~ERROR ambiguous associated type\n-    x = 0isize;\n-}"}, {"sha": "b703453fa0334b2e3f55680ce9df127a8460d2a1", "filename": "src/test/ui/assoc-inherent.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5b3e9090757da9a95b22f589fe39b6a4b5455b96/src%2Ftest%2Fui%2Fassoc-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5b3e9090757da9a95b22f589fe39b6a4b5455b96/src%2Ftest%2Fui%2Fassoc-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassoc-inherent.stderr?ref=5b3e9090757da9a95b22f589fe39b6a4b5455b96", "patch": "@@ -1,17 +0,0 @@\n-error: associated type in `impl` without body\n-  --> $DIR/assoc-inherent.rs:14:5\n-   |\n-LL |     type Baz;\n-   |     ^^^^^^^^-\n-   |             |\n-   |             help: provide a definition for the type: `= <type>;`\n-\n-error[E0223]: ambiguous associated type\n-  --> $DIR/assoc-inherent.rs:18:13\n-   |\n-LL |     let x : Foo::Bar;\n-   |             ^^^^^^^^ help: use fully-qualified syntax: `<Foo as Trait>::Bar`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0223`."}, {"sha": "71f65b92eae20e5e4d94028e894ec41d65534575", "filename": "src/test/ui/associated-inherent-types/assoc-inherent-no-body.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-no-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-no-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-no-body.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -0,0 +1,10 @@\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    type Baz; //~ ERROR associated type in `impl` without body\n+}\n+\n+fn main() {}"}, {"sha": "387a5658da37304bdacafca6860c310355b5b1a2", "filename": "src/test/ui/associated-inherent-types/assoc-inherent-no-body.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-no-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-no-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-no-body.stderr?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -0,0 +1,10 @@\n+error: associated type in `impl` without body\n+  --> $DIR/assoc-inherent-no-body.rs:7:5\n+   |\n+LL |     type Baz;\n+   |     ^^^^^^^^-\n+   |             |\n+   |             help: provide a definition for the type: `= <type>;`\n+\n+error: aborting due to previous error\n+"}, {"sha": "7ae425e2aaafb79cf6957206a7907df2bd8d8255", "filename": "src/test/ui/associated-inherent-types/assoc-inherent-use.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-use.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    type Bar = isize;\n+}\n+\n+fn main() {\n+    let x: Foo::Bar;\n+    x = 0isize;\n+}"}, {"sha": "7e0b0027a6f09a63397f098d6bfbf67bd0b1f772", "filename": "src/test/ui/closures/closure-array-break-length.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -10,11 +10,11 @@ error[E0268]: `continue` outside of a loop\n LL |     while |_: [_; continue]| {} {}\n    |                   ^^^^^^^^ cannot `continue` outside of a loop\n \n-error[E0268]: `break` outside of a loop\n+error[E0268]: `break` outside of a loop or labeled block\n   --> $DIR/closure-array-break-length.rs:6:19\n    |\n LL |     while |_: [_; break]| {} {}\n-   |                   ^^^^^ cannot `break` outside of a loop\n+   |                   ^^^^^ cannot `break` outside of a loop or labeled block\n \n error: aborting due to 3 previous errors\n "}, {"sha": "6422e8a9490e9e79102205630716376d437de689", "filename": "src/test/ui/error-codes/E0268.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Ferror-codes%2FE0268.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Ferror-codes%2FE0268.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0268.stderr?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -1,8 +1,8 @@\n-error[E0268]: `break` outside of a loop\n+error[E0268]: `break` outside of a loop or labeled block\n   --> $DIR/E0268.rs:2:5\n    |\n LL |     break;\n-   |     ^^^^^ cannot `break` outside of a loop\n+   |     ^^^^^ cannot `break` outside of a loop or labeled block\n \n error: aborting due to previous error\n "}, {"sha": "14215d36a3833ce8f2874609c3cb5e7c3ed9dae9", "filename": "src/test/ui/error-codes/E0767.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Ferror-codes%2FE0767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Ferror-codes%2FE0767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0767.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -1,6 +1,7 @@\n-fn main () {\n+fn main() {\n     'a: loop {\n         || {\n+            //~^ ERROR mismatched types\n             loop { break 'a; } //~ ERROR E0767\n         }\n     }"}, {"sha": "ee85247301c9ccba15d775daa7d9169d8e3de468", "filename": "src/test/ui/error-codes/E0767.stderr", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Ferror-codes%2FE0767.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Ferror-codes%2FE0767.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0767.stderr?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -1,14 +1,27 @@\n error[E0767]: use of unreachable label `'a`\n-  --> $DIR/E0767.rs:4:26\n+  --> $DIR/E0767.rs:5:26\n    |\n LL |     'a: loop {\n    |     -- unreachable label defined here\n-LL |         || {\n+...\n LL |             loop { break 'a; }\n    |                          ^^ unreachable label `'a`\n    |\n    = note: labels are unreachable through functions, closures, async blocks and modules\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/E0767.rs:3:9\n+   |\n+LL | /         || {\n+LL | |\n+LL | |             loop { break 'a; }\n+LL | |         }\n+   | |_________^ expected `()`, found closure\n+   |\n+   = note: expected unit type `()`\n+                found closure `[closure@$DIR/E0767.rs:3:9: 3:11]`\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0767`.\n+Some errors have detailed explanations: E0308, E0767.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "9092f34df354935ce355fb00f2767687b7bc869b", "filename": "src/test/ui/for-loop-while/break-outside-loop.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-outside-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-outside-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Fbreak-outside-loop.stderr?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -9,11 +9,11 @@ LL |             break 'lab;\n    |\n    = note: labels are unreachable through functions, closures, async blocks and modules\n \n-error[E0268]: `break` outside of a loop\n+error[E0268]: `break` outside of a loop or labeled block\n   --> $DIR/break-outside-loop.rs:10:15\n    |\n LL |     let pth = break;\n-   |               ^^^^^ cannot `break` outside of a loop\n+   |               ^^^^^ cannot `break` outside of a loop or labeled block\n \n error[E0268]: `continue` outside of a loop\n   --> $DIR/break-outside-loop.rs:11:17\n@@ -38,11 +38,11 @@ LL |             if cond() { break }\n LL |             if cond() { continue }\n    |                         ^^^^^^^^ cannot `continue` inside of a closure\n \n-error[E0268]: `break` outside of a loop\n+error[E0268]: `break` outside of a loop or labeled block\n   --> $DIR/break-outside-loop.rs:24:25\n    |\n LL |     let unconstrained = break;\n-   |                         ^^^^^ cannot `break` outside of a loop\n+   |                         ^^^^^ cannot `break` outside of a loop or labeled block\n \n error[E0267]: `break` inside of a closure\n   --> $DIR/break-outside-loop.rs:30:13"}, {"sha": "f450256f3ecf565276034d7c38f1f5d737492fda", "filename": "src/test/ui/issues/issue-28105.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fissues%2Fissue-28105.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fissues%2Fissue-28105.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28105.stderr?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -4,11 +4,11 @@ error[E0268]: `continue` outside of a loop\n LL |     continue\n    |     ^^^^^^^^ cannot `continue` outside of a loop\n \n-error[E0268]: `break` outside of a loop\n+error[E0268]: `break` outside of a loop or labeled block\n   --> $DIR/issue-28105.rs:6:5\n    |\n LL |     break\n-   |     ^^^^^ cannot `break` outside of a loop\n+   |     ^^^^^ cannot `break` outside of a loop or labeled block\n \n error: aborting due to 2 previous errors\n "}, {"sha": "40d9200058ed11c4dba654545aec2f9d422e3272", "filename": "src/test/ui/issues/issue-43162.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -1,14 +1,14 @@\n-error[E0268]: `break` outside of a loop\n+error[E0268]: `break` outside of a loop or labeled block\n   --> $DIR/issue-43162.rs:3:5\n    |\n LL |     break true;\n-   |     ^^^^^^^^^^ cannot `break` outside of a loop\n+   |     ^^^^^^^^^^ cannot `break` outside of a loop or labeled block\n \n-error[E0268]: `break` outside of a loop\n+error[E0268]: `break` outside of a loop or labeled block\n   --> $DIR/issue-43162.rs:7:5\n    |\n LL |     break {};\n-   |     ^^^^^^^^ cannot `break` outside of a loop\n+   |     ^^^^^^^^ cannot `break` outside of a loop or labeled block\n \n error[E0308]: mismatched types\n   --> $DIR/issue-43162.rs:1:13"}, {"sha": "4ec22fde9106db6dc5fcbd2caf2fc92718a410a1", "filename": "src/test/ui/issues/issue-50576.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fissues%2Fissue-50576.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fissues%2Fissue-50576.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50576.stderr?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -4,17 +4,17 @@ error[E0426]: use of undeclared label `'L`\n LL |     |bool: [u8; break 'L]| 0;\n    |                       ^^ undeclared label `'L`\n \n-error[E0268]: `break` outside of a loop\n+error[E0268]: `break` outside of a loop or labeled block\n   --> $DIR/issue-50576.rs:2:17\n    |\n LL |     |bool: [u8; break 'L]| 0;\n-   |                 ^^^^^^^^ cannot `break` outside of a loop\n+   |                 ^^^^^^^^ cannot `break` outside of a loop or labeled block\n \n-error[E0268]: `break` outside of a loop\n+error[E0268]: `break` outside of a loop or labeled block\n   --> $DIR/issue-50576.rs:5:16\n    |\n LL |     Vec::<[u8; break]>::new();\n-   |                ^^^^^ cannot `break` outside of a loop\n+   |                ^^^^^ cannot `break` outside of a loop or labeled block\n \n error: aborting due to 3 previous errors\n "}, {"sha": "07b6df072cb44faabdb42c45cfd2c8e6d2788767", "filename": "src/test/ui/issues/issue-50581.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fissues%2Fissue-50581.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fissues%2Fissue-50581.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50581.stderr?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -1,8 +1,8 @@\n-error[E0268]: `break` outside of a loop\n+error[E0268]: `break` outside of a loop or labeled block\n   --> $DIR/issue-50581.rs:2:14\n    |\n LL |     |_: [u8; break]| ();\n-   |              ^^^^^ cannot `break` outside of a loop\n+   |              ^^^^^ cannot `break` outside of a loop or labeled block\n \n error: aborting due to previous error\n "}, {"sha": "8e4fb6eae9dff5e3ed38e65d027f1895a9d850c1", "filename": "src/test/ui/issues/issue-83048.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fissues%2Fissue-83048.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fissues%2Fissue-83048.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-83048.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -Z unpretty=thir-tree\n \n pub fn main() {\n-    break; //~ ERROR: `break` outside of a loop [E0268]\n+    break; //~ ERROR: `break` outside of a loop or labeled block [E0268]\n }"}, {"sha": "dade9e469503517c5cf7b4fa92ff9677f0b765eb", "filename": "src/test/ui/issues/issue-83048.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fissues%2Fissue-83048.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fissues%2Fissue-83048.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-83048.stderr?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -1,8 +1,8 @@\n-error[E0268]: `break` outside of a loop\n+error[E0268]: `break` outside of a loop or labeled block\n   --> $DIR/issue-83048.rs:4:5\n    |\n LL |     break;\n-   |     ^^^^^ cannot `break` outside of a loop\n+   |     ^^^^^ cannot `break` outside of a loop or labeled block\n \n error: aborting due to previous error\n "}, {"sha": "b3042d413468ad1015a80a96d28f4e878787ad92", "filename": "src/test/ui/resolve/resolve-self-in-impl.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -1,40 +1,40 @@\n error: `Self` is not valid in the self type of an impl block\n-  --> $DIR/resolve-self-in-impl.rs:14:13\n+  --> $DIR/resolve-self-in-impl.rs:16:6\n    |\n-LL | impl Tr for Self {}\n-   |             ^^^^\n+LL | impl Self {}\n+   |      ^^^^\n    |\n    = note: replace `Self` with a different type\n \n error: `Self` is not valid in the self type of an impl block\n-  --> $DIR/resolve-self-in-impl.rs:15:15\n+  --> $DIR/resolve-self-in-impl.rs:17:8\n    |\n-LL | impl Tr for S<Self> {}\n-   |               ^^^^\n+LL | impl S<Self> {}\n+   |        ^^^^\n    |\n    = note: replace `Self` with a different type\n \n error: `Self` is not valid in the self type of an impl block\n-  --> $DIR/resolve-self-in-impl.rs:16:6\n+  --> $DIR/resolve-self-in-impl.rs:18:7\n    |\n-LL | impl Self {}\n-   |      ^^^^\n+LL | impl (Self, Self) {}\n+   |       ^^^^  ^^^^\n    |\n    = note: replace `Self` with a different type\n \n error: `Self` is not valid in the self type of an impl block\n-  --> $DIR/resolve-self-in-impl.rs:17:8\n+  --> $DIR/resolve-self-in-impl.rs:14:13\n    |\n-LL | impl S<Self> {}\n-   |        ^^^^\n+LL | impl Tr for Self {}\n+   |             ^^^^\n    |\n    = note: replace `Self` with a different type\n \n error: `Self` is not valid in the self type of an impl block\n-  --> $DIR/resolve-self-in-impl.rs:18:7\n+  --> $DIR/resolve-self-in-impl.rs:15:15\n    |\n-LL | impl (Self, Self) {}\n-   |       ^^^^  ^^^^\n+LL | impl Tr for S<Self> {}\n+   |               ^^^^\n    |\n    = note: replace `Self` with a different type\n "}, {"sha": "8256c1f5f0ff2d96b4e8b76d698c03dac8539b17", "filename": "src/test/ui/track-diagnostics/track.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack.stderr?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -5,11 +5,11 @@ LL |     break rust\n    |           ^^^^ not found in this scope\n -Ztrack-diagnostics: created at compiler/rustc_resolve/src/late/diagnostics.rs:LL:CC\n \n-error[E0268]: `break` outside of a loop\n+error[E0268]: `break` outside of a loop or labeled block\n   --> $DIR/track.rs:LL:CC\n    |\n LL |     break rust\n-   |     ^^^^^^^^^^ cannot `break` outside of a loop\n+   |     ^^^^^^^^^^ cannot `break` outside of a loop or labeled block\n -Ztrack-diagnostics: created at compiler/rustc_passes/src/loops.rs:LL:CC\n \n error: internal compiler error: It looks like you're trying to break rust; would you like some ICE?"}, {"sha": "f24d3507823ecaf9d8ae0e32e9124bdbb0ffb320", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 5, "deletions": 74, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -23,8 +23,8 @@ use std::borrow::Cow;\n use std::env;\n use std::ops::Deref;\n use std::panic;\n-use std::path::{Path, PathBuf};\n-use std::process::{exit, Command};\n+use std::path::Path;\n+use std::process::exit;\n use std::sync::LazyLock;\n \n /// If a command-line option matches `find_arg`, then apply the predicate `pred` on its value. If\n@@ -210,83 +210,21 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     interface::try_print_query_stack(&handler, num_frames);\n }\n \n-fn toolchain_path(home: Option<String>, toolchain: Option<String>) -> Option<PathBuf> {\n-    home.and_then(|home| {\n-        toolchain.map(|toolchain| {\n-            let mut path = PathBuf::from(home);\n-            path.push(\"toolchains\");\n-            path.push(toolchain);\n-            path\n-        })\n-    })\n-}\n-\n #[allow(clippy::too_many_lines)]\n pub fn main() {\n     rustc_driver::init_rustc_env_logger();\n     LazyLock::force(&ICE_HOOK);\n     exit(rustc_driver::catch_with_exit_code(move || {\n         let mut orig_args: Vec<String> = env::args().collect();\n \n-        // Get the sysroot, looking from most specific to this invocation to the least:\n-        // - command line\n-        // - runtime environment\n-        //    - SYSROOT\n-        //    - RUSTUP_HOME, MULTIRUST_HOME, RUSTUP_TOOLCHAIN, MULTIRUST_TOOLCHAIN\n-        // - sysroot from rustc in the path\n-        // - compile-time environment\n-        //    - SYSROOT\n-        //    - RUSTUP_HOME, MULTIRUST_HOME, RUSTUP_TOOLCHAIN, MULTIRUST_TOOLCHAIN\n-        let sys_root_arg = arg_value(&orig_args, \"--sysroot\", |_| true);\n-        let have_sys_root_arg = sys_root_arg.is_some();\n-        let sys_root = sys_root_arg\n-            .map(PathBuf::from)\n-            .or_else(|| std::env::var(\"SYSROOT\").ok().map(PathBuf::from))\n-            .or_else(|| {\n-                let home = std::env::var(\"RUSTUP_HOME\")\n-                    .or_else(|_| std::env::var(\"MULTIRUST_HOME\"))\n-                    .ok();\n-                let toolchain = std::env::var(\"RUSTUP_TOOLCHAIN\")\n-                    .or_else(|_| std::env::var(\"MULTIRUST_TOOLCHAIN\"))\n-                    .ok();\n-                toolchain_path(home, toolchain)\n-            })\n-            .or_else(|| {\n-                Command::new(\"rustc\")\n-                    .arg(\"--print\")\n-                    .arg(\"sysroot\")\n-                    .output()\n-                    .ok()\n-                    .and_then(|out| String::from_utf8(out.stdout).ok())\n-                    .map(|s| PathBuf::from(s.trim()))\n-            })\n-            .or_else(|| option_env!(\"SYSROOT\").map(PathBuf::from))\n-            .or_else(|| {\n-                let home = option_env!(\"RUSTUP_HOME\")\n-                    .or(option_env!(\"MULTIRUST_HOME\"))\n-                    .map(ToString::to_string);\n-                let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\")\n-                    .or(option_env!(\"MULTIRUST_TOOLCHAIN\"))\n-                    .map(ToString::to_string);\n-                toolchain_path(home, toolchain)\n-            })\n-            .map(|pb| pb.to_string_lossy().to_string())\n-            .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n-\n         // make \"clippy-driver --rustc\" work like a subcommand that passes further args to \"rustc\"\n         // for example `clippy-driver --rustc --version` will print the rustc version that clippy-driver\n         // uses\n         if let Some(pos) = orig_args.iter().position(|arg| arg == \"--rustc\") {\n             orig_args.remove(pos);\n             orig_args[0] = \"rustc\".to_string();\n \n-            // if we call \"rustc\", we need to pass --sysroot here as well\n-            let mut args: Vec<String> = orig_args.clone();\n-            if !have_sys_root_arg {\n-                args.extend(vec![\"--sysroot\".into(), sys_root]);\n-            };\n-\n-            return rustc_driver::RunCompiler::new(&args, &mut DefaultCallbacks).run();\n+            return rustc_driver::RunCompiler::new(&orig_args, &mut DefaultCallbacks).run();\n         }\n \n         if orig_args.iter().any(|a| a == \"--version\" || a == \"-V\") {\n@@ -309,14 +247,6 @@ pub fn main() {\n             exit(0);\n         }\n \n-        // this conditional check for the --sysroot flag is there so users can call\n-        // `clippy_driver` directly\n-        // without having to pass --sysroot or anything\n-        let mut args: Vec<String> = orig_args.clone();\n-        if !have_sys_root_arg {\n-            args.extend(vec![\"--sysroot\".into(), sys_root]);\n-        };\n-\n         let mut no_deps = false;\n         let clippy_args_var = env::var(\"CLIPPY_ARGS\").ok();\n         let clippy_args = clippy_args_var\n@@ -345,10 +275,11 @@ pub fn main() {\n \n         let clippy_enabled = !cap_lints_allow && (!no_deps || in_primary_package);\n         if clippy_enabled {\n+            let mut args: Vec<String> = orig_args.clone();\n             args.extend(clippy_args);\n             rustc_driver::RunCompiler::new(&args, &mut ClippyCallbacks { clippy_args_var }).run()\n         } else {\n-            rustc_driver::RunCompiler::new(&args, &mut RustcCallbacks { clippy_args_var }).run()\n+            rustc_driver::RunCompiler::new(&orig_args, &mut RustcCallbacks { clippy_args_var }).run()\n         }\n     }))\n }"}, {"sha": "e673ea67dbc5bbf32c8ae1bd238f4317e1e21004", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 11, "deletions": 59, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452cf4f7109f58433ac38be7d3da527408571054/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=452cf4f7109f58433ac38be7d3da527408571054", "patch": "@@ -216,76 +216,28 @@ fn init_late_loggers(tcx: TyCtxt<'_>) {\n     }\n }\n \n-/// Returns the \"default sysroot\" that Miri will use for host things if no `--sysroot` flag is set.\n-/// Should be a compile-time constant.\n-fn host_sysroot() -> Option<String> {\n-    if option_env!(\"RUSTC_STAGE\").is_some() {\n-        // This is being built as part of rustc, and gets shipped with rustup.\n-        // We can rely on the sysroot computation in librustc_session.\n-        return None;\n-    }\n-    // For builds outside rustc, we need to ensure that we got a sysroot\n-    // that gets used as a default.  The sysroot computation in librustc_session would\n-    // end up somewhere in the build dir (see `get_or_default_sysroot`).\n-    // Taken from PR <https://github.com/Manishearth/rust-clippy/pull/911>.\n-    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n-    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-    Some(match (home, toolchain) {\n-        (Some(home), Some(toolchain)) => {\n-            // Check that at runtime, we are still in this toolchain (if there is any toolchain).\n-            if let Some(toolchain_runtime) =\n-                env::var_os(\"RUSTUP_TOOLCHAIN\").or_else(|| env::var_os(\"MULTIRUST_TOOLCHAIN\"))\n-            {\n-                if toolchain_runtime != toolchain {\n-                    show_error!(\n-                        \"This Miri got built with local toolchain `{toolchain}`, but now is being run under a different toolchain. \\n\\\n-                        Make sure to run Miri in the toolchain it got built with, e.g. via `cargo +{toolchain} miri`.\"\n-                    )\n-                }\n-            }\n-            format!(\"{home}/toolchains/{toolchain}\")\n-        }\n-        _ => option_env!(\"RUST_SYSROOT\")\n-            .unwrap_or_else(|| {\n-                show_error!(\n-                    \"To build Miri without rustup, set the `RUST_SYSROOT` env var at build time\",\n-                )\n-            })\n-            .to_owned(),\n-    })\n-}\n-\n /// Execute a compiler with the given CLI arguments and callbacks.\n fn run_compiler(\n     mut args: Vec<String>,\n     target_crate: bool,\n     callbacks: &mut (dyn rustc_driver::Callbacks + Send),\n ) -> ! {\n-    // Make sure we use the right default sysroot. The default sysroot is wrong,\n-    // because `get_or_default_sysroot` in `librustc_session` bases that on `current_exe`.\n-    //\n-    // Make sure we always call `host_sysroot` as that also does some sanity-checks\n-    // of the environment we were built in and whether it matches what we are running in.\n-    let host_default_sysroot = host_sysroot();\n-    // Now see if we even need to set something.\n-    let sysroot_flag = \"--sysroot\";\n-    if !args.iter().any(|e| e == sysroot_flag) {\n-        // No sysroot was set, let's see if we have a custom default we want to configure.\n-        let default_sysroot = if target_crate {\n+    if target_crate {\n+        // Miri needs a custom sysroot for target crates.\n+        // If no `--sysroot` is given, the `MIRI_SYSROOT` env var is consulted to find where\n+        // that sysroot lives, and that is passed to rustc.\n+        let sysroot_flag = \"--sysroot\";\n+        if !args.iter().any(|e| e == sysroot_flag) {\n             // Using the built-in default here would be plain wrong, so we *require*\n             // the env var to make sure things make sense.\n-            Some(env::var(\"MIRI_SYSROOT\").unwrap_or_else(|_| {\n+            let miri_sysroot = env::var(\"MIRI_SYSROOT\").unwrap_or_else(|_| {\n                 show_error!(\n                     \"Miri was invoked in 'target' mode without `MIRI_SYSROOT` or `--sysroot` being set\"\n-                )\n-            }))\n-        } else {\n-            host_default_sysroot\n-        };\n-        if let Some(sysroot) = default_sysroot {\n-            // We need to overwrite the default that librustc_session would compute.\n+                    )\n+            });\n+\n             args.push(sysroot_flag.to_owned());\n-            args.push(sysroot);\n+            args.push(miri_sysroot);\n         }\n     }\n "}]}