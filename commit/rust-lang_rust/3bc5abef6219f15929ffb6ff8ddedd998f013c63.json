{"sha": "3bc5abef6219f15929ffb6ff8ddedd998f013c63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYzVhYmVmNjIxOWYxNTkyOWZmYjZmZjhkZGVkZDk5OGYwMTNjNjM=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-07-08T02:37:12Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-07-08T02:37:12Z"}, "message": "default_numeric_fallback: Fix FP with floating literal", "tree": {"sha": "6ff8e1c5573ddf6b3bc022704708c08be8dff7ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ff8e1c5573ddf6b3bc022704708c08be8dff7ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bc5abef6219f15929ffb6ff8ddedd998f013c63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc5abef6219f15929ffb6ff8ddedd998f013c63", "html_url": "https://github.com/rust-lang/rust/commit/3bc5abef6219f15929ffb6ff8ddedd998f013c63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bc5abef6219f15929ffb6ff8ddedd998f013c63/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28e769951fd6ed98c625b4f2d9bab046034ca2f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/28e769951fd6ed98c625b4f2d9bab046034ca2f2", "html_url": "https://github.com/rust-lang/rust/commit/28e769951fd6ed98c625b4f2d9bab046034ca2f2"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "ea28644b9a496900fda58d35dfa9227114ff3964", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bc5abef6219f15929ffb6ff8ddedd998f013c63/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc5abef6219f15929ffb6ff8ddedd998f013c63/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=3bc5abef6219f15929ffb6ff8ddedd998f013c63", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'tcx> NumericFallbackVisitor<'a, 'tcx> {\n                 if let Some(ty_bound) = self.ty_bounds.last();\n                 if matches!(lit.node,\n                             LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::Float(_, LitFloatType::Unsuffixed));\n-                if !ty_bound.is_integral();\n+                if !ty_bound.is_numeric();\n                 then {\n                     let suffix = match lit_ty.kind() {\n                         ty::Int(IntTy::I32) => \"i32\",\n@@ -219,10 +219,10 @@ enum TyBound<'tcx> {\n }\n \n impl<'tcx> TyBound<'tcx> {\n-    fn is_integral(self) -> bool {\n+    fn is_numeric(self) -> bool {\n         match self {\n             TyBound::Any => true,\n-            TyBound::Ty(t) => t.is_integral(),\n+            TyBound::Ty(t) => t.is_numeric(),\n             TyBound::Nothing => false,\n         }\n     }"}, {"sha": "58a7f377374dc49d65d7c449dbb8146674658a90", "filename": "tests/ui/default_numeric_fallback.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3bc5abef6219f15929ffb6ff8ddedd998f013c63/tests%2Fui%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bc5abef6219f15929ffb6ff8ddedd998f013c63/tests%2Fui%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback.rs?ref=3bc5abef6219f15929ffb6ff8ddedd998f013c63", "patch": "@@ -81,17 +81,25 @@ mod function_def {\n }\n \n mod function_calls {\n-    fn concrete_arg(x: i32) {}\n+    fn concrete_arg_i32(x: i32) {}\n+\n+    fn concrete_arg_f64(f: f64) {}\n \n     fn generic_arg<T>(t: T) {}\n \n     fn test() {\n         // Should NOT lint this because the argument type is bound to a concrete type.\n-        concrete_arg(1);\n+        concrete_arg_i32(1);\n+\n+        // Should NOT lint this because the argument type is bound to a concrete type.\n+        concrete_arg_f64(1.);\n \n         // Should lint this because the argument type is inferred to `i32` and NOT bound to a concrete type.\n         generic_arg(1);\n \n+        // Should lint this because the argument type is inferred to `f32` and NOT bound to a concrete type.\n+        generic_arg(1.0);\n+\n         // Should lint this because the argument type is inferred to `i32` and NOT bound to a concrete type.\n         let x: _ = generic_arg(1);\n     }\n@@ -118,6 +126,31 @@ mod struct_ctor {\n     }\n }\n \n+mod enum_ctor {\n+    enum ConcreteEnum {\n+        X(i32),\n+        Y(f64),\n+    }\n+\n+    enum GenericEnum<T> {\n+        X(T),\n+    }\n+\n+    fn test() {\n+        // Should NOT lint this because the field type is bound to a concrete type.\n+        ConcreteEnum::X(1);\n+\n+        // Should NOT lint this because the field type is bound to a concrete type.\n+        ConcreteEnum::Y(1.);\n+\n+        // Should lint this because the field type is inferred to `i32` and NOT bound to a concrete type.\n+        GenericEnum::X(1);\n+\n+        // Should lint this because the field type is inferred to `f64` and NOT bound to a concrete type.\n+        GenericEnum::X(1.);\n+    }\n+}\n+\n mod method_calls {\n     struct StructForMethodCallTest {}\n "}, {"sha": "3965385189e4036fac6454818bb1c3abe2858810", "filename": "tests/ui/default_numeric_fallback.stderr", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3bc5abef6219f15929ffb6ff8ddedd998f013c63/tests%2Fui%2Fdefault_numeric_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bc5abef6219f15929ffb6ff8ddedd998f013c63/tests%2Fui%2Fdefault_numeric_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback.stderr?ref=3bc5abef6219f15929ffb6ff8ddedd998f013c63", "patch": "@@ -115,37 +115,55 @@ LL |         let f = || -> i32 { 1 };\n    |                             ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:93:21\n+  --> $DIR/default_numeric_fallback.rs:98:21\n    |\n LL |         generic_arg(1);\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:96:32\n+  --> $DIR/default_numeric_fallback.rs:101:21\n+   |\n+LL |         generic_arg(1.0);\n+   |                     ^^^ help: consider adding suffix: `1.0_f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:104:32\n    |\n LL |         let x: _ = generic_arg(1);\n    |                                ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:114:28\n+  --> $DIR/default_numeric_fallback.rs:122:28\n    |\n LL |         GenericStruct { x: 1 };\n    |                            ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:117:36\n+  --> $DIR/default_numeric_fallback.rs:125:36\n    |\n LL |         let _ = GenericStruct { x: 1 };\n    |                                    ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:137:23\n+  --> $DIR/default_numeric_fallback.rs:147:24\n+   |\n+LL |         GenericEnum::X(1);\n+   |                        ^ help: consider adding suffix: `1_i32`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:150:24\n+   |\n+LL |         GenericEnum::X(1.);\n+   |                        ^^ help: consider adding suffix: `1._f64`\n+\n+error: default numeric fallback might occur\n+  --> $DIR/default_numeric_fallback.rs:170:23\n    |\n LL |         s.generic_arg(1);\n    |                       ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:144:21\n+  --> $DIR/default_numeric_fallback.rs:177:21\n    |\n LL |             let x = 22;\n    |                     ^^ help: consider adding suffix: `22_i32`\n@@ -155,5 +173,5 @@ LL |         internal_macro!();\n    |\n    = note: this error originates in the macro `internal_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 25 previous errors\n+error: aborting due to 28 previous errors\n "}]}