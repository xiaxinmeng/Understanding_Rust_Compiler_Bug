{"sha": "79fa657abc6b8885ceb4023099b4e0026c5ef28f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZmE2NTdhYmM2Yjg4ODVjZWI0MDIzMDk5YjRlMDAyNmM1ZWYyOGY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-08T14:34:47Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't glob export ast::Decl_ variants", "tree": {"sha": "47b5b4bada4def35e5da8f19b4af309f887c8421", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47b5b4bada4def35e5da8f19b4af309f887c8421"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79fa657abc6b8885ceb4023099b4e0026c5ef28f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79fa657abc6b8885ceb4023099b4e0026c5ef28f", "html_url": "https://github.com/rust-lang/rust/commit/79fa657abc6b8885ceb4023099b4e0026c5ef28f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79fa657abc6b8885ceb4023099b4e0026c5ef28f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8516ba367d1f51318ce373fe9b60650c82ded1e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8516ba367d1f51318ce373fe9b60650c82ded1e9", "html_url": "https://github.com/rust-lang/rust/commit/8516ba367d1f51318ce373fe9b60650c82ded1e9"}], "stats": {"total": 75, "additions": 37, "deletions": 38}, "files": [{"sha": "165982abc051458ecb6d3465b7f0fa2fc6bc16d7", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=79fa657abc6b8885ceb4023099b4e0026c5ef28f", "patch": "@@ -247,11 +247,11 @@ pub fn lower_arm(lctx: &LoweringContext, arm: &Arm) -> hir::Arm {\n \n pub fn lower_decl(lctx: &LoweringContext, d: &Decl) -> P<hir::Decl> {\n     match d.node {\n-        DeclLocal(ref l) => P(Spanned {\n+        DeclKind::Local(ref l) => P(Spanned {\n             node: hir::DeclLocal(lower_local(lctx, l)),\n             span: d.span,\n         }),\n-        DeclItem(ref it) => P(Spanned {\n+        DeclKind::Item(ref it) => P(Spanned {\n             node: hir::DeclItem(lower_item_id(lctx, it)),\n             span: d.span,\n         }),"}, {"sha": "628dcb9217a088792a21e47953f30f5b599fa8e3", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=79fa657abc6b8885ceb4023099b4e0026c5ef28f", "patch": "@@ -365,7 +365,7 @@ impl EarlyLintPass for UnusedParens {\n     fn check_stmt(&mut self, cx: &EarlyContext, s: &ast::Stmt) {\n         let (value, msg) = match s.node {\n             ast::StmtDecl(ref decl, _) => match decl.node {\n-                ast::DeclLocal(ref local) => match local.init {\n+                ast::DeclKind::Local(ref local) => match local.init {\n                     Some(ref value) => (value, \"assigned value\"),\n                     None => return\n                 },"}, {"sha": "6d9c03bc82417a798ef2147d6c2c60f37539953e", "filename": "src/librustc_passes/const_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibrustc_passes%2Fconst_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibrustc_passes%2Fconst_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconst_fn.rs?ref=79fa657abc6b8885ceb4023099b4e0026c5ef28f", "patch": "@@ -59,10 +59,10 @@ fn check_block(sess: &Session, b: &ast::Block, kind: &'static str) {\n         let span = match stmt.node {\n             ast::StmtDecl(ref decl, _) => {\n                 match decl.node {\n-                    ast::DeclLocal(_) => decl.span,\n+                    ast::DeclKind::Local(_) => decl.span,\n \n                     // Item statements are allowed\n-                    ast::DeclItem(_) => continue,\n+                    ast::DeclKind::Item(_) => continue,\n                 }\n             }\n             ast::StmtExpr(ref expr, _) => expr.span,"}, {"sha": "9f013ad5ae7c4d27b311e9955f9ad8ef2af902cc", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=79fa657abc6b8885ceb4023099b4e0026c5ef28f", "patch": "@@ -10,7 +10,6 @@\n \n // The Rust abstract syntax tree.\n \n-pub use self::Decl_::*;\n pub use self::ExplicitSelf_::*;\n pub use self::Expr_::*;\n pub use self::FloatTy::*;\n@@ -829,21 +828,21 @@ impl Local {\n     }\n }\n \n-pub type Decl = Spanned<Decl_>;\n+pub type Decl = Spanned<DeclKind>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum Decl_ {\n+pub enum DeclKind {\n     /// A local (let) binding:\n-    DeclLocal(P<Local>),\n+    Local(P<Local>),\n     /// An item binding:\n-    DeclItem(P<Item>),\n+    Item(P<Item>),\n }\n \n impl Decl {\n     pub fn attrs(&self) -> &[Attribute] {\n         match self.node {\n-            DeclLocal(ref l) => l.attrs(),\n-            DeclItem(ref i) => i.attrs(),\n+            DeclKind::Local(ref l) => l.attrs(),\n+            DeclKind::Item(ref i) => i.attrs(),\n         }\n     }\n }"}, {"sha": "746f728e096e8f55bd459aead0f08bcb23c40833", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=79fa657abc6b8885ceb4023099b4e0026c5ef28f", "patch": "@@ -16,7 +16,7 @@ pub use self::IntType::*;\n \n use ast;\n use ast::{AttrId, Attribute, Attribute_, MetaItem, MetaWord, MetaNameValue, MetaList};\n-use ast::{Stmt, StmtDecl, StmtExpr, StmtMac, StmtSemi, DeclItem, DeclLocal};\n+use ast::{Stmt, StmtDecl, StmtExpr, StmtMac, StmtSemi, DeclKind};\n use ast::{Expr, Item, Local, Decl};\n use codemap::{Span, Spanned, spanned, dummy_spanned};\n use codemap::BytePos;\n@@ -933,8 +933,8 @@ impl WithAttrs for P<Decl> {\n             Spanned {\n                 span: span,\n                 node: match node {\n-                    DeclLocal(local) => DeclLocal(local.with_attrs(attrs)),\n-                    DeclItem(item) => DeclItem(item.with_attrs(attrs)),\n+                    DeclKind::Local(local) => DeclKind::Local(local.with_attrs(attrs)),\n+                    DeclKind::Item(item) => DeclKind::Item(item.with_attrs(attrs)),\n                 }\n             }\n         })"}, {"sha": "e849de0b1c60f1984241d62f2900605d4abe6b19", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=79fa657abc6b8885ceb4023099b4e0026c5ef28f", "patch": "@@ -373,7 +373,7 @@ impl<'v, 'a, 'b> visit::Visitor<'v> for StmtExprAttrFeatureVisitor<'a, 'b> {\n         if stmt_attrs.len() > 0 {\n             // attributes on items are fine\n             if let ast::StmtDecl(ref decl, _) = s.node {\n-                if let ast::DeclItem(_) = decl.node {\n+                if let ast::DeclKind::Item(_) = decl.node {\n                     visit::walk_stmt(self, s);\n                     return;\n                 }"}, {"sha": "3a69b84ab3c9eeca7f1ac9e217246de4c157a638", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=79fa657abc6b8885ceb4023099b4e0026c5ef28f", "patch": "@@ -524,7 +524,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             span: sp,\n             attrs: None,\n         });\n-        let decl = respan(sp, ast::DeclLocal(local));\n+        let decl = respan(sp, ast::DeclKind::Local(local));\n         P(respan(sp, ast::StmtDecl(P(decl), ast::DUMMY_NODE_ID)))\n     }\n \n@@ -548,7 +548,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             span: sp,\n             attrs: None,\n         });\n-        let decl = respan(sp, ast::DeclLocal(local));\n+        let decl = respan(sp, ast::DeclKind::Local(local));\n         P(respan(sp, ast::StmtDecl(P(decl), ast::DUMMY_NODE_ID)))\n     }\n \n@@ -558,7 +558,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn stmt_item(&self, sp: Span, item: P<ast::Item>) -> P<ast::Stmt> {\n-        let decl = respan(sp, ast::DeclItem(item));\n+        let decl = respan(sp, ast::DeclKind::Item(item));\n         P(respan(sp, ast::StmtDecl(P(decl), ast::DUMMY_NODE_ID)))\n     }\n "}, {"sha": "460d564a70e0b9d1ddbc8c9a222f078ca6864a38", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=79fa657abc6b8885ceb4023099b4e0026c5ef28f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{Block, Crate, DeclLocal, PatMac};\n+use ast::{Block, Crate, DeclKind, PatMac};\n use ast::{Local, Ident, Mac_, Name};\n use ast::{ItemMac, MacStmtWithSemicolon, Mrk, Stmt, StmtDecl, StmtMac};\n use ast::{StmtExpr, StmtSemi};\n@@ -559,7 +559,7 @@ fn expand_non_macro_stmt(Spanned {node, span: stmt_span}: Stmt, fld: &mut MacroE\n     // is it a let?\n     match node {\n         StmtDecl(decl, node_id) => decl.and_then(|Spanned {node: decl, span}| match decl {\n-            DeclLocal(local) => {\n+            DeclKind::Local(local) => {\n                 // take it apart:\n                 let rewritten_local = local.map(|Local {id, pat, ty, init, span, attrs}| {\n                     // expand the ty since TyFixedLengthVec contains an Expr\n@@ -597,7 +597,7 @@ fn expand_non_macro_stmt(Spanned {node, span: stmt_span}: Stmt, fld: &mut MacroE\n                 });\n                 SmallVector::one(P(Spanned {\n                     node: StmtDecl(P(Spanned {\n-                            node: DeclLocal(rewritten_local),\n+                            node: DeclKind::Local(rewritten_local),\n                             span: span\n                         }),\n                         node_id),"}, {"sha": "233bcbf46501d060dfb7e9f6842c64ca9412e185", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=79fa657abc6b8885ceb4023099b4e0026c5ef28f", "patch": "@@ -356,12 +356,12 @@ pub fn noop_fold_arm<T: Folder>(Arm {attrs, pats, guard, body}: Arm, fld: &mut T\n \n pub fn noop_fold_decl<T: Folder>(d: P<Decl>, fld: &mut T) -> SmallVector<P<Decl>> {\n     d.and_then(|Spanned {node, span}| match node {\n-        DeclLocal(l) => SmallVector::one(P(Spanned {\n-            node: DeclLocal(fld.fold_local(l)),\n+        DeclKind::Local(l) => SmallVector::one(P(Spanned {\n+            node: DeclKind::Local(fld.fold_local(l)),\n             span: fld.new_span(span)\n         })),\n-        DeclItem(it) => fld.fold_item(it).into_iter().map(|i| P(Spanned {\n-            node: DeclItem(i),\n+        DeclKind::Item(it) => fld.fold_item(it).into_iter().map(|i| P(Spanned {\n+            node: DeclKind::Item(i),\n             span: fld.new_span(span)\n         })).collect()\n     })"}, {"sha": "82b8730e10fd302b4215ef97faa699499b39d4c6", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=79fa657abc6b8885ceb4023099b4e0026c5ef28f", "patch": "@@ -49,8 +49,8 @@ pub fn stmt_ends_with_semi(stmt: &ast::Stmt_) -> bool {\n     match *stmt {\n         ast::StmtDecl(ref d, _) => {\n             match d.node {\n-                ast::DeclLocal(_) => true,\n-                ast::DeclItem(_) => false,\n+                ast::DeclKind::Local(_) => true,\n+                ast::DeclKind::Item(_) => false,\n             }\n         }\n         ast::StmtExpr(ref e, _) => expr_requires_semi_to_be_stmt(e),"}, {"sha": "8bdd9a8f539f3cb87eab68030deafbeb0ca3304e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=79fa657abc6b8885ceb4023099b4e0026c5ef28f", "patch": "@@ -18,7 +18,7 @@ use ast::{Mod, Arg, Arm, Attribute, BindingMode};\n use ast::Block;\n use ast::{BlockCheckMode, CaptureBy};\n use ast::{Constness, ConstTraitItem, Crate, CrateConfig};\n-use ast::{Decl, DeclItem, DeclLocal};\n+use ast::{Decl, DeclKind};\n use ast::{EMPTY_CTXT, EnumDef, ExplicitSelf};\n use ast::{Expr, Expr_, ExprAddrOf, ExprMatch, ExprAgain};\n use ast::{ExprAssign, ExprAssignOp, ExprBinary, ExprBlock, ExprBox};\n@@ -3636,7 +3636,7 @@ impl<'a> Parser<'a> {\n     fn parse_let(&mut self, attrs: ThinAttributes) -> PResult<'a, P<Decl>> {\n         let lo = self.span.lo;\n         let local = try!(self.parse_local(attrs));\n-        Ok(P(spanned(lo, self.last_span.hi, DeclLocal(local))))\n+        Ok(P(spanned(lo, self.last_span.hi, DeclKind::Local(local))))\n     }\n \n     /// Parse a structure field\n@@ -3759,7 +3759,7 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n                 spanned(lo, hi, StmtDecl(\n-                    P(spanned(lo, hi, DeclItem(\n+                    P(spanned(lo, hi, DeclKind::Item(\n                         self.mk_item(\n                             lo, hi, id /*id is good here*/,\n                             ItemMac(spanned(lo, hi,\n@@ -3772,7 +3772,7 @@ impl<'a> Parser<'a> {\n             match try!(self.parse_item_(attrs.clone(), false, true)) {\n                 Some(i) => {\n                     let hi = i.span.hi;\n-                    let decl = P(spanned(lo, hi, DeclItem(i)));\n+                    let decl = P(spanned(lo, hi, DeclKind::Item(i)));\n                     spanned(lo, hi, StmtDecl(decl, ast::DUMMY_NODE_ID))\n                 }\n                 None => {"}, {"sha": "421225f279df9e25217a59ae04ae2e1efdeaeed7", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=79fa657abc6b8885ceb4023099b4e0026c5ef28f", "patch": "@@ -2299,7 +2299,7 @@ impl<'a> State<'a> {\n     pub fn print_decl(&mut self, decl: &ast::Decl) -> io::Result<()> {\n         try!(self.maybe_print_comment(decl.span.lo));\n         match decl.node {\n-            ast::DeclLocal(ref loc) => {\n+            ast::DeclKind::Local(ref loc) => {\n                 try!(self.print_outer_attributes(loc.attrs.as_attr_slice()));\n                 try!(self.space_if_not_bol());\n                 try!(self.ibox(INDENT_UNIT));\n@@ -2315,7 +2315,7 @@ impl<'a> State<'a> {\n                 }\n                 self.end()\n             }\n-            ast::DeclItem(ref item) => self.print_item(&**item)\n+            ast::DeclKind::Item(ref item) => self.print_item(&**item)\n         }\n     }\n "}, {"sha": "d12a5f353e7a688820945f1ea8bca4e176e0cd52", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=79fa657abc6b8885ceb4023099b4e0026c5ef28f", "patch": "@@ -640,8 +640,8 @@ pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt) {\n \n pub fn walk_decl<'v, V: Visitor<'v>>(visitor: &mut V, declaration: &'v Decl) {\n     match declaration.node {\n-        DeclLocal(ref local) => visitor.visit_local(local),\n-        DeclItem(ref item) => visitor.visit_item(item),\n+        DeclKind::Local(ref local) => visitor.visit_local(local),\n+        DeclKind::Item(ref item) => visitor.visit_item(item),\n     }\n }\n "}, {"sha": "3c36ce57d18f161031cbb65d0271ea1348984b20", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=79fa657abc6b8885ceb4023099b4e0026c5ef28f", "patch": "@@ -151,6 +151,6 @@ fn stmt_let_undescore(cx: &mut ExtCtxt,\n         span: sp,\n         attrs: None,\n     });\n-    let decl = respan(sp, ast::DeclLocal(local));\n+    let decl = respan(sp, ast::DeclKind::Local(local));\n     P(respan(sp, ast::StmtDecl(P(decl), ast::DUMMY_NODE_ID)))\n }"}, {"sha": "449be3bc50c27826a2162b8d437b89931f746f15", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79fa657abc6b8885ceb4023099b4e0026c5ef28f/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=79fa657abc6b8885ceb4023099b4e0026c5ef28f", "patch": "@@ -457,7 +457,7 @@ impl<'a, 'b> Context<'a, 'b> {\n \n         let name = ecx.ident_of(name);\n         let item = ecx.item(sp, name, vec![], st);\n-        let decl = respan(sp, ast::DeclItem(item));\n+        let decl = respan(sp, ast::DeclKind::Item(item));\n \n         // Wrap the declaration in a block so that it forms a single expression.\n         ecx.expr_block(ecx.block(sp,"}]}