{"sha": "36baa81be9f430329f5ea7b6bbb539e41105bfe2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YmFhODFiZTlmNDMwMzI5ZjVlYTdiNmJiYjUzOWU0MTEwNWJmZTI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-02-19T07:08:23Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-02-27T18:47:33Z"}, "message": "Add label to primary span in some parse errors", "tree": {"sha": "4716e35eada0f9f9739aa01fc3d48be068275ec6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4716e35eada0f9f9739aa01fc3d48be068275ec6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36baa81be9f430329f5ea7b6bbb539e41105bfe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36baa81be9f430329f5ea7b6bbb539e41105bfe2", "html_url": "https://github.com/rust-lang/rust/commit/36baa81be9f430329f5ea7b6bbb539e41105bfe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36baa81be9f430329f5ea7b6bbb539e41105bfe2/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba7039cfd6331fb532c8a68aa79e6af4ef9b62df", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba7039cfd6331fb532c8a68aa79e6af4ef9b62df", "html_url": "https://github.com/rust-lang/rust/commit/ba7039cfd6331fb532c8a68aa79e6af4ef9b62df"}], "stats": {"total": 93, "additions": 68, "deletions": 25}, "files": [{"sha": "6653e6672183e1a4c527c7386cf074f15ecb3c4e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 64, "deletions": 21, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/36baa81be9f430329f5ea7b6bbb539e41105bfe2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36baa81be9f430329f5ea7b6bbb539e41105bfe2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=36baa81be9f430329f5ea7b6bbb539e41105bfe2", "patch": "@@ -1487,7 +1487,10 @@ impl<'a> Parser<'a> {\n                 }\n                 _ => {\n                     let token_str = self.this_token_to_string();\n-                    return Err(self.fatal(&format!(\"expected `;` or `{{`, found `{}`\", token_str)));\n+                    let mut err = self.fatal(&format!(\"expected `;` or `{{`, found `{}`\",\n+                                                      token_str));\n+                    err.span_label(self.span, \"expected `;` or `{`\");\n+                    return Err(err);\n                 }\n             };\n             (ident, ast::TraitItemKind::Method(sig, body), generics)\n@@ -2218,7 +2221,12 @@ impl<'a> Parser<'a> {\n                 TokenTree::Delimited(_, delimited) => Ok((delim, delimited.stream().into())),\n                 _ => unreachable!(),\n             },\n-            _ => Err(self.fatal(\"expected open delimiter\")),\n+            _ => {\n+                let msg = \"expected open delimiter\";\n+                let mut err = self.fatal(msg);\n+                err.span_label(self.span, msg);\n+                Err(err)\n+            }\n         }\n     }\n \n@@ -2351,7 +2359,10 @@ impl<'a> Parser<'a> {\n                     if self.eat_keyword(keywords::Loop) {\n                         return self.parse_loop_expr(Some(label), lo, attrs)\n                     }\n-                    return Err(self.fatal(\"expected `while`, `for`, or `loop` after a label\"))\n+                    let msg = \"expected `while`, `for`, or `loop` after a label\";\n+                    let mut err = self.fatal(msg);\n+                    err.span_label(self.span, msg);\n+                    return Err(err);\n                 }\n                 if self.eat_keyword(keywords::Loop) {\n                     let lo = self.prev_span;\n@@ -2410,6 +2421,7 @@ impl<'a> Parser<'a> {\n                     // Catch this syntax error here, instead of in `parse_ident`, so\n                     // that we can explicitly mention that let is not to be used as an expression\n                     let mut db = self.fatal(\"expected expression, found statement (`let`)\");\n+                    db.span_label(self.span, \"expected expression\");\n                     db.note(\"variable declaration using `let` is a statement\");\n                     return Err(db);\n                 } else if self.token.is_path_start() {\n@@ -2445,7 +2457,9 @@ impl<'a> Parser<'a> {\n                             self.cancel(&mut err);\n                             let msg = format!(\"expected expression, found {}\",\n                                               self.this_token_descr());\n-                            return Err(self.fatal(&msg));\n+                            let mut err = self.fatal(&msg);\n+                            err.span_label(self.span, \"expected expression\");\n+                            return Err(err);\n                         }\n                     }\n                 }\n@@ -2735,7 +2749,9 @@ impl<'a> Parser<'a> {\n                              self.look_ahead(1, |t| t.is_ident()) => {\n                 self.bump();\n                 let name = match self.token { token::Ident(ident) => ident, _ => unreachable!() };\n-                self.fatal(&format!(\"unknown macro variable `{}`\", name)).emit();\n+                let mut err = self.fatal(&format!(\"unknown macro variable `{}`\", name));\n+                err.span_label(self.span, \"unknown macro variable\");\n+                err.emit();\n                 return\n             }\n             token::Interpolated(ref nt) => {\n@@ -3760,7 +3776,10 @@ impl<'a> Parser<'a> {\n                 self.expect_and()?;\n                 let mutbl = self.parse_mutability();\n                 if let token::Lifetime(ident) = self.token {\n-                    return Err(self.fatal(&format!(\"unexpected lifetime `{}` in pattern\", ident)));\n+                    let mut err = self.fatal(&format!(\"unexpected lifetime `{}` in pattern\",\n+                                                      ident));\n+                    err.span_label(self.span, \"unexpected lifetime\");\n+                    return Err(err);\n                 }\n                 let subpat = self.parse_pat()?;\n                 pat = PatKind::Ref(subpat, mutbl);\n@@ -3843,7 +3862,10 @@ impl<'a> Parser<'a> {\n                     }\n                     token::OpenDelim(token::Brace) => {\n                         if qself.is_some() {\n-                            return Err(self.fatal(\"unexpected `{` after qualified path\"));\n+                            let msg = \"unexpected `{` after qualified path\";\n+                            let mut err = self.fatal(msg);\n+                            err.span_label(self.span, msg);\n+                            return Err(err);\n                         }\n                         // Parse struct pattern\n                         self.bump();\n@@ -3857,7 +3879,10 @@ impl<'a> Parser<'a> {\n                     }\n                     token::OpenDelim(token::Paren) => {\n                         if qself.is_some() {\n-                            return Err(self.fatal(\"unexpected `(` after qualified path\"));\n+                            let msg = \"unexpected `(` after qualified path\";\n+                            let mut err = self.fatal(msg);\n+                            err.span_label(self.span, msg);\n+                            return Err(err);\n                         }\n                         // Parse tuple struct or enum pattern\n                         self.bump();\n@@ -3889,7 +3914,9 @@ impl<'a> Parser<'a> {\n                     Err(mut err) => {\n                         self.cancel(&mut err);\n                         let msg = format!(\"expected pattern, found {}\", self.this_token_descr());\n-                        return Err(self.fatal(&msg));\n+                        let mut err = self.fatal(&msg);\n+                        err.span_label(self.span, \"expected pattern\");\n+                        return Err(err);\n                     }\n                 }\n             }\n@@ -4289,9 +4316,11 @@ impl<'a> Parser<'a> {\n                         \"\"\n                     };\n                     let tok_str = self.this_token_to_string();\n-                    return Err(self.fatal(&format!(\"expected {}`(` or `{{`, found `{}`\",\n-                                       ident_str,\n-                                       tok_str)))\n+                    let mut err = self.fatal(&format!(\"expected {}`(` or `{{`, found `{}`\",\n+                                                      ident_str,\n+                                                      tok_str));\n+                    err.span_label(self.span, format!(\"expected {}`(` or `{{`\", ident_str));\n+                    return Err(err)\n                 },\n             };\n \n@@ -5598,8 +5627,12 @@ impl<'a> Parser<'a> {\n             body\n         } else {\n             let token_str = self.this_token_to_string();\n-            return Err(self.fatal(&format!(\"expected `where`, `{{`, `(`, or `;` after struct \\\n-                                            name, found `{}`\", token_str)))\n+            let mut err = self.fatal(&format!(\n+                \"expected `where`, `{{`, `(`, or `;` after struct name, found `{}`\",\n+                token_str\n+            ));\n+            err.span_label(self.span, \"expected `where`, `{`, `(`, or `;` after struct name\");\n+            return Err(err);\n         };\n \n         Ok((class_name, ItemKind::Struct(vdata, generics), None))\n@@ -5618,8 +5651,10 @@ impl<'a> Parser<'a> {\n             VariantData::Struct(self.parse_record_struct_body()?, ast::DUMMY_NODE_ID)\n         } else {\n             let token_str = self.this_token_to_string();\n-            return Err(self.fatal(&format!(\"expected `where` or `{{` after union \\\n-                                            name, found `{}`\", token_str)))\n+            let mut err = self.fatal(&format!(\n+                \"expected `where` or `{{` after union name, found `{}`\", token_str));\n+            err.span_label(self.span, \"expected `where` or `{` after union name\");\n+            return Err(err);\n         };\n \n         Ok((class_name, ItemKind::Union(vdata, generics), None))\n@@ -5666,9 +5701,10 @@ impl<'a> Parser<'a> {\n             self.eat(&token::CloseDelim(token::Brace));\n         } else {\n             let token_str = self.this_token_to_string();\n-            return Err(self.fatal(&format!(\"expected `where`, or `{{` after struct \\\n-                                name, found `{}`\",\n-                                token_str)));\n+            let mut err = self.fatal(&format!(\n+                    \"expected `where`, or `{{` after struct name, found `{}`\", token_str));\n+            err.span_label(self.span, \"expected `where`, or `{` after struct name\");\n+            return Err(err);\n         }\n \n         Ok(fields)\n@@ -5841,9 +5877,11 @@ impl<'a> Parser<'a> {\n         if !self.eat(term) {\n             let token_str = self.this_token_to_string();\n             let mut err = self.fatal(&format!(\"expected item, found `{}`\", token_str));\n-            let msg = \"consider removing this semicolon\";\n             if token_str == \";\" {\n+                let msg = \"consider removing this semicolon\";\n                 err.span_suggestion_short(self.span, msg, \"\".to_string());\n+            } else {\n+                err.span_label(self.span, \"expected item\");\n             }\n             return Err(err);\n         }\n@@ -7000,7 +7038,12 @@ impl<'a> Parser<'a> {\n                 self.expect_no_suffix(sp, \"string literal\", suf);\n                 Ok((s, style))\n             }\n-            _ =>  Err(self.fatal(\"expected string literal\"))\n+            _ => {\n+                let msg = \"expected string literal\";\n+                let mut err = self.fatal(msg);\n+                err.span_label(self.span, msg);\n+                Err(err)\n+            }\n         }\n     }\n }"}, {"sha": "a9db5214e6a2eabdc1c8a326373890bb6ef662f1", "filename": "src/test/ui/cross-file-errors/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36baa81be9f430329f5ea7b6bbb539e41105bfe2/src%2Ftest%2Fui%2Fcross-file-errors%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36baa81be9f430329f5ea7b6bbb539e41105bfe2/src%2Ftest%2Fui%2Fcross-file-errors%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-file-errors%2Fmain.stderr?ref=36baa81be9f430329f5ea7b6bbb539e41105bfe2", "patch": "@@ -2,7 +2,7 @@ error: expected expression, found `_`\n   --> $DIR/underscore.rs:18:9\n    |\n LL |         _\n-   |         ^\n+   |         ^ expected expression\n    | \n   ::: $DIR/main.rs:15:5\n    |"}, {"sha": "4dc6bbe4d656c36aa7973dffc0468013c3f7ac0c", "filename": "src/test/ui/macro-context.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36baa81be9f430329f5ea7b6bbb539e41105bfe2/src%2Ftest%2Fui%2Fmacro-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36baa81be9f430329f5ea7b6bbb539e41105bfe2/src%2Ftest%2Fui%2Fmacro-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro-context.stderr?ref=36baa81be9f430329f5ea7b6bbb539e41105bfe2", "patch": "@@ -38,7 +38,7 @@ error: expected expression, found reserved keyword `typeof`\n   --> $DIR/macro-context.rs:13:17\n    |\n LL |     () => ( i ; typeof );   //~ ERROR expected expression, found reserved keyword `typeof`\n-   |                 ^^^^^^\n+   |                 ^^^^^^ expected expression\n ...\n LL |     m!();\n    |     ----- in this macro invocation"}, {"sha": "c6d32c6726ea576e13b881b552f52267adc5b05c", "filename": "src/test/ui/resolve/token-error-correct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36baa81be9f430329f5ea7b6bbb539e41105bfe2/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36baa81be9f430329f5ea7b6bbb539e41105bfe2/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr?ref=36baa81be9f430329f5ea7b6bbb539e41105bfe2", "patch": "@@ -26,7 +26,7 @@ error: expected expression, found `;`\n   --> $DIR/token-error-correct.rs:14:13\n    |\n LL |     foo(bar(;\n-   |             ^\n+   |             ^ expected expression\n \n error: aborting due to 3 previous errors\n "}, {"sha": "26816ca0ca22ab6c149f3dc6bbf33f7d28584d83", "filename": "src/test/ui/token/issue-10636-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36baa81be9f430329f5ea7b6bbb539e41105bfe2/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36baa81be9f430329f5ea7b6bbb539e41105bfe2/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr?ref=36baa81be9f430329f5ea7b6bbb539e41105bfe2", "patch": "@@ -20,7 +20,7 @@ error: expected expression, found `)`\n   --> $DIR/issue-10636-2.rs:18:1\n    |\n LL | } //~ ERROR: incorrect close delimiter\n-   | ^\n+   | ^ expected expression\n \n error[E0601]: main function not found\n "}]}