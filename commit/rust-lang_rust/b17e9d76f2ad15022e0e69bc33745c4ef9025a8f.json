{"sha": "b17e9d76f2ad15022e0e69bc33745c4ef9025a8f", "node_id": "C_kwDOAAsO6NoAKGIxN2U5ZDc2ZjJhZDE1MDIyZTBlNjliYzMzNzQ1YzRlZjkwMjVhOGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-07T21:44:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-07T21:44:40Z"}, "message": "Auto merge of #97081 - oli-obk:outlives_query_fast_path, r=jackh726\n\nRe-use the type op instead of calling the implied_outlives_bounds query directly\n\nr? `@ghost`", "tree": {"sha": "20ee6da436e3350be3aad01c2a51c8977c11a399", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20ee6da436e3350be3aad01c2a51c8977c11a399"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b17e9d76f2ad15022e0e69bc33745c4ef9025a8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b17e9d76f2ad15022e0e69bc33745c4ef9025a8f", "html_url": "https://github.com/rust-lang/rust/commit/b17e9d76f2ad15022e0e69bc33745c4ef9025a8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b17e9d76f2ad15022e0e69bc33745c4ef9025a8f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5435ed6916a59e8d5acba2149316a841c3905cbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5435ed6916a59e8d5acba2149316a841c3905cbd", "html_url": "https://github.com/rust-lang/rust/commit/5435ed6916a59e8d5acba2149316a841c3905cbd"}, {"sha": "e7a1fbc486b459eb359039fbd9bf78626d60ee41", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a1fbc486b459eb359039fbd9bf78626d60ee41", "html_url": "https://github.com/rust-lang/rust/commit/e7a1fbc486b459eb359039fbd9bf78626d60ee41"}], "stats": {"total": 127, "additions": 71, "deletions": 56}, "files": [{"sha": "813307356c4c78507f6d4751253646aae9bf1a4a", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17e9d76f2ad15022e0e69bc33745c4ef9025a8f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17e9d76f2ad15022e0e69bc33745c4ef9025a8f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=b17e9d76f2ad15022e0e69bc33745c4ef9025a8f", "patch": "@@ -334,8 +334,8 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n     /// either the return type of the MIR or one of its arguments. At\n     /// the same time, compute and add any implied bounds that come\n     /// from this local.\n+    #[instrument(level = \"debug\", skip(self))]\n     fn add_implied_bounds(&mut self, ty: Ty<'tcx>) -> Option<Rc<QueryRegionConstraints<'tcx>>> {\n-        debug!(\"add_implied_bounds(ty={:?})\", ty);\n         let TypeOpOutput { output: bounds, constraints, .. } = self\n             .param_env\n             .and(type_op::implied_outlives_bounds::ImpliedOutlivesBounds { ty })"}, {"sha": "ec468f428528e5bc917d1674883c4f7d420cc3aa", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b17e9d76f2ad15022e0e69bc33745c4ef9025a8f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17e9d76f2ad15022e0e69bc33745c4ef9025a8f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=b17e9d76f2ad15022e0e69bc33745c4ef9025a8f", "patch": "@@ -547,25 +547,34 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     ) -> impl Iterator<Item = PredicateObligation<'tcx>> + 'a + Captures<'tcx> {\n         unsubstituted_region_constraints.iter().map(move |&constraint| {\n             let predicate = substitute_value(self.tcx, result_subst, constraint);\n-            let ty::OutlivesPredicate(k1, r2) = predicate.skip_binder();\n+            self.query_outlives_constraint_to_obligation(predicate, cause.clone(), param_env)\n+        })\n+    }\n \n-            let atom = match k1.unpack() {\n-                GenericArgKind::Lifetime(r1) => {\n-                    ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(r1, r2))\n-                }\n-                GenericArgKind::Type(t1) => {\n-                    ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(t1, r2))\n-                }\n-                GenericArgKind::Const(..) => {\n-                    // Consts cannot outlive one another, so we don't expect to\n-                    // encounter this branch.\n-                    span_bug!(cause.span, \"unexpected const outlives {:?}\", constraint);\n-                }\n-            };\n-            let predicate = predicate.rebind(atom).to_predicate(self.tcx);\n+    pub fn query_outlives_constraint_to_obligation(\n+        &self,\n+        predicate: QueryOutlivesConstraint<'tcx>,\n+        cause: ObligationCause<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> Obligation<'tcx, ty::Predicate<'tcx>> {\n+        let ty::OutlivesPredicate(k1, r2) = predicate.skip_binder();\n \n-            Obligation::new(cause.clone(), param_env, predicate)\n-        })\n+        let atom = match k1.unpack() {\n+            GenericArgKind::Lifetime(r1) => {\n+                ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(r1, r2))\n+            }\n+            GenericArgKind::Type(t1) => {\n+                ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(t1, r2))\n+            }\n+            GenericArgKind::Const(..) => {\n+                // Consts cannot outlive one another, so we don't expect to\n+                // encounter this branch.\n+                span_bug!(cause.span, \"unexpected const outlives {:?}\", predicate);\n+            }\n+        };\n+        let predicate = predicate.rebind(atom).to_predicate(self.tcx);\n+\n+        Obligation::new(cause, param_env, predicate)\n     }\n \n     /// Given two sets of values for the same set of canonical variables, unify them."}, {"sha": "b9652e83e65bee227ea4b53a413391aae25ae5de", "filename": "compiler/rustc_infer/src/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17e9d76f2ad15022e0e69bc33745c4ef9025a8f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17e9d76f2ad15022e0e69bc33745c4ef9025a8f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs?ref=b17e9d76f2ad15022e0e69bc33745c4ef9025a8f", "patch": "@@ -8,10 +8,10 @@ pub mod verify;\n use rustc_middle::traits::query::OutlivesBound;\n use rustc_middle::ty;\n \n+#[instrument(level = \"debug\", skip(param_env))]\n pub fn explicit_outlives_bounds<'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n ) -> impl Iterator<Item = OutlivesBound<'tcx>> + 'tcx {\n-    debug!(\"explicit_outlives_bounds()\");\n     param_env\n         .caller_bounds()\n         .into_iter()"}, {"sha": "46d6e973d4cf9d20f237549e63a1d9d2165985be", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b17e9d76f2ad15022e0e69bc33745c4ef9025a8f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17e9d76f2ad15022e0e69bc33745c4ef9025a8f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=b17e9d76f2ad15022e0e69bc33745c4ef9025a8f", "patch": "@@ -1,7 +1,7 @@\n use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n use crate::traits::query::Fallible;\n use rustc_infer::traits::query::OutlivesBound;\n-use rustc_middle::ty::{ParamEnvAnd, Ty, TyCtxt};\n+use rustc_middle::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, HashStable, TypeFoldable, Lift)]\n pub struct ImpliedOutlivesBounds<'tcx> {\n@@ -13,9 +13,16 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ImpliedOutlivesBounds<'tcx> {\n \n     fn try_fast_path(\n         _tcx: TyCtxt<'tcx>,\n-        _key: &ParamEnvAnd<'tcx, Self>,\n+        key: &ParamEnvAnd<'tcx, Self>,\n     ) -> Option<Self::QueryResponse> {\n-        None\n+        // Don't go into the query for things that can't possibly have lifetimes.\n+        match key.value.ty.kind() {\n+            ty::Tuple(elems) if elems.is_empty() => Some(vec![]),\n+            ty::Never | ty::Str | ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) => {\n+                Some(vec![])\n+            }\n+            _ => None,\n+        }\n     }\n \n     fn perform_query("}, {"sha": "65b38b3f2e70bba3b97015d38a099ee14a8e0e32", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b17e9d76f2ad15022e0e69bc33745c4ef9025a8f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17e9d76f2ad15022e0e69bc33745c4ef9025a8f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=b17e9d76f2ad15022e0e69bc33745c4ef9025a8f", "patch": "@@ -129,18 +129,16 @@ impl<'tcx> OutlivesEnvironmentExt<'tcx> for OutlivesEnvironment<'tcx> {\n     /// add those assumptions into the outlives-environment.\n     ///\n     /// Tests: `src/test/ui/regions/regions-free-region-ordering-*.rs`\n+    #[instrument(level = \"debug\", skip(self, infcx))]\n     fn add_implied_bounds<'a>(\n         &mut self,\n         infcx: &InferCtxt<'a, 'tcx>,\n         fn_sig_tys: FxHashSet<Ty<'tcx>>,\n         body_id: hir::HirId,\n         span: Span,\n     ) {\n-        debug!(\"add_implied_bounds()\");\n-\n         for ty in fn_sig_tys {\n             let ty = infcx.resolve_vars_if_possible(ty);\n-            debug!(\"add_implied_bounds: ty = {}\", ty);\n             let implied_bounds = infcx.implied_outlives_bounds(self.param_env, body_id, ty, span);\n             self.add_outlives_bounds(Some(infcx), implied_bounds)\n         }"}, {"sha": "3bf697e7682694f0089a00e993edba6b62646a88", "filename": "compiler/rustc_typeck/src/outlives/outlives_bounds.rs", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b17e9d76f2ad15022e0e69bc33745c4ef9025a8f/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17e9d76f2ad15022e0e69bc33745c4ef9025a8f/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs?ref=b17e9d76f2ad15022e0e69bc33745c4ef9025a8f", "patch": "@@ -1,9 +1,8 @@\n use rustc_hir as hir;\n-use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::source_map::Span;\n-use rustc_trait_selection::infer::canonical::OriginalQueryValues;\n use rustc_trait_selection::infer::InferCtxt;\n+use rustc_trait_selection::traits::query::type_op::{self, TypeOp, TypeOpOutput};\n use rustc_trait_selection::traits::query::NoSolution;\n use rustc_trait_selection::traits::{FulfillmentContext, ObligationCause, TraitEngine};\n \n@@ -41,18 +40,18 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n     /// - `ty`, the type that we are supposed to assume is WF.\n     /// - `span`, a span to use when normalizing, hopefully not important,\n     ///   might be useful if a `bug!` occurs.\n+    #[instrument(level = \"debug\", skip(self, param_env, body_id, span))]\n     fn implied_outlives_bounds(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n         body_id: hir::HirId,\n         ty: Ty<'tcx>,\n         span: Span,\n     ) -> Vec<OutlivesBound<'tcx>> {\n-        debug!(\"implied_outlives_bounds(ty = {:?})\", ty);\n-\n-        let mut orig_values = OriginalQueryValues::default();\n-        let key = self.canonicalize_query(param_env.and(ty), &mut orig_values);\n-        let result = match self.tcx.implied_outlives_bounds(key) {\n+        let result = param_env\n+            .and(type_op::implied_outlives_bounds::ImpliedOutlivesBounds { ty })\n+            .fully_perform(self);\n+        let result = match result {\n             Ok(r) => r,\n             Err(NoSolution) => {\n                 self.tcx.sess.delay_span_bug(\n@@ -62,32 +61,34 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n                 return vec![];\n             }\n         };\n-        assert!(result.value.is_proven());\n \n-        let result = self.instantiate_query_response_and_region_obligations(\n-            &ObligationCause::misc(span, body_id),\n-            param_env,\n-            &orig_values,\n-            result,\n-        );\n-        debug!(\"implied_outlives_bounds for {:?}: {:#?}\", ty, result);\n-        let Ok(result) = result else {\n-            self.tcx.sess.delay_span_bug(span, \"implied_outlives_bounds failed to instantiate\");\n-            return vec![];\n-        };\n+        let TypeOpOutput { output, constraints, .. } = result;\n \n-        // Instantiation may have produced new inference variables and constraints on those\n-        // variables. Process these constraints.\n-        let mut fulfill_cx = FulfillmentContext::new();\n-        fulfill_cx.register_predicate_obligations(self, result.obligations);\n-        let errors = fulfill_cx.select_all_or_error(self);\n-        if !errors.is_empty() {\n-            self.tcx.sess.delay_span_bug(\n-                span,\n-                \"implied_outlives_bounds failed to solve obligations from instantiation\",\n-            );\n-        }\n+        if let Some(constraints) = constraints {\n+            // Instantiation may have produced new inference variables and constraints on those\n+            // variables. Process these constraints.\n+            let mut fulfill_cx = FulfillmentContext::new();\n+            let cause = ObligationCause::misc(span, body_id);\n+            for &constraint in &constraints.outlives {\n+                let obligation = self.query_outlives_constraint_to_obligation(\n+                    constraint,\n+                    cause.clone(),\n+                    param_env,\n+                );\n+                fulfill_cx.register_predicate_obligation(self, obligation);\n+            }\n+            if !constraints.member_constraints.is_empty() {\n+                span_bug!(span, \"{:#?}\", constraints.member_constraints);\n+            }\n+            let errors = fulfill_cx.select_all_or_error(self);\n+            if !errors.is_empty() {\n+                self.tcx.sess.delay_span_bug(\n+                    span,\n+                    \"implied_outlives_bounds failed to solve obligations from instantiation\",\n+                );\n+            }\n+        };\n \n-        result.value\n+        output\n     }\n }"}]}