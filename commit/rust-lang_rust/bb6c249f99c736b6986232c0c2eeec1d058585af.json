{"sha": "bb6c249f99c736b6986232c0c2eeec1d058585af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNmMyNDlmOTljNzM2YjY5ODYyMzJjMGMyZWVlYzFkMDU4NTg1YWY=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-22T19:41:30Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-27T03:00:54Z"}, "message": "Speed up `IntRange::from_pat`\n\nPreviously, this method called the more general `pat_constructor`\nfunction, which can return other pattern variants besides `IntRange`.\nThen it throws away any non-`IntRange` variants. Specialize it so work\nis only done when it could result in an `IntRange`.", "tree": {"sha": "be6b00f15cc5dd724ca7c3f9b099223ababde3e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be6b00f15cc5dd724ca7c3f9b099223ababde3e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb6c249f99c736b6986232c0c2eeec1d058585af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6c249f99c736b6986232c0c2eeec1d058585af", "html_url": "https://github.com/rust-lang/rust/commit/bb6c249f99c736b6986232c0c2eeec1d058585af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb6c249f99c736b6986232c0c2eeec1d058585af/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ec980d225fff2346a1a631a7ffc88b37e9e18af", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec980d225fff2346a1a631a7ffc88b37e9e18af", "html_url": "https://github.com/rust-lang/rust/commit/1ec980d225fff2346a1a631a7ffc88b37e9e18af"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "04de9a7a58dda5394427ce410607a4becb31c6ea", "filename": "compiler/rustc_mir_build/src/thir/pattern/_match.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bb6c249f99c736b6986232c0c2eeec1d058585af/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6c249f99c736b6986232c0c2eeec1d058585af/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs?ref=bb6c249f99c736b6986232c0c2eeec1d058585af", "patch": "@@ -1787,9 +1787,32 @@ impl<'tcx> IntRange<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         pat: &Pat<'tcx>,\n     ) -> Option<IntRange<'tcx>> {\n-        match pat_constructor(tcx, param_env, pat)? {\n-            IntRange(range) => Some(range),\n-            _ => None,\n+        // This MUST be kept in sync with `pat_constructor`.\n+        match *pat.kind {\n+            PatKind::AscribeUserType { .. } => bug!(), // Handled by `expand_pattern`\n+            PatKind::Or { .. } => bug!(\"Or-pattern should have been expanded earlier on.\"),\n+\n+            PatKind::Binding { .. }\n+            | PatKind::Wild\n+            | PatKind::Leaf { .. }\n+            | PatKind::Deref { .. }\n+            | PatKind::Variant { .. }\n+            | PatKind::Array { .. }\n+            | PatKind::Slice { .. } => None,\n+\n+            PatKind::Constant { value } => Self::from_const(tcx, param_env, value, pat.span),\n+\n+            PatKind::Range(PatRange { lo, hi, end }) => {\n+                let ty = lo.ty;\n+                Self::from_range(\n+                    tcx,\n+                    lo.eval_bits(tcx, param_env, lo.ty),\n+                    hi.eval_bits(tcx, param_env, hi.ty),\n+                    ty,\n+                    &end,\n+                    pat.span,\n+                )\n+            }\n         }\n     }\n \n@@ -2196,6 +2219,7 @@ fn pat_constructor<'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n     pat: &Pat<'tcx>,\n ) -> Option<Constructor<'tcx>> {\n+    // This MUST be kept in sync with `IntRange::from_pat`.\n     match *pat.kind {\n         PatKind::AscribeUserType { .. } => bug!(), // Handled by `expand_pattern`\n         PatKind::Binding { .. } | PatKind::Wild => None,"}]}