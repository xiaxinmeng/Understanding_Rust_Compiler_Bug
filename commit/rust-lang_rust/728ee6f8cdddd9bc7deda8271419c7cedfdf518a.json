{"sha": "728ee6f8cdddd9bc7deda8271419c7cedfdf518a", "node_id": "C_kwDOAAsO6NoAKDcyOGVlNmY4Y2RkZGQ5YmM3ZGVkYTgyNzE0MTljN2NlZGZkZjUxOGE", "commit": {"author": {"name": "Samuel \"Sam\" Tardieu", "email": "sam@rfc1149.net", "date": "2023-03-21T19:18:47Z"}, "committer": {"name": "Samuel \"Sam\" Tardieu", "email": "sam@rfc1149.net", "date": "2023-03-21T21:00:58Z"}, "message": "Really dogfood clippy\n\nThe dogfood success condition was inverted in `tests/dogfood.rs`:\n\n```rust\n  assert!(!failed_packages.is_empty(), \u2026);\n```\n\nwhile instead the `failed_packages` collection must be empty:\n\n```rust\n  assert!(failed_packages.is_empty(), \u2026);\n```\n\nAnd indeed, several clippy lint source files were not clean and had to be\nfixed in the process.", "tree": {"sha": "adf031ed278d9d4f2a4fc2476f4f2b14d0538727", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adf031ed278d9d4f2a4fc2476f4f2b14d0538727"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/728ee6f8cdddd9bc7deda8271419c7cedfdf518a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/728ee6f8cdddd9bc7deda8271419c7cedfdf518a", "html_url": "https://github.com/rust-lang/rust/commit/728ee6f8cdddd9bc7deda8271419c7cedfdf518a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/728ee6f8cdddd9bc7deda8271419c7cedfdf518a/comments", "author": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a77f4c5b1e33170e8ae9b70eded428ba20c5d9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a77f4c5b1e33170e8ae9b70eded428ba20c5d9b", "html_url": "https://github.com/rust-lang/rust/commit/0a77f4c5b1e33170e8ae9b70eded428ba20c5d9b"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "c01e3882d529f67f4f56ac7323d2ea2de85a9249", "filename": "clippy_lints/src/let_with_type_underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728ee6f8cdddd9bc7deda8271419c7cedfdf518a/clippy_lints%2Fsrc%2Flet_with_type_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728ee6f8cdddd9bc7deda8271419c7cedfdf518a/clippy_lints%2Fsrc%2Flet_with_type_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_with_type_underscore.rs?ref=728ee6f8cdddd9bc7deda8271419c7cedfdf518a", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use rustc_hir::*;\n+use rustc_hir::{Local, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};"}, {"sha": "c7254b32d0b85f1c81f541421bc0a8d771d75c46", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/728ee6f8cdddd9bc7deda8271419c7cedfdf518a/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728ee6f8cdddd9bc7deda8271419c7cedfdf518a/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=728ee6f8cdddd9bc7deda8271419c7cedfdf518a", "patch": "@@ -77,11 +77,12 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n                             if let Some(ret_pos) = position_before_rarrow(&header_snip);\n                             if let Some((ret_sugg, ret_snip)) = suggested_ret(cx, output);\n                             then {\n-                                let header_snip = if !vis_snip.is_empty() {\n-                                    format!(\"{} async {}\", vis_snip, &header_snip[vis_snip.len() + 1..ret_pos])\n-                                } else {\n+                                let header_snip = if vis_snip.is_empty() {\n                                     format!(\"async {}\", &header_snip[..ret_pos])\n+                                } else {\n+                                    format!(\"{} async {}\", vis_snip, &header_snip[vis_snip.len() + 1..ret_pos])\n                                 };\n+\n                                 let help = format!(\"make the function `async` and {ret_sugg}\");\n                                 diag.span_suggestion(\n                                     header_span,"}, {"sha": "c292bbe4e9344ce80e22f849704f52a2dded01ad", "filename": "clippy_lints/src/manual_main_separator_str.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/728ee6f8cdddd9bc7deda8271419c7cedfdf518a/clippy_lints%2Fsrc%2Fmanual_main_separator_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728ee6f8cdddd9bc7deda8271419c7cedfdf518a/clippy_lints%2Fsrc%2Fmanual_main_separator_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_main_separator_str.rs?ref=728ee6f8cdddd9bc7deda8271419c7cedfdf518a", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::{is_trait_method, match_def_path, paths, peel_hir_expr_refs};\n use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::*;\n+use rustc_hir::{Expr, ExprKind, Mutability, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -69,4 +69,6 @@ impl LateLintPass<'_> for ManualMainSeparatorStr {\n                 );\n             }\n     }\n+\n+    extract_msrv_attr!(LateContext);\n }"}, {"sha": "b2adbcead003120b27972aa3b1f36b5714534e76", "filename": "clippy_lints/src/redundant_async_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728ee6f8cdddd9bc7deda8271419c7cedfdf518a/clippy_lints%2Fsrc%2Fredundant_async_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728ee6f8cdddd9bc7deda8271419c7cedfdf518a/clippy_lints%2Fsrc%2Fredundant_async_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_async_block.rs?ref=728ee6f8cdddd9bc7deda8271419c7cedfdf518a", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::{diagnostics::span_lint_and_sugg, source::snippet};\n-use rustc_ast::ast::*;\n+use rustc_ast::ast::{Expr, ExprKind, Stmt, StmtKind};\n use rustc_ast::visit::Visitor as AstVisitor;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};"}, {"sha": "f7eef03d1d473c42f5e7fe2f101eba41d84a11f0", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/728ee6f8cdddd9bc7deda8271419c7cedfdf518a/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728ee6f8cdddd9bc7deda8271419c7cedfdf518a/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=728ee6f8cdddd9bc7deda8271419c7cedfdf518a", "patch": "@@ -189,7 +189,7 @@ fn check_suspicious_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n         if let Some((lhs0, rhs0)) = parse(first)\n             && let Some((lhs1, rhs1)) = parse(second)\n             && first.span.eq_ctxt(second.span)\n-\t\t\t&& !in_external_macro(&cx.sess(), first.span)\n+\t\t\t&& !in_external_macro(cx.sess(), first.span)\n             && is_same(cx, lhs0, rhs1)\n             && is_same(cx, lhs1, rhs0)\n \t\t\t&& !is_same(cx, lhs1, rhs1) // Ignore a = b; a = a (#10421)\n@@ -260,8 +260,8 @@ fn parse<'a, 'hir>(stmt: &'a Stmt<'hir>) -> Option<(ExprOrIdent<'hir>, &'a Expr<\n /// Implementation of the xor case for `MANUAL_SWAP` lint.\n fn check_xor_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n     for [s1, s2, s3] in block.stmts.array_windows::<3>() {\n+        let ctxt = s1.span.ctxt();\n         if_chain! {\n-            let ctxt = s1.span.ctxt();\n             if let Some((lhs0, rhs0)) = extract_sides_of_xor_assign(s1, ctxt);\n             if let Some((lhs1, rhs1)) = extract_sides_of_xor_assign(s2, ctxt);\n             if let Some((lhs2, rhs2)) = extract_sides_of_xor_assign(s3, ctxt);"}, {"sha": "36f910c983f64d7ebdccb9e41d27c479c4793ba5", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/728ee6f8cdddd9bc7deda8271419c7cedfdf518a/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728ee6f8cdddd9bc7deda8271419c7cedfdf518a/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=728ee6f8cdddd9bc7deda8271419c7cedfdf518a", "patch": "@@ -158,12 +158,10 @@ impl LateLintPass<'_> for WildcardImports {\n                 let mut imports = used_imports.items().map(ToString::to_string).into_sorted_stable_ord(false);\n                 let imports_string = if imports.len() == 1 {\n                     imports.pop().unwrap()\n+                } else if braced_glob {\n+                    imports.join(\", \")\n                 } else {\n-                    if braced_glob {\n-                        imports.join(\", \")\n-                    } else {\n-                        format!(\"{{{}}}\", imports.join(\", \"))\n-                    }\n+                    format!(\"{{{}}}\", imports.join(\", \"))\n                 };\n \n                 let sugg = if braced_glob {"}, {"sha": "3a5d478fa31404927b2d7e1dbd500ad52ec60797", "filename": "tests/dogfood.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/728ee6f8cdddd9bc7deda8271419c7cedfdf518a/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728ee6f8cdddd9bc7deda8271419c7cedfdf518a/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=728ee6f8cdddd9bc7deda8271419c7cedfdf518a", "patch": "@@ -37,10 +37,10 @@ fn dogfood_clippy() {\n     }\n \n     assert!(\n-        !failed_packages.is_empty(),\n+        failed_packages.is_empty(),\n         \"Dogfood failed for packages `{}`\",\n         failed_packages.iter().format(\", \"),\n-    )\n+    );\n }\n \n #[test]"}]}