{"sha": "b881aaed90f56af95fe7da6bedcb9144f82ba93d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ODFhYWVkOTBmNTZhZjk1ZmU3ZGE2YmVkY2I5MTQ0ZjgyYmE5M2Q=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-04T00:20:46Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T17:23:59Z"}, "message": "Document the process more thoroughly", "tree": {"sha": "c953c7904605e1310fb085ba09b352268c7e68a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c953c7904605e1310fb085ba09b352268c7e68a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b881aaed90f56af95fe7da6bedcb9144f82ba93d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b881aaed90f56af95fe7da6bedcb9144f82ba93d", "html_url": "https://github.com/rust-lang/rust/commit/b881aaed90f56af95fe7da6bedcb9144f82ba93d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b881aaed90f56af95fe7da6bedcb9144f82ba93d/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8264e42cb2d70ceea06109b36ce5ef46da647859", "url": "https://api.github.com/repos/rust-lang/rust/commits/8264e42cb2d70ceea06109b36ce5ef46da647859", "html_url": "https://github.com/rust-lang/rust/commit/8264e42cb2d70ceea06109b36ce5ef46da647859"}], "stats": {"total": 83, "additions": 66, "deletions": 17}, "files": [{"sha": "d6b474ab3aff1aafc4266e105a66a8f821965383", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 66, "deletions": 17, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/b881aaed90f56af95fe7da6bedcb9144f82ba93d/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b881aaed90f56af95fe7da6bedcb9144f82ba93d/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=b881aaed90f56af95fe7da6bedcb9144f82ba93d", "patch": "@@ -23,38 +23,87 @@\n //!\n //! ## Architecture\n //!\n-//! Although this build system defers most of the complicated logic to Cargo\n-//! itself, it still needs to maintain a list of targets and dependencies which\n-//! it can itself perform. Rustbuild is made up of a list of rules with\n-//! dependencies amongst them (created in the `step` module) and then knows how\n-//! to execute each in sequence. Each time rustbuild is invoked, it will simply\n-//! iterate through this list of steps and execute each serially in turn.  For\n-//! each step rustbuild relies on the step internally being incremental and\n+//! The build system defers most of the complicated logic managing invocations\n+//! of rustc and rustdoc to Cargo itself. However, moving through various stages\n+//! and copying artifacts is still necessary for it to do. Each time rustbuild\n+//! is invoked, it will iterate through the list of predefined steps and execute\n+//! each serially in turn if it matches the paths passed or is a default rule.\n+//! For each step rustbuild relies on the step internally being incremental and\n //! parallel. Note, though, that the `-j` parameter to rustbuild gets forwarded\n //! to appropriate test harnesses and such.\n //!\n //! Most of the \"meaty\" steps that matter are backed by Cargo, which does indeed\n //! have its own parallelism and incremental management. Later steps, like\n //! tests, aren't incremental and simply run the entire suite currently.\n+//! However, compiletest itself tries to avoid running tests when the artifacts\n+//! that are involved (mainly the compiler) haven't changed.\n //!\n //! When you execute `x.py build`, the steps which are executed are:\n //!\n //! * First, the python script is run. This will automatically download the\n-//!   stage0 rustc and cargo according to `src/stage0.txt`, or using the cached\n+//!   stage0 rustc and cargo according to `src/stage0.txt`, or use the cached\n //!   versions if they're available. These are then used to compile rustbuild\n //!   itself (using Cargo). Finally, control is then transferred to rustbuild.\n //!\n //! * Rustbuild takes over, performs sanity checks, probes the environment,\n-//!   reads configuration, builds up a list of steps, and then starts executing\n-//!   them.\n+//!   reads configuration, and starts executing steps as it reads the command\n+//!   line arguments (paths) or going through the default rules.\n //!\n-//! * The stage0 libstd is compiled\n-//! * The stage0 libtest is compiled\n-//! * The stage0 librustc is compiled\n-//! * The stage1 compiler is assembled\n-//! * The stage1 libstd, libtest, librustc are compiled\n-//! * The stage2 compiler is assembled\n-//! * The stage2 libstd, libtest, librustc are compiled\n+//!   The build output will be something like the following:\n+//!\n+//!   Building stage0 std artifacts\n+//!   Copying stage0 std\n+//!   Building stage0 test artifacts\n+//!   Copying stage0 test\n+//!   Building stage0 compiler artifacts\n+//!   Copying stage0 rustc\n+//!   Assembling stage1 compiler\n+//!   Building stage1 std artifacts\n+//!   Copying stage1 std\n+//!   Building stage1 test artifacts\n+//!   Copying stage1 test\n+//!   Building stage1 compiler artifacts\n+//!   Copying stage1 rustc\n+//!   Assembling stage2 compiler\n+//!   Uplifting stage1 std\n+//!   Uplifting stage1 test\n+//!   Uplifting stage1 rustc\n+//!\n+//! Let's disect that a little:\n+//!\n+//! ## Building stage0 {std,test,compiler} artifacts\n+//!\n+//! These steps use the provided (downloaded, usually) compiler to compile the\n+//! local Rust source into libraries we can use.\n+//!\n+//! ## Copying stage0 {std,test,rustc}\n+//!\n+//! This copies the build output from Cargo into\n+//! `build/$HOST/stage0-sysroot/lib/rustlib/$ARCH/lib`. FIXME: This step's\n+//! documentation should be expanded -- the information already here may be\n+//! incorrect.\n+//!\n+//! ## Assembling stage1 compiler\n+//!\n+//! This copies the libraries we built in \"building stage0 ... artifacts\" into\n+//! the stage1 compiler's lib directory. These are the host libraries that the\n+//! compiler itself uses to run. These aren't actually used by artifacts the new\n+//! compiler generates. This step also copies the rustc and rustdoc binaries we\n+//! generated into build/$HOST/stage/bin.\n+//!\n+//! The stage1/bin/rustc is a fully functional compiler, but it doesn't yet have\n+//! any libraries to link built binaries or libraries to. The next 3 steps will\n+//! provide those libraries for it; they are mostly equivalent to constructing\n+//! the stage1/bin compiler so we don't go through them individually.\n+//!\n+//! ## Uplifiting stage1 {std,test,rustc}\n+//!\n+//! This step copies the libraries from the stage1 compiler sysroot into the\n+//! stage2 compiler. This is done to avoid rebuilding the compiler; libraries\n+//! we'd build in this step should be identical (in function, if not necessarily\n+//! identical on disk) so there's no need to recompile the compiler again. Note\n+//! that if you want to, you can enable the full-bootstrap option to change this\n+//! behavior.\n //!\n //! Each step is driven by a separate Cargo project and rustbuild orchestrates\n //! copying files between steps and otherwise preparing for Cargo to run."}]}