{"sha": "00f9981f5c39a82b8d44a7f958199b0066d08b84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZjk5ODFmNWMzOWE4MmI4ZDQ0YTdmOTU4MTk5YjAwNjZkMDhiODQ=", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-02-11T13:36:52Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-02-11T13:36:52Z"}, "message": "Merge remote-tracking branch 'upstream/master' into rustup", "tree": {"sha": "66e28da1dd11d3fc51309f979fc742061499702e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66e28da1dd11d3fc51309f979fc742061499702e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00f9981f5c39a82b8d44a7f958199b0066d08b84", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmAlMvYACgkQHKDfKvWd\naKWhCw/7Bn3uFkm9bmAzvYDizVuNlV1xITEhUno2njwVSkXGxoBEsElPyX2WE6lc\nAxntj0F7EWb/kVcRwQqLx4alR/9h3JnCEy2LW2vR/OnqNYpv3M7ZltVK8a3r5/d2\nsUgL4AsORhZJM7IrHPj0qk7i/8IYL9/nSVHuWa2HxYXhVI+JWPL6THYpOnyaiVLm\nQ97bKi5bzDInGMbyyaCBFCjJKaQ2YNow1hvGpLmW3p6EOmRkhvILIx2yIuq4/7s6\nR+OSdEAJTPwn0IZXhS1dy7z5QT+ZKZNaifzgFS2aLqJwuwz44UF3mdAukPETo1uJ\ngmBgcHo1sRG1W72hv0xnexcMynCRl7bFbNm17nWRjHtzZqXgfumGu3TAkkdxYckz\n/t6hhTLDdCGngcs7r71bWt+G5siqPpqhC76kwHYggYMkmrU2HHqqbYTKdaNyFayG\nPwj0lnI+fREcKHrv0beUDj1nFJYzIi3FyB4/IsoAP9+dXAsTuHsgdhOv8V6AEp4+\npmNoSZ6XcKhtqsenMcOYCS743GFTyvH6rhQJbu0c9Nxs/SZ09y2SAKpZclSvIXB+\ndL0FrfEHYko+U/J7ASv+adOGjkcW109xqEB9gncQW18b6fiNsySoWbzUH4iM/B+D\nfzH31DzFM6Bkvd5ULIO4mk/DksTh/IBSdrMyw0CycpokuRXcT1c=\n=AbZx\n-----END PGP SIGNATURE-----", "payload": "tree 66e28da1dd11d3fc51309f979fc742061499702e\nparent 34b373d309e05dec9d7409bc2481668778ebc600\nparent 8dbcffed4469f1e92f18d23304e4865b39ec69ec\nauthor flip1995 <philipp.krones@embecosm.com> 1613050612 +0100\ncommitter flip1995 <philipp.krones@embecosm.com> 1613050612 +0100\n\nMerge remote-tracking branch 'upstream/master' into rustup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00f9981f5c39a82b8d44a7f958199b0066d08b84", "html_url": "https://github.com/rust-lang/rust/commit/00f9981f5c39a82b8d44a7f958199b0066d08b84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00f9981f5c39a82b8d44a7f958199b0066d08b84/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34b373d309e05dec9d7409bc2481668778ebc600", "url": "https://api.github.com/repos/rust-lang/rust/commits/34b373d309e05dec9d7409bc2481668778ebc600", "html_url": "https://github.com/rust-lang/rust/commit/34b373d309e05dec9d7409bc2481668778ebc600"}, {"sha": "8dbcffed4469f1e92f18d23304e4865b39ec69ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dbcffed4469f1e92f18d23304e4865b39ec69ec", "html_url": "https://github.com/rust-lang/rust/commit/8dbcffed4469f1e92f18d23304e4865b39ec69ec"}], "stats": {"total": 2512, "additions": 1831, "deletions": 681}, "files": [{"sha": "7c79fe88816f13176974589209860dac1cbf3a8f", "filename": "CHANGELOG.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1877,6 +1877,7 @@ Released 2018-09-13\n [`box_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#box_vec\n [`boxed_local`]: https://rust-lang.github.io/rust-clippy/master/index.html#boxed_local\n [`builtin_type_shadow`]: https://rust-lang.github.io/rust-clippy/master/index.html#builtin_type_shadow\n+[`bytes_nth`]: https://rust-lang.github.io/rust-clippy/master/index.html#bytes_nth\n [`cargo_common_metadata`]: https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata\n [`case_sensitive_file_extension_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#case_sensitive_file_extension_comparisons\n [`cast_lossless`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless\n@@ -1955,6 +1956,7 @@ Released 2018-09-13\n [`field_reassign_with_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#field_reassign_with_default\n [`filetype_is_file`]: https://rust-lang.github.io/rust-clippy/master/index.html#filetype_is_file\n [`filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#filter_map\n+[`filter_map_identity`]: https://rust-lang.github.io/rust-clippy/master/index.html#filter_map_identity\n [`filter_map_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#filter_map_next\n [`filter_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#filter_next\n [`find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#find_map\n@@ -2039,6 +2041,7 @@ Released 2018-09-13\n [`manual_async_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_async_fn\n [`manual_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_filter_map\n [`manual_find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_find_map\n+[`manual_flatten`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_flatten\n [`manual_memcpy`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_memcpy\n [`manual_non_exhaustive`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive\n [`manual_ok_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_ok_or\n@@ -2184,6 +2187,7 @@ Released 2018-09-13\n [`same_item_push`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_item_push\n [`search_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#search_is_some\n [`self_assignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_assignment\n+[`semicolon_if_nothing_returned`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\n [`serde_api_misuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#serde_api_misuse\n [`shadow_reuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\n [`shadow_same`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_same"}, {"sha": "5ac96e2210c89a782685c662482747457c151272", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -9,6 +9,7 @@ edition = \"2018\"\n bytecount = \"0.6\"\n clap = \"2.33\"\n flate2 = { version = \"1.0.19\", optional = true }\n+fs_extra = { version = \"1.2.0\", optional = true }\n itertools = \"0.9\"\n opener = \"0.4\"\n regex = \"1\"\n@@ -21,5 +22,5 @@ ureq = { version = \"2.0.0-rc3\", optional = true }\n walkdir = \"2\"\n \n [features]\n-lintcheck = [\"flate2\", \"serde_json\", \"tar\", \"toml\", \"ureq\", \"serde\"]\n+lintcheck = [\"flate2\", \"serde_json\", \"tar\", \"toml\", \"ureq\", \"serde\", \"fs_extra\"]\n deny-warnings = []"}, {"sha": "3846e8bd4ccb79a8dee8c62f90fea1a99a10661f", "filename": "clippy_dev/README.md", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_dev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_dev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FREADME.md?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,28 @@\n+# Clippy Dev Tool \n+\n+The Clippy Dev Tool is a tool to ease Clippy development, similar to `rustc`s `x.py`.\n+\n+Functionalities (incomplete):\n+\n+## `lintcheck`\n+Runs clippy on a fixed set of crates read from `clippy_dev/lintcheck_crates.toml`\n+and saves logs of the lint warnings into the repo.\n+We can then check the diff and spot new or disappearing warnings.\n+\n+From the repo root, run:\n+````\n+cargo run --target-dir clippy_dev/target --package clippy_dev \\\n+--bin clippy_dev --manifest-path clippy_dev/Cargo.toml --features lintcheck -- lintcheck\n+````\n+or\n+````\n+cargo dev-lintcheck\n+````\n+\n+By default the logs will be saved into `lintcheck-logs/lintcheck_crates_logs.txt`.\n+\n+You can set a custom sources.toml by adding `--crates-toml custom.toml`\n+where `custom.toml` must be a relative path from the repo root.\n+\n+The results will then be saved to `lintcheck-logs/custom_logs.toml`.\n+"}, {"sha": "60e70ca4eb22bbb6cfac5704d3764853461ff86d", "filename": "clippy_dev/lintcheck_crates.toml", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_dev%2Flintcheck_crates.toml", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_dev%2Flintcheck_crates.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Flintcheck_crates.toml?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,20 +1,23 @@\n [crates]\n # some of these are from cargotest\n-cargo = ['0.49.0']\n-iron = ['0.6.1']\n-ripgrep = ['12.1.1']\n-xsv = ['0.13.0']\n-#tokei = ['12.0.4']\n-rayon = ['1.5.0']\n-serde = ['1.0.118']\n+cargo = {name = \"cargo\", versions = ['0.49.0']}\n+iron = {name = \"iron\", versions = ['0.6.1']}\n+ripgrep = {name = \"ripgrep\", versions = ['12.1.1']}\n+xsv = {name = \"xsv\", versions = ['0.13.0']}\n+# commented out because of 173K clippy::match_same_arms msgs in language_type.rs\n+#tokei = { name = \"tokei\", versions = ['12.0.4']}\n+rayon = {name = \"rayon\", versions = ['1.5.0']}\n+serde = {name = \"serde\", versions = ['1.0.118']}\n # top 10 crates.io dls\n-bitflags = ['1.2.1']\n-libc = ['0.2.81']\n-log = ['0.4.11']\n-proc-macro2 = ['1.0.24']\n-quote = ['1.0.7']\n-rand = ['0.7.3']\n-rand_core = ['0.6.0']\n-regex = ['1.3.2']\n-syn = ['1.0.54']\n-unicode-xid = ['0.2.1']\n+bitflags = {name = \"bitflags\", versions = ['1.2.1']}\n+# crash = {name = \"clippy_crash\", path = \"/tmp/clippy_crash\"}\n+libc = {name = \"libc\", versions = ['0.2.81']}\n+log = {name = \"log\", versions = ['0.4.11']}\n+proc-macro2 = {name = \"proc-macro2\", versions = ['1.0.24']}\n+puffin = {name = \"puffin\", git_url = \"https://github.com/EmbarkStudios/puffin\", git_hash = \"02dd4a3\"}\n+quote = {name = \"quote\", versions = ['1.0.7']}\n+rand = {name = \"rand\", versions = ['0.7.3']}\n+rand_core = {name = \"rand_core\", versions = ['0.6.0']}\n+regex = {name = \"regex\", versions = ['1.3.2']}\n+syn = {name = \"syn\", versions = ['1.0.54']}\n+unicode-xid = {name = \"unicode-xid\", versions = ['0.2.1']}"}, {"sha": "749a791b280e20f423759f270d2fae53ff671044", "filename": "clippy_dev/src/lintcheck.rs", "status": "modified", "additions": 186, "deletions": 57, "changes": 243, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_dev%2Fsrc%2Flintcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_dev%2Fsrc%2Flintcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flintcheck.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -20,24 +20,31 @@ use serde_json::Value;\n // use this to store the crates when interacting with the crates.toml file\n #[derive(Debug, Serialize, Deserialize)]\n struct CrateList {\n-    crates: HashMap<String, Vec<String>>,\n+    crates: HashMap<String, TomlCrate>,\n }\n \n // crate data we stored in the toml, can have multiple versions per crate\n // A single TomlCrate is laster mapped to several CrateSources in that case\n+#[derive(Debug, Serialize, Deserialize)]\n struct TomlCrate {\n     name: String,\n-    versions: Vec<String>,\n+    versions: Option<Vec<String>>,\n+    git_url: Option<String>,\n+    git_hash: Option<String>,\n+    path: Option<String>,\n }\n \n-// represents an archive we download from crates.io\n+// represents an archive we download from crates.io, or a git repo, or a local repo\n #[derive(Debug, Serialize, Deserialize, Eq, Hash, PartialEq)]\n-struct CrateSource {\n-    name: String,\n-    version: String,\n+enum CrateSource {\n+    CratesIo { name: String, version: String },\n+    Git { name: String, url: String, commit: String },\n+    Path { name: String, path: PathBuf },\n }\n \n // represents the extracted sourcecode of a crate\n+// we actually don't need to special-case git repos here because it does not matter for clippy, yay!\n+// (clippy only needs a simple path)\n #[derive(Debug)]\n struct Crate {\n     version: String,\n@@ -55,6 +62,7 @@ struct ClippyWarning {\n     column: String,\n     linttype: String,\n     message: String,\n+    ice: bool,\n }\n \n impl std::fmt::Display for ClippyWarning {\n@@ -69,40 +77,102 @@ impl std::fmt::Display for ClippyWarning {\n \n impl CrateSource {\n     fn download_and_extract(&self) -> Crate {\n-        let extract_dir = PathBuf::from(\"target/lintcheck/crates\");\n-        let krate_download_dir = PathBuf::from(\"target/lintcheck/downloads\");\n-\n-        // url to download the crate from crates.io\n-        let url = format!(\n-            \"https://crates.io/api/v1/crates/{}/{}/download\",\n-            self.name, self.version\n-        );\n-        println!(\"Downloading and extracting {} {} from {}\", self.name, self.version, url);\n-        let _ = std::fs::create_dir(\"target/lintcheck/\");\n-        let _ = std::fs::create_dir(&krate_download_dir);\n-        let _ = std::fs::create_dir(&extract_dir);\n-\n-        let krate_file_path = krate_download_dir.join(format!(\"{}-{}.crate.tar.gz\", &self.name, &self.version));\n-        // don't download/extract if we already have done so\n-        if !krate_file_path.is_file() {\n-            // create a file path to download and write the crate data into\n-            let mut krate_dest = std::fs::File::create(&krate_file_path).unwrap();\n-            let mut krate_req = ureq::get(&url).call().unwrap().into_reader();\n-            // copy the crate into the file\n-            std::io::copy(&mut krate_req, &mut krate_dest).unwrap();\n-\n-            // unzip the tarball\n-            let ungz_tar = flate2::read::GzDecoder::new(std::fs::File::open(&krate_file_path).unwrap());\n-            // extract the tar archive\n-            let mut archive = tar::Archive::new(ungz_tar);\n-            archive.unpack(&extract_dir).expect(\"Failed to extract!\");\n-        }\n-        // crate is extracted, return a new Krate object which contains the path to the extracted\n-        // sources that clippy can check\n-        Crate {\n-            version: self.version.clone(),\n-            name: self.name.clone(),\n-            path: extract_dir.join(format!(\"{}-{}/\", self.name, self.version)),\n+        match self {\n+            CrateSource::CratesIo { name, version } => {\n+                let extract_dir = PathBuf::from(\"target/lintcheck/crates\");\n+                let krate_download_dir = PathBuf::from(\"target/lintcheck/downloads\");\n+\n+                // url to download the crate from crates.io\n+                let url = format!(\"https://crates.io/api/v1/crates/{}/{}/download\", name, version);\n+                println!(\"Downloading and extracting {} {} from {}\", name, version, url);\n+                let _ = std::fs::create_dir(\"target/lintcheck/\");\n+                let _ = std::fs::create_dir(&krate_download_dir);\n+                let _ = std::fs::create_dir(&extract_dir);\n+\n+                let krate_file_path = krate_download_dir.join(format!(\"{}-{}.crate.tar.gz\", name, version));\n+                // don't download/extract if we already have done so\n+                if !krate_file_path.is_file() {\n+                    // create a file path to download and write the crate data into\n+                    let mut krate_dest = std::fs::File::create(&krate_file_path).unwrap();\n+                    let mut krate_req = ureq::get(&url).call().unwrap().into_reader();\n+                    // copy the crate into the file\n+                    std::io::copy(&mut krate_req, &mut krate_dest).unwrap();\n+\n+                    // unzip the tarball\n+                    let ungz_tar = flate2::read::GzDecoder::new(std::fs::File::open(&krate_file_path).unwrap());\n+                    // extract the tar archive\n+                    let mut archive = tar::Archive::new(ungz_tar);\n+                    archive.unpack(&extract_dir).expect(\"Failed to extract!\");\n+                }\n+                // crate is extracted, return a new Krate object which contains the path to the extracted\n+                // sources that clippy can check\n+                Crate {\n+                    version: version.clone(),\n+                    name: name.clone(),\n+                    path: extract_dir.join(format!(\"{}-{}/\", name, version)),\n+                }\n+            },\n+            CrateSource::Git { name, url, commit } => {\n+                let repo_path = {\n+                    let mut repo_path = PathBuf::from(\"target/lintcheck/crates\");\n+                    // add a -git suffix in case we have the same crate from crates.io and a git repo\n+                    repo_path.push(format!(\"{}-git\", name));\n+                    repo_path\n+                };\n+                // clone the repo if we have not done so\n+                if !repo_path.is_dir() {\n+                    println!(\"Cloning {} and checking out {}\", url, commit);\n+                    Command::new(\"git\")\n+                        .arg(\"clone\")\n+                        .arg(url)\n+                        .arg(&repo_path)\n+                        .output()\n+                        .expect(\"Failed to clone git repo!\");\n+                }\n+                // check out the commit/branch/whatever\n+                Command::new(\"git\")\n+                    .arg(\"checkout\")\n+                    .arg(commit)\n+                    .output()\n+                    .expect(\"Failed to check out commit\");\n+\n+                Crate {\n+                    version: commit.clone(),\n+                    name: name.clone(),\n+                    path: repo_path,\n+                }\n+            },\n+            CrateSource::Path { name, path } => {\n+                use fs_extra::dir;\n+\n+                // simply copy the entire directory into our target dir\n+                let copy_dest = PathBuf::from(\"target/lintcheck/crates/\");\n+\n+                // the source path of the crate we copied,  ${copy_dest}/crate_name\n+                let crate_root = copy_dest.join(name); // .../crates/local_crate\n+\n+                if !crate_root.exists() {\n+                    println!(\"Copying {} to {}\", path.display(), copy_dest.display());\n+\n+                    dir::copy(path, &copy_dest, &dir::CopyOptions::new()).expect(&format!(\n+                        \"Failed to copy from {}, to  {}\",\n+                        path.display(),\n+                        crate_root.display()\n+                    ));\n+                } else {\n+                    println!(\n+                        \"Not copying {} to {}, destination already exists\",\n+                        path.display(),\n+                        crate_root.display()\n+                    );\n+                }\n+\n+                Crate {\n+                    version: String::from(\"local\"),\n+                    name: name.clone(),\n+                    path: crate_root,\n+                }\n+            },\n         }\n     }\n }\n@@ -114,7 +184,7 @@ impl Crate {\n \n         let shared_target_dir = clippy_project_root().join(\"target/lintcheck/shared_target_dir/\");\n \n-        let all_output = std::process::Command::new(cargo_clippy_path)\n+        let all_output = std::process::Command::new(&cargo_clippy_path)\n             .env(\"CARGO_TARGET_DIR\", shared_target_dir)\n             // lint warnings will look like this:\n             // src/cargo/ops/cargo_compile.rs:127:35: warning: usage of `FromIterator::from_iter`\n@@ -128,14 +198,20 @@ impl Crate {\n             ])\n             .current_dir(&self.path)\n             .output()\n-            .unwrap();\n+            .unwrap_or_else(|error| {\n+                panic!(\n+                    \"Encountered error:\\n{:?}\\ncargo_clippy_path: {}\\ncrate path:{}\\n\",\n+                    error,\n+                    &cargo_clippy_path.display(),\n+                    &self.path.display()\n+                );\n+            });\n         let stdout = String::from_utf8_lossy(&all_output.stdout);\n         let output_lines = stdout.lines();\n-        //dbg!(&output_lines);\n         let warnings: Vec<ClippyWarning> = output_lines\n             .into_iter()\n-            // get all clippy warnings\n-            .filter(|line| line.contains(\"clippy::\"))\n+            // get all clippy warnings and ICEs\n+            .filter(|line| line.contains(\"clippy::\") || line.contains(\"internal compiler error: \"))\n             .map(|json_msg| parse_json_message(json_msg, &self))\n             .collect();\n         warnings\n@@ -150,8 +226,10 @@ fn build_clippy() {\n }\n \n // get a list of CrateSources we want to check from a \"lintcheck_crates.toml\" file.\n-fn read_crates() -> Vec<CrateSource> {\n-    let toml_path = PathBuf::from(\"clippy_dev/lintcheck_crates.toml\");\n+fn read_crates(toml_path: Option<&str>) -> (String, Vec<CrateSource>) {\n+    let toml_path = PathBuf::from(toml_path.unwrap_or(\"clippy_dev/lintcheck_crates.toml\"));\n+    // save it so that we can use the name of the sources.toml as name for the logfile later.\n+    let toml_filename = toml_path.file_stem().unwrap().to_str().unwrap().to_string();\n     let toml_content: String =\n         std::fs::read_to_string(&toml_path).unwrap_or_else(|_| panic!(\"Failed to read {}\", toml_path.display()));\n     let crate_list: CrateList =\n@@ -160,21 +238,52 @@ fn read_crates() -> Vec<CrateSource> {\n     let tomlcrates: Vec<TomlCrate> = crate_list\n         .crates\n         .into_iter()\n-        .map(|(name, versions)| TomlCrate { name, versions })\n+        .map(|(_cratename, tomlcrate)| tomlcrate)\n         .collect();\n \n     // flatten TomlCrates into CrateSources (one TomlCrates may represent several versions of a crate =>\n     // multiple Cratesources)\n     let mut crate_sources = Vec::new();\n     tomlcrates.into_iter().for_each(|tk| {\n-        tk.versions.iter().for_each(|ver| {\n-            crate_sources.push(CrateSource {\n+        if let Some(ref path) = tk.path {\n+            crate_sources.push(CrateSource::Path {\n+                name: tk.name.clone(),\n+                path: PathBuf::from(path),\n+            });\n+        }\n+\n+        // if we have multiple versions, save each one\n+        if let Some(ref versions) = tk.versions {\n+            versions.iter().for_each(|ver| {\n+                crate_sources.push(CrateSource::CratesIo {\n+                    name: tk.name.clone(),\n+                    version: ver.to_string(),\n+                });\n+            })\n+        }\n+        // otherwise, we should have a git source\n+        if tk.git_url.is_some() && tk.git_hash.is_some() {\n+            crate_sources.push(CrateSource::Git {\n                 name: tk.name.clone(),\n-                version: ver.to_string(),\n+                url: tk.git_url.clone().unwrap(),\n+                commit: tk.git_hash.clone().unwrap(),\n             });\n-        })\n+        }\n+        // if we have a version as well as a git data OR only one git data, something is funky\n+        if tk.versions.is_some() && (tk.git_url.is_some() || tk.git_hash.is_some())\n+            || tk.git_hash.is_some() != tk.git_url.is_some()\n+        {\n+            eprintln!(\"tomlkrate: {:?}\", tk);\n+            if tk.git_hash.is_some() != tk.git_url.is_some() {\n+                panic!(\"Error: Encountered TomlCrate with only one of git_hash and git_url!\");\n+            }\n+            if tk.path.is_some() && (tk.git_hash.is_some() || tk.versions.is_some()) {\n+                panic!(\"Error: TomlCrate can only have one of 'git_.*', 'version' or 'path' fields\");\n+            }\n+            unreachable!(\"Failed to translate TomlCrate into CrateSource!\");\n+        }\n     });\n-    crate_sources\n+    (toml_filename, crate_sources)\n }\n \n // extract interesting data from a json lint message\n@@ -198,6 +307,7 @@ fn parse_json_message(json_message: &str, krate: &Crate) -> ClippyWarning {\n             .into(),\n         linttype: jmsg[\"message\"][\"code\"][\"code\"].to_string().trim_matches('\"').into(),\n         message: jmsg[\"message\"][\"message\"].to_string().trim_matches('\"').into(),\n+        ice: json_message.contains(\"internal compiler error: \"),\n     }\n }\n \n@@ -225,11 +335,18 @@ pub fn run(clap_config: &ArgMatches) {\n     // download and extract the crates, then run clippy on them and collect clippys warnings\n     // flatten into one big list of warnings\n \n-    let crates = read_crates();\n+    let (filename, crates) = read_crates(clap_config.value_of(\"crates-toml\"));\n \n     let clippy_warnings: Vec<ClippyWarning> = if let Some(only_one_crate) = clap_config.value_of(\"only\") {\n-        // if we don't have the specified crated in the .toml, throw an error\n-        if !crates.iter().any(|krate| krate.name == only_one_crate) {\n+        // if we don't have the specified crate in the .toml, throw an error\n+        if !crates.iter().any(|krate| {\n+            let name = match krate {\n+                CrateSource::CratesIo { name, .. } => name,\n+                CrateSource::Git { name, .. } => name,\n+                CrateSource::Path { name, .. } => name,\n+            };\n+            name == only_one_crate\n+        }) {\n             eprintln!(\n                 \"ERROR: could not find crate '{}' in clippy_dev/lintcheck_crates.toml\",\n                 only_one_crate\n@@ -257,6 +374,13 @@ pub fn run(clap_config: &ArgMatches) {\n \n     // generate some stats:\n \n+    // grab crashes/ICEs, save the crate name and the ice message\n+    let ices: Vec<(&String, &String)> = clippy_warnings\n+        .iter()\n+        .filter(|warning| warning.ice)\n+        .map(|w| (&w.crate_name, &w.message))\n+        .collect();\n+\n     // count lint type occurrences\n     let mut counter: HashMap<&String, usize> = HashMap::new();\n     clippy_warnings\n@@ -282,5 +406,10 @@ pub fn run(clap_config: &ArgMatches) {\n     // save the text into lintcheck-logs/logs.txt\n     let mut text = clippy_ver; // clippy version number on top\n     text.push_str(&format!(\"\\n{}\", all_msgs.join(\"\")));\n-    write(\"lintcheck-logs/logs.txt\", text).unwrap();\n+    text.push_str(\"ICEs:\\n\");\n+    ices.iter()\n+        .for_each(|(cratename, msg)| text.push_str(&format!(\"{}: '{}'\", cratename, msg)));\n+\n+    let file = format!(\"lintcheck-logs/{}_logs.txt\", filename);\n+    write(file, text).unwrap();\n }"}, {"sha": "5dbd46935a59a88732bcfae41ed9d76914f6a389", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -62,6 +62,13 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                 .value_name(\"CRATE\")\n                 .long(\"only\")\n                 .help(\"only process a single crate of the list\"),\n+        )\n+        .arg(\n+            Arg::with_name(\"crates-toml\")\n+                .takes_value(true)\n+                .value_name(\"CRATES-SOURCES-TOML-PATH\")\n+                .long(\"crates-toml\")\n+                .help(\"set the path for a crates.toml where lintcheck should read the sources from\"),\n         );\n \n     let app = App::new(\"Clippy developer tooling\")"}, {"sha": "d0e2193ddc5e5c917a58694f9d6a10526294a25c", "filename": "clippy_dev/src/ra_setup.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_dev%2Fsrc%2Fra_setup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_dev%2Fsrc%2Fra_setup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fra_setup.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -13,7 +13,9 @@ use std::path::{Path, PathBuf};\n /// Panics if `rustc_path` does not lead to a rustc repo or the files could not be read\n pub fn run(rustc_path: Option<&str>) {\n     // we can unwrap here because the arg is required by clap\n-    let rustc_path = PathBuf::from(rustc_path.unwrap());\n+    let rustc_path = PathBuf::from(rustc_path.unwrap())\n+        .canonicalize()\n+        .expect(\"failed to get the absolute repo path\");\n     assert!(rustc_path.is_dir(), \"path is not a directory\");\n     let rustc_source_basedir = rustc_path.join(\"compiler\");\n     assert!("}, {"sha": "d13c27a1957d60170f48f866120e17d070376fd1", "filename": "clippy_dev/src/serve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_dev%2Fsrc%2Fserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_dev%2Fsrc%2Fserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fserve.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -34,7 +34,7 @@ pub fn run(port: u16, lint: Option<&str>) -> ! {\n                 // Give some time for python to start\n                 thread::sleep(Duration::from_millis(500));\n                 // Launch browser after first export.py has completed and http.server is up\n-                let _ = opener::open(url);\n+                let _result = opener::open(url);\n             });\n         }\n         thread::sleep(Duration::from_millis(1000));"}, {"sha": "cc2869ab495c8ab9245d66d9503ffdbc0f44a94e", "filename": "clippy_lints/src/cargo_common_metadata.rs", "status": "modified", "additions": 46, "deletions": 29, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -5,7 +5,7 @@ use std::path::PathBuf;\n use crate::utils::{run_lints, span_lint};\n use rustc_hir::{hir_id::CRATE_HIR_ID, Crate};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::DUMMY_SP;\n \n declare_clippy_lint! {\n@@ -51,6 +51,21 @@ declare_clippy_lint! {\n     \"common metadata is defined in `Cargo.toml`\"\n }\n \n+#[derive(Copy, Clone, Debug)]\n+pub struct CargoCommonMetadata {\n+    ignore_publish: bool,\n+}\n+\n+impl CargoCommonMetadata {\n+    pub fn new(ignore_publish: bool) -> Self {\n+        Self { ignore_publish }\n+    }\n+}\n+\n+impl_lint_pass!(CargoCommonMetadata => [\n+    CARGO_COMMON_METADATA\n+]);\n+\n fn missing_warning(cx: &LateContext<'_>, package: &cargo_metadata::Package, field: &str) {\n     let message = format!(\"package `{}` is missing `{}` metadata\", package.name, field);\n     span_lint(cx, CARGO_COMMON_METADATA, DUMMY_SP, &message);\n@@ -69,8 +84,6 @@ fn is_empty_vec(value: &[String]) -> bool {\n     value.iter().all(String::is_empty)\n }\n \n-declare_lint_pass!(CargoCommonMetadata => [CARGO_COMMON_METADATA]);\n-\n impl LateLintPass<'_> for CargoCommonMetadata {\n     fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n         if !run_lints(cx, &[CARGO_COMMON_METADATA], CRATE_HIR_ID) {\n@@ -80,32 +93,36 @@ impl LateLintPass<'_> for CargoCommonMetadata {\n         let metadata = unwrap_cargo_metadata!(cx, CARGO_COMMON_METADATA, false);\n \n         for package in metadata.packages {\n-            if is_empty_vec(&package.authors) {\n-                missing_warning(cx, &package, \"package.authors\");\n-            }\n-\n-            if is_empty_str(&package.description) {\n-                missing_warning(cx, &package, \"package.description\");\n-            }\n-\n-            if is_empty_str(&package.license) && is_empty_path(&package.license_file) {\n-                missing_warning(cx, &package, \"either package.license or package.license_file\");\n-            }\n-\n-            if is_empty_str(&package.repository) {\n-                missing_warning(cx, &package, \"package.repository\");\n-            }\n-\n-            if is_empty_path(&package.readme) {\n-                missing_warning(cx, &package, \"package.readme\");\n-            }\n-\n-            if is_empty_vec(&package.keywords) {\n-                missing_warning(cx, &package, \"package.keywords\");\n-            }\n-\n-            if is_empty_vec(&package.categories) {\n-                missing_warning(cx, &package, \"package.categories\");\n+            // only run the lint if publish is `None` (`publish = true` or skipped entirely)\n+            // or if the vector isn't empty (`publish = [\"something\"]`)\n+            if package.publish.as_ref().filter(|publish| publish.is_empty()).is_none() || self.ignore_publish {\n+                if is_empty_vec(&package.authors) {\n+                    missing_warning(cx, &package, \"package.authors\");\n+                }\n+\n+                if is_empty_str(&package.description) {\n+                    missing_warning(cx, &package, \"package.description\");\n+                }\n+\n+                if is_empty_str(&package.license) && is_empty_path(&package.license_file) {\n+                    missing_warning(cx, &package, \"either package.license or package.license_file\");\n+                }\n+\n+                if is_empty_str(&package.repository) {\n+                    missing_warning(cx, &package, \"package.repository\");\n+                }\n+\n+                if is_empty_path(&package.readme) {\n+                    missing_warning(cx, &package, \"package.readme\");\n+                }\n+\n+                if is_empty_vec(&package.keywords) {\n+                    missing_warning(cx, &package, \"package.keywords\");\n+                }\n+\n+                if is_empty_vec(&package.categories) {\n+                    missing_warning(cx, &package, \"package.categories\");\n+                }\n             }\n         }\n     }"}, {"sha": "67282cb7900579bd399986ab5f1aef029ac1b4c8", "filename": "clippy_lints/src/collapsible_match.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_match.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,10 +1,10 @@\n use crate::utils::visitors::LocalUsedVisitor;\n-use crate::utils::{span_lint_and_then, SpanlessEq};\n+use crate::utils::{path_to_local, span_lint_and_then, SpanlessEq};\n use if_chain::if_chain;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::{Arm, Expr, ExprKind, Guard, HirId, Pat, PatKind, QPath, StmtKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{DefIdTree, TyCtxt};\n+use rustc_middle::ty::{DefIdTree, TyCtxt, TypeckResults};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{MultiSpan, Span};\n \n@@ -60,7 +60,7 @@ impl<'tcx> LateLintPass<'tcx> for CollapsibleMatch {\n     }\n }\n \n-fn check_arm(arm: &Arm<'_>, wild_outer_arm: &Arm<'_>, cx: &LateContext<'_>) {\n+fn check_arm<'tcx>(arm: &Arm<'tcx>, wild_outer_arm: &Arm<'tcx>, cx: &LateContext<'tcx>) {\n     if_chain! {\n         let expr = strip_singleton_blocks(arm.body);\n         if let ExprKind::Match(expr_in, arms_inner, _) = expr.kind;\n@@ -72,7 +72,7 @@ fn check_arm(arm: &Arm<'_>, wild_outer_arm: &Arm<'_>, cx: &LateContext<'_>) {\n         if arms_inner.iter().all(|arm| arm.guard.is_none());\n         // match expression must be a local binding\n         // match <local> { .. }\n-        if let Some(binding_id) = addr_adjusted_binding(expr_in, cx);\n+        if let Some(binding_id) = path_to_local(strip_ref_operators(expr_in, cx.typeck_results()));\n         // one of the branches must be \"wild-like\"\n         if let Some(wild_inner_arm_idx) = arms_inner.iter().rposition(|arm_inner| arm_is_wild_like(arm_inner, cx.tcx));\n         let (wild_inner_arm, non_wild_inner_arm) =\n@@ -84,14 +84,13 @@ fn check_arm(arm: &Arm<'_>, wild_outer_arm: &Arm<'_>, cx: &LateContext<'_>) {\n         // the \"wild-like\" branches must be equal\n         if SpanlessEq::new(cx).eq_expr(wild_inner_arm.body, wild_outer_arm.body);\n         // the binding must not be used in the if guard\n+        let mut used_visitor = LocalUsedVisitor::new(cx, binding_id);\n         if match arm.guard {\n             None => true,\n-            Some(Guard::If(expr) | Guard::IfLet(_, expr)) => {\n-                !LocalUsedVisitor::new(binding_id).check_expr(expr)\n-            }\n+            Some(Guard::If(expr) | Guard::IfLet(_, expr)) => !used_visitor.check_expr(expr),\n         };\n         // ...or anywhere in the inner match\n-        if !arms_inner.iter().any(|arm| LocalUsedVisitor::new(binding_id).check_arm(arm));\n+        if !arms_inner.iter().any(|arm| used_visitor.check_arm(arm));\n         then {\n             span_lint_and_then(\n                 cx,\n@@ -175,19 +174,15 @@ fn is_none_ctor(res: Res, tcx: TyCtxt<'_>) -> bool {\n     false\n }\n \n-/// Retrieves a binding ID with optional `&` and/or `*` operators removed. (e.g. `&**foo`)\n-/// Returns `None` if a non-reference type is de-referenced.\n-/// For example, if `Vec` is de-referenced to a slice, `None` is returned.\n-fn addr_adjusted_binding(mut expr: &Expr<'_>, cx: &LateContext<'_>) -> Option<HirId> {\n+/// Removes `AddrOf` operators (`&`) or deref operators (`*`), but only if a reference type is\n+/// dereferenced. An overloaded deref such as `Vec` to slice would not be removed.\n+fn strip_ref_operators<'hir>(mut expr: &'hir Expr<'hir>, typeck_results: &TypeckResults<'_>) -> &'hir Expr<'hir> {\n     loop {\n         match expr.kind {\n             ExprKind::AddrOf(_, _, e) => expr = e,\n-            ExprKind::Path(QPath::Resolved(None, path)) => match path.res {\n-                Res::Local(binding_id) => break Some(binding_id),\n-                _ => break None,\n-            },\n-            ExprKind::Unary(UnOp::Deref, e) if cx.typeck_results().expr_ty(e).is_ref() => expr = e,\n-            _ => break None,\n+            ExprKind::Unary(UnOp::Deref, e) if typeck_results.expr_ty(e).is_ref() => expr = e,\n+            _ => break,\n         }\n     }\n+    expr\n }"}, {"sha": "56dc6d18a58f2dc2974ec43f716a596a6520c37a", "filename": "clippy_lints/src/disallowed_method.rs", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fdisallowed_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fdisallowed_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_method.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,29 +1,47 @@\n-use crate::utils::span_lint;\n+use crate::utils::{fn_def_id, span_lint};\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir::{Expr, ExprKind};\n+use rustc_hir::Expr;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Symbol;\n \n declare_clippy_lint! {\n-    /// **What it does:** Lints for specific trait methods defined in clippy.toml\n+    /// **What it does:** Denies the configured methods and functions in clippy.toml\n     ///\n     /// **Why is this bad?** Some methods are undesirable in certain contexts,\n-    /// and it would be beneficial to lint for them as needed.\n+    /// and it's beneficial to lint for them as needed.\n     ///\n-    /// **Known problems:** None.\n+    /// **Known problems:** Currently, you must write each function as a\n+    /// fully-qualified path. This lint doesn't support aliases or reexported\n+    /// names; be aware that many types in `std` are actually reexports.\n+    ///\n+    /// For example, if you want to disallow `Duration::as_secs`, your clippy.toml\n+    /// configuration would look like\n+    /// `disallowed-methods = [\"core::time::Duration::as_secs\"]` and not\n+    /// `disallowed-methods = [\"std::time::Duration::as_secs\"]` as you might expect.\n     ///\n     /// **Example:**\n     ///\n+    /// An example clippy.toml configuration:\n+    /// ```toml\n+    /// # clippy.toml\n+    /// disallowed-methods = [\"alloc::vec::Vec::leak\", \"std::time::Instant::now\"]\n+    /// ```\n+    ///\n     /// ```rust,ignore\n-    /// // example code where clippy issues a warning\n-    /// foo.bad_method(); // Foo::bad_method is disallowed in the configuration\n+    /// // Example code where clippy issues a warning\n+    /// let xs = vec![1, 2, 3, 4];\n+    /// xs.leak(); // Vec::leak is disallowed in the config.\n+    ///\n+    /// let _now = Instant::now(); // Instant::now is disallowed in the config.\n     /// ```\n+    ///\n     /// Use instead:\n     /// ```rust,ignore\n-    /// // example code which does not raise clippy warning\n-    /// goodStruct.bad_method(); // GoodStruct::bad_method is not disallowed\n+    /// // Example code which does not raise clippy warning\n+    /// let mut xs = Vec::new(); // Vec::new is _not_ disallowed in the config.\n+    /// xs.push(123); // Vec::push is _not_ disallowed in the config.\n     /// ```\n     pub DISALLOWED_METHOD,\n     nursery,\n@@ -50,22 +68,20 @@ impl_lint_pass!(DisallowedMethod => [DISALLOWED_METHOD]);\n \n impl<'tcx> LateLintPass<'tcx> for DisallowedMethod {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if let ExprKind::MethodCall(_path, _, _args, _) = &expr.kind {\n-            let def_id = cx.typeck_results().type_dependent_def_id(expr.hir_id).unwrap();\n-\n-            let method_call = cx.get_def_path(def_id);\n-            if self.disallowed.contains(&method_call) {\n-                let method = method_call\n-                    .iter()\n-                    .map(|s| s.to_ident_string())\n+        if let Some(def_id) = fn_def_id(cx, expr) {\n+            let func_path = cx.get_def_path(def_id);\n+            if self.disallowed.contains(&func_path) {\n+                let func_path_string = func_path\n+                    .into_iter()\n+                    .map(Symbol::to_ident_string)\n                     .collect::<Vec<_>>()\n                     .join(\"::\");\n \n                 span_lint(\n                     cx,\n                     DISALLOWED_METHOD,\n                     expr.span,\n-                    &format!(\"use of a disallowed method `{}`\", method),\n+                    &format!(\"use of a disallowed method `{}`\", func_path_string),\n                 );\n             }\n         }"}, {"sha": "1348f7530f41e0a68799819eb7430894126afbb1", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -563,9 +563,7 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                             | ItemKind::ExternCrate(..)\n                             | ItemKind::ForeignMod(..) => return false,\n                             // We found a main function ...\n-                            ItemKind::Fn(box FnKind(_, sig, _, Some(block)))\n-                                if item.ident.name == sym::main =>\n-                            {\n+                            ItemKind::Fn(box FnKind(_, sig, _, Some(block))) if item.ident.name == sym::main => {\n                                 let is_async = matches!(sig.header.asyncness, Async::Yes { .. });\n                                 let returns_nothing = match &sig.decl.output {\n                                     FnRetTy::Default(..) => true,"}, {"sha": "83cee11c3a85921d8615326974d4254f2901dfd5", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 23, "deletions": 37, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,7 +1,6 @@\n-use crate::utils::{get_parent_expr, span_lint, span_lint_and_note};\n-use if_chain::if_chain;\n+use crate::utils::{get_parent_expr, path_to_local, path_to_local_id, span_lint, span_lint_and_note};\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use rustc_hir::{def, BinOpKind, Block, Expr, ExprKind, Guard, HirId, Local, Node, QPath, Stmt, StmtKind};\n+use rustc_hir::{BinOpKind, Block, Expr, ExprKind, Guard, HirId, Local, Node, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n@@ -72,20 +71,14 @@ impl<'tcx> LateLintPass<'tcx> for EvalOrderDependence {\n         // Find a write to a local variable.\n         match expr.kind {\n             ExprKind::Assign(ref lhs, ..) | ExprKind::AssignOp(_, ref lhs, _) => {\n-                if let ExprKind::Path(ref qpath) = lhs.kind {\n-                    if let QPath::Resolved(_, ref path) = *qpath {\n-                        if path.segments.len() == 1 {\n-                            if let def::Res::Local(var) = cx.qpath_res(qpath, lhs.hir_id) {\n-                                let mut visitor = ReadVisitor {\n-                                    cx,\n-                                    var,\n-                                    write_expr: expr,\n-                                    last_expr: expr,\n-                                };\n-                                check_for_unsequenced_reads(&mut visitor);\n-                            }\n-                        }\n-                    }\n+                if let Some(var) = path_to_local(lhs) {\n+                    let mut visitor = ReadVisitor {\n+                        cx,\n+                        var,\n+                        write_expr: expr,\n+                        last_expr: expr,\n+                    };\n+                    check_for_unsequenced_reads(&mut visitor);\n                 }\n             },\n             _ => {},\n@@ -304,27 +297,20 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n             return;\n         }\n \n-        match expr.kind {\n-            ExprKind::Path(ref qpath) => {\n-                if_chain! {\n-                    if let QPath::Resolved(None, ref path) = *qpath;\n-                    if path.segments.len() == 1;\n-                    if let def::Res::Local(local_id) = self.cx.qpath_res(qpath, expr.hir_id);\n-                    if local_id == self.var;\n-                    // Check that this is a read, not a write.\n-                    if !is_in_assignment_position(self.cx, expr);\n-                    then {\n-                        span_lint_and_note(\n-                            self.cx,\n-                            EVAL_ORDER_DEPENDENCE,\n-                            expr.span,\n-                            \"unsequenced read of a variable\",\n-                            Some(self.write_expr.span),\n-                            \"whether read occurs before this write depends on evaluation order\"\n-                        );\n-                    }\n-                }\n+        if path_to_local_id(expr, self.var) {\n+            // Check that this is a read, not a write.\n+            if !is_in_assignment_position(self.cx, expr) {\n+                span_lint_and_note(\n+                    self.cx,\n+                    EVAL_ORDER_DEPENDENCE,\n+                    expr.span,\n+                    \"unsequenced read of a variable\",\n+                    Some(self.write_expr.span),\n+                    \"whether read occurs before this write depends on evaluation order\",\n+                );\n             }\n+        }\n+        match expr.kind {\n             // We're about to descend a closure. Since we don't know when (or\n             // if) the closure will be evaluated, any reads in it might not\n             // occur here (or ever). Like above, bail to avoid false positives."}, {"sha": "6a85b57af0779044cc2e6fcf009541caa8c7bc32", "filename": "clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,7 +1,5 @@\n use crate::utils::{attr_by_name, in_macro, match_path_ast, span_lint_and_help};\n-use rustc_ast::ast::{\n-    AssocItemKind, Extern, FnKind, FnSig, ImplKind, Item, ItemKind, TraitKind, Ty, TyKind,\n-};\n+use rustc_ast::ast::{AssocItemKind, Extern, FnKind, FnSig, ImplKind, Item, ItemKind, TraitKind, Ty, TyKind};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;"}, {"sha": "94200a1542084ae4fa29fb83f035e266d84d24de", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,15 +1,15 @@\n use crate::utils::{\n     attr_by_name, attrs::is_proc_macro, is_must_use_ty, is_trait_impl_item, is_type_diagnostic_item, iter_input_pats,\n-    last_path_segment, match_def_path, must_use_attr, return_ty, snippet, snippet_opt, span_lint, span_lint_and_help,\n-    span_lint_and_then, trait_ref_of_method, type_is_unsafe_function,\n+    last_path_segment, match_def_path, must_use_attr, path_to_local, return_ty, snippet, snippet_opt, span_lint,\n+    span_lint_and_help, span_lint_and_then, trait_ref_of_method, type_is_unsafe_function,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::intravisit;\n-use rustc_hir::{def::Res, def_id::DefId};\n+use rustc_hir::{def::Res, def_id::DefId, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n@@ -658,16 +658,14 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> DerefVisitor<'a, 'tcx> {\n     fn check_arg(&self, ptr: &hir::Expr<'_>) {\n-        if let hir::ExprKind::Path(ref qpath) = ptr.kind {\n-            if let Res::Local(id) = self.cx.qpath_res(qpath, ptr.hir_id) {\n-                if self.ptrs.contains(&id) {\n-                    span_lint(\n-                        self.cx,\n-                        NOT_UNSAFE_PTR_ARG_DEREF,\n-                        ptr.span,\n-                        \"this public function dereferences a raw pointer but is not marked `unsafe`\",\n-                    );\n-                }\n+        if let Some(id) = path_to_local(ptr) {\n+            if self.ptrs.contains(&id) {\n+                span_lint(\n+                    self.cx,\n+                    NOT_UNSAFE_PTR_ARG_DEREF,\n+                    ptr.span,\n+                    \"this public function dereferences a raw pointer but is not marked `unsafe`\",\n+                );\n             }\n         }\n     }\n@@ -698,7 +696,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n                             arg.span,\n                             &mut tys,\n                         )\n-                        && is_mutated_static(self.cx, arg)\n+                        && is_mutated_static(arg)\n                     {\n                         self.mutates_static = true;\n                         return;\n@@ -707,7 +705,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n                 }\n             },\n             Assign(ref target, ..) | AssignOp(_, ref target, _) | AddrOf(_, hir::Mutability::Mut, ref target) => {\n-                self.mutates_static |= is_mutated_static(self.cx, target)\n+                self.mutates_static |= is_mutated_static(target)\n             },\n             _ => {},\n         }\n@@ -718,12 +716,13 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n     }\n }\n \n-fn is_mutated_static(cx: &LateContext<'_>, e: &hir::Expr<'_>) -> bool {\n+fn is_mutated_static(e: &hir::Expr<'_>) -> bool {\n     use hir::ExprKind::{Field, Index, Path};\n \n     match e.kind {\n-        Path(ref qpath) => !matches!(cx.qpath_res(qpath, e.hir_id), Res::Local(_)),\n-        Field(ref inner, _) | Index(ref inner, _) => is_mutated_static(cx, inner),\n+        Path(QPath::Resolved(_, path)) => !matches!(path.res, Res::Local(_)),\n+        Path(_) => true,\n+        Field(ref inner, _) | Index(ref inner, _) => is_mutated_static(inner),\n         _ => false,\n     }\n }"}, {"sha": "5863eef8a26f804db9a5a5d212cfaf061ac6bfba", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,8 +1,7 @@\n-use crate::utils::{snippet, span_lint_and_then, visitors::LocalUsedVisitor};\n+use crate::utils::{path_to_local_id, snippet, span_lint_and_then, visitors::LocalUsedVisitor};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::def::Res;\n use rustc_hir::BindingAnnotation;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -64,10 +63,11 @@ impl<'tcx> LateLintPass<'tcx> for LetIfSeq {\n                 if let hir::PatKind::Binding(mode, canonical_id, ident, None) = local.pat.kind;\n                 if let hir::StmtKind::Expr(ref if_) = expr.kind;\n                 if let hir::ExprKind::If(ref cond, ref then, ref else_) = if_.kind;\n-                if !LocalUsedVisitor::new(canonical_id).check_expr(cond);\n+                let mut used_visitor = LocalUsedVisitor::new(cx, canonical_id);\n+                if !used_visitor.check_expr(cond);\n                 if let hir::ExprKind::Block(ref then, _) = then.kind;\n                 if let Some(value) = check_assign(cx, canonical_id, &*then);\n-                if !LocalUsedVisitor::new(canonical_id).check_expr(value);\n+                if !used_visitor.check_expr(value);\n                 then {\n                     let span = stmt.span.to(if_.span);\n \n@@ -144,11 +144,9 @@ fn check_assign<'tcx>(\n         if let Some(expr) = block.stmts.iter().last();\n         if let hir::StmtKind::Semi(ref expr) = expr.kind;\n         if let hir::ExprKind::Assign(ref var, ref value, _) = expr.kind;\n-        if let hir::ExprKind::Path(ref qpath) = var.kind;\n-        if let Res::Local(local_id) = cx.qpath_res(qpath, var.hir_id);\n-        if decl == local_id;\n+        if path_to_local_id(var, decl);\n         then {\n-            let mut v = LocalUsedVisitor::new(decl);\n+            let mut v = LocalUsedVisitor::new(cx, decl);\n \n             if block.stmts.iter().take(block.stmts.len()-1).any(|stmt| v.check_stmt(stmt)) {\n                 return None;"}, {"sha": "7e96dfcc7da0fef32a8e6f681b620b42649ad2c6", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -5,7 +5,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{implements_trait, is_must_use_func_call, is_must_use_ty, match_type, paths, span_lint_and_help};\n+use crate::utils::{is_must_use_func_call, is_must_use_ty, match_type, paths, span_lint_and_help};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `let _ = <expr>`\n@@ -125,15 +125,6 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n \n                     GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n                 });\n-                let implements_drop = cx.tcx.lang_items().drop_trait().map_or(false, |drop_trait|\n-                    init_ty.walk().any(|inner| match inner.unpack() {\n-                        GenericArgKind::Type(inner_ty) => {\n-                            implements_trait(cx, inner_ty, drop_trait, &[])\n-                        },\n-\n-                        GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n-                    })\n-                );\n                 if contains_sync_guard {\n                     span_lint_and_help(\n                         cx,\n@@ -144,7 +135,7 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                         \"consider using an underscore-prefixed named \\\n                             binding or dropping explicitly with `std::mem::drop`\"\n                     )\n-                } else if implements_drop {\n+                } else if init_ty.needs_drop(cx.tcx, cx.param_env) {\n                     span_lint_and_help(\n                         cx,\n                         LET_UNDERSCORE_DROP,"}, {"sha": "d96911fac1a075cc023cbd1408138efbeb85dda1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -310,6 +310,7 @@ mod regex;\n mod repeat_once;\n mod returns;\n mod self_assignment;\n+mod semicolon_if_nothing_returned;\n mod serde_api;\n mod shadow;\n mod single_component_path_imports;\n@@ -687,6 +688,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &loops::FOR_KV_MAP,\n         &loops::FOR_LOOPS_OVER_FALLIBLES,\n         &loops::ITER_NEXT_LOOP,\n+        &loops::MANUAL_FLATTEN,\n         &loops::MANUAL_MEMCPY,\n         &loops::MUT_RANGE_BOUND,\n         &loops::NEEDLESS_COLLECT,\n@@ -732,6 +734,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &mem_replace::MEM_REPLACE_WITH_DEFAULT,\n         &mem_replace::MEM_REPLACE_WITH_UNINIT,\n         &methods::BIND_INSTEAD_OF_MAP,\n+        &methods::BYTES_NTH,\n         &methods::CHARS_LAST_CMP,\n         &methods::CHARS_NEXT_CMP,\n         &methods::CLONE_DOUBLE_REF,\n@@ -741,6 +744,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::EXPECT_USED,\n         &methods::FILETYPE_IS_FILE,\n         &methods::FILTER_MAP,\n+        &methods::FILTER_MAP_IDENTITY,\n         &methods::FILTER_MAP_NEXT,\n         &methods::FILTER_NEXT,\n         &methods::FLAT_MAP_IDENTITY,\n@@ -875,6 +879,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &returns::LET_AND_RETURN,\n         &returns::NEEDLESS_RETURN,\n         &self_assignment::SELF_ASSIGNMENT,\n+        &semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED,\n         &serde_api::SERDE_API_MISUSE,\n         &shadow::SHADOW_REUSE,\n         &shadow::SHADOW_SAME,\n@@ -1179,7 +1184,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box redundant_else::RedundantElse);\n     store.register_late_pass(|| box create_dir::CreateDir);\n     store.register_early_pass(|| box needless_arbitrary_self_type::NeedlessArbitrarySelfType);\n-    store.register_late_pass(|| box cargo_common_metadata::CargoCommonMetadata);\n+    let cargo_ignore_publish = conf.cargo_ignore_publish;\n+    store.register_late_pass(move || box cargo_common_metadata::CargoCommonMetadata::new(cargo_ignore_publish));\n     store.register_late_pass(|| box multiple_crate_versions::MultipleCrateVersions);\n     store.register_late_pass(|| box wildcard_dependencies::WildcardDependencies);\n     let literal_representation_lint_fraction_readability = conf.unreadable_literal_lint_fractions;\n@@ -1236,6 +1242,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box manual_unwrap_or::ManualUnwrapOr);\n     store.register_late_pass(|| box manual_ok_or::ManualOkOr);\n     store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n+    store.register_late_pass(|| box semicolon_if_nothing_returned::SemicolonIfNothingReturned);\n     store.register_late_pass(|| box async_yields_async::AsyncYieldsAsync);\n     let disallowed_methods = conf.disallowed_methods.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_late_pass(move || box disallowed_method::DisallowedMethod::new(&disallowed_methods));\n@@ -1290,6 +1297,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&panic_unimplemented::UNIMPLEMENTED),\n         LintId::of(&panic_unimplemented::UNREACHABLE),\n         LintId::of(&pattern_type_mismatch::PATTERN_TYPE_MISMATCH),\n+        LintId::of(&semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED),\n         LintId::of(&shadow::SHADOW_REUSE),\n         LintId::of(&shadow::SHADOW_SAME),\n         LintId::of(&strings::STRING_ADD),\n@@ -1491,6 +1499,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::FOR_KV_MAP),\n         LintId::of(&loops::FOR_LOOPS_OVER_FALLIBLES),\n         LintId::of(&loops::ITER_NEXT_LOOP),\n+        LintId::of(&loops::MANUAL_FLATTEN),\n         LintId::of(&loops::MANUAL_MEMCPY),\n         LintId::of(&loops::MUT_RANGE_BOUND),\n         LintId::of(&loops::NEEDLESS_COLLECT),\n@@ -1524,11 +1533,13 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&mem_replace::MEM_REPLACE_WITH_DEFAULT),\n         LintId::of(&mem_replace::MEM_REPLACE_WITH_UNINIT),\n         LintId::of(&methods::BIND_INSTEAD_OF_MAP),\n+        LintId::of(&methods::BYTES_NTH),\n         LintId::of(&methods::CHARS_LAST_CMP),\n         LintId::of(&methods::CHARS_NEXT_CMP),\n         LintId::of(&methods::CLONE_DOUBLE_REF),\n         LintId::of(&methods::CLONE_ON_COPY),\n         LintId::of(&methods::EXPECT_FUN_CALL),\n+        LintId::of(&methods::FILTER_MAP_IDENTITY),\n         LintId::of(&methods::FILTER_NEXT),\n         LintId::of(&methods::FLAT_MAP_IDENTITY),\n         LintId::of(&methods::FROM_ITER_INSTEAD_OF_COLLECT),\n@@ -1620,7 +1631,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&reference::DEREF_ADDROF),\n         LintId::of(&reference::REF_IN_DEREF),\n         LintId::of(&regex::INVALID_REGEX),\n-        LintId::of(&regex::TRIVIAL_REGEX),\n         LintId::of(&repeat_once::REPEAT_ONCE),\n         LintId::of(&returns::LET_AND_RETURN),\n         LintId::of(&returns::NEEDLESS_RETURN),\n@@ -1741,6 +1751,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&matches::SINGLE_MATCH),\n         LintId::of(&mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n         LintId::of(&mem_replace::MEM_REPLACE_WITH_DEFAULT),\n+        LintId::of(&methods::BYTES_NTH),\n         LintId::of(&methods::CHARS_LAST_CMP),\n         LintId::of(&methods::CHARS_NEXT_CMP),\n         LintId::of(&methods::FROM_ITER_INSTEAD_OF_COLLECT),\n@@ -1783,7 +1794,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&ranges::MANUAL_RANGE_CONTAINS),\n         LintId::of(&redundant_field_names::REDUNDANT_FIELD_NAMES),\n         LintId::of(&redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n-        LintId::of(&regex::TRIVIAL_REGEX),\n         LintId::of(&returns::LET_AND_RETURN),\n         LintId::of(&returns::NEEDLESS_RETURN),\n         LintId::of(&single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n@@ -1822,6 +1832,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&lifetimes::EXTRA_UNUSED_LIFETIMES),\n         LintId::of(&lifetimes::NEEDLESS_LIFETIMES),\n         LintId::of(&loops::EXPLICIT_COUNTER_LOOP),\n+        LintId::of(&loops::MANUAL_FLATTEN),\n         LintId::of(&loops::MUT_RANGE_BOUND),\n         LintId::of(&loops::SINGLE_ELEMENT_LOOP),\n         LintId::of(&loops::WHILE_LET_LOOP),\n@@ -1835,6 +1846,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&matches::WILDCARD_IN_OR_PATTERNS),\n         LintId::of(&methods::BIND_INSTEAD_OF_MAP),\n         LintId::of(&methods::CLONE_ON_COPY),\n+        LintId::of(&methods::FILTER_MAP_IDENTITY),\n         LintId::of(&methods::FILTER_NEXT),\n         LintId::of(&methods::FLAT_MAP_IDENTITY),\n         LintId::of(&methods::INSPECT_FOR_EACH),\n@@ -2011,6 +2023,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&needless_borrow::NEEDLESS_BORROW),\n         LintId::of(&path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE),\n         LintId::of(&redundant_pub_crate::REDUNDANT_PUB_CRATE),\n+        LintId::of(&regex::TRIVIAL_REGEX),\n         LintId::of(&strings::STRING_LIT_AS_BYTES),\n         LintId::of(&transmute::USELESS_TRANSMUTE),\n         LintId::of(&use_self::USE_SELF),"}, {"sha": "eb185377e209471f5bf9c34c28bb9f9001e23c28", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 169, "deletions": 116, "changes": 285, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,14 +1,13 @@\n use crate::consts::constant;\n-use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n-use crate::utils::usage::{is_unused, mutated_variables};\n+use crate::utils::usage::mutated_variables;\n use crate::utils::visitors::LocalUsedVisitor;\n use crate::utils::{\n     contains_name, get_enclosing_block, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n-    indent_of, is_in_panic_handler, is_integer_const, is_no_std_crate, is_refutable, is_type_diagnostic_item,\n-    last_path_segment, match_trait_method, match_type, match_var, multispan_sugg, single_segment_path, snippet,\n-    snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg,\n-    span_lint_and_then, sugg, SpanlessEq,\n+    indent_of, is_in_panic_handler, is_integer_const, is_no_std_crate, is_ok_ctor, is_refutable, is_some_ctor,\n+    is_type_diagnostic_item, last_path_segment, match_trait_method, match_type, multispan_sugg, path_to_local,\n+    path_to_local_id, paths, single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite,\n+    span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg, SpanlessEq,\n };\n use if_chain::if_chain;\n use rustc_ast::ast;\n@@ -494,8 +493,40 @@ declare_clippy_lint! {\n     \"there is no reason to have a single element loop\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Check for unnecessary `if let` usage in a for loop\n+    /// where only the `Some` or `Ok` variant of the iterator element is used.\n+    ///\n+    /// **Why is this bad?** It is verbose and can be simplified\n+    /// by first calling the `flatten` method on the `Iterator`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// let x = vec![Some(1), Some(2), Some(3)];\n+    /// for n in x {\n+    ///     if let Some(n) = n {\n+    ///         println!(\"{}\", n);\n+    ///     }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let x = vec![Some(1), Some(2), Some(3)];\n+    /// for n in x.into_iter().flatten() {\n+    ///     println!(\"{}\", n);\n+    /// }\n+    /// ```\n+    pub MANUAL_FLATTEN,\n+    complexity,\n+    \"for loops over `Option`s or `Result`s with a single expression can be simplified\"\n+}\n+\n declare_lint_pass!(Loops => [\n     MANUAL_MEMCPY,\n+    MANUAL_FLATTEN,\n     NEEDLESS_RANGE_LOOP,\n     EXPLICIT_ITER_LOOP,\n     EXPLICIT_INTO_ITER_LOOP,\n@@ -517,14 +548,14 @@ declare_lint_pass!(Loops => [\n impl<'tcx> LateLintPass<'tcx> for Loops {\n     #[allow(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if let Some((pat, arg, body)) = higher::for_loop(expr) {\n+        if let Some((pat, arg, body, span)) = higher::for_loop(expr) {\n             // we don't want to check expanded macros\n             // this check is not at the top of the function\n             // since higher::for_loop expressions are marked as expansions\n             if body.span.from_expansion() {\n                 return;\n             }\n-            check_for_loop(cx, pat, arg, body, expr);\n+            check_for_loop(cx, pat, arg, body, expr, span);\n         }\n \n         // we don't want to check expanded macros\n@@ -707,7 +738,7 @@ fn combine_branches(b1: NeverLoopResult, b2: NeverLoopResult) -> NeverLoopResult\n fn never_loop_block(block: &Block<'_>, main_loop_id: HirId) -> NeverLoopResult {\n     let stmts = block.stmts.iter().map(stmt_to_expr);\n     let expr = once(block.expr.as_deref());\n-    let mut iter = stmts.chain(expr).filter_map(|e| e);\n+    let mut iter = stmts.chain(expr).flatten();\n     never_loop_expr_seq(&mut iter, main_loop_id)\n }\n \n@@ -819,6 +850,7 @@ fn check_for_loop<'tcx>(\n     arg: &'tcx Expr<'_>,\n     body: &'tcx Expr<'_>,\n     expr: &'tcx Expr<'_>,\n+    span: Span,\n ) {\n     let is_manual_memcpy_triggered = detect_manual_memcpy(cx, pat, arg, body, expr);\n     if !is_manual_memcpy_triggered {\n@@ -830,6 +862,7 @@ fn check_for_loop<'tcx>(\n     check_for_mut_range_bound(cx, arg, body);\n     check_for_single_element_loop(cx, pat, arg, body, expr);\n     detect_same_item_push(cx, pat, arg, body, expr);\n+    check_manual_flatten(cx, pat, arg, body, span);\n }\n \n // this function assumes the given expression is a `for` loop.\n@@ -843,21 +876,6 @@ fn get_span_of_entire_for_loop(expr: &Expr<'_>) -> Span {\n     }\n }\n \n-fn same_var<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, var: HirId) -> bool {\n-    if_chain! {\n-        if let ExprKind::Path(qpath) = &expr.kind;\n-        if let QPath::Resolved(None, path) = qpath;\n-        if path.segments.len() == 1;\n-        if let Res::Local(local_id) = cx.qpath_res(qpath, expr.hir_id);\n-        then {\n-            // our variable!\n-            local_id == var\n-        } else {\n-            false\n-        }\n-    }\n-}\n-\n /// a wrapper of `Sugg`. Besides what `Sugg` do, this removes unnecessary `0`;\n /// and also, it avoids subtracting a variable from the same one by replacing it with `0`.\n /// it exists for the convenience of the overloaded operators while normal functions can do the\n@@ -1010,14 +1028,9 @@ fn get_details_from_idx<'tcx>(\n     idx: &Expr<'_>,\n     starts: &[Start<'tcx>],\n ) -> Option<(StartKind<'tcx>, Offset)> {\n-    fn get_start<'tcx>(cx: &LateContext<'tcx>, e: &Expr<'_>, starts: &[Start<'tcx>]) -> Option<StartKind<'tcx>> {\n-        starts.iter().find_map(|start| {\n-            if same_var(cx, e, start.id) {\n-                Some(start.kind)\n-            } else {\n-                None\n-            }\n-        })\n+    fn get_start<'tcx>(e: &Expr<'_>, starts: &[Start<'tcx>]) -> Option<StartKind<'tcx>> {\n+        let id = path_to_local(e)?;\n+        starts.iter().find(|start| start.id == id).map(|start| start.kind)\n     }\n \n     fn get_offset<'tcx>(cx: &LateContext<'tcx>, e: &Expr<'_>, starts: &[Start<'tcx>]) -> Option<Sugg<'static>> {\n@@ -1026,26 +1039,26 @@ fn get_details_from_idx<'tcx>(\n                 ast::LitKind::Int(x, _ty) => Some(Sugg::NonParen(x.to_string().into())),\n                 _ => None,\n             },\n-            ExprKind::Path(..) if get_start(cx, e, starts).is_none() => Some(Sugg::hir(cx, e, \"???\")),\n+            ExprKind::Path(..) if get_start(e, starts).is_none() => Some(Sugg::hir(cx, e, \"???\")),\n             _ => None,\n         }\n     }\n \n     match idx.kind {\n         ExprKind::Binary(op, lhs, rhs) => match op.node {\n             BinOpKind::Add => {\n-                let offset_opt = get_start(cx, lhs, starts)\n+                let offset_opt = get_start(lhs, starts)\n                     .and_then(|s| get_offset(cx, rhs, starts).map(|o| (s, o)))\n-                    .or_else(|| get_start(cx, rhs, starts).and_then(|s| get_offset(cx, lhs, starts).map(|o| (s, o))));\n+                    .or_else(|| get_start(rhs, starts).and_then(|s| get_offset(cx, lhs, starts).map(|o| (s, o))));\n \n                 offset_opt.map(|(s, o)| (s, Offset::positive(o)))\n             },\n             BinOpKind::Sub => {\n-                get_start(cx, lhs, starts).and_then(|s| get_offset(cx, rhs, starts).map(|o| (s, Offset::negative(o))))\n+                get_start(lhs, starts).and_then(|s| get_offset(cx, rhs, starts).map(|o| (s, Offset::negative(o))))\n             },\n             _ => None,\n         },\n-        ExprKind::Path(..) => get_start(cx, idx, starts).map(|s| (s, Offset::empty())),\n+        ExprKind::Path(..) => get_start(idx, starts).map(|s| (s, Offset::empty())),\n         _ => None,\n     }\n }\n@@ -1062,11 +1075,10 @@ fn get_assignment<'tcx>(e: &'tcx Expr<'tcx>) -> Option<(&'tcx Expr<'tcx>, &'tcx\n /// The returned iterator yields `None` if no assignment expressions are there,\n /// filtering out the increments of the given whitelisted loop counters;\n /// because its job is to make sure there's nothing other than assignments and the increments.\n-fn get_assignments<'a: 'c, 'tcx: 'c, 'c>(\n-    cx: &'a LateContext<'tcx>,\n+fn get_assignments<'a, 'tcx>(\n     Block { stmts, expr, .. }: &'tcx Block<'tcx>,\n-    loop_counters: &'c [Start<'tcx>],\n-) -> impl Iterator<Item = Option<(&'tcx Expr<'tcx>, &'tcx Expr<'tcx>)>> + 'c {\n+    loop_counters: &'a [Start<'tcx>],\n+) -> impl Iterator<Item = Option<(&'tcx Expr<'tcx>, &'tcx Expr<'tcx>)>> + 'a {\n     // As the `filter` and `map` below do different things, I think putting together\n     // just increases complexity. (cc #3188 and #4193)\n     stmts\n@@ -1078,12 +1090,14 @@ fn get_assignments<'a: 'c, 'tcx: 'c, 'c>(\n         .chain((*expr).into_iter())\n         .filter(move |e| {\n             if let ExprKind::AssignOp(_, place, _) = e.kind {\n-                !loop_counters\n-                    .iter()\n-                    // skip the first item which should be `StartKind::Range`\n-                    // this makes it possible to use the slice with `StartKind::Range` in the same iterator loop.\n-                    .skip(1)\n-                    .any(|counter| same_var(cx, place, counter.id))\n+                path_to_local(place).map_or(false, |id| {\n+                    !loop_counters\n+                        .iter()\n+                        // skip the first item which should be `StartKind::Range`\n+                        // this makes it possible to use the slice with `StartKind::Range` in the same iterator loop.\n+                        .skip(1)\n+                        .any(|counter| counter.id == id)\n+                })\n             } else {\n                 true\n             }\n@@ -1140,7 +1154,7 @@ fn build_manual_memcpy_suggestion<'tcx>(\n             if method.ident.name == sym!(len);\n             if len_args.len() == 1;\n             if let Some(arg) = len_args.get(0);\n-            if var_def_id(cx, arg) == var_def_id(cx, base);\n+            if path_to_local(arg) == path_to_local(base);\n             then {\n                 if sugg.as_str() == end_str {\n                     sugg::EMPTY.into()\n@@ -1245,7 +1259,7 @@ fn detect_manual_memcpy<'tcx>(\n                 if let Some(loop_counters) = get_loop_counters(cx, block, expr) {\n                     starts.extend(loop_counters);\n                 }\n-                iter_a = Some(get_assignments(cx, block, &starts));\n+                iter_a = Some(get_assignments(block, &starts));\n             } else {\n                 iter_b = Some(get_assignment(body));\n             }\n@@ -1267,7 +1281,7 @@ fn detect_manual_memcpy<'tcx>(\n                             if let Some((start_right, offset_right)) = get_details_from_idx(cx, &idx_right, &starts);\n \n                             // Source and destination must be different\n-                            if var_def_id(cx, base_left) != var_def_id(cx, base_right);\n+                            if path_to_local(base_left) != path_to_local(base_right);\n                             then {\n                                 Some((IndexExpr { base: base_left, idx: start_left, idx_offset: offset_left },\n                                     IndexExpr { base: base_right, idx: start_right, idx_offset: offset_right }))\n@@ -1879,8 +1893,8 @@ fn check_for_loop_over_map_kv<'tcx>(\n             let arg_span = arg.span;\n             let (new_pat_span, kind, ty, mutbl) = match *cx.typeck_results().expr_ty(arg).kind() {\n                 ty::Ref(_, ty, mutbl) => match (&pat[0].kind, &pat[1].kind) {\n-                    (key, _) if pat_is_wild(key, body) => (pat[1].span, \"value\", ty, mutbl),\n-                    (_, value) if pat_is_wild(value, body) => (pat[0].span, \"key\", ty, Mutability::Not),\n+                    (key, _) if pat_is_wild(cx, key, body) => (pat[1].span, \"value\", ty, mutbl),\n+                    (_, value) if pat_is_wild(cx, value, body) => (pat[0].span, \"key\", ty, Mutability::Not),\n                     _ => return,\n                 },\n                 _ => return,\n@@ -1953,6 +1967,77 @@ fn check_for_single_element_loop<'tcx>(\n     }\n }\n \n+/// Check for unnecessary `if let` usage in a for loop where only the `Some` or `Ok` variant of the\n+/// iterator element is used.\n+fn check_manual_flatten<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    pat: &'tcx Pat<'_>,\n+    arg: &'tcx Expr<'_>,\n+    body: &'tcx Expr<'_>,\n+    span: Span,\n+) {\n+    if let ExprKind::Block(ref block, _) = body.kind {\n+        // Ensure the `if let` statement is the only expression or statement in the for-loop\n+        let inner_expr = if block.stmts.len() == 1 && block.expr.is_none() {\n+            let match_stmt = &block.stmts[0];\n+            if let StmtKind::Semi(inner_expr) = match_stmt.kind {\n+                Some(inner_expr)\n+            } else {\n+                None\n+            }\n+        } else if block.stmts.is_empty() {\n+            block.expr\n+        } else {\n+            None\n+        };\n+\n+        if_chain! {\n+            if let Some(inner_expr) = inner_expr;\n+            if let ExprKind::Match(\n+                ref match_expr, ref match_arms, MatchSource::IfLetDesugar{ contains_else_clause: false }\n+            ) = inner_expr.kind;\n+            // Ensure match_expr in `if let` statement is the same as the pat from the for-loop\n+            if let PatKind::Binding(_, pat_hir_id, _, _) = pat.kind;\n+            if path_to_local_id(match_expr, pat_hir_id);\n+            // Ensure the `if let` statement is for the `Some` variant of `Option` or the `Ok` variant of `Result`\n+            if let PatKind::TupleStruct(QPath::Resolved(None, path), _, _) = match_arms[0].pat.kind;\n+            let some_ctor = is_some_ctor(cx, path.res);\n+            let ok_ctor = is_ok_ctor(cx, path.res);\n+            if some_ctor || ok_ctor;\n+            let if_let_type = if some_ctor { \"Some\" } else { \"Ok\" };\n+\n+            then {\n+                // Prepare the error message\n+                let msg = format!(\"unnecessary `if let` since only the `{}` variant of the iterator element is used\", if_let_type);\n+\n+                // Prepare the help message\n+                let mut applicability = Applicability::MaybeIncorrect;\n+                let arg_snippet = make_iterator_snippet(cx, arg, &mut applicability);\n+\n+                span_lint_and_then(\n+                    cx,\n+                    MANUAL_FLATTEN,\n+                    span,\n+                    &msg,\n+                    |diag| {\n+                        let sugg = format!(\"{}.flatten()\", arg_snippet);\n+                        diag.span_suggestion(\n+                            arg.span,\n+                            \"try\",\n+                            sugg,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                        diag.span_help(\n+                            inner_expr.span,\n+                            \"...and remove the `if let` statement in the for loop\",\n+                        );\n+                    }\n+                );\n+            }\n+        }\n+    }\n+}\n+\n struct MutatePairDelegate<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n     hir_id_low: Option<HirId>,\n@@ -2024,20 +2109,11 @@ fn mut_warn_with_span(cx: &LateContext<'_>, span: Option<Span>) {\n \n fn check_for_mutability(cx: &LateContext<'_>, bound: &Expr<'_>) -> Option<HirId> {\n     if_chain! {\n-        if let ExprKind::Path(ref qpath) = bound.kind;\n-        if let QPath::Resolved(None, _) = *qpath;\n+        if let Some(hir_id) = path_to_local(bound);\n+        if let Node::Binding(pat) = cx.tcx.hir().get(hir_id);\n+        if let PatKind::Binding(BindingAnnotation::Mutable, ..) = pat.kind;\n         then {\n-            let res = cx.qpath_res(qpath, bound.hir_id);\n-            if let Res::Local(hir_id) = res {\n-                let node_str = cx.tcx.hir().get(hir_id);\n-                if_chain! {\n-                    if let Node::Binding(pat) = node_str;\n-                    if let PatKind::Binding(BindingAnnotation::Mutable, ..) = pat.kind;\n-                    then {\n-                        return Some(hir_id);\n-                    }\n-                }\n-            }\n+            return Some(hir_id);\n         }\n     }\n     None\n@@ -2069,10 +2145,12 @@ fn check_for_mutation<'tcx>(\n }\n \n /// Returns `true` if the pattern is a `PatWild` or an ident prefixed with `_`.\n-fn pat_is_wild<'tcx>(pat: &'tcx PatKind<'_>, body: &'tcx Expr<'_>) -> bool {\n+fn pat_is_wild<'tcx>(cx: &LateContext<'tcx>, pat: &'tcx PatKind<'_>, body: &'tcx Expr<'_>) -> bool {\n     match *pat {\n         PatKind::Wild => true,\n-        PatKind::Binding(.., ident, None) if ident.as_str().starts_with('_') => is_unused(&ident, body),\n+        PatKind::Binding(_, id, ident, None) if ident.as_str().starts_with('_') => {\n+            !LocalUsedVisitor::new(cx, id).check_expr(body)\n+        },\n         _ => false,\n     }\n }\n@@ -2108,9 +2186,9 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n             if let QPath::Resolved(None, ref seqvar) = *seqpath;\n             if seqvar.segments.len() == 1;\n             then {\n-                let index_used_directly = same_var(self.cx, idx, self.var);\n+                let index_used_directly = path_to_local_id(idx, self.var);\n                 let indexed_indirectly = {\n-                    let mut used_visitor = LocalUsedVisitor::new(self.var);\n+                    let mut used_visitor = LocalUsedVisitor::new(self.cx, self.var);\n                     walk_expr(&mut used_visitor, idx);\n                     used_visitor.used\n                 };\n@@ -2179,17 +2257,14 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n \n         if_chain! {\n             // directly using a variable\n-            if let ExprKind::Path(ref qpath) = expr.kind;\n-            if let QPath::Resolved(None, ref path) = *qpath;\n-            if path.segments.len() == 1;\n+            if let ExprKind::Path(QPath::Resolved(None, path)) = expr.kind;\n+            if let Res::Local(local_id) = path.res;\n             then {\n-                if let Res::Local(local_id) = self.cx.qpath_res(qpath, expr.hir_id) {\n-                    if local_id == self.var {\n-                        self.nonindex = true;\n-                    } else {\n-                        // not the correct variable, but still a variable\n-                        self.referenced.insert(path.segments[0].ident.name);\n-                    }\n+                if local_id == self.var {\n+                    self.nonindex = true;\n+                } else {\n+                    // not the correct variable, but still a variable\n+                    self.referenced.insert(path.segments[0].ident.name);\n                 }\n             }\n         }\n@@ -2247,7 +2322,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n }\n \n fn is_used_inside<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, container: &'tcx Expr<'_>) -> bool {\n-    let def_id = match var_def_id(cx, expr) {\n+    let def_id = match path_to_local(expr) {\n         Some(id) => id,\n         None => return false,\n     };\n@@ -2260,12 +2335,11 @@ fn is_used_inside<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, container:\n }\n \n fn is_iterator_used_after_while_let<'tcx>(cx: &LateContext<'tcx>, iter_expr: &'tcx Expr<'_>) -> bool {\n-    let def_id = match var_def_id(cx, iter_expr) {\n+    let def_id = match path_to_local(iter_expr) {\n         Some(id) => id,\n         None => return false,\n     };\n     let mut visitor = VarUsedAfterLoopVisitor {\n-        cx,\n         def_id,\n         iter_expr_id: iter_expr.hir_id,\n         past_while_let: false,\n@@ -2277,20 +2351,19 @@ fn is_iterator_used_after_while_let<'tcx>(cx: &LateContext<'tcx>, iter_expr: &'t\n     visitor.var_used_after_while_let\n }\n \n-struct VarUsedAfterLoopVisitor<'a, 'tcx> {\n-    cx: &'a LateContext<'tcx>,\n+struct VarUsedAfterLoopVisitor {\n     def_id: HirId,\n     iter_expr_id: HirId,\n     past_while_let: bool,\n     var_used_after_while_let: bool,\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for VarUsedAfterLoopVisitor<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for VarUsedAfterLoopVisitor {\n     type Map = Map<'tcx>;\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if self.past_while_let {\n-            if Some(self.def_id) == var_def_id(self.cx, expr) {\n+            if path_to_local_id(expr, self.def_id) {\n                 self.var_used_after_while_let = true;\n             }\n         } else if self.iter_expr_id == expr.hir_id {\n@@ -2412,7 +2485,7 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n         }\n \n         // If node is a variable\n-        if let Some(def_id) = var_def_id(self.cx, expr) {\n+        if let Some(def_id) = path_to_local(expr) {\n             if let Some(parent) = get_parent_expr(self.cx, expr) {\n                 let state = self.states.entry(def_id).or_insert(IncrementVisitorVarState::Initial);\n                 if *state == IncrementVisitorVarState::IncrOnce {\n@@ -2539,7 +2612,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n         }\n \n         // If node is the desired variable, see how it's used\n-        if var_def_id(self.cx, expr) == Some(self.var_id) {\n+        if path_to_local_id(expr, self.var_id) {\n             if self.past_loop {\n                 self.state = InitializeVisitorState::DontWarn;\n                 return;\n@@ -2586,16 +2659,6 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n     }\n }\n \n-fn var_def_id(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<HirId> {\n-    if let ExprKind::Path(ref qpath) = expr.kind {\n-        let path_res = cx.qpath_res(qpath, expr.hir_id);\n-        if let Res::Local(hir_id) = path_res {\n-            return Some(hir_id);\n-        }\n-    }\n-    None\n-}\n-\n fn is_loop(expr: &Expr<'_>) -> bool {\n     matches!(expr.kind, ExprKind::Loop(..))\n }\n@@ -2618,8 +2681,8 @@ fn is_nested(cx: &LateContext<'_>, match_expr: &Expr<'_>, iter_expr: &Expr<'_>)\n \n fn is_loop_nested(cx: &LateContext<'_>, loop_expr: &Expr<'_>, iter_expr: &Expr<'_>) -> bool {\n     let mut id = loop_expr.hir_id;\n-    let iter_name = if let Some(name) = path_name(iter_expr) {\n-        name\n+    let iter_id = if let Some(id) = path_to_local(iter_expr) {\n+        id\n     } else {\n         return true;\n     };\n@@ -2637,7 +2700,7 @@ fn is_loop_nested(cx: &LateContext<'_>, loop_expr: &Expr<'_>, iter_expr: &Expr<'\n             Some(Node::Block(block)) => {\n                 let mut block_visitor = LoopNestVisitor {\n                     hir_id: id,\n-                    iterator: iter_name,\n+                    iterator: iter_id,\n                     nesting: Unknown,\n                 };\n                 walk_block(&mut block_visitor, block);\n@@ -2665,7 +2728,7 @@ use self::Nesting::{LookFurther, RuledOut, Unknown};\n \n struct LoopNestVisitor {\n     hir_id: HirId,\n-    iterator: Symbol,\n+    iterator: HirId,\n     nesting: Nesting,\n }\n \n@@ -2690,7 +2753,7 @@ impl<'tcx> Visitor<'tcx> for LoopNestVisitor {\n         }\n         match expr.kind {\n             ExprKind::Assign(ref path, _, _) | ExprKind::AssignOp(_, ref path, _) => {\n-                if match_var(path, self.iterator) {\n+                if path_to_local_id(path, self.iterator) {\n                     self.nesting = RuledOut;\n                 }\n             },\n@@ -2702,8 +2765,8 @@ impl<'tcx> Visitor<'tcx> for LoopNestVisitor {\n         if self.nesting != Unknown {\n             return;\n         }\n-        if let PatKind::Binding(.., span_name, _) = pat.kind {\n-            if self.iterator == span_name.name {\n+        if let PatKind::Binding(_, id, ..) = pat.kind {\n+            if id == self.iterator {\n                 self.nesting = RuledOut;\n                 return;\n             }\n@@ -2716,16 +2779,6 @@ impl<'tcx> Visitor<'tcx> for LoopNestVisitor {\n     }\n }\n \n-fn path_name(e: &Expr<'_>) -> Option<Symbol> {\n-    if let ExprKind::Path(QPath::Resolved(_, ref path)) = e.kind {\n-        let segments = &path.segments;\n-        if segments.len() == 1 {\n-            return Some(segments[0].ident.name);\n-        }\n-    };\n-    None\n-}\n-\n fn check_infinite_loop<'tcx>(cx: &LateContext<'tcx>, cond: &'tcx Expr<'_>, expr: &'tcx Expr<'_>) {\n     if constant(cx, cx.typeck_results(), cond).is_some() {\n         // A pure constant condition (e.g., `while false`) is not linted.\n@@ -3087,7 +3140,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UsedCountVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if same_var(self.cx, expr, self.id) {\n+        if path_to_local_id(expr, self.id) {\n             self.count += 1;\n         } else {\n             walk_expr(self, expr);"}, {"sha": "40f04bd677d52e89287e2b4bb4e56d7d0c575c16", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -160,7 +160,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n             let found_idx = self.mac_refs.iter().position(|mac| import.ends_with(&mac.name));\n \n             if let Some(idx) = found_idx {\n-                let _ = self.mac_refs.remove(idx);\n+                self.mac_refs.remove(idx);\n                 let seg = import.split(\"::\").collect::<Vec<_>>();\n \n                 match seg.as_slice() {"}, {"sha": "efb05b8ffdf4f4a7a49cd752b197bda51e281159", "filename": "clippy_lints/src/manual_ok_or.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,9 +1,10 @@\n use crate::utils::{\n-    indent_of, is_type_diagnostic_item, match_qpath, paths, reindent_multiline, snippet_opt, span_lint_and_sugg,\n+    indent_of, is_type_diagnostic_item, match_qpath, path_to_local_id, paths, reindent_multiline, snippet_opt,\n+    span_lint_and_sugg,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{def, Expr, ExprKind, PatKind, QPath};\n+use rustc_hir::{Expr, ExprKind, PatKind};\n use rustc_lint::LintContext;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n@@ -90,8 +91,6 @@ fn is_ok_wrapping(cx: &LateContext<'_>, map_expr: &Expr<'_>) -> bool {\n         if let PatKind::Binding(_, param_id, ..) = body.params[0].pat.kind;\n         if let ExprKind::Call(Expr { kind: ExprKind::Path(ok_path), .. }, &[ref ok_arg]) = body.value.kind;\n         if match_qpath(ok_path, &paths::RESULT_OK);\n-        if let ExprKind::Path(QPath::Resolved(_, ok_arg_path)) = ok_arg.kind;\n-        if let def::Res::Local(ok_arg_path_id) = ok_arg_path.res;\n-        then { param_id == ok_arg_path_id } else { false }\n+        then { path_to_local_id(ok_arg, param_id) } else { false }\n     }\n }"}, {"sha": "b452225b5db6cc53864220b08d24beba9cea14a4", "filename": "clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,9 +1,9 @@\n use crate::consts::constant_simple;\n use crate::utils;\n-use crate::utils::sugg;\n+use crate::utils::{path_to_local_id, sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{def, Arm, Expr, ExprKind, Pat, PatKind, QPath};\n+use rustc_hir::{Arm, Expr, ExprKind, Pat, PatKind};\n use rustc_lint::LintContext;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n@@ -83,9 +83,7 @@ fn lint_manual_unwrap_or<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n             if utils::match_qpath(unwrap_qpath, &utils::paths::OPTION_SOME)\n                 || utils::match_qpath(unwrap_qpath, &utils::paths::RESULT_OK);\n             if let PatKind::Binding(_, binding_hir_id, ..) = unwrap_pat.kind;\n-            if let ExprKind::Path(QPath::Resolved(_, body_path)) = unwrap_arm.body.kind;\n-            if let def::Res::Local(body_path_hir_id) = body_path.res;\n-            if body_path_hir_id == binding_hir_id;\n+            if path_to_local_id(unwrap_arm.body, binding_hir_id);\n             if !utils::usage::contains_return_break_continue_macro(or_arm.body);\n             then {\n                 Some(or_arm)"}, {"sha": "e33001b16bcde20b2a172738dcf71d98628d1f1f", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,11 +1,12 @@\n use crate::consts::{constant, miri_to_const, Constant};\n use crate::utils::sugg::Sugg;\n-use crate::utils::usage::is_unused;\n+use crate::utils::visitors::LocalUsedVisitor;\n use crate::utils::{\n-    expr_block, get_arg_name, get_parent_expr, implements_trait, in_macro, indent_of, is_allowed, is_expn_of,\n-    is_refutable, is_type_diagnostic_item, is_wild, match_qpath, match_type, match_var, meets_msrv, multispan_sugg,\n+    expr_block, get_parent_expr, implements_trait, in_macro, indent_of, is_allowed, is_expn_of, is_refutable,\n+    is_type_diagnostic_item, is_wild, match_qpath, match_type, meets_msrv, multispan_sugg, path_to_local_id,\n     peel_hir_pat_refs, peel_mid_ty_refs, peel_n_hir_expr_refs, remove_blocks, snippet, snippet_block, snippet_opt,\n     snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then,\n+    strip_pat_refs,\n };\n use crate::utils::{paths, search_same, SpanlessEq, SpanlessHash};\n use if_chain::if_chain;\n@@ -616,9 +617,9 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n             if let PatKind::TupleStruct(\n                 QPath::Resolved(None, ref variant_name), ref args, _) = arms[0].pat.kind;\n             if args.len() == 1;\n-            if let Some(arg) = get_arg_name(&args[0]);\n+            if let PatKind::Binding(_, arg, ..) = strip_pat_refs(&args[0]).kind;\n             let body = remove_blocks(&arms[0].body);\n-            if match_var(body, arg);\n+            if path_to_local_id(body, arg);\n \n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n@@ -910,7 +911,7 @@ fn check_overlapping_arms<'tcx>(cx: &LateContext<'tcx>, ex: &'tcx Expr<'_>, arms\n     }\n }\n \n-fn check_wild_err_arm(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n+fn check_wild_err_arm<'tcx>(cx: &LateContext<'tcx>, ex: &Expr<'tcx>, arms: &[Arm<'tcx>]) {\n     let ex_ty = cx.typeck_results().expr_ty(ex).peel_refs();\n     if is_type_diagnostic_item(cx, ex_ty, sym::result_type) {\n         for arm in arms {\n@@ -922,8 +923,10 @@ fn check_wild_err_arm(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n                     if !matching_wild {\n                         // Looking for unused bindings (i.e.: `_e`)\n                         inner.iter().for_each(|pat| {\n-                            if let PatKind::Binding(.., ident, None) = &pat.kind {\n-                                if ident.as_str().starts_with('_') && is_unused(ident, arm.body) {\n+                            if let PatKind::Binding(_, id, ident, None) = pat.kind {\n+                                if ident.as_str().starts_with('_')\n+                                    && !LocalUsedVisitor::new(cx, id).check_expr(arm.body)\n+                                {\n                                     ident_bind_name = (&ident.name.as_str()).to_string();\n                                     matching_wild = true;\n                                 }"}, {"sha": "defc50ede2243d235abaa68ef15eeca951ab7979", "filename": "clippy_lints/src/methods/bytes_nth.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,39 @@\n+use crate::utils::{is_type_diagnostic_item, snippet_with_applicability, span_lint_and_sugg};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_span::sym;\n+\n+use super::BYTES_NTH;\n+\n+pub(super) fn lints<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, iter_args: &'tcx [Expr<'tcx>]) {\n+    if_chain! {\n+        if let ExprKind::MethodCall(_, _, ref args, _) = expr.kind;\n+        let ty = cx.typeck_results().expr_ty(&iter_args[0]).peel_refs();\n+        let caller_type = if is_type_diagnostic_item(cx, ty, sym::string_type) {\n+            Some(\"String\")\n+        } else if ty.is_str() {\n+            Some(\"str\")\n+        } else {\n+            None\n+        };\n+        if let Some(caller_type) = caller_type;\n+        then {\n+            let mut applicability = Applicability::MachineApplicable;\n+            span_lint_and_sugg(\n+                cx,\n+                BYTES_NTH,\n+                expr.span,\n+                &format!(\"called `.byte().nth()` on a `{}`\", caller_type),\n+                \"try\",\n+                format!(\n+                    \"{}.as_bytes().get({})\",\n+                    snippet_with_applicability(cx, iter_args[0].span, \"..\", &mut applicability),\n+                    snippet_with_applicability(cx, args[1].span, \"..\", &mut applicability)\n+                ),\n+                applicability,\n+            );\n+        }\n+    }\n+}"}, {"sha": "9e646360a40c333a74c0f1c2d95b7ed0b984ad27", "filename": "clippy_lints/src/methods/filter_map_identity.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_identity.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,52 @@\n+use crate::utils::{match_qpath, match_trait_method, path_to_local_id, paths, span_lint_and_sugg};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_span::source_map::Span;\n+\n+use super::FILTER_MAP_IDENTITY;\n+\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    expr: &hir::Expr<'_>,\n+    filter_map_args: &[hir::Expr<'_>],\n+    filter_map_span: Span,\n+) {\n+    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+        let arg_node = &filter_map_args[1].kind;\n+\n+        let apply_lint = |message: &str| {\n+            span_lint_and_sugg(\n+                cx,\n+                FILTER_MAP_IDENTITY,\n+                filter_map_span.with_hi(expr.span.hi()),\n+                message,\n+                \"try\",\n+                \"flatten()\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+        };\n+\n+        if_chain! {\n+            if let hir::ExprKind::Closure(_, _, body_id, _, _) = arg_node;\n+            let body = cx.tcx.hir().body(*body_id);\n+\n+            if let hir::PatKind::Binding(_, binding_id, ..) = body.params[0].pat.kind;\n+            if path_to_local_id(&body.value, binding_id);\n+            then {\n+                apply_lint(\"called `filter_map(|x| x)` on an `Iterator`\");\n+            }\n+        }\n+\n+        if_chain! {\n+            if let hir::ExprKind::Path(ref qpath) = arg_node;\n+\n+            if match_qpath(qpath, &paths::STD_CONVERT_IDENTITY);\n+\n+            then {\n+                apply_lint(\"called `filter_map(std::convert::identity)` on an `Iterator`\");\n+            }\n+        }\n+    }\n+}"}, {"sha": "433f513b1a8bf27d21b405e60cb726d6b7085a3e", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 113, "deletions": 28, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,4 +1,6 @@\n mod bind_instead_of_map;\n+mod bytes_nth;\n+mod filter_map_identity;\n mod inefficient_to_string;\n mod inspect_for_each;\n mod manual_saturating_arithmetic;\n@@ -15,8 +17,7 @@ use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::def::Res;\n-use rustc_hir::{Expr, ExprKind, PatKind, QPath, TraitItem, TraitItemKind, UnOp};\n+use rustc_hir::{Expr, ExprKind, PatKind, TraitItem, TraitItemKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass, Lint, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n@@ -30,12 +31,12 @@ use crate::consts::{constant, Constant};\n use crate::utils::eager_or_lazy::is_lazyness_candidate;\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n-    contains_return, contains_ty, get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, higher,\n-    implements_trait, in_macro, is_copy, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment,\n-    match_def_path, match_qpath, match_trait_method, match_type, match_var, meets_msrv, method_calls,\n-    method_chain_args, paths, remove_blocks, return_ty, single_segment_path, snippet, snippet_with_applicability,\n-    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg,\n-    walk_ptrs_ty_depth, SpanlessEq,\n+    contains_return, contains_ty, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n+    in_macro, is_copy, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment, match_def_path,\n+    match_qpath, match_trait_method, match_type, meets_msrv, method_calls, method_chain_args, path_to_local_id, paths,\n+    remove_blocks, return_ty, single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite,\n+    span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, strip_pat_refs, sugg, walk_ptrs_ty_depth,\n+    SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -1467,6 +1468,51 @@ declare_clippy_lint! {\n     \"using `.inspect().for_each()`, which can be replaced with `.for_each()`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `filter_map(|x| x)`.\n+    ///\n+    /// **Why is this bad?** Readability, this can be written more concisely by using `flatten`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// # let iter = vec![Some(1)].into_iter();\n+    /// iter.filter_map(|x| x);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # let iter = vec![Some(1)].into_iter();\n+    /// iter.flatten();\n+    /// ```\n+    pub FILTER_MAP_IDENTITY,\n+    complexity,\n+    \"call to `filter_map` where `flatten` is sufficient\"\n+}\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for the use of `.bytes().nth()`.\n+    ///\n+    /// **Why is this bad?** `.as_bytes().get()` is more efficient and more\n+    /// readable.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // Bad\n+    /// let _ = \"Hello\".bytes().nth(3);\n+    ///\n+    /// // Good\n+    /// let _ = \"Hello\".as_bytes().get(3);\n+    /// ```\n+    pub BYTES_NTH,\n+    style,\n+    \"replace `.bytes().nth()` with `.as_bytes().get()`\"\n+}\n+\n pub struct Methods {\n     msrv: Option<RustcVersion>,\n }\n@@ -1504,6 +1550,7 @@ impl_lint_pass!(Methods => [\n     FILTER_NEXT,\n     SKIP_WHILE_NEXT,\n     FILTER_MAP,\n+    FILTER_MAP_IDENTITY,\n     MANUAL_FILTER_MAP,\n     MANUAL_FIND_MAP,\n     FILTER_MAP_NEXT,\n@@ -1513,6 +1560,7 @@ impl_lint_pass!(Methods => [\n     ITER_NEXT_SLICE,\n     ITER_NTH,\n     ITER_NTH_ZERO,\n+    BYTES_NTH,\n     ITER_SKIP_NEXT,\n     GET_UNWRAP,\n     STRING_EXTEND_CHARS,\n@@ -1590,14 +1638,18 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"extend\", ..] => lint_extend(cx, expr, arg_lists[0]),\n             [\"nth\", \"iter\"] => lint_iter_nth(cx, expr, &arg_lists, false),\n             [\"nth\", \"iter_mut\"] => lint_iter_nth(cx, expr, &arg_lists, true),\n+            [\"nth\", \"bytes\"] => bytes_nth::lints(cx, expr, &arg_lists[1]),\n             [\"nth\", ..] => lint_iter_nth_zero(cx, expr, arg_lists[0]),\n             [\"step_by\", ..] => lint_step_by(cx, expr, arg_lists[0]),\n             [\"next\", \"skip\"] => lint_iter_skip_next(cx, expr, arg_lists[1]),\n             [\"collect\", \"cloned\"] => lint_iter_cloned_collect(cx, expr, arg_lists[1]),\n             [\"as_ref\"] => lint_asref(cx, expr, \"as_ref\", arg_lists[0]),\n             [\"as_mut\"] => lint_asref(cx, expr, \"as_mut\", arg_lists[0]),\n             [\"fold\", ..] => lint_unnecessary_fold(cx, expr, arg_lists[0], method_spans[0]),\n-            [\"filter_map\", ..] => unnecessary_filter_map::lint(cx, expr, arg_lists[0]),\n+            [\"filter_map\", ..] => {\n+                unnecessary_filter_map::lint(cx, expr, arg_lists[0]);\n+                filter_map_identity::check(cx, expr, arg_lists[0], method_spans[0]);\n+            },\n             [\"count\", \"map\"] => lint_suspicious_map(cx, expr),\n             [\"assume_init\"] => lint_maybe_uninit(cx, &arg_lists[0][0], expr),\n             [\"unwrap_or\", arith @ (\"checked_add\" | \"checked_sub\" | \"checked_mul\")] => {\n@@ -2183,7 +2235,10 @@ fn lint_expect_fun_call(\n         span_replace_word,\n         &format!(\"use of `{}` followed by a function call\", name),\n         \"try this\",\n-        format!(\"unwrap_or_else({} {{ panic!(\\\"{{}}\\\", {}) }})\", closure_args, arg_root_snippet),\n+        format!(\n+            \"unwrap_or_else({} {{ panic!(\\\"{{}}\\\", {}) }})\",\n+            closure_args, arg_root_snippet\n+        ),\n         applicability,\n     );\n }\n@@ -2396,11 +2451,12 @@ fn lint_unnecessary_fold(cx: &LateContext<'_>, expr: &hir::Expr<'_>, fold_args:\n             if bin_op.node == op;\n \n             // Extract the names of the two arguments to the closure\n-            if let Some(first_arg_ident) = get_arg_name(&closure_body.params[0].pat);\n-            if let Some(second_arg_ident) = get_arg_name(&closure_body.params[1].pat);\n+            if let [param_a, param_b] = closure_body.params;\n+            if let PatKind::Binding(_, first_arg_id, ..) = strip_pat_refs(&param_a.pat).kind;\n+            if let PatKind::Binding(_, second_arg_id, second_arg_ident, _) = strip_pat_refs(&param_b.pat).kind;\n \n-            if match_var(&*left_expr, first_arg_ident);\n-            if replacement_has_args || match_var(&*right_expr, second_arg_ident);\n+            if path_to_local_id(left_expr, first_arg_id);\n+            if replacement_has_args || path_to_local_id(right_expr, second_arg_id);\n \n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n@@ -3068,10 +3124,8 @@ fn lint_filter_map<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, is_f\n             };\n             // let the filter closure arg and the map closure arg be equal\n             if_chain! {\n-                if let ExprKind::Path(QPath::Resolved(None, a_path)) = a_path.kind;\n-                if let ExprKind::Path(QPath::Resolved(None, b_path)) = b.kind;\n-                if a_path.res == Res::Local(filter_param_id);\n-                if b_path.res == Res::Local(map_param_id);\n+                if path_to_local_id(a_path, filter_param_id);\n+                if path_to_local_id(b, map_param_id);\n                 if TyS::same_type(cx.typeck_results().expr_ty_adjusted(a), cx.typeck_results().expr_ty_adjusted(b));\n                 then {\n                     return true;\n@@ -3255,8 +3309,9 @@ fn lint_search_is_some<'tcx>(\n                 then {\n                     if let hir::PatKind::Ref(..) = closure_arg.pat.kind {\n                         Some(search_snippet.replacen('&', \"\", 1))\n-                    } else if let Some(name) = get_arg_name(&closure_arg.pat) {\n-                        Some(search_snippet.replace(&format!(\"*{}\", name), &name.as_str()))\n+                    } else if let PatKind::Binding(_, _, ident, _) = strip_pat_refs(&closure_arg.pat).kind {\n+                        let name = &*ident.name.as_str();\n+                        Some(search_snippet.replace(&format!(\"*{}\", name), name))\n                     } else {\n                         None\n                     }\n@@ -3688,9 +3743,7 @@ fn lint_option_as_ref_deref<'tcx>(\n                 hir::ExprKind::MethodCall(_, _, args, _) => {\n                     if_chain! {\n                         if args.len() == 1;\n-                        if let hir::ExprKind::Path(qpath) = &args[0].kind;\n-                        if let hir::def::Res::Local(local_id) = cx.qpath_res(qpath, args[0].hir_id);\n-                        if closure_body.params[0].pat.hir_id == local_id;\n+                        if path_to_local_id(&args[0], closure_body.params[0].pat.hir_id);\n                         let adj = cx\n                             .typeck_results()\n                             .expr_adjustments(&args[0])\n@@ -3710,10 +3763,8 @@ fn lint_option_as_ref_deref<'tcx>(\n                     if_chain! {\n                         if let hir::ExprKind::Unary(hir::UnOp::Deref, ref inner1) = inner.kind;\n                         if let hir::ExprKind::Unary(hir::UnOp::Deref, ref inner2) = inner1.kind;\n-                        if let hir::ExprKind::Path(ref qpath) = inner2.kind;\n-                        if let hir::def::Res::Local(local_id) = cx.qpath_res(qpath, inner2.hir_id);\n                         then {\n-                            closure_body.params[0].pat.hir_id == local_id\n+                            path_to_local_id(inner2, closure_body.params[0].pat.hir_id)\n                         } else {\n                             false\n                         }\n@@ -4094,20 +4145,54 @@ fn lint_from_iter(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<\n         if implements_trait(cx, ty, from_iter_id, &[]) && implements_trait(cx, arg_ty, iter_id, &[]);\n         then {\n             // `expr` implements `FromIterator` trait\n-            let iter_expr = snippet(cx, args[0].span, \"..\");\n+            let iter_expr = sugg::Sugg::hir(cx, &args[0], \"..\").maybe_par();\n+            let turbofish = extract_turbofish(cx, expr, ty);\n+            let sugg = format!(\"{}.collect::<{}>()\", iter_expr, turbofish);\n             span_lint_and_sugg(\n                 cx,\n                 FROM_ITER_INSTEAD_OF_COLLECT,\n                 expr.span,\n                 \"usage of `FromIterator::from_iter`\",\n                 \"use `.collect()` instead of `::from_iter()`\",\n-                format!(\"{}.collect()\", iter_expr),\n+                sugg,\n                 Applicability::MaybeIncorrect,\n             );\n         }\n     }\n }\n \n+fn extract_turbofish(cx: &LateContext<'_>, expr: &hir::Expr<'_>, ty: Ty<'tcx>) -> String {\n+    if_chain! {\n+        let call_site = expr.span.source_callsite();\n+        if let Ok(snippet) = cx.sess().source_map().span_to_snippet(call_site);\n+        let snippet_split = snippet.split(\"::\").collect::<Vec<_>>();\n+        if let Some((_, elements)) = snippet_split.split_last();\n+\n+        then {\n+            // is there a type specifier? (i.e.: like `<u32>` in `collections::BTreeSet::<u32>::`)\n+            if let Some(type_specifier) = snippet_split.iter().find(|e| e.starts_with('<') && e.ends_with('>')) {\n+                // remove the type specifier from the path elements\n+                let without_ts = elements.iter().filter_map(|e| {\n+                    if e == type_specifier { None } else { Some((*e).to_string()) }\n+                }).collect::<Vec<_>>();\n+                // join and add the type specifier at the end (i.e.: `collections::BTreeSet<u32>`)\n+                format!(\"{}{}\", without_ts.join(\"::\"), type_specifier)\n+            } else {\n+                // type is not explicitly specified so wildcards are needed\n+                // i.e.: 2 wildcards in `std::collections::BTreeMap<&i32, &char>`\n+                let ty_str = ty.to_string();\n+                let start = ty_str.find('<').unwrap_or(0);\n+                let end = ty_str.find('>').unwrap_or_else(|| ty_str.len());\n+                let nb_wildcard = ty_str[start..end].split(',').count();\n+                let wildcards = format!(\"_{}\", \", _\".repeat(nb_wildcard - 1));\n+                format!(\"{}<{}>\", elements.join(\"::\"), wildcards)\n+            }\n+        } else {\n+            ty.to_string()\n+        }\n+    }\n+}\n+\n fn fn_header_equals(expected: hir::FnHeader, actual: hir::FnHeader) -> bool {\n     expected.constness == actual.constness\n         && expected.unsafety == actual.unsafety"}, {"sha": "5691fcb88e95ccb59c707fb936cf3904f0c6f628", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,8 +1,6 @@\n-use crate::utils::paths;\n use crate::utils::usage::mutated_variables;\n-use crate::utils::{match_qpath, match_trait_method, span_lint};\n+use crate::utils::{match_qpath, match_trait_method, path_to_local_id, paths, span_lint};\n use rustc_hir as hir;\n-use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n@@ -59,14 +57,8 @@ fn check_expression<'tcx>(cx: &LateContext<'tcx>, arg_id: hir::HirId, expr: &'tc\n                 if let hir::ExprKind::Path(ref path) = func.kind;\n                 then {\n                     if match_qpath(path, &paths::OPTION_SOME) {\n-                        if_chain! {\n-                            if let hir::ExprKind::Path(path) = &args[0].kind;\n-                            if let Res::Local(ref local) = cx.qpath_res(path, args[0].hir_id);\n-                            then {\n-                                if arg_id == *local {\n-                                    return (false, false)\n-                                }\n-                            }\n+                        if path_to_local_id(&args[0], arg_id) {\n+                            return (false, false)\n                         }\n                         return (true, false);\n                     }"}, {"sha": "d7239b328bbcd0a7f245ba19b827ffbf67f1b856", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -52,7 +52,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n             return;\n         }\n \n-        if let Some((_, arg, body)) = higher::for_loop(expr) {\n+        if let Some((_, arg, body, _)) = higher::for_loop(expr) {\n             // A `for` loop lowers to:\n             // ```rust\n             // match ::std::iter::Iterator::next(&mut iter) {"}, {"sha": "76417aa7ed09d39682788314a61b2213c05ec0b9", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -90,10 +90,6 @@ impl<'a, 'tcx> Visitor<'tcx> for MutArgVisitor<'a, 'tcx> {\n                 self.found = true;\n                 return;\n             },\n-            ExprKind::If(..) => {\n-                self.found = true;\n-                return;\n-            },\n             ExprKind::Path(_) => {\n                 if let Some(adj) = self.cx.typeck_results().adjustments().get(expr.hir_id) {\n                     if adj"}, {"sha": "fe8d4d07abc15ae8a062e313c766a93c6c065bea", "filename": "clippy_lints/src/needless_question_mark.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_question_mark.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,8 +1,6 @@\n use rustc_errors::Applicability;\n-use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::{Body, Expr, ExprKind, LangItem, MatchSource, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::ty::DefIdTree;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n@@ -160,7 +158,7 @@ fn is_some_or_ok_call<'a>(\n         // Check outer expression matches CALL_IDENT(ARGUMENT) format\n         if let ExprKind::Call(path, args) = &expr.kind;\n         if let ExprKind::Path(QPath::Resolved(None, path)) = &path.kind;\n-        if is_some_ctor(cx, path.res) || is_ok_ctor(cx, path.res);\n+        if utils::is_some_ctor(cx, path.res) || utils::is_ok_ctor(cx, path.res);\n \n         // Extract inner expression from ARGUMENT\n         if let ExprKind::Match(inner_expr_with_q, _, MatchSource::TryDesugar) = &args[0].kind;\n@@ -208,25 +206,3 @@ fn is_some_or_ok_call<'a>(\n fn has_implicit_error_from(cx: &LateContext<'_>, entire_expr: &Expr<'_>, inner_result_expr: &Expr<'_>) -> bool {\n     return cx.typeck_results().expr_ty(entire_expr) != cx.typeck_results().expr_ty(inner_result_expr);\n }\n-\n-fn is_ok_ctor(cx: &LateContext<'_>, res: Res) -> bool {\n-    if let Some(ok_id) = cx.tcx.lang_items().result_ok_variant() {\n-        if let Res::Def(DefKind::Ctor(CtorOf::Variant, CtorKind::Fn), id) = res {\n-            if let Some(variant_id) = cx.tcx.parent(id) {\n-                return variant_id == ok_id;\n-            }\n-        }\n-    }\n-    false\n-}\n-\n-fn is_some_ctor(cx: &LateContext<'_>, res: Res) -> bool {\n-    if let Some(some_id) = cx.tcx.lang_items().option_some_variant() {\n-        if let Res::Def(DefKind::Ctor(CtorOf::Variant, CtorKind::Fn), id) = res {\n-            if let Some(variant_id) = cx.tcx.parent(id) {\n-                return variant_id == some_id;\n-            }\n-        }\n-    }\n-    false\n-}"}, {"sha": "7c74b31601872cdc6c51750abc60ec70125f51be", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,7 +1,6 @@\n use crate::utils::{span_lint, span_lint_and_then};\n use rustc_ast::ast::{\n-    Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, FnKind, Item, ItemKind, Local, Pat,\n-    PatKind,\n+    Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, FnKind, Item, ItemKind, Local, Pat, PatKind,\n };\n use rustc_ast::visit::{walk_block, walk_expr, walk_pat, Visitor};\n use rustc_lint::{EarlyContext, EarlyLintPass};"}, {"sha": "59503817c0fccfc97719e2d355defa325e8fb0fe", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -442,7 +442,7 @@ fn check_reversed_empty_range(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         let mut cur_expr = expr;\n         while let Some(parent_expr) = get_parent_expr(cx, cur_expr) {\n             match higher::for_loop(parent_expr) {\n-                Some((_, args, _)) if args.hir_id == expr.hir_id => return true,\n+                Some((_, args, _, _)) if args.hir_id == expr.hir_id => return true,\n                 _ => cur_expr = parent_expr,\n             }\n         }"}, {"sha": "1edea6131489323f493f2e20d60f360a39ee311a", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -35,14 +35,16 @@ declare_clippy_lint! {\n     /// `str::starts_with`, `str::ends_with` or `std::contains` or other `str`\n     /// methods.\n     ///\n-    /// **Known problems:** None.\n+    /// **Known problems:** If the same regex is going to be applied to multiple\n+    /// inputs, the precomputations done by `Regex` construction can give\n+    /// significantly better performance than any of the `str`-based methods.\n     ///\n     /// **Example:**\n     /// ```ignore\n     /// Regex::new(\"^foobar\")\n     /// ```\n     pub TRIVIAL_REGEX,\n-    style,\n+    nursery,\n     \"trivial regular expressions\"\n }\n "}, {"sha": "839c995e52562ab795b3c3e2dfc26b9ad62d06d9", "filename": "clippy_lints/src/semicolon_if_nothing_returned.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,66 @@\n+use crate::utils::{in_macro, snippet_with_macro_callsite, span_lint_and_sugg, sugg};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Block, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Looks for blocks of expressions and fires if the last expression returns `()`\n+    /// but is not followed by a semicolon.\n+    ///\n+    /// **Why is this bad?** The semicolon might be optional but when\n+    /// extending the block with new code, it doesn't require a change in previous last line.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// fn main() {\n+    ///     println!(\"Hello world\")\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn main() {\n+    ///     println!(\"Hello world\");\n+    /// }\n+    /// ```\n+    pub SEMICOLON_IF_NOTHING_RETURNED,\n+    restriction,\n+    \"add a semicolon if nothing is returned\"\n+}\n+\n+declare_lint_pass!(SemicolonIfNothingReturned => [SEMICOLON_IF_NOTHING_RETURNED]);\n+\n+impl LateLintPass<'_> for SemicolonIfNothingReturned {\n+    fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>) {\n+        if_chain! {\n+            if !in_macro(block.span);\n+            if let Some(expr) = block.expr;\n+            let t_expr = cx.typeck_results().expr_ty(expr);\n+            if t_expr.is_unit();\n+            if let snippet = snippet_with_macro_callsite(cx, expr.span, \"}\");\n+            if !snippet.ends_with('}');\n+            then {\n+                // filter out the desugared `for` loop\n+                if let ExprKind::DropTemps(..) = &expr.kind {\n+                    return;\n+                }\n+\n+                let sugg = sugg::Sugg::hir_with_macro_callsite(cx, &expr, \"..\");\n+                let suggestion = format!(\"{0};\", sugg);\n+                span_lint_and_sugg(\n+                    cx,\n+                    SEMICOLON_IF_NOTHING_RETURNED,\n+                    expr.span.source_callsite(),\n+                    \"consider adding a `;` to the last statement for consistent formatting\",\n+                    \"add a `;` here\",\n+                    suggestion,\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "fdd105e624605fefad209c4262ec0d5983b156ae", "filename": "clippy_lints/src/to_string_in_display.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_string_in_display.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,6 +1,5 @@\n-use crate::utils::{match_def_path, match_trait_method, paths, span_lint};\n+use crate::utils::{match_def_path, match_trait_method, path_to_local_id, paths, span_lint};\n use if_chain::if_chain;\n-use rustc_hir::def::Res;\n use rustc_hir::{Expr, ExprKind, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -89,14 +88,12 @@ impl LateLintPass<'_> for ToStringInDisplay {\n \n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if_chain! {\n+            if self.in_display_impl;\n+            if let Some(self_hir_id) = self.self_hir_id;\n             if let ExprKind::MethodCall(ref path, _, args, _) = expr.kind;\n             if path.ident.name == sym!(to_string);\n             if match_trait_method(cx, expr, &paths::TO_STRING);\n-            if self.in_display_impl;\n-            if let ExprKind::Path(ref qpath) = args[0].kind;\n-            if let Res::Local(hir_id) = cx.qpath_res(qpath, args[0].hir_id);\n-            if let Some(self_hir_id) = self.self_hir_id;\n-            if hir_id == self_hir_id;\n+            if path_to_local_id(&args[0], self_hir_id);\n             then {\n                 span_lint(\n                     cx,"}, {"sha": "e647812a0fe8fc3094eb1ac7697fff805dd3d811", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1106,7 +1106,9 @@ fn is_empty_block(expr: &Expr<'_>) -> bool {\n         expr.kind,\n         ExprKind::Block(\n             Block {\n-                stmts: &[], expr: None, ..\n+                stmts: &[],\n+                expr: None,\n+                ..\n             },\n             _,\n         )"}, {"sha": "9d61bd0cc2fe9e2eb572e40a1004b83d71c52bba", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 3, "deletions": 36, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,12 +1,10 @@\n use if_chain::if_chain;\n-use rustc_hir::def::Res;\n-use rustc_hir::intravisit::{walk_path, NestedVisitorMap, Visitor};\n-use rustc_hir::{HirId, Impl, ImplItem, ImplItemKind, ItemKind, Path};\n+use rustc_hir::{Impl, ImplItem, ImplItemKind, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::span_lint_and_help;\n+use crate::utils::visitors::LocalUsedVisitor;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks methods that contain a `self` argument but don't use it\n@@ -57,13 +55,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n             then {\n                 let self_param = &body.params[0];\n                 let self_hir_id = self_param.pat.hir_id;\n-                let mut visitor = UnusedSelfVisitor {\n-                    cx,\n-                    uses_self: false,\n-                    self_hir_id: &self_hir_id,\n-                };\n-                visitor.visit_body(body);\n-                if !visitor.uses_self {\n+                if !LocalUsedVisitor::new(cx, self_hir_id).check_body(body) {\n                     span_lint_and_help(\n                         cx,\n                         UNUSED_SELF,\n@@ -78,28 +70,3 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n         }\n     }\n }\n-\n-struct UnusedSelfVisitor<'a, 'tcx> {\n-    cx: &'a LateContext<'tcx>,\n-    uses_self: bool,\n-    self_hir_id: &'a HirId,\n-}\n-\n-impl<'a, 'tcx> Visitor<'tcx> for UnusedSelfVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n-    fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n-        if self.uses_self {\n-            // This function already uses `self`\n-            return;\n-        }\n-        if let Res::Local(hir_id) = &path.res {\n-            self.uses_self = self.self_hir_id == hir_id\n-        }\n-        walk_path(self, path);\n-    }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n-    }\n-}"}, {"sha": "44eb3968ae738113b8e226687baec8ddd3c9c8ee", "filename": "clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -229,21 +229,12 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n     match (l, r) {\n         (ExternCrate(l), ExternCrate(r)) => l == r,\n         (Use(l), Use(r)) => eq_use_tree(l, r),\n-        (Static(lt, lm, le), Static(rt, rm, re)) => {\n-            lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re)\n-        }\n-        (Const(ld, lt, le), Const(rd, rt, re)) => {\n-            eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re)\n-        }\n+        (Static(lt, lm, le), Static(rt, rm, re)) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n+        (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (Fn(box FnKind(ld, lf, lg, lb)), Fn(box FnKind(rd, rf, rg, rb))) => {\n-            eq_defaultness(*ld, *rd)\n-                && eq_fn_sig(lf, rf)\n-                && eq_generics(lg, rg)\n-                && both(lb, rb, |l, r| eq_block(l, r))\n-        }\n-        (Mod(l), Mod(r)) => {\n-            l.inline == r.inline && over(&l.items, &r.items, |l, r| eq_item(l, r, eq_item_kind))\n-        }\n+            eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n+        },\n+        (Mod(l), Mod(r)) => l.inline == r.inline && over(&l.items, &r.items, |l, r| eq_item(l, r, eq_item_kind)),\n         (ForeignMod(l), ForeignMod(r)) => {\n             both(&l.abi, &r.abi, |l, r| eq_str_lit(l, r))\n                 && over(&l.items, &r.items, |l, r| eq_item(l, r, eq_foreign_item_kind))\n@@ -308,15 +299,10 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n pub fn eq_foreign_item_kind(l: &ForeignItemKind, r: &ForeignItemKind) -> bool {\n     use ForeignItemKind::*;\n     match (l, r) {\n-        (Static(lt, lm, le), Static(rt, rm, re)) => {\n-            lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re)\n-        }\n+        (Static(lt, lm, le), Static(rt, rm, re)) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (Fn(box FnKind(ld, lf, lg, lb)), Fn(box FnKind(rd, rf, rg, rb))) => {\n-            eq_defaultness(*ld, *rd)\n-                && eq_fn_sig(lf, rf)\n-                && eq_generics(lg, rg)\n-                && both(lb, rb, |l, r| eq_block(l, r))\n-        }\n+            eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n+        },\n         (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)"}, {"sha": "7d7b35c21680d907bf4b772570b2126e7778679d", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -169,10 +169,12 @@ define_Conf! {\n     (max_fn_params_bools, \"max_fn_params_bools\": u64, 3),\n     /// Lint: WILDCARD_IMPORTS. Whether to allow certain wildcard imports (prelude, super in tests).\n     (warn_on_all_wildcard_imports, \"warn_on_all_wildcard_imports\": bool, false),\n-    /// Lint: DISALLOWED_METHOD. The list of blacklisted methods to lint about. NB: `bar` is not here since it has legitimate uses\n+    /// Lint: DISALLOWED_METHOD. The list of disallowed methods, written as fully qualified paths.\n     (disallowed_methods, \"disallowed_methods\": Vec<String>, Vec::<String>::new()),\n     /// Lint: UNREADABLE_LITERAL. Should the fraction of a decimal be linted to include separators.\n     (unreadable_literal_lint_fractions, \"unreadable_literal_lint_fractions\": bool, true),\n+    /// Lint: _CARGO_COMMON_METADATA. For internal testing only, ignores the current `publish` settings in the Cargo manifest.\n+    (cargo_ignore_publish, \"cargo_ignore_publish\": bool, false),\n }\n \n impl Default for Conf {"}, {"sha": "1cf1aa363d5dd7cbc3399ad80996484d1a4d4510", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -9,6 +9,7 @@ use rustc_ast::ast;\n use rustc_hir as hir;\n use rustc_hir::{BorrowKind, Expr, ExprKind, StmtKind, UnOp};\n use rustc_lint::LateContext;\n+use rustc_span::source_map::Span;\n \n /// Converts a hir binary operator to the corresponding `ast` type.\n #[must_use]\n@@ -133,11 +134,11 @@ pub fn is_from_for_desugar(local: &hir::Local<'_>) -> bool {\n     false\n }\n \n-/// Recover the essential nodes of a desugared for loop:\n-/// `for pat in arg { body }` becomes `(pat, arg, body)`.\n+/// Recover the essential nodes of a desugared for loop as well as the entire span:\n+/// `for pat in arg { body }` becomes `(pat, arg, body)`. Return `(pat, arg, body, span)`.\n pub fn for_loop<'tcx>(\n     expr: &'tcx hir::Expr<'tcx>,\n-) -> Option<(&hir::Pat<'_>, &'tcx hir::Expr<'tcx>, &'tcx hir::Expr<'tcx>)> {\n+) -> Option<(&hir::Pat<'_>, &'tcx hir::Expr<'tcx>, &'tcx hir::Expr<'tcx>, Span)> {\n     if_chain! {\n         if let hir::ExprKind::Match(ref iterexpr, ref arms, hir::MatchSource::ForLoopDesugar) = expr.kind;\n         if let hir::ExprKind::Call(_, ref iterargs) = iterexpr.kind;\n@@ -148,7 +149,7 @@ pub fn for_loop<'tcx>(\n         if let hir::StmtKind::Local(ref local) = let_stmt.kind;\n         if let hir::StmtKind::Expr(ref expr) = body.kind;\n         then {\n-            return Some((&*local.pat, &iterargs[0], expr));\n+            return Some((&*local.pat, &iterargs[0], expr, arms[0].span));\n         }\n     }\n     None"}, {"sha": "d8c602fab22c2d095f94adeba358fe7c903e5bbc", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -841,15 +841,13 @@ pub fn check_path(cx: &LateContext<'_>, path: &[&str]) -> bool {\n     // implementations of native types. Check lang items.\n     let path_syms: Vec<_> = path.iter().map(|p| Symbol::intern(p)).collect();\n     let lang_items = cx.tcx.lang_items();\n-    for lang_item in lang_items.items() {\n-        if let Some(def_id) = lang_item {\n-            let lang_item_path = cx.get_def_path(*def_id);\n-            if path_syms.starts_with(&lang_item_path) {\n-                if let [item] = &path_syms[lang_item_path.len()..] {\n-                    for child in cx.tcx.item_children(*def_id) {\n-                        if child.ident.name == *item {\n-                            return true;\n-                        }\n+    for item_def_id in lang_items.items().iter().flatten() {\n+        let lang_item_path = cx.get_def_path(*item_def_id);\n+        if path_syms.starts_with(&lang_item_path) {\n+            if let [item] = &path_syms[lang_item_path.len()..] {\n+                for child in cx.tcx.item_children(*item_def_id) {\n+                    if child.ident.name == *item {\n+                        return true;\n                     }\n                 }\n             }"}, {"sha": "fafa1400156a4f62db65495a56acd6a1db5ae65b", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 47, "deletions": 10, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -36,7 +36,7 @@ use rustc_ast::ast::{self, Attribute, LitKind};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::Node;\n@@ -49,7 +49,7 @@ use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::exports::Export;\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_middle::ty::{self, layout::IntegerExt, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, layout::IntegerExt, DefIdTree, Ty, TyCtxt, TypeFoldable};\n use rustc_semver::RustcVersion;\n use rustc_session::Session;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n@@ -306,6 +306,22 @@ pub fn match_path_ast(path: &ast::Path, segments: &[&str]) -> bool {\n         .all(|(a, b)| a.ident.name.as_str() == *b)\n }\n \n+/// If the expression is a path to a local, returns the canonical `HirId` of the local.\n+pub fn path_to_local(expr: &Expr<'_>) -> Option<HirId> {\n+    if let ExprKind::Path(QPath::Resolved(None, ref path)) = expr.kind {\n+        if let Res::Local(id) = path.res {\n+            return Some(id);\n+        }\n+    }\n+    None\n+}\n+\n+/// Returns true if the expression is a path to a local with the specified `HirId`.\n+/// Use this function to see if an expression matches a function argument or a match binding.\n+pub fn path_to_local_id(expr: &Expr<'_>, id: HirId) -> bool {\n+    path_to_local(expr) == Some(id)\n+}\n+\n /// Gets the definition associated to a path.\n #[allow(clippy::shadow_unrelated)] // false positive #6563\n pub fn path_to_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n@@ -1134,9 +1150,7 @@ pub fn is_try<'tcx>(expr: &'tcx Expr<'tcx>) -> Option<&'tcx Expr<'tcx>> {\n             if let PatKind::TupleStruct(ref path, ref pat, None) = arm.pat.kind;\n             if match_qpath(path, &paths::RESULT_OK[1..]);\n             if let PatKind::Binding(_, hir_id, _, None) = pat[0].kind;\n-            if let ExprKind::Path(QPath::Resolved(None, ref path)) = arm.body.kind;\n-            if let Res::Local(lid) = path.res;\n-            if lid == hir_id;\n+            if path_to_local_id(arm.body, hir_id);\n             then {\n                 return true;\n             }\n@@ -1180,12 +1194,11 @@ pub fn is_allowed(cx: &LateContext<'_>, lint: &'static Lint, id: HirId) -> bool\n     cx.tcx.lint_level_at_node(lint, id).0 == Level::Allow\n }\n \n-pub fn get_arg_name(pat: &Pat<'_>) -> Option<Symbol> {\n-    match pat.kind {\n-        PatKind::Binding(.., ident, None) => Some(ident.name),\n-        PatKind::Ref(ref subpat, _) => get_arg_name(subpat),\n-        _ => None,\n+pub fn strip_pat_refs<'hir>(mut pat: &'hir Pat<'hir>) -> &'hir Pat<'hir> {\n+    while let PatKind::Ref(subpat, _) = pat.kind {\n+        pat = subpat;\n     }\n+    pat\n }\n \n pub fn int_bits(tcx: TyCtxt<'_>, ity: ty::IntTy) -> u64 {\n@@ -1702,6 +1715,30 @@ pub fn is_hir_ty_cfg_dependant(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n     }\n }\n \n+/// Check if the resolution of a given path is an `Ok` variant of `Result`.\n+pub fn is_ok_ctor(cx: &LateContext<'_>, res: Res) -> bool {\n+    if let Some(ok_id) = cx.tcx.lang_items().result_ok_variant() {\n+        if let Res::Def(DefKind::Ctor(CtorOf::Variant, CtorKind::Fn), id) = res {\n+            if let Some(variant_id) = cx.tcx.parent(id) {\n+                return variant_id == ok_id;\n+            }\n+        }\n+    }\n+    false\n+}\n+\n+/// Check if the resolution of a given path is a `Some` variant of `Option`.\n+pub fn is_some_ctor(cx: &LateContext<'_>, res: Res) -> bool {\n+    if let Some(some_id) = cx.tcx.lang_items().option_some_variant() {\n+        if let Res::Def(DefKind::Ctor(CtorOf::Variant, CtorKind::Fn), id) = res {\n+            if let Some(variant_id) = cx.tcx.parent(id) {\n+                return variant_id == some_id;\n+            }\n+        }\n+    }\n+    false\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::{reindent_multiline, without_block_comments};"}, {"sha": "7c7580a2c6612992b0aeaa3bd4230ae8f95e80f4", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,16 +1,14 @@\n use crate::utils;\n-use crate::utils::match_var;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::intravisit;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{Expr, ExprKind, HirId, Path};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n-use rustc_span::symbol::{Ident, Symbol};\n use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n /// Returns a set of mutated local variable IDs, or `None` if mutations could not be determined.\n@@ -81,36 +79,6 @@ impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n     }\n }\n \n-pub struct UsedVisitor {\n-    pub var: Symbol, // var to look for\n-    pub used: bool,  // has the var been used otherwise?\n-}\n-\n-impl<'tcx> Visitor<'tcx> for UsedVisitor {\n-    type Map = Map<'tcx>;\n-\n-    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if match_var(expr, self.var) {\n-            self.used = true;\n-        } else {\n-            walk_expr(self, expr);\n-        }\n-    }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-}\n-\n-pub fn is_unused<'tcx>(ident: &'tcx Ident, body: &'tcx Expr<'_>) -> bool {\n-    let mut visitor = UsedVisitor {\n-        var: ident.name,\n-        used: false,\n-    };\n-    walk_expr(&mut visitor, body);\n-    !visitor.used\n-}\n-\n pub struct ParamBindingIdCollector {\n     binding_hir_ids: Vec<hir::HirId>,\n }"}, {"sha": "085c1f9c0cb8d3ea661a1640cbd946933467fe93", "filename": "clippy_lints/src/utils/visitors.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fvisitors.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,7 +1,7 @@\n+use crate::utils::path_to_local_id;\n use rustc_hir as hir;\n-use rustc_hir::def::Res;\n use rustc_hir::intravisit::{self, walk_expr, NestedVisitorMap, Visitor};\n-use rustc_hir::{Arm, Expr, ExprKind, HirId, QPath, Stmt};\n+use rustc_hir::{Arm, Body, Expr, HirId, Stmt};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n \n@@ -133,14 +133,16 @@ where\n     }\n }\n \n-pub struct LocalUsedVisitor {\n+pub struct LocalUsedVisitor<'hir> {\n+    hir: Map<'hir>,\n     pub local_hir_id: HirId,\n     pub used: bool,\n }\n \n-impl LocalUsedVisitor {\n-    pub fn new(local_hir_id: HirId) -> Self {\n+impl<'hir> LocalUsedVisitor<'hir> {\n+    pub fn new(cx: &LateContext<'hir>, local_hir_id: HirId) -> Self {\n         Self {\n+            hir: cx.tcx.hir(),\n             local_hir_id,\n             used: false,\n         }\n@@ -151,35 +153,38 @@ impl LocalUsedVisitor {\n         std::mem::replace(&mut self.used, false)\n     }\n \n-    pub fn check_arm(&mut self, arm: &Arm<'_>) -> bool {\n+    pub fn check_arm(&mut self, arm: &'hir Arm<'_>) -> bool {\n         self.check(arm, Self::visit_arm)\n     }\n \n-    pub fn check_expr(&mut self, expr: &Expr<'_>) -> bool {\n+    pub fn check_body(&mut self, body: &'hir Body<'_>) -> bool {\n+        self.check(body, Self::visit_body)\n+    }\n+\n+    pub fn check_expr(&mut self, expr: &'hir Expr<'_>) -> bool {\n         self.check(expr, Self::visit_expr)\n     }\n \n-    pub fn check_stmt(&mut self, stmt: &Stmt<'_>) -> bool {\n+    pub fn check_stmt(&mut self, stmt: &'hir Stmt<'_>) -> bool {\n         self.check(stmt, Self::visit_stmt)\n     }\n }\n \n-impl<'v> Visitor<'v> for LocalUsedVisitor {\n+impl<'v> Visitor<'v> for LocalUsedVisitor<'v> {\n     type Map = Map<'v>;\n \n     fn visit_expr(&mut self, expr: &'v Expr<'v>) {\n-        if let ExprKind::Path(QPath::Resolved(None, path)) = expr.kind {\n-            if let Res::Local(id) = path.res {\n-                if id == self.local_hir_id {\n-                    self.used = true;\n-                    return;\n-                }\n-            }\n+        if self.used {\n+            return;\n+        }\n+        if path_to_local_id(expr, self.local_hir_id) {\n+            self.used = true;\n+        } else {\n+            walk_expr(self, expr);\n         }\n-        walk_expr(self, expr);\n     }\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n+        NestedVisitorMap::OnlyBodies(self.hir)\n     }\n }"}, {"sha": "c132e4de4f67ba450b877bf49fe09066bf5b32a8", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -55,7 +55,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessVec {\n \n         // search for `for _ in vec![\u2026]`\n         if_chain! {\n-            if let Some((_, arg, _)) = higher::for_loop(expr);\n+            if let Some((_, arg, _, _)) = higher::for_loop(expr);\n             if let Some(vec_args) = higher::vec_macro(cx, arg);\n             if is_copy(cx, vec_type(cx.typeck_results().expr_ty_adjusted(arg)));\n             then {"}, {"sha": "e40fdca6a99478608f116af92c6db07af8daeed4", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 12, "deletions": 32, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -3,9 +3,7 @@ use std::ops::Range;\n \n use crate::utils::{snippet_with_applicability, span_lint, span_lint_and_sugg, span_lint_and_then};\n use if_chain::if_chain;\n-use rustc_ast::ast::{\n-    Expr, ExprKind, ImplKind, Item, ItemKind, LitKind, MacCall, StrLit, StrStyle,\n-};\n+use rustc_ast::ast::{Expr, ExprKind, ImplKind, Item, ItemKind, LitKind, MacCall, StrLit, StrStyle};\n use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_errors::Applicability;\n@@ -379,15 +377,10 @@ impl Write {\n     /// (Some(\"string to write: {}\"), Some(buf))\n     /// ```\n     #[allow(clippy::too_many_lines)]\n-    fn check_tts<'a>(\n-        &self,\n-        cx: &EarlyContext<'a>,\n-        tts: TokenStream,\n-        is_write: bool,\n-    ) -> (Option<StrLit>, Option<Expr>) {\n+    fn check_tts<'a>(&self, cx: &EarlyContext<'a>, tts: TokenStream, is_write: bool) -> (Option<StrLit>, Option<Expr>) {\n         use rustc_parse_format::{\n-            AlignUnknown, ArgumentImplicitlyIs, ArgumentIs, ArgumentNamed, CountImplied,\n-            FormatSpec, ParseMode, Parser, Piece,\n+            AlignUnknown, ArgumentImplicitlyIs, ArgumentIs, ArgumentNamed, CountImplied, FormatSpec, ParseMode, Parser,\n+            Piece,\n         };\n \n         let mut parser = parser::Parser::new(&cx.sess.parse_sess, tts, false, None);\n@@ -417,12 +410,7 @@ impl Write {\n             if let Piece::NextArgument(arg) = piece {\n                 if !self.in_debug_impl && arg.format.ty == \"?\" {\n                     // FIXME: modify rustc's fmt string parser to give us the current span\n-                    span_lint(\n-                        cx,\n-                        USE_DEBUG,\n-                        parser.prev_token.span,\n-                        \"use of `Debug`-based formatting\",\n-                    );\n+                    span_lint(cx, USE_DEBUG, parser.prev_token.span, \"use of `Debug`-based formatting\");\n                 }\n                 args.push(arg);\n             }\n@@ -450,9 +438,7 @@ impl Write {\n                 return (Some(fmtstr), None);\n             };\n             match &token_expr.kind {\n-                ExprKind::Lit(lit)\n-                    if !matches!(lit.kind, LitKind::Int(..) | LitKind::Float(..)) =>\n-                {\n+                ExprKind::Lit(lit) if !matches!(lit.kind, LitKind::Int(..) | LitKind::Float(..)) => {\n                     let mut all_simple = true;\n                     let mut seen = false;\n                     for arg in &args {\n@@ -462,15 +448,15 @@ impl Write {\n                                     all_simple &= arg.format == SIMPLE;\n                                     seen = true;\n                                 }\n-                            }\n-                            ArgumentNamed(_) => {}\n+                            },\n+                            ArgumentNamed(_) => {},\n                         }\n                     }\n                     if all_simple && seen {\n                         span_lint(cx, lint, token_expr.span, \"literal with an empty format string\");\n                     }\n                     idx += 1;\n-                }\n+                },\n                 ExprKind::Assign(lhs, rhs, _) => {\n                     if_chain! {\n                         if let ExprKind::Lit(ref lit) = rhs.kind;\n@@ -495,7 +481,7 @@ impl Write {\n                             }\n                         }\n                     }\n-                }\n+                },\n                 _ => idx += 1,\n             }\n         }\n@@ -527,17 +513,11 @@ impl Write {\n                     cx,\n                     PRINT_WITH_NEWLINE,\n                     mac.span(),\n-                    &format!(\n-                        \"using `{}!()` with a format string that ends in a single newline\",\n-                        name\n-                    ),\n+                    &format!(\"using `{}!()` with a format string that ends in a single newline\", name),\n                     |err| {\n                         err.multipart_suggestion(\n                             &format!(\"use `{}!` instead\", suggested),\n-                            vec![\n-                                (mac.path.span, suggested),\n-                                (newline_span(&fmt_str), String::new()),\n-                            ],\n+                            vec![(mac.path.span, suggested), (newline_span(&fmt_str), String::new())],\n                             Applicability::MachineApplicable,\n                         );\n                     },"}, {"sha": "3bc7758033b2836eb6035a54f31822b4617dffbc", "filename": "lintcheck-logs/lintcheck_crates_logs.txt", "status": "renamed", "additions": 183, "deletions": 20, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/lintcheck-logs%2Flintcheck_crates_logs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/lintcheck-logs%2Flintcheck_crates_logs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck-logs%2Flintcheck_crates_logs.txt?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,6 +1,6 @@\n-clippy 0.1.51 (c6701036b 2021-01-23)\n+clippy 0.1.51 (7f5bb7fd0 2021-02-06)\n \n-cargo-0.49.0//home/matthias/.rustup/toolchains/nightly-2021-01-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:393:34 clippy::match_same_arms \"this `match` has identical arm bodies\"\n+cargo-0.49.0//home/matthias/.rustup/toolchains/nightly-2021-02-03-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:409:34 clippy::match_same_arms \"this `match` has identical arm bodies\"\n cargo-0.49.0/build.rs:1:null clippy::cargo_common_metadata \"package `cargo` is missing `package.categories` metadata\"\n cargo-0.49.0/build.rs:1:null clippy::cargo_common_metadata \"package `cargo` is missing `package.keywords` metadata\"\n cargo-0.49.0/src/bin/cargo/cli.rs:104:34 clippy::single_match_else \"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\"\n@@ -99,6 +99,7 @@ cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:411:9 clippy::\n cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:420:69 clippy::doc_markdown \"you should put `mode/target_kind` between ticks in the documentation\"\n cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:423:19 clippy::doc_markdown \"you should put `CrateTypes` between ticks in the documentation\"\n cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:424:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:424:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:469:58 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:603:19 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/core/compiler/build_context/target_info.rs:665:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n@@ -111,6 +112,7 @@ cargo-0.49.0/src/cargo/core/compiler/build_plan.rs:4:9 clippy::doc_markdown \"you\n cargo-0.49.0/src/cargo/core/compiler/build_plan.rs:5:66 clippy::doc_markdown \"you should put `BuildPlan` between ticks in the documentation\"\n cargo-0.49.0/src/cargo/core/compiler/build_plan.rs:66:40 clippy::ptr_arg \"writing `&PathBuf` instead of `&Path` involves a new object where a slice will do.\"\n cargo-0.49.0/src/cargo/core/compiler/compilation.rs:150:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/compiler/compilation.rs:150:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/compiler/compilation.rs:169:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/compiler/compilation.rs:185:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/compiler/compilation.rs:193:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n@@ -121,6 +123,7 @@ cargo-0.49.0/src/cargo/core/compiler/compilation.rs:91:5 clippy::missing_errors_\n cargo-0.49.0/src/cargo/core/compiler/compile_kind.rs:118:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/compiler/compile_kind.rs:123:18 clippy::case_sensitive_file_extension_comparisons \"case-sensitive file extension comparison\"\n cargo-0.49.0/src/cargo/core/compiler/compile_kind.rs:147:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+cargo-0.49.0/src/cargo/core/compiler/compile_kind.rs:157:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/compiler/compile_kind.rs:157:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/compiler/compile_kind.rs:29:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/compiler/compile_kind.rs:33:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n@@ -132,18 +135,23 @@ cargo-0.49.0/src/cargo/core/compiler/context/compilation_files.rs:324:66 clippy:\n cargo-0.49.0/src/cargo/core/compiler/context/compilation_files.rs:393:37 clippy::match_same_arms \"this `match` has identical arm bodies\"\n cargo-0.49.0/src/cargo/core/compiler/context/compilation_files.rs:426:71 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:125:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:125:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:125:5 clippy::too_many_lines \"this function has too many lines (107/100)\"\n cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:270:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:286:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:308:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:308:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n+cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:340:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:340:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:349:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:349:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:354:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:358:21 clippy::doc_markdown \"you should put `RunCustomBuild` between ticks in the documentation\"\n cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:361:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:374:43 clippy::doc_markdown \"you should put `RunCustomBuild` between ticks in the documentation\"\n cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:378:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:383:41 clippy::doc_markdown \"you should put `RunCustomBuild` between ticks in the documentation\"\n+cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:384:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:384:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:391:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/compiler/context/mod.rs:397:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n@@ -162,8 +170,10 @@ cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:353:56 clippy::manual_strip\n cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:448:27 clippy::needless_pass_by_value \"this argument is passed by value, but not consumed in the function body\"\n cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:464:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:481:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:481:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:48:56 clippy::doc_markdown \"you should put `RunCustomBuild` between ticks in the documentation\"\n cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:561:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:561:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:567:20 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:576:28 clippy::shadow_unrelated \"`mut value` is being shadowed\"\n cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:606:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n@@ -255,6 +265,7 @@ cargo-0.49.0/src/cargo/core/compiler/standard_lib.rs:134:1 clippy::missing_error\n cargo-0.49.0/src/cargo/core/compiler/standard_lib.rs:16:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/compiler/standard_lib.rs:30:28 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/core/compiler/standard_lib.rs:34:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/compiler/standard_lib.rs:34:1 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/compiler/timings.rs:16:1 clippy::struct_excessive_bools \"more than 3 bools in a struct\"\n cargo-0.49.0/src/cargo/core/compiler/timings.rs:192:64 clippy::needless_pass_by_value \"this argument is passed by value, but not consumed in the function body\"\n cargo-0.49.0/src/cargo/core/compiler/timings.rs:212:58 clippy::needless_pass_by_value \"this argument is passed by value, but not consumed in the function body\"\n@@ -279,6 +290,7 @@ cargo-0.49.0/src/cargo/core/compiler/unit_graph.rs:65:1 clippy::missing_errors_d\n cargo-0.49.0/src/cargo/core/compiler/unit_graph.rs:65:1 clippy::module_name_repetitions \"item name ends with its containing module's name\"\n cargo-0.49.0/src/cargo/core/dependency.rs:157:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/dependency.rs:182:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/dependency.rs:203:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/dependency.rs:203:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/dependency.rs:224:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/dependency.rs:23:1 clippy::struct_excessive_bools \"more than 3 bools in a struct\"\n@@ -288,10 +300,13 @@ cargo-0.49.0/src/cargo/core/dependency.rs:274:5 clippy::must_use_candidate \"this\n cargo-0.49.0/src/cargo/core/dependency.rs:278:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/dependency.rs:287:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/dependency.rs:291:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+cargo-0.49.0/src/cargo/core/dependency.rs:296:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/dependency.rs:305:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/dependency.rs:311:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/dependency.rs:319:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+cargo-0.49.0/src/cargo/core/dependency.rs:323:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/dependency.rs:337:75 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n+cargo-0.49.0/src/cargo/core/dependency.rs:379:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/dependency.rs:397:56 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/core/dependency.rs:403:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/dependency.rs:408:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n@@ -419,6 +434,7 @@ cargo-0.49.0/src/cargo/core/package.rs:174:5 clippy::must_use_candidate \"this me\n cargo-0.49.0/src/cargo/core/package.rs:182:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/package.rs:186:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/package.rs:190:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+cargo-0.49.0/src/cargo/core/package.rs:194:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/package.rs:194:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/package.rs:198:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/package.rs:202:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n@@ -436,10 +452,12 @@ cargo-0.49.0/src/cargo/core/package.rs:287:1 clippy::module_name_repetitions \"it\n cargo-0.49.0/src/cargo/core/package.rs:385:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/package.rs:421:5 clippy::needless_lifetimes \"explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\"\n cargo-0.49.0/src/cargo/core/package.rs:425:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/package.rs:425:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/package.rs:452:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/package.rs:453:60 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/core/package.rs:459:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/package.rs:473:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/package.rs:552:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/package.rs:587:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/package.rs:588:9 clippy::needless_question_mark \"Question mark operator is useless here\"\n cargo-0.49.0/src/cargo/core/package.rs:682:46 clippy::cast_possible_truncation \"casting `f64` to `u64` may truncate the value\"\n@@ -450,6 +468,7 @@ cargo-0.49.0/src/cargo/core/package.rs:731:5 clippy::missing_errors_doc \"docs fo\n cargo-0.49.0/src/cargo/core/package.rs:790:13 clippy::single_match_else \"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\"\n cargo-0.49.0/src/cargo/core/package.rs:988:9 clippy::single_match_else \"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\"\n cargo-0.49.0/src/cargo/core/package_id.rs:115:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/package_id.rs:124:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/package_id.rs:124:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/package_id.rs:139:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/package_id.rs:142:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n@@ -468,21 +487,25 @@ cargo-0.49.0/src/cargo/core/package_id_spec.rs:179:5 clippy::missing_errors_doc\n cargo-0.49.0/src/cargo/core/package_id_spec.rs:212:9 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n cargo-0.49.0/src/cargo/core/package_id_spec.rs:231:9 clippy::single_match_else \"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\"\n cargo-0.49.0/src/cargo/core/package_id_spec.rs:51:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/package_id_spec.rs:51:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/package_id_spec.rs:77:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/package_id_spec.rs:88:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+cargo-0.49.0/src/cargo/core/profiles.rs:1004:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/profiles.rs:1004:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/profiles.rs:1014:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/profiles.rs:1018:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/profiles.rs:1028:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/profiles.rs:106:9 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n cargo-0.49.0/src/cargo/core/profiles.rs:143:5 clippy::unnecessary_wraps \"this function's return value is unnecessarily wrapped by `Result`\"\n+cargo-0.49.0/src/cargo/core/profiles.rs:286:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/profiles.rs:286:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/profiles.rs:294:40 clippy::if_not_else \"unnecessary boolean `not` operation\"\n cargo-0.49.0/src/cargo/core/profiles.rs:30:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/profiles.rs:342:25 clippy::shadow_unrelated \"`maker` is being shadowed\"\n cargo-0.49.0/src/cargo/core/profiles.rs:370:41 clippy::unused_self \"unused `self` argument\"\n cargo-0.49.0/src/cargo/core/profiles.rs:370:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/profiles.rs:372:9 clippy::field_reassign_with_default \"field assignment outside of initializer for an instance created with Default::default()\"\n+cargo-0.49.0/src/cargo/core/profiles.rs:382:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/profiles.rs:382:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/profiles.rs:383:28 clippy::if_not_else \"unnecessary boolean `not` operation\"\n cargo-0.49.0/src/cargo/core/profiles.rs:397:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n@@ -499,7 +522,9 @@ cargo-0.49.0/src/cargo/core/registry.rs:19:5 clippy::missing_errors_doc \"docs fo\n cargo-0.49.0/src/cargo/core/registry.rs:240:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/registry.rs:26:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/registry.rs:344:49 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n+cargo-0.49.0/src/cargo/core/registry.rs:358:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/registry.rs:369:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+cargo-0.49.0/src/cargo/core/registry.rs:424:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/registry.rs:424:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/registry.rs:49:1 clippy::module_name_repetitions \"item name ends with its containing module's name\"\n cargo-0.49.0/src/cargo/core/registry.rs:520:17 clippy::single_match_else \"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\"\n@@ -513,6 +538,7 @@ cargo-0.49.0/src/cargo/core/resolver/context.rs:274:53 clippy::redundant_closure\n cargo-0.49.0/src/cargo/core/resolver/context.rs:42:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n cargo-0.49.0/src/cargo/core/resolver/context.rs:74:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/resolver/encode.rs:156:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/resolver/encode.rs:156:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/resolver/encode.rs:156:5 clippy::too_many_lines \"this function has too many lines (164/100)\"\n cargo-0.49.0/src/cargo/core/resolver/encode.rs:339:17 clippy::match_wildcard_for_single_variants \"wildcard match will miss any future added variants\"\n cargo-0.49.0/src/cargo/core/resolver/encode.rs:438:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n@@ -570,6 +596,7 @@ cargo-0.49.0/src/cargo/core/resolver/resolve.rs:255:5 clippy::must_use_candidate\n cargo-0.49.0/src/cargo/core/resolver/resolve.rs:259:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/resolver/resolve.rs:263:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/resolver/resolve.rs:269:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+cargo-0.49.0/src/cargo/core/resolver/resolve.rs:273:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/resolver/resolve.rs:273:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/resolver/resolve.rs:274:9 clippy::map_unwrap_or \"called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead\"\n cargo-0.49.0/src/cargo/core/resolver/resolve.rs:280:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n@@ -611,6 +638,7 @@ cargo-0.49.0/src/cargo/core/shell.rs:282:5 clippy::missing_errors_doc \"docs for\n cargo-0.49.0/src/cargo/core/shell.rs:314:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/shell.rs:322:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/shell.rs:330:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/shell.rs:345:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/shell.rs:98:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/source/mod.rs:103:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/source/mod.rs:247:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n@@ -630,6 +658,7 @@ cargo-0.49.0/src/cargo/core/source/mod.rs:63:5 clippy::missing_errors_doc \"docs\n cargo-0.49.0/src/cargo/core/source/mod.rs:74:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/source/mod.rs:83:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/source/source_id.rs:107:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/source/source_id.rs:107:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/source/source_id.rs:128:50 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/core/source/source_id.rs:147:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/source/source_id.rs:156:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n@@ -640,6 +669,7 @@ cargo-0.49.0/src/cargo/core/source/source_id.rs:171:19 clippy::doc_markdown \"you\n cargo-0.49.0/src/cargo/core/source/source_id.rs:172:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/source/source_id.rs:178:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/source/source_id.rs:187:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/source/source_id.rs:187:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/source/source_id.rs:18:74 clippy::default_trait_access \"calling `std::sync::Mutex::default()` is more clear than this expression\"\n cargo-0.49.0/src/cargo/core/source/source_id.rs:195:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/source/source_id.rs:207:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n@@ -652,10 +682,12 @@ cargo-0.49.0/src/cargo/core/source/source_id.rs:241:5 clippy::must_use_candidate\n cargo-0.49.0/src/cargo/core/source/source_id.rs:252:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/source/source_id.rs:257:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/source/source_id.rs:262:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/source/source_id.rs:262:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/source/source_id.rs:305:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/source/source_id.rs:310:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/source/source_id.rs:318:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/source/source_id.rs:326:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+cargo-0.49.0/src/cargo/core/source/source_id.rs:338:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/source/source_id.rs:355:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/core/source/source_id.rs:393:61 clippy::match_same_arms \"this `match` has identical arm bodies\"\n cargo-0.49.0/src/cargo/core/source/source_id.rs:394:42 clippy::match_same_arms \"this `match` has identical arm bodies\"\n@@ -730,8 +762,10 @@ cargo-0.49.0/src/cargo/core/workspace.rs:150:5 clippy::missing_errors_doc \"docs\n cargo-0.49.0/src/cargo/core/workspace.rs:159:16 clippy::redundant_else \"redundant else block\"\n cargo-0.49.0/src/cargo/core/workspace.rs:197:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/workspace.rs:225:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/workspace.rs:225:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/workspace.rs:255:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/workspace.rs:267:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/workspace.rs:317:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/workspace.rs:329:37 clippy::doc_markdown \"you should put `VirtualManifest` between ticks in the documentation\"\n cargo-0.49.0/src/cargo/core/workspace.rs:410:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/workspace.rs:440:9 clippy::unnecessary_wraps \"this function's return value is unnecessarily wrapped by `Result`\"\n@@ -742,9 +776,12 @@ cargo-0.49.0/src/cargo/core/workspace.rs:615:22 clippy::redundant_closure_for_me\n cargo-0.49.0/src/cargo/core/workspace.rs:762:27 clippy::single_match_else \"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\"\n cargo-0.49.0/src/cargo/core/workspace.rs:784:17 clippy::if_not_else \"unnecessary boolean `not` operation\"\n cargo-0.49.0/src/cargo/core/workspace.rs:849:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/workspace.rs:849:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/core/workspace.rs:893:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/core/workspace.rs:906:24 clippy::redundant_else \"redundant else block\"\n cargo-0.49.0/src/cargo/core/workspace.rs:932:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/core/workspace.rs:932:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n+cargo-0.49.0/src/cargo/lib.rs:177:1 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/lib.rs:177:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/lib.rs:180:36 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/lib.rs:180:36 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n@@ -771,6 +808,7 @@ cargo-0.49.0/src/cargo/ops/cargo_compile.rs:249:1 clippy::missing_errors_doc \"do\n cargo-0.49.0/src/cargo/ops/cargo_compile.rs:258:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/ops/cargo_compile.rs:267:16 clippy::needless_question_mark \"Question mark operator is useless here\"\n cargo-0.49.0/src/cargo/ops/cargo_compile.rs:275:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/ops/cargo_compile.rs:275:1 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/ops/cargo_compile.rs:275:1 clippy::too_many_lines \"this function has too many lines (219/100)\"\n cargo-0.49.0/src/cargo/ops/cargo_compile.rs:468:9 clippy::default_trait_access \"calling `std::collections::HashMap::default()` is more clear than this expression\"\n cargo-0.49.0/src/cargo/ops/cargo_compile.rs:548:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n@@ -786,6 +824,7 @@ cargo-0.49.0/src/cargo/ops/cargo_compile.rs:612:21 clippy::doc_markdown \"you sho\n cargo-0.49.0/src/cargo/ops/cargo_compile.rs:613:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/ops/cargo_compile.rs:618:9 clippy::similar_names \"binding's name is too similar to existing binding\"\n cargo-0.49.0/src/cargo/ops/cargo_compile.rs:641:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+cargo-0.49.0/src/cargo/ops/cargo_compile.rs:652:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/ops/cargo_compile.rs:652:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/ops/cargo_compile.rs:655:50 clippy::match_same_arms \"this `match` has identical arm bodies\"\n cargo-0.49.0/src/cargo/ops/cargo_compile.rs:673:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n@@ -801,6 +840,7 @@ cargo-0.49.0/src/cargo/ops/cargo_generate_lockfile.rs:160:5 clippy::items_after_\n cargo-0.49.0/src/cargo/ops/cargo_generate_lockfile.rs:175:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n cargo-0.49.0/src/cargo/ops/cargo_generate_lockfile.rs:22:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/ops/cargo_generate_lockfile.rs:37:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/ops/cargo_generate_lockfile.rs:37:1 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/ops/cargo_generate_lockfile.rs:37:1 clippy::too_many_lines \"this function has too many lines (171/100)\"\n cargo-0.49.0/src/cargo/ops/cargo_install.rs:13:5 clippy::wildcard_imports \"usage of wildcard import\"\n cargo-0.49.0/src/cargo/ops/cargo_install.rs:148:1 clippy::fn_params_excessive_bools \"more than 3 bools in function parameters\"\n@@ -815,6 +855,7 @@ cargo-0.49.0/src/cargo/ops/cargo_install.rs:37:1 clippy::missing_errors_doc \"doc\n cargo-0.49.0/src/cargo/ops/cargo_install.rs:454:22 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/ops/cargo_install.rs:483:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n cargo-0.49.0/src/cargo/ops/cargo_install.rs:683:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/ops/cargo_install.rs:708:5 clippy::manual_flatten \"unnecessary `if let` since only the `Some` variant of the iterator element is used\"\n cargo-0.49.0/src/cargo/ops/cargo_new.rs:101:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/ops/cargo_new.rs:245:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n cargo-0.49.0/src/cargo/ops/cargo_new.rs:251:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n@@ -843,6 +884,7 @@ cargo-0.49.0/src/cargo/ops/cargo_pkgid.rs:5:1 clippy::missing_errors_doc \"docs f\n cargo-0.49.0/src/cargo/ops/cargo_read_manifest.rs:14:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/ops/cargo_read_manifest.rs:171:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n cargo-0.49.0/src/cargo/ops/cargo_read_manifest.rs:37:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/ops/cargo_read_manifest.rs:37:1 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/ops/cargo_read_manifest.rs:57:49 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/ops/cargo_read_manifest.rs:69:37 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/ops/cargo_run.rs:25:24 clippy::if_not_else \"unnecessary boolean `not` operation\"\n@@ -851,6 +893,7 @@ cargo-0.49.0/src/cargo/ops/cargo_run.rs:37:16 clippy::redundant_else \"redundant\n cargo-0.49.0/src/cargo/ops/cargo_run.rs:53:9 clippy::if_not_else \"unnecessary boolean `not` operation\"\n cargo-0.49.0/src/cargo/ops/cargo_run.rs:65:16 clippy::redundant_else \"redundant else block\"\n cargo-0.49.0/src/cargo/ops/cargo_run.rs:9:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/ops/cargo_run.rs:9:1 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/ops/cargo_test.rs:16:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/ops/cargo_test.rs:43:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/ops/cargo_test.rs:84:17 clippy::similar_names \"binding's name is too similar to existing binding\"\n@@ -909,6 +952,7 @@ cargo-0.49.0/src/cargo/ops/registry.rs:505:38 clippy::default_trait_access \"call\n cargo-0.49.0/src/cargo/ops/registry.rs:510:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/ops/registry.rs:529:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n cargo-0.49.0/src/cargo/ops/registry.rs:53:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/ops/registry.rs:53:1 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/ops/registry.rs:573:22 clippy::match_same_arms \"this `match` has identical arm bodies\"\n cargo-0.49.0/src/cargo/ops/registry.rs:608:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/ops/registry.rs:621:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n@@ -923,6 +967,7 @@ cargo-0.49.0/src/cargo/ops/registry.rs:794:16 clippy::single_match_else \"you see\n cargo-0.49.0/src/cargo/ops/registry.rs:828:14 clippy::doc_markdown \"you should put `SourceId` between ticks in the documentation\"\n cargo-0.49.0/src/cargo/ops/registry.rs:848:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/ops/resolve.rs:199:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/ops/resolve.rs:199:1 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/ops/resolve.rs:199:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n cargo-0.49.0/src/cargo/ops/resolve.rs:199:1 clippy::too_many_lines \"this function has too many lines (137/100)\"\n cargo-0.49.0/src/cargo/ops/resolve.rs:241:28 clippy::single_match_else \"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\"\n@@ -953,6 +998,7 @@ cargo-0.49.0/src/cargo/ops/tree/mod.rs:360:30 clippy::match_same_arms \"this `mat\n cargo-0.49.0/src/cargo/ops/tree/mod.rs:58:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/ops/vendor.rs:14:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n cargo-0.49.0/src/cargo/ops/vendor.rs:21:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/ops/vendor.rs:21:1 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/ops/vendor.rs:314:34 clippy::match_same_arms \"this `match` has identical arm bodies\"\n cargo-0.49.0/src/cargo/ops/vendor.rs:320:29 clippy::case_sensitive_file_extension_comparisons \"case-sensitive file extension comparison\"\n cargo-0.49.0/src/cargo/ops/vendor.rs:320:60 clippy::case_sensitive_file_extension_comparisons \"case-sensitive file extension comparison\"\n@@ -971,8 +1017,10 @@ cargo-0.49.0/src/cargo/sources/directory.rs:14:1 clippy::module_name_repetitions\n cargo-0.49.0/src/cargo/sources/directory.rs:90:56 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/sources/git/source.rs:14:1 clippy::module_name_repetitions \"item name ends with its containing module's name\"\n cargo-0.49.0/src/cargo/sources/git/source.rs:25:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/sources/git/source.rs:25:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/sources/git/source.rs:49:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/sources/git/source.rs:53:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/sources/git/source.rs:53:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/sources/git/source.rs:69:20 clippy::comparison_to_empty \"comparison to empty slice\"\n cargo-0.49.0/src/cargo/sources/git/utils.rs:1025:19 clippy::single_match_else \"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\"\n cargo-0.49.0/src/cargo/sources/git/utils.rs:1157:36 clippy::case_sensitive_file_extension_comparisons \"case-sensitive file extension comparison\"\n@@ -984,6 +1032,7 @@ cargo-0.49.0/src/cargo/sources/git/utils.rs:184:5 clippy::missing_errors_doc \"do\n cargo-0.49.0/src/cargo/sources/git/utils.rs:188:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/sources/git/utils.rs:242:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/sources/git/utils.rs:253:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/sources/git/utils.rs:253:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/sources/git/utils.rs:262:13 clippy::if_not_else \"unnecessary boolean `not` operation\"\n cargo-0.49.0/src/cargo/sources/git/utils.rs:289:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/sources/git/utils.rs:294:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n@@ -1013,6 +1062,7 @@ cargo-0.49.0/src/cargo/sources/path.rs:429:5 clippy::missing_errors_doc \"docs fo\n cargo-0.49.0/src/cargo/sources/path.rs:460:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/sources/path.rs:473:43 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/sources/path.rs:482:43 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n+cargo-0.49.0/src/cargo/sources/path.rs:55:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/sources/path.rs:63:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/sources/path.rs:77:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/sources/path.rs:98:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n@@ -1046,6 +1096,7 @@ cargo-0.49.0/src/cargo/sources/registry/remote.rs:72:13 clippy::single_match_els\n cargo-0.49.0/src/cargo/sources/replaced.rs:12:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/sources/replaced.rs:5:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n cargo-0.49.0/src/cargo/util/canonical_url.rs:19:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/util/canonical_url.rs:19:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/canonical_url.rs:50:41 clippy::case_sensitive_file_extension_comparisons \"case-sensitive file extension comparison\"\n cargo-0.49.0/src/cargo/util/canonical_url.rs:65:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/command_prelude.rs:218:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n@@ -1091,6 +1142,7 @@ cargo-0.49.0/src/cargo/util/config/mod.rs:100:71 clippy::doc_markdown \"you shoul\n cargo-0.49.0/src/cargo/util/config/mod.rs:1049:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:1064:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:1090:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/util/config/mod.rs:1090:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:1166:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:1179:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:1181:33 clippy::needless_question_mark \"Question mark operator is useless here\"\n@@ -1105,6 +1157,7 @@ cargo-0.49.0/src/cargo/util/config/mod.rs:1225:5 clippy::missing_errors_doc \"doc\n cargo-0.49.0/src/cargo/util/config/mod.rs:1229:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:124:1 clippy::struct_excessive_bools \"more than 3 bools in a struct\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:1254:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/util/config/mod.rs:1263:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:1279:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:1281:9 clippy::single_match_else \"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:1323:9 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n@@ -1120,6 +1173,7 @@ cargo-0.49.0/src/cargo/util/config/mod.rs:1588:5 clippy::must_use_candidate \"thi\n cargo-0.49.0/src/cargo/util/config/mod.rs:1598:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:1619:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:1623:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/util/config/mod.rs:1623:1 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:1623:64 clippy::needless_pass_by_value \"this argument is passed by value, but not consumed in the function body\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:1649:9 clippy::option_if_let_else \"use Option::map_or_else instead of an if let/else\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:1699:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n@@ -1151,24 +1205,26 @@ cargo-0.49.0/src/cargo/util/config/mod.rs:699:5 clippy::fn_params_excessive_bool\n cargo-0.49.0/src/cargo/util/config/mod.rs:699:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:719:58 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/util/config/mod.rs:816:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n-cargo-0.49.0/src/cargo/util/config/mod.rs:875:36 clippy::similar_names \"binding's name is too similar to existing binding\"\n-cargo-0.49.0/src/cargo/util/config/mod.rs:876:37 clippy::similar_names \"binding's name is too similar to existing binding\"\n cargo-0.49.0/src/cargo/util/config/path.rs:10:1 clippy::module_name_repetitions \"item name ends with its containing module's name\"\n cargo-0.49.0/src/cargo/util/config/path.rs:14:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/config/path.rs:48:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n cargo-0.49.0/src/cargo/util/config/target.rs:12:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n cargo-0.49.0/src/cargo/util/config/target.rs:24:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n cargo-0.49.0/src/cargo/util/config/value.rs:29:1 clippy::module_name_repetitions \"item name ends with its containing module's name\"\n+cargo-0.49.0/src/cargo/util/config/value.rs:70:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/config/value.rs:80:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/config/value.rs:81:9 clippy::match_like_matches_macro \"match expression looks like `matches!` macro\"\n cargo-0.49.0/src/cargo/util/cpu.rs:11:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/cpu.rs:22:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/cpu.rs:82:25 clippy::cast_precision_loss \"casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\"\n cargo-0.49.0/src/cargo/util/cpu.rs:82:9 clippy::cast_precision_loss \"casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\"\n cargo-0.49.0/src/cargo/util/dependency_queue.rs:109:27 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n+cargo-0.49.0/src/cargo/util/dependency_queue.rs:125:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/dependency_queue.rs:151:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/dependency_queue.rs:156:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+cargo-0.49.0/src/cargo/util/dependency_queue.rs:168:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/dependency_queue.rs:46:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+cargo-0.49.0/src/cargo/util/dependency_queue.rs:66:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/dependency_queue.rs:91:9 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n cargo-0.49.0/src/cargo/util/diagnostic_server.rs:218:1 clippy::module_name_repetitions \"item name ends with its containing module's name\"\n cargo-0.49.0/src/cargo/util/diagnostic_server.rs:230:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n@@ -1182,6 +1238,7 @@ cargo-0.49.0/src/cargo/util/errors.rs:143:5 clippy::must_use_candidate \"this met\n cargo-0.49.0/src/cargo/util/errors.rs:150:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/errors.rs:15:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/errors.rs:237:5 clippy::pub_enum_variant_names \"variant name ends with the enum's name\"\n+cargo-0.49.0/src/cargo/util/errors.rs:245:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/errors.rs:245:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/errors.rs:321:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/errors.rs:328:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n@@ -1199,15 +1256,19 @@ cargo-0.49.0/src/cargo/util/flock.rs:150:5 clippy::missing_errors_doc \"docs for\n cargo-0.49.0/src/cargo/util/flock.rs:156:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/flock.rs:170:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/flock.rs:192:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/util/flock.rs:29:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/flock.rs:29:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/flock.rs:321:5 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n cargo-0.49.0/src/cargo/util/flock.rs:335:23 clippy::cast_possible_truncation \"casting `i64` to `u32` may truncate the value\"\n cargo-0.49.0/src/cargo/util/flock.rs:335:23 clippy::cast_sign_loss \"casting `i64` to `u32` may lose the sign of the value\"\n cargo-0.49.0/src/cargo/util/flock.rs:335:44 clippy::cast_possible_truncation \"casting `i64` to `u32` may truncate the value\"\n cargo-0.49.0/src/cargo/util/flock.rs:379:35 clippy::match_same_arms \"this `match` has identical arm bodies\"\n+cargo-0.49.0/src/cargo/util/flock.rs:37:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/flock.rs:37:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+cargo-0.49.0/src/cargo/util/flock.rs:43:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/flock.rs:43:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/flock.rs:52:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/util/flock.rs:52:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/graph.rs:10:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/graph.rs:41:51 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/util/graph.rs:45:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n@@ -1226,6 +1287,7 @@ cargo-0.49.0/src/cargo/util/hex.rs:8:9 clippy::cast_possible_truncation \"casting\n cargo-0.49.0/src/cargo/util/hex.rs:9:9 clippy::cast_possible_truncation \"casting `u64` to `u8` may truncate the value\"\n cargo-0.49.0/src/cargo/util/important_paths.rs:23:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/important_paths.rs:6:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/util/interning.rs:66:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/interning.rs:66:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/interning.rs:77:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/into_url.rs:10:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n@@ -1268,7 +1330,9 @@ cargo-0.49.0/src/cargo/util/paths.rs:415:1 clippy::missing_errors_doc \"docs for\n cargo-0.49.0/src/cargo/util/paths.rs:445:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/paths.rs:459:45 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/util/paths.rs:469:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/util/paths.rs:469:1 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/paths.rs:54:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n+cargo-0.49.0/src/cargo/util/paths.rs:61:1 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/paths.rs:61:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/paths.rs:63:19 clippy::option_if_let_else \"use Option::map_or_else instead of an if let/else\"\n cargo-0.49.0/src/cargo/util/paths.rs:88:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n@@ -1281,6 +1345,7 @@ cargo-0.49.0/src/cargo/util/process_builder.rs:152:5 clippy::missing_errors_doc\n cargo-0.49.0/src/cargo/util/process_builder.rs:185:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/process_builder.rs:190:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/process_builder.rs:218:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/util/process_builder.rs:218:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/process_builder.rs:307:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/process_builder.rs:343:39 clippy::needless_pass_by_value \"this argument is passed by value, but not consumed in the function body\"\n cargo-0.49.0/src/cargo/util/progress.rs:122:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n@@ -1300,16 +1365,22 @@ cargo-0.49.0/src/cargo/util/progress.rs:282:9 clippy::single_char_add_str \"calli\n cargo-0.49.0/src/cargo/util/progress.rs:89:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/progress.rs:97:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/queue.rs:25:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+cargo-0.49.0/src/cargo/util/queue.rs:36:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n+cargo-0.49.0/src/cargo/util/queue.rs:42:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n+cargo-0.49.0/src/cargo/util/queue.rs:52:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n+cargo-0.49.0/src/cargo/util/queue.rs:69:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/read2.rs:11:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/read2.rs:31:17 clippy::similar_names \"binding's name is too similar to existing binding\"\n cargo-0.49.0/src/cargo/util/restricted_names.rs:13:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/restricted_names.rs:26:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/restricted_names.rs:35:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/restricted_names.rs:45:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/util/restricted_names.rs:87:1 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/restricted_names.rs:87:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/restricted_names.rs:89:21 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/util/restricted_names.rs:8:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n cargo-0.49.0/src/cargo/util/rustc.rs:103:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/util/rustc.rs:103:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/rustc.rs:114:5 clippy::doc_markdown \"you should put bare URLs between `<`/`>` or make a proper Markdown link\"\n cargo-0.49.0/src/cargo/util/rustc.rs:115:5 clippy::doc_markdown \"you should put bare URLs between `<`/`>` or make a proper Markdown link\"\n cargo-0.49.0/src/cargo/util/rustc.rs:162:17 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n@@ -1349,6 +1420,7 @@ cargo-0.49.0/src/cargo/util/toml/mod.rs:824:1 clippy::module_name_repetitions \"i\n cargo-0.49.0/src/cargo/util/toml/mod.rs:834:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n cargo-0.49.0/src/cargo/util/toml/mod.rs:83:42 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n cargo-0.49.0/src/cargo/util/toml/mod.rs:852:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+cargo-0.49.0/src/cargo/util/toml/mod.rs:852:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n cargo-0.49.0/src/cargo/util/toml/mod.rs:852:5 clippy::too_many_lines \"this function has too many lines (138/100)\"\n cargo-0.49.0/src/cargo/util/toml/mod.rs:962:9 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n cargo-0.49.0/src/cargo/util/toml/mod.rs:979:9 clippy::items_after_statements \"adding items after statements is confusing, since items exist from the start of the scope\"\n@@ -1394,6 +1466,7 @@ iron-0.6.1/src/middleware/mod.rs:173:5 clippy::missing_errors_doc \"docs for func\n iron-0.6.1/src/middleware/mod.rs:182:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n iron-0.6.1/src/middleware/mod.rs:192:1 clippy::module_name_repetitions \"item name ends with its containing module's name\"\n iron-0.6.1/src/middleware/mod.rs:217:25 clippy::doc_markdown \"you should put `ChainBuilder` between ticks in the documentation\"\n+iron-0.6.1/src/middleware/mod.rs:264:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n iron-0.6.1/src/middleware/mod.rs:328:20 clippy::similar_names \"binding's name is too similar to existing binding\"\n iron-0.6.1/src/middleware/mod.rs:360:16 clippy::similar_names \"binding's name is too similar to existing binding\"\n iron-0.6.1/src/middleware/mod.rs:368:33 clippy::similar_names \"binding's name is too similar to existing binding\"\n@@ -1424,8 +1497,11 @@ iron-0.6.1/src/request/url.rs:22:5 clippy::missing_errors_doc \"docs for function\n iron-0.6.1/src/request/url.rs:31:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n iron-0.6.1/src/request/url.rs:47:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n iron-0.6.1/src/request/url.rs:52:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+iron-0.6.1/src/request/url.rs:57:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n iron-0.6.1/src/request/url.rs:57:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+iron-0.6.1/src/request/url.rs:63:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n iron-0.6.1/src/request/url.rs:63:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+iron-0.6.1/src/request/url.rs:73:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n iron-0.6.1/src/request/url.rs:73:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n iron-0.6.1/src/request/url.rs:83:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n iron-0.6.1/src/request/url.rs:96:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n@@ -1915,6 +1991,7 @@ log-0.4.11/src/lib.rs:1118:5 clippy::must_use_candidate \"this method could have\n log-0.4.11/src/lib.rs:1177:1 clippy::inline_always \"you have declared `#[inline(always)]` on `max_level`. This is usually a bad idea\"\n log-0.4.11/src/lib.rs:1178:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n log-0.4.11/src/lib.rs:1306:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+log-0.4.11/src/lib.rs:1306:1 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n log-0.4.11/src/lib.rs:1358:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n log-0.4.11/src/lib.rs:1359:5 clippy::if_not_else \"unnecessary `!=` operation\"\n log-0.4.11/src/lib.rs:1407:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n@@ -1923,6 +2000,7 @@ log-0.4.11/src/lib.rs:356:1 clippy::expl_impl_clone_on_copy \"you are implementin\n log-0.4.11/src/lib.rs:448:12 clippy::manual_range_contains \"manual `RangeInclusive::contains` implementation\"\n log-0.4.11/src/lib.rs:500:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n log-0.4.11/src/lib.rs:506:28 clippy::trivially_copy_pass_by_ref \"this argument (8 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)\"\n+log-0.4.11/src/lib.rs:506:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n log-0.4.11/src/lib.rs:506:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n log-0.4.11/src/lib.rs:520:27 clippy::derive_hash_xor_eq \"you are deriving `Hash` but have implemented `PartialEq` explicitly\"\n log-0.4.11/src/lib.rs:538:1 clippy::expl_impl_clone_on_copy \"you are implementing `Clone` explicitly on a `Copy` type\"\n@@ -2009,10 +2087,66 @@ proc-macro2-1.0.24/src/parse.rs:808:15 clippy::explicit_iter_loop \"it is more co\n proc-macro2-1.0.24/src/wrapper.rs:415:24 clippy::trivially_copy_pass_by_ref \"this argument (4 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)\"\n proc-macro2-1.0.24/src/wrapper.rs:429:23 clippy::trivially_copy_pass_by_ref \"this argument (4 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)\"\n proc-macro2-1.0.24/src/wrapper.rs:492:17 clippy::trivially_copy_pass_by_ref \"this argument (4 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)\"\n+puffin-02dd4a3/puffin-imgui/src/ui.rs:158:15 clippy::cast_precision_loss \"casting `i64` to `f32` causes a loss of precision (`i64` is 64 bits wide, but `f32`'s mantissa is only 23 bits wide)\"\n+puffin-02dd4a3/puffin-imgui/src/ui.rs:175:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+puffin-02dd4a3/puffin-imgui/src/ui.rs:183:5 clippy::too_many_lines \"this function has too many lines (115/100)\"\n+puffin-02dd4a3/puffin-imgui/src/ui.rs:1:5 clippy::wildcard_imports \"usage of wildcard import\"\n+puffin-02dd4a3/puffin-imgui/src/ui.rs:207:16 clippy::collapsible_else_if \"this `else { if .. }` block can be collapsed\"\n+puffin-02dd4a3/puffin-imgui/src/ui.rs:271:67 clippy::cast_precision_loss \"casting `i64` to `f32` causes a loss of precision (`i64` is 64 bits wide, but `f32`'s mantissa is only 23 bits wide)\"\n+puffin-02dd4a3/puffin-imgui/src/ui.rs:2:5 clippy::wildcard_imports \"usage of wildcard import\"\n+puffin-02dd4a3/puffin-imgui/src/ui.rs:376:29 clippy::cast_precision_loss \"casting `i64` to `f32` causes a loss of precision (`i64` is 64 bits wide, but `f32`'s mantissa is only 23 bits wide)\"\n+puffin-02dd4a3/puffin-imgui/src/ui.rs:381:44 clippy::cast_precision_loss \"casting `i64` to `f32` causes a loss of precision (`i64` is 64 bits wide, but `f32`'s mantissa is only 23 bits wide)\"\n+puffin-02dd4a3/puffin-imgui/src/ui.rs:453:9 clippy::similar_names \"binding's name is too similar to existing binding\"\n+puffin-02dd4a3/puffin-imgui/src/ui.rs:540:14 clippy::cast_possible_truncation \"casting `f64` to `f32` may truncate the value\"\n+puffin-02dd4a3/puffin-imgui/src/ui.rs:551:5 clippy::cast_precision_loss \"casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\"\n+puffin-02dd4a3/puffin-imgui/src/ui.rs:584:39 clippy::cast_precision_loss \"casting `usize` to `f32` causes a loss of precision (`usize` is 32 or 64 bits wide, but `f32`'s mantissa is only 23 bits wide)\"\n+puffin-02dd4a3/puffin-imgui/src/ui.rs:59:26 clippy::unsafe_derive_deserialize \"you are deriving `serde::Deserialize` on a type that has methods using `unsafe`\"\n+puffin-02dd4a3/puffin-imgui/src/ui.rs:61:1 clippy::module_name_repetitions \"item name ends with its containing module's name\"\n+puffin-02dd4a3/puffin-imgui/src/ui.rs:627:39 clippy::cast_precision_loss \"casting `usize` to `f32` causes a loss of precision (`usize` is 32 or 64 bits wide, but `f32`'s mantissa is only 23 bits wide)\"\n+puffin-02dd4a3/puffin-imgui/src/ui.rs:674:47 clippy::cast_precision_loss \"casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\"\n+puffin-02dd4a3/puffin-imgui/src/ui.rs:690:9 clippy::cast_precision_loss \"casting `usize` to `f32` causes a loss of precision (`usize` is 32 or 64 bits wide, but `f32`'s mantissa is only 23 bits wide)\"\n+puffin-02dd4a3/puffin/src/data.rs:102:25 clippy::cast_possible_truncation \"casting `usize` to `u8` may truncate the value\"\n+puffin-02dd4a3/puffin/src/data.rs:112:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+puffin-02dd4a3/puffin/src/data.rs:116:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+puffin-02dd4a3/puffin/src/data.rs:137:24 clippy::match_same_arms \"this `match` has identical arm bodies\"\n+puffin-02dd4a3/puffin/src/data.rs:177:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+puffin-02dd4a3/puffin/src/data.rs:211:21 clippy::cast_possible_truncation \"casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers\"\n+puffin-02dd4a3/puffin/src/data.rs:24:5 clippy::wildcard_imports \"usage of wildcard import\"\n+puffin-02dd4a3/puffin/src/data.rs:75:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n+puffin-02dd4a3/puffin/src/lib.rs:113:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+puffin-02dd4a3/puffin/src/lib.rs:147:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+puffin-02dd4a3/puffin/src/lib.rs:147:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n+puffin-02dd4a3/puffin/src/lib.rs:165:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+puffin-02dd4a3/puffin/src/lib.rs:200:21 clippy::default_trait_access \"calling `Stream::default()` is more clear than this expression\"\n+puffin-02dd4a3/puffin/src/lib.rs:257:78 clippy::default_trait_access \"calling `std::cell::RefCell::default()` is more clear than this expression\"\n+puffin-02dd4a3/puffin/src/lib.rs:297:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+puffin-02dd4a3/puffin/src/lib.rs:302:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+puffin-02dd4a3/puffin/src/lib.rs:308:28 clippy::default_trait_access \"calling `FullProfileData::default()` is more clear than this expression\"\n+puffin-02dd4a3/puffin/src/lib.rs:316:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n+puffin-02dd4a3/puffin/src/lib.rs:321:5 clippy::cast_possible_truncation \"casting `u128` to `i64` may truncate the value\"\n+puffin-02dd4a3/puffin/src/lib.rs:348:28 clippy::default_trait_access \"calling `std::marker::PhantomData::default()` is more clear than this expression\"\n+puffin-02dd4a3/puffin/src/lib.rs:359:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n+puffin-02dd4a3/puffin/src/lib.rs:375:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n+puffin-02dd4a3/puffin/src/lib.rs:376:5 clippy::option_if_let_else \"use Option::map_or instead of an if let/else\"\n+puffin-02dd4a3/puffin/src/lib.rs:377:9 clippy::option_if_let_else \"use Option::map_or instead of an if let/else\"\n+puffin-02dd4a3/puffin/src/lib.rs:406:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n+puffin-02dd4a3/puffin/src/lib.rs:408:5 clippy::option_if_let_else \"use Option::map_or instead of an if let/else\"\n+puffin-02dd4a3/puffin/src/lib.rs:69:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+puffin-02dd4a3/puffin/src/lib.rs:73:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+puffin-02dd4a3/puffin/src/lib.rs:77:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+puffin-02dd4a3/puffin/src/merge.rs:21:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n+puffin-02dd4a3/puffin/src/merge.rs:28:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n+puffin-02dd4a3/puffin/src/merge.rs:28:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n+puffin-02dd4a3/puffin/src/merge.rs:35:1 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+puffin-02dd4a3/puffin/src/merge.rs:35:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n+puffin-02dd4a3/puffin/src/merge.rs:64:43 clippy::default_trait_access \"calling `std::vec::Vec::default()` is more clear than this expression\"\n+puffin-02dd4a3/puffin/src/merge.rs:65:54 clippy::default_trait_access \"calling `std::collections::HashMap::default()` is more clear than this expression\"\n+puffin-02dd4a3/puffin/src/merge.rs:9:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n quote-1.0.7/src/ext.rs:10:1 clippy::module_name_repetitions \"item name ends with its containing module's name\"\n quote-1.0.7/src/ext.rs:7:5 clippy::doc_markdown \"you should put `TokenStream` between ticks in the documentation\"\n quote-1.0.7/src/ident_fragment.rs:13:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n quote-1.0.7/src/ident_fragment.rs:51:31 clippy::manual_strip \"stripping a prefix manually\"\n+quote-1.0.7/src/runtime.rs:332:1 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n quote-1.0.7/src/runtime.rs:52:5 clippy::module_name_repetitions \"item name ends with its containing module's name\"\n quote-1.0.7/src/runtime.rs:63:5 clippy::module_name_repetitions \"item name ends with its containing module's name\"\n quote-1.0.7/src/runtime.rs:66:33 clippy::doc_markdown \"you should put `DoesNotHaveIter` between ticks in the documentation\"\n@@ -2049,6 +2183,7 @@ rand-0.7.3/src/distributions/binomial.rs:233:32 clippy::cast_precision_loss \"cas\n rand-0.7.3/src/distributions/binomial.rs:234:27 clippy::cast_precision_loss \"casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\"\n rand-0.7.3/src/distributions/binomial.rs:251:22 clippy::cast_sign_loss \"casting `i64` to `u64` may lose the sign of the value\"\n rand-0.7.3/src/distributions/binomial.rs:255:9 clippy::if_not_else \"unnecessary `!=` operation\"\n+rand-0.7.3/src/distributions/binomial.rs:35:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n rand-0.7.3/src/distributions/binomial.rs:35:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n rand-0.7.3/src/distributions/binomial.rs:45:17 clippy::cast_precision_loss \"casting `i64` to `f64` causes a loss of precision (`i64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\"\n rand-0.7.3/src/distributions/binomial.rs:46:5 clippy::cast_possible_truncation \"casting `f64` to `i64` may truncate the value\"\n@@ -2059,18 +2194,25 @@ rand-0.7.3/src/distributions/binomial.rs:81:21 clippy::cast_precision_loss \"cast\n rand-0.7.3/src/distributions/binomial.rs:82:32 clippy::cast_possible_truncation \"casting `u64` to `i32` may truncate the value\"\n rand-0.7.3/src/distributions/binomial.rs:88:26 clippy::cast_precision_loss \"casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\"\n rand-0.7.3/src/distributions/binomial.rs:99:21 clippy::cast_precision_loss \"casting `u64` to `f64` causes a loss of precision (`u64` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\"\n+rand-0.7.3/src/distributions/cauchy.rs:33:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n rand-0.7.3/src/distributions/cauchy.rs:33:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n rand-0.7.3/src/distributions/dirichlet.rs:52:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n rand-0.7.3/src/distributions/dirichlet.rs:64:32 clippy::unseparated_literal_suffix \"float type suffix should be separated by an underscore\"\n rand-0.7.3/src/distributions/dirichlet.rs:65:23 clippy::unseparated_literal_suffix \"float type suffix should be separated by an underscore\"\n+rand-0.7.3/src/distributions/exponential.rs:76:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n rand-0.7.3/src/distributions/exponential.rs:76:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n rand-0.7.3/src/distributions/float.rs:73:1 clippy::module_name_repetitions \"item name ends with its containing module's name\"\n rand-0.7.3/src/distributions/gamma.rs:13:5 clippy::enum_glob_use \"usage of wildcard import for enum variants\"\n rand-0.7.3/src/distributions/gamma.rs:14:5 clippy::enum_glob_use \"usage of wildcard import for enum variants\"\n+rand-0.7.3/src/distributions/gamma.rs:189:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n rand-0.7.3/src/distributions/gamma.rs:189:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+rand-0.7.3/src/distributions/gamma.rs:230:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n rand-0.7.3/src/distributions/gamma.rs:230:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+rand-0.7.3/src/distributions/gamma.rs:259:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n rand-0.7.3/src/distributions/gamma.rs:259:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+rand-0.7.3/src/distributions/gamma.rs:287:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n rand-0.7.3/src/distributions/gamma.rs:287:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+rand-0.7.3/src/distributions/gamma.rs:90:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n rand-0.7.3/src/distributions/gamma.rs:90:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n rand-0.7.3/src/distributions/integer.rs:23:9 clippy::cast_possible_truncation \"casting `u32` to `u8` may truncate the value\"\n rand-0.7.3/src/distributions/integer.rs:30:9 clippy::cast_possible_truncation \"casting `u32` to `u16` may truncate the value\"\n@@ -2084,6 +2226,7 @@ rand-0.7.3/src/distributions/normal.rs:47:25 clippy::unseparated_literal_suffix\n rand-0.7.3/src/distributions/normal.rs:48:25 clippy::unseparated_literal_suffix \"float type suffix should be separated by an underscore\"\n rand-0.7.3/src/distributions/other.rs:89:9 clippy::cast_possible_wrap \"casting `u32` to `i32` may wrap around the value\"\n rand-0.7.3/src/distributions/pareto.rs:32:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+rand-0.7.3/src/distributions/poisson.rs:35:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n rand-0.7.3/src/distributions/poisson.rs:35:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n rand-0.7.3/src/distributions/poisson.rs:87:30 clippy::cast_possible_truncation \"casting `f64` to `u64` may truncate the value\"\n rand-0.7.3/src/distributions/poisson.rs:87:30 clippy::cast_sign_loss \"casting `f64` to `u64` may lose the sign of the value\"\n@@ -2153,11 +2296,13 @@ rand-0.7.3/src/distributions/weighted/alias_method.rs:259:28 clippy::clone_on_co\n rand-0.7.3/src/distributions/weighted/alias_method.rs:296:9 clippy::map_clone \"you are using an explicit closure for copying elements\"\n rand-0.7.3/src/distributions/weighted/alias_method.rs:321:9 clippy::map_clone \"you are using an explicit closure for copying elements\"\n rand-0.7.3/src/distributions/weighted/alias_method.rs:78:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+rand-0.7.3/src/distributions/weighted/alias_method.rs:78:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n rand-0.7.3/src/distributions/weighted/alias_method.rs:78:5 clippy::too_many_lines \"this function has too many lines (106/100)\"\n rand-0.7.3/src/distributions/weighted/alias_method.rs:85:17 clippy::cast_possible_truncation \"casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers\"\n rand-0.7.3/src/distributions/weighted/alias_method.rs:87:31 clippy::map_unwrap_or \"called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\"\n rand-0.7.3/src/distributions/weighted/mod.rs:100:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n rand-0.7.3/src/distributions/weighted/mod.rs:144:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+rand-0.7.3/src/distributions/weighted/mod.rs:144:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n rand-0.7.3/src/distributions/weighted/mod.rs:169:16 clippy::int_plus_one \"unnecessary `>= y + 1` or `x - 1 >=`\"\n rand-0.7.3/src/distributions/weighted/mod.rs:386:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n rand-0.7.3/src/distributions/weighted/mod.rs:85:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n@@ -2188,6 +2333,7 @@ rand-0.7.3/src/rngs/std.rs:54:5 clippy::inline_always \"you have declared `#[inli\n rand-0.7.3/src/rngs/std.rs:63:5 clippy::inline_always \"you have declared `#[inline(always)]` on `from_seed`. This is usually a bad idea\"\n rand-0.7.3/src/rngs/std.rs:68:5 clippy::inline_always \"you have declared `#[inline(always)]` on `from_rng`. This is usually a bad idea\"\n rand-0.7.3/src/rngs/thread.rs:57:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n+rand-0.7.3/src/rngs/thread.rs:80:1 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n rand-0.7.3/src/rngs/thread.rs:80:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n rand-0.7.3/src/rngs/thread.rs:80:1 clippy::must_use_candidate \"this function could have a `#[must_use]` attribute\"\n rand-0.7.3/src/rngs/thread.rs:81:35 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n@@ -2198,6 +2344,7 @@ rand-0.7.3/src/seq/index.rs:139:13 clippy::enum_glob_use \"usage of wildcard impo\n rand-0.7.3/src/seq/index.rs:159:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n rand-0.7.3/src/seq/index.rs:171:13 clippy::enum_glob_use \"usage of wildcard import for enum variants\"\n rand-0.7.3/src/seq/index.rs:180:13 clippy::enum_glob_use \"usage of wildcard import for enum variants\"\n+rand-0.7.3/src/seq/index.rs:213:1 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n rand-0.7.3/src/seq/index.rs:223:18 clippy::cast_possible_truncation \"casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers\"\n rand-0.7.3/src/seq/index.rs:224:18 clippy::cast_possible_truncation \"casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers\"\n rand-0.7.3/src/seq/index.rs:233:25 clippy::cast_precision_loss \"casting `u32` to `f32` causes a loss of precision (`u32` is 32 bits wide, but `f32`'s mantissa is only 23 bits wide)\"\n@@ -2222,12 +2369,14 @@ rand-0.7.3/src/seq/mod.rs:45:4 clippy::needless_doctest_main \"needless `fn main`\n rand-0.7.3/src/seq/mod.rs:527:26 clippy::cast_possible_truncation \"casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers\"\n rand_core-0.6.0/src/block.rs:117:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n rand_core-0.6.0/src/block.rs:153:5 clippy::inline_always \"you have declared `#[inline(always)]` on `index`. This is usually a bad idea\"\n+rand_core-0.6.0/src/block.rs:168:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n rand_core-0.6.0/src/block.rs:230:5 clippy::inline_always \"you have declared `#[inline(always)]` on `try_fill_bytes`. This is usually a bad idea\"\n rand_core-0.6.0/src/block.rs:240:5 clippy::inline_always \"you have declared `#[inline(always)]` on `from_seed`. This is usually a bad idea\"\n rand_core-0.6.0/src/block.rs:245:5 clippy::inline_always \"you have declared `#[inline(always)]` on `seed_from_u64`. This is usually a bad idea\"\n rand_core-0.6.0/src/block.rs:250:5 clippy::inline_always \"you have declared `#[inline(always)]` on `from_rng`. This is usually a bad idea\"\n rand_core-0.6.0/src/block.rs:280:1 clippy::module_name_repetitions \"item name starts with its containing module's name\"\n rand_core-0.6.0/src/block.rs:319:5 clippy::inline_always \"you have declared `#[inline(always)]` on `index`. This is usually a bad idea\"\n+rand_core-0.6.0/src/block.rs:335:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n rand_core-0.6.0/src/block.rs:405:5 clippy::inline_always \"you have declared `#[inline(always)]` on `try_fill_bytes`. This is usually a bad idea\"\n rand_core-0.6.0/src/block.rs:415:5 clippy::inline_always \"you have declared `#[inline(always)]` on `from_seed`. This is usually a bad idea\"\n rand_core-0.6.0/src/block.rs:420:5 clippy::inline_always \"you have declared `#[inline(always)]` on `seed_from_u64`. This is usually a bad idea\"\n@@ -2237,6 +2386,8 @@ rand_core-0.6.0/src/block.rs:68:1 clippy::module_name_repetitions \"item name sta\n rand_core-0.6.0/src/error.rs:106:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n rand_core-0.6.0/src/error.rs:87:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n rand_core-0.6.0/src/error.rs:95:74 clippy::cast_possible_wrap \"casting `u32` to `i32` may wrap around the value\"\n+rand_core-0.6.0/src/le.rs:18:1 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n+rand_core-0.6.0/src/le.rs:27:1 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n rand_core-0.6.0/src/lib.rs:179:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n rand_core-0.6.0/src/lib.rs:301:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n rand_core-0.6.0/src/lib.rs:303:26 clippy::unreadable_literal \"long literal lacking separators\"\n@@ -2548,6 +2699,7 @@ regex-1.3.2/src/compile.rs:1040:38 clippy::cast_possible_truncation \"casting `u1\n regex-1.3.2/src/compile.rs:1051:25 clippy::unseparated_literal_suffix \"integer type suffix should be separated by an underscore\"\n regex-1.3.2/src/compile.rs:1071:8 clippy::cast_lossless \"casting `u32` to `u64` may become silently lossy if you later change the type\"\n regex-1.3.2/src/compile.rs:112:5 clippy::missing_errors_doc \"docs for function returning `Result` missing `# Errors` section\"\n+regex-1.3.2/src/compile.rs:112:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n regex-1.3.2/src/compile.rs:154:30 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n regex-1.3.2/src/compile.rs:156:30 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n regex-1.3.2/src/compile.rs:185:5 clippy::unnecessary_wraps \"this function's return value is unnecessarily wrapped by `Result`\"\n@@ -2877,6 +3029,7 @@ regex-1.3.2/src/re_bytes.rs:256:13 clippy::redundant_field_names \"redundant fiel\n regex-1.3.2/src/re_bytes.rs:29:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n regex-1.3.2/src/re_bytes.rs:35:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n regex-1.3.2/src/re_bytes.rs:42:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+regex-1.3.2/src/re_bytes.rs:483:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n regex-1.3.2/src/re_bytes.rs:48:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n regex-1.3.2/src/re_bytes.rs:558:29 clippy::doc_markdown \"you should put `shortest_match` between ticks in the documentation\"\n regex-1.3.2/src/re_bytes.rs:55:33 clippy::redundant_field_names \"redundant field names in struct initialization\"\n@@ -2917,6 +3070,7 @@ regex-1.3.2/src/re_unicode.rs:313:13 clippy::redundant_field_names \"redundant fi\n regex-1.3.2/src/re_unicode.rs:38:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n regex-1.3.2/src/re_unicode.rs:44:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n regex-1.3.2/src/re_unicode.rs:51:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n+regex-1.3.2/src/re_unicode.rs:533:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n regex-1.3.2/src/re_unicode.rs:57:5 clippy::must_use_candidate \"this method could have a `#[must_use]` attribute\"\n regex-1.3.2/src/re_unicode.rs:617:29 clippy::doc_markdown \"you should put `shortest_match` between ticks in the documentation\"\n regex-1.3.2/src/re_unicode.rs:631:29 clippy::doc_markdown \"you should put `is_match` between ticks in the documentation\"\n@@ -2960,10 +3114,10 @@ regex-1.3.2/src/utf8.rs:85:19 clippy::cast_lossless \"casting `u8` to `u32` may b\n regex-1.3.2/src/utf8.rs:92:23 clippy::unusual_byte_groupings \"digits of hex or binary literal not grouped by four\"\n regex-1.3.2/src/utf8.rs:92:9 clippy::unusual_byte_groupings \"digits of hex or binary literal not grouped by four\"\n regex-1.3.2/src/utf8.rs:97:16 clippy::unusual_byte_groupings \"digits of hex or binary literal not grouped by four\"\n-ripgrep-12.1.1//home/matthias/.rustup/toolchains/nightly-2021-01-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:14:27 clippy::match_same_arms \"this `match` has identical arm bodies\"\n-ripgrep-12.1.1//home/matthias/.rustup/toolchains/nightly-2021-01-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:14:27 clippy::match_same_arms \"this `match` has identical arm bodies\"\n-ripgrep-12.1.1//home/matthias/.rustup/toolchains/nightly-2021-01-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:14:27 clippy::match_same_arms \"this `match` has identical arm bodies\"\n-ripgrep-12.1.1//home/matthias/.rustup/toolchains/nightly-2021-01-15-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs:14:27 clippy::match_same_arms \"this `match` has identical arm bodies\"\n+ripgrep-12.1.1//home/matthias/.rustup/toolchains/nightly-2021-02-03-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:30:27 clippy::match_same_arms \"this `match` has identical arm bodies\"\n+ripgrep-12.1.1//home/matthias/.rustup/toolchains/nightly-2021-02-03-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:30:27 clippy::match_same_arms \"this `match` has identical arm bodies\"\n+ripgrep-12.1.1//home/matthias/.rustup/toolchains/nightly-2021-02-03-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:30:27 clippy::match_same_arms \"this `match` has identical arm bodies\"\n+ripgrep-12.1.1//home/matthias/.rustup/toolchains/nightly-2021-02-03-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:30:27 clippy::match_same_arms \"this `match` has identical arm bodies\"\n ripgrep-12.1.1/build.rs:133:19 clippy::option_as_ref_deref \"called `.as_ref().map(|x| &**x)` on an Option value. This can be done more directly by calling `githash.as_deref()` instead\"\n ripgrep-12.1.1/build.rs:18:18 clippy::single_match_else \"you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\"\n ripgrep-12.1.1/build.rs:225:14 clippy::redundant_closure_for_method_calls \"redundant closure found\"\n@@ -3064,11 +3218,17 @@ ripgrep-12.1.1/crates/core/subject.rs:20:1 clippy::module_name_repetitions \"item\n ripgrep-12.1.1/crates/core/subject.rs:4:1 clippy::single_component_path_imports \"this import is redundant\"\n syn-1.0.54/build.rs:1:null clippy::cargo_common_metadata \"package `syn` is missing `package.keywords` metadata\"\n syn-1.0.54/build.rs:1:null clippy::multiple_crate_versions \"could not read cargo metadata: `cargo metadata` exited with an error:  Downloading crates ...\\n  Downloaded syn-test-suite v0.0.0\\nerror: failed to verify the checksum of `syn-test-suite v0.0.0`\"\n+syn-1.0.54/src/generics.rs:174:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n syn-1.0.54/src/lib.rs:1:null clippy::cargo_common_metadata \"package `syn` is missing `package.keywords` metadata\"\n syn-1.0.54/src/lib.rs:1:null clippy::multiple_crate_versions \"could not read cargo metadata: `cargo metadata` exited with an error:  Downloading crates ...\\n  Downloaded syn-test-suite v0.0.0\\nerror: failed to verify the checksum of `syn-test-suite v0.0.0`\"\n syn-1.0.54/src/lit.rs:1397:40 clippy::redundant_else \"redundant else block\"\n syn-1.0.54/src/lit.rs:1405:28 clippy::redundant_else \"redundant else block\"\n syn-1.0.54/src/lit.rs:1485:32 clippy::redundant_else \"redundant else block\"\n+syn-1.0.54/src/lit.rs:343:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n+syn-1.0.54/src/lit.rs:437:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n+syn-1.0.54/src/lit.rs:916:9 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n+syn-1.0.54/src/token.rs:974:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n+syn-1.0.54/src/token.rs:996:5 clippy::missing_panics_doc \"docs for function which may panic missing `# Panics` section\"\n unicode-xid-0.2.1/src/lib.rs:1:null clippy::cargo_common_metadata \"package `unicode-xid` is missing `package.categories` metadata\"\n unicode-xid-0.2.1/src/lib.rs:56:11 clippy::upper_case_acronyms \"name `UnicodeXID` contains a capitalized acronym\"\n unicode-xid-0.2.1/src/lib.rs:57:64 clippy::doc_markdown \"you should put `XID_Start` between ticks in the documentation\"\n@@ -3266,6 +3426,7 @@ clippy::explicit_deref_methods 1\n clippy::from_iter_instead_of_collect 1\n clippy::from_over_into 1\n clippy::int_plus_one 1\n+clippy::manual_flatten 1\n clippy::manual_saturating_arithmetic 1\n clippy::mem_replace_with_default 1\n clippy::nonminimal_bool 1\n@@ -3279,6 +3440,7 @@ clippy::should_implement_trait 1\n clippy::stable_sort_primitive 1\n clippy::unit_arg 1\n clippy::unnecessary_lazy_evaluations 1\n+clippy::unsafe_derive_deserialize 1\n clippy::used_underscore_binding 1\n clippy::verbose_bit_mask 1\n clippy::while_let_on_iterator 1\n@@ -3306,7 +3468,6 @@ clippy::ptr_arg 3\n clippy::zero_ptr 3\n clippy::let_underscore_drop 4\n clippy::too_many_arguments 4\n-clippy::collapsible_else_if 5\n clippy::explicit_iter_loop 5\n clippy::field_reassign_with_default 5\n clippy::identity_op 5\n@@ -3315,6 +3476,7 @@ clippy::match_like_matches_macro 5\n clippy::needless_return 5\n clippy::new_without_default 5\n clippy::ptr_as_ptr 5\n+clippy::collapsible_else_if 6\n clippy::manual_strip 6\n clippy::non_ascii_literal 6\n clippy::single_component_path_imports 6\n@@ -3332,12 +3494,11 @@ clippy::missing_safety_doc 10\n clippy::needless_doctest_main 10\n clippy::multiple_crate_versions 11\n clippy::needless_lifetimes 12\n-clippy::option_if_let_else 12\n clippy::cargo_common_metadata 13\n clippy::shadow_unrelated 13\n clippy::linkedlist 14\n clippy::single_char_add_str 14\n-clippy::default_trait_access 16\n+clippy::option_if_let_else 15\n clippy::needless_pass_by_value 18\n clippy::upper_case_acronyms 18\n clippy::cast_possible_wrap 19\n@@ -3348,25 +3509,27 @@ clippy::unusual_byte_groupings 19\n clippy::map_unwrap_or 20\n clippy::struct_excessive_bools 20\n clippy::redundant_static_lifetimes 21\n+clippy::default_trait_access 22\n clippy::cast_lossless 23\n clippy::trivially_copy_pass_by_ref 26\n clippy::redundant_else 29\n-clippy::too_many_lines 31\n-clippy::cast_precision_loss 35\n+clippy::too_many_lines 32\n clippy::if_not_else 35\n clippy::enum_glob_use 40\n clippy::unseparated_literal_suffix 41\n+clippy::cast_precision_loss 44\n clippy::single_match_else 45\n clippy::inline_always 59\n-clippy::match_same_arms 64\n-clippy::similar_names 79\n-clippy::cast_possible_truncation 91\n+clippy::match_same_arms 65\n+clippy::similar_names 78\n+clippy::cast_possible_truncation 95\n+clippy::missing_panics_doc 108\n clippy::redundant_field_names 111\n clippy::redundant_closure_for_method_calls 135\n-clippy::module_name_repetitions 137\n clippy::items_after_statements 139\n-clippy::wildcard_imports 160\n+clippy::module_name_repetitions 142\n+clippy::wildcard_imports 163\n clippy::doc_markdown 178\n-clippy::missing_errors_doc 338\n+clippy::missing_errors_doc 343\n clippy::unreadable_literal 365\n-clippy::must_use_candidate 552\n+clippy::must_use_candidate 565", "previous_filename": "lintcheck-logs/logs.txt"}, {"sha": "d42fb5a68bca3dfd5327ca1aa7cb75488e642d3e", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n channel = \"nightly-2021-02-03\"\n-components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\", \"rustfmt\"]\n+components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\"]"}, {"sha": "d13a831f5ff7d45a7d408ceabda334ff1d80804b", "filename": "src/main.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -59,7 +59,6 @@ pub fn main() {\n }\n \n struct ClippyCmd {\n-    unstable_options: bool,\n     cargo_subcommand: &'static str,\n     args: Vec<String>,\n     clippy_args: Vec<String>,\n@@ -105,21 +104,12 @@ impl ClippyCmd {\n         }\n \n         ClippyCmd {\n-            unstable_options,\n             cargo_subcommand,\n             args,\n             clippy_args,\n         }\n     }\n \n-    fn path_env(&self) -> &'static str {\n-        if self.unstable_options {\n-            \"RUSTC_WORKSPACE_WRAPPER\"\n-        } else {\n-            \"RUSTC_WRAPPER\"\n-        }\n-    }\n-\n     fn path() -> PathBuf {\n         let mut path = env::current_exe()\n             .expect(\"current executable path invalid\")\n@@ -156,7 +146,7 @@ impl ClippyCmd {\n             .map(|arg| format!(\"{}__CLIPPY_HACKERY__\", arg))\n             .collect();\n \n-        cmd.env(self.path_env(), Self::path())\n+        cmd.env(\"RUSTC_WORKSPACE_WRAPPER\", Self::path())\n             .envs(ClippyCmd::target_dir())\n             .env(\"CLIPPY_ARGS\", clippy_args)\n             .arg(self.cargo_subcommand)\n@@ -195,7 +185,7 @@ mod tests {\n     #[should_panic]\n     fn fix_without_unstable() {\n         let args = \"cargo clippy --fix\".split_whitespace().map(ToString::to_string);\n-        let _ = ClippyCmd::new(args);\n+        ClippyCmd::new(args);\n     }\n \n     #[test]\n@@ -205,7 +195,6 @@ mod tests {\n             .map(ToString::to_string);\n         let cmd = ClippyCmd::new(args);\n         assert_eq!(\"fix\", cmd.cargo_subcommand);\n-        assert_eq!(\"RUSTC_WORKSPACE_WRAPPER\", cmd.path_env());\n         assert!(cmd.args.iter().any(|arg| arg.ends_with(\"unstable-options\")));\n     }\n \n@@ -232,16 +221,5 @@ mod tests {\n         let args = \"cargo clippy\".split_whitespace().map(ToString::to_string);\n         let cmd = ClippyCmd::new(args);\n         assert_eq!(\"check\", cmd.cargo_subcommand);\n-        assert_eq!(\"RUSTC_WRAPPER\", cmd.path_env());\n-    }\n-\n-    #[test]\n-    fn check_unstable() {\n-        let args = \"cargo clippy -Zunstable-options\"\n-            .split_whitespace()\n-            .map(ToString::to_string);\n-        let cmd = ClippyCmd::new(args);\n-        assert_eq!(\"check\", cmd.cargo_subcommand);\n-        assert_eq!(\"RUSTC_WORKSPACE_WRAPPER\", cmd.path_env());\n     }\n }"}, {"sha": "c0b40add1096d0654033524626bca9d687e349e5", "filename": "tests/compile-test.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -214,6 +214,7 @@ fn run_ui_cargo(config: &mut compiletest::Config) {\n                         Some(\"main.rs\") => {},\n                         _ => continue,\n                     }\n+                    set_var(\"CLIPPY_CONF_DIR\", case.path());\n                     let paths = compiletest::common::TestPaths {\n                         file: file_path,\n                         base: config.src_base.clone(),\n@@ -241,9 +242,11 @@ fn run_ui_cargo(config: &mut compiletest::Config) {\n     let tests = compiletest::make_tests(&config);\n \n     let current_dir = env::current_dir().unwrap();\n+    let conf_dir = var(\"CLIPPY_CONF_DIR\").unwrap_or_default();\n     let filter = env::var(\"TESTNAME\").ok();\n     let res = run_tests(&config, &filter, tests);\n     env::set_current_dir(current_dir).unwrap();\n+    set_var(\"CLIPPY_CONF_DIR\", conf_dir);\n \n     match res {\n         Ok(true) => {},"}, {"sha": "de4f04b24fc89cad7244c5b2b857a2a3ee630edb", "filename": "tests/ui-cargo/cargo_common_metadata/fail/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail%2Fclippy.toml?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1 @@\n+cargo-ignore-publish = true"}, {"sha": "7595696353cd44f2d710ce5dbb454f60460d7024", "filename": "tests/ui-cargo/cargo_common_metadata/fail_publish/Cargo.toml", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish%2FCargo.toml?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,6 @@\n+[package]\n+name = \"cargo_common_metadata\"\n+version = \"0.1.0\"\n+publish = [\"some-registry-name\"]\n+\n+[workspace]"}, {"sha": "27841e18aa9ef830cb1daf4080d0acd19a3b3c97", "filename": "tests/ui-cargo/cargo_common_metadata/fail_publish/src/main.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish%2Fsrc%2Fmain.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags: --crate-name=cargo_common_metadata\n+#![warn(clippy::cargo_common_metadata)]\n+\n+fn main() {}"}, {"sha": "c8ae6c820df9de4de3f3561451d27e97c9416563", "filename": "tests/ui-cargo/cargo_common_metadata/fail_publish/src/main.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish%2Fsrc%2Fmain.stderr?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,18 @@\n+error: package `cargo_common_metadata` is missing `package.authors` metadata\n+   |\n+   = note: `-D clippy::cargo-common-metadata` implied by `-D warnings`\n+\n+error: package `cargo_common_metadata` is missing `package.description` metadata\n+\n+error: package `cargo_common_metadata` is missing `either package.license or package.license_file` metadata\n+\n+error: package `cargo_common_metadata` is missing `package.repository` metadata\n+\n+error: package `cargo_common_metadata` is missing `package.readme` metadata\n+\n+error: package `cargo_common_metadata` is missing `package.keywords` metadata\n+\n+error: package `cargo_common_metadata` is missing `package.categories` metadata\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "7e5b88383ccc31acf2410e68407b087043c2ac17", "filename": "tests/ui-cargo/cargo_common_metadata/fail_publish_true/Cargo.toml", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish_true%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish_true%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish_true%2FCargo.toml?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,6 @@\n+[package]\n+name = \"cargo_common_metadata\"\n+version = \"0.1.0\"\n+publish = true\n+\n+[workspace]"}, {"sha": "27841e18aa9ef830cb1daf4080d0acd19a3b3c97", "filename": "tests/ui-cargo/cargo_common_metadata/fail_publish_true/src/main.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish_true%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish_true%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish_true%2Fsrc%2Fmain.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags: --crate-name=cargo_common_metadata\n+#![warn(clippy::cargo_common_metadata)]\n+\n+fn main() {}"}, {"sha": "c8ae6c820df9de4de3f3561451d27e97c9416563", "filename": "tests/ui-cargo/cargo_common_metadata/fail_publish_true/src/main.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish_true%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish_true%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_common_metadata%2Ffail_publish_true%2Fsrc%2Fmain.stderr?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,18 @@\n+error: package `cargo_common_metadata` is missing `package.authors` metadata\n+   |\n+   = note: `-D clippy::cargo-common-metadata` implied by `-D warnings`\n+\n+error: package `cargo_common_metadata` is missing `package.description` metadata\n+\n+error: package `cargo_common_metadata` is missing `either package.license or package.license_file` metadata\n+\n+error: package `cargo_common_metadata` is missing `package.repository` metadata\n+\n+error: package `cargo_common_metadata` is missing `package.readme` metadata\n+\n+error: package `cargo_common_metadata` is missing `package.keywords` metadata\n+\n+error: package `cargo_common_metadata` is missing `package.categories` metadata\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "de4f04b24fc89cad7244c5b2b857a2a3ee630edb", "filename": "tests/ui-cargo/cargo_common_metadata/pass/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass%2Fclippy.toml?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1 @@\n+cargo-ignore-publish = true"}, {"sha": "0a879c99b5bd8a0cb50819c6412b3c0e37173448", "filename": "tests/ui-cargo/cargo_common_metadata/pass_publish_empty/Cargo.toml", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass_publish_empty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass_publish_empty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass_publish_empty%2FCargo.toml?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,6 @@\n+[package]\n+name = \"cargo_common_metadata\"\n+version = \"0.1.0\"\n+publish = []\n+\n+[workspace]"}, {"sha": "27841e18aa9ef830cb1daf4080d0acd19a3b3c97", "filename": "tests/ui-cargo/cargo_common_metadata/pass_publish_empty/src/main.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass_publish_empty%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass_publish_empty%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass_publish_empty%2Fsrc%2Fmain.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags: --crate-name=cargo_common_metadata\n+#![warn(clippy::cargo_common_metadata)]\n+\n+fn main() {}"}, {"sha": "ae0a603299629613cd51e8bf506f209cd5a10e1b", "filename": "tests/ui-cargo/cargo_common_metadata/pass_publish_false/Cargo.toml", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass_publish_false%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass_publish_false%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass_publish_false%2FCargo.toml?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,6 @@\n+[package]\n+name = \"cargo_common_metadata\"\n+version = \"0.1.0\"\n+publish = false\n+\n+[workspace]"}, {"sha": "27841e18aa9ef830cb1daf4080d0acd19a3b3c97", "filename": "tests/ui-cargo/cargo_common_metadata/pass_publish_false/src/main.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass_publish_false%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass_publish_false%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-cargo%2Fcargo_common_metadata%2Fpass_publish_false%2Fsrc%2Fmain.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags: --crate-name=cargo_common_metadata\n+#![warn(clippy::cargo_common_metadata)]\n+\n+fn main() {}"}, {"sha": "c0df3b6e8af5dd12d5ac7d618e6d9084525a3776", "filename": "tests/ui-toml/toml_disallowed_method/clippy.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fclippy.toml?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1 +1 @@\n-disallowed-methods = [\"core::iter::traits::iterator::Iterator::sum\", \"regex::re_unicode::Regex::is_match\"]\n+disallowed-methods = [\"core::iter::traits::iterator::Iterator::sum\", \"regex::re_unicode::Regex::is_match\", \"regex::re_unicode::Regex::new\"]"}, {"sha": "1901a99377ec622a7d41c1c4fba42b716a7b95b5", "filename": "tests/ui-toml/toml_disallowed_method/conf_disallowed_method.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -4,10 +4,9 @@ extern crate regex;\n use regex::Regex;\n \n fn main() {\n-    let a = vec![1, 2, 3, 4];\n     let re = Regex::new(r\"ab.*c\").unwrap();\n-\n     re.is_match(\"abc\");\n \n+    let a = vec![1, 2, 3, 4];\n     a.iter().sum::<i32>();\n }"}, {"sha": "2b628c67fa75162127adcbb922826c60966017fb", "filename": "tests/ui-toml/toml_disallowed_method/conf_disallowed_method.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_disallowed_method%2Fconf_disallowed_method.stderr?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,16 +1,22 @@\n+error: use of a disallowed method `regex::re_unicode::Regex::new`\n+  --> $DIR/conf_disallowed_method.rs:7:14\n+   |\n+LL |     let re = Regex::new(r\"ab.*c\").unwrap();\n+   |              ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::disallowed-method` implied by `-D warnings`\n+\n error: use of a disallowed method `regex::re_unicode::Regex::is_match`\n-  --> $DIR/conf_disallowed_method.rs:10:5\n+  --> $DIR/conf_disallowed_method.rs:8:5\n    |\n LL |     re.is_match(\"abc\");\n    |     ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::disallowed-method` implied by `-D warnings`\n \n error: use of a disallowed method `core::iter::traits::iterator::Iterator::sum`\n-  --> $DIR/conf_disallowed_method.rs:12:5\n+  --> $DIR/conf_disallowed_method.rs:11:5\n    |\n LL |     a.iter().sum::<i32>();\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "7ccd0b54845d197abe4385b28a74cc84a444ae34", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `unreadable-literal-lint-fractions`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `unreadable-literal-lint-fractions`, `cargo-ignore-publish`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}, {"sha": "bf68a7bbbf1d4e1b398b25216a0ee8009cb7dde0", "filename": "tests/ui/bytes_nth.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fbytes_nth.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fbytes_nth.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytes_nth.fixed?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#![allow(clippy::unnecessary_operation)]\n+#![warn(clippy::bytes_nth)]\n+\n+fn main() {\n+    let s = String::from(\"String\");\n+    s.as_bytes().get(3);\n+    &s.as_bytes().get(3);\n+    s[..].as_bytes().get(3);\n+}"}, {"sha": "629812cc02cb899961fb384c7d51cb698713a698", "filename": "tests/ui/bytes_nth.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fbytes_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fbytes_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytes_nth.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#![allow(clippy::unnecessary_operation)]\n+#![warn(clippy::bytes_nth)]\n+\n+fn main() {\n+    let s = String::from(\"String\");\n+    s.bytes().nth(3);\n+    &s.bytes().nth(3);\n+    s[..].bytes().nth(3);\n+}"}, {"sha": "9a5742928cd617da55eadb98ded6f012b9553f3e", "filename": "tests/ui/bytes_nth.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fbytes_nth.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fbytes_nth.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytes_nth.stderr?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,22 @@\n+error: called `.byte().nth()` on a `String`\n+  --> $DIR/bytes_nth.rs:8:5\n+   |\n+LL |     s.bytes().nth(3);\n+   |     ^^^^^^^^^^^^^^^^ help: try: `s.as_bytes().get(3)`\n+   |\n+   = note: `-D clippy::bytes-nth` implied by `-D warnings`\n+\n+error: called `.byte().nth()` on a `String`\n+  --> $DIR/bytes_nth.rs:9:6\n+   |\n+LL |     &s.bytes().nth(3);\n+   |      ^^^^^^^^^^^^^^^^ help: try: `s.as_bytes().get(3)`\n+\n+error: called `.byte().nth()` on a `str`\n+  --> $DIR/bytes_nth.rs:10:5\n+   |\n+LL |     s[..].bytes().nth(3);\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: try: `s[..].as_bytes().get(3)`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "3294da7e8146f51abf10979c63958c70e975fbd7", "filename": "tests/ui/collapsible_match.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -224,6 +224,14 @@ fn negative_cases(res_opt: Result<Option<u32>, String>, res_res: Result<Result<u\n         },\n         _ => return,\n     }\n+    if let Ok(val) = res_opt {\n+        if let Some(n) = val {\n+            let _ = || {\n+                // usage in closure\n+                println!(\"{:?}\", val);\n+            };\n+        }\n+    }\n }\n \n fn make<T>() -> T {"}, {"sha": "23ce28d8e9be4c2238afe40f3a664419763305d0", "filename": "tests/ui/filter_map_identity.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Ffilter_map_identity.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Ffilter_map_identity.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_identity.fixed?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+#![allow(unused_imports)]\n+#![warn(clippy::filter_map_identity)]\n+\n+fn main() {\n+    let iterator = vec![Some(1), None, Some(2)].into_iter();\n+    let _ = iterator.flatten();\n+\n+    let iterator = vec![Some(1), None, Some(2)].into_iter();\n+    let _ = iterator.flatten();\n+\n+    use std::convert::identity;\n+    let iterator = vec![Some(1), None, Some(2)].into_iter();\n+    let _ = iterator.flatten();\n+}"}, {"sha": "e698df13eea47ef4ff3eaca9319a0a0b82b14ad5", "filename": "tests/ui/filter_map_identity.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Ffilter_map_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Ffilter_map_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_identity.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+#![allow(unused_imports)]\n+#![warn(clippy::filter_map_identity)]\n+\n+fn main() {\n+    let iterator = vec![Some(1), None, Some(2)].into_iter();\n+    let _ = iterator.filter_map(|x| x);\n+\n+    let iterator = vec![Some(1), None, Some(2)].into_iter();\n+    let _ = iterator.filter_map(std::convert::identity);\n+\n+    use std::convert::identity;\n+    let iterator = vec![Some(1), None, Some(2)].into_iter();\n+    let _ = iterator.filter_map(identity);\n+}"}, {"sha": "596a6320608c7c0acf8725c40c88c82461b20309", "filename": "tests/ui/filter_map_identity.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Ffilter_map_identity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Ffilter_map_identity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_map_identity.stderr?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,22 @@\n+error: called `filter_map(|x| x)` on an `Iterator`\n+  --> $DIR/filter_map_identity.rs:8:22\n+   |\n+LL |     let _ = iterator.filter_map(|x| x);\n+   |                      ^^^^^^^^^^^^^^^^^ help: try: `flatten()`\n+   |\n+   = note: `-D clippy::filter-map-identity` implied by `-D warnings`\n+\n+error: called `filter_map(std::convert::identity)` on an `Iterator`\n+  --> $DIR/filter_map_identity.rs:11:22\n+   |\n+LL |     let _ = iterator.filter_map(std::convert::identity);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `flatten()`\n+\n+error: called `filter_map(std::convert::identity)` on an `Iterator`\n+  --> $DIR/filter_map_identity.rs:15:22\n+   |\n+LL |     let _ = iterator.filter_map(identity);\n+   |                      ^^^^^^^^^^^^^^^^^^^^ help: try: `flatten()`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "dfe3bd47e1394b4517cdbc88ee1b288a86a0c036", "filename": "tests/ui/flat_map_identity.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fflat_map_identity.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fflat_map_identity.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fflat_map_identity.fixed?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "previous_filename": "tests/ui/unnecessary_flat_map.fixed"}, {"sha": "393b95692554ca200ab9e5ac37f998e350f37d99", "filename": "tests/ui/flat_map_identity.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fflat_map_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fflat_map_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fflat_map_identity.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "previous_filename": "tests/ui/unnecessary_flat_map.rs"}, {"sha": "e4686ae5a5493ca2d409d56eebb347d84e0530d8", "filename": "tests/ui/flat_map_identity.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fflat_map_identity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fflat_map_identity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fflat_map_identity.stderr?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,13 +1,13 @@\n error: called `flat_map(|x| x)` on an `Iterator`\n-  --> $DIR/unnecessary_flat_map.rs:10:22\n+  --> $DIR/flat_map_identity.rs:10:22\n    |\n LL |     let _ = iterator.flat_map(|x| x);\n    |                      ^^^^^^^^^^^^^^^ help: try: `flatten()`\n    |\n    = note: `-D clippy::flat-map-identity` implied by `-D warnings`\n \n error: called `flat_map(std::convert::identity)` on an `Iterator`\n-  --> $DIR/unnecessary_flat_map.rs:13:22\n+  --> $DIR/flat_map_identity.rs:13:22\n    |\n LL |     let _ = iterator.flat_map(convert::identity);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `flatten()`", "previous_filename": "tests/ui/unnecessary_flat_map.stderr"}, {"sha": "b5f548810e65a8c6dc3bb725ecc81bd5825fc616", "filename": "tests/ui/from_iter_instead_of_collect.fixed", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,48 @@\n+// run-rustfix\n+\n+#![warn(clippy::from_iter_instead_of_collect)]\n+#![allow(unused_imports)]\n+\n+use std::collections::{BTreeMap, BTreeSet, HashMap, VecDeque};\n+use std::iter::FromIterator;\n+\n+fn main() {\n+    let iter_expr = std::iter::repeat(5).take(5);\n+    let _ = iter_expr.collect::<Vec<_>>();\n+\n+    let _ = vec![5, 5, 5, 5].iter().enumerate().collect::<HashMap<usize, &i8>>();\n+\n+    Vec::from_iter(vec![42u32]);\n+\n+    let a = vec![0, 1, 2];\n+    assert_eq!(a, (0..3).collect::<Vec<_>>());\n+    assert_eq!(a, (0..3).collect::<Vec<i32>>());\n+\n+    let mut b = (0..3).collect::<VecDeque<_>>();\n+    b.push_back(4);\n+\n+    let mut b = (0..3).collect::<VecDeque<i32>>();\n+    b.push_back(4);\n+\n+    {\n+        use std::collections;\n+        let mut b = (0..3).collect::<collections::VecDeque<i32>>();\n+        b.push_back(4);\n+    }\n+\n+    let values = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd')];\n+    let bm = values.iter().cloned().collect::<BTreeMap<_, _>>();\n+    let mut bar = bm.range(0..2).collect::<BTreeMap<_, _>>();\n+    bar.insert(&4, &'e');\n+\n+    let mut bts = (0..3).collect::<BTreeSet<_>>();\n+    bts.insert(2);\n+    {\n+        use std::collections;\n+        let _ = (0..3).collect::<collections::BTreeSet<_>>();\n+        let _ = (0..3).collect::<collections::BTreeSet<u32>>();\n+    }\n+\n+    for _i in [1, 2, 3].iter().collect::<Vec<_>>() {}\n+    for _i in [1, 2, 3].iter().collect::<Vec<&i32>>() {}\n+}"}, {"sha": "b842b5451d1c8d70f45bcbec2b33d20510b4093f", "filename": "tests/ui/from_iter_instead_of_collect.rs", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Ffrom_iter_instead_of_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Ffrom_iter_instead_of_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,13 +1,48 @@\n+// run-rustfix\n+\n #![warn(clippy::from_iter_instead_of_collect)]\n+#![allow(unused_imports)]\n \n-use std::collections::HashMap;\n+use std::collections::{BTreeMap, BTreeSet, HashMap, VecDeque};\n use std::iter::FromIterator;\n \n fn main() {\n     let iter_expr = std::iter::repeat(5).take(5);\n-    Vec::from_iter(iter_expr);\n+    let _ = Vec::from_iter(iter_expr);\n \n-    HashMap::<usize, &i8>::from_iter(vec![5, 5, 5, 5].iter().enumerate());\n+    let _ = HashMap::<usize, &i8>::from_iter(vec![5, 5, 5, 5].iter().enumerate());\n \n     Vec::from_iter(vec![42u32]);\n+\n+    let a = vec![0, 1, 2];\n+    assert_eq!(a, Vec::from_iter(0..3));\n+    assert_eq!(a, Vec::<i32>::from_iter(0..3));\n+\n+    let mut b = VecDeque::from_iter(0..3);\n+    b.push_back(4);\n+\n+    let mut b = VecDeque::<i32>::from_iter(0..3);\n+    b.push_back(4);\n+\n+    {\n+        use std::collections;\n+        let mut b = collections::VecDeque::<i32>::from_iter(0..3);\n+        b.push_back(4);\n+    }\n+\n+    let values = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd')];\n+    let bm = BTreeMap::from_iter(values.iter().cloned());\n+    let mut bar = BTreeMap::from_iter(bm.range(0..2));\n+    bar.insert(&4, &'e');\n+\n+    let mut bts = BTreeSet::from_iter(0..3);\n+    bts.insert(2);\n+    {\n+        use std::collections;\n+        let _ = collections::BTreeSet::from_iter(0..3);\n+        let _ = collections::BTreeSet::<u32>::from_iter(0..3);\n+    }\n+\n+    for _i in Vec::from_iter([1, 2, 3].iter()) {}\n+    for _i in Vec::<&i32>::from_iter([1, 2, 3].iter()) {}\n }"}, {"sha": "434734c9a213df003383af8c16581dd76154560c", "filename": "tests/ui/from_iter_instead_of_collect.stderr", "status": "modified", "additions": 79, "deletions": 7, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,16 +1,88 @@\n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:8:5\n+  --> $DIR/from_iter_instead_of_collect.rs:11:13\n    |\n-LL |     Vec::from_iter(iter_expr);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `iter_expr.collect()`\n+LL |     let _ = Vec::from_iter(iter_expr);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `iter_expr.collect::<Vec<_>>()`\n    |\n    = note: `-D clippy::from-iter-instead-of-collect` implied by `-D warnings`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:10:5\n+  --> $DIR/from_iter_instead_of_collect.rs:13:13\n    |\n-LL |     HashMap::<usize, &i8>::from_iter(vec![5, 5, 5, 5].iter().enumerate());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `vec![5, 5, 5, 5].iter().enumerate().collect()`\n+LL |     let _ = HashMap::<usize, &i8>::from_iter(vec![5, 5, 5, 5].iter().enumerate());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `vec![5, 5, 5, 5].iter().enumerate().collect::<HashMap<usize, &i8>>()`\n \n-error: aborting due to 2 previous errors\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:18:19\n+   |\n+LL |     assert_eq!(a, Vec::from_iter(0..3));\n+   |                   ^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<Vec<_>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:19:19\n+   |\n+LL |     assert_eq!(a, Vec::<i32>::from_iter(0..3));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<Vec<i32>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:21:17\n+   |\n+LL |     let mut b = VecDeque::from_iter(0..3);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<VecDeque<_>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:24:17\n+   |\n+LL |     let mut b = VecDeque::<i32>::from_iter(0..3);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<VecDeque<i32>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:29:21\n+   |\n+LL |         let mut b = collections::VecDeque::<i32>::from_iter(0..3);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<collections::VecDeque<i32>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:34:14\n+   |\n+LL |     let bm = BTreeMap::from_iter(values.iter().cloned());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `values.iter().cloned().collect::<BTreeMap<_, _>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:35:19\n+   |\n+LL |     let mut bar = BTreeMap::from_iter(bm.range(0..2));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `bm.range(0..2).collect::<BTreeMap<_, _>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:38:19\n+   |\n+LL |     let mut bts = BTreeSet::from_iter(0..3);\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<BTreeSet<_>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:42:17\n+   |\n+LL |         let _ = collections::BTreeSet::from_iter(0..3);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<collections::BTreeSet<_>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:43:17\n+   |\n+LL |         let _ = collections::BTreeSet::<u32>::from_iter(0..3);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<collections::BTreeSet<u32>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:46:15\n+   |\n+LL |     for _i in Vec::from_iter([1, 2, 3].iter()) {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `[1, 2, 3].iter().collect::<Vec<_>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:47:15\n+   |\n+LL |     for _i in Vec::<&i32>::from_iter([1, 2, 3].iter()) {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `[1, 2, 3].iter().collect::<Vec<&i32>>()`\n+\n+error: aborting due to 14 previous errors\n "}, {"sha": "50744f81c3cf84893697292fc190bb496b7a8f60", "filename": "tests/ui/let_underscore_drop.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Flet_underscore_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Flet_underscore_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_drop.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -16,4 +16,12 @@ fn main() {\n     let _ = Box::new(());\n     let _ = Droppable;\n     let _ = Some(Droppable);\n+\n+    // no lint for reference\n+    let _ = droppable_ref();\n+}\n+\n+#[must_use]\n+fn droppable_ref() -> &'static mut Droppable {\n+    unimplemented!()\n }"}, {"sha": "cff68eca933743338acd6b184c3b25c0883aa9c1", "filename": "tests/ui/manual_flatten.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fmanual_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fmanual_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_flatten.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,76 @@\n+#![warn(clippy::manual_flatten)]\n+\n+fn main() {\n+    // Test for loop over implicitly adjusted `Iterator` with `if let` expression\n+    let x = vec![Some(1), Some(2), Some(3)];\n+    for n in x {\n+        if let Some(y) = n {\n+            println!(\"{}\", y);\n+        }\n+    }\n+\n+    // Test for loop over implicitly implicitly adjusted `Iterator` with `if let` statement\n+    let y: Vec<Result<i32, i32>> = vec![];\n+    for n in y.clone() {\n+        if let Ok(n) = n {\n+            println!(\"{}\", n);\n+        };\n+    }\n+\n+    // Test for loop over by reference\n+    for n in &y {\n+        if let Ok(n) = n {\n+            println!(\"{}\", n);\n+        }\n+    }\n+\n+    // Test for loop over an implicit reference\n+    // Note: if `clippy::manual_flatten` is made autofixable, this case will\n+    // lead to a follow-up lint `clippy::into_iter_on_ref`\n+    let z = &y;\n+    for n in z {\n+        if let Ok(n) = n {\n+            println!(\"{}\", n);\n+        }\n+    }\n+\n+    // Test for loop over `Iterator` with `if let` expression\n+    let z = vec![Some(1), Some(2), Some(3)];\n+    let z = z.iter();\n+    for n in z {\n+        if let Some(m) = n {\n+            println!(\"{}\", m);\n+        }\n+    }\n+\n+    // Using the `None` variant should not trigger the lint\n+    // Note: for an autofixable suggestion, the binding in the for loop has to take the\n+    // name of the binding in the `if let`\n+    let z = vec![Some(1), Some(2), Some(3)];\n+    for n in z {\n+        if n.is_none() {\n+            println!(\"Nada.\");\n+        }\n+    }\n+\n+    // Using the `Err` variant should not trigger the lint\n+    for n in y.clone() {\n+        if let Err(e) = n {\n+            println!(\"Oops: {}!\", e);\n+        }\n+    }\n+\n+    // Having an else clause should not trigger the lint\n+    for n in y.clone() {\n+        if let Ok(n) = n {\n+            println!(\"{}\", n);\n+        } else {\n+            println!(\"Oops!\");\n+        }\n+    }\n+\n+    // Using manual flatten should not trigger the lint\n+    for n in vec![Some(1), Some(2), Some(3)].iter().flatten() {\n+        println!(\"{}\", n);\n+    }\n+}"}, {"sha": "855dd9130e2fbbdc8e9c77047a4d69d1c5ebae9e", "filename": "tests/ui/manual_flatten.stderr", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fmanual_flatten.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fmanual_flatten.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_flatten.stderr?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,108 @@\n+error: unnecessary `if let` since only the `Some` variant of the iterator element is used\n+  --> $DIR/manual_flatten.rs:6:5\n+   |\n+LL |       for n in x {\n+   |       ^        - help: try: `x.into_iter().flatten()`\n+   |  _____|\n+   | |\n+LL | |         if let Some(y) = n {\n+LL | |             println!(\"{}\", y);\n+LL | |         }\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::manual-flatten` implied by `-D warnings`\n+help: ...and remove the `if let` statement in the for loop\n+  --> $DIR/manual_flatten.rs:7:9\n+   |\n+LL | /         if let Some(y) = n {\n+LL | |             println!(\"{}\", y);\n+LL | |         }\n+   | |_________^\n+\n+error: unnecessary `if let` since only the `Ok` variant of the iterator element is used\n+  --> $DIR/manual_flatten.rs:14:5\n+   |\n+LL |       for n in y.clone() {\n+   |       ^        --------- help: try: `y.clone().into_iter().flatten()`\n+   |  _____|\n+   | |\n+LL | |         if let Ok(n) = n {\n+LL | |             println!(\"{}\", n);\n+LL | |         };\n+LL | |     }\n+   | |_____^\n+   |\n+help: ...and remove the `if let` statement in the for loop\n+  --> $DIR/manual_flatten.rs:15:9\n+   |\n+LL | /         if let Ok(n) = n {\n+LL | |             println!(\"{}\", n);\n+LL | |         };\n+   | |_________^\n+\n+error: unnecessary `if let` since only the `Ok` variant of the iterator element is used\n+  --> $DIR/manual_flatten.rs:21:5\n+   |\n+LL |       for n in &y {\n+   |       ^        -- help: try: `y.iter().flatten()`\n+   |  _____|\n+   | |\n+LL | |         if let Ok(n) = n {\n+LL | |             println!(\"{}\", n);\n+LL | |         }\n+LL | |     }\n+   | |_____^\n+   |\n+help: ...and remove the `if let` statement in the for loop\n+  --> $DIR/manual_flatten.rs:22:9\n+   |\n+LL | /         if let Ok(n) = n {\n+LL | |             println!(\"{}\", n);\n+LL | |         }\n+   | |_________^\n+\n+error: unnecessary `if let` since only the `Ok` variant of the iterator element is used\n+  --> $DIR/manual_flatten.rs:31:5\n+   |\n+LL |       for n in z {\n+   |       ^        - help: try: `z.into_iter().flatten()`\n+   |  _____|\n+   | |\n+LL | |         if let Ok(n) = n {\n+LL | |             println!(\"{}\", n);\n+LL | |         }\n+LL | |     }\n+   | |_____^\n+   |\n+help: ...and remove the `if let` statement in the for loop\n+  --> $DIR/manual_flatten.rs:32:9\n+   |\n+LL | /         if let Ok(n) = n {\n+LL | |             println!(\"{}\", n);\n+LL | |         }\n+   | |_________^\n+\n+error: unnecessary `if let` since only the `Some` variant of the iterator element is used\n+  --> $DIR/manual_flatten.rs:40:5\n+   |\n+LL |       for n in z {\n+   |       ^        - help: try: `z.flatten()`\n+   |  _____|\n+   | |\n+LL | |         if let Some(m) = n {\n+LL | |             println!(\"{}\", m);\n+LL | |         }\n+LL | |     }\n+   | |_____^\n+   |\n+help: ...and remove the `if let` statement in the for loop\n+  --> $DIR/manual_flatten.rs:41:9\n+   |\n+LL | /         if let Some(m) = n {\n+LL | |             println!(\"{}\", m);\n+LL | |         }\n+   | |_________^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "0abe2cca26757325fc4f7d16c45d9d07ea5912f2", "filename": "tests/ui/semicolon_if_nothing_returned.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,55 @@\n+#![warn(clippy::semicolon_if_nothing_returned)]\n+#![feature(label_break_value)]\n+\n+fn get_unit() {}\n+\n+// the functions below trigger the lint\n+fn main() {\n+    println!(\"Hello\")\n+}\n+\n+fn hello() {\n+    get_unit()\n+}\n+\n+fn basic101(x: i32) {\n+    let y: i32;\n+    y = x + 1\n+}\n+\n+// this is fine\n+fn print_sum(a: i32, b: i32) {\n+    println!(\"{}\", a + b);\n+    assert_eq!(true, false);\n+}\n+\n+fn foo(x: i32) {\n+    let y: i32;\n+    if x < 1 {\n+        y = 4;\n+    } else {\n+        y = 5;\n+    }\n+}\n+\n+fn bar(x: i32) {\n+    let y: i32;\n+    match x {\n+        1 => y = 4,\n+        _ => y = 32,\n+    }\n+}\n+\n+fn foobar(x: i32) {\n+    let y: i32;\n+    'label: {\n+        y = x + 1;\n+    }\n+}\n+\n+fn loop_test(x: i32) {\n+    let y: i32;\n+    for &ext in &[\"stdout\", \"stderr\", \"fixed\"] {\n+        println!(\"{}\", ext);\n+    }\n+}"}, {"sha": "b73f89675383f12d53aeb4298898502c443af5b0", "filename": "tests/ui/semicolon_if_nothing_returned.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -0,0 +1,22 @@\n+error: consider adding a `;` to the last statement for consistent formatting\n+  --> $DIR/semicolon_if_nothing_returned.rs:8:5\n+   |\n+LL |     println!(\"Hello\")\n+   |     ^^^^^^^^^^^^^^^^^ help: add a `;` here: `println!(\"Hello\");`\n+   |\n+   = note: `-D clippy::semicolon-if-nothing-returned` implied by `-D warnings`\n+\n+error: consider adding a `;` to the last statement for consistent formatting\n+  --> $DIR/semicolon_if_nothing_returned.rs:12:5\n+   |\n+LL |     get_unit()\n+   |     ^^^^^^^^^^ help: add a `;` here: `get_unit();`\n+\n+error: consider adding a `;` to the last statement for consistent formatting\n+  --> $DIR/semicolon_if_nothing_returned.rs:17:5\n+   |\n+LL |     y = x + 1\n+   |     ^^^^^^^^^ help: add a `;` here: `y = x + 1;`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "ac4c1bc65979fb5f38661d3f8ac37487ef802e89", "filename": "tests/ui/temporary_assignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,5 +1,4 @@\n #![warn(clippy::temporary_assignment)]\n-#![allow(const_item_mutation)]\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "7d79901a28d1be70a17f22f33806278c09b0e340", "filename": "tests/ui/temporary_assignment.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Ftemporary_assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Ftemporary_assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.stderr?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,13 +1,13 @@\n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:48:5\n+  --> $DIR/temporary_assignment.rs:47:5\n    |\n LL |     Struct { field: 0 }.field = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::temporary-assignment` implied by `-D warnings`\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:49:5\n+  --> $DIR/temporary_assignment.rs:48:5\n    |\n LL | /     MultiStruct {\n LL | |         structure: Struct { field: 0 },\n@@ -17,13 +17,13 @@ LL | |     .field = 1;\n    | |______________^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:54:5\n+  --> $DIR/temporary_assignment.rs:53:5\n    |\n LL |     ArrayStruct { array: [0] }.array[0] = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:55:5\n+  --> $DIR/temporary_assignment.rs:54:5\n    |\n LL |     (0, 0).0 = 1;\n    |     ^^^^^^^^^^^^"}, {"sha": "ed3a9208fc3f07d785898eda4a461cf6c1a7e7a0", "filename": "tests/ui/zero_div_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fui%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_div_zero.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     let one_more_f64_nan = 0.0f64 / 0.0f64;\n     let zero = 0.0;\n     let other_zero = 0.0;\n-    let other_nan = zero / other_zero; // fine - this lint doesn't propegate constants.\n+    let other_nan = zero / other_zero; // fine - this lint doesn't propagate constants.\n     let not_nan = 2.0 / 0.0; // not an error: 2/0 = inf\n     let also_not_nan = 0.0 / 2.0; // not an error: 0/2 = 0\n }"}, {"sha": "bc5ed0816cc812b139a5f7f299fbfdbb174b45fb", "filename": "tests/versioncheck.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fversioncheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/tests%2Fversioncheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fversioncheck.rs?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -23,6 +23,12 @@ fn check_that_clippy_lints_has_the_same_version_as_clippy() {\n \n #[test]\n fn check_that_clippy_has_the_same_major_version_as_rustc() {\n+    // do not run this test inside the upstream rustc repo:\n+    // https://github.com/rust-lang/rust-clippy/issues/6683\n+    if option_env!(\"RUSTC_TEST_SUITE\").is_some() {\n+        return;\n+    }\n+\n     let clippy_version = rustc_tools_util::get_version_info!();\n     let clippy_major = clippy_version.major;\n     let clippy_minor = clippy_version.minor;"}, {"sha": "b0a13f827d6cd9564291aef82567c2ad7e53748e", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00f9981f5c39a82b8d44a7f958199b0066d08b84/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/00f9981f5c39a82b8d44a7f958199b0066d08b84/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=00f9981f5c39a82b8d44a7f958199b0066d08b84", "patch": "@@ -1,6 +1,6 @@\n [relabel]\n allow-unauthenticated = [\n-    \"A-*\", \"C-*\", \"E-*\", \"L-*\", \"M-*\", \"O-*\", \"P-*\", \"S-*\", \"T-*\",\n+    \"A-*\", \"C-*\", \"E-*\", \"I-*\", \"L-*\", \"P-*\", \"S-*\", \"T-*\",\n     \"good-first-issue\"\n ]\n "}]}