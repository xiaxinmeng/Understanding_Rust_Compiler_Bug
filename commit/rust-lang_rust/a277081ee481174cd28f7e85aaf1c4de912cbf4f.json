{"sha": "a277081ee481174cd28f7e85aaf1c4de912cbf4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNzcwODFlZTQ4MTE3NGNkMjhmN2U4NWFhZjFjNGRlOTEyY2JmNGY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-11T19:59:45Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-13T23:52:50Z"}, "message": "Rename Owned trait to Durable", "tree": {"sha": "f25dd8f6d459da5e8458a6ec8ca3a9237c2fe8fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f25dd8f6d459da5e8458a6ec8ca3a9237c2fe8fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a277081ee481174cd28f7e85aaf1c4de912cbf4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a277081ee481174cd28f7e85aaf1c4de912cbf4f", "html_url": "https://github.com/rust-lang/rust/commit/a277081ee481174cd28f7e85aaf1c4de912cbf4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a277081ee481174cd28f7e85aaf1c4de912cbf4f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd120736cbe9a8157a8d0e3fb66f48a32545ef68", "html_url": "https://github.com/rust-lang/rust/commit/cd120736cbe9a8157a8d0e3fb66f48a32545ef68"}], "stats": {"total": 198, "additions": 102, "deletions": 96}, "files": [{"sha": "853597164d23241ed42932221ab01942b8df943c", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -167,7 +167,7 @@ pub mod util;\n \n /* Reexported core operators */\n \n-pub use kinds::{Const, Copy, Send, Owned};\n+pub use kinds::{Const, Copy, Send, Durable};\n pub use ops::{Drop};\n pub use ops::{Add, Sub, Mul, Div, Modulo, Neg};\n pub use ops::{BitAnd, BitOr, BitXor};"}, {"sha": "52a6539077df6acf34e381f3cd4319b393b27147", "filename": "src/libcore/kinds.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibcore%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibcore%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fkinds.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -30,9 +30,7 @@ The 4 kinds are\n * Const - types that are deeply immutable. Const types are used for\n   freezable data structures.\n \n-* Owned - types that do not contain borrowed pointers. Note that this\n-  meaning of 'owned' conflicts with 'owned pointers'. The two notions\n-  of ownership are different.\n+* Durable - types that do not contain borrowed pointers.\n \n `Copy` types include both implicitly copyable types that the compiler\n will copy automatically and non-implicitly copyable types that require\n@@ -56,7 +54,16 @@ pub trait Const {\n     // Empty.\n }\n \n+#[cfg(stage0)]\n #[lang=\"owned\"]\n-pub trait Owned {\n+pub trait Durable {\n+    // Empty.\n+}\n+\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+#[cfg(stage3)]\n+#[lang=\"durable\"]\n+pub trait Durable {\n     // Empty.\n }"}, {"sha": "d321966ac5ea17e75cacb37594b9d5c514e50d41", "filename": "src/libcore/task/local_data.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibcore%2Ftask%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibcore%2Ftask%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -47,13 +47,13 @@ use task::local_data_priv::{\n  *\n  * These two cases aside, the interface is safe.\n  */\n-pub type LocalDataKey<T: Owned> = &fn(v: @T);\n+pub type LocalDataKey<T: Durable> = &fn(v: @T);\n \n /**\n  * Remove a task-local data value from the table, returning the\n  * reference that was originally created to insert it.\n  */\n-pub unsafe fn local_data_pop<T: Owned>(\n+pub unsafe fn local_data_pop<T: Durable>(\n     key: LocalDataKey<T>) -> Option<@T> {\n \n     local_pop(rt::rust_get_task(), key)\n@@ -62,7 +62,7 @@ pub unsafe fn local_data_pop<T: Owned>(\n  * Retrieve a task-local data value. It will also be kept alive in the\n  * table until explicitly removed.\n  */\n-pub unsafe fn local_data_get<T: Owned>(\n+pub unsafe fn local_data_get<T: Durable>(\n     key: LocalDataKey<T>) -> Option<@T> {\n \n     local_get(rt::rust_get_task(), key)\n@@ -71,7 +71,7 @@ pub unsafe fn local_data_get<T: Owned>(\n  * Store a value in task-local data. If this key already has a value,\n  * that value is overwritten (and its destructor is run).\n  */\n-pub unsafe fn local_data_set<T: Owned>(\n+pub unsafe fn local_data_set<T: Durable>(\n     key: LocalDataKey<T>, data: @T) {\n \n     local_set(rt::rust_get_task(), key, data)\n@@ -80,7 +80,7 @@ pub unsafe fn local_data_set<T: Owned>(\n  * Modify a task-local data value. If the function returns 'None', the\n  * data is removed (and its reference dropped).\n  */\n-pub unsafe fn local_data_modify<T: Owned>(\n+pub unsafe fn local_data_modify<T: Durable>(\n     key: LocalDataKey<T>,\n     modify_fn: fn(Option<@T>) -> Option<@T>) {\n "}, {"sha": "634101ea717bf05b5f07c9c5b419c39398b51457", "filename": "src/libcore/task/local_data_priv.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data_priv.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -19,7 +19,7 @@ use rt::rust_task;\n type rust_task = libc::c_void;\n \n pub trait LocalData { }\n-impl<T: Owned> @T: LocalData { }\n+impl<T: Durable> @T: LocalData { }\n \n impl LocalData: Eq {\n     pure fn eq(&self, other: &@LocalData) -> bool unsafe {\n@@ -67,7 +67,7 @@ unsafe fn get_task_local_map(task: *rust_task) -> TaskLocalMap {\n     }\n }\n \n-unsafe fn key_to_key_value<T: Owned>(\n+unsafe fn key_to_key_value<T: Durable>(\n     key: LocalDataKey<T>) -> *libc::c_void {\n \n     // Keys are closures, which are (fnptr,envptr) pairs. Use fnptr.\n@@ -77,7 +77,7 @@ unsafe fn key_to_key_value<T: Owned>(\n }\n \n // If returning Some(..), returns with @T with the map's reference. Careful!\n-unsafe fn local_data_lookup<T: Owned>(\n+unsafe fn local_data_lookup<T: Durable>(\n     map: TaskLocalMap, key: LocalDataKey<T>)\n     -> Option<(uint, *libc::c_void)> {\n \n@@ -95,7 +95,7 @@ unsafe fn local_data_lookup<T: Owned>(\n     }\n }\n \n-unsafe fn local_get_helper<T: Owned>(\n+unsafe fn local_get_helper<T: Durable>(\n     task: *rust_task, key: LocalDataKey<T>,\n     do_pop: bool) -> Option<@T> {\n \n@@ -117,21 +117,21 @@ unsafe fn local_get_helper<T: Owned>(\n }\n \n \n-pub unsafe fn local_pop<T: Owned>(\n+pub unsafe fn local_pop<T: Durable>(\n     task: *rust_task,\n     key: LocalDataKey<T>) -> Option<@T> {\n \n     local_get_helper(task, key, true)\n }\n \n-pub unsafe fn local_get<T: Owned>(\n+pub unsafe fn local_get<T: Durable>(\n     task: *rust_task,\n     key: LocalDataKey<T>) -> Option<@T> {\n \n     local_get_helper(task, key, false)\n }\n \n-pub unsafe fn local_set<T: Owned>(\n+pub unsafe fn local_set<T: Durable>(\n     task: *rust_task, key: LocalDataKey<T>, data: @T) {\n \n     let map = get_task_local_map(task);\n@@ -163,7 +163,7 @@ pub unsafe fn local_set<T: Owned>(\n     }\n }\n \n-pub unsafe fn local_modify<T: Owned>(\n+pub unsafe fn local_modify<T: Durable>(\n     task: *rust_task, key: LocalDataKey<T>,\n     modify_fn: fn(Option<@T>) -> Option<@T>) {\n "}, {"sha": "f30acfdbdd2564fc5c80a8bc3f5788b4780595c8", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -487,7 +487,7 @@ fn parse_bounds(st: @pstate, conv: conv_did) -> @~[ty::param_bound] {\n           'S' => ty::bound_send,\n           'C' => ty::bound_copy,\n           'K' => ty::bound_const,\n-          'O' => ty::bound_owned,\n+          'O' => ty::bound_durable,\n           'I' => ty::bound_trait(parse_ty(st, conv)),\n           '.' => break,\n           _ => fail ~\"parse_bounds: bad bounds\""}, {"sha": "0a095421bd6edfa12d22de174783246a95b7f813", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -395,7 +395,7 @@ fn enc_bounds(w: io::Writer, cx: @ctxt, bs: @~[ty::param_bound]) {\n           ty::bound_send => w.write_char('S'),\n           ty::bound_copy => w.write_char('C'),\n           ty::bound_const => w.write_char('K'),\n-          ty::bound_owned => w.write_char('O'),\n+          ty::bound_durable => w.write_char('O'),\n           ty::bound_trait(tp) => {\n             w.write_char('I');\n             enc_ty(w, cx, tp);"}, {"sha": "fa4614d52aa7af5aa7426595fc5cb976e47d2527", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -64,8 +64,8 @@ fn kind_to_str(k: Kind) -> ~str {\n \n     if ty::kind_can_be_sent(k) {\n         kinds.push(~\"send\");\n-    } else if ty::kind_is_owned(k) {\n-        kinds.push(~\"owned\");\n+    } else if ty::kind_is_durable(k) {\n+        kinds.push(~\"durable\");\n     }\n \n     str::connect(kinds, ~\" \")\n@@ -136,7 +136,7 @@ fn with_appropriate_checker(cx: ctx, id: node_id, b: fn(check_fn)) {\n     fn check_for_box(cx: ctx, id: node_id, fv: Option<@freevar_entry>,\n                      is_move: bool, var_t: ty::t, sp: span) {\n         // all captured data must be owned\n-        if !check_owned(cx.tcx, var_t, sp) { return; }\n+        if !check_durable(cx.tcx, var_t, sp) { return; }\n \n         // copied in data must be copyable, but moved in data can be anything\n         let is_implicit = fv.is_some();\n@@ -555,12 +555,12 @@ fn check_send(cx: ctx, ty: ty::t, sp: span) -> bool {\n }\n \n // note: also used from middle::typeck::regionck!\n-fn check_owned(tcx: ty::ctxt, ty: ty::t, sp: span) -> bool {\n-    if !ty::kind_is_owned(ty::type_kind(tcx, ty)) {\n+fn check_durable(tcx: ty::ctxt, ty: ty::t, sp: span) -> bool {\n+    if !ty::kind_is_durable(ty::type_kind(tcx, ty)) {\n         match ty::get(ty).sty {\n           ty::ty_param(*) => {\n             tcx.sess.span_err(sp, ~\"value may contain borrowed \\\n-                                    pointers; use `owned` bound\");\n+                                    pointers; use `durable` bound\");\n           }\n           _ => {\n             tcx.sess.span_err(sp, ~\"value may contain borrowed \\\n@@ -632,7 +632,7 @@ fn check_cast_for_escaping_regions(\n             if target_params.contains(&source_param) {\n                 /* case (2) */\n             } else {\n-                check_owned(cx.tcx, ty, source.span); /* case (3) */\n+                check_durable(cx.tcx, ty, source.span); /* case (3) */\n             }\n           }\n           _ => {}"}, {"sha": "aa72ae1d4e26d190f2bba0129050c5a08054dc4e", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -36,7 +36,7 @@ struct LanguageItems {\n     mut const_trait: Option<def_id>,\n     mut copy_trait: Option<def_id>,\n     mut send_trait: Option<def_id>,\n-    mut owned_trait: Option<def_id>,\n+    mut durable_trait: Option<def_id>,\n \n     mut drop_trait: Option<def_id>,\n \n@@ -69,7 +69,7 @@ mod language_items {\n             const_trait: None,\n             copy_trait: None,\n             send_trait: None,\n-            owned_trait: None,\n+            durable_trait: None,\n \n             drop_trait: None,\n \n@@ -106,7 +106,7 @@ fn LanguageItemCollector(crate: @crate, session: Session,\n     item_refs.insert(~\"const\", &mut items.const_trait);\n     item_refs.insert(~\"copy\", &mut items.copy_trait);\n     item_refs.insert(~\"send\", &mut items.send_trait);\n-    item_refs.insert(~\"owned\", &mut items.owned_trait);\n+    item_refs.insert(~\"durable\", &mut items.durable_trait);\n \n     item_refs.insert(~\"drop\", &mut items.drop_trait);\n "}, {"sha": "561ca37774b6dd320962579e665fc56962b141b1", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -140,7 +140,7 @@ export kind_noncopyable, kind_const;\n export kind_can_be_copied, kind_can_be_sent, kind_can_be_implicitly_copied;\n export type_implicitly_moves;\n export kind_is_safe_for_default_mode;\n-export kind_is_owned;\n+export kind_is_durable;\n export meta_kind, kind_lteq, type_kind;\n export operators;\n export type_err, terr_vstore_kind;\n@@ -176,7 +176,7 @@ export VariantInfo, VariantInfo_;\n export walk_ty, maybe_walk_ty;\n export occurs_check;\n export param_ty;\n-export param_bound, param_bounds, bound_copy, bound_owned;\n+export param_bound, param_bounds, bound_copy, bound_durable;\n export param_bounds_to_str, param_bound_to_str;\n export bound_send, bound_trait;\n export param_bounds_to_kind;\n@@ -702,7 +702,7 @@ enum type_err {\n \n enum param_bound {\n     bound_copy,\n-    bound_owned,\n+    bound_durable,\n     bound_send,\n     bound_const,\n     bound_trait(t),\n@@ -769,7 +769,7 @@ impl param_bound : to_bytes::IterBytes {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n         match *self {\n           bound_copy => 0u8.iter_bytes(lsb0, f),\n-          bound_owned => 1u8.iter_bytes(lsb0, f),\n+          bound_durable => 1u8.iter_bytes(lsb0, f),\n           bound_send => 2u8.iter_bytes(lsb0, f),\n           bound_const => 3u8.iter_bytes(lsb0, f),\n           bound_trait(ref t) =>\n@@ -873,11 +873,11 @@ fn param_bounds_to_kind(bounds: param_bounds) -> Kind {\n           bound_copy => {\n             kind = raise_kind(kind, kind_implicitly_copyable());\n           }\n-          bound_owned => {\n-            kind = raise_kind(kind, kind_owned());\n+          bound_durable => {\n+            kind = raise_kind(kind, kind_durable());\n           }\n           bound_send => {\n-            kind = raise_kind(kind, kind_send_only() | kind_owned());\n+            kind = raise_kind(kind, kind_send_only() | kind_durable());\n           }\n           bound_const => {\n             kind = raise_kind(kind, kind_const());\n@@ -1549,7 +1549,7 @@ fn substs_to_str(cx: ctxt, substs: &substs) -> ~str {\n fn param_bound_to_str(cx: ctxt, pb: &param_bound) -> ~str {\n     match *pb {\n         bound_copy => ~\"copy\",\n-        bound_owned => ~\"owned\",\n+        bound_durable => ~\"durable\",\n         bound_send => ~\"send\",\n         bound_const => ~\"const\",\n         bound_trait(t) => ty_to_str(cx, t)\n@@ -1908,11 +1908,11 @@ enum Kind { kind_(u32) }\n /// can be copied (implicitly or explicitly)\n const KIND_MASK_COPY         : u32 = 0b000000000000000000000000001_u32;\n \n-/// can be sent: no shared box, borrowed ptr (must imply OWNED)\n+/// can be sent: no shared box, borrowed ptr (must imply DURABLE)\n const KIND_MASK_SEND         : u32 = 0b000000000000000000000000010_u32;\n \n-/// is owned (no borrowed ptrs)\n-const KIND_MASK_OWNED        : u32 = 0b000000000000000000000000100_u32;\n+/// is durable (no borrowed ptrs)\n+const KIND_MASK_DURABLE      : u32 = 0b000000000000000000000000100_u32;\n \n /// is deeply immutable\n const KIND_MASK_CONST        : u32 = 0b000000000000000000000001000_u32;\n@@ -1963,8 +1963,8 @@ fn kind_const() -> Kind {\n     kind_(KIND_MASK_CONST)\n }\n \n-fn kind_owned() -> Kind {\n-    kind_(KIND_MASK_OWNED)\n+fn kind_durable() -> Kind {\n+    kind_(KIND_MASK_DURABLE)\n }\n \n fn kind_top() -> Kind {\n@@ -1983,8 +1983,8 @@ fn remove_send(k: Kind) -> Kind {\n     k - kind_(KIND_MASK_SEND)\n }\n \n-fn remove_owned_send(k: Kind) -> Kind {\n-    k - kind_(KIND_MASK_OWNED) - kind_(KIND_MASK_SEND)\n+fn remove_durable_send(k: Kind) -> Kind {\n+    k - kind_(KIND_MASK_DURABLE) - kind_(KIND_MASK_SEND)\n }\n \n fn remove_copyable(k: Kind) -> Kind {\n@@ -2034,23 +2034,23 @@ pure fn kind_can_be_sent(k: Kind) -> bool {\n     *k & KIND_MASK_SEND == KIND_MASK_SEND\n }\n \n-pure fn kind_is_owned(k: Kind) -> bool {\n-    *k & KIND_MASK_OWNED == KIND_MASK_OWNED\n+pure fn kind_is_durable(k: Kind) -> bool {\n+    *k & KIND_MASK_DURABLE == KIND_MASK_DURABLE\n }\n \n fn meta_kind(p: FnMeta) -> Kind {\n     match p.proto { // XXX consider the kind bounds!\n         ast::ProtoBare => {\n-            kind_safe_for_default_mode_send() | kind_const() | kind_owned()\n+            kind_safe_for_default_mode_send() | kind_const() | kind_durable()\n         }\n         ast::ProtoBorrowed => {\n             kind_noncopyable() | kind_(KIND_MASK_DEFAULT_MODE)\n         }\n         ast::ProtoBox => {\n-            kind_safe_for_default_mode() | kind_owned()\n+            kind_safe_for_default_mode() | kind_durable()\n         }\n         ast::ProtoUniq => {\n-            kind_send_copy() | kind_owned()\n+            kind_send_copy() | kind_durable()\n         }\n     }\n }\n@@ -2113,15 +2113,15 @@ fn type_kind(cx: ctxt, ty: t) -> Kind {\n       // Scalar and unique types are sendable, constant, and owned\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n       ty_ptr(_) => {\n-        kind_safe_for_default_mode_send() | kind_const() | kind_owned()\n+        kind_safe_for_default_mode_send() | kind_const() | kind_durable()\n       }\n \n       // Implicit copyability of strs is configurable\n       ty_estr(vstore_uniq) => {\n         if cx.vecs_implicitly_copyable {\n-            kind_implicitly_sendable() | kind_const() | kind_owned()\n+            kind_implicitly_sendable() | kind_const() | kind_durable()\n         } else {\n-            kind_send_copy() | kind_const() | kind_owned()\n+            kind_send_copy() | kind_const() | kind_durable()\n         }\n       }\n \n@@ -2135,7 +2135,7 @@ fn type_kind(cx: ctxt, ty: t) -> Kind {\n       }\n \n       // Trait instances are (for now) like shared boxes, basically\n-      ty_trait(_, _, _) => kind_safe_for_default_mode() | kind_owned(),\n+      ty_trait(_, _, _) => kind_safe_for_default_mode() | kind_durable(),\n \n       // Static region pointers are copyable and sendable, but not owned\n       ty_rptr(re_static, mt) =>\n@@ -2167,16 +2167,16 @@ fn type_kind(cx: ctxt, ty: t) -> Kind {\n         kind_safe_for_default_mode() | mutable_type_kind(cx, tm)\n       }\n       ty_evec(tm, vstore_slice(_)) => {\n-        remove_owned_send(kind_safe_for_default_mode() |\n-                          mutable_type_kind(cx, tm))\n+        remove_durable_send(kind_safe_for_default_mode() |\n+                           mutable_type_kind(cx, tm))\n       }\n       ty_evec(tm, vstore_fixed(_)) => {\n         mutable_type_kind(cx, tm)\n       }\n \n       // All estrs are copyable; uniques and interiors are sendable.\n       ty_estr(vstore_box) => {\n-        kind_safe_for_default_mode() | kind_const() | kind_owned()\n+        kind_safe_for_default_mode() | kind_const() | kind_durable()\n       }\n       ty_estr(vstore_slice(re_static)) => {\n         kind_safe_for_default_mode() | kind_send_copy() | kind_const()\n@@ -2185,7 +2185,7 @@ fn type_kind(cx: ctxt, ty: t) -> Kind {\n         kind_safe_for_default_mode() | kind_const()\n       }\n       ty_estr(vstore_fixed(_)) => {\n-        kind_safe_for_default_mode_send() | kind_const() | kind_owned()\n+        kind_safe_for_default_mode_send() | kind_const() | kind_durable()\n       }\n \n       // Records lower to the lowest of their members.\n@@ -2226,7 +2226,7 @@ fn type_kind(cx: ctxt, ty: t) -> Kind {\n         let mut lowest = kind_top();\n         let variants = enum_variants(cx, did);\n         if vec::len(*variants) == 0u {\n-            lowest = kind_send_only() | kind_owned();\n+            lowest = kind_send_only() | kind_durable();\n         } else {\n             for vec::each(*variants) |variant| {\n                 for variant.args.each |aty| {\n@@ -4237,7 +4237,7 @@ fn iter_bound_traits_and_supertraits(tcx: ctxt,\n             ty::bound_trait(bound_t) => bound_t,\n \n             ty::bound_copy | ty::bound_send |\n-            ty::bound_const | ty::bound_owned => {\n+            ty::bound_const | ty::bound_durable => {\n                 loop; // skip non-trait bounds\n             }\n         };\n@@ -4647,9 +4647,9 @@ impl param_bound : cmp::Eq {\n                     _ => false\n                 }\n             }\n-            bound_owned => {\n+            bound_durable => {\n                 match (*other) {\n-                    bound_owned => true,\n+                    bound_durable => true,\n                     _ => false\n                 }\n             }"}, {"sha": "4c44642b325a1628833be30cca34f510877cdc22", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -80,7 +80,7 @@ fn get_region_reporting_err(tcx: ty::ctxt,\n     }\n }\n \n-fn ast_region_to_region<AC: ast_conv, RS: region_scope Copy Owned>(\n+fn ast_region_to_region<AC: ast_conv, RS: region_scope Copy Durable>(\n     self: AC, rscope: RS, span: span, a_r: @ast::region) -> ty::Region {\n \n     let res = match a_r.node {\n@@ -93,7 +93,7 @@ fn ast_region_to_region<AC: ast_conv, RS: region_scope Copy Owned>(\n     get_region_reporting_err(self.tcx(), span, res)\n }\n \n-fn ast_path_to_substs_and_ty<AC: ast_conv, RS: region_scope Copy Owned>(\n+fn ast_path_to_substs_and_ty<AC: ast_conv, RS: region_scope Copy Durable>(\n     self: AC, rscope: RS, did: ast::def_id,\n     path: @ast::path) -> ty_param_substs_and_ty {\n \n@@ -142,7 +142,7 @@ fn ast_path_to_substs_and_ty<AC: ast_conv, RS: region_scope Copy Owned>(\n     {substs: substs, ty: ty::subst(tcx, &substs, decl_ty)}\n }\n \n-pub fn ast_path_to_ty<AC: ast_conv, RS: region_scope Copy Owned>(\n+pub fn ast_path_to_ty<AC: ast_conv, RS: region_scope Copy Durable>(\n     self: AC,\n     rscope: RS,\n     did: ast::def_id,\n@@ -165,10 +165,10 @@ const NO_TPS: uint = 2;\n // Parses the programmer's textual representation of a type into our\n // internal notion of a type. `getter` is a function that returns the type\n // corresponding to a definition ID:\n-fn ast_ty_to_ty<AC: ast_conv, RS: region_scope Copy Owned>(\n+fn ast_ty_to_ty<AC: ast_conv, RS: region_scope Copy Durable>(\n     self: AC, rscope: RS, &&ast_ty: @ast::Ty) -> ty::t {\n \n-    fn ast_mt_to_mt<AC: ast_conv, RS: region_scope Copy Owned>(\n+    fn ast_mt_to_mt<AC: ast_conv, RS: region_scope Copy Durable>(\n         self: AC, rscope: RS, mt: ast::mt) -> ty::mt {\n \n         return {ty: ast_ty_to_ty(self, rscope, mt.ty), mutbl: mt.mutbl};\n@@ -177,7 +177,7 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope Copy Owned>(\n     // Handle @, ~, and & being able to mean estrs and evecs.\n     // If a_seq_ty is a str or a vec, make it an estr/evec.\n     // Also handle function sigils and first-class trait types.\n-    fn mk_pointer<AC: ast_conv, RS: region_scope Copy Owned>(\n+    fn mk_pointer<AC: ast_conv, RS: region_scope Copy Durable>(\n         self: AC,\n         rscope: RS,\n         a_seq_ty: ast::mt,\n@@ -390,7 +390,7 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope Copy Owned>(\n     return typ;\n }\n \n-fn ty_of_arg<AC: ast_conv, RS: region_scope Copy Owned>(\n+fn ty_of_arg<AC: ast_conv, RS: region_scope Copy Durable>(\n     self: AC, rscope: RS, a: ast::arg,\n     expected_ty: Option<ty::arg>) -> ty::arg {\n \n@@ -439,7 +439,7 @@ fn ty_of_arg<AC: ast_conv, RS: region_scope Copy Owned>(\n type expected_tys = Option<{inputs: ~[ty::arg],\n                             output: ty::t}>;\n \n-fn ty_of_fn_decl<AC: ast_conv, RS: region_scope Copy Owned>(\n+fn ty_of_fn_decl<AC: ast_conv, RS: region_scope Copy Durable>(\n     self: AC, rscope: RS,\n     ast_proto: ast::Proto,\n     purity: ast::purity,"}, {"sha": "845c13f3879de099325d4168b043ce2a4c3dca97", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -343,7 +343,7 @@ impl LookupContext {\n                 ty::bound_trait(bound_t) => bound_t,\n \n                 ty::bound_copy | ty::bound_send |\n-                ty::bound_const | ty::bound_owned => {\n+                ty::bound_const | ty::bound_durable => {\n                     loop; // skip non-trait bounds\n                 }\n             };"}, {"sha": "5467eae82662e979097f3bf921731547358ad0b6", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -28,7 +28,6 @@ this point a bit better.\n */\n \n use middle::freevars::get_freevars;\n-use middle::kind::check_owned;\n use middle::pat_util::pat_bindings;\n use middle::ty::{encl_region, re_scope};\n use middle::ty::{ty_fn_proto, vstore_box, vstore_fixed, vstore_slice};"}, {"sha": "d14646fa22052e2b3af4f38e4c37231ef6b2ce30", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -88,7 +88,7 @@ fn collect_item_types(ccx: @crate_ctxt, crate: @ast::crate) {\n }\n \n impl @crate_ctxt {\n-    fn to_ty<RS: region_scope Copy Owned>(\n+    fn to_ty<RS: region_scope Copy Durable>(\n         rs: RS, ast_ty: @ast::Ty) -> ty::t {\n \n         ast_ty_to_ty(self, rs, ast_ty)\n@@ -863,7 +863,7 @@ fn ty_of_foreign_item(ccx: @crate_ctxt, it: @ast::foreign_item)\n // Translate the AST's notion of ty param bounds (which are just newtyped Tys)\n // to ty's notion of ty param bounds, which can either be user-defined traits,\n // or one of the four built-in traits (formerly known as kinds): Const, Copy,\n-// Owned, and Send.\n+// Durable, and Send.\n fn compute_bounds(ccx: @crate_ctxt,\n                   ast_bounds: @~[ast::ty_param_bound]) -> ty::param_bounds {\n     @do vec::flat_map(*ast_bounds) |b| {\n@@ -881,8 +881,8 @@ fn compute_bounds(ccx: @crate_ctxt,\n                 else if d == li.const_trait {\n                     ~[ty::bound_const]\n                 }\n-                else if d == li.owned_trait {\n-                    ~[ty::bound_owned]\n+                else if d == li.durable_trait {\n+                    ~[ty::bound_durable]\n                 }\n                 else {\n                     // Must be a user-defined trait"}, {"sha": "5fba2b7e6fad69ad39ab2c4847cf540ab6b09e91", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -60,7 +60,7 @@ fn bound_self_region(rp: Option<ty::region_variance>) -> Option<ty::Region> {\n }\n \n enum anon_rscope = {anon: ty::Region, base: region_scope};\n-fn in_anon_rscope<RS: region_scope Copy Owned>(self: RS, r: ty::Region)\n+fn in_anon_rscope<RS: region_scope Copy Durable>(self: RS, r: ty::Region)\n     -> @anon_rscope {\n     @anon_rscope({anon: r, base: self as region_scope})\n }\n@@ -80,7 +80,7 @@ struct binding_rscope {\n     base: region_scope,\n     mut anon_bindings: uint,\n }\n-fn in_binding_rscope<RS: region_scope Copy Owned>(self: RS)\n+fn in_binding_rscope<RS: region_scope Copy Durable>(self: RS)\n     -> @binding_rscope {\n     let base = self as region_scope;\n     @binding_rscope { base: base, anon_bindings: 0 }"}, {"sha": "b5494c35a83898bf56fefcdaaf843a41513cd9be", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -11,7 +11,7 @@\n use std::map::HashMap;\n use middle::ty;\n use middle::ty::{arg, canon_mode};\n-use middle::ty::{bound_copy, bound_const, bound_owned, bound_send,\n+use middle::ty::{bound_copy, bound_const, bound_durable, bound_send,\n         bound_trait};\n use middle::ty::{bound_region, br_anon, br_named, br_self, br_cap_avoid};\n use middle::ty::{ctxt, field, method};"}, {"sha": "687eff887c8b2774d560dd83e8a9fc62e96efe10", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -210,7 +210,7 @@ mod tests {\n         assert (deq.get(3) == d);\n     }\n \n-    fn test_parameterized<T: Copy Eq Owned>(a: T, b: T, c: T, d: T) {\n+    fn test_parameterized<T: Copy Eq Durable>(a: T, b: T, c: T, d: T) {\n         let deq: deque::Deque<T> = deque::create::<T>();\n         assert (deq.size() == 0u);\n         deq.add_front(a);"}, {"sha": "16b6360b55987a03281036694d58e71157547453", "filename": "src/test/compile-fail/issue-2548.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -34,7 +34,7 @@ fn main() {\n         let mut res = foo(x);\n         \n         let mut v = ~[mut];\n-        v = move ~[mut (move res)] + v; //~ ERROR instantiating a type parameter with an incompatible type (needs `copy`, got `owned`, missing `copy`)\n+        v = move ~[mut (move res)] + v; //~ ERROR instantiating a type parameter with an incompatible type (needs `copy`, got `durable`, missing `copy`)\n         assert (v.len() == 2);\n     }\n "}, {"sha": "d1eae60ac9d2da5b499a8cc3591e26c93a341e8c", "filename": "src/test/compile-fail/kindck-owned-trait-scoped.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait-scoped.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -32,10 +32,10 @@ fn to_foo<T:Copy>(t: T) {\n fn to_foo_2<T:Copy>(t: T) -> foo {\n     // Not OK---T may contain borrowed ptrs and it is going to escape\n     // as part of the returned foo value\n-    {f:t} as foo //~ ERROR value may contain borrowed pointers; use `owned` bound\n+    {f:t} as foo //~ ERROR value may contain borrowed pointers; use `durable` bound\n }\n \n-fn to_foo_3<T:Copy Owned>(t: T) -> foo {\n+fn to_foo_3<T:Copy Durable>(t: T) -> foo {\n     // OK---T may escape as part of the returned foo value, but it is\n     // owned and hence does not contain borrowed ptrs\n     {f:t} as foo"}, {"sha": "35dc066e32089cb6d77fb9d99dc41ab542ab5490", "filename": "src/test/compile-fail/kindck-owned-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned-trait.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -11,10 +11,10 @@\n trait foo { fn foo(); }\n \n fn to_foo<T: Copy foo>(t: T) -> foo {\n-    t as foo //~ ERROR value may contain borrowed pointers; use `owned` bound\n+    t as foo //~ ERROR value may contain borrowed pointers; use `durable` bound\n }\n \n-fn to_foo2<T: Copy foo Owned>(t: T) -> foo {\n+fn to_foo2<T: Copy foo Durable>(t: T) -> foo {\n     t as foo\n }\n "}, {"sha": "111b621c5a08f17182e2bf03d72c513a31626b14", "filename": "src/test/compile-fail/kindck-owned.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-owned.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -12,18 +12,18 @@ fn copy1<T: Copy>(t: T) -> fn@() -> T {\n     fn@() -> T { t } //~ ERROR value may contain borrowed pointers\n }\n \n-fn copy2<T: Copy Owned>(t: T) -> fn@() -> T {\n+fn copy2<T: Copy Durable>(t: T) -> fn@() -> T {\n     fn@() -> T { t }\n }\n \n fn main() {\n     let x = &3;\n-    copy2(&x); //~ ERROR missing `owned`\n+    copy2(&x); //~ ERROR missing `durable`\n \n     copy2(@3);\n-    copy2(@&x); //~ ERROR missing `owned`\n+    copy2(@&x); //~ ERROR missing `durable`\n \n     copy2(fn@() {});\n     copy2(fn~() {}); //~ WARNING instantiating copy type parameter with a not implicitly copyable type\n-    copy2(fn&() {}); //~ ERROR missing `copy owned`\n+    copy2(fn&() {}); //~ ERROR missing `copy durable`\n }"}, {"sha": "8acbee4400ce3c214351345cb30208d761d5a676", "filename": "src/test/run-pass/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -12,7 +12,7 @@ type pair<A,B> = {\n     a: A, b: B\n };\n \n-fn f<A:Copy Owned>(a: A, b: u16) -> fn@() -> (A, u16) {\n+fn f<A:Copy Durable>(a: A, b: u16) -> fn@() -> (A, u16) {\n     fn@() -> (A, u16) { (a, b) }\n }\n "}, {"sha": "a0b55a1ea8d458e8247e17f1e6be182b18398820", "filename": "src/test/run-pass/close-over-big-then-small-data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -16,7 +16,7 @@ type pair<A,B> = {\n     a: A, b: B\n };\n \n-fn f<A:Copy Owned>(a: A, b: u16) -> fn@() -> (A, u16) {\n+fn f<A:Copy Durable>(a: A, b: u16) -> fn@() -> (A, u16) {\n     fn@() -> (A, u16) { (a, b) }\n }\n "}, {"sha": "80109170ac687e6317b6b74f5b2214da8eeddea0", "filename": "src/test/run-pass/fixed-point-bind-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -11,11 +11,11 @@\n // xfail-fast\n #[legacy_modes];\n \n-fn fix_help<A: Owned, B: Send>(f: extern fn(fn@(A) -> B, A) -> B, x: A) -> B {\n+fn fix_help<A: Durable, B: Send>(f: extern fn(fn@(A) -> B, A) -> B, x: A) -> B {\n     return f({|a|fix_help(f, a)}, x);\n }\n \n-fn fix<A: Owned, B: Send>(f: extern fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n+fn fix<A: Durable, B: Send>(f: extern fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n     return {|a|fix_help(f, a)};\n }\n "}, {"sha": "7156e015473619e0043cc7fb14ea11f84adac032", "filename": "src/test/run-pass/issue-2734.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Ftest%2Frun-pass%2Fissue-2734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2734.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -11,7 +11,7 @@\n trait hax { } \n impl <A> A: hax { } \n \n-fn perform_hax<T: Owned>(x: @T) -> hax {\n+fn perform_hax<T: Durable>(x: @T) -> hax {\n     x as hax \n }\n "}, {"sha": "360e7b3c241b458436910defdf3f73d2604578f3", "filename": "src/test/run-pass/issue-2735.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Ftest%2Frun-pass%2Fissue-2735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2735.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -11,7 +11,7 @@\n trait hax { } \n impl <A> A: hax { } \n \n-fn perform_hax<T: Owned>(x: @T) -> hax {\n+fn perform_hax<T: Durable>(x: @T) -> hax {\n     x as hax \n }\n "}, {"sha": "33e5e386e390dcd08464542530e992cbeb375bd4", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a277081ee481174cd28f7e85aaf1c4de912cbf4f/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=a277081ee481174cd28f7e85aaf1c4de912cbf4f", "patch": "@@ -59,7 +59,7 @@ fn square_from_char(c: char) -> square {\n     }\n }\n \n-fn read_board_grid<rdr: Owned io::Reader>(+in: rdr) -> ~[~[square]] {\n+fn read_board_grid<rdr: Durable io::Reader>(+in: rdr) -> ~[~[square]] {\n     let in = (move in) as io::Reader;\n     let mut grid = ~[];\n     for in.each_line |line| {"}]}