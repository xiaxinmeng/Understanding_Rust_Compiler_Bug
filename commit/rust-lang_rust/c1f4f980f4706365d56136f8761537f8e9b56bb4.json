{"sha": "c1f4f980f4706365d56136f8761537f8e9b56bb4", "node_id": "C_kwDOAAsO6NoAKGMxZjRmOTgwZjQ3MDYzNjVkNTYxMzZmODc2MTUzN2Y4ZTliNTZiYjQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-06T06:04:37Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-06T06:05:14Z"}, "message": "Do wfcheck on ADT field before Sized check", "tree": {"sha": "5f85039280c8fae6b12df0ce29ec85722500b541", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f85039280c8fae6b12df0ce29ec85722500b541"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1f4f980f4706365d56136f8761537f8e9b56bb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1f4f980f4706365d56136f8761537f8e9b56bb4", "html_url": "https://github.com/rust-lang/rust/commit/c1f4f980f4706365d56136f8761537f8e9b56bb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1f4f980f4706365d56136f8761537f8e9b56bb4/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760237ff785fd14ac7fdab799f4d695d86cf9cbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/760237ff785fd14ac7fdab799f4d695d86cf9cbf", "html_url": "https://github.com/rust-lang/rust/commit/760237ff785fd14ac7fdab799f4d695d86cf9cbf"}], "stats": {"total": 85, "additions": 51, "deletions": 34}, "files": [{"sha": "c963dc1689380a8cac4908d82722134a30c71d00", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1f4f980f4706365d56136f8761537f8e9b56bb4/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f4f980f4706365d56136f8761537f8e9b56bb4/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=c1f4f980f4706365d56136f8761537f8e9b56bb4", "patch": "@@ -403,7 +403,7 @@ pub enum ObligationCauseCode<'tcx> {\n     QuestionMark,\n \n     /// Well-formed checking. If a `WellFormedLoc` is provided,\n-    /// then it will be used to eprform HIR-based wf checking\n+    /// then it will be used to perform HIR-based wf checking\n     /// after an error occurs, in order to generate a more precise error span.\n     /// This is purely for diagnostic purposes - it is always\n     /// correct to use `MiscObligation` instead, or to specify"}, {"sha": "e6c21608c8ae236fcf3e42166c0f03b9c4d511c7", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c1f4f980f4706365d56136f8761537f8e9b56bb4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f4f980f4706365d56136f8761537f8e9b56bb4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=c1f4f980f4706365d56136f8761537f8e9b56bb4", "patch": "@@ -1008,6 +1008,15 @@ fn check_type_defn<'tcx, F>(\n         let packed = tcx.adt_def(item.def_id).repr().packed();\n \n         for variant in &variants {\n+            // All field types must be well-formed.\n+            for field in &variant.fields {\n+                fcx.register_wf_obligation(\n+                    field.ty.into(),\n+                    field.span,\n+                    ObligationCauseCode::WellFormed(Some(WellFormedLoc::Ty(field.def_id))),\n+                )\n+            }\n+\n             // For DST, or when drop needs to copy things around, all\n             // intermediate types must be sized.\n             let needs_drop_copy = || {\n@@ -1024,6 +1033,7 @@ fn check_type_defn<'tcx, F>(\n                     }\n                 }\n             };\n+            // All fields (except for possibly the last) should be sized.\n             let all_sized = all_sized || variant.fields.is_empty() || needs_drop_copy();\n             let unsized_len = if all_sized { 0 } else { 1 };\n             for (idx, field) in\n@@ -1048,15 +1058,6 @@ fn check_type_defn<'tcx, F>(\n                 );\n             }\n \n-            // All field types must be well-formed.\n-            for field in &variant.fields {\n-                fcx.register_wf_obligation(\n-                    field.ty.into(),\n-                    field.span,\n-                    ObligationCauseCode::WellFormed(Some(WellFormedLoc::Ty(field.def_id))),\n-                )\n-            }\n-\n             // Explicit `enum` discriminant values must const-evaluate successfully.\n             if let Some(discr_def_id) = variant.explicit_discr {\n                 let discr_substs = InternalSubsts::identity_for_item(tcx, discr_def_id.to_def_id());"}, {"sha": "487b83dfa3fccc5dd925bd1290145aa8a3152598", "filename": "src/test/ui/generic-associated-types/bugs/issue-80626.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c1f4f980f4706365d56136f8761537f8e9b56bb4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1f4f980f4706365d56136f8761537f8e9b56bb4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr?ref=c1f4f980f4706365d56136f8761537f8e9b56bb4", "patch": "@@ -4,16 +4,11 @@ error[E0275]: overflow evaluating the requirement `LinkedList<A>: Sized`\n LL |     Next(A::Allocated<Self>)\n    |          ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: no field of an enum variant may have a dynamically sized type\n-   = help: change the field's type to have a statically known size\n-help: borrowed types always have a statically known size\n+note: required by a bound in `Allocator::Allocated`\n+  --> $DIR/issue-80626.rs:9:20\n    |\n-LL |     Next(&A::Allocated<Self>)\n-   |          +\n-help: the `Box` type always has a statically known size and allocates its contents in the heap\n-   |\n-LL |     Next(Box<A::Allocated<Self>>)\n-   |          ++++                  +\n+LL |     type Allocated<T>;\n+   |                    ^ required by this bound in `Allocator::Allocated`\n \n error: aborting due to previous error\n "}, {"sha": "5bb98675361a0852e2ba176eaa5acc7ed219c3c7", "filename": "src/test/ui/union/issue-81199.stderr", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c1f4f980f4706365d56136f8761537f8e9b56bb4/src%2Ftest%2Fui%2Funion%2Fissue-81199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1f4f980f4706365d56136f8761537f8e9b56bb4/src%2Ftest%2Fui%2Funion%2Fissue-81199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Fissue-81199.stderr?ref=c1f4f980f4706365d56136f8761537f8e9b56bb4", "patch": "@@ -1,28 +1,18 @@\n-error[E0277]: the trait bound `T: Pointee` is not satisfied in `PtrComponents<T>`\n+error[E0277]: the trait bound `T: Pointee` is not satisfied\n   --> $DIR/issue-81199.rs:5:17\n    |\n LL |     components: PtrComponents<T>,\n-   |                 ^^^^^^^^^^^^^^^^ within `PtrComponents<T>`, the trait `Pointee` is not implemented for `T`\n+   |                 ^^^^^^^^^^^^^^^^ the trait `Pointee` is not implemented for `T`\n    |\n-note: required because it appears within the type `PtrComponents<T>`\n-  --> $DIR/issue-81199.rs:10:8\n+note: required by a bound in `PtrComponents`\n+  --> $DIR/issue-81199.rs:10:25\n    |\n LL | struct PtrComponents<T: Pointee + ?Sized> {\n-   |        ^^^^^^^^^^^^^\n-   = note: no field of a union may have a dynamically sized type\n-   = help: change the field's type to have a statically known size\n+   |                         ^^^^^^^ required by this bound in `PtrComponents`\n help: consider further restricting this bound\n    |\n LL | union PtrRepr<T: ?Sized + Pointee> {\n    |                         +++++++++\n-help: borrowed types always have a statically known size\n-   |\n-LL |     components: &PtrComponents<T>,\n-   |                 +\n-help: the `Box` type always has a statically known size and allocates its contents in the heap\n-   |\n-LL |     components: Box<PtrComponents<T>>,\n-   |                 ++++                +\n \n error: aborting due to previous error\n "}, {"sha": "c2948086b200b7f1812a6e613f3bd0c61a341852", "filename": "src/test/ui/wf/issue-96810.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1f4f980f4706365d56136f8761537f8e9b56bb4/src%2Ftest%2Fui%2Fwf%2Fissue-96810.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f4f980f4706365d56136f8761537f8e9b56bb4/src%2Ftest%2Fui%2Fwf%2Fissue-96810.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fissue-96810.rs?ref=c1f4f980f4706365d56136f8761537f8e9b56bb4", "patch": "@@ -0,0 +1,12 @@\n+struct S<T: Tr>(T::Assoc);\n+\n+trait Tr {\n+    type Assoc;\n+}\n+\n+struct Hoge<K> {\n+    s: S<K>, //~ ERROR the trait bound `K: Tr` is not satisfied\n+    a: u32,\n+}\n+\n+fn main() {}"}, {"sha": "1407e62b1e13955aa10798d9ac72b1c404f328b3", "filename": "src/test/ui/wf/issue-96810.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c1f4f980f4706365d56136f8761537f8e9b56bb4/src%2Ftest%2Fui%2Fwf%2Fissue-96810.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1f4f980f4706365d56136f8761537f8e9b56bb4/src%2Ftest%2Fui%2Fwf%2Fissue-96810.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fissue-96810.stderr?ref=c1f4f980f4706365d56136f8761537f8e9b56bb4", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `K: Tr` is not satisfied\n+  --> $DIR/issue-96810.rs:8:8\n+   |\n+LL |     s: S<K>,\n+   |        ^^^^ the trait `Tr` is not implemented for `K`\n+   |\n+note: required by a bound in `S`\n+  --> $DIR/issue-96810.rs:1:13\n+   |\n+LL | struct S<T: Tr>(T::Assoc);\n+   |             ^^ required by this bound in `S`\n+help: consider restricting type parameter `K`\n+   |\n+LL | struct Hoge<K: Tr> {\n+   |              ++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}