{"sha": "ee901858a27bf00c7dd66e7cfecb9dd97029dba8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlOTAxODU4YTI3YmYwMGM3ZGQ2NmU3Y2ZlY2I5ZGQ5NzAyOWRiYTg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-28T22:02:00Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-28T22:02:00Z"}, "message": "rustboot: Emit an error instead of asserting in trans when a T is passed by value", "tree": {"sha": "065039a8a875af53eb25f9698635142b934d2355", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/065039a8a875af53eb25f9698635142b934d2355"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee901858a27bf00c7dd66e7cfecb9dd97029dba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee901858a27bf00c7dd66e7cfecb9dd97029dba8", "html_url": "https://github.com/rust-lang/rust/commit/ee901858a27bf00c7dd66e7cfecb9dd97029dba8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee901858a27bf00c7dd66e7cfecb9dd97029dba8/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "429964b4393bb96b59d56c5687dd55e23a51c850", "url": "https://api.github.com/repos/rust-lang/rust/commits/429964b4393bb96b59d56c5687dd55e23a51c850", "html_url": "https://github.com/rust-lang/rust/commit/429964b4393bb96b59d56c5687dd55e23a51c850"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "21aecaf1455b2693099efdb3b935c349d2cb02f7", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ee901858a27bf00c7dd66e7cfecb9dd97029dba8/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/ee901858a27bf00c7dd66e7cfecb9dd97029dba8/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=ee901858a27bf00c7dd66e7cfecb9dd97029dba8", "patch": "@@ -1308,6 +1308,23 @@ let process_crate (cx:Semant.ctxt) (crate:Ast.crate) : unit =\n         Common.err (Some item_id) \"this function must return a value\"\n     in\n \n+    let check_fn_ty_validity item_id (ty_sig, _) =\n+      let check_input_slot i slot =\n+        match slot with\n+            {\n+              Ast.slot_ty = Some (Ast.TY_param _);\n+              Ast.slot_mode = Ast.MODE_local\n+            } ->\n+              Common.err\n+                (Some item_id)\n+                \"parameter %d of this type-parametric function must be \\\n+                passed by reference, not by value\"\n+                (i + 1)\n+          | _ -> ()\n+      in\n+      Array.iteri check_input_slot ty_sig.Ast.sig_input_slots\n+    in\n+\n     let visit_mod_item_pre _ _ item =\n       let { Common.node = item; Common.id = item_id } = item in\n       match item.Ast.decl_item with\n@@ -1316,7 +1333,9 @@ let process_crate (cx:Semant.ctxt) (crate:Ast.crate) : unit =\n             let fn_ty = Hashtbl.find cx.Semant.ctxt_all_item_types item_id in\n             begin\n               match fn_ty with\n-                  Ast.TY_fn ty_fn -> push_fn_ctx_of_ty_fn ty_fn\n+                  Ast.TY_fn ty_fn ->\n+                    check_fn_ty_validity item_id ty_fn;\n+                    push_fn_ctx_of_ty_fn ty_fn\n                 | _ ->\n                   Common.bug ()\n                     \"Type.visit_mod_item_pre: fn item didn't have a fn type\""}, {"sha": "da8d3c0aff71deed0b37c49d9cf9c8bd7cbcafdd", "filename": "src/lib/list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee901858a27bf00c7dd66e7cfecb9dd97029dba8/src%2Flib%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee901858a27bf00c7dd66e7cfecb9dd97029dba8/src%2Flib%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flist.rs?ref=ee901858a27bf00c7dd66e7cfecb9dd97029dba8", "patch": "@@ -12,7 +12,7 @@ tag list[T] {\n     nil;\n }\n \n-fn foldl[T,U](&list[T] ls, U u, fn(&T t, U u) -> U f) -> U {\n+fn foldl[T,U](&list[T] ls, &U u, fn(&T t, U u) -> U f) -> U {\n   alt(ls) {\n     case (cons[T](?hd, ?tl)) {\n       auto u_ = f(hd, u);"}]}