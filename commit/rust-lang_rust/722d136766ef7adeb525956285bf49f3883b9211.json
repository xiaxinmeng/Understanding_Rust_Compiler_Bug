{"sha": "722d136766ef7adeb525956285bf49f3883b9211", "node_id": "C_kwDOAAsO6NoAKDcyMmQxMzY3NjZlZjdhZGViNTI1OTU2Mjg1YmY0OWYzODgzYjkyMTE", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "git@hkmatsumoto.com", "date": "2022-08-28T06:59:06Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "git@hkmatsumoto.com", "date": "2022-08-28T07:05:44Z"}, "message": "Use hir::Map to prevent false positives", "tree": {"sha": "69444ec10565f6a796ce7881341b210ab24f7000", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69444ec10565f6a796ce7881341b210ab24f7000"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/722d136766ef7adeb525956285bf49f3883b9211", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/722d136766ef7adeb525956285bf49f3883b9211", "html_url": "https://github.com/rust-lang/rust/commit/722d136766ef7adeb525956285bf49f3883b9211", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/722d136766ef7adeb525956285bf49f3883b9211/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bafa89bc467a2b5862c409fc6cae9c01fdf25c6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bafa89bc467a2b5862c409fc6cae9c01fdf25c6e", "html_url": "https://github.com/rust-lang/rust/commit/bafa89bc467a2b5862c409fc6cae9c01fdf25c6e"}], "stats": {"total": 98, "additions": 58, "deletions": 40}, "files": [{"sha": "ebf5baf5050c643df9a183f51e5472b788bcd71b", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 54, "deletions": 26, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/722d136766ef7adeb525956285bf49f3883b9211/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722d136766ef7adeb525956285bf49f3883b9211/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=722d136766ef7adeb525956285bf49f3883b9211", "patch": "@@ -524,8 +524,8 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n                 if self.not_enough_args_provided() {\n                     self.suggest_adding_args(err);\n                 } else if self.too_many_args_provided() {\n+                    self.suggest_moving_args_from_assoc_fn_to_trait(err);\n                     self.suggest_removing_args_or_generics(err);\n-                    self.suggest_moving_args(err);\n                 } else {\n                     unreachable!();\n                 }\n@@ -661,34 +661,62 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n     /// ```compile_fail\n     /// Into::into::<Option<_>>(42) // suggests considering `Into::<Option<_>>::into(42)`\n     /// ```\n-    fn suggest_moving_args(&self, err: &mut Diagnostic) {\n-        if let Some(trait_) = self.tcx.trait_of_item(self.def_id) {\n-            // HACK(hkmatsumoto): Ugly way to tell \"<trait>::<assoc fn>()\" from \"x.<assoc fn>()\";\n-            // we don't care the latter (for now).\n-            if self.path_segment.res == Some(hir::def::Res::Err) {\n-                return;\n-            }\n-\n-            // Say, if the assoc fn takes `A`, `B` and `C` as generic arguments while expecting 1\n-            // argument, and its trait expects 2 arguments. It is hard to \"split\" them right as\n-            // there are too many cases to handle: `A` `B` | `C`, `A` `B` | `C`, `A` `C` | `B`, ...\n-            let num_assoc_fn_expected_args =\n-                self.num_expected_type_or_const_args() + self.num_expected_lifetime_args();\n-            if num_assoc_fn_expected_args > 0 {\n-                return;\n-            }\n+    fn suggest_moving_args_from_assoc_fn_to_trait(&self, err: &mut Diagnostic) {\n+        let trait_ = match self.tcx.trait_of_item(self.def_id) {\n+            Some(def_id) => def_id,\n+            None => return,\n+        };\n \n-            let num_assoc_fn_excess_args =\n-                self.num_excess_type_or_const_args() + self.num_excess_lifetime_args();\n+        // Skip suggestion when the associated function is itself generic, it is unclear\n+        // how to split the provided parameters between those to suggest to the trait and\n+        // those to remain on the associated type.\n+        let num_assoc_fn_expected_args =\n+            self.num_expected_type_or_const_args() + self.num_expected_lifetime_args();\n+        if num_assoc_fn_expected_args > 0 {\n+            return;\n+        }\n \n-            let trait_generics = self.tcx.generics_of(trait_);\n-            let num_trait_generics_except_self =\n-                trait_generics.count() - if trait_generics.has_self { 1 } else { 0 };\n+        let num_assoc_fn_excess_args =\n+            self.num_excess_type_or_const_args() + self.num_excess_lifetime_args();\n+\n+        let trait_generics = self.tcx.generics_of(trait_);\n+        let num_trait_generics_except_self =\n+            trait_generics.count() - if trait_generics.has_self { 1 } else { 0 };\n+\n+        if let Some(hir_id) = self.path_segment.hir_id\n+        && let Some(parent_node) = self.tcx.hir().find_parent_node(hir_id)\n+        && let Some(parent_node) = self.tcx.hir().find(parent_node)\n+        && let hir::Node::Expr(expr) = parent_node {\n+            match expr.kind {\n+                hir::ExprKind::Path(ref qpath) => {\n+                    self.suggest_moving_args_from_assoc_fn_to_trait_for_qualified_path(\n+                        err,\n+                        trait_,\n+                        qpath,\n+                        num_assoc_fn_excess_args,\n+                        num_trait_generics_except_self\n+                    )\n+                },\n+                // TODO(hkmatsumoto): Emit similar suggestion for \"x.<assoc fn>()\"\n+                hir::ExprKind::MethodCall(..) => return,\n+                _ => return,\n+            }\n+        }\n+    }\n \n-            // FIXME(hkmatsumoto): RHS of this condition ideally should be\n-            // `num_trait_generics_except_self` - \"# of generic args already provided to trait\"\n-            // but unable to get that information with `self.def_id`.\n-            if num_assoc_fn_excess_args == num_trait_generics_except_self {\n+    fn suggest_moving_args_from_assoc_fn_to_trait_for_qualified_path(\n+        &self,\n+        err: &mut Diagnostic,\n+        trait_: DefId,\n+        qpath: &'tcx hir::QPath<'tcx>,\n+        num_assoc_fn_excess_args: usize,\n+        num_trait_generics_except_self: usize,\n+    ) {\n+        if let hir::QPath::Resolved(_, path) = qpath\n+        && let Some(trait_path_segment) = path.segments.get(0) {\n+            let num_generic_args_supplied_to_trait = trait_path_segment.args().num_generic_params();\n+\n+            if num_assoc_fn_excess_args == num_trait_generics_except_self - num_generic_args_supplied_to_trait {\n                 if let Some(span) = self.gen_args.span_ext()\n                 && let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n                     let msg = format!("}, {"sha": "17a3e8b4cf831c630a401fdf4887018e8b0b06bc", "filename": "src/test/ui/suggestions/issue-89064.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/722d136766ef7adeb525956285bf49f3883b9211/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.rs", "raw_url": "https://github.com/rust-lang/rust/raw/722d136766ef7adeb525956285bf49f3883b9211/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.rs?ref=722d136766ef7adeb525956285bf49f3883b9211", "patch": "@@ -24,9 +24,7 @@ fn main() {\n     //~| HELP remove these generics\n     //~| HELP consider moving these generic arguments\n \n-    // bad suggestion\n     let _ = A::<S>::foo::<S>();\n     //~^ ERROR\n     //~| HELP remove these generics\n-    //~| HELP consider moving this generic argument\n }"}, {"sha": "846cd817505c3d72ab00482491d2294376ee6b50", "filename": "src/test/ui/suggestions/issue-89064.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/722d136766ef7adeb525956285bf49f3883b9211/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/722d136766ef7adeb525956285bf49f3883b9211/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-89064.stderr?ref=722d136766ef7adeb525956285bf49f3883b9211", "patch": "@@ -43,26 +43,18 @@ LL +     let _ = B::<S, S>::bar();\n    |\n \n error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n-  --> $DIR/issue-89064.rs:28:21\n+  --> $DIR/issue-89064.rs:27:21\n    |\n LL |     let _ = A::<S>::foo::<S>();\n-   |                     ^^^ expected 0 generic arguments\n+   |                     ^^^----- help: remove these generics\n+   |                     |\n+   |                     expected 0 generic arguments\n    |\n note: associated function defined here, with 0 generic parameters\n   --> $DIR/issue-89064.rs:4:8\n    |\n LL |     fn foo() {}\n    |        ^^^\n-help: remove these generics\n-   |\n-LL -     let _ = A::<S>::foo::<S>();\n-LL +     let _ = A::<S>::foo();\n-   |\n-help: consider moving this generic argument to the `A` trait, which takes up to 1 argument\n-   |\n-LL -     let _ = A::<S>::foo::<S>();\n-LL +     let _ = A::<S>::<S>::foo();\n-   |\n \n error: aborting due to 3 previous errors\n "}]}