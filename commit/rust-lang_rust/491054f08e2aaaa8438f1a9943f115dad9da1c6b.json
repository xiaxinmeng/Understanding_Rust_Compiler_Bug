{"sha": "491054f08e2aaaa8438f1a9943f115dad9da1c6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MTA1NGYwOGUyYWFhYTg0MzhmMWE5OTQzZjExNWRhZDlkYTFjNmI=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-03-06T21:15:54Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-03-07T02:20:16Z"}, "message": "Make #[derive(Anything)] into sugar for #[derive_Anything]\n\nThis is a hack, but I don't think we can do much better as long as `derive` is\nrunning at the syntax expansion phase.\n\nIf the custom_derive feature gate is enabled, this works with user-defined\ntraits and syntax extensions. Without the gate, you can't use e.g. #[derive_Clone]\ndirectly, so this does not change the stable language.\n\nThis commit also cleans up the deriving code somewhat, and forbids some\npreviously-meaningless attribute syntax. For this reason it's technically a\n\n    [breaking-change]", "tree": {"sha": "7ab7e4dfd5b60e7d3d3aedb501065da17bc35204", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ab7e4dfd5b60e7d3d3aedb501065da17bc35204"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/491054f08e2aaaa8438f1a9943f115dad9da1c6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/491054f08e2aaaa8438f1a9943f115dad9da1c6b", "html_url": "https://github.com/rust-lang/rust/commit/491054f08e2aaaa8438f1a9943f115dad9da1c6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/491054f08e2aaaa8438f1a9943f115dad9da1c6b/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e60e6f0693adfd03340dff31023c7517dc3af1b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e60e6f0693adfd03340dff31023c7517dc3af1b5", "html_url": "https://github.com/rust-lang/rust/commit/e60e6f0693adfd03340dff31023c7517dc3af1b5"}], "stats": {"total": 497, "additions": 372, "deletions": 125}, "files": [{"sha": "a772d98583e499f091b6fc3d8dda54fcfebe41e8", "filename": "src/doc/reference.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=491054f08e2aaaa8438f1a9943f115dad9da1c6b", "patch": "@@ -2429,6 +2429,10 @@ The currently implemented features of the reference compiler are:\n                        so that new attributes can be added in a bacwards compatible\n                        manner (RFC 572).\n \n+* `custom_derive` - Allows the use of `#[derive(Foo,Bar)]` as sugar for\n+                    `#[derive_Foo] #[derive_Bar]`, which can be user-defined syntax\n+                    extensions.\n+\n * `intrinsics` - Allows use of the \"rust-intrinsics\" ABI. Compiler intrinsics\n                  are inherently unstable and no promise about them is made.\n "}, {"sha": "8aeafe419daa925cd759c922ea417e1e9859f9cd", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=491054f08e2aaaa8438f1a9943f115dad9da1c6b", "patch": "@@ -491,10 +491,8 @@ fn initial_syntax_expander_table<'feat>(ecfg: &expand::ExpansionConfig<'feat>)\n     syntax_expanders.insert(intern(\"log_syntax\"),\n                             builtin_normal_expander(\n                                     ext::log_syntax::expand_syntax_ext));\n-    syntax_expanders.insert(intern(\"derive\"),\n-                            Decorator(Box::new(ext::deriving::expand_meta_derive)));\n-    syntax_expanders.insert(intern(\"deriving\"),\n-                            Decorator(Box::new(ext::deriving::expand_deprecated_deriving)));\n+\n+    ext::deriving::register_all(&mut syntax_expanders);\n \n     if ecfg.enable_quotes() {\n         // Quasi-quoting expanders"}, {"sha": "e408c99935d1cdada38d0ddd43c07bef07061daa", "filename": "src/libsyntax/ext/deriving/bounds.rs", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs?ref=491054f08e2aaaa8438f1a9943f115dad9da1c6b", "patch": "@@ -8,47 +8,34 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{MetaItem, MetaWord, Item};\n+use ast::{MetaItem, Item};\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::deriving::generic::*;\n use ext::deriving::generic::ty::*;\n use ptr::P;\n \n-pub fn expand_deriving_bound<F>(cx: &mut ExtCtxt,\n-                                span: Span,\n-                                mitem: &MetaItem,\n-                                item: &Item,\n-                                push: F) where\n+pub fn expand_deriving_unsafe_bound<F>(cx: &mut ExtCtxt,\n+                                       span: Span,\n+                                       _: &MetaItem,\n+                                       _: &Item,\n+                                       _: F) where\n     F: FnOnce(P<Item>),\n {\n-    let name = match mitem.node {\n-        MetaWord(ref tname) => {\n-            match &tname[..] {\n-                \"Copy\" => \"Copy\",\n-                \"Send\" | \"Sync\" => {\n-                    return cx.span_err(span,\n-                                       &format!(\"{} is an unsafe trait and it \\\n-                                                 should be implemented explicitly\",\n-                                                *tname))\n-                }\n-                ref tname => {\n-                    cx.span_bug(span,\n-                                &format!(\"expected built-in trait name but \\\n-                                          found {}\", *tname))\n-                }\n-            }\n-        },\n-        _ => {\n-            return cx.span_err(span, \"unexpected value in deriving, expected \\\n-                                      a trait\")\n-        }\n-    };\n+    cx.span_err(span, \"this unsafe trait should be implemented explicitly\");\n+}\n \n+pub fn expand_deriving_copy<F>(cx: &mut ExtCtxt,\n+                               span: Span,\n+                               mitem: &MetaItem,\n+                               item: &Item,\n+                               push: F) where\n+    F: FnOnce(P<Item>),\n+{\n     let path = Path::new(vec![\n         if cx.use_std { \"std\" } else { \"core\" },\n         \"marker\",\n-        name\n+        \"Copy\",\n     ]);\n \n     let trait_def = TraitDef {"}, {"sha": "2631c28cf2fe9296e19e9589a4d01ab13ee114dd", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 124, "deletions": 88, "changes": 212, "blob_url": "https://github.com/rust-lang/rust/blob/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=491054f08e2aaaa8438f1a9943f115dad9da1c6b", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -13,9 +13,13 @@\n //! FIXME (#2810): hygiene. Search for \"__\" strings (in other files too). We also assume \"extra\" is\n //! the standard library, and \"std\" is the core library.\n \n-use ast::{Item, MetaItem, MetaList, MetaNameValue, MetaWord};\n-use ext::base::ExtCtxt;\n+use ast::{Item, MetaItem, MetaWord};\n+use attr::AttrMetaMethods;\n+use ext::base::{ExtCtxt, SyntaxEnv, Decorator, ItemDecorator, Modifier};\n+use ext::build::AstBuilder;\n+use feature_gate;\n use codemap::Span;\n+use parse::token::{intern, intern_and_get_ident};\n use ptr::P;\n \n macro_rules! pathvec {\n@@ -74,101 +78,133 @@ pub mod totalord;\n \n pub mod generic;\n \n-pub fn expand_deprecated_deriving(cx: &mut ExtCtxt,\n-                                  span: Span,\n-                                  _: &MetaItem,\n-                                  _: &Item,\n-                                  _: &mut FnMut(P<Item>)) {\n+fn expand_deprecated_deriving(cx: &mut ExtCtxt,\n+                              span: Span,\n+                              _: &MetaItem,\n+                              _: &Item,\n+                              _: &mut FnMut(P<Item>)) {\n     cx.span_err(span, \"`deriving` has been renamed to `derive`\");\n }\n \n-pub fn expand_meta_derive(cx: &mut ExtCtxt,\n-                          _span: Span,\n-                          mitem: &MetaItem,\n-                          item: &Item,\n-                          push: &mut FnMut(P<Item>)) {\n-    match mitem.node {\n-        MetaNameValue(_, ref l) => {\n-            cx.span_err(l.span, \"unexpected value in `derive`\");\n+fn expand_derive(cx: &mut ExtCtxt,\n+                 _: Span,\n+                 mitem: &MetaItem,\n+                 item: P<Item>) -> P<Item> {\n+    item.map(|mut item| {\n+        if mitem.value_str().is_some() {\n+            cx.span_err(mitem.span, \"unexpected value in `derive`\");\n         }\n-        MetaWord(_) => {\n+\n+        let traits = mitem.meta_item_list().unwrap_or(&[]);\n+        if traits.is_empty() {\n             cx.span_warn(mitem.span, \"empty trait list in `derive`\");\n         }\n-        MetaList(_, ref titems) if titems.len() == 0 => {\n-            cx.span_warn(mitem.span, \"empty trait list in `derive`\");\n+\n+        for titem in traits.iter().rev() {\n+            let tname = match titem.node {\n+                MetaWord(ref tname) => tname,\n+                _ => {\n+                    cx.span_err(titem.span, \"malformed `derive` entry\");\n+                    continue;\n+                }\n+            };\n+\n+            if !(is_builtin_trait(tname) || cx.ecfg.enable_custom_derive()) {\n+                feature_gate::emit_feature_err(&cx.parse_sess.span_diagnostic,\n+                                               \"custom_derive\",\n+                                               titem.span,\n+                                               feature_gate::EXPLAIN_CUSTOM_DERIVE);\n+                continue;\n+            }\n+\n+            // #[derive(Foo, Bar)] expands to #[derive_Foo] #[derive_Bar]\n+            item.attrs.push(cx.attribute(titem.span, cx.meta_word(titem.span,\n+                intern_and_get_ident(&format!(\"derive_{}\", tname)))));\n         }\n-        MetaList(_, ref titems) => {\n-            for titem in titems.iter().rev() {\n-                match titem.node {\n-                    MetaNameValue(ref tname, _) |\n-                    MetaList(ref tname, _) |\n-                    MetaWord(ref tname) => {\n-                        macro_rules! expand {\n-                            ($func:path) => ($func(cx, titem.span, &**titem, item,\n-                                                   |i| push(i)))\n-                        }\n-\n-                        match &tname[..] {\n-                            \"Clone\" => expand!(clone::expand_deriving_clone),\n-\n-                            \"Hash\" => expand!(hash::expand_deriving_hash),\n-\n-                            \"RustcEncodable\" => {\n-                                expand!(encodable::expand_deriving_rustc_encodable)\n-                            }\n-                            \"RustcDecodable\" => {\n-                                expand!(decodable::expand_deriving_rustc_decodable)\n-                            }\n-                            \"Encodable\" => {\n-                                cx.span_warn(titem.span,\n-                                             \"derive(Encodable) is deprecated \\\n-                                              in favor of derive(RustcEncodable)\");\n-\n-                                expand!(encodable::expand_deriving_encodable)\n-                            }\n-                            \"Decodable\" => {\n-                                cx.span_warn(titem.span,\n-                                             \"derive(Decodable) is deprecated \\\n-                                              in favor of derive(RustcDecodable)\");\n-\n-                                expand!(decodable::expand_deriving_decodable)\n-                            }\n-\n-                            \"PartialEq\" => expand!(eq::expand_deriving_eq),\n-                            \"Eq\" => expand!(totaleq::expand_deriving_totaleq),\n-                            \"PartialOrd\" => expand!(ord::expand_deriving_ord),\n-                            \"Ord\" => expand!(totalord::expand_deriving_totalord),\n-\n-                            \"Rand\" => expand!(rand::expand_deriving_rand),\n-\n-                            \"Show\" => {\n-                                cx.span_warn(titem.span,\n-                                             \"derive(Show) is deprecated \\\n-                                              in favor of derive(Debug)\");\n-\n-                                expand!(show::expand_deriving_show)\n-                            },\n-\n-                            \"Debug\" => expand!(show::expand_deriving_show),\n-\n-                            \"Default\" => expand!(default::expand_deriving_default),\n-\n-                            \"FromPrimitive\" => expand!(primitive::expand_deriving_from_primitive),\n-\n-                            \"Send\" => expand!(bounds::expand_deriving_bound),\n-                            \"Sync\" => expand!(bounds::expand_deriving_bound),\n-                            \"Copy\" => expand!(bounds::expand_deriving_bound),\n-\n-                            ref tname => {\n-                                cx.span_err(titem.span,\n-                                            &format!(\"unknown `derive` \\\n-                                                     trait: `{}`\",\n-                                                    *tname));\n-                            }\n-                        };\n+\n+        item\n+    })\n+}\n+\n+macro_rules! derive_traits {\n+    ($( $name:expr => $func:path, )*) => {\n+        pub fn register_all(env: &mut SyntaxEnv) {\n+            // Define the #[derive_*] extensions.\n+            $({\n+                struct DeriveExtension;\n+\n+                impl ItemDecorator for DeriveExtension {\n+                    fn expand(&self,\n+                              ecx: &mut ExtCtxt,\n+                              sp: Span,\n+                              mitem: &MetaItem,\n+                              item: &Item,\n+                              push: &mut FnMut(P<Item>)) {\n+                        warn_if_deprecated(ecx, sp, $name);\n+                        $func(ecx, sp, mitem, item, |i| push(i));\n                     }\n                 }\n+\n+                env.insert(intern(concat!(\"derive_\", $name)),\n+                           Decorator(Box::new(DeriveExtension)));\n+            })*\n+\n+            env.insert(intern(\"derive\"),\n+                       Modifier(Box::new(expand_derive)));\n+            env.insert(intern(\"deriving\"),\n+                       Decorator(Box::new(expand_deprecated_deriving)));\n+        }\n+\n+        fn is_builtin_trait(name: &str) -> bool {\n+            match name {\n+                $( $name )|* => true,\n+                _ => false,\n             }\n         }\n     }\n }\n+\n+derive_traits! {\n+    \"Clone\" => clone::expand_deriving_clone,\n+\n+    \"Hash\" => hash::expand_deriving_hash,\n+\n+    \"RustcEncodable\" => encodable::expand_deriving_rustc_encodable,\n+\n+    \"RustcDecodable\" => decodable::expand_deriving_rustc_decodable,\n+\n+    \"PartialEq\" => eq::expand_deriving_eq,\n+    \"Eq\" => totaleq::expand_deriving_totaleq,\n+    \"PartialOrd\" => ord::expand_deriving_ord,\n+    \"Ord\" => totalord::expand_deriving_totalord,\n+\n+    \"Rand\" => rand::expand_deriving_rand,\n+\n+    \"Debug\" => show::expand_deriving_show,\n+\n+    \"Default\" => default::expand_deriving_default,\n+\n+    \"FromPrimitive\" => primitive::expand_deriving_from_primitive,\n+\n+    \"Send\" => bounds::expand_deriving_unsafe_bound,\n+    \"Sync\" => bounds::expand_deriving_unsafe_bound,\n+    \"Copy\" => bounds::expand_deriving_copy,\n+\n+    // deprecated\n+    \"Show\" => show::expand_deriving_show,\n+    \"Encodable\" => encodable::expand_deriving_encodable,\n+    \"Decodable\" => decodable::expand_deriving_decodable,\n+}\n+\n+#[inline] // because `name` is a compile-time constant\n+fn warn_if_deprecated(ecx: &mut ExtCtxt, sp: Span, name: &str) {\n+    if let Some(replacement) = match name {\n+        \"Show\" => Some(\"Debug\"),\n+        \"Encodable\" => Some(\"RustcEncodable\"),\n+        \"Decodable\" => Some(\"RustcDecodable\"),\n+        _ => None,\n+    } {\n+        ecx.span_warn(sp, &format!(\"derive({}) is deprecated in favor of derive({})\",\n+                                   name, replacement));\n+    }\n+}"}, {"sha": "db8819ef82c2e3f011384141a3a858fbce8d870c", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=491054f08e2aaaa8438f1a9943f115dad9da1c6b", "patch": "@@ -1476,6 +1476,7 @@ impl<'feat> ExpansionConfig<'feat> {\n         fn enable_concat_idents = allow_concat_idents,\n         fn enable_trace_macros = allow_trace_macros,\n         fn enable_allow_internal_unstable = allow_internal_unstable,\n+        fn enable_custom_derive = allow_custom_derive,\n     }\n }\n "}, {"sha": "425c517cb29fddcbeba06798d335387626ef1af8", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=491054f08e2aaaa8438f1a9943f115dad9da1c6b", "patch": "@@ -137,6 +137,10 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     // Allows the use of custom attributes; RFC 572\n     (\"custom_attribute\", \"1.0.0\", Active),\n \n+    // Allows the use of #[derive(Anything)] as sugar for\n+    // #[derive_Anything].\n+    (\"custom_derive\", \"1.0.0\", Active),\n+\n     // Allows the use of rustc_* attributes; RFC 572\n     (\"rustc_attrs\", \"1.0.0\", Active),\n \n@@ -319,6 +323,7 @@ pub struct Features {\n     pub allow_concat_idents: bool,\n     pub allow_trace_macros: bool,\n     pub allow_internal_unstable: bool,\n+    pub allow_custom_derive: bool,\n     pub old_orphan_check: bool,\n     pub simd_ffi: bool,\n     pub unmarked_api: bool,\n@@ -340,6 +345,7 @@ impl Features {\n             allow_concat_idents: false,\n             allow_trace_macros: false,\n             allow_internal_unstable: false,\n+            allow_custom_derive: false,\n             old_orphan_check: false,\n             simd_ffi: false,\n             unmarked_api: false,\n@@ -391,6 +397,10 @@ impl<'a> Context<'a> {\n                               \"unless otherwise specified, attributes \\\n                                with the prefix `rustc_` \\\n                                are reserved for internal compiler diagnostics\");\n+        } else if name.starts_with(\"derive_\") {\n+            self.gate_feature(\"custom_derive\", attr.span,\n+                              \"attributes of the form `#[derive_*]` are reserved\n+                               for the compiler\");\n         } else {\n             self.gate_feature(\"custom_attribute\", attr.span,\n                        format!(\"The attribute `{}` is currently \\\n@@ -432,6 +442,9 @@ pub const EXPLAIN_TRACE_MACROS: &'static str =\n pub const EXPLAIN_ALLOW_INTERNAL_UNSTABLE: &'static str =\n     \"allow_internal_unstable side-steps feature gating and stability checks\";\n \n+pub const EXPLAIN_CUSTOM_DERIVE: &'static str =\n+    \"`#[derive]` for custom traits is not stable enough for use and is subject to change\";\n+\n struct MacroVisitor<'a> {\n     context: &'a Context<'a>\n }\n@@ -780,6 +793,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n         allow_concat_idents: cx.has_feature(\"concat_idents\"),\n         allow_trace_macros: cx.has_feature(\"trace_macros\"),\n         allow_internal_unstable: cx.has_feature(\"allow_internal_unstable\"),\n+        allow_custom_derive: cx.has_feature(\"custom_derive\"),\n         old_orphan_check: cx.has_feature(\"old_orphan_check\"),\n         simd_ffi: cx.has_feature(\"simd_ffi\"),\n         unmarked_api: cx.has_feature(\"unmarked_api\"),"}, {"sha": "e26889648048086bb2f5add486107eb6ace644b6", "filename": "src/test/auxiliary/custom_derive_plugin.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs?ref=491054f08e2aaaa8438f1a9943f115dad9da1c6b", "patch": "@@ -0,0 +1,74 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+\n+#![feature(plugin_registrar)]\n+#![feature(box_syntax)]\n+#![feature(rustc_private)]\n+\n+extern crate syntax;\n+extern crate rustc;\n+\n+use syntax::ast;\n+use syntax::codemap::Span;\n+use syntax::ext::base::{Decorator, ExtCtxt};\n+use syntax::ext::build::AstBuilder;\n+use syntax::ext::deriving::generic::{cs_fold, TraitDef, MethodDef, combine_substructure};\n+use syntax::ext::deriving::generic::ty::{Literal, LifetimeBounds, Path, borrowed_explicit_self};\n+use syntax::parse::token;\n+use syntax::ptr::P;\n+use rustc::plugin::Registry;\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_syntax_extension(\n+        token::intern(\"derive_TotalSum\"),\n+        Decorator(box expand));\n+}\n+\n+fn expand(cx: &mut ExtCtxt,\n+          span: Span,\n+          mitem: &ast::MetaItem,\n+          item: &ast::Item,\n+          push: &mut FnMut(P<ast::Item>)) {\n+    let trait_def = TraitDef {\n+        span: span,\n+        attributes: vec![],\n+        path: Path::new(vec![\"TotalSum\"]),\n+        additional_bounds: vec![],\n+        generics: LifetimeBounds::empty(),\n+        associated_types: vec![],\n+        methods: vec![\n+            MethodDef {\n+                name: \"total_sum\",\n+                generics: LifetimeBounds::empty(),\n+                explicit_self: borrowed_explicit_self(),\n+                args: vec![],\n+                ret_ty: Literal(Path::new_local(\"isize\")),\n+                attributes: vec![],\n+                combine_substructure: combine_substructure(box |cx, span, substr| {\n+                    let zero = cx.expr_int(span, 0);\n+                    cs_fold(false,\n+                            |cx, span, subexpr, field, _| {\n+                                cx.expr_binary(span, ast::BiAdd, subexpr,\n+                                    cx.expr_method_call(span, field,\n+                                        token::str_to_ident(\"total_sum\"), vec![]))\n+                            },\n+                            zero,\n+                            box |cx, span, _, _| { cx.span_bug(span, \"wtf??\"); },\n+                            cx, span, substr)\n+                }),\n+            },\n+        ],\n+    };\n+\n+    trait_def.expand(cx, mitem, item, |i| push(i))\n+}"}, {"sha": "72d06274de471af216a2a87f4c33d45f6720eb4e", "filename": "src/test/compile-fail/deriving-bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Ftest%2Fcompile-fail%2Fderiving-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Ftest%2Fcompile-fail%2Fderiving-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-bounds.rs?ref=491054f08e2aaaa8438f1a9943f115dad9da1c6b", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Copy(Bad))]\n-//~^ ERROR unexpected value in deriving, expected a trait\n+#[derive(Send)]\n+//~^ ERROR this unsafe trait should be implemented explicitly\n struct Test;\n \n #[derive(Sync)]\n-//~^ ERROR Sync is an unsafe trait and it should be implemented explicitly\n+//~^ ERROR this unsafe trait should be implemented explicitly\n struct Test1;\n \n pub fn main() {}"}, {"sha": "e223499469355c30b0e92c719e200257c15bf99c", "filename": "src/test/compile-fail/deriving-meta-unknown-trait.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Ftest%2Fcompile-fail%2Fderiving-meta-unknown-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Ftest%2Fcompile-fail%2Fderiving-meta-unknown-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-meta-unknown-trait.rs?ref=491054f08e2aaaa8438f1a9943f115dad9da1c6b", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Eqr)] //~ ERROR unknown `derive` trait: `Eqr`\n+#[derive(Eqr)]\n+//~^ ERROR `#[derive]` for custom traits is not stable enough for use and is subject to change\n struct Foo;\n \n pub fn main() {}"}, {"sha": "62dbc21495a5405a0ff0ee2bd4221c86c4c32fdc", "filename": "src/test/compile-fail/malformed-derive-entry.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Ftest%2Fcompile-fail%2Fmalformed-derive-entry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Ftest%2Fcompile-fail%2Fmalformed-derive-entry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmalformed-derive-entry.rs?ref=491054f08e2aaaa8438f1a9943f115dad9da1c6b", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[derive(Copy(Bad))]\n+//~^ ERROR malformed `derive` entry\n+struct Test1;\n+\n+#[derive(Copy=\"bad\")]\n+//~^ ERROR malformed `derive` entry\n+struct Test2;\n+\n+#[derive()]\n+//~^ WARNING empty trait list\n+struct Test3;\n+\n+#[derive]\n+//~^ WARNING empty trait list\n+struct Test4;"}, {"sha": "0b1b3141f5bf7745e63496c1e0599399a2ba68c4", "filename": "src/test/compile-fail/single-derive-attr.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Ftest%2Fcompile-fail%2Fsingle-derive-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Ftest%2Fcompile-fail%2Fsingle-derive-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsingle-derive-attr.rs?ref=491054f08e2aaaa8438f1a9943f115dad9da1c6b", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[derive_Clone]\n+//~^ ERROR attributes of the form `#[derive_*]` are reserved\n+struct Test;\n+\n+pub fn main() {}"}, {"sha": "848b2425e4496d79e44dbb21cbfc36a2eb2f0561", "filename": "src/test/run-pass-fulldeps/derive-totalsum.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fderive-totalsum.rs?ref=491054f08e2aaaa8438f1a9943f115dad9da1c6b", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:custom_derive_plugin.rs\n+// ignore-stage1\n+\n+#![feature(plugin, custom_derive)]\n+#![plugin(custom_derive_plugin)]\n+\n+trait TotalSum {\n+    fn total_sum(&self) -> isize;\n+}\n+\n+impl TotalSum for isize {\n+    fn total_sum(&self) -> isize {\n+        *self\n+    }\n+}\n+\n+struct Seven;\n+\n+impl TotalSum for Seven {\n+    fn total_sum(&self) -> isize {\n+        7\n+    }\n+}\n+\n+#[derive(TotalSum)]\n+struct Foo {\n+    seven: Seven,\n+    bar: Bar,\n+    baz: isize,\n+}\n+\n+#[derive(TotalSum)]\n+struct Bar {\n+    quux: isize,\n+    bleh: isize,\n+}\n+\n+\n+pub fn main() {\n+    let v = Foo {\n+        seven: Seven,\n+        bar: Bar {\n+            quux: 9,\n+            bleh: 3,\n+        },\n+        baz: 80,\n+    };\n+    assert_eq!(v.total_sum(), 99);\n+}"}, {"sha": "494d62c773770111c642970110dd8d92d0f27632", "filename": "src/test/run-pass/deprecated-derive.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Ftest%2Frun-pass%2Fdeprecated-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Ftest%2Frun-pass%2Fdeprecated-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdeprecated-derive.rs?ref=491054f08e2aaaa8438f1a9943f115dad9da1c6b", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[derive(Show)]\n+//~^ WARNING derive(Show) is deprecated\n+struct Test1;\n+\n+fn main() { }"}, {"sha": "cc5d8fc78911d79d012163a0eaf4e6cf8cb95f36", "filename": "src/test/run-pass/single-derive-attr-with-gate.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Ftest%2Frun-pass%2Fsingle-derive-attr-with-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/491054f08e2aaaa8438f1a9943f115dad9da1c6b/src%2Ftest%2Frun-pass%2Fsingle-derive-attr-with-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsingle-derive-attr-with-gate.rs?ref=491054f08e2aaaa8438f1a9943f115dad9da1c6b", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(custom_derive)]\n+\n+#[derive_Clone]\n+struct Test;\n+\n+pub fn main() {\n+    Test.clone();\n+}"}]}