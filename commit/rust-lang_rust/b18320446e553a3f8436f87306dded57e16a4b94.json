{"sha": "b18320446e553a3f8436f87306dded57e16a4b94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxODMyMDQ0NmU1NTNhM2Y4NDM2Zjg3MzA2ZGRlZDU3ZTE2YTRiOTQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-01T19:47:02Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-01T22:12:09Z"}, "message": "Move over to calling ptr::addr_of\n\nEverything should now call ptr::addr_of instead of\nptr::p2::addr_of. Only the pipes macro code when compiled\nby stage0 will call ptr::p2::addr_of. Needs a snapshot to get\nrid of that.", "tree": {"sha": "abdcb49970d3dbf041decc79adc86db55d0c25b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abdcb49970d3dbf041decc79adc86db55d0c25b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b18320446e553a3f8436f87306dded57e16a4b94", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b18320446e553a3f8436f87306dded57e16a4b94", "html_url": "https://github.com/rust-lang/rust/commit/b18320446e553a3f8436f87306dded57e16a4b94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b18320446e553a3f8436f87306dded57e16a4b94/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72ae42627b023a6f453316df7735fd9cb4e9283b", "url": "https://api.github.com/repos/rust-lang/rust/commits/72ae42627b023a6f453316df7735fd9cb4e9283b", "html_url": "https://github.com/rust-lang/rust/commit/72ae42627b023a6f453316df7735fd9cb4e9283b"}], "stats": {"total": 341, "additions": 169, "deletions": 172}, "files": [{"sha": "463bd4746feec9deb68732ee7e50727021967a5a", "filename": "doc/tutorial-ffi.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/doc%2Ftutorial-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/doc%2Ftutorial-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-ffi.md?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -231,7 +231,7 @@ fn unix_time_in_microseconds() -> u64 unsafe {\n         mut tv_sec: 0 as c_ulonglong,\n         mut tv_usec: 0 as c_ulonglong\n     };\n-    lib_c::gettimeofday(ptr::addr_of(x), ptr::null());\n+    lib_c::gettimeofday(ptr::addr_of(&x), ptr::null());\n     return (x.tv_sec as u64) * 1000_000_u64 + (x.tv_usec as u64);\n }\n "}, {"sha": "6936de2bccbcd028a9a3d0451e0a443c46b33908", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -5,7 +5,7 @@\n #[forbid(deprecated_pattern)];\n \n use cast::transmute;\n-use ptr::p2::addr_of;\n+use ptr::addr_of;\n \n /// Code for dealing with @-vectors. This is pretty incomplete, and\n /// contains a bunch of duplication from the code for ~-vectors."}, {"sha": "d34679f2bd75ea01910acc9f22fff57c3611c705", "filename": "src/libcore/box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibcore%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibcore%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbox.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -24,7 +24,7 @@ pub mod raw {\n \n pub pure fn ptr_eq<T>(a: @T, b: @T) -> bool {\n     //! Determine if two shared boxes point to the same object\n-    unsafe { ptr::p2::addr_of(&(*a)) == ptr::p2::addr_of(&(*b)) }\n+    unsafe { ptr::addr_of(&(*a)) == ptr::addr_of(&(*b)) }\n }\n \n impl<T:Eq> @const T : Eq {"}, {"sha": "46767bc1172adc78f9c9e39b316852a2fee1fc1c", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -103,7 +103,7 @@ struct PortPtr<T:Send> {\n         // Once the port is detached it's guaranteed not to receive further\n         // messages\n         let yield = 0;\n-        let yieldp = ptr::p2::addr_of(&yield);\n+        let yieldp = ptr::addr_of(&yield);\n         rustrt::rust_port_begin_detach(self.po, yieldp);\n         if yield != 0 {\n             // Need to wait for the port to be detached\n@@ -176,7 +176,7 @@ pub fn Chan<T: Send>(p: Port<T>) -> Chan<T> {\n  */\n pub fn send<T: Send>(ch: Chan<T>, +data: T) {\n     let Chan_(p) = ch;\n-    let data_ptr = ptr::p2::addr_of(&data) as *();\n+    let data_ptr = ptr::addr_of(&data) as *();\n     let res = rustrt::rust_port_id_send(p, data_ptr);\n     if res != 0 unsafe {\n         // Data sent successfully\n@@ -206,10 +206,10 @@ fn peek_chan<T: Send>(ch: comm::Chan<T>) -> bool {\n /// Receive on a raw port pointer\n fn recv_<T: Send>(p: *rust_port) -> T {\n     let yield = 0;\n-    let yieldp = ptr::p2::addr_of(&yield);\n+    let yieldp = ptr::addr_of(&yield);\n     let mut res;\n     res = rusti::init::<T>();\n-    rustrt::port_recv(ptr::p2::addr_of(&res) as *uint, p, yieldp);\n+    rustrt::port_recv(ptr::addr_of(&res) as *uint, p, yieldp);\n \n     if yield != 0 {\n         // Data isn't available yet, so res has not been initialized.\n@@ -233,12 +233,12 @@ fn peek_(p: *rust_port) -> bool {\n pub fn select2<A: Send, B: Send>(p_a: Port<A>, p_b: Port<B>)\n     -> Either<A, B> {\n     let ports = ~[(**p_a).po, (**p_b).po];\n-    let yield = 0, yieldp = ptr::p2::addr_of(&yield);\n+    let yield = 0, yieldp = ptr::addr_of(&yield);\n \n     let mut resport: *rust_port;\n     resport = rusti::init::<*rust_port>();\n     do vec::as_imm_buf(ports) |ports, n_ports| {\n-        rustrt::rust_port_select(ptr::p2::addr_of(&resport), ports,\n+        rustrt::rust_port_select(ptr::addr_of(&resport), ports,\n                                  n_ports as size_t, yieldp);\n     }\n "}, {"sha": "7c5176494a2243d6631da5ad463dd8b9523cea02", "filename": "src/libcore/flate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibcore%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibcore%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fflate.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -34,7 +34,7 @@ pub fn deflate_bytes(bytes: &[const u8]) -> ~[u8] {\n             let res =\n                 rustrt::tdefl_compress_mem_to_heap(b as *c_void,\n                                                    len as size_t,\n-                                                   ptr::addr_of(outsz),\n+                                                   ptr::addr_of(&outsz),\n                                                    lz_norm);\n             assert res as int != 0;\n             let out = vec::raw::from_buf(res as *u8,\n@@ -52,7 +52,7 @@ pub fn inflate_bytes(bytes: &[const u8]) -> ~[u8] {\n             let res =\n                 rustrt::tinfl_decompress_mem_to_heap(b as *c_void,\n                                                      len as size_t,\n-                                                     ptr::addr_of(outsz),\n+                                                     ptr::addr_of(&outsz),\n                                                      0);\n             assert res as int != 0;\n             let out = vec::raw::from_buf(res as *u8,"}, {"sha": "de2e4412812d51acdb4a1d13d4de2d03c3c98f65", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -316,7 +316,7 @@ pub fn cleanup_stack_for_failure() {\n         // own stack roots on the stack anyway.\n         let sentinel_box = ~0;\n         let sentinel: **Word = if expect_sentinel() {\n-            cast::reinterpret_cast(&ptr::p2::addr_of(&sentinel_box))\n+            cast::reinterpret_cast(&ptr::addr_of(&sentinel_box))\n         } else {\n             ptr::null()\n         };"}, {"sha": "4d446df9cd536fdb48574bf89e2608e56d9ea5b6", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -85,7 +85,7 @@ use option::unwrap;\n const SPIN_COUNT: uint = 0;\n \n macro_rules! move_it (\n-    { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); move y } }\n+    { $x:expr } => { unsafe { let y <- *ptr::addr_of(&($x)); move y } }\n )\n \n #[doc(hidden)]\n@@ -219,7 +219,7 @@ fn unibuffer<T: Send>() -> ~Buffer<Packet<T>> {\n #[doc(hidden)]\n pub fn packet<T: Send>() -> *Packet<T> {\n     let b = unibuffer();\n-    let p = ptr::p2::addr_of(&(b.data));\n+    let p = ptr::addr_of(&(b.data));\n     // We'll take over memory management from here.\n     unsafe { forget(move b) }\n     p\n@@ -359,7 +359,7 @@ pub fn send<T: Send, Tbuffer: Send>(+p: SendPacketBuffered<T, Tbuffer>,\n     let header = p.header();\n     let p_ = p.unwrap();\n     let p = unsafe { &*p_ };\n-    assert ptr::p2::addr_of(&(p.header)) == header;\n+    assert ptr::addr_of(&(p.header)) == header;\n     assert p.payload.is_none();\n     p.payload <- Some(move payload);\n     let old_state = swap_state_rel(&mut p.header.state, Full);\n@@ -377,7 +377,7 @@ pub fn send<T: Send, Tbuffer: Send>(+p: SendPacketBuffered<T, Tbuffer>,\n             let old_task = swap_task(&mut p.header.blocked_task, ptr::null());\n             if !old_task.is_null() {\n                 rustrt::task_signal_event(\n-                    old_task, ptr::p2::addr_of(&(p.header)) as *libc::c_void);\n+                    old_task, ptr::addr_of(&(p.header)) as *libc::c_void);\n                 rustrt::rust_task_deref(old_task);\n             }\n \n@@ -529,7 +529,7 @@ fn sender_terminate<T: Send>(p: *Packet<T>) {\n         if !old_task.is_null() {\n             rustrt::task_signal_event(\n                 old_task,\n-                ptr::p2::addr_of(&(p.header)) as *libc::c_void);\n+                ptr::addr_of(&(p.header)) as *libc::c_void);\n             rustrt::rust_task_deref(old_task);\n         }\n         // The receiver will eventually clean up.\n@@ -744,7 +744,7 @@ pub fn SendPacketBuffered<T: Send, Tbuffer: Send>(p: *Packet<T>)\n         p: Some(p),\n         buffer: unsafe {\n             Some(BufferResource(\n-                get_buffer(ptr::p2::addr_of(&((*p).header)))))\n+                get_buffer(ptr::addr_of(&((*p).header)))))\n         }\n     }\n }\n@@ -760,7 +760,7 @@ impl<T: Send, Tbuffer: Send> SendPacketBuffered<T, Tbuffer> {\n         match self.p {\n           Some(packet) => unsafe {\n             let packet = &*packet;\n-            let header = ptr::p2::addr_of(&(packet.header));\n+            let header = ptr::addr_of(&(packet.header));\n             //forget(packet);\n             header\n           },\n@@ -815,7 +815,7 @@ impl<T: Send, Tbuffer: Send> RecvPacketBuffered<T, Tbuffer> : Selectable {\n         match self.p {\n           Some(packet) => unsafe {\n             let packet = &*packet;\n-            let header = ptr::p2::addr_of(&(packet.header));\n+            let header = ptr::addr_of(&(packet.header));\n             //forget(packet);\n             header\n           },\n@@ -838,7 +838,7 @@ pub fn RecvPacketBuffered<T: Send, Tbuffer: Send>(p: *Packet<T>)\n         p: Some(p),\n         buffer: unsafe {\n             Some(BufferResource(\n-                get_buffer(ptr::p2::addr_of(&((*p).header)))))\n+                get_buffer(ptr::addr_of(&((*p).header)))))\n         }\n     }\n }"}, {"sha": "550b0121e4587535d2b5bc81947a4f34d55bf51b", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -24,12 +24,9 @@ extern mod rusti {\n     fn addr_of<T>(val: T) -> *T;\n }\n \n-/*\n-Remove this after snapshot; make p2::addr_of addr_of\n-*/\n /// Get an unsafe pointer to a value\n #[inline(always)]\n-pub pure fn addr_of<T>(val: T) -> *T { unsafe { rusti::addr_of(val) } }\n+pub pure fn addr_of<T>(val: &T) -> *T { unsafe { rusti::addr_of(*val) } }\n \n pub mod p2 {\n     /// Get an unsafe pointer to a value"}, {"sha": "227635944dd53f9eb1d0e90404c4a7b1861f0a14", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -1780,7 +1780,7 @@ pub pure fn as_c_str<T>(s: &str, f: fn(*libc::c_char) -> T) -> T {\n #[inline(always)]\n pub pure fn as_buf<T>(s: &str, f: fn(*u8, uint) -> T) -> T {\n     unsafe {\n-        let v : *(*u8,uint) = ::cast::reinterpret_cast(&ptr::p2::addr_of(&s));\n+        let v : *(*u8,uint) = ::cast::reinterpret_cast(&ptr::addr_of(&s));\n         let (buf,len) = *v;\n         f(buf, len)\n     }"}, {"sha": "982679f9398545a5db5decb4a919ae498bd62a99", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -66,7 +66,7 @@ use rt::rust_task;\n use rt::rust_closure;\n \n macro_rules! move_it (\n-    { $x:expr } => { unsafe { let y <- *ptr::p2::addr_of(&($x)); move y } }\n+    { $x:expr } => { unsafe { let y <- *ptr::addr_of(&($x)); move y } }\n )\n \n type TaskSet = send_map::linear::LinearMap<*rust_task,()>;"}, {"sha": "d01b24f53542b17309f169d34290e640f3274574", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -6,7 +6,7 @@\n \n use cmp::{Eq, Ord};\n use option::{Some, None};\n-use ptr::p2::addr_of;\n+use ptr::addr_of;\n use libc::size_t;\n \n export append;"}, {"sha": "df97df516432b3008b151756feab01ed3afd0a32", "filename": "src/libstd/dbg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibstd%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibstd%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdbg.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -21,19 +21,19 @@ pub fn debug_tydesc<T>() {\n }\n \n pub fn debug_opaque<T>(+x: T) {\n-    rustrt::debug_opaque(sys::get_type_desc::<T>(), ptr::addr_of(x) as *());\n+    rustrt::debug_opaque(sys::get_type_desc::<T>(), ptr::addr_of(&x) as *());\n }\n \n pub fn debug_box<T>(x: @T) {\n-    rustrt::debug_box(sys::get_type_desc::<T>(), ptr::addr_of(x) as *());\n+    rustrt::debug_box(sys::get_type_desc::<T>(), ptr::addr_of(&x) as *());\n }\n \n pub fn debug_tag<T>(+x: T) {\n-    rustrt::debug_tag(sys::get_type_desc::<T>(), ptr::addr_of(x) as *());\n+    rustrt::debug_tag(sys::get_type_desc::<T>(), ptr::addr_of(&x) as *());\n }\n \n pub fn debug_fn<T>(+x: T) {\n-    rustrt::debug_fn(sys::get_type_desc::<T>(), ptr::addr_of(x) as *());\n+    rustrt::debug_fn(sys::get_type_desc::<T>(), ptr::addr_of(&x) as *());\n }\n \n pub unsafe fn ptr_cast<T, U>(x: @T) -> @U {"}, {"sha": "9aa29df4a62df1d90c5a9f993e1d7cf356670a70", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -89,11 +89,11 @@ fn get_addr(node: &str, iotask: iotask)\n         do str::as_buf(node) |node_ptr, len| unsafe {\n             log(debug, fmt!(\"slice len %?\", len));\n             let handle = create_uv_getaddrinfo_t();\n-            let handle_ptr = ptr::addr_of(handle);\n+            let handle_ptr = ptr::addr_of(&handle);\n             let handle_data: GetAddrData = {\n                 output_ch: output_ch\n             };\n-            let handle_data_ptr = ptr::addr_of(handle_data);\n+            let handle_data_ptr = ptr::addr_of(&handle_data);\n             do interact(iotask) |loop_ptr| unsafe {\n                 let result = uv_getaddrinfo(\n                     loop_ptr,\n@@ -150,7 +150,7 @@ mod v4 {\n     impl Ipv4Rep: AsUnsafeU32 {\n         // this is pretty dastardly, i know\n         unsafe fn as_u32() -> u32 {\n-            *((ptr::addr_of(self)) as *u32)\n+            *((ptr::addr_of(&self)) as *u32)\n         }\n     }\n     fn parse_to_ipv4_rep(ip: &str) -> result::Result<Ipv4Rep, ~str> {"}, {"sha": "aedd53d41cc015360ecebebcee8b3dcaf7ca315e", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -138,7 +138,7 @@ fn connect(+input_ip: ip::IpAddr, port: uint,\n         result_ch: core::comm::Chan(result_po),\n         closed_signal_ch: core::comm::Chan(closed_signal_po)\n     };\n-    let conn_data_ptr = ptr::addr_of(conn_data);\n+    let conn_data_ptr = ptr::addr_of(&conn_data);\n     let reader_po = core::comm::Port::<result::Result<~[u8], TcpErrData>>();\n     let stream_handle_ptr = malloc_uv_tcp_t();\n     *(stream_handle_ptr as *mut uv::ll::uv_tcp_t) = uv::ll::tcp_t();\n@@ -150,7 +150,7 @@ fn connect(+input_ip: ip::IpAddr, port: uint,\n         write_req: uv::ll::write_t(),\n         iotask: iotask\n     };\n-    let socket_data_ptr = ptr::addr_of(*socket_data);\n+    let socket_data_ptr = ptr::addr_of(&(*socket_data));\n     log(debug, fmt!(\"tcp_connect result_ch %?\", conn_data.result_ch));\n     // get an unsafe representation of our stream_handle_ptr that\n     // we can send into the interact cb to be handled in libuv..\n@@ -165,7 +165,7 @@ fn connect(+input_ip: ip::IpAddr, port: uint,\n             log(debug, ~\"tcp_init successful\");\n             log(debug, ~\"dealing w/ ipv4 connection..\");\n             let connect_req_ptr =\n-                ptr::addr_of((*socket_data_ptr).connect_req);\n+                ptr::addr_of(&((*socket_data_ptr).connect_req));\n             let addr_str = ip::format_addr(&input_ip);\n             let connect_result = match input_ip {\n               ip::Ipv4(ref addr) => {\n@@ -179,7 +179,7 @@ fn connect(+input_ip: ip::IpAddr, port: uint,\n                 uv::ll::tcp_connect(\n                     connect_req_ptr,\n                     stream_handle_ptr,\n-                    ptr::addr_of(in_addr),\n+                    ptr::addr_of(&in_addr),\n                     tcp_connect_on_connect_cb)\n               }\n               ip::Ipv6(ref addr) => {\n@@ -188,7 +188,7 @@ fn connect(+input_ip: ip::IpAddr, port: uint,\n                 uv::ll::tcp_connect6(\n                     connect_req_ptr,\n                     stream_handle_ptr,\n-                    ptr::addr_of(in_addr),\n+                    ptr::addr_of(&in_addr),\n                     tcp_connect_on_connect_cb)\n               }\n             };\n@@ -264,7 +264,7 @@ fn connect(+input_ip: ip::IpAddr, port: uint,\n  */\n fn write(sock: &TcpSocket, raw_write_data: ~[u8])\n     -> result::Result<(), TcpErrData> unsafe {\n-    let socket_data_ptr = ptr::addr_of(*(sock.socket_data));\n+    let socket_data_ptr = ptr::addr_of(&(*(sock.socket_data)));\n     write_common_impl(socket_data_ptr, raw_write_data)\n }\n \n@@ -301,7 +301,7 @@ fn write(sock: &TcpSocket, raw_write_data: ~[u8])\n  */\n fn write_future(sock: &TcpSocket, raw_write_data: ~[u8])\n     -> future::Future<result::Result<(), TcpErrData>> unsafe {\n-    let socket_data_ptr = ptr::addr_of(*(sock.socket_data));\n+    let socket_data_ptr = ptr::addr_of(&(*(sock.socket_data)));\n     do future_spawn {\n         let data_copy = copy(raw_write_data);\n         write_common_impl(socket_data_ptr, data_copy)\n@@ -326,7 +326,7 @@ fn write_future(sock: &TcpSocket, raw_write_data: ~[u8])\n fn read_start(sock: &TcpSocket)\n     -> result::Result<comm::Port<\n         result::Result<~[u8], TcpErrData>>, TcpErrData> unsafe {\n-    let socket_data = ptr::addr_of(*(sock.socket_data));\n+    let socket_data = ptr::addr_of(&(*(sock.socket_data)));\n     read_start_common_impl(socket_data)\n }\n \n@@ -341,7 +341,7 @@ fn read_stop(sock: &TcpSocket,\n              +read_port: comm::Port<result::Result<~[u8], TcpErrData>>) ->\n     result::Result<(), TcpErrData> unsafe {\n     log(debug, fmt!(\"taking the read_port out of commission %?\", read_port));\n-    let socket_data = ptr::addr_of(*sock.socket_data);\n+    let socket_data = ptr::addr_of(&(*sock.socket_data));\n     read_stop_common_impl(socket_data)\n }\n \n@@ -362,7 +362,7 @@ fn read_stop(sock: &TcpSocket,\n  */\n fn read(sock: &TcpSocket, timeout_msecs: uint)\n     -> result::Result<~[u8],TcpErrData> {\n-    let socket_data = ptr::addr_of(*(sock.socket_data));\n+    let socket_data = ptr::addr_of(&(*(sock.socket_data)));\n     read_common_impl(socket_data, timeout_msecs)\n }\n \n@@ -397,7 +397,7 @@ fn read(sock: &TcpSocket, timeout_msecs: uint)\n  */\n fn read_future(sock: &TcpSocket, timeout_msecs: uint)\n     -> future::Future<result::Result<~[u8],TcpErrData>> {\n-    let socket_data = ptr::addr_of(*(sock.socket_data));\n+    let socket_data = ptr::addr_of(&(*(sock.socket_data)));\n     do future_spawn {\n         read_common_impl(socket_data, timeout_msecs)\n     }\n@@ -491,7 +491,7 @@ fn accept(new_conn: TcpNewConnection)\n             write_req : uv::ll::write_t(),\n             iotask : iotask\n         };\n-        let client_socket_data_ptr = ptr::addr_of(*client_socket_data);\n+        let client_socket_data_ptr = ptr::addr_of(&(*client_socket_data));\n         let client_stream_handle_ptr =\n             (*client_socket_data_ptr).stream_handle_ptr;\n \n@@ -596,7 +596,7 @@ fn listen_common(+host_ip: ip::IpAddr, port: uint, backlog: uint,\n     let kill_po = core::comm::Port::<Option<TcpErrData>>();\n     let kill_ch = core::comm::Chan(kill_po);\n     let server_stream = uv::ll::tcp_t();\n-    let server_stream_ptr = ptr::addr_of(server_stream);\n+    let server_stream_ptr = ptr::addr_of(&server_stream);\n     let server_data = {\n         server_stream_ptr: server_stream_ptr,\n         stream_closed_ch: core::comm::Chan(stream_closed_po),\n@@ -605,7 +605,7 @@ fn listen_common(+host_ip: ip::IpAddr, port: uint, backlog: uint,\n         iotask: iotask,\n         mut active: true\n     };\n-    let server_data_ptr = ptr::addr_of(server_data);\n+    let server_data_ptr = ptr::addr_of(&server_data);\n \n     let setup_result = do core::comm::listen |setup_ch| {\n         // this is to address a compiler warning about\n@@ -627,13 +627,13 @@ fn listen_common(+host_ip: ip::IpAddr, port: uint, backlog: uint,\n                     log(debug, fmt!(\"addr: %?\", addr));\n                     let in_addr = uv::ll::ip4_addr(addr_str, port as int);\n                     uv::ll::tcp_bind(server_stream_ptr,\n-                                     ptr::addr_of(in_addr))\n+                                     ptr::addr_of(&in_addr))\n                   }\n                   ip::Ipv6(ref addr) => {\n                     log(debug, fmt!(\"addr: %?\", addr));\n                     let in_addr = uv::ll::ip6_addr(addr_str, port as int);\n                     uv::ll::tcp_bind6(server_stream_ptr,\n-                                     ptr::addr_of(in_addr))\n+                                     ptr::addr_of(&in_addr))\n                   }\n                 };\n                 match bind_result {\n@@ -818,7 +818,7 @@ impl TcpSocketBuf: io::Reader {\n impl TcpSocketBuf: io::Writer {\n     fn write(data: &[const u8]) unsafe {\n         let socket_data_ptr =\n-            ptr::addr_of(*((*(self.data)).sock).socket_data);\n+            ptr::addr_of(&(*((*(self.data)).sock).socket_data));\n         let w_result = write_common_impl(socket_data_ptr,\n                                         vec::slice(data, 0, vec::len(data)));\n         if w_result.is_err() {\n@@ -850,7 +850,7 @@ fn tear_down_socket_data(socket_data: @TcpSocketData) unsafe {\n     let close_data = {\n         closed_ch: closed_ch\n     };\n-    let close_data_ptr = ptr::addr_of(close_data);\n+    let close_data_ptr = ptr::addr_of(&close_data);\n     let stream_handle_ptr = (*socket_data).stream_handle_ptr;\n     do iotask::interact((*socket_data).iotask) |loop_ptr| unsafe {\n         log(debug, fmt!(\"interact dtor for tcp_socket stream %? loop %?\",\n@@ -966,18 +966,18 @@ fn read_start_common_impl(socket_data: *TcpSocketData)\n fn write_common_impl(socket_data_ptr: *TcpSocketData,\n                      raw_write_data: ~[u8])\n     -> result::Result<(), TcpErrData> unsafe {\n-    let write_req_ptr = ptr::addr_of((*socket_data_ptr).write_req);\n+    let write_req_ptr = ptr::addr_of(&((*socket_data_ptr).write_req));\n     let stream_handle_ptr =\n         (*socket_data_ptr).stream_handle_ptr;\n     let write_buf_vec =  ~[ uv::ll::buf_init(\n         vec::raw::to_ptr(raw_write_data),\n         vec::len(raw_write_data)) ];\n-    let write_buf_vec_ptr = ptr::addr_of(write_buf_vec);\n+    let write_buf_vec_ptr = ptr::addr_of(&write_buf_vec);\n     let result_po = core::comm::Port::<TcpWriteResult>();\n     let write_data = {\n         result_ch: core::comm::Chan(result_po)\n     };\n-    let write_data_ptr = ptr::addr_of(write_data);\n+    let write_data_ptr = ptr::addr_of(&write_data);\n     do iotask::interact((*socket_data_ptr).iotask) |loop_ptr| unsafe {\n         log(debug, fmt!(\"in interact cb for tcp::write %?\", loop_ptr));\n         match uv::ll::write(write_req_ptr,"}, {"sha": "f66f2f5b5d39b56c8e097b84341b33e63b28cc60", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -773,7 +773,7 @@ mod tests {\n         let m = ~Mutex();\n         let m2 = ~m.clone();\n         let mut sharedstate = ~0;\n-        let ptr = ptr::addr_of(*sharedstate);\n+        let ptr = ptr::p2::addr_of(&(*sharedstate));\n         do task::spawn {\n             let sharedstate: &mut int =\n                 unsafe { cast::reinterpret_cast(&ptr) };\n@@ -1045,7 +1045,7 @@ mod tests {\n         let (c,p) = pipes::stream();\n         let x2 = ~x.clone();\n         let mut sharedstate = ~0;\n-        let ptr = ptr::addr_of(*sharedstate);\n+        let ptr = ptr::p2::addr_of(&(*sharedstate));\n         do task::spawn {\n             let sharedstate: &mut int =\n                 unsafe { cast::reinterpret_cast(&ptr) };"}, {"sha": "8aaf7d3fd87fecd8e0122b3b6d4c9ce2b6fdf25a", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -28,9 +28,9 @@ pub fn delayed_send<T: Copy Send>(iotask: IoTask,\n         unsafe {\n             let timer_done_po = core::comm::Port::<()>();\n             let timer_done_ch = core::comm::Chan(timer_done_po);\n-            let timer_done_ch_ptr = ptr::addr_of(timer_done_ch);\n+            let timer_done_ch_ptr = ptr::addr_of(&timer_done_ch);\n             let timer = uv::ll::timer_t();\n-            let timer_ptr = ptr::addr_of(timer);\n+            let timer_ptr = ptr::addr_of(&timer);\n             do iotask::interact(iotask) |loop_ptr| unsafe {\n                 let init_result = uv::ll::timer_init(loop_ptr, timer_ptr);\n                 if (init_result == 0i32) {"}, {"sha": "9ccacd1f7f65d26c68b10dde13535594c30e34f6", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -138,11 +138,11 @@ mod test {\n     fn impl_uv_hl_simple_timer(iotask: IoTask) unsafe {\n         let exit_po = core::comm::Port::<bool>();\n         let exit_ch = core::comm::Chan(exit_po);\n-        let exit_ch_ptr = ptr::addr_of(exit_ch);\n+        let exit_ch_ptr = ptr::p2::addr_of(&exit_ch);\n         log(debug, fmt!(\"EXIT_CH_PTR newly created exit_ch_ptr: %?\",\n                        exit_ch_ptr));\n         let timer_handle = ll::timer_t();\n-        let timer_ptr = ptr::addr_of(timer_handle);\n+        let timer_ptr = ptr::p2::addr_of(&timer_handle);\n         do iotask::interact(iotask) |loop_ptr| unsafe {\n             log(debug, ~\"user code inside interact loop!!!\");\n             let init_status = ll::timer_init(loop_ptr, timer_ptr);"}, {"sha": "ab50cc9d929b9211d8aeed9fefb0369b7871cb7a", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -13,7 +13,7 @@ export interact;\n export exit;\n \n use libc::c_void;\n-use ptr::addr_of;\n+use ptr::p2::addr_of;\n use comm = core::comm;\n use comm::{Port, Chan, listen};\n use task::TaskBuilder;\n@@ -96,7 +96,7 @@ fn run_loop(iotask_ch: Chan<IoTask>) unsafe {\n     // set up the special async handle we'll use to allow multi-task\n     // communication with this loop\n     let async = ll::async_t();\n-    let async_handle = addr_of(async);\n+    let async_handle = addr_of(&async);\n \n     // associate the async handle with the loop\n     ll::async_init(loop_ptr, async_handle, wake_up_cb);\n@@ -106,7 +106,7 @@ fn run_loop(iotask_ch: Chan<IoTask>) unsafe {\n         async_handle: async_handle,\n         msg_po: Port()\n     };\n-    ll::set_data_for_uv_handle(async_handle, addr_of(data));\n+    ll::set_data_for_uv_handle(async_handle, addr_of(&data));\n \n     // Send out a handle through which folks can talk to us\n     // while we dwell in the I/O loop\n@@ -188,14 +188,14 @@ mod test {\n     };\n     fn impl_uv_iotask_async(iotask: IoTask) unsafe {\n         let async_handle = ll::async_t();\n-        let ah_ptr = ptr::addr_of(async_handle);\n+        let ah_ptr = ptr::addr_of(&async_handle);\n         let exit_po = core::comm::Port::<()>();\n         let exit_ch = core::comm::Chan(exit_po);\n         let ah_data = {\n             iotask: iotask,\n             exit_ch: exit_ch\n         };\n-        let ah_data_ptr = ptr::addr_of(ah_data);\n+        let ah_data_ptr = ptr::addr_of(&ah_data);\n         do interact(iotask) |loop_ptr| unsafe {\n             ll::async_init(loop_ptr, ah_ptr, async_handle_cb);\n             ll::set_data_for_uv_handle(ah_ptr, ah_data_ptr as *libc::c_void);"}, {"sha": "fca34c01bc1b1e64c8d9a6a165ce1718bcfb33ac", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -796,7 +796,7 @@ unsafe fn async_send(async_handle: *uv_async_t) {\n }\n unsafe fn buf_init(input: *u8, len: uint) -> uv_buf_t {\n     let out_buf = { base: ptr::null(), len: 0 as libc::size_t };\n-    let out_buf_ptr = ptr::addr_of(out_buf);\n+    let out_buf_ptr = ptr::addr_of(&out_buf);\n     log(debug, fmt!(\"buf_init - input %u len %u out_buf: %u\",\n                      input as uint,\n                      len as uint,\n@@ -968,7 +968,7 @@ unsafe fn free_base_of_buf(buf: uv_buf_t) {\n \n unsafe fn get_last_err_info(uv_loop: *libc::c_void) -> ~str {\n     let err = last_error(uv_loop);\n-    let err_ptr = ptr::addr_of(err);\n+    let err_ptr = ptr::addr_of(&err);\n     let err_name = str::raw::from_c_str(err_name(err_ptr));\n     let err_msg = str::raw::from_c_str(strerror(err_ptr));\n     return fmt!(\"LIBUV ERROR: name: %s msg: %s\",\n@@ -977,7 +977,7 @@ unsafe fn get_last_err_info(uv_loop: *libc::c_void) -> ~str {\n \n unsafe fn get_last_err_data(uv_loop: *libc::c_void) -> uv_err_data {\n     let err = last_error(uv_loop);\n-    let err_ptr = ptr::addr_of(err);\n+    let err_ptr = ptr::addr_of(&err);\n     let err_name = str::raw::from_c_str(err_name(err_ptr));\n     let err_msg = str::raw::from_c_str(strerror(err_ptr));\n     { err_name: err_name, err_msg: err_msg }\n@@ -1120,9 +1120,9 @@ mod test {\n                           client_chan: *comm::Chan<~str>) unsafe {\n         let test_loop = loop_new();\n         let tcp_handle = tcp_t();\n-        let tcp_handle_ptr = ptr::addr_of(tcp_handle);\n+        let tcp_handle_ptr = ptr::addr_of(&tcp_handle);\n         let connect_handle = connect_t();\n-        let connect_req_ptr = ptr::addr_of(connect_handle);\n+        let connect_req_ptr = ptr::addr_of(&connect_handle);\n \n         // this is the persistent payload of data that we\n         // need to pass around to get this example to work.\n@@ -1138,12 +1138,12 @@ mod test {\n         // this is the enclosing record, we'll pass a ptr to\n         // this to C..\n         let write_handle = write_t();\n-        let write_handle_ptr = ptr::addr_of(write_handle);\n+        let write_handle_ptr = ptr::addr_of(&write_handle);\n         log(debug, fmt!(\"tcp req: tcp stream: %d write_handle: %d\",\n                          tcp_handle_ptr as int,\n                          write_handle_ptr as int));\n         let client_data = { writer_handle: write_handle_ptr,\n-                    req_buf: ptr::addr_of(req_msg),\n+                    req_buf: ptr::addr_of(&req_msg),\n                     read_chan: client_chan };\n \n         let tcp_init_result = tcp_init(\n@@ -1154,7 +1154,7 @@ mod test {\n             log(debug, ~\"building addr...\");\n             let addr = ip4_addr(ip, port);\n             // FIXME ref #2064\n-            let addr_ptr = ptr::addr_of(addr);\n+            let addr_ptr = ptr::addr_of(&addr);\n             log(debug, fmt!(\"after build addr in rust. port: %u\",\n                              addr.sin_port as uint));\n \n@@ -1169,10 +1169,10 @@ mod test {\n                 // until its initialized\n                 set_data_for_req(\n                     connect_req_ptr as *libc::c_void,\n-                    ptr::addr_of(client_data) as *libc::c_void);\n+                    ptr::addr_of(&client_data) as *libc::c_void);\n                 set_data_for_uv_handle(\n                     tcp_handle_ptr as *libc::c_void,\n-                    ptr::addr_of(client_data) as *libc::c_void);\n+                    ptr::addr_of(&client_data) as *libc::c_void);\n                 log(debug, ~\"before run tcp req loop\");\n                 run(test_loop);\n                 log(debug, ~\"after run tcp req loop\");\n@@ -1369,13 +1369,13 @@ mod test {\n                           continue_chan: *comm::Chan<bool>) unsafe {\n         let test_loop = loop_new();\n         let tcp_server = tcp_t();\n-        let tcp_server_ptr = ptr::addr_of(tcp_server);\n+        let tcp_server_ptr = ptr::addr_of(&tcp_server);\n \n         let tcp_client = tcp_t();\n-        let tcp_client_ptr = ptr::addr_of(tcp_client);\n+        let tcp_client_ptr = ptr::addr_of(&tcp_client);\n \n         let server_write_req = write_t();\n-        let server_write_req_ptr = ptr::addr_of(server_write_req);\n+        let server_write_req_ptr = ptr::addr_of(&server_write_req);\n \n         let resp_str_bytes = str::to_bytes(server_resp_msg);\n         let resp_msg_ptr: *u8 = vec::raw::to_ptr(resp_str_bytes);\n@@ -1386,20 +1386,20 @@ mod test {\n \n         let continue_async_handle = async_t();\n         let continue_async_handle_ptr =\n-            ptr::addr_of(continue_async_handle);\n+            ptr::addr_of(&continue_async_handle);\n         let async_data =\n             { continue_chan: continue_chan };\n-        let async_data_ptr = ptr::addr_of(async_data);\n+        let async_data_ptr = ptr::addr_of(&async_data);\n \n         let server_data: tcp_server_data = {\n             client: tcp_client_ptr,\n             server: tcp_server_ptr,\n             server_kill_msg: kill_server_msg,\n-            server_resp_buf: ptr::addr_of(resp_msg),\n+            server_resp_buf: ptr::addr_of(&resp_msg),\n             server_chan: server_chan,\n             server_write_req: server_write_req_ptr\n         };\n-        let server_data_ptr = ptr::addr_of(server_data);\n+        let server_data_ptr = ptr::addr_of(&server_data);\n         set_data_for_uv_handle(tcp_server_ptr as *libc::c_void,\n                                        server_data_ptr as *libc::c_void);\n \n@@ -1409,7 +1409,7 @@ mod test {\n         if (tcp_init_result == 0i32) {\n             let server_addr = ip4_addr(server_ip, server_port);\n             // FIXME ref #2064\n-            let server_addr_ptr = ptr::addr_of(server_addr);\n+            let server_addr_ptr = ptr::addr_of(&server_addr);\n \n             // uv_tcp_bind()\n             let bind_result = tcp_bind(tcp_server_ptr,\n@@ -1478,13 +1478,13 @@ mod test {\n \n         let continue_port = core::comm::Port::<bool>();\n         let continue_chan = core::comm::Chan::<bool>(continue_port);\n-        let continue_chan_ptr = ptr::addr_of(continue_chan);\n+        let continue_chan_ptr = ptr::addr_of(&continue_chan);\n \n-        do task::spawn_sched(task::ManualThreads(1u)) {\n+        do task::spawn_sched(task::ManualThreads(1)) {\n             impl_uv_tcp_server(bind_ip, port,\n                                kill_server_msg,\n                                server_resp_msg,\n-                               ptr::addr_of(server_chan),\n+                               ptr::addr_of(&server_chan),\n                                continue_chan_ptr);\n         };\n \n@@ -1496,7 +1496,7 @@ mod test {\n         do task::spawn_sched(task::ManualThreads(1u)) {\n             impl_uv_tcp_request(request_ip, port,\n                                kill_server_msg,\n-                               ptr::addr_of(client_chan));\n+                               ptr::addr_of(&client_chan));\n         };\n \n         let msg_from_client = core::comm::recv(server_port);"}, {"sha": "67841158ce18e3d584036cf18ad95561821829fb", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -1094,10 +1094,10 @@ enum ty_ {\n // since we only care about this for normalizing them to \"real\" types.\n impl ty : cmp::Eq {\n     pure fn eq(other: &ty) -> bool {\n-        ptr::addr_of(self) == ptr::addr_of((*other))\n+        ptr::addr_of(&self) == ptr::addr_of(&(*other))\n     }\n     pure fn ne(other: &ty) -> bool {\n-        ptr::addr_of(self) != ptr::addr_of((*other))\n+        ptr::addr_of(&self) != ptr::addr_of(&(*other))\n     }\n }\n "}, {"sha": "ea493eab56174421f7f4dc724799bd2fea7f64e2", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -188,7 +188,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span,\n             return make_conv_call(cx, arg.span, ~\"float\", cnv, arg);\n           }\n           TyPoly => return make_conv_call(cx, arg.span, ~\"poly\", cnv,\n-                                          mk_addr_of(cx, sp, arg))\n+                       mk_addr_of(cx, sp, arg))\n         }\n     }\n     fn log_conv(c: Conv) {"}, {"sha": "9c10d228a23f3a04ca9264ed859e895b3138fb6e", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -71,10 +71,10 @@ impl message: gen_send {\n \n                 body += ~\"let b = pipe.reuse_buffer();\\n\";\n                 body += fmt!(\"let %s = pipes::SendPacketBuffered(\\\n-                              ptr::p2::addr_of(&(b.buffer.data.%s)));\\n\",\n+                              ptr::addr_of(&(b.buffer.data.%s)));\\n\",\n                              sp, next.name);\n                 body += fmt!(\"let %s = pipes::RecvPacketBuffered(\\\n-                              ptr::p2::addr_of(&(b.buffer.data.%s)));\\n\",\n+                              ptr::addr_of(&(b.buffer.data.%s)));\\n\",\n                              rp, next.name);\n             }\n             else {\n@@ -351,7 +351,7 @@ impl protocol: gen_init {\n                         fmt!(\"data.%s.set_buffer_(buffer)\",\n                              s.name))),\n                 ext_cx.parse_expr(\n-                    fmt!(\"ptr::p2::addr_of(&(data.%s))\",\n+                    fmt!(\"ptr::addr_of(&(data.%s))\",\n                          self.states[0].name))));\n \n         #ast {{"}, {"sha": "7cb2c9eb9cf192dae754fb31620067e336e461f2", "filename": "src/rustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Frustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Frustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flang_items.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -179,7 +179,7 @@ impl LanguageItemCollector {\n     }\n \n     fn collect_local_language_items() {\n-        let this = unsafe { ptr::addr_of(self) };\n+        let this = unsafe { ptr::addr_of(&self) };\n         visit_crate(*self.crate, (), mk_simple_visitor(@{\n             visit_item: |item| {\n                 for item.attrs.each |attribute| {"}, {"sha": "69b325b03a4a7ffd3d7a539f5b5f097dad5acafa", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -416,7 +416,7 @@ fn visit_fn(fk: visit::fn_kind, decl: fn_decl, body: blk,\n     let fn_maps = @IrMaps(self.tcx, self.method_map,\n                           self.last_use_map);\n \n-    debug!(\"creating fn_maps: %x\", ptr::addr_of(*fn_maps) as uint);\n+    debug!(\"creating fn_maps: %x\", ptr::addr_of(&(*fn_maps)) as uint);\n \n     for decl.inputs.each |arg| {\n         debug!(\"adding argument %d\", arg.id);"}, {"sha": "69de8a2cca3e247056c44d3bf05bc8f10cd741dd", "filename": "src/rustc/middle/trans/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -134,7 +134,7 @@ fn IndirectBr(cx: block, Addr: ValueRef, NumDests: uint) {\n // lot more efficient) than doing str::as_c_str(\"\", ...) every time.\n fn noname() -> *libc::c_char unsafe {\n     const cnull: uint = 0u;\n-    return cast::reinterpret_cast(&ptr::addr_of(cnull));\n+    return cast::reinterpret_cast(&ptr::addr_of(&cnull));\n }\n \n fn Invoke(cx: block, Fn: ValueRef, Args: ~[ValueRef],\n@@ -629,8 +629,8 @@ fn Phi(cx: block, Ty: TypeRef, vals: ~[ValueRef], bbs: ~[BasicBlockRef])\n fn AddIncomingToPhi(phi: ValueRef, val: ValueRef, bb: BasicBlockRef) {\n     if llvm::LLVMIsUndef(phi) == lib::llvm::True { return; }\n     unsafe {\n-        let valptr = cast::reinterpret_cast(&ptr::addr_of(val));\n-        let bbptr = cast::reinterpret_cast(&ptr::addr_of(bb));\n+        let valptr = cast::reinterpret_cast(&ptr::addr_of(&val));\n+        let bbptr = cast::reinterpret_cast(&ptr::addr_of(&bb));\n         llvm::LLVMAddIncoming(phi, valptr, bbptr, 1 as c_uint);\n     }\n }"}, {"sha": "d68bdb082214cb7b2f830c2a6caee9b2cf003bf4", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -645,7 +645,7 @@ impl block {\n             fmt!(\"[block %d]\", node_info.id)\n           }\n           None => {\n-            fmt!(\"[block %x]\", ptr::addr_of(*self) as uint)\n+            fmt!(\"[block %x]\", ptr::addr_of(&(*self)) as uint)\n           }\n         }\n     }"}, {"sha": "368b69cafaba1787a7edd34510da3c12e3646dd1", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -605,7 +605,7 @@ impl @fn_ctxt: region_scope {\n }\n \n impl @fn_ctxt {\n-    fn tag() -> ~str { fmt!(\"%x\", ptr::addr_of(*self) as uint) }\n+    fn tag() -> ~str { fmt!(\"%x\", ptr::addr_of(&(*self)) as uint) }\n \n     fn expr_to_str(expr: @ast::expr) -> ~str {\n         fmt!(\"expr(%?:%s)\", expr.id,"}, {"sha": "77f107fda090d0b0384d66a04d15084ea4ed234e", "filename": "src/test/auxiliary/test_comm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftest_comm.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -34,7 +34,7 @@ struct port_ptr<T:Send> {\n     debug!(\"in the port_ptr destructor\");\n        do task::unkillable {\n         let yield = 0u;\n-        let yieldp = ptr::addr_of(yield);\n+        let yieldp = ptr::addr_of(&yield);\n         rustrt::rust_port_begin_detach(self.po, yieldp);\n         if yield != 0u {\n             task::yield();\n@@ -66,10 +66,10 @@ fn recv<T: Send>(p: port<T>) -> T { recv_((**p).po) }\n /// Receive on a raw port pointer\n fn recv_<T: Send>(p: *rust_port) -> T {\n     let yield = 0u;\n-    let yieldp = ptr::addr_of(yield);\n+    let yieldp = ptr::addr_of(&yield);\n     let mut res;\n     res = rusti::init::<T>();\n-    rustrt::port_recv(ptr::addr_of(res) as *uint, p, yieldp);\n+    rustrt::port_recv(ptr::addr_of(&res) as *uint, p, yieldp);\n \n     if yield != 0u {\n         // Data isn't available yet, so res has not been initialized."}, {"sha": "0a55e7572db9341fc131fdf58f5124bb065e3dbf", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -19,7 +19,7 @@ use io::WriterUtil;\n use pipes::{Port, Chan, SharedChan};\n \n macro_rules! move_out (\n-    { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); y } }\n+    { $x:expr } => { unsafe { let y <- *ptr::addr_of(&($x)); y } }\n )\n \n enum request {"}, {"sha": "ab67a8c7cb128688ac4004b9dec844794900b1ce", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -15,7 +15,7 @@ use io::WriterUtil;\n use pipes::{Port, PortSet, Chan};\n \n macro_rules! move_out (\n-    { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); y } }\n+    { $x:expr } => { unsafe { let y <- *ptr::addr_of(&($x)); y } }\n )\n \n enum request {"}, {"sha": "119c2065d6bc0235090004638ee607d79c8c9c67", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -24,7 +24,7 @@ proto! ring (\n fn macros() {\n     #macro[\n         [#move_out[x],\n-         unsafe { let y <- *ptr::addr_of(x); y }]\n+         unsafe { let y <- *ptr::addr_of(&x); y }]\n     ];\n }\n "}, {"sha": "70f98934e1bc3ed3894228ad0ca4694bebf07a30", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -33,7 +33,7 @@ proto! pingpong_unbounded (\n \n // This stuff should go in libcore::pipes\n macro_rules! move_it (\n-    { $x:expr } => { let t <- *ptr::addr_of($x); t }\n+    { $x:expr } => { let t <- *ptr::addr_of(&($x)); t }\n )\n \n macro_rules! follow ("}, {"sha": "62612366524391ca8df9564b41c4f03d91ae859e", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -32,7 +32,7 @@ use cmp::Eq;\n use to_bytes::IterBytes;\n \n macro_rules! move_out (\n-    { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); y } }\n+    { $x:expr } => { unsafe { let y <- *ptr::addr_of(&($x)); y } }\n )\n \n trait word_reader {"}, {"sha": "cfcb158a990aac37f1fbdacc316a1484276e7433", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -103,8 +103,8 @@ fn test_class() {\n   \n   unsafe {\n   error!(\"q = %x, r = %x\",\n-         (cast::reinterpret_cast::<*p, uint>(&ptr::addr_of(q))),\n-         (cast::reinterpret_cast::<*p, uint>(&ptr::addr_of(r))));\n+         (cast::reinterpret_cast::<*p, uint>(&ptr::addr_of(&q))),\n+         (cast::reinterpret_cast::<*p, uint>(&ptr::addr_of(&r))));\n   }\n   assert(q == r);\n   r.y = 17;"}, {"sha": "d180fc4b8ae5e291fba4bb793a00d6cb7e3045f1", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -7,7 +7,7 @@ fn borrow(x: &int, f: fn(x: &int)) {\n fn test1(x: @~int) {\n     // Right now, at least, this induces a copy of the unique pointer:\n     do borrow({*x}) |p| {\n-        let x_a = ptr::addr_of(**x);\n+        let x_a = ptr::addr_of(&(**x));\n         assert (x_a as uint) != to_uint(p);\n         assert unsafe{*x_a} == *p;\n     }"}, {"sha": "5ed78488b3561662cc97c5fdc7f0af689867c81e", "filename": "src/test/run-pass/borrowck-preserve-box-in-discr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -5,13 +5,13 @@ fn main() {\n     match *x {\n       {f: b_x} => {\n         assert *b_x == 3;\n-        assert ptr::addr_of(*x.f) == ptr::addr_of(*b_x);\n+        assert ptr::addr_of(&(*x.f)) == ptr::addr_of(&(*b_x));\n \n         x = @{f: ~4};\n \n-        debug!(\"ptr::addr_of(*b_x) = %x\", ptr::addr_of(*b_x) as uint);\n+        debug!(\"ptr::addr_of(*b_x) = %x\", ptr::addr_of(&(*b_x)) as uint);\n         assert *b_x == 3;\n-        assert ptr::addr_of(*x.f) != ptr::addr_of(*b_x);\n+        assert ptr::addr_of(&(*x.f)) != ptr::addr_of(&(*b_x));\n       }\n     }\n }\n\\ No newline at end of file"}, {"sha": "d7d3aa68fafa94cb060dc8725446a698aab6d893", "filename": "src/test/run-pass/borrowck-preserve-box-in-field.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -11,11 +11,11 @@ fn main() {\n     let mut x = @{f: ~3};\n     do borrow(x.f) |b_x| {\n         assert *b_x == 3;\n-        assert ptr::addr_of(*x.f) == ptr::addr_of(*b_x);\n+        assert ptr::addr_of(&(*x.f)) == ptr::addr_of(&(*b_x));\n         x = @{f: ~4};\n \n-        debug!(\"ptr::addr_of(*b_x) = %x\", ptr::addr_of(*b_x) as uint);\n+        debug!(\"ptr::addr_of(*b_x) = %x\", ptr::addr_of(&(*b_x)) as uint);\n         assert *b_x == 3;\n-        assert ptr::addr_of(*x.f) != ptr::addr_of(*b_x);\n+        assert ptr::addr_of(&(*x.f)) != ptr::addr_of(&(*b_x));\n     }\n }\n\\ No newline at end of file"}, {"sha": "f0944ea354446488412c0f5cc89467b165463a39", "filename": "src/test/run-pass/borrowck-preserve-box-in-pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -5,13 +5,13 @@ fn main() {\n     match x {\n       @@{f: b_x} => {\n         assert *b_x == 3;\n-        assert ptr::addr_of(x.f) == ptr::addr_of(b_x);\n+        assert ptr::addr_of(&(x.f)) == ptr::addr_of(&(b_x));\n \n         *x = @{f: ~4};\n \n-        debug!(\"ptr::addr_of(*b_x) = %x\", ptr::addr_of(*b_x) as uint);\n+        debug!(\"ptr::addr_of(*b_x) = %x\", ptr::addr_of(&(*b_x)) as uint);\n         assert *b_x == 3;\n-        assert ptr::addr_of(*x.f) != ptr::addr_of(*b_x);\n+        assert ptr::addr_of(&(*x.f)) != ptr::addr_of(&(*b_x));\n       }\n     }\n }"}, {"sha": "b0bb4d8d40cc7fd0e5c5106263c9393bc698e80d", "filename": "src/test/run-pass/borrowck-preserve-box-in-uniq.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -11,11 +11,11 @@ fn main() {\n     let mut x = ~mut @{f: ~3};\n     do borrow(x.f) |b_x| {\n         assert *b_x == 3;\n-        assert ptr::addr_of(*x.f) == ptr::addr_of(*b_x);\n+        assert ptr::addr_of(&(*x.f)) == ptr::addr_of(&(*b_x));\n         *x = @{f: ~4};\n \n-        debug!(\"ptr::addr_of(*b_x) = %x\", ptr::addr_of(*b_x) as uint);\n+        debug!(\"ptr::addr_of(*b_x) = %x\", ptr::addr_of(&(*b_x)) as uint);\n         assert *b_x == 3;\n-        assert ptr::addr_of(*x.f) != ptr::addr_of(*b_x);\n+        assert ptr::addr_of(&(*x.f)) != ptr::addr_of(&(*b_x));\n     }\n }\n\\ No newline at end of file"}, {"sha": "88f4b459d3614d039da4aafe2d046506f6431729", "filename": "src/test/run-pass/borrowck-preserve-box.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -11,11 +11,11 @@ fn main() {\n     let mut x = @3;\n     do borrow(x) |b_x| {\n         assert *b_x == 3;\n-        assert ptr::addr_of(*x) == ptr::addr_of(*b_x);\n+        assert ptr::addr_of(&(*x)) == ptr::addr_of(&(*b_x));\n         x = @22;\n \n-        debug!(\"ptr::addr_of(*b_x) = %x\", ptr::addr_of(*b_x) as uint);\n+        debug!(\"ptr::addr_of(*b_x) = %x\", ptr::addr_of(&(*b_x)) as uint);\n         assert *b_x == 3;\n-        assert ptr::addr_of(*x) != ptr::addr_of(*b_x);\n+        assert ptr::addr_of(&(*x)) != ptr::addr_of(&(*b_x));\n     }\n }\n\\ No newline at end of file"}, {"sha": "ba525eafc516ab0fe54ce60c2c9b639f704d0791", "filename": "src/test/run-pass/borrowck-preserve-expl-deref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -11,11 +11,11 @@ fn main() {\n     let mut x = @{f: ~3};\n     do borrow((*x).f) |b_x| {\n         assert *b_x == 3;\n-        assert ptr::addr_of(*x.f) == ptr::addr_of(*b_x);\n+        assert ptr::addr_of(&(*x.f)) == ptr::addr_of(&(*b_x));\n         x = @{f: ~4};\n \n-        debug!(\"ptr::addr_of(*b_x) = %x\", ptr::addr_of(*b_x) as uint);\n+        debug!(\"ptr::addr_of(*b_x) = %x\", ptr::addr_of(&(*b_x)) as uint);\n         assert *b_x == 3;\n-        assert ptr::addr_of(*x.f) != ptr::addr_of(*b_x);\n+        assert ptr::addr_of(&(*x.f)) != ptr::addr_of(&(*b_x));\n     }\n }"}, {"sha": "0561af6ca6d3362765b483cddb5836f02926b53b", "filename": "src/test/run-pass/cap-clause-move.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -1,29 +1,29 @@\n fn main() {\n     let x = ~1;\n-    let y = ptr::addr_of(*x) as uint;\n-    let lam_copy = fn@(copy x) -> uint { ptr::addr_of(*x) as uint };\n-    let lam_move = fn@(move x) -> uint { ptr::addr_of(*x) as uint };\n+    let y = ptr::addr_of(&(*x)) as uint;\n+    let lam_copy = fn@(copy x) -> uint { ptr::addr_of(&(*x)) as uint };\n+    let lam_move = fn@(move x) -> uint { ptr::addr_of(&(*x)) as uint };\n     assert lam_copy() != y;\n     assert lam_move() == y;\n \n     let x = ~2;\n-    let y = ptr::addr_of(*x) as uint;\n-    let lam_copy: fn@() -> uint = |copy x| ptr::addr_of(*x) as uint;\n-    let lam_move: fn@() -> uint = |move x| ptr::addr_of(*x) as uint;\n+    let y = ptr::addr_of(&(*x)) as uint;\n+    let lam_copy: fn@() -> uint = |copy x| ptr::addr_of(&(*x)) as uint;\n+    let lam_move: fn@() -> uint = |move x| ptr::addr_of(&(*x)) as uint;\n     assert lam_copy() != y;\n     assert lam_move() == y;\n \n     let x = ~3;\n-    let y = ptr::addr_of(*x) as uint;\n-    let snd_copy = fn~(copy x) -> uint { ptr::addr_of(*x) as uint };\n-    let snd_move = fn~(move x) -> uint { ptr::addr_of(*x) as uint };\n+    let y = ptr::addr_of(&(*x)) as uint;\n+    let snd_copy = fn~(copy x) -> uint { ptr::addr_of(&(*x)) as uint };\n+    let snd_move = fn~(move x) -> uint { ptr::addr_of(&(*x)) as uint };\n     assert snd_copy() != y;\n     assert snd_move() == y;\n \n     let x = ~4;\n-    let y = ptr::addr_of(*x) as uint;\n-    let lam_copy: fn~() -> uint = |copy x| ptr::addr_of(*x) as uint;\n-    let lam_move: fn~() -> uint = |move x| ptr::addr_of(*x) as uint;\n+    let y = ptr::addr_of(&(*x)) as uint;\n+    let lam_copy: fn~() -> uint = |copy x| ptr::addr_of(&(*x)) as uint;\n+    let lam_move: fn~() -> uint = |move x| ptr::addr_of(&(*x)) as uint;\n     assert lam_copy() != y;\n     assert lam_move() == y;\n }"}, {"sha": "b887b86cf2f38a3e46a843cf93323d5f086b8485", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -201,7 +201,7 @@ mod pingpong {\n \n     fn liberate_ping(-p: ping) -> pipes::send_packet<pong> unsafe {\n         let addr : *pipes::send_packet<pong> = match p {\n-          ping(x) => { cast::transmute(ptr::addr_of(x)) }\n+          ping(x) => { cast::transmute(ptr::addr_of(&x)) }\n         };\n         let liberated_value <- *addr;\n         cast::forget(p);\n@@ -210,7 +210,7 @@ mod pingpong {\n \n     fn liberate_pong(-p: pong) -> pipes::send_packet<ping> unsafe {\n         let addr : *pipes::send_packet<ping> = match p {\n-          pong(x) => { cast::transmute(ptr::addr_of(x)) }\n+          pong(x) => { cast::transmute(ptr::addr_of(&x)) }\n         };\n         let liberated_value <- *addr;\n         cast::forget(p);"}, {"sha": "a3088a2c12567695acd56a8616270ffb2da9711b", "filename": "src/test/run-pass/last-use-corner-cases.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -4,14 +4,14 @@\n fn main() {\n     // Make sure closing over can be a last use\n     let q = ~10;\n-    let addr = ptr::addr_of(*q);\n-    let f = fn@() -> *int { ptr::addr_of(*q) };\n+    let addr = ptr::addr_of(&(*q));\n+    let f = fn@() -> *int { ptr::addr_of(&(*q)) };\n     assert addr == f();\n \n     // But only when it really is the last use\n     let q = ~20;\n-    let f = fn@() -> *int { ptr::addr_of(*q) };\n-    assert ptr::addr_of(*q) != f();\n+    let f = fn@() -> *int { ptr::addr_of(&(*q)) };\n+    assert ptr::addr_of(&(*q)) != f();\n \n     // Ensure function arguments and box arguments interact sanely.\n     fn call_me(x: fn() -> int, y: ~int) { assert x() == *y; }"}, {"sha": "899b74b2866e9c63030ac08c66ed286a9a44ce91", "filename": "src/test/run-pass/pipe-bank-proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -33,7 +33,7 @@ proto! bank (\n )\n \n macro_rules! move_it (\n-    { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); y } }\n+    { $x:expr } => { unsafe { let y <- *ptr::addr_of(&($x)); y } }\n )\n \n fn switch<T: Send, U>(+endp: pipes::RecvPacket<T>,"}, {"sha": "9bfbbe338e764c71c2354fc1eeb431da5ed7ef8a", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -28,7 +28,7 @@ mod pingpong {\n         do pipes::entangle_buffer(buffer) |buffer, data| {\n             data.ping.set_buffer_(buffer);\n             data.pong.set_buffer_(buffer);\n-            ptr::addr_of(data.ping)\n+            ptr::addr_of(&(data.ping))\n         }\n     }\n     enum ping = server::pong;\n@@ -38,8 +38,8 @@ mod pingpong {\n         fn ping(+pipe: ping) -> pong {\n             {\n                 let b = pipe.reuse_buffer();\n-                let s = SendPacketBuffered(ptr::addr_of(b.buffer.data.pong));\n-                let c = RecvPacketBuffered(ptr::addr_of(b.buffer.data.pong));\n+                let s = SendPacketBuffered(ptr::addr_of(&(b.buffer.data.pong)));\n+                let c = RecvPacketBuffered(ptr::addr_of(&(b.buffer.data.pong)));\n                 let message = pingpong::ping(s);\n                 pipes::send(pipe, message);\n                 c\n@@ -57,8 +57,8 @@ mod pingpong {\n         fn pong(+pipe: pong) -> ping {\n             {\n                 let b = pipe.reuse_buffer();\n-                let s = SendPacketBuffered(ptr::addr_of(b.buffer.data.ping));\n-                let c = RecvPacketBuffered(ptr::addr_of(b.buffer.data.ping));\n+                let s = SendPacketBuffered(ptr::addr_of(&(b.buffer.data.ping)));\n+                let c = RecvPacketBuffered(ptr::addr_of(&(b.buffer.data.ping)));\n                 let message = pingpong::pong(s);\n                 pipes::send(pipe, message);\n                 c"}, {"sha": "e27aaa618acac305b1c50df60a64eebddce2985c", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -612,7 +612,7 @@ fn get_tydesc_for<T>(&&_t: T) -> *TyDesc {\n \n fn main() {\n     let r = (1,2,3,true,false,{x:5,y:4,z:3});\n-    let p = ptr::addr_of(r) as *c_void;\n+    let p = ptr::addr_of(&r) as *c_void;\n     let u = my_visitor(@{mut ptr1: p,\n                          mut ptr2: p,\n                          mut vals: ~[]});"}, {"sha": "26e19ee1b0c670f36f20e7b242ddafee1ae7411a", "filename": "src/test/run-pass/resource-cycle.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -4,8 +4,8 @@ struct r {\n   v: *int,\n   drop unsafe {\n     debug!(\"r's dtor: self = %x, self.v = %x, self.v's value = %x\",\n-           cast::reinterpret_cast::<*r, uint>(&ptr::addr_of(self)),\n-           cast::reinterpret_cast::<**int, uint>(&ptr::addr_of(self.v)),\n+           cast::reinterpret_cast::<*r, uint>(&ptr::addr_of(&self)),\n+           cast::reinterpret_cast::<**int, uint>(&ptr::addr_of(&(self.v))),\n            cast::reinterpret_cast::<*int, uint>(&self.v));\n     let v2: ~int = cast::reinterpret_cast(&self.v); }\n }\n@@ -34,27 +34,27 @@ fn main() unsafe {\n           r: {\n           let rs = r(i1p);\n           debug!(\"r = %x\",\n-                 cast::reinterpret_cast::<*r, uint>(&ptr::addr_of(rs)));\n+                 cast::reinterpret_cast::<*r, uint>(&ptr::addr_of(&rs)));\n           rs }\n     });\n     \n     debug!(\"x1 = %x, x1.r = %x\",\n         cast::reinterpret_cast::<@t, uint>(&x1),\n-        cast::reinterpret_cast::<*r, uint>(&ptr::addr_of(x1.r)));\n+        cast::reinterpret_cast::<*r, uint>(&ptr::addr_of(&(x1.r))));\n \n     let x2 = @t({\n         mut next: None,\n           r: {\n           let rs = r(i2p);\n           debug!(\"r2 = %x\",\n-                 cast::reinterpret_cast::<*r, uint>(&ptr::addr_of(rs)));\n+                 cast::reinterpret_cast::<*r, uint>(&ptr::addr_of(&rs)));\n           rs\n             }\n     });\n     \n     debug!(\"x2 = %x, x2.r = %x\",\n            cast::reinterpret_cast::<@t, uint>(&x2),\n-           cast::reinterpret_cast::<*r, uint>(&ptr::addr_of(x2.r)));\n+           cast::reinterpret_cast::<*r, uint>(&ptr::addr_of(&(x2.r))));\n \n     x1.next = Some(x2);\n     x2.next = Some(x1);"}, {"sha": "15207b668fef9884d35bf487369fd8866e7eddb4", "filename": "src/test/run-pass/rt-sched-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-sched-1.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -33,7 +33,7 @@ fn main() unsafe {\n         assert child_sched_id == new_sched_id;\n         comm::send(ch, ());\n     };\n-    let fptr = cast::reinterpret_cast(&ptr::addr_of(f));\n+    let fptr = cast::reinterpret_cast(&ptr::addr_of(&f));\n     rustrt::start_task(new_task_id, fptr);\n     cast::forget(f);\n     comm::recv(po);"}, {"sha": "78bddffcc1d407f821880bde6922139316815831", "filename": "src/test/run-pass/select-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fselect-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fselect-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fselect-macro.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -28,7 +28,7 @@ macro_rules! select_if (\n             match move pipes::try_recv($port) {\n               $(Some($message($($(ref $x,)+)* ref next)) => {\n                 // FIXME (#2329) we really want move out of enum here.\n-                let $next = unsafe { let x <- *ptr::addr_of(*next); x };\n+                let $next = unsafe { let x <- *ptr::addr_of(&(*next)); x };\n                 $e\n               })+\n               _ => fail"}, {"sha": "dceb80331b4d2f2a05568dbf1aaef4fb79a0c354", "filename": "src/test/run-pass/stable-addr-of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fstable-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Fstable-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstable-addr-of.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let foo = 1;\n-    assert ptr::addr_of(foo) == ptr::addr_of(foo);\n+    assert ptr::addr_of(&foo) == ptr::addr_of(&foo);\n }"}, {"sha": "405ba82b79039844c01abca8cef4e32ec076b9cb", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -10,7 +10,7 @@ struct notify {\n     drop {\n         error!(\"notify: task=%? v=%x unwinding=%b b=%b\",\n                task::get_task(),\n-               ptr::addr_of(*(self.v)) as uint,\n+               ptr::addr_of(&(*(self.v))) as uint,\n                task::failing(),\n                *(self.v));\n         let b = *(self.v);\n@@ -30,7 +30,7 @@ fn joinable(+f: fn~()) -> comm::Port<bool> {\n         let b = @mut false;\n         error!(\"wrapper: task=%? allocated v=%x\",\n                task::get_task(),\n-               ptr::addr_of(*b) as uint);\n+               ptr::addr_of(&(*b)) as uint);\n         let _r = notify(c, b);\n         f();\n         *b = true;"}, {"sha": "7316a927751b577511dbbee4cacca1b2b4cab262", "filename": "src/test/run-pass/task-spawn-move-and-copy.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -3,16 +3,16 @@ fn main() {\n     let ch = comm::Chan(p);\n \n     let x = ~1;\n-    let x_in_parent = ptr::addr_of(*x) as uint;\n+    let x_in_parent = ptr::addr_of(&(*x)) as uint;\n \n     let y = ~2;\n-    let y_in_parent = ptr::addr_of(*y) as uint;\n+    let y_in_parent = ptr::addr_of(&(*y)) as uint;\n \n     task::spawn(fn~(copy ch, copy y, move x) {\n-        let x_in_child = ptr::addr_of(*x) as uint;\n+        let x_in_child = ptr::addr_of(&(*x)) as uint;\n         comm::send(ch, x_in_child);\n \n-        let y_in_child = ptr::addr_of(*y) as uint;\n+        let y_in_child = ptr::addr_of(&(*y)) as uint;\n         comm::send(ch, y_in_child);\n     });\n     // Ensure last-use analysis doesn't move y to child."}, {"sha": "592d49cc2a879d7b30f9e8e80bd887bd3c45f897", "filename": "src/test/run-pass/uniq-cc-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b18320446e553a3f8436f87306dded57e16a4b94/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs?ref=b18320446e553a3f8436f87306dded57e16a4b94", "patch": "@@ -9,7 +9,7 @@ type pointy = {\n };\n \n fn make_uniq_closure<A:Send Copy>(a: A) -> fn~() -> uint {\n-    fn~() -> uint { ptr::addr_of(a) as uint }\n+    fn~() -> uint { ptr::addr_of(&a) as uint }\n }\n \n fn empty_pointy() -> @pointy {"}]}