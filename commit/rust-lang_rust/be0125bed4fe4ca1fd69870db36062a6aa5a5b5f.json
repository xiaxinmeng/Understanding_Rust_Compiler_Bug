{"sha": "be0125bed4fe4ca1fd69870db36062a6aa5a5b5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMDEyNWJlZDRmZTRjYTFmZDY5ODcwZGIzNjA2MmE2YWE1YTViNWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-26T06:58:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-26T06:58:04Z"}, "message": "Auto merge of #6469 - matthiaskrgr:clippy_dev_crater, r=flip1995\n\nadd \"cargo dev crater\" to run clippy on a fixed set of crates and diff the lint warnings\n\n`cargo dev crater` now does the following:\nbuild clippy in debug mode\nfor a fixed set of crates:\n download and extract the crate\n run compiled clippy on the crate\n dump the warnings into a file that is inside the repo\n\nWe can then do a \"git diff\" and see what effects our clippy changes had on a tiny fraction of the rust ecosystem and can see when an change unexpectedly added or silenced a lot of warnings.\n\nChecking all the crates took less than 5 minutes on my system.\n\nShould help with https://github.com/rust-lang/rust-clippy/issues/6429\n\n---\n\n*Please write a short comment explaining your change (or \"none\" for internal only changes)*\nchangelog: extend cargo dev to run clippy against a fixed set of crates and compare warnings", "tree": {"sha": "ef47e766b6fb1f308936b48af1437f673c73951b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef47e766b6fb1f308936b48af1437f673c73951b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be0125bed4fe4ca1fd69870db36062a6aa5a5b5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be0125bed4fe4ca1fd69870db36062a6aa5a5b5f", "html_url": "https://github.com/rust-lang/rust/commit/be0125bed4fe4ca1fd69870db36062a6aa5a5b5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be0125bed4fe4ca1fd69870db36062a6aa5a5b5f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d57cee9ca0139110fb1da4199aed64ced41f4a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d57cee9ca0139110fb1da4199aed64ced41f4a3", "html_url": "https://github.com/rust-lang/rust/commit/8d57cee9ca0139110fb1da4199aed64ced41f4a3"}, {"sha": "5b6a18362be15a693e202a592f4ae6bc4b2844f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b6a18362be15a693e202a592f4ae6bc4b2844f2", "html_url": "https://github.com/rust-lang/rust/commit/5b6a18362be15a693e202a592f4ae6bc4b2844f2"}], "stats": {"total": 3716, "additions": 3713, "deletions": 3}, "files": [{"sha": "1142cc470fe82510b652d3767027e5cc322c70d6", "filename": ".cargo/config", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be0125bed4fe4ca1fd69870db36062a6aa5a5b5f/.cargo%2Fconfig", "raw_url": "https://github.com/rust-lang/rust/raw/be0125bed4fe4ca1fd69870db36062a6aa5a5b5f/.cargo%2Fconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cargo%2Fconfig?ref=be0125bed4fe4ca1fd69870db36062a6aa5a5b5f", "patch": "@@ -1,6 +1,7 @@\n [alias]\n uitest = \"test --test compile-test\"\n dev = \"run --target-dir clippy_dev/target --package clippy_dev --bin clippy_dev --manifest-path clippy_dev/Cargo.toml --\"\n+dev-lintcheck = \"run --target-dir clippy_dev/target --package clippy_dev --bin clippy_dev --manifest-path clippy_dev/Cargo.toml --features lintcheck -- lintcheck\"\n \n [build]\n rustflags = [\"-Zunstable-options\"]"}, {"sha": "f48c1ee5ea26567cec7c165ff15beaf6eda26f45", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be0125bed4fe4ca1fd69870db36062a6aa5a5b5f/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/be0125bed4fe4ca1fd69870db36062a6aa5a5b5f/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=be0125bed4fe4ca1fd69870db36062a6aa5a5b5f", "patch": "@@ -4,14 +4,22 @@ version = \"0.0.1\"\n authors = [\"Philipp Hansch <dev@phansch.net>\"]\n edition = \"2018\"\n \n+\n [dependencies]\n bytecount = \"0.6\"\n clap = \"2.33\"\n+flate2 = { version = \"1.0.19\", optional = true }\n itertools = \"0.9\"\n opener = \"0.4\"\n regex = \"1\"\n+serde = { version = \"1.0\", features = [\"derive\"], optional = true }\n+serde_json = { version = \"1.0\", optional = true }\n shell-escape = \"0.1\"\n+tar = { version = \"0.4.30\", optional = true }\n+toml = { version = \"0.5\", optional = true }\n+ureq = { version = \"2.0.0-rc3\", optional = true }\n walkdir = \"2\"\n \n [features]\n+lintcheck = [\"flate2\", \"serde_json\", \"tar\", \"toml\", \"ureq\", \"serde\"]\n deny-warnings = []"}, {"sha": "1fbf7930d3ecf4a9da72573335cdace66a1bf697", "filename": "clippy_dev/lintcheck_crates.toml", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/be0125bed4fe4ca1fd69870db36062a6aa5a5b5f/clippy_dev%2Flintcheck_crates.toml", "raw_url": "https://github.com/rust-lang/rust/raw/be0125bed4fe4ca1fd69870db36062a6aa5a5b5f/clippy_dev%2Flintcheck_crates.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Flintcheck_crates.toml?ref=be0125bed4fe4ca1fd69870db36062a6aa5a5b5f", "patch": "@@ -0,0 +1,20 @@\n+[crates]\n+# some of these are from cargotest\n+cargo = ['0.49.0']\n+iron = ['0.6.1']\n+ripgrep = ['12.1.1']\n+xsv = ['0.13.0']\n+#tokei = ['12.0.4']\n+rayon = ['1.5.0']\n+serde = ['1.0.118']\n+# top 10 crates.io dls\n+bitflags = ['1.2.1']\n+libc = ['0.2.81']\n+log = ['0.4.11']\n+proc-macro2 = ['1.0.24']\n+quote = ['1.0.7']\n+rand = ['0.7.3']\n+rand_core = ['0.6.0']\n+regex = ['1.3.2']\n+syn = ['1.0.54']\n+unicode-xid = ['0.2.1']"}, {"sha": "24d70d433f367e0072def9923508bb5a2b125c60", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be0125bed4fe4ca1fd69870db36062a6aa5a5b5f/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0125bed4fe4ca1fd69870db36062a6aa5a5b5f/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=be0125bed4fe4ca1fd69870db36062a6aa5a5b5f", "patch": "@@ -12,6 +12,7 @@ use walkdir::WalkDir;\n \n pub mod bless;\n pub mod fmt;\n+pub mod lintcheck;\n pub mod new_lint;\n pub mod ra_setup;\n pub mod serve;"}, {"sha": "785c692d3cb9818f0407541ea12731dfed7ab73b", "filename": "clippy_dev/src/lintcheck.rs", "status": "added", "additions": 286, "deletions": 0, "changes": 286, "blob_url": "https://github.com/rust-lang/rust/blob/be0125bed4fe4ca1fd69870db36062a6aa5a5b5f/clippy_dev%2Fsrc%2Flintcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0125bed4fe4ca1fd69870db36062a6aa5a5b5f/clippy_dev%2Fsrc%2Flintcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flintcheck.rs?ref=be0125bed4fe4ca1fd69870db36062a6aa5a5b5f", "patch": "@@ -0,0 +1,286 @@\n+// Run clippy on a fixed set of crates and collect the warnings.\n+// This helps observing the impact clippy changs have on a set of real-world code.\n+//\n+// When a new lint is introduced, we can search the results for new warnings and check for false\n+// positives.\n+\n+#![cfg(feature = \"lintcheck\")]\n+#![allow(clippy::filter_map)]\n+\n+use crate::clippy_project_root;\n+\n+use std::collections::HashMap;\n+use std::process::Command;\n+use std::{fmt, fs::write, path::PathBuf};\n+\n+use clap::ArgMatches;\n+use serde::{Deserialize, Serialize};\n+use serde_json::Value;\n+\n+// use this to store the crates when interacting with the crates.toml file\n+#[derive(Debug, Serialize, Deserialize)]\n+struct CrateList {\n+    crates: HashMap<String, Vec<String>>,\n+}\n+\n+// crate data we stored in the toml, can have multiple versions per crate\n+// A single TomlCrate is laster mapped to several CrateSources in that case\n+struct TomlCrate {\n+    name: String,\n+    versions: Vec<String>,\n+}\n+\n+// represents an archive we download from crates.io\n+#[derive(Debug, Serialize, Deserialize, Eq, Hash, PartialEq)]\n+struct CrateSource {\n+    name: String,\n+    version: String,\n+}\n+\n+// represents the extracted sourcecode of a crate\n+#[derive(Debug)]\n+struct Crate {\n+    version: String,\n+    name: String,\n+    // path to the extracted sources that clippy can check\n+    path: PathBuf,\n+}\n+\n+#[derive(Debug)]\n+struct ClippyWarning {\n+    crate_name: String,\n+    crate_version: String,\n+    file: String,\n+    line: String,\n+    column: String,\n+    linttype: String,\n+    message: String,\n+}\n+\n+impl std::fmt::Display for ClippyWarning {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        writeln!(\n+            f,\n+            r#\"{}-{}/{}:{}:{} {} \"{}\"\"#,\n+            &self.crate_name, &self.crate_version, &self.file, &self.line, &self.column, &self.linttype, &self.message\n+        )\n+    }\n+}\n+\n+impl CrateSource {\n+    fn download_and_extract(&self) -> Crate {\n+        let extract_dir = PathBuf::from(\"target/lintcheck/crates\");\n+        let krate_download_dir = PathBuf::from(\"target/lintcheck/downloads\");\n+\n+        // url to download the crate from crates.io\n+        let url = format!(\n+            \"https://crates.io/api/v1/crates/{}/{}/download\",\n+            self.name, self.version\n+        );\n+        println!(\"Downloading and extracting {} {} from {}\", self.name, self.version, url);\n+        let _ = std::fs::create_dir(\"target/lintcheck/\");\n+        let _ = std::fs::create_dir(&krate_download_dir);\n+        let _ = std::fs::create_dir(&extract_dir);\n+\n+        let krate_file_path = krate_download_dir.join(format!(\"{}-{}.crate.tar.gz\", &self.name, &self.version));\n+        // don't download/extract if we already have done so\n+        if !krate_file_path.is_file() {\n+            // create a file path to download and write the crate data into\n+            let mut krate_dest = std::fs::File::create(&krate_file_path).unwrap();\n+            let mut krate_req = ureq::get(&url).call().unwrap().into_reader();\n+            // copy the crate into the file\n+            std::io::copy(&mut krate_req, &mut krate_dest).unwrap();\n+\n+            // unzip the tarball\n+            let ungz_tar = flate2::read::GzDecoder::new(std::fs::File::open(&krate_file_path).unwrap());\n+            // extract the tar archive\n+            let mut archive = tar::Archive::new(ungz_tar);\n+            archive.unpack(&extract_dir).expect(\"Failed to extract!\");\n+        }\n+        // crate is extracted, return a new Krate object which contains the path to the extracted\n+        // sources that clippy can check\n+        Crate {\n+            version: self.version.clone(),\n+            name: self.name.clone(),\n+            path: extract_dir.join(format!(\"{}-{}/\", self.name, self.version)),\n+        }\n+    }\n+}\n+\n+impl Crate {\n+    fn run_clippy_lints(&self, cargo_clippy_path: &PathBuf) -> Vec<ClippyWarning> {\n+        println!(\"Linting {} {}...\", &self.name, &self.version);\n+        let cargo_clippy_path = std::fs::canonicalize(cargo_clippy_path).unwrap();\n+\n+        let shared_target_dir = clippy_project_root().join(\"target/lintcheck/shared_target_dir/\");\n+\n+        let all_output = std::process::Command::new(cargo_clippy_path)\n+            .env(\"CARGO_TARGET_DIR\", shared_target_dir)\n+            // lint warnings will look like this:\n+            // src/cargo/ops/cargo_compile.rs:127:35: warning: usage of `FromIterator::from_iter`\n+            .args(&[\n+                \"--\",\n+                \"--message-format=json\",\n+                \"--\",\n+                \"--cap-lints=warn\",\n+                \"-Wclippy::pedantic\",\n+                \"-Wclippy::cargo\",\n+            ])\n+            .current_dir(&self.path)\n+            .output()\n+            .unwrap();\n+        let stdout = String::from_utf8_lossy(&all_output.stdout);\n+        let output_lines = stdout.lines();\n+        //dbg!(&output_lines);\n+        let warnings: Vec<ClippyWarning> = output_lines\n+            .into_iter()\n+            // get all clippy warnings\n+            .filter(|line| line.contains(\"clippy::\"))\n+            .map(|json_msg| parse_json_message(json_msg, &self))\n+            .collect();\n+        warnings\n+    }\n+}\n+\n+fn build_clippy() {\n+    Command::new(\"cargo\")\n+        .arg(\"build\")\n+        .output()\n+        .expect(\"Failed to build clippy!\");\n+}\n+\n+// get a list of CrateSources we want to check from a \"lintcheck_crates.toml\" file.\n+fn read_crates() -> Vec<CrateSource> {\n+    let toml_path = PathBuf::from(\"clippy_dev/lintcheck_crates.toml\");\n+    let toml_content: String =\n+        std::fs::read_to_string(&toml_path).unwrap_or_else(|_| panic!(\"Failed to read {}\", toml_path.display()));\n+    let crate_list: CrateList =\n+        toml::from_str(&toml_content).unwrap_or_else(|e| panic!(\"Failed to parse {}: \\n{}\", toml_path.display(), e));\n+    // parse the hashmap of the toml file into a list of crates\n+    let tomlcrates: Vec<TomlCrate> = crate_list\n+        .crates\n+        .into_iter()\n+        .map(|(name, versions)| TomlCrate { name, versions })\n+        .collect();\n+\n+    // flatten TomlCrates into CrateSources (one TomlCrates may represent several versions of a crate =>\n+    // multiple Cratesources)\n+    let mut crate_sources = Vec::new();\n+    tomlcrates.into_iter().for_each(|tk| {\n+        tk.versions.iter().for_each(|ver| {\n+            crate_sources.push(CrateSource {\n+                name: tk.name.clone(),\n+                version: ver.to_string(),\n+            });\n+        })\n+    });\n+    crate_sources\n+}\n+\n+// extract interesting data from a json lint message\n+fn parse_json_message(json_message: &str, krate: &Crate) -> ClippyWarning {\n+    let jmsg: Value = serde_json::from_str(&json_message).unwrap_or_else(|e| panic!(\"Failed to parse json:\\n{:?}\", e));\n+\n+    ClippyWarning {\n+        crate_name: krate.name.to_string(),\n+        crate_version: krate.version.to_string(),\n+        file: jmsg[\"message\"][\"spans\"][0][\"file_name\"]\n+            .to_string()\n+            .trim_matches('\"')\n+            .into(),\n+        line: jmsg[\"message\"][\"spans\"][0][\"line_start\"]\n+            .to_string()\n+            .trim_matches('\"')\n+            .into(),\n+        column: jmsg[\"message\"][\"spans\"][0][\"text\"][0][\"highlight_start\"]\n+            .to_string()\n+            .trim_matches('\"')\n+            .into(),\n+        linttype: jmsg[\"message\"][\"code\"][\"code\"].to_string().trim_matches('\"').into(),\n+        message: jmsg[\"message\"][\"message\"].to_string().trim_matches('\"').into(),\n+    }\n+}\n+\n+// the main fn\n+pub fn run(clap_config: &ArgMatches) {\n+    let cargo_clippy_path: PathBuf = PathBuf::from(\"target/debug/cargo-clippy\");\n+\n+    println!(\"Compiling clippy...\");\n+    build_clippy();\n+    println!(\"Done compiling\");\n+\n+    // assert that clippy is found\n+    assert!(\n+        cargo_clippy_path.is_file(),\n+        \"target/debug/cargo-clippy binary not found! {}\",\n+        cargo_clippy_path.display()\n+    );\n+\n+    let clippy_ver = std::process::Command::new(\"target/debug/cargo-clippy\")\n+        .arg(\"--version\")\n+        .output()\n+        .map(|o| String::from_utf8_lossy(&o.stdout).into_owned())\n+        .expect(\"could not get clippy version!\");\n+\n+    // download and extract the crates, then run clippy on them and collect clippys warnings\n+    // flatten into one big list of warnings\n+\n+    let crates = read_crates();\n+\n+    let clippy_warnings: Vec<ClippyWarning> = if let Some(only_one_crate) = clap_config.value_of(\"only\") {\n+        // if we don't have the specified crated in the .toml, throw an error\n+        if !crates.iter().any(|krate| krate.name == only_one_crate) {\n+            eprintln!(\n+                \"ERROR: could not find crate '{}' in clippy_dev/lintcheck_crates.toml\",\n+                only_one_crate\n+            );\n+            std::process::exit(1);\n+        }\n+\n+        // only check a single crate that was passed via cmdline\n+        crates\n+            .into_iter()\n+            .map(|krate| krate.download_and_extract())\n+            .filter(|krate| krate.name == only_one_crate)\n+            .map(|krate| krate.run_clippy_lints(&cargo_clippy_path))\n+            .flatten()\n+            .collect()\n+    } else {\n+        // check all crates (default)\n+        crates\n+            .into_iter()\n+            .map(|krate| krate.download_and_extract())\n+            .map(|krate| krate.run_clippy_lints(&cargo_clippy_path))\n+            .flatten()\n+            .collect()\n+    };\n+\n+    // generate some stats:\n+\n+    // count lint type occurrences\n+    let mut counter: HashMap<&String, usize> = HashMap::new();\n+    clippy_warnings\n+        .iter()\n+        .for_each(|wrn| *counter.entry(&wrn.linttype).or_insert(0) += 1);\n+\n+    // collect into a tupled list for sorting\n+    let mut stats: Vec<(&&String, &usize)> = counter.iter().map(|(lint, count)| (lint, count)).collect();\n+    // sort by \"000{count} {clippy::lintname}\"\n+    // to not have a lint with 200 and 2 warnings take the same spot\n+    stats.sort_by_key(|(lint, count)| format!(\"{:0>4}, {}\", count, lint));\n+\n+    let stats_formatted: String = stats\n+        .iter()\n+        .map(|(lint, count)| format!(\"{} {}\\n\", lint, count))\n+        .collect::<String>();\n+\n+    let mut all_msgs: Vec<String> = clippy_warnings.iter().map(|warning| warning.to_string()).collect();\n+    all_msgs.sort();\n+    all_msgs.push(\"\\n\\n\\n\\nStats\\n\\n\".into());\n+    all_msgs.push(stats_formatted);\n+\n+    // save the text into lintcheck-logs/logs.txt\n+    let mut text = clippy_ver; // clippy version number on top\n+    text.push_str(&format!(\"\\n{}\", all_msgs.join(\"\")));\n+    write(\"lintcheck-logs/logs.txt\", text).unwrap();\n+}"}, {"sha": "e7a298a37e17a37f226c2b27fe84911bf3e92af7", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/be0125bed4fe4ca1fd69870db36062a6aa5a5b5f/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be0125bed4fe4ca1fd69870db36062a6aa5a5b5f/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=be0125bed4fe4ca1fd69870db36062a6aa5a5b5f", "patch": "@@ -3,13 +3,20 @@\n use clap::{App, Arg, ArgMatches, SubCommand};\n use clippy_dev::{bless, fmt, new_lint, ra_setup, serve, stderr_length_check, update_lints};\n \n+#[cfg(feature = \"lintcheck\")]\n+use clippy_dev::lintcheck;\n+\n fn main() {\n     let matches = get_clap_config();\n \n     match matches.subcommand() {\n         (\"bless\", Some(matches)) => {\n             bless::bless(matches.is_present(\"ignore-timestamp\"));\n         },\n+        #[cfg(feature = \"lintcheck\")]\n+        (\"lintcheck\", Some(matches)) => {\n+            lintcheck::run(&matches);\n+        },\n         (\"fmt\", Some(matches)) => {\n             fmt::run(matches.is_present(\"check\"), matches.is_present(\"verbose\"));\n         },\n@@ -46,7 +53,18 @@ fn main() {\n }\n \n fn get_clap_config<'a>() -> ArgMatches<'a> {\n-    App::new(\"Clippy developer tooling\")\n+    #[cfg(feature = \"lintcheck\")]\n+    let lintcheck_sbcmd = SubCommand::with_name(\"lintcheck\")\n+        .about(\"run clippy on a set of crates and check output\")\n+        .arg(\n+            Arg::with_name(\"only\")\n+                .takes_value(true)\n+                .value_name(\"CRATE\")\n+                .long(\"only\")\n+                .help(\"only process a single crate of the list\"),\n+        );\n+\n+    let app = App::new(\"Clippy developer tooling\")\n         .subcommand(\n             SubCommand::with_name(\"bless\")\n                 .about(\"bless the test output changes\")\n@@ -163,6 +181,10 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                         .validator_os(serve::validate_port),\n                 )\n                 .arg(Arg::with_name(\"lint\").help(\"Which lint's page to load initially (optional)\")),\n-        )\n-        .get_matches()\n+        );\n+\n+    #[cfg(feature = \"lintcheck\")]\n+    let app = app.subcommand(lintcheck_sbcmd);\n+\n+    app.get_matches()\n }"}, {"sha": "e565691e0e3960ef70d39d8bafbd66bc10edbdaf", "filename": "lintcheck-logs/logs.txt", "status": "added", "additions": 3372, "deletions": 0, "changes": 3372, "blob_url": "https://github.com/rust-lang/rust/blob/be0125bed4fe4ca1fd69870db36062a6aa5a5b5f/lintcheck-logs%2Flogs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/be0125bed4fe4ca1fd69870db36062a6aa5a5b5f/lintcheck-logs%2Flogs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck-logs%2Flogs.txt?ref=be0125bed4fe4ca1fd69870db36062a6aa5a5b5f"}]}