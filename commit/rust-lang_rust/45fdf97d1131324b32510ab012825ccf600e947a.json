{"sha": "45fdf97d1131324b32510ab012825ccf600e947a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZmRmOTdkMTEzMTMyNGIzMjUxMGFiMDEyODI1Y2NmNjAwZTk0N2E=", "commit": {"author": {"name": "Nicholas-Baron", "email": "nicholas.baron.ten@gmail.com", "date": "2020-09-19T11:25:30Z"}, "committer": {"name": "Nicholas-Baron", "email": "nicholas.baron.ten@gmail.com", "date": "2020-09-21T01:56:09Z"}, "message": "Removed util.rs\n\nPer suggestion of @oli-obk.\nThis file was rather short and joining it did not cause mod.rs to become\nsignificantly bigger.", "tree": {"sha": "2c41e52c273384e7325d9e0ba678ac8b2747e664", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c41e52c273384e7325d9e0ba678ac8b2747e664"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45fdf97d1131324b32510ab012825ccf600e947a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45fdf97d1131324b32510ab012825ccf600e947a", "html_url": "https://github.com/rust-lang/rust/commit/45fdf97d1131324b32510ab012825ccf600e947a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45fdf97d1131324b32510ab012825ccf600e947a/comments", "author": {"login": "Nicholas-Baron", "id": 35079404, "node_id": "MDQ6VXNlcjM1MDc5NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/35079404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nicholas-Baron", "html_url": "https://github.com/Nicholas-Baron", "followers_url": "https://api.github.com/users/Nicholas-Baron/followers", "following_url": "https://api.github.com/users/Nicholas-Baron/following{/other_user}", "gists_url": "https://api.github.com/users/Nicholas-Baron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nicholas-Baron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nicholas-Baron/subscriptions", "organizations_url": "https://api.github.com/users/Nicholas-Baron/orgs", "repos_url": "https://api.github.com/users/Nicholas-Baron/repos", "events_url": "https://api.github.com/users/Nicholas-Baron/events{/privacy}", "received_events_url": "https://api.github.com/users/Nicholas-Baron/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nicholas-Baron", "id": 35079404, "node_id": "MDQ6VXNlcjM1MDc5NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/35079404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nicholas-Baron", "html_url": "https://github.com/Nicholas-Baron", "followers_url": "https://api.github.com/users/Nicholas-Baron/followers", "following_url": "https://api.github.com/users/Nicholas-Baron/following{/other_user}", "gists_url": "https://api.github.com/users/Nicholas-Baron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nicholas-Baron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nicholas-Baron/subscriptions", "organizations_url": "https://api.github.com/users/Nicholas-Baron/orgs", "repos_url": "https://api.github.com/users/Nicholas-Baron/repos", "events_url": "https://api.github.com/users/Nicholas-Baron/events{/privacy}", "received_events_url": "https://api.github.com/users/Nicholas-Baron/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8162c22ebce04a7a70739cb09b913ee162c4d0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8162c22ebce04a7a70739cb09b913ee162c4d0a", "html_url": "https://github.com/rust-lang/rust/commit/c8162c22ebce04a7a70739cb09b913ee162c4d0a"}], "stats": {"total": 141, "additions": 64, "deletions": 77}, "files": [{"sha": "cc9e1176fc8b6194c33fca6ec1cb5661773a32c5", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 64, "deletions": 8, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/45fdf97d1131324b32510ab012825ccf600e947a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45fdf97d1131324b32510ab012825ccf600e947a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=45fdf97d1131324b32510ab012825ccf600e947a", "patch": "@@ -82,22 +82,21 @@ mod pat;\n mod place_op;\n mod regionck;\n mod upvar;\n-mod util;\n mod wfcheck;\n pub mod writeback;\n \n pub use fn_ctxt::FnCtxt;\n \n use crate::astconv::AstConv;\n use crate::check::gather_locals::GatherLocalsVisitor;\n-use crate::check::util::MaybeInProgressTables;\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::Visitor;\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{HirIdMap, ItemKind, Node};\n use rustc_index::bit_set::BitSet;\n@@ -126,7 +125,7 @@ use rustc_trait_selection::traits::error_reporting::recursive_type_with_infinite\n use rustc_trait_selection::traits::error_reporting::suggestions::ReturnsVisitor;\n use rustc_trait_selection::traits::{self, ObligationCauseCode, TraitEngine, TraitEngineExt};\n \n-use std::cell::RefCell;\n+use std::cell::{Ref, RefCell, RefMut};\n use std::cmp;\n use std::ops::{self, Deref};\n \n@@ -586,10 +585,6 @@ pub fn check_wf_new(tcx: TyCtxt<'_>) {\n \n pub fn provide(providers: &mut Providers) {\n     method::provide(providers);\n-    use util::{\n-        check_impl_item_well_formed, check_item_well_formed, check_mod_item_types,\n-        check_trait_item_well_formed, typeck_item_bodies,\n-    };\n     *providers = Providers {\n         typeck_item_bodies,\n         typeck_const_arg,\n@@ -2720,6 +2715,67 @@ fn check_type_params_are_used<'tcx>(tcx: TyCtxt<'tcx>, generics: &ty::Generics,\n     }\n }\n \n+/// A wrapper for `InferCtxt`'s `in_progress_typeck_results` field.\n+#[derive(Copy, Clone)]\n+struct MaybeInProgressTables<'a, 'tcx> {\n+    maybe_typeck_results: Option<&'a RefCell<ty::TypeckResults<'tcx>>>,\n+}\n+\n+impl<'a, 'tcx> MaybeInProgressTables<'a, 'tcx> {\n+    fn borrow(self) -> Ref<'a, ty::TypeckResults<'tcx>> {\n+        match self.maybe_typeck_results {\n+            Some(typeck_results) => typeck_results.borrow(),\n+            None => bug!(\n+                \"MaybeInProgressTables: inh/fcx.typeck_results.borrow() with no typeck results\"\n+            ),\n+        }\n+    }\n+\n+    fn borrow_mut(self) -> RefMut<'a, ty::TypeckResults<'tcx>> {\n+        match self.maybe_typeck_results {\n+            Some(typeck_results) => typeck_results.borrow_mut(),\n+            None => bug!(\n+                \"MaybeInProgressTables: inh/fcx.typeck_results.borrow_mut() with no typeck results\"\n+            ),\n+        }\n+    }\n+}\n+\n+struct CheckItemTypesVisitor<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n+    fn visit_item(&mut self, i: &'tcx hir::Item<'tcx>) {\n+        check_item_type(self.tcx, i);\n+    }\n+    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem<'tcx>) {}\n+    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem<'tcx>) {}\n+}\n+\n+fn check_mod_item_types(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckItemTypesVisitor { tcx });\n+}\n+\n+fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n+    wfcheck::check_item_well_formed(tcx, def_id);\n+}\n+\n+fn check_trait_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n+    wfcheck::check_trait_item(tcx, def_id);\n+}\n+\n+fn check_impl_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n+    wfcheck::check_impl_item(tcx, def_id);\n+}\n+\n+fn typeck_item_bodies(tcx: TyCtxt<'_>, crate_num: CrateNum) {\n+    debug_assert!(crate_num == LOCAL_CRATE);\n+    tcx.par_body_owners(|body_owner_def_id| {\n+        tcx.ensure().typeck(body_owner_def_id);\n+    });\n+}\n+\n fn fatally_break_rust(sess: &Session) {\n     let handler = sess.diagnostic();\n     handler.span_bug_no_panic("}, {"sha": "62865accad4ad035763e58442612b790ec14e216", "filename": "compiler/rustc_typeck/src/check/util.rs", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/c8162c22ebce04a7a70739cb09b913ee162c4d0a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8162c22ebce04a7a70739cb09b913ee162c4d0a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Futil.rs?ref=c8162c22ebce04a7a70739cb09b913ee162c4d0a", "patch": "@@ -1,69 +0,0 @@\n-use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, LocalDefId, LOCAL_CRATE};\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-\n-use std::cell::{Ref, RefCell, RefMut};\n-\n-use super::wfcheck;\n-use crate::{ty, TyCtxt};\n-\n-/// A wrapper for `InferCtxt`'s `in_progress_typeck_results` field.\n-#[derive(Copy, Clone)]\n-pub(super) struct MaybeInProgressTables<'a, 'tcx> {\n-    pub(super) maybe_typeck_results: Option<&'a RefCell<ty::TypeckResults<'tcx>>>,\n-}\n-\n-impl<'a, 'tcx> MaybeInProgressTables<'a, 'tcx> {\n-    pub(super) fn borrow(self) -> Ref<'a, ty::TypeckResults<'tcx>> {\n-        match self.maybe_typeck_results {\n-            Some(typeck_results) => typeck_results.borrow(),\n-            None => bug!(\n-                \"MaybeInProgressTables: inh/fcx.typeck_results.borrow() with no typeck results\"\n-            ),\n-        }\n-    }\n-\n-    pub(super) fn borrow_mut(self) -> RefMut<'a, ty::TypeckResults<'tcx>> {\n-        match self.maybe_typeck_results {\n-            Some(typeck_results) => typeck_results.borrow_mut(),\n-            None => bug!(\n-                \"MaybeInProgressTables: inh/fcx.typeck_results.borrow_mut() with no typeck results\"\n-            ),\n-        }\n-    }\n-}\n-\n-struct CheckItemTypesVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-}\n-\n-impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n-    fn visit_item(&mut self, i: &'tcx hir::Item<'tcx>) {\n-        super::check_item_type(self.tcx, i);\n-    }\n-    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem<'tcx>) {}\n-    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem<'tcx>) {}\n-}\n-\n-pub(super) fn check_mod_item_types(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckItemTypesVisitor { tcx });\n-}\n-\n-pub(super) fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n-    wfcheck::check_item_well_formed(tcx, def_id);\n-}\n-\n-pub(super) fn check_trait_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n-    wfcheck::check_trait_item(tcx, def_id);\n-}\n-\n-pub(super) fn check_impl_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n-    wfcheck::check_impl_item(tcx, def_id);\n-}\n-\n-pub(super) fn typeck_item_bodies(tcx: TyCtxt<'_>, crate_num: CrateNum) {\n-    debug_assert!(crate_num == LOCAL_CRATE);\n-    tcx.par_body_owners(|body_owner_def_id| {\n-        tcx.ensure().typeck(body_owner_def_id);\n-    });\n-}"}]}