{"sha": "9353538c7bea6edb245457712cec720305c4576e", "node_id": "C_kwDOAAsO6NoAKDkzNTM1MzhjN2JlYTZlZGIyNDU0NTc3MTJjZWM3MjAzMDVjNDU3NmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-02T10:55:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-02T10:55:24Z"}, "message": "Auto merge of #101318 - GuillaumeGomez:rollup-qsr51z4, r=GuillaumeGomez\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #97739 (Uplift the `let_underscore` lints from clippy into rustc.)\n - #99583 (Add additional methods to the Demand type)\n - #100147 (optimization of access level table construction)\n - #100552 (rustc_target: Add a compatibility layer to separate internal and user-facing linker flavors)\n - #100827 (Simplify MIR opt tests)\n - #101166 (Generate error index with mdbook instead of raw HTML pages)\n - #101294 (Fix #100844 rebase accident)\n - #101298 (rustdoc: remove unused CSS `#main-content > .since`)\n - #101304 (Add autolabels for `A-query-system`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "11707f3b757bb59f55a44bd6fee1179bd772c484", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11707f3b757bb59f55a44bd6fee1179bd772c484"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9353538c7bea6edb245457712cec720305c4576e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9353538c7bea6edb245457712cec720305c4576e", "html_url": "https://github.com/rust-lang/rust/commit/9353538c7bea6edb245457712cec720305c4576e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9353538c7bea6edb245457712cec720305c4576e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e21d771b9c76056d20db310ce8655539045b3af5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e21d771b9c76056d20db310ce8655539045b3af5", "html_url": "https://github.com/rust-lang/rust/commit/e21d771b9c76056d20db310ce8655539045b3af5"}, {"sha": "138121a5ba82fb01b396f09a0925930a195ce87a", "url": "https://api.github.com/repos/rust-lang/rust/commits/138121a5ba82fb01b396f09a0925930a195ce87a", "html_url": "https://github.com/rust-lang/rust/commit/138121a5ba82fb01b396f09a0925930a195ce87a"}], "stats": {"total": 5018, "additions": 2743, "deletions": 2275}, "files": [{"sha": "97a64feca1b7b84101854163ca7b2a0996c3953f", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -1259,7 +1259,7 @@ dependencies = [\n name = \"error_index_generator\"\n version = \"0.0.0\"\n dependencies = [\n- \"rustdoc\",\n+ \"mdbook\",\n ]\n \n [[package]]"}, {"sha": "1ebe5bac203de79afc27868b9ae9a01fe211006d", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -1173,13 +1173,6 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n             // only the linker flavor is known; use the default linker for the selected flavor\n             (None, Some(flavor)) => Some((\n                 PathBuf::from(match flavor {\n-                    LinkerFlavor::Em => {\n-                        if cfg!(windows) {\n-                            \"emcc.bat\"\n-                        } else {\n-                            \"emcc\"\n-                        }\n-                    }\n                     LinkerFlavor::Gcc => {\n                         if cfg!(any(target_os = \"solaris\", target_os = \"illumos\")) {\n                             // On historical Solaris systems, \"cc\" may have\n@@ -1194,11 +1187,17 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                         }\n                     }\n                     LinkerFlavor::Ld => \"ld\",\n-                    LinkerFlavor::Msvc => \"link.exe\",\n                     LinkerFlavor::Lld(_) => \"lld\",\n-                    LinkerFlavor::PtxLinker => \"rust-ptx-linker\",\n-                    LinkerFlavor::BpfLinker => \"bpf-linker\",\n-                    LinkerFlavor::L4Bender => \"l4-bender\",\n+                    LinkerFlavor::Msvc => \"link.exe\",\n+                    LinkerFlavor::EmCc => {\n+                        if cfg!(windows) {\n+                            \"emcc.bat\"\n+                        } else {\n+                            \"emcc\"\n+                        }\n+                    }\n+                    LinkerFlavor::Bpf => \"bpf-linker\",\n+                    LinkerFlavor::Ptx => \"rust-ptx-linker\",\n                 }),\n                 flavor,\n             )),\n@@ -1208,7 +1207,7 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                 });\n \n                 let flavor = if stem == \"emcc\" {\n-                    LinkerFlavor::Em\n+                    LinkerFlavor::EmCc\n                 } else if stem == \"gcc\"\n                     || stem.ends_with(\"-gcc\")\n                     || stem == \"clang\"\n@@ -1236,7 +1235,8 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n \n     // linker and linker flavor specified via command line have precedence over what the target\n     // specification specifies\n-    if let Some(ret) = infer_from(sess, sess.opts.cg.linker.clone(), sess.opts.cg.linker_flavor) {\n+    let linker_flavor = sess.opts.cg.linker_flavor.map(LinkerFlavor::from_cli);\n+    if let Some(ret) = infer_from(sess, sess.opts.cg.linker.clone(), linker_flavor) {\n         return ret;\n     }\n \n@@ -2113,11 +2113,11 @@ fn add_order_independent_options(\n         });\n     }\n \n-    if flavor == LinkerFlavor::PtxLinker {\n+    if flavor == LinkerFlavor::Ptx {\n         // Provide the linker with fallback to internal `target-cpu`.\n         cmd.arg(\"--fallback-arch\");\n         cmd.arg(&codegen_results.crate_info.target_cpu);\n-    } else if flavor == LinkerFlavor::BpfLinker {\n+    } else if flavor == LinkerFlavor::Bpf {\n         cmd.arg(\"--cpu\");\n         cmd.arg(&codegen_results.crate_info.target_cpu);\n         cmd.arg(\"--cpu-features\");"}, {"sha": "8c6f526b054bc5ec213eddf5fac9d8505029d9d5", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -126,29 +126,26 @@ pub fn get_linker<'a>(\n     // to the linker args construction.\n     assert!(cmd.get_args().is_empty() || sess.target.vendor == \"uwp\");\n     match flavor {\n-        LinkerFlavor::Lld(LldFlavor::Link) | LinkerFlavor::Msvc => {\n-            Box::new(MsvcLinker { cmd, sess }) as Box<dyn Linker>\n-        }\n-        LinkerFlavor::Em => Box::new(EmLinker { cmd, sess }) as Box<dyn Linker>,\n         LinkerFlavor::Gcc => {\n             Box::new(GccLinker { cmd, sess, target_cpu, hinted_static: false, is_ld: false })\n                 as Box<dyn Linker>\n         }\n-\n+        LinkerFlavor::Ld if sess.target.os == \"l4re\" => {\n+            Box::new(L4Bender::new(cmd, sess)) as Box<dyn Linker>\n+        }\n         LinkerFlavor::Lld(LldFlavor::Ld)\n         | LinkerFlavor::Lld(LldFlavor::Ld64)\n         | LinkerFlavor::Ld => {\n             Box::new(GccLinker { cmd, sess, target_cpu, hinted_static: false, is_ld: true })\n                 as Box<dyn Linker>\n         }\n-\n+        LinkerFlavor::Lld(LldFlavor::Link) | LinkerFlavor::Msvc => {\n+            Box::new(MsvcLinker { cmd, sess }) as Box<dyn Linker>\n+        }\n         LinkerFlavor::Lld(LldFlavor::Wasm) => Box::new(WasmLd::new(cmd, sess)) as Box<dyn Linker>,\n-\n-        LinkerFlavor::PtxLinker => Box::new(PtxLinker { cmd, sess }) as Box<dyn Linker>,\n-\n-        LinkerFlavor::BpfLinker => Box::new(BpfLinker { cmd, sess }) as Box<dyn Linker>,\n-\n-        LinkerFlavor::L4Bender => Box::new(L4Bender::new(cmd, sess)) as Box<dyn Linker>,\n+        LinkerFlavor::EmCc => Box::new(EmLinker { cmd, sess }) as Box<dyn Linker>,\n+        LinkerFlavor::Bpf => Box::new(BpfLinker { cmd, sess }) as Box<dyn Linker>,\n+        LinkerFlavor::Ptx => Box::new(PtxLinker { cmd, sess }) as Box<dyn Linker>,\n     }\n }\n "}, {"sha": "da987152ff66030dcdbba447d15dce67950c45b9", "filename": "compiler/rustc_error_messages/locales/en-US/privacy.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -11,6 +11,8 @@ privacy_in_public_interface = {$vis_descr} {$kind} `{$descr}` in public interfac\n     .label = can't leak {$vis_descr} {$kind}\n     .visibility_label = `{$descr}` declared as {$vis_descr}\n \n+privacy_report_access_level = {$descr}\n+\n privacy_from_private_dep_in_public_interface =\n     {$kind} `{$descr}` from private dependency '{$krate}' in public interface\n "}, {"sha": "0c88379d498994845bee2bc7e019617e471a096b", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -758,6 +758,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Internal attributes, Testing:\n     // ==========================================================================\n \n+    rustc_attr!(TEST, rustc_access_level, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_outlives, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_capture_analysis, Normal, template!(Word), WarnFollowing),\n     rustc_attr!(TEST, rustc_insignificant_dtor, Normal, template!(Word), WarnFollowing),"}, {"sha": "5df5ab3ddc032eb19ec354e3f1bcb012b8b32345", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -21,10 +21,8 @@ use rustc_session::{build_session, getopts, DiagnosticOutput, Session};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n use rustc_span::SourceFileHashAlgorithm;\n-use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy};\n-use rustc_target::spec::{\n-    RelocModel, RelroLevel, SanitizerSet, SplitDebuginfo, StackProtector, TlsModel,\n-};\n+use rustc_target::spec::{CodeModel, LinkerFlavorCli, MergeFunctions, PanicStrategy, RelocModel};\n+use rustc_target::spec::{RelroLevel, SanitizerSet, SplitDebuginfo, StackProtector, TlsModel};\n \n use std::collections::{BTreeMap, BTreeSet};\n use std::iter::FromIterator;\n@@ -552,7 +550,7 @@ fn test_codegen_options_tracking_hash() {\n     untracked!(link_args, vec![String::from(\"abc\"), String::from(\"def\")]);\n     untracked!(link_self_contained, Some(true));\n     untracked!(linker, Some(PathBuf::from(\"linker\")));\n-    untracked!(linker_flavor, Some(LinkerFlavor::Gcc));\n+    untracked!(linker_flavor, Some(LinkerFlavorCli::Gcc));\n     untracked!(no_stack_check, true);\n     untracked!(remark, Passes::Some(vec![String::from(\"pass1\"), String::from(\"pass2\")]));\n     untracked!(rpath, true);"}, {"sha": "7e885e6c51aad42261b5da1eeb11ee618712875c", "filename": "compiler/rustc_lint/src/let_underscore.rs", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -0,0 +1,175 @@\n+use crate::{LateContext, LateLintPass, LintContext};\n+use rustc_errors::{Applicability, LintDiagnosticBuilder, MultiSpan};\n+use rustc_hir as hir;\n+use rustc_middle::ty;\n+use rustc_span::Symbol;\n+\n+declare_lint! {\n+    /// The `let_underscore_drop` lint checks for statements which don't bind\n+    /// an expression which has a non-trivial Drop implementation to anything,\n+    /// causing the expression to be dropped immediately instead of at end of\n+    /// scope.\n+    ///\n+    /// ### Example\n+    /// ```\n+    /// struct SomeStruct;\n+    /// impl Drop for SomeStruct {\n+    ///     fn drop(&mut self) {\n+    ///         println!(\"Dropping SomeStruct\");\n+    ///     }\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///    #[warn(let_underscore_drop)]\n+    ///     // SomeStuct is dropped immediately instead of at end of scope,\n+    ///     // so \"Dropping SomeStruct\" is printed before \"end of main\".\n+    ///     // The order of prints would be reversed if SomeStruct was bound to\n+    ///     // a name (such as \"_foo\").\n+    ///     let _ = SomeStruct;\n+    ///     println!(\"end of main\");\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Statements which assign an expression to an underscore causes the\n+    /// expression to immediately drop instead of extending the expression's\n+    /// lifetime to the end of the scope. This is usually unintended,\n+    /// especially for types like `MutexGuard`, which are typically used to\n+    /// lock a mutex for the duration of an entire scope.\n+    ///\n+    /// If you want to extend the expression's lifetime to the end of the scope,\n+    /// assign an underscore-prefixed name (such as `_foo`) to the expression.\n+    /// If you do actually want to drop the expression immediately, then\n+    /// calling `std::mem::drop` on the expression is clearer and helps convey\n+    /// intent.\n+    pub LET_UNDERSCORE_DROP,\n+    Allow,\n+    \"non-binding let on a type that implements `Drop`\"\n+}\n+\n+declare_lint! {\n+    /// The `let_underscore_lock` lint checks for statements which don't bind\n+    /// a mutex to anything, causing the lock to be released immediately instead\n+    /// of at end of scope, which is typically incorrect.\n+    ///\n+    /// ### Example\n+    /// ```compile_fail\n+    /// use std::sync::{Arc, Mutex};\n+    /// use std::thread;\n+    /// let data = Arc::new(Mutex::new(0));\n+    ///\n+    /// thread::spawn(move || {\n+    ///     // The lock is immediately released instead of at the end of the\n+    ///     // scope, which is probably not intended.\n+    ///     let _ = data.lock().unwrap();\n+    ///     println!(\"doing some work\");\n+    ///     let mut lock = data.lock().unwrap();\n+    ///     *lock += 1;\n+    /// });\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Statements which assign an expression to an underscore causes the\n+    /// expression to immediately drop instead of extending the expression's\n+    /// lifetime to the end of the scope. This is usually unintended,\n+    /// especially for types like `MutexGuard`, which are typically used to\n+    /// lock a mutex for the duration of an entire scope.\n+    ///\n+    /// If you want to extend the expression's lifetime to the end of the scope,\n+    /// assign an underscore-prefixed name (such as `_foo`) to the expression.\n+    /// If you do actually want to drop the expression immediately, then\n+    /// calling `std::mem::drop` on the expression is clearer and helps convey\n+    /// intent.\n+    pub LET_UNDERSCORE_LOCK,\n+    Deny,\n+    \"non-binding let on a synchronization lock\"\n+}\n+\n+declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_DROP, LET_UNDERSCORE_LOCK]);\n+\n+const SYNC_GUARD_SYMBOLS: [Symbol; 3] = [\n+    rustc_span::sym::MutexGuard,\n+    rustc_span::sym::RwLockReadGuard,\n+    rustc_span::sym::RwLockWriteGuard,\n+];\n+\n+impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n+    fn check_local(&mut self, cx: &LateContext<'_>, local: &hir::Local<'_>) {\n+        if !matches!(local.pat.kind, hir::PatKind::Wild) {\n+            return;\n+        }\n+        if let Some(init) = local.init {\n+            let init_ty = cx.typeck_results().expr_ty(init);\n+            // If the type has a trivial Drop implementation, then it doesn't\n+            // matter that we drop the value immediately.\n+            if !init_ty.needs_drop(cx.tcx, cx.param_env) {\n+                return;\n+            }\n+            let is_sync_lock = match init_ty.kind() {\n+                ty::Adt(adt, _) => SYNC_GUARD_SYMBOLS\n+                    .iter()\n+                    .any(|guard_symbol| cx.tcx.is_diagnostic_item(*guard_symbol, adt.did())),\n+                _ => false,\n+            };\n+\n+            if is_sync_lock {\n+                let mut span = MultiSpan::from_spans(vec![local.pat.span, init.span]);\n+                span.push_span_label(\n+                    local.pat.span,\n+                    \"this lock is not assigned to a binding and is immediately dropped\".to_string(),\n+                );\n+                span.push_span_label(\n+                    init.span,\n+                    \"this binding will immediately drop the value assigned to it\".to_string(),\n+                );\n+                cx.struct_span_lint(LET_UNDERSCORE_LOCK, span, |lint| {\n+                    build_and_emit_lint(\n+                        lint,\n+                        local,\n+                        init.span,\n+                        \"non-binding let on a synchronization lock\",\n+                    )\n+                })\n+            } else {\n+                cx.struct_span_lint(LET_UNDERSCORE_DROP, local.span, |lint| {\n+                    build_and_emit_lint(\n+                        lint,\n+                        local,\n+                        init.span,\n+                        \"non-binding let on a type that implements `Drop`\",\n+                    );\n+                })\n+            }\n+        }\n+    }\n+}\n+\n+fn build_and_emit_lint(\n+    lint: LintDiagnosticBuilder<'_, ()>,\n+    local: &hir::Local<'_>,\n+    init_span: rustc_span::Span,\n+    msg: &str,\n+) {\n+    lint.build(msg)\n+        .span_suggestion_verbose(\n+            local.pat.span,\n+            \"consider binding to an unused variable to avoid immediately dropping the value\",\n+            \"_unused\",\n+            Applicability::MachineApplicable,\n+        )\n+        .multipart_suggestion(\n+            \"consider immediately dropping the value\",\n+            vec![\n+                (local.span.until(init_span), \"drop(\".to_string()),\n+                (init_span.shrink_to_hi(), \")\".to_string()),\n+            ],\n+            Applicability::MachineApplicable,\n+        )\n+        .emit();\n+}"}, {"sha": "8cbfc82c0f0b6eb8a018c41509e97c4b4597595a", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -55,6 +55,7 @@ mod expect;\n pub mod hidden_unicode_codepoints;\n mod internal;\n mod late;\n+mod let_underscore;\n mod levels;\n mod methods;\n mod non_ascii_idents;\n@@ -86,6 +87,7 @@ use builtin::*;\n use enum_intrinsics_non_enums::EnumIntrinsicsNonEnums;\n use hidden_unicode_codepoints::*;\n use internal::*;\n+use let_underscore::*;\n use methods::*;\n use non_ascii_idents::*;\n use non_fmt_panic::NonPanicFmt;\n@@ -189,6 +191,7 @@ macro_rules! late_lint_mod_passes {\n                 VariantSizeDifferences: VariantSizeDifferences,\n                 BoxPointers: BoxPointers,\n                 PathStatements: PathStatements,\n+                LetUnderscore: LetUnderscore,\n                 // Depends on referenced function signatures in expressions\n                 UnusedResults: UnusedResults,\n                 NonUpperCaseGlobals: NonUpperCaseGlobals,\n@@ -315,6 +318,8 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n         REDUNDANT_SEMICOLONS\n     );\n \n+    add_lint_group!(\"let_underscore\", LET_UNDERSCORE_DROP, LET_UNDERSCORE_LOCK);\n+\n     add_lint_group!(\n         \"rust_2018_idioms\",\n         BARE_TRAIT_OBJECTS,"}, {"sha": "dce5d3cfb84ff05b87aeceb2f47148e9bb55eed1", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 478, "deletions": 258, "changes": 736, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -12,7 +12,7 @@ use quote::{format_ident, quote};\n use std::collections::HashMap;\n use std::fmt;\n use std::str::FromStr;\n-use syn::{spanned::Spanned, Meta, MetaList, MetaNameValue, NestedMeta, Path};\n+use syn::{spanned::Spanned, Attribute, Meta, MetaList, MetaNameValue, NestedMeta, Path};\n use synstructure::{BindingInfo, Structure, VariantInfo};\n \n /// Which kind of suggestion is being created?\n@@ -28,8 +28,41 @@ enum SubdiagnosticSuggestionKind {\n     Verbose,\n }\n \n+impl FromStr for SubdiagnosticSuggestionKind {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"\" => Ok(SubdiagnosticSuggestionKind::Normal),\n+            \"_short\" => Ok(SubdiagnosticSuggestionKind::Short),\n+            \"_hidden\" => Ok(SubdiagnosticSuggestionKind::Hidden),\n+            \"_verbose\" => Ok(SubdiagnosticSuggestionKind::Verbose),\n+            _ => Err(()),\n+        }\n+    }\n+}\n+\n+impl SubdiagnosticSuggestionKind {\n+    pub fn to_suggestion_style(&self) -> TokenStream {\n+        match self {\n+            SubdiagnosticSuggestionKind::Normal => {\n+                quote! { rustc_errors::SuggestionStyle::ShowCode }\n+            }\n+            SubdiagnosticSuggestionKind::Short => {\n+                quote! { rustc_errors::SuggestionStyle::HideCodeInline }\n+            }\n+            SubdiagnosticSuggestionKind::Hidden => {\n+                quote! { rustc_errors::SuggestionStyle::HideCodeAlways }\n+            }\n+            SubdiagnosticSuggestionKind::Verbose => {\n+                quote! { rustc_errors::SuggestionStyle::ShowAlways }\n+            }\n+        }\n+    }\n+}\n+\n /// Which kind of subdiagnostic is being created from a variant?\n-#[derive(Clone, Copy)]\n+#[derive(Clone)]\n enum SubdiagnosticKind {\n     /// `#[label(...)]`\n     Label,\n@@ -40,31 +73,9 @@ enum SubdiagnosticKind {\n     /// `#[warning(...)]`\n     Warn,\n     /// `#[suggestion{,_short,_hidden,_verbose}]`\n-    Suggestion(SubdiagnosticSuggestionKind),\n-}\n-\n-impl FromStr for SubdiagnosticKind {\n-    type Err = ();\n-\n-    fn from_str(s: &str) -> Result<Self, Self::Err> {\n-        match s {\n-            \"label\" => Ok(SubdiagnosticKind::Label),\n-            \"note\" => Ok(SubdiagnosticKind::Note),\n-            \"help\" => Ok(SubdiagnosticKind::Help),\n-            \"warning\" => Ok(SubdiagnosticKind::Warn),\n-            \"suggestion\" => Ok(SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Normal)),\n-            \"suggestion_short\" => {\n-                Ok(SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Short))\n-            }\n-            \"suggestion_hidden\" => {\n-                Ok(SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Hidden))\n-            }\n-            \"suggestion_verbose\" => {\n-                Ok(SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Verbose))\n-            }\n-            _ => Err(()),\n-        }\n-    }\n+    Suggestion { suggestion_kind: SubdiagnosticSuggestionKind, code: TokenStream },\n+    /// `#[multipart_suggestion{,_short,_hidden,_verbose}]`\n+    MultipartSuggestion { suggestion_kind: SubdiagnosticSuggestionKind },\n }\n \n impl quote::IdentFragment for SubdiagnosticKind {\n@@ -74,17 +85,9 @@ impl quote::IdentFragment for SubdiagnosticKind {\n             SubdiagnosticKind::Note => write!(f, \"note\"),\n             SubdiagnosticKind::Help => write!(f, \"help\"),\n             SubdiagnosticKind::Warn => write!(f, \"warn\"),\n-            SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Normal) => {\n-                write!(f, \"suggestion\")\n-            }\n-            SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Short) => {\n-                write!(f, \"suggestion_short\")\n-            }\n-            SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Hidden) => {\n-                write!(f, \"suggestion_hidden\")\n-            }\n-            SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Verbose) => {\n-                write!(f, \"suggestion_verbose\")\n+            SubdiagnosticKind::Suggestion { .. } => write!(f, \"suggestion_with_style\"),\n+            SubdiagnosticKind::MultipartSuggestion { .. } => {\n+                write!(f, \"multipart_suggestion_with_style\")\n             }\n         }\n     }\n@@ -148,11 +151,9 @@ impl<'a> SessionSubdiagnosticDerive<'a> {\n                     variant,\n                     span,\n                     fields: fields_map,\n-                    kinds: Vec::new(),\n-                    slugs: Vec::new(),\n-                    code: None,\n                     span_field: None,\n                     applicability: None,\n+                    has_suggestion_parts: false,\n                 };\n                 builder.into_tokens().unwrap_or_else(|v| v.to_compile_error())\n             });\n@@ -193,21 +194,15 @@ struct SessionSubdiagnosticDeriveBuilder<'a> {\n     /// derive builder.\n     fields: HashMap<String, TokenStream>,\n \n-    /// Subdiagnostic kind of the type/variant.\n-    kinds: Vec<(SubdiagnosticKind, proc_macro::Span)>,\n-\n-    /// Slugs of the subdiagnostic - corresponds to the Fluent identifier for the message - from the\n-    /// `#[kind(slug)]` attribute on the type or variant.\n-    slugs: Vec<(Path, proc_macro::Span)>,\n-    /// If a suggestion, the code to suggest as a replacement - from the `#[kind(code = \"...\")]`\n-    /// attribute on the type or variant.\n-    code: Option<(TokenStream, proc_macro::Span)>,\n-\n     /// Identifier for the binding to the `#[primary_span]` field.\n     span_field: Option<(proc_macro2::Ident, proc_macro::Span)>,\n     /// If a suggestion, the identifier for the binding to the `#[applicability]` field or a\n     /// `rustc_errors::Applicability::*` variant directly.\n     applicability: Option<(TokenStream, proc_macro::Span)>,\n+\n+    /// Set to true when a `#[suggestion_part]` field is encountered, used to generate an error\n+    /// during finalization if still `false`.\n+    has_suggestion_parts: bool,\n }\n \n impl<'a> HasFieldMap for SessionSubdiagnosticDeriveBuilder<'a> {\n@@ -216,272 +211,497 @@ impl<'a> HasFieldMap for SessionSubdiagnosticDeriveBuilder<'a> {\n     }\n }\n \n+/// Provides frequently-needed information about the diagnostic kinds being derived for this type.\n+#[derive(Clone, Copy, Debug)]\n+struct KindsStatistics {\n+    has_multipart_suggestion: bool,\n+    all_multipart_suggestions: bool,\n+    has_normal_suggestion: bool,\n+}\n+\n+impl<'a> FromIterator<&'a SubdiagnosticKind> for KindsStatistics {\n+    fn from_iter<T: IntoIterator<Item = &'a SubdiagnosticKind>>(kinds: T) -> Self {\n+        let mut ret = Self {\n+            has_multipart_suggestion: false,\n+            all_multipart_suggestions: true,\n+            has_normal_suggestion: false,\n+        };\n+        for kind in kinds {\n+            if let SubdiagnosticKind::MultipartSuggestion { .. } = kind {\n+                ret.has_multipart_suggestion = true;\n+            } else {\n+                ret.all_multipart_suggestions = false;\n+            }\n+\n+            if let SubdiagnosticKind::Suggestion { .. } = kind {\n+                ret.has_normal_suggestion = true;\n+            }\n+        }\n+        ret\n+    }\n+}\n+\n impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n-    fn identify_kind(&mut self) -> Result<(), DiagnosticDeriveError> {\n-        for (i, attr) in self.variant.ast().attrs.iter().enumerate() {\n+    fn identify_kind(&mut self) -> Result<Vec<(SubdiagnosticKind, Path)>, DiagnosticDeriveError> {\n+        let mut kind_slugs = vec![];\n+\n+        for attr in self.variant.ast().attrs {\n             let span = attr.span().unwrap();\n \n             let name = attr.path.segments.last().unwrap().ident.to_string();\n             let name = name.as_str();\n \n             let meta = attr.parse_meta()?;\n-            let kind = match meta {\n-                Meta::List(MetaList { ref nested, .. }) => {\n-                    let mut nested_iter = nested.into_iter();\n-                    if let Some(nested_attr) = nested_iter.next() {\n-                        match nested_attr {\n-                            NestedMeta::Meta(Meta::Path(path)) => {\n-                                self.slugs.push((path.clone(), span));\n-                            }\n-                            NestedMeta::Meta(meta @ Meta::NameValue(_))\n-                                if matches!(\n-                                    meta.path().segments.last().unwrap().ident.to_string().as_str(),\n-                                    \"code\" | \"applicability\"\n-                                ) =>\n-                            {\n-                                // don't error for valid follow-up attributes\n-                            }\n-                            nested_attr => {\n-                                throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n-                                    diag.help(\n-                                        \"first argument of the attribute should be the diagnostic \\\n-                                         slug\",\n-                                    )\n-                                })\n-                            }\n-                        };\n-                    }\n+            let Meta::List(MetaList { ref nested, .. }) = meta else {\n+                throw_invalid_attr!(attr, &meta);\n+            };\n \n-                    for nested_attr in nested_iter {\n-                        let meta = match nested_attr {\n-                            NestedMeta::Meta(ref meta) => meta,\n-                            _ => throw_invalid_nested_attr!(attr, &nested_attr),\n-                        };\n-\n-                        let span = meta.span().unwrap();\n-                        let nested_name = meta.path().segments.last().unwrap().ident.to_string();\n-                        let nested_name = nested_name.as_str();\n-\n-                        match meta {\n-                            Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(s), .. }) => {\n-                                match nested_name {\n-                                    \"code\" => {\n-                                        let formatted_str = self.build_format(&s.value(), s.span());\n-                                        self.code.set_once((formatted_str, span));\n-                                    }\n-                                    \"applicability\" => {\n-                                        let value = match Applicability::from_str(&s.value()) {\n-                                            Ok(v) => v,\n-                                            Err(()) => {\n-                                                span_err(span, \"invalid applicability\").emit();\n-                                                Applicability::Unspecified\n-                                            }\n-                                        };\n-                                        self.applicability.set_once((quote! { #value }, span));\n-                                    }\n-                                    _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n-                                        diag.help(\n-                                            \"only `code` and `applicability` are valid nested \\\n-                                             attributes\",\n-                                        )\n-                                    }),\n-                                }\n-                            }\n-                            _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n-                                if matches!(meta, Meta::Path(_)) {\n-                                    diag.help(\n-                                        \"a diagnostic slug must be the first argument to the \\\n-                                         attribute\",\n-                                    )\n-                                } else {\n-                                    diag\n-                                }\n-                            }),\n-                        }\n+            let mut kind = match name {\n+                \"label\" => SubdiagnosticKind::Label,\n+                \"note\" => SubdiagnosticKind::Note,\n+                \"help\" => SubdiagnosticKind::Help,\n+                \"warning\" => SubdiagnosticKind::Warn,\n+                _ => {\n+                    if let Some(suggestion_kind) =\n+                        name.strip_prefix(\"suggestion\").and_then(|s| s.parse().ok())\n+                    {\n+                        SubdiagnosticKind::Suggestion { suggestion_kind, code: TokenStream::new() }\n+                    } else if let Some(suggestion_kind) =\n+                        name.strip_prefix(\"multipart_suggestion\").and_then(|s| s.parse().ok())\n+                    {\n+                        SubdiagnosticKind::MultipartSuggestion { suggestion_kind }\n+                    } else {\n+                        throw_invalid_attr!(attr, &meta);\n                     }\n-\n-                    let Ok(kind) = SubdiagnosticKind::from_str(name) else {\n-                        throw_invalid_attr!(attr, &meta)\n-                    };\n-\n-                    kind\n                 }\n-                _ => throw_invalid_attr!(attr, &meta),\n             };\n \n-            if matches!(\n-                kind,\n-                SubdiagnosticKind::Label | SubdiagnosticKind::Help | SubdiagnosticKind::Note\n-            ) && self.code.is_some()\n-            {\n-                throw_span_err!(\n-                    span,\n-                    &format!(\"`code` is not a valid nested attribute of a `{}` attribute\", name)\n-                );\n+            let mut slug = None;\n+            let mut code = None;\n+\n+            let mut nested_iter = nested.into_iter();\n+            if let Some(nested_attr) = nested_iter.next() {\n+                match nested_attr {\n+                    NestedMeta::Meta(Meta::Path(path)) => {\n+                        slug.set_once((path.clone(), span));\n+                    }\n+                    NestedMeta::Meta(meta @ Meta::NameValue(_))\n+                        if matches!(\n+                            meta.path().segments.last().unwrap().ident.to_string().as_str(),\n+                            \"code\" | \"applicability\"\n+                        ) =>\n+                    {\n+                        // Don't error for valid follow-up attributes.\n+                    }\n+                    nested_attr => {\n+                        throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                            diag.help(\n+                                \"first argument of the attribute should be the diagnostic \\\n+                                 slug\",\n+                            )\n+                        })\n+                    }\n+                };\n             }\n \n-            if matches!(\n-                kind,\n-                SubdiagnosticKind::Label | SubdiagnosticKind::Help | SubdiagnosticKind::Note\n-            ) && self.applicability.is_some()\n-            {\n-                throw_span_err!(\n-                    span,\n-                    &format!(\n-                        \"`applicability` is not a valid nested attribute of a `{}` attribute\",\n-                        name\n-                    )\n-                );\n+            for nested_attr in nested_iter {\n+                let meta = match nested_attr {\n+                    NestedMeta::Meta(ref meta) => meta,\n+                    _ => throw_invalid_nested_attr!(attr, &nested_attr),\n+                };\n+\n+                let span = meta.span().unwrap();\n+                let nested_name = meta.path().segments.last().unwrap().ident.to_string();\n+                let nested_name = nested_name.as_str();\n+\n+                let value = match meta {\n+                    Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(value), .. }) => value,\n+                    Meta::Path(_) => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                        diag.help(\"a diagnostic slug must be the first argument to the attribute\")\n+                    }),\n+                    _ => throw_invalid_nested_attr!(attr, &nested_attr),\n+                };\n+\n+                match nested_name {\n+                    \"code\" => {\n+                        if matches!(kind, SubdiagnosticKind::Suggestion { .. }) {\n+                            let formatted_str = self.build_format(&value.value(), value.span());\n+                            code.set_once((formatted_str, span));\n+                        } else {\n+                            span_err(\n+                                span,\n+                                &format!(\n+                                    \"`code` is not a valid nested attribute of a `{}` attribute\",\n+                                    name\n+                                ),\n+                            )\n+                            .emit();\n+                        }\n+                    }\n+                    \"applicability\" => {\n+                        if matches!(\n+                            kind,\n+                            SubdiagnosticKind::Suggestion { .. }\n+                                | SubdiagnosticKind::MultipartSuggestion { .. }\n+                        ) {\n+                            let value =\n+                                Applicability::from_str(&value.value()).unwrap_or_else(|()| {\n+                                    span_err(span, \"invalid applicability\").emit();\n+                                    Applicability::Unspecified\n+                                });\n+                            self.applicability.set_once((quote! { #value }, span));\n+                        } else {\n+                            span_err(\n+                                span,\n+                                &format!(\n+                                    \"`applicability` is not a valid nested attribute of a `{}` attribute\",\n+                                    name\n+                                )\n+                            ).emit();\n+                        }\n+                    }\n+                    _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                        diag.help(\"only `code` and `applicability` are valid nested attributes\")\n+                    }),\n+                }\n             }\n \n-            if self.slugs.len() != i + 1 {\n+            let Some((slug, _)) = slug else {\n                 throw_span_err!(\n                     span,\n                     &format!(\n                         \"diagnostic slug must be first argument of a `#[{}(...)]` attribute\",\n                         name\n                     )\n                 );\n+            };\n+\n+            match kind {\n+                SubdiagnosticKind::Suggestion { code: ref mut code_field, .. } => {\n+                    let Some((code, _)) = code else {\n+                        throw_span_err!(span, \"suggestion without `code = \\\"...\\\"`\");\n+                    };\n+                    *code_field = code;\n+                }\n+                SubdiagnosticKind::Label\n+                | SubdiagnosticKind::Note\n+                | SubdiagnosticKind::Help\n+                | SubdiagnosticKind::Warn\n+                | SubdiagnosticKind::MultipartSuggestion { .. } => {}\n             }\n \n-            self.kinds.push((kind, span));\n+            kind_slugs.push((kind, slug))\n         }\n \n-        Ok(())\n+        Ok(kind_slugs)\n     }\n \n-    fn generate_field_code(\n+    /// Generates the code for a field with no attributes.\n+    fn generate_field_set_arg(&mut self, binding: &BindingInfo<'_>) -> TokenStream {\n+        let ast = binding.ast();\n+        assert_eq!(ast.attrs.len(), 0, \"field with attribute used as diagnostic arg\");\n+\n+        let diag = &self.diag;\n+        let ident = ast.ident.as_ref().unwrap();\n+        quote! {\n+            #diag.set_arg(\n+                stringify!(#ident),\n+                #binding\n+            );\n+        }\n+    }\n+\n+    /// Generates the necessary code for all attributes on a field.\n+    fn generate_field_attr_code(\n         &mut self,\n         binding: &BindingInfo<'_>,\n-        have_suggestion: bool,\n-    ) -> Result<TokenStream, DiagnosticDeriveError> {\n+        kind_stats: KindsStatistics,\n+    ) -> TokenStream {\n         let ast = binding.ast();\n+        assert!(ast.attrs.len() > 0, \"field without attributes generating attr code\");\n \n+        // Abstract over `Vec<T>` and `Option<T>` fields using `FieldInnerTy`, which will\n+        // apply the generated code on each element in the `Vec` or `Option`.\n         let inner_ty = FieldInnerTy::from_type(&ast.ty);\n-        let info = FieldInfo {\n-            binding: binding,\n-            ty: inner_ty.inner_type().unwrap_or(&ast.ty),\n-            span: &ast.span(),\n-        };\n+        ast.attrs\n+            .iter()\n+            .map(|attr| {\n+                let info = FieldInfo {\n+                    binding,\n+                    ty: inner_ty.inner_type().unwrap_or(&ast.ty),\n+                    span: &ast.span(),\n+                };\n \n-        for attr in &ast.attrs {\n-            let name = attr.path.segments.last().unwrap().ident.to_string();\n-            let name = name.as_str();\n-            let span = attr.span().unwrap();\n+                let generated = self\n+                    .generate_field_code_inner(kind_stats, attr, info)\n+                    .unwrap_or_else(|v| v.to_compile_error());\n \n-            let meta = attr.parse_meta()?;\n-            match meta {\n-                Meta::Path(_) => match name {\n-                    \"primary_span\" => {\n-                        report_error_if_not_applied_to_span(attr, &info)?;\n-                        self.span_field.set_once((binding.binding.clone(), span));\n-                        return Ok(quote! {});\n-                    }\n-                    \"applicability\" if have_suggestion => {\n-                        report_error_if_not_applied_to_applicability(attr, &info)?;\n-                        let binding = binding.binding.clone();\n-                        self.applicability.set_once((quote! { #binding }, span));\n-                        return Ok(quote! {});\n-                    }\n-                    \"applicability\" => {\n-                        span_err(span, \"`#[applicability]` is only valid on suggestions\").emit();\n-                        return Ok(quote! {});\n-                    }\n-                    \"skip_arg\" => {\n-                        return Ok(quote! {});\n-                    }\n-                    _ => throw_invalid_attr!(attr, &meta, |diag| {\n+                inner_ty.with(binding, generated)\n+            })\n+            .collect()\n+    }\n+\n+    fn generate_field_code_inner(\n+        &mut self,\n+        kind_stats: KindsStatistics,\n+        attr: &Attribute,\n+        info: FieldInfo<'_>,\n+    ) -> Result<TokenStream, DiagnosticDeriveError> {\n+        let meta = attr.parse_meta()?;\n+        match meta {\n+            Meta::Path(path) => self.generate_field_code_inner_path(kind_stats, attr, info, path),\n+            Meta::List(list @ MetaList { .. }) => {\n+                self.generate_field_code_inner_list(kind_stats, attr, info, list)\n+            }\n+            _ => throw_invalid_attr!(attr, &meta),\n+        }\n+    }\n+\n+    /// Generates the code for a `[Meta::Path]`-like attribute on a field (e.g. `#[primary_span]`).\n+    fn generate_field_code_inner_path(\n+        &mut self,\n+        kind_stats: KindsStatistics,\n+        attr: &Attribute,\n+        info: FieldInfo<'_>,\n+        path: Path,\n+    ) -> Result<TokenStream, DiagnosticDeriveError> {\n+        let span = attr.span().unwrap();\n+        let ident = &path.segments.last().unwrap().ident;\n+        let name = ident.to_string();\n+        let name = name.as_str();\n+\n+        match name {\n+            \"skip_arg\" => Ok(quote! {}),\n+            \"primary_span\" => {\n+                if kind_stats.has_multipart_suggestion {\n+                    throw_invalid_attr!(attr, &Meta::Path(path), |diag| {\n                         diag.help(\n-                            \"only `primary_span`, `applicability` and `skip_arg` are valid field \\\n-                             attributes\",\n+                            \"multipart suggestions use one or more `#[suggestion_part]`s rather \\\n+                            than one `#[primary_span]`\",\n                         )\n-                    }),\n-                },\n-                _ => throw_invalid_attr!(attr, &meta),\n+                    })\n+                }\n+\n+                report_error_if_not_applied_to_span(attr, &info)?;\n+\n+                let binding = info.binding.binding.clone();\n+                self.span_field.set_once((binding, span));\n+\n+                Ok(quote! {})\n             }\n+            \"suggestion_part\" => {\n+                self.has_suggestion_parts = true;\n+\n+                if kind_stats.has_multipart_suggestion {\n+                    span_err(span, \"`#[suggestion_part(...)]` attribute without `code = \\\"...\\\"`\")\n+                        .emit();\n+                    Ok(quote! {})\n+                } else {\n+                    throw_invalid_attr!(attr, &Meta::Path(path), |diag| {\n+                        diag.help(\n+                                \"`#[suggestion_part(...)]` is only valid in multipart suggestions, use `#[primary_span]` instead\",\n+                            )\n+                    });\n+                }\n+            }\n+            \"applicability\" => {\n+                if kind_stats.has_multipart_suggestion || kind_stats.has_normal_suggestion {\n+                    report_error_if_not_applied_to_applicability(attr, &info)?;\n+\n+                    let binding = info.binding.binding.clone();\n+                    self.applicability.set_once((quote! { #binding }, span));\n+                } else {\n+                    span_err(span, \"`#[applicability]` is only valid on suggestions\").emit();\n+                }\n+\n+                Ok(quote! {})\n+            }\n+            _ => throw_invalid_attr!(attr, &Meta::Path(path), |diag| {\n+                let mut span_attrs = vec![];\n+                if kind_stats.has_multipart_suggestion {\n+                    span_attrs.push(\"suggestion_part\");\n+                }\n+                if !kind_stats.all_multipart_suggestions {\n+                    span_attrs.push(\"primary_span\")\n+                }\n+                diag.help(format!(\n+                    \"only `{}`, `applicability` and `skip_arg` are valid field attributes\",\n+                    span_attrs.join(\", \")\n+                ))\n+            }),\n         }\n+    }\n \n-        let ident = ast.ident.as_ref().unwrap();\n+    /// Generates the code for a `[Meta::List]`-like attribute on a field (e.g.\n+    /// `#[suggestion_part(code = \"...\")]`).\n+    fn generate_field_code_inner_list(\n+        &mut self,\n+        kind_stats: KindsStatistics,\n+        attr: &Attribute,\n+        info: FieldInfo<'_>,\n+        list: MetaList,\n+    ) -> Result<TokenStream, DiagnosticDeriveError> {\n+        let span = attr.span().unwrap();\n+        let ident = &list.path.segments.last().unwrap().ident;\n+        let name = ident.to_string();\n+        let name = name.as_str();\n+\n+        match name {\n+            \"suggestion_part\" => {\n+                if !kind_stats.has_multipart_suggestion {\n+                    throw_invalid_attr!(attr, &Meta::List(list), |diag| {\n+                        diag.help(\n+                            \"`#[suggestion_part(...)]` is only valid in multipart suggestions\",\n+                        )\n+                    })\n+                }\n \n-        let diag = &self.diag;\n-        let generated = quote! {\n-            #diag.set_arg(\n-                stringify!(#ident),\n-                #binding\n-            );\n-        };\n+                self.has_suggestion_parts = true;\n+\n+                report_error_if_not_applied_to_span(attr, &info)?;\n+\n+                let mut code = None;\n+                for nested_attr in list.nested.iter() {\n+                    let NestedMeta::Meta(ref meta) = nested_attr else {\n+                        throw_invalid_nested_attr!(attr, &nested_attr);\n+                    };\n+\n+                    let span = meta.span().unwrap();\n+                    let nested_name = meta.path().segments.last().unwrap().ident.to_string();\n+                    let nested_name = nested_name.as_str();\n \n-        Ok(inner_ty.with(binding, generated))\n+                    let Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(value), .. }) = meta else {\n+                        throw_invalid_nested_attr!(attr, &nested_attr);\n+                    };\n+\n+                    match nested_name {\n+                        \"code\" => {\n+                            let formatted_str = self.build_format(&value.value(), value.span());\n+                            code.set_once((formatted_str, span));\n+                        }\n+                        _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                            diag.help(\"`code` is the only valid nested attribute\")\n+                        }),\n+                    }\n+                }\n+\n+                let Some((code, _)) = code else {\n+                    span_err(span, \"`#[suggestion_part(...)]` attribute without `code = \\\"...\\\"`\")\n+                        .emit();\n+                    return Ok(quote! {});\n+                };\n+                let binding = info.binding;\n+\n+                Ok(quote! { suggestions.push((#binding, #code)); })\n+            }\n+            _ => throw_invalid_attr!(attr, &Meta::List(list), |diag| {\n+                let mut span_attrs = vec![];\n+                if kind_stats.has_multipart_suggestion {\n+                    span_attrs.push(\"suggestion_part\");\n+                }\n+                if !kind_stats.all_multipart_suggestions {\n+                    span_attrs.push(\"primary_span\")\n+                }\n+                diag.help(format!(\n+                    \"only `{}`, `applicability` and `skip_arg` are valid field attributes\",\n+                    span_attrs.join(\", \")\n+                ))\n+            }),\n+        }\n     }\n \n-    fn into_tokens(&mut self) -> Result<TokenStream, DiagnosticDeriveError> {\n-        self.identify_kind()?;\n-        if self.kinds.is_empty() {\n+    pub fn into_tokens(&mut self) -> Result<TokenStream, DiagnosticDeriveError> {\n+        let kind_slugs = self.identify_kind()?;\n+        if kind_slugs.is_empty() {\n             throw_span_err!(\n                 self.variant.ast().ident.span().unwrap(),\n                 \"subdiagnostic kind not specified\"\n             );\n         };\n-        let have_suggestion =\n-            self.kinds.iter().any(|(k, _)| matches!(k, SubdiagnosticKind::Suggestion(_)));\n-        let mut args = TokenStream::new();\n-        for binding in self.variant.bindings() {\n-            let arg = self\n-                .generate_field_code(binding, have_suggestion)\n-                .unwrap_or_else(|v| v.to_compile_error());\n-            args.extend(arg);\n-        }\n-        let mut tokens = TokenStream::new();\n-        for ((kind, _), (slug, _)) in self.kinds.iter().zip(&self.slugs) {\n-            let code = match self.code.as_ref() {\n-                Some((code, _)) => Some(quote! { #code }),\n-                None if have_suggestion => {\n-                    span_err(self.span, \"suggestion without `code = \\\"...\\\"`\").emit();\n-                    Some(quote! { /* macro error */ \"...\" })\n-                }\n-                None => None,\n-            };\n \n-            let span_field = self.span_field.as_ref().map(|(span, _)| span);\n-            let applicability = match self.applicability.clone() {\n-                Some((applicability, _)) => Some(applicability),\n-                None if have_suggestion => {\n-                    span_err(self.span, \"suggestion without `applicability`\").emit();\n-                    Some(quote! { rustc_errors::Applicability::Unspecified })\n-                }\n-                None => None,\n-            };\n+        let kind_stats: KindsStatistics = kind_slugs.iter().map(|(kind, _slug)| kind).collect();\n+\n+        let init = if kind_stats.has_multipart_suggestion {\n+            quote! { let mut suggestions = Vec::new(); }\n+        } else {\n+            quote! {}\n+        };\n+\n+        let attr_args: TokenStream = self\n+            .variant\n+            .bindings()\n+            .iter()\n+            .filter(|binding| !binding.ast().attrs.is_empty())\n+            .map(|binding| self.generate_field_attr_code(binding, kind_stats))\n+            .collect();\n+\n+        let span_field = self.span_field.as_ref().map(|(span, _)| span);\n+        let applicability = self.applicability.take().map_or_else(\n+            || quote! { rustc_errors::Applicability::Unspecified },\n+            |(applicability, _)| applicability,\n+        );\n \n-            let diag = &self.diag;\n+        let diag = &self.diag;\n+        let mut calls = TokenStream::new();\n+        for (kind, slug) in kind_slugs {\n             let name = format_ident!(\"{}{}\", if span_field.is_some() { \"span_\" } else { \"\" }, kind);\n             let message = quote! { rustc_errors::fluent::#slug };\n-            let call = if matches!(kind, SubdiagnosticKind::Suggestion(..)) {\n-                if let Some(span) = span_field {\n-                    quote! { #diag.#name(#span, #message, #code, #applicability); }\n-                } else {\n-                    span_err(self.span, \"suggestion without `#[primary_span]` field\").emit();\n-                    quote! { unreachable!(); }\n+            let call = match kind {\n+                SubdiagnosticKind::Suggestion { suggestion_kind, code } => {\n+                    if let Some(span) = span_field {\n+                        let style = suggestion_kind.to_suggestion_style();\n+\n+                        quote! { #diag.#name(#span, #message, #code, #applicability, #style); }\n+                    } else {\n+                        span_err(self.span, \"suggestion without `#[primary_span]` field\").emit();\n+                        quote! { unreachable!(); }\n+                    }\n                 }\n-            } else if matches!(kind, SubdiagnosticKind::Label) {\n-                if let Some(span) = span_field {\n-                    quote! { #diag.#name(#span, #message); }\n-                } else {\n-                    span_err(self.span, \"label without `#[primary_span]` field\").emit();\n-                    quote! { unreachable!(); }\n+                SubdiagnosticKind::MultipartSuggestion { suggestion_kind } => {\n+                    if !self.has_suggestion_parts {\n+                        span_err(\n+                            self.span,\n+                            \"multipart suggestion without any `#[suggestion_part(...)]` fields\",\n+                        )\n+                        .emit();\n+                    }\n+\n+                    let style = suggestion_kind.to_suggestion_style();\n+\n+                    quote! { #diag.#name(#message, suggestions, #applicability, #style); }\n                 }\n-            } else {\n-                if let Some(span) = span_field {\n-                    quote! { #diag.#name(#span, #message); }\n-                } else {\n-                    quote! { #diag.#name(#message); }\n+                SubdiagnosticKind::Label => {\n+                    if let Some(span) = span_field {\n+                        quote! { #diag.#name(#span, #message); }\n+                    } else {\n+                        span_err(self.span, \"label without `#[primary_span]` field\").emit();\n+                        quote! { unreachable!(); }\n+                    }\n+                }\n+                _ => {\n+                    if let Some(span) = span_field {\n+                        quote! { #diag.#name(#span, #message); }\n+                    } else {\n+                        quote! { #diag.#name(#message); }\n+                    }\n                 }\n             };\n-            tokens.extend(quote! {\n-                #call\n-                #args\n-            });\n+            calls.extend(call);\n         }\n \n-        Ok(tokens)\n+        let plain_args: TokenStream = self\n+            .variant\n+            .bindings()\n+            .iter()\n+            .filter(|binding| binding.ast().attrs.is_empty())\n+            .map(|binding| self.generate_field_set_arg(binding))\n+            .collect();\n+\n+        Ok(quote! {\n+            #init\n+            #attr_args\n+            #calls\n+            #plain_args\n+        })\n     }\n }"}, {"sha": "63f83f8965ec52c8a56e15123549eea3369dfef0", "filename": "compiler/rustc_privacy/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -75,6 +75,14 @@ pub struct InPublicInterface<'a> {\n     pub vis_span: Span,\n }\n \n+#[derive(SessionDiagnostic)]\n+#[diag(privacy::report_access_level)]\n+pub struct ReportAccessLevel {\n+    #[primary_span]\n+    pub span: Span,\n+    pub descr: String,\n+}\n+\n #[derive(LintDiagnostic)]\n #[diag(privacy::from_private_dep_in_public_interface)]\n pub struct FromPrivateDependencyInPublicInterface<'a> {"}, {"sha": "ba69bc23118b2527921188cdf8f7a595a97bef8b", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 60, "deletions": 2, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -33,7 +33,7 @@ use rustc_middle::ty::{self, Const, DefIdTree, GenericParamDefKind};\n use rustc_middle::ty::{TraitRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor};\n use rustc_session::lint;\n use rustc_span::hygiene::Transparency;\n-use rustc_span::symbol::{kw, Ident};\n+use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n \n use std::marker::PhantomData;\n@@ -42,7 +42,8 @@ use std::{cmp, fmt, mem};\n \n use errors::{\n     FieldIsPrivate, FieldIsPrivateLabel, FromPrivateDependencyInPublicInterface, InPublicInterface,\n-    InPublicInterfaceTraits, ItemIsPrivate, PrivateInPublicLint, UnnamedItemIsPrivate,\n+    InPublicInterfaceTraits, ItemIsPrivate, PrivateInPublicLint, ReportAccessLevel,\n+    UnnamedItemIsPrivate,\n };\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -907,6 +908,60 @@ impl<'tcx> DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx>\n     }\n }\n \n+////////////////////////////////////////////////////////////////////////////////\n+/// Visitor, used for AccessLevels table checking\n+////////////////////////////////////////////////////////////////////////////////\n+pub struct TestReachabilityVisitor<'tcx, 'a> {\n+    tcx: TyCtxt<'tcx>,\n+    access_levels: &'a AccessLevels,\n+}\n+\n+impl<'tcx, 'a> TestReachabilityVisitor<'tcx, 'a> {\n+    fn access_level_diagnostic(&mut self, def_id: LocalDefId) {\n+        if self.tcx.has_attr(def_id.to_def_id(), sym::rustc_access_level) {\n+            let access_level = format!(\"{:?}\", self.access_levels.map.get(&def_id));\n+            let span = self.tcx.def_span(def_id.to_def_id());\n+            self.tcx.sess.emit_err(ReportAccessLevel { span, descr: access_level });\n+        }\n+    }\n+}\n+\n+impl<'tcx, 'a> Visitor<'tcx> for TestReachabilityVisitor<'tcx, 'a> {\n+    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n+        self.access_level_diagnostic(item.def_id);\n+\n+        match item.kind {\n+            hir::ItemKind::Enum(ref def, _) => {\n+                for variant in def.variants.iter() {\n+                    let variant_id = self.tcx.hir().local_def_id(variant.id);\n+                    self.access_level_diagnostic(variant_id);\n+                    for field in variant.data.fields() {\n+                        let def_id = self.tcx.hir().local_def_id(field.hir_id);\n+                        self.access_level_diagnostic(def_id);\n+                    }\n+                }\n+            }\n+            hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {\n+                for field in def.fields() {\n+                    let def_id = self.tcx.hir().local_def_id(field.hir_id);\n+                    self.access_level_diagnostic(def_id);\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    fn visit_trait_item(&mut self, item: &'tcx hir::TraitItem<'tcx>) {\n+        self.access_level_diagnostic(item.def_id);\n+    }\n+    fn visit_impl_item(&mut self, item: &'tcx hir::ImplItem<'tcx>) {\n+        self.access_level_diagnostic(item.def_id);\n+    }\n+    fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {\n+        self.access_level_diagnostic(item.def_id);\n+    }\n+}\n+\n //////////////////////////////////////////////////////////////////////////////////////\n /// Name privacy visitor, checks privacy and reports violations.\n /// Most of name privacy checks are performed during the main resolution phase,\n@@ -2045,6 +2100,9 @@ fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {\n         }\n     }\n \n+    let mut check_visitor = TestReachabilityVisitor { tcx, access_levels: &visitor.access_levels };\n+    tcx.hir().visit_all_item_likes_in_crate(&mut check_visitor);\n+\n     tcx.arena.alloc(visitor.access_levels)\n }\n "}, {"sha": "0a3add2e0f5328a7e7ff90ff20630d12408484e1", "filename": "compiler/rustc_resolve/src/access_levels.rs", "status": "modified", "additions": 53, "deletions": 105, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -1,25 +1,21 @@\n+use crate::imports::ImportKind;\n+use crate::NameBinding;\n+use crate::NameBindingKind;\n+use crate::Resolver;\n use rustc_ast::ast;\n use rustc_ast::visit;\n use rustc_ast::visit::Visitor;\n use rustc_ast::Crate;\n use rustc_ast::EnumDef;\n-use rustc_ast::ForeignMod;\n use rustc_ast::NodeId;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::def_id::CRATE_DEF_ID;\n use rustc_middle::middle::privacy::AccessLevel;\n-use rustc_middle::ty::Visibility;\n+use rustc_middle::ty::DefIdTree;\n use rustc_span::sym;\n \n-use crate::imports::ImportKind;\n-use crate::BindingKey;\n-use crate::NameBinding;\n-use crate::NameBindingKind;\n-use crate::Resolver;\n-\n pub struct AccessLevelsVisitor<'r, 'a> {\n     r: &'r mut Resolver<'a>,\n-    prev_level: Option<AccessLevel>,\n     changed: bool,\n }\n \n@@ -28,11 +24,10 @@ impl<'r, 'a> AccessLevelsVisitor<'r, 'a> {\n     /// For now, this doesn't resolve macros (FIXME) and cannot resolve Impl, as we\n     /// need access to a TyCtxt for that.\n     pub fn compute_access_levels<'c>(r: &'r mut Resolver<'a>, krate: &'c Crate) {\n-        let mut visitor =\n-            AccessLevelsVisitor { r, changed: false, prev_level: Some(AccessLevel::Public) };\n+        let mut visitor = AccessLevelsVisitor { r, changed: false };\n \n         visitor.set_access_level_def_id(CRATE_DEF_ID, Some(AccessLevel::Public));\n-        visitor.set_exports_access_level(CRATE_DEF_ID);\n+        visitor.set_bindings_access_level(CRATE_DEF_ID);\n \n         while visitor.changed {\n             visitor.reset();\n@@ -44,15 +39,17 @@ impl<'r, 'a> AccessLevelsVisitor<'r, 'a> {\n \n     fn reset(&mut self) {\n         self.changed = false;\n-        self.prev_level = Some(AccessLevel::Public);\n     }\n \n-    /// Update the access level of the exports of the given module accordingly. The module access\n+    /// Update the access level of the bindings in the given module accordingly. The module access\n     /// level has to be Exported or Public.\n     /// This will also follow `use` chains (see PrivacyVisitor::set_import_binding_access_level).\n-    fn set_exports_access_level(&mut self, module_id: LocalDefId) {\n+    fn set_bindings_access_level(&mut self, module_id: LocalDefId) {\n         assert!(self.r.module_map.contains_key(&&module_id.to_def_id()));\n-\n+        let module_level = self.r.access_levels.map.get(&module_id).copied();\n+        if !module_level.is_some() {\n+            return;\n+        }\n         // Set the given binding access level to `AccessLevel::Public` and\n         // sets the rest of the `use` chain to `AccessLevel::Exported` until\n         // we hit the actual exported item.\n@@ -72,28 +69,20 @@ impl<'r, 'a> AccessLevelsVisitor<'r, 'a> {\n                 }\n             };\n \n-        let module_level = self.r.access_levels.map.get(&module_id).copied();\n-        assert!(module_level >= Some(AccessLevel::Exported));\n-\n-        if let Some(exports) = self.r.reexport_map.get(&module_id) {\n-            let pub_exports = exports\n-                .iter()\n-                .filter(|ex| ex.vis == Visibility::Public)\n-                .cloned()\n-                .collect::<Vec<_>>();\n-\n-            let module = self.r.get_module(module_id.to_def_id()).unwrap();\n-            for export in pub_exports.into_iter() {\n-                if let Some(export_def_id) = export.res.opt_def_id().and_then(|id| id.as_local()) {\n-                    self.set_access_level_def_id(export_def_id, Some(AccessLevel::Exported));\n-                }\n-\n-                if let Some(ns) = export.res.ns() {\n-                    let key = BindingKey { ident: export.ident, ns, disambiguator: 0 };\n-                    let name_res = self.r.resolution(module, key);\n-                    if let Some(binding) = name_res.borrow().binding() {\n-                        set_import_binding_access_level(self, binding, module_level)\n-                    }\n+        let module = self.r.get_module(module_id.to_def_id()).unwrap();\n+        let resolutions = self.r.resolutions(module);\n+\n+        for (.., name_resolution) in resolutions.borrow().iter() {\n+            if let Some(binding) = name_resolution.borrow().binding() && binding.vis.is_public() && !binding.is_ambiguity() {\n+                let access_level = match binding.is_import() {\n+                    true => {\n+                        set_import_binding_access_level(self, binding, module_level);\n+                        Some(AccessLevel::Exported)\n+                    },\n+                    false => module_level,\n+                };\n+                if let Some(def_id) = binding.res().opt_def_id().and_then(|id| id.as_local()) {\n+                    self.set_access_level_def_id(def_id, access_level);\n                 }\n             }\n         }\n@@ -127,97 +116,59 @@ impl<'r, 'a> AccessLevelsVisitor<'r, 'a> {\n \n impl<'r, 'ast> Visitor<'ast> for AccessLevelsVisitor<'ast, 'r> {\n     fn visit_item(&mut self, item: &'ast ast::Item) {\n-        let inherited_item_level = match item.kind {\n+        let def_id = self.r.local_def_id(item.id);\n+        // Set access level of nested items.\n+        // If it's a mod, also make the visitor walk all of its items\n+        match item.kind {\n             // Resolved in rustc_privacy when types are available\n             ast::ItemKind::Impl(..) => return,\n \n-            // Only exported `macro_rules!` items are public, but they always are\n-            ast::ItemKind::MacroDef(ref macro_def) if macro_def.macro_rules => {\n-                let is_macro_export =\n-                    item.attrs.iter().any(|attr| attr.has_name(sym::macro_export));\n-                if is_macro_export { Some(AccessLevel::Public) } else { None }\n-            }\n-\n-            // Foreign modules inherit level from parents.\n-            ast::ItemKind::ForeignMod(..) => self.prev_level,\n-\n-            // Other `pub` items inherit levels from parents.\n-            ast::ItemKind::ExternCrate(..)\n-            | ast::ItemKind::Use(..)\n-            | ast::ItemKind::Static(..)\n-            | ast::ItemKind::Const(..)\n-            | ast::ItemKind::Fn(..)\n-            | ast::ItemKind::Mod(..)\n-            | ast::ItemKind::GlobalAsm(..)\n-            | ast::ItemKind::TyAlias(..)\n-            | ast::ItemKind::Enum(..)\n-            | ast::ItemKind::Struct(..)\n-            | ast::ItemKind::Union(..)\n-            | ast::ItemKind::Trait(..)\n-            | ast::ItemKind::TraitAlias(..)\n-            | ast::ItemKind::MacroDef(..) => {\n-                if item.vis.kind.is_pub() {\n-                    self.prev_level\n-                } else {\n-                    None\n-                }\n-            }\n-\n             // Should be unreachable at this stage\n             ast::ItemKind::MacCall(..) => panic!(\n                 \"ast::ItemKind::MacCall encountered, this should not anymore appear at this stage\"\n             ),\n-        };\n \n-        let access_level = self.set_access_level(item.id, inherited_item_level);\n+            // Foreign modules inherit level from parents.\n+            ast::ItemKind::ForeignMod(..) => {\n+                let parent_level =\n+                    self.r.access_levels.map.get(&self.r.local_parent(def_id)).copied();\n+                self.set_access_level(item.id, parent_level);\n+            }\n \n-        // Set access level of nested items.\n-        // If it's a mod, also make the visitor walk all of its items\n-        match item.kind {\n-            ast::ItemKind::Mod(..) => {\n-                if access_level.is_some() {\n-                    self.set_exports_access_level(self.r.local_def_id(item.id));\n+            // Only exported `macro_rules!` items are public, but they always are\n+            ast::ItemKind::MacroDef(ref macro_def) if macro_def.macro_rules => {\n+                if item.attrs.iter().any(|attr| attr.has_name(sym::macro_export)) {\n+                    self.set_access_level(item.id, Some(AccessLevel::Public));\n                 }\n+            }\n \n-                let orig_level = std::mem::replace(&mut self.prev_level, access_level);\n+            ast::ItemKind::Mod(..) => {\n+                self.set_bindings_access_level(def_id);\n                 visit::walk_item(self, item);\n-                self.prev_level = orig_level;\n             }\n \n-            ast::ItemKind::ForeignMod(ForeignMod { ref items, .. }) => {\n-                for nested in items {\n-                    if nested.vis.kind.is_pub() {\n-                        self.set_access_level(nested.id, access_level);\n-                    }\n-                }\n-            }\n             ast::ItemKind::Enum(EnumDef { ref variants }, _) => {\n+                self.set_bindings_access_level(def_id);\n                 for variant in variants {\n-                    let variant_level = self.set_access_level(variant.id, access_level);\n-                    if let Some(ctor_id) = variant.data.ctor_id() {\n-                        self.set_access_level(ctor_id, access_level);\n-                    }\n-\n+                    let variant_def_id = self.r.local_def_id(variant.id);\n+                    let variant_level = self.r.access_levels.map.get(&variant_def_id).copied();\n                     for field in variant.data.fields() {\n                         self.set_access_level(field.id, variant_level);\n                     }\n                 }\n             }\n-            ast::ItemKind::Struct(ref def, _) | ast::ItemKind::Union(ref def, _) => {\n-                if let Some(ctor_id) = def.ctor_id() {\n-                    self.set_access_level(ctor_id, access_level);\n-                }\n \n+            ast::ItemKind::Struct(ref def, _) | ast::ItemKind::Union(ref def, _) => {\n+                let inherited_level = self.r.access_levels.map.get(&def_id).copied();\n                 for field in def.fields() {\n                     if field.vis.kind.is_pub() {\n-                        self.set_access_level(field.id, access_level);\n+                        self.set_access_level(field.id, inherited_level);\n                     }\n                 }\n             }\n-            ast::ItemKind::Trait(ref trait_kind) => {\n-                for nested in trait_kind.items.iter() {\n-                    self.set_access_level(nested.id, access_level);\n-                }\n+\n+            ast::ItemKind::Trait(..) => {\n+                self.set_bindings_access_level(def_id);\n             }\n \n             ast::ItemKind::ExternCrate(..)\n@@ -229,9 +180,6 @@ impl<'r, 'ast> Visitor<'ast> for AccessLevelsVisitor<'ast, 'r> {\n             | ast::ItemKind::TraitAlias(..)\n             | ast::ItemKind::MacroDef(..)\n             | ast::ItemKind::Fn(..) => return,\n-\n-            // Unreachable kinds\n-            ast::ItemKind::Impl(..) | ast::ItemKind::MacCall(..) => unreachable!(),\n         }\n     }\n }"}, {"sha": "27745cee52df7f3243630d103984205ecbb9db78", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -1133,24 +1133,15 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         if let Some(def_id) = module.opt_def_id() {\n             let mut reexports = Vec::new();\n \n-            module.for_each_child(self.r, |_, ident, _, binding| {\n-                // FIXME: Consider changing the binding inserted by `#[macro_export] macro_rules`\n-                // into the crate root to actual `NameBindingKind::Import`.\n-                if binding.is_import()\n-                    || matches!(binding.kind, NameBindingKind::Res(_, _is_macro_export @ true))\n-                {\n-                    let res = binding.res().expect_non_local();\n-                    // Ambiguous imports are treated as errors at this point and are\n-                    // not exposed to other crates (see #36837 for more details).\n-                    if res != def::Res::Err && !binding.is_ambiguity() {\n-                        reexports.push(ModChild {\n-                            ident,\n-                            res,\n-                            vis: binding.vis,\n-                            span: binding.span,\n-                            macro_rules: false,\n-                        });\n-                    }\n+            module.for_each_child(self.r, |this, ident, _, binding| {\n+                if let Some(res) = this.is_reexport(binding) {\n+                    reexports.push(ModChild {\n+                        ident,\n+                        res,\n+                        vis: binding.vis,\n+                        span: binding.span,\n+                        macro_rules: false,\n+                    });\n                 }\n             });\n "}, {"sha": "a15a0c298a9522940402fda5716bbe39fdeb0933", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -2020,6 +2020,24 @@ impl<'a> Resolver<'a> {\n         }\n         self.main_def = Some(MainDefinition { res, is_import, span });\n     }\n+\n+    // Items that go to reexport table encoded to metadata and visible through it to other crates.\n+    fn is_reexport(&self, binding: &NameBinding<'a>) -> Option<def::Res<!>> {\n+        // FIXME: Consider changing the binding inserted by `#[macro_export] macro_rules`\n+        // into the crate root to actual `NameBindingKind::Import`.\n+        if binding.is_import()\n+            || matches!(binding.kind, NameBindingKind::Res(_, _is_macro_export @ true))\n+        {\n+            let res = binding.res().expect_non_local();\n+            // Ambiguous imports are treated as errors at this point and are\n+            // not exposed to other crates (see #36837 for more details).\n+            if res != def::Res::Err && !binding.is_ambiguity() {\n+                return Some(res);\n+            }\n+        }\n+\n+        return None;\n+    }\n }\n \n fn names_to_string(names: &[Symbol]) -> String {"}, {"sha": "d4d29288f7f28147c647886c1672674adfbcd605", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -12,8 +12,8 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n use rustc_data_structures::stable_hasher::ToStableHashKey;\n use rustc_target::abi::{Align, TargetDataLayout};\n-use rustc_target::spec::{LinkerFlavor, SplitDebuginfo, Target, TargetTriple, TargetWarnings};\n-use rustc_target::spec::{PanicStrategy, SanitizerSet, TARGETS};\n+use rustc_target::spec::{PanicStrategy, SanitizerSet, SplitDebuginfo};\n+use rustc_target::spec::{Target, TargetTriple, TargetWarnings, TARGETS};\n \n use crate::parse::{CrateCheckConfig, CrateConfig};\n use rustc_feature::UnstableFeatures;\n@@ -2379,16 +2379,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         }\n     }\n \n-    if cg.linker_flavor == Some(LinkerFlavor::L4Bender)\n-        && !nightly_options::is_unstable_enabled(matches)\n-    {\n-        early_error(\n-            error_format,\n-            \"`l4-bender` linker flavor is unstable, `-Z unstable-options` \\\n-             flag must also be passed to explicitly use it\",\n-        );\n-    }\n-\n     let prints = collect_print_requests(&mut cg, &mut unstable_opts, matches, error_format);\n \n     let cg = cg;"}, {"sha": "9f07394b61ab8fc0808ee5397d4bfd7e20b5deec", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -5,7 +5,7 @@ use crate::lint;\n use crate::search_paths::SearchPath;\n use crate::utils::NativeLib;\n use rustc_errors::LanguageIdentifier;\n-use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy, SanitizerSet};\n+use rustc_target::spec::{CodeModel, LinkerFlavorCli, MergeFunctions, PanicStrategy, SanitizerSet};\n use rustc_target::spec::{\n     RelocModel, RelroLevel, SplitDebuginfo, StackProtector, TargetTriple, TlsModel,\n };\n@@ -382,7 +382,7 @@ mod desc {\n         \"either a boolean (`yes`, `no`, `on`, `off`, etc), `checks`, or `nochecks`\";\n     pub const parse_cfprotection: &str = \"`none`|`no`|`n` (default), `branch`, `return`, or `full`|`yes`|`y` (equivalent to `branch` and `return`)\";\n     pub const parse_strip: &str = \"either `none`, `debuginfo`, or `symbols`\";\n-    pub const parse_linker_flavor: &str = ::rustc_target::spec::LinkerFlavor::one_of();\n+    pub const parse_linker_flavor: &str = ::rustc_target::spec::LinkerFlavorCli::one_of();\n     pub const parse_optimization_fuel: &str = \"crate=integer\";\n     pub const parse_mir_spanview: &str = \"`statement` (default), `terminator`, or `block`\";\n     pub const parse_instrument_coverage: &str =\n@@ -763,8 +763,8 @@ mod parse {\n         true\n     }\n \n-    pub(crate) fn parse_linker_flavor(slot: &mut Option<LinkerFlavor>, v: Option<&str>) -> bool {\n-        match v.and_then(LinkerFlavor::from_str) {\n+    pub(crate) fn parse_linker_flavor(slot: &mut Option<LinkerFlavorCli>, v: Option<&str>) -> bool {\n+        match v.and_then(LinkerFlavorCli::from_str) {\n             Some(lf) => *slot = Some(lf),\n             _ => return false,\n         }\n@@ -1139,7 +1139,7 @@ options! {\n         on C toolchain installed in the system\"),\n     linker: Option<PathBuf> = (None, parse_opt_pathbuf, [UNTRACKED],\n         \"system linker to link outputs with\"),\n-    linker_flavor: Option<LinkerFlavor> = (None, parse_linker_flavor, [UNTRACKED],\n+    linker_flavor: Option<LinkerFlavorCli> = (None, parse_linker_flavor, [UNTRACKED],\n         \"linker flavor\"),\n     linker_plugin_lto: LinkerPluginLto = (LinkerPluginLto::Disabled,\n         parse_linker_plugin_lto, [TRACKED],"}, {"sha": "be954334313494da2be6a62ebc78faba2d63cec1", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -223,6 +223,7 @@ symbols! {\n         LinkedList,\n         LintPass,\n         Mutex,\n+        MutexGuard,\n         N,\n         NonZeroI128,\n         NonZeroI16,\n@@ -271,6 +272,8 @@ symbols! {\n         Rust,\n         RustcDecodable,\n         RustcEncodable,\n+        RwLockReadGuard,\n+        RwLockWriteGuard,\n         Send,\n         SeqCst,\n         SessionDiagnostic,\n@@ -1206,6 +1209,7 @@ symbols! {\n         rust_eh_unregister_frames,\n         rust_oom,\n         rustc,\n+        rustc_access_level,\n         rustc_allocator,\n         rustc_allocator_nounwind,\n         rustc_allocator_zeroed,"}, {"sha": "f492c3451a4182dcb18dbf991980f5089cd27a39", "filename": "compiler/rustc_target/src/spec/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -2,6 +2,6 @@ use super::{wasm32_unknown_emscripten, LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut target = wasm32_unknown_emscripten::target();\n-    target.add_post_link_args(LinkerFlavor::Em, &[\"-sWASM=0\", \"--memory-init-file\", \"0\"]);\n+    target.add_post_link_args(LinkerFlavor::EmCc, &[\"-sWASM=0\", \"--memory-init-file\", \"0\"]);\n     target\n }"}, {"sha": "baf36587147a690d4ecbeba0066468e4f5af6c2f", "filename": "compiler/rustc_target/src/spec/bpf_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fbpf_base.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -5,7 +5,7 @@ pub fn opts(endian: Endian) -> TargetOptions {\n     TargetOptions {\n         allow_asm: true,\n         endian,\n-        linker_flavor: LinkerFlavor::BpfLinker,\n+        linker_flavor: LinkerFlavor::Bpf,\n         atomic_cas: false,\n         dynamic_linking: true,\n         no_builtins: true,"}, {"sha": "b7bc1072bf3280c0b496ce057c09dabef754f47f", "filename": "compiler/rustc_target/src/spec/l4re_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -4,7 +4,7 @@ pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"l4re\".into(),\n         env: \"uclibc\".into(),\n-        linker_flavor: LinkerFlavor::L4Bender,\n+        linker_flavor: LinkerFlavor::Ld,\n         panic_strategy: PanicStrategy::Abort,\n         linker: Some(\"l4-bender\".into()),\n         linker_is_gnu: false,"}, {"sha": "47eb5fc6a1dcbc6d5beac04d65a6fae9d2709b49", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 158, "deletions": 78, "changes": 236, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -92,14 +92,24 @@ mod windows_uwp_msvc_base;\n \n #[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n pub enum LinkerFlavor {\n-    Em,\n     Gcc,\n-    L4Bender,\n     Ld,\n+    Lld(LldFlavor),\n     Msvc,\n+    EmCc,\n+    Bpf,\n+    Ptx,\n+}\n+\n+#[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n+pub enum LinkerFlavorCli {\n+    Gcc,\n+    Ld,\n     Lld(LldFlavor),\n-    PtxLinker,\n+    Msvc,\n+    Em,\n     BpfLinker,\n+    PtxLinker,\n }\n \n #[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n@@ -137,19 +147,40 @@ impl ToJson for LldFlavor {\n     }\n }\n \n-impl ToJson for LinkerFlavor {\n-    fn to_json(&self) -> Json {\n-        self.desc().to_json()\n+impl LinkerFlavor {\n+    pub fn from_cli(cli: LinkerFlavorCli) -> LinkerFlavor {\n+        match cli {\n+            LinkerFlavorCli::Gcc => LinkerFlavor::Gcc,\n+            LinkerFlavorCli::Ld => LinkerFlavor::Ld,\n+            LinkerFlavorCli::Lld(lld_flavor) => LinkerFlavor::Lld(lld_flavor),\n+            LinkerFlavorCli::Msvc => LinkerFlavor::Msvc,\n+            LinkerFlavorCli::Em => LinkerFlavor::EmCc,\n+            LinkerFlavorCli::BpfLinker => LinkerFlavor::Bpf,\n+            LinkerFlavorCli::PtxLinker => LinkerFlavor::Ptx,\n+        }\n+    }\n+\n+    fn to_cli(self) -> LinkerFlavorCli {\n+        match self {\n+            LinkerFlavor::Gcc => LinkerFlavorCli::Gcc,\n+            LinkerFlavor::Ld => LinkerFlavorCli::Ld,\n+            LinkerFlavor::Lld(lld_flavor) => LinkerFlavorCli::Lld(lld_flavor),\n+            LinkerFlavor::Msvc => LinkerFlavorCli::Msvc,\n+            LinkerFlavor::EmCc => LinkerFlavorCli::Em,\n+            LinkerFlavor::Bpf => LinkerFlavorCli::BpfLinker,\n+            LinkerFlavor::Ptx => LinkerFlavorCli::PtxLinker,\n+        }\n     }\n }\n-macro_rules! flavor_mappings {\n-    ($((($($flavor:tt)*), $string:expr),)*) => (\n-        impl LinkerFlavor {\n+\n+macro_rules! linker_flavor_cli_impls {\n+    ($(($($flavor:tt)*) $string:literal)*) => (\n+        impl LinkerFlavorCli {\n             pub const fn one_of() -> &'static str {\n                 concat!(\"one of: \", $($string, \" \",)*)\n             }\n \n-            pub fn from_str(s: &str) -> Option<Self> {\n+            pub fn from_str(s: &str) -> Option<LinkerFlavorCli> {\n                 Some(match s {\n                     $($string => $($flavor)*,)*\n                     _ => return None,\n@@ -165,18 +196,23 @@ macro_rules! flavor_mappings {\n     )\n }\n \n-flavor_mappings! {\n-    ((LinkerFlavor::Em), \"em\"),\n-    ((LinkerFlavor::Gcc), \"gcc\"),\n-    ((LinkerFlavor::L4Bender), \"l4-bender\"),\n-    ((LinkerFlavor::Ld), \"ld\"),\n-    ((LinkerFlavor::Msvc), \"msvc\"),\n-    ((LinkerFlavor::PtxLinker), \"ptx-linker\"),\n-    ((LinkerFlavor::BpfLinker), \"bpf-linker\"),\n-    ((LinkerFlavor::Lld(LldFlavor::Wasm)), \"wasm-ld\"),\n-    ((LinkerFlavor::Lld(LldFlavor::Ld64)), \"ld64.lld\"),\n-    ((LinkerFlavor::Lld(LldFlavor::Ld)), \"ld.lld\"),\n-    ((LinkerFlavor::Lld(LldFlavor::Link)), \"lld-link\"),\n+linker_flavor_cli_impls! {\n+    (LinkerFlavorCli::Gcc) \"gcc\"\n+    (LinkerFlavorCli::Ld) \"ld\"\n+    (LinkerFlavorCli::Lld(LldFlavor::Ld)) \"ld.lld\"\n+    (LinkerFlavorCli::Lld(LldFlavor::Ld64)) \"ld64.lld\"\n+    (LinkerFlavorCli::Lld(LldFlavor::Link)) \"lld-link\"\n+    (LinkerFlavorCli::Lld(LldFlavor::Wasm)) \"wasm-ld\"\n+    (LinkerFlavorCli::Msvc) \"msvc\"\n+    (LinkerFlavorCli::Em) \"em\"\n+    (LinkerFlavorCli::BpfLinker) \"bpf-linker\"\n+    (LinkerFlavorCli::PtxLinker) \"ptx-linker\"\n+}\n+\n+impl ToJson for LinkerFlavorCli {\n+    fn to_json(&self) -> Json {\n+        self.desc().to_json()\n+    }\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Hash, Encodable, Decodable, HashStable_Generic)]\n@@ -467,6 +503,7 @@ impl fmt::Display for LinkOutputKind {\n }\n \n pub type LinkArgs = BTreeMap<LinkerFlavor, Vec<StaticCow<str>>>;\n+pub type LinkArgsCli = BTreeMap<LinkerFlavorCli, Vec<StaticCow<str>>>;\n \n /// Which kind of debuginfo does the target use?\n ///\n@@ -1210,19 +1247,21 @@ pub struct TargetOptions {\n     pub abi: StaticCow<str>,\n     /// Vendor name to use for conditional compilation (`target_vendor`). Defaults to \"unknown\".\n     pub vendor: StaticCow<str>,\n-    /// Default linker flavor used if `-C linker-flavor` or `-C linker` are not passed\n-    /// on the command line. Defaults to `LinkerFlavor::Gcc`.\n-    pub linker_flavor: LinkerFlavor,\n \n     /// Linker to invoke\n     pub linker: Option<StaticCow<str>>,\n-\n+    /// Default linker flavor used if `-C linker-flavor` or `-C linker` are not passed\n+    /// on the command line. Defaults to `LinkerFlavor::Gcc`.\n+    pub linker_flavor: LinkerFlavor,\n+    linker_flavor_json: LinkerFlavorCli,\n     /// LLD flavor used if `lld` (or `rust-lld`) is specified as a linker\n     /// without clarifying its flavor in any way.\n+    /// FIXME: Merge this into `LinkerFlavor`.\n     pub lld_flavor: LldFlavor,\n+    /// Whether the linker support GNU-like arguments such as -O. Defaults to true.\n+    /// FIXME: Merge this into `LinkerFlavor`.\n+    pub linker_is_gnu: bool,\n \n-    /// Linker arguments that are passed *before* any user-defined libraries.\n-    pub pre_link_args: LinkArgs,\n     /// Objects to link before and after all other object code.\n     pub pre_link_objects: CrtObjects,\n     pub post_link_objects: CrtObjects,\n@@ -1231,24 +1270,31 @@ pub struct TargetOptions {\n     pub post_link_objects_self_contained: CrtObjects,\n     pub link_self_contained: LinkSelfContainedDefault,\n \n+    /// Linker arguments that are passed *before* any user-defined libraries.\n+    pub pre_link_args: LinkArgs,\n+    pre_link_args_json: LinkArgsCli,\n     /// Linker arguments that are unconditionally passed after any\n     /// user-defined but before post-link objects. Standard platform\n     /// libraries that should be always be linked to, usually go here.\n     pub late_link_args: LinkArgs,\n+    late_link_args_json: LinkArgsCli,\n     /// Linker arguments used in addition to `late_link_args` if at least one\n     /// Rust dependency is dynamically linked.\n     pub late_link_args_dynamic: LinkArgs,\n+    late_link_args_dynamic_json: LinkArgsCli,\n     /// Linker arguments used in addition to `late_link_args` if all Rust\n     /// dependencies are statically linked.\n     pub late_link_args_static: LinkArgs,\n+    late_link_args_static_json: LinkArgsCli,\n     /// Linker arguments that are unconditionally passed *after* any\n     /// user-defined libraries.\n     pub post_link_args: LinkArgs,\n+    post_link_args_json: LinkArgsCli,\n+\n     /// Optional link script applied to `dylib` and `executable` crate types.\n     /// This is a string containing the script, not a path. Can only be applied\n     /// to linkers where `linker_is_gnu` is true.\n     pub link_script: Option<StaticCow<str>>,\n-\n     /// Environment variables to be set for the linker invocation.\n     pub link_env: StaticCow<[(StaticCow<str>, StaticCow<str>)]>,\n     /// Environment variables to be removed for the linker invocation.\n@@ -1333,8 +1379,6 @@ pub struct TargetOptions {\n     /// Default supported version of DWARF on this platform.\n     /// Useful because some platforms (osx, bsd) only want up to DWARF2.\n     pub default_dwarf_version: u32,\n-    /// Whether the linker support GNU-like arguments such as -O. Defaults to true.\n-    pub linker_is_gnu: bool,\n     /// The MinGW toolchain has a known issue that prevents it from correctly\n     /// handling COFF object files with more than 2<sup>15</sup> sections. Since each weak\n     /// symbol needs its own COMDAT section, weak linkage implies a large\n@@ -1532,11 +1576,7 @@ fn add_link_args(link_args: &mut LinkArgs, flavor: LinkerFlavor, args: &[&'stati\n         LinkerFlavor::Lld(lld_flavor) => {\n             panic!(\"add_link_args: use non-LLD flavor for {:?}\", lld_flavor)\n         }\n-        LinkerFlavor::Gcc\n-        | LinkerFlavor::Em\n-        | LinkerFlavor::L4Bender\n-        | LinkerFlavor::BpfLinker\n-        | LinkerFlavor::PtxLinker => {}\n+        LinkerFlavor::Gcc | LinkerFlavor::EmCc | LinkerFlavor::Bpf | LinkerFlavor::Ptx => {}\n     }\n }\n \n@@ -1554,6 +1594,36 @@ impl TargetOptions {\n     fn add_post_link_args(&mut self, flavor: LinkerFlavor, args: &[&'static str]) {\n         add_link_args(&mut self.post_link_args, flavor, args);\n     }\n+\n+    fn update_from_cli(&mut self) {\n+        self.linker_flavor = LinkerFlavor::from_cli(self.linker_flavor_json);\n+        for (args, args_json) in [\n+            (&mut self.pre_link_args, &self.pre_link_args_json),\n+            (&mut self.late_link_args, &self.late_link_args_json),\n+            (&mut self.late_link_args_dynamic, &self.late_link_args_dynamic_json),\n+            (&mut self.late_link_args_static, &self.late_link_args_static_json),\n+            (&mut self.post_link_args, &self.post_link_args_json),\n+        ] {\n+            *args = args_json\n+                .iter()\n+                .map(|(flavor, args)| (LinkerFlavor::from_cli(*flavor), args.clone()))\n+                .collect();\n+        }\n+    }\n+\n+    fn update_to_cli(&mut self) {\n+        self.linker_flavor_json = self.linker_flavor.to_cli();\n+        for (args, args_json) in [\n+            (&self.pre_link_args, &mut self.pre_link_args_json),\n+            (&self.late_link_args, &mut self.late_link_args_json),\n+            (&self.late_link_args_dynamic, &mut self.late_link_args_dynamic_json),\n+            (&self.late_link_args_static, &mut self.late_link_args_static_json),\n+            (&self.post_link_args, &mut self.post_link_args_json),\n+        ] {\n+            *args_json =\n+                args.iter().map(|(flavor, args)| (flavor.to_cli(), args.clone())).collect();\n+        }\n+    }\n }\n \n impl Default for TargetOptions {\n@@ -1568,11 +1638,11 @@ impl Default for TargetOptions {\n             env: \"\".into(),\n             abi: \"\".into(),\n             vendor: \"unknown\".into(),\n-            linker_flavor: LinkerFlavor::Gcc,\n             linker: option_env!(\"CFG_DEFAULT_LINKER\").map(|s| s.into()),\n+            linker_flavor: LinkerFlavor::Gcc,\n+            linker_flavor_json: LinkerFlavorCli::Gcc,\n             lld_flavor: LldFlavor::Ld,\n-            pre_link_args: LinkArgs::new(),\n-            post_link_args: LinkArgs::new(),\n+            linker_is_gnu: true,\n             link_script: None,\n             asm_args: cvs![],\n             cpu: \"generic\".into(),\n@@ -1599,7 +1669,6 @@ impl Default for TargetOptions {\n             is_like_msvc: false,\n             is_like_wasm: false,\n             default_dwarf_version: 4,\n-            linker_is_gnu: true,\n             allows_weak_linkage: true,\n             has_rpath: false,\n             no_default_libraries: true,\n@@ -1612,9 +1681,16 @@ impl Default for TargetOptions {\n             pre_link_objects_self_contained: Default::default(),\n             post_link_objects_self_contained: Default::default(),\n             link_self_contained: LinkSelfContainedDefault::False,\n+            pre_link_args: LinkArgs::new(),\n+            pre_link_args_json: LinkArgsCli::new(),\n             late_link_args: LinkArgs::new(),\n+            late_link_args_json: LinkArgsCli::new(),\n             late_link_args_dynamic: LinkArgs::new(),\n+            late_link_args_dynamic_json: LinkArgsCli::new(),\n             late_link_args_static: LinkArgs::new(),\n+            late_link_args_static_json: LinkArgsCli::new(),\n+            post_link_args: LinkArgs::new(),\n+            post_link_args_json: LinkArgsCli::new(),\n             link_env: cvs![],\n             link_env_remove: cvs![],\n             archive_format: \"gnu\".into(),\n@@ -2019,13 +2095,13 @@ impl Target {\n                     Some(Ok(()))\n                 })).unwrap_or(Ok(()))\n             } );\n-            ($key_name:ident, LinkerFlavor) => ( {\n-                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                obj.remove(&name).and_then(|o| o.as_str().and_then(|s| {\n-                    match LinkerFlavor::from_str(s) {\n+            ($key_name:ident = $json_name:expr, LinkerFlavor) => ( {\n+                let name = $json_name;\n+                obj.remove(name).and_then(|o| o.as_str().and_then(|s| {\n+                    match LinkerFlavorCli::from_str(s) {\n                         Some(linker_flavor) => base.$key_name = linker_flavor,\n                         _ => return Some(Err(format!(\"'{}' is not a valid value for linker-flavor. \\\n-                                                      Use {}\", s, LinkerFlavor::one_of()))),\n+                                                      Use {}\", s, LinkerFlavorCli::one_of()))),\n                     }\n                     Some(Ok(()))\n                 })).unwrap_or(Ok(()))\n@@ -2106,14 +2182,14 @@ impl Target {\n                     base.$key_name = args;\n                 }\n             } );\n-            ($key_name:ident, link_args) => ( {\n-                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n-                if let Some(val) = obj.remove(&name) {\n+            ($key_name:ident = $json_name:expr, link_args) => ( {\n+                let name = $json_name;\n+                if let Some(val) = obj.remove(name) {\n                     let obj = val.as_object().ok_or_else(|| format!(\"{}: expected a \\\n                         JSON object with fields per linker-flavor.\", name))?;\n-                    let mut args = LinkArgs::new();\n+                    let mut args = LinkArgsCli::new();\n                     for (k, v) in obj {\n-                        let flavor = LinkerFlavor::from_str(&k).ok_or_else(|| {\n+                        let flavor = LinkerFlavorCli::from_str(&k).ok_or_else(|| {\n                             format!(\"{}: '{}' is not a valid value for linker-flavor. \\\n                                      Use 'em', 'gcc', 'ld' or 'msvc'\", name, k)\n                         })?;\n@@ -2199,19 +2275,20 @@ impl Target {\n         key!(env);\n         key!(abi);\n         key!(vendor);\n-        key!(linker_flavor, LinkerFlavor)?;\n         key!(linker, optional);\n+        key!(linker_flavor_json = \"linker-flavor\", LinkerFlavor)?;\n         key!(lld_flavor, LldFlavor)?;\n+        key!(linker_is_gnu, bool);\n         key!(pre_link_objects = \"pre-link-objects\", link_objects);\n         key!(post_link_objects = \"post-link-objects\", link_objects);\n         key!(pre_link_objects_self_contained = \"pre-link-objects-fallback\", link_objects);\n         key!(post_link_objects_self_contained = \"post-link-objects-fallback\", link_objects);\n         key!(link_self_contained = \"crt-objects-fallback\", link_self_contained)?;\n-        key!(pre_link_args, link_args);\n-        key!(late_link_args, link_args);\n-        key!(late_link_args_dynamic, link_args);\n-        key!(late_link_args_static, link_args);\n-        key!(post_link_args, link_args);\n+        key!(pre_link_args_json = \"pre-link-args\", link_args);\n+        key!(late_link_args_json = \"late-link-args\", link_args);\n+        key!(late_link_args_dynamic_json = \"late-link-args-dynamic\", link_args);\n+        key!(late_link_args_static_json = \"late-link-args-static\", link_args);\n+        key!(post_link_args_json = \"post-link-args\", link_args);\n         key!(link_script, optional);\n         key!(link_env, env);\n         key!(link_env_remove, list);\n@@ -2239,7 +2316,6 @@ impl Target {\n         key!(is_like_msvc, bool);\n         key!(is_like_wasm, bool);\n         key!(default_dwarf_version, u32);\n-        key!(linker_is_gnu, bool);\n         key!(allows_weak_linkage, bool);\n         key!(has_rpath, bool);\n         key!(no_default_libraries, bool);\n@@ -2296,6 +2372,8 @@ impl Target {\n             // This can cause unfortunate ICEs later down the line.\n             return Err(\"may not set is_builtin for targets not built-in\".into());\n         }\n+        base.update_from_cli();\n+\n         // Each field should have been read using `Json::remove` so any keys remaining are unused.\n         let remaining_keys = obj.keys();\n         Ok((\n@@ -2387,42 +2465,44 @@ impl ToJson for Target {\n     fn to_json(&self) -> Json {\n         let mut d = serde_json::Map::new();\n         let default: TargetOptions = Default::default();\n+        let mut target = self.clone();\n+        target.update_to_cli();\n \n         macro_rules! target_val {\n             ($attr:ident) => {{\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n-                d.insert(name, self.$attr.to_json());\n+                d.insert(name, target.$attr.to_json());\n             }};\n         }\n \n         macro_rules! target_option_val {\n             ($attr:ident) => {{\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n-                if default.$attr != self.$attr {\n-                    d.insert(name, self.$attr.to_json());\n+                if default.$attr != target.$attr {\n+                    d.insert(name, target.$attr.to_json());\n                 }\n             }};\n-            ($attr:ident, $key_name:expr) => {{\n-                let name = $key_name;\n-                if default.$attr != self.$attr {\n-                    d.insert(name.into(), self.$attr.to_json());\n+            ($attr:ident, $json_name:expr) => {{\n+                let name = $json_name;\n+                if default.$attr != target.$attr {\n+                    d.insert(name.into(), target.$attr.to_json());\n                 }\n             }};\n-            (link_args - $attr:ident) => {{\n-                let name = (stringify!($attr)).replace(\"_\", \"-\");\n-                if default.$attr != self.$attr {\n-                    let obj = self\n+            (link_args - $attr:ident, $json_name:expr) => {{\n+                let name = $json_name;\n+                if default.$attr != target.$attr {\n+                    let obj = target\n                         .$attr\n                         .iter()\n                         .map(|(k, v)| (k.desc().to_string(), v.clone()))\n                         .collect::<BTreeMap<_, _>>();\n-                    d.insert(name, obj.to_json());\n+                    d.insert(name.to_string(), obj.to_json());\n                 }\n             }};\n             (env - $attr:ident) => {{\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n-                if default.$attr != self.$attr {\n-                    let obj = self\n+                if default.$attr != target.$attr {\n+                    let obj = target\n                         .$attr\n                         .iter()\n                         .map(|&(ref k, ref v)| format!(\"{k}={v}\"))\n@@ -2444,19 +2524,20 @@ impl ToJson for Target {\n         target_option_val!(env);\n         target_option_val!(abi);\n         target_option_val!(vendor);\n-        target_option_val!(linker_flavor);\n         target_option_val!(linker);\n+        target_option_val!(linker_flavor_json, \"linker-flavor\");\n         target_option_val!(lld_flavor);\n+        target_option_val!(linker_is_gnu);\n         target_option_val!(pre_link_objects);\n         target_option_val!(post_link_objects);\n         target_option_val!(pre_link_objects_self_contained, \"pre-link-objects-fallback\");\n         target_option_val!(post_link_objects_self_contained, \"post-link-objects-fallback\");\n         target_option_val!(link_self_contained, \"crt-objects-fallback\");\n-        target_option_val!(link_args - pre_link_args);\n-        target_option_val!(link_args - late_link_args);\n-        target_option_val!(link_args - late_link_args_dynamic);\n-        target_option_val!(link_args - late_link_args_static);\n-        target_option_val!(link_args - post_link_args);\n+        target_option_val!(link_args - pre_link_args_json, \"pre-link-args\");\n+        target_option_val!(link_args - late_link_args_json, \"late-link-args\");\n+        target_option_val!(link_args - late_link_args_dynamic_json, \"late-link-args-dynamic\");\n+        target_option_val!(link_args - late_link_args_static_json, \"late-link-args-static\");\n+        target_option_val!(link_args - post_link_args_json, \"post-link-args\");\n         target_option_val!(link_script);\n         target_option_val!(env - link_env);\n         target_option_val!(link_env_remove);\n@@ -2485,7 +2566,6 @@ impl ToJson for Target {\n         target_option_val!(is_like_msvc);\n         target_option_val!(is_like_wasm);\n         target_option_val!(default_dwarf_version);\n-        target_option_val!(linker_is_gnu);\n         target_option_val!(allows_weak_linkage);\n         target_option_val!(has_rpath);\n         target_option_val!(no_default_libraries);"}, {"sha": "6ab3a8b7eb5a06f688bc5505f1f0ddb9e6301bb8", "filename": "compiler/rustc_target/src/spec/nvptx64_nvidia_cuda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -10,7 +10,7 @@ pub fn target() -> Target {\n         options: TargetOptions {\n             os: \"cuda\".into(),\n             vendor: \"nvidia\".into(),\n-            linker_flavor: LinkerFlavor::PtxLinker,\n+            linker_flavor: LinkerFlavor::Ptx,\n             // The linker can be installed from `crates.io`.\n             linker: Some(\"rust-ptx-linker\".into()),\n             linker_is_gnu: false,"}, {"sha": "d03f959076de0c0ab5fe7691c1f70daf5756d2ab", "filename": "compiler/rustc_target/src/spec/tests/tests_impl.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -2,9 +2,11 @@ use super::super::*;\n use std::assert_matches::assert_matches;\n \n // Test target self-consistency and JSON encoding/decoding roundtrip.\n-pub(super) fn test_target(target: Target, triple: &str) {\n+pub(super) fn test_target(mut target: Target, triple: &str) {\n+    let recycled_target = Target::from_json(target.to_json()).map(|(j, _)| j);\n+    target.update_to_cli();\n     target.check_consistency(triple);\n-    assert_eq!(Target::from_json(target.to_json()).map(|(j, _)| j), Ok(target));\n+    assert_eq!(recycled_target, Ok(target));\n }\n \n impl Target {\n@@ -22,10 +24,9 @@ impl Target {\n         assert_eq!(self.is_like_osx, matches!(self.lld_flavor, LldFlavor::Ld64));\n         assert_eq!(self.is_like_msvc, matches!(self.lld_flavor, LldFlavor::Link));\n         assert_eq!(self.is_like_wasm, matches!(self.lld_flavor, LldFlavor::Wasm));\n-        assert_eq!(self.os == \"l4re\", matches!(self.linker_flavor, LinkerFlavor::L4Bender));\n-        assert_eq!(self.os == \"emscripten\", matches!(self.linker_flavor, LinkerFlavor::Em));\n-        assert_eq!(self.arch == \"bpf\", matches!(self.linker_flavor, LinkerFlavor::BpfLinker));\n-        assert_eq!(self.arch == \"nvptx64\", matches!(self.linker_flavor, LinkerFlavor::PtxLinker));\n+        assert_eq!(self.os == \"emscripten\", matches!(self.linker_flavor, LinkerFlavor::EmCc));\n+        assert_eq!(self.arch == \"bpf\", matches!(self.linker_flavor, LinkerFlavor::Bpf));\n+        assert_eq!(self.arch == \"nvptx64\", matches!(self.linker_flavor, LinkerFlavor::Ptx));\n \n         for args in [\n             &self.pre_link_args,\n@@ -65,17 +66,14 @@ impl Target {\n                             LinkerFlavor::Lld(LldFlavor::Wasm) | LinkerFlavor::Gcc\n                         )\n                     }\n-                    (LinkerFlavor::L4Bender, LldFlavor::Ld) => {\n-                        assert_matches!(flavor, LinkerFlavor::L4Bender)\n+                    (LinkerFlavor::EmCc, LldFlavor::Wasm) => {\n+                        assert_matches!(flavor, LinkerFlavor::EmCc)\n                     }\n-                    (LinkerFlavor::Em, LldFlavor::Wasm) => {\n-                        assert_matches!(flavor, LinkerFlavor::Em)\n+                    (LinkerFlavor::Bpf, LldFlavor::Ld) => {\n+                        assert_matches!(flavor, LinkerFlavor::Bpf)\n                     }\n-                    (LinkerFlavor::BpfLinker, LldFlavor::Ld) => {\n-                        assert_matches!(flavor, LinkerFlavor::BpfLinker)\n-                    }\n-                    (LinkerFlavor::PtxLinker, LldFlavor::Ld) => {\n-                        assert_matches!(flavor, LinkerFlavor::PtxLinker)\n+                    (LinkerFlavor::Ptx, LldFlavor::Ld) => {\n+                        assert_matches!(flavor, LinkerFlavor::Ptx)\n                     }\n                     flavors => unreachable!(\"unexpected flavor combination: {:?}\", flavors),\n                 }"}, {"sha": "6f77ef98c015df8c38dc5629d23fa5c496982be8", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -5,13 +5,13 @@ pub fn target() -> Target {\n     // Reset flags for non-Em flavors back to empty to satisfy sanity checking tests.\n     let pre_link_args = LinkArgs::new();\n     let post_link_args = TargetOptions::link_args(\n-        LinkerFlavor::Em,\n+        LinkerFlavor::EmCc,\n         &[\"-sABORTING_MALLOC=0\", \"-Wl,--fatal-warnings\"],\n     );\n \n     let opts = TargetOptions {\n         os: \"emscripten\".into(),\n-        linker_flavor: LinkerFlavor::Em,\n+        linker_flavor: LinkerFlavor::EmCc,\n         // emcc emits two files - a .js file to instantiate the wasm and supply platform\n         // functionality, and a .wasm file.\n         exe_suffix: \".js\".into(),"}, {"sha": "1a379ecc11c01d7ae8cdfde75d8a591425eaa2ca", "filename": "library/core/src/any.rs", "status": "modified", "additions": 233, "deletions": 6, "changes": 239, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -796,7 +796,7 @@ pub trait Provider {\n     /// impl Provider for SomeConcreteType {\n     ///     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n     ///         demand.provide_ref::<str>(&self.field)\n-    ///             .provide_value::<i32>(|| self.num_field);\n+    ///             .provide_value::<i32>(self.num_field);\n     ///     }\n     /// }\n     /// ```\n@@ -881,36 +881,64 @@ impl<'a> Demand<'a> {\n     ///\n     /// # Examples\n     ///\n+    /// Provides an `u8`.\n+    ///\n+    /// ```rust\n+    /// #![feature(provide_any)]\n+    ///\n+    /// use std::any::{Provider, Demand};\n+    /// # struct SomeConcreteType { field: u8 }\n+    ///\n+    /// impl Provider for SomeConcreteType {\n+    ///     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n+    ///         demand.provide_value::<u8>(self.field);\n+    ///     }\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"provide_any\", issue = \"96024\")]\n+    pub fn provide_value<T>(&mut self, value: T) -> &mut Self\n+    where\n+        T: 'static,\n+    {\n+        self.provide::<tags::Value<T>>(value)\n+    }\n+\n+    /// Provide a value or other type with only static lifetimes computed using a closure.\n+    ///\n+    /// # Examples\n+    ///\n     /// Provides a `String` by cloning.\n     ///\n     /// ```rust\n-    /// # #![feature(provide_any)]\n+    /// #![feature(provide_any)]\n+    ///\n     /// use std::any::{Provider, Demand};\n     /// # struct SomeConcreteType { field: String }\n     ///\n     /// impl Provider for SomeConcreteType {\n     ///     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n-    ///         demand.provide_value::<String>(|| self.field.clone());\n+    ///         demand.provide_value_with::<String>(|| self.field.clone());\n     ///     }\n     /// }\n     /// ```\n     #[unstable(feature = \"provide_any\", issue = \"96024\")]\n-    pub fn provide_value<T>(&mut self, fulfil: impl FnOnce() -> T) -> &mut Self\n+    pub fn provide_value_with<T>(&mut self, fulfil: impl FnOnce() -> T) -> &mut Self\n     where\n         T: 'static,\n     {\n         self.provide_with::<tags::Value<T>>(fulfil)\n     }\n \n-    /// Provide a reference, note that the referee type must be bounded by `'static`,\n+    /// Provide a reference. The referee type must be bounded by `'static`,\n     /// but may be unsized.\n     ///\n     /// # Examples\n     ///\n     /// Provides a reference to a field as a `&str`.\n     ///\n     /// ```rust\n-    /// # #![feature(provide_any)]\n+    /// #![feature(provide_any)]\n+    ///\n     /// use std::any::{Provider, Demand};\n     /// # struct SomeConcreteType { field: String }\n     ///\n@@ -925,6 +953,40 @@ impl<'a> Demand<'a> {\n         self.provide::<tags::Ref<tags::MaybeSizedValue<T>>>(value)\n     }\n \n+    /// Provide a reference computed using a closure. The referee type\n+    /// must be bounded by `'static`, but may be unsized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Provides a reference to a field as a `&str`.\n+    ///\n+    /// ```rust\n+    /// #![feature(provide_any)]\n+    ///\n+    /// use std::any::{Provider, Demand};\n+    /// # struct SomeConcreteType { business: String, party: String }\n+    /// # fn today_is_a_weekday() -> bool { true }\n+    ///\n+    /// impl Provider for SomeConcreteType {\n+    ///     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n+    ///         demand.provide_ref_with::<str>(|| {\n+    ///             if today_is_a_weekday() {\n+    ///                 &self.business\n+    ///             } else {\n+    ///                 &self.party\n+    ///             }\n+    ///         });\n+    ///     }\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"provide_any\", issue = \"96024\")]\n+    pub fn provide_ref_with<T: ?Sized + 'static>(\n+        &mut self,\n+        fulfil: impl FnOnce() -> &'a T,\n+    ) -> &mut Self {\n+        self.provide_with::<tags::Ref<tags::MaybeSizedValue<T>>>(fulfil)\n+    }\n+\n     /// Provide a value with the given `Type` tag.\n     fn provide<I>(&mut self, value: I::Reified) -> &mut Self\n     where\n@@ -946,6 +1008,156 @@ impl<'a> Demand<'a> {\n         }\n         self\n     }\n+\n+    /// Check if the `Demand` would be satisfied if provided with a\n+    /// value of the specified type. If the type does not match or has\n+    /// already been provided, returns false.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Check if an `u8` still needs to be provided and then provides\n+    /// it.\n+    ///\n+    /// ```rust\n+    /// #![feature(provide_any)]\n+    ///\n+    /// use std::any::{Provider, Demand};\n+    ///\n+    /// struct Parent(Option<u8>);\n+    ///\n+    /// impl Provider for Parent {\n+    ///     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n+    ///         if let Some(v) = self.0 {\n+    ///             demand.provide_value::<u8>(v);\n+    ///         }\n+    ///     }\n+    /// }\n+    ///\n+    /// struct Child {\n+    ///     parent: Parent,\n+    /// }\n+    ///\n+    /// impl Child {\n+    ///     // Pretend that this takes a lot of resources to evaluate.\n+    ///     fn an_expensive_computation(&self) -> Option<u8> {\n+    ///         Some(99)\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Provider for Child {\n+    ///     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n+    ///         // In general, we don't know if this call will provide\n+    ///         // an `u8` value or not...\n+    ///         self.parent.provide(demand);\n+    ///\n+    ///         // ...so we check to see if the `u8` is needed before\n+    ///         // we run our expensive computation.\n+    ///         if demand.would_be_satisfied_by_value_of::<u8>() {\n+    ///             if let Some(v) = self.an_expensive_computation() {\n+    ///                 demand.provide_value::<u8>(v);\n+    ///             }\n+    ///         }\n+    ///\n+    ///         // The demand will be satisfied now, regardless of if\n+    ///         // the parent provided the value or we did.\n+    ///         assert!(!demand.would_be_satisfied_by_value_of::<u8>());\n+    ///     }\n+    /// }\n+    ///\n+    /// let parent = Parent(Some(42));\n+    /// let child = Child { parent };\n+    /// assert_eq!(Some(42), std::any::request_value::<u8>(&child));\n+    ///\n+    /// let parent = Parent(None);\n+    /// let child = Child { parent };\n+    /// assert_eq!(Some(99), std::any::request_value::<u8>(&child));\n+    /// ```\n+    #[unstable(feature = \"provide_any\", issue = \"96024\")]\n+    pub fn would_be_satisfied_by_value_of<T>(&self) -> bool\n+    where\n+        T: 'static,\n+    {\n+        self.would_be_satisfied_by::<tags::Value<T>>()\n+    }\n+\n+    /// Check if the `Demand` would be satisfied if provided with a\n+    /// reference to a value of the specified type. If the type does\n+    /// not match or has already been provided, returns false.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Check if a `&str` still needs to be provided and then provides\n+    /// it.\n+    ///\n+    /// ```rust\n+    /// #![feature(provide_any)]\n+    ///\n+    /// use std::any::{Provider, Demand};\n+    ///\n+    /// struct Parent(Option<String>);\n+    ///\n+    /// impl Provider for Parent {\n+    ///     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n+    ///         if let Some(v) = &self.0 {\n+    ///             demand.provide_ref::<str>(v);\n+    ///         }\n+    ///     }\n+    /// }\n+    ///\n+    /// struct Child {\n+    ///     parent: Parent,\n+    ///     name: String,\n+    /// }\n+    ///\n+    /// impl Child {\n+    ///     // Pretend that this takes a lot of resources to evaluate.\n+    ///     fn an_expensive_computation(&self) -> Option<&str> {\n+    ///         Some(&self.name)\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Provider for Child {\n+    ///     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n+    ///         // In general, we don't know if this call will provide\n+    ///         // a `str` reference or not...\n+    ///         self.parent.provide(demand);\n+    ///\n+    ///         // ...so we check to see if the `&str` is needed before\n+    ///         // we run our expensive computation.\n+    ///         if demand.would_be_satisfied_by_ref_of::<str>() {\n+    ///             if let Some(v) = self.an_expensive_computation() {\n+    ///                 demand.provide_ref::<str>(v);\n+    ///             }\n+    ///         }\n+    ///\n+    ///         // The demand will be satisfied now, regardless of if\n+    ///         // the parent provided the reference or we did.\n+    ///         assert!(!demand.would_be_satisfied_by_ref_of::<str>());\n+    ///     }\n+    /// }\n+    ///\n+    /// let parent = Parent(Some(\"parent\".into()));\n+    /// let child = Child { parent, name: \"child\".into() };\n+    /// assert_eq!(Some(\"parent\"), std::any::request_ref::<str>(&child));\n+    ///\n+    /// let parent = Parent(None);\n+    /// let child = Child { parent, name: \"child\".into() };\n+    /// assert_eq!(Some(\"child\"), std::any::request_ref::<str>(&child));\n+    /// ```\n+    #[unstable(feature = \"provide_any\", issue = \"96024\")]\n+    pub fn would_be_satisfied_by_ref_of<T>(&self) -> bool\n+    where\n+        T: ?Sized + 'static,\n+    {\n+        self.would_be_satisfied_by::<tags::Ref<tags::MaybeSizedValue<T>>>()\n+    }\n+\n+    fn would_be_satisfied_by<I>(&self) -> bool\n+    where\n+        I: tags::Type<'a>,\n+    {\n+        matches!(self.0.downcast::<I>(), Some(TaggedOption(None)))\n+    }\n }\n \n #[unstable(feature = \"provide_any\", issue = \"96024\")]\n@@ -1050,6 +1262,21 @@ impl<'a> dyn Erased<'a> + 'a {\n     /// Returns some reference to the dynamic value if it is tagged with `I`,\n     /// or `None` otherwise.\n     #[inline]\n+    fn downcast<I>(&self) -> Option<&TaggedOption<'a, I>>\n+    where\n+        I: tags::Type<'a>,\n+    {\n+        if self.tag_id() == TypeId::of::<I>() {\n+            // SAFETY: Just checked whether we're pointing to an I.\n+            Some(unsafe { &*(self as *const Self).cast::<TaggedOption<'a, I>>() })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Returns some mutable reference to the dynamic value if it is tagged with `I`,\n+    /// or `None` otherwise.\n+    #[inline]\n     fn downcast_mut<I>(&mut self) -> Option<&mut TaggedOption<'a, I>>\n     where\n         I: tags::Type<'a>,"}, {"sha": "9538b81394957be74e188531cb1d9e9b9f4fa9ad", "filename": "library/core/tests/any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/library%2Fcore%2Ftests%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/library%2Fcore%2Ftests%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fany.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -142,7 +142,7 @@ impl Provider for SomeConcreteType {\n         demand\n             .provide_ref::<String>(&self.some_string)\n             .provide_ref::<str>(&self.some_string)\n-            .provide_value::<String>(|| \"bye\".to_owned());\n+            .provide_value_with::<String>(|| \"bye\".to_owned());\n     }\n }\n "}, {"sha": "de851c8fbbed51743776477b338dda1677fd925a", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -192,6 +192,7 @@ unsafe impl<T: ?Sized + Send> Sync for Mutex<T> {}\n                       and cause Futures to not implement `Send`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[clippy::has_significant_drop]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"MutexGuard\")]\n pub struct MutexGuard<'a, T: ?Sized + 'a> {\n     lock: &'a Mutex<T>,\n     poison: poison::Guard,"}, {"sha": "9ab781561e9b1280460d858bd36d737bfe5aa7e1", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -101,6 +101,7 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n                       and cause Futures to not implement `Send`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[clippy::has_significant_drop]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"RwLockReadGuard\")]\n pub struct RwLockReadGuard<'a, T: ?Sized + 'a> {\n     // NB: we use a pointer instead of `&'a T` to avoid `noalias` violations, because a\n     // `Ref` argument doesn't hold immutability for its whole scope, only until it drops.\n@@ -130,6 +131,7 @@ unsafe impl<T: ?Sized + Sync> Sync for RwLockReadGuard<'_, T> {}\n                       and cause Future's to not implement `Send`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[clippy::has_significant_drop]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"RwLockWriteGuard\")]\n pub struct RwLockWriteGuard<'a, T: ?Sized + 'a> {\n     lock: &'a RwLock<T>,\n     poison: poison::Guard,"}, {"sha": "f909ecc0ab858404403aaa3edb7df83d6043df97", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -793,7 +793,7 @@ impl Step for ErrorIndex {\n         t!(fs::create_dir_all(&out));\n         let mut index = tool::ErrorIndex::command(builder);\n         index.arg(\"html\");\n-        index.arg(out.join(\"error-index.html\"));\n+        index.arg(out);\n         index.arg(&builder.version);\n \n         builder.run(&mut index);"}, {"sha": "c7a9f247e208421a42c982aa8b47f6fa8ed11390", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -215,7 +215,6 @@ details.rustdoc-toggle > summary::before,\n div.impl-items > div:not(.docblock):not(.item-info),\n .content ul.crate a.crate,\n a.srclink,\n-#main-content > .since,\n #help-button > button,\n details.rustdoc-toggle.top-doc > summary,\n details.rustdoc-toggle.top-doc > summary::before,"}, {"sha": "a6a56f3a95d18b302869fac8672cd620e0b68829", "filename": "src/test/mir-opt/early_otherwise_branch_68867.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -1,4 +1,6 @@\n-// compile-flags: -Z mir-opt-level=4 -Zunsound-mir-opts\n+// unit-test: EarlyOtherwiseBranch\n+\n+// FIXME: This test was broken by the derefer change.\n \n // example from #68867\n type CSSFloat = f32;\n@@ -11,7 +13,6 @@ pub enum ViewportPercentageLength {\n }\n \n // EMIT_MIR early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff\n-// EMIT_MIR early_otherwise_branch_68867.try_sum EarlyOtherwiseBranch.before SimplifyConstCondition-final.after\n #[no_mangle]\n pub extern \"C\" fn try_sum(\n     x: &ViewportPercentageLength,"}, {"sha": "8b37fb79f411b853ab29b4726cf6b380d2187b00", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "status": "removed", "additions": 0, "deletions": 322, "changes": 322, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyConstCondition-final.after.diff?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1,322 +0,0 @@\n-- // MIR for `try_sum` before EarlyOtherwiseBranch\n-+ // MIR for `try_sum` after SimplifyConstCondition-final\n-  \n-  fn try_sum(_1: &ViewportPercentageLength, _2: &ViewportPercentageLength) -> Result<ViewportPercentageLength, ()> {\n-      debug x => _1;                       // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+1:5: +1:6\n-      debug other => _2;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+2:5: +2:10\n-      let mut _0: std::result::Result<ViewportPercentageLength, ()>; // return place in scope 0 at $DIR/early_otherwise_branch_68867.rs:+3:6: +3:42\n-      let mut _3: ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +11:6\n-      let mut _4: (&ViewportPercentageLength, &ViewportPercentageLength); // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-      let mut _5: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:15: +5:16\n-      let mut _6: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:18: +5:23\n-      let mut _7: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:21: +6:30\n-      let mut _8: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:21: +7:30\n-      let mut _9: isize;                   // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:23: +8:34\n-      let mut _10: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:23: +9:34\n-      let mut _11: isize;                  // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:11: +6:18\n-      let _12: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n-      let _13: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n-      let mut _14: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n-      let mut _15: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:41\n-      let mut _16: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:44: +6:49\n-      let _17: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n-      let _18: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n-      let mut _19: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n-      let mut _20: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:41\n-      let mut _21: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:44: +7:49\n-      let _22: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n-      let _23: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n-      let mut _24: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n-      let mut _25: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:47\n-      let mut _26: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:50: +8:55\n-      let _27: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n-      let _28: f32;                        // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n-      let mut _29: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n-      let mut _30: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:47\n-      let mut _31: f32;                    // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:50: +9:55\n-      let mut _32: !;                      // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:14: +10:28\n-      let mut _33: ();                     // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:25: +10:27\n-      let mut _34: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-      let mut _35: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-      let mut _36: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-      let mut _37: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-      let mut _38: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-      let mut _39: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-      let mut _40: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-      let mut _41: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-      let mut _42: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-      let mut _43: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-      let mut _44: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-      let mut _45: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-      let mut _46: &ViewportPercentageLength; // in scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-      scope 1 {\n--         debug one => _12;                // in scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n--         debug other => _13;              // in scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n-+         debug one => _15;                // in scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n-+         debug other => _16;              // in scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n-      }\n-      scope 2 {\n--         debug one => _17;                // in scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n--         debug other => _18;              // in scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n-+         debug one => _20;                // in scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n-+         debug other => _21;              // in scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n-      }\n-      scope 3 {\n--         debug one => _22;                // in scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n--         debug other => _23;              // in scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n-+         debug one => _25;                // in scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n-+         debug other => _26;              // in scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n-      }\n-      scope 4 {\n--         debug one => _27;                // in scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n--         debug other => _28;              // in scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n-+         debug one => _30;                // in scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n-+         debug other => _31;              // in scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n-      }\n-  \n-      bb0: {\n--         StorageLive(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +11:6\n--         StorageLive(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n--         StorageLive(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:15: +5:16\n--         _5 = _1;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:15: +5:16\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +11:6\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:15: +5:16\n-+         (_4.0: &ViewportPercentageLength) = _1; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:15: +5:16\n-          StorageLive(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:18: +5:23\n-          _6 = _2;                         // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:18: +5:23\n-          Deinit(_4);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n--         (_4.0: &ViewportPercentageLength) = move _5; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:23: +5:24\n--         StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:23: +5:24\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:23: +5:24\n-          _34 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          _11 = discriminant((*_34));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb11]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n-      }\n-  \n-      bb1: {\n-          _35 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          _7 = discriminant((*_35));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          switchInt(move _7) -> [0_isize: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n-      }\n-  \n-      bb2: {\n-          StorageLive(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:25: +10:27\n-          nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:25: +10:27\n-          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n-          nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n-          discriminant(_0) = 1;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n-          StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:27: +10:28\n--         StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+11:6: +11:7\n--         StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:1: +12:2\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+11:6: +11:7\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:1: +12:2\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:2: +12:2\n-      }\n-  \n-      bb3: {\n-          _36 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          _8 = discriminant((*_36));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n-      }\n-  \n-      bb4: {\n-          _37 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          _9 = discriminant((*_37));       // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n-      }\n-  \n-      bb5: {\n-          _38 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          _10 = discriminant((*_38));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n-      }\n-  \n-      bb6: {\n--         StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n-          _39 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n--         _12 = (((*_39) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n--         StorageLive(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n-+         _15 = (((*_39) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:14: +6:17\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n-          _40 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n--         _13 = (((*_40) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n--         StorageLive(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n--         StorageLive(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:41\n--         _15 = _12;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:41\n--         StorageLive(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:44: +6:49\n--         _16 = _13;                       // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:44: +6:49\n--         _14 = Add(move _15, move _16);   // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n--         StorageDead(_16);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:48: +6:49\n--         StorageDead(_15);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:48: +6:49\n--         Deinit(_3);                      // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n--         ((_3 as Vw).0: f32) = move _14;  // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n--         discriminant(_3) = 0;            // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n--         StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n--         StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n--         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n-+         _16 = (((*_40) as Vw).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:24: +6:29\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:41\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:41\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:44: +6:49\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:44: +6:49\n-+         ((((_0 as Ok).0: ViewportPercentageLength) as Vw).0: f32) = Add(move _15, move _16); // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:38: +6:49\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:48: +6:49\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:48: +6:49\n-+         Deinit(((_0 as Ok).0: ViewportPercentageLength)); // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n-+         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 0; // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:35: +6:50\n-+         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n-          goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:+6:49: +6:50\n-      }\n-  \n-      bb7: {\n--         StorageLive(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n-          _41 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n--         _17 = (((*_41) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n--         StorageLive(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n-+         _20 = (((*_41) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:14: +7:17\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n-          _42 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n--         _18 = (((*_42) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n--         StorageLive(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n--         StorageLive(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:41\n--         _20 = _17;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:41\n--         StorageLive(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:44: +7:49\n--         _21 = _18;                       // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:44: +7:49\n--         _19 = Add(move _20, move _21);   // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n--         StorageDead(_21);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:48: +7:49\n--         StorageDead(_20);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:48: +7:49\n--         Deinit(_3);                      // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n--         ((_3 as Vh).0: f32) = move _19;  // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n--         discriminant(_3) = 1;            // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n--         StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n--         StorageDead(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n--         StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n-+         _21 = (((*_42) as Vh).0: f32);   // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:24: +7:29\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:41\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:41\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:44: +7:49\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:44: +7:49\n-+         ((((_0 as Ok).0: ViewportPercentageLength) as Vh).0: f32) = Add(move _20, move _21); // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:38: +7:49\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:48: +7:49\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:48: +7:49\n-+         Deinit(((_0 as Ok).0: ViewportPercentageLength)); // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n-+         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 1; // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:35: +7:50\n-+         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n-          goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:+7:49: +7:50\n-      }\n-  \n-      bb8: {\n--         StorageLive(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n-          _43 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n--         _22 = (((*_43) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n--         StorageLive(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n-+         _25 = (((*_43) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:16: +8:19\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n-          _44 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n--         _23 = (((*_44) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n--         StorageLive(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n--         StorageLive(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:47\n--         _25 = _22;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:47\n--         StorageLive(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:50: +8:55\n--         _26 = _23;                       // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:50: +8:55\n--         _24 = Add(move _25, move _26);   // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n--         StorageDead(_26);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:54: +8:55\n--         StorageDead(_25);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:54: +8:55\n--         Deinit(_3);                      // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n--         ((_3 as Vmin).0: f32) = move _24; // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n--         discriminant(_3) = 2;            // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n--         StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n--         StorageDead(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n--         StorageDead(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n-+         _26 = (((*_44) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:28: +8:33\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:47\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:47\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:50: +8:55\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:50: +8:55\n-+         ((((_0 as Ok).0: ViewportPercentageLength) as Vmin).0: f32) = Add(move _25, move _26); // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:44: +8:55\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:54: +8:55\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:54: +8:55\n-+         Deinit(((_0 as Ok).0: ViewportPercentageLength)); // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n-+         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 2; // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:39: +8:56\n-+         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n-          goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:+8:55: +8:56\n-      }\n-  \n-      bb9: {\n--         StorageLive(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n-          _45 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n--         _27 = (((*_45) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n--         StorageLive(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n-+         _30 = (((*_45) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:16: +9:19\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n-          _46 = deref_copy (_4.1: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n--         _28 = (((*_46) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n--         StorageLive(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n--         StorageLive(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:47\n--         _30 = _27;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:47\n--         StorageLive(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:50: +9:55\n--         _31 = _28;                       // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:50: +9:55\n--         _29 = Add(move _30, move _31);   // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n--         StorageDead(_31);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:54: +9:55\n--         StorageDead(_30);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:54: +9:55\n--         Deinit(_3);                      // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n--         ((_3 as Vmax).0: f32) = move _29; // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n--         discriminant(_3) = 3;            // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n--         StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n--         StorageDead(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n--         StorageDead(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n-+         _31 = (((*_46) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:28: +9:33\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:47\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:47\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:50: +9:55\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:50: +9:55\n-+         ((((_0 as Ok).0: ViewportPercentageLength) as Vmax).0: f32) = Add(move _30, move _31); // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:44: +9:55\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:54: +9:55\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:54: +9:55\n-+         Deinit(((_0 as Ok).0: ViewportPercentageLength)); // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n-+         discriminant(((_0 as Ok).0: ViewportPercentageLength)) = 3; // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:39: +9:56\n-+         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n-          goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:+9:55: +9:56\n-      }\n-  \n-      bb10: {\n-          Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:5: +11:7\n--         ((_0 as Ok).0: ViewportPercentageLength) = move _3; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:5: +11:7\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:5: +11:7\n-          discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:5: +11:7\n--         StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+11:6: +11:7\n--         StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:1: +12:2\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+11:6: +11:7\n-+         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:1: +12:2\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:2: +12:2\n-      }\n-  \n-      bb11: {\n-          unreachable;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:2: +12:2\n-      }\n-  }\n-  "}, {"sha": "6bc025bb5b204897dc703bc1ddfa995e634377de", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -80,7 +80,7 @@\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:23: +5:24\n           _34 = deref_copy (_4.0: &ViewportPercentageLength); // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n           _11 = discriminant((*_34));      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:14: +5:24\n-          switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb11]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n+          switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:8: +5:24\n       }\n   \n       bb1: {\n@@ -91,14 +91,14 @@\n   \n       bb2: {\n           StorageLive(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:25: +10:27\n-          nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:25: +10:27\n+          Deinit(_33);                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:25: +10:27\n           Deinit(_0);                      // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n-          nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n+          ((_0 as Err).0: ()) = move _33;  // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n           discriminant(_0) = 1;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:21: +10:28\n           StorageDead(_33);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:+10:27: +10:28\n           StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+11:6: +11:7\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:1: +12:2\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:2: +12:2\n+          goto -> bb11;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:2: +12:2\n       }\n   \n       bb3: {\n@@ -221,11 +221,11 @@\n           discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:+5:5: +11:7\n           StorageDead(_3);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+11:6: +11:7\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:1: +12:2\n-          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:2: +12:2\n+          goto -> bb11;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:2: +12:2\n       }\n   \n       bb11: {\n-          unreachable;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:2: +12:2\n+          return;                          // scope 0 at $DIR/early_otherwise_branch_68867.rs:+12:2: +12:2\n       }\n   }\n   "}, {"sha": "9e731c40908790c8a9c30440333ca8bc7c8bbca9", "filename": "src/test/mir-opt/issue-73223.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fissue-73223.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fissue-73223.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -10,4 +10,3 @@ fn main() {\n \n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR issue_73223.main.SimplifyArmIdentity.diff\n-// EMIT_MIR issue_73223.main.PreCodegen.diff"}, {"sha": "be8e86a832cb6af8dff995304fd13afdb17e3146", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "removed", "additions": 0, "deletions": 117, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1,117 +0,0 @@\n-- // MIR for `main` before PreCodegen\n-+ // MIR for `main` after PreCodegen\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:+1:9: +1:14\n-      let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-      let _3: i32;                         // in scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-      let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _6: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _7: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _10: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _11: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _12: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _14: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _15: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _16: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _17: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _18: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _19: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      scope 1 {\n-          debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:+1:9: +1:14\n-          let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:+6:9: +6:14\n-          scope 3 {\n-              debug _prev => _4;           // in scope 3 at $DIR/issue-73223.rs:+6:9: +6:14\n-              let _8: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let _9: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let mut _20: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              scope 4 {\n-                  debug left_val => _8;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  debug right_val => _9;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _13: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  scope 5 {\n-                      debug kind => _13;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  }\n-              }\n-          }\n-      }\n-      scope 2 {\n-          debug v => _3;                   // in scope 2 at $DIR/issue-73223.rs:+2:14: +2:15\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:+1:9: +1:14\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          Deinit(_2);                      // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          StorageLive(_3);                 // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-          _3 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-          _1 = _3;                         // scope 2 at $DIR/issue-73223.rs:+2:20: +2:21\n-          StorageDead(_3);                 // scope 0 at $DIR/issue-73223.rs:+2:20: +2:21\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:+4:6: +4:7\n-          StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:+6:9: +6:14\n-          StorageLive(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _6 = &_1;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _20 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-          _7 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_5);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_5.0: &i32) = move _6;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_5.1: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _8 = (_5.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _9 = (_5.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _12 = (*_8);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _11 = Eq(move _12, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _10 = Not(move _11);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(move _10) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      }\n-  \n-      bb1: {\n-          StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_14);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _16 = _8;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _15 = _16;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_17);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _18 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _17 = _18;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_19);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_19);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_19) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _14 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n-      }\n-  \n-      bb2: {\n-          StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_4);                 // scope 1 at $DIR/issue-73223.rs:+8:1: +8:2\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:+8:1: +8:2\n-          return;                          // scope 0 at $DIR/issue-73223.rs:+8:2: +8:2\n-      }\n-  }\n-  "}, {"sha": "be8e86a832cb6af8dff995304fd13afdb17e3146", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "removed", "additions": 0, "deletions": 117, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1,117 +0,0 @@\n-- // MIR for `main` before PreCodegen\n-+ // MIR for `main` after PreCodegen\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:+0:11: +0:11\n-      let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:+1:9: +1:14\n-      let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-      let _3: i32;                         // in scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-      let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _6: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _7: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _10: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _11: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _12: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _14: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _15: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _16: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _17: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _18: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _19: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      scope 1 {\n-          debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:+1:9: +1:14\n-          let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:+6:9: +6:14\n-          scope 3 {\n-              debug _prev => _4;           // in scope 3 at $DIR/issue-73223.rs:+6:9: +6:14\n-              let _8: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let _9: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              let mut _20: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-              scope 4 {\n-                  debug left_val => _8;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  debug right_val => _9;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _13: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  scope 5 {\n-                      debug kind => _13;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  }\n-              }\n-          }\n-      }\n-      scope 2 {\n-          debug v => _3;                   // in scope 2 at $DIR/issue-73223.rs:+2:14: +2:15\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:+1:9: +1:14\n-          StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          Deinit(_2);                      // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n-          StorageLive(_3);                 // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-          _3 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n-          _1 = _3;                         // scope 2 at $DIR/issue-73223.rs:+2:20: +2:21\n-          StorageDead(_3);                 // scope 0 at $DIR/issue-73223.rs:+2:20: +2:21\n-          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:+4:6: +4:7\n-          StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:+6:9: +6:14\n-          StorageLive(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _6 = &_1;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _20 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n-          _7 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_5);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_5.0: &i32) = move _6;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_5.1: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _8 = (_5.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _9 = (_5.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _12 = (*_8);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _11 = Eq(move _12, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _10 = Not(move _11);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          switchInt(move _10) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      }\n-  \n-      bb1: {\n-          StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_14);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _16 = _8;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _15 = _16;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_17);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _18 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _17 = _18;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_19);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_19);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          discriminant(_19) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _14 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n-      }\n-  \n-      bb2: {\n-          StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_4);                 // scope 1 at $DIR/issue-73223.rs:+8:1: +8:2\n-          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:+8:1: +8:2\n-          return;                          // scope 0 at $DIR/issue-73223.rs:+8:2: +8:2\n-      }\n-  }\n-  "}, {"sha": "2589c9f282f33676bf9e36803bb1320454c3bdec", "filename": "src/test/mir-opt/lower_array_len.array_bound.InstCombine.diff", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.InstCombine.diff?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1,66 +0,0 @@\n-- // MIR for `array_bound` before InstCombine\n-+ // MIR for `array_bound` after InstCombine\n-  \n-  fn array_bound(_1: usize, _2: &[u8; N]) -> u8 {\n-      debug index => _1;                   // in scope 0 at $DIR/lower_array_len.rs:+0:36: +0:41\n-      debug slice => _2;                   // in scope 0 at $DIR/lower_array_len.rs:+0:50: +0:55\n-      let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len.rs:+0:70: +0:72\n-      let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n-      let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len.rs:+1:8: +1:13\n-      let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-      let mut _6: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-      let mut _7: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-      let _8: usize;                       // in scope 0 at $DIR/lower_array_len.rs:+2:15: +2:20\n-      let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-      let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-      let mut _11: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-  \n-      bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n-          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:13\n-          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:13\n-          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-          StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-          StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n--         _7 = &(*_2);                     // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-+         _7 = _2;                         // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-          StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-          _11 = _7;                        // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-          _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-          StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:+1:20: +1:21\n--         _5 = Len((*_11));                // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-+         _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-          StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-          StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:+1:26: +1:27\n-          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n-          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:+1:26: +1:27\n-          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:26: +1:27\n-          switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n-      }\n-  \n-      bb1: {\n-          StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:+2:15: +2:20\n-          _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:+2:15: +2:20\n--         _9 = Len((*_2));                 // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-+         _9 = const N;                    // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-          _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-          assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb2; // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-      }\n-  \n-      bb2: {\n-          _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-          StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:+3:5: +3:6\n-          goto -> bb4;                     // scope 0 at $DIR/lower_array_len.rs:+1:5: +5:6\n-      }\n-  \n-      bb3: {\n-          _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len.rs:+4:9: +4:11\n-          goto -> bb4;                     // scope 0 at $DIR/lower_array_len.rs:+1:5: +5:6\n-      }\n-  \n-      bb4: {\n-          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:+5:5: +5:6\n-          return;                          // scope 0 at $DIR/lower_array_len.rs:+6:2: +6:2\n-      }\n-  }\n-  "}, {"sha": "8312db6b37b350f78e22f1dc7eeca5b5b47141ad", "filename": "src/test/mir-opt/lower_array_len.array_bound.SimplifyLocals.diff", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound.SimplifyLocals.diff?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1,70 +0,0 @@\n-- // MIR for `array_bound` before SimplifyLocals\n-+ // MIR for `array_bound` after SimplifyLocals\n-  \n-  fn array_bound(_1: usize, _2: &[u8; N]) -> u8 {\n-      debug index => _1;                   // in scope 0 at $DIR/lower_array_len.rs:+0:36: +0:41\n-      debug slice => _2;                   // in scope 0 at $DIR/lower_array_len.rs:+0:50: +0:55\n-      let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len.rs:+0:70: +0:72\n-      let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n-      let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len.rs:+1:8: +1:13\n-      let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n--     let mut _6: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n--     let mut _7: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n--     let _8: usize;                       // in scope 0 at $DIR/lower_array_len.rs:+2:15: +2:20\n--     let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n--     let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n--     let mut _11: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-+     let _6: usize;                       // in scope 0 at $DIR/lower_array_len.rs:+2:15: +2:20\n-+     let mut _7: usize;                   // in scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-+     let mut _8: bool;                    // in scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-  \n-      bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n-          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:13\n-          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:13\n-          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n--         StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n--         StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n--         StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n--         StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:+1:20: +1:21\n-          _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n--         StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n--         StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:+1:26: +1:27\n-          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n-          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:+1:26: +1:27\n-          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:26: +1:27\n-          switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n-      }\n-  \n-      bb1: {\n--         StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:+2:15: +2:20\n--         _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:+2:15: +2:20\n--         _9 = const N;                    // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n--         _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n--         assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb2; // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-+         StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:+2:15: +2:20\n-+         _6 = _1;                         // scope 0 at $DIR/lower_array_len.rs:+2:15: +2:20\n-+         _7 = const N;                    // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-+         _8 = Lt(_6, _7);                 // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-+         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb2; // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-      }\n-  \n-      bb2: {\n--         _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n--         StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:+3:5: +3:6\n-+         _0 = (*_2)[_6];                  // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-+         StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:+3:5: +3:6\n-          goto -> bb4;                     // scope 0 at $DIR/lower_array_len.rs:+1:5: +5:6\n-      }\n-  \n-      bb3: {\n-          _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len.rs:+4:9: +4:11\n-          goto -> bb4;                     // scope 0 at $DIR/lower_array_len.rs:+1:5: +5:6\n-      }\n-  \n-      bb4: {\n-          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:+5:5: +5:6\n-          return;                          // scope 0 at $DIR/lower_array_len.rs:+6:2: +6:2\n-      }\n-  }\n-  "}, {"sha": "401d4bac61e008f7bf3050eb67bc974736e8cc52", "filename": "src/test/mir-opt/lower_array_len.array_bound_mut.InstCombine.diff", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.InstCombine.diff?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1,79 +0,0 @@\n-- // MIR for `array_bound_mut` before InstCombine\n-+ // MIR for `array_bound_mut` after InstCombine\n-  \n-  fn array_bound_mut(_1: usize, _2: &mut [u8; N]) -> u8 {\n-      debug index => _1;                   // in scope 0 at $DIR/lower_array_len.rs:+0:40: +0:45\n-      debug slice => _2;                   // in scope 0 at $DIR/lower_array_len.rs:+0:54: +0:59\n-      let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len.rs:+0:78: +0:80\n-      let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n-      let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len.rs:+1:8: +1:13\n-      let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-      let mut _6: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-      let mut _7: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-      let _8: usize;                       // in scope 0 at $DIR/lower_array_len.rs:+2:15: +2:20\n-      let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-      let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-      let _11: usize;                      // in scope 0 at $DIR/lower_array_len.rs:+4:15: +4:16\n-      let mut _12: usize;                  // in scope 0 at $DIR/lower_array_len.rs:+4:9: +4:17\n-      let mut _13: bool;                   // in scope 0 at $DIR/lower_array_len.rs:+4:9: +4:17\n-      let mut _14: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-  \n-      bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n-          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:13\n-          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:13\n-          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-          StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-          StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-          _7 = &(*_2);                     // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-          StorageLive(_14);                // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-          _14 = _7;                        // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-          _6 = move _7 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-          StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:+1:20: +1:21\n--         _5 = Len((*_14));                // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-+         _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-          StorageDead(_14);                // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-          StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:+1:26: +1:27\n-          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n-          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:+1:26: +1:27\n-          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:26: +1:27\n-          switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n-      }\n-  \n-      bb1: {\n-          StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:+2:15: +2:20\n-          _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:+2:15: +2:20\n--         _9 = Len((*_2));                 // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-+         _9 = const N;                    // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-          _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-          assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb2; // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-      }\n-  \n-      bb2: {\n-          _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-          StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:+3:5: +3:6\n-          goto -> bb5;                     // scope 0 at $DIR/lower_array_len.rs:+1:5: +7:6\n-      }\n-  \n-      bb3: {\n-          StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:+4:15: +4:16\n-          _11 = const 0_usize;             // scope 0 at $DIR/lower_array_len.rs:+4:15: +4:16\n--         _12 = Len((*_2));                // scope 0 at $DIR/lower_array_len.rs:+4:9: +4:17\n-+         _12 = const N;                   // scope 0 at $DIR/lower_array_len.rs:+4:9: +4:17\n-          _13 = Lt(_11, _12);              // scope 0 at $DIR/lower_array_len.rs:+4:9: +4:17\n-          assert(move _13, \"index out of bounds: the length is {} but the index is {}\", move _12, _11) -> bb4; // scope 0 at $DIR/lower_array_len.rs:+4:9: +4:17\n-      }\n-  \n-      bb4: {\n-          (*_2)[_11] = const 42_u8;        // scope 0 at $DIR/lower_array_len.rs:+4:9: +4:22\n-          StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:+4:22: +4:23\n-          _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len.rs:+6:9: +6:11\n-          goto -> bb5;                     // scope 0 at $DIR/lower_array_len.rs:+1:5: +7:6\n-      }\n-  \n-      bb5: {\n-          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:+7:5: +7:6\n-          return;                          // scope 0 at $DIR/lower_array_len.rs:+8:2: +8:2\n-      }\n-  }\n-  "}, {"sha": "4f241d7c9064b34f3f538a73659c667c33ddbc8c", "filename": "src/test/mir-opt/lower_array_len.array_bound_mut.SimplifyLocals.diff", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_bound_mut.SimplifyLocals.diff?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1,93 +0,0 @@\n-- // MIR for `array_bound_mut` before SimplifyLocals\n-+ // MIR for `array_bound_mut` after SimplifyLocals\n-  \n-  fn array_bound_mut(_1: usize, _2: &mut [u8; N]) -> u8 {\n-      debug index => _1;                   // in scope 0 at $DIR/lower_array_len.rs:+0:40: +0:45\n-      debug slice => _2;                   // in scope 0 at $DIR/lower_array_len.rs:+0:54: +0:59\n-      let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len.rs:+0:78: +0:80\n-      let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n-      let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len.rs:+1:8: +1:13\n-      let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n--     let mut _6: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n--     let mut _7: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n--     let _8: usize;                       // in scope 0 at $DIR/lower_array_len.rs:+2:15: +2:20\n--     let mut _9: usize;                   // in scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n--     let mut _10: bool;                   // in scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n--     let _11: usize;                      // in scope 0 at $DIR/lower_array_len.rs:+4:15: +4:16\n--     let mut _12: usize;                  // in scope 0 at $DIR/lower_array_len.rs:+4:9: +4:17\n--     let mut _13: bool;                   // in scope 0 at $DIR/lower_array_len.rs:+4:9: +4:17\n--     let mut _14: &[u8; N];               // in scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n-+     let _6: usize;                       // in scope 0 at $DIR/lower_array_len.rs:+2:15: +2:20\n-+     let mut _7: usize;                   // in scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-+     let mut _8: bool;                    // in scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-+     let _9: usize;                       // in scope 0 at $DIR/lower_array_len.rs:+4:15: +4:16\n-+     let mut _10: usize;                  // in scope 0 at $DIR/lower_array_len.rs:+4:9: +4:17\n-+     let mut _11: bool;                   // in scope 0 at $DIR/lower_array_len.rs:+4:9: +4:17\n-  \n-      bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n-          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:13\n-          _4 = _1;                         // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:13\n-          StorageLive(_5);                 // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n--         StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n--         StorageLive(_7);                 // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n--         StorageLive(_14);                // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n--         StorageDead(_7);                 // scope 0 at $DIR/lower_array_len.rs:+1:20: +1:21\n-          _5 = const N;                    // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n--         StorageDead(_14);                // scope 0 at $DIR/lower_array_len.rs:+1:16: +1:27\n--         StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:+1:26: +1:27\n-          _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n-          StorageDead(_5);                 // scope 0 at $DIR/lower_array_len.rs:+1:26: +1:27\n-          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:26: +1:27\n-          switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len.rs:+1:8: +1:27\n-      }\n-  \n-      bb1: {\n--         StorageLive(_8);                 // scope 0 at $DIR/lower_array_len.rs:+2:15: +2:20\n--         _8 = _1;                         // scope 0 at $DIR/lower_array_len.rs:+2:15: +2:20\n--         _9 = const N;                    // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n--         _10 = Lt(_8, _9);                // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n--         assert(move _10, \"index out of bounds: the length is {} but the index is {}\", move _9, _8) -> bb2; // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-+         StorageLive(_6);                 // scope 0 at $DIR/lower_array_len.rs:+2:15: +2:20\n-+         _6 = _1;                         // scope 0 at $DIR/lower_array_len.rs:+2:15: +2:20\n-+         _7 = const N;                    // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-+         _8 = Lt(_6, _7);                 // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-+         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb2; // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-      }\n-  \n-      bb2: {\n--         _0 = (*_2)[_8];                  // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n--         StorageDead(_8);                 // scope 0 at $DIR/lower_array_len.rs:+3:5: +3:6\n-+         _0 = (*_2)[_6];                  // scope 0 at $DIR/lower_array_len.rs:+2:9: +2:21\n-+         StorageDead(_6);                 // scope 0 at $DIR/lower_array_len.rs:+3:5: +3:6\n-          goto -> bb5;                     // scope 0 at $DIR/lower_array_len.rs:+1:5: +7:6\n-      }\n-  \n-      bb3: {\n--         StorageLive(_11);                // scope 0 at $DIR/lower_array_len.rs:+4:15: +4:16\n--         _11 = const 0_usize;             // scope 0 at $DIR/lower_array_len.rs:+4:15: +4:16\n--         _12 = const N;                   // scope 0 at $DIR/lower_array_len.rs:+4:9: +4:17\n--         _13 = Lt(const 0_usize, _12);    // scope 0 at $DIR/lower_array_len.rs:+4:9: +4:17\n--         assert(move _13, \"index out of bounds: the length is {} but the index is {}\", move _12, const 0_usize) -> bb4; // scope 0 at $DIR/lower_array_len.rs:+4:9: +4:17\n-+         StorageLive(_9);                 // scope 0 at $DIR/lower_array_len.rs:+4:15: +4:16\n-+         _9 = const 0_usize;              // scope 0 at $DIR/lower_array_len.rs:+4:15: +4:16\n-+         _10 = const N;                   // scope 0 at $DIR/lower_array_len.rs:+4:9: +4:17\n-+         _11 = Lt(const 0_usize, _10);    // scope 0 at $DIR/lower_array_len.rs:+4:9: +4:17\n-+         assert(move _11, \"index out of bounds: the length is {} but the index is {}\", move _10, const 0_usize) -> bb4; // scope 0 at $DIR/lower_array_len.rs:+4:9: +4:17\n-      }\n-  \n-      bb4: {\n--         (*_2)[_11] = const 42_u8;        // scope 0 at $DIR/lower_array_len.rs:+4:9: +4:22\n--         StorageDead(_11);                // scope 0 at $DIR/lower_array_len.rs:+4:22: +4:23\n-+         (*_2)[_9] = const 42_u8;         // scope 0 at $DIR/lower_array_len.rs:+4:9: +4:22\n-+         StorageDead(_9);                 // scope 0 at $DIR/lower_array_len.rs:+4:22: +4:23\n-          _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len.rs:+6:9: +6:11\n-          goto -> bb5;                     // scope 0 at $DIR/lower_array_len.rs:+1:5: +7:6\n-      }\n-  \n-      bb5: {\n-          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:+7:5: +7:6\n-          return;                          // scope 0 at $DIR/lower_array_len.rs:+8:2: +8:2\n-      }\n-  }\n-  "}, {"sha": "26f45be17be6f85b8950b30af0168330aa86b8d4", "filename": "src/test/mir-opt/lower_array_len.array_len.InstCombine.diff", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.InstCombine.diff?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1,27 +0,0 @@\n-- // MIR for `array_len` before InstCombine\n-+ // MIR for `array_len` after InstCombine\n-  \n-  fn array_len(_1: &[u8; N]) -> usize {\n-      debug arr => _1;                     // in scope 0 at $DIR/lower_array_len.rs:+0:34: +0:37\n-      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:+0:52: +0:57\n-      let mut _2: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-      let mut _3: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-      let mut _4: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n--         _3 = &(*_1);                     // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-+         _3 = _1;                         // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-          _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-          _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:7: +1:8\n--         _0 = Len((*_4));                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-+         _0 = const N;                    // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-          StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:+1:13: +1:14\n-          return;                          // scope 0 at $DIR/lower_array_len.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "09d571d20a369771fb35fea15735584a789b51b0", "filename": "src/test/mir-opt/lower_array_len.array_len.SimplifyLocals.diff", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len.SimplifyLocals.diff?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1,22 +0,0 @@\n-- // MIR for `array_len` before SimplifyLocals\n-+ // MIR for `array_len` after SimplifyLocals\n-  \n-  fn array_len(_1: &[u8; N]) -> usize {\n-      debug arr => _1;                     // in scope 0 at $DIR/lower_array_len.rs:+0:34: +0:37\n-      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:+0:52: +0:57\n--     let mut _2: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n--     let mut _3: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n--     let mut _4: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-  \n-      bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n--         StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n--         StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n--         StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:7: +1:8\n-          _0 = const N;                    // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n--         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n--         StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:+1:13: +1:14\n-          return;                          // scope 0 at $DIR/lower_array_len.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "843da758deb1c3cea8b244c8cb116e41d8e737df", "filename": "src/test/mir-opt/lower_array_len.array_len_by_value.InstCombine.diff", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.InstCombine.diff?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1,26 +0,0 @@\n-- // MIR for `array_len_by_value` before InstCombine\n-+ // MIR for `array_len_by_value` after InstCombine\n-  \n-  fn array_len_by_value(_1: [u8; N]) -> usize {\n-      debug arr => _1;                     // in scope 0 at $DIR/lower_array_len.rs:+0:43: +0:46\n-      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:+0:60: +0:65\n-      let mut _2: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-      let mut _3: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-      let mut _4: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-          StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-          _3 = &_1;                        // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-          StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-          _4 = _3;                         // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-          _2 = move _3 as &[u8] (Pointer(Unsize)); // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-          StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:7: +1:8\n--         _0 = Len((*_4));                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-+         _0 = const N;                    // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-          StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-          StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:+1:13: +1:14\n-          return;                          // scope 0 at $DIR/lower_array_len.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "dc1c00b69c138403b43069cf0227879ba77a8c69", "filename": "src/test/mir-opt/lower_array_len.array_len_by_value.SimplifyLocals.diff", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.array_len_by_value.SimplifyLocals.diff?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1,22 +0,0 @@\n-- // MIR for `array_len_by_value` before SimplifyLocals\n-+ // MIR for `array_len_by_value` after SimplifyLocals\n-  \n-  fn array_len_by_value(_1: [u8; N]) -> usize {\n-      debug arr => _1;                     // in scope 0 at $DIR/lower_array_len.rs:+0:43: +0:46\n-      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len.rs:+0:60: +0:65\n--     let mut _2: &[u8];                   // in scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n--     let mut _3: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n--     let mut _4: &[u8; N];                // in scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n-  \n-      bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n--         StorageLive(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n--         StorageLive(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n--         StorageDead(_3);                 // scope 0 at $DIR/lower_array_len.rs:+1:7: +1:8\n-          _0 = const N;                    // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n--         StorageDead(_4);                 // scope 0 at $DIR/lower_array_len.rs:+1:5: +1:14\n--         StorageDead(_2);                 // scope 0 at $DIR/lower_array_len.rs:+1:13: +1:14\n-          return;                          // scope 0 at $DIR/lower_array_len.rs:+2:2: +2:2\n-      }\n-  }\n-  "}, {"sha": "ea0224b21d72d769972aef5f75c3c0876ae8b495", "filename": "src/test/mir-opt/lower_array_len.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -1,8 +1,7 @@\n-// compile-flags: -Z mir-opt-level=4\n+// unit-test: NormalizeArrayLen\n+// compile-flags: -Zmir-enable-passes=+LowerSliceLenCalls\n \n // EMIT_MIR lower_array_len.array_bound.NormalizeArrayLen.diff\n-// EMIT_MIR lower_array_len.array_bound.SimplifyLocals.diff\n-// EMIT_MIR lower_array_len.array_bound.InstCombine.diff\n pub fn array_bound<const N: usize>(index: usize, slice: &[u8; N]) -> u8 {\n     if index < slice.len() {\n         slice[index]\n@@ -12,8 +11,6 @@ pub fn array_bound<const N: usize>(index: usize, slice: &[u8; N]) -> u8 {\n }\n \n // EMIT_MIR lower_array_len.array_bound_mut.NormalizeArrayLen.diff\n-// EMIT_MIR lower_array_len.array_bound_mut.SimplifyLocals.diff\n-// EMIT_MIR lower_array_len.array_bound_mut.InstCombine.diff\n pub fn array_bound_mut<const N: usize>(index: usize, slice: &mut [u8; N]) -> u8 {\n     if index < slice.len() {\n         slice[index]\n@@ -25,15 +22,11 @@ pub fn array_bound_mut<const N: usize>(index: usize, slice: &mut [u8; N]) -> u8\n }\n \n // EMIT_MIR lower_array_len.array_len.NormalizeArrayLen.diff\n-// EMIT_MIR lower_array_len.array_len.SimplifyLocals.diff\n-// EMIT_MIR lower_array_len.array_len.InstCombine.diff\n pub fn array_len<const N: usize>(arr: &[u8; N]) -> usize {\n     arr.len()\n }\n \n // EMIT_MIR lower_array_len.array_len_by_value.NormalizeArrayLen.diff\n-// EMIT_MIR lower_array_len.array_len_by_value.SimplifyLocals.diff\n-// EMIT_MIR lower_array_len.array_len_by_value.InstCombine.diff\n pub fn array_len_by_value<const N: usize>(arr: [u8; N]) -> usize {\n     arr.len()\n }"}, {"sha": "2c6c93cb1d83bdcad652bbc2c913c4bf12abacba", "filename": "src/test/mir-opt/lower_array_len_e2e.array_bound.PreCodegen.after.mir", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.array_bound.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.array_bound.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.array_bound.PreCodegen.after.mir?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -0,0 +1,49 @@\n+// MIR for `array_bound` after PreCodegen\n+\n+fn array_bound(_1: usize, _2: &[u8; N]) -> u8 {\n+    debug index => _1;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+0:36: +0:41\n+    debug slice => _2;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+0:50: +0:55\n+    let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len_e2e.rs:+0:70: +0:72\n+    let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n+    let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:13\n+    let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n+    let _6: usize;                       // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:15: +2:20\n+    let mut _7: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+    let mut _8: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+\n+    bb0: {\n+        StorageLive(_3);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n+        StorageLive(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:13\n+        _4 = _1;                         // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:13\n+        StorageLive(_5);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n+        _5 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n+        _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n+        StorageDead(_5);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:26: +1:27\n+        StorageDead(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:26: +1:27\n+        switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n+    }\n+\n+    bb1: {\n+        StorageLive(_6);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+2:15: +2:20\n+        _6 = _1;                         // scope 0 at $DIR/lower_array_len_e2e.rs:+2:15: +2:20\n+        _7 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+        _8 = Lt(_6, _7);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+        assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb2; // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+    }\n+\n+    bb2: {\n+        _0 = (*_2)[_6];                  // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+        StorageDead(_6);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+3:5: +3:6\n+        goto -> bb4;                     // scope 0 at $DIR/lower_array_len_e2e.rs:+1:5: +5:6\n+    }\n+\n+    bb3: {\n+        _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:11\n+        goto -> bb4;                     // scope 0 at $DIR/lower_array_len_e2e.rs:+1:5: +5:6\n+    }\n+\n+    bb4: {\n+        StorageDead(_3);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+5:5: +5:6\n+        return;                          // scope 0 at $DIR/lower_array_len_e2e.rs:+6:2: +6:2\n+    }\n+}"}, {"sha": "aee3a8242cdda8543715cc5e4ac98e586366f5db", "filename": "src/test/mir-opt/lower_array_len_e2e.array_bound_mut.PreCodegen.after.mir", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.array_bound_mut.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.array_bound_mut.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.array_bound_mut.PreCodegen.after.mir?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -0,0 +1,62 @@\n+// MIR for `array_bound_mut` after PreCodegen\n+\n+fn array_bound_mut(_1: usize, _2: &mut [u8; N]) -> u8 {\n+    debug index => _1;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+0:40: +0:45\n+    debug slice => _2;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+0:54: +0:59\n+    let mut _0: u8;                      // return place in scope 0 at $DIR/lower_array_len_e2e.rs:+0:78: +0:80\n+    let mut _3: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n+    let mut _4: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:13\n+    let mut _5: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n+    let _6: usize;                       // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:15: +2:20\n+    let mut _7: usize;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+    let mut _8: bool;                    // in scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+    let _9: usize;                       // in scope 0 at $DIR/lower_array_len_e2e.rs:+4:15: +4:16\n+    let mut _10: usize;                  // in scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n+    let mut _11: bool;                   // in scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n+\n+    bb0: {\n+        StorageLive(_3);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n+        StorageLive(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:13\n+        _4 = _1;                         // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:13\n+        StorageLive(_5);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n+        _5 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+1:16: +1:27\n+        _3 = Lt(move _4, move _5);       // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n+        StorageDead(_5);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:26: +1:27\n+        StorageDead(_4);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+1:26: +1:27\n+        switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 0 at $DIR/lower_array_len_e2e.rs:+1:8: +1:27\n+    }\n+\n+    bb1: {\n+        StorageLive(_6);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+2:15: +2:20\n+        _6 = _1;                         // scope 0 at $DIR/lower_array_len_e2e.rs:+2:15: +2:20\n+        _7 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+        _8 = Lt(_6, _7);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+        assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb2; // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+    }\n+\n+    bb2: {\n+        _0 = (*_2)[_6];                  // scope 0 at $DIR/lower_array_len_e2e.rs:+2:9: +2:21\n+        StorageDead(_6);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+3:5: +3:6\n+        goto -> bb5;                     // scope 0 at $DIR/lower_array_len_e2e.rs:+1:5: +7:6\n+    }\n+\n+    bb3: {\n+        StorageLive(_9);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+4:15: +4:16\n+        _9 = const 0_usize;              // scope 0 at $DIR/lower_array_len_e2e.rs:+4:15: +4:16\n+        _10 = const N;                   // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n+        _11 = Lt(const 0_usize, _10);    // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n+        assert(move _11, \"index out of bounds: the length is {} but the index is {}\", move _10, const 0_usize) -> bb4; // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:17\n+    }\n+\n+    bb4: {\n+        (*_2)[_9] = const 42_u8;         // scope 0 at $DIR/lower_array_len_e2e.rs:+4:9: +4:22\n+        StorageDead(_9);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+4:22: +4:23\n+        _0 = const 42_u8;                // scope 0 at $DIR/lower_array_len_e2e.rs:+6:9: +6:11\n+        goto -> bb5;                     // scope 0 at $DIR/lower_array_len_e2e.rs:+1:5: +7:6\n+    }\n+\n+    bb5: {\n+        StorageDead(_3);                 // scope 0 at $DIR/lower_array_len_e2e.rs:+7:5: +7:6\n+        return;                          // scope 0 at $DIR/lower_array_len_e2e.rs:+8:2: +8:2\n+    }\n+}"}, {"sha": "4b19f6795588960697bef697eaee8f8cbd6010bb", "filename": "src/test/mir-opt/lower_array_len_e2e.array_len.PreCodegen.after.mir", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.array_len.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.array_len.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.array_len.PreCodegen.after.mir?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -0,0 +1,11 @@\n+// MIR for `array_len` after PreCodegen\n+\n+fn array_len(_1: &[u8; N]) -> usize {\n+    debug arr => _1;                     // in scope 0 at $DIR/lower_array_len_e2e.rs:+0:34: +0:37\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len_e2e.rs:+0:52: +0:57\n+\n+    bb0: {\n+        _0 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+1:5: +1:14\n+        return;                          // scope 0 at $DIR/lower_array_len_e2e.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "4dc0ba9a268ea1bf8a35d024eff98b70eddc87a3", "filename": "src/test/mir-opt/lower_array_len_e2e.array_len_by_value.PreCodegen.after.mir", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.array_len_by_value.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.array_len_by_value.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.array_len_by_value.PreCodegen.after.mir?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -0,0 +1,11 @@\n+// MIR for `array_len_by_value` after PreCodegen\n+\n+fn array_len_by_value(_1: [u8; N]) -> usize {\n+    debug arr => _1;                     // in scope 0 at $DIR/lower_array_len_e2e.rs:+0:43: +0:46\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/lower_array_len_e2e.rs:+0:60: +0:65\n+\n+    bb0: {\n+        _0 = const N;                    // scope 0 at $DIR/lower_array_len_e2e.rs:+1:5: +1:14\n+        return;                          // scope 0 at $DIR/lower_array_len_e2e.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "49b35d509f029ee3ae2036e2fee992f399094327", "filename": "src/test/mir-opt/lower_array_len_e2e.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -0,0 +1,39 @@\n+// compile-flags: -Z mir-opt-level=4\n+\n+// EMIT_MIR lower_array_len_e2e.array_bound.PreCodegen.after.mir\n+pub fn array_bound<const N: usize>(index: usize, slice: &[u8; N]) -> u8 {\n+    if index < slice.len() {\n+        slice[index]\n+    } else {\n+        42\n+    }\n+}\n+\n+// EMIT_MIR lower_array_len_e2e.array_bound_mut.PreCodegen.after.mir\n+pub fn array_bound_mut<const N: usize>(index: usize, slice: &mut [u8; N]) -> u8 {\n+    if index < slice.len() {\n+        slice[index]\n+    } else {\n+        slice[0] = 42;\n+\n+        42\n+    }\n+}\n+\n+// EMIT_MIR lower_array_len_e2e.array_len.PreCodegen.after.mir\n+pub fn array_len<const N: usize>(arr: &[u8; N]) -> usize {\n+    arr.len()\n+}\n+\n+// EMIT_MIR lower_array_len_e2e.array_len_by_value.PreCodegen.after.mir\n+pub fn array_len_by_value<const N: usize>(arr: [u8; N]) -> usize {\n+    arr.len()\n+}\n+\n+fn main() {\n+    let _ = array_bound(3, &[0, 1, 2, 3]);\n+    let mut tmp = [0, 1, 2, 3, 4];\n+    let _ = array_bound_mut(3, &mut [0, 1, 2, 3]);\n+    let _ = array_len(&[0]);\n+    let _ = array_len_by_value([0, 2]);\n+}"}, {"sha": "3389db733b992a3a0576e83bae9c2d04a0490348", "filename": "src/test/mir-opt/lower_intrinsics.align_of.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -7,7 +7,7 @@\n       bb0: {\n -         _0 = std::intrinsics::min_align_of::<T>() -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:42\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:19:5: 19:40\n+-                                          // + span: $DIR/lower_intrinsics.rs:21:5: 21:40\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::min_align_of::<T>}, val: Value(<ZST>) }\n +         _0 = AlignOf(T);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:42\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:42"}, {"sha": "f92ff9faf979686efb80d8edd3b0ba4def816b80", "filename": "src/test/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -31,7 +31,7 @@\n           _3 = &(*_4);                     // scope 0 at $DIR/lower_intrinsics.rs:+1:42: +1:44\n -         _2 = discriminant_value::<T>(move _3) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:45\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:74:5: 74:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:49:5: 49:41\n -                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r T) -> <T as DiscriminantKind>::Discriminant {discriminant_value::<T>}, val: Value(<ZST>) }\n +         _2 = discriminant((*_3));        // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:45\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:45\n@@ -46,13 +46,13 @@\n           StorageLive(_7);                 // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n           _19 = const discriminant::<T>::promoted[2]; // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n                                            // mir::Constant\n-                                           // + span: $DIR/lower_intrinsics.rs:75:42: 75:44\n+                                           // + span: $DIR/lower_intrinsics.rs:50:42: 50:44\n                                            // + literal: Const { ty: &i32, val: Unevaluated(discriminant, [T], Some(promoted[2])) }\n           _7 = &(*_19);                    // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n           _6 = &(*_7);                     // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n -         _5 = discriminant_value::<i32>(move _6) -> bb2; // scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:45\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:75:5: 75:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:50:5: 50:41\n -                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r i32) -> <i32 as DiscriminantKind>::Discriminant {discriminant_value::<i32>}, val: Value(<ZST>) }\n +         _5 = discriminant((*_6));        // scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:45\n +         goto -> bb2;                     // scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:45\n@@ -67,13 +67,13 @@\n           StorageLive(_11);                // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n           _18 = const discriminant::<T>::promoted[1]; // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n                                            // mir::Constant\n-                                           // + span: $DIR/lower_intrinsics.rs:76:42: 76:45\n+                                           // + span: $DIR/lower_intrinsics.rs:51:42: 51:45\n                                            // + literal: Const { ty: &(), val: Unevaluated(discriminant, [T], Some(promoted[1])) }\n           _11 = &(*_18);                   // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n           _10 = &(*_11);                   // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n -         _9 = discriminant_value::<()>(move _10) -> bb3; // scope 0 at $DIR/lower_intrinsics.rs:+3:5: +3:46\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:76:5: 76:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:51:5: 51:41\n -                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r ()) -> <() as DiscriminantKind>::Discriminant {discriminant_value::<()>}, val: Value(<ZST>) }\n +         _9 = discriminant((*_10));       // scope 0 at $DIR/lower_intrinsics.rs:+3:5: +3:46\n +         goto -> bb3;                     // scope 0 at $DIR/lower_intrinsics.rs:+3:5: +3:46\n@@ -88,13 +88,13 @@\n           StorageLive(_15);                // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n           _17 = const discriminant::<T>::promoted[0]; // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n                                            // mir::Constant\n-                                           // + span: $DIR/lower_intrinsics.rs:77:42: 77:47\n+                                           // + span: $DIR/lower_intrinsics.rs:52:42: 52:47\n                                            // + literal: Const { ty: &E, val: Unevaluated(discriminant, [T], Some(promoted[0])) }\n           _15 = &(*_17);                   // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n           _14 = &(*_15);                   // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n -         _13 = discriminant_value::<E>(move _14) -> bb4; // scope 0 at $DIR/lower_intrinsics.rs:+4:5: +4:48\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:77:5: 77:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:52:5: 52:41\n -                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r E) -> <E as DiscriminantKind>::Discriminant {discriminant_value::<E>}, val: Value(<ZST>) }\n +         _13 = discriminant((*_14));      // scope 0 at $DIR/lower_intrinsics.rs:+4:5: +4:48\n +         goto -> bb4;                     // scope 0 at $DIR/lower_intrinsics.rs:+4:5: +4:48\n@@ -105,11 +105,15 @@\n           StorageDead(_15);                // scope 0 at $DIR/lower_intrinsics.rs:+4:48: +4:49\n           StorageDead(_13);                // scope 0 at $DIR/lower_intrinsics.rs:+4:48: +4:49\n           _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:+0:30: +5:2\n-          drop(_1) -> bb5;                 // scope 0 at $DIR/lower_intrinsics.rs:+5:1: +5:2\n+          drop(_1) -> [return: bb5, unwind: bb6]; // scope 0 at $DIR/lower_intrinsics.rs:+5:1: +5:2\n       }\n   \n       bb5: {\n           return;                          // scope 0 at $DIR/lower_intrinsics.rs:+5:2: +5:2\n       }\n+  \n+      bb6 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:+0:1: +5:2\n+      }\n   }\n   "}, {"sha": "4cbbc02c94333514a9091517956216b63945092f", "filename": "src/test/mir-opt/lower_intrinsics.forget.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -11,7 +11,7 @@\n           _2 = move _1;                    // scope 0 at $DIR/lower_intrinsics.rs:+1:30: +1:31\n -         _0 = std::intrinsics::forget::<T>(move _2) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:32\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:24:5: 24:29\n+-                                          // + span: $DIR/lower_intrinsics.rs:26:5: 26:29\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(T) {std::intrinsics::forget::<T>}, val: Value(<ZST>) }\n +         _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:32\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:32"}, {"sha": "d8cd5f59a3532fa0bcf496c6502ecae349ddbaa6", "filename": "src/test/mir-opt/lower_intrinsics.non_const.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -13,7 +13,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+2:9: +2:18\n           _1 = std::intrinsics::size_of::<T>; // scope 0 at $DIR/lower_intrinsics.rs:+2:21: +2:51\n                                            // mir::Constant\n-                                           // + span: $DIR/lower_intrinsics.rs:62:21: 62:51\n+                                           // + span: $DIR/lower_intrinsics.rs:37:21: 37:51\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::size_of::<T>}, val: Value(<ZST>) }\n           StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+3:5: +3:14\n           _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+3:5: +3:14"}, {"sha": "195543d42bb5ba157b8a46c5d2b5fed5c1a96a13", "filename": "src/test/mir-opt/lower_intrinsics.rs", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -1,4 +1,6 @@\n-// compile-flags: -Cpanic=abort\n+// unit-test: LowerIntrinsics\n+// ignore-wasm32 compiled with panic=abort by default\n+\n #![feature(core_intrinsics)]\n #![crate_type = \"lib\"]\n \n@@ -29,33 +31,6 @@ pub fn unreachable() -> ! {\n     unsafe { core::intrinsics::unreachable() };\n }\n \n-// EMIT_MIR lower_intrinsics.f_unit.PreCodegen.before.mir\n-pub fn f_unit() {\n-    f_dispatch(());\n-}\n-\n-\n-// EMIT_MIR lower_intrinsics.f_u64.PreCodegen.before.mir\n-pub fn f_u64() {\n-    f_dispatch(0u64);\n-}\n-\n-#[inline(always)]\n-pub fn f_dispatch<T>(t: T) {\n-    if std::mem::size_of::<T>() == 0 {\n-        f_zst(t);\n-    } else {\n-        f_non_zst(t);\n-    }\n-}\n-\n-#[inline(never)]\n-pub fn f_zst<T>(_t: T) {\n-}\n-\n-#[inline(never)]\n-pub fn f_non_zst<T>(_t: T) {}\n-\n // EMIT_MIR lower_intrinsics.non_const.LowerIntrinsics.diff\n pub fn non_const<T>() -> usize {\n     // Check that lowering works with non-const operand as a func."}, {"sha": "cf0ab73a5d4b1786b0eceb29f70859da81eef00d", "filename": "src/test/mir-opt/lower_intrinsics.size_of.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -7,7 +7,7 @@\n       bb0: {\n -         _0 = std::intrinsics::size_of::<T>() -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:37\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:14:5: 14:35\n+-                                          // + span: $DIR/lower_intrinsics.rs:16:5: 16:35\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::size_of::<T>}, val: Value(<ZST>) }\n +         _0 = SizeOf(T);                  // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:37\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:37"}, {"sha": "6f17d44516de194475d6f93250ee6b42443a22d5", "filename": "src/test/mir-opt/lower_intrinsics.unreachable.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -14,7 +14,7 @@\n           StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n -         _3 = std::intrinsics::unreachable(); // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:29:14: 29:43\n+-                                          // + span: $DIR/lower_intrinsics.rs:31:14: 31:43\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn() -> ! {std::intrinsics::unreachable}, val: Value(<ZST>) }\n +         unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n       }"}, {"sha": "22ef75fd8046089c57c566a5705ac77d91166ac9", "filename": "src/test/mir-opt/lower_intrinsics.wrapping.LowerIntrinsics.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -32,7 +32,7 @@\n           _5 = _2;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:48: +1:49\n -         _3 = wrapping_add::<i32>(move _4, move _5) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:50\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:7:14: 7:44\n+-                                          // + span: $DIR/lower_intrinsics.rs:9:14: 9:44\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> i32 {wrapping_add::<i32>}, val: Value(<ZST>) }\n +         _3 = Add(move _4, move _5);      // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:50\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:50\n@@ -48,7 +48,7 @@\n           _8 = _2;                         // scope 1 at $DIR/lower_intrinsics.rs:+2:48: +2:49\n -         _6 = wrapping_sub::<i32>(move _7, move _8) -> bb2; // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:50\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:8:14: 8:44\n+-                                          // + span: $DIR/lower_intrinsics.rs:10:14: 10:44\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> i32 {wrapping_sub::<i32>}, val: Value(<ZST>) }\n +         _6 = Sub(move _7, move _8);      // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:50\n +         goto -> bb2;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:50\n@@ -64,7 +64,7 @@\n           _11 = _2;                        // scope 2 at $DIR/lower_intrinsics.rs:+3:48: +3:49\n -         _9 = wrapping_mul::<i32>(move _10, move _11) -> bb3; // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:50\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:9:14: 9:44\n+-                                          // + span: $DIR/lower_intrinsics.rs:11:14: 11:44\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> i32 {wrapping_mul::<i32>}, val: Value(<ZST>) }\n +         _9 = Mul(move _10, move _11);    // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:50\n +         goto -> bb3;                     // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:50"}, {"sha": "8e185323e1a8408061a727566feb15dcc009cf58", "filename": "src/test/mir-opt/lower_intrinsics_e2e.f_u64.PreCodegen.after.mir", "status": "renamed", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics_e2e.f_u64.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics_e2e.f_u64.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics_e2e.f_u64.PreCodegen.after.mir?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -1,32 +1,32 @@\n-// MIR for `f_u64` before PreCodegen\n+// MIR for `f_u64` after PreCodegen\n \n fn f_u64() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:16: +0:16\n-    let mut _1: u64;                     // in scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:21\n-    scope 1 (inlined f_dispatch::<u64>) { // at $DIR/lower_intrinsics.rs:40:5: 40:21\n-        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:44:22: 44:23\n-        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:48:9: 48:21\n-        let mut _3: u64;                 // in scope 1 at $DIR/lower_intrinsics.rs:48:19: 48:20\n-        scope 2 (inlined std::mem::size_of::<u64>) { // at $DIR/lower_intrinsics.rs:45:8: 45:32\n+    let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics_e2e.rs:+0:16: +0:16\n+    let mut _1: u64;                     // in scope 0 at $DIR/lower_intrinsics_e2e.rs:+1:5: +1:21\n+    scope 1 (inlined f_dispatch::<u64>) { // at $DIR/lower_intrinsics_e2e.rs:15:5: 15:21\n+        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics_e2e.rs:19:22: 19:23\n+        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics_e2e.rs:23:9: 23:21\n+        let mut _3: u64;                 // in scope 1 at $DIR/lower_intrinsics_e2e.rs:23:19: 23:20\n+        scope 2 (inlined std::mem::size_of::<u64>) { // at $DIR/lower_intrinsics_e2e.rs:20:8: 20:32\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:21\n-        _1 = const 0_u64;                // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:21\n-        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:48:9: 48:21\n-        StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:48:19: 48:20\n-        _3 = move _1;                    // scope 1 at $DIR/lower_intrinsics.rs:48:19: 48:20\n-        _2 = f_non_zst::<u64>(move _3) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:48:9: 48:21\n+        StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics_e2e.rs:+1:5: +1:21\n+        _1 = const 0_u64;                // scope 0 at $DIR/lower_intrinsics_e2e.rs:+1:5: +1:21\n+        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics_e2e.rs:23:9: 23:21\n+        StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics_e2e.rs:23:19: 23:20\n+        _3 = move _1;                    // scope 1 at $DIR/lower_intrinsics_e2e.rs:23:19: 23:20\n+        _2 = f_non_zst::<u64>(move _3) -> bb1; // scope 1 at $DIR/lower_intrinsics_e2e.rs:23:9: 23:21\n                                          // mir::Constant\n-                                         // + span: $DIR/lower_intrinsics.rs:48:9: 48:18\n+                                         // + span: $DIR/lower_intrinsics_e2e.rs:23:9: 23:18\n                                          // + literal: Const { ty: fn(u64) {f_non_zst::<u64>}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:48:20: 48:21\n-        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:48:21: 48:22\n-        StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:21\n-        return;                          // scope 0 at $DIR/lower_intrinsics.rs:+2:2: +2:2\n+        StorageDead(_3);                 // scope 1 at $DIR/lower_intrinsics_e2e.rs:23:20: 23:21\n+        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics_e2e.rs:23:21: 23:22\n+        StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics_e2e.rs:+1:5: +1:21\n+        return;                          // scope 0 at $DIR/lower_intrinsics_e2e.rs:+2:2: +2:2\n     }\n }", "previous_filename": "src/test/mir-opt/lower_intrinsics.f_u64.PreCodegen.before.mir"}, {"sha": "a5b396ca0bc7f2533f643f7108979c6fd0872bf5", "filename": "src/test/mir-opt/lower_intrinsics_e2e.f_unit.PreCodegen.after.mir", "status": "renamed", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics_e2e.f_unit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics_e2e.f_unit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics_e2e.f_unit.PreCodegen.after.mir?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -1,30 +1,30 @@\n-// MIR for `f_unit` before PreCodegen\n+// MIR for `f_unit` after PreCodegen\n \n fn f_unit() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:17: +0:17\n-    let mut _1: ();                      // in scope 0 at $DIR/lower_intrinsics.rs:+1:16: +1:18\n-    scope 1 (inlined f_dispatch::<()>) { // at $DIR/lower_intrinsics.rs:34:5: 34:19\n-        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:44:22: 44:23\n-        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:46:9: 46:17\n-        let mut _3: ();                  // in scope 1 at $DIR/lower_intrinsics.rs:46:15: 46:16\n-        scope 2 (inlined std::mem::size_of::<()>) { // at $DIR/lower_intrinsics.rs:45:8: 45:32\n+    let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics_e2e.rs:+0:17: +0:17\n+    let mut _1: ();                      // in scope 0 at $DIR/lower_intrinsics_e2e.rs:+1:16: +1:18\n+    scope 1 (inlined f_dispatch::<()>) { // at $DIR/lower_intrinsics_e2e.rs:9:5: 9:19\n+        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics_e2e.rs:19:22: 19:23\n+        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics_e2e.rs:21:9: 21:17\n+        let mut _3: ();                  // in scope 1 at $DIR/lower_intrinsics_e2e.rs:21:15: 21:16\n+        scope 2 (inlined std::mem::size_of::<()>) { // at $DIR/lower_intrinsics_e2e.rs:20:8: 20:32\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:16: +1:18\n-        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:46:9: 46:17\n-        StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:46:15: 46:16\n-        _2 = f_zst::<()>(move _3) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:46:9: 46:17\n+        StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics_e2e.rs:+1:16: +1:18\n+        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics_e2e.rs:21:9: 21:17\n+        StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics_e2e.rs:21:15: 21:16\n+        _2 = f_zst::<()>(move _3) -> bb1; // scope 1 at $DIR/lower_intrinsics_e2e.rs:21:9: 21:17\n                                          // mir::Constant\n-                                         // + span: $DIR/lower_intrinsics.rs:46:9: 46:14\n+                                         // + span: $DIR/lower_intrinsics_e2e.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(()) {f_zst::<()>}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:46:16: 46:17\n-        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:46:17: 46:18\n-        StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:18: +1:19\n-        return;                          // scope 0 at $DIR/lower_intrinsics.rs:+2:2: +2:2\n+        StorageDead(_3);                 // scope 1 at $DIR/lower_intrinsics_e2e.rs:21:16: 21:17\n+        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics_e2e.rs:21:17: 21:18\n+        StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics_e2e.rs:+1:18: +1:19\n+        return;                          // scope 0 at $DIR/lower_intrinsics_e2e.rs:+2:2: +2:2\n     }\n }", "previous_filename": "src/test/mir-opt/lower_intrinsics.f_unit.PreCodegen.before.mir"}, {"sha": "872ef59b08183f10ce5415e1feaff10fca32f16e", "filename": "src/test/mir-opt/lower_intrinsics_e2e.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics_e2e.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Flower_intrinsics_e2e.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics_e2e.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -0,0 +1,32 @@\n+// Checks that we do not have any branches in the MIR for the two tested functions.\n+\n+// compile-flags: -Cpanic=abort\n+#![feature(core_intrinsics)]\n+#![crate_type = \"lib\"]\n+\n+// EMIT_MIR lower_intrinsics_e2e.f_unit.PreCodegen.after.mir\n+pub fn f_unit() {\n+    f_dispatch(());\n+}\n+\n+\n+// EMIT_MIR lower_intrinsics_e2e.f_u64.PreCodegen.after.mir\n+pub fn f_u64() {\n+    f_dispatch(0u64);\n+}\n+\n+#[inline(always)]\n+pub fn f_dispatch<T>(t: T) {\n+    if std::mem::size_of::<T>() == 0 {\n+        f_zst(t);\n+    } else {\n+        f_non_zst(t);\n+    }\n+}\n+\n+#[inline(never)]\n+pub fn f_zst<T>(_t: T) {\n+}\n+\n+#[inline(never)]\n+pub fn f_non_zst<T>(_t: T) {}"}, {"sha": "f9eeb1ea5b96095be840b3afd1c193409cdb55ba", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.32bit.diff?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -41,7 +41,7 @@\n -         _3 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:+16:13: +16:22\n -         _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:+17:13: +17:22\n -         _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:+18:13: +18:21\n--         nop;                             // scope 4 at $DIR/matches_reduce_branches.rs:+19:13: +19:15\n+-         Deinit(_6);                      // scope 4 at $DIR/matches_reduce_branches.rs:+19:13: +19:15\n -         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:+19:13: +19:15\n -     }\n - \n@@ -54,7 +54,7 @@\n +         _3 = Eq(_11, const 7_i32);       // scope 4 at $DIR/matches_reduce_branches.rs:+9:13: +9:21\n           _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:+10:13: +10:22\n           _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:+11:13: +11:21\n--         nop;                             // scope 4 at $DIR/matches_reduce_branches.rs:+12:13: +12:15\n+          Deinit(_6);                      // scope 4 at $DIR/matches_reduce_branches.rs:+12:13: +12:15\n -         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:+12:13: +12:15\n -     }\n - "}, {"sha": "f9eeb1ea5b96095be840b3afd1c193409cdb55ba", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -41,7 +41,7 @@\n -         _3 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:+16:13: +16:22\n -         _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:+17:13: +17:22\n -         _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:+18:13: +18:21\n--         nop;                             // scope 4 at $DIR/matches_reduce_branches.rs:+19:13: +19:15\n+-         Deinit(_6);                      // scope 4 at $DIR/matches_reduce_branches.rs:+19:13: +19:15\n -         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:+19:13: +19:15\n -     }\n - \n@@ -54,7 +54,7 @@\n +         _3 = Eq(_11, const 7_i32);       // scope 4 at $DIR/matches_reduce_branches.rs:+9:13: +9:21\n           _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:+10:13: +10:22\n           _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:+11:13: +11:21\n--         nop;                             // scope 4 at $DIR/matches_reduce_branches.rs:+12:13: +12:15\n+          Deinit(_6);                      // scope 4 at $DIR/matches_reduce_branches.rs:+12:13: +12:15\n -         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:+12:13: +12:15\n -     }\n - "}, {"sha": "0b40b3be8bdd41efd5e773ab32228a05b64f394c", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.32bit.diff?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -4,26 +4,51 @@\n   fn foo(_1: Option<()>) -> () {\n       debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:+0:8: +0:11\n       let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:+0:25: +0:25\n-      let mut _2: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:+1:22: +1:26\n-+     let mut _3: isize;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _3: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:+1:22: +1:26\n++     let mut _4: isize;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n   \n       bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:+1:17: +1:20\n--         switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--     }\n-- \n--     bb1: {\n+          StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _3 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:+1:17: +1:20\n+-         switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         StorageLive(_4);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         _4 = move _3;                    // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         _2 = Eq(_4, const 0_isize);      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         StorageDead(_4);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      }\n+  \n+      bb1: {\n+-         _2 = const false;                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -         goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -     }\n - \n -     bb2: {\n+-         _2 = const true;                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -         goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -     }\n - \n -     bb3: {\n-+         StorageLive(_3);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         _3 = move _2;                    // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         StorageDead(_3);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-         switchInt(move _2) -> [false: bb5, otherwise: bb4]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-     }\n+- \n+-     bb4: {\n+          Deinit(_0);                      // scope 0 at $DIR/matches_reduce_branches.rs:+2:9: +2:11\n+-         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:+1:5: +3:6\n++         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+1:5: +3:6\n+      }\n+  \n+-     bb5: {\n++     bb2: {\n+          _0 = const ();                   // scope 0 at $DIR/matches_reduce_branches.rs:+3:6: +3:6\n+-         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:+1:5: +3:6\n++         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+1:5: +3:6\n+      }\n+  \n+-     bb6: {\n++     bb3: {\n+          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+3:5: +3:6\n           return;                          // scope 0 at $DIR/matches_reduce_branches.rs:+4:2: +4:2\n       }\n   }"}, {"sha": "0b40b3be8bdd41efd5e773ab32228a05b64f394c", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -4,26 +4,51 @@\n   fn foo(_1: Option<()>) -> () {\n       debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:+0:8: +0:11\n       let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:+0:25: +0:25\n-      let mut _2: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:+1:22: +1:26\n-+     let mut _3: isize;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _2: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _3: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:+1:22: +1:26\n++     let mut _4: isize;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n   \n       bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:+1:17: +1:20\n--         switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--     }\n-- \n--     bb1: {\n+          StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _3 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:+1:17: +1:20\n+-         switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         StorageLive(_4);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         _4 = move _3;                    // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         _2 = Eq(_4, const 0_isize);      // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         StorageDead(_4);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      }\n+  \n+      bb1: {\n+-         _2 = const false;                // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -         goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -     }\n - \n -     bb2: {\n+-         _2 = const true;                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -         goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -     }\n - \n -     bb3: {\n-+         StorageLive(_3);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         _3 = move _2;                    // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-+         StorageDead(_3);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-         switchInt(move _2) -> [false: bb5, otherwise: bb4]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+-     }\n+- \n+-     bb4: {\n+          Deinit(_0);                      // scope 0 at $DIR/matches_reduce_branches.rs:+2:9: +2:11\n+-         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:+1:5: +3:6\n++         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+1:5: +3:6\n+      }\n+  \n+-     bb5: {\n++     bb2: {\n+          _0 = const ();                   // scope 0 at $DIR/matches_reduce_branches.rs:+3:6: +3:6\n+-         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:+1:5: +3:6\n++         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+1:5: +3:6\n+      }\n+  \n+-     bb6: {\n++     bb3: {\n+          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+3:5: +3:6\n           return;                          // scope 0 at $DIR/matches_reduce_branches.rs:+4:2: +4:2\n       }\n   }"}, {"sha": "a36ec8de4a391886bdfa5a4c1b51b03403637623", "filename": "src/test/mir-opt/matches_reduce_branches.foo.PreCodegen.before.32bit.mir", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.PreCodegen.before.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.PreCodegen.before.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.PreCodegen.before.32bit.mir?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1,10 +0,0 @@\n-// MIR for `foo` before PreCodegen\n-\n-fn foo(_1: Option<()>) -> () {\n-    debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:+0:8: +0:11\n-    let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:+0:25: +0:25\n-\n-    bb0: {\n-        return;                          // scope 0 at $DIR/matches_reduce_branches.rs:+4:2: +4:2\n-    }\n-}"}, {"sha": "a36ec8de4a391886bdfa5a4c1b51b03403637623", "filename": "src/test/mir-opt/matches_reduce_branches.foo.PreCodegen.before.64bit.mir", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.PreCodegen.before.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.PreCodegen.before.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.PreCodegen.before.64bit.mir?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1,10 +0,0 @@\n-// MIR for `foo` before PreCodegen\n-\n-fn foo(_1: Option<()>) -> () {\n-    debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:+0:8: +0:11\n-    let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:+0:25: +0:25\n-\n-    bb0: {\n-        return;                          // scope 0 at $DIR/matches_reduce_branches.rs:+4:2: +4:2\n-    }\n-}"}, {"sha": "b8c7722cd3713c905b31331b98b0cc2623594660", "filename": "src/test/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 86, "deletions": 15, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -4,36 +4,107 @@\n   fn match_nested_if() -> bool {\n       let mut _0: bool;                    // return place in scope 0 at $DIR/matches_reduce_branches.rs:+0:25: +0:29\n       let _1: bool;                        // in scope 0 at $DIR/matches_reduce_branches.rs:+1:9: +1:12\n-      let mut _2: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n-+     let mut _3: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n+      let mut _2: ();                      // in scope 0 at $DIR/matches_reduce_branches.rs:+1:21: +1:23\n+      let mut _3: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n+      let mut _4: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n+      let mut _5: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n+      let mut _6: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n++     let mut _7: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n++     let mut _8: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n++     let mut _9: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n++     let mut _10: bool;                   // in scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n       scope 1 {\n           debug val => _1;                 // in scope 1 at $DIR/matches_reduce_branches.rs:+1:9: +1:12\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/matches_reduce_branches.rs:+1:9: +1:12\n-          StorageLive(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n-          _2 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n+          StorageLive(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+1:21: +1:23\n+          Deinit(_2);                      // scope 0 at $DIR/matches_reduce_branches.rs:+1:21: +1:23\n+          StorageLive(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n+          StorageLive(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n+          StorageLive(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n+          StorageLive(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n+          _6 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n+-         switchInt(move _6) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n -     }\n - \n -     bb1: {\n-+         StorageLive(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n-+         _3 = move _2;                    // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n-          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:51: +2:52\n--         _1 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+8:13: +8:17\n--         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+8:13: +8:17\n+-         _5 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:31: +2:35\n+-         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n -     }\n - \n -     bb2: {\n--         StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:51: +2:52\n--         _1 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:+10:14: +10:19\n--         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+10:14: +10:19\n+-         _5 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:+2:45: +2:50\n+-         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n -     }\n - \n -     bb3: {\n-+         _1 = Ne(_3, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:+10:14: +10:19\n-+         StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n++         StorageLive(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n++         _7 = move _6;                    // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n++         _5 = Ne(_7, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:+2:45: +2:50\n++         StorageDead(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n+          StorageDead(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:51: +2:52\n+-         switchInt(move _5) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n+-     }\n+- \n+-     bb4: {\n+-         _4 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:55: +2:59\n+-         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n+-     }\n+- \n+-     bb5: {\n+-         _4 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:+2:69: +2:74\n+-         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n+-     }\n+- \n+-     bb6: {\n++         StorageLive(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n++         _8 = move _5;                    // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n++         _4 = Ne(_8, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:+2:69: +2:74\n++         StorageDead(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n+          StorageDead(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:75: +2:76\n+-         switchInt(move _4) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n+-     }\n+- \n+-     bb7: {\n+-         _3 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+3:13: +3:17\n+-         goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n+-     }\n+- \n+-     bb8: {\n+-         _3 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:+5:13: +5:18\n+-         goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n+-     }\n+- \n+-     bb9: {\n+-         switchInt(move _3) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n+-     }\n+- \n+-     bb10: {\n++         StorageLive(_9);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n++         _9 = move _4;                    // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n++         _3 = Ne(_9, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:+5:13: +5:18\n++         StorageDead(_9);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n++         StorageLive(_10);                // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n++         _10 = move _3;                   // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n+          StorageDead(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:+6:9: +6:10\n+          StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:+6:9: +6:10\n+-         _1 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+8:13: +8:17\n+-         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:+8:13: +8:17\n+-     }\n+- \n+-     bb11: {\n+-         StorageDead(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:+6:9: +6:10\n+-         StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:+6:9: +6:10\n+-         _1 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:+10:14: +10:19\n+-         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:+10:14: +10:19\n+-     }\n+- \n+-     bb12: {\n++         _1 = Ne(_10, const false);       // scope 0 at $DIR/matches_reduce_branches.rs:+10:14: +10:19\n++         StorageDead(_10);                // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n+          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+11:6: +11:7\n           _0 = _1;                         // scope 1 at $DIR/matches_reduce_branches.rs:+12:5: +12:8\n           StorageDead(_1);                 // scope 0 at $DIR/matches_reduce_branches.rs:+13:1: +13:2\n           return;                          // scope 0 at $DIR/matches_reduce_branches.rs:+13:2: +13:2"}, {"sha": "b8c7722cd3713c905b31331b98b0cc2623594660", "filename": "src/test/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 86, "deletions": 15, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -4,36 +4,107 @@\n   fn match_nested_if() -> bool {\n       let mut _0: bool;                    // return place in scope 0 at $DIR/matches_reduce_branches.rs:+0:25: +0:29\n       let _1: bool;                        // in scope 0 at $DIR/matches_reduce_branches.rs:+1:9: +1:12\n-      let mut _2: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n-+     let mut _3: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n+      let mut _2: ();                      // in scope 0 at $DIR/matches_reduce_branches.rs:+1:21: +1:23\n+      let mut _3: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n+      let mut _4: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n+      let mut _5: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n+      let mut _6: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n++     let mut _7: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n++     let mut _8: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n++     let mut _9: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n++     let mut _10: bool;                   // in scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n       scope 1 {\n           debug val => _1;                 // in scope 1 at $DIR/matches_reduce_branches.rs:+1:9: +1:12\n       }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/matches_reduce_branches.rs:+1:9: +1:12\n-          StorageLive(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n-          _2 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n--         switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n+          StorageLive(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+1:21: +1:23\n+          Deinit(_2);                      // scope 0 at $DIR/matches_reduce_branches.rs:+1:21: +1:23\n+          StorageLive(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n+          StorageLive(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n+          StorageLive(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n+          StorageLive(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n+          _6 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n+-         switchInt(move _6) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n -     }\n - \n -     bb1: {\n-+         StorageLive(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n-+         _3 = move _2;                    // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n-          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:51: +2:52\n--         _1 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+8:13: +8:17\n--         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+8:13: +8:17\n+-         _5 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:31: +2:35\n+-         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n -     }\n - \n -     bb2: {\n--         StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:51: +2:52\n--         _1 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:+10:14: +10:19\n--         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+10:14: +10:19\n+-         _5 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:+2:45: +2:50\n+-         goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n -     }\n - \n -     bb3: {\n-+         _1 = Ne(_3, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:+10:14: +10:19\n-+         StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n++         StorageLive(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n++         _7 = move _6;                    // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n++         _5 = Ne(_7, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:+2:45: +2:50\n++         StorageDead(_7);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:24: +2:28\n+          StorageDead(_6);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:51: +2:52\n+-         switchInt(move _5) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n+-     }\n+- \n+-     bb4: {\n+-         _4 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:55: +2:59\n+-         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n+-     }\n+- \n+-     bb5: {\n+-         _4 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:+2:69: +2:74\n+-         goto -> bb6;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n+-     }\n+- \n+-     bb6: {\n++         StorageLive(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n++         _8 = move _5;                    // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n++         _4 = Ne(_8, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:+2:69: +2:74\n++         StorageDead(_8);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:21: +2:52\n+          StorageDead(_5);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:75: +2:76\n+-         switchInt(move _4) -> [false: bb8, otherwise: bb7]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n+-     }\n+- \n+-     bb7: {\n+-         _3 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+3:13: +3:17\n+-         goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n+-     }\n+- \n+-     bb8: {\n+-         _3 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:+5:13: +5:18\n+-         goto -> bb9;                     // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n+-     }\n+- \n+-     bb9: {\n+-         switchInt(move _3) -> [false: bb11, otherwise: bb10]; // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n+-     }\n+- \n+-     bb10: {\n++         StorageLive(_9);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n++         _9 = move _4;                    // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n++         _3 = Ne(_9, const false);        // scope 0 at $DIR/matches_reduce_branches.rs:+5:13: +5:18\n++         StorageDead(_9);                 // scope 0 at $DIR/matches_reduce_branches.rs:+2:18: +2:76\n++         StorageLive(_10);                // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n++         _10 = move _3;                   // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n+          StorageDead(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:+6:9: +6:10\n+          StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:+6:9: +6:10\n+-         _1 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:+8:13: +8:17\n+-         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:+8:13: +8:17\n+-     }\n+- \n+-     bb11: {\n+-         StorageDead(_4);                 // scope 0 at $DIR/matches_reduce_branches.rs:+6:9: +6:10\n+-         StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:+6:9: +6:10\n+-         _1 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:+10:14: +10:19\n+-         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:+10:14: +10:19\n+-     }\n+- \n+-     bb12: {\n++         _1 = Ne(_10, const false);       // scope 0 at $DIR/matches_reduce_branches.rs:+10:14: +10:19\n++         StorageDead(_10);                // scope 0 at $DIR/matches_reduce_branches.rs:+2:15: +6:10\n+          StorageDead(_2);                 // scope 0 at $DIR/matches_reduce_branches.rs:+11:6: +11:7\n           _0 = _1;                         // scope 1 at $DIR/matches_reduce_branches.rs:+12:5: +12:8\n           StorageDead(_1);                 // scope 0 at $DIR/matches_reduce_branches.rs:+13:1: +13:2\n           return;                          // scope 0 at $DIR/matches_reduce_branches.rs:+13:2: +13:2"}, {"sha": "c122b4c69d15a1a8f17411371eec649a526e8e05", "filename": "src/test/mir-opt/matches_reduce_branches.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -1,6 +1,7 @@\n+// unit-test: MatchBranchSimplification\n+\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR matches_reduce_branches.foo.MatchBranchSimplification.diff\n-// EMIT_MIR matches_reduce_branches.foo.PreCodegen.before.mir\n // EMIT_MIR matches_reduce_branches.bar.MatchBranchSimplification.diff\n // EMIT_MIR matches_reduce_branches.match_nested_if.MatchBranchSimplification.diff\n "}, {"sha": "2c748b02a8b76711fc937d7447016410a440644d", "filename": "src/test/mir-opt/matches_u8.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fmatches_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fmatches_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -1,3 +1,5 @@\n+// unit-test: MatchBranchSimplification\n+\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR matches_u8.exhaustive_match.MatchBranchSimplification.diff\n // EMIT_MIR matches_u8.exhaustive_match_i8.MatchBranchSimplification.diff"}, {"sha": "f25b3ce724be2db89b3f95fff98746d059aaaa80", "filename": "src/test/mir-opt/separate_const_switch.identity.SeparateConstSwitch.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -15,7 +15,7 @@\n       scope 1 {\n           debug residual => _6;            // in scope 1 at $DIR/separate_const_switch.rs:+1:9: +1:10\n           scope 2 {\n-              scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n+              scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:25:8: 25:10\n                   debug residual => _8;    // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n                   let _16: i32;            // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n                   let mut _17: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n@@ -34,7 +34,7 @@\n           scope 4 {\n           }\n       }\n-      scope 5 (inlined <Result<i32, i32> as Try>::branch) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n+      scope 5 (inlined <Result<i32, i32> as Try>::branch) { // at $DIR/separate_const_switch.rs:25:8: 25:10\n           debug self => _4;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           let mut _10: isize;              // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n           let _11: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL"}, {"sha": "c809e5629cc152b4c02cd0b92efb6d138bc5c127", "filename": "src/test/mir-opt/separate_const_switch.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -4,8 +4,6 @@\n use std::ops::ControlFlow;\n \n // EMIT_MIR separate_const_switch.too_complex.SeparateConstSwitch.diff\n-// EMIT_MIR separate_const_switch.too_complex.ConstProp.diff\n-// EMIT_MIR separate_const_switch.too_complex.PreCodegen.after.mir\n fn too_complex(x: Result<i32, usize>) -> Option<i32> {\n     // The pass should break the outer match into\n     // two blocks that only have one parent each.\n@@ -23,8 +21,6 @@ fn too_complex(x: Result<i32, usize>) -> Option<i32> {\n }\n \n // EMIT_MIR separate_const_switch.identity.SeparateConstSwitch.diff\n-// EMIT_MIR separate_const_switch.identity.ConstProp.diff\n-// EMIT_MIR separate_const_switch.identity.PreCodegen.after.mir\n fn identity(x: Result<i32, i32>) -> Result<i32, i32> {\n     Ok(x?)\n }"}, {"sha": "cf6ff57aa96deef66017ce5bbde5f94fe420f23e", "filename": "src/test/mir-opt/simplify-arm-identity.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm-identity.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -4,6 +4,9 @@\n // compile-flags: -Zmir-opt-level=3\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n \n+// This pass is broken since deaggregation changed\n+// ignore-test\n+\n enum Src {\n     Foo(u8),\n     Bar,"}, {"sha": "c247872e2af46fb4bad904d0185a647a5559ea57", "filename": "src/test/mir-opt/simplify-arm.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-arm.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -6,6 +6,9 @@\n // EMIT_MIR simplify_arm.id_try.SimplifyArmIdentity.diff\n // EMIT_MIR simplify_arm.id_try.SimplifyBranchSame.diff\n \n+// This pass is broken since deaggregation changed\n+// ignore-test\n+\n fn id(o: Option<u8>) -> Option<u8> {\n     match o {\n         Some(v) => Some(v),"}, {"sha": "62a15df04b14429940d05a89f1711268caa43dc2", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zunsound-mir-opts\n+// unit-test: SimplifyLocals\n \n fn map(x: Option<Box<()>>) -> Option<Box<()>> {\n     match x {"}, {"sha": "9c3ad4b4df912cbd82bb8cb22c7f54af4e79288d", "filename": "src/test/mir-opt/simplify_arm.id.SimplifyArmIdentity.diff", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1,46 +0,0 @@\n-- // MIR for `id` before SimplifyArmIdentity\n-+ // MIR for `id` after SimplifyArmIdentity\n-  \n-  fn id(_1: Option<u8>) -> Option<u8> {\n-      debug o => _1;                       // in scope 0 at $DIR/simplify-arm.rs:+0:7: +0:8\n-      let mut _0: std::option::Option<u8>; // return place in scope 0 at $DIR/simplify-arm.rs:+0:25: +0:35\n-      let mut _2: isize;                   // in scope 0 at $DIR/simplify-arm.rs:+2:9: +2:16\n-      let _3: u8;                          // in scope 0 at $DIR/simplify-arm.rs:+2:14: +2:15\n-      let mut _4: u8;                      // in scope 0 at $DIR/simplify-arm.rs:+2:25: +2:26\n-      scope 1 {\n-          debug v => _3;                   // in scope 1 at $DIR/simplify-arm.rs:+2:14: +2:15\n-      }\n-  \n-      bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:+1:5: +1:12\n-      }\n-  \n-      bb1: {\n-          Deinit(_0);                      // scope 0 at $DIR/simplify-arm.rs:+3:17: +3:21\n-          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-arm.rs:+3:17: +3:21\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:+3:17: +3:21\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:+1:11: +1:12\n-      }\n-  \n-      bb3: {\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:+2:14: +2:15\n-          _3 = ((_1 as Some).0: u8);       // scope 0 at $DIR/simplify-arm.rs:+2:14: +2:15\n-          StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:+2:25: +2:26\n-          _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:+2:25: +2:26\n-          Deinit(_0);                      // scope 1 at $DIR/simplify-arm.rs:+2:20: +2:27\n-          ((_0 as Some).0: u8) = move _4;  // scope 1 at $DIR/simplify-arm.rs:+2:20: +2:27\n-          discriminant(_0) = 1;            // scope 1 at $DIR/simplify-arm.rs:+2:20: +2:27\n-          StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:+2:26: +2:27\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:+2:26: +2:27\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:+2:26: +2:27\n-      }\n-  \n-      bb4: {\n-          return;                          // scope 0 at $DIR/simplify-arm.rs:+5:2: +5:2\n-      }\n-  }\n-  "}, {"sha": "7b3a6993657735a15e7b874cccff820a5bbecd99", "filename": "src/test/mir-opt/simplify_arm.id.SimplifyBranchSame.diff", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1,46 +0,0 @@\n-- // MIR for `id` before SimplifyBranchSame\n-+ // MIR for `id` after SimplifyBranchSame\n-  \n-  fn id(_1: Option<u8>) -> Option<u8> {\n-      debug o => _1;                       // in scope 0 at $DIR/simplify-arm.rs:+0:7: +0:8\n-      let mut _0: std::option::Option<u8>; // return place in scope 0 at $DIR/simplify-arm.rs:+0:25: +0:35\n-      let mut _2: isize;                   // in scope 0 at $DIR/simplify-arm.rs:+2:9: +2:16\n-      let _3: u8;                          // in scope 0 at $DIR/simplify-arm.rs:+2:14: +2:15\n-      let mut _4: u8;                      // in scope 0 at $DIR/simplify-arm.rs:+2:25: +2:26\n-      scope 1 {\n-          debug v => _3;                   // in scope 1 at $DIR/simplify-arm.rs:+2:14: +2:15\n-      }\n-  \n-      bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:+1:5: +1:12\n-      }\n-  \n-      bb1: {\n-          Deinit(_0);                      // scope 0 at $DIR/simplify-arm.rs:+3:17: +3:21\n-          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-arm.rs:+3:17: +3:21\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:+3:17: +3:21\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:+1:11: +1:12\n-      }\n-  \n-      bb3: {\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:+2:14: +2:15\n-          _3 = ((_1 as Some).0: u8);       // scope 0 at $DIR/simplify-arm.rs:+2:14: +2:15\n-          StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:+2:25: +2:26\n-          _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:+2:25: +2:26\n-          Deinit(_0);                      // scope 1 at $DIR/simplify-arm.rs:+2:20: +2:27\n-          ((_0 as Some).0: u8) = move _4;  // scope 1 at $DIR/simplify-arm.rs:+2:20: +2:27\n-          discriminant(_0) = 1;            // scope 1 at $DIR/simplify-arm.rs:+2:20: +2:27\n-          StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:+2:26: +2:27\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:+2:26: +2:27\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:+2:26: +2:27\n-      }\n-  \n-      bb4: {\n-          return;                          // scope 0 at $DIR/simplify-arm.rs:+5:2: +5:2\n-      }\n-  }\n-  "}, {"sha": "31d8453cec0157e89aca8b0cc8e6a363e6f6b549", "filename": "src/test/mir-opt/simplify_arm.id_result.SimplifyArmIdentity.diff", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1,58 +0,0 @@\n-- // MIR for `id_result` before SimplifyArmIdentity\n-+ // MIR for `id_result` after SimplifyArmIdentity\n-  \n-  fn id_result(_1: Result<u8, i32>) -> Result<u8, i32> {\n-      debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:+0:14: +0:15\n-      let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:+0:37: +0:52\n-      let mut _2: isize;                   // in scope 0 at $DIR/simplify-arm.rs:+2:9: +2:14\n-      let _3: u8;                          // in scope 0 at $DIR/simplify-arm.rs:+2:12: +2:13\n-      let mut _4: u8;                      // in scope 0 at $DIR/simplify-arm.rs:+2:21: +2:22\n-      let _5: i32;                         // in scope 0 at $DIR/simplify-arm.rs:+3:13: +3:14\n-      let mut _6: i32;                     // in scope 0 at $DIR/simplify-arm.rs:+3:23: +3:24\n-      scope 1 {\n-          debug x => _3;                   // in scope 1 at $DIR/simplify-arm.rs:+2:12: +2:13\n-      }\n-      scope 2 {\n-          debug y => _5;                   // in scope 2 at $DIR/simplify-arm.rs:+3:13: +3:14\n-      }\n-  \n-      bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:+1:5: +1:12\n-      }\n-  \n-      bb1: {\n-          StorageLive(_5);                 // scope 0 at $DIR/simplify-arm.rs:+3:13: +3:14\n-          _5 = ((_1 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:+3:13: +3:14\n-          StorageLive(_6);                 // scope 2 at $DIR/simplify-arm.rs:+3:23: +3:24\n-          _6 = _5;                         // scope 2 at $DIR/simplify-arm.rs:+3:23: +3:24\n-          Deinit(_0);                      // scope 2 at $DIR/simplify-arm.rs:+3:19: +3:25\n-          ((_0 as Err).0: i32) = move _6;  // scope 2 at $DIR/simplify-arm.rs:+3:19: +3:25\n-          discriminant(_0) = 1;            // scope 2 at $DIR/simplify-arm.rs:+3:19: +3:25\n-          StorageDead(_6);                 // scope 2 at $DIR/simplify-arm.rs:+3:24: +3:25\n-          StorageDead(_5);                 // scope 0 at $DIR/simplify-arm.rs:+3:24: +3:25\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:+3:24: +3:25\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:+1:11: +1:12\n-      }\n-  \n-      bb3: {\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:+2:12: +2:13\n-          _3 = ((_1 as Ok).0: u8);         // scope 0 at $DIR/simplify-arm.rs:+2:12: +2:13\n-          StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:+2:21: +2:22\n-          _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:+2:21: +2:22\n-          Deinit(_0);                      // scope 1 at $DIR/simplify-arm.rs:+2:18: +2:23\n-          ((_0 as Ok).0: u8) = move _4;    // scope 1 at $DIR/simplify-arm.rs:+2:18: +2:23\n-          discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:+2:18: +2:23\n-          StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:+2:22: +2:23\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:+2:22: +2:23\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:+2:22: +2:23\n-      }\n-  \n-      bb4: {\n-          return;                          // scope 0 at $DIR/simplify-arm.rs:+5:2: +5:2\n-      }\n-  }\n-  "}, {"sha": "3692ebf747bd2de948bbb484b8dd2a7c4b30e968", "filename": "src/test/mir-opt/simplify_arm.id_result.SimplifyBranchSame.diff", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1,58 +0,0 @@\n-- // MIR for `id_result` before SimplifyBranchSame\n-+ // MIR for `id_result` after SimplifyBranchSame\n-  \n-  fn id_result(_1: Result<u8, i32>) -> Result<u8, i32> {\n-      debug r => _1;                       // in scope 0 at $DIR/simplify-arm.rs:+0:14: +0:15\n-      let mut _0: std::result::Result<u8, i32>; // return place in scope 0 at $DIR/simplify-arm.rs:+0:37: +0:52\n-      let mut _2: isize;                   // in scope 0 at $DIR/simplify-arm.rs:+2:9: +2:14\n-      let _3: u8;                          // in scope 0 at $DIR/simplify-arm.rs:+2:12: +2:13\n-      let mut _4: u8;                      // in scope 0 at $DIR/simplify-arm.rs:+2:21: +2:22\n-      let _5: i32;                         // in scope 0 at $DIR/simplify-arm.rs:+3:13: +3:14\n-      let mut _6: i32;                     // in scope 0 at $DIR/simplify-arm.rs:+3:23: +3:24\n-      scope 1 {\n-          debug x => _3;                   // in scope 1 at $DIR/simplify-arm.rs:+2:12: +2:13\n-      }\n-      scope 2 {\n-          debug y => _5;                   // in scope 2 at $DIR/simplify-arm.rs:+3:13: +3:14\n-      }\n-  \n-      bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:+1:11: +1:12\n-          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:+1:5: +1:12\n-      }\n-  \n-      bb1: {\n-          StorageLive(_5);                 // scope 0 at $DIR/simplify-arm.rs:+3:13: +3:14\n-          _5 = ((_1 as Err).0: i32);       // scope 0 at $DIR/simplify-arm.rs:+3:13: +3:14\n-          StorageLive(_6);                 // scope 2 at $DIR/simplify-arm.rs:+3:23: +3:24\n-          _6 = _5;                         // scope 2 at $DIR/simplify-arm.rs:+3:23: +3:24\n-          Deinit(_0);                      // scope 2 at $DIR/simplify-arm.rs:+3:19: +3:25\n-          ((_0 as Err).0: i32) = move _6;  // scope 2 at $DIR/simplify-arm.rs:+3:19: +3:25\n-          discriminant(_0) = 1;            // scope 2 at $DIR/simplify-arm.rs:+3:19: +3:25\n-          StorageDead(_6);                 // scope 2 at $DIR/simplify-arm.rs:+3:24: +3:25\n-          StorageDead(_5);                 // scope 0 at $DIR/simplify-arm.rs:+3:24: +3:25\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:+3:24: +3:25\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/simplify-arm.rs:+1:11: +1:12\n-      }\n-  \n-      bb3: {\n-          StorageLive(_3);                 // scope 0 at $DIR/simplify-arm.rs:+2:12: +2:13\n-          _3 = ((_1 as Ok).0: u8);         // scope 0 at $DIR/simplify-arm.rs:+2:12: +2:13\n-          StorageLive(_4);                 // scope 1 at $DIR/simplify-arm.rs:+2:21: +2:22\n-          _4 = _3;                         // scope 1 at $DIR/simplify-arm.rs:+2:21: +2:22\n-          Deinit(_0);                      // scope 1 at $DIR/simplify-arm.rs:+2:18: +2:23\n-          ((_0 as Ok).0: u8) = move _4;    // scope 1 at $DIR/simplify-arm.rs:+2:18: +2:23\n-          discriminant(_0) = 0;            // scope 1 at $DIR/simplify-arm.rs:+2:18: +2:23\n-          StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:+2:22: +2:23\n-          StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:+2:22: +2:23\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:+2:22: +2:23\n-      }\n-  \n-      bb4: {\n-          return;                          // scope 0 at $DIR/simplify-arm.rs:+5:2: +5:2\n-      }\n-  }\n-  "}, {"sha": "118f5dd0abb430ad1b6cb11b83b1030d36d7e308", "filename": "src/test/mir-opt/simplify_arm_identity.main.SimplifyArmIdentity.32bit.diff", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.32bit.diff?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1,61 +0,0 @@\n-- // MIR for `main` before SimplifyArmIdentity\n-+ // MIR for `main` after SimplifyArmIdentity\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-arm-identity.rs:+0:11: +0:11\n-      let _1: Src;                         // in scope 0 at $DIR/simplify-arm-identity.rs:+1:9: +1:10\n-      let mut _2: Dst;                     // in scope 0 at $DIR/simplify-arm-identity.rs:+2:18: +5:6\n-      let mut _3: isize;                   // in scope 0 at $DIR/simplify-arm-identity.rs:+3:9: +3:20\n-      let mut _5: u8;                      // in scope 0 at $DIR/simplify-arm-identity.rs:+3:33: +3:34\n-      scope 1 {\n-          debug e => _1;                   // in scope 1 at $DIR/simplify-arm-identity.rs:+1:9: +1:10\n-          let _4: u8;                      // in scope 1 at $DIR/simplify-arm-identity.rs:+3:18: +3:19\n-          scope 2 {\n-          }\n-          scope 3 {\n-              debug x => _4;               // in scope 3 at $DIR/simplify-arm-identity.rs:+3:18: +3:19\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/simplify-arm-identity.rs:+1:9: +1:10\n-          Deinit(_1);                      // scope 0 at $DIR/simplify-arm-identity.rs:+1:18: +1:29\n-          ((_1 as Foo).0: u8) = const 0_u8; // scope 0 at $DIR/simplify-arm-identity.rs:+1:18: +1:29\n-          discriminant(_1) = 0;            // scope 0 at $DIR/simplify-arm-identity.rs:+1:18: +1:29\n-          StorageLive(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:+2:18: +5:6\n-          _3 = const 0_isize;              // scope 1 at $DIR/simplify-arm-identity.rs:+2:24: +2:25\n-          goto -> bb3;                     // scope 1 at $DIR/simplify-arm-identity.rs:+2:18: +2:25\n-      }\n-  \n-      bb1: {\n-          Deinit(_2);                      // scope 1 at $DIR/simplify-arm-identity.rs:+4:21: +4:32\n-          ((_2 as Foo).0: u8) = const 0_u8; // scope 1 at $DIR/simplify-arm-identity.rs:+4:21: +4:32\n-          discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:+4:21: +4:32\n-          goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:+4:21: +4:32\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 1 at $DIR/simplify-arm-identity.rs:+2:24: +2:25\n-      }\n-  \n-      bb3: {\n-          StorageLive(_4);                 // scope 1 at $DIR/simplify-arm-identity.rs:+3:18: +3:19\n-          _4 = ((_1 as Foo).0: u8);        // scope 1 at $DIR/simplify-arm-identity.rs:+3:18: +3:19\n-          StorageLive(_5);                 // scope 3 at $DIR/simplify-arm-identity.rs:+3:33: +3:34\n-          _5 = _4;                         // scope 3 at $DIR/simplify-arm-identity.rs:+3:33: +3:34\n-          Deinit(_2);                      // scope 3 at $DIR/simplify-arm-identity.rs:+3:24: +3:35\n-          ((_2 as Foo).0: u8) = move _5;   // scope 3 at $DIR/simplify-arm-identity.rs:+3:24: +3:35\n-          discriminant(_2) = 0;            // scope 3 at $DIR/simplify-arm-identity.rs:+3:24: +3:35\n-          StorageDead(_5);                 // scope 3 at $DIR/simplify-arm-identity.rs:+3:34: +3:35\n-          StorageDead(_4);                 // scope 1 at $DIR/simplify-arm-identity.rs:+3:34: +3:35\n-          goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:+3:34: +3:35\n-      }\n-  \n-      bb4: {\n-          StorageDead(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:+5:6: +5:7\n-          nop;                             // scope 0 at $DIR/simplify-arm-identity.rs:+0:11: +6:2\n-          StorageDead(_1);                 // scope 0 at $DIR/simplify-arm-identity.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/simplify-arm-identity.rs:+6:2: +6:2\n-      }\n-  }\n-  "}, {"sha": "118f5dd0abb430ad1b6cb11b83b1030d36d7e308", "filename": "src/test/mir-opt/simplify_arm_identity.main.SimplifyArmIdentity.64bit.diff", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.64bit.diff?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1,61 +0,0 @@\n-- // MIR for `main` before SimplifyArmIdentity\n-+ // MIR for `main` after SimplifyArmIdentity\n-  \n-  fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/simplify-arm-identity.rs:+0:11: +0:11\n-      let _1: Src;                         // in scope 0 at $DIR/simplify-arm-identity.rs:+1:9: +1:10\n-      let mut _2: Dst;                     // in scope 0 at $DIR/simplify-arm-identity.rs:+2:18: +5:6\n-      let mut _3: isize;                   // in scope 0 at $DIR/simplify-arm-identity.rs:+3:9: +3:20\n-      let mut _5: u8;                      // in scope 0 at $DIR/simplify-arm-identity.rs:+3:33: +3:34\n-      scope 1 {\n-          debug e => _1;                   // in scope 1 at $DIR/simplify-arm-identity.rs:+1:9: +1:10\n-          let _4: u8;                      // in scope 1 at $DIR/simplify-arm-identity.rs:+3:18: +3:19\n-          scope 2 {\n-          }\n-          scope 3 {\n-              debug x => _4;               // in scope 3 at $DIR/simplify-arm-identity.rs:+3:18: +3:19\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/simplify-arm-identity.rs:+1:9: +1:10\n-          Deinit(_1);                      // scope 0 at $DIR/simplify-arm-identity.rs:+1:18: +1:29\n-          ((_1 as Foo).0: u8) = const 0_u8; // scope 0 at $DIR/simplify-arm-identity.rs:+1:18: +1:29\n-          discriminant(_1) = 0;            // scope 0 at $DIR/simplify-arm-identity.rs:+1:18: +1:29\n-          StorageLive(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:+2:18: +5:6\n-          _3 = const 0_isize;              // scope 1 at $DIR/simplify-arm-identity.rs:+2:24: +2:25\n-          goto -> bb3;                     // scope 1 at $DIR/simplify-arm-identity.rs:+2:18: +2:25\n-      }\n-  \n-      bb1: {\n-          Deinit(_2);                      // scope 1 at $DIR/simplify-arm-identity.rs:+4:21: +4:32\n-          ((_2 as Foo).0: u8) = const 0_u8; // scope 1 at $DIR/simplify-arm-identity.rs:+4:21: +4:32\n-          discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:+4:21: +4:32\n-          goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:+4:21: +4:32\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 1 at $DIR/simplify-arm-identity.rs:+2:24: +2:25\n-      }\n-  \n-      bb3: {\n-          StorageLive(_4);                 // scope 1 at $DIR/simplify-arm-identity.rs:+3:18: +3:19\n-          _4 = ((_1 as Foo).0: u8);        // scope 1 at $DIR/simplify-arm-identity.rs:+3:18: +3:19\n-          StorageLive(_5);                 // scope 3 at $DIR/simplify-arm-identity.rs:+3:33: +3:34\n-          _5 = _4;                         // scope 3 at $DIR/simplify-arm-identity.rs:+3:33: +3:34\n-          Deinit(_2);                      // scope 3 at $DIR/simplify-arm-identity.rs:+3:24: +3:35\n-          ((_2 as Foo).0: u8) = move _5;   // scope 3 at $DIR/simplify-arm-identity.rs:+3:24: +3:35\n-          discriminant(_2) = 0;            // scope 3 at $DIR/simplify-arm-identity.rs:+3:24: +3:35\n-          StorageDead(_5);                 // scope 3 at $DIR/simplify-arm-identity.rs:+3:34: +3:35\n-          StorageDead(_4);                 // scope 1 at $DIR/simplify-arm-identity.rs:+3:34: +3:35\n-          goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:+3:34: +3:35\n-      }\n-  \n-      bb4: {\n-          StorageDead(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:+5:6: +5:7\n-          nop;                             // scope 0 at $DIR/simplify-arm-identity.rs:+0:11: +6:2\n-          StorageDead(_1);                 // scope 0 at $DIR/simplify-arm-identity.rs:+6:1: +6:2\n-          return;                          // scope 0 at $DIR/simplify-arm-identity.rs:+6:2: +6:2\n-      }\n-  }\n-  "}, {"sha": "51d26b08b2a1c69217fbf247a24d4bf5f43efa4d", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -5,24 +5,32 @@\n       debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+0:8: +0:9\n       let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+0:31: +0:46\n       let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:9: +2:13\n--     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n--     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:25: +3:26\n+      let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n+      let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:25: +3:26\n -     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:1: +5:2\n -     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:1: +5:2\n -     let mut _7: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:1: +5:2\n       scope 1 {\n-          debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n+          debug x => _3;                   // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n       }\n   \n       bb0: {\n+-         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n+-         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n           switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:5: +1:12\n       }\n   \n       bb1: {\n-          ((_0 as Some).0: std::boxed::Box<()>) = move ((_1 as Some).0: std::boxed::Box<()>); // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n+          _3 = move ((_1 as Some).0: std::boxed::Box<()>); // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n+          StorageLive(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:25: +3:26\n+          _4 = move _3;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:25: +3:26\n           Deinit(_0);                      // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:20: +3:27\n+          ((_0 as Some).0: std::boxed::Box<()>) = move _4; // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:20: +3:27\n           discriminant(_0) = 1;            // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:20: +3:27\n+          StorageDead(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:26: +3:27\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:26: +3:27\n           goto -> bb4;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:26: +3:27\n       }\n   \n@@ -37,6 +45,7 @@\n       }\n   \n       bb4: {\n+-         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:1: +5:2\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:2: +5:2\n       }\n   }"}, {"sha": "51d26b08b2a1c69217fbf247a24d4bf5f43efa4d", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -5,24 +5,32 @@\n       debug x => _1;                       // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+0:8: +0:9\n       let mut _0: std::option::Option<std::boxed::Box<()>>; // return place in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+0:31: +0:46\n       let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+2:9: +2:13\n--     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n--     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:25: +3:26\n+      let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n+      let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:25: +3:26\n -     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:1: +5:2\n -     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:1: +5:2\n -     let mut _7: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:1: +5:2\n       scope 1 {\n-          debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n+          debug x => _3;                   // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n       }\n   \n       bb0: {\n+-         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n+-         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:11: +1:12\n           switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+1:5: +1:12\n       }\n   \n       bb1: {\n-          ((_0 as Some).0: std::boxed::Box<()>) = move ((_1 as Some).0: std::boxed::Box<()>); // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n+          StorageLive(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n+          _3 = move ((_1 as Some).0: std::boxed::Box<()>); // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:14: +3:15\n+          StorageLive(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:25: +3:26\n+          _4 = move _3;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:25: +3:26\n           Deinit(_0);                      // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:20: +3:27\n+          ((_0 as Some).0: std::boxed::Box<()>) = move _4; // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:20: +3:27\n           discriminant(_0) = 1;            // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:20: +3:27\n+          StorageDead(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:26: +3:27\n+          StorageDead(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:26: +3:27\n           goto -> bb4;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+3:26: +3:27\n       }\n   \n@@ -37,6 +45,7 @@\n       }\n   \n       bb4: {\n+-         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:1: +5:2\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:+5:2: +5:2\n       }\n   }"}, {"sha": "15e351e7d50161f6e705ab0669bb5d774b0fcbe7", "filename": "src/test/mir-opt/simplify_try.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e21d771b9c76056d20db310ce8655539045b3af5/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.rs?ref=e21d771b9c76056d20db310ce8655539045b3af5", "patch": "@@ -1,30 +0,0 @@\n-// compile-flags: -Zunsound-mir-opts\n-// EMIT_MIR simplify_try.try_identity.SimplifyArmIdentity.diff\n-// EMIT_MIR simplify_try.try_identity.SimplifyBranchSame.after.mir\n-// EMIT_MIR simplify_try.try_identity.SimplifyLocals.after.mir\n-// EMIT_MIR simplify_try.try_identity.DestinationPropagation.diff\n-\n-\n-fn into_result<T, E>(r: Result<T, E>) -> Result<T, E> {\n-    r\n-}\n-\n-fn from_error<T, E>(e: E) -> Result<T, E> {\n-    Err(e)\n-}\n-\n-// This was written to the `?` from `try_trait`, but `try_trait_v2` uses a different structure,\n-// so the relevant desugar is copied inline in order to keep the test testing the same thing.\n-// FIXME(#85133): while this might be useful for `r#try!`, it would be nice to have a MIR\n-// optimization that picks up the `?` desugaring, as `SimplifyArmIdentity` does not.\n-fn try_identity(x: Result<u32, i32>) -> Result<u32, i32> {\n-    let y = match into_result(x) {\n-        Err(e) => return from_error(From::from(e)),\n-        Ok(v) => v,\n-    };\n-    Ok(y)\n-}\n-\n-fn main() {\n-    let _ = try_identity(Ok(0));\n-}"}, {"sha": "330929c58c91496645e9366bea6e580b5dd6f455", "filename": "src/test/mir-opt/try_identity_e2e.new.PreCodegen.after.mir", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -0,0 +1,96 @@\n+// MIR for `new` after PreCodegen\n+\n+fn new(_1: Result<T, E>) -> Result<T, E> {\n+    debug x => _1;                       // in scope 0 at $DIR/try_identity_e2e.rs:+0:14: +0:15\n+    let mut _0: std::result::Result<T, E>; // return place in scope 0 at $DIR/try_identity_e2e.rs:+0:34: +0:46\n+    let mut _2: T;                       // in scope 0 at $DIR/try_identity_e2e.rs:+2:9: +10:10\n+    let mut _3: std::ops::ControlFlow<E, T>; // in scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n+    let mut _4: isize;                   // in scope 0 at $DIR/try_identity_e2e.rs:+4:17: +4:22\n+    let _5: T;                           // in scope 0 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n+    let mut _6: T;                       // in scope 0 at $DIR/try_identity_e2e.rs:+4:48: +4:49\n+    let _7: E;                           // in scope 0 at $DIR/try_identity_e2e.rs:+5:21: +5:22\n+    let mut _8: E;                       // in scope 0 at $DIR/try_identity_e2e.rs:+5:46: +5:47\n+    let mut _9: isize;                   // in scope 0 at $DIR/try_identity_e2e.rs:+8:13: +8:37\n+    let _10: T;                          // in scope 0 at $DIR/try_identity_e2e.rs:+8:35: +8:36\n+    let _11: E;                          // in scope 0 at $DIR/try_identity_e2e.rs:+9:32: +9:33\n+    let mut _12: E;                      // in scope 0 at $DIR/try_identity_e2e.rs:+9:49: +9:50\n+    scope 1 {\n+        debug v => _5;                   // in scope 1 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n+    }\n+    scope 2 {\n+        debug e => _7;                   // in scope 2 at $DIR/try_identity_e2e.rs:+5:21: +5:22\n+    }\n+    scope 3 {\n+        debug v => _10;                  // in scope 3 at $DIR/try_identity_e2e.rs:+8:35: +8:36\n+    }\n+    scope 4 {\n+        debug e => _11;                  // in scope 4 at $DIR/try_identity_e2e.rs:+9:32: +9:33\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +10:10\n+        StorageLive(_3);                 // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n+        _4 = discriminant(_1);           // scope 0 at $DIR/try_identity_e2e.rs:+3:19: +3:20\n+        switchInt(move _4) -> [0_isize: bb2, 1_isize: bb1, otherwise: bb4]; // scope 0 at $DIR/try_identity_e2e.rs:+3:13: +3:20\n+    }\n+\n+    bb1: {\n+        StorageLive(_7);                 // scope 0 at $DIR/try_identity_e2e.rs:+5:21: +5:22\n+        _7 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity_e2e.rs:+5:21: +5:22\n+        StorageLive(_8);                 // scope 2 at $DIR/try_identity_e2e.rs:+5:46: +5:47\n+        _8 = move _7;                    // scope 2 at $DIR/try_identity_e2e.rs:+5:46: +5:47\n+        Deinit(_3);                      // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n+        ((_3 as Break).0: E) = move _8;  // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n+        discriminant(_3) = 1;            // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n+        StorageDead(_8);                 // scope 2 at $DIR/try_identity_e2e.rs:+5:47: +5:48\n+        StorageDead(_7);                 // scope 0 at $DIR/try_identity_e2e.rs:+5:47: +5:48\n+        _9 = discriminant(_3);           // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n+        switchInt(move _9) -> [0_isize: bb5, 1_isize: bb3, otherwise: bb4]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +7:10\n+    }\n+\n+    bb2: {\n+        StorageLive(_5);                 // scope 0 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n+        _5 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n+        StorageLive(_6);                 // scope 1 at $DIR/try_identity_e2e.rs:+4:48: +4:49\n+        _6 = move _5;                    // scope 1 at $DIR/try_identity_e2e.rs:+4:48: +4:49\n+        Deinit(_3);                      // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n+        ((_3 as Continue).0: T) = move _6; // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n+        discriminant(_3) = 0;            // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n+        StorageDead(_6);                 // scope 1 at $DIR/try_identity_e2e.rs:+4:49: +4:50\n+        StorageDead(_5);                 // scope 0 at $DIR/try_identity_e2e.rs:+4:49: +4:50\n+        _9 = discriminant(_3);           // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n+        switchInt(move _9) -> [0_isize: bb5, 1_isize: bb3, otherwise: bb4]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +7:10\n+    }\n+\n+    bb3: {\n+        StorageLive(_11);                // scope 0 at $DIR/try_identity_e2e.rs:+9:32: +9:33\n+        _11 = move ((_3 as Break).0: E); // scope 0 at $DIR/try_identity_e2e.rs:+9:32: +9:33\n+        StorageLive(_12);                // scope 4 at $DIR/try_identity_e2e.rs:+9:49: +9:50\n+        _12 = move _11;                  // scope 4 at $DIR/try_identity_e2e.rs:+9:49: +9:50\n+        Deinit(_0);                      // scope 4 at $DIR/try_identity_e2e.rs:+9:45: +9:51\n+        ((_0 as Err).0: E) = move _12;   // scope 4 at $DIR/try_identity_e2e.rs:+9:45: +9:51\n+        discriminant(_0) = 1;            // scope 4 at $DIR/try_identity_e2e.rs:+9:45: +9:51\n+        StorageDead(_12);                // scope 4 at $DIR/try_identity_e2e.rs:+9:50: +9:51\n+        StorageDead(_11);                // scope 0 at $DIR/try_identity_e2e.rs:+9:50: +9:51\n+        StorageDead(_2);                 // scope 0 at $DIR/try_identity_e2e.rs:+11:5: +11:6\n+        StorageDead(_3);                 // scope 0 at $DIR/try_identity_e2e.rs:+12:1: +12:2\n+        return;                          // scope 0 at $DIR/try_identity_e2e.rs:+12:1: +12:2\n+    }\n+\n+    bb4: {\n+        unreachable;                     // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n+    }\n+\n+    bb5: {\n+        StorageLive(_10);                // scope 0 at $DIR/try_identity_e2e.rs:+8:35: +8:36\n+        _10 = move ((_3 as Continue).0: T); // scope 0 at $DIR/try_identity_e2e.rs:+8:35: +8:36\n+        _2 = move _10;                   // scope 3 at $DIR/try_identity_e2e.rs:+8:41: +8:42\n+        StorageDead(_10);                // scope 0 at $DIR/try_identity_e2e.rs:+8:41: +8:42\n+        Deinit(_0);                      // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +11:6\n+        ((_0 as Ok).0: T) = move _2;     // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +11:6\n+        discriminant(_0) = 0;            // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +11:6\n+        StorageDead(_2);                 // scope 0 at $DIR/try_identity_e2e.rs:+11:5: +11:6\n+        StorageDead(_3);                 // scope 0 at $DIR/try_identity_e2e.rs:+12:1: +12:2\n+        return;                          // scope 0 at $DIR/try_identity_e2e.rs:+12:1: +12:2\n+    }\n+}"}, {"sha": "18d3e0fb2639d9b40b4a8d42aa28d5bf437167e1", "filename": "src/test/mir-opt/try_identity_e2e.old.PreCodegen.after.mir", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -0,0 +1,53 @@\n+// MIR for `old` after PreCodegen\n+\n+fn old(_1: Result<T, E>) -> Result<T, E> {\n+    debug x => _1;                       // in scope 0 at $DIR/try_identity_e2e.rs:+0:14: +0:15\n+    let mut _0: std::result::Result<T, E>; // return place in scope 0 at $DIR/try_identity_e2e.rs:+0:34: +0:46\n+    let mut _2: T;                       // in scope 0 at $DIR/try_identity_e2e.rs:+2:9: +5:10\n+    let mut _3: isize;                   // in scope 0 at $DIR/try_identity_e2e.rs:+3:13: +3:18\n+    let _4: T;                           // in scope 0 at $DIR/try_identity_e2e.rs:+3:16: +3:17\n+    let _5: E;                           // in scope 0 at $DIR/try_identity_e2e.rs:+4:17: +4:18\n+    let mut _6: E;                       // in scope 0 at $DIR/try_identity_e2e.rs:+4:34: +4:35\n+    scope 1 {\n+        debug v => _4;                   // in scope 1 at $DIR/try_identity_e2e.rs:+3:16: +3:17\n+    }\n+    scope 2 {\n+        debug e => _5;                   // in scope 2 at $DIR/try_identity_e2e.rs:+4:17: +4:18\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +5:10\n+        _3 = discriminant(_1);           // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +2:16\n+        switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +2:16\n+    }\n+\n+    bb1: {\n+        StorageLive(_5);                 // scope 0 at $DIR/try_identity_e2e.rs:+4:17: +4:18\n+        _5 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity_e2e.rs:+4:17: +4:18\n+        StorageLive(_6);                 // scope 2 at $DIR/try_identity_e2e.rs:+4:34: +4:35\n+        _6 = move _5;                    // scope 2 at $DIR/try_identity_e2e.rs:+4:34: +4:35\n+        Deinit(_0);                      // scope 2 at $DIR/try_identity_e2e.rs:+4:30: +4:36\n+        ((_0 as Err).0: E) = move _6;    // scope 2 at $DIR/try_identity_e2e.rs:+4:30: +4:36\n+        discriminant(_0) = 1;            // scope 2 at $DIR/try_identity_e2e.rs:+4:30: +4:36\n+        StorageDead(_6);                 // scope 2 at $DIR/try_identity_e2e.rs:+4:35: +4:36\n+        StorageDead(_5);                 // scope 0 at $DIR/try_identity_e2e.rs:+4:35: +4:36\n+        StorageDead(_2);                 // scope 0 at $DIR/try_identity_e2e.rs:+6:5: +6:6\n+        return;                          // scope 0 at $DIR/try_identity_e2e.rs:+7:1: +7:2\n+    }\n+\n+    bb2: {\n+        unreachable;                     // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +2:16\n+    }\n+\n+    bb3: {\n+        StorageLive(_4);                 // scope 0 at $DIR/try_identity_e2e.rs:+3:16: +3:17\n+        _4 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity_e2e.rs:+3:16: +3:17\n+        _2 = move _4;                    // scope 1 at $DIR/try_identity_e2e.rs:+3:22: +3:23\n+        StorageDead(_4);                 // scope 0 at $DIR/try_identity_e2e.rs:+3:22: +3:23\n+        Deinit(_0);                      // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +6:6\n+        ((_0 as Ok).0: T) = move _2;     // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +6:6\n+        discriminant(_0) = 0;            // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +6:6\n+        StorageDead(_2);                 // scope 0 at $DIR/try_identity_e2e.rs:+6:5: +6:6\n+        return;                          // scope 0 at $DIR/try_identity_e2e.rs:+7:1: +7:2\n+    }\n+}"}, {"sha": "00cb80f5035be1112c588baf3b4e2f5c5b401614", "filename": "src/test/mir-opt/try_identity_e2e.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Ftry_identity_e2e.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fmir-opt%2Ftry_identity_e2e.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ftry_identity_e2e.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -0,0 +1,34 @@\n+// Track the status of MIR optimizations simplifying `Ok(res?)` for both the old and new desugarings\n+// of that syntax.\n+\n+use std::ops::ControlFlow;\n+\n+// EMIT_MIR try_identity_e2e.new.PreCodegen.after.mir\n+fn new<T, E>(x: Result<T, E>) -> Result<T, E> {\n+    Ok(\n+        match {\n+            match x {\n+                Ok(v) => ControlFlow::Continue(v),\n+                Err(e) => ControlFlow::Break(e),\n+            }\n+        } {\n+            ControlFlow::Continue(v) => v,\n+            ControlFlow::Break(e) => return Err(e),\n+        }\n+    )\n+}\n+\n+// EMIT_MIR try_identity_e2e.old.PreCodegen.after.mir\n+fn old<T, E>(x: Result<T, E>) -> Result<T, E> {\n+    Ok(\n+        match x {\n+            Ok(v) => v,\n+            Err(e) => return Err(e),\n+        }\n+    )\n+}\n+\n+fn main() {\n+    let _ = new::<(), ()>(Ok(()));\n+    let _ = old::<(), ()>(Ok(()));\n+}"}, {"sha": "812ca0c72bd058178d518b539eb4c709db737759", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 142, "deletions": 20, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -167,8 +167,8 @@ enum P {\n #[derive(SessionSubdiagnostic)]\n enum Q {\n     #[bar]\n-//~^ ERROR `#[bar]` is not a valid attribute\n-//~^^ ERROR cannot find attribute `bar` in this scope\n+    //~^ ERROR `#[bar]` is not a valid attribute\n+    //~^^ ERROR cannot find attribute `bar` in this scope\n     A {\n         #[primary_span]\n         span: Span,\n@@ -179,8 +179,8 @@ enum Q {\n #[derive(SessionSubdiagnostic)]\n enum R {\n     #[bar = \"...\"]\n-//~^ ERROR `#[bar = ...]` is not a valid attribute\n-//~^^ ERROR cannot find attribute `bar` in this scope\n+    //~^ ERROR `#[bar = ...]` is not a valid attribute\n+    //~^^ ERROR cannot find attribute `bar` in this scope\n     A {\n         #[primary_span]\n         span: Span,\n@@ -191,8 +191,8 @@ enum R {\n #[derive(SessionSubdiagnostic)]\n enum S {\n     #[bar = 4]\n-//~^ ERROR `#[bar = ...]` is not a valid attribute\n-//~^^ ERROR cannot find attribute `bar` in this scope\n+    //~^ ERROR `#[bar = ...]` is not a valid attribute\n+    //~^^ ERROR cannot find attribute `bar` in this scope\n     A {\n         #[primary_span]\n         span: Span,\n@@ -203,8 +203,8 @@ enum S {\n #[derive(SessionSubdiagnostic)]\n enum T {\n     #[bar(\"...\")]\n-//~^ ERROR `#[bar(\"...\")]` is not a valid attribute\n-//~^^ ERROR cannot find attribute `bar` in this scope\n+    //~^ ERROR `#[bar(...)]` is not a valid attribute\n+    //~^^ ERROR cannot find attribute `bar` in this scope\n     A {\n         #[primary_span]\n         span: Span,\n@@ -215,7 +215,7 @@ enum T {\n #[derive(SessionSubdiagnostic)]\n enum U {\n     #[label(code = \"...\")]\n-//~^ ERROR diagnostic slug must be first argument of a `#[label(...)]` attribute\n+    //~^ ERROR diagnostic slug must be first argument of a `#[label(...)]` attribute\n     A {\n         #[primary_span]\n         span: Span,\n@@ -232,7 +232,7 @@ enum V {\n         var: String,\n     },\n     B {\n-//~^ ERROR subdiagnostic kind not specified\n+    //~^ ERROR subdiagnostic kind not specified\n         #[primary_span]\n         span: Span,\n         var: String,\n@@ -307,6 +307,14 @@ union AC {\n     b: u64\n }\n \n+#[derive(SessionSubdiagnostic)]\n+#[label(parser::add_paren)]\n+#[label(parser::add_paren)]\n+struct AD {\n+    #[primary_span]\n+    span: Span,\n+}\n+\n #[derive(SessionSubdiagnostic)]\n #[label(parser::add_paren, parser::add_paren)]\n //~^ ERROR `#[label(parser::add_paren)]` is not a valid attribute\n@@ -319,16 +327,16 @@ struct AE {\n #[label(parser::add_paren)]\n struct AF {\n     #[primary_span]\n-//~^ NOTE previously specified here\n+    //~^ NOTE previously specified here\n     span_a: Span,\n     #[primary_span]\n-//~^ ERROR specified multiple times\n+    //~^ ERROR specified multiple times\n     span_b: Span,\n }\n \n #[derive(SessionSubdiagnostic)]\n struct AG {\n-//~^ ERROR subdiagnostic kind not specified\n+    //~^ ERROR subdiagnostic kind not specified\n     #[primary_span]\n     span: Span,\n }\n@@ -380,27 +388,25 @@ struct AK {\n     #[primary_span]\n     span: Span,\n     #[applicability]\n-//~^ NOTE previously specified here\n+    //~^ NOTE previously specified here\n     applicability_a: Applicability,\n     #[applicability]\n-//~^ ERROR specified multiple times\n+    //~^ ERROR specified multiple times\n     applicability_b: Applicability,\n }\n \n #[derive(SessionSubdiagnostic)]\n #[suggestion(parser::add_paren, code = \"...\")]\n-//~^ ERROR suggestion without `applicability`\n struct AL {\n     #[primary_span]\n     span: Span,\n     #[applicability]\n-//~^ ERROR the `#[applicability]` attribute can only be applied to fields of type `Applicability`\n+    //~^ ERROR the `#[applicability]` attribute can only be applied to fields of type `Applicability`\n     applicability: Span,\n }\n \n #[derive(SessionSubdiagnostic)]\n #[suggestion(parser::add_paren, code = \"...\")]\n-//~^ ERROR suggestion without `applicability`\n struct AM {\n     #[primary_span]\n     span: Span,\n@@ -436,8 +442,7 @@ struct AQ;\n \n #[derive(SessionSubdiagnostic)]\n #[suggestion(parser::add_paren, code = \"...\")]\n-//~^ ERROR suggestion without `applicability`\n-//~^^ ERROR suggestion without `#[primary_span]` field\n+//~^ ERROR suggestion without `#[primary_span]` field\n struct AR {\n     var: String,\n }\n@@ -507,3 +512,120 @@ struct AZ {\n     #[primary_span]\n     span: Span,\n }\n+\n+#[derive(SessionSubdiagnostic)]\n+#[suggestion(parser::add_paren, code = \"...\")]\n+//~^ ERROR suggestion without `#[primary_span]` field\n+struct BA {\n+    #[suggestion_part]\n+    //~^ ERROR `#[suggestion_part]` is not a valid attribute\n+    span: Span,\n+    #[suggestion_part(code = \"...\")]\n+    //~^ ERROR `#[suggestion_part(...)]` is not a valid attribute\n+    span2: Span,\n+    #[applicability]\n+    applicability: Applicability,\n+    var: String,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n+//~^ ERROR multipart suggestion without any `#[suggestion_part(...)]` fields\n+//~| ERROR `code` is not a valid nested attribute of a `multipart_suggestion` attribute\n+struct BBa {\n+    var: String,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n+struct BBb {\n+    #[suggestion_part]\n+    //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n+    span1: Span,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n+struct BBc {\n+    #[suggestion_part()]\n+    //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n+    span1: Span,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[multipart_suggestion(parser::add_paren)]\n+//~^ ERROR multipart suggestion without any `#[suggestion_part(...)]` fields\n+struct BC {\n+    #[primary_span]\n+    //~^ ERROR `#[primary_span]` is not a valid attribute\n+    span: Span,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[multipart_suggestion(parser::add_paren)]\n+struct BD {\n+    #[suggestion_part]\n+    //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n+    span1: Span,\n+    #[suggestion_part()]\n+    //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n+    span2: Span,\n+    #[suggestion_part(foo = \"bar\")]\n+    //~^ ERROR `#[suggestion_part(foo = ...)]` is not a valid attribute\n+    span4: Span,\n+    #[suggestion_part(code = \"...\")]\n+    //~^ ERROR the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n+    s1: String,\n+    #[suggestion_part()]\n+    //~^ ERROR the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n+    s2: String,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n+struct BE {\n+    #[suggestion_part(code = \"...\", code = \",,,\")]\n+    //~^ ERROR specified multiple times\n+    //~| NOTE previously specified here\n+    span: Span,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n+struct BF {\n+    #[suggestion_part(code = \"(\")]\n+    first: Span,\n+    #[suggestion_part(code = \")\")]\n+    second: Span,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[multipart_suggestion(parser::add_paren)]\n+struct BG {\n+    #[applicability]\n+    appl: Applicability,\n+    #[suggestion_part(code = \"(\")]\n+    first: Span,\n+    #[suggestion_part(code = \")\")]\n+    second: Span,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n+//~^ NOTE previously specified here\n+struct BH {\n+    #[applicability]\n+    //~^ ERROR specified multiple times\n+    appl: Applicability,\n+    #[suggestion_part(code = \"(\")]\n+    first: Span,\n+    #[suggestion_part(code = \")\")]\n+    second: Span,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n+struct BI {\n+    #[suggestion_part(code = \"\")]\n+    spans: Vec<Span>,\n+}"}, {"sha": "0a0247e898088b41bcb6592e1a53afb59cc76ec8", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.stderr", "status": "modified", "additions": 157, "deletions": 65, "changes": 222, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -65,16 +65,16 @@ LL | #[label()]\n    | ^^^^^^^^^^\n \n error: `code` is not a valid nested attribute of a `label` attribute\n-  --> $DIR/subdiagnostic-derive.rs:137:1\n+  --> $DIR/subdiagnostic-derive.rs:137:28\n    |\n LL | #[label(parser::add_paren, code = \"...\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                            ^^^^^^^^^^^^\n \n error: `applicability` is not a valid nested attribute of a `label` attribute\n-  --> $DIR/subdiagnostic-derive.rs:146:1\n+  --> $DIR/subdiagnostic-derive.rs:146:28\n    |\n LL | #[label(parser::add_paren, applicability = \"machine-applicable\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unsupported type attribute for subdiagnostic enum\n   --> $DIR/subdiagnostic-derive.rs:155:1\n@@ -100,13 +100,11 @@ error: `#[bar = ...]` is not a valid attribute\n LL |     #[bar = 4]\n    |     ^^^^^^^^^^\n \n-error: `#[bar(\"...\")]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:205:11\n+error: `#[bar(...)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:205:5\n    |\n LL |     #[bar(\"...\")]\n-   |           ^^^^^\n-   |\n-   = help: first argument of the attribute should be the diagnostic slug\n+   |     ^^^^^^^^^^^^^\n \n error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n   --> $DIR/subdiagnostic-derive.rs:217:5\n@@ -163,6 +161,8 @@ error: `#[bar(...)]` is not a valid attribute\n    |\n LL |     #[bar(\"...\")]\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: only `primary_span`, `applicability` and `skip_arg` are valid field attributes\n \n error: unexpected unsupported untagged union\n   --> $DIR/subdiagnostic-derive.rs:304:1\n@@ -175,141 +175,233 @@ LL | | }\n    | |_^\n \n error: `#[label(parser::add_paren)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:311:28\n+  --> $DIR/subdiagnostic-derive.rs:319:28\n    |\n LL | #[label(parser::add_paren, parser::add_paren)]\n    |                            ^^^^^^^^^^^^^^^^^\n    |\n    = help: a diagnostic slug must be the first argument to the attribute\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:324:5\n+  --> $DIR/subdiagnostic-derive.rs:332:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:321:5\n+  --> $DIR/subdiagnostic-derive.rs:329:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: subdiagnostic kind not specified\n-  --> $DIR/subdiagnostic-derive.rs:330:8\n+  --> $DIR/subdiagnostic-derive.rs:338:8\n    |\n LL | struct AG {\n    |        ^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:367:47\n+  --> $DIR/subdiagnostic-derive.rs:375:47\n    |\n LL | #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n    |                                               ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:367:33\n+  --> $DIR/subdiagnostic-derive.rs:375:33\n    |\n LL | #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n    |                                 ^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:385:5\n+  --> $DIR/subdiagnostic-derive.rs:393:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:382:5\n+  --> $DIR/subdiagnostic-derive.rs:390:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: the `#[applicability]` attribute can only be applied to fields of type `Applicability`\n-  --> $DIR/subdiagnostic-derive.rs:396:5\n+  --> $DIR/subdiagnostic-derive.rs:403:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n-error: suggestion without `applicability`\n-  --> $DIR/subdiagnostic-derive.rs:391:1\n+error: suggestion without `code = \"...\"`\n+  --> $DIR/subdiagnostic-derive.rs:416:1\n    |\n-LL | / #[suggestion(parser::add_paren, code = \"...\")]\n-LL | |\n-LL | | struct AL {\n-LL | |     #[primary_span]\n-...  |\n-LL | |     applicability: Span,\n-LL | | }\n-   | |_^\n+LL | #[suggestion(parser::add_paren)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: suggestion without `applicability`\n-  --> $DIR/subdiagnostic-derive.rs:402:1\n+error: invalid applicability\n+  --> $DIR/subdiagnostic-derive.rs:426:46\n+   |\n+LL | #[suggestion(parser::add_paren, code =\"...\", applicability = \"foo\")]\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: suggestion without `#[primary_span]` field\n+  --> $DIR/subdiagnostic-derive.rs:444:1\n    |\n LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n-LL | | struct AM {\n-LL | |     #[primary_span]\n-LL | |     span: Span,\n+LL | | struct AR {\n+LL | |     var: String,\n LL | | }\n    | |_^\n \n-error: suggestion without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:410:1\n+error: unsupported type attribute for subdiagnostic enum\n+  --> $DIR/subdiagnostic-derive.rs:458:1\n    |\n-LL | / #[suggestion(parser::add_paren)]\n+LL | #[label]\n+   | ^^^^^^^^\n+\n+error: `var` doesn't refer to a field on this type\n+  --> $DIR/subdiagnostic-derive.rs:478:39\n+   |\n+LL | #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+   |                                       ^^^^^^^\n+\n+error: `var` doesn't refer to a field on this type\n+  --> $DIR/subdiagnostic-derive.rs:497:43\n+   |\n+LL |     #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+   |                                           ^^^^^^^\n+\n+error: `#[suggestion_part]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:520:5\n+   |\n+LL |     #[suggestion_part]\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `#[suggestion_part(...)]` is only valid in multipart suggestions, use `#[primary_span]` instead\n+\n+error: `#[suggestion_part(...)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:523:5\n+   |\n+LL |     #[suggestion_part(code = \"...\")]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `#[suggestion_part(...)]` is only valid in multipart suggestions\n+\n+error: suggestion without `#[primary_span]` field\n+  --> $DIR/subdiagnostic-derive.rs:517:1\n+   |\n+LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n-LL | | struct AN {\n-LL | |     #[primary_span]\n+LL | | struct BA {\n+LL | |     #[suggestion_part]\n ...  |\n-LL | |     applicability: Applicability,\n+LL | |     var: String,\n LL | | }\n    | |_^\n \n-error: invalid applicability\n-  --> $DIR/subdiagnostic-derive.rs:420:46\n+error: `code` is not a valid nested attribute of a `multipart_suggestion` attribute\n+  --> $DIR/subdiagnostic-derive.rs:532:43\n    |\n-LL | #[suggestion(parser::add_paren, code =\"...\", applicability = \"foo\")]\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^\n+LL | #[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n+   |                                           ^^^^^^^^^^^^\n \n-error: suggestion without `applicability`\n-  --> $DIR/subdiagnostic-derive.rs:438:1\n+error: multipart suggestion without any `#[suggestion_part(...)]` fields\n+  --> $DIR/subdiagnostic-derive.rs:532:1\n    |\n-LL | / #[suggestion(parser::add_paren, code = \"...\")]\n+LL | / #[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n LL | |\n LL | |\n-LL | | struct AR {\n+LL | | struct BBa {\n LL | |     var: String,\n LL | | }\n    | |_^\n \n-error: suggestion without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:438:1\n+error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n+  --> $DIR/subdiagnostic-derive.rs:542:5\n    |\n-LL | / #[suggestion(parser::add_paren, code = \"...\")]\n+LL |     #[suggestion_part]\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n+  --> $DIR/subdiagnostic-derive.rs:550:5\n+   |\n+LL |     #[suggestion_part()]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: `#[primary_span]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:559:5\n+   |\n+LL |     #[primary_span]\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: multipart suggestions use one or more `#[suggestion_part]`s rather than one `#[primary_span]`\n+\n+error: multipart suggestion without any `#[suggestion_part(...)]` fields\n+  --> $DIR/subdiagnostic-derive.rs:556:1\n+   |\n+LL | / #[multipart_suggestion(parser::add_paren)]\n LL | |\n+LL | | struct BC {\n+LL | |     #[primary_span]\n LL | |\n-LL | | struct AR {\n-LL | |     var: String,\n+LL | |     span: Span,\n LL | | }\n    | |_^\n \n-error: unsupported type attribute for subdiagnostic enum\n-  --> $DIR/subdiagnostic-derive.rs:453:1\n+error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n+  --> $DIR/subdiagnostic-derive.rs:567:5\n    |\n-LL | #[label]\n-   | ^^^^^^^^\n+LL |     #[suggestion_part]\n+   |     ^^^^^^^^^^^^^^^^^^\n \n-error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:473:39\n+error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n+  --> $DIR/subdiagnostic-derive.rs:570:5\n    |\n-LL | #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n-   |                                       ^^^^^^^\n+LL |     #[suggestion_part()]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:492:43\n+error: `#[suggestion_part(foo = ...)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:573:23\n    |\n-LL |     #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n-   |                                           ^^^^^^^\n+LL |     #[suggestion_part(foo = \"bar\")]\n+   |                       ^^^^^^^^^^^\n+   |\n+   = help: `code` is the only valid nested attribute\n+\n+error: the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n+  --> $DIR/subdiagnostic-derive.rs:576:5\n+   |\n+LL |     #[suggestion_part(code = \"...\")]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n+  --> $DIR/subdiagnostic-derive.rs:579:5\n+   |\n+LL |     #[suggestion_part()]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: specified multiple times\n+  --> $DIR/subdiagnostic-derive.rs:587:37\n+   |\n+LL |     #[suggestion_part(code = \"...\", code = \",,,\")]\n+   |                                     ^^^^^^^^^^^^\n+   |\n+note: previously specified here\n+  --> $DIR/subdiagnostic-derive.rs:587:23\n+   |\n+LL |     #[suggestion_part(code = \"...\", code = \",,,\")]\n+   |                       ^^^^^^^^^^^^\n+\n+error: specified multiple times\n+  --> $DIR/subdiagnostic-derive.rs:617:5\n+   |\n+LL |     #[applicability]\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: previously specified here\n+  --> $DIR/subdiagnostic-derive.rs:614:43\n+   |\n+LL | #[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find attribute `foo` in this scope\n   --> $DIR/subdiagnostic-derive.rs:63:3\n@@ -371,6 +463,6 @@ error[E0425]: cannot find value `slug` in module `rustc_errors::fluent`\n LL | #[label(slug)]\n    |         ^^^^ not found in `rustc_errors::fluent`\n \n-error: aborting due to 50 previous errors\n+error: aborting due to 63 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "f298871f122d3a704a1e46b08f91f6269eae9c76", "filename": "src/test/ui/lint/let_underscore/let_underscore_drop.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_drop.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+#![warn(let_underscore_drop)]\n+\n+struct NontrivialDrop;\n+\n+impl Drop for NontrivialDrop {\n+    fn drop(&mut self) {\n+        println!(\"Dropping!\");\n+    }\n+}\n+\n+fn main() {\n+    let _ = NontrivialDrop; //~WARNING non-binding let on a type that implements `Drop`\n+}"}, {"sha": "7b7de202e46268db4fa376fcb00913b586901207", "filename": "src/test/ui/lint/let_underscore/let_underscore_drop.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_drop.stderr?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -0,0 +1,22 @@\n+warning: non-binding let on a type that implements `Drop`\n+  --> $DIR/let_underscore_drop.rs:13:5\n+   |\n+LL |     let _ = NontrivialDrop;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/let_underscore_drop.rs:2:9\n+   |\n+LL | #![warn(let_underscore_drop)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+help: consider binding to an unused variable to avoid immediately dropping the value\n+   |\n+LL |     let _unused = NontrivialDrop;\n+   |         ~~~~~~~\n+help: consider immediately dropping the value\n+   |\n+LL |     drop(NontrivialDrop);\n+   |     ~~~~~              +\n+\n+warning: 1 warning emitted\n+"}, {"sha": "7423862cdf05dcb17b5cb277752b8f0a2f999377", "filename": "src/test/ui/lint/let_underscore/let_underscore_lock.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_lock.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -0,0 +1,7 @@\n+// check-fail\n+use std::sync::{Arc, Mutex};\n+\n+fn main() {\n+    let data = Arc::new(Mutex::new(0));\n+    let _ = data.lock().unwrap(); //~ERROR non-binding let on a synchronization lock\n+}"}, {"sha": "fb58af0a42f81422097a8e7848caf14e3a785c3a", "filename": "src/test/ui/lint/let_underscore/let_underscore_lock.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_lock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_lock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_lock.stderr?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -0,0 +1,20 @@\n+error: non-binding let on a synchronization lock\n+  --> $DIR/let_underscore_lock.rs:6:9\n+   |\n+LL |     let _ = data.lock().unwrap();\n+   |         ^   ^^^^^^^^^^^^^^^^^^^^ this binding will immediately drop the value assigned to it\n+   |         |\n+   |         this lock is not assigned to a binding and is immediately dropped\n+   |\n+   = note: `#[deny(let_underscore_lock)]` on by default\n+help: consider binding to an unused variable to avoid immediately dropping the value\n+   |\n+LL |     let _unused = data.lock().unwrap();\n+   |         ~~~~~~~\n+help: consider immediately dropping the value\n+   |\n+LL |     drop(data.lock().unwrap());\n+   |     ~~~~~                    +\n+\n+error: aborting due to previous error\n+"}, {"sha": "d51d2b57267b6f6686692e252dffac0801642f18", "filename": "src/test/ui/privacy/access_levels.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -0,0 +1,49 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_access_level] mod outer { //~ ERROR None\n+    #[rustc_access_level] pub mod inner { //~ ERROR Some(Exported)\n+        #[rustc_access_level]\n+        extern \"C\" { //~ ERROR Some(Exported)\n+            #[rustc_access_level] static a: u8; //~ ERROR None\n+            #[rustc_access_level] pub fn b(); //~ ERROR Some(Exported)\n+        }\n+        #[rustc_access_level]\n+        pub trait Trait { //~ ERROR Some(Exported)\n+            #[rustc_access_level] const A: i32; //~ ERROR Some(Exported)\n+            #[rustc_access_level] type B; //~ ERROR Some(Exported)\n+        }\n+\n+        #[rustc_access_level]\n+        pub struct Struct { //~ ERROR Some(Exported)\n+            #[rustc_access_level] a: u8, //~ ERROR None\n+            #[rustc_access_level] pub b: u8, //~ ERROR Some(Exported)\n+        }\n+\n+        #[rustc_access_level]\n+        pub union Union { //~ ERROR Some(Exported)\n+            #[rustc_access_level] a: u8, //~ ERROR None\n+            #[rustc_access_level] pub b: u8, //~ ERROR Some(Exported)\n+        }\n+\n+        #[rustc_access_level]\n+        pub enum Enum { //~ ERROR Some(Exported)\n+            #[rustc_access_level] A( //~ ERROR Some(Exported)\n+                #[rustc_access_level] Struct, //~ ERROR Some(Exported)\n+                #[rustc_access_level] Union,  //~ ERROR Some(Exported)\n+            ),\n+        }\n+    }\n+\n+    #[rustc_access_level] macro_rules! none_macro { //~ ERROR None\n+        () => {};\n+    }\n+\n+    #[macro_export]\n+    #[rustc_access_level] macro_rules! public_macro { //~ ERROR Some(Public)\n+        () => {};\n+    }\n+}\n+\n+pub use outer::inner;\n+\n+fn main() {}"}, {"sha": "f326293c384a5ae824c03a00cfc400a0c6cd2b0e", "filename": "src/test/ui/privacy/access_levels.stderr", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Faccess_levels.stderr?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -0,0 +1,125 @@\n+error: None\n+  --> $DIR/access_levels.rs:3:23\n+   |\n+LL | #[rustc_access_level] mod outer {\n+   |                       ^^^^^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:4:27\n+   |\n+LL |     #[rustc_access_level] pub mod inner {\n+   |                           ^^^^^^^^^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:6:9\n+   |\n+LL | /         extern \"C\" {\n+LL | |             #[rustc_access_level] static a: u8;\n+LL | |             #[rustc_access_level] pub fn b();\n+LL | |         }\n+   | |_________^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:11:9\n+   |\n+LL |         pub trait Trait {\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:17:9\n+   |\n+LL |         pub struct Struct {\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: None\n+  --> $DIR/access_levels.rs:18:35\n+   |\n+LL |             #[rustc_access_level] a: u8,\n+   |                                   ^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:19:35\n+   |\n+LL |             #[rustc_access_level] pub b: u8,\n+   |                                   ^^^^^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:23:9\n+   |\n+LL |         pub union Union {\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: None\n+  --> $DIR/access_levels.rs:24:35\n+   |\n+LL |             #[rustc_access_level] a: u8,\n+   |                                   ^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:25:35\n+   |\n+LL |             #[rustc_access_level] pub b: u8,\n+   |                                   ^^^^^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:29:9\n+   |\n+LL |         pub enum Enum {\n+   |         ^^^^^^^^^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:30:35\n+   |\n+LL |             #[rustc_access_level] A(\n+   |                                   ^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:31:39\n+   |\n+LL |                 #[rustc_access_level] Struct,\n+   |                                       ^^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:32:39\n+   |\n+LL |                 #[rustc_access_level] Union,\n+   |                                       ^^^^^\n+\n+error: None\n+  --> $DIR/access_levels.rs:37:27\n+   |\n+LL |     #[rustc_access_level] macro_rules! none_macro {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Some(Public)\n+  --> $DIR/access_levels.rs:42:27\n+   |\n+LL |     #[rustc_access_level] macro_rules! public_macro {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:12:35\n+   |\n+LL |             #[rustc_access_level] const A: i32;\n+   |                                   ^^^^^^^^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:13:35\n+   |\n+LL |             #[rustc_access_level] type B;\n+   |                                   ^^^^^^\n+\n+error: None\n+  --> $DIR/access_levels.rs:7:35\n+   |\n+LL |             #[rustc_access_level] static a: u8;\n+   |                                   ^^^^^^^^^^^^\n+\n+error: Some(Exported)\n+  --> $DIR/access_levels.rs:8:35\n+   |\n+LL |             #[rustc_access_level] pub fn b();\n+   |                                   ^^^^^^^^^^\n+\n+error: aborting due to 20 previous errors\n+"}, {"sha": "f4dac6e947e323e37c7c1996fb982061159d7c39", "filename": "src/tools/error_index_generator/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftools%2Ferror_index_generator%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftools%2Ferror_index_generator%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2FCargo.toml?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -4,7 +4,7 @@ version = \"0.0.0\"\n edition = \"2021\"\n \n [dependencies]\n-rustdoc = { path = \"../../librustdoc\" }\n+mdbook = { version = \"0.4\", default-features = false, features = [\"search\"] }\n \n [[bin]]\n name = \"error_index_generator\""}, {"sha": "885100ae3a4490fe63075580c60b29118ee310d3", "filename": "src/tools/error_index_generator/book_config.toml", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftools%2Ferror_index_generator%2Fbook_config.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftools%2Ferror_index_generator%2Fbook_config.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fbook_config.toml?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -0,0 +1,19 @@\n+[book]\n+title = \"Error codes index\"\n+description = \"Book listing all Rust error codes\"\n+src = \"\"\n+\n+[output.html]\n+git-repository-url = \"https://github.com/rust-lang/rust/\"\n+additional-css = [\"error-index.css\"]\n+additional-js = [\"error-index.js\"]\n+\n+[output.html.search]\n+enable = true\n+limit-results = 20\n+use-boolean-and = true\n+boost-title = 2\n+boost-hierarchy = 2\n+boost-paragraph = 1\n+expand = true\n+heading-split-level = 0"}, {"sha": "8975af82de03b354b5148ecd94796adfd2ed75b6", "filename": "src/tools/error_index_generator/error-index.css", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftools%2Ferror_index_generator%2Ferror-index.css", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftools%2Ferror_index_generator%2Ferror-index.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Ferror-index.css?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -0,0 +1,38 @@\n+code.compile_fail {\n+\tborder-left: 2px solid red;\n+}\n+\n+pre .tooltip {\n+\tposition: absolute;\n+\tleft: -25px;\n+\ttop: 0;\n+\tz-index: 1;\n+\tcolor: red;\n+\tcursor: pointer;\n+}\n+pre .tooltip::after {\n+\tdisplay: none;\n+\tcontent: \"This example deliberately fails to compile\";\n+\tbackground-color: #000;\n+\tcolor: #fff;\n+\tborder-color: #000;\n+\ttext-align: center;\n+\tpadding: 5px 3px 3px 3px;\n+\tborder-radius: 6px;\n+\tmargin-left: 5px;\n+}\n+pre .tooltip::before {\n+\tdisplay: none;\n+\tborder-color: transparent black transparent transparent;\n+\tcontent: \" \";\n+\tposition: absolute;\n+\ttop: 50%;\n+\tleft: 16px;\n+\tmargin-top: -5px;\n+\tborder-width: 5px;\n+\tborder-style: solid;\n+}\n+\n+pre .tooltip:hover::before, pre .tooltip:hover::after {\n+\tdisplay: inline;\n+}"}, {"sha": "39b371be04b95cb72884bfb35f96a4c96296efee", "filename": "src/tools/error_index_generator/error-index.js", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftools%2Ferror_index_generator%2Ferror-index.js", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftools%2Ferror_index_generator%2Ferror-index.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Ferror-index.js?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -0,0 +1,9 @@\n+for (const elem of document.querySelectorAll(\"pre.playground\")) {\n+    if (elem.querySelector(\".compile_fail\") === null) {\n+        continue;\n+    }\n+    const child = document.createElement(\"div\");\n+    child.className = \"tooltip\";\n+    child.textContent = \"\u24d8\";\n+    elem.appendChild(child);\n+}"}, {"sha": "1bde8e007826dffca053aa69474ecba3530ea68a", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 111, "deletions": 139, "changes": 250, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -1,20 +1,21 @@\n #![feature(rustc_private)]\n \n extern crate rustc_driver;\n-extern crate rustc_span;\n \n+// We use the function we generate from `register_diagnostics!`.\n use crate::error_codes::error_codes;\n \n use std::env;\n use std::error::Error;\n-use std::fs::{create_dir_all, File};\n+use std::fs::{self, File};\n use std::io::Write;\n use std::path::Path;\n use std::path::PathBuf;\n \n-use rustc_span::edition::DEFAULT_EDITION;\n+use std::str::FromStr;\n \n-use rustdoc::html::markdown::{ErrorCodes, HeadingOffset, IdMap, Markdown, Playground};\n+use mdbook::book::{parse_summary, BookItem, Chapter};\n+use mdbook::{Config, MDBook};\n \n macro_rules! register_diagnostics {\n     ($($error_code:ident: $message:expr,)+ ; $($undocumented:ident,)* ) => {\n@@ -33,104 +34,21 @@ macro_rules! register_diagnostics {\n mod error_codes;\n \n enum OutputFormat {\n-    HTML(HTMLFormatter),\n+    HTML,\n     Markdown,\n     Unknown(String),\n }\n \n impl OutputFormat {\n-    fn from(format: &str, resource_suffix: &str) -> OutputFormat {\n+    fn from(format: &str) -> OutputFormat {\n         match &*format.to_lowercase() {\n-            \"html\" => OutputFormat::HTML(HTMLFormatter(resource_suffix.to_owned())),\n+            \"html\" => OutputFormat::HTML,\n             \"markdown\" => OutputFormat::Markdown,\n             s => OutputFormat::Unknown(s.to_owned()),\n         }\n     }\n }\n \n-struct HTMLFormatter(String);\n-\n-impl HTMLFormatter {\n-    fn create_error_code_file(\n-        &self,\n-        err_code: &str,\n-        explanation: &str,\n-        parent_dir: &Path,\n-    ) -> Result<(), Box<dyn Error>> {\n-        let mut output_file = File::create(parent_dir.join(err_code).with_extension(\"html\"))?;\n-\n-        self.header(&mut output_file, \"../\", \"\")?;\n-        self.title(&mut output_file, &format!(\"Error code {}\", err_code))?;\n-\n-        let mut id_map = IdMap::new();\n-        let playground =\n-            Playground { crate_name: None, url: String::from(\"https://play.rust-lang.org/\") };\n-        write!(\n-            output_file,\n-            \"{}\",\n-            Markdown {\n-                content: explanation,\n-                links: &[],\n-                ids: &mut id_map,\n-                error_codes: ErrorCodes::Yes,\n-                edition: DEFAULT_EDITION,\n-                playground: &Some(playground),\n-                heading_offset: HeadingOffset::H1,\n-            }\n-            .into_string()\n-        )?;\n-        write!(\n-            output_file,\n-            \"<p>\\\n-                <a style='text-align: center;display: block;width: 100%;' \\\n-                   href='../error-index.html'>Back to list of error codes</a>\\\n-             </p>\",\n-        )?;\n-\n-        self.footer(&mut output_file)\n-    }\n-\n-    fn header(\n-        &self,\n-        output: &mut dyn Write,\n-        extra_path: &str,\n-        extra: &str,\n-    ) -> Result<(), Box<dyn Error>> {\n-        write!(\n-            output,\n-            r##\"<!DOCTYPE html>\n-<html>\n-<head>\n-<title>Rust Compiler Error Index</title>\n-<meta charset=\"utf-8\">\n-<!-- Include rust.css after light.css so its rules take priority. -->\n-<link rel=\"stylesheet\" type=\"text/css\" href=\"{extra_path}rustdoc{suffix}.css\"/>\n-<link rel=\"stylesheet\" type=\"text/css\" href=\"{extra_path}light{suffix}.css\"/>\n-<link rel=\"stylesheet\" type=\"text/css\" href=\"{extra_path}rust.css\"/>\n-<style>\n-.error-undescribed {{\n-    display: none;\n-}}\n-</style>{extra}\n-</head>\n-<body>\n-\"##,\n-            suffix = self.0,\n-        )?;\n-        Ok(())\n-    }\n-\n-    fn title(&self, output: &mut dyn Write, title: &str) -> Result<(), Box<dyn Error>> {\n-        write!(output, \"<h1>{}</h1>\\n\", title)?;\n-        Ok(())\n-    }\n-\n-    fn footer(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>> {\n-        write!(output, \"</body></html>\")?;\n-        Ok(())\n-    }\n-}\n-\n /// Output an HTML page for the errors in `err_map` to `output_path`.\n fn render_markdown(output_path: &Path) -> Result<(), Box<dyn Error>> {\n     let mut output_file = File::create(output_path)?;\n@@ -147,61 +65,119 @@ fn render_markdown(output_path: &Path) -> Result<(), Box<dyn Error>> {\n     Ok(())\n }\n \n-fn render_html(output_path: &Path, formatter: HTMLFormatter) -> Result<(), Box<dyn Error>> {\n-    let mut output_file = File::create(output_path)?;\n+// By default, mdbook doesn't consider code blocks as Rust ones contrary to rustdoc so we have\n+// to manually add `rust` attribute whenever needed.\n+fn add_rust_attribute_on_codeblock(explanation: &str) -> String {\n+    // Very hacky way to add the rust attribute on all code blocks.\n+    let mut skip = true;\n+    explanation.split(\"\\n```\").fold(String::new(), |mut acc, part| {\n+        if !acc.is_empty() {\n+            acc.push_str(\"\\n```\");\n+        }\n+        if !skip {\n+            if let Some(attrs) = part.split('\\n').next() {\n+                if !attrs.contains(\"rust\")\n+                    && (attrs.is_empty()\n+                        || attrs.contains(\"compile_fail\")\n+                        || attrs.contains(\"ignore\")\n+                        || attrs.contains(\"edition\"))\n+                {\n+                    if !attrs.is_empty() {\n+                        acc.push_str(\"rust,\");\n+                    } else {\n+                        acc.push_str(\"rust\");\n+                    }\n+                }\n+            }\n+        }\n+        skip = !skip;\n+        acc.push_str(part);\n+        acc\n+    })\n+}\n \n-    let error_codes_dir = \"error_codes\";\n+fn render_html(output_path: &Path) -> Result<(), Box<dyn Error>> {\n+    let mut introduction = format!(\n+        \"<script src='redirect.js'></script>\n+# Rust error codes index\n \n-    let parent = output_path.parent().expect(\"There should have a parent\").join(error_codes_dir);\n+This page lists all the error codes emitted by the Rust compiler.\n \n-    if !parent.exists() {\n-        create_dir_all(&parent)?;\n-    }\n+\"\n+    );\n \n-    formatter.header(\n-        &mut output_file,\n-        \"\",\n-        &format!(\n-            r#\"<script>(function() {{\n-    if (window.location.hash) {{\n-        let code = window.location.hash.replace(/^#/, '');\n-        // We have to make sure this pattern matches to avoid inadvertently creating an\n-        // open redirect.\n-        if (/^E[0-9]+$/.test(code)) {{\n-            window.location = './{error_codes_dir}/' + code + '.html';\n-        }}\n-    }}\n-}})()</script>\"#\n-        ),\n-    )?;\n-    formatter.title(&mut output_file, \"Rust Compiler Error Index\")?;\n+    let err_codes = error_codes();\n+    let mut chapters = Vec::with_capacity(err_codes.len());\n \n-    write!(\n-        output_file,\n-        \"<p>This page lists all the error codes emitted by the Rust compiler. If you want a full \\\n-            explanation on an error code, click on it.</p>\\\n-         <ul>\",\n-    )?;\n-    for (err_code, explanation) in error_codes().iter() {\n+    for (err_code, explanation) in err_codes.iter() {\n         if let Some(explanation) = explanation {\n-            write!(\n-                output_file,\n-                \"<li><a href='./{0}/{1}.html'>{1}</a></li>\",\n-                error_codes_dir, err_code\n-            )?;\n-            formatter.create_error_code_file(err_code, explanation, &parent)?;\n+            introduction.push_str(&format!(\" * [{0}](./{0}.html)\\n\", err_code));\n+\n+            let content = add_rust_attribute_on_codeblock(explanation);\n+            chapters.push(BookItem::Chapter(Chapter {\n+                name: err_code.to_string(),\n+                content: format!(\"# Error code {}\\n\\n{}\\n\", err_code, content),\n+                number: None,\n+                sub_items: Vec::new(),\n+                // We generate it into the `error_codes` folder.\n+                path: Some(PathBuf::from(&format!(\"{}.html\", err_code))),\n+                source_path: None,\n+                parent_names: Vec::new(),\n+            }));\n         } else {\n-            write!(output_file, \"<li>{}</li>\", err_code)?;\n+            introduction.push_str(&format!(\" * {}\\n\", err_code));\n         }\n     }\n-    write!(output_file, \"</ul>\")?;\n-    formatter.footer(&mut output_file)\n+\n+    let mut config = Config::from_str(include_str!(\"book_config.toml\"))?;\n+    config.build.build_dir = output_path.join(\"error_codes\").to_path_buf();\n+    let mut book = MDBook::load_with_config_and_summary(\n+        env!(\"CARGO_MANIFEST_DIR\"),\n+        config,\n+        parse_summary(\"\")?,\n+    )?;\n+    let chapter = Chapter {\n+        name: \"Rust error codes index\".to_owned(),\n+        content: introduction,\n+        number: None,\n+        sub_items: chapters,\n+        // Very important: this file is named as `error-index.html` and not `index.html`!\n+        path: Some(PathBuf::from(\"error-index.html\")),\n+        source_path: None,\n+        parent_names: Vec::new(),\n+    };\n+    book.book.sections.push(BookItem::Chapter(chapter));\n+    book.build()?;\n+\n+    // We can't put this content into another file, otherwise `mbdbook` will also put it into the\n+    // output directory, making a duplicate.\n+    fs::write(\n+        output_path.join(\"error-index.html\"),\n+        r#\"<!DOCTYPE html>\n+<html>\n+    <head>\n+        <title>Rust error codes index - Error codes index</title>\n+        <meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\">\n+        <meta name=\"description\" content=\"Book listing all Rust error codes\">\n+        <script src=\"error_codes/redirect.js\"></script>\n+    </head>\n+    <body>\n+        <div>If you are not automatically redirected to the error code index, please <a id=\"index-link\" href=\"./error_codes/error-index.html\">here</a>.\n+        <script>document.getElementById(\"index-link\").click()</script>\n+    </body>\n+</html>\"#,\n+    )?;\n+\n+    // No need for a 404 file, it's already handled by the server.\n+    fs::remove_file(output_path.join(\"error_codes/404.html\"))?;\n+\n+    Ok(())\n }\n \n fn main_with_result(format: OutputFormat, dst: &Path) -> Result<(), Box<dyn Error>> {\n     match format {\n         OutputFormat::Unknown(s) => panic!(\"Unknown output format: {}\", s),\n-        OutputFormat::HTML(h) => render_html(dst, h),\n+        OutputFormat::HTML => render_html(dst),\n         OutputFormat::Markdown => render_markdown(dst),\n     }\n }\n@@ -210,12 +186,9 @@ fn parse_args() -> (OutputFormat, PathBuf) {\n     let mut args = env::args().skip(1);\n     let format = args.next();\n     let dst = args.next();\n-    let resource_suffix = args.next().unwrap_or_else(String::new);\n-    let format = format\n-        .map(|a| OutputFormat::from(&a, &resource_suffix))\n-        .unwrap_or(OutputFormat::from(\"html\", &resource_suffix));\n+    let format = format.map(|a| OutputFormat::from(&a)).unwrap_or(OutputFormat::from(\"html\"));\n     let dst = dst.map(PathBuf::from).unwrap_or_else(|| match format {\n-        OutputFormat::HTML(..) => PathBuf::from(\"doc/error-index.html\"),\n+        OutputFormat::HTML => PathBuf::from(\"doc\"),\n         OutputFormat::Markdown => PathBuf::from(\"doc/error-index.md\"),\n         OutputFormat::Unknown(..) => PathBuf::from(\"<nul>\"),\n     });\n@@ -225,9 +198,8 @@ fn parse_args() -> (OutputFormat, PathBuf) {\n fn main() {\n     rustc_driver::init_env_logger(\"RUST_LOG\");\n     let (format, dst) = parse_args();\n-    let result =\n-        rustc_span::create_default_session_globals_then(move || main_with_result(format, &dst));\n+    let result = main_with_result(format, &dst);\n     if let Err(e) = result {\n-        panic!(\"{}\", e.to_string());\n+        panic!(\"{:?}\", e);\n     }\n }"}, {"sha": "8c907f5795d324be867a792e25aeac775ebd3b88", "filename": "src/tools/error_index_generator/redirect.js", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftools%2Ferror_index_generator%2Fredirect.js", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftools%2Ferror_index_generator%2Fredirect.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fredirect.js?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -0,0 +1,16 @@\n+(function() {\n+    if (window.location.hash) {\n+        let code = window.location.hash.replace(/^#/, '');\n+        // We have to make sure this pattern matches to avoid inadvertently creating an\n+        // open redirect.\n+        if (!/^E[0-9]+$/.test(code)) {\n+            return;\n+        }\n+        if (window.location.pathname.indexOf(\"/error_codes/\") !== -1) {\n+            // We're not at the top level, so we don't prepend with \"./error_codes/\".\n+            window.location = './' + code + '.html';\n+        } else {\n+            window.location = './error_codes/' + code + '.html';\n+        }\n+    }\n+})()"}, {"sha": "2a923a61b0a70b74a78127746059ff568d470386", "filename": "src/tools/lint-docs/src/groups.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Fgroups.rs?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -8,6 +8,7 @@ use std::process::Command;\n /// Descriptions of rustc lint groups.\n static GROUP_DESCRIPTIONS: &[(&str, &str)] = &[\n     (\"unused\", \"Lints that detect things being declared but not used, or excess syntax\"),\n+    (\"let-underscore\", \"Lints that detect wildcard let bindings that are likely to be invalid\"),\n     (\"rustdoc\", \"Rustdoc-specific lints\"),\n     (\"rust-2018-idioms\", \"Lints to nudge you toward idiomatic features of Rust 2018\"),\n     (\"nonstandard-style\", \"Violation of standard naming conventions\"),"}, {"sha": "89d1574726f090597e9a130fa3c1ebfa935857f5", "filename": "triagebot.toml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9353538c7bea6edb245457712cec720305c4576e/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9353538c7bea6edb245457712cec720305c4576e/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=9353538c7bea6edb245457712cec720305c4576e", "patch": "@@ -195,6 +195,13 @@ trigger_files = [\n     \"compiler/rustc_macros/src/diagnostics\"\n ]\n \n+[autolabel.\"A-query-system\"]\n+trigger_files = [\n+    \"compiler/rustc_query_system\",\n+    \"compiler/rustc_query_impl\",\n+    \"compiler/rustc_macros/src/query.rs\"\n+]\n+\n [notify-zulip.\"I-prioritize\"]\n zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n topic = \"#{number} {title}\""}]}