{"sha": "8ab71ab59fd17a1c51d23b68eced935b92431b70", "node_id": "C_kwDOAAsO6NoAKDhhYjcxYWI1OWZkMTdhMWM1MWQyM2I2OGVjZWQ5MzViOTI0MzFiNzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-22T12:47:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-22T12:47:31Z"}, "message": "Auto merge of #100980 - compiler-errors:normalize-opaque-w-bound-vars, r=lcnr\n\nNormalize opaques w/ bound vars\n\nFirst, we reenable normalization of opaque types with escaping late bound regions to fix rust-lang/miri#2433. This essentially reverts #89285.\n\nSecond, we mitigate the perf regression found in #88862 by simplifying the way that we relate (sub and eq) GeneratorWitness types.\n\nThis relies on the fact that we construct these GeneratorWitness types somewhat particularly (with all free regions found in the witness types replaced with late bound regions) -- but those bound regions really should be treated as existential regions, not universal ones. Those two facts leads me to believe that we do not need to use the full `higher_ranked_sub` machinery to relate two generator witnesses. I'm pretty confident that this is correct, but I'm glad to discuss this further.", "tree": {"sha": "8c6ee22e3d2723e4d8f4d56bac5d9e137d8a0a44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c6ee22e3d2723e4d8f4d56bac5d9e137d8a0a44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ab71ab59fd17a1c51d23b68eced935b92431b70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab71ab59fd17a1c51d23b68eced935b92431b70", "html_url": "https://github.com/rust-lang/rust/commit/8ab71ab59fd17a1c51d23b68eced935b92431b70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ab71ab59fd17a1c51d23b68eced935b92431b70/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c10f7d73953a02982bbac3a504b0d22a7bda32b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c10f7d73953a02982bbac3a504b0d22a7bda32b1", "html_url": "https://github.com/rust-lang/rust/commit/c10f7d73953a02982bbac3a504b0d22a7bda32b1"}, {"sha": "3fc328dfd3c7699a9be3c889de55c354d5a5c006", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fc328dfd3c7699a9be3c889de55c354d5a5c006", "html_url": "https://github.com/rust-lang/rust/commit/3fc328dfd3c7699a9be3c889de55c354d5a5c006"}], "stats": {"total": 67, "additions": 43, "deletions": 24}, "files": [{"sha": "59728148a84c43e8023a2f580d5193849e22fab1", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8ab71ab59fd17a1c51d23b68eced935b92431b70/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab71ab59fd17a1c51d23b68eced935b92431b70/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=8ab71ab59fd17a1c51d23b68eced935b92431b70", "patch": "@@ -110,6 +110,25 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n                         .obligations,\n                 );\n             }\n+            // Optimization of GeneratorWitness relation since we know that all\n+            // free regions are replaced with bound regions during construction.\n+            // This greatly speeds up equating of GeneratorWitness.\n+            (&ty::GeneratorWitness(a_types), &ty::GeneratorWitness(b_types)) => {\n+                let a_types = infcx.tcx.anonymize_bound_vars(a_types);\n+                let b_types = infcx.tcx.anonymize_bound_vars(b_types);\n+                if a_types.bound_vars() == b_types.bound_vars() {\n+                    let (a_types, b_types) = infcx.replace_bound_vars_with_placeholders(\n+                        a_types.map_bound(|a_types| (a_types, b_types.skip_binder())),\n+                    );\n+                    for (a, b) in std::iter::zip(a_types, b_types) {\n+                        self.relate(a, b)?;\n+                    }\n+                } else {\n+                    return Err(ty::error::TypeError::Sorts(ty::relate::expected_found(\n+                        self, a, b,\n+                    )));\n+                }\n+            }\n \n             _ => {\n                 self.fields.infcx.super_combine_tys(self, a, b)?;"}, {"sha": "375dd670fabf4c092bdde2aef7630df64370aa5b", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8ab71ab59fd17a1c51d23b68eced935b92431b70/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab71ab59fd17a1c51d23b68eced935b92431b70/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=8ab71ab59fd17a1c51d23b68eced935b92431b70", "patch": "@@ -164,6 +164,24 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n                 );\n                 Ok(ga)\n             }\n+            // Optimization of GeneratorWitness relation since we know that all\n+            // free regions are replaced with bound regions during construction.\n+            // This greatly speeds up subtyping of GeneratorWitness.\n+            (&ty::GeneratorWitness(a_types), &ty::GeneratorWitness(b_types)) => {\n+                let a_types = infcx.tcx.anonymize_bound_vars(a_types);\n+                let b_types = infcx.tcx.anonymize_bound_vars(b_types);\n+                if a_types.bound_vars() == b_types.bound_vars() {\n+                    let (a_types, b_types) = infcx.replace_bound_vars_with_placeholders(\n+                        a_types.map_bound(|a_types| (a_types, b_types.skip_binder())),\n+                    );\n+                    for (a, b) in std::iter::zip(a_types, b_types) {\n+                        self.relate(a, b)?;\n+                    }\n+                    Ok(a)\n+                } else {\n+                    Err(ty::error::TypeError::Sorts(ty::relate::expected_found(self, a, b)))\n+                }\n+            }\n \n             _ => {\n                 self.fields.infcx.super_combine_tys(self, a, b)?;"}, {"sha": "ed83847e880382961af541e1636219f91d4a2fd8", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab71ab59fd17a1c51d23b68eced935b92431b70/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab71ab59fd17a1c51d23b68eced935b92431b70/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=8ab71ab59fd17a1c51d23b68eced935b92431b70", "patch": "@@ -499,7 +499,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n             // This is really important. While we *can* handle this, this has\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n-            ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n+            ty::Opaque(def_id, substs) => {\n                 // Only normalize `impl Trait` outside of type inference, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty.super_fold_with(self),"}, {"sha": "77f83b3f542408809e05fda1847ea939f4d70706", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab71ab59fd17a1c51d23b68eced935b92431b70/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab71ab59fd17a1c51d23b68eced935b92431b70/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=8ab71ab59fd17a1c51d23b68eced935b92431b70", "patch": "@@ -198,7 +198,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n             // This is really important. While we *can* handle this, this has\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n-            ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n+            ty::Opaque(def_id, substs) => {\n                 // Only normalize `impl Trait` outside of type inference, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty.try_super_fold_with(self),"}, {"sha": "254a19368bfe2bc6fbc4364021d6c1f32edec394", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ab71ab59fd17a1c51d23b68eced935b92431b70/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab71ab59fd17a1c51d23b68eced935b92431b70/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=8ab71ab59fd17a1c51d23b68eced935b92431b70", "patch": "@@ -218,7 +218,8 @@ pub fn resolve_interior<'a, 'tcx>(\n         .filter_map(|mut cause| {\n             // Erase regions and canonicalize late-bound regions to deduplicate as many types as we\n             // can.\n-            let erased = fcx.tcx.erase_regions(cause.ty);\n+            let ty = fcx.normalize_associated_types_in(cause.span, cause.ty);\n+            let erased = fcx.tcx.erase_regions(ty);\n             if captured_tys.insert(erased) {\n                 // Replace all regions inside the generator interior with late bound regions.\n                 // Note that each region slot in the types gets a new fresh late bound region,\n@@ -263,7 +264,7 @@ pub fn resolve_interior<'a, 'tcx>(\n     // Unify the type variable inside the generator with the new witness\n     match fcx.at(&fcx.misc(body.value.span), fcx.param_env).eq(interior, witness) {\n         Ok(ok) => fcx.register_infer_ok_obligations(ok),\n-        _ => bug!(),\n+        _ => bug!(\"failed to relate {interior} and {witness}\"),\n     }\n }\n "}, {"sha": "af4946a187f15bc6ecea91c9d8e2c6f42f6d6a07", "filename": "src/test/ui/higher-rank-trait-bounds/issue-95034.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8ab71ab59fd17a1c51d23b68eced935b92431b70/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab71ab59fd17a1c51d23b68eced935b92431b70/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95034.rs?ref=8ab71ab59fd17a1c51d23b68eced935b92431b70", "patch": "@@ -1,23 +1,5 @@\n-// known-bug: #95034\n-// failure-status: 101\n+// check-pass\n // compile-flags: --edition=2021 --crate-type=lib\n-// rustc-env:RUST_BACKTRACE=0\n-\n-// normalize-stderr-test \"thread 'rustc' panicked.*\" -> \"thread 'rustc' panicked\"\n-// normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n-// normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\"\n-// normalize-stderr-test \"query stack during panic:\\n\" -> \"\"\n-// normalize-stderr-test \"we're just showing a limited slice of the query stack\\n\" -> \"\"\n-// normalize-stderr-test \"end of query stack\\n\" -> \"\"\n-// normalize-stderr-test \"#.*\\n\" -> \"\"\n-\n-// This should not ICE.\n-\n-// Refer to the issue for more minimized versions.\n \n use std::{\n     future::Future,"}, {"sha": "1d8329142fc5c0a142f078d1106713135539f7ad", "filename": "src/test/ui/higher-rank-trait-bounds/issue-95034.stderr", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c10f7d73953a02982bbac3a504b0d22a7bda32b1/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c10f7d73953a02982bbac3a504b0d22a7bda32b1/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-95034.stderr?ref=c10f7d73953a02982bbac3a504b0d22a7bda32b1", "patch": "@@ -1 +0,0 @@\n-thread 'rustc' panicked"}]}