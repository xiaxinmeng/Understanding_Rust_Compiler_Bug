{"sha": "d045ce7b87af0fb0730ccf5291c11d28a5382254", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNDVjZTdiODdhZjBmYjA3MzBjY2Y1MjkxYzExZDI4YTUzODIyNTQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-04-29T04:25:35Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-04-29T04:25:35Z"}, "message": "core: Use a better termination condition in os::mkdir_recursive\n\nInstead of checking whether the parent is \".\" or \"/\", check the\nnumber of components.\n\nAlso, more tests.", "tree": {"sha": "d5c52898568d931a99fff0f37a131da317490738", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5c52898568d931a99fff0f37a131da317490738"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d045ce7b87af0fb0730ccf5291c11d28a5382254", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d045ce7b87af0fb0730ccf5291c11d28a5382254", "html_url": "https://github.com/rust-lang/rust/commit/d045ce7b87af0fb0730ccf5291c11d28a5382254", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d045ce7b87af0fb0730ccf5291c11d28a5382254/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "379dce11a958149915d1188741e03acefe1e1bd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/379dce11a958149915d1188741e03acefe1e1bd5", "html_url": "https://github.com/rust-lang/rust/commit/379dce11a958149915d1188741e03acefe1e1bd5"}], "stats": {"total": 101, "additions": 79, "deletions": 22}, "files": [{"sha": "f1962eeaa23d02e3fc53dbfa1ecba3e759e7d3ad", "filename": "src/libcore/os.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d045ce7b87af0fb0730ccf5291c11d28a5382254/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d045ce7b87af0fb0730ccf5291c11d28a5382254/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=d045ce7b87af0fb0730ccf5291c11d28a5382254", "patch": "@@ -643,20 +643,22 @@ pub fn make_dir(p: &Path, mode: c_int) -> bool {\n /// Returns true iff creation\n /// succeeded. Also creates all intermediate subdirectories\n /// if they don't already exist, giving all of them the same mode.\n+\n+// tjc: if directory exists but with different permissions,\n+// should we return false?\n pub fn mkdir_recursive(p: &Path, mode: c_int) -> bool {\n     if path_is_dir(p) {\n         return true;\n     }\n-    let parent = p.dir_path();\n-    debug!(\"mkdir_recursive: parent = %s\",\n-           parent.to_str());\n-    if parent.to_str() == ~\".\"\n-        || parent.to_str() == ~\"/\" { // !!!\n+    else if p.components.is_empty() {\n+        return false;\n+    }\n+    else if p.components.len() == 1 {\n         // No parent directories to create\n-        path_is_dir(&parent) && make_dir(p, mode)\n+        path_is_dir(p) || make_dir(p, mode)\n     }\n     else {\n-        mkdir_recursive(&parent, mode) && make_dir(p, mode)\n+        mkdir_recursive(&p.pop(), mode) && make_dir(p, mode)\n     }\n }\n \n@@ -1267,6 +1269,8 @@ mod tests {\n     use run;\n     use str;\n     use vec;\n+    use libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n+\n \n     #[test]\n     pub fn last_os_error() {\n@@ -1490,16 +1494,16 @@ mod tests {\n     }\n \n     #[test]\n-    fn recursive_mkdir_ok() {\n-        use libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n+    fn recursive_mkdir_slash() {\n+        let path = Path(\"/\");\n+        assert!(os::mkdir_recursive(&path,  (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n+    }\n \n-        let root = os::tmpdir();\n-        let path = \"xy/z/zy\";\n-        let nested = root.push(path);\n-        assert!(os::mkdir_recursive(&nested,  (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n-        assert!(os::path_is_dir(&root.push(\"xy\")));\n-        assert!(os::path_is_dir(&root.push(\"xy/z\")));\n-        assert!(os::path_is_dir(&nested));\n+    #[test]\n+    fn recursive_mkdir_empty() {\n+        let path = Path(\"\");\n+        assert!(!os::mkdir_recursive(&path, (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n     }\n \n+    // More recursive_mkdir tests are in std::tempfile\n }"}, {"sha": "eec91b68454441566081f6eb02a1f9f827f9b61b", "filename": "src/libstd/tempfile.rs", "status": "modified", "additions": 59, "deletions": 6, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/d045ce7b87af0fb0730ccf5291c11d28a5382254/src%2Flibstd%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d045ce7b87af0fb0730ccf5291c11d28a5382254/src%2Flibstd%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftempfile.rs?ref=d045ce7b87af0fb0730ccf5291c11d28a5382254", "patch": "@@ -23,9 +23,62 @@ pub fn mkdtemp(tmpdir: &Path, suffix: &str) -> Option<Path> {\n     None\n }\n \n-#[test]\n-fn test_mkdtemp() {\n-    let p = mkdtemp(&Path(\".\"), \"foobar\").unwrap();\n-    os::remove_dir(&p);\n-    assert!(str::ends_with(p.to_str(), \"foobar\"));\n-}\n+#[cfg(test)]\n+mod tests {\n+    use tempfile::mkdtemp;\n+    use tempfile;\n+\n+    #[test]\n+    fn test_mkdtemp() {\n+        let p = mkdtemp(&Path(\".\"), \"foobar\").unwrap();\n+        os::remove_dir(&p);\n+        assert!(str::ends_with(p.to_str(), \"foobar\"));\n+    }\n+\n+    // Ideally these would be in core::os but then core would need\n+    // to depend on std\n+    #[test]\n+    fn recursive_mkdir_rel() {\n+        use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n+        use core::os;\n+\n+        let root = mkdtemp(&os::tmpdir(), \"temp\").expect(\"recursive_mkdir_rel\");\n+        os::change_dir(&root);\n+        let path = Path(\"frob\");\n+        assert!(os::mkdir_recursive(&path,  (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n+        assert!(os::path_is_dir(&path));\n+        assert!(os::mkdir_recursive(&path,  (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n+        assert!(os::path_is_dir(&path));\n+    }\n+\n+    #[test]\n+    fn recursive_mkdir_dot() {\n+        use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n+        use core::os;\n+\n+        let dot = Path(\".\");\n+        assert!(os::mkdir_recursive(&dot,  (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n+        let dotdot = Path(\"..\");\n+        assert!(os::mkdir_recursive(&dotdot,  (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n+    }\n+\n+    #[test]\n+    fn recursive_mkdir_rel_2() {\n+        use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n+        use core::os;\n+\n+        let root = mkdtemp(&os::tmpdir(), \"temp\").expect(\"recursive_mkdir_rel_2\");\n+        os::change_dir(&root);\n+        let path = Path(\"./frob/baz\");\n+        debug!(\"...Making: %s in cwd %s\", path.to_str(), os::getcwd().to_str());\n+        assert!(os::mkdir_recursive(&path, (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n+        assert!(os::path_is_dir(&path));\n+        assert!(os::path_is_dir(&path.pop()));\n+        let path2 = Path(\"quux/blat\");\n+        debug!(\"Making: %s in cwd %s\", path2.to_str(), os::getcwd().to_str());\n+        assert!(os::mkdir_recursive(&path2, (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n+        assert!(os::path_is_dir(&path2));\n+        assert!(os::path_is_dir(&path2.pop()));\n+    }\n+\n+}\n\\ No newline at end of file"}]}