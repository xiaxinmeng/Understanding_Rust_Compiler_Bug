{"sha": "72ea960056d40f1fcb5efb42d5914b35f908f63e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZWE5NjAwNTZkNDBmMWZjYjVlZmI0MmQ1OTE0YjM1ZjkwOGY2M2U=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-09-17T14:40:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-09-19T14:29:45Z"}, "message": "azure: Convert Windows installations scripts to `bash`\n\nLooks like `script`, which uses `cmd.exe`, doesn't have fail-fast\nbehavior and if a leading command fails the script doesn't actually fail\nso long as the last command succeeds. We instead want the opposite\nbehavior where if any step fails the whole script fails.\n\nI don't really know `cmd.exe` that well, nor powershell, so I've opted\nto move everything to `bash` which should be a good common denominator\namongst all platforms to work with. Additionally I know that `set -e`\nworks to cause scripts to fail fast.\n\nNote that some scripts remain as `script` since they don't appear to\nwork in` bash`. I'm not really sure why but I reorganized them slightly\nto have the \"meaty command\" run at the end.", "tree": {"sha": "128de0a9f3f28aaeb007111074321fccb1c2409b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/128de0a9f3f28aaeb007111074321fccb1c2409b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72ea960056d40f1fcb5efb42d5914b35f908f63e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72ea960056d40f1fcb5efb42d5914b35f908f63e", "html_url": "https://github.com/rust-lang/rust/commit/72ea960056d40f1fcb5efb42d5914b35f908f63e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72ea960056d40f1fcb5efb42d5914b35f908f63e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9", "html_url": "https://github.com/rust-lang/rust/commit/7ac21e7636f7b3c0eb3e31b13c7087b4de7aa5a9"}], "stats": {"total": 77, "additions": 39, "deletions": 38}, "files": [{"sha": "bd4f1ed0cea439c4da31fd97114f16ef8511c865", "filename": "src/ci/azure-pipelines/steps/install-windows-build-deps.yml", "status": "modified", "additions": 39, "deletions": 38, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/72ea960056d40f1fcb5efb42d5914b35f908f63e/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml", "raw_url": "https://github.com/rust-lang/rust/raw/72ea960056d40f1fcb5efb42d5914b35f908f63e/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml?ref=72ea960056d40f1fcb5efb42d5914b35f908f63e", "patch": "@@ -18,9 +18,9 @@ steps:\n # one is MSI installers and one is EXE, but they're not used so frequently at\n # this point anyway so perhaps it's a wash!\n - script: |\n-    powershell -Command \"$ProgressPreference = 'SilentlyContinue'; iwr -outf is-install.exe https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/2017-08-22-is.exe\"\n-    is-install.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-\n     echo ##vso[task.prependpath]C:\\Program Files (x86)\\Inno Setup 5\n+    curl.exe -o is-install.exe https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/2017-08-22-is.exe\n+    is-install.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-\n   displayName: Install InnoSetup\n   condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n \n@@ -43,24 +43,18 @@ steps:\n # FIXME: we should probe the default azure image and see if we can use the MSYS2\n # toolchain there. (if there's even one there). For now though this gets the job\n # done.\n-- script: |\n-    set MSYS_PATH=%CD%\\citools\\msys64\n-    choco install msys2 --params=\"/InstallDir:%MSYS_PATH% /NoPath\" -y\n-    set PATH=%MSYS_PATH%\\usr\\bin;%PATH%\n-    pacman -S --noconfirm --needed base-devel ca-certificates make diffutils tar\n-    IF \"%MINGW_URL%\"==\"\" (\n-      IF \"%MSYS_BITS%\"==\"32\" pacman -S --noconfirm --needed mingw-w64-i686-toolchain mingw-w64-i686-cmake mingw-w64-i686-gcc mingw-w64-i686-python2\n-      IF \"%MSYS_BITS%\"==\"64\" pacman -S --noconfirm --needed mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-gcc mingw-w64-x86_64-python2\n-    )\n-    where rev\n-    rev --help\n-    where make\n-\n-    echo ##vso[task.setvariable variable=MSYS_PATH]%MSYS_PATH%\n-    echo ##vso[task.prependpath]%MSYS_PATH%\\usr\\bin\n+- bash: |\n+    set -e\n+    choco install msys2 --params=\"/InstallDir:$(System.Workfolder)/msys2 /NoPath\" -y --no-progress\n+    echo \"##vso[task.prependpath]$(System.Workfolder)/msys2/usr/bin\"\n+    mkdir -p \"$(System.Workfolder)/msys2/home/$USERNAME\"\n   displayName: Install msys2\n   condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n \n+- bash: pacman -S --noconfirm --needed base-devel ca-certificates make diffutils tar\n+  displayName: Install msys2 base deps\n+  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n+\n # If we need to download a custom MinGW, do so here and set the path\n # appropriately.\n #\n@@ -81,39 +75,46 @@ steps:\n #\n # Note that we don't literally overwrite the gdb.exe binary because it appears\n # to just use gdborig.exe, so that's the binary we deal with instead.\n-- script: |\n-    powershell -Command \"$ProgressPreference = 'SilentlyContinue'; iwr -outf %MINGW_ARCHIVE% %MINGW_URL%/%MINGW_ARCHIVE%\"\n-    7z x -y %MINGW_ARCHIVE% > nul\n-    powershell -Command \"$ProgressPreference = 'SilentlyContinue'; iwr -outf 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_URL%/2017-04-20-%MSYS_BITS%bit-gdborig.exe\"\n-    mv 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_DIR%\\bin\\gdborig.exe\n-    echo ##vso[task.prependpath]%CD%\\%MINGW_DIR%\\bin\n+- bash: |\n+    set -e\n+    curl -o mingw.7z $MINGW_URL/$MINGW_ARCHIVE\n+    7z x -y mingw.7z > /dev/null\n+    curl -o $MINGW_DIR/bin/gdborig.exe $MINGW_URL/2017-04-20-${MSYS_BITS}bit-gdborig.exe\n+    echo \"##vso[task.prependpath]`pwd`/$MINGW_DIR/bin\"\n   condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), ne(variables['MINGW_URL'],''))\n   displayName: Download custom MinGW\n \n-# Otherwise pull in the MinGW installed on appveyor\n-- script: |\n-    echo ##vso[task.prependpath]%MSYS_PATH%\\mingw%MSYS_BITS%\\bin\n+# Otherwise install MinGW through `pacman`\n+- bash: |\n+    set -e\n+    arch=i686\n+    if [ \"$MSYS_BITS\" = \"64\" ]; then\n+      arch=x86_64\n+    fi\n+    pacman -S --noconfirm --needed mingw-w64-$arch-toolchain mingw-w64-$arch-cmake mingw-w64-$arch-gcc mingw-w64-$arch-python2\n+    echo \"##vso[task.prependpath]$(System.Workfolder)/msys2/mingw$MSYS_BITS/bin\"\n   condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['MINGW_URL'],''))\n-  displayName: Add MinGW to path\n+  displayName: Download standard MinGW\n \n # Make sure we use the native python interpreter instead of some msys equivalent\n # one way or another. The msys interpreters seem to have weird path conversions\n # baked in which break LLVM's build system one way or another, so let's use the\n # native version which keeps everything as native as possible.\n-- script: |\n-    copy C:\\Python27amd64\\python.exe C:\\Python27amd64\\python2.7.exe\n-    echo ##vso[task.prependpath]C:\\Python27amd64\n+- bash: |\n+    set -e\n+    cp C:/Python27amd64/python.exe C:/Python27amd64/python2.7.exe\n+    echo \"##vso[task.prependpath]C:/Python27amd64\"\n   displayName: Prefer the \"native\" Python as LLVM has trouble building with MSYS sometimes\n   condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))\n \n # Note that this is originally from the github releases patch of Ninja\n-- script: |\n-    md ninja\n-    powershell -Command \"$ProgressPreference = 'SilentlyContinue'; iwr -outf 2017-03-15-ninja-win.zip https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/2017-03-15-ninja-win.zip\"\n-    7z x -oninja 2017-03-15-ninja-win.zip\n-    del 2017-03-15-ninja-win.zip\n-    set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --enable-ninja\n-    echo ##vso[task.setvariable variable=RUST_CONFIGURE_ARGS]%RUST_CONFIGURE_ARGS%\n-    echo ##vso[task.prependpath]%CD%\\ninja\n+- bash: |\n+    set -e\n+    mkdir ninja\n+    curl -o ninja.zip https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/2017-03-15-ninja-win.zip\n+    7z x -oninja ninja.zip\n+    rm ninja.zip\n+    echo \"##vso[task.setvariable variable=RUST_CONFIGURE_ARGS]$RUST_CONFIGURE_ARGS --enable-ninja\"\n+    echo \"##vso[task.prependpath]`pwd`/ninja\"\n   displayName: Download and install ninja\n   condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))"}]}