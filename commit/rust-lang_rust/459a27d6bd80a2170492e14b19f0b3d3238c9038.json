{"sha": "459a27d6bd80a2170492e14b19f0b3d3238c9038", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OWEyN2Q2YmQ4MGEyMTcwNDkyZTE0YjE5ZjBiM2QzMjM4YzkwMzg=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-12-17T11:36:22Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-12-17T11:36:22Z"}, "message": "Reading undef local/globals gets PrimVal::Undef.\n\nThis fixes #95.", "tree": {"sha": "ff7d8842324e9da5f43d32860142eb59e92a0629", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff7d8842324e9da5f43d32860142eb59e92a0629"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/459a27d6bd80a2170492e14b19f0b3d3238c9038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/459a27d6bd80a2170492e14b19f0b3d3238c9038", "html_url": "https://github.com/rust-lang/rust/commit/459a27d6bd80a2170492e14b19f0b3d3238c9038", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/459a27d6bd80a2170492e14b19f0b3d3238c9038/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b7c68bec27bd4b50882ce32ea27d9f1901b452b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b7c68bec27bd4b50882ce32ea27d9f1901b452b", "html_url": "https://github.com/rust-lang/rust/commit/6b7c68bec27bd4b50882ce32ea27d9f1901b452b"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "0ae95d1b05aa1c701d7371bf3934afc813b20ab1", "filename": "src/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/459a27d6bd80a2170492e14b19f0b3d3238c9038/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459a27d6bd80a2170492e14b19f0b3d3238c9038/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=459a27d6bd80a2170492e14b19f0b3d3238c9038", "patch": "@@ -774,7 +774,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 substs: substs,\n                                 promoted: None,\n                             };\n-                            self.read_lvalue(Lvalue::Global(cid))?\n+                            self.read_lvalue(Lvalue::Global(cid))\n                         }\n                     }\n \n@@ -784,7 +784,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                             substs: self.substs(),\n                             promoted: Some(index),\n                         };\n-                        self.read_lvalue(Lvalue::Global(cid))?\n+                        self.read_lvalue(Lvalue::Global(cid))\n                     }\n                 };\n "}, {"sha": "f06cffeee89b59feb93e2562e0015589a50ecb4c", "filename": "src/lvalue.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/459a27d6bd80a2170492e14b19f0b3d3238c9038/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459a27d6bd80a2170492e14b19f0b3d3238c9038/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=459a27d6bd80a2170492e14b19f0b3d3238c9038", "patch": "@@ -1,12 +1,13 @@\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n-use rustc::ty::{self, Ty};\n use rustc::ty::subst::Substs;\n+use rustc::ty::{self, Ty};\n use rustc_data_structures::indexed_vec::Idx;\n \n-use error::{EvalError, EvalResult};\n+use error::EvalResult;\n+use eval_context::{EvalContext};\n use memory::Pointer;\n-use eval_context::{EvalContext, Value};\n+use value::{PrimVal, Value};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum Lvalue<'tcx> {\n@@ -117,23 +118,25 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n         }\n         let lvalue = self.eval_lvalue(lvalue)?;\n-        self.read_lvalue(lvalue)\n+        Ok(self.read_lvalue(lvalue))\n     }\n \n-    pub fn read_lvalue(&self, lvalue: Lvalue<'tcx>) -> EvalResult<'tcx, Value> {\n+    pub fn read_lvalue(&self, lvalue: Lvalue<'tcx>) -> Value {\n         match lvalue {\n             Lvalue::Ptr { ptr, extra } => {\n                 assert_eq!(extra, LvalueExtra::None);\n-                Ok(Value::ByRef(ptr))\n+                Value::ByRef(ptr)\n             }\n             Lvalue::Local { frame, local } => {\n-                self.stack[frame].get_local(local).ok_or(EvalError::ReadUndefBytes)\n+                self.stack[frame].get_local(local).unwrap_or(Value::ByVal(PrimVal::Undef))\n+            }\n+            Lvalue::Global(cid) => {\n+                self.globals\n+                    .get(&cid)\n+                    .expect(\"global not cached\")\n+                    .data\n+                    .unwrap_or(Value::ByVal(PrimVal::Undef))\n             }\n-            Lvalue::Global(cid) => self.globals\n-                                       .get(&cid)\n-                                       .expect(\"global not cached\")\n-                                       .data\n-                                       .ok_or(EvalError::ReadUndefBytes),\n         }\n     }\n "}, {"sha": "9672b0c3d920a7d94ab02e6619d9c4b4b8afc505", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/459a27d6bd80a2170492e14b19f0b3d3238c9038/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459a27d6bd80a2170492e14b19f0b3d3238c9038/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=459a27d6bd80a2170492e14b19f0b3d3238c9038", "patch": "@@ -585,7 +585,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         match ty.sty {\n             // special case `Box` to deallocate the inner allocation\n             ty::TyBox(contents_ty) => {\n-                let val = self.read_lvalue(lval)?;\n+                let val = self.read_lvalue(lval);\n                 // we are going through the read_value path, because that already does all the\n                 // checks for the trait object types. We'd only be repeating ourselves here.\n                 let val = self.follow_by_ref_value(val, ty)?;"}]}