{"sha": "fd303132a27f0fa9bbbfb3282200f8190353574b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMzAzMTMyYTI3ZjBmYTliYmJmYjMyODIyMDBmODE5MDM1MzU3NGI=", "commit": {"author": {"name": "Ryan Sullivant", "email": "rsulli55@gmail.com", "date": "2020-11-07T07:21:22Z"}, "committer": {"name": "Ryan Sullivant", "email": "rsulli55@gmail.com", "date": "2020-11-11T06:18:48Z"}, "message": "Cleaned up message and suggestion for `lint_search_is_some`", "tree": {"sha": "d7872b3430a2e167196ab0ba9b7d6ef1ab741e45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7872b3430a2e167196ab0ba9b7d6ef1ab741e45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd303132a27f0fa9bbbfb3282200f8190353574b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd303132a27f0fa9bbbfb3282200f8190353574b", "html_url": "https://github.com/rust-lang/rust/commit/fd303132a27f0fa9bbbfb3282200f8190353574b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd303132a27f0fa9bbbfb3282200f8190353574b/comments", "author": {"login": "rsulli55", "id": 22406159, "node_id": "MDQ6VXNlcjIyNDA2MTU5", "avatar_url": "https://avatars.githubusercontent.com/u/22406159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsulli55", "html_url": "https://github.com/rsulli55", "followers_url": "https://api.github.com/users/rsulli55/followers", "following_url": "https://api.github.com/users/rsulli55/following{/other_user}", "gists_url": "https://api.github.com/users/rsulli55/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsulli55/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsulli55/subscriptions", "organizations_url": "https://api.github.com/users/rsulli55/orgs", "repos_url": "https://api.github.com/users/rsulli55/repos", "events_url": "https://api.github.com/users/rsulli55/events{/privacy}", "received_events_url": "https://api.github.com/users/rsulli55/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsulli55", "id": 22406159, "node_id": "MDQ6VXNlcjIyNDA2MTU5", "avatar_url": "https://avatars.githubusercontent.com/u/22406159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsulli55", "html_url": "https://github.com/rsulli55", "followers_url": "https://api.github.com/users/rsulli55/followers", "following_url": "https://api.github.com/users/rsulli55/following{/other_user}", "gists_url": "https://api.github.com/users/rsulli55/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsulli55/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsulli55/subscriptions", "organizations_url": "https://api.github.com/users/rsulli55/orgs", "repos_url": "https://api.github.com/users/rsulli55/repos", "events_url": "https://api.github.com/users/rsulli55/events{/privacy}", "received_events_url": "https://api.github.com/users/rsulli55/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee1b959054aaf69968d440915766e834568de8fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee1b959054aaf69968d440915766e834568de8fd", "html_url": "https://github.com/rust-lang/rust/commit/ee1b959054aaf69968d440915766e834568de8fd"}], "stats": {"total": 85, "additions": 44, "deletions": 41}, "files": [{"sha": "66f5aa0c6a00a97dfa722ce576502cceccf7ce95", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd303132a27f0fa9bbbfb3282200f8190353574b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd303132a27f0fa9bbbfb3282200f8190353574b/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=fd303132a27f0fa9bbbfb3282200f8190353574b", "patch": "@@ -3053,10 +3053,10 @@ fn lint_search_is_some<'tcx>(\n     // lint if caller of search is an Iterator\n     if match_trait_method(cx, &is_some_args[0], &paths::ITERATOR) {\n         let msg = format!(\n-            \"called `is_some()` after searching an `Iterator` with {}. This is more succinctly \\\n-             expressed by calling `any()`.\",\n+            \"called `is_some()` after searching an `Iterator` with {}\",\n             search_method\n         );\n+        let hint = \"this is more succinctly expressed by calling `any()`\";\n         let search_snippet = snippet(cx, search_args[1].span, \"..\");\n         if search_snippet.lines().count() <= 1 {\n             // suggest `any(|x| ..)` instead of `any(|&x| ..)` for `find(|&x| ..).is_some()`\n@@ -3084,15 +3084,15 @@ fn lint_search_is_some<'tcx>(\n                 SEARCH_IS_SOME,\n                 method_span.with_hi(expr.span.hi()),\n                 &msg,\n-                \"try this\",\n+                \"use `any()` instead\",\n                 format!(\n                     \"any({})\",\n                     any_search_snippet.as_ref().map_or(&*search_snippet, String::as_str)\n                 ),\n                 Applicability::MachineApplicable,\n             );\n         } else {\n-            span_lint(cx, SEARCH_IS_SOME, expr.span, &msg);\n+            span_lint_and_help(cx, SEARCH_IS_SOME, expr.span, &msg, None, hint);\n         }\n     }\n     // lint if `find()` is called by `String` or `&str`\n@@ -3109,17 +3109,15 @@ fn lint_search_is_some<'tcx>(\n             if is_string_or_str_slice(&search_args[0]);\n             if is_string_or_str_slice(&search_args[1]);\n             then {\n-                let msg = \"called `is_some()` after calling `find()` \\\n-                    on a string. This is more succinctly expressed by calling \\\n-                    `contains()`.\";\n+                let msg = \"called `is_some()` after calling `find()` on a string\";\n                 let mut applicability = Applicability::MachineApplicable;\n                 let find_arg = snippet_with_applicability(cx, search_args[1].span, \"..\", &mut applicability);\n                 span_lint_and_sugg(\n                     cx,\n                     SEARCH_IS_SOME,\n                     method_span.with_hi(expr.span.hi()),\n                     msg,\n-                    \"try this\",\n+                    \"use `contains()` instead\",\n                     format!(\"contains({})\", find_arg),\n                     applicability,\n                 );"}, {"sha": "43827a6a98dc2b42c1a901d25c5970bcdb08a9ba", "filename": "tests/ui/search_is_some.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fd303132a27f0fa9bbbfb3282200f8190353574b/tests%2Fui%2Fsearch_is_some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd303132a27f0fa9bbbfb3282200f8190353574b/tests%2Fui%2Fsearch_is_some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some.stderr?ref=fd303132a27f0fa9bbbfb3282200f8190353574b", "patch": "@@ -1,4 +1,4 @@\n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n+error: called `is_some()` after searching an `Iterator` with find\n   --> $DIR/search_is_some.rs:13:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n@@ -9,8 +9,9 @@ LL | |                    ).is_some();\n    | |______________________________^\n    |\n    = note: `-D clippy::search-is-some` implied by `-D warnings`\n+   = help: this is more succinctly expressed by calling `any()`\n \n-error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n+error: called `is_some()` after searching an `Iterator` with position\n   --> $DIR/search_is_some.rs:19:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n@@ -19,8 +20,10 @@ LL | |                                   x < 0\n LL | |                               }\n LL | |                    ).is_some();\n    | |______________________________^\n+   |\n+   = help: this is more succinctly expressed by calling `any()`\n \n-error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n+error: called `is_some()` after searching an `Iterator` with rposition\n   --> $DIR/search_is_some.rs:25:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n@@ -29,6 +32,8 @@ LL | |                                    x < 0\n LL | |                                }\n LL | |                    ).is_some();\n    | |______________________________^\n+   |\n+   = help: this is more succinctly expressed by calling `any()`\n \n error: use of a blacklisted/placeholder name `foo`\n   --> $DIR/search_is_some.rs:31:9"}, {"sha": "f4c5d7a3389fe647618a452252fe77f1f78cd9aa", "filename": "tests/ui/search_is_some_fixable.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/fd303132a27f0fa9bbbfb3282200f8190353574b/tests%2Fui%2Fsearch_is_some_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd303132a27f0fa9bbbfb3282200f8190353574b/tests%2Fui%2Fsearch_is_some_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.stderr?ref=fd303132a27f0fa9bbbfb3282200f8190353574b", "patch": "@@ -1,94 +1,94 @@\n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n+error: called `is_some()` after searching an `Iterator` with find\n   --> $DIR/search_is_some_fixable.rs:10:22\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x < 0)`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| *x < 0)`\n    |\n    = note: `-D clippy::search-is-some` implied by `-D warnings`\n \n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n+error: called `is_some()` after searching an `Iterator` with find\n   --> $DIR/search_is_some_fixable.rs:11:20\n    |\n LL |     let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| **y == x)`\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| **y == x)`\n \n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n+error: called `is_some()` after searching an `Iterator` with find\n   --> $DIR/search_is_some_fixable.rs:12:20\n    |\n LL |     let _ = (0..1).find(|x| *x == 0).is_some();\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| x == 0)`\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| x == 0)`\n \n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n+error: called `is_some()` after searching an `Iterator` with find\n   --> $DIR/search_is_some_fixable.rs:13:22\n    |\n LL |     let _ = v.iter().find(|x| **x == 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|x| *x == 0)`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| *x == 0)`\n \n-error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n+error: called `is_some()` after searching an `Iterator` with position\n   --> $DIR/search_is_some_fixable.rs:16:22\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|&x| x < 0)`\n \n-error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n+error: called `is_some()` after searching an `Iterator` with rposition\n   --> $DIR/search_is_some_fixable.rs:19:22\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `any(|&x| x < 0)`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|&x| x < 0)`\n \n-error: called `is_some()` after calling `find()` on a string. This is more succinctly expressed by calling `contains()`.\n+error: called `is_some()` after calling `find()` on a string\n   --> $DIR/search_is_some_fixable.rs:24:27\n    |\n LL |     let _ = \"hello world\".find(\"world\").is_some();\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `contains(\"world\")`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(\"world\")`\n \n-error: called `is_some()` after calling `find()` on a string. This is more succinctly expressed by calling `contains()`.\n+error: called `is_some()` after calling `find()` on a string\n   --> $DIR/search_is_some_fixable.rs:25:27\n    |\n LL |     let _ = \"hello world\".find(&s2).is_some();\n-   |                           ^^^^^^^^^^^^^^^^^^^ help: try this: `contains(&s2)`\n+   |                           ^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2)`\n \n-error: called `is_some()` after calling `find()` on a string. This is more succinctly expressed by calling `contains()`.\n+error: called `is_some()` after calling `find()` on a string\n   --> $DIR/search_is_some_fixable.rs:26:27\n    |\n LL |     let _ = \"hello world\".find(&s2[2..]).is_some();\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `contains(&s2[2..])`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2[2..])`\n \n-error: called `is_some()` after calling `find()` on a string. This is more succinctly expressed by calling `contains()`.\n+error: called `is_some()` after calling `find()` on a string\n   --> $DIR/search_is_some_fixable.rs:28:16\n    |\n LL |     let _ = s1.find(\"world\").is_some();\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `contains(\"world\")`\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(\"world\")`\n \n-error: called `is_some()` after calling `find()` on a string. This is more succinctly expressed by calling `contains()`.\n+error: called `is_some()` after calling `find()` on a string\n   --> $DIR/search_is_some_fixable.rs:29:16\n    |\n LL |     let _ = s1.find(&s2).is_some();\n-   |                ^^^^^^^^^^^^^^^^^^^ help: try this: `contains(&s2)`\n+   |                ^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2)`\n \n-error: called `is_some()` after calling `find()` on a string. This is more succinctly expressed by calling `contains()`.\n+error: called `is_some()` after calling `find()` on a string\n   --> $DIR/search_is_some_fixable.rs:30:16\n    |\n LL |     let _ = s1.find(&s2[2..]).is_some();\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `contains(&s2[2..])`\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2[2..])`\n \n-error: called `is_some()` after calling `find()` on a string. This is more succinctly expressed by calling `contains()`.\n+error: called `is_some()` after calling `find()` on a string\n   --> $DIR/search_is_some_fixable.rs:32:21\n    |\n LL |     let _ = s1[2..].find(\"world\").is_some();\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `contains(\"world\")`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(\"world\")`\n \n-error: called `is_some()` after calling `find()` on a string. This is more succinctly expressed by calling `contains()`.\n+error: called `is_some()` after calling `find()` on a string\n   --> $DIR/search_is_some_fixable.rs:33:21\n    |\n LL |     let _ = s1[2..].find(&s2).is_some();\n-   |                     ^^^^^^^^^^^^^^^^^^^ help: try this: `contains(&s2)`\n+   |                     ^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2)`\n \n-error: called `is_some()` after calling `find()` on a string. This is more succinctly expressed by calling `contains()`.\n+error: called `is_some()` after calling `find()` on a string\n   --> $DIR/search_is_some_fixable.rs:34:21\n    |\n LL |     let _ = s1[2..].find(&s2[2..]).is_some();\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `contains(&s2[2..])`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2[2..])`\n \n error: aborting due to 15 previous errors\n "}]}