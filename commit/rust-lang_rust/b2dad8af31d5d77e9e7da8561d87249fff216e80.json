{"sha": "b2dad8af31d5d77e9e7da8561d87249fff216e80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZGFkOGFmMzFkNWQ3N2U5ZTdkYTg1NjFkODcyNDlmZmYyMTZlODA=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-11T01:48:57Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-15T16:26:51Z"}, "message": "Added a library version of spawn. Before long, we can remove the old version.", "tree": {"sha": "29e255b492c44064e8e96a1375cfc3d240776013", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29e255b492c44064e8e96a1375cfc3d240776013"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2dad8af31d5d77e9e7da8561d87249fff216e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2dad8af31d5d77e9e7da8561d87249fff216e80", "html_url": "https://github.com/rust-lang/rust/commit/b2dad8af31d5d77e9e7da8561d87249fff216e80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2dad8af31d5d77e9e7da8561d87249fff216e80/comments", "author": null, "committer": null, "parents": [{"sha": "871d1317e51fce142def29b7bde9dcb1225050bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/871d1317e51fce142def29b7bde9dcb1225050bf", "html_url": "https://github.com/rust-lang/rust/commit/871d1317e51fce142def29b7bde9dcb1225050bf"}], "stats": {"total": 191, "additions": 161, "deletions": 30}, "files": [{"sha": "a1ede2b23af3c7bf4f333d69bc46bcc9a63ca0e6", "filename": "src/lib/task.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/b2dad8af31d5d77e9e7da8561d87249fff216e80/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dad8af31d5d77e9e7da8561d87249fff216e80/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=b2dad8af31d5d77e9e7da8561d87249fff216e80", "patch": "@@ -1,3 +1,5 @@\n+import cast = unsafe::reinterpret_cast;\n+\n native \"rust\" mod rustrt {\n     fn task_sleep(time_in_us: uint);\n     fn task_yield();\n@@ -9,8 +11,15 @@ native \"rust\" mod rustrt {\n     fn clone_chan(c: *rust_chan) -> *rust_chan;\n \n     type rust_chan;\n+    type rust_task;\n \n     fn set_min_stack(stack_size: uint);\n+\n+    fn new_task() -> task_id;\n+    fn get_task_pointer(id : task_id) -> *rust_task;\n+    fn get_task_context(id : task_id) -> *x86_registers;\n+    fn start_task(id : task_id);\n+    fn get_task_trampoline() -> u32;\n }\n \n type task_id = int;\n@@ -54,6 +63,76 @@ fn set_min_stack(stack_size : uint) {\n     rustrt::set_min_stack(stack_size);\n }\n \n+// FIXME: make this a fn~ once those are supported.\n+fn _spawn(thunk : -fn() -> ()) -> task_id {\n+    let id = rustrt::new_task();\n+\n+    // the order of arguments are outptr, taskptr, envptr.\n+\n+    // In LLVM fastcall puts the first two in ecx, edx, and the rest on the\n+    // stack.\n+    let regs = rustrt::get_task_context(id);\n+\n+    // set up the task pointer\n+    let task_ptr : u32 = cast(rustrt::get_task_pointer(id));\n+    (*regs).edx = task_ptr;\n+\n+    let raw_thunk : { code: u32, env: u32 } = cast(thunk);\n+    (*regs).eip = raw_thunk.code;\n+\n+    log_err #fmt(\"{ %u, %u }\", raw_thunk.code as uint, raw_thunk.env as uint);\n+\n+    // okay, now we align the stack and add the environment pointer and a fake\n+    // return address.\n+\n+    // -12 for the taskm output location, the env pointer\n+    // -4 for the return address.\n+    (*regs).esp = align_down((*regs).esp - 12u32) - 4u32;\n+\n+    let ra : *mutable u32 = cast((*regs).esp);\n+    let env : *mutable u32 = cast((*regs).esp+4u32);\n+    let tptr : *mutable u32 = cast((*regs).esp+12u32);\n+\n+    // put the return pointer in ecx.\n+    (*regs).ecx = (*regs).esp + 8u32;\n+\n+    *tptr = task_ptr;\n+    *env = raw_thunk.env;\n+    *ra = rustrt::get_task_trampoline();\n+\n+    rustrt::start_task(id);\n+\n+    ret id;\n+}\n+\n+// Who says we can't write an operating system in Rust?\n+type x86_registers = {\n+    // This needs to match the structure in context.h\n+    mutable eax : u32,\n+    mutable ebx : u32,\n+    mutable ecx : u32,\n+    mutable edx : u32,\n+    mutable ebp : u32,\n+    mutable esi : u32,\n+    mutable edi : u32,\n+    mutable esp : u32,\n+\n+    mutable cs : u16,\n+    mutable ds : u16,\n+    mutable ss : u16,\n+    mutable es : u16,\n+    mutable fs : u16,\n+    mutable gs : u16,\n+\n+    mutable eflags : u32,\n+    mutable eip : u32\n+};\n+\n+fn align_down(x : u32) -> u32 {\n+    // Aligns x down to 16 bytes\n+    x & !(15u32)\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "d4c3fc436c66ac511e00eb61dc927df50e2f10fb", "filename": "src/rt/arch/i386/_context.s", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b2dad8af31d5d77e9e7da8561d87249fff216e80/src%2Frt%2Farch%2Fi386%2F_context.s", "raw_url": "https://github.com/rust-lang/rust/raw/b2dad8af31d5d77e9e7da8561d87249fff216e80/src%2Frt%2Farch%2Fi386%2F_context.s", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2F_context.s?ref=b2dad8af31d5d77e9e7da8561d87249fff216e80", "patch": "@@ -22,17 +22,17 @@ swap_registers:\n     movl 4(%esp), %eax\n \t//movl %eax, 0(%eax)\n \tmovl %ebx, 4(%eax)\n-\t//movl %ecx, 8(%eax)\n-\t//movl %edx, 12(%eax)\n+\tmovl %ecx, 8(%eax)\n+\tmovl %edx, 12(%eax)\n \tmovl %ebp, 16(%eax)\n \tmovl %esi, 20(%eax)\n \tmovl %edi, 24(%eax)\n-\tmovw %cs, 32(%eax)\n-\tmovw %ds, 34(%eax)\n-\tmovw %ss, 36(%eax)\n-\tmovw %es, 38(%eax)\n-\tmovw %fs, 40(%eax)\n-\tmovw %gs, 42(%eax)\n+\t//movl %cs, 32(%eax)\n+\t//movl %ds, 34(%eax)\n+\t//movl %ss, 36(%eax)\n+\t//movl %es, 38(%eax)\n+\t//movl %fs, 40(%eax)\n+\t//movl %gs, 42(%eax)\n \n \t// save the flags\n \tpushf\n@@ -50,23 +50,32 @@ swap_registers:\n \n \tmovl 4(%eax), %ebx\n \t// save ecx for later...\n-\t//movl 12(%eax), %edx\n+\tmovl 12(%eax), %edx\n \tmovl 16(%eax), %ebp\n \tmovl 20(%eax), %esi\n \tmovl 24(%eax), %edi\n \tmovl 28(%eax), %esp\n \t// We can't actually change this...\n \t//movl 32(%eax), %cs\n-\tmovw 34(%eax), %ds\n-\tmovw 36(%eax), %ss\n-\tmovw 38(%eax), %es\n-\tmovw 40(%eax), %fs\n-\tmovw 42(%eax), %gs\n+\t//movl 34(%eax), %ds\n+\t//movl 36(%eax), %ss\n+\t//movl 38(%eax), %es\n+\t//movl 40(%eax), %fs\n+\t//movl 42(%eax), %gs\n \n \t// restore the flags\n \tmovl 44(%eax), %ecx\n \tpush %ecx\n \tpopf\n \n+    // ok, now we can restore ecx\n+    movl 8(%eax), %ecx\n+\t\n     // Return!\n     jmp *48(%eax)\n+\n+\n+.globl task_trampoline\n+task_trampoline:\n+    // This gets set up by std::task::_spawn.\n+    call _task_exit"}, {"sha": "457eaf396702c55da4ae2d8fab6d51ee08791cd2", "filename": "src/rt/arch/i386/context.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2dad8af31d5d77e9e7da8561d87249fff216e80/src%2Frt%2Farch%2Fi386%2Fcontext.h", "raw_url": "https://github.com/rust-lang/rust/raw/b2dad8af31d5d77e9e7da8561d87249fff216e80/src%2Frt%2Farch%2Fi386%2Fcontext.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fcontext.h?ref=b2dad8af31d5d77e9e7da8561d87249fff216e80", "patch": "@@ -18,9 +18,9 @@ struct registers_t {\n };\n \n class context {\n+public:\n   registers_t regs;\n \n-public:\n   context();\n \n   context *next;"}, {"sha": "0c957cef3a948188137011adb1772e15dca55df0", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b2dad8af31d5d77e9e7da8561d87249fff216e80/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b2dad8af31d5d77e9e7da8561d87249fff216e80/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=b2dad8af31d5d77e9e7da8561d87249fff216e80", "patch": "@@ -707,6 +707,37 @@ get_task_id(rust_task *task) {\n     return task->id;\n }\n \n+extern \"C\" CDECL rust_task_id\n+new_task(rust_task *task) {\n+    return task->kernel->create_task(task, NULL);\n+}\n+\n+extern \"C\" CDECL registers_t *\n+get_task_context(rust_task *task, rust_task_id id) {\n+    registers_t *regs = &task->kernel->get_task_by_id(id)->ctx.regs;\n+    // This next line is a little dangerous.. It means we can only safely call\n+    // this when starting a task.\n+    regs->esp = task->rust_sp;\n+    return regs;\n+}\n+\n+extern \"C\" CDECL rust_task *\n+get_task_pointer(rust_task *task, rust_task_id id) {\n+    return task->kernel->get_task_by_id(id);\n+}\n+\n+extern \"C\" CDECL void\n+start_task(rust_task *task, rust_task_id id) {\n+    task->kernel->get_task_by_id(id)->start();\n+}\n+\n+extern \"C\" void *task_trampoline asm(\"task_trampoline\");\n+\n+extern \"C\" CDECL void **\n+get_task_trampoline(rust_task *task) {\n+    return &task_trampoline;\n+}\n+\n extern \"C\" CDECL rust_chan *\n clone_chan(rust_task *task, rust_chan *chan) {\n     return chan->clone(task);"}, {"sha": "a03388a2a55038a7a6253fbe23fd5a0b5d68d5dc", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b2dad8af31d5d77e9e7da8561d87249fff216e80/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b2dad8af31d5d77e9e7da8561d87249fff216e80/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=b2dad8af31d5d77e9e7da8561d87249fff216e80", "patch": "@@ -52,13 +52,6 @@ del_stk(rust_task *task, stk_seg *stk)\n }\n \n // Tasks\n-\n-// FIXME (issue #31): ifdef by platform. This is getting absurdly\n-// x86-specific.\n-\n-size_t const n_callee_saves = 4;\n-size_t const callee_save_fp = 0;\n-\n rust_task::rust_task(rust_scheduler *sched, rust_task_list *state,\n                      rust_task *spawner, const char *name) :\n     ref_count(1),\n@@ -115,15 +108,8 @@ struct spawn_args {\n };\n \n extern \"C\" CDECL\n-void task_start_wrapper(spawn_args *a)\n-{\n-    rust_task *task = a->task;\n-    int rval = 42;\n-\n-    a->f(&rval, task, a->a3, a->a4);\n-\n+void task_exit(void *env, int rval, rust_task *task) {\n     LOG(task, task, \"task exited with value %d\", rval);\n-\n     task->die();\n     task->lock.lock();\n     task->notify_tasks_waiting_to_join();\n@@ -132,6 +118,16 @@ void task_start_wrapper(spawn_args *a)\n     task->yield(1);\n }\n \n+extern \"C\" CDECL\n+void task_start_wrapper(spawn_args *a)\n+{\n+    rust_task *task = a->task;\n+    int rval = 42;\n+\n+    a->f(&rval, task, a->a3, a->a4);\n+    task_exit(NULL, rval, task);\n+}\n+\n void\n rust_task::start(uintptr_t spawnee_fn,\n                  uintptr_t args)\n@@ -154,6 +150,11 @@ rust_task::start(uintptr_t spawnee_fn,\n \n     ctx.call((void *)task_start_wrapper, a, sp);\n \n+    this->start();\n+}\n+\n+void rust_task::start()\n+{\n     yield_timer.reset_us(0);\n     transition(&sched->newborn_tasks, &sched->running_tasks);\n     sched->lock.signal();"}, {"sha": "5d920c51567739318db007ee1c76f80155130d83", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2dad8af31d5d77e9e7da8561d87249fff216e80/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/b2dad8af31d5d77e9e7da8561d87249fff216e80/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=b2dad8af31d5d77e9e7da8561d87249fff216e80", "patch": "@@ -109,6 +109,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n \n     void start(uintptr_t spawnee_fn,\n                uintptr_t args);\n+    void start();\n     void grow(size_t n_frame_bytes);\n     bool running();\n     bool blocked();"}, {"sha": "da7c13c93aabc011c1650f2fde3d5cf9b1acd5f8", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2dad8af31d5d77e9e7da8561d87249fff216e80/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/b2dad8af31d5d77e9e7da8561d87249fff216e80/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=b2dad8af31d5d77e9e7da8561d87249fff216e80", "patch": "@@ -27,7 +27,10 @@ do_gc\n drop_chan\n drop_port\n get_port_id\n+get_task_context\n get_task_id\n+get_task_pointer\n+get_task_trampoline\n get_time\n hack_allow_leaks\n ivec_copy_from_buf\n@@ -40,6 +43,7 @@ last_os_error\n nano_time\n new_chan\n new_port\n+new_task\n pin_task\n port_recv\n unpin_task\n@@ -61,6 +65,7 @@ set_min_stack\n sched_threads\n size_of\n squareroot\n+start_task\n str_alloc\n str_buf\n str_byte_len"}, {"sha": "52276cc3c60d326918f578edb9c267b2866b840a", "filename": "src/test/stdtest/task.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2dad8af31d5d77e9e7da8561d87249fff216e80/src%2Ftest%2Fstdtest%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2dad8af31d5d77e9e7da8561d87249fff216e80/src%2Ftest%2Fstdtest%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftask.rs?ref=b2dad8af31d5d77e9e7da8561d87249fff216e80", "patch": "@@ -33,3 +33,8 @@ fn test_send_recv() {\n     assert (task::recv(p) == 10);\n }\n \n+#[test]\n+fn test_lib_spawn() {\n+    fn foo() { log_err \"Hello, World!\"; }\n+    task::_spawn(foo);\n+}"}]}