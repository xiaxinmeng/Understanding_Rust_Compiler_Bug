{"sha": "056e18fcbd6ac681b968d50534f2b7de21008316", "node_id": "C_kwDOAAsO6NoAKDA1NmUxOGZjYmQ2YWM2ODFiOTY4ZDUwNTM0ZjJiN2RlMjEwMDgzMTY", "commit": {"author": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-05T01:03:27Z"}, "committer": {"name": "Jeroen Vannevel", "email": "jer_vannevel@outlook.com", "date": "2022-01-05T01:03:27Z"}, "message": "correctly handle mutable references", "tree": {"sha": "d245616f52188821c41a799e8d13a309e2ec2026", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d245616f52188821c41a799e8d13a309e2ec2026"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/056e18fcbd6ac681b968d50534f2b7de21008316", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEEzoFOOQgvfPzrDpfeO9fUvOMSb0FAmHU7l8ACgkQeO9fUvOM\nSb099Av/eUiokRd8b/c8593MpSC4uIhq2q+PzwyYBrRtmuSoaPhHYNf/bqJs1CY5\nccXYeuTMEB+rDCtkmRZKrNoNK0cvi0YlsO9Q34f9wK9UWv41MyOeOt3499oQseKi\nNJEqOt+hpy7jmPVBdeXkE4YuAPTQI3vuQ3GtopHdYpmCsgR2xXJaSvCOrTue1dq3\nQpL88WF7UFO41/BAiQqRHJm1A8Xi43uq+BPQL6/jcdftIDC588Hp6Lwb1hz1dfR2\nNTCYFyU7Mu4KWz69vwnSBICOVwljeN11vdKKtYCIRhVes2mNnpdPs1nulkq8oKFJ\nVx2om7MpeEXsfVbNvsh8O/WbSxsDeHoO1aTfrYjmqo6v5FXgCBjjXcUwnitbB0tL\nk255NVOKpWVE76TeipDLHhO+9jxZ5ij+J17KzeGlJKb41G3JT07vY8LFgHF7so9y\ntA5HlP/w81TEhRXpw4INDnkXt2fSEzlYz5c1ZDQm0hXvSorw0sMvv+bIQJFD1rRz\n/xuyyAga\n=kOo7\n-----END PGP SIGNATURE-----", "payload": "tree d245616f52188821c41a799e8d13a309e2ec2026\nparent 67f3b51edbe5ff85061e6cb030ed1a74487e37e9\nauthor Jeroen Vannevel <jer_vannevel@outlook.com> 1641344607 +0000\ncommitter Jeroen Vannevel <jer_vannevel@outlook.com> 1641344607 +0000\n\ncorrectly handle mutable references\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/056e18fcbd6ac681b968d50534f2b7de21008316", "html_url": "https://github.com/rust-lang/rust/commit/056e18fcbd6ac681b968d50534f2b7de21008316", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/056e18fcbd6ac681b968d50534f2b7de21008316/comments", "author": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Vannevelj", "id": 2777107, "node_id": "MDQ6VXNlcjI3NzcxMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2777107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Vannevelj", "html_url": "https://github.com/Vannevelj", "followers_url": "https://api.github.com/users/Vannevelj/followers", "following_url": "https://api.github.com/users/Vannevelj/following{/other_user}", "gists_url": "https://api.github.com/users/Vannevelj/gists{/gist_id}", "starred_url": "https://api.github.com/users/Vannevelj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Vannevelj/subscriptions", "organizations_url": "https://api.github.com/users/Vannevelj/orgs", "repos_url": "https://api.github.com/users/Vannevelj/repos", "events_url": "https://api.github.com/users/Vannevelj/events{/privacy}", "received_events_url": "https://api.github.com/users/Vannevelj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67f3b51edbe5ff85061e6cb030ed1a74487e37e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/67f3b51edbe5ff85061e6cb030ed1a74487e37e9", "html_url": "https://github.com/rust-lang/rust/commit/67f3b51edbe5ff85061e6cb030ed1a74487e37e9"}], "stats": {"total": 90, "additions": 88, "deletions": 2}, "files": [{"sha": "d7a8e1dd4c2bc543a4e25eb214ae36ac4fdcf2a9", "filename": "crates/ide_assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 88, "deletions": 2, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/056e18fcbd6ac681b968d50534f2b7de21008316/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056e18fcbd6ac681b968d50534f2b7de21008316/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=056e18fcbd6ac681b968d50534f2b7de21008316", "patch": "@@ -52,6 +52,12 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n         }\n     }\n \n+    let is_mutable_reference = if let Some(receiver_type) = get_receiver_type(&ctx, &to_extract) {\n+        receiver_type.is_mutable_reference()\n+    } else {\n+        false\n+    };\n+\n     let anchor = Anchor::from(&to_extract)?;\n     let indent = anchor.syntax().prev_sibling_or_token()?.as_token()?.clone();\n     let target = to_extract.syntax().text_range();\n@@ -77,11 +83,15 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext) -> Option\n                 None => to_extract.syntax().text_range(),\n             };\n \n+            let reference_modifier = if is_mutable_reference { \"&mut \" } else { \"\" };\n+\n             match anchor {\n                 Anchor::Before(_) | Anchor::Replace(_) => {\n-                    format_to!(buf, \"let {} = \", var_name)\n+                    format_to!(buf, \"let {} = {}\", var_name, reference_modifier)\n+                }\n+                Anchor::WrapInBlock(_) => {\n+                    format_to!(buf, \"{{ let {} = {}\", var_name, reference_modifier)\n                 }\n-                Anchor::WrapInBlock(_) => format_to!(buf, \"{{ let {} = \", var_name),\n             };\n             format_to!(buf, \"{}\", to_extract.syntax());\n \n@@ -146,6 +156,22 @@ fn valid_target_expr(node: SyntaxNode) -> Option<ast::Expr> {\n     }\n }\n \n+fn get_receiver_type(ctx: &AssistContext, expression: &ast::Expr) -> Option<hir::Type> {\n+    let receiver = get_receiver(expression.to_owned())?;\n+    Some(ctx.sema.type_of_expr(&receiver)?.original())\n+}\n+\n+fn get_receiver(expression: ast::Expr) -> Option<ast::Expr> {\n+    match expression {\n+        ast::Expr::FieldExpr(field) if field.expr().is_some() => {\n+            let nested_expression = &field.expr()?;\n+            get_receiver(nested_expression.to_owned())\n+        }\n+        ast::Expr::PathExpr(_) => Some(expression),\n+        _ => None,\n+    }\n+}\n+\n #[derive(Debug)]\n enum Anchor {\n     Before(SyntaxNode),\n@@ -900,4 +926,64 @@ const X: usize = $0100$0;\n \",\n         );\n     }\n+\n+    #[test]\n+    fn test_extract_var_mutable_reference_parameter() {\n+        check_assist(\n+            extract_variable,\n+            r#\"\n+struct S {\n+    vec: Vec<u8>\n+}\n+\n+fn foo(s: &mut S) {\n+    $0s.vec$0.push(0);\n+}\"#,\n+            r#\"\n+struct S {\n+    vec: Vec<u8>\n+}\n+\n+fn foo(s: &mut S) {\n+    let $0var_name = &mut s.vec;\n+    var_name.push(0);\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_var_mutable_reference_parameter_deep_nesting() {\n+        check_assist(\n+            extract_variable,\n+            r#\"\n+struct Y {\n+    field: X\n+}\n+struct X {\n+    field: S\n+}\n+struct S {\n+    vec: Vec<u8>\n+}\n+\n+fn foo(f: &mut Y) {\n+    $0f.field.field.vec$0.push(0);\n+}\"#,\n+            r#\"\n+struct Y {\n+    field: X\n+}\n+struct X {\n+    field: S\n+}\n+struct S {\n+    vec: Vec<u8>\n+}\n+\n+fn foo(f: &mut Y) {\n+    let $0var_name = &mut f.field.field.vec;\n+    var_name.push(0);\n+}\"#,\n+        );\n+    }\n }"}]}