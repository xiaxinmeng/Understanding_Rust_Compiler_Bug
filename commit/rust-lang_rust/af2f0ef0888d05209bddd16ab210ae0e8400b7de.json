{"sha": "af2f0ef0888d05209bddd16ab210ae0e8400b7de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMmYwZWYwODg4ZDA1MjA5YmRkZDE2YWIyMTBhZTBlODQwMGI3ZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-15T01:23:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-15T01:23:18Z"}, "message": "auto merge of #4927 : sanxiyn/rust/remove-dvec, r=catamorphism", "tree": {"sha": "fded482799ac03c3d86fc60c51313f598609f67f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fded482799ac03c3d86fc60c51313f598609f67f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af2f0ef0888d05209bddd16ab210ae0e8400b7de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af2f0ef0888d05209bddd16ab210ae0e8400b7de", "html_url": "https://github.com/rust-lang/rust/commit/af2f0ef0888d05209bddd16ab210ae0e8400b7de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af2f0ef0888d05209bddd16ab210ae0e8400b7de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf27352953dba644568118a254ac4a3c3035daa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf27352953dba644568118a254ac4a3c3035daa0", "html_url": "https://github.com/rust-lang/rust/commit/bf27352953dba644568118a254ac4a3c3035daa0"}, {"sha": "26697c371db2816bcaa32a050b5d32bce7294ca0", "url": "https://api.github.com/repos/rust-lang/rust/commits/26697c371db2816bcaa32a050b5d32bce7294ca0", "html_url": "https://github.com/rust-lang/rust/commit/26697c371db2816bcaa32a050b5d32bce7294ca0"}], "stats": {"total": 48, "additions": 21, "deletions": 27}, "files": [{"sha": "c86f7ea5a922fdb29f15be0c94d3000a2a2a2415", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/af2f0ef0888d05209bddd16ab210ae0e8400b7de/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2f0ef0888d05209bddd16ab210ae0e8400b7de/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=af2f0ef0888d05209bddd16ab210ae0e8400b7de", "patch": "@@ -16,7 +16,6 @@ use middle::ty;\n use middle::typeck;\n use util::ppaux;\n \n-use core::dvec::DVec;\n use core::option;\n use std::oldmap::HashMap;\n use syntax::ast::*;\n@@ -212,20 +211,20 @@ pub fn check_item_recursion(sess: Session,\n                             ast_map: ast_map::map,\n                             def_map: resolve::DefMap,\n                             it: @item) {\n-    type env = {\n+    struct env {\n         root_it: @item,\n         sess: Session,\n         ast_map: ast_map::map,\n         def_map: resolve::DefMap,\n-        idstack: @DVec<node_id>,\n-    };\n+        idstack: @mut ~[node_id]\n+    }\n \n-    let env = {\n+    let env = env {\n         root_it: it,\n         sess: sess,\n         ast_map: ast_map,\n         def_map: def_map,\n-        idstack: @DVec()\n+        idstack: @mut ~[]\n     };\n \n     let visitor = visit::mk_vt(@visit::Visitor {\n@@ -236,12 +235,12 @@ pub fn check_item_recursion(sess: Session,\n     (visitor.visit_item)(it, env, visitor);\n \n     fn visit_item(it: @item, &&env: env, v: visit::vt<env>) {\n-        if (*env.idstack).contains(&(it.id)) {\n+        if env.idstack.contains(&(it.id)) {\n             env.sess.span_fatal(env.root_it.span, ~\"recursive constant\");\n         }\n-        (*env.idstack).push(it.id);\n+        env.idstack.push(it.id);\n         visit::visit_item(it, env, v);\n-        (*env.idstack).pop();\n+        env.idstack.pop();\n     }\n \n     fn visit_expr(e: @expr, &&env: env, v: visit::vt<env>) {"}, {"sha": "8434e2c4782d82dfd9b9913ada3c544a37244268", "filename": "src/libstd/json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af2f0ef0888d05209bddd16ab210ae0e8400b7de/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2f0ef0888d05209bddd16ab210ae0e8400b7de/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=af2f0ef0888d05209bddd16ab210ae0e8400b7de", "patch": "@@ -1298,7 +1298,7 @@ mod tests {\n     // and json... not sure where to put these tests.\n     #[test]\n     fn test_write_enum () {\n-        let bw = @io::BytesWriter {bytes: dvec::DVec(), pos: 0};\n+        let bw = @io::BytesWriter();\n         let bww : @io::Writer = (bw as @io::Writer);\n         let encoder = (@Encoder(bww) as @serialize::Encoder);\n         do encoder.emit_enum(~\"animal\") {\n@@ -1319,7 +1319,7 @@ mod tests {\n \n     #[test]\n     fn test_write_some () {\n-        let bw = @io::BytesWriter {bytes: dvec::DVec(), pos: 0};\n+        let bw = @io::BytesWriter();\n         let bww : @io::Writer = (bw as @io::Writer);\n         let encoder = (@Encoder(bww) as @serialize::Encoder);\n         do encoder.emit_enum(~\"Option\") {\n@@ -1335,7 +1335,7 @@ mod tests {\n \n     #[test]\n     fn test_write_none () {\n-        let bw = @io::BytesWriter {bytes: dvec::DVec(), pos: 0};\n+        let bw = @io::BytesWriter();\n         let bww : @io::Writer = (bw as @io::Writer);\n         let encoder = (@Encoder(bww) as @serialize::Encoder);\n         do encoder.emit_enum(~\"Option\") {"}, {"sha": "87a72f988c36a59d02d94245da863f5df8d03aa6", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af2f0ef0888d05209bddd16ab210ae0e8400b7de/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2f0ef0888d05209bddd16ab210ae0e8400b7de/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=af2f0ef0888d05209bddd16ab210ae0e8400b7de", "patch": "@@ -16,7 +16,6 @@ use serialize::{Encoder, Encodable, Decoder, Decodable};\n use sort;\n \n use core::cmp;\n-use core::dvec;\n use core::either::{Either, Left, Right};\n use core::io;\n use core::option;\n@@ -141,13 +140,12 @@ type WorkMap = LinearMap<WorkKey, ~str>;\n \n pub impl<S: Encoder> WorkMap: Encodable<S> {\n     fn encode(&self, s: &S) {\n-        let d = dvec::DVec();\n+        let mut d = ~[];\n         for self.each |&(k, v)| {\n             d.push((copy *k, copy *v))\n         }\n-        let mut v = d.get();\n-        sort::tim_sort(v);\n-        v.encode(s)\n+        sort::tim_sort(d);\n+        d.encode(s)\n     }\n }\n "}, {"sha": "84d6ebd83c7cd81dbab77ac1610d87453b6eaab6", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af2f0ef0888d05209bddd16ab210ae0e8400b7de/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2f0ef0888d05209bddd16ab210ae0e8400b7de/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=af2f0ef0888d05209bddd16ab210ae0e8400b7de", "patch": "@@ -227,12 +227,11 @@ mod test {\n     use super::*;\n     use std::serialize::Encodable;\n     use std;\n-    use core::dvec;\n     use core::str;\n     use util::testing::*;\n \n     #[test] fn to_json_str (val: Encodable<std::json::Encoder>) -> ~str {\n-        let bw = @io::BytesWriter {bytes: dvec::DVec(), pos: 0};\n+        let bw = @io::BytesWriter();\n         val.encode(~std::json::Encoder(bw as io::Writer));\n         str::from_bytes(bw.bytes.data)\n     }"}, {"sha": "c9ca28768db4650be94fb651757428c999e29bb0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/af2f0ef0888d05209bddd16ab210ae0e8400b7de/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af2f0ef0888d05209bddd16ab210ae0e8400b7de/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=af2f0ef0888d05209bddd16ab210ae0e8400b7de", "patch": "@@ -84,8 +84,6 @@ use print::pprust::expr_to_str;\n use util::interner::Interner;\n \n use core::cmp;\n-use core::dvec::DVec;\n-use core::dvec;\n use core::either::{Either, Left, Right};\n use core::either;\n use core::result::Result;\n@@ -1323,11 +1321,11 @@ pub impl Parser {\n     }\n \n     fn parse_all_token_trees() -> ~[token_tree] {\n-        let tts = DVec();\n+        let mut tts = ~[];\n         while self.token != token::EOF {\n             tts.push(self.parse_token_tree());\n         }\n-        tts.get()\n+        tts\n     }\n \n     fn parse_matchers() -> ~[matcher] {\n@@ -3954,7 +3952,7 @@ pub impl Parser {\n             VIEW_ITEMS_AND_ITEMS_ALLOWED | IMPORTS_AND_ITEMS_ALLOWED => false\n         };\n \n-        let (view_items, items, foreign_items) = (DVec(), DVec(), DVec());\n+        let mut (view_items, items, foreign_items) = (~[], ~[], ~[]);\n         loop {\n             match self.parse_item_or_view_item(attrs, items_allowed,\n                                                foreign_items_allowed,\n@@ -3986,9 +3984,9 @@ pub impl Parser {\n         }\n \n         {attrs_remaining: attrs,\n-         view_items: dvec::unwrap(move view_items),\n-         items: dvec::unwrap(move items),\n-         foreign_items: dvec::unwrap(move foreign_items)}\n+         view_items: view_items,\n+         items: items,\n+         foreign_items: foreign_items}\n     }\n \n     // Parses a source module as a crate"}]}