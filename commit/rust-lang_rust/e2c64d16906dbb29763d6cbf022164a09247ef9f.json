{"sha": "e2c64d16906dbb29763d6cbf022164a09247ef9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYzY0ZDE2OTA2ZGJiMjk3NjNkNmNiZjAyMjE2NGEwOTI0N2VmOWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-15T09:43:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-15T09:43:01Z"}, "message": "Auto merge of #36372 - sfackler:sum-prod-overflow, r=alexcrichton\n\nInherit overflow checks for sum and product\n\nWe have previously documented the fact that these will panic on overflow, but I think this behavior is what people actually want/expect. `#[rustc_inherit_overflow_checks]` didn't exist when we discussed these for stabilization.\n\nr? @alexcrichton\n\nCloses #35807", "tree": {"sha": "a883d425df8db6fe8b147990b8296ad2281748ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a883d425df8db6fe8b147990b8296ad2281748ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2c64d16906dbb29763d6cbf022164a09247ef9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2c64d16906dbb29763d6cbf022164a09247ef9f", "html_url": "https://github.com/rust-lang/rust/commit/e2c64d16906dbb29763d6cbf022164a09247ef9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2c64d16906dbb29763d6cbf022164a09247ef9f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16ff9e22cdb552fd10e6cee2eb22f0c5da6d7e79", "url": "https://api.github.com/repos/rust-lang/rust/commits/16ff9e22cdb552fd10e6cee2eb22f0c5da6d7e79", "html_url": "https://github.com/rust-lang/rust/commit/16ff9e22cdb552fd10e6cee2eb22f0c5da6d7e79"}, {"sha": "7bd25a304851afdf0ba1897a950220ed3ad0a215", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd25a304851afdf0ba1897a950220ed3ad0a215", "html_url": "https://github.com/rust-lang/rust/commit/7bd25a304851afdf0ba1897a950220ed3ad0a215"}], "stats": {"total": 82, "additions": 68, "deletions": 14}, "files": [{"sha": "0e74bbe9c2600fa5e698f0a1ae32866018834163", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2c64d16906dbb29763d6cbf022164a09247ef9f/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2c64d16906dbb29763d6cbf022164a09247ef9f/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=e2c64d16906dbb29763d6cbf022164a09247ef9f", "patch": "@@ -1867,7 +1867,8 @@ pub trait Iterator {\n     /// # Panics\n     ///\n     /// When calling `sum` and a primitive integer type is being returned, this\n-    /// method will panic if the computation overflows.\n+    /// method will panic if the computation overflows and debug assertions are\n+    /// enabled.\n     ///\n     /// # Examples\n     ///\n@@ -1894,7 +1895,8 @@ pub trait Iterator {\n     /// # Panics\n     ///\n     /// When calling `product` and a primitive integer type is being returned,\n-    /// this method will panic if the computation overflows.\n+    /// method will panic if the computation overflows and debug assertions are\n+    /// enabled.\n     ///\n     /// # Examples\n     ///"}, {"sha": "b55d6f96af9bfbcbd23d47c6cbb41e8a1d0feb67", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e2c64d16906dbb29763d6cbf022164a09247ef9f/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2c64d16906dbb29763d6cbf022164a09247ef9f/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=e2c64d16906dbb29763d6cbf022164a09247ef9f", "patch": "@@ -7,6 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+use ops::{Mul, Add};\n \n /// Conversion from an `Iterator`.\n ///\n@@ -581,41 +582,34 @@ pub trait Product<A = Self>: Sized {\n     fn product<I: Iterator<Item=A>>(iter: I) -> Self;\n }\n \n+// NB: explicitly use Add and Mul here to inherit overflow checks\n macro_rules! integer_sum_product {\n     ($($a:ident)*) => ($(\n         #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl Sum for $a {\n             fn sum<I: Iterator<Item=$a>>(iter: I) -> $a {\n-                iter.fold(0, |a, b| {\n-                    a.checked_add(b).expect(\"overflow in sum\")\n-                })\n+                iter.fold(0, Add::add)\n             }\n         }\n \n         #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl Product for $a {\n             fn product<I: Iterator<Item=$a>>(iter: I) -> $a {\n-                iter.fold(1, |a, b| {\n-                    a.checked_mul(b).expect(\"overflow in product\")\n-                })\n+                iter.fold(1, Mul::mul)\n             }\n         }\n \n         #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl<'a> Sum<&'a $a> for $a {\n             fn sum<I: Iterator<Item=&'a $a>>(iter: I) -> $a {\n-                iter.fold(0, |a, b| {\n-                    a.checked_add(*b).expect(\"overflow in sum\")\n-                })\n+                iter.cloned().fold(0, Add::add)\n             }\n         }\n \n         #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl<'a> Product<&'a $a> for $a {\n             fn product<I: Iterator<Item=&'a $a>>(iter: I) -> $a {\n-                iter.fold(1, |a, b| {\n-                    a.checked_mul(*b).expect(\"overflow in product\")\n-                })\n+                iter.cloned().fold(1, Mul::mul)\n             }\n         }\n     )*)"}, {"sha": "6c07afb37b8a08d81379b89f0fc1a3d0a3f4798d", "filename": "src/test/run-pass/iter-sum-overflow-debug.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e2c64d16906dbb29763d6cbf022164a09247ef9f/src%2Ftest%2Frun-pass%2Fiter-sum-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2c64d16906dbb29763d6cbf022164a09247ef9f/src%2Ftest%2Frun-pass%2Fiter-sum-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-sum-overflow-debug.rs?ref=e2c64d16906dbb29763d6cbf022164a09247ef9f", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C debug_assertions=yes\n+\n+use std::panic;\n+\n+fn main() {\n+    let r = panic::catch_unwind(|| {\n+        [1, i32::max_value()].iter().sum::<i32>();\n+    });\n+    assert!(r.is_err());\n+\n+    let r = panic::catch_unwind(|| {\n+        [2, i32::max_value()].iter().product::<i32>();\n+    });\n+    assert!(r.is_err());\n+\n+    let r = panic::catch_unwind(|| {\n+        [1, i32::max_value()].iter().cloned().sum::<i32>();\n+    });\n+    assert!(r.is_err());\n+\n+    let r = panic::catch_unwind(|| {\n+        [2, i32::max_value()].iter().cloned().product::<i32>();\n+    });\n+    assert!(r.is_err());\n+}"}, {"sha": "65ac1ef29ed6a1f586b1ee3dce8199d5ba279125", "filename": "src/test/run-pass/iter-sum-overflow-ndebug.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e2c64d16906dbb29763d6cbf022164a09247ef9f/src%2Ftest%2Frun-pass%2Fiter-sum-overflow-ndebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2c64d16906dbb29763d6cbf022164a09247ef9f/src%2Ftest%2Frun-pass%2Fiter-sum-overflow-ndebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-sum-overflow-ndebug.rs?ref=e2c64d16906dbb29763d6cbf022164a09247ef9f", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C debug_assertions=no\n+\n+fn main() {\n+    assert_eq!([1i32, i32::max_value()].iter().sum::<i32>(),\n+               1i32.wrapping_add(i32::max_value()));\n+    assert_eq!([2i32, i32::max_value()].iter().product::<i32>(),\n+               2i32.wrapping_mul(i32::max_value()));\n+\n+    assert_eq!([1i32, i32::max_value()].iter().cloned().sum::<i32>(),\n+               1i32.wrapping_add(i32::max_value()));\n+    assert_eq!([2i32, i32::max_value()].iter().cloned().product::<i32>(),\n+               2i32.wrapping_mul(i32::max_value()));\n+}"}]}