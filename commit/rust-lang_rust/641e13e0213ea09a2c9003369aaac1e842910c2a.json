{"sha": "641e13e0213ea09a2c9003369aaac1e842910c2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MWUxM2UwMjEzZWEwOWEyYzkwMDMzNjlhYWFjMWU4NDI5MTBjMmE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-26T17:21:45Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-26T17:21:45Z"}, "message": "Replace pointer_ty() with fx.pointer_type where possible", "tree": {"sha": "b11a8343198264f6266fbc63acbd537b5ba776fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b11a8343198264f6266fbc63acbd537b5ba776fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/641e13e0213ea09a2c9003369aaac1e842910c2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/641e13e0213ea09a2c9003369aaac1e842910c2a", "html_url": "https://github.com/rust-lang/rust/commit/641e13e0213ea09a2c9003369aaac1e842910c2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/641e13e0213ea09a2c9003369aaac1e842910c2a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "472f9f9d6294632bc2fe23e6a8726d526d296bbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/472f9f9d6294632bc2fe23e6a8726d526d296bbf", "html_url": "https://github.com/rust-lang/rust/commit/472f9f9d6294632bc2fe23e6a8726d526d296bbf"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "cb2beed2ca71856ec6305df44f2906a7cd15286d", "filename": "src/abi/returning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/641e13e0213ea09a2c9003369aaac1e842910c2a/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641e13e0213ea09a2c9003369aaac1e842910c2a/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=641e13e0213ea09a2c9003369aaac1e842910c2a", "patch": "@@ -73,7 +73,7 @@ pub(super) fn codegen_return_param<'tcx>(\n         }\n         PassMode::Indirect { attrs: _, extra_attrs: None, on_stack: _ } => {\n             let ret_param = block_params_iter.next().unwrap();\n-            assert_eq!(fx.bcx.func.dfg.value_type(ret_param), pointer_ty(fx.tcx));\n+            assert_eq!(fx.bcx.func.dfg.value_type(ret_param), fx.pointer_type);\n             (\n                 CPlace::for_ptr(Pointer::new(ret_param), fx.fn_abi.as_ref().unwrap().ret.layout),\n                 smallvec![ret_param],"}, {"sha": "4e50f4d6817ab67c8c4cf2f98f0b7054c329bd17", "filename": "src/codegen_i128.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/641e13e0213ea09a2c9003369aaac1e842910c2a/src%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641e13e0213ea09a2c9003369aaac1e842910c2a/src%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodegen_i128.rs?ref=641e13e0213ea09a2c9003369aaac1e842910c2a", "patch": "@@ -40,9 +40,9 @@ pub(crate) fn maybe_codegen<'tcx>(\n                 fx.lib_call(\n                     \"__multi3\",\n                     vec![\n-                        AbiParam::special(pointer_ty(fx.tcx), ArgumentPurpose::StructReturn),\n-                        AbiParam::new(pointer_ty(fx.tcx)),\n-                        AbiParam::new(pointer_ty(fx.tcx)),\n+                        AbiParam::special(fx.pointer_type, ArgumentPurpose::StructReturn),\n+                        AbiParam::new(fx.pointer_type),\n+                        AbiParam::new(fx.pointer_type),\n                     ],\n                     vec![],\n                     &args,\n@@ -63,16 +63,16 @@ pub(crate) fn maybe_codegen<'tcx>(\n                 assert!(rhs_extra.is_none());\n                 (\n                     vec![\n-                        AbiParam::special(pointer_ty(fx.tcx), ArgumentPurpose::StructReturn),\n-                        AbiParam::new(pointer_ty(fx.tcx)),\n-                        AbiParam::new(pointer_ty(fx.tcx)),\n+                        AbiParam::special(fx.pointer_type, ArgumentPurpose::StructReturn),\n+                        AbiParam::new(fx.pointer_type),\n+                        AbiParam::new(fx.pointer_type),\n                     ],\n                     [out_place.to_ptr().get_addr(fx), lhs_ptr.get_addr(fx), rhs_ptr.get_addr(fx)],\n                 )\n             } else {\n                 (\n                     vec![\n-                        AbiParam::special(pointer_ty(fx.tcx), ArgumentPurpose::StructReturn),\n+                        AbiParam::special(fx.pointer_type, ArgumentPurpose::StructReturn),\n                         AbiParam::new(types::I128),\n                         AbiParam::new(types::I128),\n                     ],\n@@ -109,7 +109,7 @@ pub(crate) fn maybe_codegen<'tcx>(\n                 let args = [lhs_ptr.get_addr(fx), rhs_ptr.get_addr(fx)];\n                 let ret = fx.lib_call(\n                     name,\n-                    vec![AbiParam::new(pointer_ty(fx.tcx)), AbiParam::new(pointer_ty(fx.tcx))],\n+                    vec![AbiParam::new(fx.pointer_type), AbiParam::new(fx.pointer_type)],\n                     vec![AbiParam::new(types::I64X2)],\n                     &args,\n                 )[0];"}, {"sha": "fe8d20fa39fc2b82f826947b4f0a5f5a150a7873", "filename": "src/trap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/641e13e0213ea09a2c9003369aaac1e842910c2a/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641e13e0213ea09a2c9003369aaac1e842910c2a/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=641e13e0213ea09a2c9003369aaac1e842910c2a", "patch": "@@ -10,7 +10,7 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, '_>, msg: &str) {\n             Linkage::Import,\n             &Signature {\n                 call_conv: CallConv::triple_default(fx.triple()),\n-                params: vec![AbiParam::new(pointer_ty(fx.tcx))],\n+                params: vec![AbiParam::new(fx.pointer_type)],\n                 returns: vec![AbiParam::new(types::I32)],\n             },\n         )"}, {"sha": "d1b66ab02e107bd8c818e29e2cac502bf0cb3c60", "filename": "src/value_and_place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/641e13e0213ea09a2c9003369aaac1e842910c2a/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641e13e0213ea09a2c9003369aaac1e842910c2a/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=641e13e0213ea09a2c9003369aaac1e842910c2a", "patch": "@@ -34,10 +34,10 @@ fn codegen_field<'tcx>(\n                 let (_, unsized_align) =\n                     crate::unsize::size_and_align_of_dst(fx, field_layout, extra);\n \n-                let one = fx.bcx.ins().iconst(pointer_ty(fx.tcx), 1);\n+                let one = fx.bcx.ins().iconst(fx.pointer_type, 1);\n                 let align_sub_1 = fx.bcx.ins().isub(unsized_align, one);\n                 let and_lhs = fx.bcx.ins().iadd_imm(align_sub_1, unaligned_offset as i64);\n-                let zero = fx.bcx.ins().iconst(pointer_ty(fx.tcx), 0);\n+                let zero = fx.bcx.ins().iconst(fx.pointer_type, 0);\n                 let and_rhs = fx.bcx.ins().isub(zero, unsized_align);\n                 let offset = fx.bcx.ins().band(and_lhs, and_rhs);\n "}, {"sha": "0004c9787be6583beded633c07f865fde9ecb40a", "filename": "src/vtable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/641e13e0213ea09a2c9003369aaac1e842910c2a/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641e13e0213ea09a2c9003369aaac1e842910c2a/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=641e13e0213ea09a2c9003369aaac1e842910c2a", "patch": "@@ -14,7 +14,7 @@ fn vtable_memflags() -> MemFlags {\n pub(crate) fn drop_fn_of_obj(fx: &mut FunctionCx<'_, '_, '_>, vtable: Value) -> Value {\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n     fx.bcx.ins().load(\n-        pointer_ty(fx.tcx),\n+        fx.pointer_type,\n         vtable_memflags(),\n         vtable,\n         (ty::COMMON_VTABLE_ENTRIES_DROPINPLACE * usize_size) as i32,\n@@ -24,7 +24,7 @@ pub(crate) fn drop_fn_of_obj(fx: &mut FunctionCx<'_, '_, '_>, vtable: Value) ->\n pub(crate) fn size_of_obj(fx: &mut FunctionCx<'_, '_, '_>, vtable: Value) -> Value {\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n     fx.bcx.ins().load(\n-        pointer_ty(fx.tcx),\n+        fx.pointer_type,\n         vtable_memflags(),\n         vtable,\n         (ty::COMMON_VTABLE_ENTRIES_SIZE * usize_size) as i32,\n@@ -34,7 +34,7 @@ pub(crate) fn size_of_obj(fx: &mut FunctionCx<'_, '_, '_>, vtable: Value) -> Val\n pub(crate) fn min_align_of_obj(fx: &mut FunctionCx<'_, '_, '_>, vtable: Value) -> Value {\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n     fx.bcx.ins().load(\n-        pointer_ty(fx.tcx),\n+        fx.pointer_type,\n         vtable_memflags(),\n         vtable,\n         (ty::COMMON_VTABLE_ENTRIES_ALIGN * usize_size) as i32,\n@@ -55,7 +55,7 @@ pub(crate) fn get_ptr_and_method_ref<'tcx>(\n \n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes();\n     let func_ref = fx.bcx.ins().load(\n-        pointer_ty(fx.tcx),\n+        fx.pointer_type,\n         vtable_memflags(),\n         vtable,\n         (idx * usize_size as usize) as i32,"}]}