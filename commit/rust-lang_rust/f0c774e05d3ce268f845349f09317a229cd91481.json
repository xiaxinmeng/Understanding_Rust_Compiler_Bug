{"sha": "f0c774e05d3ce268f845349f09317a229cd91481", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYzc3NGUwNWQzY2UyNjhmODQ1MzQ5ZjA5MzE3YTIyOWNkOTE0ODE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-16T16:39:12Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-16T16:43:52Z"}, "message": "Rustup to rustc 1.40.0-nightly (237d54ff6 2019-10-15)", "tree": {"sha": "4c45a2d21486a3d5c8d2b2d9836cc206855ef517", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c45a2d21486a3d5c8d2b2d9836cc206855ef517"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0c774e05d3ce268f845349f09317a229cd91481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c774e05d3ce268f845349f09317a229cd91481", "html_url": "https://github.com/rust-lang/rust/commit/f0c774e05d3ce268f845349f09317a229cd91481", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0c774e05d3ce268f845349f09317a229cd91481/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc261aa2f5a08be85049aea1c5de6b2036307369", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc261aa2f5a08be85049aea1c5de6b2036307369", "html_url": "https://github.com/rust-lang/rust/commit/fc261aa2f5a08be85049aea1c5de6b2036307369"}], "stats": {"total": 51, "additions": 24, "deletions": 27}, "files": [{"sha": "b7a7267cd78776fbb1d5138ac1b2e7e1df4b2352", "filename": "patches/0017-Fix-libtest-compilation.patch", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f0c774e05d3ce268f845349f09317a229cd91481/patches%2F0017-Fix-libtest-compilation.patch", "raw_url": "https://github.com/rust-lang/rust/raw/f0c774e05d3ce268f845349f09317a229cd91481/patches%2F0017-Fix-libtest-compilation.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0017-Fix-libtest-compilation.patch?ref=f0c774e05d3ce268f845349f09317a229cd91481", "patch": "@@ -21,14 +21,14 @@ index 8b76080..9e65de2 100644\n  use std::process;\n  use std::process::{ExitStatus, Command, Termination};\n @@ -1493,7 +1493,7 @@ pub fn run_test(\n-         report_time: bool,\n-         strategy: RunStrategy,\n+     fn run_test_inner(\n+         desc: TestDesc,\n          monitor_ch: Sender<MonitorMsg>,\n -        testfn: Box<dyn FnOnce() + Send>,\n +        testfn: Box<impl FnOnce() + Send + 'static>,\n-         concurrency: Concurrent,\n+         opts: TestRunOpts,\n      ) {\n-         let name = desc.name.clone();\n+         let concurrency = opts.concurrency;\n @@ -1509,7 +1509,7 @@ pub fn run_test(\n          // If the platform is single-threaded we're just going to run\n          // the test synchronously, regardless of the concurrency\n@@ -38,7 +38,7 @@ index 8b76080..9e65de2 100644\n          if concurrency == Concurrent::Yes && supports_threads {\n              let cfg = thread::Builder::new().name(name.as_slice().to_owned());\n              cfg.spawn(runtest).unwrap();\n-@@ -1531,20 +1531,8 @@ pub fn run_test(\n+@@ -1531,17 +1531,8 @@ pub fn run_test(\n                  (benchfn.clone())(harness)\n              });\n          }\n@@ -49,25 +49,25 @@ index 8b76080..9e65de2 100644\n -            };\n -            run_test_inner(\n -                desc,\n--                opts.nocapture,\n--                opts.report_time,\n--                strategy,\n -                monitor_ch,\n -                Box::new(move || __rust_begin_short_backtrace(f)),\n--                concurrency\n+-                test_run_opts,\n -            );\n +        DynTestFn(_f) => {\n +            unimplemented!();\n          }\n          StaticTestFn(f) => run_test_inner(\n              desc,\n-@@ -1604,7 +1592,7 @@ fn get_result_from_exit_code(desc: &TestDesc, code: i32) -> TestResult {\n- fn run_test_in_process(desc: TestDesc,\n-                        nocapture: bool,\n-                        report_time: bool,\n--                       testfn: Box<dyn FnOnce() + Send>,\n-+                       testfn: Box<impl FnOnce() + Send + 'static>,\n-                        monitor_ch: Sender<MonitorMsg>) {\n+@@ -1604,10 +1592,10 @@ fn get_result_from_exit_code(desc: &TestDesc, code: i32) -> TestResult {\n+ fn run_test_in_process(\n+     desc: TestDesc,\n+     nocapture: bool,\n+     report_time: bool,\n+-    testfn: Box<dyn FnOnce() + Send>,\n++    testfn: Box<impl FnOnce() + Send + 'static>,\n+     monitor_ch: Sender<MonitorMsg>,\n+     time_opts: Option<TestTimeOptions>,\n+ ) {\n      // Buffer for capturing standard I/O\n      let data = Arc::new(Mutex::new(Vec::new()));\n @@ -1623,7 +1611,7 @@ fn run_test_in_process(desc: TestDesc,\n@@ -79,12 +79,15 @@ index 8b76080..9e65de2 100644\n      let exec_time = start.map(|start| {\n          let duration = start.elapsed();\n          TestExecTime(duration)\n-@@ -1688,7 +1676,7 @@ fn spawn_test_subprocess(desc: TestDesc, report_time: bool, monitor_ch: Sender<M\n+@@ -1688,10 +1676,10 @@ fn spawn_test_subprocess(desc: TestDesc, report_time: bool, monitor_ch: Sender<M\n      monitor_ch.send((desc.clone(), result, exec_time, test_output)).unwrap();\n  }\n  \n--fn run_test_in_spawned_subprocess(desc: TestDesc, testfn: Box<dyn FnOnce() + Send>) -> ! {\n-+fn run_test_in_spawned_subprocess(desc: TestDesc, testfn: Box<impl FnOnce() + Send + 'static>) -> ! {\n+ fn run_test_in_spawned_subprocess(\n+     desc: TestDesc,\n+-    testfn: Box<dyn FnOnce() + Send>,\n++    testfn: Box<impl FnOnce() + Send + 'static>,\n+ ) -> ! {\n      let builtin_panic_hook = panic::take_hook();\n      let record_result = Arc::new(move |panic_info: Option<&'_ PanicInfo<'_>>| {\n          let test_result = match panic_info {"}, {"sha": "ff38c71fde9cc2259c01ddfe646eb39cc745815d", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0c774e05d3ce268f845349f09317a229cd91481/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c774e05d3ce268f845349f09317a229cd91481/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=f0c774e05d3ce268f845349f09317a229cd91481", "patch": "@@ -333,6 +333,7 @@ impl<'tcx, B: Backend + 'static> HasTargetSpec for FunctionCx<'_, 'tcx, B> {\n \n impl<'tcx, B: Backend> BackendTypes for FunctionCx<'_, 'tcx, B> {\n     type Value = Value;\n+    type Function = Value;\n     type BasicBlock = Ebb;\n     type Type = Type;\n     type Funclet = !;"}, {"sha": "489ea71d33bda2d0645c6ce309d0797c3840b7d6", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f0c774e05d3ce268f845349f09317a229cd91481/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c774e05d3ce268f845349f09317a229cd91481/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=f0c774e05d3ce268f845349f09317a229cd91481", "patch": "@@ -171,10 +171,6 @@ impl CodegenBackend for CraneliftCodegenBackend {\n     }\n \n     fn provide(&self, providers: &mut Providers) {\n-        rustc_codegen_utils::symbol_names::provide(providers);\n-        rustc_codegen_ssa::back::symbol_export::provide(providers);\n-        rustc_codegen_ssa::base::provide_both(providers);\n-\n         providers.target_features_whitelist = |tcx, cnum| {\n             assert_eq!(cnum, LOCAL_CRATE);\n             if tcx.sess.opts.actually_rustdoc {\n@@ -195,10 +191,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             }\n         };\n     }\n-    fn provide_extern(&self, providers: &mut Providers) {\n-        rustc_codegen_ssa::back::symbol_export::provide_extern(providers);\n-        rustc_codegen_ssa::base::provide_both(providers);\n-    }\n+    fn provide_extern(&self, _providers: &mut Providers) {}\n \n     fn codegen_crate<'tcx>(\n         &self,"}]}