{"sha": "12a2f24b156973316dd0853dc0263bf8efff1ac4", "node_id": "C_kwDOAAsO6NoAKDEyYTJmMjRiMTU2OTczMzE2ZGQwODUzZGMwMjYzYmY4ZWZmZjFhYzQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-25T19:14:37Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-27T17:17:38Z"}, "message": "Remove a bunch of orphaned test files", "tree": {"sha": "b16b2bf73695fba3cdf2be5c9c2fc43f6ddf7a7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b16b2bf73695fba3cdf2be5c9c2fc43f6ddf7a7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12a2f24b156973316dd0853dc0263bf8efff1ac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12a2f24b156973316dd0853dc0263bf8efff1ac4", "html_url": "https://github.com/rust-lang/rust/commit/12a2f24b156973316dd0853dc0263bf8efff1ac4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12a2f24b156973316dd0853dc0263bf8efff1ac4/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "901fdb3b04375e3456b5cf771f86ecca8d6c1917", "url": "https://api.github.com/repos/rust-lang/rust/commits/901fdb3b04375e3456b5cf771f86ecca8d6c1917", "html_url": "https://github.com/rust-lang/rust/commit/901fdb3b04375e3456b5cf771f86ecca8d6c1917"}], "stats": {"total": 377, "additions": 0, "deletions": 377}, "files": [{"sha": "0f0dc335e7f27cad0cfec72ccc3cc110f38ede13", "filename": "tests/ui/async-await/async-fn-nonsend.stderr", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=901fdb3b04375e3456b5cf771f86ecca8d6c1917", "patch": "@@ -1,49 +0,0 @@\n-error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:72:17\n-   |\n-LL |     assert_send(non_send_temporary_in_match());\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_send_temporary_in_match` is not `Send`\n-   |\n-   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n-note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:36:25\n-   |\n-LL |     match Some(non_send()) {\n-   |           ---------------- has type `Option<impl Debug>` which is not `Send`\n-LL |         Some(_) => fut().await,\n-   |                         ^^^^^^ await occurs here, with `Some(non_send())` maybe used later\n-...\n-LL | }\n-   | - `Some(non_send())` is later dropped here\n-note: required by a bound in `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:67:24\n-   |\n-LL | fn assert_send(_: impl Send) {}\n-   |                        ^^^^ required by this bound in `assert_send`\n-\n-error: future cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:74:17\n-   |\n-LL |     assert_send(non_sync_with_method_call());\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_sync_with_method_call` is not `Send`\n-   |\n-   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `dyn std::fmt::Write`\n-note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-fn-nonsend.rs:49:14\n-   |\n-LL |     let f: &mut std::fmt::Formatter = &mut get_formatter();\n-   |                                            --------------- has type `Formatter<'_>` which is not `Send`\n-...\n-LL |         fut().await;\n-   |              ^^^^^^ await occurs here, with `get_formatter()` maybe used later\n-LL |     }\n-LL | }\n-   | - `get_formatter()` is later dropped here\n-note: required by a bound in `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:67:24\n-   |\n-LL | fn assert_send(_: impl Send) {}\n-   |                        ^^^^ required by this bound in `assert_send`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "8d5169a6302eea0afeec7e746712b17b2d24661c", "filename": "tests/ui/async-await/issue-64130-1-sync.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr?ref=901fdb3b04375e3456b5cf771f86ecca8d6c1917", "patch": "@@ -1,24 +0,0 @@\n-error: future cannot be shared between threads safely\n-  --> $DIR/issue-64130-1-sync.rs:24:13\n-   |\n-LL |     is_sync(bar());\n-   |             ^^^^^ future returned by `bar` is not `Sync`\n-   |\n-   = help: within `impl Future<Output = ()>`, the trait `Sync` is not implemented for `Foo`\n-note: future is not `Sync` as this value is used across an await\n-  --> $DIR/issue-64130-1-sync.rs:18:10\n-   |\n-LL |     let x = Foo;\n-   |         - has type `Foo` which is not `Sync`\n-LL |     baz().await;\n-   |          ^^^^^^ await occurs here, with `x` maybe used later\n-LL | }\n-   | - `x` is later dropped here\n-note: required by a bound in `is_sync`\n-  --> $DIR/issue-64130-1-sync.rs:14:15\n-   |\n-LL | fn is_sync<T: Sync>(t: T) { }\n-   |               ^^^^ required by this bound in `is_sync`\n-\n-error: aborting due to previous error\n-"}, {"sha": "f6505cad69e21236a093873947d39d3c16d5b5d5", "filename": "tests/ui/async-await/issue-64130-2-send.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr?ref=901fdb3b04375e3456b5cf771f86ecca8d6c1917", "patch": "@@ -1,24 +0,0 @@\n-error: future cannot be sent between threads safely\n-  --> $DIR/issue-64130-2-send.rs:24:13\n-   |\n-LL |     is_send(bar());\n-   |             ^^^^^ future returned by `bar` is not `Send`\n-   |\n-   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Foo`\n-note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-64130-2-send.rs:18:10\n-   |\n-LL |     let x = Foo;\n-   |         - has type `Foo` which is not `Send`\n-LL |     baz().await;\n-   |          ^^^^^^ await occurs here, with `x` maybe used later\n-LL | }\n-   | - `x` is later dropped here\n-note: required by a bound in `is_send`\n-  --> $DIR/issue-64130-2-send.rs:14:15\n-   |\n-LL | fn is_send<T: Send>(t: T) { }\n-   |               ^^^^ required by this bound in `is_send`\n-\n-error: aborting due to previous error\n-"}, {"sha": "cb36a3811b2803eb5fe1ed98875321716c4fbaa6", "filename": "tests/ui/async-await/issue-64130-3-other.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr?ref=901fdb3b04375e3456b5cf771f86ecca8d6c1917", "patch": "@@ -1,27 +0,0 @@\n-error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl Future<Output = ()>`\n-  --> $DIR/issue-64130-3-other.rs:27:12\n-   |\n-LL | async fn bar() {\n-   |                - within this `impl Future<Output = ()>`\n-...\n-LL |     is_qux(bar());\n-   |            ^^^^^ within `impl Future<Output = ()>`, the trait `Qux` is not implemented for `Foo`\n-   |\n-note: future does not implement `Qux` as this value is used across an await\n-  --> $DIR/issue-64130-3-other.rs:21:10\n-   |\n-LL |     let x = Foo;\n-   |         - has type `Foo` which does not implement `Qux`\n-LL |     baz().await;\n-   |          ^^^^^^ await occurs here, with `x` maybe used later\n-LL | }\n-   | - `x` is later dropped here\n-note: required by a bound in `is_qux`\n-  --> $DIR/issue-64130-3-other.rs:17:14\n-   |\n-LL | fn is_qux<T: Qux>(t: T) {}\n-   |              ^^^ required by this bound in `is_qux`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "ab0698c3ec2132dc9c8def966e733d938f8b8145", "filename": "tests/ui/async-await/issue-70818.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fasync-await%2Fissue-70818.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fasync-await%2Fissue-70818.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-70818.stderr?ref=901fdb3b04375e3456b5cf771f86ecca8d6c1917", "patch": "@@ -1,18 +0,0 @@\n-error: future cannot be sent between threads safely\n-  --> $DIR/issue-70818.rs:7:38\n-   |\n-LL | fn foo<T: Send, U>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n-   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n-   |\n-note: captured value is not `Send`\n-  --> $DIR/issue-70818.rs:9:18\n-   |\n-LL |     async { (ty, ty1) }\n-   |                  ^^^ has type `U` which is not `Send`\n-help: consider restricting type parameter `U`\n-   |\n-LL | fn foo<T: Send, U: std::marker::Send>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n-   |                  +++++++++++++++++++\n-\n-error: aborting due to previous error\n-"}, {"sha": "6d19c3beb2fe12ec94570ee49cc75507c5ac91b2", "filename": "tests/ui/async-await/issue-73741-type-err-drop-tracking.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-73741-type-err-drop-tracking.stderr?ref=901fdb3b04375e3456b5cf771f86ecca8d6c1917", "patch": "@@ -1,11 +0,0 @@\n-error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/issue-73741-type-err-drop-tracking.rs:11:7\n-   |\n-LL |     1 = 2;\n-   |     - ^\n-   |     |\n-   |     cannot assign to this expression\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0070`."}, {"sha": "8a7317bb95a704682a3ccd465dada3dfc9ca8aa0", "filename": "tests/ui/async-await/mutually-recursive-async-impl-trait-type.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fmutually-recursive-async-impl-trait-type.stderr?ref=901fdb3b04375e3456b5cf771f86ecca8d6c1917", "patch": "@@ -1,21 +0,0 @@\n-error[E0733]: recursion in an `async fn` requires boxing\n-  --> $DIR/mutually-recursive-async-impl-trait-type.rs:9:18\n-   |\n-LL | async fn rec_1() {\n-   |                  ^ recursive `async fn`\n-   |\n-   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n-   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n-\n-error[E0733]: recursion in an `async fn` requires boxing\n-  --> $DIR/mutually-recursive-async-impl-trait-type.rs:13:18\n-   |\n-LL | async fn rec_2() {\n-   |                  ^ recursive `async fn`\n-   |\n-   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n-   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0733`."}, {"sha": "7e63a8da552554bb8ded374641478a0bc3b54b2d", "filename": "tests/ui/async-await/recursive-async-impl-trait-type.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr?ref=901fdb3b04375e3456b5cf771f86ecca8d6c1917", "patch": "@@ -1,12 +0,0 @@\n-error[E0733]: recursion in an `async fn` requires boxing\n-  --> $DIR/recursive-async-impl-trait-type.rs:8:40\n-   |\n-LL | async fn recursive_async_function() -> () {\n-   |                                        ^^ recursive `async fn`\n-   |\n-   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n-   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0733`."}, {"sha": "64a31b5fc32dc3bf6c23f9f648d35a5c46d6d304", "filename": "tests/ui/async-await/unresolved_type_param.stderr", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fasync-await%2Funresolved_type_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Funresolved_type_param.stderr?ref=901fdb3b04375e3456b5cf771f86ecca8d6c1917", "patch": "@@ -1,39 +0,0 @@\n-error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:13:5\n-   |\n-LL |     bar().await;\n-   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n-   |\n-note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:13:10\n-   |\n-LL |     bar().await;\n-   |          ^^^^^^\n-\n-error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:13:5\n-   |\n-LL |     bar().await;\n-   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n-   |\n-note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:13:10\n-   |\n-LL |     bar().await;\n-   |          ^^^^^^\n-\n-error[E0698]: type inside `async fn` body must be known in this context\n-  --> $DIR/unresolved_type_param.rs:13:5\n-   |\n-LL |     bar().await;\n-   |     ^^^ cannot infer type for type parameter `T` declared on the function `bar`\n-   |\n-note: the type is part of the `async fn` body because of this `await`\n-  --> $DIR/unresolved_type_param.rs:13:10\n-   |\n-LL |     bar().await;\n-   |          ^^^^^^\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0698`."}, {"sha": "96e3c327f8b31904864d4af6e44eee751821d79a", "filename": "tests/ui/generator/borrowing.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fgenerator%2Fborrowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fgenerator%2Fborrowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fborrowing.stderr?ref=901fdb3b04375e3456b5cf771f86ecca8d6c1917", "patch": "@@ -1,31 +0,0 @@\n-error[E0597]: `a` does not live long enough\n-  --> $DIR/borrowing.rs:13:33\n-   |\n-LL |     let _b = {\n-   |         -- borrow later stored here\n-LL |         let a = 3;\n-LL |         Pin::new(&mut || yield &a).resume(())\n-   |                       --        ^ borrowed value does not live long enough\n-   |                       |\n-   |                       value captured here by generator\n-LL |\n-LL |     };\n-   |     - `a` dropped here while still borrowed\n-\n-error[E0597]: `a` does not live long enough\n-  --> $DIR/borrowing.rs:20:20\n-   |\n-LL |     let _b = {\n-   |         -- borrow later stored here\n-LL |         let a = 3;\n-LL |         || {\n-   |         -- value captured here by generator\n-LL |             yield &a\n-   |                    ^ borrowed value does not live long enough\n-...\n-LL |     };\n-   |     - `a` dropped here while still borrowed\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0597`."}, {"sha": "7122a951e8070221826a23b2c9b59cd34dac0fd8", "filename": "tests/ui/generator/retain-resume-ref.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fgenerator%2Fretain-resume-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Fgenerator%2Fretain-resume-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fretain-resume-ref.stderr?ref=901fdb3b04375e3456b5cf771f86ecca8d6c1917", "patch": "@@ -1,13 +0,0 @@\n-error[E0499]: cannot borrow `thing` as mutable more than once at a time\n-  --> $DIR/retain-resume-ref.rs:27:25\n-   |\n-LL |     gen.as_mut().resume(&mut thing);\n-   |                         ---------- first mutable borrow occurs here\n-LL |     gen.as_mut().resume(&mut thing);\n-   |                  ------ ^^^^^^^^^^ second mutable borrow occurs here\n-   |                  |\n-   |                  first borrow later used by call\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0499`."}, {"sha": "18880f5a757e0f3953c93e96c0108e03d3be9f19", "filename": "tests/ui/lint/must_not_suspend/dedup.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr?ref=901fdb3b04375e3456b5cf771f86ecca8d6c1917", "patch": "@@ -1,19 +0,0 @@\n-error: `No` held across a suspend point, but should not be\n-  --> $DIR/dedup.rs:19:13\n-   |\n-LL |     wheeee(&No {}).await;\n-   |             ^^^^^ ------ the value is held across this suspend point\n-   |\n-help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/dedup.rs:19:13\n-   |\n-LL |     wheeee(&No {}).await;\n-   |             ^^^^^\n-note: the lint level is defined here\n-  --> $DIR/dedup.rs:6:9\n-   |\n-LL | #![deny(must_not_suspend)]\n-   |         ^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "6e62a228a43a5a13a2f379b57c9392dc15060dbd", "filename": "tests/ui/lint/must_not_suspend/trait.stderr", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr?ref=901fdb3b04375e3456b5cf771f86ecca8d6c1917", "patch": "@@ -1,37 +0,0 @@\n-error: implementer of `Wow` held across a suspend point, but should not be\n-  --> $DIR/trait.rs:24:9\n-   |\n-LL |     let _guard1 = r#impl();\n-   |         ^^^^^^^\n-...\n-LL |     other().await;\n-   |            ------ the value is held across this suspend point\n-   |\n-help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/trait.rs:24:9\n-   |\n-LL |     let _guard1 = r#impl();\n-   |         ^^^^^^^\n-note: the lint level is defined here\n-  --> $DIR/trait.rs:6:9\n-   |\n-LL | #![deny(must_not_suspend)]\n-   |         ^^^^^^^^^^^^^^^^\n-\n-error: boxed `Wow` trait object held across a suspend point, but should not be\n-  --> $DIR/trait.rs:25:9\n-   |\n-LL |     let _guard2 = r#dyn();\n-   |         ^^^^^^^\n-LL |\n-LL |     other().await;\n-   |            ------ the value is held across this suspend point\n-   |\n-help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/trait.rs:25:9\n-   |\n-LL |     let _guard2 = r#dyn();\n-   |         ^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "50ca292c2f6fd625d95880494b4eda552cea0c52", "filename": "tests/ui/lint/must_not_suspend/unit.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr?ref=901fdb3b04375e3456b5cf771f86ecca8d6c1917", "patch": "@@ -1,26 +0,0 @@\n-error: `Umm` held across a suspend point, but should not be\n-  --> $DIR/unit.rs:23:9\n-   |\n-LL |     let _guard = bar();\n-   |         ^^^^^^\n-LL |     other().await;\n-   |            ------ the value is held across this suspend point\n-   |\n-note: You gotta use Umm's, ya know?\n-  --> $DIR/unit.rs:23:9\n-   |\n-LL |     let _guard = bar();\n-   |         ^^^^^^\n-help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/unit.rs:23:9\n-   |\n-LL |     let _guard = bar();\n-   |         ^^^^^^\n-note: the lint level is defined here\n-  --> $DIR/unit.rs:6:9\n-   |\n-LL | #![deny(must_not_suspend)]\n-   |         ^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "7a422891ab1026ce9cc3a2cb4f2944bcae16854c", "filename": "tests/ui/lint/must_not_suspend/warn.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/901fdb3b04375e3456b5cf771f86ecca8d6c1917/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr?ref=901fdb3b04375e3456b5cf771f86ecca8d6c1917", "patch": "@@ -1,26 +0,0 @@\n-warning: `Umm` held across a suspend point, but should not be\n-  --> $DIR/warn.rs:24:9\n-   |\n-LL |     let _guard = bar();\n-   |         ^^^^^^\n-LL |     other().await;\n-   |            ------ the value is held across this suspend point\n-   |\n-note: You gotta use Umm's, ya know?\n-  --> $DIR/warn.rs:24:9\n-   |\n-LL |     let _guard = bar();\n-   |         ^^^^^^\n-help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n-  --> $DIR/warn.rs:24:9\n-   |\n-LL |     let _guard = bar();\n-   |         ^^^^^^\n-note: the lint level is defined here\n-  --> $DIR/warn.rs:7:9\n-   |\n-LL | #![warn(must_not_suspend)]\n-   |         ^^^^^^^^^^^^^^^^\n-\n-warning: 1 warning emitted\n-"}]}