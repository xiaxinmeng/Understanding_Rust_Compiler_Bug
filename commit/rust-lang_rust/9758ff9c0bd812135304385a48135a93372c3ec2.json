{"sha": "9758ff9c0bd812135304385a48135a93372c3ec2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NThmZjljMGJkODEyMTM1MzA0Mzg1YTQ4MTM1YTkzMzcyYzNlYzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-24T07:22:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-24T07:22:22Z"}, "message": "Auto merge of #47299 - cramertj:unsafe-placer, r=alexcrichton\n\nMake core::ops::Place an unsafe trait\n\nConsumers of `Place` would reasonably expect that the `pointer` function returns a valid pointer to memory that can actually be written to.", "tree": {"sha": "b1c5abd61ff8946814219e643a8d98859eee5b25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1c5abd61ff8946814219e643a8d98859eee5b25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9758ff9c0bd812135304385a48135a93372c3ec2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9758ff9c0bd812135304385a48135a93372c3ec2", "html_url": "https://github.com/rust-lang/rust/commit/9758ff9c0bd812135304385a48135a93372c3ec2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9758ff9c0bd812135304385a48135a93372c3ec2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a538fe7ce715c7bd27e2e05329c3d857b9ad92af", "url": "https://api.github.com/repos/rust-lang/rust/commits/a538fe7ce715c7bd27e2e05329c3d857b9ad92af", "html_url": "https://github.com/rust-lang/rust/commit/a538fe7ce715c7bd27e2e05329c3d857b9ad92af"}, {"sha": "f25f4687093c1c7e69a06fa7fa6cc3cc6f9aa9d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f25f4687093c1c7e69a06fa7fa6cc3cc6f9aa9d1", "html_url": "https://github.com/rust-lang/rust/commit/f25f4687093c1c7e69a06fa7fa6cc3cc6f9aa9d1"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "3041f85cd4c3a9b4997220940d46de69a6598136", "filename": "src/liballoc/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9758ff9c0bd812135304385a48135a93372c3ec2/src%2Fliballoc%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758ff9c0bd812135304385a48135a93372c3ec2/src%2Fliballoc%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbinary_heap.rs?ref=9758ff9c0bd812135304385a48135a93372c3ec2", "patch": "@@ -1211,7 +1211,7 @@ where T: Clone + Ord {\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]\n-impl<'a, T> Place<T> for BinaryHeapPlace<'a, T>\n+unsafe impl<'a, T> Place<T> for BinaryHeapPlace<'a, T>\n where T: Clone + Ord {\n     fn pointer(&mut self) -> *mut T {\n         self.place.pointer()"}, {"sha": "cdaad973a7123a1aa4830bb896397af5629d3572", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9758ff9c0bd812135304385a48135a93372c3ec2/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758ff9c0bd812135304385a48135a93372c3ec2/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=9758ff9c0bd812135304385a48135a93372c3ec2", "patch": "@@ -142,7 +142,7 @@ pub struct IntermediateBox<T: ?Sized> {\n #[unstable(feature = \"placement_in\",\n            reason = \"placement box design is still being worked out.\",\n            issue = \"27779\")]\n-impl<T> Place<T> for IntermediateBox<T> {\n+unsafe impl<T> Place<T> for IntermediateBox<T> {\n     fn pointer(&mut self) -> *mut T {\n         self.ptr as *mut T\n     }"}, {"sha": "65be087b35e5edcbbe909dd503262bffa038e282", "filename": "src/liballoc/linked_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9758ff9c0bd812135304385a48135a93372c3ec2/src%2Fliballoc%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758ff9c0bd812135304385a48135a93372c3ec2/src%2Fliballoc%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flinked_list.rs?ref=9758ff9c0bd812135304385a48135a93372c3ec2", "patch": "@@ -1286,7 +1286,7 @@ impl<'a, T> Placer<T> for FrontPlace<'a, T> {\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]\n-impl<'a, T> Place<T> for FrontPlace<'a, T> {\n+unsafe impl<'a, T> Place<T> for FrontPlace<'a, T> {\n     fn pointer(&mut self) -> *mut T {\n         unsafe { &mut (*self.node.pointer()).element }\n     }\n@@ -1341,7 +1341,7 @@ impl<'a, T> Placer<T> for BackPlace<'a, T> {\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]\n-impl<'a, T> Place<T> for BackPlace<'a, T> {\n+unsafe impl<'a, T> Place<T> for BackPlace<'a, T> {\n     fn pointer(&mut self) -> *mut T {\n         unsafe { &mut (*self.node.pointer()).element }\n     }"}, {"sha": "b26979c7f6d8c75863e8386f1d77447fb42b42c6", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9758ff9c0bd812135304385a48135a93372c3ec2/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758ff9c0bd812135304385a48135a93372c3ec2/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=9758ff9c0bd812135304385a48135a93372c3ec2", "patch": "@@ -2544,7 +2544,7 @@ impl<'a, T> Placer<T> for PlaceBack<'a, T> {\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]\n-impl<'a, T> Place<T> for PlaceBack<'a, T> {\n+unsafe impl<'a, T> Place<T> for PlaceBack<'a, T> {\n     fn pointer(&mut self) -> *mut T {\n         unsafe { self.vec.as_mut_ptr().offset(self.vec.len as isize) }\n     }"}, {"sha": "8b686365e69297f031408658bede7a5f5b5da0f6", "filename": "src/liballoc/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9758ff9c0bd812135304385a48135a93372c3ec2/src%2Fliballoc%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758ff9c0bd812135304385a48135a93372c3ec2/src%2Fliballoc%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec_deque.rs?ref=9758ff9c0bd812135304385a48135a93372c3ec2", "patch": "@@ -2565,7 +2565,7 @@ impl<'a, T> Placer<T> for PlaceBack<'a, T> {\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]\n-impl<'a, T> Place<T> for PlaceBack<'a, T> {\n+unsafe impl<'a, T> Place<T> for PlaceBack<'a, T> {\n     fn pointer(&mut self) -> *mut T {\n         unsafe { self.vec_deque.ptr().offset(self.vec_deque.head as isize) }\n     }\n@@ -2611,7 +2611,7 @@ impl<'a, T> Placer<T> for PlaceFront<'a, T> {\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]\n-impl<'a, T> Place<T> for PlaceFront<'a, T> {\n+unsafe impl<'a, T> Place<T> for PlaceFront<'a, T> {\n     fn pointer(&mut self) -> *mut T {\n         let tail = self.vec_deque.wrap_sub(self.vec_deque.tail, 1);\n         unsafe { self.vec_deque.ptr().offset(tail as isize) }"}, {"sha": "b3dcf4e7ee9578c9e5155d563d332d10fe19e9ff", "filename": "src/libcore/ops/place.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9758ff9c0bd812135304385a48135a93372c3ec2/src%2Flibcore%2Fops%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758ff9c0bd812135304385a48135a93372c3ec2/src%2Flibcore%2Fops%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fplace.rs?ref=9758ff9c0bd812135304385a48135a93372c3ec2", "patch": "@@ -27,10 +27,13 @@\n /// implementation of Place to clean up any intermediate state\n /// (e.g. deallocate box storage, pop a stack, etc).\n #[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n-pub trait Place<Data: ?Sized> {\n+pub unsafe trait Place<Data: ?Sized> {\n     /// Returns the address where the input value will be written.\n     /// Note that the data at this address is generally uninitialized,\n     /// and thus one should use `ptr::write` for initializing it.\n+    ///\n+    /// This function must return a pointer through which a value\n+    /// of type `Data` can be written.\n     fn pointer(&mut self) -> *mut Data;\n }\n "}, {"sha": "b01420f36a0c38da6a8a0a63a6d5c8ae55f9edb8", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9758ff9c0bd812135304385a48135a93372c3ec2/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9758ff9c0bd812135304385a48135a93372c3ec2/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=9758ff9c0bd812135304385a48135a93372c3ec2", "patch": "@@ -1972,7 +1972,7 @@ impl<'a, K, V> Placer<V> for Entry<'a, K, V> {\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]\n-impl<'a, K, V> Place<V> for EntryPlace<'a, K, V> {\n+unsafe impl<'a, K, V> Place<V> for EntryPlace<'a, K, V> {\n     fn pointer(&mut self) -> *mut V {\n         self.bucket.read_mut().1\n     }"}]}