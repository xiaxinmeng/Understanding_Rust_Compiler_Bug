{"sha": "7d3e03666a93bd2b0f78b3933f9305832af771a5", "node_id": "C_kwDOAAsO6NoAKDdkM2UwMzY2NmE5M2JkMmIwZjc4YjM5MzNmOTMwNTgzMmFmNzcxYTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-05T02:49:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-05T02:49:16Z"}, "message": "Auto merge of #96720 - JohnTitor:rollup-9jaaekr, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #96603 (Enable full revision in const generics ui tests)\n - #96616 (Relax memory ordering used in `min_stack`)\n - #96619 (Relax memory ordering used in SameMutexCheck)\n - #96628 (Stabilize `bool::then_some`)\n - #96658 (Move callback to the () => {} syntax.)\n - #96677 (Add more tests for label-break-value)\n - #96697 (Enable tracing for all queries)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "94da1941a3795bd5faf7ed469b1d2edc9bf9c1d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94da1941a3795bd5faf7ed469b1d2edc9bf9c1d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d3e03666a93bd2b0f78b3933f9305832af771a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d3e03666a93bd2b0f78b3933f9305832af771a5", "html_url": "https://github.com/rust-lang/rust/commit/7d3e03666a93bd2b0f78b3933f9305832af771a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d3e03666a93bd2b0f78b3933f9305832af771a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdcb6a99e853732f8ec050ae4986aa3af51d44c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdcb6a99e853732f8ec050ae4986aa3af51d44c5", "html_url": "https://github.com/rust-lang/rust/commit/bdcb6a99e853732f8ec050ae4986aa3af51d44c5"}, {"sha": "ade123275db92898b13faffea08893f0a6737ff4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ade123275db92898b13faffea08893f0a6737ff4", "html_url": "https://github.com/rust-lang/rust/commit/ade123275db92898b13faffea08893f0a6737ff4"}], "stats": {"total": 839, "additions": 625, "deletions": 214}, "files": [{"sha": "417f3300f0b21c405e3d9cc375ce7ec65d9ef4ba", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -4245,6 +4245,7 @@ dependencies = [\n  \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\",\n+ \"tracing\",\n ]\n \n [[package]]"}, {"sha": "517ab30b2a4adfb3c14f10a38bbfa95b313446cb", "filename": "compiler/rustc_ast_pretty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_ast_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_ast_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -1,4 +1,3 @@\n-#![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]"}, {"sha": "533439a24aa4f8720dac45ac6b8e88fa331e1187", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -1,7 +1,6 @@\n //! This query borrow-checks the MIR to (further) ensure it is not broken.\n \n #![allow(rustc::potential_query_instability)]\n-#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n #![feature(let_chains)]"}, {"sha": "468ca7d7aa932ecab8f0b27612d016b336c1b0ce", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -4,7 +4,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(array_windows)]\n #![feature(box_patterns)]\n-#![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(is_sorted)]"}, {"sha": "0bead4629a67079c2f38abc813badee68a2ac841", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -5,7 +5,6 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(let_chains)]\n #![feature(let_else)]"}, {"sha": "b7bee9ab805a422d8b9657edfce8971012f35475", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -1,5 +1,4 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(try_blocks)]\n #![feature(let_else)]"}, {"sha": "1ab461a9421291ed788c7d36f37d728f5459b722", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -5,7 +5,6 @@ Rust MIR: a lowered representation of Rust.\n */\n \n #![feature(assert_matches)]\n-#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "5d42f8c9306d9782e5564096c195c0c77fa82ea9", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -10,7 +10,6 @@\n #![feature(array_windows)]\n #![feature(associated_type_bounds)]\n #![feature(auto_traits)]\n-#![feature(bool_to_option)]\n #![feature(control_flow_enum)]\n #![feature(core_intrinsics)]\n #![feature(extend_one)]"}, {"sha": "4c691c25189d9f3cf0d0d945ec0b93897c1559e8", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -14,7 +14,6 @@\n \n #![allow(rustc::potential_query_instability)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![cfg_attr(bootstrap, feature(derive_default_enum))]"}, {"sha": "40e02f47bd1c150b697914c2c3167671795eca2a", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -1,4 +1,3 @@\n-#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(let_else)]\n #![feature(internal_output_capture)]"}, {"sha": "54b08dfe840bf4584882ad9e2392849243d79162", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -28,7 +28,6 @@\n #![allow(rustc::potential_query_instability)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(array_windows)]\n-#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "04529ed1161587f5208080291b298c03284c30dd", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -27,7 +27,6 @@\n #![feature(array_windows)]\n #![feature(assert_matches)]\n #![feature(backtrace)]\n-#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(core_intrinsics)]\n #![cfg_attr(bootstrap, feature(derive_default_enum))]"}, {"sha": "4ffee59a962749db407cac266a8ec0a098f2b1f4", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -2,7 +2,6 @@\n //!\n //! This crate also contains the match exhaustiveness and usefulness checking.\n #![allow(rustc::potential_query_instability)]\n-#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "d0837bcf754e4acef09baf674fe2bb882257fe85", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -1,5 +1,4 @@\n #![feature(associated_type_defaults)]\n-#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(exact_size_is_empty)]"}, {"sha": "f0333d6c6daceaf35f2f18aef2310bc6460bdbf3", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -1,5 +1,4 @@\n #![feature(array_windows)]\n-#![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(control_flow_enum)]\n #![feature(let_else)]"}, {"sha": "fa05434e48b1b7eb021e1296c3de7c9f80db9e36", "filename": "compiler/rustc_query_impl/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_query_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_query_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2FCargo.toml?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -20,6 +20,7 @@ rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n+tracing = \"0.1\"\n \n [features]\n rustc_use_parallel_compiler = [\"rustc-rayon-core\", \"rustc_query_system/rustc_use_parallel_compiler\"]"}, {"sha": "ae4ad42815966476f05c10e6687ce637fe571ad5", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -435,6 +435,8 @@ macro_rules! define_queries {\n \n                 fn force_from_dep_node(tcx: TyCtxt<'_>, dep_node: DepNode) -> bool {\n                     if let Some(key) = recover(tcx, dep_node) {\n+                        #[cfg(debug_assertions)]\n+                        let _guard = tracing::span!(tracing::Level::TRACE, stringify!($name), ?key).entered();\n                         let tcx = QueryCtxt::from_tcx(tcx);\n                         force_query::<queries::$name<'_>, _>(tcx, key, dep_node);\n                         true\n@@ -532,6 +534,7 @@ macro_rules! define_queries_struct {\n \n             $($(#[$attr])*\n             #[inline(always)]\n+            #[tracing::instrument(level = \"trace\", skip(self, tcx))]\n             fn $name(\n                 &'tcx self,\n                 tcx: TyCtxt<$tcx>,"}, {"sha": "68284dcaa0be8213ef2f9add4b1b416a98e2297e", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -1,5 +1,4 @@\n #![feature(assert_matches)]\n-#![feature(bool_to_option)]\n #![feature(core_intrinsics)]\n #![feature(hash_raw_entry)]\n #![feature(let_else)]"}, {"sha": "3498df95196e55b14c0e12ea7d94eae48bfa3f7e", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -675,6 +675,7 @@ where\n     }\n }\n \n+#[derive(Debug)]\n pub enum QueryMode {\n     Get,\n     Ensure,\n@@ -697,7 +698,6 @@ where\n         None\n     };\n \n-    debug!(\"ty::query::get_query<{}>(key={:?}, span={:?})\", Q::NAME, key, span);\n     let (result, dep_node_index) = try_execute_query(\n         tcx,\n         Q::query_state(tcx),"}, {"sha": "62485beac476e732b87dcc4300956a1ce933987a", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -9,7 +9,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(box_patterns)]\n #![feature(drain_filter)]\n-#![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(if_let_guard)]\n #![feature(let_chains)]"}, {"sha": "8bde53b5fd381fc96ff9431aa3eab9772d4b57f0", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -15,7 +15,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(array_windows)]\n-#![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(let_else)]\n #![feature(if_let_guard)]"}, {"sha": "4dc6af15001ecf5279d5f0b31903d2b5c4316309", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -9,7 +9,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(associated_type_bounds)]\n-#![feature(bool_to_option)]\n #![feature(exhaustive_patterns)]\n #![feature(let_else)]\n #![feature(min_specialization)]"}, {"sha": "0dd497448ca4704d4d5a79b6eb402777e1bf3a2b", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -12,7 +12,6 @@\n \n #![allow(rustc::potential_query_instability)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "fe285820ba6df50ad091b32c1f5d7b8106b2929f", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -57,7 +57,6 @@ This API is completely unstable and subject to change.\n \n #![allow(rustc::potential_query_instability)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "f7a8aa0d92156afade26be57045f33608801442e", "filename": "library/core/src/bool.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/library%2Fcore%2Fsrc%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/library%2Fcore%2Fsrc%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fbool.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -9,12 +9,10 @@ impl bool {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(bool_to_option)]\n-    ///\n     /// assert_eq!(false.then_some(0), None);\n     /// assert_eq!(true.then_some(0), Some(0));\n     /// ```\n-    #[unstable(feature = \"bool_to_option\", issue = \"80967\")]\n+    #[stable(feature = \"bool_to_option\", since = \"1.62.0\")]\n     #[rustc_const_unstable(feature = \"const_bool_to_option\", issue = \"91917\")]\n     #[inline]\n     pub const fn then_some<T>(self, t: T) -> Option<T>"}, {"sha": "21d600ac557b876d1a89b55c8a5b02920714a2e4", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -3,7 +3,6 @@\n #![feature(array_methods)]\n #![feature(array_windows)]\n #![feature(bench_black_box)]\n-#![feature(bool_to_option)]\n #![feature(box_syntax)]\n #![feature(cell_update)]\n #![feature(const_assume)]"}, {"sha": "d0d0d59651895c9fa1af49daffc646790da7f057", "filename": "library/std/src/sys_common/condvar/check.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -24,8 +24,14 @@ impl SameMutexCheck {\n     }\n     pub fn verify(&self, mutex: &MovableMutex) {\n         let addr = mutex.raw() as *const imp::Mutex as *const () as *mut _;\n-        match self.addr.compare_exchange(ptr::null_mut(), addr, Ordering::SeqCst, Ordering::SeqCst)\n-        {\n+        // Relaxed is okay here because we never read through `self.addr`, and only use it to\n+        // compare addresses.\n+        match self.addr.compare_exchange(\n+            ptr::null_mut(),\n+            addr,\n+            Ordering::Relaxed,\n+            Ordering::Relaxed,\n+        ) {\n             Ok(_) => {}               // Stored the address\n             Err(n) if n == addr => {} // Lost a race to store the same address\n             _ => panic!(\"attempted to use a condition variable with two mutexes\"),"}, {"sha": "76466b2b37beb4b9318e50e146284c75da9fa37a", "filename": "library/std/src/sys_common/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/library%2Fstd%2Fsrc%2Fsys_common%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/library%2Fstd%2Fsrc%2Fsys_common%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -4,7 +4,7 @@ use crate::sys::thread as imp;\n \n pub fn min_stack() -> usize {\n     static MIN: atomic::AtomicUsize = atomic::AtomicUsize::new(0);\n-    match MIN.load(Ordering::SeqCst) {\n+    match MIN.load(Ordering::Relaxed) {\n         0 => {}\n         n => return n - 1,\n     }\n@@ -13,6 +13,6 @@ pub fn min_stack() -> usize {\n \n     // 0 is our sentinel value, so ensure that we'll never see 0 after\n     // initialization has run\n-    MIN.store(amt + 1, Ordering::SeqCst);\n+    MIN.store(amt + 1, Ordering::Relaxed);\n     amt\n }"}, {"sha": "1dfd9c762c46ef0b8be771cf229c2520de1b10f9", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 49, "deletions": 56, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -1,6 +1,7 @@\n /* eslint-env es6 */\n /* eslint no-var: \"error\" */\n /* eslint prefer-const: \"error\" */\n+/* eslint prefer-arrow-callback: \"error\" */\n // Local js definitions:\n /* global addClass, getSettingValue, hasClass, searchState */\n /* global onEach, onEachLazy, removeClass */\n@@ -152,7 +153,7 @@ function hideThemeButtonState() {\n     themePicker.style.borderBottomLeftRadius = \"3px\";\n }\n \n-window.hideSettings = function() {\n+window.hideSettings = () => {\n     // Does nothing by default.\n };\n \n@@ -190,10 +191,10 @@ window.hideSettings = function() {\n \n     themePicker.onclick = switchThemeButtonState;\n     themePicker.onblur = handleThemeButtonsBlur;\n-    availableThemes.forEach(function(item) {\n+    availableThemes.forEach(item => {\n         const but = document.createElement(\"button\");\n         but.textContent = item;\n-        but.onclick = function() {\n+        but.onclick = () => {\n             switchTheme(window.currentTheme, window.mainTheme, item, true);\n             useSystemTheme(false);\n         };\n@@ -300,15 +301,15 @@ function loadCss(cssFileName) {\n     }\n \n \n-    getSettingsButton().onclick = function(event) {\n+    getSettingsButton().onclick = event => {\n         event.preventDefault();\n         loadScript(window.settingsJS);\n     };\n \n     window.searchState = {\n         loadingText: \"Loading search results...\",\n         input: document.getElementsByClassName(\"search-input\")[0],\n-        outputElement: function() {\n+        outputElement: () => {\n             let el = document.getElementById(\"search\");\n             if (!el) {\n                 el = document.createElement(\"section\");\n@@ -328,32 +329,30 @@ function loadCss(cssFileName) {\n         currentTab: 0,\n         // tab and back preserves the element that was focused.\n         focusedByTab: [null, null, null],\n-        clearInputTimeout: function() {\n+        clearInputTimeout: () => {\n             if (searchState.timeout !== null) {\n                 clearTimeout(searchState.timeout);\n                 searchState.timeout = null;\n             }\n         },\n-        isDisplayed: function() {\n-            return searchState.outputElement().parentElement.id === ALTERNATIVE_DISPLAY_ID;\n-        },\n+        isDisplayed: () => searchState.outputElement().parentElement.id === ALTERNATIVE_DISPLAY_ID,\n         // Sets the focus on the search bar at the top of the page\n-        focus: function() {\n+        focus: () => {\n             searchState.input.focus();\n         },\n         // Removes the focus from the search bar.\n-        defocus: function() {\n+        defocus: () => {\n             searchState.input.blur();\n         },\n-        showResults: function(search) {\n+        showResults: search => {\n             if (search === null || typeof search === 'undefined') {\n                 search = searchState.outputElement();\n             }\n             switchDisplayedElement(search);\n             searchState.mouseMovedAfterSearch = false;\n             document.title = searchState.title;\n         },\n-        hideResults: function() {\n+        hideResults: () => {\n             switchDisplayedElement(null);\n             document.title = searchState.titleBeforeSearch;\n             // We also remove the query parameter from the URL.\n@@ -362,17 +361,17 @@ function loadCss(cssFileName) {\n                     getNakedUrl() + window.location.hash);\n             }\n         },\n-        getQueryStringParams: function() {\n+        getQueryStringParams: () => {\n             const params = {};\n             window.location.search.substring(1).split(\"&\").\n-                map(function(s) {\n+                map(s => {\n                     const pair = s.split(\"=\");\n                     params[decodeURIComponent(pair[0])] =\n                         typeof pair[1] === \"undefined\" ? null : decodeURIComponent(pair[1]);\n                 });\n             return params;\n         },\n-        setup: function() {\n+        setup: () => {\n             const search_input = searchState.input;\n             if (!searchState.input) {\n                 return;\n@@ -386,13 +385,13 @@ function loadCss(cssFileName) {\n                 }\n             }\n \n-            search_input.addEventListener(\"focus\", function() {\n+            search_input.addEventListener(\"focus\", () => {\n                 search_input.origPlaceholder = search_input.placeholder;\n                 search_input.placeholder = \"Type your search here.\";\n                 loadSearch();\n             });\n \n-            if (search_input.value != '') {\n+            if (search_input.value !== '') {\n                 loadSearch();\n             }\n \n@@ -620,7 +619,7 @@ function loadCss(cssFileName) {\n     document.addEventListener(\"keydown\", handleShortcut);\n \n     // delayed sidebar rendering.\n-    window.initSidebarItems = function(items) {\n+    window.initSidebarItems = items => {\n         const sidebar = document.getElementsByClassName(\"sidebar-elems\")[0];\n         let others;\n         const current = window.sidebarCurrent;\n@@ -731,7 +730,7 @@ function loadCss(cssFileName) {\n         }\n     };\n \n-    window.register_implementors = function(imp) {\n+    window.register_implementors = imp => {\n         const implementors = document.getElementById(\"implementors-list\");\n         const synthetic_implementors = document.getElementById(\"synthetic-implementors-list\");\n         const inlined_types = new Set();\n@@ -742,12 +741,12 @@ function loadCss(cssFileName) {\n             //\n             // By the way, this is only used by and useful for traits implemented automatically\n             // (like \"Send\" and \"Sync\").\n-            onEachLazy(synthetic_implementors.getElementsByClassName(\"impl\"), function(el) {\n+            onEachLazy(synthetic_implementors.getElementsByClassName(\"impl\"), el => {\n                 const aliases = el.getAttribute(\"data-aliases\");\n                 if (!aliases) {\n                     return;\n                 }\n-                aliases.split(\",\").forEach(function(alias) {\n+                aliases.split(\",\").forEach(alias => {\n                     inlined_types.add(alias);\n                 });\n             });\n@@ -781,7 +780,7 @@ function loadCss(cssFileName) {\n                 addClass(code, \"code-header\");\n                 addClass(code, \"in-band\");\n \n-                onEachLazy(code.getElementsByTagName(\"a\"), function(elem) {\n+                onEachLazy(code.getElementsByTagName(\"a\"), elem => {\n                     const href = elem.getAttribute(\"href\");\n \n                     if (href && href.indexOf(\"http\") !== 0) {\n@@ -826,15 +825,15 @@ function loadCss(cssFileName) {\n         let sectionIsCollapsed = false;\n         if (hasClass(innerToggle, \"will-expand\")) {\n             removeClass(innerToggle, \"will-expand\");\n-            onEachLazy(document.getElementsByClassName(\"rustdoc-toggle\"), function(e) {\n+            onEachLazy(document.getElementsByClassName(\"rustdoc-toggle\"), e => {\n                 if (!hasClass(e, \"type-contents-toggle\")) {\n                     e.open = true;\n                 }\n             });\n             innerToggle.title = \"collapse all docs\";\n         } else {\n             addClass(innerToggle, \"will-expand\");\n-            onEachLazy(document.getElementsByClassName(\"rustdoc-toggle\"), function(e) {\n+            onEachLazy(document.getElementsByClassName(\"rustdoc-toggle\"), e => {\n                 if (e.parentNode.id !== \"implementations-list\" ||\n                     (!hasClass(e, \"implementors-toggle\") &&\n                      !hasClass(e, \"type-contents-toggle\")))\n@@ -861,7 +860,7 @@ function loadCss(cssFileName) {\n         function setImplementorsTogglesOpen(id, open) {\n             const list = document.getElementById(id);\n             if (list !== null) {\n-                onEachLazy(list.getElementsByClassName(\"implementors-toggle\"), function(e) {\n+                onEachLazy(list.getElementsByClassName(\"implementors-toggle\"), e => {\n                     e.open = open;\n                 });\n             }\n@@ -872,7 +871,7 @@ function loadCss(cssFileName) {\n             setImplementorsTogglesOpen(\"blanket-implementations-list\", false);\n         }\n \n-        onEachLazy(document.getElementsByClassName(\"rustdoc-toggle\"), function (e) {\n+        onEachLazy(document.getElementsByClassName(\"rustdoc-toggle\"), e => {\n             if (!hideLargeItemContents && hasClass(e, \"type-contents-toggle\")) {\n                 e.open = true;\n             }\n@@ -890,9 +889,9 @@ function loadCss(cssFileName) {\n \n     (function() {\n         // To avoid checking on \"rustdoc-line-numbers\" value on every loop...\n-        let lineNumbersFunc = function() {};\n+        let lineNumbersFunc = () => {};\n         if (getSettingValue(\"line-numbers\") === \"true\") {\n-            lineNumbersFunc = function(x) {\n+            lineNumbersFunc = x => {\n                 const count = x.textContent.split(\"\\n\").length;\n                 const elems = [];\n                 for (let i = 0; i < count; ++i) {\n@@ -904,7 +903,7 @@ function loadCss(cssFileName) {\n                 x.parentNode.insertBefore(node, x);\n             };\n         }\n-        onEachLazy(document.getElementsByClassName(\"rust-example-rendered\"), function(e) {\n+        onEachLazy(document.getElementsByClassName(\"rust-example-rendered\"), e => {\n             if (hasClass(e, \"compile_fail\")) {\n                 e.addEventListener(\"mouseover\", function() {\n                     this.parentElement.previousElementSibling.childNodes[0].style.color = \"#f00\";\n@@ -935,34 +934,34 @@ function loadCss(cssFileName) {\n             elem.addEventListener(\"click\", f);\n         }\n     }\n-    handleClick(\"help-button\", function(ev) {\n+    handleClick(\"help-button\", ev => {\n         displayHelp(true, ev);\n     });\n-    handleClick(MAIN_ID, function() {\n+    handleClick(MAIN_ID, () => {\n         hideSidebar();\n     });\n \n-    onEachLazy(document.getElementsByTagName(\"a\"), function(el) {\n+    onEachLazy(document.getElementsByTagName(\"a\"), el => {\n         // For clicks on internal links (<A> tags with a hash property), we expand the section we're\n         // jumping to *before* jumping there. We can't do this in onHashChange, because it changes\n         // the height of the document so we wind up scrolled to the wrong place.\n         if (el.hash) {\n-            el.addEventListener(\"click\", function() {\n+            el.addEventListener(\"click\", () => {\n                 expandSection(el.hash.slice(1));\n                 hideSidebar();\n             });\n         }\n     });\n \n-    onEachLazy(document.querySelectorAll(\".rustdoc-toggle > summary:not(.hideme)\"), function(el) {\n-        el.addEventListener(\"click\", function(e) {\n-            if (e.target.tagName != \"SUMMARY\" && e.target.tagName != \"A\") {\n+    onEachLazy(document.querySelectorAll(\".rustdoc-toggle > summary:not(.hideme)\"), el => {\n+        el.addEventListener(\"click\", e => {\n+            if (e.target.tagName !== \"SUMMARY\" && e.target.tagName !== \"A\") {\n                 e.preventDefault();\n             }\n         });\n     });\n \n-    onEachLazy(document.getElementsByClassName(\"notable-traits\"), function(e) {\n+    onEachLazy(document.getElementsByClassName(\"notable-traits\"), e => {\n         e.onclick = function() {\n             this.getElementsByClassName('notable-traits-tooltiptext')[0]\n                 .classList.toggle(\"force-tooltip\");\n@@ -971,7 +970,7 @@ function loadCss(cssFileName) {\n \n     const sidebar_menu_toggle = document.getElementsByClassName(\"sidebar-menu-toggle\")[0];\n     if (sidebar_menu_toggle) {\n-        sidebar_menu_toggle.addEventListener(\"click\", function() {\n+        sidebar_menu_toggle.addEventListener(\"click\", () => {\n             const sidebar = document.getElementsByClassName(\"sidebar\")[0];\n             if (!hasClass(sidebar, \"shown\")) {\n                 addClass(sidebar, \"shown\");\n@@ -981,12 +980,12 @@ function loadCss(cssFileName) {\n         });\n     }\n \n-    let buildHelperPopup = function() {\n+    let buildHelperPopup = () => {\n         const popup = document.createElement(\"aside\");\n         addClass(popup, \"hidden\");\n         popup.id = \"help\";\n \n-        popup.addEventListener(\"click\", function(ev) {\n+        popup.addEventListener(\"click\", ev => {\n             if (ev.target === popup) {\n                 // Clicked the blurred zone outside the help popup; dismiss help.\n                 displayHelp(false, ev);\n@@ -1009,14 +1008,10 @@ function loadCss(cssFileName) {\n             [\"&#9166;\", \"Go to active search result\"],\n             [\"+\", \"Expand all sections\"],\n             [\"-\", \"Collapse all sections\"],\n-        ].map(function(x) {\n-            return \"<dt>\" +\n-                x[0].split(\" \")\n-                    .map(function(y, index) {\n-                        return (index & 1) === 0 ? \"<kbd>\" + y + \"</kbd>\" : \" \" + y + \" \";\n-                    })\n-                    .join(\"\") + \"</dt><dd>\" + x[1] + \"</dd>\";\n-        }).join(\"\");\n+        ].map(x => \"<dt>\" +\n+            x[0].split(\" \")\n+                .map((y, index) => (index & 1) === 0 ? \"<kbd>\" + y + \"</kbd>\" : \" \" + y + \" \")\n+                .join(\"\") + \"</dt><dd>\" + x[1] + \"</dd>\").join(\"\");\n         const div_shortcuts = document.createElement(\"div\");\n         addClass(div_shortcuts, \"shortcuts\");\n         div_shortcuts.innerHTML = \"<h2>Keyboard Shortcuts</h2><dl>\" + shortcuts + \"</dl></div>\";\n@@ -1034,9 +1029,7 @@ function loadCss(cssFileName) {\n             \"You can look for items with an exact name by putting double quotes around \\\n              your request: <code>\\\"string\\\"</code>\",\n             \"Look for items inside another one by searching for a path: <code>vec::Vec</code>\",\n-        ].map(function(x) {\n-            return \"<p>\" + x + \"</p>\";\n-        }).join(\"\");\n+        ].map(x => \"<p>\" + x + \"</p>\").join(\"\");\n         const div_infos = document.createElement(\"div\");\n         addClass(div_infos, \"infos\");\n         div_infos.innerHTML = \"<h2>Search Tricks</h2>\" + infos;\n@@ -1056,7 +1049,7 @@ function loadCss(cssFileName) {\n         popup.appendChild(container);\n         insertAfter(popup, document.querySelector(\"main\"));\n         // So that it's only built once and then it'll do nothing when called!\n-        buildHelperPopup = function() {};\n+        buildHelperPopup = () => {};\n     };\n \n     onHashChange(null);\n@@ -1067,11 +1060,11 @@ function loadCss(cssFileName) {\n (function () {\n     let reset_button_timeout = null;\n \n-    window.copy_path = function(but) {\n+    window.copy_path = but => {\n         const parent = but.parentElement;\n         const path = [];\n \n-        onEach(parent.childNodes, function(child) {\n+        onEach(parent.childNodes, child => {\n             if (child.tagName === 'A') {\n                 path.push(child.textContent);\n             }\n@@ -1097,7 +1090,7 @@ function loadCss(cssFileName) {\n             tmp = document.createTextNode('\u2713');\n             but.appendChild(tmp);\n         } else {\n-            onEachLazy(but.childNodes, function(e) {\n+            onEachLazy(but.childNodes, e => {\n                 if (e.nodeType === Node.TEXT_NODE) {\n                     tmp = e;\n                     return true;"}, {"sha": "491b3950ae6eb8fbccadeb142b0e6175492296f1", "filename": "src/librustdoc/html/static/js/scrape-examples.js", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fscrape-examples.js?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -1,6 +1,7 @@\n /* eslint-env es6 */\n /* eslint no-var: \"error\" */\n /* eslint prefer-const: \"error\" */\n+/* eslint prefer-arrow-callback: \"error\" */\n /* global addClass, hasClass, removeClass, onEachLazy */\n \n (function () {\n@@ -38,7 +39,7 @@\n \n         if (locs.length > 1) {\n             // Toggle through list of examples in a given file\n-            const onChangeLoc = function(changeIndex) {\n+            const onChangeLoc = changeIndex => {\n                 removeClass(highlights[locIndex], 'focus');\n                 changeIndex();\n                 scrollToLoc(example, locs[locIndex][0]);\n@@ -52,23 +53,23 @@\n             };\n \n             example.querySelector('.prev')\n-                .addEventListener('click', function() {\n-                    onChangeLoc(function() {\n+                .addEventListener('click', () => {\n+                    onChangeLoc(() => {\n                         locIndex = (locIndex - 1 + locs.length) % locs.length;\n                     });\n                 });\n \n             example.querySelector('.next')\n-                .addEventListener('click', function() {\n-                    onChangeLoc(function() {\n+                .addEventListener('click', () => {\n+                    onChangeLoc(() => {\n                         locIndex = (locIndex + 1) % locs.length;\n                     });\n                 });\n         }\n \n         const expandButton = example.querySelector('.expand');\n         if (expandButton) {\n-            expandButton.addEventListener('click', function () {\n+            expandButton.addEventListener('click', () => {\n                 if (hasClass(example, \"expanded\")) {\n                     removeClass(example, \"expanded\");\n                     scrollToLoc(example, locs[0][0]);\n@@ -84,22 +85,22 @@\n \n     const firstExamples = document.querySelectorAll('.scraped-example-list > .scraped-example');\n     onEachLazy(firstExamples, updateScrapedExample);\n-    onEachLazy(document.querySelectorAll('.more-examples-toggle'), function(toggle) {\n+    onEachLazy(document.querySelectorAll('.more-examples-toggle'), toggle => {\n         // Allow users to click the left border of the <details> section to close it,\n         // since the section can be large and finding the [+] button is annoying.\n         onEachLazy(toggle.querySelectorAll('.toggle-line, .hide-more'), button => {\n-            button.addEventListener('click', function() {\n+            button.addEventListener('click', () => {\n                 toggle.open = false;\n             });\n         });\n \n         const moreExamples = toggle.querySelectorAll('.scraped-example');\n-        toggle.querySelector('summary').addEventListener('click', function() {\n+        toggle.querySelector('summary').addEventListener('click', () => {\n             // Wrapping in setTimeout ensures the update happens after the elements are actually\n             // visible. This is necessary since updateScrapedExample calls scrollToLoc which\n             // depends on offsetHeight, a property that requires an element to be visible to\n             // compute correctly.\n-            setTimeout(function() { onEachLazy(moreExamples, updateScrapedExample); });\n+            setTimeout(() => { onEachLazy(moreExamples, updateScrapedExample); });\n         }, {once: true});\n     });\n })();"}, {"sha": "60ad431ba7a993b44107b5e7bf1c7388cbf43fb3", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -1,10 +1,11 @@\n /* eslint-env es6 */\n /* eslint no-var: \"error\" */\n /* eslint prefer-const: \"error\" */\n+/* eslint prefer-arrow-callback: \"error\" */\n /* global addClass, getNakedUrl, getSettingValue, hasOwnPropertyRustdoc, initSearch, onEach */\n /* global onEachLazy, removeClass, searchState, browserSupportsHistoryApi */\n \n-(function() {\n+(function () {\n // This mapping table should match the discriminants of\n // `rustdoc::formats::item_type::ItemType` type in Rust.\n const itemTypes = [\n@@ -46,15 +47,15 @@ function printTab(nb) {\n         searchState.currentTab = nb;\n     }\n     let nb_copy = nb;\n-    onEachLazy(document.getElementById(\"titles\").childNodes, function(elem) {\n+    onEachLazy(document.getElementById(\"titles\").childNodes, elem => {\n         if (nb_copy === 0) {\n             addClass(elem, \"selected\");\n         } else {\n             removeClass(elem, \"selected\");\n         }\n         nb_copy -= 1;\n     });\n-    onEachLazy(document.getElementById(\"results\").childNodes, function(elem) {\n+    onEachLazy(document.getElementById(\"results\").childNodes, elem => {\n         if (nb === 0) {\n             addClass(elem, \"active\");\n         } else {\n@@ -100,7 +101,7 @@ function levenshtein(s1, s2) {\n     return s1_len + s2_len;\n }\n \n-window.initSearch = function(rawSearchIndex) {\n+window.initSearch = rawSearchIndex => {\n     const MAX_LEV_DISTANCE = 3;\n     const MAX_RESULTS = 200;\n     const GENERICS_DATA = 2;\n@@ -774,7 +775,7 @@ window.initSearch = function(rawSearchIndex) {\n                 return [];\n             }\n \n-            results.sort(function(aaa, bbb) {\n+            results.sort((aaa, bbb) => {\n                 let a, b;\n \n                 // sort by exact match with regard to the last word (mismatch goes later)\n@@ -978,9 +979,8 @@ window.initSearch = function(rawSearchIndex) {\n                     if (elem.generics.length === 0) {\n                         const checkGeneric = (row.length > GENERICS_DATA &&\n                             row[GENERICS_DATA].length > 0);\n-                        if (checkGeneric && row[GENERICS_DATA].findIndex(function(tmp_elem) {\n-                            return tmp_elem[NAME] === elem.name;\n-                        }) !== -1) {\n+                        if (checkGeneric && row[GENERICS_DATA]\n+                            .findIndex(tmp_elem => tmp_elem[NAME] === elem.name) !== -1) {\n                             return 0;\n                         }\n                     }\n@@ -1169,7 +1169,7 @@ window.initSearch = function(rawSearchIndex) {\n                     }\n                 }\n             } else {\n-                Object.keys(ALIASES).forEach(function(crate) {\n+                Object.keys(ALIASES).forEach(crate => {\n                     if (ALIASES[crate][lowerQuery]) {\n                         const pushTo = crate === window.currentCrate ? crateAliases : aliases;\n                         const query_aliases = ALIASES[crate][lowerQuery];\n@@ -1180,7 +1180,7 @@ window.initSearch = function(rawSearchIndex) {\n                 });\n             }\n \n-            const sortFunc = function(aaa, bbb) {\n+            const sortFunc = (aaa, bbb) => {\n                 if (aaa.path < bbb.path) {\n                     return 1;\n                 } else if (aaa.path === bbb.path) {\n@@ -1191,7 +1191,7 @@ window.initSearch = function(rawSearchIndex) {\n             crateAliases.sort(sortFunc);\n             aliases.sort(sortFunc);\n \n-            const pushFunc = function(alias) {\n+            const pushFunc = alias => {\n                 alias.alias = query;\n                 const res = buildHrefAndPath(alias);\n                 alias.displayPath = pathSplitter(res[0]);\n@@ -1579,7 +1579,7 @@ window.initSearch = function(rawSearchIndex) {\n         if (array.length > 0) {\n             output.className = \"search-results \" + extraClass;\n \n-            array.forEach(function(item) {\n+            array.forEach(item => {\n                 const name = item.name;\n                 const type = itemTypes[item.ty];\n \n@@ -1746,9 +1746,9 @@ window.initSearch = function(rawSearchIndex) {\n         searchState.focusedByTab = [null, null, null];\n         searchState.showResults(search);\n         const elems = document.getElementById(\"titles\").childNodes;\n-        elems[0].onclick = function() { printTab(0); };\n-        elems[1].onclick = function() { printTab(1); };\n-        elems[2].onclick = function() { printTab(2); };\n+        elems[0].onclick = () => { printTab(0); };\n+        elems[1].onclick = () => { printTab(1); };\n+        elems[2].onclick = () => { printTab(2); };\n         printTab(currentTab);\n     }\n \n@@ -1977,7 +1977,7 @@ window.initSearch = function(rawSearchIndex) {\n     }\n \n     function registerSearchEvents() {\n-        const searchAfter500ms = function() {\n+        const searchAfter500ms = () => {\n             searchState.clearInputTimeout();\n             if (searchState.input.value.length === 0) {\n                 if (browserSupportsHistoryApi()) {\n@@ -1992,7 +1992,7 @@ window.initSearch = function(rawSearchIndex) {\n         searchState.input.onkeyup = searchAfter500ms;\n         searchState.input.oninput = searchAfter500ms;\n         document.getElementsByClassName(\"search-form\")[0].onsubmit = onSearchSubmit;\n-        searchState.input.onchange = function(e) {\n+        searchState.input.onchange = e => {\n             if (e.target !== document.activeElement) {\n                 // To prevent doing anything when it's from a blur event.\n                 return;\n@@ -2006,7 +2006,7 @@ window.initSearch = function(rawSearchIndex) {\n         };\n         searchState.input.onpaste = searchState.input.onchange;\n \n-        searchState.outputElement().addEventListener(\"keydown\", function(e) {\n+        searchState.outputElement().addEventListener(\"keydown\", e => {\n             // We only handle unmodified keystrokes here. We don't want to interfere with,\n             // for instance, alt-left and alt-right for history navigation.\n             if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) {\n@@ -2041,18 +2041,18 @@ window.initSearch = function(rawSearchIndex) {\n             }\n         });\n \n-        searchState.input.addEventListener(\"keydown\", function(e) {\n+        searchState.input.addEventListener(\"keydown\", e => {\n             if (e.which === 40) { // down\n                 focusSearchResult();\n                 e.preventDefault();\n             }\n         });\n \n-        searchState.input.addEventListener(\"focus\", function() {\n+        searchState.input.addEventListener(\"focus\", () => {\n             putBackSearch();\n         });\n \n-        searchState.input.addEventListener(\"blur\", function() {\n+        searchState.input.addEventListener(\"blur\", () => {\n             searchState.input.placeholder = searchState.input.origPlaceholder;\n         });\n \n@@ -2062,7 +2062,7 @@ window.initSearch = function(rawSearchIndex) {\n             // Store the previous <title> so we can revert back to it later.\n             const previousTitle = document.title;\n \n-            window.addEventListener(\"popstate\", function(e) {\n+            window.addEventListener(\"popstate\", e => {\n                 const params = searchState.getQueryStringParams();\n                 // Revert to the previous title manually since the History\n                 // API ignores the title parameter.\n@@ -2098,7 +2098,7 @@ window.initSearch = function(rawSearchIndex) {\n         // This was an interaction between the back-forward cache and our handlers\n         // that try to sync state between the URL and the search input. To work around it,\n         // do a small amount of re-init on page show.\n-        window.onpageshow = function(){\n+        window.onpageshow = () => {\n             const qSearch = searchState.getQueryStringParams().search;\n             if (searchState.input.value === \"\" && qSearch) {\n                 searchState.input.value = qSearch;"}, {"sha": "43b24245ab2e8b362b257a8af67d70633c758fa9", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -1,6 +1,7 @@\n /* eslint-env es6 */\n /* eslint no-var: \"error\" */\n /* eslint prefer-const: \"error\" */\n+/* eslint prefer-arrow-callback: \"error\" */\n // Local js definitions:\n /* global getSettingValue, getVirtualKey, updateLocalStorage, updateSystemTheme, loadCss */\n /* global addClass, removeClass, onEach, onEachLazy, NOT_DISPLAYED_ID */\n@@ -60,7 +61,7 @@\n \n     function setEvents(settingsElement) {\n         updateLightAndDark();\n-        onEachLazy(settingsElement.getElementsByClassName(\"slider\"), function(elem) {\n+        onEachLazy(settingsElement.getElementsByClassName(\"slider\"), elem => {\n             const toggle = elem.previousElementSibling;\n             const settingId = toggle.id;\n             const settingValue = getSettingValue(settingId);\n@@ -73,7 +74,7 @@\n             toggle.onkeyup = handleKey;\n             toggle.onkeyrelease = handleKey;\n         });\n-        onEachLazy(settingsElement.getElementsByClassName(\"select-wrapper\"), function(elem) {\n+        onEachLazy(settingsElement.getElementsByClassName(\"select-wrapper\"), elem => {\n             const select = elem.getElementsByTagName(\"select\")[0];\n             const settingId = select.id;\n             const settingValue = getSettingValue(settingId);\n@@ -84,13 +85,13 @@\n                 changeSetting(this.id, this.value);\n             };\n         });\n-        onEachLazy(settingsElement.querySelectorAll(\"input[type=\\\"radio\\\"]\"), function(elem) {\n+        onEachLazy(settingsElement.querySelectorAll(\"input[type=\\\"radio\\\"]\"), elem => {\n             const settingId = elem.name;\n             const settingValue = getSettingValue(settingId);\n             if (settingValue !== null && settingValue !== \"null\") {\n                 elem.checked = settingValue === elem.value;\n             }\n-            elem.addEventListener(\"change\", function(ev) {\n+            elem.addEventListener(\"change\", ev => {\n                 changeSetting(ev.target.name, ev.target.value);\n             });\n         });\n@@ -118,7 +119,7 @@\n                 output += `<div class=\"radio-line\" id=\"${js_data_name}\">\\\n                         <span class=\"setting-name\">${setting_name}</span>\\\n                         <div class=\"choices\">`;\n-                onEach(setting[\"options\"], function(option) {\n+                onEach(setting[\"options\"], option => {\n                     const checked = option === setting[\"default\"] ? \" checked\" : \"\";\n \n                     output += `<label for=\"${js_data_name}-${option}\" class=\"choice\">\\\n@@ -265,7 +266,7 @@\n     }\n \n     // We now wait a bit for the web browser to end re-computing the DOM...\n-    setTimeout(function() {\n+    setTimeout(() => {\n         setEvents(settingsMenu);\n         // The setting menu is already displayed if we're on the settings page.\n         if (!isSettingsPage) {"}, {"sha": "290bf40a8f5775eba89dff2fe0089f9915e6593c", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -1,14 +1,15 @@\n /* eslint-env es6 */\n /* eslint no-var: \"error\" */\n /* eslint prefer-const: \"error\" */\n+/* eslint prefer-arrow-callback: \"error\" */\n \n // From rust:\n /* global search, sourcesIndex */\n \n // Local js definitions:\n /* global addClass, getCurrentValue, hasClass, onEachLazy, removeClass, browserSupportsHistoryApi */\n /* global updateLocalStorage */\n-(function() {\n+(function () {\n \n function getCurrentFilePath() {\n     const parts = window.location.pathname.split(\"/\");\n@@ -32,7 +33,7 @@ function createDirEntry(elem, parent, fullPath, currentFile, hasFoundFile) {\n \n     fullPath += elem[\"name\"] + \"/\";\n \n-    name.onclick = function() {\n+    name.onclick = () => {\n         if (hasClass(this, \"expand\")) {\n             removeClass(this, \"expand\");\n         } else {\n@@ -134,7 +135,7 @@ function createSourceSidebar() {\n     title.className = \"title\";\n     title.innerText = \"Files\";\n     sidebar.appendChild(title);\n-    Object.keys(sourcesIndex).forEach(function(key) {\n+    Object.keys(sourcesIndex).forEach(key => {\n         sourcesIndex[key].name = key;\n         hasFoundFile = createDirEntry(sourcesIndex[key], sidebar, \"\",\n                                       currentFile, hasFoundFile);\n@@ -175,8 +176,8 @@ function highlightSourceLines(match) {\n     if (x) {\n         x.scrollIntoView();\n     }\n-    onEachLazy(document.getElementsByClassName(\"line-numbers\"), function(e) {\n-        onEachLazy(e.getElementsByTagName(\"span\"), function(i_e) {\n+    onEachLazy(document.getElementsByClassName(\"line-numbers\"), e => {\n+        onEachLazy(e.getElementsByTagName(\"span\"), i_e => {\n             removeClass(i_e, \"line-highlighted\");\n         });\n     });\n@@ -189,10 +190,10 @@ function highlightSourceLines(match) {\n     }\n }\n \n-const handleSourceHighlight = (function() {\n+const handleSourceHighlight = (function () {\n     let prev_line_id = 0;\n \n-    const set_fragment = function(name) {\n+    const set_fragment = name => {\n         const x = window.scrollX,\n             y = window.scrollY;\n         if (browserSupportsHistoryApi()) {\n@@ -205,7 +206,7 @@ const handleSourceHighlight = (function() {\n         window.scrollTo(x, y);\n     };\n \n-    return function(ev) {\n+    return ev => {\n         let cur_line_id = parseInt(ev.target.id, 10);\n         ev.preventDefault();\n \n@@ -226,14 +227,14 @@ const handleSourceHighlight = (function() {\n     };\n }());\n \n-window.addEventListener(\"hashchange\", function() {\n+window.addEventListener(\"hashchange\", () => {\n     const match = window.location.hash.match(lineNumbersRegex);\n     if (match) {\n         return highlightSourceLines(match);\n     }\n });\n \n-onEachLazy(document.getElementsByClassName(\"line-numbers\"), function(el) {\n+onEachLazy(document.getElementsByClassName(\"line-numbers\"), el => {\n     el.addEventListener(\"click\", handleSourceHighlight);\n });\n "}, {"sha": "913fc278eb38771215553708b0d471c84e314f80", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -1,6 +1,7 @@\n /* eslint-env es6 */\n /* eslint no-var: \"error\" */\n /* eslint prefer-const: \"error\" */\n+/* eslint prefer-arrow-callback: \"error\" */\n \n const darkThemes = [\"dark\", \"ayu\"];\n window.currentTheme = document.getElementById(\"themeStyle\");\n@@ -139,11 +140,11 @@ function switchTheme(styleElem, mainStyleElem, newTheme, saveTheme) {\n \n     let found = false;\n     if (savedHref.length === 0) {\n-        onEachLazy(document.getElementsByTagName(\"link\"), function(el) {\n+        onEachLazy(document.getElementsByTagName(\"link\"), el => {\n             savedHref.push(el.href);\n         });\n     }\n-    onEach(savedHref, function(el) {\n+    onEach(savedHref, el => {\n         if (el === newHref) {\n             found = true;\n             return true;\n@@ -170,10 +171,10 @@ function useSystemTheme(value) {\n     }\n }\n \n-const updateSystemTheme = (function() {\n+const updateSystemTheme = (function () {\n     if (!window.matchMedia) {\n         // fallback to the CSS computed value\n-        return function() {\n+        return () => {\n             const cssTheme = getComputedStyle(document.documentElement)\n                 .getPropertyValue('content');\n \n@@ -190,7 +191,7 @@ const updateSystemTheme = (function() {\n     const mql = window.matchMedia(\"(prefers-color-scheme: dark)\");\n \n     function handlePreferenceChange(mql) {\n-        const use = function(theme) {\n+        const use = theme => {\n             switchTheme(window.currentTheme, window.mainTheme, theme, true);\n         };\n         // maybe the user has disabled the setting in the meantime!\n@@ -214,7 +215,7 @@ const updateSystemTheme = (function() {\n \n     mql.addListener(handlePreferenceChange);\n \n-    return function() {\n+    return () => {\n         handlePreferenceChange(mql);\n     };\n })();\n@@ -252,7 +253,7 @@ if (getSettingValue(\"use-system-theme\") !== \"false\" && window.matchMedia) {\n // For some reason, if we try to change the theme while the `pageshow` event is\n // running, it sometimes fails to take effect. The problem manifests on Chrome,\n // specifically when talking to a remote website with no caching.\n-window.addEventListener(\"pageshow\", function(ev) {\n+window.addEventListener(\"pageshow\", ev => {\n     if (ev.persisted) {\n         setTimeout(switchToSavedTheme, 0);\n     }"}, {"sha": "641b0f1b3648fa6c8938d11ce52168ea352b9b58", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -5,7 +5,6 @@\n #![feature(rustc_private)]\n #![feature(array_methods)]\n #![feature(assert_matches)]\n-#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(box_syntax)]"}, {"sha": "dbbdb2a0ce3311fba5e7b5d0a3cd44d94705862a", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.full.stderr", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -0,0 +1,162 @@\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:18:23\n+   |\n+LL |     let _: [u8; faz::<'a>(&())];\n+   |                       ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:21:23\n+   |\n+LL |     let _: [u8; faz::<'b>(&())];\n+   |                       ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:30:23\n+   |\n+LL |     let _ = [0; faz::<'a>(&())];\n+   |                       ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:33:23\n+   |\n+LL |     let _ = [0; faz::<'b>(&())];\n+   |                       ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:41:24\n+   |\n+LL |     let _: Foo<{ faz::<'a>(&()) }>;\n+   |                        ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:44:24\n+   |\n+LL |     let _: Foo<{ faz::<'b>(&()) }>;\n+   |                        ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: unconstrained generic constant\n+  --> $DIR/const-arg-in-const-arg.rs:13:12\n+   |\n+LL |     let _: [u8; foo::<T>()];\n+   |            ^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); foo::<T>()]:`\n+\n+error: unconstrained generic constant\n+  --> $DIR/const-arg-in-const-arg.rs:15:12\n+   |\n+LL |     let _: [u8; bar::<N>()];\n+   |            ^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); bar::<N>()]:`\n+\n+error: unconstrained generic constant\n+  --> $DIR/const-arg-in-const-arg.rs:36:12\n+   |\n+LL |     let _: Foo<{ foo::<T>() }>;\n+   |            ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { foo::<T>() }]:`\n+\n+error: unconstrained generic constant\n+  --> $DIR/const-arg-in-const-arg.rs:38:12\n+   |\n+LL |     let _: Foo<{ bar::<N>() }>;\n+   |            ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { bar::<N>() }]:`\n+\n+error: unconstrained generic constant\n+  --> $DIR/const-arg-in-const-arg.rs:25:17\n+   |\n+LL |     let _ = [0; foo::<T>()];\n+   |                 ^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); foo::<T>()]:`\n+\n+error: unconstrained generic constant\n+  --> $DIR/const-arg-in-const-arg.rs:27:17\n+   |\n+LL |     let _ = [0; bar::<N>()];\n+   |                 ^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); bar::<N>()]:`\n+\n+error: unconstrained generic constant\n+  --> $DIR/const-arg-in-const-arg.rs:47:19\n+   |\n+LL |     let _ = Foo::<{ foo::<T>() }>;\n+   |                   ^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { foo::<T>() }]:`\n+\n+error: unconstrained generic constant\n+  --> $DIR/const-arg-in-const-arg.rs:49:19\n+   |\n+LL |     let _ = Foo::<{ bar::<N>() }>;\n+   |                   ^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { bar::<N>() }]:`\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:52:27\n+   |\n+LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n+   |                           ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:55:27\n+   |\n+LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n+   |                           ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: aborting due to 16 previous errors\n+"}, {"sha": "6ca9a2a48592ce85e75d364ff68d6f878e7040ae", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.min.stderr", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -8,7 +8,7 @@ LL |     let _: [u8; foo::<T>()];\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:14:23\n+  --> $DIR/const-arg-in-const-arg.rs:15:23\n    |\n LL |     let _: [u8; bar::<N>()];\n    |                       ^ cannot perform const operation using `N`\n@@ -17,7 +17,7 @@ LL |     let _: [u8; bar::<N>()];\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:16:23\n+  --> $DIR/const-arg-in-const-arg.rs:18:23\n    |\n LL |     let _: [u8; faz::<'a>(&())];\n    |                       ^^\n@@ -26,7 +26,7 @@ LL |     let _: [u8; faz::<'a>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:18:23\n+  --> $DIR/const-arg-in-const-arg.rs:20:23\n    |\n LL |     let _: [u8; baz::<'a>(&())];\n    |                       ^^\n@@ -35,7 +35,7 @@ LL |     let _: [u8; baz::<'a>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:19:23\n+  --> $DIR/const-arg-in-const-arg.rs:21:23\n    |\n LL |     let _: [u8; faz::<'b>(&())];\n    |                       ^^\n@@ -44,7 +44,7 @@ LL |     let _: [u8; faz::<'b>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:21:23\n+  --> $DIR/const-arg-in-const-arg.rs:23:23\n    |\n LL |     let _: [u8; baz::<'b>(&())];\n    |                       ^^\n@@ -53,7 +53,7 @@ LL |     let _: [u8; baz::<'b>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:24:23\n+  --> $DIR/const-arg-in-const-arg.rs:27:23\n    |\n LL |     let _ = [0; bar::<N>()];\n    |                       ^ cannot perform const operation using `N`\n@@ -62,7 +62,7 @@ LL |     let _ = [0; bar::<N>()];\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:26:23\n+  --> $DIR/const-arg-in-const-arg.rs:30:23\n    |\n LL |     let _ = [0; faz::<'a>(&())];\n    |                       ^^\n@@ -71,7 +71,7 @@ LL |     let _ = [0; faz::<'a>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:28:23\n+  --> $DIR/const-arg-in-const-arg.rs:32:23\n    |\n LL |     let _ = [0; baz::<'a>(&())];\n    |                       ^^\n@@ -80,7 +80,7 @@ LL |     let _ = [0; baz::<'a>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:29:23\n+  --> $DIR/const-arg-in-const-arg.rs:33:23\n    |\n LL |     let _ = [0; faz::<'b>(&())];\n    |                       ^^\n@@ -89,7 +89,7 @@ LL |     let _ = [0; faz::<'b>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:31:23\n+  --> $DIR/const-arg-in-const-arg.rs:35:23\n    |\n LL |     let _ = [0; baz::<'b>(&())];\n    |                       ^^\n@@ -98,7 +98,7 @@ LL |     let _ = [0; baz::<'b>(&())];\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:32:24\n+  --> $DIR/const-arg-in-const-arg.rs:36:24\n    |\n LL |     let _: Foo<{ foo::<T>() }>;\n    |                        ^ cannot perform const operation using `T`\n@@ -107,7 +107,7 @@ LL |     let _: Foo<{ foo::<T>() }>;\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:33:24\n+  --> $DIR/const-arg-in-const-arg.rs:38:24\n    |\n LL |     let _: Foo<{ bar::<N>() }>;\n    |                        ^ cannot perform const operation using `N`\n@@ -116,7 +116,7 @@ LL |     let _: Foo<{ bar::<N>() }>;\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:35:24\n+  --> $DIR/const-arg-in-const-arg.rs:41:24\n    |\n LL |     let _: Foo<{ faz::<'a>(&()) }>;\n    |                        ^^\n@@ -125,7 +125,7 @@ LL |     let _: Foo<{ faz::<'a>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:37:24\n+  --> $DIR/const-arg-in-const-arg.rs:43:24\n    |\n LL |     let _: Foo<{ baz::<'a>(&()) }>;\n    |                        ^^\n@@ -134,7 +134,7 @@ LL |     let _: Foo<{ baz::<'a>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:38:24\n+  --> $DIR/const-arg-in-const-arg.rs:44:24\n    |\n LL |     let _: Foo<{ faz::<'b>(&()) }>;\n    |                        ^^\n@@ -143,7 +143,7 @@ LL |     let _: Foo<{ faz::<'b>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:40:24\n+  --> $DIR/const-arg-in-const-arg.rs:46:24\n    |\n LL |     let _: Foo<{ baz::<'b>(&()) }>;\n    |                        ^^\n@@ -152,7 +152,7 @@ LL |     let _: Foo<{ baz::<'b>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:41:27\n+  --> $DIR/const-arg-in-const-arg.rs:47:27\n    |\n LL |     let _ = Foo::<{ foo::<T>() }>;\n    |                           ^ cannot perform const operation using `T`\n@@ -161,7 +161,7 @@ LL |     let _ = Foo::<{ foo::<T>() }>;\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/const-arg-in-const-arg.rs:42:27\n+  --> $DIR/const-arg-in-const-arg.rs:49:27\n    |\n LL |     let _ = Foo::<{ bar::<N>() }>;\n    |                           ^ cannot perform const operation using `N`\n@@ -170,7 +170,7 @@ LL |     let _ = Foo::<{ bar::<N>() }>;\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:44:27\n+  --> $DIR/const-arg-in-const-arg.rs:52:27\n    |\n LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n    |                           ^^\n@@ -179,7 +179,7 @@ LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:46:27\n+  --> $DIR/const-arg-in-const-arg.rs:54:27\n    |\n LL |     let _ = Foo::<{ baz::<'a>(&()) }>;\n    |                           ^^\n@@ -188,7 +188,7 @@ LL |     let _ = Foo::<{ baz::<'a>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:47:27\n+  --> $DIR/const-arg-in-const-arg.rs:55:27\n    |\n LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n    |                           ^^\n@@ -197,7 +197,7 @@ LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0658]: a non-static lifetime is not allowed in a `const`\n-  --> $DIR/const-arg-in-const-arg.rs:49:27\n+  --> $DIR/const-arg-in-const-arg.rs:57:27\n    |\n LL |     let _ = Foo::<{ baz::<'b>(&()) }>;\n    |                           ^^\n@@ -206,7 +206,7 @@ LL |     let _ = Foo::<{ baz::<'b>(&()) }>;\n    = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/const-arg-in-const-arg.rs:14:23\n+  --> $DIR/const-arg-in-const-arg.rs:15:23\n    |\n LL |     let _: [u8; bar::<N>()];\n    |                       ^\n@@ -217,7 +217,7 @@ LL |     let _: [u8; bar::<{ N }>()];\n    |                       +   +\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:16:23\n+  --> $DIR/const-arg-in-const-arg.rs:18:23\n    |\n LL |     let _: [u8; faz::<'a>(&())];\n    |                       ^^\n@@ -229,7 +229,7 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:19:23\n+  --> $DIR/const-arg-in-const-arg.rs:21:23\n    |\n LL |     let _: [u8; faz::<'b>(&())];\n    |                       ^^\n@@ -241,7 +241,7 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/const-arg-in-const-arg.rs:24:23\n+  --> $DIR/const-arg-in-const-arg.rs:27:23\n    |\n LL |     let _ = [0; bar::<N>()];\n    |                       ^\n@@ -252,7 +252,7 @@ LL |     let _ = [0; bar::<{ N }>()];\n    |                       +   +\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:26:23\n+  --> $DIR/const-arg-in-const-arg.rs:30:23\n    |\n LL |     let _ = [0; faz::<'a>(&())];\n    |                       ^^\n@@ -264,7 +264,7 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:29:23\n+  --> $DIR/const-arg-in-const-arg.rs:33:23\n    |\n LL |     let _ = [0; faz::<'b>(&())];\n    |                       ^^\n@@ -276,7 +276,7 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/const-arg-in-const-arg.rs:33:24\n+  --> $DIR/const-arg-in-const-arg.rs:38:24\n    |\n LL |     let _: Foo<{ bar::<N>() }>;\n    |                        ^\n@@ -287,7 +287,7 @@ LL |     let _: Foo<{ bar::<{ N }>() }>;\n    |                        +   +\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:35:24\n+  --> $DIR/const-arg-in-const-arg.rs:41:24\n    |\n LL |     let _: Foo<{ faz::<'a>(&()) }>;\n    |                        ^^\n@@ -299,7 +299,7 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:38:24\n+  --> $DIR/const-arg-in-const-arg.rs:44:24\n    |\n LL |     let _: Foo<{ faz::<'b>(&()) }>;\n    |                        ^^\n@@ -311,15 +311,15 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/const-arg-in-const-arg.rs:23:17\n+  --> $DIR/const-arg-in-const-arg.rs:25:17\n    |\n LL |     let _ = [0; foo::<T>()];\n    |                 ^^^^^^^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/const-arg-in-const-arg.rs:42:27\n+  --> $DIR/const-arg-in-const-arg.rs:49:27\n    |\n LL |     let _ = Foo::<{ bar::<N>() }>;\n    |                           ^\n@@ -330,7 +330,7 @@ LL |     let _ = Foo::<{ bar::<{ N }>() }>;\n    |                           +   +\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:44:27\n+  --> $DIR/const-arg-in-const-arg.rs:52:27\n    |\n LL |     let _ = Foo::<{ faz::<'a>(&()) }>;\n    |                           ^^\n@@ -342,7 +342,7 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:47:27\n+  --> $DIR/const-arg-in-const-arg.rs:55:27\n    |\n LL |     let _ = Foo::<{ faz::<'b>(&()) }>;\n    |                           ^^"}, {"sha": "44a4f560a248af3ebc2fdc225e7dec11ee8b75f9", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.rs", "status": "modified", "additions": 40, "deletions": 32, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -1,7 +1,7 @@\n-// revisions: min\n-// FIXME(generic_const_exprs): This test currently causes an ICE because\n-// we don't yet correctly deal with lifetimes, reenable this test once\n-// this is fixed.\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(generic_const_exprs))]\n+#![cfg_attr(full, allow(incomplete_features))]\n \n const fn foo<T>() -> usize { std::mem::size_of::<T>() }\n const fn bar<const N: usize>() -> usize { N }\n@@ -10,43 +10,51 @@ const fn baz<'a>(_: &'a ()) -> usize where &'a (): Sized { 13 }\n \n struct Foo<const N: usize>;\n fn test<'a, 'b, T, const N: usize>() where &'b (): Sized {\n-    let _: [u8; foo::<T>()]; //~ ERROR generic parameters may not\n-    let _: [u8; bar::<N>()]; //~ ERROR generic parameters may not\n-                             //~^ ERROR unresolved item provided when a constant was expected\n-    let _: [u8; faz::<'a>(&())]; //~ ERROR a non-static lifetime\n+    let _: [u8; foo::<T>()]; //[min]~ ERROR generic parameters may not\n+                             //[full]~^ ERROR unconstrained generic constant\n+    let _: [u8; bar::<N>()]; //[min]~ ERROR generic parameters may not\n+                             //[min]~^ ERROR unresolved item provided when a constant was expected\n+                             //[full]~^^ ERROR unconstrained generic constant\n+    let _: [u8; faz::<'a>(&())]; //[min]~ ERROR a non-static lifetime\n                                  //~^ ERROR cannot specify lifetime arguments\n-    let _: [u8; baz::<'a>(&())]; //~ ERROR a non-static lifetime\n-    let _: [u8; faz::<'b>(&())]; //~ ERROR a non-static lifetime\n+    let _: [u8; baz::<'a>(&())]; //[min]~ ERROR a non-static lifetime\n+    let _: [u8; faz::<'b>(&())]; //[min]~ ERROR a non-static lifetime\n                                  //~^ ERROR cannot specify lifetime arguments\n-    let _: [u8; baz::<'b>(&())]; //~ ERROR a non-static lifetime\n+    let _: [u8; baz::<'b>(&())]; //[min]~ ERROR a non-static lifetime\n \n-    let _ = [0; foo::<T>()]; //~ ERROR constant expression depends on a generic parameter\n-    let _ = [0; bar::<N>()]; //~ ERROR generic parameters may not\n-                             //~^ ERROR unresolved item provided when a constant was expected\n-    let _ = [0; faz::<'a>(&())]; //~ ERROR a non-static lifetime\n+    let _ = [0; foo::<T>()]; //[min]~ ERROR constant expression depends on a generic parameter\n+                             //[full]~^ ERROR unconstrained generic constant\n+    let _ = [0; bar::<N>()]; //[min]~ ERROR generic parameters may not\n+                             //[min]~^ ERROR unresolved item provided when a constant was expected\n+                             //[full]~^^ ERROR unconstrained generic constant\n+    let _ = [0; faz::<'a>(&())]; //[min]~ ERROR a non-static lifetime\n                                  //~^ ERROR cannot specify lifetime arguments\n-    let _ = [0; baz::<'a>(&())]; //~ ERROR a non-static lifetime\n-    let _ = [0; faz::<'b>(&())]; //~ ERROR a non-static lifetime\n+    let _ = [0; baz::<'a>(&())]; //[min]~ ERROR a non-static lifetime\n+    let _ = [0; faz::<'b>(&())]; //[min]~ ERROR a non-static lifetime\n                                  //~^ ERROR cannot specify lifetime arguments\n-    let _ = [0; baz::<'b>(&())]; //~ ERROR a non-static lifetime\n-    let _: Foo<{ foo::<T>() }>; //~ ERROR generic parameters may not\n-    let _: Foo<{ bar::<N>() }>; //~ ERROR generic parameters may not\n-                                //~^ ERROR unresolved item provided when a constant was expected\n-    let _: Foo<{ faz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n+    let _ = [0; baz::<'b>(&())]; //[min]~ ERROR a non-static lifetime\n+    let _: Foo<{ foo::<T>() }>; //[min]~ ERROR generic parameters may not\n+                                //[full]~^ ERROR unconstrained generic constant\n+    let _: Foo<{ bar::<N>() }>; //[min]~ ERROR generic parameters may not\n+                                //[min]~^ ERROR unresolved item provided when a constant was expected\n+                                //[full]~^^ ERROR unconstrained generic constant\n+    let _: Foo<{ faz::<'a>(&()) }>; //[min]~ ERROR a non-static lifetime\n                                     //~^ ERROR cannot specify lifetime arguments\n-    let _: Foo<{ baz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n-    let _: Foo<{ faz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n+    let _: Foo<{ baz::<'a>(&()) }>; //[min]~ ERROR a non-static lifetime\n+    let _: Foo<{ faz::<'b>(&()) }>; //[min]~ ERROR a non-static lifetime\n                                     //~^ ERROR cannot specify lifetime arguments\n-    let _: Foo<{ baz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n-    let _ = Foo::<{ foo::<T>() }>; //~ ERROR generic parameters may not\n-    let _ = Foo::<{ bar::<N>() }>; //~ ERROR generic parameters may not\n-                                   //~^ ERROR unresolved item provided when a constant was expected\n-    let _ = Foo::<{ faz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n+    let _: Foo<{ baz::<'b>(&()) }>; //[min]~ ERROR a non-static lifetime\n+    let _ = Foo::<{ foo::<T>() }>; //[min]~ ERROR generic parameters may not\n+                                   //[full]~^ ERROR unconstrained generic constant\n+    let _ = Foo::<{ bar::<N>() }>; //[min]~ ERROR generic parameters may not\n+                                   //[min]~^ ERROR unresolved item provided when a constant was expected\n+                                   //[full]~^^ ERROR unconstrained generic constant\n+    let _ = Foo::<{ faz::<'a>(&()) }>; //[min]~ ERROR a non-static lifetime\n                                        //~^ ERROR cannot specify lifetime arguments\n-    let _ = Foo::<{ baz::<'a>(&()) }>; //~ ERROR a non-static lifetime\n-    let _ = Foo::<{ faz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n+    let _ = Foo::<{ baz::<'a>(&()) }>; //[min]~ ERROR a non-static lifetime\n+    let _ = Foo::<{ faz::<'b>(&()) }>; //[min]~ ERROR a non-static lifetime\n                                        //~^ ERROR cannot specify lifetime arguments\n-    let _ = Foo::<{ baz::<'b>(&()) }>; //~ ERROR a non-static lifetime\n+    let _ = Foo::<{ baz::<'b>(&()) }>; //[min]~ ERROR a non-static lifetime\n }\n \n fn main() {}"}, {"sha": "f1f3a9c3de03b0c3e041c3c1d7db672fa5ed6fe4", "filename": "src/test/ui/const-generics/const-argument-non-static-lifetime.min.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.min.stderr?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: a non-static lifetime is not allowed in a `const`\n+  --> $DIR/const-argument-non-static-lifetime.rs:15:17\n+   |\n+LL |         let _: &'a ();\n+   |                 ^^\n+   |\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = help: add `#![feature(generic_const_exprs)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "2792bb7df85471f544b488f4b6f8eb374f71d3cd", "filename": "src/test/ui/const-generics/const-argument-non-static-lifetime.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-non-static-lifetime.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -1,6 +1,8 @@\n-// run-pass\n-// revisions: full\n-// FIXME(#75323) Omitted min revision for now due to ICE.\n+// [full] run-pass\n+// revisions: full min\n+\n+// regression test for #78180\n+// compile-flags: -Zsave-analysis\n \n #![cfg_attr(full, feature(generic_const_exprs))]\n #![cfg_attr(full, allow(incomplete_features))]\n@@ -10,7 +12,7 @@ fn test<const N: usize>() {}\n \n fn wow<'a>() -> &'a () {\n     test::<{\n-        let _: &'a ();\n+        let _: &'a (); //[min]~ ERROR a non-static lifetime\n         3\n     }>();\n     &()"}, {"sha": "3cb8d3846ab7c62096ece221024c778fe366d6cb", "filename": "src/test/ui/const-generics/issues/issue-775377.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-775377.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-775377.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-775377.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -0,0 +1,11 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait<T> {}\n+\n+fn bug<'a, T>() -> &'static dyn MyTrait<[(); { |x: &'a u32| { x }; 4 }]> {\n+    //~^ ERROR overly complex generic constant\n+    todo!()\n+}\n+\n+fn main() {}"}, {"sha": "83946df4203d8fab702ebde9832438ee448d6370", "filename": "src/test/ui/const-generics/issues/issue-775377.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-775377.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-775377.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-775377.stderr?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -0,0 +1,11 @@\n+error: overly complex generic constant\n+  --> $DIR/issue-775377.rs:6:46\n+   |\n+LL | fn bug<'a, T>() -> &'static dyn MyTrait<[(); { |x: &'a u32| { x }; 4 }]> {\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constant\n+   |\n+   = help: consider moving this anonymous constant into a `const` function\n+   = note: this operation may be supported in the future\n+\n+error: aborting due to previous error\n+"}, {"sha": "f2f05d9526bc5f898516a4c6b3ca909432496c1c", "filename": "src/test/ui/const-generics/issues/issue-83993.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83993.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83993.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83993.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+fn bug<'a>()\n+where\n+    for<'b> [(); {\n+        let x: &'b ();\n+        0\n+    }]:\n+{}\n+\n+fn main() {}"}, {"sha": "5776c0b1e0c77c7403f1c5ca8c2c02774a679e64", "filename": "src/test/ui/for-loop-while/label_break_value.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -95,6 +95,50 @@ fn label_break_mixed(v: u32) -> u32 {\n     r\n }\n \n+fn label_break_match(c: u8, xe: u8, ye: i8) {\n+    let mut x = 0;\n+    let y = 'a: {\n+        match c {\n+            0 => break 'a 0,\n+            v if { if v % 2 == 0 { break 'a 1; }; v % 3 == 0 } => { x += 1; },\n+            v if { 'b: { break 'b v == 5; } } => { x = 41; },\n+            _ => 'b: { //~ WARNING `'b` shadows a label\n+                break 'b ();\n+            },\n+        }\n+        x += 1;\n+        -1\n+    };\n+\n+    assert_eq!(x, xe);\n+    assert_eq!(y, ye);\n+}\n+\n+#[allow(unused_labels)]\n+fn label_break_macro() {\n+    macro_rules! mac1 {\n+        ($target:lifetime, $val:expr) => {\n+            break $target $val;\n+        };\n+    }\n+    let x: u8 = 'a: {\n+        'b: {\n+            mac1!('b, 1);\n+        };\n+        0\n+    };\n+    assert_eq!(x, 0);\n+    let x: u8 = 'a: { //~ WARNING `'a` shadows a label\n+        'b: { //~ WARNING `'b` shadows a label\n+            if true {\n+                mac1!('a, 1);\n+            }\n+        };\n+        0\n+    };\n+    assert_eq!(x, 1);\n+}\n+\n pub fn main() {\n     assert_eq!(label_break(true, false), 1);\n     assert_eq!(label_break(false, true), 2);\n@@ -112,5 +156,12 @@ pub fn main() {\n     assert_eq!(label_break_mixed(5), 5);\n     assert_eq!(label_break_mixed(6), 6);\n \n-    // FIXME: ensure that labeled blocks work if produced by macros and in match arms\n+    label_break_match(0, 0, 0);\n+    label_break_match(1, 1, -1);\n+    label_break_match(2, 0, 1);\n+    label_break_match(3, 2, -1);\n+    label_break_match(5, 42, -1);\n+    label_break_match(7, 1, -1);\n+\n+    label_break_macro();\n }"}, {"sha": "b1eb3204fd5997166ca0eac767e228dac6ea49e2", "filename": "src/test/ui/for-loop-while/label_break_value.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value.stderr?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -0,0 +1,28 @@\n+warning: label name `'b` shadows a label name that is already in scope\n+  --> $DIR/label_break_value.rs:105:18\n+   |\n+LL |             v if { 'b: { break 'b v == 5; } } => { x = 41; },\n+   |                    -- first declared here\n+LL |             _ => 'b: {\n+   |                  ^^ label `'b` already in scope\n+\n+warning: label name `'a` shadows a label name that is already in scope\n+  --> $DIR/label_break_value.rs:131:17\n+   |\n+LL |     let x: u8 = 'a: {\n+   |                 -- first declared here\n+...\n+LL |     let x: u8 = 'a: {\n+   |                 ^^ label `'a` already in scope\n+\n+warning: label name `'b` shadows a label name that is already in scope\n+  --> $DIR/label_break_value.rs:132:9\n+   |\n+LL |         'b: {\n+   |         -- first declared here\n+...\n+LL |         'b: {\n+   |         ^^ label `'b` already in scope\n+\n+warning: 3 warnings emitted\n+"}, {"sha": "e603c8463b578ce6c2c942b5174f8cbdae2f4a79", "filename": "src/test/ui/for-loop-while/label_break_value_invalid.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value_invalid.rs?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -0,0 +1,39 @@\n+#![crate_type = \"lib\"]\n+#![feature(label_break_value)]\n+\n+fn lbv_macro_test_hygiene_respected() {\n+    macro_rules! mac2 {\n+        ($val:expr) => {\n+            break 'a $val; //~ ERROR undeclared label `'a` [E0426]\n+        };\n+    }\n+    let x: u8 = 'a: {\n+        'b: {\n+            if true {\n+                mac2!(2);\n+            }\n+        };\n+        0\n+    };\n+    assert_eq!(x, 2);\n+\n+    macro_rules! mac3 {\n+        ($val:expr) => {\n+            'a: {\n+            //~^ WARNING `'a` shadows a label\n+            //~| WARNING `'a` shadows a label\n+            //~| WARNING `'a` shadows a label\n+                $val\n+            }\n+        };\n+    }\n+    let x: u8 = mac3!('b: { //~ WARNING `'b` shadows a label\n+        if true {\n+            break 'a 3; //~ ERROR undeclared label `'a` [E0426]\n+        }\n+        0\n+    });\n+    assert_eq!(x, 3);\n+    let x: u8 = mac3!(break 'a 4); //~ ERROR undeclared label `'a` [E0426]\n+    assert_eq!(x, 4);\n+}"}, {"sha": "549b394e14b101e564d39214ce33d8368a01879b", "filename": "src/test/ui/for-loop-while/label_break_value_invalid.stderr", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value_invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d3e03666a93bd2b0f78b3933f9305832af771a5/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value_invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value_invalid.stderr?ref=7d3e03666a93bd2b0f78b3933f9305832af771a5", "patch": "@@ -0,0 +1,89 @@\n+error[E0426]: use of undeclared label `'a`\n+  --> $DIR/label_break_value_invalid.rs:7:19\n+   |\n+LL |             break 'a $val;\n+   |                   ^^ undeclared label `'a`\n+...\n+LL |                 mac2!(2);\n+   |                 -------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `mac2` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0426]: use of undeclared label `'a`\n+  --> $DIR/label_break_value_invalid.rs:32:19\n+   |\n+LL |     let x: u8 = mac3!('b: {\n+   |                       -- a label with a similar name is reachable\n+LL |         if true {\n+LL |             break 'a 3;\n+   |                   ^^\n+   |                   |\n+   |                   undeclared label `'a`\n+   |                   help: try using similarly named label: `'b`\n+\n+error[E0426]: use of undeclared label `'a`\n+  --> $DIR/label_break_value_invalid.rs:37:29\n+   |\n+LL |     let x: u8 = mac3!(break 'a 4);\n+   |                             ^^ undeclared label `'a`\n+\n+warning: label name `'a` shadows a label name that is already in scope\n+  --> $DIR/label_break_value_invalid.rs:22:13\n+   |\n+LL |       let x: u8 = 'a: {\n+   |                   -- first declared here\n+...\n+LL |               'a: {\n+   |               ^^ label `'a` already in scope\n+...\n+LL |       let x: u8 = mac3!('b: {\n+   |  _________________-\n+LL | |         if true {\n+LL | |             break 'a 3;\n+LL | |         }\n+LL | |         0\n+LL | |     });\n+   | |______- in this macro invocation\n+   |\n+   = note: this warning originates in the macro `mac3` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+warning: label name `'b` shadows a label name that is already in scope\n+  --> $DIR/label_break_value_invalid.rs:30:23\n+   |\n+LL |         'b: {\n+   |         -- first declared here\n+...\n+LL |     let x: u8 = mac3!('b: {\n+   |                       ^^ label `'b` already in scope\n+\n+warning: label name `'a` shadows a label name that is already in scope\n+  --> $DIR/label_break_value_invalid.rs:22:13\n+   |\n+LL |     let x: u8 = 'a: {\n+   |                 -- first declared here\n+...\n+LL |             'a: {\n+   |             ^^ label `'a` already in scope\n+...\n+LL |     let x: u8 = mac3!(break 'a 4);\n+   |                 ----------------- in this macro invocation\n+   |\n+   = note: this warning originates in the macro `mac3` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+warning: label name `'a` shadows a label name that is already in scope\n+  --> $DIR/label_break_value_invalid.rs:22:13\n+   |\n+LL |             'a: {\n+   |             ^^\n+   |             |\n+   |             first declared here\n+   |             label `'a` already in scope\n+...\n+LL |     let x: u8 = mac3!(break 'a 4);\n+   |                 ----------------- in this macro invocation\n+   |\n+   = note: this warning originates in the macro `mac3` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors; 4 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0426`."}]}