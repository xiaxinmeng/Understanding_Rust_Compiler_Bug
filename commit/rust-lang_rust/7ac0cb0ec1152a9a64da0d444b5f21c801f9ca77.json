{"sha": "7ac0cb0ec1152a9a64da0d444b5f21c801f9ca77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYzBjYjBlYzExNTJhOWE2NGRhMGQ0NDRiNWYyMWM4MDFmOWNhNzc=", "commit": {"author": {"name": "Nathaniel McCallum", "email": "nathaniel@congru.us", "date": "2021-08-03T15:19:35Z"}, "committer": {"name": "Nathaniel McCallum", "email": "nathaniel@congru.us", "date": "2021-08-04T19:29:09Z"}, "message": "Add test for naked function unused variables lint\n\nThis test proves that naked functions are treated the same as regular\nfunctions regarding unused function parameters. We will change this\nbehavior in the next patch.", "tree": {"sha": "cb9ac04e2fd44121075c591e1a4b1859c4849ffb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb9ac04e2fd44121075c591e1a4b1859c4849ffb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ac0cb0ec1152a9a64da0d444b5f21c801f9ca77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac0cb0ec1152a9a64da0d444b5f21c801f9ca77", "html_url": "https://github.com/rust-lang/rust/commit/7ac0cb0ec1152a9a64da0d444b5f21c801f9ca77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ac0cb0ec1152a9a64da0d444b5f21c801f9ca77/comments", "author": {"login": "npmccallum", "id": 288304, "node_id": "MDQ6VXNlcjI4ODMwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/288304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npmccallum", "html_url": "https://github.com/npmccallum", "followers_url": "https://api.github.com/users/npmccallum/followers", "following_url": "https://api.github.com/users/npmccallum/following{/other_user}", "gists_url": "https://api.github.com/users/npmccallum/gists{/gist_id}", "starred_url": "https://api.github.com/users/npmccallum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npmccallum/subscriptions", "organizations_url": "https://api.github.com/users/npmccallum/orgs", "repos_url": "https://api.github.com/users/npmccallum/repos", "events_url": "https://api.github.com/users/npmccallum/events{/privacy}", "received_events_url": "https://api.github.com/users/npmccallum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "npmccallum", "id": 288304, "node_id": "MDQ6VXNlcjI4ODMwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/288304?v=4", "gravatar_id": "", "url": "https://api.github.com/users/npmccallum", "html_url": "https://github.com/npmccallum", "followers_url": "https://api.github.com/users/npmccallum/followers", "following_url": "https://api.github.com/users/npmccallum/following{/other_user}", "gists_url": "https://api.github.com/users/npmccallum/gists{/gist_id}", "starred_url": "https://api.github.com/users/npmccallum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/npmccallum/subscriptions", "organizations_url": "https://api.github.com/users/npmccallum/orgs", "repos_url": "https://api.github.com/users/npmccallum/repos", "events_url": "https://api.github.com/users/npmccallum/events{/privacy}", "received_events_url": "https://api.github.com/users/npmccallum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fe0886723c9e08b800c9951f1c6f6a57b2bf22c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe0886723c9e08b800c9951f1c6f6a57b2bf22c", "html_url": "https://github.com/rust-lang/rust/commit/6fe0886723c9e08b800c9951f1c6f6a57b2bf22c"}], "stats": {"total": 220, "additions": 220, "deletions": 0}, "files": [{"sha": "1790541e00904f10a86c00ca8d0dd79a6ee4d156", "filename": "src/test/ui/asm/naked-functions-unused.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0cb0ec1152a9a64da0d444b5f21c801f9ca77/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0cb0ec1152a9a64da0d444b5f21c801f9ca77/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.rs?ref=7ac0cb0ec1152a9a64da0d444b5f21c801f9ca77", "patch": "@@ -0,0 +1,91 @@\n+// only-x86_64\n+#![deny(unused)]\n+#![feature(asm)]\n+#![feature(naked_functions)]\n+#![crate_type = \"lib\"]\n+\n+pub trait Trait {\n+    extern \"sysv64\" fn trait_associated(a: usize, b: usize) -> usize;\n+    extern \"sysv64\" fn trait_method(&self, a: usize, b: usize) -> usize;\n+}\n+\n+pub mod normal {\n+    pub extern \"sysv64\" fn function(a: usize, b: usize) -> usize {\n+        //~^ ERROR unused variable: `a`\n+        //~| ERROR unused variable: `b`\n+        unsafe { asm!(\"\", options(noreturn)); }\n+    }\n+\n+    pub struct Normal;\n+\n+    impl Normal {\n+        pub extern \"sysv64\" fn associated(a: usize, b: usize) -> usize {\n+            //~^ ERROR unused variable: `a`\n+            //~| ERROR unused variable: `b`\n+            unsafe { asm!(\"\", options(noreturn)); }\n+        }\n+\n+        pub extern \"sysv64\" fn method(&self, a: usize, b: usize) -> usize {\n+            //~^ ERROR unused variable: `a`\n+            //~| ERROR unused variable: `b`\n+            unsafe { asm!(\"\", options(noreturn)); }\n+        }\n+    }\n+\n+    impl super::Trait for Normal {\n+        extern \"sysv64\" fn trait_associated(a: usize, b: usize) -> usize {\n+            //~^ ERROR unused variable: `a`\n+            //~| ERROR unused variable: `b`\n+            unsafe { asm!(\"\", options(noreturn)); }\n+        }\n+\n+        extern \"sysv64\" fn trait_method(&self, a: usize, b: usize) -> usize {\n+            //~^ ERROR unused variable: `a`\n+            //~| ERROR unused variable: `b`\n+            unsafe { asm!(\"\", options(noreturn)); }\n+        }\n+    }\n+}\n+\n+pub mod naked {\n+    #[naked]\n+    pub extern \"sysv64\" fn function(a: usize, b: usize) -> usize {\n+        //~^ ERROR unused variable: `a`\n+        //~| ERROR unused variable: `b`\n+        unsafe { asm!(\"\", options(noreturn)); }\n+    }\n+\n+    pub struct Naked;\n+\n+    impl Naked {\n+        #[naked]\n+        pub extern \"sysv64\" fn associated(a: usize, b: usize) -> usize {\n+            //~^ ERROR unused variable: `a`\n+            //~| ERROR unused variable: `b`\n+            unsafe { asm!(\"\", options(noreturn)); }\n+        }\n+\n+        #[naked]\n+        pub extern \"sysv64\" fn method(&self, a: usize, b: usize) -> usize {\n+            //~^ ERROR unused variable: `a`\n+            //~| ERROR unused variable: `b`\n+            unsafe { asm!(\"\", options(noreturn)); }\n+        }\n+    }\n+\n+    impl super::Trait for Naked {\n+        #[naked]\n+        extern \"sysv64\" fn trait_associated(a: usize, b: usize) -> usize {\n+            //~^ ERROR unused variable: `a`\n+            //~| ERROR unused variable: `b`\n+            unsafe { asm!(\"\", options(noreturn)); }\n+        }\n+\n+        #[naked]\n+        extern \"sysv64\" fn trait_method(&self, a: usize, b: usize) -> usize {\n+            //~^ ERROR unused variable: `a`\n+            //~| ERROR unused variable: `b`\n+            unsafe { asm!(\"\", options(noreturn)); }\n+        }\n+    }\n+}"}, {"sha": "3fffd09e7a54b3351778cad7590cac904c1bc9c1", "filename": "src/test/ui/asm/naked-functions-unused.stderr", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/7ac0cb0ec1152a9a64da0d444b5f21c801f9ca77/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ac0cb0ec1152a9a64da0d444b5f21c801f9ca77/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions-unused.stderr?ref=7ac0cb0ec1152a9a64da0d444b5f21c801f9ca77", "patch": "@@ -0,0 +1,129 @@\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:13:37\n+   |\n+LL |     pub extern \"sysv64\" fn function(a: usize, b: usize) -> usize {\n+   |                                     ^ help: if this is intentional, prefix it with an underscore: `_a`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/naked-functions-unused.rs:2:9\n+   |\n+LL | #![deny(unused)]\n+   |         ^^^^^^\n+   = note: `#[deny(unused_variables)]` implied by `#[deny(unused)]`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:13:47\n+   |\n+LL |     pub extern \"sysv64\" fn function(a: usize, b: usize) -> usize {\n+   |                                               ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:22:43\n+   |\n+LL |         pub extern \"sysv64\" fn associated(a: usize, b: usize) -> usize {\n+   |                                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:22:53\n+   |\n+LL |         pub extern \"sysv64\" fn associated(a: usize, b: usize) -> usize {\n+   |                                                     ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:28:46\n+   |\n+LL |         pub extern \"sysv64\" fn method(&self, a: usize, b: usize) -> usize {\n+   |                                              ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:28:56\n+   |\n+LL |         pub extern \"sysv64\" fn method(&self, a: usize, b: usize) -> usize {\n+   |                                                        ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:36:45\n+   |\n+LL |         extern \"sysv64\" fn trait_associated(a: usize, b: usize) -> usize {\n+   |                                             ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:36:55\n+   |\n+LL |         extern \"sysv64\" fn trait_associated(a: usize, b: usize) -> usize {\n+   |                                                       ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:42:48\n+   |\n+LL |         extern \"sysv64\" fn trait_method(&self, a: usize, b: usize) -> usize {\n+   |                                                ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:42:58\n+   |\n+LL |         extern \"sysv64\" fn trait_method(&self, a: usize, b: usize) -> usize {\n+   |                                                          ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:52:37\n+   |\n+LL |     pub extern \"sysv64\" fn function(a: usize, b: usize) -> usize {\n+   |                                     ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:52:47\n+   |\n+LL |     pub extern \"sysv64\" fn function(a: usize, b: usize) -> usize {\n+   |                                               ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:62:43\n+   |\n+LL |         pub extern \"sysv64\" fn associated(a: usize, b: usize) -> usize {\n+   |                                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:62:53\n+   |\n+LL |         pub extern \"sysv64\" fn associated(a: usize, b: usize) -> usize {\n+   |                                                     ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:69:46\n+   |\n+LL |         pub extern \"sysv64\" fn method(&self, a: usize, b: usize) -> usize {\n+   |                                              ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:69:56\n+   |\n+LL |         pub extern \"sysv64\" fn method(&self, a: usize, b: usize) -> usize {\n+   |                                                        ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:78:45\n+   |\n+LL |         extern \"sysv64\" fn trait_associated(a: usize, b: usize) -> usize {\n+   |                                             ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:78:55\n+   |\n+LL |         extern \"sysv64\" fn trait_associated(a: usize, b: usize) -> usize {\n+   |                                                       ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: unused variable: `a`\n+  --> $DIR/naked-functions-unused.rs:85:48\n+   |\n+LL |         extern \"sysv64\" fn trait_method(&self, a: usize, b: usize) -> usize {\n+   |                                                ^ help: if this is intentional, prefix it with an underscore: `_a`\n+\n+error: unused variable: `b`\n+  --> $DIR/naked-functions-unused.rs:85:58\n+   |\n+LL |         extern \"sysv64\" fn trait_method(&self, a: usize, b: usize) -> usize {\n+   |                                                          ^ help: if this is intentional, prefix it with an underscore: `_b`\n+\n+error: aborting due to 20 previous errors\n+"}]}