{"sha": "8561349ece98ade3a848501d1b3c390f2b3e6911", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NjEzNDllY2U5OGFkZTNhODQ4NTAxZDFiM2MzOTBmMmIzZTY5MTE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-28T16:07:40Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-28T16:09:38Z"}, "message": "Only build clif comments in debug mode", "tree": {"sha": "38f780db710be985084376da364e541b62f205f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38f780db710be985084376da364e541b62f205f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8561349ece98ade3a848501d1b3c390f2b3e6911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8561349ece98ade3a848501d1b3c390f2b3e6911", "html_url": "https://github.com/rust-lang/rust/commit/8561349ece98ade3a848501d1b3c390f2b3e6911", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8561349ece98ade3a848501d1b3c390f2b3e6911/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56133d1b18b5d60788146b6dd26201709b209a52", "url": "https://api.github.com/repos/rust-lang/rust/commits/56133d1b18b5d60788146b6dd26201709b209a52", "html_url": "https://github.com/rust-lang/rust/commit/56133d1b18b5d60788146b6dd26201709b209a52"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "e859fe2a38f5bb65e3b2b2138dc404e73cc0b129", "filename": "src/abi.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8561349ece98ade3a848501d1b3c390f2b3e6911/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8561349ece98ade3a848501d1b3c390f2b3e6911/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=8561349ece98ade3a848501d1b3c390f2b3e6911", "patch": "@@ -199,7 +199,10 @@ impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n         let func_id = self.get_function_id(inst);\n         let func_ref = self.module\n             .declare_func_in_func(func_id, &mut self.bcx.func);\n+\n+        #[cfg(debug_assertions)]\n         self.add_entity_comment(func_ref, format!(\"{:?}\", inst));\n+\n         func_ref\n     }\n \n@@ -273,6 +276,7 @@ impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n     }\n }\n \n+#[cfg(debug_assertions)]\n fn add_arg_comment<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     msg: &str,\n@@ -300,6 +304,7 @@ fn add_arg_comment<'a, 'tcx: 'a>(\n     ));\n }\n \n+#[cfg(debug_assertions)]\n fn add_local_header_comment(fx: &mut FunctionCx<impl Backend>) {\n     fx.add_global_comment(format!(\"msg   loc.idx    param    pass mode            ssa flags  ty\"));\n }\n@@ -320,12 +325,15 @@ fn local_place<'a, 'tcx: 'a>(\n             offset: None,\n         });\n \n-        let TyLayout { ty, details } = layout;\n-        let ty::layout::LayoutDetails { size, align, abi: _, variants: _, fields: _ } = details;\n-        fx.add_entity_comment(stack_slot, format!(\n-            \"{:?}: {:?} size={} align={},{}\",\n-            local, ty, size.bytes(), align.abi.bytes(), align.pref.bytes(),\n-        ));\n+        #[cfg(debug_assertions)]\n+        {\n+            let TyLayout { ty, details } = layout;\n+            let ty::layout::LayoutDetails { size, align, abi: _, variants: _, fields: _ } = details;\n+            fx.add_entity_comment(stack_slot, format!(\n+                \"{:?}: {:?} size={} align={},{}\",\n+                local, ty, size.bytes(), align.abi.bytes(), align.pref.bytes(),\n+            ));\n+        }\n \n         CPlace::from_stack_slot(fx, stack_slot, layout.ty)\n     };\n@@ -347,7 +355,10 @@ fn cvalue_for_param<'a, 'tcx: 'a>(\n     let pass_mode = get_pass_mode(fx.tcx, fx.self_sig().abi, arg_ty, false);\n     let clif_type = pass_mode.get_param_ty(fx);\n     let ebb_param = fx.bcx.append_ebb_param(start_ebb, clif_type);\n+\n+    #[cfg(debug_assertions)]\n     add_arg_comment(fx, \"arg\", local, local_field, Some(ebb_param), pass_mode, ssa_flags, arg_ty);\n+\n     match pass_mode {\n         PassMode::NoPass => unimplemented!(\"pass mode nopass\"),\n         PassMode::ByVal(_) => CValue::ByVal(ebb_param, layout),\n@@ -360,6 +371,8 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n     start_ebb: Ebb,\n ) {\n     let ssa_analyzed = crate::analyze::analyze(fx);\n+\n+    #[cfg(debug_assertions)]\n     fx.add_global_comment(format!(\"ssa {:?}\", ssa_analyzed));\n \n     let ret_layout = fx.layout_of(fx.return_type());\n@@ -370,8 +383,11 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n         PassMode::ByRef => Some(fx.bcx.append_ebb_param(start_ebb, fx.pointer_type)),\n     };\n \n-    add_local_header_comment(fx);\n-    add_arg_comment(fx, \"ret\", RETURN_PLACE, None, ret_param, output_pass_mode, ssa_analyzed[&RETURN_PLACE], ret_layout.ty);\n+    #[cfg(debug_assertions)]\n+    {\n+        add_local_header_comment(fx);\n+        add_arg_comment(fx, \"ret\", RETURN_PLACE, None, ret_param, output_pass_mode, ssa_analyzed[&RETURN_PLACE], ret_layout.ty);\n+    }\n \n     enum ArgKind<'tcx> {\n         Normal(CValue<'tcx>),"}, {"sha": "18e45cf9c36083c6710bac9e1182fdf0f500a5af", "filename": "src/base.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8561349ece98ade3a848501d1b3c390f2b3e6911/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8561349ece98ade3a848501d1b3c390f2b3e6911/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=8561349ece98ade3a848501d1b3c390f2b3e6911", "patch": "@@ -110,9 +110,8 @@ fn trans_fn<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n     });\n \n     // Step 7. Write function to file for debugging\n-    if cfg!(debug_assertions) {\n-        fx.write_clif_file();\n-    }\n+    #[cfg(debug_assertions)]\n+    fx.write_clif_file();\n \n     // Step 8. Verify function\n     verify_func(tcx, fx.clif_comments, &func);\n@@ -158,14 +157,17 @@ fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>)\n             trans_stmt(fx, ebb, stmt);\n         }\n \n-        let mut terminator_head = \"\\n\".to_string();\n-        bb_data\n-            .terminator()\n-            .kind\n-            .fmt_head(&mut terminator_head)\n-            .unwrap();\n-        let inst = fx.bcx.func.layout.last_inst(ebb).unwrap();\n-        fx.add_comment(inst, terminator_head);\n+        #[cfg(debug_assertions)]\n+        {\n+            let mut terminator_head = \"\\n\".to_string();\n+            bb_data\n+                .terminator()\n+                .kind\n+                .fmt_head(&mut terminator_head)\n+                .unwrap();\n+            let inst = fx.bcx.func.layout.last_inst(ebb).unwrap();\n+            fx.add_comment(inst, terminator_head);\n+        }\n \n         match &bb_data.terminator().kind {\n             TerminatorKind::Goto { target } => {\n@@ -320,6 +322,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n ) {\n     let _print_guard = PrintOnPanic(|| format!(\"stmt {:?}\", stmt));\n \n+    #[cfg(debug_assertions)]\n     match &stmt.kind {\n         StatementKind::StorageLive(..) | StatementKind::StorageDead(..) => {} // Those are not very useful\n         _ => {"}, {"sha": "05d6b4e30f276722a756f823310c7bc5a751029c", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8561349ece98ade3a848501d1b3c390f2b3e6911/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8561349ece98ade3a848501d1b3c390f2b3e6911/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=8561349ece98ade3a848501d1b3c390f2b3e6911", "patch": "@@ -152,6 +152,7 @@ impl<'a> FuncWriter for &'a CommentWriter {\n     }\n }\n \n+#[cfg(debug_assertions)]\n impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n     pub fn add_global_comment<S: Into<String>>(&mut self, comment: S) {\n         self.clif_comments.global_comments.push(comment.into());\n@@ -202,7 +203,7 @@ impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n             Ok(mut file) => {\n                 let target_triple: ::target_lexicon::Triple = self.tcx.sess.target.target.llvm_target.parse().unwrap();\n                 writeln!(file, \"test compile\").unwrap();\n-                writeln!(file, \"target {}\", target_triple.architecture).unwrap();\n+                writeln!(file, \"target {}\", target_triple).unwrap();\n                 writeln!(file, \"\").unwrap();\n                 file.write(clif.as_bytes()).unwrap();\n             }"}]}