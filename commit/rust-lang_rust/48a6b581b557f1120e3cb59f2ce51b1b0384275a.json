{"sha": "48a6b581b557f1120e3cb59f2ce51b1b0384275a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YTZiNTgxYjU1N2YxMTIwZTNjYjU5ZjJjZTUxYjFiMDM4NDI3NWE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-29T10:43:24Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-29T10:43:24Z"}, "message": "Emulate llvm.x86.sse2.pmovmskb.128 llvm intrinsic", "tree": {"sha": "8ef748a3a71b556fbb5df1184f8c81f5ab9c440a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ef748a3a71b556fbb5df1184f8c81f5ab9c440a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48a6b581b557f1120e3cb59f2ce51b1b0384275a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48a6b581b557f1120e3cb59f2ce51b1b0384275a", "html_url": "https://github.com/rust-lang/rust/commit/48a6b581b557f1120e3cb59f2ce51b1b0384275a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48a6b581b557f1120e3cb59f2ce51b1b0384275a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cb787fe7057311741d63ee26f3e14b4d58893d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb787fe7057311741d63ee26f3e14b4d58893d5", "html_url": "https://github.com/rust-lang/rust/commit/9cb787fe7057311741d63ee26f3e14b4d58893d5"}], "stats": {"total": 90, "additions": 71, "deletions": 19}, "files": [{"sha": "042a09347092c7eb8aa4dbdf27e769923d47702f", "filename": "src/intrinsics.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/48a6b581b557f1120e3cb59f2ce51b1b0384275a/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48a6b581b557f1120e3cb59f2ce51b1b0384275a/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=48a6b581b557f1120e3cb59f2ce51b1b0384275a", "patch": "@@ -2,42 +2,50 @@ use crate::prelude::*;\n \n use rustc::ty::subst::SubstsRef;\n \n-macro_rules! intrinsic_pat {\n+macro intrinsic_pat {\n     (_) => {\n         _\n-    };\n+    },\n     ($name:ident) => {\n         stringify!($name)\n+    },\n+    ($name:literal) => {\n+        stringify!($name)\n+    },\n+    ($x:ident . $($xs:tt).*) => {\n+        concat!(stringify!($x), \".\", intrinsic_pat!($($xs).*))\n     }\n }\n \n-macro_rules! intrinsic_arg {\n+macro intrinsic_arg {\n     (o $fx:expr, $arg:ident) => {\n         $arg\n-    };\n+    },\n     (c $fx:expr, $arg:ident) => {\n         trans_operand($fx, $arg)\n-    };\n+    },\n     (v $fx:expr, $arg:ident) => {\n         trans_operand($fx, $arg).load_scalar($fx)\n-    };\n+    }\n }\n \n-macro_rules! intrinsic_substs {\n-    ($substs:expr, $index:expr,) => {};\n+macro intrinsic_substs {\n+    ($substs:expr, $index:expr,) => {},\n     ($substs:expr, $index:expr, $first:ident $(,$rest:ident)*) => {\n         let $first = $substs.type_at($index);\n         intrinsic_substs!($substs, $index+1, $($rest),*);\n-    };\n+    }\n }\n \n-macro_rules! intrinsic_match {\n-    ($fx:expr, $intrinsic:expr, $substs:expr, $args:expr, $(\n-        $($name:tt)|+ $(if $cond:expr)?, $(<$($subst:ident),*>)? ($($a:ident $arg:ident),*) $content:block;\n+pub macro intrinsic_match {\n+    ($fx:expr, $intrinsic:expr, $substs:expr, $args:expr,\n+    _ => $unknown:block;\n+    $(\n+        $($($name:tt).*)|+ $(if $cond:expr)?, $(<$($subst:ident),*>)? ($($a:ident $arg:ident),*) $content:block;\n     )*) => {\n         match $intrinsic {\n             $(\n-                $(intrinsic_pat!($name))|* $(if $cond)? => {\n+                $(intrinsic_pat!($($name).*))|* $(if $cond)? => {\n                     #[allow(unused_parens, non_snake_case)]\n                     {\n                         $(\n@@ -57,9 +65,9 @@ macro_rules! intrinsic_match {\n                     }\n                 }\n             )*\n-            _ => unimpl!(\"unsupported intrinsic {}\", $intrinsic),\n+            _ => $unknown,\n         }\n-    };\n+    }\n }\n \n macro_rules! call_intrinsic_match {\n@@ -122,7 +130,7 @@ macro_rules! atomic_minmax {\n     };\n }\n \n-fn lane_type_and_count<'tcx>(\n+pub fn lane_type_and_count<'tcx>(\n     fx: &FunctionCx<'_, 'tcx, impl Backend>,\n     layout: TyLayout<'tcx>,\n     intrinsic: &str,\n@@ -282,6 +290,9 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n \n     intrinsic_match! {\n         fx, intrinsic, substs, args,\n+        _ => {\n+            unimpl!(\"unsupported intrinsic {}\", intrinsic)\n+        };\n \n         assume, (c _a) {};\n         likely | unlikely, (c a) {"}, {"sha": "bb99329841150404c4521edca1ce57e599af4ec3", "filename": "src/llvm_intrinsics.rs", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/48a6b581b557f1120e3cb59f2ce51b1b0384275a/src%2Fllvm_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48a6b581b557f1120e3cb59f2ce51b1b0384275a/src%2Fllvm_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm_intrinsics.rs?ref=48a6b581b557f1120e3cb59f2ce51b1b0384275a", "patch": "@@ -9,8 +9,50 @@ pub fn codegen_llvm_intrinsic_call<'a, 'tcx: 'a>(\n     args: &[mir::Operand<'tcx>],\n     destination: Option<(CPlace<'tcx>, BasicBlock)>,\n ) {\n-    fx.tcx.sess.warn(&format!(\"unsupported llvm intrinsic {}; replacing with trap\", intrinsic));\n-    crate::trap::trap_unimplemented(fx, intrinsic);\n+    let ret = match destination {\n+        Some((place, _)) => place,\n+        None => {\n+            // Insert non returning intrinsics here\n+            match intrinsic {\n+                \"abort\" => {\n+                    trap_panic(fx, \"Called intrinsic::abort.\");\n+                }\n+                \"unreachable\" => {\n+                    trap_unreachable(fx, \"[corruption] Called intrinsic::unreachable.\");\n+                }\n+                _ => unimplemented!(\"unsupported instrinsic {}\", intrinsic),\n+            }\n+            return;\n+        }\n+    };\n+\n+    crate::intrinsics::intrinsic_match! {\n+        fx, intrinsic, substs, args,\n+        _ => {\n+            fx.tcx.sess.warn(&format!(\"unsupported llvm intrinsic {}; replacing with trap\", intrinsic));\n+            crate::trap::trap_unimplemented(fx, intrinsic);\n+        };\n+\n+        // Used by _mm_movemask_epi8\n+        llvm.x86.sse2.pmovmskb.128, (c a) {\n+            let (lane_layout, lane_count) = crate::intrinsics::lane_type_and_count(fx, a.layout(), intrinsic);\n+            assert_eq!(lane_layout.ty.sty, fx.tcx.types.i8.sty);\n+            assert_eq!(lane_count, 16);\n+\n+            let mut res = fx.bcx.ins().iconst(types::I32, 0);\n+\n+            for lane in 0..16 {\n+                let a_lane = a.value_field(fx, mir::Field::new(lane.try_into().unwrap())).load_scalar(fx);\n+                let a_lane_sign = fx.bcx.ins().ushr_imm(a_lane, 7); // extract sign bit of 8bit int\n+                let a_lane_sign = fx.bcx.ins().uextend(types::I32, a_lane_sign);\n+                res = fx.bcx.ins().ishl_imm(res, 1);\n+                res = fx.bcx.ins().bor(res, a_lane_sign);\n+            }\n+\n+            let res = CValue::by_val(res, fx.layout_of(fx.tcx.types.i32));\n+            ret.write_cvalue(fx, res);\n+        };\n+    }\n \n     if let Some((_, dest)) = destination {\n         let ret_ebb = fx.get_ebb(dest);\n@@ -20,7 +62,6 @@ pub fn codegen_llvm_intrinsic_call<'a, 'tcx: 'a>(\n     }\n }\n \n-// llvm.x86.sse2.pmovmskb.128\n // llvm.x86.avx2.vperm2i128\n // llvm.x86.ssse3.pshuf.b.128\n // llvm.x86.avx2.pshuf.b"}]}