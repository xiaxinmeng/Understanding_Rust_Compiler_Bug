{"sha": "7d33d1a84eadec1f1e54bf5e39575103c04b03bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMzNkMWE4NGVhZGVjMWYxZTU0YmY1ZTM5NTc1MTAzYzA0YjAzYmQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-01T06:24:46Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-10T12:40:25Z"}, "message": "Make Session.has_global_allocator thread-safe", "tree": {"sha": "8cd1cf93018d1792e85e3f55038185035b2e6725", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cd1cf93018d1792e85e3f55038185035b2e6725"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d33d1a84eadec1f1e54bf5e39575103c04b03bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d33d1a84eadec1f1e54bf5e39575103c04b03bd", "html_url": "https://github.com/rust-lang/rust/commit/7d33d1a84eadec1f1e54bf5e39575103c04b03bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d33d1a84eadec1f1e54bf5e39575103c04b03bd/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73b26f7f51d15c6cb6b4495f4ff9a405610037f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/73b26f7f51d15c6cb6b4495f4ff9a405610037f8", "html_url": "https://github.com/rust-lang/rust/commit/73b26f7f51d15c6cb6b4495f4ff9a405610037f8"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "1c11c52357d1ce8b7f6b065f48574b83c2d0384a", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d33d1a84eadec1f1e54bf5e39575103c04b03bd/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d33d1a84eadec1f1e54bf5e39575103c04b03bd/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=7d33d1a84eadec1f1e54bf5e39575103c04b03bd", "patch": "@@ -161,7 +161,7 @@ pub struct Session {\n     pub jobserver_from_env: Option<Client>,\n \n     /// Metadata about the allocators for the current crate being compiled\n-    pub has_global_allocator: Cell<bool>,\n+    pub has_global_allocator: Once<bool>,\n }\n \n pub struct PerfStats {\n@@ -1142,7 +1142,7 @@ pub fn build_session_(\n             });\n             (*GLOBAL_JOBSERVER).clone()\n         },\n-        has_global_allocator: Cell::new(false),\n+        has_global_allocator: Once::new(),\n     };\n \n     sess"}, {"sha": "5b54994b9ceab5d2ba917ee053541aabd9055990", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d33d1a84eadec1f1e54bf5e39575103c04b03bd/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d33d1a84eadec1f1e54bf5e39575103c04b03bd/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=7d33d1a84eadec1f1e54bf5e39575103c04b03bd", "patch": "@@ -812,9 +812,7 @@ impl<'a> CrateLoader<'a> {\n \n     fn inject_allocator_crate(&mut self, krate: &ast::Crate) {\n         let has_global_allocator = has_global_allocator(krate);\n-        if has_global_allocator {\n-            self.sess.has_global_allocator.set(true);\n-        }\n+        self.sess.has_global_allocator.set(has_global_allocator);\n \n         // Check to see if we actually need an allocator. This desire comes\n         // about through the `#![needs_allocator]` attribute and is typically"}, {"sha": "66071f242fb951ff31bf514dedc06e24fb332374", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d33d1a84eadec1f1e54bf5e39575103c04b03bd/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d33d1a84eadec1f1e54bf5e39575103c04b03bd/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=7d33d1a84eadec1f1e54bf5e39575103c04b03bd", "patch": "@@ -459,7 +459,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let is_proc_macro = tcx.sess.crate_types.borrow().contains(&CrateTypeProcMacro);\n         let has_default_lib_allocator =\n             attr::contains_name(tcx.hir.krate_attrs(), \"default_lib_allocator\");\n-        let has_global_allocator = tcx.sess.has_global_allocator.get();\n+        let has_global_allocator = *tcx.sess.has_global_allocator.get();\n         let root = self.lazy(&CrateRoot {\n             name: tcx.crate_name(LOCAL_CRATE),\n             extra_filename: tcx.sess.opts.cg.extra_filename.clone(),"}]}