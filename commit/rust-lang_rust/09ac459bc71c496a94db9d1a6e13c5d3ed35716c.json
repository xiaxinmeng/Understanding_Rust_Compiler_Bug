{"sha": "09ac459bc71c496a94db9d1a6e13c5d3ed35716c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YWM0NTliYzcxYzQ5NmE5NGRiOWQxYTZlMTNjNWQzZWQzNTcxNmM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-04T17:02:14Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-04T17:02:14Z"}, "message": "Encode less consts.", "tree": {"sha": "44b45ad4970d97d30c227739df8ed54793fc0a22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44b45ad4970d97d30c227739df8ed54793fc0a22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09ac459bc71c496a94db9d1a6e13c5d3ed35716c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09ac459bc71c496a94db9d1a6e13c5d3ed35716c", "html_url": "https://github.com/rust-lang/rust/commit/09ac459bc71c496a94db9d1a6e13c5d3ed35716c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09ac459bc71c496a94db9d1a6e13c5d3ed35716c/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0658d8c097175dc90c09e232db910139c79b0e5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0658d8c097175dc90c09e232db910139c79b0e5a", "html_url": "https://github.com/rust-lang/rust/commit/0658d8c097175dc90c09e232db910139c79b0e5a"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "dd6a6fe62487fd3df68db4de03c281875a3351e0", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/09ac459bc71c496a94db9d1a6e13c5d3ed35716c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09ac459bc71c496a94db9d1a6e13c5d3ed35716c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=09ac459bc71c496a94db9d1a6e13c5d3ed35716c", "patch": "@@ -801,8 +801,8 @@ fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {\n         DefKind::AnonConst | DefKind::AssocConst | DefKind::Static | DefKind::Const => {\n             (true, false)\n         }\n-        // Closures and functions\n-        DefKind::Closure | DefKind::AssocFn | DefKind::Fn => {\n+        // Full-fledged functions\n+        DefKind::AssocFn | DefKind::Fn => {\n             let generics = tcx.generics_of(def_id);\n             let needs_inline = (generics.requires_monomorphization(tcx)\n                 || tcx.codegen_fn_attrs(def_id).requests_inline())\n@@ -812,6 +812,15 @@ fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {\n             let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;\n             (is_const_fn, needs_inline || always_encode_mir)\n         }\n+        // Closures can't be const fn.\n+        DefKind::Closure => {\n+            let generics = tcx.generics_of(def_id);\n+            let needs_inline = (generics.requires_monomorphization(tcx)\n+                || tcx.codegen_fn_attrs(def_id).requests_inline())\n+                && tcx.sess.opts.output_types.should_codegen();\n+            let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;\n+            (false, needs_inline || always_encode_mir)\n+        }\n         // Generators require optimized MIR to compute layout.\n         DefKind::Generator => (false, true),\n         // The others don't have MIR.\n@@ -1206,18 +1215,18 @@ impl EncodeContext<'a, 'tcx> {\n             }\n             if encode_const {\n                 record!(self.tables.mir_for_ctfe[def_id.to_def_id()] <- self.tcx.mir_for_ctfe(def_id));\n+\n+                let abstract_const = self.tcx.mir_abstract_const(def_id);\n+                if let Ok(Some(abstract_const)) = abstract_const {\n+                    record!(self.tables.mir_abstract_consts[def_id.to_def_id()] <- abstract_const);\n+                }\n             }\n             record!(self.tables.promoted_mir[def_id.to_def_id()] <- self.tcx.promoted_mir(def_id));\n \n             let unused = self.tcx.unused_generic_params(def_id);\n             if !unused.is_empty() {\n                 record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);\n             }\n-\n-            let abstract_const = self.tcx.mir_abstract_const(def_id);\n-            if let Ok(Some(abstract_const)) = abstract_const {\n-                record!(self.tables.mir_abstract_consts[def_id.to_def_id()] <- abstract_const);\n-            }\n         }\n     }\n "}]}