{"sha": "d3e2ffcbc69eadc63a7265a7902739080b9338de", "node_id": "C_kwDOAAsO6NoAKGQzZTJmZmNiYzY5ZWFkYzYzYTcyNjVhNzkwMjczOTA4MGI5MzM4ZGU", "commit": {"author": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2021-08-02T09:34:37Z"}, "committer": {"name": "Beno\u00eet du Garreau", "email": "bdgdlm@outlook.com", "date": "2022-02-12T10:51:15Z"}, "message": "Fix `shrink` and `capacity_from_bytes`", "tree": {"sha": "f7c8c4605def5843c5ccde9ca3788e6d7592f9f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7c8c4605def5843c5ccde9ca3788e6d7592f9f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3e2ffcbc69eadc63a7265a7902739080b9338de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e2ffcbc69eadc63a7265a7902739080b9338de", "html_url": "https://github.com/rust-lang/rust/commit/d3e2ffcbc69eadc63a7265a7902739080b9338de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3e2ffcbc69eadc63a7265a7902739080b9338de/comments", "author": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a1phyr", "id": 47725341, "node_id": "MDQ6VXNlcjQ3NzI1MzQx", "avatar_url": "https://avatars.githubusercontent.com/u/47725341?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a1phyr", "html_url": "https://github.com/a1phyr", "followers_url": "https://api.github.com/users/a1phyr/followers", "following_url": "https://api.github.com/users/a1phyr/following{/other_user}", "gists_url": "https://api.github.com/users/a1phyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/a1phyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a1phyr/subscriptions", "organizations_url": "https://api.github.com/users/a1phyr/orgs", "repos_url": "https://api.github.com/users/a1phyr/repos", "events_url": "https://api.github.com/users/a1phyr/events{/privacy}", "received_events_url": "https://api.github.com/users/a1phyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6027182328c341e672b58c820777941814643a3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6027182328c341e672b58c820777941814643a3b", "html_url": "https://github.com/rust-lang/rust/commit/6027182328c341e672b58c820777941814643a3b"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "ae1f8c0e513744eaafa542f0b6e508bddf2fd891", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3e2ffcbc69eadc63a7265a7902739080b9338de/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e2ffcbc69eadc63a7265a7902739080b9338de/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=d3e2ffcbc69eadc63a7265a7902739080b9338de", "patch": "@@ -425,10 +425,11 @@ impl<T, A: Allocator> RawVec<T, A> {\n         assert!(cap <= self.capacity(), \"Tried to shrink to a larger capacity\");\n \n         let (ptr, layout) = if let Some(mem) = self.current_memory() { mem } else { return Ok(()) };\n-        let new_size = cap * mem::size_of::<T>();\n \n         let ptr = unsafe {\n-            let new_layout = Layout::from_size_align_unchecked(new_size, layout.align());\n+            // `Layout::array` cannot overflow here because it would have\n+            // owerflown earlier when capacity was larger.\n+            let new_layout = Layout::array::<T>(cap).unwrap_unchecked();\n             self.alloc\n                 .shrink(ptr, layout, new_layout)\n                 .map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })?"}]}