{"sha": "39a2bc5e3cd86876eef6f3a96bef188f88e85114", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YTJiYzVlM2NkODY4NzZlZWY2ZjNhOTZiZWYxODhmODhlODUxMTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-21T10:52:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-21T10:52:51Z"}, "message": "Expose package roots more directly", "tree": {"sha": "6e655b139235d23c7640e404a10eb543ef85caac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e655b139235d23c7640e404a10eb543ef85caac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39a2bc5e3cd86876eef6f3a96bef188f88e85114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39a2bc5e3cd86876eef6f3a96bef188f88e85114", "html_url": "https://github.com/rust-lang/rust/commit/39a2bc5e3cd86876eef6f3a96bef188f88e85114", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39a2bc5e3cd86876eef6f3a96bef188f88e85114/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "818aeb8a242bba5d8947ce2960e1af27d998f4fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/818aeb8a242bba5d8947ce2960e1af27d998f4fc", "html_url": "https://github.com/rust-lang/rust/commit/818aeb8a242bba5d8947ce2960e1af27d998f4fc"}], "stats": {"total": 104, "additions": 50, "deletions": 54}, "files": [{"sha": "cf46048e50d851d0f5335141767607e47ce6950c", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/39a2bc5e3cd86876eef6f3a96bef188f88e85114/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a2bc5e3cd86876eef6f3a96bef188f88e85114/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=39a2bc5e3cd86876eef6f3a96bef188f88e85114", "patch": "@@ -37,28 +37,10 @@ pub enum ProjectWorkspace {\n /// the current workspace.\n #[derive(Debug, Clone)]\n pub struct PackageRoot {\n-    /// Path to the root folder\n-    path: AbsPathBuf,\n     /// Is a member of the current workspace\n-    is_member: bool,\n-    out_dir: Option<AbsPathBuf>,\n-}\n-impl PackageRoot {\n-    pub fn new_member(path: AbsPathBuf) -> PackageRoot {\n-        Self { path, is_member: true, out_dir: None }\n-    }\n-    pub fn new_non_member(path: AbsPathBuf) -> PackageRoot {\n-        Self { path, is_member: false, out_dir: None }\n-    }\n-    pub fn path(&self) -> &AbsPath {\n-        &self.path\n-    }\n-    pub fn out_dir(&self) -> Option<&AbsPath> {\n-        self.out_dir.as_deref()\n-    }\n-    pub fn is_member(&self) -> bool {\n-        self.is_member\n-    }\n+    pub is_member: bool,\n+    pub include: Vec<AbsPathBuf>,\n+    pub exclude: Vec<AbsPathBuf>,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash, Ord, PartialOrd)]\n@@ -195,18 +177,38 @@ impl ProjectWorkspace {\n     /// the root is a member of the current workspace\n     pub fn to_roots(&self) -> Vec<PackageRoot> {\n         match self {\n-            ProjectWorkspace::Json { project } => {\n-                project.roots.iter().map(|r| PackageRoot::new_member(r.path.clone())).collect()\n-            }\n+            ProjectWorkspace::Json { project } => project\n+                .roots\n+                .iter()\n+                .map(|r| {\n+                    let path = r.path.clone();\n+                    let include = vec![path];\n+                    PackageRoot { is_member: true, include, exclude: Vec::new() }\n+                })\n+                .collect(),\n             ProjectWorkspace::Cargo { cargo, sysroot } => cargo\n                 .packages()\n-                .map(|pkg| PackageRoot {\n-                    path: cargo[pkg].root().to_path_buf(),\n-                    is_member: cargo[pkg].is_member,\n-                    out_dir: cargo[pkg].out_dir.clone(),\n+                .map(|pkg| {\n+                    let is_member = cargo[pkg].is_member;\n+                    let pkg_root = cargo[pkg].root().to_path_buf();\n+\n+                    let mut include = vec![pkg_root.clone()];\n+                    include.extend(cargo[pkg].out_dir.clone());\n+\n+                    let mut exclude = vec![pkg_root.join(\".git\")];\n+                    if is_member {\n+                        exclude.push(pkg_root.join(\"target\"));\n+                    } else {\n+                        exclude.push(pkg_root.join(\"tests\"));\n+                        exclude.push(pkg_root.join(\"examples\"));\n+                        exclude.push(pkg_root.join(\"benches\"));\n+                    }\n+                    PackageRoot { is_member, include, exclude }\n                 })\n-                .chain(sysroot.crates().map(|krate| {\n-                    PackageRoot::new_non_member(sysroot[krate].root_dir().to_path_buf())\n+                .chain(sysroot.crates().map(|krate| PackageRoot {\n+                    is_member: false,\n+                    include: vec![sysroot[krate].root_dir().to_path_buf()],\n+                    exclude: Vec::new(),\n                 }))\n                 .collect(),\n         }"}, {"sha": "1907f2f132d65b6931b68a95ca4ba117dfcb9942", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/39a2bc5e3cd86876eef6f3a96bef188f88e85114/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a2bc5e3cd86876eef6f3a96bef188f88e85114/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=39a2bc5e3cd86876eef6f3a96bef188f88e85114", "patch": "@@ -5,7 +5,7 @@ use flycheck::FlycheckHandle;\n use ra_db::{CrateGraph, SourceRoot, VfsPath};\n use ra_ide::AnalysisChange;\n use ra_prof::profile;\n-use ra_project_model::{PackageRoot, ProcMacroClient, ProjectWorkspace};\n+use ra_project_model::{ProcMacroClient, ProjectWorkspace};\n use vfs::{file_set::FileSetConfig, AbsPath, AbsPathBuf, ChangeKind};\n \n use crate::{\n@@ -149,8 +149,10 @@ impl GlobalState {\n                 watchers: workspaces\n                     .iter()\n                     .flat_map(ProjectWorkspace::to_roots)\n-                    .filter(PackageRoot::is_member)\n-                    .map(|root| format!(\"{}/**/*.rs\", root.path().display()))\n+                    .filter(|it| it.is_member)\n+                    .flat_map(|root| {\n+                        root.include.into_iter().map(|it| format!(\"{}/**/*.rs\", it.display()))\n+                    })\n                     .map(|glob_pattern| lsp_types::FileSystemWatcher { glob_pattern, kind: None })\n                     .collect(),\n             };\n@@ -261,31 +263,23 @@ impl ProjectFolders {\n         let mut local_filesets = vec![];\n \n         for root in workspaces.iter().flat_map(|it| it.to_roots()) {\n-            let path = root.path().to_owned();\n-\n-            let mut file_set_roots: Vec<VfsPath> = vec![];\n+            let file_set_roots: Vec<VfsPath> =\n+                root.include.iter().cloned().map(VfsPath::from).collect();\n \n-            let entry = if root.is_member() {\n-                vfs::loader::Entry::local_cargo_package(path.to_path_buf())\n-            } else {\n-                vfs::loader::Entry::cargo_package_dependency(path.to_path_buf())\n+            let entry = {\n+                let mut dirs = vfs::loader::Directories::default();\n+                dirs.extensions.push(\"rs\".into());\n+                dirs.include.extend(root.include);\n+                dirs.exclude.extend(root.exclude);\n+                vfs::loader::Entry::Directories(dirs)\n             };\n-            res.load.push(entry);\n-            if root.is_member() {\n-                res.watch.push(res.load.len() - 1);\n-            }\n \n-            if let Some(out_dir) = root.out_dir() {\n-                let out_dir = out_dir.to_path_buf();\n-                res.load.push(vfs::loader::Entry::rs_files_recursively(out_dir.clone()));\n-                if root.is_member() {\n-                    res.watch.push(res.load.len() - 1);\n-                }\n-                file_set_roots.push(out_dir.into());\n+            if root.is_member {\n+                res.watch.push(res.load.len());\n             }\n-            file_set_roots.push(path.to_path_buf().into());\n+            res.load.push(entry);\n \n-            if root.is_member() {\n+            if root.is_member {\n                 local_filesets.push(fsc.len());\n             }\n             fsc.add_file_set(file_set_roots)"}, {"sha": "40cf9602083d922d7137d04418d204df86b1b207", "filename": "crates/vfs/src/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a2bc5e3cd86876eef6f3a96bef188f88e85114/crates%2Fvfs%2Fsrc%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a2bc5e3cd86876eef6f3a96bef188f88e85114/crates%2Fvfs%2Fsrc%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Floader.rs?ref=39a2bc5e3cd86876eef6f3a96bef188f88e85114", "patch": "@@ -17,7 +17,7 @@ pub enum Entry {\n ///   * it is not under `exclude` path\n ///\n /// If many include/exclude paths match, the longest one wins.\n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, Default)]\n pub struct Directories {\n     pub extensions: Vec<String>,\n     pub include: Vec<AbsPathBuf>,"}]}