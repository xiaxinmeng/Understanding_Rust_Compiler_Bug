{"sha": "52e6f859f176e860ce8fbe479c991c8037e8a05a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZTZmODU5ZjE3NmU4NjBjZThmYmU0NzljOTkxYzgwMzdlOGEwNWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-02T08:49:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-04T08:39:05Z"}, "message": "organize methods a bit better", "tree": {"sha": "2881a6826dae6ee151f61765d2ccc2a857358c11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2881a6826dae6ee151f61765d2ccc2a857358c11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52e6f859f176e860ce8fbe479c991c8037e8a05a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52e6f859f176e860ce8fbe479c991c8037e8a05a", "html_url": "https://github.com/rust-lang/rust/commit/52e6f859f176e860ce8fbe479c991c8037e8a05a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52e6f859f176e860ce8fbe479c991c8037e8a05a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "956a3ef3bb64dd75bd9e680c199bee013c00fe4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/956a3ef3bb64dd75bd9e680c199bee013c00fe4a", "html_url": "https://github.com/rust-lang/rust/commit/956a3ef3bb64dd75bd9e680c199bee013c00fe4a"}], "stats": {"total": 74, "additions": 38, "deletions": 36}, "files": [{"sha": "16be6476cfc4f2e52783305a1a9483742474d649", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 38, "deletions": 36, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/52e6f859f176e860ce8fbe479c991c8037e8a05a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e6f859f176e860ce8fbe479c991c8037e8a05a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=52e6f859f176e860ce8fbe479c991c8037e8a05a", "patch": "@@ -217,6 +217,23 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         &mut self.memory\n     }\n \n+    #[inline(always)]\n+    pub fn force_ptr(\n+        &self,\n+        scalar: Scalar<M::PointerTag>,\n+    ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {\n+        self.memory.force_ptr(scalar)\n+    }\n+\n+    #[inline(always)]\n+    pub fn force_bits(\n+        &self,\n+        scalar: Scalar<M::PointerTag>,\n+        size: Size\n+    ) -> InterpResult<'tcx, u128> {\n+        self.memory.force_bits(scalar, size)\n+    }\n+\n     #[inline(always)]\n     pub fn tag_static_base_pointer(&self, ptr: Pointer) -> Pointer<M::PointerTag> {\n         self.memory.tag_static_base_pointer(ptr)\n@@ -248,6 +265,27 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         self.frame().body\n     }\n \n+    #[inline(always)]\n+    pub fn sign_extend(&self, value: u128, ty: TyLayout<'_>) -> u128 {\n+        assert!(ty.abi.is_signed());\n+        sign_extend(value, ty.size)\n+    }\n+\n+    #[inline(always)]\n+    pub fn truncate(&self, value: u128, ty: TyLayout<'_>) -> u128 {\n+        truncate(value, ty.size)\n+    }\n+\n+    #[inline]\n+    pub fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {\n+        ty.is_sized(self.tcx, self.param_env)\n+    }\n+\n+    #[inline]\n+    pub fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool {\n+        ty.is_freeze(*self.tcx, self.param_env, DUMMY_SP)\n+    }\n+\n     pub(super) fn subst_and_normalize_erasing_regions<T: TypeFoldable<'tcx>>(\n         &self,\n         substs: T,\n@@ -283,14 +321,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         ).ok_or_else(|| InterpError::TooGeneric.into())\n     }\n \n-    pub fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {\n-        ty.is_sized(self.tcx, self.param_env)\n-    }\n-\n-    pub fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool {\n-        ty.is_freeze(*self.tcx, self.param_env, DUMMY_SP)\n-    }\n-\n     pub fn load_mir(\n         &self,\n         instance: ty::InstanceDef<'tcx>,\n@@ -761,32 +791,4 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         trace!(\"generate stacktrace: {:#?}, {:?}\", frames, explicit_span);\n         frames\n     }\n-\n-    #[inline(always)]\n-    pub fn sign_extend(&self, value: u128, ty: TyLayout<'_>) -> u128 {\n-        assert!(ty.abi.is_signed());\n-        sign_extend(value, ty.size)\n-    }\n-\n-    #[inline(always)]\n-    pub fn truncate(&self, value: u128, ty: TyLayout<'_>) -> u128 {\n-        truncate(value, ty.size)\n-    }\n-\n-    #[inline(always)]\n-    pub fn force_ptr(\n-        &self,\n-        scalar: Scalar<M::PointerTag>,\n-    ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {\n-        self.memory.force_ptr(scalar)\n-    }\n-\n-    #[inline(always)]\n-    pub fn force_bits(\n-        &self,\n-        scalar: Scalar<M::PointerTag>,\n-        size: Size\n-    ) -> InterpResult<'tcx, u128> {\n-        self.memory.force_bits(scalar, size)\n-    }\n }"}]}