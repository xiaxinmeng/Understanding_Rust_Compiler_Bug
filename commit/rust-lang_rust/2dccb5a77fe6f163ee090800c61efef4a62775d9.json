{"sha": "2dccb5a77fe6f163ee090800c61efef4a62775d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkY2NiNWE3N2ZlNmYxNjNlZTA5MDgwMGM2MWVmZWY0YTYyNzc1ZDk=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-12-05T02:32:02Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-12-05T19:16:20Z"}, "message": "librustc: Don't reuse same alloca for match on struct/tuple field which we reassign to in match body.", "tree": {"sha": "caf1492e5aa6543f10218146be85b20efad8cecb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caf1492e5aa6543f10218146be85b20efad8cecb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dccb5a77fe6f163ee090800c61efef4a62775d9", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dccb5a77fe6f163ee090800c61efef4a62775d9", "html_url": "https://github.com/rust-lang/rust/commit/2dccb5a77fe6f163ee090800c61efef4a62775d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dccb5a77fe6f163ee090800c61efef4a62775d9/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9c7c00b9a3d80fc81fbbb77a9f21e5f71a1d213", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9c7c00b9a3d80fc81fbbb77a9f21e5f71a1d213", "html_url": "https://github.com/rust-lang/rust/commit/d9c7c00b9a3d80fc81fbbb77a9f21e5f71a1d213"}], "stats": {"total": 99, "additions": 85, "deletions": 14}, "files": [{"sha": "f5155852aa00c5850980791e1a2fb8741e9d3427", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 43, "deletions": 14, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2dccb5a77fe6f163ee090800c61efef4a62775d9/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dccb5a77fe6f163ee090800c61efef4a62775d9/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=2dccb5a77fe6f163ee090800c61efef4a62775d9", "patch": "@@ -1226,30 +1226,50 @@ pub fn trans_match<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n /// Checks whether the binding in `discr` is assigned to anywhere in the expression `body`\n fn is_discr_reassigned(bcx: Block, discr: &ast::Expr, body: &ast::Expr) -> bool {\n-    match discr.node {\n+    let (vid, field) = match discr.node {\n         ast::ExprPath(..) => match bcx.def(discr.id) {\n-            def::DefLocal(vid) | def::DefUpvar(vid, _, _) => {\n-                let mut rc = ReassignmentChecker {\n-                    node: vid,\n-                    reassigned: false\n-                };\n-                {\n-                    let mut visitor = euv::ExprUseVisitor::new(&mut rc, bcx);\n-                    visitor.walk_expr(body);\n-                }\n-                rc.reassigned\n-            }\n-            _ => false\n+            def::DefLocal(vid) | def::DefUpvar(vid, _, _) => (vid, None),\n+            _ => return false\n+        },\n+        ast::ExprField(ref base, field) => {\n+            let vid = match bcx.tcx().def_map.borrow().get(&base.id) {\n+                Some(&def::DefLocal(vid)) | Some(&def::DefUpvar(vid, _, _)) => vid,\n+                _ => return false\n+            };\n+            (vid, Some(mc::NamedField(field.node.name)))\n+        },\n+        ast::ExprTupField(ref base, field) => {\n+            let vid = match bcx.tcx().def_map.borrow().get(&base.id) {\n+                Some(&def::DefLocal(vid)) | Some(&def::DefUpvar(vid, _, _)) => vid,\n+                _ => return false\n+            };\n+            (vid, Some(mc::PositionalField(field.node)))\n         },\n-        _ => false\n+        _ => return false\n+    };\n+\n+    let mut rc = ReassignmentChecker {\n+        node: vid,\n+        field: field,\n+        reassigned: false\n+    };\n+    {\n+        let mut visitor = euv::ExprUseVisitor::new(&mut rc, bcx);\n+        visitor.walk_expr(body);\n     }\n+    rc.reassigned\n }\n \n struct ReassignmentChecker {\n     node: ast::NodeId,\n+    field: Option<mc::FieldName>,\n     reassigned: bool\n }\n \n+// Determine if the expression we're matching on is reassigned to within\n+// the body of the match's arm.\n+// We only care for the `mutate` callback since this check only matters\n+// for cases where the matched value is moved.\n impl<'tcx> euv::Delegate<'tcx> for ReassignmentChecker {\n     fn consume(&mut self, _: ast::NodeId, _: Span, _: mc::cmt, _: euv::ConsumeMode) {}\n     fn matched_pat(&mut self, _: &ast::Pat, _: mc::cmt, _: euv::MatchMode) {}\n@@ -1262,6 +1282,15 @@ impl<'tcx> euv::Delegate<'tcx> for ReassignmentChecker {\n         match cmt.cat {\n             mc::cat_upvar(mc::Upvar { id: ty::UpvarId { var_id: vid, .. }, .. }) |\n             mc::cat_local(vid) => self.reassigned = self.node == vid,\n+            mc::cat_interior(ref base_cmt, mc::InteriorField(field)) => {\n+                match base_cmt.cat {\n+                    mc::cat_upvar(mc::Upvar { id: ty::UpvarId { var_id: vid, .. }, .. }) |\n+                    mc::cat_local(vid) => {\n+                        self.reassigned = self.node == vid && Some(field) == self.field\n+                    },\n+                    _ => {}\n+                }\n+            },\n             _ => {}\n         }\n     }"}, {"sha": "6083b340825d4b7d278e58f901949509944d927b", "filename": "src/test/run-pass/issue-19367.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2dccb5a77fe6f163ee090800c61efef4a62775d9/src%2Ftest%2Frun-pass%2Fissue-19367.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dccb5a77fe6f163ee090800c61efef4a62775d9/src%2Ftest%2Frun-pass%2Fissue-19367.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19367.rs?ref=2dccb5a77fe6f163ee090800c61efef4a62775d9", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(tuple_indexing)]\n+struct S {\n+    o: Option<String>\n+}\n+\n+// Make sure we don't reuse the same alloca when matching\n+// on field of struct or tuple which we reassign in the match body.\n+\n+fn main() {\n+    let mut a = (0i, Some(\"right\".into_string()));\n+    let b = match a.1 {\n+        Some(v) => {\n+            a.1 = Some(\"wrong\".into_string());\n+            v\n+        }\n+        None => String::new()\n+    };\n+    println!(\"{}\", b);\n+    assert_eq!(b, \"right\");\n+\n+\n+    let mut s = S{ o: Some(\"right\".into_string()) };\n+    let b = match s.o {\n+        Some(v) => {\n+            s.o = Some(\"wrong\".into_string());\n+            v\n+        }\n+        None => String::new(),\n+    };\n+    println!(\"{}\", b);\n+    assert_eq!(b, \"right\");\n+}"}]}