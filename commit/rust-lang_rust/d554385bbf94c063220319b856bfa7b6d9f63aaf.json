{"sha": "d554385bbf94c063220319b856bfa7b6d9f63aaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NTQzODViYmY5NGMwNjMyMjAzMTliODU2YmZhN2I2ZDlmNjNhYWY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-07T11:07:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-07T11:07:15Z"}, "message": "Rollup merge of #83935 - SNCPlay42:param-default-impl-trait, r=varkor\n\nforbid `impl Trait` in generic param defaults\n\nFixes #83929\n\nForbid using `impl Trait` in the default types of generic parameters, e.g. `struct Foo<T = impl Trait>`. I assume this was never supposed to be allowed - it seems no UI test used it.\n\nNote that using `impl Trait` in this position did not hit a feature gate error; however, this *shouldn't* be a breaking change as any attempt to use it should have hit the ICE in #83929 and/or failed to provide a defining use of the `impl Trait`.", "tree": {"sha": "6b3706d27f73231c25bc192648b73e5346f42880", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b3706d27f73231c25bc192648b73e5346f42880"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d554385bbf94c063220319b856bfa7b6d9f63aaf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgbZJjCRBK7hj4Ov3rIwAAdHIIADVBYaoHtR7e9hEuLXMHx0+e\nPEsY79qgY0ZNhvocqcTDWreTL94PkrXL+c7ZfnOI82xe1h048XxkUTSBEsH+izcF\naTagwlZxhPpHXmWJDqdHXrt28zhDqGdWqIQvM1LjAbNgO4I27lU1PvqtfDKiCF2n\nK0nnXYzY/xHW/mPJHXlM1l9Ov/FYi8ICALyzWeQqm/SlkkApZFioixHSeHl3LLzZ\nFsWA/HKzrSFOS3ZMZchd2aZjea0e03DfNNT/MZnFgQzISbYqjLiy+y22vMr0AAdX\nH7GF70XSwe8NPmPOpjmGSEjVXDwRU8QexRgbeF6+JsCbdYYXjOmZ5U0nxdLUZwg=\n=nj6K\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b3706d27f73231c25bc192648b73e5346f42880\nparent b81c6cdb570957b5d6d4261b908f7e0364a67d81\nparent ee79f8312985a456391ee2c55c0f725a78b2a0a5\nauthor Dylan DPC <dylan.dpc@gmail.com> 1617793635 +0200\ncommitter GitHub <noreply@github.com> 1617793635 +0200\n\nRollup merge of #83935 - SNCPlay42:param-default-impl-trait, r=varkor\n\nforbid `impl Trait` in generic param defaults\n\nFixes #83929\n\nForbid using `impl Trait` in the default types of generic parameters, e.g. `struct Foo<T = impl Trait>`. I assume this was never supposed to be allowed - it seems no UI test used it.\n\nNote that using `impl Trait` in this position did not hit a feature gate error; however, this *shouldn't* be a breaking change as any attempt to use it should have hit the ICE in #83929 and/or failed to provide a defining use of the `impl Trait`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d554385bbf94c063220319b856bfa7b6d9f63aaf", "html_url": "https://github.com/rust-lang/rust/commit/d554385bbf94c063220319b856bfa7b6d9f63aaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d554385bbf94c063220319b856bfa7b6d9f63aaf/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b81c6cdb570957b5d6d4261b908f7e0364a67d81", "url": "https://api.github.com/repos/rust-lang/rust/commits/b81c6cdb570957b5d6d4261b908f7e0364a67d81", "html_url": "https://github.com/rust-lang/rust/commit/b81c6cdb570957b5d6d4261b908f7e0364a67d81"}, {"sha": "ee79f8312985a456391ee2c55c0f725a78b2a0a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee79f8312985a456391ee2c55c0f725a78b2a0a5", "html_url": "https://github.com/rust-lang/rust/commit/ee79f8312985a456391ee2c55c0f725a78b2a0a5"}], "stats": {"total": 200, "additions": 134, "deletions": 66}, "files": [{"sha": "be56f97af8a3d18d4307da8150ec3c56608197fb", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d554385bbf94c063220319b856bfa7b6d9f63aaf/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d554385bbf94c063220319b856bfa7b6d9f63aaf/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=d554385bbf94c063220319b856bfa7b6d9f63aaf", "patch": "@@ -2259,13 +2259,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                 let kind = hir::GenericParamKind::Type {\n                     default: default.as_ref().map(|x| {\n-                        self.lower_ty(\n-                            x,\n-                            ImplTraitContext::OtherOpaqueTy {\n-                                capturable_lifetimes: &mut FxHashSet::default(),\n-                                origin: hir::OpaqueTyOrigin::Misc,\n-                            },\n-                        )\n+                        self.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Other))\n                     }),\n                     synthetic: param\n                         .attrs"}, {"sha": "d9d2e3929b10c2cd3778b12f1527a6dbe814e09e", "filename": "src/test/ui/impl-trait/issues/issue-83929-impl-trait-in-generic-default.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d554385bbf94c063220319b856bfa7b6d9f63aaf/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d554385bbf94c063220319b856bfa7b6d9f63aaf/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.rs?ref=d554385bbf94c063220319b856bfa7b6d9f63aaf", "patch": "@@ -0,0 +1,12 @@\n+struct Foo<T = impl Copy>(T);\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+type Result<T, E = impl std::error::Error> = std::result::Result<T, E>;\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// should not cause ICE\n+fn x() -> Foo {\n+    Foo(0)\n+}\n+\n+fn main() -> Result<()> {}"}, {"sha": "eef6844adfccba365e4fb96ac8444d4819174068", "filename": "src/test/ui/impl-trait/issues/issue-83929-impl-trait-in-generic-default.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d554385bbf94c063220319b856bfa7b6d9f63aaf/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d554385bbf94c063220319b856bfa7b6d9f63aaf/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr?ref=d554385bbf94c063220319b856bfa7b6d9f63aaf", "patch": "@@ -0,0 +1,15 @@\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/issue-83929-impl-trait-in-generic-default.rs:1:16\n+   |\n+LL | struct Foo<T = impl Copy>(T);\n+   |                ^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/issue-83929-impl-trait-in-generic-default.rs:4:20\n+   |\n+LL | type Result<T, E = impl std::error::Error> = std::result::Result<T, E>;\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0562`."}, {"sha": "c3e21c81f03bea8a33e7253a6ac8252a42b156d7", "filename": "src/test/ui/impl-trait/where-allowed.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d554385bbf94c063220319b856bfa7b6d9f63aaf/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d554385bbf94c063220319b856bfa7b6d9f63aaf/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs?ref=d554385bbf94c063220319b856bfa7b6d9f63aaf", "patch": "@@ -56,12 +56,10 @@ fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n //~| ERROR nested `impl Trait` is not allowed\n-//~| ERROR cannot resolve opaque type\n \n // Disallowed\n fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n-//~| ERROR cannot resolve opaque type\n \n // Disallowed\n fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n@@ -120,7 +118,6 @@ trait DummyTrait {\n impl DummyTrait for () {\n     type Out = impl Debug;\n     //~^ ERROR `impl Trait` in type aliases is unstable\n-    //~^^ ERROR could not find defining uses\n \n     fn in_trait_impl_parameter(_: impl Debug) { }\n     // Allowed\n@@ -156,7 +153,6 @@ extern \"C\" fn in_extern_fn_return() -> impl Debug {\n \n type InTypeAlias<R> = impl Debug;\n //~^ ERROR `impl Trait` in type aliases is unstable\n-//~^^ ERROR could not find defining uses\n \n type InReturnInTypeAlias<R> = fn() -> impl Debug;\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n@@ -218,6 +214,34 @@ fn in_Fn_return_in_fn_where_clause<T>()\n {\n }\n \n+// Disallowed\n+struct InStructGenericParamDefault<T = impl Debug>(T);\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Disallowed\n+enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Disallowed\n+trait InTraitGenericParamDefault<T = impl Debug> {}\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Disallowed\n+type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Disallowed\n+impl <T = impl Debug> T {}\n+//~^ ERROR defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+//~| WARNING this was previously accepted by the compiler but is being phased out\n+//~| ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n+// Disallowed\n+fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n+//~^ ERROR defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+//~| WARNING this was previously accepted by the compiler but is being phased out\n+//~| ERROR `impl Trait` not allowed outside of function and inherent method return types\n+\n fn main() {\n     let _in_local_variable: impl Fn() = || {};\n     //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types"}, {"sha": "09ec4d5b202c36a498414a771deb3cbc15455e54", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 78, "deletions": 55, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/d554385bbf94c063220319b856bfa7b6d9f63aaf/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d554385bbf94c063220319b856bfa7b6d9f63aaf/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=d554385bbf94c063220319b856bfa7b6d9f63aaf", "patch": "@@ -17,7 +17,7 @@ LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic\n    |                                                 outer `impl Trait`\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:121:16\n+  --> $DIR/where-allowed.rs:119:16\n    |\n LL |     type Out = impl Debug;\n    |                ^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     type Out = impl Debug;\n    = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:157:23\n+  --> $DIR/where-allowed.rs:154:23\n    |\n LL | type InTypeAlias<R> = impl Debug;\n    |                       ^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL | type InTypeAlias<R> = impl Debug;\n    = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:161:39\n+  --> $DIR/where-allowed.rs:157:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n@@ -110,184 +110,207 @@ LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic\n    |                                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:62:59\n+  --> $DIR/where-allowed.rs:61:59\n    |\n LL | fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n    |                                                           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:67:38\n+  --> $DIR/where-allowed.rs:65:38\n    |\n LL | fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:71:40\n+  --> $DIR/where-allowed.rs:69:40\n    |\n LL | fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:84:32\n+  --> $DIR/where-allowed.rs:82:32\n    |\n LL | struct InBraceStructField { x: impl Debug }\n    |                                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:88:41\n+  --> $DIR/where-allowed.rs:86:41\n    |\n LL | struct InAdtInBraceStructField { x: Vec<impl Debug> }\n    |                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:92:27\n+  --> $DIR/where-allowed.rs:90:27\n    |\n LL | struct InTupleStructField(impl Debug);\n    |                           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:97:25\n+  --> $DIR/where-allowed.rs:95:25\n    |\n LL |     InBraceVariant { x: impl Debug },\n    |                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:99:20\n+  --> $DIR/where-allowed.rs:97:20\n    |\n LL |     InTupleVariant(impl Debug),\n    |                    ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:110:23\n+  --> $DIR/where-allowed.rs:108:23\n    |\n LL |     fn in_return() -> impl Debug;\n    |                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:128:34\n+  --> $DIR/where-allowed.rs:125:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n    |                                  ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:141:33\n+  --> $DIR/where-allowed.rs:138:33\n    |\n LL |     fn in_foreign_parameters(_: impl Debug);\n    |                                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:144:31\n+  --> $DIR/where-allowed.rs:141:31\n    |\n LL |     fn in_foreign_return() -> impl Debug;\n    |                               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:161:39\n+  --> $DIR/where-allowed.rs:157:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:166:16\n+  --> $DIR/where-allowed.rs:162:16\n    |\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:171:24\n+  --> $DIR/where-allowed.rs:167:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:176:6\n+  --> $DIR/where-allowed.rs:172:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:182:24\n+  --> $DIR/where-allowed.rs:178:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:188:11\n+  --> $DIR/where-allowed.rs:184:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:195:15\n+  --> $DIR/where-allowed.rs:191:15\n    |\n LL |     where Vec<impl Debug>: Debug\n    |               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:202:24\n+  --> $DIR/where-allowed.rs:198:24\n    |\n LL |     where T: PartialEq<impl Debug>\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:209:17\n+  --> $DIR/where-allowed.rs:205:17\n    |\n LL |     where T: Fn(impl Debug)\n    |                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:216:22\n+  --> $DIR/where-allowed.rs:212:22\n    |\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:222:29\n+  --> $DIR/where-allowed.rs:218:40\n+   |\n+LL | struct InStructGenericParamDefault<T = impl Debug>(T);\n+   |                                        ^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/where-allowed.rs:222:36\n+   |\n+LL | enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n+   |                                    ^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/where-allowed.rs:226:38\n+   |\n+LL | trait InTraitGenericParamDefault<T = impl Debug> {}\n+   |                                      ^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/where-allowed.rs:230:41\n+   |\n+LL | type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n+   |                                         ^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/where-allowed.rs:234:11\n+   |\n+LL | impl <T = impl Debug> T {}\n+   |           ^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/where-allowed.rs:240:40\n+   |\n+LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n+   |                                        ^^^^^^^^^^\n+\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n+  --> $DIR/where-allowed.rs:246:29\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:224:46\n+  --> $DIR/where-allowed.rs:248:46\n    |\n LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n    |                                              ^^^^^^^^^\n \n-error[E0720]: cannot resolve opaque type\n-  --> $DIR/where-allowed.rs:56:49\n-   |\n-LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n-   |                                                 ^^^^^^^^^^^^^^^^^^^   -------- this returned value is of `!` type\n-   |                                                 |\n-   |                                                 cannot resolve opaque type\n-   |\n-   = help: this error will resolve once the item's body returns a concrete type\n-\n-error[E0720]: cannot resolve opaque type\n-  --> $DIR/where-allowed.rs:62:46\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/where-allowed.rs:234:7\n    |\n-LL | fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^   -------- this returned value is of `!` type\n-   |                                              |\n-   |                                              cannot resolve opaque type\n+LL | impl <T = impl Debug> T {}\n+   |       ^\n    |\n-   = help: this error will resolve once the item's body returns a concrete type\n+   = note: `#[deny(invalid_type_param_default)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n \n-error: could not find defining uses\n-  --> $DIR/where-allowed.rs:121:16\n+error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/where-allowed.rs:240:36\n    |\n-LL |     type Out = impl Debug;\n-   |                ^^^^^^^^^^\n-\n-error: could not find defining uses\n-  --> $DIR/where-allowed.rs:157:23\n+LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n+   |                                    ^\n    |\n-LL | type InTypeAlias<R> = impl Debug;\n-   |                       ^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #36887 <https://github.com/rust-lang/rust/issues/36887>\n \n-error: aborting due to 44 previous errors\n+error: aborting due to 48 previous errors\n \n-Some errors have detailed explanations: E0562, E0658, E0666, E0720.\n+Some errors have detailed explanations: E0562, E0658, E0666.\n For more information about an error, try `rustc --explain E0562`."}]}