{"sha": "24668d7578d89406eaf1a6db4502360e73e2a8fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NjY4ZDc1NzhkODk0MDZlYWYxYTZkYjQ1MDIzNjBlNzNlMmE4ZmQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2012-01-31T22:09:48Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@pobox.com", "date": "2012-01-31T22:09:48Z"}, "message": "Merge pull request #1713 from killerswan/manpg\n\nUpdating the manpage and usage message", "tree": {"sha": "0b59f4a694dfbb6ce64e711c27828e3662c7279f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b59f4a694dfbb6ce64e711c27828e3662c7279f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24668d7578d89406eaf1a6db4502360e73e2a8fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24668d7578d89406eaf1a6db4502360e73e2a8fd", "html_url": "https://github.com/rust-lang/rust/commit/24668d7578d89406eaf1a6db4502360e73e2a8fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24668d7578d89406eaf1a6db4502360e73e2a8fd/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb236b0bb6c274ac9d13f22d6a5f2013b26f48de", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb236b0bb6c274ac9d13f22d6a5f2013b26f48de", "html_url": "https://github.com/rust-lang/rust/commit/fb236b0bb6c274ac9d13f22d6a5f2013b26f48de"}, {"sha": "8abcafe7ad1f3bdf48a0ba73a2d18d80fdeabfde", "url": "https://api.github.com/repos/rust-lang/rust/commits/8abcafe7ad1f3bdf48a0ba73a2d18d80fdeabfde", "html_url": "https://github.com/rust-lang/rust/commit/8abcafe7ad1f3bdf48a0ba73a2d18d80fdeabfde"}], "stats": {"total": 248, "additions": 127, "deletions": 121}, "files": [{"sha": "5780bad00c1b9f63c73591b146cadb54f91aa152", "filename": "man/rustc.1", "status": "modified", "additions": 83, "deletions": 86, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/24668d7578d89406eaf1a6db4502360e73e2a8fd/man%2Frustc.1", "raw_url": "https://github.com/rust-lang/rust/raw/24668d7578d89406eaf1a6db4502360e73e2a8fd/man%2Frustc.1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/man%2Frustc.1?ref=24668d7578d89406eaf1a6db4502360e73e2a8fd", "patch": "@@ -1,137 +1,134 @@\n-.TH RUSTC \"1\" \"October 2011\" \"Rust\" \"User Commands\"\n+.TH RUSTC \"1\" \"January 2012\" \"Rust\" \"User Commands\"\n+\n .SH NAME\n rustc \\- rust compiler\n+\n .SH SYNOPSIS\n rustc [\\fB-h\\fR] [\\fB-v\\fR] [\\fB-o\\fR \\fIoutfile\\fR]\n       [\\fB--lib\\fR] [\\fB--static\\fR] [\\fB-L\\fR \\fIpath\\fR]\n       [\\fB-g\\fR] [\\fB-S\\fR] [\\fB-c\\fR] <\\fIinput\\fR>\n .PP\n Only the most commonly-used options are listed here. All options are listed and\n described below.\n+\n .SH DESCRIPTION\n This program is a compiler for the Rust language, available at\n <\\fBhttps://www.rust-lang.org\\fR>.\n+\n .SH OPTIONS\n .TP\n-\\fB-h, --help\\fR:\n-Display help.\n+\\fB--bin\\fR\n+Compile an executable crate (default)\n .TP\n-\\fB-v, --version\\fR:\n-Display version information.\n+\\fB-c\\fR\n+Compile and assemble, but do not link\n .TP\n-\\fB-o\\fR \\fIfilename\\fR:\n-Write output to \\fIfilename\\fR. The default\n-output filename for \\fBfoo.rs\\fR is otherwise \\fBfoo\\fR plus any\n-platform-specific extension (when compiling a binary), a\n-platform-specific name, e.g. \\fBlibfoo.so\\fR (when compiling a\n-library), \\fBfoo.o\\fR (when using \\fB-c\\fR), \\fBfoo.s\\fR (when using\n-\\fB-S\\fR) or \\fBfoo.bc\\fR (when using \\fB--emit-llvm\\fR), and \\fBfoo.ll\\fR\n-(when using both \\fB-S\\fR and \\fB--emit-llvm\\fR).\n+\\fB--cfg <cfgspec>\\fR\n+Configure the compilation environment\n .TP\n-\\fB--lib\\fR:\n-Compile and link a library crate into a shared object.\n+\\fB--emit-llvm\\fR\n+Produce an LLVM bitcode file\n .TP\n-\\fB--static\\fR:\n-Produce a statically-linked binary, or generate a static\n-library.\n+\\fB-g\\fR\n+Produce debug info\n .TP\n-\\fB--pretty\\fR \\fI[type]\\fR:\n-Pretty-print the input. Valid \\fItype\\fRs are:\n-.RS\n+\\fB--gc\\fR\n+Garbage collect shared data (experimental/temporary)\n .TP\n-\\fBnormal\\fR: Un-annotated source (default).\n+\\fB-h --help\\fR\n+Display this message\n .TP\n-\\fBexpanded\\fR: Crates expanded.\n+\\fB-L <path>\\fR\n+Add a directory to the library search path\n .TP\n-\\fBtyped\\fR: Crates expanded, all expressions annotated with types.\n+\\fB--lib\\fR\n+Compile a library crate\n .TP\n-\\fBidentified\\fR: Fully parenthesized, ast nodes and blocks annotated with IDs.\n-.RE\n+\\fB--ls\\fR\n+List the symbols defined by a compiled librar crate\n .TP\n-\\fB--ls\\fR:\n-Lists symbols defined by the specified \\fBcompiled\\fR library.\n+\\fB--no-asm-comments\\fR\n+Do not add comments into the assembly source\n .TP\n-\\fB-L\\fR \\fIpath\\fR:\n-Adds \\fIpath\\fR to the library search path.\n+\\fB--no-lint-ctypes\\fR\n+Suppress warnings for possibly incorrect ctype usage\n .TP\n-\\fB--noverify\\fR:\n-Disables LLVM verification pass, which does sanity checking of\n-bitcode generated by rustc. Using this option gives a slight speedup, at the\n-cost of vastly reduced ability to catch rustc bugs. See\n-<\\fBhttp://llvm.org/docs/Passes.html\\fR> for a list of properties checked.\n+\\fB--no-trans\\fR\n+Run all passes except translation; no output\n .TP\n-\\fB--parse-only\\fR:\n-Run the parse phase only. If parsing succeeds, produces no\n-output.\n+\\fB--no-verify\\fR\n+Suppress LLVM verification step (slight speedup)\n+(see http://llvm.org/docs/Passes.html for detail)\n .TP\n-\\fB--no-trans\\fR:\n-Run all passes except translation. Produces no output.\n+\\fB-O\\fR\n+Equivalent to --opt-level=2\n .TP\n-\\fB-g\\fR:\n-Produce debug info.\n+\\fB-o <filename>\\fR\n+Write output to <filename>\n .TP\n-\\fB--opt-level\\fR \\fIlevel\\fR:\n-Set optimization level to \\fIlevel\\fR.\n+\\fB--opt-level <lvl>\\fR\n+Optimize with possible levels 0-3\n .TP\n-\\fB-O\\fR:\n-Equal to --opt-level=2\n+\\fB--out-dir <dir>\\fR\n+Write output to compiler-chosen filename in <dir>\n .TP\n-\\fB-S\\fR:\n-Compile to assembly, but do not assemble or link.\n+\\fB--parse-only\\fR\n+Parse only; do not compile, assemble, or link\n .TP\n-\\fB-c\\fR:\n-Compile and assemble, but do not link.\n+\\fB--pretty [type]\\fR\n+Pretty-print the input instead of compiling; valid types are: \\fBnormal\\fR (un-annotated source), \\fBexpanded\\fR (crates expanded), \\fBtyped\\fR (crates expanded, with type annotations), or \\fBidentified\\fR (fully parenthesized, AST nodes and blocks with IDs)\n .TP\n-\\fB--emit-llvm\\fR:\n-Generate output files in LLVM format. When used with \\fB-S\\fR this generate LLVM\n-intermediate language assembly files, otherwise this generates LLVM bitcode\n-format object files. \n+\\fB-S\\fR\n+Compile only; do not assemble or link\n .TP\n-\\fB--save-temps\\fR:\n-For foo.rs, save generated bitcode before optimization to\n-\\fBfoo.bc\\fR, bitcode after optimization to \\fBfoo.opt.bc\\fR, and the generated\n-object file to \\fBfoo.o\\fR.\n+\\fB--save-temps\\fR\n+Write intermediate files (.bc, .opt.bc, .o) in addition to normal output\n .TP\n-\\fB--stats\\fR:\n-Print statistics about compilation.\n+\\fB--static\\fR\n+Use or produce static libraries or binaries\n .TP\n-\\fB--cfg\\fR \\fIcfgspec\\fR:\n-Provide a crate config spec.\n+\\fB--stats\\fR\n+Print compilation statistics\n .TP\n-\\fB--time-passes\\fR:\n-Print runtimes of compilation phases.\n+\\fB--sysroot <path>\\fR\n+Override the system root\n .TP\n-\\fB--time-llvm-passes\\fR:\n-Print runtimes of llvm phases.\n+\\fB--test\\fR\n+Build test harness\n .TP\n-\\fB--sysroot\\fR \\fIpath\\fR:\n-Set the system root. Default is the directory above\n-rustc's.\n+\\fB--target <triple>\\fR\n+Target cpu-manufacturer-kernel[-os] to compile for (default: host triple)\n+(see http://sources.redhat.com/autobook/autobook/autobook_17.html for detail)\n .TP\n-\\fB--target\\fR \\fIgnu-config-name\\fR:\n-Set the compilation target, which is a\n-string of the form \\fBcpu\\fR-\\fBmanufacturer\\fR-\\fBkernel\\fR[-\\fBos\\fR]. Example\n-values include \"i686-unknown-linux-gnu\" and \"mips-idt-ecoff\"; see\n-<\\fBhttp://sources.redhat.com/autobook/autobook/autobook_17.html\\fR>. If not\n-supplied, the host triple is used (see \\fB--version\\fR output).\n+\\fB--time-passes\\fR\n+Time the individual phases of the compiler\n .TP\n-\\fB--test\\fR:\n-Build a test harness.\n+\\fB--time-llvm-passes\\fR\n+Time the individual phases of the LLVM backend\n .TP\n-\\fB--gc\\fR:\n-\\fBEXPERIMENTAL\\fR. Garbage-collect shared data.\n+\\fB-v --version\\fR\n+Print version info and exit\n .TP\n-\\fB--warn-unused-imports\\fR:\n-Warn about unnecessary imports.\n-.TP\n-\\fB--no-lint-ctypes\\fR:\n-Disables checking of possibly incorrect usage of Rust int or uint types in\n-native function declarations, where types defined in libcore::ctypes should be\n-used instead. Ctypes check emits warnings by default.\n+\\fB--warn-unused-imports\\fR\n+Warn about unnecessary imports\n+\n+.SH \"EXAMPLES\"\n+To build an executable from a source file with a main function:\n+    $ rustc -o hello hello.rs\n+\n+To build a library from a source file:\n+    $ rustc --lib hello-lib.rs\n+\n+To build either with a crate (.rc) file:\n+    $ rustc hello.rc\n+\n .SH \"BUGS\"\n See \\fBhttps://github.com/mozilla/rust/issues\\fR for a list of known bugs.\n+\n .SH \"AUTHOR\"\n See \\fBAUTHORS.txt\\fR in the rust source distribution. Graydon Hoare\n <\\fIgraydon@mozilla.com\\fR> is the project leader.\n+\n .SH \"COPYRIGHT\"\n See \\fBLICENSE.txt\\fR in the rust source distribution.\n+"}, {"sha": "f0e535d36fdb3bfe6fe46e9e12a72f547a648948", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 44, "deletions": 35, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/24668d7578d89406eaf1a6db4502360e73e2a8fd/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24668d7578d89406eaf1a6db4502360e73e2a8fd/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=24668d7578d89406eaf1a6db4502360e73e2a8fd", "patch": "@@ -21,43 +21,52 @@ fn version(argv0: str) {\n }\n \n fn usage(argv0: str) {\n-    io::stdout().write_str(#fmt[\"usage: %s [options] <input>\\n\", argv0] +\n+    io::stdout().write_str(#fmt[\"Usage: %s [options] <input>\\n\", argv0] +\n                                \"\n-options:\n-\n-    -h --help          display this message\n-    -v --version       print version info and exit\n-\n-    -o <filename>      write output to <filename>\n-    --out-dir <dir>    write output to compiler-chosen filename in <dir>\n-    --lib              compile a library crate\n-    --bin              compile an executable crate (default)\n-    --static           use or produce static libraries\n-    --pretty [type]    pretty-print the input instead of compiling\n-    --ls               list the symbols defined by a crate file\n-    -L <path>          add a directory to the library search path\n-    --no-verify        suppress LLVM verification step (slight speedup)\n-    --parse-only       parse only; do not compile, assemble, or link\n-    --no-trans         run all passes except translation; no output\n-    -g                 produce debug info\n-    --opt-level <lvl>  optimize with possible levels 0-3\n-    -O                 equivalent to --opt-level=2\n-    -S                 compile only; do not assemble or link\n-    --no-asm-comments  do not add comments into the assembly source\n-    -c                 compile and assemble, but do not link\n-    --emit-llvm        produce an LLVM bitcode file\n-    --save-temps       write intermediate files in addition to normal output\n-    --stats            gather and report various compilation statistics\n-    --cfg <cfgspec>    configure the compilation environment\n-    --time-passes      time the individual phases of the compiler\n-    --time-llvm-passes time the individual phases of the LLVM backend\n-    --sysroot <path>   override the system root\n-    --target <triple>  target to compile for (default: host triple)\n-    --test             build test harness\n-    --gc               garbage collect shared data (experimental/temporary)\n+Options:\n+\n+    --bin              Compile an executable crate (default)\n+    -c                 Compile and assemble, but do not link\n+    --cfg <cfgspec>    Configure the compilation environment\n+    --emit-llvm        Produce an LLVM bitcode file\n+    -g                 Produce debug info\n+    --gc               Garbage collect shared data (experimental/temporary)\n+    -h --help          Display this message\n+    -L <path>          Add a directory to the library search path\n+    --lib              Compile a library crate\n+    --ls               List the symbols defined by a compiled library crate\n+    --no-asm-comments  Do not add comments into the assembly source\n+    --no-lint-ctypes   Suppress warnings for possibly incorrect ctype usage\n+    --no-trans         Run all passes except translation; no output\n+    --no-verify        Suppress LLVM verification step (slight speedup)\n+                       (see http://llvm.org/docs/Passes.html for detail)\n+    -O                 Equivalent to --opt-level=2\n+    -o <filename>      Write output to <filename>\n+    --opt-level <lvl>  Optimize with possible levels 0-3\n+    --out-dir <dir>    Write output to compiler-chosen filename in <dir>\n+    --parse-only       Parse only; do not compile, assemble, or link\n+    --pretty [type]    Pretty-print the input instead of compiling;\n+                       valid types are: normal (un-annotated source), \n+                       expanded (crates expanded), typed (crates expanded,\n+                       with type annotations), or identified (fully\n+                       parenthesized, AST nodes and blocks with IDs)\n+    -S                 Compile only; do not assemble or link\n+    --save-temps       Write intermediate files (.bc, .opt.bc, .o)\n+                       in addition to normal output\n+    --static           Use or produce static libraries or binaries\n+    --stats            Print compilation statistics\n+    --sysroot <path>   Override the system root\n+    --test             Build a test harness\n+    --target <triple>  Target cpu-manufacturer-kernel[-os] to compile for\n+                       (default: host triple)\n+                       (see http://sources.redhat.com/autobook/autobook/\n+                       autobook_17.html for detail)\n+\n+    --time-passes      Time the individual phases of the compiler\n+    --time-llvm-passes Time the individual phases of the LLVM backend\n+    -v --version       Print version info and exit\n     --warn-unused-imports\n-                       warn about unnecessary imports\n-    --no-lint-ctypes   suppress lint-style ctypes usage check\n+                       Warn about unnecessary imports\n \n \");\n }"}]}