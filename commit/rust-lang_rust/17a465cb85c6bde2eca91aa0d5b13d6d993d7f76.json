{"sha": "17a465cb85c6bde2eca91aa0d5b13d6d993d7f76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YTQ2NWNiODVjNmJkZTJlY2E5MWFhMGQ1YjEzZDZkOTkzZDdmNzY=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-19T19:58:03Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-20T03:08:39Z"}, "message": "Avoid unneeded else branches", "tree": {"sha": "0095628b3758df7324812e80aba384c66974b33d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0095628b3758df7324812e80aba384c66974b33d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17a465cb85c6bde2eca91aa0d5b13d6d993d7f76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17a465cb85c6bde2eca91aa0d5b13d6d993d7f76", "html_url": "https://github.com/rust-lang/rust/commit/17a465cb85c6bde2eca91aa0d5b13d6d993d7f76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17a465cb85c6bde2eca91aa0d5b13d6d993d7f76/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b549d3c9d4c23c7b0224fd3099ccd5f7eb83016", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b549d3c9d4c23c7b0224fd3099ccd5f7eb83016", "html_url": "https://github.com/rust-lang/rust/commit/9b549d3c9d4c23c7b0224fd3099ccd5f7eb83016"}], "stats": {"total": 35, "additions": 13, "deletions": 22}, "files": [{"sha": "436ac30ffb42ed9b3c131f2f443102d3c8196ca9", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/17a465cb85c6bde2eca91aa0d5b13d6d993d7f76/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17a465cb85c6bde2eca91aa0d5b13d6d993d7f76/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=17a465cb85c6bde2eca91aa0d5b13d6d993d7f76", "patch": "@@ -429,30 +429,21 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n     fn gather_init(&mut self, place: PlaceRef<'cx, 'tcx>, kind: InitKind) {\n         debug!(\"gather_init({:?}, {:?})\", self.loc, place);\n \n-        let place = match place.projection {\n-            // Check if we are assigning into a field of a union, if so, lookup the place\n-            // of the union so it is marked as initialized again.\n-            Some(box Projection {\n-                base: proj_base,\n-                elem: ProjectionElem::Field(_, _),\n-            }) => {\n-                if let ty::Adt(def, _) =\n-                    Place::ty_from(place.base, proj_base, self.builder.body, self.builder.tcx)\n-                        .ty\n-                        .sty\n-                {\n-                    if def.is_union() {\n-                        PlaceRef { base: place.base, projection: proj_base }\n-                    } else {\n-                        place\n-                    }\n-                } else {\n-                    place\n+        let mut place = place;\n+\n+        // Check if we are assigning into a field of a union, if so, lookup the place\n+        // of the union so it is marked as initialized again.\n+        if let Some(box Projection { base: proj_base, elem: ProjectionElem::Field(_, _) }) =\n+            place.projection\n+        {\n+            if let ty::Adt(def, _) =\n+                Place::ty_from(place.base, proj_base, self.builder.body, self.builder.tcx).ty.sty\n+            {\n+                if def.is_union() {\n+                    place = PlaceRef { base: place.base, projection: proj_base }\n                 }\n             }\n-\n-            _ => place\n-        };\n+        }\n \n         if let LookupResult::Exact(path) = self.builder.data.rev_lookup.find(place) {\n             let init = self.builder.data.inits.push(Init {"}]}