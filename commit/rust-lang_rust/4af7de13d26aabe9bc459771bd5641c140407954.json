{"sha": "4af7de13d26aabe9bc459771bd5641c140407954", "node_id": "C_kwDOAAsO6NoAKDRhZjdkZTEzZDI2YWFiZTliYzQ1OTc3MWJkNTY0MWMxNDA0MDc5NTQ", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-11-15T10:27:19Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-11-15T14:02:03Z"}, "message": "initial prototype of the tool to generate copyright notices", "tree": {"sha": "5374bab7b7b1e267ba0e7595aed994e91ff53280", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5374bab7b7b1e267ba0e7595aed994e91ff53280"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4af7de13d26aabe9bc459771bd5641c140407954", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmNzm9wACgkQzXazX3c0\ndp5AiBAAmS9hKXFDO6i8huGaQPpCVAx5KUNU8lr6SHEf51ItuOm4pkUyCaiThuF2\nghHcnpUTA+xFO40b2IbrCFp2uK8SCwAxemjbPSHOus2LiAZM+0NfSNH3FEYbr7OA\na1YMQBYO3fSuM4NSD3rShc1ZfM0CxgQOx+FjEOz3pdaOpHoMxnKvyAgwbXURkBv8\ngZnfbAIU9orxGffjrJbvWvWdCc1DF4QDQXJcCvfLTbipOI2vwlwL+CLhAvp7IJmY\nxjJ0Qmoo0f1Rfxh6NXds7/ZVzh99H0dAYXFceW06U9B2rog8UqVGaBsOrlMFBDUj\nivM9gSeu206FcmEnnb87PswOBAmzVBV7JWKmsM5m7S2m7/LAnzotiVWwFE0U7Rln\nzjwh50UfNK4OVlKG9FepEQ7R3Q+ybJFiYJUArUgZJRLpM1vC3JNX1EpPtoSlUzLA\nDhMxR4WjIv7IdZmYknsWQw6OUOsRVNr0W1plHmDgcPrdjzWzKkaKg2/3ktQL38+W\nY+uRjCN3zl5N2p2KYhLR1u6Ebhix/6l8BSahsWHdZJTmP0eaB/EBxDedQCuIKhP0\n/K/I7qvb/t4B37wkPKz50WCKLD5/XpaDM2hT8yY+v3lyfjUplzYhZKjhoSPymQl3\nVJoMwQ3Ewj0aAYE2vmMh9RM+Mo5ijFuxzpPIC5h9fhv/x6LNzmc=\n=Uct0\n-----END PGP SIGNATURE-----", "payload": "tree 5374bab7b7b1e267ba0e7595aed994e91ff53280\nparent 13efb20846dc3b3916e44c67ebd4141a39c54d9b\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1668508039 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1668520923 +0100\n\ninitial prototype of the tool to generate copyright notices\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4af7de13d26aabe9bc459771bd5641c140407954", "html_url": "https://github.com/rust-lang/rust/commit/4af7de13d26aabe9bc459771bd5641c140407954", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4af7de13d26aabe9bc459771bd5641c140407954/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13efb20846dc3b3916e44c67ebd4141a39c54d9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/13efb20846dc3b3916e44c67ebd4141a39c54d9b", "html_url": "https://github.com/rust-lang/rust/commit/13efb20846dc3b3916e44c67ebd4141a39c54d9b"}], "stats": {"total": 147, "additions": 147, "deletions": 0}, "files": [{"sha": "8cde96b519f7c3223c6b4b9eadd8f95f37c35366", "filename": "Cargo.lock", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4af7de13d26aabe9bc459771bd5641c140407954/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4af7de13d26aabe9bc459771bd5641c140407954/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4af7de13d26aabe9bc459771bd5641c140407954", "patch": "@@ -1498,6 +1498,15 @@ dependencies = [\n  \"termcolor\",\n ]\n \n+[[package]]\n+name = \"generate-copyright\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"anyhow\",\n+ \"serde\",\n+ \"serde_json\",\n+]\n+\n [[package]]\n name = \"generic-array\"\n version = \"0.14.4\""}, {"sha": "000c10a1f906d6c161f1835651754679e35c3bd9", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4af7de13d26aabe9bc459771bd5641c140407954/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4af7de13d26aabe9bc459771bd5641c140407954/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=4af7de13d26aabe9bc459771bd5641c140407954", "patch": "@@ -40,6 +40,7 @@ members = [\n   \"src/tools/replace-version-placeholder\",\n   \"src/tools/lld-wrapper\",\n   \"src/tools/collect-license-metadata\",\n+  \"src/tools/generate-copyright\",\n ]\n \n exclude = ["}, {"sha": "0a311529bcaee52aaec3f466dee04530a373a687", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4af7de13d26aabe9bc459771bd5641c140407954/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af7de13d26aabe9bc459771bd5641c140407954/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=4af7de13d26aabe9bc459771bd5641c140407954", "patch": "@@ -754,6 +754,7 @@ impl<'a> Builder<'a> {\n                 run::ReplaceVersionPlaceholder,\n                 run::Miri,\n                 run::CollectLicenseMetadata,\n+                run::GenerateCopyright,\n             ),\n             // These commands either don't use paths, or they're special-cased in Build::build()\n             Kind::Clean | Kind::Format | Kind::Setup => vec![],"}, {"sha": "05de51f8cc57933b886fb6a7b1d2436e4c728316", "filename": "src/bootstrap/run.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4af7de13d26aabe9bc459771bd5641c140407954/src%2Fbootstrap%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af7de13d26aabe9bc459771bd5641c140407954/src%2Fbootstrap%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frun.rs?ref=4af7de13d26aabe9bc459771bd5641c140407954", "patch": "@@ -222,3 +222,33 @@ impl Step for CollectLicenseMetadata {\n         dest\n     }\n }\n+\n+#[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct GenerateCopyright;\n+\n+impl Step for GenerateCopyright {\n+    type Output = PathBuf;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/generate-copyright\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(GenerateCopyright);\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) -> Self::Output {\n+        let license_metadata = builder.ensure(CollectLicenseMetadata);\n+\n+        // Temporary location, it will be moved to the proper one once it's accurate.\n+        let dest = builder.out.join(\"COPYRIGHT.md\");\n+\n+        let mut cmd = builder.tool_cmd(Tool::GenerateCopyright);\n+        cmd.env(\"LICENSE_METADATA\", &license_metadata);\n+        cmd.env(\"DEST\", &dest);\n+        builder.run(&mut cmd);\n+\n+        dest\n+    }\n+}"}, {"sha": "e0be4c432f168baceeb1a32666d3a1c482d94e90", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4af7de13d26aabe9bc459771bd5641c140407954/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af7de13d26aabe9bc459771bd5641c140407954/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=4af7de13d26aabe9bc459771bd5641c140407954", "patch": "@@ -381,6 +381,7 @@ bootstrap_tool!(\n     BumpStage0, \"src/tools/bump-stage0\", \"bump-stage0\";\n     ReplaceVersionPlaceholder, \"src/tools/replace-version-placeholder\", \"replace-version-placeholder\";\n     CollectLicenseMetadata, \"src/tools/collect-license-metadata\", \"collect-license-metadata\";\n+    GenerateCopyright, \"src/tools/generate-copyright\", \"generate-copyright\";\n );\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, Ord, PartialOrd)]"}, {"sha": "899ef0f8a6c2650012a89523124e7f04baa96967", "filename": "src/tools/generate-copyright/Cargo.toml", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4af7de13d26aabe9bc459771bd5641c140407954/src%2Ftools%2Fgenerate-copyright%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4af7de13d26aabe9bc459771bd5641c140407954/src%2Ftools%2Fgenerate-copyright%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fgenerate-copyright%2FCargo.toml?ref=4af7de13d26aabe9bc459771bd5641c140407954", "patch": "@@ -0,0 +1,11 @@\n+[package]\n+name = \"generate-copyright\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+\n+# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n+\n+[dependencies]\n+anyhow = \"1.0.65\"\n+serde = { version = \"1.0.147\", features = [\"derive\"] }\n+serde_json = \"1.0.85\""}, {"sha": "d172c9e157bc859a4df2858bde58a5cd6e13d275", "filename": "src/tools/generate-copyright/src/main.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/4af7de13d26aabe9bc459771bd5641c140407954/src%2Ftools%2Fgenerate-copyright%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4af7de13d26aabe9bc459771bd5641c140407954/src%2Ftools%2Fgenerate-copyright%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fgenerate-copyright%2Fsrc%2Fmain.rs?ref=4af7de13d26aabe9bc459771bd5641c140407954", "patch": "@@ -0,0 +1,94 @@\n+use anyhow::Error;\n+use std::io::Write;\n+use std::path::PathBuf;\n+\n+fn main() -> Result<(), Error> {\n+    let dest = env_path(\"DEST\")?;\n+    let license_metadata = env_path(\"LICENSE_METADATA\")?;\n+\n+    let metadata: Metadata = serde_json::from_slice(&std::fs::read(&license_metadata)?)?;\n+\n+    let mut buffer = Vec::new();\n+    render_recursive(&metadata.files, &mut buffer, 0)?;\n+\n+    std::fs::write(&dest, &buffer)?;\n+\n+    Ok(())\n+}\n+\n+fn render_recursive(node: &Node, buffer: &mut Vec<u8>, depth: usize) -> Result<(), Error> {\n+    let prefix = std::iter::repeat(\"> \").take(depth + 1).collect::<String>();\n+\n+    match node {\n+        Node::Root { childs } => {\n+            for child in childs {\n+                render_recursive(child, buffer, depth)?;\n+            }\n+        }\n+        Node::Directory { name, childs, license } => {\n+            render_license(&prefix, std::iter::once(name), license, buffer)?;\n+            if !childs.is_empty() {\n+                writeln!(buffer, \"{prefix}\")?;\n+                writeln!(buffer, \"{prefix}*Exceptions:*\")?;\n+                for child in childs {\n+                    writeln!(buffer, \"{prefix}\")?;\n+                    render_recursive(child, buffer, depth + 1)?;\n+                }\n+            }\n+        }\n+        Node::FileGroup { names, license } => {\n+            render_license(&prefix, names.iter(), license, buffer)?;\n+        }\n+        Node::File { name, license } => {\n+            render_license(&prefix, std::iter::once(name), license, buffer)?;\n+        }\n+    }\n+\n+    Ok(())\n+}\n+\n+fn render_license<'a>(\n+    prefix: &str,\n+    names: impl Iterator<Item = &'a String>,\n+    license: &License,\n+    buffer: &mut Vec<u8>,\n+) -> Result<(), Error> {\n+    for name in names {\n+        writeln!(buffer, \"{prefix}**`{name}`**  \")?;\n+    }\n+    writeln!(buffer, \"{prefix}License: `{}`  \", license.spdx)?;\n+    for (i, copyright) in license.copyright.iter().enumerate() {\n+        let suffix = if i == license.copyright.len() - 1 { \"\" } else { \"  \" };\n+        writeln!(buffer, \"{prefix}Copyright: {copyright}{suffix}\")?;\n+    }\n+\n+    Ok(())\n+}\n+\n+#[derive(serde::Deserialize)]\n+struct Metadata {\n+    files: Node,\n+}\n+\n+#[derive(serde::Deserialize)]\n+#[serde(rename_all = \"kebab-case\", tag = \"type\")]\n+pub(crate) enum Node {\n+    Root { childs: Vec<Node> },\n+    Directory { name: String, childs: Vec<Node>, license: License },\n+    File { name: String, license: License },\n+    FileGroup { names: Vec<String>, license: License },\n+}\n+\n+#[derive(serde::Deserialize)]\n+struct License {\n+    spdx: String,\n+    copyright: Vec<String>,\n+}\n+\n+fn env_path(var: &str) -> Result<PathBuf, Error> {\n+    if let Some(var) = std::env::var_os(var) {\n+        Ok(var.into())\n+    } else {\n+        anyhow::bail!(\"missing environment variable {var}\")\n+    }\n+}"}]}