{"sha": "3c867114525068275bd403ba5b1918d507a38933", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjODY3MTE0NTI1MDY4Mjc1YmQ0MDNiYTViMTkxOGQ1MDdhMzg5MzM=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-21T19:38:10Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-25T17:17:33Z"}, "message": "Fix some tests in rustpkg to not pollute the build directory. Closes #7278.", "tree": {"sha": "c0c813cf9aa51792da98580d48b09e4f1faf69fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0c813cf9aa51792da98580d48b09e4f1faf69fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c867114525068275bd403ba5b1918d507a38933", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c867114525068275bd403ba5b1918d507a38933", "html_url": "https://github.com/rust-lang/rust/commit/3c867114525068275bd403ba5b1918d507a38933", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c867114525068275bd403ba5b1918d507a38933/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13e5f0ebdfa7305e8449a585aa8e9837703f1f96", "url": "https://api.github.com/repos/rust-lang/rust/commits/13e5f0ebdfa7305e8449a585aa8e9837703f1f96", "html_url": "https://github.com/rust-lang/rust/commit/13e5f0ebdfa7305e8449a585aa8e9837703f1f96"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "19293e31167a0c70546718910b7d80deedbbb20a", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3c867114525068275bd403ba5b1918d507a38933/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c867114525068275bd403ba5b1918d507a38933/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=3c867114525068275bd403ba5b1918d507a38933", "patch": "@@ -268,12 +268,12 @@ fn output_file_name(workspace: &Path, short_name: &str) -> Path {\n     workspace.push(fmt!(\"%s%s\", short_name, os::EXE_SUFFIX))\n }\n \n-fn touch_source_file(workspace: &Path, short_name: &str) {\n+fn touch_source_file(workspace: &Path, pkgid: &PkgId) {\n     use conditions::bad_path::cond;\n-    let pkg_src_dir = workspace.push(\"src\").push(short_name);\n-    let contents = os::list_dir(&pkg_src_dir);\n+    let pkg_src_dir = workspace.push(\"src\").push(pkgid.to_str());\n+    let contents = os::list_dir_path(&pkg_src_dir);\n     for contents.iter().advance |p| {\n-        if Path(copy *p).filetype() == Some(~\".rs\") {\n+        if p.filetype() == Some(~\".rs\") {\n             // should be able to do this w/o a process\n             if run::process_output(\"touch\", [p.to_str()]).status != 0 {\n                 let _ = cond.raise((copy pkg_src_dir, ~\"Bad path\"));\n@@ -287,20 +287,19 @@ fn touch_source_file(workspace: &Path, short_name: &str) {\n fn frob_source_file(workspace: &Path, pkgid: &PkgId) {\n     use conditions::bad_path::cond;\n     let pkg_src_dir = workspace.push(\"src\").push(pkgid.to_str());\n-    let contents = os::list_dir(&pkg_src_dir);\n+    let contents = os::list_dir_path(&pkg_src_dir);\n     let mut maybe_p = None;\n     for contents.iter().advance |p| {\n-        if Path(copy *p).filetype() == Some(~\".rs\") {\n+        if p.filetype() == Some(~\".rs\") {\n             maybe_p = Some(p);\n             break;\n         }\n     }\n     match maybe_p {\n         Some(p) => {\n-            let p = Path(copy *p);\n-            let w = io::buffered_file_writer(&p);\n+            let w = io::file_writer(*p, &[io::Append]);\n             match w {\n-                Err(s) => { let _ = cond.raise((p, fmt!(\"Bad path: %s\", s))); }\n+                Err(s) => { let _ = cond.raise((copy **p, fmt!(\"Bad path: %s\", s))); }\n                 Ok(w)  => w.write_line(\"\")\n             }\n         }\n@@ -615,7 +614,7 @@ fn do_rebuild_dep_dates_change() {\n     let workspace = create_local_package_with_dep(&p_id, &dep_id);\n     command_line_test([~\"build\", ~\"foo\"], &workspace);\n     let bar_date = datestamp(&lib_output_file_name(&workspace, \"build\", \"bar\"));\n-    touch_source_file(&workspace, \"bar\");\n+    touch_source_file(&workspace, &dep_id);\n     command_line_test([~\"build\", ~\"foo\"], &workspace);\n     let new_bar_date = datestamp(&lib_output_file_name(&workspace, \"build\", \"bar\"));\n     assert!(new_bar_date > bar_date);"}]}