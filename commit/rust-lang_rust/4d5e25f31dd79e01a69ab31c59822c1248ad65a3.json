{"sha": "4d5e25f31dd79e01a69ab31c59822c1248ad65a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNWUyNWYzMWRkNzllMDFhNjlhYjMxYzU5ODIyYzEyNDhhZDY1YTM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-05-14T07:56:10Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-05-14T07:56:10Z"}, "message": "Update to rustc 1.19.0-nightly (826d8f385 2017-05-13)\n\nfixes #1759, #1758", "tree": {"sha": "0e18ec894896419a36391f0fd761b1676237d276", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e18ec894896419a36391f0fd761b1676237d276"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d5e25f31dd79e01a69ab31c59822c1248ad65a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d5e25f31dd79e01a69ab31c59822c1248ad65a3", "html_url": "https://github.com/rust-lang/rust/commit/4d5e25f31dd79e01a69ab31c59822c1248ad65a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfc7d2afd40bad878a145e783b4abce3dc30c0eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfc7d2afd40bad878a145e783b4abce3dc30c0eb", "html_url": "https://github.com/rust-lang/rust/commit/dfc7d2afd40bad878a145e783b4abce3dc30c0eb"}], "stats": {"total": 99, "additions": 57, "deletions": 42}, "files": [{"sha": "e0418be7aa6b544f1ce43654c8fcf0a2a2edac55", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=4d5e25f31dd79e01a69ab31c59822c1248ad65a3", "patch": "@@ -384,9 +384,10 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                                    NONMINIMAL_BOOL,\n                                    e.span,\n                                    \"this boolean expression can be simplified\",\n-                                   |db| for suggestion in &improvements {\n-                                       db.span_suggestion(e.span, \"try\", suggest(self.cx, suggestion, &h2q.terminals));\n-                                       break; // FIXME: multiple suggestions in rustc are broken\n+                                   |db| {\n+                                       db.span_suggestions(e.span, \"try\", improvements.into_iter().map(|suggestion| {\n+                                           suggest(self.cx, suggestion, &h2q.terminals)\n+                                       }).collect());\n                                    });\n             }\n         }"}, {"sha": "e9fd654eebf80c99af129a387ceb23989a1d544b", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=4d5e25f31dd79e01a69ab31c59822c1248ad65a3", "patch": "@@ -136,7 +136,8 @@ fn check_hash_peq<'a, 'tcx>(\n /// Implementation of the `EXPL_IMPL_CLONE_ON_COPY` lint.\n fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item, trait_ref: &TraitRef, ty: ty::Ty<'tcx>) {\n     if match_path_old(&trait_ref.path, &paths::CLONE_TRAIT) {\n-        if !is_copy(cx, ty, item.id) {\n+        let def_id = cx.tcx.hir.local_def_id(item.id);\n+        if !is_copy(cx, ty, def_id) {\n             return;\n         }\n "}, {"sha": "e5064febe954088bc55bb1673188206b619a84e5", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=4d5e25f31dd79e01a69ab31c59822c1248ad65a3", "patch": "@@ -136,7 +136,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                                    &msg,\n                                    arg.span,\n                                    &format!(\"argument has type {}\", arg_ty.sty));\n-            } else if is_copy(cx, arg_ty, cx.tcx.hir.get_parent(arg.id)) {\n+            } else if is_copy(cx, arg_ty, cx.tcx.hir.local_def_id(cx.tcx.hir.get_parent(arg.id))) {\n                 if match_def_path(cx.tcx, def_id, &paths::DROP) {\n                     lint = DROP_COPY;\n                     msg = DROP_COPY_SUMMARY.to_string();"}, {"sha": "894ba09f50fad0de65271bd0f93cc9f7fc87813c", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=4d5e25f31dd79e01a69ab31c59822c1248ad65a3", "patch": "@@ -76,6 +76,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                 BiLt | BiLe | BiGe | BiGt => (cx.tcx.lang_items.ord_trait(), true),\n             };\n             let parent = cx.tcx.hir.get_parent(e.id);\n+            let parent = cx.tcx.hir.local_def_id(parent);\n             if let Some(trait_id) = trait_id {\n                 #[allow(match_same_arms)]\n                 match (&left.node, &right.node) {"}, {"sha": "5e49fb609d107882c09b9eb25031c1ae86e49420", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=4d5e25f31dd79e01a69ab31c59822c1248ad65a3", "patch": "@@ -873,7 +873,7 @@ impl<'tcx> Visitor<'tcx> for UsedVisitor {\n struct VarVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>, // context reference\n     var: DefId, // var name to look for as index\n-    indexed: HashMap<Name, Option<CodeExtent<'tcx>>>, // indexed variables, the extent is None for global\n+    indexed: HashMap<Name, Option<CodeExtent>>, // indexed variables, the extent is None for global\n     nonindex: bool, // has the var been used otherwise?\n }\n "}, {"sha": "738350a4af9839782997fad586b67aeef2f6be01", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=4d5e25f31dd79e01a69ab31c59822c1248ad65a3", "patch": "@@ -657,8 +657,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             }\n \n             // check conventions w.r.t. conversion method names and predicates\n-            let ty = cx.tcx.type_of(cx.tcx.hir.local_def_id(item.id));\n-            let is_copy = is_copy(cx, ty, item.id);\n+            let def_id = cx.tcx.hir.local_def_id(item.id);\n+            let ty = cx.tcx.type_of(def_id);\n+            let is_copy = is_copy(cx, ty, def_id);\n             for &(ref conv, self_kinds) in &CONVENTIONS {\n                 if_let_chain! {[\n                     conv.check(&name.as_str()),\n@@ -683,8 +684,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             }\n \n             let ret_ty = return_ty(cx, implitem.id);\n+            let implitem_defid = cx.tcx.hir.local_def_id(implitem.id);\n             if name == \"new\" &&\n-               !ret_ty.walk().any(|t| same_tys(cx, t, ty, implitem.id)) {\n+               !ret_ty.walk().any(|t| same_tys(cx, t, ty, implitem_defid)) {\n                 span_lint(cx,\n                           NEW_RET_NO_SELF,\n                           implitem.span,\n@@ -837,7 +839,7 @@ fn lint_clone_on_copy(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr, arg_t\n         }\n     }\n \n-    if is_copy(cx, ty, parent) {\n+    if is_copy(cx, ty, cx.tcx.hir.local_def_id(parent)) {\n         span_lint_and_then(cx,\n                            CLONE_ON_COPY,\n                            expr.span,"}, {"sha": "b5791ad0c19417bf1101245523da19a77cf047ad", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=4d5e25f31dd79e01a69ab31c59822c1248ad65a3", "patch": "@@ -369,11 +369,11 @@ impl MiscEarly {\n                         \"if you mean to use a decimal constant, remove the `0` to remove confusion:\",\n                         src[1..].to_string(),\n                     );\n-                    /*db.span_suggestion(\n+                    db.span_suggestion(\n                         lit.span,\n                         \"if you mean to use an octal constant, use `0o`:\",\n                         format!(\"0o{}\", &src[1..]),\n-                    ); FIXME: rustc doesn't support multiple suggestions anymore */\n+                    );\n                 });\n             }\n         }}"}, {"sha": "afcf6f22a4f36f32bddf8c0c29c8b07df802f6c3", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=4d5e25f31dd79e01a69ab31c59822c1248ad65a3", "patch": "@@ -79,15 +79,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         let asref_trait = need!(get_trait_def_id(cx, &paths::ASREF_TRAIT));\n         let borrow_trait = need!(get_trait_def_id(cx, &paths::BORROW_TRAIT));\n \n+        let fn_def_id = cx.tcx.hir.local_def_id(node_id);\n+\n         let preds: Vec<ty::Predicate> = {\n-            let parameter_env = ty::ParameterEnvironment::for_item(cx.tcx, node_id);\n+            let parameter_env = cx.tcx.parameter_environment(fn_def_id);\n             traits::elaborate_predicates(cx.tcx, parameter_env.caller_bounds.to_vec())\n                 .filter(|p| !p.is_global())\n                 .collect()\n         };\n \n-        let fn_def_id = cx.tcx.hir.local_def_id(node_id);\n-\n         // Collect moved variables and spans which will need dereferencings from the function body.\n         let MovedVariablesCtxt { moved_vars, spans_need_deref, .. } = {\n             let mut ctx = MovedVariablesCtxt::new(cx);\n@@ -100,9 +100,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n             ctx\n         };\n \n-        let param_env = ty::ParameterEnvironment::for_item(cx.tcx, node_id);\n         let fn_sig = cx.tcx.type_of(fn_def_id).fn_sig();\n-        let fn_sig = cx.tcx.liberate_late_bound_regions(param_env.free_id_outlive, &fn_sig);\n+        let fn_sig = cx.tcx.erase_late_bound_regions(&fn_sig);\n \n         for ((input, &ty), arg) in decl.inputs.iter().zip(fn_sig.inputs()).zip(&body.arguments) {\n \n@@ -120,7 +119,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n             if_let_chain! {[\n                 !is_self(arg),\n                 !ty.is_mutable_pointer(),\n-                !is_copy(cx, ty, node_id),\n+                !is_copy(cx, ty, fn_def_id),\n                 !implements_trait(cx, ty, fn_trait, &[], Some(node_id)),\n                 !implements_trait(cx, ty, asref_trait, &[], Some(node_id)),\n                 !implements_borrow_trait,"}, {"sha": "0abb639d59a11edae8c7904150d7e1d1ef02e5cc", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=4d5e25f31dd79e01a69ab31c59822c1248ad65a3", "patch": "@@ -108,12 +108,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                 // can't be implemented by default\n                 return;\n             }\n+            let def_id = cx.tcx.hir.local_def_id(id);\n             if decl.inputs.is_empty() && name == \"new\" && cx.access_levels.is_reachable(id) {\n                 let self_ty = cx.tcx\n                     .type_of(cx.tcx.hir.local_def_id(cx.tcx.hir.get_parent(id)));\n                 if_let_chain!{[\n                     self_ty.walk_shallow().next().is_none(), // implements_trait does not work with generics\n-                    same_tys(cx, self_ty, return_ty(cx, id), id),\n+                    same_tys(cx, self_ty, return_ty(cx, id), def_id),\n                     let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT),\n                     !implements_trait(cx, self_ty, default_trait_id, &[], None)\n                 ], {"}, {"sha": "490b447850ad8fe0b1a69711cd02cfbf0ee3452b", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=4d5e25f31dd79e01a69ab31c59822c1248ad65a3", "patch": "@@ -7,7 +7,7 @@ use rustc::lint::{LintContext, LateContext, Level, Lint};\n use rustc::session::Session;\n use rustc::traits::Reveal;\n use rustc::traits;\n-use rustc::ty::subst::Subst;\n+use rustc::ty::subst::{Subst, Substs};\n use rustc::ty;\n use rustc::ty::layout::TargetDataLayout;\n use rustc::mir::transform::MirSource;\n@@ -18,7 +18,7 @@ use std::mem;\n use std::str::FromStr;\n use syntax::ast::{self, LitKind};\n use syntax::attr;\n-use syntax::codemap::{ExpnFormat, ExpnInfo, MultiSpan, Span, DUMMY_SP};\n+use syntax::codemap::{ExpnFormat, ExpnInfo, Span, DUMMY_SP};\n use syntax::errors::DiagnosticBuilder;\n use syntax::ptr::P;\n use syntax::symbol::keywords;\n@@ -594,12 +594,10 @@ pub fn span_lint_and_sugg<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n /// replacement. In human-readable format though, it only appears once before the whole suggestion.\n pub fn multispan_sugg(db: &mut DiagnosticBuilder, help_msg: String, sugg: Vec<(Span, String)>) {\n     let sugg = rustc_errors::CodeSuggestion {\n-        msp: MultiSpan::from_spans(sugg.iter().map(|&(span, _)| span).collect()),\n-        substitutes: sugg.into_iter().map(|(_, subs)| subs).collect(),\n+        substitution_parts: sugg.into_iter().map(|(span, sub)| rustc_errors::Substitution { span, substitutions: vec![sub] }).collect(),\n         msg: help_msg,\n     };\n-    assert!(db.suggestion.is_none());\n-    db.suggestion = Some(sugg);\n+    db.suggestions.push(sugg);\n }\n \n /// Return the base type for references and raw pointers.\n@@ -777,11 +775,9 @@ pub fn camel_case_from(s: &str) -> usize {\n \n /// Convenience function to get the return type of a function\n pub fn return_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, fn_item: NodeId) -> ty::Ty<'tcx> {\n-    let parameter_env = ty::ParameterEnvironment::for_item(cx.tcx, fn_item);\n     let fn_def_id = cx.tcx.hir.local_def_id(fn_item);\n-    let fn_sig = cx.tcx.type_of(fn_def_id).fn_sig();\n-    let fn_sig = cx.tcx.liberate_late_bound_regions(parameter_env.free_id_outlive, &fn_sig);\n-    fn_sig.output()\n+    let ret_ty = cx.tcx.type_of(fn_def_id).fn_sig().output();\n+    cx.tcx.erase_late_bound_regions(&ret_ty)\n }\n \n /// Check if two types are the same.\n@@ -791,12 +787,13 @@ pub fn same_tys<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     a: ty::Ty<'tcx>,\n     b: ty::Ty<'tcx>,\n-    parameter_item: NodeId\n+    parameter_item: DefId\n ) -> bool {\n-    let parameter_env = ty::ParameterEnvironment::for_item(cx.tcx, parameter_item);\n+    let parameter_env = cx.tcx.parameter_environment(parameter_item);\n     cx.tcx.infer_ctxt(parameter_env, Reveal::All).enter(|infcx| {\n-        let new_a = a.subst(infcx.tcx, infcx.parameter_environment.free_substs);\n-        let new_b = b.subst(infcx.tcx, infcx.parameter_environment.free_substs);\n+        let substs = Substs::identity_for_item(cx.tcx, parameter_item);\n+        let new_a = a.subst(infcx.tcx, substs);\n+        let new_b = b.subst(infcx.tcx, substs);\n         infcx.can_equate(&new_a, &new_b).is_ok()\n     })\n }\n@@ -810,9 +807,10 @@ pub fn type_is_unsafe_function(ty: ty::Ty) -> bool {\n     }\n }\n \n-pub fn is_copy<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>, env: NodeId) -> bool {\n-    let env = ty::ParameterEnvironment::for_item(cx.tcx, env);\n-    !ty.subst(cx.tcx, env.free_substs).moves_by_default(cx.tcx.global_tcx(), &env, DUMMY_SP)\n+pub fn is_copy<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>, env: DefId) -> bool {\n+    let substs = Substs::identity_for_item(cx.tcx, env);\n+    let env = cx.tcx.parameter_environment(env);\n+    !ty.subst(cx.tcx, substs).moves_by_default(cx.tcx.global_tcx(), &env, DUMMY_SP)\n }\n \n /// Return whether a pattern is refutable."}, {"sha": "e162406b8dc3ffd885f545e1dd4682b286847734", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=4d5e25f31dd79e01a69ab31c59822c1248ad65a3", "patch": "@@ -47,7 +47,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         if_let_chain!{[\n             let Some((_, arg, _)) = higher::for_loop(expr),\n             let Some(vec_args) = higher::vec_macro(cx, arg),\n-            is_copy(cx, vec_type(cx.tables.expr_ty_adjusted(arg)), cx.tcx.hir.get_parent(expr.id)),\n+            is_copy(cx, vec_type(cx.tables.expr_ty_adjusted(arg)), cx.tcx.hir.local_def_id(cx.tcx.hir.get_parent(expr.id))),\n         ], {\n             // report the error around the `vec!` not inside `<std macros>:`\n             let span = arg.span.ctxt.outer().expn_info().map(|info| info.call_site).expect(\"unable to get call_site\");"}, {"sha": "54a09c97874879a4c7a0d474945706d64a797b8e", "filename": "tests/ui/booleans.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/tests%2Fui%2Fbooleans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/tests%2Fui%2Fbooleans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.stderr?ref=4d5e25f31dd79e01a69ab31c59822c1248ad65a3", "patch": "@@ -79,13 +79,21 @@ error: this boolean expression can be simplified\n   --> $DIR/booleans.rs:34:13\n    |\n 34 |     let _ = a == b && c == 5 && a == b;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `a == b && c == 5`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _ = a == b && c == 5;\n+   |     let _ = !(c != 5 || a != b);\n \n error: this boolean expression can be simplified\n   --> $DIR/booleans.rs:35:13\n    |\n 35 |     let _ = a == b && c == 5 && b == a;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `a == b && c == 5`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _ = a == b && c == 5;\n+   |     let _ = !(c != 5 || a != b);\n \n error: this boolean expression contains a logic bug\n   --> $DIR/booleans.rs:36:13\n@@ -115,7 +123,11 @@ error: this boolean expression can be simplified\n   --> $DIR/booleans.rs:39:13\n    |\n 39 |     let _ = a != b || !(a != b || c == d);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `c != d || a != b`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _ = c != d || a != b;\n+   |     let _ = !(a == b && c == d);\n \n error: aborting due to 13 previous errors\n "}, {"sha": "b9a0fc041811204ededf3e122720b22ae834b671", "filename": "tests/ui/literals.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/tests%2Fui%2Fliterals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/tests%2Fui%2Fliterals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.stderr?ref=4d5e25f31dd79e01a69ab31c59822c1248ad65a3", "patch": "@@ -71,6 +71,8 @@ note: lint level defined here\n    |         ^^^^^^^^^^^^^^^^^^^^^\n help: if you mean to use a decimal constant, remove the `0` to remove confusion:\n    |     let fail8 = 123;\n+help: if you mean to use an octal constant, use `0o`:\n+   |     let fail8 = 0o123;\n \n error: aborting due to 9 previous errors\n "}, {"sha": "e529f6c8e2fb9416a0c2ee13a0a5907c7142b651", "filename": "tests/ui/new_without_default.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/tests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d5e25f31dd79e01a69ab31c59822c1248ad65a3/tests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.stderr?ref=4d5e25f31dd79e01a69ab31c59822c1248ad65a3", "patch": "@@ -11,7 +11,6 @@ note: lint level defined here\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: try this\n    | #[derive(Default)]\n-   | pub struct Foo;\n \n error: you should consider deriving a `Default` implementation for `Bar`\n   --> $DIR/new_without_default.rs:16:5\n@@ -21,7 +20,6 @@ error: you should consider deriving a `Default` implementation for `Bar`\n    |\n help: try this\n    | #[derive(Default)]\n-   | pub struct Bar;\n \n error: you should consider adding a `Default` implementation for `LtKo<'c>`\n   --> $DIR/new_without_default.rs:64:5"}]}