{"sha": "d6c1b85246f99b5485f3671bfca2a4657e0c37fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YzFiODUyNDZmOTliNTQ4NWYzNjcxYmZjYTJhNDY1N2UwYzM3ZmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-23T21:46:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-23T21:46:46Z"}, "message": "auto merge of #14974 : Ryman/rust/non_trait_method, r=alexcrichton\n\nCloses #3973.", "tree": {"sha": "e254a99483739eb253dff83632dc22c8b6013673", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e254a99483739eb253dff83632dc22c8b6013673"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6c1b85246f99b5485f3671bfca2a4657e0c37fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6c1b85246f99b5485f3671bfca2a4657e0c37fd", "html_url": "https://github.com/rust-lang/rust/commit/d6c1b85246f99b5485f3671bfca2a4657e0c37fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6c1b85246f99b5485f3671bfca2a4657e0c37fd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "575710f6cee318e2806b4563eb2887c1f03aaa18", "url": "https://api.github.com/repos/rust-lang/rust/commits/575710f6cee318e2806b4563eb2887c1f03aaa18", "html_url": "https://github.com/rust-lang/rust/commit/575710f6cee318e2806b4563eb2887c1f03aaa18"}, {"sha": "ab24d29f0d1bb32a6d8913996755972887f5f150", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab24d29f0d1bb32a6d8913996755972887f5f150", "html_url": "https://github.com/rust-lang/rust/commit/ab24d29f0d1bb32a6d8913996755972887f5f150"}], "stats": {"total": 107, "additions": 94, "deletions": 13}, "files": [{"sha": "ee6c5e1f9bc318ce0a65585e3023737ab917b611", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d6c1b85246f99b5485f3671bfca2a4657e0c37fd/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c1b85246f99b5485f3671bfca2a4657e0c37fd/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=d6c1b85246f99b5485f3671bfca2a4657e0c37fd", "patch": "@@ -3894,8 +3894,31 @@ impl<'a> Resolver<'a> {\n                 self.resolve_error(trait_reference.path.span, msg.as_slice());\n             }\n             Some(def) => {\n-                debug!(\"(resolving trait) found trait def: {:?}\", def);\n-                self.record_def(trait_reference.ref_id, def);\n+                match def {\n+                    (DefTrait(_), _) => {\n+                        debug!(\"(resolving trait) found trait def: {:?}\", def);\n+                        self.record_def(trait_reference.ref_id, def);\n+                    }\n+                    (def, _) => {\n+                        self.resolve_error(trait_reference.path.span,\n+                                           format!(\"`{}` is not a trait\",\n+                                                   self.path_idents_to_str(\n+                                                        &trait_reference.path)));\n+\n+                        // If it's a typedef, give a note\n+                        match def {\n+                            DefTy(_) => {\n+                                self.session.span_note(\n+                                                trait_reference.path.span,\n+                                                format!(\"`type` aliases cannot \\\n+                                                        be used for traits\")\n+                                                        .as_slice());\n+                            }\n+                            _ => {}\n+                        }\n+                    }\n+                }\n+\n             }\n         }\n     }\n@@ -4021,6 +4044,9 @@ impl<'a> Resolver<'a> {\n \n                 this.with_current_self_type(self_type, |this| {\n                     for method in methods.iter() {\n+                        // If this is a trait impl, ensure the method exists in trait\n+                        this.check_trait_method(&**method);\n+\n                         // We also need a new scope for the method-specific type parameters.\n                         this.resolve_method(MethodRibKind(id, Provided(method.id)),\n                                             &**method);\n@@ -4030,6 +4056,21 @@ impl<'a> Resolver<'a> {\n         });\n     }\n \n+    fn check_trait_method(&self, method: &Method) {\n+        // If there is a TraitRef in scope for an impl, then the method must be in the trait.\n+        for &(did, ref trait_ref) in self.current_trait_ref.iter() {\n+            let method_name = method.ident.name;\n+\n+            if self.method_map.borrow().find(&(method_name, did)).is_none() {\n+                let path_str = self.path_idents_to_str(&trait_ref.path);\n+                self.resolve_error(method.span,\n+                                    format!(\"method `{}` is not a member of trait `{}`\",\n+                                            token::get_name(method_name),\n+                                            path_str).as_slice());\n+            }\n+        }\n+    }\n+\n     fn resolve_module(&mut self, module: &Mod, _span: Span,\n                       _name: Ident, id: NodeId) {\n         // Write the implementations in scope into the module metadata."}, {"sha": "04db13feff65489ea77c69ca0fba4a4289631f99", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6c1b85246f99b5485f3671bfca2a4657e0c37fd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c1b85246f99b5485f3671bfca2a4657e0c37fd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=d6c1b85246f99b5485f3671bfca2a4657e0c37fd", "patch": "@@ -784,7 +784,8 @@ fn check_impl_methods_against_trait(ccx: &CrateCtxt,\n                                     &impl_trait_ref.substs);\n             }\n             None => {\n-                tcx.sess.span_err(\n+                // This is span_bug as it should have already been caught in resolve.\n+                tcx.sess.span_bug(\n                     impl_method.span,\n                     format!(\n                         \"method `{}` is not a member of trait `{}`\","}, {"sha": "795e48cb7b005c9eeceefde9bd656186d0b3c2e0", "filename": "src/test/compile-fail/issue-3907-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d6c1b85246f99b5485f3671bfca2a4657e0c37fd/src%2Ftest%2Fcompile-fail%2Fissue-3907-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c1b85246f99b5485f3671bfca2a4657e0c37fd/src%2Ftest%2Fcompile-fail%2Fissue-3907-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3907-2.rs?ref=d6c1b85246f99b5485f3671bfca2a4657e0c37fd", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue_3907.rs\n+extern crate issue_3907;\n+\n+type Foo = issue_3907::Foo; //~ ERROR: reference to trait\n+\n+struct S {\n+    name: int\n+}\n+\n+fn main() {}"}, {"sha": "a2faef59fd8286d605c0a610e5a8ed2cba07a9a5", "filename": "src/test/compile-fail/issue-3907.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6c1b85246f99b5485f3671bfca2a4657e0c37fd/src%2Ftest%2Fcompile-fail%2Fissue-3907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c1b85246f99b5485f3671bfca2a4657e0c37fd/src%2Ftest%2Fcompile-fail%2Fissue-3907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3907.rs?ref=d6c1b85246f99b5485f3671bfca2a4657e0c37fd", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -11,13 +11,14 @@\n // aux-build:issue_3907.rs\n extern crate issue_3907;\n \n-type Foo = issue_3907::Foo; //~ ERROR: reference to trait\n+type Foo = issue_3907::Foo;\n \n struct S {\n     name: int\n }\n \n impl Foo for S { //~ ERROR: `Foo` is not a trait\n+    //~^ NOTE: `type` aliases cannot be used for traits\n     fn bar() { }\n }\n "}, {"sha": "9b77d62a065292f74c68a264fa58da80565db02c", "filename": "src/test/compile-fail/issue-3973.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d6c1b85246f99b5485f3671bfca2a4657e0c37fd/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c1b85246f99b5485f3671bfca2a4657e0c37fd/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs?ref=d6c1b85246f99b5485f3671bfca2a4657e0c37fd", "patch": "@@ -8,26 +8,29 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n-\n-use std::io;\n-\n struct Point {\n     x: f64,\n     y: f64,\n }\n \n-impl ToStr for Point { //~ ERROR implements a method not defined in the trait\n+trait NewTrait {\n+    fn a(&self) -> String;\n+}\n+\n+impl NewTrait for Point {\n     fn new(x: f64, y: f64) -> Point {\n+    //~^ ERROR method `new` is not a member of trait `NewTrait`\n         Point { x: x, y: y }\n     }\n \n-    fn to_str(&self) -> String {\n+    fn a(&self) -> String {\n         format!(\"({}, {})\", self.x, self.y)\n     }\n }\n \n fn main() {\n     let p = Point::new(0.0, 0.0);\n-    println!(\"{}\", p.to_str());\n+    //~^ ERROR unresolved name `Point::new`\n+    //~^^ ERROR failed to resolve. Use of undeclared module `Point`\n+    println!(\"{}\", p.a());\n }"}, {"sha": "8d9116da81db21b74bdf9a37e868ccb4019aa3a7", "filename": "src/test/compile-fail/issue-5035-2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d6c1b85246f99b5485f3671bfca2a4657e0c37fd/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c1b85246f99b5485f3671bfca2a4657e0c37fd/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs?ref=d6c1b85246f99b5485f3671bfca2a4657e0c37fd", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait I {}\n+type K = I; //~ ERROR: reference to trait\n+\n+fn main() {}"}, {"sha": "8ffe308a669399d35b704ccde339221f1bd9a058", "filename": "src/test/compile-fail/issue-5035.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6c1b85246f99b5485f3671bfca2a4657e0c37fd/src%2Ftest%2Fcompile-fail%2Fissue-5035.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6c1b85246f99b5485f3671bfca2a4657e0c37fd/src%2Ftest%2Fcompile-fail%2Fissue-5035.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5035.rs?ref=d6c1b85246f99b5485f3671bfca2a4657e0c37fd", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n trait I {}\n-type K = I; //~ ERROR: reference to trait\n+type K = I;\n impl K for int {} //~ ERROR: `K` is not a trait\n+//~^ NOTE: `type` aliases cannot be used for traits\n fn main() {}"}]}