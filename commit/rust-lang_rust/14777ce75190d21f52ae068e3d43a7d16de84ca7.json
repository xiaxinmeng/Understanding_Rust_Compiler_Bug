{"sha": "14777ce75190d21f52ae068e3d43a7d16de84ca7", "node_id": "C_kwDOAAsO6NoAKDE0Nzc3Y2U3NTE5MGQyMWY1MmFlMDY4ZTNkNDNhN2QxNmRlODRjYTc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-12T10:24:44Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-12T10:24:44Z"}, "message": "fix indentation of unlinked_file quickfix", "tree": {"sha": "9e9e713cfd7925f0c9c396650551d5ae6dace495", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e9e713cfd7925f0c9c396650551d5ae6dace495"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14777ce75190d21f52ae068e3d43a7d16de84ca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14777ce75190d21f52ae068e3d43a7d16de84ca7", "html_url": "https://github.com/rust-lang/rust/commit/14777ce75190d21f52ae068e3d43a7d16de84ca7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14777ce75190d21f52ae068e3d43a7d16de84ca7/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5214a98d9c8030998a233e2308ef371535f8ae86", "url": "https://api.github.com/repos/rust-lang/rust/commits/5214a98d9c8030998a233e2308ef371535f8ae86", "html_url": "https://github.com/rust-lang/rust/commit/5214a98d9c8030998a233e2308ef371535f8ae86"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "3d45a75913ad8f68d9591902e869a8cd17ce8381", "filename": "crates/ide-diagnostics/src/handlers/unlinked_file.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/14777ce75190d21f52ae068e3d43a7d16de84ca7/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14777ce75190d21f52ae068e3d43a7d16de84ca7/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funlinked_file.rs?ref=14777ce75190d21f52ae068e3d43a7d16de84ca7", "patch": "@@ -9,7 +9,7 @@ use ide_db::{\n     RootDatabase,\n };\n use syntax::{\n-    ast::{self, HasModuleItem, HasName},\n+    ast::{self, edit::IndentLevel, HasModuleItem, HasName},\n     AstNode, TextRange, TextSize,\n };\n use text_edit::TextEdit;\n@@ -184,30 +184,36 @@ fn make_fixes(\n         Some(last) => {\n             cov_mark::hit!(unlinked_file_append_to_existing_mods);\n             let offset = last.syntax().text_range().end();\n-            mod_decl_builder.insert(offset, format!(\"\\n{mod_decl}\"));\n-            pub_mod_decl_builder.insert(offset, format!(\"\\n{pub_mod_decl}\"));\n+            let indent = IndentLevel::from_node(last.syntax());\n+            mod_decl_builder.insert(offset, format!(\"\\n{indent}{mod_decl}\"));\n+            pub_mod_decl_builder.insert(offset, format!(\"\\n{indent}{pub_mod_decl}\"));\n         }\n         None => {\n             // Prepend before the first item in the file.\n             match items.next() {\n-                Some(item) => {\n+                Some(first) => {\n                     cov_mark::hit!(unlinked_file_prepend_before_first_item);\n-                    let offset = item.syntax().text_range().start();\n-                    mod_decl_builder.insert(offset, format!(\"{mod_decl}\\n\\n\"));\n-                    pub_mod_decl_builder.insert(offset, format!(\"{pub_mod_decl}\\n\\n\"));\n+                    let offset = first.syntax().text_range().start();\n+                    let indent = IndentLevel::from_node(first.syntax());\n+                    mod_decl_builder.insert(offset, format!(\"{mod_decl}\\n\\n{indent}\"));\n+                    pub_mod_decl_builder.insert(offset, format!(\"{pub_mod_decl}\\n\\n{indent}\"));\n                 }\n                 None => {\n                     // No items in the file, so just append at the end.\n                     cov_mark::hit!(unlinked_file_empty_file);\n+                    let mut indent = IndentLevel::from(0);\n                     let offset = match &source {\n                         ModuleSource::SourceFile(it) => it.syntax().text_range().end(),\n                         ModuleSource::Module(it) => {\n+                            indent = IndentLevel::from_node(it.syntax()) + 1;\n                             it.item_list()?.r_curly_token()?.text_range().start()\n                         }\n-                        ModuleSource::BlockExpr(_) => return None,\n+                        ModuleSource::BlockExpr(it) => {\n+                            it.stmt_list()?.r_curly_token()?.text_range().start()\n+                        }\n                     };\n-                    mod_decl_builder.insert(offset, format!(\"{mod_decl}\\n\"));\n-                    pub_mod_decl_builder.insert(offset, format!(\"{pub_mod_decl}\\n\"));\n+                    mod_decl_builder.insert(offset, format!(\"{indent}{mod_decl}\\n\"));\n+                    pub_mod_decl_builder.insert(offset, format!(\"{indent}{pub_mod_decl}\\n\"));\n                 }\n             }\n         }\n@@ -406,15 +412,13 @@ mod foo;\n mod bar;\n //- /bar.rs\n mod foo {\n-\n }\n //- /bar/foo/baz.rs\n $0\n \"#,\n             r#\"\n mod foo {\n-\n-mod baz;\n+    mod baz;\n }\n \"#,\n         );\n@@ -428,15 +432,13 @@ mod baz;\n mod bar;\n //- /bar.rs\n mod baz {\n-\n }\n //- /bar/baz/foo/mod.rs\n $0\n \"#,\n             r#\"\n mod baz {\n-\n-mod foo;\n+    mod foo;\n }\n \"#,\n         );\n@@ -448,15 +450,13 @@ mod foo;\n             r#\"\n //- /main.rs\n mod bar {\n-\n }\n //- /bar/foo/mod.rs\n $0\n \"#,\n             r#\"\n mod bar {\n-\n-mod foo;\n+    mod foo;\n }\n \"#,\n         );"}, {"sha": "e70bc2ec54172aa563a3068b7c6f09b47d414467", "filename": "crates/ide/src/goto_declaration.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14777ce75190d21f52ae068e3d43a7d16de84ca7/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14777ce75190d21f52ae068e3d43a7d16de84ca7/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_declaration.rs?ref=14777ce75190d21f52ae068e3d43a7d16de84ca7", "patch": "@@ -17,6 +17,7 @@ use crate::{\n // This is the same as `Go to Definition` with the following exceptions:\n // - outline modules will navigate to the `mod name;` item declaration\n // - trait assoc items will navigate to the assoc item of the trait declaration opposed to the trait impl\n+// - fields in patterns will navigate to the field declaration of the struct, union or variant\n pub(crate) fn goto_declaration(\n     db: &RootDatabase,\n     position: FilePosition,"}]}