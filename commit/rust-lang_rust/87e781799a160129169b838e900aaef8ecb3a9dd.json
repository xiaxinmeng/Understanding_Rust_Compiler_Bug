{"sha": "87e781799a160129169b838e900aaef8ecb3a9dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZTc4MTc5OWExNjAxMjkxNjliODM4ZTkwMGFhZWY4ZWNiM2E5ZGQ=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-30T08:59:53Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-30T10:07:36Z"}, "message": "`feature(const_param_types)` -> `feature(adt_const_params)`", "tree": {"sha": "672a91c85a1a67eebdcb67b303e9d0f55bae1b56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/672a91c85a1a67eebdcb67b303e9d0f55bae1b56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87e781799a160129169b838e900aaef8ecb3a9dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87e781799a160129169b838e900aaef8ecb3a9dd", "html_url": "https://github.com/rust-lang/rust/commit/87e781799a160129169b838e900aaef8ecb3a9dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87e781799a160129169b838e900aaef8ecb3a9dd/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4747cbb3bbb1dd7a9f8a5bdb2eee073f8e4c43ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/4747cbb3bbb1dd7a9f8a5bdb2eee073f8e4c43ef", "html_url": "https://github.com/rust-lang/rust/commit/4747cbb3bbb1dd7a9f8a5bdb2eee073f8e4c43ef"}], "stats": {"total": 216, "additions": 108, "deletions": 108}, "files": [{"sha": "70d963cd41f21a86162bbd8d88b5d7a2848236fc", "filename": "compiler/rustc_error_codes/src/error_codes/E0741.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0741.md", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0741.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0741.md?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -3,7 +3,7 @@ A non-structural-match type was used as the type of a const generic parameter.\n Erroneous code example:\n \n ```compile_fail,E0741\n-#![feature(const_param_types)]\n+#![feature(adt_const_params)]\n \n struct A;\n \n@@ -16,7 +16,7 @@ may be used as the types of const generic parameters.\n To fix the previous code example, we derive `PartialEq` and `Eq`:\n \n ```\n-#![feature(const_param_types)]\n+#![feature(adt_const_params)]\n \n #[derive(PartialEq, Eq)] // We derive both traits here.\n struct A;"}, {"sha": "a2a1a20f230336099842c1917e085e8bca85c5b1", "filename": "compiler/rustc_error_codes/src/error_codes/E0771.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0771.md", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0771.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0771.md?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -4,7 +4,7 @@ allowed.\n Erroneous code example:\n \n ```compile_fail,E0771\n-#![feature(const_param_types)]\n+#![feature(adt_const_params)]\n \n fn function_with_str<'a, const STRING: &'a str>() {} // error!\n ```\n@@ -13,7 +13,7 @@ To fix this issue, the lifetime in the const generic need to be changed to\n `'static`:\n \n ```\n-#![feature(const_param_types)]\n+#![feature(adt_const_params)]\n \n fn function_with_str<const STRING: &'static str>() {} // ok!\n ```"}, {"sha": "1ff2c75966ab67c5c3c98959fdc1b556eb3d3ea9", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -71,7 +71,7 @@ macro_rules! declare_features {\n             }\n \n             pub fn unordered_const_ty_params(&self) -> bool {\n-                self.const_generics_defaults || self.generic_const_exprs || self.const_param_types\n+                self.const_generics_defaults || self.generic_const_exprs || self.adt_const_params\n             }\n \n             /// Some features are known to be incomplete and using them is likely to have\n@@ -674,7 +674,7 @@ declare_features! (\n     (incomplete, generic_const_exprs, \"1.56.0\", Some(76560), None),\n \n     /// Allows additional const parameter types, such as `&'static str` or user defined types\n-    (incomplete, const_param_types, \"1.56.0\", Some(44580), None),\n+    (incomplete, adt_const_params, \"1.56.0\", Some(44580), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates"}, {"sha": "8e498a5446ea8c3270b0e27b13078d30a554504b", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -104,7 +104,7 @@ declare_features! (\n     (removed, quote, \"1.33.0\", Some(29601), None, None),\n     /// Allows const generic types (e.g. `struct Foo<const N: usize>(...);`).\n     (removed, const_generics, \"1.34.0\", Some(44580), None,\n-     Some(\"removed in favor of `#![feature(const_param_types]` and `#![feature(generic_const_exprs)]`\")),\n+     Some(\"removed in favor of `#![feature(adt_const_params]` and `#![feature(generic_const_exprs)]`\")),\n     /// Allows `[x; N]` where `x` is a constant (RFC 2203).\n     (removed, const_in_array_repeat_expressions,  \"1.37.0\", Some(49147), None,\n      Some(\"removed due to causing promotable bugs\")),"}, {"sha": "19c02ba45c44758eed002092b2107bef5d2a25b6", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -284,6 +284,7 @@ symbols! {\n         add_assign,\n         add_with_overflow,\n         address,\n+        adt_const_params,\n         advanced_slice_patterns,\n         adx_target_feature,\n         alias,\n@@ -451,7 +452,6 @@ symbols! {\n         const_mut_refs,\n         const_panic,\n         const_panic_fmt,\n-        const_param_types,\n         const_precise_live_drops,\n         const_ptr,\n         const_raw_ptr_deref,"}, {"sha": "17716afe3208fee68882fa83bdeb4d45cd6e6730", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -290,7 +290,7 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n \n             let err_ty_str;\n             let mut is_ptr = true;\n-            let err = if tcx.features().const_param_types {\n+            let err = if tcx.features().adt_const_params {\n                 match ty.peel_refs().kind() {\n                     ty::FnPtr(_) => Some(\"function pointers\"),\n                     ty::RawPtr(_) => Some(\"raw pointers\"),\n@@ -328,7 +328,7 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n                     err.note(\"the only supported types are integers, `bool` and `char`\");\n                     if tcx.sess.is_nightly_build() {\n                         err.help(\n-                            \"more complex types are supported with `#![feature(const_param_types)]`\",\n+                            \"more complex types are supported with `#![feature(adt_const_params)]`\",\n                         );\n                     }\n                     err.emit()"}, {"sha": "dec25bb4c203c470729099a4733ce0d227a50790", "filename": "src/test/debuginfo/function-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -82,7 +82,7 @@\n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n-#![feature(const_param_types, generators, generator_trait)]\n+#![feature(adt_const_params, generators, generator_trait)]\n #![allow(incomplete_features)]\n \n use Mod1::TestTrait2;"}, {"sha": "b5a0108a0a397d1ab29c8ee21b28c54616cea09c", "filename": "src/test/incremental/const-generics/hash-tyvid-regression-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,5 +1,5 @@\n // revisions: cfail\n-#![feature(generic_const_exprs, const_param_types)]\n+#![feature(generic_const_exprs, adt_const_params)]\n #![allow(incomplete_features)]\n // regression test for #77650\n fn c<T, const N: std::num::NonZeroUsize>()"}, {"sha": "bba22bf5dc161bd786e4d5f5339ed726d9669a87", "filename": "src/test/incremental/const-generics/hash-tyvid-regression-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-2.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,5 +1,5 @@\n // revisions: cfail\n-#![feature(generic_const_exprs, const_param_types, const_generics_defaults)]\n+#![feature(generic_const_exprs, adt_const_params, const_generics_defaults)]\n #![allow(incomplete_features)]\n // regression test for #77650\n struct C<T, const N: core::num::NonZeroUsize>([T; N.get()])"}, {"sha": "fc114f224a2fad1410450e414e4973d6714b1b32", "filename": "src/test/incremental/const-generics/try_unify_abstract_const_regression_tests/issue-77708-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Ftry_unify_abstract_const_regression_tests%2Fissue-77708-3.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,5 +1,5 @@\n // revisions: rpass\n-#![feature(generic_const_exprs, const_param_types)]\n+#![feature(generic_const_exprs, adt_const_params)]\n #![allow(incomplete_features)]\n \n use std::{convert::TryFrom, num::NonZeroUsize};"}, {"sha": "fed37f6c9a2d55849f8c5db1f4fbf907579c2aa2", "filename": "src/test/rustdoc/const-generics/const-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_param_types)]\n+#![feature(adt_const_params)]\n \n #![crate_name = \"foo\"]\n "}, {"sha": "cc6dc38346907a0362db6fa6695f1e24ffa58d55", "filename": "src/test/ui/async-await/issues/issue-78654.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78654.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n // revisions: full min\n \n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct Foo;"}, {"sha": "48d85e7ff64ecfc17f6c09fa506fc3fd7c130d77", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.min.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -35,7 +35,7 @@ LL | struct A<const N: &u8>;\n    |                   ^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:14:15\n@@ -44,7 +44,7 @@ LL | impl<const N: &u8> A<N> {\n    |               ^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:17:21\n@@ -53,7 +53,7 @@ LL |     fn foo<const M: &u8>(&self) {}\n    |                     ^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:22:15\n@@ -62,7 +62,7 @@ LL | impl<const N: &u8> B for A<N> {}\n    |               ^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:26:17\n@@ -71,7 +71,7 @@ LL | fn bar<const N: &u8>() {}\n    |                 ^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: aborting due to 10 previous errors\n "}, {"sha": "487b82dbf4ac4d9529358c3a5f9c4e28f1033c74", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -3,7 +3,7 @@\n // elided lifetimes within the type of a const generic parameters to be 'static, like elided\n // lifetimes within const/static items.\n // revisions: full min\n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct A<const N: &u8>;"}, {"sha": "a7b78b80ca5ea4a1082437d88f9daf797a62270e", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -17,7 +17,7 @@ LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n    |                                               ^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `[u8; _]` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-type-depends-on-const-param.rs:15:35\n@@ -26,7 +26,7 @@ LL | pub struct SelfDependent<const N: [u8; N]>;\n    |                                   ^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "9d50f9a47ff6ef46d8e40ed363677db70f20f7ab", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,6 +1,6 @@\n // revisions: full min\n \n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n // Currently, const parameters cannot depend on other generic parameters,"}, {"sha": "71d91fd7e7f453cc3feda587a899c2b87452ab1e", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,6 +1,6 @@\n // revisions: full min\n \n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n // Currently, const parameters cannot depend on other generic parameters,"}, {"sha": "91410c4afdf750e0e3ff3d3e94db5e0b35164a59", "filename": "src/test/ui/const-generics/core-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fcore-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fcore-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcore-types.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -2,7 +2,7 @@\n // run-pass\n // revisions: full min\n \n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct A<const N: u8>;"}, {"sha": "4d225dfdd873035295af3c25baab932c43755568", "filename": "src/test/ui/const-generics/different_generic_args_array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_generic_args_array.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,5 +1,5 @@\n // Check that different const types are different.\n-#![feature(const_param_types)]\n+#![feature(adt_const_params)]\n #![allow(incomplete_features)]\n \n struct Const<const V: [usize; 1]> {}"}, {"sha": "dc516fb71c4b406a60348e76d47e3cdf6779d1e4", "filename": "src/test/ui/const-generics/fn-const-param-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,7 +1,7 @@\n // Check that functions cannot be used as const parameters.\n // revisions: full min\n \n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n fn function() -> u32 {"}, {"sha": "22f5f529c76ab128e40b8b6682a32df7ad6bfacd", "filename": "src/test/ui/const-generics/fn-const-param-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,6 +1,6 @@\n // revisions: full min\n \n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct Checked<const F: fn(usize) -> bool>;"}, {"sha": "6ae9d5cfbb54f42df0ab52452de4141b705bceeb", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_param_types)]\n+#![feature(adt_const_params)]\n #![allow(incomplete_features)]\n \n #[derive(PartialEq, Eq)]"}, {"sha": "18e9135d0723589f9ac49c23186a1568e0d41385", "filename": "src/test/ui/const-generics/generic_const_exprs/array-size-in-generic-struct-param.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.min.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -23,7 +23,7 @@ LL | struct B<const CFG: Config> {\n    |                     ^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7d3fe413c1706b1b516569c9a97e75ad08c5312f", "filename": "src/test/ui/const-generics/generic_const_exprs/array-size-in-generic-struct-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,7 +1,7 @@\n // Tests that array sizes that depend on const-params are checked using `ConstEvaluatable`.\n // revisions: full min\n \n-#![cfg_attr(full, feature(generic_const_exprs, const_param_types))]\n+#![cfg_attr(full, feature(generic_const_exprs, adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n #[allow(dead_code)]"}, {"sha": "b8a1027c9ebdb0a5b0f1c3d65c28a271058ce80f", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -14,7 +14,7 @@ LL | trait Trait<const S: &'static str> {}\n    |                      ^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "147a00cb26bfc55b7d8d288bc95e2f962bcb083d", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -2,7 +2,7 @@\n // revisions: full min\n \n #![cfg_attr(full, allow(incomplete_features))]\n-#![cfg_attr(full, feature(const_param_types, generic_const_exprs))]\n+#![cfg_attr(full, feature(adt_const_params, generic_const_exprs))]\n \n #![feature(core_intrinsics)]\n #![feature(const_type_name)]"}, {"sha": "bc3c09238f255e379026150e7006beb7f8c2bc8c", "filename": "src/test/ui/const-generics/invalid-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_param_types, const_generics_defaults)]\n+#![feature(adt_const_params, const_generics_defaults)]\n #![allow(incomplete_features)]\n \n #[derive(PartialEq, Eq)]"}, {"sha": "aeef778991f067f7d6727dce3028f825f622bea0", "filename": "src/test/ui/const-generics/issues/issue-56445-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-56445-1.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,6 +1,6 @@\n // Regression test for https://github.com/rust-lang/rust/issues/56445#issuecomment-518402995.\n // revisions: full min\n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n #![crate_type = \"lib\"]\n "}, {"sha": "af029a6516bc625ae142e24a1a016c1583c1f99d", "filename": "src/test/ui/const-generics/issues/issue-62878.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -11,7 +11,7 @@ LL | fn foo<const N: usize, const A: [u8; N]>() {}\n    |                                 ^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "38f5ff77b56a9ac1e5d7a37e3bbbb1744f84ade1", "filename": "src/test/ui/const-generics/issues/issue-62878.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,5 +1,5 @@\n // revisions: full min\n-#![cfg_attr(full, feature(const_param_types, generic_arg_infer))]\n+#![cfg_attr(full, feature(adt_const_params, generic_arg_infer))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n fn foo<const N: usize, const A: [u8; N]>() {}"}, {"sha": "b1141cf3bdfbf03486ef60ade77968382d9a0c27", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -5,7 +5,7 @@ LL | fn test<const T: &'static dyn A>() {\n    |                  ^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error[E0741]: `&'static (dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n   --> $DIR/issue-63322-forbid-dyn.rs:9:18"}, {"sha": "01a6caa130f38223e3b873c556ca255a7b79fce3", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,5 +1,5 @@\n // revisions: full min\n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n trait A {}"}, {"sha": "091419f0c52ec822bc80c4a427b4a2083f9a6ad0", "filename": "src/test/ui/const-generics/issues/issue-66596-impl-trait-for-str-const-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66596-impl-trait-for-str-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66596-impl-trait-for-str-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66596-impl-trait-for-str-const-arg.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(const_param_types)]\n+#![feature(adt_const_params)]\n #![allow(incomplete_features)]\n \n "}, {"sha": "df04c4896b45a23ad5aa77c6bb316d8efc9d8b03", "filename": "src/test/ui/const-generics/issues/issue-68615-adt.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.min.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -5,7 +5,7 @@ LL | struct Const<const V: [usize; 0]> {}\n    |                       ^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: aborting due to previous error\n "}, {"sha": "3ef1ad45edfd40855b023159c960e0ba3e9820a5", "filename": "src/test/ui/const-generics/issues/issue-68615-adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,6 +1,6 @@\n // [full] check-pass\n // revisions: full min\n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct Const<const V: [usize; 0]> {}"}, {"sha": "1b4517087e223e257c79b3fd1e17b10dac1de26d", "filename": "src/test/ui/const-generics/issues/issue-68615-array.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.min.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -5,7 +5,7 @@ LL | struct Foo<const V: [usize; 0] > {}\n    |                     ^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: aborting due to previous error\n "}, {"sha": "93477be41b5903015da6e2998caac298fb179222", "filename": "src/test/ui/const-generics/issues/issue-68615-array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,6 +1,6 @@\n // [full] check-pass\n // revisions: full min\n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct Foo<const V: [usize; 0] > {}"}, {"sha": "87ed2d4f8da8cc6cdd616f0552194b22c6886f97", "filename": "src/test/ui/const-generics/issues/issue-71169.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -11,7 +11,7 @@ LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n    |                                      ^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "617149a841893825a1823c6f14ad7d8e806c1000", "filename": "src/test/ui/const-generics/issues/issue-71169.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,5 +1,5 @@\n // revisions: full min\n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}"}, {"sha": "66f819dbe06e2b378c12985275ed5a49f6d43b57", "filename": "src/test/ui/const-generics/issues/issue-71381.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,5 +1,5 @@\n // revisions: full min\n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct Test(*const usize);"}, {"sha": "4392d72e5668e97a93d772f3f30ab3bbcff00ff4", "filename": "src/test/ui/const-generics/issues/issue-71382.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71382.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,5 +1,5 @@\n // revisions: full min\n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct Test();"}, {"sha": "fbb91ca18aa4fd82974d7dc48b66102509a3ee7d", "filename": "src/test/ui/const-generics/issues/issue-71611.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,5 +1,5 @@\n // revisions: full min\n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n fn func<A, const F: fn(inner: A)>(outer: A) {"}, {"sha": "2fa1d7a53378304f00a6d70887c1ad3eab556524", "filename": "src/test/ui/const-generics/issues/issue-72352.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72352.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,5 +1,5 @@\n // revisions: full min\n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n use std::ffi::{CStr, CString};"}, {"sha": "f2b58e59f731fd2df847a8ad008ded45c5f946f2", "filename": "src/test/ui/const-generics/issues/issue-73491.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -5,7 +5,7 @@ LL | fn hoge<const IN: [u32; LEN]>() {}\n    |                   ^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: aborting due to previous error\n "}, {"sha": "f15c1f2d4552181e2c18d2396fa2993b58007094", "filename": "src/test/ui/const-generics/issues/issue-73491.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,6 +1,6 @@\n // [full] check-pass\n // revisions: full min\n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n const LEN: usize = 1024;"}, {"sha": "82ffb2332404496ac404b15703266a2b3feae8fb", "filename": "src/test/ui/const-generics/issues/issue-74101.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -5,7 +5,7 @@ LL | fn test<const N: [u8; 1 + 2]>() {}\n    |                  ^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `[u8; _]` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74101.rs:9:21\n@@ -14,7 +14,7 @@ LL | struct Foo<const N: [u8; 1 + 2]>;\n    |                     ^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6b606b9460fe22f95afc7d30e03488c213da00ee", "filename": "src/test/ui/const-generics/issues/issue-74101.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,6 +1,6 @@\n // [full] check-pass\n // revisions: full min\n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n fn test<const N: [u8; 1 + 2]>() {}"}, {"sha": "b462d84487ee8ffeb20a722a19d821419a78a433", "filename": "src/test/ui/const-generics/issues/issue-74255.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.min.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -5,7 +5,7 @@ LL |     fn ice_struct_fn<const I: IceEnum>() {}\n    |                               ^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: aborting due to previous error\n "}, {"sha": "0e523926fb0b107e133a92bd64999c090b89b46d", "filename": "src/test/ui/const-generics/issues/issue-74255.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,6 +1,6 @@\n // [full] check-pass\n // revisions: full min\n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n #[derive(PartialEq, Eq)]"}, {"sha": "729ecc2022c9927c8bc3d6722c8ff0a7dbb16fd8", "filename": "src/test/ui/const-generics/issues/issue-74950.min.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -5,7 +5,7 @@ LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `Inner` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74950.rs:17:23\n@@ -14,7 +14,7 @@ LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `Inner` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74950.rs:17:23\n@@ -23,7 +23,7 @@ LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `Inner` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74950.rs:17:23\n@@ -32,7 +32,7 @@ LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `Inner` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74950.rs:17:23\n@@ -41,7 +41,7 @@ LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "3e1ca4735db612ee0887fb128da6ee9fc47a32aa", "filename": "src/test/ui/const-generics/issues/issue-74950.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,6 +1,6 @@\n // [full] build-pass\n // revisions: full min\n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n "}, {"sha": "7798ae7962983047f91dcb06498886a96467eebd", "filename": "src/test/ui/const-generics/issues/issue-75047.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -5,7 +5,7 @@ LL | struct Foo<const N: [u8; Bar::<u32>::value()]>;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: aborting due to previous error\n "}, {"sha": "ee3dcf9ecec508fa9af1349197dba1f0f86f7ebc", "filename": "src/test/ui/const-generics/issues/issue-75047.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,6 +1,6 @@\n // [full] check-pass\n // revisions: full min\n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct Bar<T>(T);"}, {"sha": "214a04b8a6bed5786e5c28951a038dea9063f1a7", "filename": "src/test/ui/const-generics/issues/issue-75763.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75763.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,6 +1,6 @@\n // ignore-test\n // FIXME(const_generics): This test causes an ICE after reverting #76030.\n-#![feature(const_param_types)]\n+#![feature(adt_const_params)]\n #![allow(incomplete_features)]\n \n \n@@ -9,7 +9,7 @@ struct Bug<const S: &'static str>;\n fn main() {\n     let b: Bug::<{\n         unsafe {\n-            // FIXME(const_param_types): Decide on how to deal with invalid values as const params.\n+            // FIXME(adt_const_params): Decide on how to deal with invalid values as const params.\n             std::mem::transmute::<&[u8], &str>(&[0xC0, 0xC1, 0xF5])\n         }\n     }>;"}, {"sha": "8a567678b824e34d615830db87dd381c17337ddf", "filename": "src/test/ui/const-generics/issues/issue-87076.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87076.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,6 +1,6 @@\n // build-pass\n \n-#![feature(const_param_types)]\n+#![feature(adt_const_params)]\n #![allow(incomplete_features)]\n \n #[derive(PartialEq, Eq)]"}, {"sha": "4ddbadb54661b22031bdc536036699f49448bc28", "filename": "src/test/ui/const-generics/min_const_generics/complex-types.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -5,7 +5,7 @@ LL | struct Foo<const N: [u8; 0]>;\n    |                     ^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `()` is forbidden as the type of a const generic parameter\n   --> $DIR/complex-types.rs:6:21\n@@ -14,7 +14,7 @@ LL | struct Bar<const N: ()>;\n    |                     ^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `No` is forbidden as the type of a const generic parameter\n   --> $DIR/complex-types.rs:11:21\n@@ -23,7 +23,7 @@ LL | struct Fez<const N: No>;\n    |                     ^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/complex-types.rs:14:21\n@@ -32,7 +32,7 @@ LL | struct Faz<const N: &'static u8>;\n    |                     ^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `!` is forbidden as the type of a const generic parameter\n   --> $DIR/complex-types.rs:17:21\n@@ -41,7 +41,7 @@ LL | struct Fiz<const N: !>;\n    |                     ^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `()` is forbidden as the type of a const generic parameter\n   --> $DIR/complex-types.rs:20:19\n@@ -50,7 +50,7 @@ LL | enum Goo<const N: ()> { A, B }\n    |                   ^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `()` is forbidden as the type of a const generic parameter\n   --> $DIR/complex-types.rs:23:20\n@@ -59,7 +59,7 @@ LL | union Boo<const N: ()> { a: () }\n    |                    ^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "f30693221a513347368bde10aba8e3093c42b8bc", "filename": "src/test/ui/const-generics/min_const_generics/static-reference-array-const-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -5,7 +5,7 @@ LL | fn a<const X: &'static [u32]>() {}\n    |               ^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: aborting due to previous error\n "}, {"sha": "4f32284ecb1e0571ffc5a9f32e046c35e8a63452", "filename": "src/test/ui/const-generics/nested-type.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -12,7 +12,7 @@ LL | | }]>;\n    | |__^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/nested-type.rs:15:5"}, {"sha": "039f996de96db2c66028ec44250158dcc9ef9635", "filename": "src/test/ui/const-generics/nested-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,6 +1,6 @@\n // revisions: full min\n \n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct Foo<const N: [u8; { //[min]~ ERROR `[u8; _]` is forbidden"}, {"sha": "65595f07dab3c40135dea7d943abf4d4854790a9", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,7 +1,7 @@\n // Checks that pointers must not be used as the type of const params.\n // revisions: full min\n \n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n const A: u32 = 3;"}, {"sha": "27ef9e7d96c9f1c2910d7a08ae71c0554f678ff1", "filename": "src/test/ui/const-generics/raw-ptr-const-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,6 +1,6 @@\n // revisions: full min\n \n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct Const<const P: *const u32>; //~ ERROR: using raw pointers as const generic parameters"}, {"sha": "fed802f6adc6b82f08406c2fd372a4103237cddb", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.min.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -5,7 +5,7 @@ LL | struct ConstString<const T: &'static str>;\n    |                             ^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `&'static [u8]` is forbidden as the type of a const generic parameter\n   --> $DIR/slice-const-param-mismatch.rs:9:28\n@@ -14,7 +14,7 @@ LL | struct ConstBytes<const T: &'static [u8]>;\n    |                            ^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7127323e5babe25d23bd735425f66d1c21b014b1", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,6 +1,6 @@\n // revisions: full min\n \n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n "}, {"sha": "05d21e08d74538a3d7c418c45cf4dbb72c3f1e43", "filename": "src/test/ui/const-generics/slice-const-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(const_param_types)]\n+#![feature(adt_const_params)]\n #![allow(incomplete_features)]\n \n pub fn function_with_str<const STRING: &'static str>() -> &'static str {"}, {"sha": "d4b2ad6fd0c7bfeb146564dce6e23bee529e2fd3", "filename": "src/test/ui/const-generics/std/const-generics-range.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -5,7 +5,7 @@ LL | struct _Range<const R: std::ops::Range<usize>>;\n    |                        ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `RangeFrom<usize>` is forbidden as the type of a const generic parameter\n   --> $DIR/const-generics-range.rs:12:28\n@@ -14,7 +14,7 @@ LL | struct _RangeFrom<const R: std::ops::RangeFrom<usize>>;\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `RangeFull` is forbidden as the type of a const generic parameter\n   --> $DIR/const-generics-range.rs:17:28\n@@ -23,7 +23,7 @@ LL | struct _RangeFull<const R: std::ops::RangeFull>;\n    |                            ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `RangeInclusive<usize>` is forbidden as the type of a const generic parameter\n   --> $DIR/const-generics-range.rs:23:33\n@@ -32,7 +32,7 @@ LL | struct _RangeInclusive<const R: std::ops::RangeInclusive<usize>>;\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `RangeTo<usize>` is forbidden as the type of a const generic parameter\n   --> $DIR/const-generics-range.rs:28:26\n@@ -41,7 +41,7 @@ LL | struct _RangeTo<const R: std::ops::RangeTo<usize>>;\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `RangeToInclusive<usize>` is forbidden as the type of a const generic parameter\n   --> $DIR/const-generics-range.rs:33:35\n@@ -50,7 +50,7 @@ LL | struct _RangeToInclusive<const R: std::ops::RangeToInclusive<usize>>;\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "46c06f312b98fb81eec44844d1cd658389ed6b85", "filename": "src/test/ui/const-generics/std/const-generics-range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,6 +1,6 @@\n // [full] check-pass\n // revisions: full min\n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n // `Range` should be usable within const generics:"}, {"sha": "039c4276c8b773f2c3dbdf577517cad068079775", "filename": "src/test/ui/const-generics/transmute-const-param-static-reference.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Ftransmute-const-param-static-reference.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Ftransmute-const-param-static-reference.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftransmute-const-param-static-reference.min.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -5,7 +5,7 @@ LL | struct Const<const P: &'static ()>;\n    |                       ^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: aborting due to previous error\n "}, {"sha": "6b443c8bd907a13e0560f636033e1c3a7b4387ac", "filename": "src/test/ui/const-generics/transmute-const-param-static-reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Ftransmute-const-param-static-reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Ftransmute-const-param-static-reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftransmute-const-param-static-reference.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,7 +1,7 @@\n // revisions: full min\n //[full] check-pass\n \n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct Const<const P: &'static ()>;"}, {"sha": "926e807feb0b4893314a9eb527e5d3ff637d8fa7", "filename": "src/test/ui/const-generics/transparent-maybeunit-array-wrapper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // revisions: full min\n \n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n use std::mem::MaybeUninit;"}, {"sha": "b8fbb3979799da233cae6eb7a17baa19ef775363", "filename": "src/test/ui/const-generics/type-dependent/issue-71348.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.min.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -5,7 +5,7 @@ LL | trait Get<'a, const N: &'static str> {\n    |                        ^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: `&'static str` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-71348.rs:18:25\n@@ -14,7 +14,7 @@ LL |     fn ask<'a, const N: &'static str>(&'a self) -> &'a <Self as Get<N>>::Ta\n    |                         ^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2ef2f066a6f6d5e9e55b022b89541d05c3ffb3a6", "filename": "src/test/ui/const-generics/type-dependent/issue-71348.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,6 +1,6 @@\n // [full] run-pass\n // revisions: full min\n-#![cfg_attr(full, feature(const_param_types))]\n+#![cfg_attr(full, feature(adt_const_params))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n struct Foo {"}, {"sha": "67e7d106a1fcee0feff74318c9a4cf09038231c0", "filename": "src/test/ui/error-codes/E0771.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Ferror-codes%2FE0771.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Ferror-codes%2FE0771.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0771.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,5 +1,5 @@\n-#![feature(const_param_types)]\n-//~^ WARN the feature `const_param_types` is incomplete\n+#![feature(adt_const_params)]\n+//~^ WARN the feature `adt_const_params` is incomplete\n \n fn function_with_str<'a, const STRING: &'a str>() {} //~ ERROR E0771\n "}, {"sha": "730a7ef1284b612a66266f889adc1f69531c3dc5", "filename": "src/test/ui/error-codes/E0771.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0771.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,8 +1,8 @@\n-warning: the feature `const_param_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+warning: the feature `adt_const_params` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/E0771.rs:1:12\n    |\n-LL | #![feature(const_param_types)]\n-   |            ^^^^^^^^^^^^^^^^^\n+LL | #![feature(adt_const_params)]\n+   |            ^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information"}, {"sha": "8a3bcf25963f15498d20f29abbb5974a7bcca2c2", "filename": "src/test/ui/feature-gates/feature-gate-adt_const_params.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-adt_const_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-adt_const_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-adt_const_params.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "previous_filename": "src/test/ui/feature-gates/feature-gate-const_param_types.rs"}, {"sha": "d8f089a28b7e13b1896ebb6327cc4f82cf2b081c", "filename": "src/test/ui/feature-gates/feature-gate-adt_const_params.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-adt_const_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-adt_const_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-adt_const_params.stderr?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,11 +1,11 @@\n error: `&'static str` is forbidden as the type of a const generic parameter\n-  --> $DIR/feature-gate-const_param_types.rs:1:24\n+  --> $DIR/feature-gate-adt_const_params.rs:1:24\n    |\n LL | struct Foo<const NAME: &'static str>;\n    |                        ^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(const_param_types)]`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n error: aborting due to previous error\n ", "previous_filename": "src/test/ui/feature-gates/feature-gate-const_param_types.stderr"}, {"sha": "f450dfef575bc6030eb9f740f045a8fa9df44c30", "filename": "src/test/ui/symbol-names/const-generics-str-demangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-str-demangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-str-demangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-str-demangling.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -1,6 +1,6 @@\n // build-fail\n // compile-flags: -Z symbol-mangling-version=v0 --crate-name=c\n-#![feature(const_param_types, rustc_attrs)]\n+#![feature(adt_const_params, rustc_attrs)]\n #![allow(incomplete_features)]\n \n pub struct Str<const S: &'static str>;"}, {"sha": "fa3884860c33dc97b482cef9a3cc21145db2040f", "filename": "src/test/ui/symbol-names/const-generics-structural-demangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e781799a160129169b838e900aaef8ecb3a9dd/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.rs?ref=87e781799a160129169b838e900aaef8ecb3a9dd", "patch": "@@ -6,7 +6,7 @@\n // normalize-stderr-test: \"Cs[0-9a-zA-Z]+_4core\" -> \"Cs$$HASH_4core\"\n // normalize-stderr-test: \"core\\[[0-9a-f]+\\]\" -> \"core[$$HASH_HEX]\"\n \n-#![feature(const_param_types, decl_macro, rustc_attrs)]\n+#![feature(adt_const_params, decl_macro, rustc_attrs)]\n #![allow(incomplete_features)]\n \n pub struct RefByte<const RB: &'static u8>;"}]}