{"sha": "4e9c475527b0a4cbf43b14c028370b0f784fd99f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlOWM0NzU1MjdiMGE0Y2JmNDNiMTRjMDI4MzcwYjBmNzg0ZmQ5OWY=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-18T00:05:38Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-07-31T01:04:19Z"}, "message": "Work around bug #2935 by unautounboxing.", "tree": {"sha": "b59eed14241a82c1f2bed7e45fa2f0b5ebd2c789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b59eed14241a82c1f2bed7e45fa2f0b5ebd2c789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e9c475527b0a4cbf43b14c028370b0f784fd99f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e9c475527b0a4cbf43b14c028370b0f784fd99f", "html_url": "https://github.com/rust-lang/rust/commit/4e9c475527b0a4cbf43b14c028370b0f784fd99f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e9c475527b0a4cbf43b14c028370b0f784fd99f/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be3b733c49a1aeb5b99eb55a943f563531e1fc45", "url": "https://api.github.com/repos/rust-lang/rust/commits/be3b733c49a1aeb5b99eb55a943f563531e1fc45", "html_url": "https://github.com/rust-lang/rust/commit/be3b733c49a1aeb5b99eb55a943f563531e1fc45"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "3c08fec743ca3a970821b1def6d0bec0f107b9a6", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4e9c475527b0a4cbf43b14c028370b0f784fd99f/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e9c475527b0a4cbf43b14c028370b0f784fd99f/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=4e9c475527b0a4cbf43b14c028370b0f784fd99f", "patch": "@@ -217,7 +217,7 @@ fn consume_any_line_comment(rdr: string_reader)\n                     bump(rdr);\n                 }\n                 ret some({\n-                    tok: token::DOC_COMMENT(rdr.interner.intern(@acc)),\n+                    tok: token::DOC_COMMENT((*rdr.interner).intern(@acc)),\n                     sp: ast_util::mk_sp(start_chpos, rdr.chpos)\n                 });\n             } else {\n@@ -262,7 +262,7 @@ fn consume_block_comment(rdr: string_reader)\n             bump(rdr);\n             bump(rdr);\n             ret some({\n-                tok: token::DOC_COMMENT(rdr.interner.intern(@acc)),\n+                tok: token::DOC_COMMENT((*rdr.interner).intern(@acc)),\n                 sp: ast_util::mk_sp(start_chpos, rdr.chpos)\n             });\n         }\n@@ -395,11 +395,13 @@ fn scan_number(c: char, rdr: string_reader) -> token::token {\n         if c == '3' && n == '2' {\n             bump(rdr);\n             bump(rdr);\n-            ret token::LIT_FLOAT(rdr.interner.intern(@num_str), ast::ty_f32);\n+            ret token::LIT_FLOAT((*rdr.interner).intern(@num_str),\n+                                 ast::ty_f32);\n         } else if c == '6' && n == '4' {\n             bump(rdr);\n             bump(rdr);\n-            ret token::LIT_FLOAT(rdr.interner.intern(@num_str), ast::ty_f64);\n+            ret token::LIT_FLOAT((*rdr.interner).intern(@num_str),\n+                                 ast::ty_f64);\n             /* FIXME (#2252): if this is out of range for either a\n             32-bit or 64-bit float, it won't be noticed till the\n             back-end.  */\n@@ -408,7 +410,7 @@ fn scan_number(c: char, rdr: string_reader) -> token::token {\n         }\n     }\n     if is_float {\n-        ret token::LIT_FLOAT(rdr.interner.intern(@num_str), ast::ty_f);\n+        ret token::LIT_FLOAT((*rdr.interner).intern(@num_str), ast::ty_f);\n     } else {\n         if str::len(num_str) == 0u {\n             rdr.fatal(~\"no valid digits found for number\");\n@@ -456,7 +458,7 @@ fn next_token_inner(rdr: string_reader) -> token::token {\n         let is_mod_name = c == ':' && nextch(rdr) == ':';\n \n         // FIXME: perform NFKC normalization here. (Issue #2253)\n-        ret token::IDENT(rdr.interner.intern(@accum_str), is_mod_name);\n+        ret token::IDENT((*rdr.interner).intern(@accum_str), is_mod_name);\n     }\n     if is_dec_digit(c) {\n         ret scan_number(c, rdr);\n@@ -620,7 +622,7 @@ fn next_token_inner(rdr: string_reader) -> token::token {\n             }\n         }\n         bump(rdr);\n-        ret token::LIT_STR(rdr.interner.intern(@accum_str));\n+        ret token::LIT_STR((*rdr.interner).intern(@accum_str));\n       }\n       '-' {\n         if nextch(rdr) == '>' {"}, {"sha": "b6320b4f9cbc6d642f707121db33009b2e2178e3", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e9c475527b0a4cbf43b14c028370b0f784fd99f/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e9c475527b0a4cbf43b14c028370b0f784fd99f/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=4e9c475527b0a4cbf43b14c028370b0f784fd99f", "patch": "@@ -42,5 +42,6 @@ impl <T: const copy> of interner<T> for hash_interner<T> {\n     // failing to returning a value as items are interned. But for typestate,\n     // where we first check a pred and then rely on it, ceasing to fail is ok.\n     pure fn get(idx: uint) -> T { self.vect.get_elt(idx) }\n+\n     fn len() -> uint { ret self.vect.len(); }\n }\n\\ No newline at end of file"}]}