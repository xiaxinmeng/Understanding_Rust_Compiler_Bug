{"sha": "9a02386fd8f95303c4319bb3a18f8777e7908bcb", "node_id": "C_kwDOAAsO6NoAKDlhMDIzODZmZDhmOTUzMDNjNDMxOWJiM2ExOGY4Nzc3ZTc5MDhiY2I", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-03-29T17:36:38Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-03-29T18:03:36Z"}, "message": "Allow running `cargo dev lint` on a package directory", "tree": {"sha": "53241afdae66217829c02c0e88625754e7c1ae96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53241afdae66217829c02c0e88625754e7c1ae96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a02386fd8f95303c4319bb3a18f8777e7908bcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a02386fd8f95303c4319bb3a18f8777e7908bcb", "html_url": "https://github.com/rust-lang/rust/commit/9a02386fd8f95303c4319bb3a18f8777e7908bcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a02386fd8f95303c4319bb3a18f8777e7908bcb/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6206086dd5a83477131094b1f0ef61b10e7ced42", "url": "https://api.github.com/repos/rust-lang/rust/commits/6206086dd5a83477131094b1f0ef61b10e7ced42", "html_url": "https://github.com/rust-lang/rust/commit/6206086dd5a83477131094b1f0ef61b10e7ced42"}], "stats": {"total": 110, "additions": 80, "deletions": 30}, "files": [{"sha": "449ab1e9c7a0740c69082512513c18009e1b566c", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a02386fd8f95303c4319bb3a18f8777e7908bcb/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9a02386fd8f95303c4319bb3a18f8777e7908bcb/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=9a02386fd8f95303c4319bb3a18f8777e7908bcb", "patch": "@@ -11,6 +11,7 @@ itertools = \"0.10.1\"\n opener = \"0.5\"\n regex = \"1.5\"\n shell-escape = \"0.1\"\n+tempfile = \"3.3\"\n walkdir = \"2.3\"\n cargo_metadata = \"0.14\"\n "}, {"sha": "8e5c739afe05ae85e3a00cee769678233806b5ba", "filename": "clippy_dev/src/bless.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9a02386fd8f95303c4319bb3a18f8777e7908bcb/clippy_dev%2Fsrc%2Fbless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a02386fd8f95303c4319bb3a18f8777e7908bcb/clippy_dev%2Fsrc%2Fbless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fbless.rs?ref=9a02386fd8f95303c4319bb3a18f8777e7908bcb", "patch": "@@ -1,22 +1,15 @@\n //! `bless` updates the reference files in the repo with changed output files\n //! from the last test run.\n \n+use crate::cargo_clippy_path;\n use std::ffi::OsStr;\n use std::fs;\n use std::lazy::SyncLazy;\n use std::path::{Path, PathBuf};\n use walkdir::{DirEntry, WalkDir};\n \n-#[cfg(not(windows))]\n-static CARGO_CLIPPY_EXE: &str = \"cargo-clippy\";\n-#[cfg(windows)]\n-static CARGO_CLIPPY_EXE: &str = \"cargo-clippy.exe\";\n-\n-static CLIPPY_BUILD_TIME: SyncLazy<Option<std::time::SystemTime>> = SyncLazy::new(|| {\n-    let mut path = std::env::current_exe().unwrap();\n-    path.set_file_name(CARGO_CLIPPY_EXE);\n-    fs::metadata(path).ok()?.modified().ok()\n-});\n+static CLIPPY_BUILD_TIME: SyncLazy<Option<std::time::SystemTime>> =\n+    SyncLazy::new(|| cargo_clippy_path().metadata().ok()?.modified().ok());\n \n /// # Panics\n ///"}, {"sha": "72d01db27383601a61b4944e535d89a22cb6d2e6", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9a02386fd8f95303c4319bb3a18f8777e7908bcb/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a02386fd8f95303c4319bb3a18f8777e7908bcb/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=9a02386fd8f95303c4319bb3a18f8777e7908bcb", "patch": "@@ -13,6 +13,19 @@ pub mod serve;\n pub mod setup;\n pub mod update_lints;\n \n+#[cfg(not(windows))]\n+static CARGO_CLIPPY_EXE: &str = \"cargo-clippy\";\n+#[cfg(windows)]\n+static CARGO_CLIPPY_EXE: &str = \"cargo-clippy.exe\";\n+\n+/// Returns the path to the `cargo-clippy` binary\n+#[must_use]\n+pub fn cargo_clippy_path() -> PathBuf {\n+    let mut path = std::env::current_exe().expect(\"failed to get current executable name\");\n+    path.set_file_name(CARGO_CLIPPY_EXE);\n+    path\n+}\n+\n /// Returns the path to the Clippy project directory\n ///\n /// # Panics"}, {"sha": "1bc1a39542db5c00bb0ebc1dd854d4b90b5aa859", "filename": "clippy_dev/src/lint.rs", "status": "modified", "additions": 48, "deletions": 15, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/9a02386fd8f95303c4319bb3a18f8777e7908bcb/clippy_dev%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a02386fd8f95303c4319bb3a18f8777e7908bcb/clippy_dev%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flint.rs?ref=9a02386fd8f95303c4319bb3a18f8777e7908bcb", "patch": "@@ -1,19 +1,52 @@\n-use std::process::{self, Command};\n+use crate::cargo_clippy_path;\n+use std::process::{self, Command, ExitStatus};\n+use std::{fs, io};\n \n-pub fn run(filename: &str) {\n-    let code = Command::new(\"cargo\")\n-        .args([\"run\", \"--bin\", \"clippy-driver\", \"--\"])\n-        .args([\"-L\", \"./target/debug\"])\n-        .args([\"-Z\", \"no-codegen\"])\n-        .args([\"--edition\", \"2021\"])\n-        .arg(filename)\n-        .status()\n-        .expect(\"failed to run cargo\")\n-        .code();\n-\n-    if code.is_none() {\n-        eprintln!(\"Killed by signal\");\n+fn exit_if_err(status: io::Result<ExitStatus>) {\n+    match status.expect(\"failed to run command\").code() {\n+        Some(0) => {},\n+        Some(n) => process::exit(n),\n+        None => {\n+            eprintln!(\"Killed by signal\");\n+            process::exit(1);\n+        },\n     }\n+}\n+\n+pub fn run(path: &str) {\n+    let is_file = match fs::metadata(path) {\n+        Ok(metadata) => metadata.is_file(),\n+        Err(e) => {\n+            eprintln!(\"Failed to read {path}: {e:?}\");\n+            process::exit(1);\n+        },\n+    };\n+\n+    if is_file {\n+        exit_if_err(\n+            Command::new(\"cargo\")\n+                .args([\"run\", \"--bin\", \"clippy-driver\", \"--\"])\n+                .args([\"-L\", \"./target/debug\"])\n+                .args([\"-Z\", \"no-codegen\"])\n+                .args([\"--edition\", \"2021\"])\n+                .arg(path)\n+                .status(),\n+        );\n+    } else {\n+        exit_if_err(Command::new(\"cargo\").arg(\"build\").status());\n \n-    process::exit(code.unwrap_or(1));\n+        // Run in a tempdir as changes to clippy do not retrigger linting\n+        let target = tempfile::Builder::new()\n+            .prefix(\"clippy\")\n+            .tempdir()\n+            .expect(\"failed to create tempdir\");\n+\n+        let status = Command::new(cargo_clippy_path())\n+            .current_dir(path)\n+            .env(\"CARGO_TARGET_DIR\", target.as_ref())\n+            .status();\n+\n+        target.close().expect(\"failed to remove tempdir\");\n+        exit_if_err(status);\n+    }\n }"}, {"sha": "b1fe35a0243f04e4887cdb020edd0de32040c7eb", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9a02386fd8f95303c4319bb3a18f8777e7908bcb/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a02386fd8f95303c4319bb3a18f8777e7908bcb/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=9a02386fd8f95303c4319bb3a18f8777e7908bcb", "patch": "@@ -4,6 +4,7 @@\n \n use clap::{App, AppSettings, Arg, ArgMatches, SubCommand};\n use clippy_dev::{bless, fmt, lint, new_lint, serve, setup, update_lints};\n+use indoc::indoc;\n fn main() {\n     let matches = get_clap_config();\n \n@@ -56,8 +57,8 @@ fn main() {\n             serve::run(port, lint);\n         },\n         (\"lint\", Some(matches)) => {\n-            let filename = matches.value_of(\"filename\").unwrap();\n-            lint::run(filename);\n+            let path = matches.value_of(\"path\").unwrap();\n+            lint::run(path);\n         },\n         _ => {},\n     }\n@@ -225,11 +226,20 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n         )\n         .subcommand(\n             SubCommand::with_name(\"lint\")\n-                .about(\"Manually run clippy on a file\")\n+                .about(\"Manually run clippy on a file or package\")\n+                .after_help(indoc! {\"\n+                    EXAMPLES\n+                        Lint a single file:\n+                            cargo dev lint tests/ui/attrs.rs\n+\n+                        Lint a package directory:\n+                            cargo dev lint tests/ui-cargo/wildcard_dependencies/fail\n+                            cargo dev lint ~/my-project\n+                \"})\n                 .arg(\n-                    Arg::with_name(\"filename\")\n+                    Arg::with_name(\"path\")\n                         .required(true)\n-                        .help(\"The path to a file to lint\"),\n+                        .help(\"The path to a file or package directory to lint\"),\n                 ),\n         )\n         .get_matches()"}]}