{"sha": "b752c88fefef97c7993462e69cf4f9dff9e4bdd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NTJjODhmZWZlZjk3Yzc5OTM0NjJlNjljZjRmOWRmZjllNGJkZDE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-15T10:07:08Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-15T10:07:08Z"}, "message": "Put metadata loader in its own file", "tree": {"sha": "dad9a3002c8a47717328fcd78cb63be54909ae2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dad9a3002c8a47717328fcd78cb63be54909ae2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b752c88fefef97c7993462e69cf4f9dff9e4bdd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b752c88fefef97c7993462e69cf4f9dff9e4bdd1", "html_url": "https://github.com/rust-lang/rust/commit/b752c88fefef97c7993462e69cf4f9dff9e4bdd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b752c88fefef97c7993462e69cf4f9dff9e4bdd1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ea8bae114ca825564aa3094e2f2419c72bddc6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea8bae114ca825564aa3094e2f2419c72bddc6c", "html_url": "https://github.com/rust-lang/rust/commit/5ea8bae114ca825564aa3094e2f2419c72bddc6c"}], "stats": {"total": 115, "additions": 59, "deletions": 56}, "files": [{"sha": "9b08d4a8a3ca2c68e1f2257fc05863e6fc076186", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 56, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b752c88fefef97c7993462e69cf4f9dff9e4bdd1/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b752c88fefef97c7993462e69cf4f9dff9e4bdd1/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b752c88fefef97c7993462e69cf4f9dff9e4bdd1", "patch": "@@ -24,7 +24,6 @@ extern crate target_lexicon;\n \n use std::any::Any;\n use std::fs::File;\n-use std::path::Path;\n use std::sync::{mpsc, Arc};\n \n use rustc::dep_graph::DepGraph;\n@@ -33,7 +32,6 @@ use rustc::session::{config::OutputFilenames, CompileIncomplete};\n use rustc::ty::query::Providers;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_codegen_utils::link::{build_link_meta, out_filename};\n-use rustc_data_structures::owning_ref::{self, OwningRef};\n use rustc_data_structures::svh::Svh;\n use syntax::symbol::Symbol;\n \n@@ -63,6 +61,7 @@ mod base;\n mod common;\n mod constant;\n mod pretty_clif;\n+mod metadata;\n \n mod prelude {\n     pub use std::any::Any;\n@@ -125,59 +124,6 @@ pub struct ModuleTup<T> {\n     faerie: Option<T>,\n }\n \n-struct CraneliftMetadataLoader;\n-\n-impl MetadataLoader for CraneliftMetadataLoader {\n-    fn get_rlib_metadata(\n-        &self,\n-        _target: &rustc_target::spec::Target,\n-        path: &Path,\n-    ) -> Result<owning_ref::ErasedBoxRef<[u8]>, String> {\n-        let mut archive = ar::Archive::new(File::open(path).map_err(|e| format!(\"{:?}\", e))?);\n-        // Iterate over all entries in the archive:\n-        while let Some(entry_result) = archive.next_entry() {\n-            let mut entry = entry_result.map_err(|e| format!(\"{:?}\", e))?;\n-            if entry.header().identifier().starts_with(b\".rustc.clif_metadata\") {\n-                let mut buf = Vec::new();\n-                ::std::io::copy(&mut entry, &mut buf).map_err(|e| format!(\"{:?}\", e))?;\n-                let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();\n-                return Ok(rustc_erase_owner!(buf.map_owner_box()));\n-            }\n-        }\n-\n-        Err(\"couldn't find metadata entry\".to_string())\n-        //self.get_dylib_metadata(target, path)\n-    }\n-\n-    fn get_dylib_metadata(\n-        &self,\n-        _target: &rustc_target::spec::Target,\n-        _path: &Path,\n-    ) -> Result<owning_ref::ErasedBoxRef<[u8]>, String> {\n-        //use goblin::Object;\n-\n-        //let buffer = ::std::fs::read(path).map_err(|e|format!(\"{:?}\", e))?;\n-        /*match Object::parse(&buffer).map_err(|e|format!(\"{:?}\", e))? {\n-            Object::Elf(elf) => {\n-                println!(\"elf: {:#?}\", &elf);\n-            },\n-            Object::PE(pe) => {\n-                println!(\"pe: {:#?}\", &pe);\n-            },\n-            Object::Mach(mach) => {\n-                println!(\"mach: {:#?}\", &mach);\n-            },\n-            Object::Archive(archive) => {\n-                return Err(format!(\"archive: {:#?}\", &archive));\n-            },\n-            Object::Unknown(magic) => {\n-                return Err(format!(\"unknown magic: {:#x}\", magic))\n-            }\n-        }*/\n-        Err(\"dylib metadata loading is not yet supported\".to_string())\n-    }\n-}\n-\n struct CraneliftCodegenBackend;\n \n struct OngoingCodegen {\n@@ -203,7 +149,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n     }\n \n     fn metadata_loader(&self) -> Box<MetadataLoader + Sync> {\n-        Box::new(CraneliftMetadataLoader)\n+        Box::new(crate::metadata::CraneliftMetadataLoader)\n     }\n \n     fn provide(&self, providers: &mut Providers) {"}, {"sha": "384f59f171a904032019cc28bf45489d1e30b6e0", "filename": "src/metadata.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b752c88fefef97c7993462e69cf4f9dff9e4bdd1/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b752c88fefef97c7993462e69cf4f9dff9e4bdd1/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=b752c88fefef97c7993462e69cf4f9dff9e4bdd1", "patch": "@@ -0,0 +1,57 @@\n+use std::path::Path;\n+use std::fs::File;\n+use rustc_data_structures::owning_ref::{self, OwningRef};\n+use rustc::middle::cstore::MetadataLoader;\n+\n+pub struct CraneliftMetadataLoader;\n+\n+impl MetadataLoader for CraneliftMetadataLoader {\n+    fn get_rlib_metadata(\n+        &self,\n+        _target: &::rustc_target::spec::Target,\n+        path: &Path,\n+    ) -> Result<owning_ref::ErasedBoxRef<[u8]>, String> {\n+        let mut archive = ar::Archive::new(File::open(path).map_err(|e| format!(\"{:?}\", e))?);\n+        // Iterate over all entries in the archive:\n+        while let Some(entry_result) = archive.next_entry() {\n+            let mut entry = entry_result.map_err(|e| format!(\"{:?}\", e))?;\n+            if entry.header().identifier().starts_with(b\".rustc.clif_metadata\") {\n+                let mut buf = Vec::new();\n+                ::std::io::copy(&mut entry, &mut buf).map_err(|e| format!(\"{:?}\", e))?;\n+                let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();\n+                return Ok(rustc_erase_owner!(buf.map_owner_box()));\n+            }\n+        }\n+\n+        Err(\"couldn't find metadata entry\".to_string())\n+        //self.get_dylib_metadata(target, path)\n+    }\n+\n+    fn get_dylib_metadata(\n+        &self,\n+        _target: &::rustc_target::spec::Target,\n+        _path: &Path,\n+    ) -> Result<owning_ref::ErasedBoxRef<[u8]>, String> {\n+        //use goblin::Object;\n+\n+        //let buffer = ::std::fs::read(path).map_err(|e|format!(\"{:?}\", e))?;\n+        /*match Object::parse(&buffer).map_err(|e|format!(\"{:?}\", e))? {\n+            Object::Elf(elf) => {\n+                println!(\"elf: {:#?}\", &elf);\n+            },\n+            Object::PE(pe) => {\n+                println!(\"pe: {:#?}\", &pe);\n+            },\n+            Object::Mach(mach) => {\n+                println!(\"mach: {:#?}\", &mach);\n+            },\n+            Object::Archive(archive) => {\n+                return Err(format!(\"archive: {:#?}\", &archive));\n+            },\n+            Object::Unknown(magic) => {\n+                return Err(format!(\"unknown magic: {:#x}\", magic))\n+            }\n+        }*/\n+        Err(\"dylib metadata loading is not yet supported\".to_string())\n+    }\n+}"}]}