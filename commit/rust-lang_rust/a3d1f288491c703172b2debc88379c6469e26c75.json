{"sha": "a3d1f288491c703172b2debc88379c6469e26c75", "node_id": "C_kwDOAAsO6NoAKGEzZDFmMjg4NDkxYzcwMzE3MmIyZGViYzg4Mzc5YzY0NjllMjZjNzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-11T20:16:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-11T20:16:42Z"}, "message": "Auto merge of #8818 - koic:use_rust_2021_prelude, r=flip1995\n\nUse the traits added to the Rust 2021 Edition prelude\n\nFollow up https://github.com/rust-lang/rust/pull/96861.\n\nThis PR uses the traits added to the Rust 2021 Edition prelude.\n\n> The `TryInto`, `TryFrom` and `FromIterator` traits are now part of the prelude.\n\nhttps://doc.rust-lang.org/edition-guide/rust-2021/prelude.html\n\n---\n\nchangelog: none", "tree": {"sha": "e1d5699e76292d4b8f0a8640a18a7953a92c6aac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1d5699e76292d4b8f0a8640a18a7953a92c6aac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3d1f288491c703172b2debc88379c6469e26c75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3d1f288491c703172b2debc88379c6469e26c75", "html_url": "https://github.com/rust-lang/rust/commit/a3d1f288491c703172b2debc88379c6469e26c75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3d1f288491c703172b2debc88379c6469e26c75/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6889d096a905a417e1e61b6d10b803260f157f04", "url": "https://api.github.com/repos/rust-lang/rust/commits/6889d096a905a417e1e61b6d10b803260f157f04", "html_url": "https://github.com/rust-lang/rust/commit/6889d096a905a417e1e61b6d10b803260f157f04"}, {"sha": "ae0216d55700274166a853cee1daba59196d4bff", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae0216d55700274166a853cee1daba59196d4bff", "html_url": "https://github.com/rust-lang/rust/commit/ae0216d55700274166a853cee1daba59196d4bff"}], "stats": {"total": 227, "additions": 99, "deletions": 128}, "files": [{"sha": "7eeaaa0192147d822ab50be86d1238b044adce0a", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -30,7 +30,6 @@ declare_clippy_lint! {\n     /// Could be written:\n     ///\n     /// ```rust\n-    /// # use std::convert::TryFrom;\n     /// # let foo = 1;\n     /// # let _ =\n     /// i32::try_from(foo).is_ok()"}, {"sha": "10be245b36293ee578c6a8adb64bd51beb7c900d", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -8,7 +8,6 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, IntTy, UintTy};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use std::convert::TryFrom;\n \n declare_clippy_lint! {\n     /// ### What it does"}, {"sha": "7a81fb37e841cf7f218f23bbbddb9ecaf7ae7bea", "filename": "clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -4,8 +4,6 @@ use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n \n-use std::convert::TryInto;\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for excessive"}, {"sha": "9f868df3ad063452f3dd45ebe960d2430fb1efc0", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -32,7 +32,6 @@ declare_clippy_lint! {\n     /// // Good\n     /// struct Foo(i32);\n     ///\n-    /// use std::convert::TryFrom;\n     /// impl TryFrom<String> for Foo {\n     ///     type Error = ();\n     ///     fn try_from(s: String) -> Result<Self, Self::Error> {"}, {"sha": "9ce5b8e17a9ae45ea1ba304ad7331ea07635f217", "filename": "clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -14,7 +14,6 @@ use rustc_middle::ty;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{symbol::Ident, Span};\n-use std::convert::TryInto;\n \n declare_clippy_lint! {\n     /// ### What it does"}, {"sha": "3e07961fcb3369c8079bd650419a73597be44bfe", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -1776,8 +1776,6 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// use std::iter::FromIterator;\n-    ///\n     /// let five_fives = std::iter::repeat(5).take(5);\n     ///\n     /// let v = Vec::from_iter(five_fives);"}, {"sha": "9904617353f8aa373a1beb45e05b492ed1634260", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -19,7 +19,6 @@ use rustc_mir_dataflow::{Analysis, AnalysisDomain, CallReturnPlaces, GenKill, Ge\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::sym;\n-use std::convert::TryFrom;\n use std::ops::ControlFlow;\n \n macro_rules! unwrap_or_continue {"}, {"sha": "67129299e2f9294292c1abd84b95a86d74bce721", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -7,7 +7,6 @@ use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n-use std::convert::TryFrom;\n \n declare_clippy_lint! {\n     /// ### What it does"}, {"sha": "e223aea297fc478bf9816be4ec8f4e73a65b6391", "filename": "clippy_lints/src/tabs_in_doc_comments.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -4,7 +4,6 @@ use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n-use std::convert::TryFrom;\n \n declare_clippy_lint! {\n     /// ### What it does"}, {"sha": "75fab624fdae34460c52da59ed45724832f3a8c5", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -13,7 +13,6 @@ use rustc_middle::ty::{self, FloatTy, ScalarInt, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_span::symbol::Symbol;\n use std::cmp::Ordering::{self, Equal};\n-use std::convert::TryInto;\n use std::hash::{Hash, Hasher};\n use std::iter;\n "}, {"sha": "1de73a80ad20cd79b693687348a947936af42ec3", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -17,7 +17,6 @@ use rustc_middle::ty;\n use rustc_span::source_map::{BytePos, CharPos, Pos, Span, SyntaxContext};\n use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use std::borrow::Cow;\n-use std::convert::TryInto;\n use std::fmt::{Display, Write as _};\n use std::iter;\n use std::ops::{Add, Neg, Not, Sub};"}, {"sha": "74d0d7c2650dd09db2575527b1f8cd4e16510849", "filename": "tests/ui-toml/unwrap_used/unwrap_used.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -7,7 +7,6 @@\n use std::collections::BTreeMap;\n use std::collections::HashMap;\n use std::collections::VecDeque;\n-use std::iter::FromIterator;\n \n struct GetFalsePositive {\n     arr: [u32; 3],"}, {"sha": "6bcfa0a8b5647ba21ff6a47d40097752317970f8", "filename": "tests/ui-toml/unwrap_used/unwrap_used.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.stderr?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -1,5 +1,5 @@\n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/unwrap_used.rs:36:17\n+  --> $DIR/unwrap_used.rs:35:17\n    |\n LL |         let _ = boxed_slice.get(1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`\n@@ -11,7 +11,7 @@ LL | #![deny(clippy::get_unwrap)]\n    |         ^^^^^^^^^^^^^^^^^^\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/unwrap_used.rs:36:17\n+  --> $DIR/unwrap_used.rs:35:17\n    |\n LL |         let _ = boxed_slice.get(1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -20,175 +20,175 @@ LL |         let _ = boxed_slice.get(1).unwrap();\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/unwrap_used.rs:37:17\n+  --> $DIR/unwrap_used.rs:36:17\n    |\n LL |         let _ = some_slice.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_slice[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/unwrap_used.rs:37:17\n+  --> $DIR/unwrap_used.rs:36:17\n    |\n LL |         let _ = some_slice.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/unwrap_used.rs:38:17\n+  --> $DIR/unwrap_used.rs:37:17\n    |\n LL |         let _ = some_vec.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vec[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/unwrap_used.rs:38:17\n+  --> $DIR/unwrap_used.rs:37:17\n    |\n LL |         let _ = some_vec.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-  --> $DIR/unwrap_used.rs:39:17\n+  --> $DIR/unwrap_used.rs:38:17\n    |\n LL |         let _ = some_vecdeque.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vecdeque[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/unwrap_used.rs:39:17\n+  --> $DIR/unwrap_used.rs:38:17\n    |\n LL |         let _ = some_vecdeque.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n-  --> $DIR/unwrap_used.rs:40:17\n+  --> $DIR/unwrap_used.rs:39:17\n    |\n LL |         let _ = some_hashmap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_hashmap[&1]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/unwrap_used.rs:40:17\n+  --> $DIR/unwrap_used.rs:39:17\n    |\n LL |         let _ = some_hashmap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n-  --> $DIR/unwrap_used.rs:41:17\n+  --> $DIR/unwrap_used.rs:40:17\n    |\n LL |         let _ = some_btreemap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_btreemap[&1]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/unwrap_used.rs:41:17\n+  --> $DIR/unwrap_used.rs:40:17\n    |\n LL |         let _ = some_btreemap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/unwrap_used.rs:45:21\n+  --> $DIR/unwrap_used.rs:44:21\n    |\n LL |         let _: u8 = *boxed_slice.get(1).unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[1]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/unwrap_used.rs:45:22\n+  --> $DIR/unwrap_used.rs:44:22\n    |\n LL |         let _: u8 = *boxed_slice.get(1).unwrap();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/unwrap_used.rs:50:9\n+  --> $DIR/unwrap_used.rs:49:9\n    |\n LL |         *boxed_slice.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/unwrap_used.rs:50:10\n+  --> $DIR/unwrap_used.rs:49:10\n    |\n LL |         *boxed_slice.get_mut(0).unwrap() = 1;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/unwrap_used.rs:51:9\n+  --> $DIR/unwrap_used.rs:50:9\n    |\n LL |         *some_slice.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_slice[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/unwrap_used.rs:51:10\n+  --> $DIR/unwrap_used.rs:50:10\n    |\n LL |         *some_slice.get_mut(0).unwrap() = 1;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/unwrap_used.rs:52:9\n+  --> $DIR/unwrap_used.rs:51:9\n    |\n LL |         *some_vec.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/unwrap_used.rs:52:10\n+  --> $DIR/unwrap_used.rs:51:10\n    |\n LL |         *some_vec.get_mut(0).unwrap() = 1;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-  --> $DIR/unwrap_used.rs:53:9\n+  --> $DIR/unwrap_used.rs:52:9\n    |\n LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vecdeque[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/unwrap_used.rs:53:10\n+  --> $DIR/unwrap_used.rs:52:10\n    |\n LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/unwrap_used.rs:65:17\n+  --> $DIR/unwrap_used.rs:64:17\n    |\n LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/unwrap_used.rs:65:17\n+  --> $DIR/unwrap_used.rs:64:17\n    |\n LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/unwrap_used.rs:66:17\n+  --> $DIR/unwrap_used.rs:65:17\n    |\n LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/unwrap_used.rs:66:17\n+  --> $DIR/unwrap_used.rs:65:17\n    |\n LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/unwrap_used.rs:73:13\n+  --> $DIR/unwrap_used.rs:72:13\n    |\n LL |     let _ = boxed_slice.get(1).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`"}, {"sha": "a2ef0fe827c018844b16e213c759996c61b05e57", "filename": "tests/ui/auxiliary/proc_macro_suspicious_else_formatting.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fauxiliary%2Fproc_macro_suspicious_else_formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fauxiliary%2Fproc_macro_suspicious_else_formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_suspicious_else_formatting.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -5,7 +5,6 @@\n \n extern crate proc_macro;\n use proc_macro::{token_stream, Delimiter, Group, Ident, Span, TokenStream, TokenTree};\n-use std::iter::FromIterator;\n \n fn read_ident(iter: &mut token_stream::IntoIter) -> Ident {\n     match iter.next() {"}, {"sha": "0983d393b560ef587a8b2885a947d3ae13487bae", "filename": "tests/ui/checked_conversions.fixed", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fchecked_conversions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fchecked_conversions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_conversions.fixed?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -7,8 +7,6 @@\n )]\n #![warn(clippy::checked_conversions)]\n \n-use std::convert::TryFrom;\n-\n // Positive tests\n \n // Signed to unsigned"}, {"sha": "7d26ace47fdf559e47ca170069dddd4375f0f5c1", "filename": "tests/ui/checked_conversions.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_conversions.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -7,8 +7,6 @@\n )]\n #![warn(clippy::checked_conversions)]\n \n-use std::convert::TryFrom;\n-\n // Positive tests\n \n // Signed to unsigned"}, {"sha": "2e518040561c4abd16c2875416b4567360664461", "filename": "tests/ui/checked_conversions.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fchecked_conversions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fchecked_conversions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_conversions.stderr?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -1,97 +1,97 @@\n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:17:13\n+  --> $DIR/checked_conversions.rs:15:13\n    |\n LL |     let _ = value <= (u32::max_value() as i64) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::try_from(value).is_ok()`\n    |\n    = note: `-D clippy::checked-conversions` implied by `-D warnings`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:18:13\n+  --> $DIR/checked_conversions.rs:16:13\n    |\n LL |     let _ = value <= (u32::MAX as i64) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:22:13\n+  --> $DIR/checked_conversions.rs:20:13\n    |\n LL |     let _ = value <= i64::from(u16::max_value()) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:23:13\n+  --> $DIR/checked_conversions.rs:21:13\n    |\n LL |     let _ = value <= i64::from(u16::MAX) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:27:13\n+  --> $DIR/checked_conversions.rs:25:13\n    |\n LL |     let _ = value <= (u8::max_value() as isize) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u8::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:28:13\n+  --> $DIR/checked_conversions.rs:26:13\n    |\n LL |     let _ = value <= (u8::MAX as isize) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u8::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:34:13\n+  --> $DIR/checked_conversions.rs:32:13\n    |\n LL |     let _ = value <= (i32::max_value() as i64) && value >= (i32::min_value() as i64);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:35:13\n+  --> $DIR/checked_conversions.rs:33:13\n    |\n LL |     let _ = value <= (i32::MAX as i64) && value >= (i32::MIN as i64);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:39:13\n+  --> $DIR/checked_conversions.rs:37:13\n    |\n LL |     let _ = value <= i64::from(i16::max_value()) && value >= i64::from(i16::min_value());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:40:13\n+  --> $DIR/checked_conversions.rs:38:13\n    |\n LL |     let _ = value <= i64::from(i16::MAX) && value >= i64::from(i16::MIN);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:46:13\n+  --> $DIR/checked_conversions.rs:44:13\n    |\n LL |     let _ = value <= i32::max_value() as u32;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:47:13\n+  --> $DIR/checked_conversions.rs:45:13\n    |\n LL |     let _ = value <= i32::MAX as u32;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:51:13\n+  --> $DIR/checked_conversions.rs:49:13\n    |\n LL |     let _ = value <= isize::max_value() as usize && value as i32 == 5;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `isize::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:52:13\n+  --> $DIR/checked_conversions.rs:50:13\n    |\n LL |     let _ = value <= isize::MAX as usize && value as i32 == 5;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `isize::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:56:13\n+  --> $DIR/checked_conversions.rs:54:13\n    |\n LL |     let _ = value <= u16::max_value() as u32 && value as i32 == 5;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:57:13\n+  --> $DIR/checked_conversions.rs:55:13\n    |\n LL |     let _ = value <= u16::MAX as u32 && value as i32 == 5;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`"}, {"sha": "5ff2af7cd82531f6c91c8117dd6e49d6a97fa0fd", "filename": "tests/ui/crashes/auxiliary/proc_macro_crash.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fcrashes%2Fauxiliary%2Fproc_macro_crash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fcrashes%2Fauxiliary%2Fproc_macro_crash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fauxiliary%2Fproc_macro_crash.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -12,7 +12,6 @@\n extern crate proc_macro;\n \n use proc_macro::{Delimiter, Group, Ident, Span, TokenStream, TokenTree};\n-use std::iter::FromIterator;\n \n #[proc_macro]\n pub fn macro_test(input_stream: TokenStream) -> TokenStream {"}, {"sha": "403c3b3e44380ef3a971ab36504d48b2bd0537bb", "filename": "tests/ui/from_iter_instead_of_collect.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -4,7 +4,6 @@\n #![allow(unused_imports)]\n \n use std::collections::{BTreeMap, BTreeSet, HashMap, VecDeque};\n-use std::iter::FromIterator;\n \n struct Foo(Vec<bool>);\n "}, {"sha": "fefc7b01a65bbaebf786046d5406f99d414d500c", "filename": "tests/ui/from_iter_instead_of_collect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Ffrom_iter_instead_of_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Ffrom_iter_instead_of_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -4,7 +4,6 @@\n #![allow(unused_imports)]\n \n use std::collections::{BTreeMap, BTreeSet, HashMap, VecDeque};\n-use std::iter::FromIterator;\n \n struct Foo(Vec<bool>);\n "}, {"sha": "8aa3c3c01f818948c3956f1ea549a13368ae53d5", "filename": "tests/ui/from_iter_instead_of_collect.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -1,91 +1,91 @@\n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:19:9\n+  --> $DIR/from_iter_instead_of_collect.rs:18:9\n    |\n LL |         <Self as FromIterator<bool>>::from_iter(iter.into_iter().copied())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `iter.into_iter().copied().collect::<Self>()`\n    |\n    = note: `-D clippy::from-iter-instead-of-collect` implied by `-D warnings`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:25:13\n+  --> $DIR/from_iter_instead_of_collect.rs:24:13\n    |\n LL |     let _ = Vec::from_iter(iter_expr);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `iter_expr.collect::<Vec<_>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:27:13\n+  --> $DIR/from_iter_instead_of_collect.rs:26:13\n    |\n LL |     let _ = HashMap::<usize, &i8>::from_iter(vec![5, 5, 5, 5].iter().enumerate());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `vec![5, 5, 5, 5].iter().enumerate().collect::<HashMap<usize, &i8>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:32:19\n+  --> $DIR/from_iter_instead_of_collect.rs:31:19\n    |\n LL |     assert_eq!(a, Vec::from_iter(0..3));\n    |                   ^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<Vec<_>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:33:19\n+  --> $DIR/from_iter_instead_of_collect.rs:32:19\n    |\n LL |     assert_eq!(a, Vec::<i32>::from_iter(0..3));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<Vec<i32>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:35:17\n+  --> $DIR/from_iter_instead_of_collect.rs:34:17\n    |\n LL |     let mut b = VecDeque::from_iter(0..3);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<VecDeque<_>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:38:17\n+  --> $DIR/from_iter_instead_of_collect.rs:37:17\n    |\n LL |     let mut b = VecDeque::<i32>::from_iter(0..3);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<VecDeque<i32>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:43:21\n+  --> $DIR/from_iter_instead_of_collect.rs:42:21\n    |\n LL |         let mut b = collections::VecDeque::<i32>::from_iter(0..3);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<collections::VecDeque<i32>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:48:14\n+  --> $DIR/from_iter_instead_of_collect.rs:47:14\n    |\n LL |     let bm = BTreeMap::from_iter(values.iter().cloned());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `values.iter().cloned().collect::<BTreeMap<_, _>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:49:19\n+  --> $DIR/from_iter_instead_of_collect.rs:48:19\n    |\n LL |     let mut bar = BTreeMap::from_iter(bm.range(0..2));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `bm.range(0..2).collect::<BTreeMap<_, _>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:52:19\n+  --> $DIR/from_iter_instead_of_collect.rs:51:19\n    |\n LL |     let mut bts = BTreeSet::from_iter(0..3);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<BTreeSet<_>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:56:17\n+  --> $DIR/from_iter_instead_of_collect.rs:55:17\n    |\n LL |         let _ = collections::BTreeSet::from_iter(0..3);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<collections::BTreeSet<_>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:57:17\n+  --> $DIR/from_iter_instead_of_collect.rs:56:17\n    |\n LL |         let _ = collections::BTreeSet::<u32>::from_iter(0..3);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<collections::BTreeSet<u32>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:60:15\n+  --> $DIR/from_iter_instead_of_collect.rs:59:15\n    |\n LL |     for _i in Vec::from_iter([1, 2, 3].iter()) {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `[1, 2, 3].iter().collect::<Vec<_>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:61:15\n+  --> $DIR/from_iter_instead_of_collect.rs:60:15\n    |\n LL |     for _i in Vec::<&i32>::from_iter([1, 2, 3].iter()) {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `[1, 2, 3].iter().collect::<Vec<&i32>>()`"}, {"sha": "8f165d675890ca9fc9cd4f9edabdef8c83d2f0da", "filename": "tests/ui/get_unwrap.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fget_unwrap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fget_unwrap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.fixed?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -7,7 +7,6 @@\n use std::collections::BTreeMap;\n use std::collections::HashMap;\n use std::collections::VecDeque;\n-use std::iter::FromIterator;\n \n struct GetFalsePositive {\n     arr: [u32; 3],"}, {"sha": "786749daa746e802a228c5cf1165ee544ce1fc20", "filename": "tests/ui/get_unwrap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -7,7 +7,6 @@\n use std::collections::BTreeMap;\n use std::collections::HashMap;\n use std::collections::VecDeque;\n-use std::iter::FromIterator;\n \n struct GetFalsePositive {\n     arr: [u32; 3],"}, {"sha": "ea8fec5273511b3c4aa5447d22f51a3208405a21", "filename": "tests/ui/get_unwrap.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fget_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fget_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.stderr?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -1,5 +1,5 @@\n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:36:17\n+  --> $DIR/get_unwrap.rs:35:17\n    |\n LL |         let _ = boxed_slice.get(1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`\n@@ -11,7 +11,7 @@ LL | #![deny(clippy::get_unwrap)]\n    |         ^^^^^^^^^^^^^^^^^^\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:36:17\n+  --> $DIR/get_unwrap.rs:35:17\n    |\n LL |         let _ = boxed_slice.get(1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -20,167 +20,167 @@ LL |         let _ = boxed_slice.get(1).unwrap();\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:37:17\n+  --> $DIR/get_unwrap.rs:36:17\n    |\n LL |         let _ = some_slice.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_slice[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:37:17\n+  --> $DIR/get_unwrap.rs:36:17\n    |\n LL |         let _ = some_slice.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:38:17\n+  --> $DIR/get_unwrap.rs:37:17\n    |\n LL |         let _ = some_vec.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vec[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:38:17\n+  --> $DIR/get_unwrap.rs:37:17\n    |\n LL |         let _ = some_vec.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:39:17\n+  --> $DIR/get_unwrap.rs:38:17\n    |\n LL |         let _ = some_vecdeque.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vecdeque[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:39:17\n+  --> $DIR/get_unwrap.rs:38:17\n    |\n LL |         let _ = some_vecdeque.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:40:17\n+  --> $DIR/get_unwrap.rs:39:17\n    |\n LL |         let _ = some_hashmap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_hashmap[&1]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:40:17\n+  --> $DIR/get_unwrap.rs:39:17\n    |\n LL |         let _ = some_hashmap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:41:17\n+  --> $DIR/get_unwrap.rs:40:17\n    |\n LL |         let _ = some_btreemap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_btreemap[&1]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:41:17\n+  --> $DIR/get_unwrap.rs:40:17\n    |\n LL |         let _ = some_btreemap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:45:21\n+  --> $DIR/get_unwrap.rs:44:21\n    |\n LL |         let _: u8 = *boxed_slice.get(1).unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[1]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:45:22\n+  --> $DIR/get_unwrap.rs:44:22\n    |\n LL |         let _: u8 = *boxed_slice.get(1).unwrap();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:50:9\n+  --> $DIR/get_unwrap.rs:49:9\n    |\n LL |         *boxed_slice.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:50:10\n+  --> $DIR/get_unwrap.rs:49:10\n    |\n LL |         *boxed_slice.get_mut(0).unwrap() = 1;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:51:9\n+  --> $DIR/get_unwrap.rs:50:9\n    |\n LL |         *some_slice.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_slice[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:51:10\n+  --> $DIR/get_unwrap.rs:50:10\n    |\n LL |         *some_slice.get_mut(0).unwrap() = 1;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:52:9\n+  --> $DIR/get_unwrap.rs:51:9\n    |\n LL |         *some_vec.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:52:10\n+  --> $DIR/get_unwrap.rs:51:10\n    |\n LL |         *some_vec.get_mut(0).unwrap() = 1;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:53:9\n+  --> $DIR/get_unwrap.rs:52:9\n    |\n LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vecdeque[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:53:10\n+  --> $DIR/get_unwrap.rs:52:10\n    |\n LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:65:17\n+  --> $DIR/get_unwrap.rs:64:17\n    |\n LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:65:17\n+  --> $DIR/get_unwrap.rs:64:17\n    |\n LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:66:17\n+  --> $DIR/get_unwrap.rs:65:17\n    |\n LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:66:17\n+  --> $DIR/get_unwrap.rs:65:17\n    |\n LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a1e5fad0c621fbb51913dfe903fd0c26ea4044db", "filename": "tests/ui/infinite_iter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_iter.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -51,7 +51,6 @@ fn main() {\n \n mod finite_collect {\n     use std::collections::HashSet;\n-    use std::iter::FromIterator;\n \n     struct C;\n     impl FromIterator<i32> for C {"}, {"sha": "ba277e36339addc8465c7aff1cddc91447e53f99", "filename": "tests/ui/infinite_iter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Finfinite_iter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Finfinite_iter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_iter.stderr?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -98,7 +98,7 @@ LL |     (0..).all(|x| x == 24); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:64:31\n+  --> $DIR/infinite_iter.rs:63:31\n    |\n LL |         let _: HashSet<i32> = (0..).collect(); // Infinite iter\n    |                               ^^^^^^^^^^^^^^^"}, {"sha": "0704ba2f933eb774dd91fedab659bec8ae1e1fcb", "filename": "tests/ui/manual_str_repeat.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fmanual_str_repeat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fmanual_str_repeat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_str_repeat.fixed?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -4,7 +4,7 @@\n #![warn(clippy::manual_str_repeat)]\n \n use std::borrow::Cow;\n-use std::iter::{repeat, FromIterator};\n+use std::iter::repeat;\n \n fn main() {\n     let _: String = \"test\".repeat(10);"}, {"sha": "f522be439aa0eaf0a69f5217c88c1ead4d67eee8", "filename": "tests/ui/manual_str_repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fmanual_str_repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fmanual_str_repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_str_repeat.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -4,7 +4,7 @@\n #![warn(clippy::manual_str_repeat)]\n \n use std::borrow::Cow;\n-use std::iter::{repeat, FromIterator};\n+use std::iter::repeat;\n \n fn main() {\n     let _: String = std::iter::repeat(\"test\").take(10).collect();"}, {"sha": "bb35ab1a14efa6f4c160cf63fe0cc0749aa66f8f", "filename": "tests/ui/map_err.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fmap_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fmap_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_err.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -1,6 +1,5 @@\n #![warn(clippy::map_err_ignore)]\n #![allow(clippy::unnecessary_wraps)]\n-use std::convert::TryFrom;\n use std::error::Error;\n use std::fmt;\n "}, {"sha": "c035840521e49121da3d58628aa1b089e68efa43", "filename": "tests/ui/map_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fmap_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fmap_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_err.stderr?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -1,5 +1,5 @@\n error: `map_err(|_|...` wildcard pattern discards the original error\n-  --> $DIR/map_err.rs:23:32\n+  --> $DIR/map_err.rs:22:32\n    |\n LL |     println!(\"{:?}\", x.map_err(|_| Errors::Ignored));\n    |                                ^^^"}, {"sha": "9805097084d303cc1bc8153202afa7afc7f2bac6", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -26,7 +26,6 @@ use std::collections::BTreeMap;\n use std::collections::HashMap;\n use std::collections::HashSet;\n use std::collections::VecDeque;\n-use std::iter::FromIterator;\n use std::ops::Mul;\n use std::rc::{self, Rc};\n use std::sync::{self, Arc};"}, {"sha": "6be38b24fbda2a393326430137df3acb7f8a9914", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -1,5 +1,5 @@\n error: methods called `new` usually return `Self`\n-  --> $DIR/methods.rs:104:5\n+  --> $DIR/methods.rs:103:5\n    |\n LL | /     fn new() -> i32 {\n LL | |         0\n@@ -9,7 +9,7 @@ LL | |     }\n    = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n \n error: called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(..)` instead\n-  --> $DIR/methods.rs:125:13\n+  --> $DIR/methods.rs:124:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^"}, {"sha": "39f54c27bee1a6356e40ad4628a9b6f10e086e14", "filename": "tests/ui/useless_conversion_try.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fuseless_conversion_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fuseless_conversion_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion_try.rs?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -1,7 +1,5 @@\n #![deny(clippy::useless_conversion)]\n \n-use std::convert::{TryFrom, TryInto};\n-\n fn test_generic<T: Copy>(val: T) -> T {\n     let _ = T::try_from(val).unwrap();\n     val.try_into().unwrap()"}, {"sha": "b691c13f7dbb747ac540e2258a071b53419a186e", "filename": "tests/ui/useless_conversion_try.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fuseless_conversion_try.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3d1f288491c703172b2debc88379c6469e26c75/tests%2Fui%2Fuseless_conversion_try.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion_try.stderr?ref=a3d1f288491c703172b2debc88379c6469e26c75", "patch": "@@ -1,5 +1,5 @@\n error: useless conversion to the same type: `T`\n-  --> $DIR/useless_conversion_try.rs:6:13\n+  --> $DIR/useless_conversion_try.rs:4:13\n    |\n LL |     let _ = T::try_from(val).unwrap();\n    |             ^^^^^^^^^^^^^^^^\n@@ -12,63 +12,63 @@ LL | #![deny(clippy::useless_conversion)]\n    = help: consider removing `T::try_from()`\n \n error: useless conversion to the same type: `T`\n-  --> $DIR/useless_conversion_try.rs:7:5\n+  --> $DIR/useless_conversion_try.rs:5:5\n    |\n LL |     val.try_into().unwrap()\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider removing `.try_into()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion_try.rs:29:21\n+  --> $DIR/useless_conversion_try.rs:27:21\n    |\n LL |     let _: String = \"foo\".to_string().try_into().unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `.try_into()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion_try.rs:30:21\n+  --> $DIR/useless_conversion_try.rs:28:21\n    |\n LL |     let _: String = TryFrom::try_from(\"foo\".to_string()).unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `TryFrom::try_from()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion_try.rs:31:13\n+  --> $DIR/useless_conversion_try.rs:29:13\n    |\n LL |     let _ = String::try_from(\"foo\".to_string()).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `String::try_from()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion_try.rs:32:13\n+  --> $DIR/useless_conversion_try.rs:30:13\n    |\n LL |     let _ = String::try_from(format!(\"A: {:04}\", 123)).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `String::try_from()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion_try.rs:33:21\n+  --> $DIR/useless_conversion_try.rs:31:21\n    |\n LL |     let _: String = format!(\"Hello {}\", \"world\").try_into().unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `.try_into()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion_try.rs:34:21\n+  --> $DIR/useless_conversion_try.rs:32:21\n    |\n LL |     let _: String = \"\".to_owned().try_into().unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `.try_into()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion_try.rs:35:27\n+  --> $DIR/useless_conversion_try.rs:33:27\n    |\n LL |     let _: String = match String::from(\"_\").try_into() {\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}