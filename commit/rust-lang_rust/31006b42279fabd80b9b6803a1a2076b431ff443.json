{"sha": "31006b42279fabd80b9b6803a1a2076b431ff443", "node_id": "C_kwDOAAsO6NoAKDMxMDA2YjQyMjc5ZmFiZDgwYjliNjgwM2ExYTIwNzZiNDMxZmY0NDM", "commit": {"author": {"name": "royrustdev", "email": "royrustdev@gmail.com", "date": "2022-10-12T11:11:48Z"}, "committer": {"name": "royrustdev", "email": "royrustdev@gmail.com", "date": "2022-10-12T11:11:48Z"}, "message": "update Applicability of `rc_buffer` from `MachineApplicable` to\n`Unspecified`", "tree": {"sha": "a8181485b303108a01d8646ea7cde165aae02621", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8181485b303108a01d8646ea7cde165aae02621"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31006b42279fabd80b9b6803a1a2076b431ff443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31006b42279fabd80b9b6803a1a2076b431ff443", "html_url": "https://github.com/rust-lang/rust/commit/31006b42279fabd80b9b6803a1a2076b431ff443", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31006b42279fabd80b9b6803a1a2076b431ff443/comments", "author": {"login": "roynrishingha", "id": 99001889, "node_id": "U_kgDOBeamIQ", "avatar_url": "https://avatars.githubusercontent.com/u/99001889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roynrishingha", "html_url": "https://github.com/roynrishingha", "followers_url": "https://api.github.com/users/roynrishingha/followers", "following_url": "https://api.github.com/users/roynrishingha/following{/other_user}", "gists_url": "https://api.github.com/users/roynrishingha/gists{/gist_id}", "starred_url": "https://api.github.com/users/roynrishingha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roynrishingha/subscriptions", "organizations_url": "https://api.github.com/users/roynrishingha/orgs", "repos_url": "https://api.github.com/users/roynrishingha/repos", "events_url": "https://api.github.com/users/roynrishingha/events{/privacy}", "received_events_url": "https://api.github.com/users/roynrishingha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "roynrishingha", "id": 99001889, "node_id": "U_kgDOBeamIQ", "avatar_url": "https://avatars.githubusercontent.com/u/99001889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roynrishingha", "html_url": "https://github.com/roynrishingha", "followers_url": "https://api.github.com/users/roynrishingha/followers", "following_url": "https://api.github.com/users/roynrishingha/following{/other_user}", "gists_url": "https://api.github.com/users/roynrishingha/gists{/gist_id}", "starred_url": "https://api.github.com/users/roynrishingha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roynrishingha/subscriptions", "organizations_url": "https://api.github.com/users/roynrishingha/orgs", "repos_url": "https://api.github.com/users/roynrishingha/repos", "events_url": "https://api.github.com/users/roynrishingha/events{/privacy}", "received_events_url": "https://api.github.com/users/roynrishingha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d588175cae9a2882ab63ffb1fa1704971cff628", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d588175cae9a2882ab63ffb1fa1704971cff628", "html_url": "https://github.com/rust-lang/rust/commit/2d588175cae9a2882ab63ffb1fa1704971cff628"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "fa567b9b2d243661efa259217572da6005efcc9d", "filename": "clippy_lints/src/types/rc_buffer.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/31006b42279fabd80b9b6803a1a2076b431ff443/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31006b42279fabd80b9b6803a1a2076b431ff443/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs?ref=31006b42279fabd80b9b6803a1a2076b431ff443", "patch": "@@ -9,6 +9,7 @@ use rustc_span::symbol::sym;\n use super::RC_BUFFER;\n \n pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {\n+    let app = Applicability::Unspecified;\n     if cx.tcx.is_diagnostic_item(sym::Rc, def_id) {\n         if let Some(alternate) = match_buffer_type(cx, qpath) {\n             span_lint_and_sugg(\n@@ -18,7 +19,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 \"usage of `Rc<T>` when T is a buffer type\",\n                 \"try\",\n                 format!(\"Rc<{alternate}>\"),\n-                Applicability::MachineApplicable,\n+                app,\n             );\n         } else {\n             let Some(ty) = qpath_generic_tys(qpath).next() else { return false };\n@@ -31,7 +32,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 Some(ty) => ty.span,\n                 None => return false,\n             };\n-            let mut applicability = Applicability::MachineApplicable;\n+            let mut applicability = app;\n             span_lint_and_sugg(\n                 cx,\n                 RC_BUFFER,\n@@ -42,7 +43,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                     \"Rc<[{}]>\",\n                     snippet_with_applicability(cx, inner_span, \"..\", &mut applicability)\n                 ),\n-                Applicability::MachineApplicable,\n+                app,\n             );\n             return true;\n         }\n@@ -55,7 +56,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 \"usage of `Arc<T>` when T is a buffer type\",\n                 \"try\",\n                 format!(\"Arc<{alternate}>\"),\n-                Applicability::MachineApplicable,\n+                app,\n             );\n         } else if let Some(ty) = qpath_generic_tys(qpath).next() {\n             let Some(id) = path_def_id(cx, ty) else { return false };\n@@ -67,7 +68,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 Some(ty) => ty.span,\n                 None => return false,\n             };\n-            let mut applicability = Applicability::MachineApplicable;\n+            let mut applicability = app;\n             span_lint_and_sugg(\n                 cx,\n                 RC_BUFFER,\n@@ -78,7 +79,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                     \"Arc<[{}]>\",\n                     snippet_with_applicability(cx, inner_span, \"..\", &mut applicability)\n                 ),\n-                Applicability::MachineApplicable,\n+                app,\n             );\n             return true;\n         }"}]}