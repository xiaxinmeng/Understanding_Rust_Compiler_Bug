{"sha": "45de9de1e99c3d6a38055835b0fe6c65e1ddac73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZGU5ZGUxZTk5YzNkNmEzODA1NTgzNWIwZmU2YzY1ZTFkZGFjNzM=", "commit": {"author": {"name": "William Throwe", "email": "wtt6@cornell.edu", "date": "2015-08-23T18:12:39Z"}, "committer": {"name": "William Throwe", "email": "wtt6@cornell.edu", "date": "2015-08-25T00:27:42Z"}, "message": "Move entry point identification logic to libsyntax\n\nIdentifying entry points will be useful in --test mode, which is\nhandled in libsyntax.", "tree": {"sha": "d1005c7bcc751e92520619ec881e34ff15711fba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1005c7bcc751e92520619ec881e34ff15711fba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45de9de1e99c3d6a38055835b0fe6c65e1ddac73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45de9de1e99c3d6a38055835b0fe6c65e1ddac73", "html_url": "https://github.com/rust-lang/rust/commit/45de9de1e99c3d6a38055835b0fe6c65e1ddac73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45de9de1e99c3d6a38055835b0fe6c65e1ddac73/comments", "author": {"login": "wthrowe", "id": 867117, "node_id": "MDQ6VXNlcjg2NzExNw==", "avatar_url": "https://avatars.githubusercontent.com/u/867117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wthrowe", "html_url": "https://github.com/wthrowe", "followers_url": "https://api.github.com/users/wthrowe/followers", "following_url": "https://api.github.com/users/wthrowe/following{/other_user}", "gists_url": "https://api.github.com/users/wthrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/wthrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wthrowe/subscriptions", "organizations_url": "https://api.github.com/users/wthrowe/orgs", "repos_url": "https://api.github.com/users/wthrowe/repos", "events_url": "https://api.github.com/users/wthrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/wthrowe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wthrowe", "id": 867117, "node_id": "MDQ6VXNlcjg2NzExNw==", "avatar_url": "https://avatars.githubusercontent.com/u/867117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wthrowe", "html_url": "https://github.com/wthrowe", "followers_url": "https://api.github.com/users/wthrowe/followers", "following_url": "https://api.github.com/users/wthrowe/following{/other_user}", "gists_url": "https://api.github.com/users/wthrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/wthrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wthrowe/subscriptions", "organizations_url": "https://api.github.com/users/wthrowe/orgs", "repos_url": "https://api.github.com/users/wthrowe/repos", "events_url": "https://api.github.com/users/wthrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/wthrowe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c996499a1bcf747b12f8290eeff3024e59da529", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c996499a1bcf747b12f8290eeff3024e59da529", "html_url": "https://github.com/rust-lang/rust/commit/4c996499a1bcf747b12f8290eeff3024e59da529"}], "stats": {"total": 124, "additions": 79, "deletions": 45}, "files": [{"sha": "8cdd4f7fe74c5562588f00a828a744035fd06052", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 36, "deletions": 45, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/45de9de1e99c3d6a38055835b0fe6c65e1ddac73/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45de9de1e99c3d6a38055835b0fe6c65e1ddac73/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=45de9de1e99c3d6a38055835b0fe6c65e1ddac73", "patch": "@@ -11,20 +11,19 @@\n \n use ast_map;\n use session::{config, Session};\n-use syntax::ast::{Name, NodeId, Item, ItemFn};\n+use syntax;\n+use syntax::ast::{NodeId, Item};\n use syntax::attr;\n use syntax::codemap::Span;\n-use syntax::parse::token;\n+use syntax::entry::EntryPointType;\n use syntax::visit;\n use syntax::visit::Visitor;\n \n-struct EntryContext<'a, 'ast: 'a> {\n+struct EntryContext<'a> {\n     session: &'a Session,\n \n-    ast_map: &'a ast_map::Map<'ast>,\n-\n-    // The interned Name for \"main\".\n-    main_name: Name,\n+    // The current depth in the ast\n+    depth: usize,\n \n     // The top-level function called 'main'\n     main_fn: Option<(NodeId, Span)>,\n@@ -40,9 +39,11 @@ struct EntryContext<'a, 'ast: 'a> {\n     non_main_fns: Vec<(NodeId, Span)> ,\n }\n \n-impl<'a, 'ast, 'v> Visitor<'v> for EntryContext<'a, 'ast> {\n+impl<'a, 'v> Visitor<'v> for EntryContext<'a> {\n     fn visit_item(&mut self, item: &Item) {\n+        self.depth += 1;\n         find_item(item, self);\n+        self.depth -= 1;\n     }\n }\n \n@@ -63,8 +64,7 @@ pub fn find_entry_point(session: &Session, ast_map: &ast_map::Map) {\n \n     let mut ctxt = EntryContext {\n         session: session,\n-        main_name: token::intern(\"main\"),\n-        ast_map: ast_map,\n+        depth: 0,\n         main_fn: None,\n         attr_main_fn: None,\n         start_fn: None,\n@@ -77,44 +77,35 @@ pub fn find_entry_point(session: &Session, ast_map: &ast_map::Map) {\n }\n \n fn find_item(item: &Item, ctxt: &mut EntryContext) {\n-    match item.node {\n-        ItemFn(..) => {\n-            if item.ident.name == ctxt.main_name {\n-                 ctxt.ast_map.with_path(item.id, |path| {\n-                        if path.count() == 1 {\n-                            // This is a top-level function so can be 'main'\n-                            if ctxt.main_fn.is_none() {\n-                                ctxt.main_fn = Some((item.id, item.span));\n-                            } else {\n-                                span_err!(ctxt.session, item.span, E0136,\n-                                          \"multiple 'main' functions\");\n-                            }\n-                        } else {\n-                            // This isn't main\n-                            ctxt.non_main_fns.push((item.id, item.span));\n-                        }\n-                });\n+    match syntax::entry::entry_point_type(item, ctxt.depth) {\n+        EntryPointType::MainNamed => {\n+            if ctxt.main_fn.is_none() {\n+                ctxt.main_fn = Some((item.id, item.span));\n+            } else {\n+                span_err!(ctxt.session, item.span, E0136,\n+                          \"multiple 'main' functions\");\n             }\n-\n-            if attr::contains_name(&item.attrs, \"main\") {\n-                if ctxt.attr_main_fn.is_none() {\n-                    ctxt.attr_main_fn = Some((item.id, item.span));\n-                } else {\n-                    span_err!(ctxt.session, item.span, E0137,\n-                              \"multiple functions with a #[main] attribute\");\n-                }\n+        },\n+        EntryPointType::OtherMain => {\n+            ctxt.non_main_fns.push((item.id, item.span));\n+        },\n+        EntryPointType::MainAttr => {\n+            if ctxt.attr_main_fn.is_none() {\n+                ctxt.attr_main_fn = Some((item.id, item.span));\n+            } else {\n+                span_err!(ctxt.session, item.span, E0137,\n+                          \"multiple functions with a #[main] attribute\");\n             }\n-\n-            if attr::contains_name(&item.attrs, \"start\") {\n-                if ctxt.start_fn.is_none() {\n-                    ctxt.start_fn = Some((item.id, item.span));\n-                } else {\n-                    span_err!(ctxt.session, item.span, E0138,\n-                              \"multiple 'start' functions\");\n-                }\n+        },\n+        EntryPointType::Start => {\n+            if ctxt.start_fn.is_none() {\n+                ctxt.start_fn = Some((item.id, item.span));\n+            } else {\n+                span_err!(ctxt.session, item.span, E0138,\n+                          \"multiple 'start' functions\");\n             }\n-        }\n-        _ => ()\n+        },\n+        EntryPointType::None => ()\n     }\n \n     visit::walk_item(ctxt, item);"}, {"sha": "b6c5d0066a233c3c54d7a2a6bcfef374c1ece0a2", "filename": "src/libsyntax/entry.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/45de9de1e99c3d6a38055835b0fe6c65e1ddac73/src%2Flibsyntax%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45de9de1e99c3d6a38055835b0fe6c65e1ddac73/src%2Flibsyntax%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fentry.rs?ref=45de9de1e99c3d6a38055835b0fe6c65e1ddac73", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use attr;\n+use ast::{Item, ItemFn};\n+\n+pub enum EntryPointType {\n+    None,\n+    MainNamed,\n+    MainAttr,\n+    Start,\n+    OtherMain, // Not an entry point, but some other function named main\n+}\n+\n+pub fn entry_point_type(item: &Item, depth: usize) -> EntryPointType {\n+    match item.node {\n+        ItemFn(..) => {\n+            if attr::contains_name(&item.attrs, \"start\") {\n+                EntryPointType::Start\n+            } else if attr::contains_name(&item.attrs, \"main\") {\n+                EntryPointType::MainAttr\n+            } else if item.ident.name == \"main\" {\n+                if depth == 1 {\n+                    // This is a top-level function so can be 'main'\n+                    EntryPointType::MainNamed\n+                } else {\n+                    EntryPointType::OtherMain\n+                }\n+            } else {\n+                EntryPointType::None\n+            }\n+        }\n+        _ => EntryPointType::None,\n+    }\n+}"}, {"sha": "d1c862ad40b2526866fd0e52be4cd2a626ee04c7", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45de9de1e99c3d6a38055835b0fe6c65e1ddac73/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45de9de1e99c3d6a38055835b0fe6c65e1ddac73/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=45de9de1e99c3d6a38055835b0fe6c65e1ddac73", "patch": "@@ -90,6 +90,7 @@ pub mod attr;\n pub mod codemap;\n pub mod config;\n pub mod diagnostic;\n+pub mod entry;\n pub mod feature_gate;\n pub mod fold;\n pub mod owned_slice;"}]}