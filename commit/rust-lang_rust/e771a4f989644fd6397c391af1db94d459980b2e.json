{"sha": "e771a4f989644fd6397c391af1db94d459980b2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NzFhNGY5ODk2NDRmZDYzOTdjMzkxYWYxZGI5NGQ0NTk5ODBiMmU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-09T16:09:25Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-09T16:09:25Z"}, "message": "Tweak `::` -> `:` typo heuristic and reduce verbosity\n\nDo not trigger on correct type ascription expressions with trailing\noperators and _do_ trigger on likely path typos where a turbofish is\nused.\n\nOn likely path typos, remove note explaining type ascription.", "tree": {"sha": "73d08e694ecca789b2cbfb7712d472febf3b0faf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73d08e694ecca789b2cbfb7712d472febf3b0faf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e771a4f989644fd6397c391af1db94d459980b2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e771a4f989644fd6397c391af1db94d459980b2e", "html_url": "https://github.com/rust-lang/rust/commit/e771a4f989644fd6397c391af1db94d459980b2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e771a4f989644fd6397c391af1db94d459980b2e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc6ee8f38b42830378c770e3b786138be0f35ccd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc6ee8f38b42830378c770e3b786138be0f35ccd", "html_url": "https://github.com/rust-lang/rust/commit/fc6ee8f38b42830378c770e3b786138be0f35ccd"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "df601bce589734754b184522c847319ef65f9f4b", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e771a4f989644fd6397c391af1db94d459980b2e/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e771a4f989644fd6397c391af1db94d459980b2e/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=e771a4f989644fd6397c391af1db94d459980b2e", "patch": "@@ -346,13 +346,16 @@ impl<'a> Parser<'a> {\n             if allow_unstable {\n                 // Give extra information about type ascription only if it's a nightly compiler.\n                 err.note(\n-                    \"`#![feature(type_ascription)]` lets you annotate an expression with a \\\n-                          type: `<expr>: <type>`\",\n-                );\n-                err.note(\n-                    \"see issue #23416 <https://github.com/rust-lang/rust/issues/23416> \\\n-                     for more information\",\n+                    \"`#![feature(type_ascription)]` lets you annotate an expression with a type: \\\n+                     `<expr>: <type>`\",\n                 );\n+                if !likely_path {\n+                    // Avoid giving too much info when it was likely an unrelated typo.\n+                    err.note(\n+                        \"see issue #23416 <https://github.com/rust-lang/rust/issues/23416> \\\n+                        for more information\",\n+                    );\n+                }\n             }\n         }\n     }\n@@ -1152,8 +1155,10 @@ impl<'a> Parser<'a> {\n             } &&\n             !self.token.is_reserved_ident() &&           // v `foo:bar(baz)`\n             self.look_ahead(1, |t| t == &token::OpenDelim(token::Paren))\n-            || self.look_ahead(1, |t| t == &token::Lt) &&     // `foo:bar<baz`\n-            self.look_ahead(2, |t| t.is_ident())\n+            || self.look_ahead(1, |t| t == &token::OpenDelim(token::Brace)) // `foo:bar {`\n+            || self.look_ahead(1, |t| t == &token::Colon) &&     // `foo:bar::<baz`\n+            self.look_ahead(2, |t| t == &token::Lt) &&\n+            self.look_ahead(3, |t| t.is_ident())\n             || self.look_ahead(1, |t| t == &token::Colon) &&  // `foo:bar:baz`\n             self.look_ahead(2, |t| t.is_ident())\n             || self.look_ahead(1, |t| t == &token::ModSep)"}, {"sha": "7275841ebb808da6eb92da54862be7b2af5b7c96", "filename": "src/test/ui/lifetime_starts_expressions.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e771a4f989644fd6397c391af1db94d459980b2e/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e771a4f989644fd6397c391af1db94d459980b2e/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr?ref=e771a4f989644fd6397c391af1db94d459980b2e", "patch": "@@ -15,10 +15,9 @@ error: expected type, found keyword `loop`\n LL |     loop { break 'label: loop { break 'label 42; }; }\n    |                        - ^^^^ expected type\n    |                        |\n-   |                        tried to parse a type due to this type ascription\n+   |                        help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9ccf17a6cb10ea9833f9dbf79892672714a7dc81", "filename": "src/test/ui/parser/issue-35813-postfix-after-cast.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e771a4f989644fd6397c391af1db94d459980b2e/src%2Ftest%2Fui%2Fparser%2Fissue-35813-postfix-after-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e771a4f989644fd6397c391af1db94d459980b2e/src%2Ftest%2Fui%2Fparser%2Fissue-35813-postfix-after-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-35813-postfix-after-cast.stderr?ref=e771a4f989644fd6397c391af1db94d459980b2e", "patch": "@@ -280,12 +280,12 @@ error: casts cannot be followed by ?\n   --> $DIR/issue-35813-postfix-after-cast.rs:121:5\n    |\n LL |     Err(0u64): Result<u64,u64>?;\n-   |     ^^^^^^^^^-^^^^^^^^^^^^^^^^\n-   |              |\n-   |              help: maybe write a path separator here: `::`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n+help: try surrounding the expression in parentheses\n+   |\n+LL |     (Err(0u64): Result<u64,u64>)?;\n+   |     ^                          ^\n \n error: casts cannot be followed by a function call\n   --> $DIR/issue-35813-postfix-after-cast.rs:145:5\n@@ -324,12 +324,12 @@ error: casts cannot be followed by `.await`\n   --> $DIR/issue-35813-postfix-after-cast.rs:155:5\n    |\n LL |     Box::pin(noop()): Pin<Box<_>>.await;\n-   |     ^^^^^^^^^^^^^^^^-^^^^^^^^^^^^\n-   |                     |\n-   |                     help: maybe write a path separator here: `::`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try surrounding the expression in parentheses\n    |\n-   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n+LL |     (Box::pin(noop()): Pin<Box<_>>).await;\n+   |     ^                             ^\n \n error: casts cannot be followed by a field access\n   --> $DIR/issue-35813-postfix-after-cast.rs:167:5"}, {"sha": "c111b4a9bc706e038a585f018641b46e898a6b4a", "filename": "src/test/ui/suggestions/type-ascription-instead-of-method.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e771a4f989644fd6397c391af1db94d459980b2e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e771a4f989644fd6397c391af1db94d459980b2e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-method.stderr?ref=e771a4f989644fd6397c391af1db94d459980b2e", "patch": "@@ -7,7 +7,6 @@ LL |     Box:new(\"foo\".to_string())\n    |        help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error: aborting due to previous error\n "}, {"sha": "1d1999d350fe449b0ec06688a6aa973b959f845b", "filename": "src/test/ui/suggestions/type-ascription-instead-of-path-2.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e771a4f989644fd6397c391af1db94d459980b2e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e771a4f989644fd6397c391af1db94d459980b2e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-path-2.stderr?ref=e771a4f989644fd6397c391af1db94d459980b2e", "patch": "@@ -7,7 +7,6 @@ LL |     vec![Ok(2)].into_iter().collect:<Result<Vec<_>,_>>()?;\n    |                                    help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error: aborting due to previous error\n "}, {"sha": "f38020dcc3820c74bcd8b976919b54d62a389d82", "filename": "src/test/ui/suggestions/type-ascription-instead-of-variant.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e771a4f989644fd6397c391af1db94d459980b2e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e771a4f989644fd6397c391af1db94d459980b2e/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-variant.stderr?ref=e771a4f989644fd6397c391af1db94d459980b2e", "patch": "@@ -7,7 +7,6 @@ LL |     let _ = Option:Some(\"\");\n    |                   help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error: aborting due to previous error\n "}, {"sha": "72c7c144b537d0702909a20069d168f5b1ab8523", "filename": "src/test/ui/type/ascription/issue-47666.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e771a4f989644fd6397c391af1db94d459980b2e/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e771a4f989644fd6397c391af1db94d459980b2e/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr?ref=e771a4f989644fd6397c391af1db94d459980b2e", "patch": "@@ -10,7 +10,6 @@ LL |     let _ = Option:Some(vec![0, 1]);\n    |                   help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0423]: expected value, found enum `Option`"}, {"sha": "ec08cf209c21a509ffb5ab2b5faf7ff9a8257af6", "filename": "src/test/ui/type/ascription/issue-54516.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e771a4f989644fd6397c391af1db94d459980b2e/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e771a4f989644fd6397c391af1db94d459980b2e/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-54516.stderr?ref=e771a4f989644fd6397c391af1db94d459980b2e", "patch": "@@ -7,7 +7,6 @@ LL |     println!(\"{}\", std::mem:size_of::<BTreeMap<u32, u32>>());\n    |                            help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error[E0423]: expected value, found module `std::mem`\n   --> $DIR/issue-54516.rs:4:20"}, {"sha": "2006362e1bb7e5a0584d5cbad89319e0e0f7261c", "filename": "src/test/ui/type/ascription/issue-60933.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e771a4f989644fd6397c391af1db94d459980b2e/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e771a4f989644fd6397c391af1db94d459980b2e/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-60933.stderr?ref=e771a4f989644fd6397c391af1db94d459980b2e", "patch": "@@ -7,7 +7,6 @@ LL |     let u: usize = std::mem:size_of::<u32>();\n    |                            help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n \n error[E0423]: expected value, found module `std::mem`\n   --> $DIR/issue-60933.rs:2:20"}]}