{"sha": "7dd3679ac346180c53c6167c541cd1cb16adac7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZDM2NzlhYzM0NjE4MGM1M2M2MTY3YzU0MWNkMWNiMTZhZGFjN2E=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-12-19T19:22:38Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-12-19T19:31:39Z"}, "message": "Fix a couple warnings", "tree": {"sha": "99a0c60bf4a47f740924513f0a52c3d59a005ac2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99a0c60bf4a47f740924513f0a52c3d59a005ac2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dd3679ac346180c53c6167c541cd1cb16adac7a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEELfPXKgPc9hOehjA6XkJ8eUy6RegFAlhYNZwACgkQXkJ8eUy6\nRehMLA/+KkN5xhh2dYjbwZictV2vwID6wtfOxCuC7WO6pOEgdKlxrvo8vaSqmEAt\nyPUhA0v1ZE075wcKFcGb0qOq5IjYrzJ8+OWUxYeOiK9Y4hynrzV/xwOopx+5ZnVJ\nbal737KZ8EoybOqU4dio0bfPy5ZR8isRqPAG15DequO7AbAold9xXs32m36MCjf5\nOsUowmnQzkAiKbOnZRTMylm5prP/g2UAhVDzELdKD2BaeCVh5rJJyMDK4IHK+gG2\nJm3rS85LooNcmyQhTOzD7ylKhyWqFDjC02smVTrVaqb/49pcDtuzpLEI3sUoqkD3\n0+lkFICSv1d2EslfWjHol/4Gtd3vcJoh2H9uqf8rApEW417QYFQpneodMqaW3Ma9\nUUyOTygyH9Y8ltXQsP3+PHpDiCQoUvQKC2q9EdcF4VdAahQsed+rPVn3AQMkuVsc\nrjIairQPJhJwVQi2EzhpZKZ94QcYeJNln+zOmMV3pzWTOkg411DsqeoKcPgQsfZd\noNqpqxtggxy913EqvW3haNJUF/EJc5Md25VBjphfUJMLC5Hh4Jq19U9cOJ4B6Xtr\n/8021peHEcqnA2YkJv8MUiFOFw8BLLdQR4JgUVk2ar6jcO8tG16r4FCa5rN9K8NY\n1BkZrM2z4jzGFigpC0Dwg/xxjAuJRFwgOZ6PaIj/5nfPUiUWwhs=\n=HwBF\n-----END PGP SIGNATURE-----", "payload": "tree 99a0c60bf4a47f740924513f0a52c3d59a005ac2\nparent cc8c1c0814a2fff0ade5b3eb640be25120e9663f\nauthor mcarton <cartonmartin+git@gmail.com> 1482175358 +0100\ncommitter mcarton <cartonmartin+git@gmail.com> 1482175899 +0100\n\nFix a couple warnings\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dd3679ac346180c53c6167c541cd1cb16adac7a", "html_url": "https://github.com/rust-lang/rust/commit/7dd3679ac346180c53c6167c541cd1cb16adac7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dd3679ac346180c53c6167c541cd1cb16adac7a/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc8c1c0814a2fff0ade5b3eb640be25120e9663f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc8c1c0814a2fff0ade5b3eb640be25120e9663f", "html_url": "https://github.com/rust-lang/rust/commit/cc8c1c0814a2fff0ade5b3eb640be25120e9663f"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "930c44c88633b8af60fc0931cf5a3de7487e7c61", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7dd3679ac346180c53c6167c541cd1cb16adac7a/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd3679ac346180c53c6167c541cd1cb16adac7a/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=7dd3679ac346180c53c6167c541cd1cb16adac7a", "patch": "@@ -757,7 +757,6 @@ fn detect_absurd_comparison<'a>(cx: &LateContext, op: BinOp_, lhs: &'a Expr, rhs\n     use types::ExtremeType::*;\n     use types::AbsurdComparisonResult::*;\n     use utils::comparisons::*;\n-    type Extr<'a> = ExtremeExpr<'a>;\n \n     let normalized = normalize_comparison(op, lhs, rhs);\n     let (rel, normalized_lhs, normalized_rhs) = if let Some(val) = normalized {\n@@ -772,17 +771,17 @@ fn detect_absurd_comparison<'a>(cx: &LateContext, op: BinOp_, lhs: &'a Expr, rhs\n     Some(match rel {\n         Rel::Lt => {\n             match (lx, rx) {\n-                (Some(l @ Extr { which: Maximum, .. }), _) => (l, AlwaysFalse), // max < x\n-                (_, Some(r @ Extr { which: Minimum, .. })) => (r, AlwaysFalse), // x < min\n+                (Some(l @ ExtremeExpr { which: Maximum, .. }), _) => (l, AlwaysFalse), // max < x\n+                (_, Some(r @ ExtremeExpr { which: Minimum, .. })) => (r, AlwaysFalse), // x < min\n                 _ => return None,\n             }\n         }\n         Rel::Le => {\n             match (lx, rx) {\n-                (Some(l @ Extr { which: Minimum, .. }), _) => (l, AlwaysTrue), // min <= x\n-                (Some(l @ Extr { which: Maximum, .. }), _) => (l, InequalityImpossible), //max <= x\n-                (_, Some(r @ Extr { which: Minimum, .. })) => (r, InequalityImpossible), // x <= min\n-                (_, Some(r @ Extr { which: Maximum, .. })) => (r, AlwaysTrue), // x <= max\n+                (Some(l @ ExtremeExpr { which: Minimum, .. }), _) => (l, AlwaysTrue), // min <= x\n+                (Some(l @ ExtremeExpr { which: Maximum, .. }), _) => (l, InequalityImpossible), //max <= x\n+                (_, Some(r @ ExtremeExpr { which: Minimum, .. })) => (r, InequalityImpossible), // x <= min\n+                (_, Some(r @ ExtremeExpr { which: Maximum, .. })) => (r, AlwaysTrue), // x <= max\n                 _ => return None,\n             }\n         }"}, {"sha": "9672f16eddc2829c4cf79bee425d2e131ed03563", "filename": "src/lib.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7dd3679ac346180c53c6167c541cd1cb16adac7a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd3679ac346180c53c6167c541cd1cb16adac7a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7dd3679ac346180c53c6167c541cd1cb16adac7a", "patch": "@@ -2,7 +2,6 @@\n #![feature(plugin_registrar)]\n #![feature(rustc_private)]\n #![allow(unknown_lints)]\n-#![feature(borrow_state)]\n #![allow(missing_docs_in_private_items)]\n \n extern crate rustc_plugin;\n@@ -12,11 +11,14 @@ extern crate clippy_lints;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    if reg.sess.lint_store.borrow_state() == std::cell::BorrowState::Unused && reg.sess.lint_store.borrow().get_lint_groups().iter().any(|&(s, _, _)| s == \"clippy\") {\n-        reg.sess.struct_warn(\"running cargo clippy on a crate that also imports the clippy plugin\").emit();\n-    } else {\n-        clippy_lints::register_plugins(reg);\n+    if let Ok(lint_store) = reg.sess.lint_store.try_borrow() {\n+        if lint_store.get_lint_groups().iter().any(|&(s, _, _)| s == \"clippy\") {\n+            reg.sess.struct_warn(\"running cargo clippy on a crate that also imports the clippy plugin\").emit();\n+            return;\n+        }\n     }\n+\n+    clippy_lints::register_plugins(reg);\n }\n \n // only exists to let the dogfood integration test works."}]}