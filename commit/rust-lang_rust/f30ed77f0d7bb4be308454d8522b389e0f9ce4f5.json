{"sha": "f30ed77f0d7bb4be308454d8522b389e0f9ce4f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMGVkNzdmMGQ3YmI0YmUzMDg0NTRkODUyMmIzODllMGY5Y2U0ZjU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-05-01T15:47:39Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-05-02T11:57:08Z"}, "message": "Add option to display warnings in rustdoc", "tree": {"sha": "9226a8434163acc3607004fc7f40855d705104e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9226a8434163acc3607004fc7f40855d705104e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f30ed77f0d7bb4be308454d8522b389e0f9ce4f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f30ed77f0d7bb4be308454d8522b389e0f9ce4f5", "html_url": "https://github.com/rust-lang/rust/commit/f30ed77f0d7bb4be308454d8522b389e0f9ce4f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f30ed77f0d7bb4be308454d8522b389e0f9ce4f5/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06fb4d25642a3f223db1441972dd5962085cfba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/06fb4d25642a3f223db1441972dd5962085cfba1", "html_url": "https://github.com/rust-lang/rust/commit/06fb4d25642a3f223db1441972dd5962085cfba1"}], "stats": {"total": 77, "additions": 67, "deletions": 10}, "files": [{"sha": "32fbc7633b92792336f8a16da565aa589b284eaa", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f30ed77f0d7bb4be308454d8522b389e0f9ce4f5/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30ed77f0d7bb4be308454d8522b389e0f9ce4f5/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=f30ed77f0d7bb4be308454d8522b389e0f9ce4f5", "patch": "@@ -104,7 +104,8 @@ pub fn run_core(search_paths: SearchPaths,\n                 externs: config::Externs,\n                 input: Input,\n                 triple: Option<String>,\n-                maybe_sysroot: Option<PathBuf>) -> (clean::Crate, RenderInfo)\n+                maybe_sysroot: Option<PathBuf>,\n+                allow_warnings: bool) -> (clean::Crate, RenderInfo)\n {\n     // Parse, resolve, and typecheck the given crate.\n \n@@ -119,7 +120,7 @@ pub fn run_core(search_paths: SearchPaths,\n         maybe_sysroot: maybe_sysroot,\n         search_paths: search_paths,\n         crate_types: vec![config::CrateTypeRlib],\n-        lint_opts: vec![(warning_lint, lint::Allow)],\n+        lint_opts: if !allow_warnings { vec![(warning_lint, lint::Allow)] } else { vec![] },\n         lint_cap: Some(lint::Allow),\n         externs: externs,\n         target_triple: triple.unwrap_or(config::host_triple().to_string()),"}, {"sha": "37440e303a4695ba10ada8b311574952cff89670", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f30ed77f0d7bb4be308454d8522b389e0f9ce4f5/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30ed77f0d7bb4be308454d8522b389e0f9ce4f5/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f30ed77f0d7bb4be308454d8522b389e0f9ce4f5", "patch": "@@ -172,6 +172,7 @@ pub fn opts() -> Vec<RustcOptGroup> {\n                          or `#![doc(html_playground_url=...)]`\",\n                         \"URL\")),\n         unstable(optflag(\"\", \"enable-commonmark\", \"to enable commonmark doc rendering/testing\")),\n+        unstable(optflag(\"\", \"display-warnings\", \"to print code warnings when testing doc\")),\n     ]\n }\n \n@@ -279,14 +280,16 @@ pub fn main_args(args: &[String]) -> isize {\n     let crate_name = matches.opt_str(\"crate-name\");\n     let playground_url = matches.opt_str(\"playground-url\");\n     let maybe_sysroot = matches.opt_str(\"sysroot\").map(PathBuf::from);\n+    let display_warnings = matches.opt_present(\"display-warnings\");\n \n     match (should_test, markdown_input) {\n         (true, true) => {\n-            return markdown::test(input, cfgs, libs, externs, test_args, maybe_sysroot, render_type)\n+            return markdown::test(input, cfgs, libs, externs, test_args, maybe_sysroot, render_type,\n+                                  display_warnings)\n         }\n         (true, false) => {\n             return test::run(input, cfgs, libs, externs, test_args, crate_name, maybe_sysroot,\n-                             render_type)\n+                             render_type, display_warnings)\n         }\n         (false, true) => return markdown::render(input,\n                                                  output.unwrap_or(PathBuf::from(\"doc\")),\n@@ -388,13 +391,15 @@ where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n \n     let cr = PathBuf::from(cratefile);\n     info!(\"starting to run rustc\");\n+    let display_warnings = matches.opt_present(\"display-warnings\");\n \n     let (tx, rx) = channel();\n     rustc_driver::monitor(move || {\n         use rustc::session::config::Input;\n \n         let (mut krate, renderinfo) =\n-            core::run_core(paths, cfgs, externs, Input::File(cr), triple, maybe_sysroot);\n+            core::run_core(paths, cfgs, externs, Input::File(cr), triple, maybe_sysroot,\n+                           display_warnings);\n \n         info!(\"finished with rustc\");\n "}, {"sha": "efeb8ea72ba6c04a9fb093ae87ee35484d916202", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f30ed77f0d7bb4be308454d8522b389e0f9ce4f5/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30ed77f0d7bb4be308454d8522b389e0f9ce4f5/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=f30ed77f0d7bb4be308454d8522b389e0f9ce4f5", "patch": "@@ -150,7 +150,7 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n /// Run any tests/code examples in the markdown file `input`.\n pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n             mut test_args: Vec<String>, maybe_sysroot: Option<PathBuf>,\n-            render_type: RenderType) -> isize {\n+            render_type: RenderType, display_warnings: bool) -> isize {\n     let input_str = match load_string(input) {\n         Ok(s) => s,\n         Err(LoadStringError::ReadFail) => return 1,\n@@ -166,6 +166,9 @@ pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n     old_find_testable_code(&input_str, &mut collector, DUMMY_SP);\n     find_testable_code(&input_str, &mut collector, DUMMY_SP);\n     test_args.insert(0, \"rustdoctest\".to_string());\n+    if display_warnings {\n+        test_args.insert(1, \"--display-stdout\".to_string());\n+    }\n     testing::test_main(&test_args, collector.tests);\n     0\n }"}, {"sha": "23462443eff6537a04aaa3b8aa738482531b0d29", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f30ed77f0d7bb4be308454d8522b389e0f9ce4f5/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30ed77f0d7bb4be308454d8522b389e0f9ce4f5/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=f30ed77f0d7bb4be308454d8522b389e0f9ce4f5", "patch": "@@ -58,7 +58,8 @@ pub fn run(input: &str,\n            mut test_args: Vec<String>,\n            crate_name: Option<String>,\n            maybe_sysroot: Option<PathBuf>,\n-           render_type: RenderType)\n+           render_type: RenderType,\n+           display_warnings: bool)\n            -> isize {\n     let input_path = PathBuf::from(input);\n     let input = config::Input::File(input_path.clone());\n@@ -125,6 +126,9 @@ pub fn run(input: &str,\n     }\n \n     test_args.insert(0, \"rustdoctest\".to_string());\n+    if display_warnings {\n+        test_args.insert(1, \"--display-stdout\".to_string());\n+    }\n \n     testing::test_main(&test_args,\n                        collector.tests.into_iter().collect());"}, {"sha": "23c0c6065a8a1d229267cf7fbe3c5e53067aab46", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f30ed77f0d7bb4be308454d8522b389e0f9ce4f5/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30ed77f0d7bb4be308454d8522b389e0f9ce4f5/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=f30ed77f0d7bb4be308454d8522b389e0f9ce4f5", "patch": "@@ -304,13 +304,14 @@ pub fn test_main_static(tests: &[TestDescAndFn]) {\n     test_main(&args, owned_tests)\n }\n \n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Debug)]\n pub enum ColorConfig {\n     AutoColor,\n     AlwaysColor,\n     NeverColor,\n }\n \n+#[derive(Debug)]\n pub struct TestOpts {\n     pub list: bool,\n     pub filter: Option<String>,\n@@ -324,6 +325,7 @@ pub struct TestOpts {\n     pub quiet: bool,\n     pub test_threads: Option<usize>,\n     pub skip: Vec<String>,\n+    pub display_stdout: bool,\n }\n \n impl TestOpts {\n@@ -342,6 +344,7 @@ impl TestOpts {\n             quiet: false,\n             test_threads: None,\n             skip: vec![],\n+            display_stdout: false,\n         }\n     }\n }\n@@ -369,7 +372,8 @@ fn optgroups() -> Vec<getopts::OptGroup> {\n       getopts::optopt(\"\", \"color\", \"Configure coloring of output:\n             auto   = colorize if stdout is a tty and tests are run on serially (default);\n             always = always colorize output;\n-            never  = never colorize output;\", \"auto|always|never\")]\n+            never  = never colorize output;\", \"auto|always|never\"),\n+      getopts::optflag(\"\", \"display-stdout\", \"to print stdout even if the test succeeds\")]\n }\n \n fn usage(binary: &str) {\n@@ -481,6 +485,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n         quiet: quiet,\n         test_threads: test_threads,\n         skip: matches.opt_strs(\"skip\"),\n+        display_stdout: matches.opt_present(\"display-stdout\"),\n     };\n \n     Some(Ok(test_opts))\n@@ -521,7 +526,9 @@ struct ConsoleTestState<T> {\n     measured: usize,\n     metrics: MetricMap,\n     failures: Vec<(TestDesc, Vec<u8>)>,\n+    not_failures: Vec<(TestDesc, Vec<u8>)>,\n     max_name_len: usize, // number of columns to fill when aligning names\n+    display_stdout: bool,\n }\n \n impl<T: Write> ConsoleTestState<T> {\n@@ -547,7 +554,9 @@ impl<T: Write> ConsoleTestState<T> {\n             measured: 0,\n             metrics: MetricMap::new(),\n             failures: Vec::new(),\n+            not_failures: Vec::new(),\n             max_name_len: 0,\n+            display_stdout: opts.display_stdout,\n         })\n     }\n \n@@ -703,9 +712,38 @@ impl<T: Write> ConsoleTestState<T> {\n         Ok(())\n     }\n \n+    pub fn write_outputs(&mut self) -> io::Result<()> {\n+        self.write_plain(\"\\nsuccesses:\\n\")?;\n+        let mut successes = Vec::new();\n+        let mut stdouts = String::new();\n+        for &(ref f, ref stdout) in &self.not_failures {\n+            successes.push(f.name.to_string());\n+            if !stdout.is_empty() {\n+                stdouts.push_str(&format!(\"---- {} stdout ----\\n\\t\", f.name));\n+                let output = String::from_utf8_lossy(stdout);\n+                stdouts.push_str(&output);\n+                stdouts.push_str(\"\\n\");\n+            }\n+        }\n+        if !stdouts.is_empty() {\n+            self.write_plain(\"\\n\")?;\n+            self.write_plain(&stdouts)?;\n+        }\n+\n+        self.write_plain(\"\\nsuccesses:\\n\")?;\n+        successes.sort();\n+        for name in &successes {\n+            self.write_plain(&format!(\"    {}\\n\", name))?;\n+        }\n+        Ok(())\n+    }\n+\n     pub fn write_run_finish(&mut self) -> io::Result<bool> {\n         assert!(self.passed + self.failed + self.ignored + self.measured == self.total);\n \n+        if self.display_stdout {\n+            self.write_outputs()?;\n+        }\n         let success = self.failed == 0;\n         if !success {\n             self.write_failures()?;\n@@ -824,7 +862,10 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n                 st.write_log_result(&test, &result)?;\n                 st.write_result(&result)?;\n                 match result {\n-                    TrOk => st.passed += 1,\n+                    TrOk => {\n+                        st.passed += 1;\n+                        st.not_failures.push((test, stdout));\n+                    }\n                     TrIgnored => st.ignored += 1,\n                     TrMetrics(mm) => {\n                         let tname = test.name;\n@@ -901,6 +942,8 @@ fn should_sort_failures_before_printing_them() {\n         max_name_len: 10,\n         metrics: MetricMap::new(),\n         failures: vec![(test_b, Vec::new()), (test_a, Vec::new())],\n+        display_stdout: false,\n+        not_failures: Vec::new(),\n     };\n \n     st.write_failures().unwrap();"}, {"sha": "0d1795a182cd81632e99f010fe8309480820fb0e", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f30ed77f0d7bb4be308454d8522b389e0f9ce4f5/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30ed77f0d7bb4be308454d8522b389e0f9ce4f5/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=f30ed77f0d7bb4be308454d8522b389e0f9ce4f5", "patch": "@@ -336,6 +336,7 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n         test_threads: None,\n         skip: vec![],\n         list: false,\n+        display_stdout: false,\n     }\n }\n "}]}