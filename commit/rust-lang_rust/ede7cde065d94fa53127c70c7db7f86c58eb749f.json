{"sha": "ede7cde065d94fa53127c70c7db7f86c58eb749f", "node_id": "C_kwDOAAsO6NoAKGVkZTdjZGUwNjVkOTRmYTUzMTI3YzcwYzdkYjdmODZjNThlYjc0OWY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-17T10:24:06Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-17T18:20:34Z"}, "message": "Move windows i128 argument by-ref handling to lib_call", "tree": {"sha": "5f0174a31fe37f7224ca6164822c0b4885566551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f0174a31fe37f7224ca6164822c0b4885566551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ede7cde065d94fa53127c70c7db7f86c58eb749f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ede7cde065d94fa53127c70c7db7f86c58eb749f", "html_url": "https://github.com/rust-lang/rust/commit/ede7cde065d94fa53127c70c7db7f86c58eb749f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ede7cde065d94fa53127c70c7db7f86c58eb749f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bd3b771b0882768f4f76116a7e8d08d0e418dbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd3b771b0882768f4f76116a7e8d08d0e418dbb", "html_url": "https://github.com/rust-lang/rust/commit/7bd3b771b0882768f4f76116a7e8d08d0e418dbb"}], "stats": {"total": 103, "additions": 40, "deletions": 63}, "files": [{"sha": "4f8ede9cfbc446ebf043ad4251c5577902ba98ca", "filename": "src/abi/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ede7cde065d94fa53127c70c7db7f86c58eb749f/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede7cde065d94fa53127c70c7db7f86c58eb749f/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=ede7cde065d94fa53127c70c7db7f86c58eb749f", "patch": "@@ -117,6 +117,28 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n         returns: Vec<AbiParam>,\n         args: &[Value],\n     ) -> &[Value] {\n+        if self.tcx.sess.target.is_like_windows\n+            && params.iter().any(|param| param.value_type == types::I128)\n+        {\n+            let (params, args): (Vec<_>, Vec<_>) =\n+                params\n+                    .into_iter()\n+                    .zip(args)\n+                    .map(|(param, &arg)| {\n+                        if param.value_type == types::I128 {\n+                            let arg_ptr = Pointer::stack_slot(self.bcx.create_sized_stack_slot(\n+                                StackSlotData { kind: StackSlotKind::ExplicitSlot, size: 16 },\n+                            ));\n+                            arg_ptr.store(self, arg, MemFlags::trusted());\n+                            (AbiParam::new(self.pointer_type), arg_ptr.get_addr(self))\n+                        } else {\n+                            (param, arg)\n+                        }\n+                    })\n+                    .unzip();\n+            return self.lib_call(name, params, returns, &args);\n+        }\n+\n         let sig = Signature { params, returns, call_conv: self.target_config.default_call_conv };\n         let func_id = self.module.declare_function(name, Linkage::Import, &sig).unwrap();\n         let func_ref = self.module.declare_func_in_func(func_id, &mut self.bcx.func);"}, {"sha": "8c23152cda786cf79b994f3d7c5c11f0a9c5c92e", "filename": "src/cast.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ede7cde065d94fa53127c70c7db7f86c58eb749f/src%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede7cde065d94fa53127c70c7db7f86c58eb749f/src%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcast.rs?ref=ede7cde065d94fa53127c70c7db7f86c58eb749f", "patch": "@@ -64,29 +64,12 @@ pub(crate) fn clif_int_or_float_cast(\n                 },\n             );\n \n-            if fx.tcx.sess.target.is_like_windows {\n-                // FIXME move this logic into lib_call\n-                let arg_place = CPlace::new_stack_slot(\n-                    fx,\n-                    fx.layout_of(if from_signed { fx.tcx.types.i128 } else { fx.tcx.types.u128 }),\n-                );\n-                let arg_ptr = arg_place.to_ptr();\n-                arg_ptr.store(fx, from, MemFlags::trusted());\n-                let args = [arg_ptr.get_addr(fx)];\n-                return fx.lib_call(\n-                    &name,\n-                    vec![AbiParam::new(fx.pointer_type)],\n-                    vec![AbiParam::new(to_ty)],\n-                    &args,\n-                )[0];\n-            } else {\n-                return fx.lib_call(\n-                    &name,\n-                    vec![AbiParam::new(types::I128)],\n-                    vec![AbiParam::new(to_ty)],\n-                    &[from],\n-                )[0];\n-            }\n+            return fx.lib_call(\n+                &name,\n+                vec![AbiParam::new(types::I128)],\n+                vec![AbiParam::new(to_ty)],\n+                &[from],\n+            )[0];\n         }\n \n         // int-like -> float"}, {"sha": "c2a2ce8ad6a1a741b6908f7873d9450eb572c4fb", "filename": "src/codegen_i128.rs", "status": "modified", "additions": 12, "deletions": 40, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ede7cde065d94fa53127c70c7db7f86c58eb749f/src%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede7cde065d94fa53127c70c7db7f86c58eb749f/src%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodegen_i128.rs?ref=ede7cde065d94fa53127c70c7db7f86c58eb749f", "patch": "@@ -32,21 +32,14 @@ pub(crate) fn maybe_codegen<'tcx>(\n                 let val_ty = if is_signed { fx.tcx.types.i128 } else { fx.tcx.types.u128 };\n                 if fx.tcx.sess.target.is_like_windows {\n                     let ret_place = CPlace::new_stack_slot(fx, lhs.layout());\n-                    let (lhs_ptr, lhs_extra) = lhs.force_stack(fx);\n-                    let (rhs_ptr, rhs_extra) = rhs.force_stack(fx);\n-                    assert!(lhs_extra.is_none());\n-                    assert!(rhs_extra.is_none());\n-                    let args = [\n-                        ret_place.to_ptr().get_addr(fx),\n-                        lhs_ptr.get_addr(fx),\n-                        rhs_ptr.get_addr(fx),\n-                    ];\n+                    let args =\n+                        [ret_place.to_ptr().get_addr(fx), lhs.load_scalar(fx), rhs.load_scalar(fx)];\n                     fx.lib_call(\n                         \"__multi3\",\n                         vec![\n                             AbiParam::special(fx.pointer_type, ArgumentPurpose::StructReturn),\n-                            AbiParam::new(fx.pointer_type),\n-                            AbiParam::new(fx.pointer_type),\n+                            AbiParam::new(types::I128),\n+                            AbiParam::new(types::I128),\n                         ],\n                         vec![],\n                         &args,\n@@ -87,29 +80,12 @@ pub(crate) fn maybe_codegen<'tcx>(\n             assert!(checked);\n             let out_ty = fx.tcx.mk_tup([lhs.layout().ty, fx.tcx.types.bool].iter());\n             let out_place = CPlace::new_stack_slot(fx, fx.layout_of(out_ty));\n-            let (param_types, args) = if fx.tcx.sess.target.is_like_windows {\n-                let (lhs_ptr, lhs_extra) = lhs.force_stack(fx);\n-                let (rhs_ptr, rhs_extra) = rhs.force_stack(fx);\n-                assert!(lhs_extra.is_none());\n-                assert!(rhs_extra.is_none());\n-                (\n-                    vec![\n-                        AbiParam::special(fx.pointer_type, ArgumentPurpose::StructReturn),\n-                        AbiParam::new(fx.pointer_type),\n-                        AbiParam::new(fx.pointer_type),\n-                    ],\n-                    [out_place.to_ptr().get_addr(fx), lhs_ptr.get_addr(fx), rhs_ptr.get_addr(fx)],\n-                )\n-            } else {\n-                (\n-                    vec![\n-                        AbiParam::special(fx.pointer_type, ArgumentPurpose::StructReturn),\n-                        AbiParam::new(types::I128),\n-                        AbiParam::new(types::I128),\n-                    ],\n-                    [out_place.to_ptr().get_addr(fx), lhs.load_scalar(fx), rhs.load_scalar(fx)],\n-                )\n-            };\n+            let param_types = vec![\n+                AbiParam::special(fx.pointer_type, ArgumentPurpose::StructReturn),\n+                AbiParam::new(types::I128),\n+                AbiParam::new(types::I128),\n+            ];\n+            let args = [out_place.to_ptr().get_addr(fx), lhs.load_scalar(fx), rhs.load_scalar(fx)];\n             let name = match (bin_op, is_signed) {\n                 (BinOp::Add, false) => \"__rust_u128_addo\",\n                 (BinOp::Add, true) => \"__rust_i128_addo\",\n@@ -132,14 +108,10 @@ pub(crate) fn maybe_codegen<'tcx>(\n                 _ => unreachable!(),\n             };\n             if fx.tcx.sess.target.is_like_windows {\n-                let (lhs_ptr, lhs_extra) = lhs.force_stack(fx);\n-                let (rhs_ptr, rhs_extra) = rhs.force_stack(fx);\n-                assert!(lhs_extra.is_none());\n-                assert!(rhs_extra.is_none());\n-                let args = [lhs_ptr.get_addr(fx), rhs_ptr.get_addr(fx)];\n+                let args = [lhs.load_scalar(fx), rhs.load_scalar(fx)];\n                 let ret = fx.lib_call(\n                     name,\n-                    vec![AbiParam::new(fx.pointer_type), AbiParam::new(fx.pointer_type)],\n+                    vec![AbiParam::new(types::I128), AbiParam::new(types::I128)],\n                     vec![AbiParam::new(types::I64X2)],\n                     &args,\n                 )[0];"}]}