{"sha": "2d14dc9f1e02131d01906e8dcfa87861da8fe5f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMTRkYzlmMWUwMjEzMWQwMTkwNmU4ZGNmYTg3ODYxZGE4ZmU1ZjI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-14T12:42:26Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-14T12:42:26Z"}, "message": "Rustup cg_ssa to rustc 1.32.0-nightly (f4a421ee3 2018-12-13)", "tree": {"sha": "7d866c2862e57116dde3926657ccb10e887cf0cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d866c2862e57116dde3926657ccb10e887cf0cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d14dc9f1e02131d01906e8dcfa87861da8fe5f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d14dc9f1e02131d01906e8dcfa87861da8fe5f2", "html_url": "https://github.com/rust-lang/rust/commit/2d14dc9f1e02131d01906e8dcfa87861da8fe5f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d14dc9f1e02131d01906e8dcfa87861da8fe5f2/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8d435aade4db3e51eb2414293a8e0d7934bd17a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8d435aade4db3e51eb2414293a8e0d7934bd17a", "html_url": "https://github.com/rust-lang/rust/commit/c8d435aade4db3e51eb2414293a8e0d7934bd17a"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "366b06a127660e48175f1ee6a70fe81446a64281", "filename": "src/constant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d14dc9f1e02131d01906e8dcfa87861da8fe5f2/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d14dc9f1e02131d01906e8dcfa87861da8fe5f2/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=2d14dc9f1e02131d01906e8dcfa87861da8fe5f2", "patch": "@@ -1,7 +1,7 @@\n use std::borrow::Cow;\n \n use rustc::mir::interpret::{\n-    read_target_uint, AllocId, AllocType, Allocation, ConstValue, EvalResult, GlobalId, Scalar,\n+    read_target_uint, AllocId, AllocKind, Allocation, ConstValue, EvalResult, GlobalId, Scalar,\n };\n use rustc::ty::Const;\n use rustc_mir::interpret::{\n@@ -253,7 +253,7 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n             };\n \n             let data_id = match tcx.alloc_map.lock().get(reloc).unwrap() {\n-                AllocType::Function(instance) => {\n+                AllocKind::Function(instance) => {\n                     let (func_name, sig) = crate::abi::get_function_name_and_sig(tcx, instance);\n                     let func_id = module\n                         .declare_function(&func_name, Linkage::Import, &sig)\n@@ -262,11 +262,11 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n                     data_ctx.write_function_addr(reloc_offset as u32, local_func_id);\n                     continue;\n                 }\n-                AllocType::Memory(_) => {\n+                AllocKind::Memory(_) => {\n                     cx.todo.insert(TodoItem::Alloc(reloc));\n                     data_id_for_alloc_id(module, reloc)\n                 }\n-                AllocType::Static(def_id) => {\n+                AllocKind::Static(def_id) => {\n                     cx.todo.insert(TodoItem::Static(def_id));\n                     data_id_for_static(tcx, module, def_id, Linkage::Import)\n                 }"}, {"sha": "c19a6eec7391d9738969e90292001cf68f871cb5", "filename": "src/link_copied.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2d14dc9f1e02131d01906e8dcfa87861da8fe5f2/src%2Flink_copied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d14dc9f1e02131d01906e8dcfa87861da8fe5f2/src%2Flink_copied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flink_copied.rs?ref=2d14dc9f1e02131d01906e8dcfa87861da8fe5f2", "patch": "@@ -32,11 +32,7 @@ use crate::metadata::METADATA_FILENAME;\n const RLIB_BYTECODE_EXTENSION: &str = \".cg_clif_bytecode_dummy\";\n \n fn archive_search_paths(sess: &Session) -> Vec<PathBuf> {\n-    let mut search = Vec::new();\n-    sess.target_filesearch(PathKind::Native).for_each_lib_search_path(|path, _| {\n-        search.push(path.to_path_buf());\n-    });\n-    return search;\n+    sess.target_filesearch(PathKind::Native).search_path_dirs()\n }\n \n fn archive_config<'a>(sess: &'a Session,\n@@ -526,12 +522,13 @@ pub fn add_upstream_rust_crates(cmd: &mut dyn Linker,\n pub fn add_local_native_libraries(cmd: &mut dyn Linker,\n                               sess: &Session,\n                               codegen_results: &CodegenResults) {\n-    sess.target_filesearch(PathKind::All).for_each_lib_search_path(|path, k| {\n-        match k {\n-            PathKind::Framework => { cmd.framework_path(path); }\n-            _ => { cmd.include_path(&fix_windows_verbatim_for_gcc(path)); }\n+    let filesearch = sess.target_filesearch(PathKind::All);\n+    for search_path in filesearch.search_paths() {\n+        match search_path.kind {\n+            PathKind::Framework => { cmd.framework_path(&search_path.dir); }\n+            _ => { cmd.include_path(&fix_windows_verbatim_for_gcc(&search_path.dir)); }\n         }\n-    });\n+    }\n \n     let relevant_libs = codegen_results.crate_info.used_libraries.iter().filter(|l| {\n         relevant_lib(sess, l)"}]}