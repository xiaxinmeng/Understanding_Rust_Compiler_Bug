{"sha": "b816cb94e79f7f23e12b567e7f412125fe1ef8b7", "node_id": "C_kwDOAAsO6NoAKGI4MTZjYjk0ZTc5ZjdmMjNlMTJiNTY3ZTdmNDEyMTI1ZmUxZWY4Yjc", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-11-18T14:42:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-11-21T03:30:49Z"}, "message": "implement SIMD sub, mul, div; also test i32 binops", "tree": {"sha": "535e81b12c1c449e2e842177e0568a41eb9819c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/535e81b12c1c449e2e842177e0568a41eb9819c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b816cb94e79f7f23e12b567e7f412125fe1ef8b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b816cb94e79f7f23e12b567e7f412125fe1ef8b7", "html_url": "https://github.com/rust-lang/rust/commit/b816cb94e79f7f23e12b567e7f412125fe1ef8b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b816cb94e79f7f23e12b567e7f412125fe1ef8b7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0766da6fbeba2e4cd3183f181e10bbc7ba69ade8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0766da6fbeba2e4cd3183f181e10bbc7ba69ade8", "html_url": "https://github.com/rust-lang/rust/commit/0766da6fbeba2e4cd3183f181e10bbc7ba69ade8"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "d684b41ed81d916b21b58c998369e0d5cf98137d", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b816cb94e79f7f23e12b567e7f412125fe1ef8b7/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b816cb94e79f7f23e12b567e7f412125fe1ef8b7/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=b816cb94e79f7f23e12b567e7f412125fe1ef8b7", "patch": "@@ -306,7 +306,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // SIMD operations\n-            \"simd_add\" => {\n+            \"simd_add\" | \"simd_sub\" | \"simd_mul\" | \"simd_div\" => {\n                 let &[ref left, ref right] = check_arg_count(args)?;\n                 let (left, left_len) = this.operand_to_simd(left)?;\n                 let (right, right_len) = this.operand_to_simd(right)?;\n@@ -315,11 +315,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 assert_eq!(dest_len, left_len);\n                 assert_eq!(dest_len, right_len);\n \n+                let op = match intrinsic_name {\n+                    \"simd_add\" => mir::BinOp::Add,\n+                    \"simd_sub\" => mir::BinOp::Sub,\n+                    \"simd_mul\" => mir::BinOp::Mul,\n+                    \"simd_div\" => mir::BinOp::Div,\n+                    _ => unreachable!(),\n+                };\n+\n                 for i in 0..dest_len {\n                     let left = this.read_immediate(&this.mplace_index(&left, i)?.into())?;\n                     let right = this.read_immediate(&this.mplace_index(&right, i)?.into())?;\n                     let dest = this.mplace_index(&dest, i)?.into();\n-                    this.binop_ignore_overflow(mir::BinOp::Add, &left, &right, &dest)?;\n+                    this.binop_ignore_overflow(op, &left, &right, &dest)?;\n                 }\n             }\n "}, {"sha": "42a6befd868be73f4c284019abff601a79195936", "filename": "tests/run-pass/portable-simd.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b816cb94e79f7f23e12b567e7f412125fe1ef8b7/tests%2Frun-pass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b816cb94e79f7f23e12b567e7f412125fe1ef8b7/tests%2Frun-pass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fportable-simd.rs?ref=b816cb94e79f7f23e12b567e7f412125fe1ef8b7", "patch": "@@ -1,8 +1,27 @@\n #![feature(portable_simd)]\n use std::simd::*;\n \n-fn main() {\n+fn simd_ops_f32() {\n     let a = f32x4::splat(10.0);\n     let b = f32x4::from_array([1.0, 2.0, 3.0, 4.0]);\n     assert_eq!(a + b, f32x4::from_array([11.0, 12.0, 13.0, 14.0]));\n+    assert_eq!(a - b, f32x4::from_array([9.0, 8.0, 7.0, 6.0]));\n+    assert_eq!(a * b, f32x4::from_array([10.0, 20.0, 30.0, 40.0]));\n+    assert_eq!(b / a, f32x4::from_array([0.1, 0.2, 0.3, 0.4]));\n+    assert_eq!(a / 2.0, f32x4::splat(5.0));\n+}\n+\n+fn simd_ops_i32() {\n+    let a = i32x4::splat(10);\n+    let b = i32x4::from_array([1, 2, 3, 4]);\n+    assert_eq!(a + b, i32x4::from_array([11, 12, 13, 14]));\n+    assert_eq!(a - b, i32x4::from_array([9, 8, 7, 6]));\n+    assert_eq!(a * b, i32x4::from_array([10, 20, 30, 40]));\n+    assert_eq!(a / b, i32x4::from_array([10, 5, 3, 2]));\n+    assert_eq!(a / 2, i32x4::splat(5));\n+}\n+\n+fn main() {\n+    simd_ops_f32();\n+    simd_ops_i32();\n }"}]}