{"sha": "f8b61d852c2de4632278322d6d00a7f066277e14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YjYxZDg1MmMyZGU0NjMyMjc4MzIyZDZkMDBhN2YwNjYyNzdlMTQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-19T01:49:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-19T01:49:07Z"}, "message": "Rollup merge of #82093 - bjorn3:more_atomic_tests, r=kennytm\n\nAdd tests for Atomic*::fetch_{min,max}\n\nThis ensures that all atomic operations except for fences are tested. This has been useful to test my work on using atomic instructions for atomic operations in cg_clif instead of a global lock.", "tree": {"sha": "45cef7fc4d276ef463b9e9d5c06628e38bdf1a2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45cef7fc4d276ef463b9e9d5c06628e38bdf1a2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8b61d852c2de4632278322d6d00a7f066277e14", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLxkUCRBK7hj4Ov3rIwAAdHIIAGP32zgHopwGUJRZmnBOpnrf\nvxV61CUIBMbU96e/6BdVOdNqd8XcXlACG2hsrP8hucZD8oPGI9cshiMLdA4XtkRz\n4Mia+f66z2AESYnsmyeEuVHxhVDt+yTJ7Mu+HeMdZeZUM0QZmxkVNTSPHoj49hoe\nQHJ7H0PzDZFzjiTzb9JMb7NxbmDoAY5G/rg1EA/ug/1P1Hb9dcJIxXDgNhCIGD3b\neer10ABtNTi+L/hPXyCY/XE0KfdpqWd9USs+fJrHaUoompaDVlQ/7UAyUxL5LKpB\nwroKhyom84wXBm0HMY137SuBHwAbzIZQvOKh7071wObzD+bbGpyaPoOhxrvl1i8=\n=9HGG\n-----END PGP SIGNATURE-----\n", "payload": "tree 45cef7fc4d276ef463b9e9d5c06628e38bdf1a2d\nparent c821063a53a6d236ed79de14e721d7c8869f63c2\nparent 4fa9e08e3dc10acdb322490d5ac24e937c0f43f5\nauthor Dylan DPC <dylan.dpc@gmail.com> 1613699347 +0100\ncommitter GitHub <noreply@github.com> 1613699347 +0100\n\nRollup merge of #82093 - bjorn3:more_atomic_tests, r=kennytm\n\nAdd tests for Atomic*::fetch_{min,max}\n\nThis ensures that all atomic operations except for fences are tested. This has been useful to test my work on using atomic instructions for atomic operations in cg_clif instead of a global lock.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8b61d852c2de4632278322d6d00a7f066277e14", "html_url": "https://github.com/rust-lang/rust/commit/f8b61d852c2de4632278322d6d00a7f066277e14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8b61d852c2de4632278322d6d00a7f066277e14/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c821063a53a6d236ed79de14e721d7c8869f63c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c821063a53a6d236ed79de14e721d7c8869f63c2", "html_url": "https://github.com/rust-lang/rust/commit/c821063a53a6d236ed79de14e721d7c8869f63c2"}, {"sha": "4fa9e08e3dc10acdb322490d5ac24e937c0f43f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fa9e08e3dc10acdb322490d5ac24e937c0f43f5", "html_url": "https://github.com/rust-lang/rust/commit/4fa9e08e3dc10acdb322490d5ac24e937c0f43f5"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "b735957666fc52b8d4a35235fc8cc22d2b532a02", "filename": "library/core/tests/atomic.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f8b61d852c2de4632278322d6d00a7f066277e14/library%2Fcore%2Ftests%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b61d852c2de4632278322d6d00a7f066277e14/library%2Fcore%2Ftests%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fatomic.rs?ref=f8b61d852c2de4632278322d6d00a7f066277e14", "patch": "@@ -59,6 +59,26 @@ fn uint_xor() {\n     assert_eq!(x.load(SeqCst), 0xf731 ^ 0x137f);\n }\n \n+#[test]\n+#[cfg(any(not(target_arch = \"arm\"), target_os = \"linux\"))] // Missing intrinsic in compiler-builtins\n+fn uint_min() {\n+    let x = AtomicUsize::new(0xf731);\n+    assert_eq!(x.fetch_min(0x137f, SeqCst), 0xf731);\n+    assert_eq!(x.load(SeqCst), 0x137f);\n+    assert_eq!(x.fetch_min(0xf731, SeqCst), 0x137f);\n+    assert_eq!(x.load(SeqCst), 0x137f);\n+}\n+\n+#[test]\n+#[cfg(any(not(target_arch = \"arm\"), target_os = \"linux\"))] // Missing intrinsic in compiler-builtins\n+fn uint_max() {\n+    let x = AtomicUsize::new(0x137f);\n+    assert_eq!(x.fetch_max(0xf731, SeqCst), 0x137f);\n+    assert_eq!(x.load(SeqCst), 0xf731);\n+    assert_eq!(x.fetch_max(0x137f, SeqCst), 0xf731);\n+    assert_eq!(x.load(SeqCst), 0xf731);\n+}\n+\n #[test]\n fn int_and() {\n     let x = AtomicIsize::new(0xf731);\n@@ -87,6 +107,26 @@ fn int_xor() {\n     assert_eq!(x.load(SeqCst), 0xf731 ^ 0x137f);\n }\n \n+#[test]\n+#[cfg(any(not(target_arch = \"arm\"), target_os = \"linux\"))] // Missing intrinsic in compiler-builtins\n+fn int_min() {\n+    let x = AtomicIsize::new(0xf731);\n+    assert_eq!(x.fetch_min(0x137f, SeqCst), 0xf731);\n+    assert_eq!(x.load(SeqCst), 0x137f);\n+    assert_eq!(x.fetch_min(0xf731, SeqCst), 0x137f);\n+    assert_eq!(x.load(SeqCst), 0x137f);\n+}\n+\n+#[test]\n+#[cfg(any(not(target_arch = \"arm\"), target_os = \"linux\"))] // Missing intrinsic in compiler-builtins\n+fn int_max() {\n+    let x = AtomicIsize::new(0x137f);\n+    assert_eq!(x.fetch_max(0xf731, SeqCst), 0x137f);\n+    assert_eq!(x.load(SeqCst), 0xf731);\n+    assert_eq!(x.fetch_max(0x137f, SeqCst), 0xf731);\n+    assert_eq!(x.load(SeqCst), 0xf731);\n+}\n+\n static S_FALSE: AtomicBool = AtomicBool::new(false);\n static S_TRUE: AtomicBool = AtomicBool::new(true);\n static S_INT: AtomicIsize = AtomicIsize::new(0);"}]}