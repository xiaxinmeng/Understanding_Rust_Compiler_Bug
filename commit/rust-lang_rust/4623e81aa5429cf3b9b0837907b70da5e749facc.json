{"sha": "4623e81aa5429cf3b9b0837907b70da5e749facc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MjNlODFhYTU0MjljZjNiOWIwODM3OTA3YjcwZGE1ZTc0OWZhY2M=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-18T15:31:33Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-20T18:22:48Z"}, "message": "iterator: Let closure-less iterators derive Clone", "tree": {"sha": "e2627c6e1c400dfb59d9e2aea84ea8eb20c55185", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2627c6e1c400dfb59d9e2aea84ea8eb20c55185"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4623e81aa5429cf3b9b0837907b70da5e749facc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4623e81aa5429cf3b9b0837907b70da5e749facc", "html_url": "https://github.com/rust-lang/rust/commit/4623e81aa5429cf3b9b0837907b70da5e749facc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4623e81aa5429cf3b9b0837907b70da5e749facc/comments", "author": null, "committer": null, "parents": [{"sha": "435fcda5e99ad5944c780f864a550b3211a6ab47", "url": "https://api.github.com/repos/rust-lang/rust/commits/435fcda5e99ad5944c780f864a550b3211a6ab47", "html_url": "https://github.com/rust-lang/rust/commit/435fcda5e99ad5944c780f864a550b3211a6ab47"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "ce1c1d585d1be7765385b7fb34379827c51afbc0", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4623e81aa5429cf3b9b0837907b70da5e749facc/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4623e81aa5429cf3b9b0837907b70da5e749facc/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=4623e81aa5429cf3b9b0837907b70da5e749facc", "patch": "@@ -74,6 +74,7 @@ impl<A, T: DoubleEndedIterator<A>> DoubleEndedIteratorUtil<A> for T {\n \n /// An double-ended iterator with the direction inverted\n // FIXME #6967: Dummy A parameter to get around type inference bug\n+#[deriving(Clone)]\n pub struct InvertIterator<A, T> {\n     priv iter: T\n }\n@@ -753,6 +754,7 @@ impl<A, T: Clone + Iterator<A>> ClonableIterator<A> for T {\n }\n \n /// An iterator that repeats endlessly\n+#[deriving(Clone)]\n pub struct CycleIterator<A, T> {\n     priv orig: T,\n     priv iter: T,\n@@ -780,6 +782,7 @@ impl<A, T: Clone + Iterator<A>> Iterator<A> for CycleIterator<A, T> {\n \n /// An iterator which strings two iterators together\n // FIXME #6967: Dummy A parameter to get around type inference bug\n+#[deriving(Clone)]\n pub struct ChainIterator<A, T, U> {\n     priv a: T,\n     priv b: U,\n@@ -835,6 +838,7 @@ for ChainIterator<A, T, U> {\n \n /// An iterator which iterates two other iterators simultaneously\n // FIXME #6967: Dummy A & B parameters to get around type inference bug\n+#[deriving(Clone)]\n pub struct ZipIterator<A, T, B, U> {\n     priv a: T,\n     priv b: U\n@@ -988,6 +992,7 @@ for FilterMapIterator<'self, A, B, T> {\n \n /// An iterator which yields the current count and the element during iteration\n // FIXME #6967: Dummy A parameter to get around type inference bug\n+#[deriving(Clone)]\n pub struct EnumerateIterator<A, T> {\n     priv iter: T,\n     priv count: uint\n@@ -1086,6 +1091,7 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for TakeWhileIterator<'self, A, T> {\n \n /// An iterator which skips over `n` elements of `iter`.\n // FIXME #6967: Dummy A parameter to get around type inference bug\n+#[deriving(Clone)]\n pub struct SkipIterator<A, T> {\n     priv iter: T,\n     priv n: uint\n@@ -1134,6 +1140,7 @@ impl<A, T: Iterator<A>> Iterator<A> for SkipIterator<A, T> {\n \n /// An iterator which only iterates over the first `n` iterations of `iter`.\n // FIXME #6967: Dummy A parameter to get around type inference bug\n+#[deriving(Clone)]\n pub struct TakeIterator<A, T> {\n     priv iter: T,\n     priv n: uint\n@@ -1285,6 +1292,7 @@ impl<'self, A, St> Iterator<A> for UnfoldrIterator<'self, A, St> {\n \n /// An infinite iterator starting at `start` and advancing by `step` with each\n /// iteration\n+#[deriving(Clone)]\n pub struct Counter<A> {\n     /// The current state the counter is at (next value to be yielded)\n     state: A,"}]}