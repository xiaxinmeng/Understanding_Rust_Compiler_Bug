{"sha": "d78063dd8459f71b9bd87d6a59a142598ba79573", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ODA2M2RkODQ1OWY3MWI5YmQ4N2Q2YTU5YTE0MjU5OGJhNzk1NzM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-04-05T17:01:31Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-04-06T17:13:02Z"}, "message": "rustbuild: Support cross rust-docs packages\n\nRight now if you configure multiple hosts rustbuild will only build\ndocumentation for the build triple, but we've got all the support necessary to\nbuild documentation for different architectures as well. This commit\nreinterprets the `target` field of doc `Step` instances to be the target of the\ndocumentation rather than the target of the rustdoc/tool being run.\n\nThis should enable `make dist` to start producing a bunch of `rust-docs`\npackages for all the cross architectures that rustbuild is producing now.", "tree": {"sha": "bc8a92fc869e4c0ead67b0ed22a9acc602d0565b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc8a92fc869e4c0ead67b0ed22a9acc602d0565b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d78063dd8459f71b9bd87d6a59a142598ba79573", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d78063dd8459f71b9bd87d6a59a142598ba79573", "html_url": "https://github.com/rust-lang/rust/commit/d78063dd8459f71b9bd87d6a59a142598ba79573", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d78063dd8459f71b9bd87d6a59a142598ba79573/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e758722f4f9ccf9054ebf179b8630a37ce954f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e758722f4f9ccf9054ebf179b8630a37ce954f1", "html_url": "https://github.com/rust-lang/rust/commit/4e758722f4f9ccf9054ebf179b8630a37ce954f1"}], "stats": {"total": 81, "additions": 46, "deletions": 35}, "files": [{"sha": "6ae652bd66da6f9df687c0918deb7c5cd2e15b97", "filename": "src/bootstrap/build/dist.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d78063dd8459f71b9bd87d6a59a142598ba79573/src%2Fbootstrap%2Fbuild%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d78063dd8459f71b9bd87d6a59a142598ba79573/src%2Fbootstrap%2Fbuild%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fdist.rs?ref=d78063dd8459f71b9bd87d6a59a142598ba79573", "patch": "@@ -52,7 +52,7 @@ pub fn docs(build: &Build, stage: u32, host: &str) {\n        .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n        .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n        .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n-       .arg(format!(\"--package-name={}\", name))\n+       .arg(format!(\"--package-name={}-{}\", name, host))\n        .arg(\"--component-name=rust-docs\")\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n        .arg(\"--bulk-dirs=share/doc/rust/html\");\n@@ -61,9 +61,11 @@ pub fn docs(build: &Build, stage: u32, host: &str) {\n \n     // As part of this step, *also* copy the docs directory to a directory which\n     // buildbot typically uploads.\n-    let dst = distdir(build).join(\"doc\").join(&build.package_vers);\n-    t!(fs::create_dir_all(&dst));\n-    cp_r(&src, &dst);\n+    if host == build.config.build {\n+        let dst = distdir(build).join(\"doc\").join(&build.package_vers);\n+        t!(fs::create_dir_all(&dst));\n+        cp_r(&src, &dst);\n+    }\n }\n \n pub fn mingw(build: &Build, host: &str) {"}, {"sha": "5782dd5ec28dd0c23b98ee9fc0e5b75e17458774", "filename": "src/bootstrap/build/doc.rs", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d78063dd8459f71b9bd87d6a59a142598ba79573/src%2Fbootstrap%2Fbuild%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d78063dd8459f71b9bd87d6a59a142598ba79573/src%2Fbootstrap%2Fbuild%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fdoc.rs?ref=d78063dd8459f71b9bd87d6a59a142598ba79573", "patch": "@@ -16,30 +16,30 @@ use std::process::Command;\n use build::{Build, Compiler, Mode};\n use build::util::{up_to_date, cp_r};\n \n-pub fn rustbook(build: &Build, stage: u32, host: &str, name: &str, out: &Path) {\n+pub fn rustbook(build: &Build, stage: u32, target: &str, name: &str, out: &Path) {\n     t!(fs::create_dir_all(out));\n \n     let out = out.join(name);\n-    let compiler = Compiler::new(stage, host);\n+    let compiler = Compiler::new(stage, &build.config.build);\n     let src = build.src.join(\"src/doc\").join(name);\n     let index = out.join(\"index.html\");\n     let rustbook = build.tool(&compiler, \"rustbook\");\n     if up_to_date(&src, &index) && up_to_date(&rustbook, &index) {\n         return\n     }\n-    println!(\"Rustbook stage{} ({}) - {}\", stage, host, name);\n+    println!(\"Rustbook stage{} ({}) - {}\", stage, target, name);\n     let _ = fs::remove_dir_all(&out);\n     build.run(build.tool_cmd(&compiler, \"rustbook\")\n                    .arg(\"build\")\n                    .arg(&src)\n                    .arg(out));\n }\n \n-pub fn standalone(build: &Build, stage: u32, host: &str, out: &Path) {\n-    println!(\"Documenting stage{} standalone ({})\", stage, host);\n+pub fn standalone(build: &Build, stage: u32, target: &str, out: &Path) {\n+    println!(\"Documenting stage{} standalone ({})\", stage, target);\n     t!(fs::create_dir_all(out));\n \n-    let compiler = Compiler::new(stage, host);\n+    let compiler = Compiler::new(stage, &build.config.build);\n \n     let favicon = build.src.join(\"src/doc/favicon.inc\");\n     let footer = build.src.join(\"src/doc/footer.inc\");\n@@ -105,59 +105,61 @@ pub fn standalone(build: &Build, stage: u32, host: &str, out: &Path) {\n     }\n }\n \n-pub fn std(build: &Build, stage: u32, host: &str, out: &Path) {\n-    println!(\"Documenting stage{} std ({})\", stage, host);\n-    let compiler = Compiler::new(stage, host);\n+pub fn std(build: &Build, stage: u32, target: &str, out: &Path) {\n+    println!(\"Documenting stage{} std ({})\", stage, target);\n+    t!(fs::create_dir_all(out));\n+    let compiler = Compiler::new(stage, &build.config.build);\n     let out_dir = build.stage_out(&compiler, Mode::Libstd)\n-                       .join(host).join(\"doc\");\n+                       .join(target).join(\"doc\");\n     let rustdoc = build.rustdoc(&compiler);\n \n     build.clear_if_dirty(&out_dir, &rustdoc);\n \n-    let mut cargo = build.cargo(&compiler, Mode::Libstd, host, \"doc\");\n+    let mut cargo = build.cargo(&compiler, Mode::Libstd, target, \"doc\");\n     cargo.arg(\"--manifest-path\")\n          .arg(build.src.join(\"src/rustc/std_shim/Cargo.toml\"))\n          .arg(\"--features\").arg(build.std_features());\n     build.run(&mut cargo);\n     cp_r(&out_dir, out)\n }\n \n-pub fn test(build: &Build, stage: u32, host: &str, out: &Path) {\n-    println!(\"Documenting stage{} test ({})\", stage, host);\n-    let compiler = Compiler::new(stage, host);\n+pub fn test(build: &Build, stage: u32, target: &str, out: &Path) {\n+    println!(\"Documenting stage{} test ({})\", stage, target);\n+    let compiler = Compiler::new(stage, &build.config.build);\n     let out_dir = build.stage_out(&compiler, Mode::Libtest)\n-                       .join(host).join(\"doc\");\n+                       .join(target).join(\"doc\");\n     let rustdoc = build.rustdoc(&compiler);\n \n     build.clear_if_dirty(&out_dir, &rustdoc);\n \n-    let mut cargo = build.cargo(&compiler, Mode::Libtest, host, \"doc\");\n+    let mut cargo = build.cargo(&compiler, Mode::Libtest, target, \"doc\");\n     cargo.arg(\"--manifest-path\")\n          .arg(build.src.join(\"src/rustc/test_shim/Cargo.toml\"));\n     build.run(&mut cargo);\n     cp_r(&out_dir, out)\n }\n \n-pub fn rustc(build: &Build, stage: u32, host: &str, out: &Path) {\n-    println!(\"Documenting stage{} compiler ({})\", stage, host);\n-    let compiler = Compiler::new(stage, host);\n+pub fn rustc(build: &Build, stage: u32, target: &str, out: &Path) {\n+    println!(\"Documenting stage{} compiler ({})\", stage, target);\n+    let compiler = Compiler::new(stage, &build.config.build);\n     let out_dir = build.stage_out(&compiler, Mode::Librustc)\n-                       .join(host).join(\"doc\");\n+                       .join(target).join(\"doc\");\n     let rustdoc = build.rustdoc(&compiler);\n     if !up_to_date(&rustdoc, &out_dir.join(\"rustc/index.html\")) {\n         t!(fs::remove_dir_all(&out_dir));\n     }\n-    let mut cargo = build.cargo(&compiler, Mode::Librustc, host, \"doc\");\n+    let mut cargo = build.cargo(&compiler, Mode::Librustc, target, \"doc\");\n     cargo.arg(\"--manifest-path\")\n          .arg(build.src.join(\"src/rustc/Cargo.toml\"))\n          .arg(\"--features\").arg(build.rustc_features());\n     build.run(&mut cargo);\n     cp_r(&out_dir, out)\n }\n \n-pub fn error_index(build: &Build, stage: u32, host: &str, out: &Path) {\n-    println!(\"Documenting stage{} error index ({})\", stage, host);\n-    let compiler = Compiler::new(stage, host);\n+pub fn error_index(build: &Build, stage: u32, target: &str, out: &Path) {\n+    println!(\"Documenting stage{} error index ({})\", stage, target);\n+    t!(fs::create_dir_all(out));\n+    let compiler = Compiler::new(stage, &build.config.build);\n     let mut index = build.tool_cmd(&compiler, \"error_index_generator\");\n     index.arg(\"html\");\n     index.arg(out.join(\"error-index.html\"));"}, {"sha": "a185a65975fdd445ea636355de7611c2cfb4a62b", "filename": "src/bootstrap/build/step.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d78063dd8459f71b9bd87d6a59a142598ba79573/src%2Fbootstrap%2Fbuild%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d78063dd8459f71b9bd87d6a59a142598ba79573/src%2Fbootstrap%2Fbuild%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fstep.rs?ref=d78063dd8459f71b9bd87d6a59a142598ba79573", "patch": "@@ -274,22 +274,28 @@ impl<'a> Step<'a> {\n                 vec![self.llvm(()).target(&build.config.build)]\n             }\n             Source::Llvm { _dummy } => Vec::new(),\n+\n+            // Note that all doc targets depend on artifacts from the build\n+            // architecture, not the target (which is where we're generating\n+            // docs into).\n             Source::DocStd { stage } => {\n-                vec![self.libstd(self.compiler(stage))]\n+                let compiler = self.target(&build.config.build).compiler(stage);\n+                vec![self.libstd(compiler)]\n             }\n             Source::DocTest { stage } => {\n-                vec![self.libtest(self.compiler(stage))]\n+                let compiler = self.target(&build.config.build).compiler(stage);\n+                vec![self.libtest(compiler)]\n             }\n             Source::DocBook { stage } |\n             Source::DocNomicon { stage } |\n             Source::DocStyle { stage } => {\n-                vec![self.tool_rustbook(stage)]\n+                vec![self.target(&build.config.build).tool_rustbook(stage)]\n             }\n             Source::DocErrorIndex { stage } => {\n-                vec![self.tool_error_index(stage)]\n+                vec![self.target(&build.config.build).tool_error_index(stage)]\n             }\n             Source::DocStandalone { stage } => {\n-                vec![self.rustc(stage)]\n+                vec![self.target(&build.config.build).rustc(stage)]\n             }\n             Source::DocRustc { stage } => {\n                 vec![self.doc_test(stage)]\n@@ -333,7 +339,6 @@ impl<'a> Step<'a> {\n \n             Source::Dist { stage } => {\n                 let mut base = Vec::new();\n-                base.push(self.dist_docs(stage));\n \n                 for host in build.config.host.iter() {\n                     let host = self.target(host);\n@@ -344,7 +349,9 @@ impl<'a> Step<'a> {\n \n                     let compiler = self.compiler(stage);\n                     for target in build.config.target.iter() {\n-                        base.push(self.target(target).dist_std(compiler));\n+                        let target = self.target(target);\n+                        base.push(target.dist_docs(stage));\n+                        base.push(target.dist_std(compiler));\n                     }\n                 }\n                 return base"}]}