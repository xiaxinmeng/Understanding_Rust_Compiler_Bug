{"sha": "da975c318d2b0f2d8f0c6feb50a266c86b771651", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhOTc1YzMxOGQyYjBmMmQ4ZjBjNmZlYjUwYTI2NmM4NmI3NzE2NTE=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-17T20:58:04Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-27T20:50:17Z"}, "message": "Use `LocalDefId` for `type_param_predicates` query", "tree": {"sha": "eef8ca4379a44acd63e189276783a9f5e4109ca9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eef8ca4379a44acd63e189276783a9f5e4109ca9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da975c318d2b0f2d8f0c6feb50a266c86b771651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da975c318d2b0f2d8f0c6feb50a266c86b771651", "html_url": "https://github.com/rust-lang/rust/commit/da975c318d2b0f2d8f0c6feb50a266c86b771651", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da975c318d2b0f2d8f0c6feb50a266c86b771651/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2f0478de72e41b91e2bb493f060b74d134e82d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2f0478de72e41b91e2bb493f060b74d134e82d9", "html_url": "https://github.com/rust-lang/rust/commit/f2f0478de72e41b91e2bb493f060b74d134e82d9"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "c25d6c6bb5c1a97a28160db22b6c92fb7f11c2f8", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da975c318d2b0f2d8f0c6feb50a266c86b771651/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da975c318d2b0f2d8f0c6feb50a266c86b771651/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=da975c318d2b0f2d8f0c6feb50a266c86b771651", "patch": "@@ -275,9 +275,9 @@ rustc_queries! {\n \n         /// To avoid cycles within the predicates of a single item we compute\n         /// per-type-parameter predicates for resolving `T::AssocTy`.\n-        query type_param_predicates(key: (DefId, DefId)) -> ty::GenericPredicates<'tcx> {\n+        query type_param_predicates(key: (DefId, LocalDefId)) -> ty::GenericPredicates<'tcx> {\n             desc { |tcx| \"computing the bounds for type parameter `{}`\", {\n-                let id = tcx.hir().as_local_hir_id(key.1.expect_local());\n+                let id = tcx.hir().as_local_hir_id(key.1);\n                 tcx.hir().ty_param_name(id)\n             }}\n         }"}, {"sha": "7354e89001cec7ba4da433ea67bee2d33dafc663", "filename": "src/librustc_middle/ty/query/keys.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/da975c318d2b0f2d8f0c6feb50a266c86b771651/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da975c318d2b0f2d8f0c6feb50a266c86b771651/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs?ref=da975c318d2b0f2d8f0c6feb50a266c86b771651", "patch": "@@ -117,6 +117,17 @@ impl Key for (DefId, DefId) {\n     }\n }\n \n+impl Key for (DefId, LocalDefId) {\n+    type CacheSelector = DefaultCacheSelector;\n+\n+    fn query_crate(&self) -> CrateNum {\n+        self.0.krate\n+    }\n+    fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n+        self.1.default_span(tcx)\n+    }\n+}\n+\n impl Key for (CrateNum, DefId) {\n     type CacheSelector = DefaultCacheSelector;\n "}, {"sha": "9f70a0fbc246274c3e008ba9245cc07afa921a39", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da975c318d2b0f2d8f0c6feb50a266c86b771651/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da975c318d2b0f2d8f0c6feb50a266c86b771651/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=da975c318d2b0f2d8f0c6feb50a266c86b771651", "patch": "@@ -295,7 +295,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n \n     fn get_type_parameter_bounds(&self, span: Span, def_id: DefId) -> ty::GenericPredicates<'tcx> {\n-        self.tcx.at(span).type_param_predicates((self.item_def_id, def_id))\n+        self.tcx.at(span).type_param_predicates((self.item_def_id, def_id.expect_local()))\n     }\n \n     fn re_infer(&self, _: Option<&ty::GenericParamDef>, _: Span) -> Option<ty::Region<'tcx>> {\n@@ -478,19 +478,19 @@ fn get_new_lifetime_name<'tcx>(\n /// `X: Foo` where `X` is the type parameter `def_id`.\n fn type_param_predicates(\n     tcx: TyCtxt<'_>,\n-    (item_def_id, def_id): (DefId, DefId),\n+    (item_def_id, def_id): (DefId, LocalDefId),\n ) -> ty::GenericPredicates<'_> {\n     use rustc_hir::*;\n \n     // In the AST, bounds can derive from two places. Either\n     // written inline like `<T: Foo>` or in a where-clause like\n     // `where T: Foo`.\n \n-    let param_id = tcx.hir().as_local_hir_id(def_id.expect_local());\n+    let param_id = tcx.hir().as_local_hir_id(def_id);\n     let param_owner = tcx.hir().ty_param_owner(param_id);\n     let param_owner_def_id = tcx.hir().local_def_id(param_owner);\n     let generics = tcx.generics_of(param_owner_def_id);\n-    let index = generics.param_def_id_to_index[&def_id];\n+    let index = generics.param_def_id_to_index[&def_id.to_def_id()];\n     let ty = tcx.mk_ty_param(index, tcx.hir().ty_param_name(param_id));\n \n     // Don't look for bounds where the type parameter isn't in scope.\n@@ -503,7 +503,7 @@ fn type_param_predicates(\n     let mut result = parent\n         .map(|parent| {\n             let icx = ItemCtxt::new(tcx, parent);\n-            icx.get_type_parameter_bounds(DUMMY_SP, def_id)\n+            icx.get_type_parameter_bounds(DUMMY_SP, def_id.to_def_id())\n         })\n         .unwrap_or_default();\n     let mut extend = None;"}]}