{"sha": "aed0cdbfd21984b144d685131e0070cfa811fb49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZDBjZGJmZDIxOTg0YjE0NGQ2ODUxMzFlMDA3MGNmYTgxMWZiNDk=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-16T17:48:54Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-17T00:14:16Z"}, "message": "definitions: Don't allocate DefIds for inlined HIR", "tree": {"sha": "2cede93d9d183d12e2f6475daab38b731ed05aa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cede93d9d183d12e2f6475daab38b731ed05aa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aed0cdbfd21984b144d685131e0070cfa811fb49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aed0cdbfd21984b144d685131e0070cfa811fb49", "html_url": "https://github.com/rust-lang/rust/commit/aed0cdbfd21984b144d685131e0070cfa811fb49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aed0cdbfd21984b144d685131e0070cfa811fb49/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e34a8e4223a744bcc4fb2d77c06fb6c183dcc26", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e34a8e4223a744bcc4fb2d77c06fb6c183dcc26", "html_url": "https://github.com/rust-lang/rust/commit/8e34a8e4223a744bcc4fb2d77c06fb6c183dcc26"}], "stats": {"total": 115, "additions": 6, "deletions": 109}, "files": [{"sha": "45988886a608a30ff7ede1d35d39ca5096d63270", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aed0cdbfd21984b144d685131e0070cfa811fb49/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed0cdbfd21984b144d685131e0070cfa811fb49/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=aed0cdbfd21984b144d685131e0070cfa811fb49", "patch": "@@ -11,7 +11,6 @@\n use super::*;\n \n use hir::intravisit::{Visitor, NestedVisitorMap};\n-use hir::def_id::DefId;\n use middle::cstore::InlinedItem;\n use std::iter::repeat;\n use syntax::ast::{NodeId, CRATE_NODE_ID};\n@@ -47,8 +46,6 @@ impl<'ast> NodeCollector<'ast> {\n     pub fn extend(krate: &'ast Crate,\n                   parent: &'ast InlinedItem,\n                   parent_node: NodeId,\n-                  parent_def_path: DefPath,\n-                  parent_def_id: DefId,\n                   map: Vec<MapEntry<'ast>>)\n                   -> NodeCollector<'ast> {\n         let mut collector = NodeCollector {\n@@ -58,7 +55,6 @@ impl<'ast> NodeCollector<'ast> {\n             ignore_nested_items: true\n         };\n \n-        assert_eq!(parent_def_path.krate, parent_def_id.krate);\n         collector.insert_entry(parent_node, RootInlinedParent(parent));\n \n         collector"}, {"sha": "8c303a96b0ced48da9da5be8e509ac8635354ddb", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aed0cdbfd21984b144d685131e0070cfa811fb49/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed0cdbfd21984b144d685131e0070cfa811fb49/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=aed0cdbfd21984b144d685131e0070cfa811fb49", "patch": "@@ -12,7 +12,7 @@ use hir::map::definitions::*;\n \n use hir;\n use hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use hir::def_id::{CRATE_DEF_INDEX, DefId, DefIndex};\n+use hir::def_id::{CRATE_DEF_INDEX, DefIndex};\n \n use middle::cstore::InlinedItem;\n \n@@ -47,25 +47,6 @@ impl<'a> DefCollector<'a> {\n         }\n     }\n \n-    pub fn extend(parent_node: NodeId,\n-                  parent_def_path: DefPath,\n-                  parent_def_id: DefId,\n-                  definitions: &'a mut Definitions)\n-                  -> Self {\n-        let mut collector = DefCollector::new(definitions);\n-\n-        assert_eq!(parent_def_path.krate, parent_def_id.krate);\n-        let root_path = Box::new(InlinedRootPath {\n-            data: parent_def_path.data,\n-            def_id: parent_def_id,\n-        });\n-\n-        let def = collector.create_def(parent_node, DefPathData::InlinedRoot(root_path));\n-        collector.parent_def = Some(def);\n-\n-        collector\n-    }\n-\n     pub fn collect_root(&mut self) {\n         let root = self.create_def_with_parent(None, CRATE_NODE_ID, DefPathData::CrateRoot);\n         assert_eq!(root, CRATE_DEF_INDEX);"}, {"sha": "d90a9ef7d80d3237739ffb964a5d96538b0a867e", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 3, "deletions": 54, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/aed0cdbfd21984b144d685131e0070cfa811fb49/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed0cdbfd21984b144d685131e0070cfa811fb49/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=aed0cdbfd21984b144d685131e0070cfa811fb49", "patch": "@@ -57,15 +57,6 @@ impl DefPathTable {\n     pub fn contains_key(&self, key: &DefKey) -> bool {\n         self.key_to_index.contains_key(key)\n     }\n-\n-    /// Returns the path from the crate root to `index`. The root\n-    /// nodes are not included in the path (i.e., this will be an\n-    /// empty vector for the crate root). For an inlined item, this\n-    /// will be the path of the item in the external crate (but the\n-    /// path will begin with the path to the external crate).\n-    pub fn def_path(&self, index: DefIndex) -> DefPath {\n-        DefPath::make(LOCAL_CRATE, index, |p| self.def_key(p))\n-    }\n }\n \n \n@@ -136,12 +127,11 @@ impl DefPath {\n         self.krate == LOCAL_CRATE\n     }\n \n-    pub fn make<FN>(start_krate: CrateNum,\n+    pub fn make<FN>(krate: CrateNum,\n                     start_index: DefIndex,\n                     mut get_key: FN) -> DefPath\n         where FN: FnMut(DefIndex) -> DefKey\n     {\n-        let mut krate = start_krate;\n         let mut data = vec![];\n         let mut index = Some(start_index);\n         loop {\n@@ -154,13 +144,6 @@ impl DefPath {\n                     assert!(key.parent.is_none());\n                     break;\n                 }\n-                DefPathData::InlinedRoot(ref p) => {\n-                    assert!(key.parent.is_none());\n-                    assert!(!p.def_id.is_local());\n-                    data.extend(p.data.iter().cloned().rev());\n-                    krate = p.def_id.krate;\n-                    break;\n-                }\n                 _ => {\n                     data.push(key.disambiguated_data);\n                     index = key.parent;\n@@ -203,41 +186,14 @@ impl DefPath {\n     }\n }\n \n-/// Root of an inlined item. We track the `DefPath` of the item within\n-/// the original crate but also its def-id. This is kind of an\n-/// augmented version of a `DefPath` that includes a `DefId`. This is\n-/// all sort of ugly but the hope is that inlined items will be going\n-/// away soon anyway.\n-///\n-/// Some of the constraints that led to the current approach:\n-///\n-/// - I don't want to have a `DefId` in the main `DefPath` because\n-///   that gets serialized for incr. comp., and when reloaded the\n-///   `DefId` is no longer valid. I'd rather maintain the invariant\n-///   that every `DefId` is valid, and a potentially outdated `DefId` is\n-///   represented as a `DefPath`.\n-///   - (We don't serialize def-paths from inlined items, so it's ok to have one here.)\n-/// - We need to be able to extract the def-id from inline items to\n-///   make the symbol name. In theory we could retrace it from the\n-///   data, but the metadata doesn't have the required indices, and I\n-///   don't want to write the code to create one just for this.\n-/// - It may be that we don't actually need `data` at all. We'll have\n-///   to see about that.\n-#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n-pub struct InlinedRootPath {\n-    pub data: Vec<DisambiguatedDefPathData>,\n-    pub def_id: DefId,\n-}\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum DefPathData {\n     // Root: these should only be used for the root nodes, because\n     // they are treated specially by the `def_path` function.\n     /// The crate root (marker)\n     CrateRoot,\n-    /// An inlined root\n-    InlinedRoot(Box<InlinedRootPath>),\n-\n+    \n     // Catch-all for random DefId things like DUMMY_NODE_ID\n     Misc,\n \n@@ -345,10 +301,7 @@ impl Definitions {\n                 data,\n                 self.table.def_key(self.node_to_def_index[&node_id]));\n \n-        assert!(parent.is_some() ^ match data {\n-            DefPathData::CrateRoot | DefPathData::InlinedRoot(_) => true,\n-            _ => false,\n-        });\n+        assert!(parent.is_some() ^ (data == DefPathData::CrateRoot));\n \n         // Find a unique DefKey. This basically means incrementing the disambiguator\n         // until we get no match.\n@@ -393,7 +346,6 @@ impl DefPathData {\n \n             Impl |\n             CrateRoot |\n-            InlinedRoot(_) |\n             Misc |\n             ClosureExpr |\n             StructCtor |\n@@ -420,9 +372,6 @@ impl DefPathData {\n             // note that this does not show up in user printouts\n             CrateRoot => \"{{root}}\",\n \n-            // note that this does not show up in user printouts\n-            InlinedRoot(_) => \"{{inlined-root}}\",\n-\n             Impl => \"{{impl}}\",\n             Misc => \"{{?}}\",\n             ClosureExpr => \"{{closure}}\","}, {"sha": "569d697f374a197e1cde48d97813369840bbaf1e", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aed0cdbfd21984b144d685131e0070cfa811fb49/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed0cdbfd21984b144d685131e0070cfa811fb49/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=aed0cdbfd21984b144d685131e0070cfa811fb49", "patch": "@@ -13,7 +13,7 @@ use self::MapEntry::*;\n use self::collector::NodeCollector;\n pub use self::def_collector::{DefCollector, MacroInvocationData};\n pub use self::definitions::{Definitions, DefKey, DefPath, DefPathData,\n-                            DisambiguatedDefPathData, InlinedRootPath};\n+                            DisambiguatedDefPathData};\n \n use dep_graph::{DepGraph, DepNode};\n \n@@ -945,27 +945,16 @@ pub fn map_crate<'ast>(forest: &'ast mut Forest,\n /// Used for items loaded from external crate that are being inlined into this\n /// crate.\n pub fn map_decoded_item<'ast>(map: &Map<'ast>,\n-                              parent_def_path: DefPath,\n-                              parent_def_id: DefId,\n                               ii: InlinedItem,\n                               ii_parent_id: NodeId)\n                               -> &'ast InlinedItem {\n     let _ignore = map.forest.dep_graph.in_ignore();\n \n     let ii = map.forest.inlined_items.alloc(ii);\n \n-    let defs = &mut *map.definitions.borrow_mut();\n-    let mut def_collector = DefCollector::extend(ii_parent_id,\n-                                                 parent_def_path.clone(),\n-                                                 parent_def_id,\n-                                                 defs);\n-    def_collector.walk_item(ii, map.krate());\n-\n     let mut collector = NodeCollector::extend(map.krate(),\n                                               ii,\n                                               ii_parent_id,\n-                                              parent_def_path,\n-                                              parent_def_id,\n                                               mem::replace(&mut *map.map.borrow_mut(), vec![]));\n     ii.visit(&mut collector);\n     *map.map.borrow_mut() = collector.map;"}, {"sha": "0e4c14029e9b9860b3cc86942ab023c7c0ad96d2", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aed0cdbfd21984b144d685131e0070cfa811fb49/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed0cdbfd21984b144d685131e0070cfa811fb49/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=aed0cdbfd21984b144d685131e0070cfa811fb49", "patch": "@@ -160,11 +160,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 self.push_krate_path(buffer, def_id.krate);\n             }\n \n-            DefPathData::InlinedRoot(ref root_path) => {\n-                assert!(key.parent.is_none());\n-                self.push_item_path(buffer, root_path.def_id);\n-            }\n-\n             DefPathData::Impl => {\n                 self.push_impl_path(buffer, def_id);\n             }"}, {"sha": "926c44824ce482393083697b4569d9a8dbbeee16", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aed0cdbfd21984b144d685131e0070cfa811fb49/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed0cdbfd21984b144d685131e0070cfa811fb49/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=aed0cdbfd21984b144d685131e0070cfa811fb49", "patch": "@@ -102,8 +102,6 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for SideTableEncodingIdVisitor<'a, 'b, 'tcx> {\n /// ast-map.\n pub fn decode_inlined_item<'a, 'tcx>(cdata: &CrateMetadata,\n                                      tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                     parent_def_path: ast_map::DefPath,\n-                                     parent_did: DefId,\n                                      ast: Ast<'tcx>,\n                                      orig_did: DefId)\n                                      -> &'tcx InlinedItem {\n@@ -120,17 +118,9 @@ pub fn decode_inlined_item<'a, 'tcx>(cdata: &CrateMetadata,\n     let ii = ast.item.decode((cdata, tcx, id_ranges));\n     let item_node_id = tcx.sess.next_node_id();\n     let ii = ast_map::map_decoded_item(&tcx.map,\n-                                       parent_def_path,\n-                                       parent_did,\n                                        ii,\n                                        item_node_id);\n \n-    let inlined_did = tcx.map.local_def_id(item_node_id);\n-    let ty = tcx.item_type(orig_did);\n-    let generics = tcx.item_generics(orig_did);\n-    tcx.item_types.borrow_mut().insert(inlined_did, ty);\n-    tcx.generics.borrow_mut().insert(inlined_did, generics);\n-\n     for (id, entry) in ast.side_tables.decode((cdata, tcx, id_ranges)) {\n         match entry {\n             TableEntry::TypeRelativeDef(def) => {"}, {"sha": "d487d2e6da679547f4738d9482a88bd04fbee0e9", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aed0cdbfd21984b144d685131e0070cfa811fb49/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aed0cdbfd21984b144d685131e0070cfa811fb49/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=aed0cdbfd21984b144d685131e0070cfa811fb49", "patch": "@@ -839,12 +839,9 @@ impl<'a, 'tcx> CrateMetadata {\n         if self.is_proc_macro(id) { return None; }\n         let item_doc = self.entry(id);\n         let item_did = self.local_def_id(id);\n-        let parent_def_id = self.local_def_id(self.def_key(id).parent.unwrap());\n-        let mut parent_def_path = self.def_path(id).unwrap();\n-        parent_def_path.data.pop();\n         item_doc.ast.map(|ast| {\n             let ast = ast.decode(self);\n-            decode_inlined_item(self, tcx, parent_def_path, parent_def_id, ast, item_did)\n+            decode_inlined_item(self, tcx, ast, item_did)\n         })\n     }\n "}]}