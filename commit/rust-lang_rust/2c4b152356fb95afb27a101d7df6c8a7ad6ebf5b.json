{"sha": "2c4b152356fb95afb27a101d7df6c8a7ad6ebf5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNGIxNTIzNTZmYjk1YWZiMjdhMTAxZDdkZjZjOGE3YWQ2ZWJmNWI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-05-13T19:54:40Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-05-13T19:54:40Z"}, "message": "Add \u201cExamples\u201d section header in f32/f64 doc comments.\n\nThis is recommend by [RFC 0505] and as far as I know, the only primitive\ntypes without this heading.\n\n[RFC 0505]: https://github.com/rust-lang/rfcs/blob/c892139be692586e0846fbf934be6fceec17f329/text/0505-api-comment-conventions.md#using-markdown", "tree": {"sha": "9d3b2bd7b403ea5a89325898cbbd22164f9ac729", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d3b2bd7b403ea5a89325898cbbd22164f9ac729"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c4b152356fb95afb27a101d7df6c8a7ad6ebf5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c4b152356fb95afb27a101d7df6c8a7ad6ebf5b", "html_url": "https://github.com/rust-lang/rust/commit/2c4b152356fb95afb27a101d7df6c8a7ad6ebf5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c4b152356fb95afb27a101d7df6c8a7ad6ebf5b/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fae1537462bb10fd17d07816efc17cfe4786806", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fae1537462bb10fd17d07816efc17cfe4786806", "html_url": "https://github.com/rust-lang/rust/commit/9fae1537462bb10fd17d07816efc17cfe4786806"}], "stats": {"total": 152, "additions": 152, "deletions": 0}, "files": [{"sha": "7314d32b0206afaf21f55ca3a4cc925a0bf6bd2a", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/2c4b152356fb95afb27a101d7df6c8a7ad6ebf5b/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4b152356fb95afb27a101d7df6c8a7ad6ebf5b/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=2c4b152356fb95afb27a101d7df6c8a7ad6ebf5b", "patch": "@@ -49,6 +49,8 @@ impl f32 {\n \n     /// Returns the largest integer less than or equal to a number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let f = 3.99_f32;\n     /// let g = 3.0_f32;\n@@ -80,6 +82,8 @@ impl f32 {\n \n     /// Returns the smallest integer greater than or equal to a number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let f = 3.01_f32;\n     /// let g = 4.0_f32;\n@@ -100,6 +104,8 @@ impl f32 {\n     /// Returns the nearest integer to a number. Round half-way cases away from\n     /// `0.0`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let f = 3.3_f32;\n     /// let g = -3.3_f32;\n@@ -115,6 +121,8 @@ impl f32 {\n \n     /// Returns the integer part of a number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let f = 3.3_f32;\n     /// let g = -3.7_f32;\n@@ -130,6 +138,8 @@ impl f32 {\n \n     /// Returns the fractional part of a number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -148,6 +158,8 @@ impl f32 {\n     /// Computes the absolute value of `self`. Returns `NAN` if the\n     /// number is `NAN`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -174,6 +186,8 @@ impl f32 {\n     /// - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n     /// - `NAN` if the number is `NAN`\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -200,6 +214,8 @@ impl f32 {\n     /// Using `mul_add` can be more performant than an unfused multiply-add if\n     /// the target architecture has a dedicated `fma` CPU instruction.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -225,6 +241,8 @@ impl f32 {\n     /// In other words, the result is `self / rhs` rounded to the integer `n`\n     /// such that `self >= n * rhs`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// #![feature(euclidean_division)]\n     /// let a: f32 = 7.0;\n@@ -248,6 +266,8 @@ impl f32 {\n     ///\n     /// In particular, the result `n` satisfies `0 <= n < rhs.abs()`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// #![feature(euclidean_division)]\n     /// let a: f32 = 7.0;\n@@ -273,6 +293,8 @@ impl f32 {\n     ///\n     /// Using this function is generally faster than using `powf`\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -289,6 +311,8 @@ impl f32 {\n \n     /// Raises a number to a floating point power.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -311,6 +335,8 @@ impl f32 {\n     ///\n     /// Returns NaN if `self` is a negative number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -334,6 +360,8 @@ impl f32 {\n \n     /// Returns `e^(self)`, (the exponential function).\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -358,6 +386,8 @@ impl f32 {\n \n     /// Returns `2^(self)`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -376,6 +406,8 @@ impl f32 {\n \n     /// Returns the natural logarithm of the number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -404,6 +436,8 @@ impl f32 {\n     /// `self.log2()` can produce more accurate results for base 2, and\n     /// `self.log10()` can produce more accurate results for base 10.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -420,6 +454,8 @@ impl f32 {\n \n     /// Returns the base 2 logarithm of the number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -441,6 +477,8 @@ impl f32 {\n \n     /// Returns the base 10 logarithm of the number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -466,6 +504,8 @@ impl f32 {\n     /// * If `self <= other`: `0:0`\n     /// * Else: `self - other`\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -493,6 +533,8 @@ impl f32 {\n \n     /// Takes the cubic root of a number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -512,6 +554,8 @@ impl f32 {\n     /// Calculates the length of the hypotenuse of a right-angle triangle given\n     /// legs of length `x` and `y`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -531,6 +575,8 @@ impl f32 {\n \n     /// Computes the sine of a number (in radians).\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -552,6 +598,8 @@ impl f32 {\n \n     /// Computes the cosine of a number (in radians).\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -573,6 +621,8 @@ impl f32 {\n \n     /// Computes the tangent of a number (in radians).\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -591,6 +641,8 @@ impl f32 {\n     /// the range [-pi/2, pi/2] or NaN if the number is outside the range\n     /// [-1, 1].\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -611,6 +663,8 @@ impl f32 {\n     /// the range [0, pi] or NaN if the number is outside the range\n     /// [-1, 1].\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -630,6 +684,8 @@ impl f32 {\n     /// Computes the arctangent of a number. Return value is in radians in the\n     /// range [-pi/2, pi/2];\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -653,6 +709,8 @@ impl f32 {\n     /// * `y >= 0`: `arctan(y/x) + pi` -> `(pi/2, pi]`\n     /// * `y < 0`: `arctan(y/x) - pi` -> `(-pi, -pi/2)`\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -682,6 +740,8 @@ impl f32 {\n     /// Simultaneously computes the sine and cosine of the number, `x`. Returns\n     /// `(sin(x), cos(x))`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -703,6 +763,8 @@ impl f32 {\n     /// Returns `e^(self) - 1` in a way that is accurate even if the\n     /// number is close to zero.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -722,6 +784,8 @@ impl f32 {\n     /// Returns `ln(1+n)` (natural logarithm) more accurately than if\n     /// the operations were performed separately.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -740,6 +804,8 @@ impl f32 {\n \n     /// Hyperbolic sine function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -761,6 +827,8 @@ impl f32 {\n \n     /// Hyperbolic cosine function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -782,6 +850,8 @@ impl f32 {\n \n     /// Hyperbolic tangent function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -803,6 +873,8 @@ impl f32 {\n \n     /// Inverse hyperbolic sine function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -825,6 +897,8 @@ impl f32 {\n \n     /// Inverse hyperbolic cosine function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///\n@@ -846,6 +920,8 @@ impl f32 {\n \n     /// Inverse hyperbolic tangent function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f32;\n     ///"}, {"sha": "75edba8979f9a1993515bf2c492381e61a5d13e5", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/2c4b152356fb95afb27a101d7df6c8a7ad6ebf5b/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c4b152356fb95afb27a101d7df6c8a7ad6ebf5b/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=2c4b152356fb95afb27a101d7df6c8a7ad6ebf5b", "patch": "@@ -49,6 +49,8 @@ impl f64 {\n \n     /// Returns the largest integer less than or equal to a number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let f = 3.99_f64;\n     /// let g = 3.0_f64;\n@@ -64,6 +66,8 @@ impl f64 {\n \n     /// Returns the smallest integer greater than or equal to a number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let f = 3.01_f64;\n     /// let g = 4.0_f64;\n@@ -80,6 +84,8 @@ impl f64 {\n     /// Returns the nearest integer to a number. Round half-way cases away from\n     /// `0.0`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let f = 3.3_f64;\n     /// let g = -3.3_f64;\n@@ -95,6 +101,8 @@ impl f64 {\n \n     /// Returns the integer part of a number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let f = 3.3_f64;\n     /// let g = -3.7_f64;\n@@ -110,6 +118,8 @@ impl f64 {\n \n     /// Returns the fractional part of a number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let x = 3.5_f64;\n     /// let y = -3.5_f64;\n@@ -126,6 +136,8 @@ impl f64 {\n     /// Computes the absolute value of `self`. Returns `NAN` if the\n     /// number is `NAN`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -152,6 +164,8 @@ impl f64 {\n     /// - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n     /// - `NAN` if the number is `NAN`\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -178,6 +192,8 @@ impl f64 {\n     /// Using `mul_add` can be more performant than an unfused multiply-add if\n     /// the target architecture has a dedicated `fma` CPU instruction.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let m = 10.0_f64;\n     /// let x = 4.0_f64;\n@@ -201,6 +217,8 @@ impl f64 {\n     /// In other words, the result is `self / rhs` rounded to the integer `n`\n     /// such that `self >= n * rhs`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// #![feature(euclidean_division)]\n     /// let a: f64 = 7.0;\n@@ -224,6 +242,8 @@ impl f64 {\n     ///\n     /// In particular, the result `n` satisfies `0 <= n < rhs.abs()`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// #![feature(euclidean_division)]\n     /// let a: f64 = 7.0;\n@@ -248,6 +268,8 @@ impl f64 {\n     ///\n     /// Using this function is generally faster than using `powf`\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let x = 2.0_f64;\n     /// let abs_difference = (x.powi(2) - x*x).abs();\n@@ -262,6 +284,8 @@ impl f64 {\n \n     /// Raises a number to a floating point power.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let x = 2.0_f64;\n     /// let abs_difference = (x.powf(2.0) - x*x).abs();\n@@ -278,6 +302,8 @@ impl f64 {\n     ///\n     /// Returns NaN if `self` is a negative number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let positive = 4.0_f64;\n     /// let negative = -4.0_f64;\n@@ -299,6 +325,8 @@ impl f64 {\n \n     /// Returns `e^(self)`, (the exponential function).\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let one = 1.0_f64;\n     /// // e^1\n@@ -317,6 +345,8 @@ impl f64 {\n \n     /// Returns `2^(self)`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let f = 2.0_f64;\n     ///\n@@ -333,6 +363,8 @@ impl f64 {\n \n     /// Returns the natural logarithm of the number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let one = 1.0_f64;\n     /// // e^1\n@@ -355,6 +387,8 @@ impl f64 {\n     /// `self.log2()` can produce more accurate results for base 2, and\n     /// `self.log10()` can produce more accurate results for base 10.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let five = 5.0_f64;\n     ///\n@@ -369,6 +403,8 @@ impl f64 {\n \n     /// Returns the base 2 logarithm of the number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let two = 2.0_f64;\n     ///\n@@ -390,6 +426,8 @@ impl f64 {\n \n     /// Returns the base 10 logarithm of the number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let ten = 10.0_f64;\n     ///\n@@ -409,6 +447,8 @@ impl f64 {\n     /// * If `self <= other`: `0:0`\n     /// * Else: `self - other`\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let x = 3.0_f64;\n     /// let y = -3.0_f64;\n@@ -434,6 +474,8 @@ impl f64 {\n \n     /// Takes the cubic root of a number.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let x = 8.0_f64;\n     ///\n@@ -451,6 +493,8 @@ impl f64 {\n     /// Calculates the length of the hypotenuse of a right-angle triangle given\n     /// legs of length `x` and `y`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let x = 2.0_f64;\n     /// let y = 3.0_f64;\n@@ -468,6 +512,8 @@ impl f64 {\n \n     /// Computes the sine of a number (in radians).\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -485,6 +531,8 @@ impl f64 {\n \n     /// Computes the cosine of a number (in radians).\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -502,6 +550,8 @@ impl f64 {\n \n     /// Computes the tangent of a number (in radians).\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -520,6 +570,8 @@ impl f64 {\n     /// the range [-pi/2, pi/2] or NaN if the number is outside the range\n     /// [-1, 1].\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -540,6 +592,8 @@ impl f64 {\n     /// the range [0, pi] or NaN if the number is outside the range\n     /// [-1, 1].\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -559,6 +613,8 @@ impl f64 {\n     /// Computes the arctangent of a number. Return value is in radians in the\n     /// range [-pi/2, pi/2];\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let f = 1.0_f64;\n     ///\n@@ -580,6 +636,8 @@ impl f64 {\n     /// * `y >= 0`: `arctan(y/x) + pi` -> `(pi/2, pi]`\n     /// * `y < 0`: `arctan(y/x) - pi` -> `(-pi, -pi/2)`\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -609,6 +667,8 @@ impl f64 {\n     /// Simultaneously computes the sine and cosine of the number, `x`. Returns\n     /// `(sin(x), cos(x))`.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -630,6 +690,8 @@ impl f64 {\n     /// Returns `e^(self) - 1` in a way that is accurate even if the\n     /// number is close to zero.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let x = 7.0_f64;\n     ///\n@@ -647,6 +709,8 @@ impl f64 {\n     /// Returns `ln(1+n)` (natural logarithm) more accurately than if\n     /// the operations were performed separately.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -665,6 +729,8 @@ impl f64 {\n \n     /// Hyperbolic sine function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -686,6 +752,8 @@ impl f64 {\n \n     /// Hyperbolic cosine function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -707,6 +775,8 @@ impl f64 {\n \n     /// Hyperbolic tangent function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///\n@@ -728,6 +798,8 @@ impl f64 {\n \n     /// Inverse hyperbolic sine function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let x = 1.0_f64;\n     /// let f = x.sinh().asinh();\n@@ -748,6 +820,8 @@ impl f64 {\n \n     /// Inverse hyperbolic cosine function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// let x = 1.0_f64;\n     /// let f = x.cosh().acosh();\n@@ -767,6 +841,8 @@ impl f64 {\n \n     /// Inverse hyperbolic tangent function.\n     ///\n+    /// # Examples\n+    ///\n     /// ```\n     /// use std::f64;\n     ///"}]}