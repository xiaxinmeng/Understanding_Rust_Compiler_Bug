{"sha": "18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ODQwYjA3MTlhYTc2NmExYmM0OWVhMmViNWRjMmU0Y2RlN2RhM2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-24T13:19:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-24T13:19:17Z"}, "message": "Auto merge of #87296 - Aaron1011:inert-warn, r=petrochenkov\n\nWarn on inert attributes used on bang macro invocation\n\nThese attributes are currently discarded.\nThis may change in the future (see #63221), but for now,\nplacing inert attributes on a macro invocation does nothing,\nso we should warn users about it.\n\nTechnically, it's possible for there to be attribute macro\non the same macro invocation (or at a higher scope), which\ninspects the inert attribute. For example:\n\n```rust\n#[look_for_inline_attr]\n#[inline]\nmy_macro!()\n\n#[look_for_nested_inline]\nmod foo { #[inline] my_macro!() }\n```\n\nHowever, this would be a very strange thing to do.\nAnyone running into this can manually suppress the warning.", "tree": {"sha": "5a2a6030e2f632bb5e06d57e6475c7b7074e3988", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a2a6030e2f632bb5e06d57e6475c7b7074e3988"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f", "html_url": "https://github.com/rust-lang/rust/commit/18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9b95f92c8af07a24a870e5f6117aa5dfcee5f17", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9b95f92c8af07a24a870e5f6117aa5dfcee5f17", "html_url": "https://github.com/rust-lang/rust/commit/f9b95f92c8af07a24a870e5f6117aa5dfcee5f17"}, {"sha": "b41672eba8b0f06d2803cbd3bc2bd9ca7a8f2465", "url": "https://api.github.com/repos/rust-lang/rust/commits/b41672eba8b0f06d2803cbd3bc2bd9ca7a8f2465", "html_url": "https://github.com/rust-lang/rust/commit/b41672eba8b0f06d2803cbd3bc2bd9ca7a8f2465"}], "stats": {"total": 139, "additions": 115, "deletions": 24}, "files": [{"sha": "03d2105e5cca52a1253120bd5e4fa82884a81ca9", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f", "patch": "@@ -12,7 +12,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n-use rustc_ast::{AstLike, Block, Inline, ItemKind, Local, MacArgs};\n+use rustc_ast::{AstLike, Block, Inline, ItemKind, Local, MacArgs, MacCall};\n use rustc_ast::{MacCallStmt, MacStmtStyle, MetaItemKind, ModKind, NestedMetaItem};\n use rustc_ast::{NodeId, PatKind, Path, StmtKind, Unsafe};\n use rustc_ast_pretty::pprust;\n@@ -26,7 +26,7 @@ use rustc_parse::parser::{\n     AttemptLocalParseRecovery, ForceCollect, Parser, RecoverColon, RecoverComma,\n };\n use rustc_parse::validate_attr;\n-use rustc_session::lint::builtin::UNUSED_DOC_COMMENTS;\n+use rustc_session::lint::builtin::{UNUSED_ATTRIBUTES, UNUSED_DOC_COMMENTS};\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::parse::{feature_err, ParseSess};\n use rustc_session::Limit;\n@@ -1070,7 +1070,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n \n     // Detect use of feature-gated or invalid attributes on macro invocations\n     // since they will not be detected after macro expansion.\n-    fn check_attributes(&mut self, attrs: &[ast::Attribute]) {\n+    fn check_attributes(&mut self, attrs: &[ast::Attribute], call: &MacCall) {\n         let features = self.cx.ecfg.features.unwrap();\n         let mut attrs = attrs.iter().peekable();\n         let mut span: Option<Span> = None;\n@@ -1085,14 +1085,31 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                 continue;\n             }\n \n-            if attr.doc_str().is_some() {\n+            if attr.is_doc_comment() {\n                 self.cx.sess.parse_sess.buffer_lint_with_diagnostic(\n                     &UNUSED_DOC_COMMENTS,\n                     current_span,\n-                    ast::CRATE_NODE_ID,\n+                    self.cx.current_expansion.lint_node_id,\n                     \"unused doc comment\",\n                     BuiltinLintDiagnostics::UnusedDocComment(attr.span),\n                 );\n+            } else if rustc_attr::is_builtin_attr(attr) {\n+                let attr_name = attr.ident().unwrap().name;\n+                // `#[cfg]` and `#[cfg_attr]` are special - they are\n+                // eagerly evaluated.\n+                if attr_name != sym::cfg && attr_name != sym::cfg_attr {\n+                    self.cx.sess.parse_sess.buffer_lint_with_diagnostic(\n+                        &UNUSED_ATTRIBUTES,\n+                        attr.span,\n+                        self.cx.current_expansion.lint_node_id,\n+                        &format!(\"unused attribute `{}`\", attr_name),\n+                        BuiltinLintDiagnostics::UnusedBuiltinAttribute {\n+                            attr_name,\n+                            macro_name: pprust::path_to_string(&call.path),\n+                            invoc_span: call.path.span,\n+                        },\n+                    );\n+                }\n             }\n         }\n     }\n@@ -1152,7 +1169,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             }\n \n             if let ast::ExprKind::MacCall(mac) = expr.kind {\n-                self.check_attributes(&expr.attrs);\n+                self.check_attributes(&expr.attrs, &mac);\n                 self.collect_bang(mac, expr.span, AstFragmentKind::Expr).make_expr().into_inner()\n             } else {\n                 assign_id!(self, &mut expr.id, || {\n@@ -1253,7 +1270,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             }\n \n             if let ast::ExprKind::MacCall(mac) = expr.kind {\n-                self.check_attributes(&expr.attrs);\n+                self.check_attributes(&expr.attrs, &mac);\n                 self.collect_bang(mac, expr.span, AstFragmentKind::OptExpr)\n                     .make_opt_expr()\n                     .map(|expr| expr.into_inner())\n@@ -1296,7 +1313,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n \n         if let StmtKind::MacCall(mac) = stmt.kind {\n             let MacCallStmt { mac, style, attrs, tokens: _ } = mac.into_inner();\n-            self.check_attributes(&attrs);\n+            self.check_attributes(&attrs, &mac);\n             let mut placeholder =\n                 self.collect_bang(mac, stmt.span, AstFragmentKind::Stmts).make_stmts();\n \n@@ -1344,9 +1361,9 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         let span = item.span;\n \n         match item.kind {\n-            ast::ItemKind::MacCall(..) => {\n+            ast::ItemKind::MacCall(ref mac) => {\n+                self.check_attributes(&attrs, &mac);\n                 item.attrs = attrs;\n-                self.check_attributes(&item.attrs);\n                 item.and_then(|item| match item.kind {\n                     ItemKind::MacCall(mac) => {\n                         self.collect_bang(mac, span, AstFragmentKind::Items).make_items()\n@@ -1455,8 +1472,8 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n \n         match item.kind {\n-            ast::AssocItemKind::MacCall(..) => {\n-                self.check_attributes(&item.attrs);\n+            ast::AssocItemKind::MacCall(ref mac) => {\n+                self.check_attributes(&item.attrs, &mac);\n                 item.and_then(|item| match item.kind {\n                     ast::AssocItemKind::MacCall(mac) => self\n                         .collect_bang(mac, item.span, AstFragmentKind::TraitItems)\n@@ -1480,8 +1497,8 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n \n         match item.kind {\n-            ast::AssocItemKind::MacCall(..) => {\n-                self.check_attributes(&item.attrs);\n+            ast::AssocItemKind::MacCall(ref mac) => {\n+                self.check_attributes(&item.attrs, &mac);\n                 item.and_then(|item| match item.kind {\n                     ast::AssocItemKind::MacCall(mac) => self\n                         .collect_bang(mac, item.span, AstFragmentKind::ImplItems)\n@@ -1526,8 +1543,8 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n \n         match foreign_item.kind {\n-            ast::ForeignItemKind::MacCall(..) => {\n-                self.check_attributes(&foreign_item.attrs);\n+            ast::ForeignItemKind::MacCall(ref mac) => {\n+                self.check_attributes(&foreign_item.attrs, &mac);\n                 foreign_item.and_then(|item| match item.kind {\n                     ast::ForeignItemKind::MacCall(mac) => self\n                         .collect_bang(mac, item.span, AstFragmentKind::ForeignItems)"}, {"sha": "31ce77375e53931fff7ef42496f5f0ac2ee28e93", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f", "patch": "@@ -734,6 +734,16 @@ pub trait LintContext: Sized {\n                         Applicability::MachineApplicable,\n                     );\n                 }\n+                BuiltinLintDiagnostics::UnusedBuiltinAttribute {\n+                    attr_name,\n+                    macro_name,\n+                    invoc_span\n+                } => {\n+                    db.span_note(\n+                        invoc_span,\n+                        &format!(\"the built-in attribute `{attr_name}` will be ignored, since it's applied to the macro invocation `{macro_name}`\")\n+                    );\n+                }\n             }\n             // Rewrap `db`, and pass control to the user.\n             decorate(LintDiagnosticBuilder::new(db));"}, {"sha": "1786f1e70343a5d97e724022c8b2cdecd10865af", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f", "patch": "@@ -32,6 +32,7 @@\n #![feature(box_syntax)]\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n+#![feature(format_args_capture)]\n #![feature(iter_order_by)]\n #![feature(iter_zip)]\n #![feature(never_type)]"}, {"sha": "ec17e7a6b0373050226abbcbeaa03595d2d8b36c", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f", "patch": "@@ -296,6 +296,7 @@ pub enum BuiltinLintDiagnostics {\n     DeprecatedMacro(Option<Symbol>, Span),\n     MissingAbi(Span, Abi),\n     UnusedDocComment(Span),\n+    UnusedBuiltinAttribute { attr_name: Symbol, macro_name: String, invoc_span: Span },\n     PatternsInFnsWithoutBody(Span, Ident),\n     LegacyDeriveHelpers(Span),\n     ExternDepSpec(String, ExternDepSpec),"}, {"sha": "dc0bb8ac26593077092b685d4e14aab608c95fa4", "filename": "src/test/ui/lint/inert-attr-macro.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f/src%2Ftest%2Fui%2Flint%2Finert-attr-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f/src%2Ftest%2Fui%2Flint%2Finert-attr-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finert-attr-macro.rs?ref=18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+\n+#![warn(unused)]\n+\n+macro_rules! foo {\n+    () => {}\n+}\n+\n+fn main() {\n+    #[inline] foo!(); //~ WARN unused attribute `inline`\n+\n+    // This does nothing, since `#[allow(warnings)]` is itself\n+    // an inert attribute on a macro call\n+    #[allow(warnings)] #[inline] foo!(); //~ WARN unused attribute `allow`\n+    //~^ WARN unused attribute `inline`\n+\n+    // This does work, since the attribute is on a parent\n+    // of the macro invocation.\n+    #[allow(warnings)] { #[inline] foo!(); }\n+}"}, {"sha": "3b3aa5d0bc04d4011c020d5eab34339c1685ecdb", "filename": "src/test/ui/lint/inert-attr-macro.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f/src%2Ftest%2Fui%2Flint%2Finert-attr-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f/src%2Ftest%2Fui%2Flint%2Finert-attr-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finert-attr-macro.stderr?ref=18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f", "patch": "@@ -0,0 +1,44 @@\n+warning: unused attribute `inline`\n+  --> $DIR/inert-attr-macro.rs:10:5\n+   |\n+LL |     #[inline] foo!();\n+   |     ^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/inert-attr-macro.rs:3:9\n+   |\n+LL | #![warn(unused)]\n+   |         ^^^^^^\n+   = note: `#[warn(unused_attributes)]` implied by `#[warn(unused)]`\n+note: the built-in attribute `inline` will be ignored, since it's applied to the macro invocation `foo`\n+  --> $DIR/inert-attr-macro.rs:10:15\n+   |\n+LL |     #[inline] foo!();\n+   |               ^^^\n+\n+warning: unused attribute `allow`\n+  --> $DIR/inert-attr-macro.rs:14:5\n+   |\n+LL |     #[allow(warnings)] #[inline] foo!();\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+note: the built-in attribute `allow` will be ignored, since it's applied to the macro invocation `foo`\n+  --> $DIR/inert-attr-macro.rs:14:34\n+   |\n+LL |     #[allow(warnings)] #[inline] foo!();\n+   |                                  ^^^\n+\n+warning: unused attribute `inline`\n+  --> $DIR/inert-attr-macro.rs:14:24\n+   |\n+LL |     #[allow(warnings)] #[inline] foo!();\n+   |                        ^^^^^^^^^\n+   |\n+note: the built-in attribute `inline` will be ignored, since it's applied to the macro invocation `foo`\n+  --> $DIR/inert-attr-macro.rs:14:34\n+   |\n+LL |     #[allow(warnings)] #[inline] foo!();\n+   |                                  ^^^\n+\n+warning: 3 warnings emitted\n+"}, {"sha": "2e6064aeb00744f1e1c620fe8212fed9d3f28a04", "filename": "src/test/ui/repr/repr-no-niche.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Frepr-no-niche.rs?ref=18840b0719aa766a1bc49ea2eb5dc2e4cde7da3f", "patch": "@@ -73,8 +73,7 @@ mod enum_inline {\n     // general; this test is relying on that.)\n     two_fifty_six_variant_enum!(Visible2, N8);\n \n-    #[repr(no_niche)]\n-    two_fifty_six_variant_enum!(Cloaked2, N8);\n+    two_fifty_six_variant_enum!(#[repr(no_niche)] Cloaked2, N8);\n }\n \n mod enum_param {\n@@ -96,8 +95,7 @@ mod enum_param {\n     // here as above (assuming `T` is instantiated with `NonZeroU8`).\n     two_fifty_six_variant_enum!(Visible2<T>);\n \n-    #[repr(no_niche)]\n-    two_fifty_six_variant_enum!(Cloaked2<T>);\n+    two_fifty_six_variant_enum!(#[repr(no_niche)] Cloaked2<T>);\n }\n \n fn main() {\n@@ -157,8 +155,8 @@ fn main() {\n }\n \n macro two_fifty_six_variant_enum {\n-    ($name:ident<$param:ident>) => {\n-        #[derive(Debug)]\n+    ($(#[$attr:meta])* $name:ident<$param:ident>) => {\n+        #[derive(Debug)] $(#[$attr])*\n         pub enum $name<$param> {\n             _V00($param, u16), _V01(u16, $param), _V02($param, u16), _V03(u16, $param),\n             _V04($param, u16), _V05(u16, $param), _V06($param, u16), _V07(u16, $param),\n@@ -242,8 +240,8 @@ macro two_fifty_six_variant_enum {\n         }\n     },\n \n-    ($name:ident, $param:ty) => {\n-        #[derive(Debug)]\n+    ($(#[$attr:meta])* $name:ident, $param:ty) => {\n+        #[derive(Debug)] $(#[$attr])*\n         pub enum $name {\n             _V00($param, u16), _V01(u16, $param), _V02($param, u16), _V03(u16, $param),\n             _V04($param, u16), _V05(u16, $param), _V06($param, u16), _V07(u16, $param),"}]}