{"sha": "9376da6f77e8b7ed204ee704b29e96213b69d0f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNzZkYTZmNzdlOGI3ZWQyMDRlZTcwNGIyOWU5NjIxM2I2OWQwZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-17T02:44:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-17T02:44:10Z"}, "message": "Auto merge of #35559 - frewsxcv:slice-iter-as-ref, r=alexcrichton\n\nImplement `AsRef<[T]>` for `std::slice::Iter`.\n\n`AsRef` is designed for conversions that are \"cheap\" (as per\nthe API docs). It is the case that retrieving the underlying\ndata of `std::slice::Iter` is cheap. In my opinion, there's no\nambiguity about what slice data will be returned, otherwise,\nI would be more cautious about implementing `AsRef`.", "tree": {"sha": "5a4db468b06bcd80143506bbcc1597c876aa2a7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a4db468b06bcd80143506bbcc1597c876aa2a7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9376da6f77e8b7ed204ee704b29e96213b69d0f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9376da6f77e8b7ed204ee704b29e96213b69d0f1", "html_url": "https://github.com/rust-lang/rust/commit/9376da6f77e8b7ed204ee704b29e96213b69d0f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9376da6f77e8b7ed204ee704b29e96213b69d0f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bf5fa3269ba32ae21e349ac675bdedcc7e99a66", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bf5fa3269ba32ae21e349ac675bdedcc7e99a66", "html_url": "https://github.com/rust-lang/rust/commit/1bf5fa3269ba32ae21e349ac675bdedcc7e99a66"}, {"sha": "dc22186efb7d6ea5fff2fc1f6d39684ce9633bf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc22186efb7d6ea5fff2fc1f6d39684ce9633bf7", "html_url": "https://github.com/rust-lang/rust/commit/dc22186efb7d6ea5fff2fc1f6d39684ce9633bf7"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "5b341ab62d097dd3de59d4ed5150a93e93df8e2b", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9376da6f77e8b7ed204ee704b29e96213b69d0f1/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9376da6f77e8b7ed204ee704b29e96213b69d0f1/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=9376da6f77e8b7ed204ee704b29e96213b69d0f1", "patch": "@@ -645,6 +645,24 @@ fn test_iter_size_hints() {\n     assert_eq!(xs.iter_mut().size_hint(), (5, Some(5)));\n }\n \n+#[test]\n+fn test_iter_as_slice() {\n+    let xs = [1, 2, 5, 10, 11];\n+    let mut iter = xs.iter();\n+    assert_eq!(iter.as_slice(), &[1, 2, 5, 10, 11]);\n+    iter.next();\n+    assert_eq!(iter.as_slice(), &[2, 5, 10, 11]);\n+}\n+\n+#[test]\n+fn test_iter_as_ref() {\n+    let xs = [1, 2, 5, 10, 11];\n+    let mut iter = xs.iter();\n+    assert_eq!(iter.as_ref(), &[1, 2, 5, 10, 11]);\n+    iter.next();\n+    assert_eq!(iter.as_ref(), &[2, 5, 10, 11]);\n+}\n+\n #[test]\n fn test_iter_clone() {\n     let xs = [1, 2, 5];"}, {"sha": "3a820a14f1214aa8424a0222cf6b3885c6f3163f", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9376da6f77e8b7ed204ee704b29e96213b69d0f1/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9376da6f77e8b7ed204ee704b29e96213b69d0f1/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=9376da6f77e8b7ed204ee704b29e96213b69d0f1", "patch": "@@ -37,6 +37,7 @@ use clone::Clone;\n use cmp::{Ordering, PartialEq, PartialOrd, Eq, Ord};\n use cmp::Ordering::{Less, Equal, Greater};\n use cmp;\n+use convert::AsRef;\n use default::Default;\n use fmt;\n use intrinsics::assume;\n@@ -996,6 +997,13 @@ impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> { Iter { ptr: self.ptr, end: self.end, _marker: self._marker } }\n }\n \n+#[stable(feature = \"slice_iter_as_ref\", since = \"1.12.0\")]\n+impl<'a, T> AsRef<[T]> for Iter<'a, T> {\n+    fn as_ref(&self) -> &[T] {\n+        self.as_slice()\n+    }\n+}\n+\n /// Mutable slice iterator.\n ///\n /// This struct is created by the [`iter_mut`] method on [slices]."}]}