{"sha": "2d3d0b7e934509327a757f467b89f1059a1f45c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkM2QwYjdlOTM0NTA5MzI3YTc1N2Y0NjdiODlmMTA1OWExZjQ1YzE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-17T18:55:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-17T18:55:58Z"}, "message": "Rollup merge of #61885 - scottmcm:slice-iter-len-opt, r=rkruppe,RalfJung\n\nHelp LLVM better optimize slice::Iter(Mut)::len\n\nr? @RalfJung\n\nI've included a codegen test that fails without this change as a demonstration of usefulness.", "tree": {"sha": "9dbf5c86b37a65048800dd2620737ae9df9fe4c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dbf5c86b37a65048800dd2620737ae9df9fe4c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d3d0b7e934509327a757f467b89f1059a1f45c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdB+I/CRBK7hj4Ov3rIwAAdHIIAE7fmWwPMxaPFfZz8m1QSEAD\ncxvKTE7JB6Te0tw35tEilzsZMx9oy03nZfPr69XowVg/pCfdx15fit8mJOO1vJOG\nXLGWfoYyB9gzxivyr2NQ4wa6Didpi6x7gye6x4svXFEBEUBZPKp0oONGPunPhYot\n9Vbc48bhYj3EFh3LUrUOuzW86thQAAk2VDW45ag2a0IACgOuAP96UkmRjr+WIYzC\nIZE8qK3FZj8KlvNrNgaAHs9JSv3k14R3uXF8jhfiSG9poXGMJHWoKtAuV1DE+diE\nReh1TL/IvcCZl+ZhEBoHgN4zC3k+22FfFFCxaH/TRwAFAw3osXodlEjFMXKVnYk=\n=aC23\n-----END PGP SIGNATURE-----\n", "payload": "tree 9dbf5c86b37a65048800dd2620737ae9df9fe4c4\nparent 0800b6ee20bdc903d87bb02fb2bed00480a35007\nparent af0e35e6a6837aba121c873e6f91fff6df61d268\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1560797758 +0200\ncommitter GitHub <noreply@github.com> 1560797758 +0200\n\nRollup merge of #61885 - scottmcm:slice-iter-len-opt, r=rkruppe,RalfJung\n\nHelp LLVM better optimize slice::Iter(Mut)::len\n\nr? @RalfJung\n\nI've included a codegen test that fails without this change as a demonstration of usefulness.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d3d0b7e934509327a757f467b89f1059a1f45c1", "html_url": "https://github.com/rust-lang/rust/commit/2d3d0b7e934509327a757f467b89f1059a1f45c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d3d0b7e934509327a757f467b89f1059a1f45c1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0800b6ee20bdc903d87bb02fb2bed00480a35007", "url": "https://api.github.com/repos/rust-lang/rust/commits/0800b6ee20bdc903d87bb02fb2bed00480a35007", "html_url": "https://github.com/rust-lang/rust/commit/0800b6ee20bdc903d87bb02fb2bed00480a35007"}, {"sha": "af0e35e6a6837aba121c873e6f91fff6df61d268", "url": "https://api.github.com/repos/rust-lang/rust/commits/af0e35e6a6837aba121c873e6f91fff6df61d268", "html_url": "https://github.com/rust-lang/rust/commit/af0e35e6a6837aba121c873e6f91fff6df61d268"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "b30eff8baa9c87347c605d87382bf0848024cd7c", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d3d0b7e934509327a757f467b89f1059a1f45c1/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3d0b7e934509327a757f467b89f1059a1f45c1/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=2d3d0b7e934509327a757f467b89f1059a1f45c1", "patch": "@@ -1607,3 +1607,9 @@ pub fn maxnumf64(x: f64, y: f64) -> f64 {\n     // Identical to the `f32` case.\n     (if x < y || x != x { y } else { x }) * 1.0\n }\n+\n+/// For bootstrapping, implement unchecked_sub as just wrapping_sub.\n+#[cfg(bootstrap)]\n+pub unsafe fn unchecked_sub<T>(x: T, y: T) -> T {\n+    sub_with_overflow(x, y).0\n+}"}, {"sha": "b2376cdf9fa7628f0422b91ec13b835482ca8902", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2d3d0b7e934509327a757f467b89f1059a1f45c1/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3d0b7e934509327a757f467b89f1059a1f45c1/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=2d3d0b7e934509327a757f467b89f1059a1f45c1", "patch": "@@ -25,7 +25,7 @@\n use crate::cmp::Ordering::{self, Less, Equal, Greater};\n use crate::cmp;\n use crate::fmt;\n-use crate::intrinsics::assume;\n+use crate::intrinsics::{assume, exact_div, unchecked_sub};\n use crate::isize;\n use crate::iter::*;\n use crate::ops::{FnMut, Try, self};\n@@ -2998,14 +2998,27 @@ macro_rules! is_empty {\n // unexpected way. (Tested by `codegen/slice-position-bounds-check`.)\n macro_rules! len {\n     ($self: ident) => {{\n+        #![allow(unused_unsafe)] // we're sometimes used within an unsafe block\n+\n         let start = $self.ptr;\n-        let diff = ($self.end as usize).wrapping_sub(start as usize);\n         let size = size_from_ptr(start);\n         if size == 0 {\n+            // This _cannot_ use `unchecked_sub` because we depend on wrapping\n+            // to represent the length of long ZST slice iterators.\n+            let diff = ($self.end as usize).wrapping_sub(start as usize);\n             diff\n         } else {\n-            // Using division instead of `offset_from` helps LLVM remove bounds checks\n-            diff / size\n+            // We know that `start <= end`, so can do better than `offset_from`,\n+            // which needs to deal in signed.  By setting appropriate flags here\n+            // we can tell LLVM this, which helps it remove bounds checks.\n+            // SAFETY: By the type invariant, `start <= end`\n+            let diff = unsafe { unchecked_sub($self.end as usize, start as usize) };\n+            // By also telling LLVM that the pointers are apart by an exact\n+            // multiple of the type size, it can optimize `len() == 0` down to\n+            // `start == end` instead of `(end - start) < size`.\n+            // SAFETY: By the type invariant, the pointers are aligned so the\n+            //         distance between them must be a multiple of pointee size\n+            unsafe { exact_div(diff, size) }\n         }\n     }}\n }"}, {"sha": "a5516833900a8c8ef74da65fc9a42753b988f0a0", "filename": "src/test/codegen/slice-iter-len-eq-zero.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d3d0b7e934509327a757f467b89f1059a1f45c1/src%2Ftest%2Fcodegen%2Fslice-iter-len-eq-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3d0b7e934509327a757f467b89f1059a1f45c1/src%2Ftest%2Fcodegen%2Fslice-iter-len-eq-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fslice-iter-len-eq-zero.rs?ref=2d3d0b7e934509327a757f467b89f1059a1f45c1", "patch": "@@ -0,0 +1,14 @@\n+// no-system-llvm\n+// compile-flags: -O\n+#![crate_type = \"lib\"]\n+\n+type Demo = [u8; 3];\n+\n+// CHECK-LABEL: @slice_iter_len_eq_zero\n+#[no_mangle]\n+pub fn slice_iter_len_eq_zero(y: std::slice::Iter<'_, Demo>) -> bool {\n+    // CHECK-NOT: sub\n+    // CHECK: %2 = icmp eq i8* %1, %0\n+    // CHECK: ret i1 %2\n+    y.len() == 0\n+}"}]}