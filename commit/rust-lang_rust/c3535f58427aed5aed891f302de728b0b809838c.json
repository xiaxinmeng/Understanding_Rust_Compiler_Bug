{"sha": "c3535f58427aed5aed891f302de728b0b809838c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNTM1ZjU4NDI3YWVkNWFlZDg5MWYzMDJkZTcyOGIwYjgwOTgzOGM=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-13T01:34:19Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-08-15T16:26:52Z"}, "message": "Porting a bunch of tests over.", "tree": {"sha": "7f321b07dd66565bec8ad32185d21f6d37c72e28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f321b07dd66565bec8ad32185d21f6d37c72e28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3535f58427aed5aed891f302de728b0b809838c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3535f58427aed5aed891f302de728b0b809838c", "html_url": "https://github.com/rust-lang/rust/commit/c3535f58427aed5aed891f302de728b0b809838c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3535f58427aed5aed891f302de728b0b809838c/comments", "author": null, "committer": null, "parents": [{"sha": "cc353aa17aabb315584a4af6fb86da6b1e254e4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc353aa17aabb315584a4af6fb86da6b1e254e4d", "html_url": "https://github.com/rust-lang/rust/commit/cc353aa17aabb315584a4af6fb86da6b1e254e4d"}], "stats": {"total": 166, "additions": 86, "deletions": 80}, "files": [{"sha": "e6cc8a40882e41524407c4bf4ad06c8f255db28f", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c3535f58427aed5aed891f302de728b0b809838c/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3535f58427aed5aed891f302de728b0b809838c/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=c3535f58427aed5aed891f302de728b0b809838c", "patch": "@@ -1,19 +1,20 @@\n // xfail for now, due to some problem with polymorphic types.\n-// xfail-stage2\n+\n use std;\n import std::task;\n+import std::task::task_id;\n import std::comm;\n-import std::comm::chan_t;\n+import std::comm::_chan;\n import std::comm::send;\n \n fn main() { log \"===== WITHOUT THREADS =====\"; test00(); }\n \n-fn test00_start(ch: chan_t[int], message: int, count: int) {\n+fn test00_start(ch: _chan[int], message: int, count: int) {\n     log \"Starting test00_start\";\n     let i: int = 0;\n     while i < count {\n         log \"Sending Message\";\n-        send(ch, message);\n+        send(ch, message+0);\n         i = i + 1;\n     }\n     log \"Ending test00_start\";\n@@ -26,34 +27,34 @@ fn test00() {\n     log \"Creating tasks\";\n \n     let po = comm::mk_port();\n-    let ch = po.mk_chan2();\n+    let ch = po.mk_chan();\n \n     let i: int = 0;\n \n     // Create and spawn tasks...\n-    let tasks: [task] = ~[];\n+    let tasks = [];\n     while i < number_of_tasks {\n         tasks +=\n-            [spawn test00_start(ch.unsafe_ptr(), i, number_of_messages)];\n+            [task::_spawn(bind test00_start(ch, i, number_of_messages))];\n         i = i + 1;\n     }\n \n     // Read from spawned tasks...\n-    let sum: int = 0;\n-    for t: task  in tasks {\n+    let sum = 0;\n+    for t: task_id in tasks {\n         i = 0;\n         while i < number_of_messages {\n-            let value: int;\n-            value = po.recv();\n+            let value = po.recv();\n             sum += value;\n             i = i + 1;\n         }\n     }\n \n     // Join spawned tasks...\n-    for t: task  in tasks { task::join(t); }\n+    for t: task_id in tasks { task::join_id(t); }\n \n     log \"Completed: Final number is: \";\n+    log_err sum;\n     // assert (sum == (((number_of_tasks * (number_of_tasks - 1)) / 2) *\n     //       number_of_messages));\n     assert (sum == 480);"}, {"sha": "40b6e8c92937aa27e989fad17ee2065e32d94e29", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/c3535f58427aed5aed891f302de728b0b809838c/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3535f58427aed5aed891f302de728b0b809838c/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=c3535f58427aed5aed891f302de728b0b809838c", "patch": "@@ -1,6 +1,11 @@\n use std;\n \n import std::task;\n+import std::task::task_id;\n+import std::comm;\n+import std::comm::_chan;\n+import std::comm::_port;\n+import std::comm::send;\n \n fn main() {\n     test00();\n@@ -12,10 +17,10 @@ fn main() {\n     test06();\n }\n \n-fn test00_start(ch: chan[int], message: int, count: int) {\n+fn test00_start(ch: _chan[int], message: int, count: int) {\n     log \"Starting test00_start\";\n     let i: int = 0;\n-    while i < count { log \"Sending Message\"; ch <| message; i = i + 1; }\n+    while i < count { log \"Sending Message\"; send(ch, message+0); i = i + 1; }\n     log \"Ending test00_start\";\n }\n \n@@ -24,53 +29,48 @@ fn test00() {\n     let number_of_messages: int = 4;\n     log \"Creating tasks\";\n \n-    let po: port[int] = port();\n-    let ch: chan[int] = chan(po);\n+    let po = comm::mk_port();\n+    let ch = po.mk_chan();\n \n     let i: int = 0;\n \n-    let tasks: [task] = ~[];\n+    let tasks = [];\n     while i < number_of_tasks {\n         i = i + 1;\n-        tasks += ~[spawn test00_start(ch, i, number_of_messages)];\n+        tasks += [task::_spawn(bind test00_start(ch, i, number_of_messages))];\n     }\n \n     let sum: int = 0;\n-    for t: task  in tasks {\n+    for t: task_id in tasks {\n         i = 0;\n         while i < number_of_messages {\n-            let value: int;\n-            po |> value;\n-            sum += value;\n+            sum += po.recv();\n             i = i + 1;\n         }\n     }\n \n-    for t: task  in tasks { task::join(t); }\n+    for t: task_id  in tasks { task::join_id(t); }\n \n     log \"Completed: Final number is: \";\n     assert (sum ==\n-                number_of_messages *\n-                    (number_of_tasks * number_of_tasks + number_of_tasks) /\n-                    2);\n+            number_of_messages *\n+            (number_of_tasks * number_of_tasks + number_of_tasks) / 2);\n }\n \n fn test01() {\n-    let p: port[int] = port();\n+    let p = comm::mk_port();\n     log \"Reading from a port that is never written to.\";\n-    let value: int;\n-    p |> value;\n+    let value: int = p.recv();\n     log value;\n }\n \n fn test02() {\n-    let p: port[int] = port();\n-    let c: chan[int] = chan(p);\n+    let p = comm::mk_port();\n+    let c = p.mk_chan();\n     log \"Writing to a local task channel.\";\n-    c <| 42;\n+    send(c, 42);\n     log \"Reading from a local task port.\";\n-    let value: int;\n-    p |> value;\n+    let value: int = p.recv();\n     log value;\n }\n \n@@ -96,26 +96,26 @@ fn test04_start() {\n fn test04() {\n     log \"Spawning lots of tasks.\";\n     let i: int = 4;\n-    while i > 0 { i = i - 1; spawn test04_start(); }\n+    while i > 0 { i = i - 1; task::_spawn(bind test04_start()); }\n     log \"Finishing up.\";\n }\n \n-fn test05_start(ch: chan[int]) {\n-    ch <| 10;\n-    ch <| 20;\n-    ch <| 30;\n-    ch <| 30;\n-    ch <| 30;\n+fn test05_start(ch: _chan[int]) {\n+    send(ch, 10);\n+    send(ch, 20);\n+    send(ch, 30);\n+    send(ch, 30);\n+    send(ch, 30);\n }\n \n fn test05() {\n-    let po: port[int] = port();\n-    let ch: chan[int] = chan(po);\n-    spawn test05_start(ch);\n+    let po = comm::mk_port();\n+    let ch = po.mk_chan();\n+    task::_spawn(bind test05_start(ch));\n     let value: int;\n-    po |> value;\n-    po |> value;\n-    po |> value;\n+    value = po.recv();\n+    value = po.recv();\n+    value = po.recv();\n     log value;\n }\n \n@@ -132,12 +132,12 @@ fn test06() {\n \n     let i: int = 0;\n \n-    let tasks: [task] = ~[];\n+    let tasks = [];\n     while i < number_of_tasks {\n-        i = i + 1; tasks += ~[spawn test06_start(i)]; }\n+        i = i + 1; tasks += [task::_spawn(bind test06_start(i))]; }\n \n \n-    for t: task  in tasks { task::join(t); }\n+    for t: task_id  in tasks { task::join_id(t); }\n }\n \n "}, {"sha": "d60f7da080b14b7410866fb7c2bfd7a12c923e03", "filename": "src/test/run-pass/task-compare.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c3535f58427aed5aed891f302de728b0b809838c/src%2Ftest%2Frun-pass%2Ftask-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3535f58427aed5aed891f302de728b0b809838c/src%2Ftest%2Frun-pass%2Ftask-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-compare.rs?ref=c3535f58427aed5aed891f302de728b0b809838c", "patch": "@@ -1,13 +1,11 @@\n-// xfail-stage1\n-// xfail-stage2\n-// xfail-stage3\n-\n /**\n    A test case for issue #577, which also exposes #588\n */\n \n use std;\n-import std::task::join;\n+import std::task;\n+import std::task::join_id;\n+import std::comm;\n \n fn child() { }\n \n@@ -16,8 +14,8 @@ fn main() {\n     let t1;\n     let t2;\n \n-    t1 = spawn child();\n-    t2 = spawn child();\n+    t1 = task::_spawn(bind child());\n+    t2 = task::_spawn(bind child());\n \n     assert (t1 == t1);\n     assert (t1 != t2);\n@@ -26,8 +24,8 @@ fn main() {\n     let p1;\n     let p2;\n \n-    p1 = port[int]();\n-    p2 = port[int]();\n+    p1 = comm::mk_port[int]();\n+    p2 = comm::mk_port[int]();\n \n     assert (p1 == p1);\n     assert (p1 != p2);\n@@ -36,12 +34,12 @@ fn main() {\n     let c1;\n     let c2;\n \n-    c1 = chan(p1);\n-    c2 = chan(p2);\n+    c1 = p1.mk_chan();\n+    c2 = p2.mk_chan();\n \n     assert (c1 == c1);\n     assert (c1 != c2);\n \n-    join(t1);\n-    join(t2);\n+    join_id(t1);\n+    join_id(t2);\n }\n\\ No newline at end of file"}, {"sha": "68dbc350b5d7dd903dcbda84bef6cd5806224e36", "filename": "src/test/run-pass/task-killjoin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3535f58427aed5aed891f302de728b0b809838c/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3535f58427aed5aed891f302de728b0b809838c/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs?ref=c3535f58427aed5aed891f302de728b0b809838c", "patch": "@@ -20,13 +20,13 @@ fn supervisor() {\n     // Unsupervise this task so the process doesn't return a failure status as\n     // a result of the main task being killed.\n     task::unsupervise();\n-    let t = spawn supervised();\n-    task::join(t);\n+    let t = task::_spawn(bind supervised());\n+    task::join_id(t);\n }\n \n fn main() {\n-    let dom2 = spawn supervisor();\n-    task::join(dom2);\n+    let dom2 = task::_spawn(bind supervisor());\n+    task::join_id(dom2);\n }\n \n // Local Variables:"}, {"sha": "5892170cff8e55c42458118e1149e2963662d78e", "filename": "src/test/run-pass/task-life-0.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3535f58427aed5aed891f302de728b0b809838c/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3535f58427aed5aed891f302de728b0b809838c/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-life-0.rs?ref=c3535f58427aed5aed891f302de728b0b809838c", "patch": "@@ -1,5 +1,7 @@\n-fn main() { spawn child(\"Hello\"); }\n+use std;\n+import std::task;\n+fn main() { task::_spawn(bind child(\"Hello\")); }\n \n fn child(s: str) {\n \n-}\n\\ No newline at end of file\n+}"}, {"sha": "47982d12b906e52b00ea4647d17a4cb468a3eb16", "filename": "src/test/run-pass/threads.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c3535f58427aed5aed891f302de728b0b809838c/src%2Ftest%2Frun-pass%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3535f58427aed5aed891f302de728b0b809838c/src%2Ftest%2Frun-pass%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads.rs?ref=c3535f58427aed5aed891f302de728b0b809838c", "patch": "@@ -1,19 +1,18 @@\n-// xfail-stage1\n-// xfail-stage2\n-// xfail-stage3\n-\n // -*- rust -*-\n \n+use std;\n+import std::task;\n+\n fn main() {\n-  let int i = 10;\n+  let i = 10;\n   while (i > 0) {\n-    spawn thread \"child\" child(i);\n+    task::_spawn(bind child(i));\n     i = i - 1;\n   }\n   log \"main thread exiting\";\n }\n \n-fn child(int x) {\n+fn child(x : int) {\n   log x;\n }\n "}, {"sha": "500ba42d8f643ad6221e48a977e8e3ed9f81681d", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3535f58427aed5aed891f302de728b0b809838c/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3535f58427aed5aed891f302de728b0b809838c/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=c3535f58427aed5aed891f302de728b0b809838c", "patch": "@@ -1,15 +1,16 @@\n // -*- rust -*-\n use std;\n+import std::task;\n import std::task::*;\n \n fn main() {\n-    let other = spawn child();\n+    let other = task::_spawn(bind child());\n     log_err \"1\";\n     yield();\n     log_err \"2\";\n     yield();\n     log_err \"3\";\n-    join(other);\n+    join_id(other);\n }\n \n fn child() { log_err \"4\"; yield(); log_err \"5\"; yield(); log_err \"6\"; }\n\\ No newline at end of file"}, {"sha": "bbaafd9bf1f3ee53dfa1485520c6d32060280914", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c3535f58427aed5aed891f302de728b0b809838c/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3535f58427aed5aed891f302de728b0b809838c/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=c3535f58427aed5aed891f302de728b0b809838c", "patch": "@@ -1,7 +1,12 @@\n // -*- rust -*-\n use std;\n+import std::task;\n import std::task::*;\n \n-fn main() { let other = spawn child(); log_err \"1\"; yield(); join(other); }\n+fn main() {\n+    let other = task::_spawn(bind child());\n+    log_err \"1\"; yield();\n+    join_id(other);\n+}\n \n-fn child() { log_err \"2\"; }\n\\ No newline at end of file\n+fn child() { log_err \"2\"; }"}]}