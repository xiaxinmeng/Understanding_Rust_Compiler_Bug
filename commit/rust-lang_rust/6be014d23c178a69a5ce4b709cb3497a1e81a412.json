{"sha": "6be014d23c178a69a5ce4b709cb3497a1e81a412", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZTAxNGQyM2MxNzhhNjlhNWNlNGI3MDljYjM0OTdhMWU4MWE0MTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-03T12:37:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-03T12:37:52Z"}, "message": "auto merge of #8186 : huonw/rust/hashmap-=rt, r=Aatch\n\nThe `new` constructor uses the task-local RNG to retrieve seeds for the\r\ntwo key values, which requires the runtime. Exposing a constructor that\r\ntakes the keys directly allows HashMaps to be used in programs that wish\r\nto avoid the runtime.", "tree": {"sha": "6962633ee17f67ab9ff64278e523fefc4e748ce6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6962633ee17f67ab9ff64278e523fefc4e748ce6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6be014d23c178a69a5ce4b709cb3497a1e81a412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6be014d23c178a69a5ce4b709cb3497a1e81a412", "html_url": "https://github.com/rust-lang/rust/commit/6be014d23c178a69a5ce4b709cb3497a1e81a412", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6be014d23c178a69a5ce4b709cb3497a1e81a412/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2765811cb6530eb73c5450bd25e915e67bd512cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/2765811cb6530eb73c5450bd25e915e67bd512cf", "html_url": "https://github.com/rust-lang/rust/commit/2765811cb6530eb73c5450bd25e915e67bd512cf"}, {"sha": "c852a5bb681d08796959818470ed5233bfa69edc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c852a5bb681d08796959818470ed5233bfa69edc", "html_url": "https://github.com/rust-lang/rust/commit/c852a5bb681d08796959818470ed5233bfa69edc"}], "stats": {"total": 54, "additions": 26, "deletions": 28}, "files": [{"sha": "4de5d316fc0707b452a0356f63c4b4379dd8668a", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6be014d23c178a69a5ce4b709cb3497a1e81a412/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be014d23c178a69a5ce4b709cb3497a1e81a412/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=6be014d23c178a69a5ce4b709cb3497a1e81a412", "patch": "@@ -61,27 +61,7 @@ enum SearchResult {\n \n #[inline]\n fn resize_at(capacity: uint) -> uint {\n-    ((capacity as float) * 3. / 4.) as uint\n-}\n-\n-/// Creates a new hash map with the specified capacity.\n-pub fn linear_map_with_capacity<K:Eq + Hash,V>(\n-    initial_capacity: uint) -> HashMap<K, V> {\n-    let mut r = rand::task_rng();\n-    linear_map_with_capacity_and_keys(r.gen(), r.gen(),\n-                                      initial_capacity)\n-}\n-\n-fn linear_map_with_capacity_and_keys<K:Eq + Hash,V>(\n-    k0: u64, k1: u64,\n-    initial_capacity: uint) -> HashMap<K, V> {\n-    let cap = num::max(INITIAL_CAPACITY, initial_capacity);\n-    HashMap {\n-        k0: k0, k1: k1,\n-        resize_at: resize_at(cap),\n-        size: 0,\n-        buckets: vec::from_fn(cap, |_| None)\n-    }\n+    (capacity * 3) / 4\n }\n \n impl<K:Hash + Eq,V> HashMap<K, V> {\n@@ -352,10 +332,28 @@ impl<K: Hash + Eq, V> HashMap<K, V> {\n         HashMap::with_capacity(INITIAL_CAPACITY)\n     }\n \n-    /// Create an empty HashMap with space for at least `n` elements in\n-    /// the hash table.\n+    /// Create an empty HashMap with space for at least `capacity`\n+    /// elements in the hash table.\n     pub fn with_capacity(capacity: uint) -> HashMap<K, V> {\n-        linear_map_with_capacity(capacity)\n+        let mut r = rand::task_rng();\n+        HashMap::with_capacity_and_keys(r.gen(), r.gen(), capacity)\n+    }\n+\n+    /// Create an empty HashMap with space for at least `capacity`\n+    /// elements, using `k0` and `k1` as the keys.\n+    ///\n+    /// Warning: `k0` and `k1` are normally randomly generated, and\n+    /// are designed to allow HashMaps to be resistant to attacks that\n+    /// cause many collisions and very poor performance. Setting them\n+    /// manually using this function can expose a DoS attack vector.\n+    pub fn with_capacity_and_keys(k0: u64, k1: u64, capacity: uint) -> HashMap<K, V> {\n+        let cap = num::max(INITIAL_CAPACITY, capacity);\n+        HashMap {\n+            k0: k0, k1: k1,\n+            resize_at: resize_at(cap),\n+            size: 0,\n+            buckets: vec::from_fn(cap, |_| None)\n+        }\n     }\n \n     /// Reserve space for at least `n` elements in the hash table.\n@@ -844,7 +842,7 @@ mod test_map {\n \n     #[test]\n     fn test_insert_conflicts() {\n-        let mut m = linear_map_with_capacity(4);\n+        let mut m = HashMap::with_capacity(4);\n         assert!(m.insert(1, 2));\n         assert!(m.insert(5, 3));\n         assert!(m.insert(9, 4));\n@@ -855,7 +853,7 @@ mod test_map {\n \n     #[test]\n     fn test_conflict_remove() {\n-        let mut m = linear_map_with_capacity(4);\n+        let mut m = HashMap::with_capacity(4);\n         assert!(m.insert(1, 2));\n         assert!(m.insert(5, 3));\n         assert!(m.insert(9, 4));\n@@ -866,7 +864,7 @@ mod test_map {\n \n     #[test]\n     fn test_is_empty() {\n-        let mut m = linear_map_with_capacity(4);\n+        let mut m = HashMap::with_capacity(4);\n         assert!(m.insert(1, 2));\n         assert!(!m.is_empty());\n         assert!(m.remove(&1));\n@@ -927,7 +925,7 @@ mod test_map {\n \n     #[test]\n     fn test_iterate() {\n-        let mut m = linear_map_with_capacity(4);\n+        let mut m = HashMap::with_capacity(4);\n         foreach i in range(0u, 32) {\n             assert!(m.insert(i, i*2));\n         }"}]}