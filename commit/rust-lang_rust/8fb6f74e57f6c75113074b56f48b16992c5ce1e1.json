{"sha": "8fb6f74e57f6c75113074b56f48b16992c5ce1e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYjZmNzRlNTdmNmM3NTExMzA3NGI1NmY0OGIxNjk5MmM1Y2UxZTE=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-06-17T23:27:07Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-06-29T13:37:18Z"}, "message": "Enabling E0611 for inherent functions", "tree": {"sha": "aeab52c07da93f1a58bae273307b17937f10ffc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeab52c07da93f1a58bae273307b17937f10ffc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fb6f74e57f6c75113074b56f48b16992c5ce1e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fb6f74e57f6c75113074b56f48b16992c5ce1e1", "html_url": "https://github.com/rust-lang/rust/commit/8fb6f74e57f6c75113074b56f48b16992c5ce1e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fb6f74e57f6c75113074b56f48b16992c5ce1e1/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae92bd095c16c3aa14b986b089a1ded8df4c8369", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae92bd095c16c3aa14b986b089a1ded8df4c8369", "html_url": "https://github.com/rust-lang/rust/commit/ae92bd095c16c3aa14b986b089a1ded8df4c8369"}], "stats": {"total": 179, "additions": 137, "deletions": 42}, "files": [{"sha": "b3f7f2d376445ee60906ce365f91ed66c43cae64", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8fb6f74e57f6c75113074b56f48b16992c5ce1e1/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb6f74e57f6c75113074b56f48b16992c5ce1e1/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=8fb6f74e57f6c75113074b56f48b16992c5ce1e1", "patch": "@@ -67,7 +67,7 @@ use hir::def_id::DefId;\n use middle::region;\n use traits::{ObligationCause, ObligationCauseCode};\n use ty::{self, TyCtxt, TypeFoldable};\n-use ty::{Region, Issue32330 };\n+use ty::{Region, Issue32330};\n use ty::error::TypeError;\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::{Pos, Span};\n@@ -272,11 +272,17 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         for error in errors {\n \n             debug!(\"report_region_errors: error = {:?}\", error);\n-        // If ConcreteFailure does not have an anonymous region\n-            if !self.report_named_anon_conflict(&error){\n+            \n+            if !self.try_report_named_anon_conflict(&error){\n \n                match error.clone() {\n-\n+                  // These errors could indicate all manner of different\n+                  // problems with many different solutions. Rather\n+                  // than generate a \"one size fits all\" error, what we\n+                  // attempt to do is go through a number of specific\n+                  // scenarios and try to find the best way to present\n+                  // the error. If all of these fails, we fall back to a rather\n+                  // general bit of code that displays the error information\n                   ConcreteFailure(origin, sub, sup) => {\n \n                       self.report_concrete_failure(origin, sub, sup).emit();"}, {"sha": "8af9381107b8d9aafaf362ddc31eacbee6d453cf", "filename": "src/librustc/infer/error_reporting/named_anon_conflict.rs", "status": "modified", "additions": 64, "deletions": 13, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/8fb6f74e57f6c75113074b56f48b16992c5ce1e1/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb6f74e57f6c75113074b56f48b16992c5ce1e1/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs?ref=8fb6f74e57f6c75113074b56f48b16992c5ce1e1", "patch": "@@ -14,6 +14,7 @@ use infer::InferCtxt;\n use ty::{self, Region};\n use infer::region_inference::RegionResolutionError::*;\n use infer::region_inference::RegionResolutionError;\n+use hir::map as hir_map;\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     // This method walks the Type of the function body arguments using\n@@ -23,12 +24,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     // Currently only the case where the function declaration consists of\n     // one named region and one anonymous region is handled.\n     // Consider the example `fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32`\n-    // Here, the `y` and the `Ty` of `y` is returned after being substituted\n-    // by that of the named region.\n-    pub fn find_arg_with_anonymous_region(&self,\n-                                          anon_region: Region<'tcx>,\n-                                          named_region: Region<'tcx>)\n-                                          -> Option<(&hir::Arg, ty::Ty<'tcx>)> {\n+    // Here, we would return the hir::Arg for y, and we return the type &'a\n+    // i32, which is the type of y but with the anonymous region replaced\n+    // with 'a.\n+    fn find_arg_with_anonymous_region(&self,\n+                                      anon_region: Region<'tcx>,\n+                                      named_region: Region<'tcx>)\n+                                      -> Option<(&hir::Arg, ty::Ty<'tcx>)> {\n \n         match *anon_region {\n             ty::ReFree(ref free_region) => {\n@@ -70,29 +72,35 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     // This method generates the error message for the case when\n     // the function arguments consist of a named region and an anonymous\n     // region and corresponds to `ConcreteFailure(..)`\n-    pub fn report_named_anon_conflict(&self, error: &RegionResolutionError<'tcx>) -> bool {\n+    pub fn try_report_named_anon_conflict(&self, error: &RegionResolutionError<'tcx>) -> bool {\n \n         let (span, sub, sup) = match *error {\n             ConcreteFailure(ref origin, sub, sup) => (origin.span(), sub, sup),\n             _ => return false, // inapplicable\n         };\n \n-        let (named, (var, new_ty)) =\n-            if self.is_named_region(sub) && self.is_anonymous_region(sup) {\n+        // Determine whether the sub and sup consist of one named region ('a)\n+        // and one anonymous (elided) region. If so, find the parameter arg\n+        // where the anonymous region appears (there must always be one; we\n+        // only introduced anonymous regions in parameters) as well as a\n+        // version new_ty of its type where the anonymous region is replaced\n+        // with the named one.\n+        let (named, (arg, new_ty)) =\n+            if self.is_named_region(sub) && self.is_suitable_anonymous_region(sup) {\n                 (sub, self.find_arg_with_anonymous_region(sup, sub).unwrap())\n-            } else if self.is_named_region(sup) && self.is_anonymous_region(sub) {\n+            } else if self.is_named_region(sup) && self.is_suitable_anonymous_region(sub) {\n                 (sup, self.find_arg_with_anonymous_region(sub, sup).unwrap())\n             } else {\n                 return false; // inapplicable\n             };\n \n-        if let Some(simple_name) = var.pat.simple_name() {\n+        if let Some(simple_name) = arg.pat.simple_name() {\n             struct_span_err!(self.tcx.sess,\n                              span,\n                              E0611,\n                              \"explicit lifetime required in the type of `{}`\",\n                              simple_name)\n-                    .span_label(var.pat.span,\n+                    .span_label(arg.pat.span,\n                                 format!(\"consider changing the type of `{}` to `{}`\",\n                                         simple_name,\n                                         new_ty))\n@@ -104,12 +112,55 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                              span,\n                              E0611,\n                              \"explicit lifetime required in parameter type\")\n-                    .span_label(var.pat.span,\n+                    .span_label(arg.pat.span,\n                                 format!(\"consider changing type to `{}`\", new_ty))\n                     .span_label(span, format!(\"lifetime `{}` required\", named))\n                     .emit();\n         }\n         return true;\n \n     }\n+\n+    // This method returns whether the given Region is Anonymous\n+    pub fn is_suitable_anonymous_region(&self, region: Region<'tcx>) -> bool {\n+\n+        match *region {\n+            ty::ReFree(ref free_region) => {\n+                match free_region.bound_region {\n+                    ty::BrAnon(..) => {\n+                        let anonymous_region_binding_scope = free_region.scope;\n+                        let node_id = self.tcx\n+                            .hir\n+                            .as_local_node_id(anonymous_region_binding_scope)\n+                            .unwrap();\n+                        match self.tcx.hir.find(node_id) {\n+                            Some(hir_map::NodeItem(..)) |\n+                            Some(hir_map::NodeTraitItem(..)) => {\n+                                // proceed ahead //\n+                            }\n+                            Some(hir_map::NodeImplItem(..)) => {\n+                                if self.tcx.impl_trait_ref(self.tcx.\n+associated_item(anonymous_region_binding_scope).container.id()).is_some() {\n+                                    // For now, we do not try to target impls of traits. This is\n+                                    // because this message is going to suggest that the user\n+                                    // change the fn signature, but they may not be free to do so,\n+                                    // since the signature must match the trait.\n+                                    //\n+                                    // FIXME(#42706) -- in some cases, we could do better here.\n+                                    return false;//None;\n+                                }\n+                              else{  }\n+\n+                            }\n+                            _ => return false, // inapplicable\n+                            // we target only top-level functions\n+                        }\n+                        return true;\n+                    }\n+                    _ => false,\n+                }\n+            }\n+            _ => false,\n+        }\n+    }\n }"}, {"sha": "66c351b49ac68467d7c9c37b817d886a47430ec7", "filename": "src/librustc/infer/error_reporting/util.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8fb6f74e57f6c75113074b56f48b16992c5ce1e1/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb6f74e57f6c75113074b56f48b16992c5ce1e1/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Futil.rs?ref=8fb6f74e57f6c75113074b56f48b16992c5ce1e1", "patch": "@@ -12,7 +12,6 @@\n \n use ty::{self, Region};\n use infer::InferCtxt;\n-use hir::map as hir_map;\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     // This method returns whether the given Region is Named\n@@ -28,28 +27,4 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             _ => false,\n         }\n     }\n-\n-    // This method returns whether the given Region is Anonymous\n-    pub fn is_anonymous_region(&self, region: Region<'tcx>) -> bool {\n-\n-        match *region {\n-            ty::ReFree(ref free_region) => {\n-                match free_region.bound_region {\n-                    ty::BrAnon(..) => {\n-                        let id = free_region.scope;\n-                        let node_id = self.tcx.hir.as_local_node_id(id).unwrap();\n-                        match self.tcx.hir.find(node_id) {\n-                            Some(hir_map::NodeItem(..)) |\n-                            Some(hir_map::NodeTraitItem(..)) => { /* proceed ahead */ }\n-                            _ => return false, // inapplicable\n-                            // we target only top-level functions\n-                        }\n-                        return true;\n-                    }\n-                    _ => false,\n-                }\n-            }\n-            _ => false,\n-        }\n-    }\n }"}, {"sha": "8849f7084b3cde174c71cd38664f968048849e1d", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8fb6f74e57f6c75113074b56f48b16992c5ce1e1/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb6f74e57f6c75113074b56f48b16992c5ce1e1/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.rs?ref=8fb6f74e57f6c75113074b56f48b16992c5ce1e1", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+\n+fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n+   if x > y { x } else { y }\n+   }\n+}\n+\n+fn main() { }"}, {"sha": "ec787eb749c014efd90d2120cc1c9b22a30794f9", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8fb6f74e57f6c75113074b56f48b16992c5ce1e1/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fb6f74e57f6c75113074b56f48b16992c5ce1e1/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-2.stderr?ref=8fb6f74e57f6c75113074b56f48b16992c5ce1e1", "patch": "@@ -0,0 +1,10 @@\n+error[E0611]: explicit lifetime required in the type of `x`\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl-2.rs:14:15\n+   |\n+13 | fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n+   |            - consider changing the type of `x` to `&'a i32`\n+14 |    if x > y { x } else { y }\n+   |               ^ lifetime `'a` required\n+\n+error: aborting due to previous error(s)\n+"}, {"sha": "60f794279a52409074260b46cc9e393b6ee2ecaf", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-3.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8fb6f74e57f6c75113074b56f48b16992c5ce1e1/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb6f74e57f6c75113074b56f48b16992c5ce1e1/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.rs?ref=8fb6f74e57f6c75113074b56f48b16992c5ce1e1", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+  field: i32\n+}\n+\n+impl Foo {\n+  fn foo<'a>(&'a self, x: &i32) -> &i32 {\n+   \n+    if true { &self.field } else { x }\n+\n+  }\n+\n+}\n+\n+fn main() { }"}, {"sha": "cedceb559d552fa6ad1c1065135d92d995778948", "filename": "src/test/ui/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-3.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8fb6f74e57f6c75113074b56f48b16992c5ce1e1/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fb6f74e57f6c75113074b56f48b16992c5ce1e1/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr?ref=8fb6f74e57f6c75113074b56f48b16992c5ce1e1", "patch": "@@ -0,0 +1,11 @@\n+error[E0611]: explicit lifetime required in the type of `x`\n+  --> $DIR/ex1-return-one-existing-name-if-else-using-impl-3.rs:18:36\n+   |\n+16 |   fn foo<'a>(&'a self, x: &i32) -> &i32 {\n+   |                        - consider changing the type of `x` to `&'a i32`\n+17 |    \n+18 |     if true { &self.field } else { x }\n+   |                                    ^ lifetime `'a` required\n+\n+error: aborting due to previous error(s)\n+"}]}