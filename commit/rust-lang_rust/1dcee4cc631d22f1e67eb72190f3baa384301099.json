{"sha": "1dcee4cc631d22f1e67eb72190f3baa384301099", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkY2VlNGNjNjMxZDIyZjFlNjdlYjcyMTkwZjNiYWEzODQzMDEwOTk=", "commit": {"author": {"name": "Petr Hosek", "email": "phosek@google.com", "date": "2019-07-07T22:45:04Z"}, "committer": {"name": "Petr Hosek", "email": "phosek@google.com", "date": "2019-07-07T22:45:04Z"}, "message": "Re-add bootstrap attribute to libunwind for llvm-libunwind feature\n\nThis was removed in 8a7dded, but since #62286 hasn't yet made it into\nbeta, this is breaking the build with llvm-libunwind feature enabled.\n\nFurthemore, restrict the link attribute to Fuchsia and Linux, matching\nthe logic in build.rs since llvm-libunwind feature isn't yet supported\non other systems.", "tree": {"sha": "b421321ebafbc141021434f78affd4047eb3afcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b421321ebafbc141021434f78affd4047eb3afcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dcee4cc631d22f1e67eb72190f3baa384301099", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dcee4cc631d22f1e67eb72190f3baa384301099", "html_url": "https://github.com/rust-lang/rust/commit/1dcee4cc631d22f1e67eb72190f3baa384301099", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dcee4cc631d22f1e67eb72190f3baa384301099/comments", "author": {"login": "petrhosek", "id": 283696, "node_id": "MDQ6VXNlcjI4MzY5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/283696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrhosek", "html_url": "https://github.com/petrhosek", "followers_url": "https://api.github.com/users/petrhosek/followers", "following_url": "https://api.github.com/users/petrhosek/following{/other_user}", "gists_url": "https://api.github.com/users/petrhosek/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrhosek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrhosek/subscriptions", "organizations_url": "https://api.github.com/users/petrhosek/orgs", "repos_url": "https://api.github.com/users/petrhosek/repos", "events_url": "https://api.github.com/users/petrhosek/events{/privacy}", "received_events_url": "https://api.github.com/users/petrhosek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrhosek", "id": 283696, "node_id": "MDQ6VXNlcjI4MzY5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/283696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrhosek", "html_url": "https://github.com/petrhosek", "followers_url": "https://api.github.com/users/petrhosek/followers", "following_url": "https://api.github.com/users/petrhosek/following{/other_user}", "gists_url": "https://api.github.com/users/petrhosek/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrhosek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrhosek/subscriptions", "organizations_url": "https://api.github.com/users/petrhosek/orgs", "repos_url": "https://api.github.com/users/petrhosek/repos", "events_url": "https://api.github.com/users/petrhosek/events{/privacy}", "received_events_url": "https://api.github.com/users/petrhosek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e310f2abae97323ca1d5469657b83aa1a9407e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e310f2abae97323ca1d5469657b83aa1a9407e0", "html_url": "https://github.com/rust-lang/rust/commit/6e310f2abae97323ca1d5469657b83aa1a9407e0"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "e92c68f5b0c5736f974d57f640f2bdc16ae48895", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1dcee4cc631d22f1e67eb72190f3baa384301099/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcee4cc631d22f1e67eb72190f3baa384301099/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=1dcee4cc631d22f1e67eb72190f3baa384301099", "patch": "@@ -4,11 +4,13 @@ fn main() {\n     println!(\"cargo:rerun-if-changed=build.rs\");\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n \n-    if cfg!(feature = \"llvm-libunwind\") &&\n+    // FIXME: the not(bootstrap) part is needed because of the issue addressed by #62286,\n+    // and could be removed once that change is in beta.\n+    if cfg!(all(not(bootstrap), feature = \"llvm-libunwind\")) &&\n         (target.contains(\"linux\") ||\n          target.contains(\"fuchsia\")) {\n         // Build the unwinding from libunwind C/C++ source code.\n-        #[cfg(feature = \"llvm-libunwind\")]\n+        #[cfg(all(not(bootstrap), feature = \"llvm-libunwind\"))]\n         llvm_libunwind::compile();\n     } else if target.contains(\"linux\") {\n         if target.contains(\"musl\") {\n@@ -42,7 +44,7 @@ fn main() {\n     }\n }\n \n-#[cfg(feature = \"llvm-libunwind\")]\n+#[cfg(all(not(bootstrap), feature = \"llvm-libunwind\"))]\n mod llvm_libunwind {\n     use std::env;\n     use std::path::Path;"}, {"sha": "30897970fa220e3545fc6c30eae0f96e5de29b78", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1dcee4cc631d22f1e67eb72190f3baa384301099/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dcee4cc631d22f1e67eb72190f3baa384301099/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=1dcee4cc631d22f1e67eb72190f3baa384301099", "patch": "@@ -67,7 +67,8 @@ pub enum _Unwind_Context {}\n \n pub type _Unwind_Exception_Cleanup_Fn = extern \"C\" fn(unwind_code: _Unwind_Reason_Code,\n                                                       exception: *mut _Unwind_Exception);\n-#[cfg_attr(feature = \"llvm-libunwind\",\n+#[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\",\n+               any(target_os = \"fuchsia\", target_os = \"linux\")),\n            link(name = \"unwind\", kind = \"static\"))]\n extern \"C\" {\n     #[unwind(allowed)]\n@@ -93,7 +94,8 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n     }\n     pub use _Unwind_Action::*;\n \n-    #[cfg_attr(feature = \"llvm-libunwind\",\n+    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\",\n+                   any(target_os = \"fuchsia\", target_os = \"linux\")),\n                link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n         pub fn _Unwind_GetGR(ctx: *mut _Unwind_Context, reg_index: c_int) -> _Unwind_Word;\n@@ -148,7 +150,8 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n     pub const UNWIND_POINTER_REG: c_int = 12;\n     pub const UNWIND_IP_REG: c_int = 15;\n \n-    #[cfg_attr(feature = \"llvm-libunwind\",\n+    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\",\n+                   any(target_os = \"fuchsia\", target_os = \"linux\")),\n                link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n         fn _Unwind_VRS_Get(ctx: *mut _Unwind_Context,\n@@ -212,7 +215,8 @@ if #[cfg(all(any(target_os = \"ios\", target_os = \"netbsd\", not(target_arch = \"arm\n cfg_if::cfg_if! {\n if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n     // Not 32-bit iOS\n-    #[cfg_attr(feature = \"llvm-libunwind\",\n+    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\",\n+                   any(target_os = \"fuchsia\", target_os = \"linux\")),\n                link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n         #[unwind(allowed)]\n@@ -223,7 +227,8 @@ if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n     }\n } else {\n     // 32-bit iOS uses SjLj and does not provide _Unwind_Backtrace()\n-    #[cfg_attr(feature = \"llvm-libunwind\",\n+    #[cfg_attr(all(not(bootstrap), feature = \"llvm-libunwind\",\n+                   any(target_os = \"fuchsia\", target_os = \"linux\")),\n                link(name = \"unwind\", kind = \"static\"))]\n     extern \"C\" {\n         #[unwind(allowed)]"}]}