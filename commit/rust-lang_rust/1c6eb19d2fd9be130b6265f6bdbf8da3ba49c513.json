{"sha": "1c6eb19d2fd9be130b6265f6bdbf8da3ba49c513", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNmViMTlkMmZkOWJlMTMwYjYyNjVmNmJkYmY4ZGEzYmE0OWM1MTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-03T11:06:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-04T06:08:45Z"}, "message": "slightly comment lexer API", "tree": {"sha": "3e55d61f43e670a6a073761f531e921bad1cb2b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e55d61f43e670a6a073761f531e921bad1cb2b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c6eb19d2fd9be130b6265f6bdbf8da3ba49c513", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c6eb19d2fd9be130b6265f6bdbf8da3ba49c513", "html_url": "https://github.com/rust-lang/rust/commit/1c6eb19d2fd9be130b6265f6bdbf8da3ba49c513", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c6eb19d2fd9be130b6265f6bdbf8da3ba49c513/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30fa99e5b8c89df2c27d10a5d38a7c0d50f155a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/30fa99e5b8c89df2c27d10a5d38a7c0d50f155a7", "html_url": "https://github.com/rust-lang/rust/commit/30fa99e5b8c89df2c27d10a5d38a7c0d50f155a7"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "829083fe4f7d03a23de7a0af7770b36eacc45044", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1c6eb19d2fd9be130b6265f6bdbf8da3ba49c513/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c6eb19d2fd9be130b6265f6bdbf8da3ba49c513/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=1c6eb19d2fd9be130b6265f6bdbf8da3ba49c513", "patch": "@@ -118,29 +118,36 @@ impl<'a> StringReader<'a> {\n         }\n     }\n \n-    /// Returns the next token. EFFECT: advances the string_reader.\n+    /// Returns the next token, including trivia like whitespace or comments.\n+    ///\n+    /// `Err(())` means that some errors were encountered, which can be\n+    /// retrieved using `buffer_fatal_errors`.\n     pub fn try_next_token(&mut self) -> Result<Token, ()> {\n         let (token, _raw_span) = self.try_next_token_with_raw_span()?;\n         Ok(token)\n     }\n \n+    /// Returns the next token, including trivia like whitespace or comments.\n+    ///\n+    /// Aborts in case of an error.\n     pub fn next_token(&mut self) -> Token {\n         let res = self.try_next_token();\n         self.unwrap_or_abort(res)\n     }\n \n-    fn try_real_token(&mut self) -> Result<(Token, Span), ()> {\n-        loop {\n-            let t = self.try_next_token_with_raw_span()?;\n-            match t.0.kind {\n-                token::Whitespace | token::Comment | token::Shebang(_) => continue,\n-                _ => return Ok(t),\n+    /// Returns the next token, skipping over trivia.\n+    /// Also returns an unoverriden span which can be used to check tokens\n+    fn real_token(&mut self) -> (Token, Span) {\n+        let res = try {\n+            loop {\n+                let t = self.try_next_token_with_raw_span()?;\n+                match t.0.kind {\n+                    token::Whitespace | token::Comment | token::Shebang(_) => continue,\n+                    _ => break t,\n+                }\n             }\n-        }\n-    }\n+        };\n \n-    fn real_token(&mut self) -> (Token, Span) {\n-        let res = self.try_real_token();\n         self.unwrap_or_abort(res)\n     }\n "}]}