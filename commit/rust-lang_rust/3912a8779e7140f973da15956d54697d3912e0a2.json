{"sha": "3912a8779e7140f973da15956d54697d3912e0a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MTJhODc3OWU3MTQwZjk3M2RhMTU5NTZkNTQ2OTdkMzkxMmUwYTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-07T16:26:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-07T16:26:33Z"}, "message": "auto merge of #11350 : kchmck/rust/fix-pdf-glitches, r=alexcrichton\n\nI was reading through the tutorial and manual pdfs and noticed some of the code blocks have glitches in their formatting:\r\n\r\n![](http://i.imgur.com/9HXZ4dW.png)\r\n![](http://i.imgur.com/Ds2By6j.png)\r\n\r\nPutting empty lines around the blocks fixes this. I did a search through the other markdown files and made the change there as well.", "tree": {"sha": "38fa7207c3ebc3c8cc5309ddc5c11fc3142aa127", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38fa7207c3ebc3c8cc5309ddc5c11fc3142aa127"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3912a8779e7140f973da15956d54697d3912e0a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3912a8779e7140f973da15956d54697d3912e0a2", "html_url": "https://github.com/rust-lang/rust/commit/3912a8779e7140f973da15956d54697d3912e0a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3912a8779e7140f973da15956d54697d3912e0a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "983f307e123f1da3d351ed2032163bf93ea8f638", "url": "https://api.github.com/repos/rust-lang/rust/commits/983f307e123f1da3d351ed2032163bf93ea8f638", "html_url": "https://github.com/rust-lang/rust/commit/983f307e123f1da3d351ed2032163bf93ea8f638"}, {"sha": "5464d48e90ee3418f814b4a1d3fcfa74b589b94c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5464d48e90ee3418f814b4a1d3fcfa74b589b94c", "html_url": "https://github.com/rust-lang/rust/commit/5464d48e90ee3418f814b4a1d3fcfa74b589b94c"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "82b279e521ac92758f3c584acf6b968479041ab2", "filename": "doc/guide-macros.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3912a8779e7140f973da15956d54697d3912e0a2/doc%2Fguide-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/3912a8779e7140f973da15956d54697d3912e0a2/doc%2Fguide-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fguide-macros.md?ref=3912a8779e7140f973da15956d54697d3912e0a2", "patch": "@@ -278,6 +278,7 @@ return result + val;\n This solves the indentation problem. But if we have a lot of chained matches\n like this, we might prefer to write a single macro invocation. The input\n pattern we want is clear:\n+\n ~~~~\n # macro_rules! b(\n     ( $( ($e:expr) ~ ($p:pat) else $err:stmt ; )*\n@@ -304,6 +305,7 @@ input patterns:\n     ( binds $( $bind_res:ident ),* )\n # => (0))\n ~~~~\n+\n ...and:\n \n ~~~~"}, {"sha": "f76e08faba71b9b985f690c8ebb1fd33d03c972b", "filename": "doc/guide-tasks.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3912a8779e7140f973da15956d54697d3912e0a2/doc%2Fguide-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/3912a8779e7140f973da15956d54697d3912e0a2/doc%2Fguide-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fguide-tasks.md?ref=3912a8779e7140f973da15956d54697d3912e0a2", "patch": "@@ -263,6 +263,7 @@ With `extra::future`, rust has a mechanism for requesting a computation and gett\n later.\n \n The basic example below illustrates this.\n+\n ~~~\n # fn make_a_sandwich() {};\n fn fib(n: u64) -> u64 {\n@@ -283,6 +284,7 @@ the future needs to be mutable so that it can save the result for next time `get\n \n Here is another example showing how futures allow you to background computations. The workload will\n be distributed on the available cores.\n+\n ~~~\n # use std::vec;\n fn partial_sum(start: uint) -> f64 {\n@@ -317,6 +319,7 @@ acts as a reference to the shared data and only this reference is shared and clo\n \n Here is a small example showing how to use Arcs. We wish to run concurrently several computations on\n a single large vector of floats. Each task needs the full vector to perform its duty.\n+\n ~~~\n # use std::vec;\n # use std::rand;\n@@ -348,14 +351,17 @@ fn main() {\n The function `pnorm` performs a simple computation on the vector (it computes the sum of its items\n at the power given as argument and takes the inverse power of this value). The Arc on the vector is\n created by the line\n+\n ~~~\n # use extra::arc::Arc;\n # use std::vec;\n # use std::rand;\n # let numbers = vec::from_fn(1000000, |_| rand::random::<f64>());\n let numbers_arc=Arc::new(numbers);\n ~~~\n+\n and a clone of it is sent to each task\n+\n ~~~\n # use extra::arc::Arc;\n # use std::vec;\n@@ -365,9 +371,11 @@ and a clone of it is sent to each task\n # let (port, chan)  = Chan::new();\n chan.send(numbers_arc.clone());\n ~~~\n+\n copying only the wrapper and not its contents.\n \n Each task recovers the underlying data by\n+\n ~~~\n # use extra::arc::Arc;\n # use std::vec;\n@@ -379,6 +387,7 @@ Each task recovers the underlying data by\n # let local_arc : Arc<~[f64]> = port.recv();\n let task_numbers = local_arc.get();\n ~~~\n+\n and can use it as if it were local.\n \n The `arc` module also implements Arcs around mutable data that are not covered here."}, {"sha": "fa0acb48a32720a50eb3cb47f99cbd58d369aa12", "filename": "doc/rust.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3912a8779e7140f973da15956d54697d3912e0a2/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/3912a8779e7140f973da15956d54697d3912e0a2/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=3912a8779e7140f973da15956d54697d3912e0a2", "patch": "@@ -845,6 +845,7 @@ If a sequence of such redirections form a cycle or cannot be resolved unambiguou\n they represent a compile-time error.\n \n An example of re-exporting:\n+\n ~~~~\n # fn main() { }\n mod quux {\n@@ -868,6 +869,7 @@ All rules regarding accessing declared modules in `use` declarations applies to\n and `extern mod` declarations.\n \n An example of what will and will not work for `use` items:\n+\n ~~~~\n # #[allow(unused_imports)];\n use foo::extra;          // good: foo is at the root of the crate\n@@ -1184,6 +1186,7 @@ a = Cat;\n ~~~~\n \n Enumeration constructors can have either named or unnamed fields:\n+\n ~~~~\n enum Animal {\n     Dog (~str, f64),"}, {"sha": "067282c12cd8720a442ce1510bf9149566c41300", "filename": "doc/tutorial.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3912a8779e7140f973da15956d54697d3912e0a2/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/3912a8779e7140f973da15956d54697d3912e0a2/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=3912a8779e7140f973da15956d54697d3912e0a2", "patch": "@@ -2790,13 +2790,15 @@ For example, if we move the `animals` module above into its own file...\n mod plants;\n mod animals;\n ~~~\n+\n ~~~ {.ignore}\n // src/animals.rs or src/animals/mod.rs\n mod fish;\n mod mammals {\n     mod humans;\n }\n ~~~\n+\n ...then the source files of `mod animals`'s submodules can\n either be placed right next to that of its parents, or in a subdirectory if `animals` source file is:\n \n@@ -2959,6 +2961,7 @@ pub fn bar() { println(\"Baz!\"); }\n There also exist two short forms for importing multiple names at once:\n \n 1. Explicit mention multiple names as the last element of an `use` path:\n+\n ~~~\n use farm::{chicken, cow};\n # mod farm {\n@@ -2969,6 +2972,7 @@ use farm::{chicken, cow};\n ~~~\n \n 2. Import everything in a module with a wildcard:\n+\n ~~~\n use farm::*;\n # mod farm {"}]}