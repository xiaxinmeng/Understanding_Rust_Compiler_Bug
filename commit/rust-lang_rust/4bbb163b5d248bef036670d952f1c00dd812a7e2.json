{"sha": "4bbb163b5d248bef036670d952f1c00dd812a7e2", "node_id": "C_kwDOAAsO6NoAKDRiYmIxNjNiNWQyNDhiZWYwMzY2NzBkOTUyZjFjMDBkZDgxMmE3ZTI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-16T08:59:28Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-16T09:03:21Z"}, "message": "Point to shadowed name when it exists.", "tree": {"sha": "6120ad8e3fb688f8f6e572fc65f5cd1197755d38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6120ad8e3fb688f8f6e572fc65f5cd1197755d38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bbb163b5d248bef036670d952f1c00dd812a7e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bbb163b5d248bef036670d952f1c00dd812a7e2", "html_url": "https://github.com/rust-lang/rust/commit/4bbb163b5d248bef036670d952f1c00dd812a7e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bbb163b5d248bef036670d952f1c00dd812a7e2/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d947e6d489269124067fb91504f25f61187858e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d947e6d489269124067fb91504f25f61187858e", "html_url": "https://github.com/rust-lang/rust/commit/6d947e6d489269124067fb91504f25f61187858e"}], "stats": {"total": 60, "additions": 51, "deletions": 9}, "files": [{"sha": "ffa7cb0c9d2333eef2ebec8baa90e99c7bf32c6e", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4bbb163b5d248bef036670d952f1c00dd812a7e2/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bbb163b5d248bef036670d952f1c00dd812a7e2/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=4bbb163b5d248bef036670d952f1c00dd812a7e2", "patch": "@@ -141,6 +141,22 @@ struct BaseError {\n     suggestion: Option<(Span, &'static str, String)>,\n }\n \n+#[derive(Debug)]\n+enum TypoCandidate {\n+    Typo(TypoSuggestion),\n+    Shadowed(Res),\n+    None,\n+}\n+\n+impl TypoCandidate {\n+    fn to_opt_suggestion(self) -> Option<TypoSuggestion> {\n+        match self {\n+            TypoCandidate::Typo(sugg) => Some(sugg),\n+            TypoCandidate::Shadowed(_) | TypoCandidate::None => None,\n+        }\n+    }\n+}\n+\n impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n     fn def_span(&self, def_id: DefId) -> Option<Span> {\n         match def_id.krate {\n@@ -497,7 +513,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         }\n \n         // Try Levenshtein algorithm.\n-        let typo_sugg = self.lookup_typo_candidate(path, source.namespace(), is_expected);\n+        let typo_sugg =\n+            self.lookup_typo_candidate(path, source.namespace(), is_expected).to_opt_suggestion();\n         if path.len() == 1 && self.self_type_is_available() {\n             if let Some(candidate) = self.lookup_assoc_candidate(ident, ns, is_expected) {\n                 let self_is_available = self.self_value_is_available(path[0].ident.span);\n@@ -661,7 +678,18 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         let is_expected = &|res| source.is_expected(res);\n         let ident_span = path.last().map_or(span, |ident| ident.ident.span);\n         let typo_sugg = self.lookup_typo_candidate(path, source.namespace(), is_expected);\n+        if let TypoCandidate::Shadowed(res) = typo_sugg\n+            && let Some(id) = res.opt_def_id()\n+            && let Some(sugg_span) = self.r.opt_span(id)\n+        {\n+            err.span_label(\n+                sugg_span,\n+                format!(\"you might have meant to refer to this {}\", res.descr()),\n+            );\n+            return true;\n+        }\n         let mut fallback = false;\n+        let typo_sugg = typo_sugg.to_opt_suggestion();\n         if !self.r.add_typo_suggestion(err, typo_sugg, ident_span) {\n             fallback = true;\n             match self.diagnostic_metadata.current_let_binding {\n@@ -1582,7 +1610,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         path: &[Segment],\n         ns: Namespace,\n         filter_fn: &impl Fn(Res) -> bool,\n-    ) -> Option<TypoSuggestion> {\n+    ) -> TypoCandidate {\n         let mut names = Vec::new();\n         if path.len() == 1 {\n             let mut ctxt = path.last().unwrap().ident.span.ctxt();\n@@ -1671,10 +1699,17 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             name,\n             None,\n         ) {\n-            Some(found) if found != name => {\n-                names.into_iter().find(|suggestion| suggestion.candidate == found)\n+            Some(found) => {\n+                let Some(sugg) = names.into_iter().find(|suggestion| suggestion.candidate == found) else {\n+                    return TypoCandidate::None;\n+                };\n+                if found == name {\n+                    TypoCandidate::Shadowed(sugg.res)\n+                } else {\n+                    TypoCandidate::Typo(sugg)\n+                }\n             }\n-            _ => None,\n+            _ => TypoCandidate::None,\n         }\n     }\n "}, {"sha": "535985452232d4fa74058c1b8fd4d92fd60f19a4", "filename": "src/test/ui/lexical-scopes.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bbb163b5d248bef036670d952f1c00dd812a7e2/src%2Ftest%2Fui%2Flexical-scopes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bbb163b5d248bef036670d952f1c00dd812a7e2/src%2Ftest%2Fui%2Flexical-scopes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexical-scopes.stderr?ref=4bbb163b5d248bef036670d952f1c00dd812a7e2", "patch": "@@ -1,6 +1,8 @@\n error[E0574]: expected struct, variant or union type, found type parameter `T`\n   --> $DIR/lexical-scopes.rs:3:13\n    |\n+LL | struct T { i: i32 }\n+   | ------------------- you might have meant to refer to this struct\n LL | fn f<T>() {\n    |      - found this type parameter\n LL |     let t = T { i: 0 };"}, {"sha": "eb26cd9cabb8241b72a1d4061fce5b24185fe12c", "filename": "src/test/ui/resolve/point-at-type-parameter-shadowing-another-type.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4bbb163b5d248bef036670d952f1c00dd812a7e2/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bbb163b5d248bef036670d952f1c00dd812a7e2/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr?ref=4bbb163b5d248bef036670d952f1c00dd812a7e2", "patch": "@@ -1,11 +1,16 @@\n error[E0574]: expected struct, variant or union type, found type parameter `Baz`\n   --> $DIR/point-at-type-parameter-shadowing-another-type.rs:16:13\n    |\n-LL | impl<Baz> Foo<Baz> for Bar {\n-   |      --- found this type parameter\n+LL | / struct Baz {\n+LL | |     num: usize,\n+LL | | }\n+   | |_- you might have meant to refer to this struct\n+LL |\n+LL |   impl<Baz> Foo<Baz> for Bar {\n+   |        --- found this type parameter\n ...\n-LL |             Baz { num } => num,\n-   |             ^^^ not a struct, variant or union type\n+LL |               Baz { num } => num,\n+   |               ^^^ not a struct, variant or union type\n \n error: aborting due to previous error\n "}]}