{"sha": "20338a52401bda3024fd91010a143913a8dc9a6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMzM4YTUyNDAxYmRhMzAyNGZkOTEwMTBhMTQzOTEzYThkYzlhNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-04T03:48:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-04T03:48:22Z"}, "message": "Auto merge of #49573 - glandium:huge-align, r=SimonSapin\n\nReject huge alignments on macos with system allocator only\n\nef8804ba277b055fdc3e6d148e680e3c1b597ad8 addressed #30170 by rejecting\nhuge alignments at the allocator API level, transforming a specific\nplatform bug/limitation into an enforced API limitation on all\nplatforms.\n\nThis change essentially reverts that commit, and instead makes alloc()\nitself return AllocErr::Unsupported when receiving huge alignments.\n\nThis was discussed in https://github.com/rust-lang/rust/issues/32838#issuecomment-368348408\nand following.", "tree": {"sha": "ae228154da10f194280f1efe3994b7a73ec4b792", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae228154da10f194280f1efe3994b7a73ec4b792"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20338a52401bda3024fd91010a143913a8dc9a6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20338a52401bda3024fd91010a143913a8dc9a6c", "html_url": "https://github.com/rust-lang/rust/commit/20338a52401bda3024fd91010a143913a8dc9a6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20338a52401bda3024fd91010a143913a8dc9a6c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "199b7e211d6d9173fded261e0a4de984efc0c2eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/199b7e211d6d9173fded261e0a4de984efc0c2eb", "html_url": "https://github.com/rust-lang/rust/commit/199b7e211d6d9173fded261e0a4de984efc0c2eb"}, {"sha": "98175a8793942a60bce944050ba4fcb1cd067055", "url": "https://api.github.com/repos/rust-lang/rust/commits/98175a8793942a60bce944050ba4fcb1cd067055", "html_url": "https://github.com/rust-lang/rust/commit/98175a8793942a60bce944050ba4fcb1cd067055"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "d4404e564e0639960873fbacd4bf616130142a3e", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20338a52401bda3024fd91010a143913a8dc9a6c/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20338a52401bda3024fd91010a143913a8dc9a6c/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=20338a52401bda3024fd91010a143913a8dc9a6c", "patch": "@@ -131,6 +131,14 @@ mod platform {\n             let ptr = if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {\n                 libc::malloc(layout.size()) as *mut u8\n             } else {\n+                #[cfg(target_os = \"macos\")]\n+                {\n+                    if layout.align() > (1 << 31) {\n+                        return Err(AllocErr::Unsupported {\n+                            details: \"requested alignment too large\"\n+                        })\n+                    }\n+                }\n                 aligned_malloc(&layout)\n             };\n             if !ptr.is_null() {"}, {"sha": "fe19c923a58d153d2add0d72ed39c72b1e7e6929", "filename": "src/libcore/heap.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/20338a52401bda3024fd91010a143913a8dc9a6c/src%2Flibcore%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20338a52401bda3024fd91010a143913a8dc9a6c/src%2Flibcore%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fheap.rs?ref=20338a52401bda3024fd91010a143913a8dc9a6c", "patch": "@@ -65,13 +65,11 @@ pub struct Layout {\n \n impl Layout {\n     /// Constructs a `Layout` from a given `size` and `align`,\n-    /// or returns `None` if any of the following conditions\n+    /// or returns `None` if either of the following conditions\n     /// are not met:\n     ///\n     /// * `align` must be a power of two,\n     ///\n-    /// * `align` must not exceed 2<sup>31</sup> (i.e. `1 << 31`),\n-    ///\n     /// * `size`, when rounded up to the nearest multiple of `align`,\n     ///    must not overflow (i.e. the rounded value must be less than\n     ///    `usize::MAX`).\n@@ -81,10 +79,6 @@ impl Layout {\n             return None;\n         }\n \n-        if align > (1 << 31) {\n-            return None;\n-        }\n-\n         // (power-of-two implies align != 0.)\n \n         // Rounded up size is:\n@@ -113,9 +107,8 @@ impl Layout {\n     /// # Safety\n     ///\n     /// This function is unsafe as it does not verify that `align` is\n-    /// a power-of-two that is also less than or equal to 2<sup>31</sup>, nor\n-    /// that `size` aligned to `align` fits within the address space\n-    /// (i.e. the `Layout::from_size_align` preconditions).\n+    /// a power-of-two nor `size` aligned to `align` fits within the\n+    /// address space (i.e. the `Layout::from_size_align` preconditions).\n     #[inline]\n     pub unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Layout {\n         Layout { size: size, align: align }\n@@ -220,10 +213,10 @@ impl Layout {\n         let padded_size = self.size.checked_add(self.padding_needed_for(self.align))?;\n         let alloc_size = padded_size.checked_mul(n)?;\n \n-        // We can assume that `self.align` is a power-of-two that does\n-        // not exceed 2<sup>31</sup>. Furthermore, `alloc_size` has already been\n-        // rounded up to a multiple of `self.align`; therefore, the\n-        // call to `Layout::from_size_align` below should never panic.\n+        // We can assume that `self.align` is a power-of-two.\n+        // Furthermore, `alloc_size` has already been rounded up\n+        // to a multiple of `self.align`; therefore, the call to\n+        // `Layout::from_size_align` below should never panic.\n         Some((Layout::from_size_align(alloc_size, self.align).unwrap(), padded_size))\n     }\n "}]}