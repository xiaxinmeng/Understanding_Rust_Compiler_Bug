{"sha": "5343dc7c99f8c3d64658e4c7011dd871b2033e3d", "node_id": "C_kwDOAAsO6NoAKDUzNDNkYzdjOTlmOGMzZDY0NjU4ZTRjNzAxMWRkODcxYjIwMzNlM2Q", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-09-20T14:46:06Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-09-20T15:10:21Z"}, "message": "Generate sidebar elements for the \"All items\" page", "tree": {"sha": "ca25da48ff3d789d3c7612664ac9b0f60e2a89df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca25da48ff3d789d3c7612664ac9b0f60e2a89df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5343dc7c99f8c3d64658e4c7011dd871b2033e3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5343dc7c99f8c3d64658e4c7011dd871b2033e3d", "html_url": "https://github.com/rust-lang/rust/commit/5343dc7c99f8c3d64658e4c7011dd871b2033e3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5343dc7c99f8c3d64658e4c7011dd871b2033e3d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fd6d03e22fba2930ad377b87299de6a37076074", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fd6d03e22fba2930ad377b87299de6a37076074", "html_url": "https://github.com/rust-lang/rust/commit/8fd6d03e22fba2930ad377b87299de6a37076074"}], "stats": {"total": 112, "additions": 86, "deletions": 26}, "files": [{"sha": "22a6fcd316aa0535f922f162c155252835902b71", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5343dc7c99f8c3d64658e4c7011dd871b2033e3d/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5343dc7c99f8c3d64658e4c7011dd871b2033e3d/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=5343dc7c99f8c3d64658e4c7011dd871b2033e3d", "patch": "@@ -17,8 +17,8 @@ use super::print_item::{full_path, item_path, print_item};\n use super::search_index::build_index;\n use super::write_shared::write_shared;\n use super::{\n-    collect_spans_and_sources, print_sidebar, scrape_examples_help, AllTypes, LinkFromSrc, NameDoc,\n-    StylePath, BASIC_KEYWORDS,\n+    collect_spans_and_sources, print_sidebar, scrape_examples_help, sidebar_module_like, AllTypes,\n+    LinkFromSrc, NameDoc, StylePath, BASIC_KEYWORDS,\n };\n \n use crate::clean::{self, types::ExternalLocation, ExternalCrate};\n@@ -597,16 +597,24 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             keywords: BASIC_KEYWORDS,\n             resource_suffix: &shared.resource_suffix,\n         };\n-        let sidebar = if shared.cache.crate_version.is_some() {\n-            format!(\"<h2 class=\\\"location\\\">Crate {}</h2>\", crate_name)\n-        } else {\n-            String::new()\n-        };\n         let all = shared.all.replace(AllTypes::new());\n+        let mut sidebar = Buffer::html();\n+        if shared.cache.crate_version.is_some() {\n+            write!(sidebar, \"<h2 class=\\\"location\\\">Crate {}</h2>\", crate_name)\n+        };\n+\n+        let mut items = Buffer::html();\n+        sidebar_module_like(&mut items, all.item_sections());\n+        if !items.is_empty() {\n+            sidebar.push_str(\"<div class=\\\"sidebar-elems\\\">\");\n+            sidebar.push_buffer(items);\n+            sidebar.push_str(\"</div>\");\n+        }\n+\n         let v = layout::render(\n             &shared.layout,\n             &page,\n-            sidebar,\n+            sidebar.into_inner(),\n             |buf: &mut Buffer| all.print(buf),\n             &shared.style_files,\n         );"}, {"sha": "fbe905fb0336ea5fc6b879caa64d6bd09639f13b", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 70, "deletions": 18, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/5343dc7c99f8c3d64658e4c7011dd871b2033e3d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5343dc7c99f8c3d64658e4c7011dd871b2033e3d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=5343dc7c99f8c3d64658e4c7011dd871b2033e3d", "patch": "@@ -290,9 +290,56 @@ impl AllTypes {\n             };\n         }\n     }\n-}\n \n-impl AllTypes {\n+    fn item_sections(&self) -> FxHashSet<ItemSection> {\n+        let mut sections = FxHashSet::default();\n+\n+        if !self.structs.is_empty() {\n+            sections.insert(ItemSection::Structs);\n+        }\n+        if !self.enums.is_empty() {\n+            sections.insert(ItemSection::Enums);\n+        }\n+        if !self.unions.is_empty() {\n+            sections.insert(ItemSection::Unions);\n+        }\n+        if !self.primitives.is_empty() {\n+            sections.insert(ItemSection::PrimitiveTypes);\n+        }\n+        if !self.traits.is_empty() {\n+            sections.insert(ItemSection::Traits);\n+        }\n+        if !self.macros.is_empty() {\n+            sections.insert(ItemSection::Macros);\n+        }\n+        if !self.functions.is_empty() {\n+            sections.insert(ItemSection::Functions);\n+        }\n+        if !self.typedefs.is_empty() {\n+            sections.insert(ItemSection::TypeDefinitions);\n+        }\n+        if !self.opaque_tys.is_empty() {\n+            sections.insert(ItemSection::OpaqueTypes);\n+        }\n+        if !self.statics.is_empty() {\n+            sections.insert(ItemSection::Statics);\n+        }\n+        if !self.constants.is_empty() {\n+            sections.insert(ItemSection::Constants);\n+        }\n+        if !self.attributes.is_empty() {\n+            sections.insert(ItemSection::AttributeMacros);\n+        }\n+        if !self.derives.is_empty() {\n+            sections.insert(ItemSection::DeriveMacros);\n+        }\n+        if !self.trait_aliases.is_empty() {\n+            sections.insert(ItemSection::TraitAliases);\n+        }\n+\n+        sections\n+    }\n+\n     fn print(self, f: &mut Buffer) {\n         fn print_entries(f: &mut Buffer, e: &FxHashSet<ItemEntry>, title: &str) {\n             if !e.is_empty() {\n@@ -2468,7 +2515,7 @@ fn sidebar_enum(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, e: &clean:\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-enum ItemSection {\n+pub(crate) enum ItemSection {\n     Reexports,\n     PrimitiveTypes,\n     Modules,\n@@ -2620,25 +2667,11 @@ fn item_ty_to_section(ty: ItemType) -> ItemSection {\n     }\n }\n \n-fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n+pub(crate) fn sidebar_module_like(buf: &mut Buffer, item_sections_in_use: FxHashSet<ItemSection>) {\n     use std::fmt::Write as _;\n \n     let mut sidebar = String::new();\n \n-    let item_sections_in_use: FxHashSet<_> = items\n-        .iter()\n-        .filter(|it| {\n-            !it.is_stripped()\n-                && it\n-                    .name\n-                    .or_else(|| {\n-                        if let clean::ImportItem(ref i) = *it.kind &&\n-                            let clean::ImportKind::Simple(s) = i.kind { Some(s) } else { None }\n-                    })\n-                    .is_some()\n-        })\n-        .map(|it| item_ty_to_section(it.type_()))\n-        .collect();\n     for &sec in ItemSection::ALL.iter().filter(|sec| item_sections_in_use.contains(sec)) {\n         let _ = write!(sidebar, \"<li><a href=\\\"#{}\\\">{}</a></li>\", sec.id(), sec.name());\n     }\n@@ -2656,6 +2689,25 @@ fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n     }\n }\n \n+fn sidebar_module(buf: &mut Buffer, items: &[clean::Item]) {\n+    let item_sections_in_use: FxHashSet<_> = items\n+        .iter()\n+        .filter(|it| {\n+            !it.is_stripped()\n+                && it\n+                    .name\n+                    .or_else(|| {\n+                        if let clean::ImportItem(ref i) = *it.kind &&\n+                            let clean::ImportKind::Simple(s) = i.kind { Some(s) } else { None }\n+                    })\n+                    .is_some()\n+        })\n+        .map(|it| item_ty_to_section(it.type_()))\n+        .collect();\n+\n+    sidebar_module_like(buf, item_sections_in_use);\n+}\n+\n fn sidebar_foreign_type(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item) {\n     let mut sidebar = Buffer::new();\n     sidebar_assoc_items(cx, &mut sidebar, it);"}]}