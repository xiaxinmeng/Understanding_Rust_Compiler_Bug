{"sha": "639c4f779c60119383dd8a49b44522f6a6958a53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzOWM0Zjc3OWM2MDExOTM4M2RkOGE0OWI0NDUyMmY2YTY5NThhNTM=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-10-26T07:19:48Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-07T11:05:01Z"}, "message": "MaybeUninit::uninit_array docs: better example", "tree": {"sha": "62d17c18faea88fdbce0cbfb03cd5bafece62ea3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62d17c18faea88fdbce0cbfb03cd5bafece62ea3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/639c4f779c60119383dd8a49b44522f6a6958a53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/639c4f779c60119383dd8a49b44522f6a6958a53", "html_url": "https://github.com/rust-lang/rust/commit/639c4f779c60119383dd8a49b44522f6a6958a53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/639c4f779c60119383dd8a49b44522f6a6958a53/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05c14bcc3180092ec4c03d59977abf96db7b4b7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/05c14bcc3180092ec4c03d59977abf96db7b4b7a", "html_url": "https://github.com/rust-lang/rust/commit/05c14bcc3180092ec4c03d59977abf96db7b4b7a"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "0c0a6d8a121b823e2f2c7cbba93b6fb1cc2ba30a", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/639c4f779c60119383dd8a49b44522f6a6958a53/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639c4f779c60119383dd8a49b44522f6a6958a53/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=639c4f779c60119383dd8a49b44522f6a6958a53", "patch": "@@ -260,26 +260,32 @@ impl<T> MaybeUninit<T> {\n \n     /// Create a new array of `MaybeUninit<T>` items, in an uninitialized state.\n     ///\n+    /// Note: in a future Rust version this method may become unnecessary\n+    /// when array literal syntax allows\n+    /// [repeating const expressions](https://github.com/rust-lang/rust/issues/49147).\n+    /// The example below could then use `let mut buf = [MaybeUninit::<u8>::uninit(); 32];`.\n+    ///\n     /// # Examples\n     ///\n-    /// ```\n+    /// ```no_run\n     /// #![feature(maybe_uninit_uninit_array, maybe_uninit_extra, maybe_uninit_slice_assume_init)]\n+    ///\n     /// use std::mem::MaybeUninit;\n     ///\n-    /// let input = b\"Foo\";\n-    /// let f = u8::to_ascii_uppercase;\n-    ///\n-    /// let mut buffer: [MaybeUninit<u8>; 32] = MaybeUninit::uninit_array();\n-    /// let vec;\n-    /// let output = if let Some(buffer) = buffer.get_mut(..input.len()) {\n-    ///     buffer.iter_mut().zip(input).for_each(|(a, b)| { a.write(f(b)); });\n-    ///     unsafe { MaybeUninit::slice_get_ref(buffer) }\n-    /// } else {\n-    ///     vec = input.iter().map(f).collect::<Vec<u8>>();\n-    ///     &vec\n-    /// };\n+    /// extern \"C\" {\n+    ///     fn read_into_buffer(ptr: *mut u8, max_len: usize) -> usize;\n+    /// }\n+    ///\n+    /// /// Returns a (possibly smaller) slice of data that was actually read\n+    /// fn read(buf: &mut [MaybeUninit<u8>]) -> &[u8] {\n+    ///     unsafe {\n+    ///         let len = read_into_buffer(buf.as_mut_ptr() as *mut u8, buf.len());\n+    ///         MaybeUninit::slice_get_ref(&buf[..len])\n+    ///     }\n+    /// }\n     ///\n-    /// assert_eq!(output, b\"FOO\");\n+    /// let mut buf: [MaybeUninit<u8>; 32] = MaybeUninit::uninit_array();\n+    /// let data = read(&mut buf);\n     /// ```\n     #[unstable(feature = \"maybe_uninit_uninit_array\", issue = \"0\")]\n     #[inline(always)]"}]}