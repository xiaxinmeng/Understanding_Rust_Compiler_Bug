{"sha": "992fae08c497d4f7af35cfa3b94a2036df3cc868", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MmZhZTA4YzQ5N2Q0ZjdhZjM1Y2ZhM2I5NGEyMDM2ZGYzY2M4Njg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-17T15:26:56Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-17T15:26:56Z"}, "message": "Simplify handling of unimplemented stuff", "tree": {"sha": "4b7ee67e86c33513ab9064fbdda3ab30432ecc20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b7ee67e86c33513ab9064fbdda3ab30432ecc20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/992fae08c497d4f7af35cfa3b94a2036df3cc868", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/992fae08c497d4f7af35cfa3b94a2036df3cc868", "html_url": "https://github.com/rust-lang/rust/commit/992fae08c497d4f7af35cfa3b94a2036df3cc868", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/992fae08c497d4f7af35cfa3b94a2036df3cc868/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b475199d1c30c36dc473ef1b6d4fd4046d236451", "url": "https://api.github.com/repos/rust-lang/rust/commits/b475199d1c30c36dc473ef1b6d4fd4046d236451", "html_url": "https://github.com/rust-lang/rust/commit/b475199d1c30c36dc473ef1b6d4fd4046d236451"}], "stats": {"total": 50, "additions": 11, "deletions": 39}, "files": [{"sha": "e7a649ad207caad2cdb8ebc070dccf166e916f9a", "filename": "src/abi/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/992fae08c497d4f7af35cfa3b94a2036df3cc868/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992fae08c497d4f7af35cfa3b94a2036df3cc868/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=992fae08c497d4f7af35cfa3b94a2036df3cc868", "patch": "@@ -173,7 +173,7 @@ pub fn get_function_name_and_sig<'tcx>(\n     let fn_sig =\n         tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &fn_sig_for_fn_abi(tcx, inst));\n     if fn_sig.c_variadic && !support_vararg {\n-        unimpl!(\"Variadic function definitions are not yet supported\");\n+        unimpl_fatal!(tcx, tcx.def_span(inst.def_id()), \"Variadic function definitions are not yet supported\");\n     }\n     let sig = clif_sig_from_fn_sig(tcx, triple, fn_sig, false, inst.def.requires_caller_location(tcx));\n     (tcx.symbol_name(inst).name.as_str().to_string(), sig)\n@@ -622,7 +622,7 @@ fn codegen_call_inner<'tcx>(\n     // FIXME find a cleaner way to support varargs\n     if fn_sig.c_variadic {\n         if fn_sig.abi != Abi::C {\n-            unimpl!(\"Variadic call for non-C abi {:?}\", fn_sig.abi);\n+            unimpl_fatal!(fx.tcx, span, \"Variadic call for non-C abi {:?}\", fn_sig.abi);\n         }\n         let sig_ref = fx.bcx.func.dfg.call_signature(call_inst).unwrap();\n         let abi_params = call_args\n@@ -631,7 +631,7 @@ fn codegen_call_inner<'tcx>(\n                 let ty = fx.bcx.func.dfg.value_type(arg);\n                 if !ty.is_int() {\n                     // FIXME set %al to upperbound on float args once floats are supported\n-                    unimpl!(\"Non int ty {:?} for variadic call\", ty);\n+                    unimpl_fatal!(fx.tcx, span, \"Non int ty {:?} for variadic call\", ty);\n                 }\n                 AbiParam::new(ty)\n             })"}, {"sha": "0161a42a104a6983f5043930a902172e77a4aae3", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/992fae08c497d4f7af35cfa3b94a2036df3cc868/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992fae08c497d4f7af35cfa3b94a2036df3cc868/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=992fae08c497d4f7af35cfa3b94a2036df3cc868", "patch": "@@ -700,7 +700,7 @@ fn trans_stmt<'tcx>(\n \n                     crate::trap::trap_unimplemented(fx, \"_xgetbv arch intrinsic is not supported\");\n                 }\n-                _ => unimpl!(\"Inline assembly is not supported\"),\n+                _ => unimpl_fatal!(fx.tcx, stmt.source_info.span, \"Inline assembly is not supported\"),\n             }\n         }\n     }"}, {"sha": "d68cb5bb7eedcfa28cb8ac0293441c95408087f3", "filename": "src/driver/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/992fae08c497d4f7af35cfa3b94a2036df3cc868/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992fae08c497d4f7af35cfa3b94a2036df3cc868/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=992fae08c497d4f7af35cfa3b94a2036df3cc868", "patch": "@@ -52,10 +52,8 @@ fn codegen_mono_items<'tcx>(\n     });\n \n     for (mono_item, (linkage, visibility)) in mono_items {\n-        crate::unimpl::try_unimpl(tcx, || {\n-            let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n-            trans_mono_item(&mut cx, mono_item, linkage);\n-        });\n+        let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n+        trans_mono_item(&mut cx, mono_item, linkage);\n     }\n \n     tcx.sess.time(\"finalize CodegenCx\", || cx.finalize());"}, {"sha": "376eed50b00e1f2a100338fa5e5774b398743726", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/992fae08c497d4f7af35cfa3b94a2036df3cc868/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992fae08c497d4f7af35cfa3b94a2036df3cc868/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=992fae08c497d4f7af35cfa3b94a2036df3cc868", "patch": "@@ -425,7 +425,7 @@ pub fn codegen_intrinsic_call<'tcx>(\n     intrinsic_match! {\n         fx, intrinsic, substs, args,\n         _ => {\n-            unimpl!(\"unsupported intrinsic {}\", intrinsic)\n+            unimpl_fatal!(fx.tcx, span, \"unsupported intrinsic {}\", intrinsic);\n         };\n \n         assume, (c _a) {};"}, {"sha": "a3fbb99eb65f048aa30bf53ba3a7ac1e283dab03", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/992fae08c497d4f7af35cfa3b94a2036df3cc868/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/992fae08c497d4f7af35cfa3b94a2036df3cc868/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=992fae08c497d4f7af35cfa3b94a2036df3cc868", "patch": "@@ -57,7 +57,6 @@ mod pointer;\n mod pretty_clif;\n mod target_features_whitelist;\n mod trap;\n-mod unimpl;\n mod unsize;\n mod value_and_place;\n mod vtable;\n@@ -115,7 +114,6 @@ mod prelude {\n     pub use crate::debuginfo::{DebugContext, FunctionDebugContext};\n     pub use crate::pointer::Pointer;\n     pub use crate::trap::*;\n-    pub use crate::unimpl::unimpl;\n     pub use crate::value_and_place::{CPlace, CPlaceInner, CValue};\n     pub use crate::CodegenCx;\n \n@@ -127,6 +125,10 @@ mod prelude {\n             }\n         }\n     }\n+\n+    pub macro unimpl_fatal($tcx:expr, $span:expr, $($tt:tt)*) {\n+        $tcx.sess.span_fatal($span, &format!($($tt)*));\n+    }\n }\n \n pub struct CodegenCx<'clif, 'tcx, B: Backend + 'static> {"}, {"sha": "b668235e75e826130438a91476f172f78f6b5103", "filename": "src/unimpl.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b475199d1c30c36dc473ef1b6d4fd4046d236451/src%2Funimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b475199d1c30c36dc473ef1b6d4fd4046d236451/src%2Funimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funimpl.rs?ref=b475199d1c30c36dc473ef1b6d4fd4046d236451", "patch": "@@ -1,28 +0,0 @@\n-//! The unimpl! macro is defined here. It is used to generate\n-//! a non-fatal error on not yet implemented things.\n-\n-use rustc::ty::TyCtxt;\n-\n-// Just public, because of the unimpl macro\n-#[doc(hidden)]\n-pub struct NonFatal(pub String);\n-\n-/// Use when something in the current function is unimplemented.\n-///\n-/// This will emit an error and continue codegen at a different function.\n-pub macro unimpl($($tt:tt)*) {\n-    panic!(NonFatal(format!($($tt)*)));\n-}\n-\n-pub fn try_unimpl(tcx: TyCtxt, f: impl FnOnce()) {\n-    let res = ::std::panic::catch_unwind(::std::panic::AssertUnwindSafe(|| f()));\n-\n-    if let Err(err) = res {\n-        match err.downcast::<NonFatal>() {\n-            Ok(non_fatal) => {\n-                tcx.sess.err(&non_fatal.0);\n-            }\n-            Err(err) => ::std::panic::resume_unwind(err),\n-        }\n-    }\n-}"}]}