{"sha": "3e4051938d5d14fd72498a2d3e515b11437d73c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNDA1MTkzOGQ1ZDE0ZmQ3MjQ5OGEyZDNlNTE1YjExNDM3ZDczYzk=", "commit": {"author": {"name": "BooksBaum", "email": "15612932+Booksbaum@users.noreply.github.com", "date": "2021-08-04T19:16:53Z"}, "committer": {"name": "BooksBaum", "email": "15612932+Booksbaum@users.noreply.github.com", "date": "2021-08-17T17:23:04Z"}, "message": "Handle `mut` & `ref`", "tree": {"sha": "9834f1a64a5dae64babe055f133b2dab92c8cd67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9834f1a64a5dae64babe055f133b2dab92c8cd67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e4051938d5d14fd72498a2d3e515b11437d73c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEJTdsK5zmAD3L8AFljIMXU7iI9loFAmEb8HgACgkQjIMXU7iI\n9lqRag/9HKVqxW7uBaBjT7ZAbVEpqbpLdyK0zp/o8ti1JeaKn37/boa80sFlS5UT\n31bHTKjaFK4JL8L3SciF2YAILx+SZ3siSXWXU34X7r3qGjzN0xOSHDaZY7ANNP92\nxm1SIryJ+37en3ONYXLa2RCA7kASMzN8sMGzatFREgyW16l74pF3CTRzYBabGwCK\nrIHERObpodzwZpPv143lYk7kYXxBBwiyxKkj3ucEuY7K9i7PP6FsASMma8bjnpBN\nLg6EI0TvPZkfpVRA48+lYKhqRKQFHWdkLnoPp/jfl5TGKtZR4ClLUqXHCm+XtCfG\nOA1xtmf3ZaiXmqbCF0YmNc+Pu7bgELbAW5U8l4aHe/P2DeTWO7ZgTUOzDtHqJR+T\ntd+xXD0c+UsygA1m0B5+AC7DatCr42PDYDSepC3GZGBdl+rZlWye4qKAQAlN1P1D\nTOnUTyzSRewBmyLYQah4z7ZwA5NfuHwSeikzTa93Mz8Eoa8Gc1hmDDtSJPq2fwn1\nGwGKjvaPHocEB1Bs1tr0SQjb6Fg67qqXxc3Q4N0lPuqy9fRySX9IeoFErWOYNRAQ\nx1LdAMPLjs8ZsTwlr7C46ZBGplsBO6kyrrS1oTAqtgs/Cf5etQZPgokBrdhjsYN4\nQQjvL94oRQ+OUZ+ObGsyb6VV+mvL75oxBonJyn/J9QYT55ZCHmI=\n=dH+O\n-----END PGP SIGNATURE-----", "payload": "tree 9834f1a64a5dae64babe055f133b2dab92c8cd67\nparent 478b2988c0715ae90018dd0930de06a507ecedf7\nauthor BooksBaum <15612932+Booksbaum@users.noreply.github.com> 1628104613 +0200\ncommitter BooksBaum <15612932+Booksbaum@users.noreply.github.com> 1629220984 +0200\n\nHandle `mut` & `ref`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e4051938d5d14fd72498a2d3e515b11437d73c9", "html_url": "https://github.com/rust-lang/rust/commit/3e4051938d5d14fd72498a2d3e515b11437d73c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e4051938d5d14fd72498a2d3e515b11437d73c9/comments", "author": {"login": "Booksbaum", "id": 15612932, "node_id": "MDQ6VXNlcjE1NjEyOTMy", "avatar_url": "https://avatars.githubusercontent.com/u/15612932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Booksbaum", "html_url": "https://github.com/Booksbaum", "followers_url": "https://api.github.com/users/Booksbaum/followers", "following_url": "https://api.github.com/users/Booksbaum/following{/other_user}", "gists_url": "https://api.github.com/users/Booksbaum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Booksbaum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Booksbaum/subscriptions", "organizations_url": "https://api.github.com/users/Booksbaum/orgs", "repos_url": "https://api.github.com/users/Booksbaum/repos", "events_url": "https://api.github.com/users/Booksbaum/events{/privacy}", "received_events_url": "https://api.github.com/users/Booksbaum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Booksbaum", "id": 15612932, "node_id": "MDQ6VXNlcjE1NjEyOTMy", "avatar_url": "https://avatars.githubusercontent.com/u/15612932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Booksbaum", "html_url": "https://github.com/Booksbaum", "followers_url": "https://api.github.com/users/Booksbaum/followers", "following_url": "https://api.github.com/users/Booksbaum/following{/other_user}", "gists_url": "https://api.github.com/users/Booksbaum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Booksbaum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Booksbaum/subscriptions", "organizations_url": "https://api.github.com/users/Booksbaum/orgs", "repos_url": "https://api.github.com/users/Booksbaum/repos", "events_url": "https://api.github.com/users/Booksbaum/events{/privacy}", "received_events_url": "https://api.github.com/users/Booksbaum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "478b2988c0715ae90018dd0930de06a507ecedf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/478b2988c0715ae90018dd0930de06a507ecedf7", "html_url": "https://github.com/rust-lang/rust/commit/478b2988c0715ae90018dd0930de06a507ecedf7"}], "stats": {"total": 121, "additions": 111, "deletions": 10}, "files": [{"sha": "c2e7535537e7c8d56fca52d66ea91f17a139471c", "filename": "crates/ide_assists/src/handlers/destructure_tuple_binding.rs", "status": "modified", "additions": 111, "deletions": 10, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/3e4051938d5d14fd72498a2d3e515b11437d73c9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4051938d5d14fd72498a2d3e515b11437d73c9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fdestructure_tuple_binding.rs?ref=3e4051938d5d14fd72498a2d3e515b11437d73c9", "patch": "@@ -80,7 +80,7 @@ fn collect_data(ident_pat: IdentPat, ctx: &AssistContext) -> Option<TupleData> {\n         .map(|i| generate_name(i, &name, &ident_pat, &usages, ctx))\n         .collect_vec();\n \n-    Some(TupleData { range, field_names, usages })\n+    Some(TupleData { ident_pat, range, field_names, usages })\n }\n \n fn generate_name(\n@@ -95,31 +95,39 @@ fn generate_name(\n }\n \n struct TupleData {\n-    // ident_pat: IdentPat,\n+    ident_pat: IdentPat,\n     // name: String,\n     range: TextRange,\n     field_names: Vec<String>,\n     // field_types: Vec<Type>,\n     usages: Option<UsageSearchResult>,\n }\n fn edit_tuple_assignment(data: &TupleData, builder: &mut AssistBuilder, ctx: &AssistContext) {\n-    let new_tuple = {\n-        let fields = data\n+    let tuple_pat = {\n+        let original = &data.ident_pat;\n+        let is_ref = original.ref_token().is_some();\n+        let is_mut = original.mut_token().is_some();\n+        let fields =\n+            data\n             .field_names\n             .iter()\n-            .map(|name| ast::Pat::from(ast::make::ident_pat(false, false, ast::make::name(name))));\n+            .map(|name| ast::Pat::from(ast::make::ident_pat(is_ref, is_mut, ast::make::name(name))));\n         ast::make::tuple_pat(fields)\n     };\n \n+    let add_cursor = |text: &str| {\n+        // place cursor on first tuple item\n+        let first_tuple = &data.field_names[0];\n+        text.replacen(first_tuple, &format!(\"$0{}\", first_tuple), 1)\n+    };\n+\n+    let text = tuple_pat.to_string();\n     match ctx.config.snippet_cap {\n         Some(cap) => {\n-            // No support for placeholders in Code Actions, except for special rust analyzer handling which supports only first `$0`\n-            //  -> place cursor on first variable\n-            let mut snip = new_tuple.to_string();\n-            snip.insert_str(1, \"$0\");\n+            let snip = add_cursor(&text);\n             builder.replace_snippet(cap, data.range, snip);\n         }\n-        None => builder.replace(data.range, new_tuple.to_string()),\n+        None => builder.replace(data.range, text),\n     };\n }\n \n@@ -462,6 +470,74 @@ fn foo(t: &(usize, usize)) -> usize {\n         )\n     }\n \n+    #[test]\n+    fn with_ref() {\n+        //Note: `v` has different types:\n+        // * in 1st: `i32`\n+        // * in 2nd: `&i32`\n+        check_assist(\n+            destructure_tuple_binding,\n+            r#\"\n+fn main() {\n+    let ref $0t = (1,2);\n+    let v = t.0;\n+}\n+            \"#,\n+            r#\"\n+fn main() {\n+    let (ref $0_0, ref _1) = (1,2);\n+    let v = _0;\n+}\n+            \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn with_mut() {\n+        check_assist(\n+            destructure_tuple_binding,\n+            r#\"\n+fn main() {\n+    let mut $0t = (1,2);\n+    t.0 = 42;\n+    let v = t.0;\n+}\n+            \"#,\n+            r#\"\n+fn main() {\n+    let (mut $0_0, mut _1) = (1,2);\n+    _0 = 42;\n+    let v = _0;\n+}\n+            \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn with_ref_mut() {\n+        //Note: `v` has different types:\n+        // * in 1st: `i32`\n+        // * in 2nd: `&mut i32`\n+        // Note: 2nd `_0 = 42` isn't valid; requires dereferencing (`*_0`), but isn't handled here!\n+        check_assist(\n+            destructure_tuple_binding,\n+            r#\"\n+fn main() {\n+    let ref mut $0t = (1,2);\n+    t.0 = 42;\n+    let v = t.0;\n+}\n+            \"#,\n+            r#\"\n+fn main() {\n+    let (ref mut $0_0, ref mut _1) = (1,2);\n+    _0 = 42;\n+    let v = _0;\n+}\n+            \"#,\n+        )\n+    }\n+\n     #[test]\n     fn dont_trigger_for_non_tuple_reference() {\n         check_assist_not_applicable(\n@@ -733,6 +809,31 @@ fn main() {\n             \"#,\n         )\n     }\n+    #[test]\n+    fn in_match_reference_option() {\n+        check_assist(\n+            destructure_tuple_binding,\n+            r#\"\n+//- minicore: option\n+fn main() {\n+    let t = (1,2);\n+    match Some(&t) {\n+        Some($0t) => t.1,\n+        _ => 0,\n+    };\n+}\n+            \"#,\n+            r#\"\n+fn main() {\n+    let t = (1,2);\n+    match Some(&t) {\n+        Some(($0_0, _1)) => _1,\n+        _ => 0,\n+    };\n+}\n+            \"#,\n+        )\n+    }\n \n     #[test]\n     fn in_for() {"}]}