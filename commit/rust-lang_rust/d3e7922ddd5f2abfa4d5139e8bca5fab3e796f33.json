{"sha": "d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzZTc5MjJkZGQ1ZjJhYmZhNGQ1MTM5ZThiY2E1ZmFiM2U3OTZmMzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-04T18:30:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-04T18:30:59Z"}, "message": "auto merge of #16982 : jbcrail/rust/comment-and-string-corrections, r=alexcrichton\n\nI corrected spelling and capitalization errors in comments and strings.", "tree": {"sha": "1b6d41765ea51745549db326611a726287f20958", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b6d41765ea51745549db326611a726287f20958"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "html_url": "https://github.com/rust-lang/rust/commit/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bef51ba234a42c52939bcb0f8a5deb7c345d8eba", "url": "https://api.github.com/repos/rust-lang/rust/commits/bef51ba234a42c52939bcb0f8a5deb7c345d8eba", "html_url": "https://github.com/rust-lang/rust/commit/bef51ba234a42c52939bcb0f8a5deb7c345d8eba"}, {"sha": "b7bfe04b2d003d08f6ac450f41d7f221cb87f129", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7bfe04b2d003d08f6ac450f41d7f221cb87f129", "html_url": "https://github.com/rust-lang/rust/commit/b7bfe04b2d003d08f6ac450f41d7f221cb87f129"}], "stats": {"total": 128, "additions": 64, "deletions": 64}, "files": [{"sha": "834c95497336db20141c33ba14d213ab59b1d89f", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -289,7 +289,7 @@ pub trait Set<T>: Collection {\n }\n \n /// A mutable collection of values which are distinct from one another that\n-/// can be mutaed.\n+/// can be mutated.\n pub trait MutableSet<T>: Set<T> + Mutable {\n     /// Adds a value to the set. Returns `true` if the value was not already\n     /// present in the set."}, {"sha": "3665535e720153c8ccc2da346a237dff810ac387", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -132,7 +132,7 @@ impl<T> RingBuf<T> {\n               elts: Vec::from_fn(cmp::max(MINIMUM_CAPACITY, n), |_| None)}\n     }\n \n-    /// Retrieva an element in the `RingBuf` by index.\n+    /// Retrieve an element in the `RingBuf` by index.\n     ///\n     /// Fails if there is no element with the given index.\n     ///"}, {"sha": "dd3a639aeac787a21765e42cb4d9d041a9564044", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -324,7 +324,7 @@ impl<V:Clone> SmallIntMap<V> {\n     /// Updates a value in the map. If the key already exists in the map,\n     /// modifies the value with `ff` taking `oldval, newval`.\n     /// Otherwise, sets the value to `newval`.\n-    /// Returasn `true` if the key did not already exist in the map.\n+    /// Returns `true` if the key did not already exist in the map.\n     ///\n     /// # Example\n     ///"}, {"sha": "88c683ef44e936a847804c415effc60ac040be8c", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -44,7 +44,7 @@\n //!\n //! # Representation\n //!\n-//! Rust's string type, `str`, is a sequence of unicode scalar values encoded as a\n+//! Rust's string type, `str`, is a sequence of Unicode scalar values encoded as a\n //! stream of UTF-8 bytes. All strings are guaranteed to be validly encoded UTF-8\n //! sequences. Additionally, strings are not null-terminated and can contain null\n //! bytes."}, {"sha": "c870f1b8f70a1dafa9f46cca72d40b5ededcc5d2", "filename": "src/libcore/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -201,7 +201,7 @@ pub fn escape_unicode(c: char, f: |char|) {\n /// - Tab, CR and LF are escaped as '\\t', '\\r' and '\\n' respectively.\n /// - Single-quote, double-quote and backslash chars are backslash-escaped.\n /// - Any other chars in the range [0x20,0x7e] are not escaped.\n-/// - Any other chars are given hex unicode escapes; see `escape_unicode`.\n+/// - Any other chars are given hex Unicode escapes; see `escape_unicode`.\n ///\n pub fn escape_default(c: char, f: |char|) {\n     match c {\n@@ -290,7 +290,7 @@ pub trait Char {\n     /// * Single-quote, double-quote and backslash chars are backslash-\n     ///   escaped.\n     /// * Any other chars in the range [0x20,0x7e] are not escaped.\n-    /// * Any other chars are given hex unicode escapes; see `escape_unicode`.\n+    /// * Any other chars are given hex Unicode escapes; see `escape_unicode`.\n     fn escape_default(&self, f: |char|);\n \n     /// Returns the amount of bytes this character would need if encoded in"}, {"sha": "a3d63bbe06cd19ede62ba9196f57bbaced0321e5", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -311,7 +311,7 @@ extern \"rust-intrinsic\" {\n \n     /// Gives the address for the return value of the enclosing function.\n     ///\n-    /// Using this instrinsic in a function that does not use an out pointer\n+    /// Using this intrinsic in a function that does not use an out pointer\n     /// will trigger a compiler error.\n     pub fn return_address() -> *const u8;\n "}, {"sha": "d6f35b0dcc65053c874715fd8458a833b0cebd38", "filename": "src/libcore/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -1128,7 +1128,7 @@ pub trait StrSlice<'a> {\n     fn contains_char(&self, needle: char) -> bool;\n \n     /// An iterator over the characters of `self`. Note, this iterates\n-    /// over unicode code-points, not unicode graphemes.\n+    /// over Unicode code-points, not Unicode graphemes.\n     ///\n     /// # Example\n     ///\n@@ -1505,7 +1505,7 @@ pub trait StrSlice<'a> {\n     /// Pluck a character out of a string and return the index of the next\n     /// character.\n     ///\n-    /// This function can be used to iterate over the unicode characters of a\n+    /// This function can be used to iterate over the Unicode characters of a\n     /// string.\n     ///\n     /// # Example\n@@ -1549,7 +1549,7 @@ pub trait StrSlice<'a> {\n     /// # Return value\n     ///\n     /// A record {ch: char, next: uint} containing the char value and the byte\n-    /// index of the next unicode character.\n+    /// index of the next Unicode character.\n     ///\n     /// # Failure\n     ///\n@@ -1559,7 +1559,7 @@ pub trait StrSlice<'a> {\n \n     /// Given a byte position and a str, return the previous char and its position.\n     ///\n-    /// This function can be used to iterate over a unicode string in reverse.\n+    /// This function can be used to iterate over a Unicode string in reverse.\n     ///\n     /// Returns 0 for next index if called on start index 0.\n     ///"}, {"sha": "bbccdf0acf9d29b1d7d6fc9cbf7bddabab190b0e", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -65,7 +65,7 @@\n * definitions common-to-all (held in modules named c95, c99, posix88, posix01\n * and posix08) and definitions that appear only on *some* platforms (named\n * 'extra'). This would be things like significant OSX foundation kit, or Windows\n-* library kernel32.dll, or various fancy glibc, linux or BSD extensions.\n+* library kernel32.dll, or various fancy glibc, Linux or BSD extensions.\n *\n * In addition to the per-platform 'extra' modules, we define a module of\n * 'common BSD' libc routines that never quite made it into POSIX but show up"}, {"sha": "cbfc673e6af83da7f972867bc0c47a34285eca98", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -901,8 +901,8 @@ impl rtio::RtioUdpSocket for UdpSocket {\n //\n // It turns out that there's this nifty MSG_DONTWAIT flag which can be passed to\n // send/recv, but the niftiness wears off once you realize it only works well on\n-// linux [1] [2]. This means that it's pretty easy to get a nonblocking\n-// operation on linux (no flag fiddling, no affecting other objects), but not on\n+// Linux [1] [2]. This means that it's pretty easy to get a nonblocking\n+// operation on Linux (no flag fiddling, no affecting other objects), but not on\n // other platforms.\n //\n // To work around this constraint on other platforms, we end up using the\n@@ -922,7 +922,7 @@ impl rtio::RtioUdpSocket for UdpSocket {\n // operations performed in the lock are *nonblocking* to avoid holding the mutex\n // forever.\n //\n-// So, in summary, linux uses MSG_DONTWAIT and doesn't need mutexes, everyone\n+// So, in summary, Linux uses MSG_DONTWAIT and doesn't need mutexes, everyone\n // else uses O_NONBLOCK and mutexes with some trickery to make sure blocking\n // reads/writes are still blocking.\n //"}, {"sha": "1f1880d712d8cfadfca8699d93512d07193591d9", "filename": "src/libnative/io/pipe_windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibnative%2Fio%2Fpipe_windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibnative%2Fio%2Fpipe_windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fpipe_windows.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -655,7 +655,7 @@ impl UnixAcceptor {\n         // using the original server pipe.\n         let handle = self.listener.handle;\n \n-        // If we've had an artifical call to close_accept, be sure to never\n+        // If we've had an artificial call to close_accept, be sure to never\n         // proceed in accepting new clients in the future\n         if self.inner.closed.load(atomic::SeqCst) { return Err(util::eof()) }\n "}, {"sha": "cad2ed0b97ec59d4b49a9a44967e62cc6bc20854", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -151,7 +151,7 @@ impl rtio::RtioProcess for Process {\n         #[cfg(unix)] use libc::EINVAL as ERROR;\n         #[cfg(windows)] use libc::ERROR_NOTHING_TO_TERMINATE as ERROR;\n \n-        // On linux (and possibly other unices), a process that has exited will\n+        // On Linux (and possibly other unices), a process that has exited will\n         // continue to accept signals because it is \"defunct\". The delivery of\n         // signals will only fail once the child has been reaped. For this\n         // reason, if the process hasn't exited yet, then we attempt to collect"}, {"sha": "801434f81019f328224482810e8a31bffe5f0607", "filename": "src/libnative/io/timer_unix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibnative%2Fio%2Ftimer_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibnative%2Fio%2Ftimer_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_unix.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Timers for non-linux/non-windows OSes\n+//! Timers for non-Linux/non-Windows OSes\n //!\n //! This module implements timers with a worker thread, select(), and a lot of\n //! witchcraft that turns out to be horribly inaccurate timers. The unfortunate\n //! part is that I'm at a loss of what else to do one these OSes. This is also\n-//! why linux has a specialized timerfd implementation and windows has its own\n+//! why Linux has a specialized timerfd implementation and windows has its own\n //! implementation (they're more accurate than this one).\n //!\n //! The basic idea is that there is a worker thread that's communicated to via a"}, {"sha": "7f344279cd5e4f794e837012296f1a82269c490a", "filename": "src/libnative/io/tty_windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibnative%2Fio%2Ftty_windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibnative%2Fio%2Ftty_windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftty_windows.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -15,7 +15,7 @@\n //! This module contains the implementation of a Windows specific console TTY.\n //! Also converts between UTF-16 and UTF-8. Windows has very poor support for\n //! UTF-8 and some functions will fail. In particular ReadFile and ReadConsole\n-//! will fail when the codepage is set to UTF-8 and a unicode character is\n+//! will fail when the codepage is set to UTF-8 and a Unicode character is\n //! entered.\n //!\n //! FIXME"}, {"sha": "4f849a8a67bc9adc93e7c6c2af871cd81f3f819b", "filename": "src/libregex/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibregex%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibregex%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Flib.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -381,7 +381,7 @@ extern crate rand;\n #[cfg(test)]\n extern crate regex;\n \n-// unicode tables for character classes are defined in libunicode\n+// Unicode tables for character classes are defined in libunicode\n extern crate unicode;\n \n pub use parse::Error;"}, {"sha": "c3ce7bbd9f2cab7040098203e2a0fe91608ffae6", "filename": "src/libregex/parse.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibregex%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibregex%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -620,9 +620,9 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    // Parses a unicode character class name, either of the form \\pF where\n-    // F is a one letter unicode class name or of the form \\p{name} where\n-    // name is the unicode class name.\n+    // Parses a Unicode character class name, either of the form \\pF where\n+    // F is a one letter Unicode class name or of the form \\p{name} where\n+    // name is the Unicode class name.\n     // Assumes that \\p or \\P has been read (and 'p' or 'P' is the current\n     // character).\n     fn parse_unicode_name(&mut self) -> Result<Ast, Error> {"}, {"sha": "1adaf9c92a6ac1474a905e19a95876739e272e19", "filename": "src/libregex/vm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibregex%2Fvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibregex%2Fvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fvm.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -364,7 +364,7 @@ impl<'t> CharReader<'t> {\n     }\n \n     /// Sets the previous and current character given any arbitrary byte\n-    /// index (at a unicode codepoint boundary).\n+    /// index (at a Unicode codepoint boundary).\n     #[inline]\n     pub fn set(&mut self, ic: uint) -> uint {\n         self.prev = None;"}, {"sha": "4e4a28cc538cec958f2745cbcf0ab558e447575c", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -1748,7 +1748,7 @@ fn add_upstream_rust_crates(cmd: &mut Command, sess: &Session,\n         //\n         // We must continue to link to the upstream archives to be sure\n         // to pull in native static dependencies. As the final caveat,\n-        // on linux it is apparently illegal to link to a blank archive,\n+        // on Linux it is apparently illegal to link to a blank archive,\n         // so if an archive no longer has any object files in it after\n         // we remove `lib.o`, then don't link against it at all.\n         //"}, {"sha": "6c6a07f35029f51471ea6c9f70acb46bee83d41b", "filename": "src/librustc/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flto.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -162,7 +162,7 @@ pub fn run(sess: &session::Session, llmod: ModuleRef,\n \n         \"verify\".with_c_str(|s| llvm::LLVMRustAddPass(pm, s));\n \n-        time(sess.time_passes(), \"LTO pases\", (), |()|\n+        time(sess.time_passes(), \"LTO passes\", (), |()|\n              llvm::LLVMRunPassManager(pm, llmod));\n \n         llvm::LLVMDisposePassManager(pm);"}, {"sha": "2a00724cafbe5dc827b6961c2d199a8419923089", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -56,7 +56,7 @@ use std::gc::{Gc, GC};\n //        copies of general constants\n //\n //        (in theory, probably not at first: if/match on integer-const\n-//         conditions / descriminants)\n+//         conditions / discriminants)\n //\n //   - Non-constants: everything else.\n //"}, {"sha": "76e2266fcb92fd28d06bd5a84ec432d0df371805", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -1068,7 +1068,7 @@ pub fn load_ty(cx: &Block, ptr: ValueRef, t: ty::t) -> ValueRef {\n     } else if ty::type_is_bool(t) {\n         Trunc(cx, LoadRangeAssert(cx, ptr, 0, 2, llvm::False), Type::i1(cx.ccx()))\n     } else if ty::type_is_char(t) {\n-        // a char is a unicode codepoint, and so takes values from 0\n+        // a char is a Unicode codepoint, and so takes values from 0\n         // to 0x10FFFF inclusive only.\n         LoadRangeAssert(cx, ptr, 0, 0x10FFFF + 1, llvm::False)\n     } else {"}, {"sha": "8403e84f7b6551e7f97f75dabaa1f5e115c87027", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -740,7 +740,7 @@ pub fn finalize(cx: &CrateContext) {\n             \"Dwarf Version\".with_c_str(\n                 |s| llvm::LLVMRustAddModuleFlag(cx.llmod, s, 2));\n         } else {\n-            // FIXME(#13611) this is a kludge fix because the linux bots have\n+            // FIXME(#13611) this is a kludge fix because the Linux bots have\n             //               gdb 7.4 which doesn't understand dwarf4, we should\n             //               do something more graceful here.\n             \"Dwarf Version\".with_c_str("}, {"sha": "4fe687da4b1945ce2e5d506c1da1aa399ddfa97b", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -1386,7 +1386,7 @@ pub fn trans_adt<'a>(mut bcx: &'a Block<'a>,\n         }\n     }\n \n-    // Now, we just overwrite the fields we've explicity specified\n+    // Now, we just overwrite the fields we've explicitly specified\n     for &(i, ref e) in fields.iter() {\n         let dest = adt::trans_field_ptr(bcx, &*repr, addr, discr, i);\n         let e_ty = expr_ty_adjusted(bcx, &**e);"}, {"sha": "72f6338f4c9c737e10b7fc12ae76d308f3fc8299", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -903,7 +903,7 @@ pub enum sty {\n     /// Substs here, possibly against intuition, *may* contain `ty_param`s.\n     /// That is, even after substitution it is possible that there are type\n     /// variables. This happens when the `ty_enum` corresponds to an enum\n-    /// definition and not a concerete use of it. To get the correct `ty_enum`\n+    /// definition and not a concrete use of it. To get the correct `ty_enum`\n     /// from the tcx, use the `NodeId` from the `ast::Ty` and look it up in\n     /// the `ast_ty_to_ty_cache`. This is probably true for `ty_struct` as\n     /// well.`"}, {"sha": "03e1559cba2bf118117d3ad162e4c78dde38c7f3", "filename": "src/librustc/util/snapshot_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustc%2Futil%2Fsnapshot_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustc%2Futil%2Fsnapshot_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsnapshot_vec.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -148,12 +148,12 @@ impl<T,U,D:SnapshotVecDelegate<T,U>> SnapshotVec<T,U,D> {\n             match self.undo_log.pop().unwrap() {\n                 OpenSnapshot => {\n                     // This indicates a failure to obey the stack discipline.\n-                    fail!(\"Cannot rollback an uncommited snapshot\");\n+                    fail!(\"Cannot rollback an uncommitted snapshot\");\n                 }\n \n                 CommittedSnapshot => {\n                     // This occurs when there are nested snapshots and\n-                    // the inner is commited but outer is rolled back.\n+                    // the inner is committed but outer is rolled back.\n                 }\n \n                 NewElem(i) => {"}, {"sha": "88cd6743192fdbd1c7071c67e969e2f7b3782c5f", "filename": "src/librustc_back/x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustc_back%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustc_back%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fx86_64.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -30,7 +30,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n           }\n \n           abi::OsWindows => {\n-            // FIXME: Test this. Copied from linux (#2398)\n+            // FIXME: Test this. Copied from Linux (#2398)\n             \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n                 f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\\\n                 s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string()"}, {"sha": "74ea5af0f1c048c5339c71d417649c2ec6fb96a9", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -1155,7 +1155,7 @@ impl Context {\n \n             // We have a huge number of calls to write, so try to alleviate some\n             // of the pain by using a buffered writer instead of invoking the\n-            // write sycall all the time.\n+            // write syscall all the time.\n             let mut writer = BufferedWriter::new(w);\n             if !cx.render_redirect_pages {\n                 try!(layout::render(&mut writer, &cx.layout, &page,"}, {"sha": "11d00fa20a41807b8ad911620b4668f2b51b9d10", "filename": "src/librustdoc/stability_summary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustdoc%2Fstability_summary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustdoc%2Fstability_summary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fstability_summary.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -11,7 +11,7 @@\n //! This module crawls a `clean::Crate` and produces a summarization of the\n //! stability levels within the crate. The summary contains the module\n //! hierarchy, with item counts for every stability level per module. A parent\n-//! module's count includes its childrens's.\n+//! module's count includes its children's.\n \n use std::ops::Add;\n use std::num::Zero;"}, {"sha": "4c444036e1db9c892ad14cd7504cefc9e220c2ff", "filename": "src/librustrt/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustrt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustrt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fargs.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -14,7 +14,7 @@\n //! the processes `argc` and `argv` arguments to be stored\n //! in a globally-accessible location for use by the `os` module.\n //!\n-//! Only valid to call on linux. Mac and Windows use syscalls to\n+//! Only valid to call on Linux. Mac and Windows use syscalls to\n //! discover the command line arguments.\n //!\n //! FIXME #7756: Would be nice for this to not exist."}, {"sha": "000def0cc3b626d3b3a838b3a781e2f16baaba57", "filename": "src/librustrt/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustrt%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustrt%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fc_str.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -19,7 +19,7 @@ string types are *not* null terminated.\n \n The other problem with translating Rust strings to C strings is that Rust\n strings can validly contain a null-byte in the middle of the string (0 is a\n-valid unicode codepoint). This means that not all Rust strings can actually be\n+valid Unicode codepoint). This means that not all Rust strings can actually be\n translated to C strings.\n \n # Creation of a C string"}, {"sha": "8ce12a5157de39338ae77c112e725848e645c557", "filename": "src/librustrt/local_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustrt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibrustrt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flocal_ptr.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -107,10 +107,10 @@ pub mod compiled {\n     // efficient sequence of instructions. This also involves dealing with fun\n     // stuff in object files and whatnot. Regardless, it turns out this causes\n     // trouble with green threads and lots of optimizations turned on. The\n-    // following case study was done on linux x86_64, but I would imagine that\n+    // following case study was done on Linux x86_64, but I would imagine that\n     // other platforms are similar.\n     //\n-    // On linux, the instruction sequence for loading the tls pointer global\n+    // On Linux, the instruction sequence for loading the tls pointer global\n     // looks like:\n     //\n     //      mov %fs:0x0, %rax"}, {"sha": "b29200597aa1c03984e8ede35d9ea207eca32e79", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -278,7 +278,7 @@ pub fn error_str(error: ErrorCode) -> &'static str {\n         UnrecognizedHex => \"invalid \\\\u escape (unrecognized hex)\",\n         NotFourDigit => \"invalid \\\\u escape (not four digits)\",\n         NotUtf8 => \"contents not utf-8\",\n-        InvalidUnicodeCodePoint => \"invalid unicode code point\",\n+        InvalidUnicodeCodePoint => \"invalid Unicode code point\",\n         LoneLeadingSurrogateInHexEscape => \"lone leading surrogate in hex escape\",\n         UnexpectedEndOfHexEscape => \"unexpected end of hex escape\",\n     }"}, {"sha": "693a65b442d7b4f9b5915e395dcd7c0b8abd9b98", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -1418,7 +1418,7 @@ pub trait Buffer: Reader {\n     fn consume(&mut self, amt: uint);\n \n     /// Reads the next line of input, interpreted as a sequence of UTF-8\n-    /// encoded unicode codepoints. If a newline is encountered, then the\n+    /// encoded Unicode codepoints. If a newline is encountered, then the\n     /// newline is contained in the returned string.\n     ///\n     /// # Example"}, {"sha": "5a5068f4d01d87c223028c4d90ed619108f3f91a", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -841,7 +841,7 @@ impl<'a, P: GenericPath> Display<'a, P> {\n     /// Returns the path as a possibly-owned string.\n     ///\n     /// If the path is not UTF-8, invalid sequences will be replaced with the\n-    /// unicode replacement char. This involves allocation.\n+    /// Unicode replacement char. This involves allocation.\n     #[inline]\n     pub fn as_maybe_owned(&self) -> MaybeOwned<'a> {\n         String::from_utf8_lossy(if self.filename {"}, {"sha": "c28b6c144a251301731e38633d878d0f9d3a84fc", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -138,7 +138,7 @@ fn demangle(writer: &mut Writer, s: &str) -> IoResult<()> {\n                         \"$RP$\" => \")\",\n                         \"$C$\"  => \",\",\n \n-                        // in theory we can demangle any unicode code point, but\n+                        // in theory we can demangle any Unicode code point, but\n                         // for simplicity we just catch the common ones.\n                         \"$x20\" => \" \",\n                         \"$x27\" => \"'\",\n@@ -461,7 +461,7 @@ mod imp {\n         //\n         // An additionally oddity in this function is that we initialize the\n         // filename via self_exe_name() to pass to libbacktrace. It turns out\n-        // that on linux libbacktrace seamlessly gets the filename of the\n+        // that on Linux libbacktrace seamlessly gets the filename of the\n         // current executable, but this fails on freebsd. by always providing\n         // it, we make sure that libbacktrace never has a reason to not look up\n         // the symbols. The libbacktrace API also states that the filename must\n@@ -631,7 +631,7 @@ mod imp {\n             (val & !1) as libc::uintptr_t\n         }\n \n-        // This function also doesn't exist on android or arm/linux, so make it\n+        // This function also doesn't exist on Android or ARM/Linux, so make it\n         // a no-op\n         #[cfg(target_os = \"android\")]\n         #[cfg(target_os = \"linux\", target_arch = \"arm\")]"}, {"sha": "35a87137115917bac5961a77ddfbc11dd1fb17c5", "filename": "src/libstd/rtdeps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -22,7 +22,7 @@ extern {}\n // LLVM implements the `frem` instruction as a call to `fmod`, which lives in\n // libm. Hence, we must explicitly link to it.\n //\n-// On linux librt and libdl are indirect dependencies via rustrt,\n+// On Linux, librt and libdl are indirect dependencies via rustrt,\n // and binutils 2.22+ won't add them automatically\n #[cfg(target_os = \"linux\")]\n #[link(name = \"dl\")]"}, {"sha": "85aed47265fc3a986fb3c4b06253756fcfa6e88a", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -21,7 +21,7 @@ use result::{Result, Ok, Err};\n \n /// The number of nanoseconds in a microsecond.\n static NANOS_PER_MICRO: i32 = 1000;\n-/// The number of nanosecdons in a millisecond.\n+/// The number of nanoseconds in a millisecond.\n static NANOS_PER_MILLI: i32 = 1000_000;\n /// The number of nanoseconds in seconds.\n static NANOS_PER_SEC: i32 = 1_000_000_000;"}, {"sha": "b3bb01e1d0409881735cc831a04f895e74edbdfe", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -504,7 +504,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         // Right now there is a bug such that for the expression:\n         //      foo(bar(&1))\n         // the lifetime of `1` doesn't outlast the call to `bar`, so it's not\n-        // vald for the call to `foo`. To work around this all arguments to the\n+        // valid for the call to `foo`. To work around this all arguments to the\n         // format! string are shoved into locals. Furthermore, we shove the address\n         // of each variable because we don't want to move out of the arguments\n         // passed to this function."}, {"sha": "da43f08a4e5b117c941f0f33ffa85bad5f231cc8", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -1114,7 +1114,7 @@ impl<'a> StringReader<'a> {\n                 self.bump();\n                 valid &= self.scan_char_or_byte(ch_start, ch, /* ascii_only = */ false, '\"');\n             }\n-            // adjust for the ACSII \" at the start of the literal\n+            // adjust for the ASCII \" at the start of the literal\n             let id = if valid { self.name_from(start_bpos + BytePos(1)) }\n                      else { token::intern(\"??\") };\n             self.bump();"}, {"sha": "d5bc1bfe956fbd14f99fdd6c0aca02f400b2884e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -180,7 +180,7 @@ pub fn to_string(f: |&mut State| -> IoResult<()>) -> String {\n \n // FIXME (Issue #16472): the thing_to_string_impls macro should go away\n // after we revise the syntax::ext::quote::ToToken impls to go directly\n-// to token-trees instea of thing -> string -> token-trees.\n+// to token-trees instead of thing -> string -> token-trees.\n \n macro_rules! thing_to_string_impls {\n     ($to_string:ident) => {"}, {"sha": "7b96cf3c60dffae65c2a9d28fe3fd279287da62f", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -81,9 +81,9 @@ pub fn strs_to_idents(ids: Vec<&str> ) -> Vec<ast::Ident> {\n \n /// Does the given string match the pattern? whitespace in the first string\n /// may be deleted or replaced with other whitespace to match the pattern.\n-/// this function is unicode-ignorant; fortunately, the careful design of\n+/// this function is Unicode-ignorant; fortunately, the careful design of\n /// UTF-8 mitigates this ignorance.  In particular, this function only collapses\n-/// sequences of \\n, \\r, ' ', and \\t, but it should otherwise tolerate unicode\n+/// sequences of \\n, \\r, ' ', and \\t, but it should otherwise tolerate Unicode\n /// chars. Unsurprisingly, it doesn't do NKF-normalization(?).\n pub fn matches_codepattern(a : &str, b : &str) -> bool {\n     let mut idx_a = 0;"}, {"sha": "d866514385452b1b52823488550ee7c6f866f34b", "filename": "src/libunicode/u_char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibunicode%2Fu_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Flibunicode%2Fu_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_char.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -120,7 +120,7 @@ pub fn is_digit(c: char) -> bool {\n /// Convert a char to its uppercase equivalent\n ///\n /// The case-folding performed is the common or simple mapping:\n-/// it maps one unicode codepoint (one char in Rust) to its uppercase equivalent according\n+/// it maps one Unicode codepoint (one char in Rust) to its uppercase equivalent according\n /// to the Unicode database at ftp://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt\n /// The additional SpecialCasing.txt is not considered here, as it expands to multiple\n /// codepoints in some cases.\n@@ -233,7 +233,7 @@ pub trait UnicodeChar {\n     /// Converts a character to its uppercase equivalent.\n     ///\n     /// The case-folding performed is the common or simple mapping: it maps\n-    /// one unicode codepoint (one character in Rust) to its uppercase\n+    /// one Unicode codepoint (one character in Rust) to its uppercase\n     /// equivalent according to the Unicode database [1]. The additional\n     /// `SpecialCasing.txt` is not considered here, as it expands to multiple\n     /// codepoints in some cases."}, {"sha": "7c6d97dd5a317ada8cad431bf800a656cf4bd915", "filename": "src/test/run-make/unicode-input/multiple_files.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -20,7 +20,7 @@ use std::rand::{task_rng, Rng};\n \n fn random_char() -> char {\n     let mut rng = task_rng();\n-    // a subset of the XID_start unicode table (ensuring that the\n+    // a subset of the XID_start Unicode table (ensuring that the\n     // compiler doesn't fail with an \"unrecognised token\" error)\n     let (lo, hi): (u32, u32) = match rng.gen_range(1u32, 4u32 + 1) {\n         1 => (0x41, 0x5a),"}, {"sha": "e213e266548420abb145aa8a4de2739dd0f152d6", "filename": "src/test/run-make/unicode-input/span_length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -19,7 +19,7 @@ use std::rand::{task_rng, Rng};\n \n fn random_char() -> char {\n     let mut rng = task_rng();\n-    // a subset of the XID_start unicode table (ensuring that the\n+    // a subset of the XID_start Unicode table (ensuring that the\n     // compiler doesn't fail with an \"unrecognised token\" error)\n     let (lo, hi): (u32, u32) = match rng.gen_range(1u32, 4u32 + 1) {\n         1 => (0x41, 0x5a),"}, {"sha": "dcafb5f451f3d892f22557ac55d3e749221fa87b", "filename": "src/test/run-pass/no-std-xcrate2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Ftest%2Frun-pass%2Fno-std-xcrate2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Ftest%2Frun-pass%2Fno-std-xcrate2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-std-xcrate2.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test: this has weird linking problems on linux, and it probably needs a\n+// ignore-test: this has weird linking problems on Linux, and it probably needs a\n //             solution along the lines of disabling segmented stacks and/or the\n //             stack checks.\n // aux-build:no_std_crate.rs\n@@ -20,7 +20,7 @@\n \n extern crate no_std_crate;\n \n-// This is an unfortunate thing to have to do on linux :(\n+// This is an unfortunate thing to have to do on Linux :(\n #[cfg(target_os = \"linux\")]\n #[doc(hidden)]\n pub mod linkhack {"}, {"sha": "b5c541b0c6390ea187164e6ed2dce3cf0640cb96", "filename": "src/test/run-pass/nullable-pointer-ffi-compat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Ftest%2Frun-pass%2Fnullable-pointer-ffi-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Ftest%2Frun-pass%2Fnullable-pointer-ffi-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-ffi-compat.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // #11303, #11040:\n-// This would previously crash on i686 linux due to abi differences\n+// This would previously crash on i686 Linux due to abi differences\n // between returning an Option<T> and T, where T is a non nullable\n // pointer.\n // If we have an enum with two variants such that one is zero sized"}, {"sha": "0fc20ef66b3567237888044f8ad38e416505f20a", "filename": "src/test/run-pass/tag-align-dyn-u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Ftest%2Frun-pass%2Ftag-align-dyn-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Ftest%2Frun-pass%2Ftag-align-dyn-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-dyn-u64.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-linux #7340 fails on 32-bit linux\n+// ignore-linux #7340 fails on 32-bit Linux\n // ignore-macos #7340 fails on 32-bit macos\n \n use std::mem;"}, {"sha": "130c2c5e2e381757045d273e769ac9f605ba7a06", "filename": "src/test/run-pass/tag-align-dyn-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-linux #7340 fails on 32-bit linux\n+// ignore-linux #7340 fails on 32-bit Linux\n // ignore-macos #7340 fails on 32-bit macos\n \n use std::mem;"}, {"sha": "8942e0b6b5d54b22cdd81796dc3735a7583a3084", "filename": "src/test/run-pass/tag-align-u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs?ref=d3e7922ddd5f2abfa4d5139e8bca5fab3e796f33", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-linux #7340 fails on 32-bit linux\n+// ignore-linux #7340 fails on 32-bit Linux\n // ignore-macos #7340 fails on 32-bit macos\n \n use std::mem;"}]}