{"sha": "df8fc78eced2a720d26592a1540140aabc37c85a", "node_id": "C_kwDOAAsO6NoAKGRmOGZjNzhlY2VkMmE3MjBkMjY1OTJhMTU0MDE0MGFhYmMzN2M4NWE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-12-23T10:28:46Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-12-23T10:37:42Z"}, "message": "Enum variant discriminants hints", "tree": {"sha": "b019ec0d03d97c0a3f1858c555802dabe51d48ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b019ec0d03d97c0a3f1858c555802dabe51d48ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df8fc78eced2a720d26592a1540140aabc37c85a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df8fc78eced2a720d26592a1540140aabc37c85a", "html_url": "https://github.com/rust-lang/rust/commit/df8fc78eced2a720d26592a1540140aabc37c85a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df8fc78eced2a720d26592a1540140aabc37c85a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b48a1ae004b4116377b80c98407c0164c4492d5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b48a1ae004b4116377b80c98407c0164c4492d5f", "html_url": "https://github.com/rust-lang/rust/commit/b48a1ae004b4116377b80c98407c0164c4492d5f"}], "stats": {"total": 219, "additions": 217, "deletions": 2}, "files": [{"sha": "073252e17bdfae012eea124ccf7a26f9bfe88ff8", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/df8fc78eced2a720d26592a1540140aabc37c85a/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df8fc78eced2a720d26592a1540140aabc37c85a/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=df8fc78eced2a720d26592a1540140aabc37c85a", "patch": "@@ -24,12 +24,14 @@ mod chaining;\n mod param_name;\n mod binding_mode;\n mod bind_pat;\n+mod discrimant;\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct InlayHintsConfig {\n     pub location_links: bool,\n     pub render_colons: bool,\n     pub type_hints: bool,\n+    pub discriminant_hints: DiscriminantHints,\n     pub parameter_hints: bool,\n     pub chaining_hints: bool,\n     pub adjustment_hints: AdjustmentHints,\n@@ -51,6 +53,13 @@ pub enum ClosureReturnTypeHints {\n     Never,\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub enum DiscriminantHints {\n+    Always,\n+    Never,\n+    Fieldless,\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum LifetimeElisionHints {\n     Always,\n@@ -76,6 +85,7 @@ pub enum InlayKind {\n     LifetimeHint,\n     ParameterHint,\n     TypeHint,\n+    DiscriminantHint,\n     OpeningParenthesis,\n     ClosingParenthesis,\n }\n@@ -365,6 +375,9 @@ fn hints(\n                 ast::Item::Const(it) => implicit_static::hints(hints, config, Either::Right(it)),\n                 _ => None,\n             },\n+            ast::Variant(v) => {\n+                discrimant::hints(hints, famous_defs, config, file_id, &v)\n+            },\n             // FIXME: fn-ptr type, dyn fn type, and trait object type elisions\n             ast::Type(_) => None,\n             _ => None,\n@@ -418,12 +431,14 @@ mod tests {\n     use test_utils::extract_annotations;\n \n     use crate::inlay_hints::AdjustmentHints;\n+    use crate::DiscriminantHints;\n     use crate::{fixture, inlay_hints::InlayHintsConfig, LifetimeElisionHints};\n \n     use super::ClosureReturnTypeHints;\n \n     pub(super) const DISABLED_CONFIG: InlayHintsConfig = InlayHintsConfig {\n         location_links: false,\n+        discriminant_hints: DiscriminantHints::Never,\n         render_colons: false,\n         type_hints: false,\n         parameter_hints: false,"}, {"sha": "f32c4bdf2883c03cfdc47f11dbecbc9d84260d3b", "filename": "crates/ide/src/inlay_hints/discrimant.rs", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/df8fc78eced2a720d26592a1540140aabc37c85a/crates%2Fide%2Fsrc%2Finlay_hints%2Fdiscrimant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df8fc78eced2a720d26592a1540140aabc37c85a/crates%2Fide%2Fsrc%2Finlay_hints%2Fdiscrimant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fdiscrimant.rs?ref=df8fc78eced2a720d26592a1540140aabc37c85a", "patch": "@@ -0,0 +1,142 @@\n+//! Implementation of \"enum variant discriminant\" inlay hints:\n+//! ```no_run\n+//! enum Foo {\n+//!    Bar/* = 0*/,\n+//! }\n+//! ```\n+use ide_db::{base_db::FileId, famous_defs::FamousDefs};\n+use syntax::ast::{self, AstNode, HasName};\n+\n+use crate::{DiscriminantHints, InlayHint, InlayHintsConfig, InlayKind, InlayTooltip};\n+\n+pub(super) fn hints(\n+    acc: &mut Vec<InlayHint>,\n+    FamousDefs(sema, _): &FamousDefs<'_, '_>,\n+    config: &InlayHintsConfig,\n+    _: FileId,\n+    variant: &ast::Variant,\n+) -> Option<()> {\n+    let field_list = match config.discriminant_hints {\n+        DiscriminantHints::Always => variant.field_list(),\n+        DiscriminantHints::Fieldless => match variant.field_list() {\n+            Some(_) => return None,\n+            None => None,\n+        },\n+        DiscriminantHints::Never => return None,\n+    };\n+\n+    if variant.eq_token().is_some() {\n+        return None;\n+    }\n+\n+    let name = variant.name()?;\n+\n+    let descended = sema.descend_node_into_attributes(variant.clone()).pop();\n+    let desc_pat = descended.as_ref().unwrap_or(variant);\n+    let v = sema.to_def(desc_pat)?;\n+    let d = v.eval(sema.db);\n+\n+    acc.push(InlayHint {\n+        range: match field_list {\n+            Some(field_list) => name.syntax().text_range().cover(field_list.syntax().text_range()),\n+            None => name.syntax().text_range(),\n+        },\n+        kind: InlayKind::DiscriminantHint,\n+        label: match &d {\n+            Ok(v) => format!(\"{}\", v).into(),\n+            Err(_) => \"?\".into(),\n+        },\n+        tooltip: Some(InlayTooltip::String(match &d {\n+            Ok(_) => \"enum variant discriminant\".into(),\n+            Err(e) => format!(\"{e:?}\").into(),\n+        })),\n+    });\n+\n+    Some(())\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::inlay_hints::{\n+        tests::{check_with_config, DISABLED_CONFIG},\n+        DiscriminantHints, InlayHintsConfig,\n+    };\n+\n+    #[track_caller]\n+    fn check_discriminants(ra_fixture: &str) {\n+        check_with_config(\n+            InlayHintsConfig { discriminant_hints: DiscriminantHints::Always, ..DISABLED_CONFIG },\n+            ra_fixture,\n+        );\n+    }\n+\n+    #[track_caller]\n+    fn check_discriminants_fieldless(ra_fixture: &str) {\n+        check_with_config(\n+            InlayHintsConfig {\n+                discriminant_hints: DiscriminantHints::Fieldless,\n+                ..DISABLED_CONFIG\n+            },\n+            ra_fixture,\n+        );\n+    }\n+\n+    #[test]\n+    fn fieldless() {\n+        check_discriminants(\n+            r#\"\n+enum Enum {\n+    Variant,\n+  //^^^^^^^0\n+    Variant1,\n+  //^^^^^^^^1\n+    Variant2,\n+  //^^^^^^^^2\n+    Variant5 = 5,\n+    Variant6,\n+  //^^^^^^^^6\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn datacarrying_mixed() {\n+        check_discriminants(\n+            r#\"\n+enum Enum {\n+    Variant(),\n+  //^^^^^^^^^0\n+    Variant1,\n+  //^^^^^^^^1\n+    Variant2 {},\n+  //^^^^^^^^^^^2\n+    Variant3,\n+  //^^^^^^^^3\n+    Variant5 = 5,\n+    Variant6,\n+  //^^^^^^^^6\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn datacarrying_mixed_fieldless_set() {\n+        check_discriminants_fieldless(\n+            r#\"\n+enum Enum {\n+    Variant(),\n+    Variant1,\n+  //^^^^^^^^1\n+    Variant2 {},\n+    Variant3,\n+  //^^^^^^^^3\n+    Variant5 = 5,\n+    Variant6,\n+  //^^^^^^^^6\n+}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "200958a43300a28d437c252ae37cf3a58f8ad0a7", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df8fc78eced2a720d26592a1540140aabc37c85a/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df8fc78eced2a720d26592a1540140aabc37c85a/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=df8fc78eced2a720d26592a1540140aabc37c85a", "patch": "@@ -81,8 +81,8 @@ pub use crate::{\n     highlight_related::{HighlightRelatedConfig, HighlightedRange},\n     hover::{HoverAction, HoverConfig, HoverDocFormat, HoverGotoTypeData, HoverResult},\n     inlay_hints::{\n-        AdjustmentHints, ClosureReturnTypeHints, InlayHint, InlayHintLabel, InlayHintsConfig,\n-        InlayKind, InlayTooltip, LifetimeElisionHints,\n+        AdjustmentHints, ClosureReturnTypeHints, DiscriminantHints, InlayHint, InlayHintLabel,\n+        InlayHintsConfig, InlayKind, InlayTooltip, LifetimeElisionHints,\n     },\n     join_lines::JoinLinesConfig,\n     markup::Markup,"}, {"sha": "331ff822657e91fcda2f016b2f1b5fc6f7d9eca3", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df8fc78eced2a720d26592a1540140aabc37c85a/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df8fc78eced2a720d26592a1540140aabc37c85a/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=df8fc78eced2a720d26592a1540140aabc37c85a", "patch": "@@ -108,6 +108,7 @@ impl StaticIndex<'_> {\n                 &InlayHintsConfig {\n                     location_links: true,\n                     render_colons: true,\n+                    discriminant_hints: crate::DiscriminantHints::Fieldless,\n                     type_hints: true,\n                     parameter_hints: true,\n                     chaining_hints: true,"}, {"sha": "0fe4c2bb9999bc53634d79df11a269077b7eab93", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/df8fc78eced2a720d26592a1540140aabc37c85a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df8fc78eced2a720d26592a1540140aabc37c85a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=df8fc78eced2a720d26592a1540140aabc37c85a", "patch": "@@ -327,6 +327,8 @@ config_data! {\n         inlayHints_closingBraceHints_minLines: usize               = \"25\",\n         /// Whether to show inlay type hints for return types of closures.\n         inlayHints_closureReturnTypeHints_enable: ClosureReturnTypeHintsDef  = \"\\\"never\\\"\",\n+        /// Whether to show enum variant discriminant hints.\n+        inlayHints_discriminantHints_enable: DiscriminantHintsDef            = \"\\\"never\\\"\",\n         /// Whether to show inlay hints for type adjustments.\n         inlayHints_expressionAdjustmentHints_enable: AdjustmentHintsDef = \"\\\"never\\\"\",\n         /// Whether to hide inlay hints for type adjustments outside of `unsafe` blocks.\n@@ -1218,6 +1220,11 @@ impl Config {\n             type_hints: self.data.inlayHints_typeHints_enable,\n             parameter_hints: self.data.inlayHints_parameterHints_enable,\n             chaining_hints: self.data.inlayHints_chainingHints_enable,\n+            discriminant_hints: match self.data.inlayHints_discriminantHints_enable {\n+                DiscriminantHintsDef::Always => ide::DiscriminantHints::Always,\n+                DiscriminantHintsDef::Never => ide::DiscriminantHints::Never,\n+                DiscriminantHintsDef::Fieldless => ide::DiscriminantHints::Fieldless,\n+            },\n             closure_return_type_hints: match self.data.inlayHints_closureReturnTypeHints_enable {\n                 ClosureReturnTypeHintsDef::Always => ide::ClosureReturnTypeHints::Always,\n                 ClosureReturnTypeHintsDef::Never => ide::ClosureReturnTypeHints::Never,\n@@ -1579,6 +1586,7 @@ mod de_unit_v {\n     named_unit_variant!(skip_trivial);\n     named_unit_variant!(mutable);\n     named_unit_variant!(reborrow);\n+    named_unit_variant!(fieldless);\n     named_unit_variant!(with_block);\n }\n \n@@ -1742,6 +1750,17 @@ enum AdjustmentHintsDef {\n     Reborrow,\n }\n \n+#[derive(Deserialize, Debug, Clone)]\n+#[serde(untagged)]\n+enum DiscriminantHintsDef {\n+    #[serde(deserialize_with = \"true_or_always\")]\n+    Always,\n+    #[serde(deserialize_with = \"false_or_never\")]\n+    Never,\n+    #[serde(deserialize_with = \"de_unit_v::fieldless\")]\n+    Fieldless,\n+}\n+\n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n enum FilesWatcherDef {\n@@ -2064,6 +2083,19 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n                 \"Only show auto borrow and dereference adjustment hints.\"\n             ]\n         },\n+        \"DiscriminantHintsDef\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\n+                \"always\",\n+                \"never\",\n+                \"fieldless\"\n+            ],\n+            \"enumDescriptions\": [\n+                \"Always show all discriminant hints.\",\n+                \"Never show discriminant hints.\",\n+                \"Only show discriminant hints on fieldless enum variants.\"\n+            ]\n+        },\n         \"CargoFeaturesDef\" => set! {\n             \"anyOf\": [\n                 {"}, {"sha": "0a11aaf3af7dd55e2005185604c03e3941862825", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df8fc78eced2a720d26592a1540140aabc37c85a/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df8fc78eced2a720d26592a1540140aabc37c85a/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=df8fc78eced2a720d26592a1540140aabc37c85a", "patch": "@@ -434,6 +434,7 @@ pub(crate) fn inlay_hint(\n         InlayKind::ParameterHint if render_colons => inlay_hint.label.append_str(\":\"),\n         InlayKind::TypeHint if render_colons => inlay_hint.label.prepend_str(\": \"),\n         InlayKind::ClosureReturnTypeHint => inlay_hint.label.prepend_str(\" -> \"),\n+        InlayKind::DiscriminantHint => inlay_hint.label.prepend_str(\" = \"),\n         _ => {}\n     }\n \n@@ -447,6 +448,7 @@ pub(crate) fn inlay_hint(\n             // after annotated thing\n             InlayKind::ClosureReturnTypeHint\n             | InlayKind::TypeHint\n+            | InlayKind::DiscriminantHint\n             | InlayKind::ChainingHint\n             | InlayKind::GenericParamListHint\n             | InlayKind::ClosingParenthesis\n@@ -457,6 +459,7 @@ pub(crate) fn inlay_hint(\n             InlayKind::TypeHint => !render_colons,\n             InlayKind::ChainingHint | InlayKind::ClosingBraceHint => true,\n             InlayKind::ClosingParenthesis\n+            | InlayKind::DiscriminantHint\n             | InlayKind::OpeningParenthesis\n             | InlayKind::BindingModeHint\n             | InlayKind::ClosureReturnTypeHint\n@@ -473,6 +476,7 @@ pub(crate) fn inlay_hint(\n             | InlayKind::GenericParamListHint\n             | InlayKind::AdjustmentHint\n             | InlayKind::TypeHint\n+            | InlayKind::DiscriminantHint\n             | InlayKind::ClosingBraceHint => false,\n             InlayKind::BindingModeHint => inlay_hint.label.as_simple_str() != Some(\"&\"),\n             InlayKind::ParameterHint | InlayKind::LifetimeHint => true,\n@@ -483,6 +487,7 @@ pub(crate) fn inlay_hint(\n                 Some(lsp_types::InlayHintKind::TYPE)\n             }\n             InlayKind::ClosingParenthesis\n+            | InlayKind::DiscriminantHint\n             | InlayKind::OpeningParenthesis\n             | InlayKind::BindingModeHint\n             | InlayKind::GenericParamListHint"}, {"sha": "91f8e98449ecff18693b5a207a0d7866a56ef804", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df8fc78eced2a720d26592a1540140aabc37c85a/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/df8fc78eced2a720d26592a1540140aabc37c85a/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=df8fc78eced2a720d26592a1540140aabc37c85a", "patch": "@@ -454,6 +454,11 @@ to always show them).\n --\n Whether to show inlay type hints for return types of closures.\n --\n+[[rust-analyzer.inlayHints.discriminantHints.enable]]rust-analyzer.inlayHints.discriminantHints.enable (default: `\"never\"`)::\n++\n+--\n+Whether to show enum variant discriminant hints.\n+--\n [[rust-analyzer.inlayHints.expressionAdjustmentHints.enable]]rust-analyzer.inlayHints.expressionAdjustmentHints.enable (default: `\"never\"`)::\n +\n --"}, {"sha": "b45058a6cf3d25f1181f8d3a3b0aa7c86f911fb3", "filename": "editors/code/package.json", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/df8fc78eced2a720d26592a1540140aabc37c85a/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/df8fc78eced2a720d26592a1540140aabc37c85a/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=df8fc78eced2a720d26592a1540140aabc37c85a", "patch": "@@ -960,6 +960,21 @@\n                         \"Only show type hints for return types of closures with blocks.\"\n                     ]\n                 },\n+                \"rust-analyzer.inlayHints.discriminantHints.enable\": {\n+                    \"markdownDescription\": \"Whether to show enum variant discriminant hints.\",\n+                    \"default\": \"never\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"always\",\n+                        \"never\",\n+                        \"fieldless\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Always show all discriminant hints.\",\n+                        \"Never show discriminant hints.\",\n+                        \"Only show discriminant hints on fieldless enum variants.\"\n+                    ]\n+                },\n                 \"rust-analyzer.inlayHints.expressionAdjustmentHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay hints for type adjustments.\",\n                     \"default\": \"never\","}]}