{"sha": "44cfa7823d25ca52e42e23aad7dec22e4626f892", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0Y2ZhNzgyM2QyNWNhNTJlNDJlMjNhYWQ3ZGVjMjJlNDYyNmY4OTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-26T21:55:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-26T21:55:42Z"}, "message": "Rollup merge of #63317 - estebank:dead-code, r=matthewjasper\n\nDo not complain about unused code when used in `impl` `Self` type\n\nFix https://github.com/rust-lang/rust/issues/18290.", "tree": {"sha": "aac345103a9fa061d9927a55dd728cd875ca769f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aac345103a9fa061d9927a55dd728cd875ca769f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44cfa7823d25ca52e42e23aad7dec22e4626f892", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdZFVfCRBK7hj4Ov3rIwAAdHIIAApwGcBD40cMPPkVE3+Ks/KE\na7ak4bd+49f+M+sVp27d39oQn/1DP+VqMLInip9a4QIxJAXNivf6YcgPXPlJHOUi\nybmSUgE7T4aHKaBRk5/v7axtlSp5DaX10Uwn/7pCH0RxZEH3mbMRR+Q063IAb2em\nlkeP+Zm1R1Uevub/P4h8w3dC/DjyDv+kTJDvGlZb8BNuPVvHWuNC3WDNCOpgBJEm\nXyrbIK4pyRUVBZYLBj1jFD8rIN7PIXVFwDHDUlXryobAY58e21payqDW9EJQ0bky\n2RulhZy+ieoUQRmqNqsysyorK+O+72fzEJEQQ01iyP8jVDbt4Z9yTJniziey6zY=\n=2+de\n-----END PGP SIGNATURE-----\n", "payload": "tree aac345103a9fa061d9927a55dd728cd875ca769f\nparent 9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06\nparent 7def99af8a311139c43c961e13872ff27dd235c7\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1566856542 +0200\ncommitter GitHub <noreply@github.com> 1566856542 +0200\n\nRollup merge of #63317 - estebank:dead-code, r=matthewjasper\n\nDo not complain about unused code when used in `impl` `Self` type\n\nFix https://github.com/rust-lang/rust/issues/18290.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44cfa7823d25ca52e42e23aad7dec22e4626f892", "html_url": "https://github.com/rust-lang/rust/commit/44cfa7823d25ca52e42e23aad7dec22e4626f892", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44cfa7823d25ca52e42e23aad7dec22e4626f892/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06", "html_url": "https://github.com/rust-lang/rust/commit/9b91b9c10e3c87ed333a1e34c4f46ed68f1eee06"}, {"sha": "7def99af8a311139c43c961e13872ff27dd235c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7def99af8a311139c43c961e13872ff27dd235c7", "html_url": "https://github.com/rust-lang/rust/commit/7def99af8a311139c43c961e13872ff27dd235c7"}], "stats": {"total": 192, "additions": 172, "deletions": 20}, "files": [{"sha": "d4805a7c7832252731a46186446e7c35298d4a43", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=44cfa7823d25ca52e42e23aad7dec22e4626f892", "patch": "@@ -30,10 +30,11 @@ fn should_explore(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> bool {\n         Some(Node::Item(..)) |\n         Some(Node::ImplItem(..)) |\n         Some(Node::ForeignItem(..)) |\n-        Some(Node::TraitItem(..)) =>\n-            true,\n-        _ =>\n-            false\n+        Some(Node::TraitItem(..)) |\n+        Some(Node::Variant(..)) |\n+        Some(Node::AnonConst(..)) |\n+        Some(Node::Pat(..)) => true,\n+        _ => false\n     }\n }\n \n@@ -75,7 +76,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                 self.check_def_id(res.def_id());\n             }\n             _ if self.in_pat => {},\n-            Res::PrimTy(..) | Res::SelfTy(..) | Res::SelfCtor(..) |\n+            Res::PrimTy(..) | Res::SelfCtor(..) |\n             Res::Local(..) => {}\n             Res::Def(DefKind::Ctor(CtorOf::Variant, ..), ctor_def_id) => {\n                 let variant_id = self.tcx.parent(ctor_def_id).unwrap();\n@@ -92,6 +93,14 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                     self.check_def_id(variant_id);\n                 }\n             }\n+            Res::SelfTy(t, i) => {\n+                if let Some(t) = t {\n+                    self.check_def_id(t);\n+                }\n+                if let Some(i) = i {\n+                    self.check_def_id(i);\n+                }\n+            }\n             Res::ToolMod | Res::NonMacroAttr(..) | Res::Err => {}\n             _ => {\n                 self.check_def_id(res.def_id());\n@@ -271,7 +280,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n                 let res = self.tables.qpath_res(path, pat.hir_id);\n                 self.handle_field_pattern_match(pat, res, fields);\n             }\n-            PatKind::Path(ref qpath @ hir::QPath::TypeRelative(..)) => {\n+            PatKind::Path(ref qpath) => {\n                 let res = self.tables.qpath_res(qpath, pat.hir_id);\n                 self.handle_res(res);\n             }\n@@ -298,6 +307,11 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n         }\n         intravisit::walk_ty(self, ty);\n     }\n+\n+    fn visit_anon_const(&mut self, c: &'tcx hir::AnonConst) {\n+        self.live_symbols.insert(c.hir_id);\n+        intravisit::walk_anon_const(self, c);\n+    }\n }\n \n fn has_allow_dead_code_or_lang_attr("}, {"sha": "010464adf5bce7c441462453bb5301eab4b0209c", "filename": "src/test/ui/derive-uninhabited-enum-38885.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.rs?ref=44cfa7823d25ca52e42e23aad7dec22e4626f892", "patch": "@@ -5,12 +5,15 @@\n // when deriving Debug on an empty enum\n \n #[derive(Debug)]\n-enum Void {} //~ WARN never used\n+enum Void {}\n \n #[derive(Debug)]\n-enum Foo { //~ WARN never used\n+enum Foo {\n     Bar(u8),\n-    Void(Void),\n+    Void(Void), //~ WARN never used\n }\n \n-fn main() {}\n+fn main() {\n+    let x = Foo::Bar(42);\n+    println!(\"{:?}\", x);\n+}"}, {"sha": "a3ed6798a7039cf00974a8f724c5bbba079fb95c", "filename": "src/test/ui/derive-uninhabited-enum-38885.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr?ref=44cfa7823d25ca52e42e23aad7dec22e4626f892", "patch": "@@ -1,14 +1,8 @@\n-warning: enum is never used: `Void`\n-  --> $DIR/derive-uninhabited-enum-38885.rs:8:1\n+warning: variant is never constructed: `Void`\n+  --> $DIR/derive-uninhabited-enum-38885.rs:13:5\n    |\n-LL | enum Void {}\n-   | ^^^^^^^^^\n+LL |     Void(Void),\n+   |     ^^^^^^^^^^\n    |\n    = note: `-W dead-code` implied by `-W unused`\n \n-warning: enum is never used: `Foo`\n-  --> $DIR/derive-uninhabited-enum-38885.rs:11:1\n-   |\n-LL | enum Foo {\n-   | ^^^^^^^^\n-"}, {"sha": "1a7b3f43cda145ef9e6941f7860138479b9605a8", "filename": "src/test/ui/lint/lint-dead-code-const-and-self.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Flint%2Flint-dead-code-const-and-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Flint%2Flint-dead-code-const-and-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-dead-code-const-and-self.rs?ref=44cfa7823d25ca52e42e23aad7dec22e4626f892", "patch": "@@ -0,0 +1,35 @@\n+// check-pass\n+\n+#![deny(dead_code)]\n+\n+const TLC: usize = 4;\n+\n+trait Tr { fn doit(&self); }\n+\n+impl Tr for [usize; TLC] {\n+    fn doit(&self) {\n+        println!(\"called 4\");\n+    }\n+}\n+\n+struct X;\n+struct Y;\n+struct Z;\n+\n+trait Foo<T> {\n+    type Ty;\n+    fn foo() -> Self::Ty;\n+}\n+\n+impl Foo<Y> for X {\n+    type Ty = Z;\n+    fn foo() -> Self::Ty {\n+        unimplemented!()\n+    }\n+}\n+\n+fn main() {\n+    let s = [0,1,2,3];\n+    s.doit();\n+    X::foo();\n+}"}, {"sha": "15b04496ba7b1568ee4144f8b70eb9658c2a182c", "filename": "src/test/ui/lint/lint-dead-code-empty-unused-enum-pub.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Flint%2Flint-dead-code-empty-unused-enum-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Flint%2Flint-dead-code-empty-unused-enum-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-dead-code-empty-unused-enum-pub.rs?ref=44cfa7823d25ca52e42e23aad7dec22e4626f892", "patch": "@@ -0,0 +1,6 @@\n+// build-pass\n+#![deny(unused)]\n+\n+pub enum E {}\n+\n+fn main() {}"}, {"sha": "834681d77e613a9309ae1c510556e86b57ddac02", "filename": "src/test/ui/lint/lint-dead-code-empty-unused-enum.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Flint%2Flint-dead-code-empty-unused-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Flint%2Flint-dead-code-empty-unused-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-dead-code-empty-unused-enum.rs?ref=44cfa7823d25ca52e42e23aad7dec22e4626f892", "patch": "@@ -0,0 +1,5 @@\n+#![deny(unused)]\n+\n+enum E {} //~ ERROR enum is never used\n+\n+fn main() {}"}, {"sha": "4e3bebfc48bde95448bd9e3045cecae36e914828", "filename": "src/test/ui/lint/lint-dead-code-empty-unused-enum.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Flint%2Flint-dead-code-empty-unused-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Flint%2Flint-dead-code-empty-unused-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-dead-code-empty-unused-enum.stderr?ref=44cfa7823d25ca52e42e23aad7dec22e4626f892", "patch": "@@ -0,0 +1,15 @@\n+error: enum is never used: `E`\n+  --> $DIR/lint-dead-code-empty-unused-enum.rs:3:1\n+   |\n+LL | enum E {}\n+   | ^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/lint-dead-code-empty-unused-enum.rs:1:9\n+   |\n+LL | #![deny(unused)]\n+   |         ^^^^^^\n+   = note: `#[deny(dead_code)]` implied by `#[deny(unused)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e57fac259c5d55f2f86fd7520bebb0cff35fb46b", "filename": "src/test/ui/lint/lint-dead-code-unused-enum.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-enum.rs?ref=44cfa7823d25ca52e42e23aad7dec22e4626f892", "patch": "@@ -0,0 +1,11 @@\n+#![deny(unused)]\n+\n+struct F; //~ ERROR struct is never constructed\n+struct B; //~ ERROR struct is never constructed\n+\n+enum E { //~ ERROR enum is never used\n+    Foo(F),\n+    Bar(B),\n+}\n+\n+fn main() {}"}, {"sha": "ea711e7b05ee69e384952822a057dd7f5393af81", "filename": "src/test/ui/lint/lint-dead-code-unused-enum.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-enum.stderr?ref=44cfa7823d25ca52e42e23aad7dec22e4626f892", "patch": "@@ -0,0 +1,27 @@\n+error: struct is never constructed: `F`\n+  --> $DIR/lint-dead-code-unused-enum.rs:3:1\n+   |\n+LL | struct F;\n+   | ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/lint-dead-code-unused-enum.rs:1:9\n+   |\n+LL | #![deny(unused)]\n+   |         ^^^^^^\n+   = note: `#[deny(dead_code)]` implied by `#[deny(unused)]`\n+\n+error: struct is never constructed: `B`\n+  --> $DIR/lint-dead-code-unused-enum.rs:4:1\n+   |\n+LL | struct B;\n+   | ^^^^^^^^^\n+\n+error: enum is never used: `E`\n+  --> $DIR/lint-dead-code-unused-enum.rs:6:1\n+   |\n+LL | enum E {\n+   | ^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "3a9061340eb812a66844cf2a198d334780d9afa6", "filename": "src/test/ui/lint/lint-dead-code-unused-variant-pub.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-variant-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-variant-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-variant-pub.rs?ref=44cfa7823d25ca52e42e23aad7dec22e4626f892", "patch": "@@ -0,0 +1,14 @@\n+// build-pass\n+#![deny(unused)]\n+\n+pub struct F;\n+pub struct B;\n+\n+pub enum E {\n+    Foo(F),\n+    Bar(B),\n+}\n+\n+fn main() {\n+    let _ = E::Foo(F);\n+}"}, {"sha": "69ab29042e5a4594af22ae47c115a02abff112d1", "filename": "src/test/ui/lint/lint-dead-code-unused-variant.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-variant.rs?ref=44cfa7823d25ca52e42e23aad7dec22e4626f892", "patch": "@@ -0,0 +1,13 @@\n+#![deny(unused)]\n+\n+struct F;\n+struct B;\n+\n+enum E {\n+    Foo(F),\n+    Bar(B), //~ ERROR variant is never constructed\n+}\n+\n+fn main() {\n+    let _ = E::Foo(F);\n+}"}, {"sha": "919996ec3002094d5df4e3fef59c8a2a42e32d3d", "filename": "src/test/ui/lint/lint-dead-code-unused-variant.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44cfa7823d25ca52e42e23aad7dec22e4626f892/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-dead-code-unused-variant.stderr?ref=44cfa7823d25ca52e42e23aad7dec22e4626f892", "patch": "@@ -0,0 +1,15 @@\n+error: variant is never constructed: `Bar`\n+  --> $DIR/lint-dead-code-unused-variant.rs:8:5\n+   |\n+LL |     Bar(B),\n+   |     ^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/lint-dead-code-unused-variant.rs:1:9\n+   |\n+LL | #![deny(unused)]\n+   |         ^^^^^^\n+   = note: `#[deny(dead_code)]` implied by `#[deny(unused)]`\n+\n+error: aborting due to previous error\n+"}]}