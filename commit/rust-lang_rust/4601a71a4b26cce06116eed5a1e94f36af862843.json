{"sha": "4601a71a4b26cce06116eed5a1e94f36af862843", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MDFhNzFhNGIyNmNjZTA2MTE2ZWVkNWExZTk0ZjM2YWY4NjI4NDM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-09-16T17:57:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-16T17:57:22Z"}, "message": "Rollup merge of #88983 - willcrichton:allow-single-polonius-call, r=ecstatic-morse\n\nAllow calling `get_body_with_borrowck_facts` without `-Z polonius`\n\nFor my [static analysis tool](https://github.com/willcrichton/flowistry), I need to access the set of outlives-constraints. Recently, #86977 merged a way to access these facts via Polonius. However, the merged implementation requires `-Z polonius` to be provided to use this feature. This uses Polonius for borrow checking on the entire crate, which as described [here](https://rust-lang.zulipchat.com/#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20performance.20in.20a.20rustc.20plugin/near/251301631), is very slow.\n\nThis PR allows `get_body_with_borrowck_facts` to be called without `-Z polonius`. This is essential for my tool to run in a sensible length of time. This is a temporary patch as the Polonius-related APIs develop -- I can update my code as future changes happen.\n\nAdditionally, this PR also makes public two APIs that were previously public but then became private after `rustc_mir` got broken up: `rustc_mir_dataflow::framework::graphviz` and `rustc_mir_transform::MirPass`. I need both of these for my analysis tool. (I can break this change into a separate PR if necessary.)", "tree": {"sha": "bf4f699344f3095a970420c6d4d1fce1c13b2078", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf4f699344f3095a970420c6d4d1fce1c13b2078"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4601a71a4b26cce06116eed5a1e94f36af862843", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhQ4WCCRBK7hj4Ov3rIwAASCsIAAgFYIVViAoYjRCamNPPbIs0\neBc1jX97vuGE+YH0NfOa6NMkkZRLDlMgcci3gAf9yZwbA3uInGITj7dkM5CNNiir\nuYeg0P1xtEb5kwRNqqxoIRP/JFUQ2UYYej+oG8OZ+RJAPCP3gc7IDr2KuKWcXUhC\ns+H4UP4J3Y9fkI+6dOOvefSEO8bCQeUCgfGebBavA+OH4VnUKrmKnnbaz/F8O+tJ\nqZ9pQdABdelf8K0oHSB7XhoqXZdIV5khq2DyOTJKwie6OtfU5LGleRp+aQ9U5C4N\ngHPk2E5qgGlXHQYkoJaRUqewEuEp06HvRscWVmXB6oIapnvN8Dkwm8e61LZbjcw=\n=hM1d\n-----END PGP SIGNATURE-----\n", "payload": "tree bf4f699344f3095a970420c6d4d1fce1c13b2078\nparent 06dbc284a81b6b85cfa0a4a208b2b2225895a976\nparent 47104a34a67444a086fd38c82e005f316f7f567a\nauthor Manish Goregaokar <manishsmail@gmail.com> 1631815042 -0700\ncommitter GitHub <noreply@github.com> 1631815042 -0700\n\nRollup merge of #88983 - willcrichton:allow-single-polonius-call, r=ecstatic-morse\n\nAllow calling `get_body_with_borrowck_facts` without `-Z polonius`\n\nFor my [static analysis tool](https://github.com/willcrichton/flowistry), I need to access the set of outlives-constraints. Recently, #86977 merged a way to access these facts via Polonius. However, the merged implementation requires `-Z polonius` to be provided to use this feature. This uses Polonius for borrow checking on the entire crate, which as described [here](https://rust-lang.zulipchat.com/#narrow/stream/186049-t-compiler.2Fwg-polonius/topic/Polonius.20performance.20in.20a.20rustc.20plugin/near/251301631), is very slow.\n\nThis PR allows `get_body_with_borrowck_facts` to be called without `-Z polonius`. This is essential for my tool to run in a sensible length of time. This is a temporary patch as the Polonius-related APIs develop -- I can update my code as future changes happen.\n\nAdditionally, this PR also makes public two APIs that were previously public but then became private after `rustc_mir` got broken up: `rustc_mir_dataflow::framework::graphviz` and `rustc_mir_transform::MirPass`. I need both of these for my analysis tool. (I can break this change into a separate PR if necessary.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4601a71a4b26cce06116eed5a1e94f36af862843", "html_url": "https://github.com/rust-lang/rust/commit/4601a71a4b26cce06116eed5a1e94f36af862843", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4601a71a4b26cce06116eed5a1e94f36af862843/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06dbc284a81b6b85cfa0a4a208b2b2225895a976", "url": "https://api.github.com/repos/rust-lang/rust/commits/06dbc284a81b6b85cfa0a4a208b2b2225895a976", "html_url": "https://github.com/rust-lang/rust/commit/06dbc284a81b6b85cfa0a4a208b2b2225895a976"}, {"sha": "47104a34a67444a086fd38c82e005f316f7f567a", "url": "https://api.github.com/repos/rust-lang/rust/commits/47104a34a67444a086fd38c82e005f316f7f567a", "html_url": "https://github.com/rust-lang/rust/commit/47104a34a67444a086fd38c82e005f316f7f567a"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "4333038a6f936618c6f683dd6b4230fbd104a15a", "filename": "compiler/rustc_borrowck/src/consumers.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4601a71a4b26cce06116eed5a1e94f36af862843/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4601a71a4b26cce06116eed5a1e94f36af862843/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs?ref=4601a71a4b26cce06116eed5a1e94f36af862843", "patch": "@@ -14,16 +14,16 @@ pub use super::{\n };\n \n /// This function computes Polonius facts for the given body. It makes a copy of\n-/// the body because it needs to regenerate the region identifiers.\n+/// the body because it needs to regenerate the region identifiers. This function\n+/// should never be invoked during a typical compilation session due to performance\n+/// issues with Polonius.\n ///\n /// Note:\n /// *   This function will panic if the required body was already stolen. This\n ///     can, for example, happen when requesting a body of a `const` function\n ///     because they are evaluated during typechecking. The panic can be avoided\n ///     by overriding the `mir_borrowck` query. You can find a complete example\n ///     that shows how to do this at `src/test/run-make/obtain-borrowck/`.\n-/// *   This function will also panic if computation of Polonius facts\n-///     (`-Zpolonius` flag) is not enabled.\n ///\n /// *   Polonius is highly unstable, so expect regular changes in its signature or other details.\n pub fn get_body_with_borrowck_facts<'tcx>("}, {"sha": "b3b7d7e02ccef068b444607116f3058a20ba0f10", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4601a71a4b26cce06116eed5a1e94f36af862843/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4601a71a4b26cce06116eed5a1e94f36af862843/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=4601a71a4b26cce06116eed5a1e94f36af862843", "patch": "@@ -154,11 +154,6 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     debug!(\"do_mir_borrowck(def = {:?})\", def);\n \n-    assert!(\n-        !return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius,\n-        \"borrowck facts can be requested only when Polonius is enabled\"\n-    );\n-\n     let tcx = infcx.tcx;\n     let param_env = tcx.param_env(def.did);\n     let id = tcx.hir().local_def_id_to_hir_id(def.did);\n@@ -235,6 +230,8 @@ fn do_mir_borrowck<'a, 'tcx>(\n     let borrow_set =\n         Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));\n \n+    let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;\n+\n     // Compute non-lexical lifetimes.\n     let nll::NllOutput {\n         regioncx,\n@@ -254,6 +251,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         &mdpe.move_data,\n         &borrow_set,\n         &upvars,\n+        use_polonius,\n     );\n \n     // Dump MIR results into a file, if that is enabled. This let us"}, {"sha": "477b049b07596cda7b1c7eed0399d82fdf7938cb", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4601a71a4b26cce06116eed5a1e94f36af862843/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4601a71a4b26cce06116eed5a1e94f36af862843/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=4601a71a4b26cce06116eed5a1e94f36af862843", "patch": "@@ -164,8 +164,10 @@ pub(crate) fn compute_regions<'cx, 'tcx>(\n     move_data: &MoveData<'tcx>,\n     borrow_set: &BorrowSet<'tcx>,\n     upvars: &[Upvar<'tcx>],\n+    use_polonius: bool,\n ) -> NllOutput<'tcx> {\n-    let mut all_facts = AllFacts::enabled(infcx.tcx).then_some(AllFacts::default());\n+    let mut all_facts =\n+        (use_polonius || AllFacts::enabled(infcx.tcx)).then_some(AllFacts::default());\n \n     let universal_regions = Rc::new(universal_regions);\n \n@@ -281,7 +283,7 @@ pub(crate) fn compute_regions<'cx, 'tcx>(\n             all_facts.write_to_dir(dir_path, location_table).unwrap();\n         }\n \n-        if infcx.tcx.sess.opts.debugging_opts.polonius {\n+        if use_polonius {\n             let algorithm =\n                 env::var(\"POLONIUS_ALGORITHM\").unwrap_or_else(|_| String::from(\"Hybrid\"));\n             let algorithm = Algorithm::from_str(&algorithm).unwrap();"}, {"sha": "72c4e27cbeabfbcffd5b98f98810512604e31d3f", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4601a71a4b26cce06116eed5a1e94f36af862843/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4601a71a4b26cce06116eed5a1e94f36af862843/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=4601a71a4b26cce06116eed5a1e94f36af862843", "patch": "@@ -28,8 +28,8 @@ pub use self::drop_flag_effects::{\n     on_lookup_result_bits,\n };\n pub use self::framework::{\n-    fmt, lattice, visit_results, Analysis, AnalysisDomain, Backward, Direction, Engine, Forward,\n-    GenKill, GenKillAnalysis, JoinSemiLattice, Results, ResultsCursor, ResultsRefCursor,\n+    fmt, graphviz, lattice, visit_results, Analysis, AnalysisDomain, Backward, Direction, Engine,\n+    Forward, GenKill, GenKillAnalysis, JoinSemiLattice, Results, ResultsCursor, ResultsRefCursor,\n     ResultsVisitable, ResultsVisitor,\n };\n "}, {"sha": "bfd0de85438d1044778c9e142601abf61317e64d", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4601a71a4b26cce06116eed5a1e94f36af862843/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4601a71a4b26cce06116eed5a1e94f36af862843/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=4601a71a4b26cce06116eed5a1e94f36af862843", "patch": "@@ -76,7 +76,7 @@ mod unreachable_prop;\n use rustc_const_eval::transform::check_consts;\n use rustc_const_eval::transform::promote_consts;\n use rustc_const_eval::transform::validate;\n-use rustc_const_eval::transform::MirPass;\n+pub use rustc_const_eval::transform::MirPass;\n use rustc_mir_dataflow::rustc_peek;\n \n pub fn provide(providers: &mut Providers) {"}]}