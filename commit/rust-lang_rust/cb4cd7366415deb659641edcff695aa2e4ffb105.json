{"sha": "cb4cd7366415deb659641edcff695aa2e4ffb105", "node_id": "C_kwDOAAsO6NoAKGNiNGNkNzM2NjQxNWRlYjY1OTY0MWVkY2ZmNjk1YWEyZTRmZmIxMDU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-23T01:25:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-23T12:12:37Z"}, "message": "extra sanity check against consts pointing to mutable memory", "tree": {"sha": "d97ae6505c7737060ad68fbb5bb6f49ff2e95ce6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d97ae6505c7737060ad68fbb5bb6f49ff2e95ce6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb4cd7366415deb659641edcff695aa2e4ffb105", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4cd7366415deb659641edcff695aa2e4ffb105", "html_url": "https://github.com/rust-lang/rust/commit/cb4cd7366415deb659641edcff695aa2e4ffb105", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb4cd7366415deb659641edcff695aa2e4ffb105/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "015a824f2dffe32707fceb59c47effaf7b73486c", "url": "https://api.github.com/repos/rust-lang/rust/commits/015a824f2dffe32707fceb59c47effaf7b73486c", "html_url": "https://github.com/rust-lang/rust/commit/015a824f2dffe32707fceb59c47effaf7b73486c"}], "stats": {"total": 92, "additions": 55, "deletions": 37}, "files": [{"sha": "0e60f0c7ef1317d5cd25b25899ae419d0adbe32c", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 45, "deletions": 27, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/cb4cd7366415deb659641edcff695aa2e4ffb105/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4cd7366415deb659641edcff695aa2e4ffb105/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=cb4cd7366415deb659641edcff695aa2e4ffb105", "patch": "@@ -8,6 +8,7 @@ use std::convert::TryFrom;\n use std::fmt::Write;\n use std::num::NonZeroUsize;\n \n+use rustc_ast::Mutability;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_middle::mir::interpret::InterpError;\n@@ -411,34 +412,51 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n             // Proceed recursively even for ZST, no reason to skip them!\n             // `!` is a ZST and we want to validate it.\n             if let Ok((alloc_id, _offset, _prov)) = self.ecx.ptr_try_get_alloc_id(place.ptr) {\n-                // Special handling for pointers to statics (irrespective of their type).\n+                // Let's see what kind of memory this points to.\n                 let alloc_kind = self.ecx.tcx.try_get_global_alloc(alloc_id);\n-                if let Some(GlobalAlloc::Static(did)) = alloc_kind {\n-                    assert!(!self.ecx.tcx.is_thread_local_static(did));\n-                    assert!(self.ecx.tcx.is_static(did));\n-                    if matches!(\n-                        self.ctfe_mode,\n-                        Some(CtfeValidationMode::Const { allow_static_ptrs: false, .. })\n-                    ) {\n-                        // See const_eval::machine::MemoryExtra::can_access_statics for why\n-                        // this check is so important.\n-                        // This check is reachable when the const just referenced the static,\n-                        // but never read it (so we never entered `before_access_global`).\n-                        throw_validation_failure!(self.path,\n-                            { \"a {} pointing to a static variable\", kind }\n-                        );\n+                match alloc_kind {\n+                    Some(GlobalAlloc::Static(did)) => {\n+                        // Special handling for pointers to statics (irrespective of their type).\n+                        assert!(!self.ecx.tcx.is_thread_local_static(did));\n+                        assert!(self.ecx.tcx.is_static(did));\n+                        if matches!(\n+                            self.ctfe_mode,\n+                            Some(CtfeValidationMode::Const { allow_static_ptrs: false, .. })\n+                        ) {\n+                            // See const_eval::machine::MemoryExtra::can_access_statics for why\n+                            // this check is so important.\n+                            // This check is reachable when the const just referenced the static,\n+                            // but never read it (so we never entered `before_access_global`).\n+                            throw_validation_failure!(self.path,\n+                                { \"a {} pointing to a static variable in a constant\", kind }\n+                            );\n+                        }\n+                        // We skip recursively checking other statics. These statics must be sound by\n+                        // themselves, and the only way to get broken statics here is by using\n+                        // unsafe code.\n+                        // The reasons we don't check other statics is twofold. For one, in all\n+                        // sound cases, the static was already validated on its own, and second, we\n+                        // trigger cycle errors if we try to compute the value of the other static\n+                        // and that static refers back to us.\n+                        // We might miss const-invalid data,\n+                        // but things are still sound otherwise (in particular re: consts\n+                        // referring to statics).\n+                        return Ok(());\n                     }\n-                    // We skip checking other statics. These statics must be sound by\n-                    // themselves, and the only way to get broken statics here is by using\n-                    // unsafe code.\n-                    // The reasons we don't check other statics is twofold. For one, in all\n-                    // sound cases, the static was already validated on its own, and second, we\n-                    // trigger cycle errors if we try to compute the value of the other static\n-                    // and that static refers back to us.\n-                    // We might miss const-invalid data,\n-                    // but things are still sound otherwise (in particular re: consts\n-                    // referring to statics).\n-                    return Ok(());\n+                    Some(GlobalAlloc::Memory(alloc)) => {\n+                        if alloc.inner().mutability == Mutability::Mut\n+                            && matches!(self.ctfe_mode, Some(CtfeValidationMode::Const { .. }))\n+                        {\n+                            // This should be unreachable, but if someone manages to copy a pointer\n+                            // out of a `static`, then that pointer might point to mutable memory,\n+                            // and we would catch that here.\n+                            throw_validation_failure!(self.path,\n+                                { \"a {} pointing to mutable memory in a constant\", kind }\n+                            );\n+                        }\n+                    }\n+                    // Nothing to check for these.\n+                    None | Some(GlobalAlloc::Function(..) | GlobalAlloc::VTable(..)) => {}\n                 }\n             }\n             let path = &self.path;\n@@ -544,7 +562,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n             }\n             ty::Ref(_, ty, mutbl) => {\n                 if matches!(self.ctfe_mode, Some(CtfeValidationMode::Const { .. }))\n-                    && *mutbl == hir::Mutability::Mut\n+                    && *mutbl == Mutability::Mut\n                 {\n                     // A mutable reference inside a const? That does not seem right (except if it is\n                     // a ZST)."}, {"sha": "c7a435a1ee3fc9ce7465cc77ecfcd65815286a9e", "filename": "src/test/ui/consts/const-points-to-static.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb4cd7366415deb659641edcff695aa2e4ffb105/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb4cd7366415deb659641edcff695aa2e4ffb105/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.32bit.stderr?ref=cb4cd7366415deb659641edcff695aa2e4ffb105", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-points-to-static.rs:6:1\n    |\n LL | const TEST: &u8 = &MY_STATIC;\n-   | ^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n+   | ^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {"}, {"sha": "4d5b8eac541dfd28ac0123e2629efdb73102cd23", "filename": "src/test/ui/consts/const-points-to-static.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb4cd7366415deb659641edcff695aa2e4ffb105/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb4cd7366415deb659641edcff695aa2e4ffb105/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.64bit.stderr?ref=cb4cd7366415deb659641edcff695aa2e4ffb105", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-points-to-static.rs:6:1\n    |\n LL | const TEST: &u8 = &MY_STATIC;\n-   | ^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n+   | ^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {"}, {"sha": "14173ac9f69b4aff5e376db4e1a4f6892c71baf2", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.32bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb4cd7366415deb659641edcff695aa2e4ffb105/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb4cd7366415deb659641edcff695aa2e4ffb105/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.32bit.stderr?ref=cb4cd7366415deb659641edcff695aa2e4ffb105", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static2.rs:11:1\n    |\n LL | const REF_INTERIOR_MUT: &usize = {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -13,7 +13,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static2.rs:18:1\n    |\n LL | const READ_IMMUT: &usize = {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {"}, {"sha": "e7e51a41856e2bbd3c7acf45bf76fe601081747e", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb4cd7366415deb659641edcff695aa2e4ffb105/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb4cd7366415deb659641edcff695aa2e4ffb105/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr?ref=cb4cd7366415deb659641edcff695aa2e4ffb105", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static2.rs:11:1\n    |\n LL | const REF_INTERIOR_MUT: &usize = {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -13,7 +13,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static2.rs:18:1\n    |\n LL | const READ_IMMUT: &usize = {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {"}, {"sha": "3a22b06891629c86f509f44330d5f78caaa7a21a", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb4cd7366415deb659641edcff695aa2e4ffb105/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb4cd7366415deb659641edcff695aa2e4ffb105/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr?ref=cb4cd7366415deb659641edcff695aa2e4ffb105", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static_cross_crate.rs:12:1\n    |\n LL | const SLICE_MUT: &[u8; 1] = {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {\n@@ -19,7 +19,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static_cross_crate.rs:17:1\n    |\n LL | const U8_MUT: &u8 = {\n-   | ^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n+   | ^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 4, align: 4) {"}, {"sha": "39c874d6498b28064841db20c2a2d06805ef0e6e", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb4cd7366415deb659641edcff695aa2e4ffb105/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb4cd7366415deb659641edcff695aa2e4ffb105/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr?ref=cb4cd7366415deb659641edcff695aa2e4ffb105", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static_cross_crate.rs:12:1\n    |\n LL | const SLICE_MUT: &[u8; 1] = {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -19,7 +19,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static_cross_crate.rs:17:1\n    |\n LL | const U8_MUT: &u8 = {\n-   | ^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable\n+   | ^^^^^^^^^^^^^^^^^ constructing invalid value: encountered a reference pointing to a static variable in a constant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {"}]}