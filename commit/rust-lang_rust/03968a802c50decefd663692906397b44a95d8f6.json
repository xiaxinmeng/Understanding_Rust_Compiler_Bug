{"sha": "03968a802c50decefd663692906397b44a95d8f6", "node_id": "C_kwDOAAsO6NoAKDAzOTY4YTgwMmM1MGRlY2VmZDY2MzY5MjkwNjM5N2I0NGE5NWQ4ZjY", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-10-11T17:00:01Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-11-02T23:17:22Z"}, "message": "rustdoc: use ThinVec for cleaned generics", "tree": {"sha": "62541cf9f1138a334db1b02b1d88747018a21660", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62541cf9f1138a334db1b02b1d88747018a21660"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03968a802c50decefd663692906397b44a95d8f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03968a802c50decefd663692906397b44a95d8f6", "html_url": "https://github.com/rust-lang/rust/commit/03968a802c50decefd663692906397b44a95d8f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03968a802c50decefd663692906397b44a95d8f6/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edf0182213a9e30982eb34f3925ddc4cf5ed3471", "url": "https://api.github.com/repos/rust-lang/rust/commits/edf0182213a9e30982eb34f3925ddc4cf5ed3471", "html_url": "https://github.com/rust-lang/rust/commit/edf0182213a9e30982eb34f3925ddc4cf5ed3471"}], "stats": {"total": 138, "additions": 67, "deletions": 71}, "files": [{"sha": "1a91898be4e3f631ab20028e66b0ec17da2d725c", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03968a802c50decefd663692906397b44a95d8f6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/03968a802c50decefd663692906397b44a95d8f6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=03968a802c50decefd663692906397b44a95d8f6", "patch": "@@ -4887,9 +4887,9 @@ checksum = \"b1141d4d61095b28419e22cb0bbf02755f5e54e0526f97f1e3d1d160e60885fb\"\n \n [[package]]\n name = \"thin-vec\"\n-version = \"0.2.8\"\n+version = \"0.2.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"104c2cb3180b6fb6d5b2278768e9b88b578d32ba751ea6e8d026688a40d7ed87\"\n+checksum = \"ceb05e71730d396f960f8f3901cdb41be2d339b303e9d7d3a07c5ff0536e671b\"\n \n [[package]]\n name = \"thiserror\""}, {"sha": "9253b7e6891a25db4592b74ce72c513da14482bb", "filename": "compiler/rustc_ast/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03968a802c50decefd663692906397b44a95d8f6/compiler%2Frustc_ast%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/03968a802c50decefd663692906397b44a95d8f6/compiler%2Frustc_ast%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2FCargo.toml?ref=03968a802c50decefd663692906397b44a95d8f6", "patch": "@@ -14,5 +14,5 @@ rustc_macros = { path = \"../rustc_macros\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_span = { path = \"../rustc_span\" }\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n-thin-vec = \"0.2.8\"\n+thin-vec = \"0.2.9\"\n tracing = \"0.1\""}, {"sha": "6a59b9e6151ce13554f9901e95e88ca75d06153d", "filename": "compiler/rustc_ast_lowering/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03968a802c50decefd663692906397b44a95d8f6/compiler%2Frustc_ast_lowering%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/03968a802c50decefd663692906397b44a95d8f6/compiler%2Frustc_ast_lowering%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2FCargo.toml?ref=03968a802c50decefd663692906397b44a95d8f6", "patch": "@@ -21,5 +21,5 @@ rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_target = { path = \"../rustc_target\" }\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n-thin-vec = \"0.2.8\"\n+thin-vec = \"0.2.9\"\n tracing = \"0.1\""}, {"sha": "467fa932a1567c49eaf9fb927002da8bf95dc44d", "filename": "compiler/rustc_builtin_macros/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03968a802c50decefd663692906397b44a95d8f6/compiler%2Frustc_builtin_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/03968a802c50decefd663692906397b44a95d8f6/compiler%2Frustc_builtin_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2FCargo.toml?ref=03968a802c50decefd663692906397b44a95d8f6", "patch": "@@ -23,5 +23,5 @@ rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_target = { path = \"../rustc_target\" }\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n-thin-vec = \"0.2.8\"\n+thin-vec = \"0.2.9\"\n tracing = \"0.1\""}, {"sha": "5152d5ab0465c126f50dda00f3513f80ea10d80d", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03968a802c50decefd663692906397b44a95d8f6/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/03968a802c50decefd663692906397b44a95d8f6/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=03968a802c50decefd663692906397b44a95d8f6", "patch": "@@ -25,7 +25,7 @@ smallvec = { version = \"1.8.1\", features = [\"const_generics\", \"union\", \"may_dang\n stable_deref_trait = \"1.0.0\"\n stacker = \"0.1.14\"\n tempfile = \"3.2\"\n-thin-vec = \"0.2.8\"\n+thin-vec = \"0.2.9\"\n tracing = \"0.1\"\n \n [dependencies.parking_lot]"}, {"sha": "8e7d0cf2ab1b01e59d2ed5cda4083fdf9b36709a", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03968a802c50decefd663692906397b44a95d8f6/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/03968a802c50decefd663692906397b44a95d8f6/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=03968a802c50decefd663692906397b44a95d8f6", "patch": "@@ -32,7 +32,7 @@ rustc_span = { path = \"../rustc_span\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_type_ir = { path = \"../rustc_type_ir\" }\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n-thin-vec = \"0.2.8\"\n+thin-vec = \"0.2.9\"\n tracing = \"0.1\"\n \n [features]"}, {"sha": "b2111a1262a3cd9c82d9e11d7bd53f6ff5cf35dd", "filename": "compiler/rustc_query_impl/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03968a802c50decefd663692906397b44a95d8f6/compiler%2Frustc_query_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/03968a802c50decefd663692906397b44a95d8f6/compiler%2Frustc_query_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2FCargo.toml?ref=03968a802c50decefd663692906397b44a95d8f6", "patch": "@@ -21,7 +21,7 @@ rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_target = { path = \"../rustc_target\" }\n-thin-vec = \"0.2.8\"\n+thin-vec = \"0.2.9\"\n tracing = \"0.1\"\n \n [features]"}, {"sha": "028756b5a0a18d1ea3cce2b42440872ae40f5543", "filename": "compiler/rustc_query_system/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03968a802c50decefd663692906397b44a95d8f6/compiler%2Frustc_query_system%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/03968a802c50decefd663692906397b44a95d8f6/compiler%2Frustc_query_system%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2FCargo.toml?ref=03968a802c50decefd663692906397b44a95d8f6", "patch": "@@ -22,7 +22,7 @@ rustc_span = { path = \"../rustc_span\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_type_ir = { path = \"../rustc_type_ir\" }\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n-thin-vec = \"0.2.8\"\n+thin-vec = \"0.2.9\"\n tracing = \"0.1\"\n \n [features]"}, {"sha": "db0ef73544faad71ed845dfd1637b4117cc74dd1", "filename": "compiler/rustc_serialize/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03968a802c50decefd663692906397b44a95d8f6/compiler%2Frustc_serialize%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/03968a802c50decefd663692906397b44a95d8f6/compiler%2Frustc_serialize%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2FCargo.toml?ref=03968a802c50decefd663692906397b44a95d8f6", "patch": "@@ -6,7 +6,7 @@ edition = \"2021\"\n [dependencies]\n indexmap = \"1.9.1\"\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n-thin-vec = \"0.2.8\"\n+thin-vec = \"0.2.9\"\n \n [dev-dependencies]\n rustc_macros = { path = \"../rustc_macros\" }"}, {"sha": "0da69202e679fc41cdbc81861be29a42107a7922", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03968a802c50decefd663692906397b44a95d8f6/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/03968a802c50decefd663692906397b44a95d8f6/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=03968a802c50decefd663692906397b44a95d8f6", "patch": "@@ -20,7 +20,7 @@ serde_json = \"1.0\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n smallvec = \"1.8.1\"\n tempfile = \"3\"\n-thin-vec = \"0.2.8\"\n+thin-vec = \"0.2.9\"\n tracing = \"0.1\"\n tracing-tree = \"0.2.0\"\n "}, {"sha": "84e77e69ecff397cca9edfc49b7289c1a2b3cc35", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/03968a802c50decefd663692906397b44a95d8f6/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03968a802c50decefd663692906397b44a95d8f6/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=03968a802c50decefd663692906397b44a95d8f6", "patch": "@@ -3,6 +3,7 @@ use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::ty::{self, Region, RegionVid, TypeFoldable, TypeSuperFoldable};\n use rustc_trait_selection::traits::auto_trait::{self, AutoTraitResult};\n+use thin_vec::ThinVec;\n \n use std::fmt::Debug;\n \n@@ -110,7 +111,7 @@ where\n                 );\n                 let params = raw_generics.params;\n \n-                Generics { params, where_predicates: Vec::new() }\n+                Generics { params, where_predicates: ThinVec::new() }\n             }\n             AutoTraitResult::ExplicitImpl => return None,\n         };\n@@ -183,7 +184,7 @@ where\n     fn handle_lifetimes<'cx>(\n         regions: &RegionConstraintData<'cx>,\n         names_map: &FxHashMap<Symbol, Lifetime>,\n-    ) -> Vec<WherePredicate> {\n+    ) -> ThinVec<WherePredicate> {\n         // Our goal is to 'flatten' the list of constraints by eliminating\n         // all intermediate RegionVids. At the end, all constraints should\n         // be between Regions (aka region variables). This gives us the information\n@@ -429,7 +430,7 @@ where\n         &mut self,\n         item_def_id: DefId,\n         param_env: ty::ParamEnv<'tcx>,\n-        mut existing_predicates: Vec<WherePredicate>,\n+        mut existing_predicates: ThinVec<WherePredicate>,\n         vid_to_region: FxHashMap<ty::RegionVid, ty::Region<'tcx>>,\n     ) -> Generics {\n         debug!(\n@@ -663,7 +664,7 @@ where\n     /// both for visual consistency between 'rustdoc' runs, and to\n     /// make writing tests much easier\n     #[inline]\n-    fn sort_where_predicates(&self, predicates: &mut Vec<WherePredicate>) {\n+    fn sort_where_predicates(&self, predicates: &mut [WherePredicate]) {\n         // We should never have identical bounds - and if we do,\n         // they're visually identical as well. Therefore, using\n         // an unstable sort is fine.\n@@ -710,7 +711,7 @@ where\n     /// approach is probably somewhat slower, but the small number of items\n     /// involved (impls rarely have more than a few bounds) means that it\n     /// shouldn't matter in practice.\n-    fn unstable_debug_sort<T: Debug>(&self, vec: &mut Vec<T>) {\n+    fn unstable_debug_sort<T: Debug>(&self, vec: &mut [T]) {\n         vec.sort_by_cached_key(|x| format!(\"{:?}\", x))\n     }\n "}, {"sha": "32aa49d4a59e59960dd29b5fb8051318f36b1902", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 45, "deletions": 51, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/03968a802c50decefd663692906397b44a95d8f6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03968a802c50decefd663692906397b44a95d8f6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=03968a802c50decefd663692906397b44a95d8f6", "patch": "@@ -601,7 +601,7 @@ pub(crate) fn clean_generics<'tcx>(\n         })\n         .collect::<Vec<_>>();\n \n-    let mut params = Vec::with_capacity(gens.params.len());\n+    let mut params = ThinVec::with_capacity(gens.params.len());\n     for p in gens.params.iter().filter(|p| !is_impl_trait(p) && !is_elided_lifetime(p)) {\n         let p = clean_generic_param(cx, Some(gens), p);\n         params.push(p);\n@@ -675,7 +675,7 @@ fn clean_ty_generics<'tcx>(\n             }\n             ty::GenericParamDefKind::Const { .. } => Some(clean_generic_param_def(param, cx)),\n         })\n-        .collect::<Vec<GenericParamDef>>();\n+        .collect::<ThinVec<GenericParamDef>>();\n \n     // param index -> [(trait DefId, associated type name & generics, type, higher-ranked params)]\n     let mut impl_trait_proj =\n@@ -1211,56 +1211,47 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n                     tcx.generics_of(assoc_item.def_id),\n                     ty::GenericPredicates { parent: None, predicates },\n                 );\n-                // Move bounds that are (likely) directly attached to the associated type\n-                // from the where clause to the associated type.\n-                // There is no guarantee that this is what the user actually wrote but we have\n-                // no way of knowing.\n-                let mut bounds = generics\n-                    .where_predicates\n-                    .drain_filter(|pred| match *pred {\n-                        WherePredicate::BoundPredicate {\n-                            ty: QPath(box QPathData { ref assoc, ref self_type, ref trait_, .. }),\n-                            ..\n-                        } => {\n-                            if assoc.name != my_name {\n-                                return false;\n-                            }\n-                            if trait_.def_id() != assoc_item.container_id(tcx) {\n-                                return false;\n-                            }\n-                            match *self_type {\n-                                Generic(ref s) if *s == kw::SelfUpper => {}\n-                                _ => return false,\n-                            }\n-                            match &assoc.args {\n-                                GenericArgs::AngleBracketed { args, bindings } => {\n-                                    if !bindings.is_empty()\n-                                        || generics\n-                                            .params\n-                                            .iter()\n-                                            .zip(args.iter())\n-                                            .any(|(param, arg)| !param_eq_arg(param, arg))\n-                                    {\n-                                        return false;\n-                                    }\n-                                }\n-                                GenericArgs::Parenthesized { .. } => {\n-                                    // The only time this happens is if we're inside the rustdoc for Fn(),\n-                                    // which only has one associated type, which is not a GAT, so whatever.\n+                // Filter out the bounds that are (likely?) directly attached to the associated type,\n+                // as opposed to being located in the where clause.\n+                let mut bounds: Vec<GenericBound> = Vec::new();\n+                generics.where_predicates.retain_mut(|pred| match *pred {\n+                    WherePredicate::BoundPredicate {\n+                        ty: QPath(box QPathData { ref assoc, ref self_type, ref trait_, .. }),\n+                        bounds: ref mut pred_bounds,\n+                        ..\n+                    } => {\n+                        if assoc.name != my_name {\n+                            return true;\n+                        }\n+                        if trait_.def_id() != assoc_item.container_id(tcx) {\n+                            return true;\n+                        }\n+                        match *self_type {\n+                            Generic(ref s) if *s == kw::SelfUpper => {}\n+                            _ => return true,\n+                        }\n+                        match &assoc.args {\n+                            GenericArgs::AngleBracketed { args, bindings } => {\n+                                if !bindings.is_empty()\n+                                    || generics\n+                                        .params\n+                                        .iter()\n+                                        .zip(args.iter())\n+                                        .any(|(param, arg)| !param_eq_arg(param, arg))\n+                                {\n+                                    return true;\n                                 }\n                             }\n-                            true\n-                        }\n-                        _ => false,\n-                    })\n-                    .flat_map(|pred| {\n-                        if let WherePredicate::BoundPredicate { bounds, .. } = pred {\n-                            bounds\n-                        } else {\n-                            unreachable!()\n+                            GenericArgs::Parenthesized { .. } => {\n+                                // The only time this happens is if we're inside the rustdoc for Fn(),\n+                                // which only has one associated type, which is not a GAT, so whatever.\n+                            }\n                         }\n-                    })\n-                    .collect::<Vec<_>>();\n+                        bounds.extend(mem::replace(pred_bounds, Vec::new()));\n+                        false\n+                    }\n+                    _ => true,\n+                });\n                 // Our Sized/?Sized bound didn't get handled when creating the generics\n                 // because we didn't actually get our whole set of bounds until just now\n                 // (some of them may have come from the trait). If we do have a sized\n@@ -1276,7 +1267,7 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n                 // (generic) associated type from the where clause to the respective parameter.\n                 // There is no guarantee that this is what the user actually wrote but we have\n                 // no way of knowing.\n-                let mut where_predicates = Vec::new();\n+                let mut where_predicates = ThinVec::new();\n                 for mut pred in generics.where_predicates {\n                     if let WherePredicate::BoundPredicate { ty: Generic(arg), bounds, .. } = &mut pred\n                     && let Some(GenericParamDef {\n@@ -1317,7 +1308,10 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n                             cx,\n                             Some(assoc_item.def_id),\n                         ),\n-                        generics: Generics { params: Vec::new(), where_predicates: Vec::new() },\n+                        generics: Generics {\n+                            params: ThinVec::new(),\n+                            where_predicates: ThinVec::new(),\n+                        },\n                         item_type: None,\n                     }),\n                     Vec::new(),"}, {"sha": "1c184f9b2695cd1fcdac94459ab5f706c0eac58a", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03968a802c50decefd663692906397b44a95d8f6/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03968a802c50decefd663692906397b44a95d8f6/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=03968a802c50decefd663692906397b44a95d8f6", "patch": "@@ -14,13 +14,14 @@\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n+use thin_vec::ThinVec;\n \n use crate::clean;\n use crate::clean::GenericArgs as PP;\n use crate::clean::WherePredicate as WP;\n use crate::core::DocContext;\n \n-pub(crate) fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n+pub(crate) fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> ThinVec<WP> {\n     // First, partition the where clause into its separate components.\n     //\n     // We use `FxIndexMap` so that the insertion order is preserved to prevent messing up to\n@@ -59,7 +60,7 @@ pub(crate) fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n     });\n \n     // And finally, let's reassemble everything\n-    let mut clauses = Vec::new();\n+    let mut clauses = ThinVec::with_capacity(lifetimes.len() + tybounds.len() + equalities.len());\n     clauses.extend(\n         lifetimes.into_iter().map(|(lt, bounds)| WP::RegionPredicate { lifetime: lt, bounds }),\n     );"}, {"sha": "e4a8b5c9d189f82438f5236d6544e0e8d70fcc1a", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03968a802c50decefd663692906397b44a95d8f6/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03968a802c50decefd663692906397b44a95d8f6/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=03968a802c50decefd663692906397b44a95d8f6", "patch": "@@ -1462,8 +1462,8 @@ impl GenericParamDef {\n // maybe use a Generic enum and use Vec<Generic>?\n #[derive(Clone, Debug, Default)]\n pub(crate) struct Generics {\n-    pub(crate) params: Vec<GenericParamDef>,\n-    pub(crate) where_predicates: Vec<WherePredicate>,\n+    pub(crate) params: ThinVec<GenericParamDef>,\n+    pub(crate) where_predicates: ThinVec<WherePredicate>,\n }\n \n impl Generics {"}]}