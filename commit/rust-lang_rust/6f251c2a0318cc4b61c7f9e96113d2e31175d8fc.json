{"sha": "6f251c2a0318cc4b61c7f9e96113d2e31175d8fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMjUxYzJhMDMxOGNjNGI2MWM3ZjllOTYxMTNkMmUzMTE3NWQ4ZmM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-04-11T08:47:52Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-04-14T10:21:46Z"}, "message": "Use `LazySeq` instead of `Vec`", "tree": {"sha": "8625f057366df8452e5ec30c8a9fbc04abea0742", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8625f057366df8452e5ec30c8a9fbc04abea0742"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f251c2a0318cc4b61c7f9e96113d2e31175d8fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlrR1josHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MATS\nQA//UlN+t42qJ8H17pa5aXGqaWhO8Agowa4jJiWK/UpJ4UUB6BGX7iGuDed3iy6/\ncpzthDaKPGp9HSbdW3xrPglVfjuoiySOxT5w4Ndt9GFLAl7nr0FC/7dNG/hbr1k1\nKxEBLJhUmjTFQaWuvGanlSrpqb2vEqUnIui0Ov4IEUk34oJ6LXw+MNu1ay5ySsdo\njKHEv+pTy1TyqZjrjBrFFbE0VZsKd3XcINUyoXDzibNusaoRo1w0+vcx7MpOqYVj\nE0/z7l3VPHdZSHSdqT/gR8elba9UYfLZS8aC+Ylc61DnGy8YiUuA3JUvgf2sGPsb\ncAjplJcV/RqhfYCSjAeFH4H7/7QBNOpAaT+9B6bFuUnKyT/QnaSFeKEEU3LyBMWk\nYUJxufBNFLu4s0qXLHfi1PnHV4cdVY4IWspTCCrkYmng89tOm+lr8cR0JXToc7LE\nnbCVk5TJE41qITc917g1usg09HQnFqgXdDMXQ5syXGi95QIg04vj6643WayjMpmG\nAFz/QE4oMxKlCFa1okGXjsti8sesgGNe41A+e1mUC6ms95ZiEN3W089HtfRS2OqR\nXkN2b07tZHVivvViNzdCnet5PfDMBmmPe26ED+xD1QRtrg1yX8LSzSECpeNci+Pp\np8oLcHgkmNmIU8r1tMDIXvnPB6CnFfqKqRFxnEdJ9WGQsuI=\n=Etbo\n-----END PGP SIGNATURE-----", "payload": "tree 8625f057366df8452e5ec30c8a9fbc04abea0742\nparent 62c0501be8a0fa5e511a45ed9ffbcef42094e9ad\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1523436472 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1523701306 +0200\n\nUse `LazySeq` instead of `Vec`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f251c2a0318cc4b61c7f9e96113d2e31175d8fc", "html_url": "https://github.com/rust-lang/rust/commit/6f251c2a0318cc4b61c7f9e96113d2e31175d8fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f251c2a0318cc4b61c7f9e96113d2e31175d8fc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62c0501be8a0fa5e511a45ed9ffbcef42094e9ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/62c0501be8a0fa5e511a45ed9ffbcef42094e9ad", "html_url": "https://github.com/rust-lang/rust/commit/62c0501be8a0fa5e511a45ed9ffbcef42094e9ad"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "c69ee180dc9c9bdd3141311d6d9ffd1028c25b03", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6f251c2a0318cc4b61c7f9e96113d2e31175d8fc/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f251c2a0318cc4b61c7f9e96113d2e31175d8fc/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=6f251c2a0318cc4b61c7f9e96113d2e31175d8fc", "patch": "@@ -59,6 +59,9 @@ pub struct DecodeContext<'a, 'tcx: 'a> {\n \n     // interpreter allocation cache\n     interpret_alloc_cache: FxHashMap<usize, interpret::AllocId>,\n+\n+    // Read from the LazySeq CrateRoot::inpterpret_alloc_index on demand\n+    interpret_alloc_index: Option<Vec<u32>>,\n }\n \n /// Abstract over the various ways one can create metadata decoders.\n@@ -78,6 +81,7 @@ pub trait Metadata<'a, 'tcx>: Copy {\n             last_filemap_index: 0,\n             lazy_state: LazyState::NoNode,\n             interpret_alloc_cache: FxHashMap::default(),\n+            interpret_alloc_index: None,\n         }\n     }\n }\n@@ -176,6 +180,17 @@ impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n         self.lazy_state = LazyState::Previous(position + min_size);\n         Ok(position)\n     }\n+\n+    fn interpret_alloc(&mut self, idx: usize) -> usize {\n+        if let Some(index) = self.interpret_alloc_index.as_mut() {\n+            return index[idx] as usize;\n+        }\n+        let index = self.cdata().root.interpret_alloc_index;\n+        let index: Vec<u32> = index.decode(self.cdata()).collect();\n+        let pos = index[idx];\n+        self.interpret_alloc_index = Some(index);\n+        pos as usize\n+    }\n }\n \n impl<'a, 'tcx: 'a> TyDecoder<'a, 'tcx> for DecodeContext<'a, 'tcx> {\n@@ -292,11 +307,8 @@ impl<'a, 'tcx> SpecializedDecoder<interpret::AllocId> for DecodeContext<'a, 'tcx\n         if let Some(cached) = self.interpret_alloc_cache.get(&idx).cloned() {\n             return Ok(cached);\n         }\n-        let pos = self\n-            .cdata()\n-            .root\n-            .interpret_alloc_index[idx];\n-        self.with_position(pos as usize, |this| {\n+        let pos = self.interpret_alloc(idx);\n+        self.with_position(pos, |this| {\n             interpret::specialized_decode_alloc_id(\n                 this,\n                 tcx,"}, {"sha": "d6c673f550d7288cd748b854218cd12263a40c76", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6f251c2a0318cc4b61c7f9e96113d2e31175d8fc/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f251c2a0318cc4b61c7f9e96113d2e31175d8fc/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=6f251c2a0318cc4b61c7f9e96113d2e31175d8fc", "patch": "@@ -265,7 +265,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 start - min_end\n             }\n             LazyState::Previous(last_min_end) => {\n-                assert!(last_min_end <= position);\n+                assert!(\n+                    last_min_end <= position,\n+                    \"make sure that the calls to `lazy*` \\\n+                    are in the same order as the metadata fields\",\n+                );\n                 position - last_min_end\n             }\n         };\n@@ -439,21 +443,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             IsolatedEncoder::encode_wasm_custom_sections,\n             &wasm_custom_sections);\n \n-        // Encode and index the items.\n-        i = self.position();\n-        let items = self.encode_info_for_items();\n-        let item_bytes = self.position() - i;\n-\n-        i = self.position();\n-        let index = items.write_index(&mut self.opaque.cursor);\n-        let index_bytes = self.position() - i;\n-\n         let tcx = self.tcx;\n-        let link_meta = self.link_meta;\n-        let is_proc_macro = tcx.sess.crate_types.borrow().contains(&CrateTypeProcMacro);\n-        let has_default_lib_allocator =\n-            attr::contains_name(tcx.hir.krate_attrs(), \"default_lib_allocator\");\n-        let has_global_allocator = *tcx.sess.has_global_allocator.get();\n \n         // Encode the allocation index\n         let interpret_alloc_index = {\n@@ -478,9 +468,24 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 }\n                 n = new_n;\n             }\n-            interpret_alloc_index\n+            self.lazy_seq(interpret_alloc_index)\n         };\n \n+        // Encode and index the items.\n+        i = self.position();\n+        let items = self.encode_info_for_items();\n+        let item_bytes = self.position() - i;\n+\n+        i = self.position();\n+        let index = items.write_index(&mut self.opaque.cursor);\n+        let index_bytes = self.position() - i;\n+\n+        let link_meta = self.link_meta;\n+        let is_proc_macro = tcx.sess.crate_types.borrow().contains(&CrateTypeProcMacro);\n+        let has_default_lib_allocator =\n+            attr::contains_name(tcx.hir.krate_attrs(), \"default_lib_allocator\");\n+        let has_global_allocator = tcx.sess.has_global_allocator.get();\n+\n         let root = self.lazy(&CrateRoot {\n             name: tcx.crate_name(LOCAL_CRATE),\n             extra_filename: tcx.sess.opts.cg.extra_filename.clone(),\n@@ -512,8 +517,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             impls,\n             exported_symbols,\n             wasm_custom_sections,\n-            index,\n             interpret_alloc_index,\n+            index,\n         });\n \n         let total_bytes = self.position();"}, {"sha": "23ea5e4cc55043b97ef075feb1c90302aaaa1c58", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f251c2a0318cc4b61c7f9e96113d2e31175d8fc/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f251c2a0318cc4b61c7f9e96113d2e31175d8fc/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=6f251c2a0318cc4b61c7f9e96113d2e31175d8fc", "patch": "@@ -207,7 +207,7 @@ pub struct CrateRoot {\n     pub impls: LazySeq<TraitImpls>,\n     pub exported_symbols: EncodedExportedSymbols,\n     pub wasm_custom_sections: LazySeq<DefIndex>,\n-    pub interpret_alloc_index: Vec<u32>,\n+    pub interpret_alloc_index: LazySeq<u32>,\n \n     pub index: LazySeq<index::Index>,\n }"}]}