{"sha": "cd46255d7e8bb59b93a32d5cb50581f418ca5f3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNDYyNTVkN2U4YmI1OWI5M2EzMmQ1Y2I1MDU4MWY0MThjYTVmM2I=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-04T12:10:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-04T12:10:21Z"}, "message": "Merge #9135\n\n9135: Reorganize inlay_hints tests r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "e1d82fe3e03bd6dd10365c1988e679d04ee408dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1d82fe3e03bd6dd10365c1988e679d04ee408dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd46255d7e8bb59b93a32d5cb50581f418ca5f3b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJguhgtCRBK7hj4Ov3rIwAAdWYIAExk2xQRn5rv31KrtqY3/2cX\n88DVmC4y/iSlo/qPDpDPLqdkySUDlY3ScojhdDdhfV0TUzVPJ8suUuiaAh7YOf27\nRSMddQRnZLsv7hc2v9/0WSBut+Hlgx17Nzwt4XHc4UK244ysNfcWOXtWKthkptTx\nv8tbur/V0gjjp5GOHB//hQgsLu4+rPRVH1EJybPuFC20saKVc5G75OJR6Flncqsn\n10zv/1Db15yKRh3PFOVDJiEuFHvWC9gQ90XOkSiX6fEgrGuk9+LpCzPY1dYQgZjU\nOxhwtLaUH+2FOGTCUx0cnszj03jOnLY40IY0m0xKoHJGG+WdJ9EAEWt50aqMoOw=\n=lKOH\n-----END PGP SIGNATURE-----\n", "payload": "tree e1d82fe3e03bd6dd10365c1988e679d04ee408dc\nparent 14153671caaca852c94bd1d0d7f279acb8eb1913\nparent 5f1fac44c5714a3d09a4723bf95b2cac71723ff7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622808621 +0000\ncommitter GitHub <noreply@github.com> 1622808621 +0000\n\nMerge #9135\n\n9135: Reorganize inlay_hints tests r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd46255d7e8bb59b93a32d5cb50581f418ca5f3b", "html_url": "https://github.com/rust-lang/rust/commit/cd46255d7e8bb59b93a32d5cb50581f418ca5f3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd46255d7e8bb59b93a32d5cb50581f418ca5f3b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14153671caaca852c94bd1d0d7f279acb8eb1913", "url": "https://api.github.com/repos/rust-lang/rust/commits/14153671caaca852c94bd1d0d7f279acb8eb1913", "html_url": "https://github.com/rust-lang/rust/commit/14153671caaca852c94bd1d0d7f279acb8eb1913"}, {"sha": "5f1fac44c5714a3d09a4723bf95b2cac71723ff7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1fac44c5714a3d09a4723bf95b2cac71723ff7", "html_url": "https://github.com/rust-lang/rust/commit/5f1fac44c5714a3d09a4723bf95b2cac71723ff7"}], "stats": {"total": 1062, "additions": 507, "deletions": 555}, "files": [{"sha": "821c61403bdfd24dbfd891e2aad6ee2771118e53", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 507, "deletions": 555, "changes": 1062, "blob_url": "https://github.com/rust-lang/rust/blob/cd46255d7e8bb59b93a32d5cb50581f418ca5f3b/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd46255d7e8bb59b93a32d5cb50581f418ca5f3b/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=cd46255d7e8bb59b93a32d5cb50581f418ca5f3b", "patch": "@@ -299,9 +299,8 @@ fn should_not_display_type_hint(\n                     // Type of expr should be iterable.\n                     return it.in_token().is_none() ||\n                         it.iterable()\n-                            .and_then(|iterable_expr|sema.type_of_expr(&iterable_expr))\n-                            .map(|iterable_ty| iterable_ty.is_unknown() || iterable_ty.is_unit())\n-                            .unwrap_or(true)\n+                            .and_then(|iterable_expr| sema.type_of_expr(&iterable_expr))\n+                            .map_or(true, |iterable_ty| iterable_ty.is_unknown() || iterable_ty.is_unit())\n                 },\n                 _ => (),\n             }\n@@ -316,11 +315,12 @@ fn should_hide_param_name_hint(\n     param_name: &str,\n     argument: &ast::Expr,\n ) -> bool {\n+    // These are to be tested in the `parameter_hint_heuristics` test\n     // hide when:\n     // - the parameter name is a suffix of the function's name\n     // - the argument is an enum whose name is equal to the parameter\n-    // - exact argument<->parameter match(ignoring leading underscore) or argument is a prefix/suffix\n-    //   of parameter with _ splitting it off\n+    // - exact argument<->parameter match(ignoring leading underscore) or parameter is a prefix/suffix\n+    //   of argument with _ splitting it off\n     // - param starts with `ra_fixture`\n     // - param is a well known name in an unary function\n \n@@ -342,23 +342,22 @@ fn should_hide_param_name_hint(\n }\n \n fn is_argument_similar_to_param_name(argument: &ast::Expr, param_name: &str) -> bool {\n-    match get_string_representation(argument) {\n-        None => false,\n-        Some(argument) => {\n-            let mut res = false;\n-            if let Some(first) = argument.bytes().skip_while(|&c| c == b'_').position(|c| c == b'_')\n-            {\n-                res |= param_name == argument[..first].trim_start_matches('_');\n-            }\n-            if let Some(last) =\n-                argument.bytes().rev().skip_while(|&c| c == b'_').position(|c| c == b'_')\n-            {\n-                res |= param_name == argument[last..].trim_end_matches('_');\n-            }\n-            res |= argument == param_name;\n-            res\n-        }\n+    // check whether param_name and argument are the same or\n+    // whether param_name is a prefix/suffix of argument(split at `_`)\n+    let argument = match get_string_representation(argument) {\n+        Some(argument) => argument,\n+        None => return false,\n+    };\n+\n+    let param_name = param_name.trim_start_matches('_');\n+    let argument = argument.trim_start_matches('_');\n+    if argument.strip_prefix(param_name).map_or(false, |s| s.starts_with('_')) {\n+        return true;\n+    }\n+    if argument.strip_suffix(param_name).map_or(false, |s| s.ends_with('_')) {\n+        return true;\n     }\n+    argument == param_name\n }\n \n /// Hide the parameter name of an unary function if it is a `_` - prefixed suffix of the function's name, or equal.\n@@ -397,7 +396,7 @@ fn get_string_representation(expr: &ast::Expr) -> Option<String> {\n         ast::Expr::MethodCallExpr(method_call_expr) => {\n             let name_ref = method_call_expr.name_ref()?;\n             match name_ref.text().as_str() {\n-                \"clone\" => method_call_expr.receiver().map(|rec| rec.to_string()),\n+                \"clone\" | \"as_ref\" => method_call_expr.receiver().map(|rec| rec.to_string()),\n                 name_ref => Some(name_ref.to_owned()),\n             }\n         }\n@@ -451,6 +450,42 @@ mod tests {\n         check_with_config(TEST_CONFIG, ra_fixture);\n     }\n \n+    fn check_params(ra_fixture: &str) {\n+        check_with_config(\n+            InlayHintsConfig {\n+                parameter_hints: true,\n+                type_hints: false,\n+                chaining_hints: false,\n+                max_length: None,\n+            },\n+            ra_fixture,\n+        );\n+    }\n+\n+    fn check_types(ra_fixture: &str) {\n+        check_with_config(\n+            InlayHintsConfig {\n+                parameter_hints: false,\n+                type_hints: true,\n+                chaining_hints: false,\n+                max_length: None,\n+            },\n+            ra_fixture,\n+        );\n+    }\n+\n+    fn check_chains(ra_fixture: &str) {\n+        check_with_config(\n+            InlayHintsConfig {\n+                parameter_hints: false,\n+                type_hints: false,\n+                chaining_hints: true,\n+                max_length: None,\n+            },\n+            ra_fixture,\n+        );\n+    }\n+\n     fn check_with_config(config: InlayHintsConfig, ra_fixture: &str) {\n         let ra_fixture =\n             format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE);\n@@ -471,16 +506,29 @@ mod tests {\n     }\n \n     #[test]\n-    fn param_hints_only() {\n+    fn hints_disabled() {\n         check_with_config(\n             InlayHintsConfig {\n-                parameter_hints: true,\n                 type_hints: false,\n+                parameter_hints: false,\n                 chaining_hints: false,\n                 max_length: None,\n             },\n             r#\"\n fn foo(a: i32, b: i32) -> i32 { a + b }\n+fn main() {\n+    let _x = foo(4, 4);\n+}\"#,\n+        );\n+    }\n+\n+    // Parameter hint tests\n+\n+    #[test]\n+    fn param_hints_only() {\n+        check_params(\n+            r#\"\n+fn foo(a: i32, b: i32) -> i32 { a + b }\n fn main() {\n     let _x = foo(\n         4,\n@@ -494,13 +542,7 @@ fn main() {\n \n     #[test]\n     fn param_name_similar_to_fn_name_still_hints() {\n-        check_with_config(\n-            InlayHintsConfig {\n-                parameter_hints: true,\n-                type_hints: false,\n-                chaining_hints: false,\n-                max_length: None,\n-            },\n+        check_params(\n             r#\"\n fn max(x: i32, y: i32) -> i32 { x + y }\n fn main() {\n@@ -516,15 +558,18 @@ fn main() {\n \n     #[test]\n     fn param_name_similar_to_fn_name() {\n-        check_with_config(\n-            InlayHintsConfig {\n-                parameter_hints: true,\n-                type_hints: false,\n-                chaining_hints: false,\n-                max_length: None,\n-            },\n+        check_params(\n             r#\"\n fn param_with_underscore(with_underscore: i32) -> i32 { with_underscore }\n+fn main() {\n+    let _x = param_with_underscore(\n+        4,\n+    );\n+}\"#,\n+        );\n+        check_params(\n+            r#\"\n+fn param_with_underscore(underscore: i32) -> i32 { underscore }\n fn main() {\n     let _x = param_with_underscore(\n         4,\n@@ -535,13 +580,7 @@ fn main() {\n \n     #[test]\n     fn param_name_same_as_fn_name() {\n-        check_with_config(\n-            InlayHintsConfig {\n-                parameter_hints: true,\n-                type_hints: false,\n-                chaining_hints: false,\n-                max_length: None,\n-            },\n+        check_params(\n             r#\"\n fn foo(foo: i32) -> i32 { foo }\n fn main() {\n@@ -554,52 +593,206 @@ fn main() {\n \n     #[test]\n     fn never_hide_param_when_multiple_params() {\n-        check_with_config(\n-            InlayHintsConfig {\n-                parameter_hints: true,\n-                type_hints: false,\n-                chaining_hints: false,\n-                max_length: None,\n-            },\n+        check_params(\n             r#\"\n-fn foo(bar: i32, baz: i32) -> i32 { bar + baz }\n+fn foo(foo: i32, bar: i32) -> i32 { bar + baz }\n fn main() {\n     let _x = foo(\n         4,\n-      //^ bar\n+      //^ foo\n         8,\n-      //^ baz\n+      //^ bar\n     );\n }\"#,\n         );\n     }\n \n     #[test]\n-    fn hints_disabled() {\n-        check_with_config(\n-            InlayHintsConfig {\n-                type_hints: false,\n-                parameter_hints: false,\n-                chaining_hints: false,\n-                max_length: None,\n-            },\n+    fn param_hints_look_through_as_ref_and_clone() {\n+        check_params(\n             r#\"\n-fn foo(a: i32, b: i32) -> i32 { a + b }\n+fn foo(bar: i32, baz: f32) {}\n+\n fn main() {\n-    let _x = foo(4, 4);\n+    let bar = 3;\n+    let baz = &\"baz\";\n+    let fez = 1.0;\n+    foo(bar.clone(), bar.clone());\n+                   //^^^^^^^^^^^ baz\n+    foo(bar.as_ref(), bar.as_ref());\n+                    //^^^^^^^^^^^^ baz\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn self_param_hints() {\n+        check_params(\n+            r#\"\n+struct Foo;\n+\n+impl Foo {\n+    fn foo(self: Self) {}\n+    fn bar(self: &Self) {}\n+}\n+\n+fn main() {\n+    Foo::foo(Foo);\n+           //^^^ self\n+    Foo::bar(&Foo);\n+           //^^^^ self\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn param_name_hints_show_for_literals() {\n+        check_params(\n+            r#\"pub fn test(a: i32, b: i32) -> [i32; 2] { [a, b] }\n+fn main() {\n+    test(\n+        0xa_b,\n+      //^^^^^ a\n+        0xa_b,\n+      //^^^^^ b\n+    );\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn function_call_parameter_hint() {\n+        check_params(\n+            r#\"\n+enum Option<T> { None, Some(T) }\n+use Option::*;\n+\n+struct FileId {}\n+struct SmolStr {}\n+\n+struct TextRange {}\n+struct SyntaxKind {}\n+struct NavigationTarget {}\n+\n+struct Test {}\n+\n+impl Test {\n+    fn method(&self, mut param: i32) -> i32 { param * 2 }\n+\n+    fn from_syntax(\n+        file_id: FileId,\n+        name: SmolStr,\n+        focus_range: Option<TextRange>,\n+        full_range: TextRange,\n+        kind: SyntaxKind,\n+        docs: Option<String>,\n+    ) -> NavigationTarget {\n+        NavigationTarget {}\n+    }\n+}\n+\n+fn test_func(mut foo: i32, bar: i32, msg: &str, _: i32, last: i32) -> i32 {\n+    foo + bar\n+}\n+\n+fn main() {\n+    let not_literal = 1;\n+    let _: i32 = test_func(1,    2,      \"hello\", 3,  not_literal);\n+                         //^ foo ^ bar   ^^^^^^^ msg  ^^^^^^^^^^^ last\n+    let t: Test = Test {};\n+    t.method(123);\n+           //^^^ param\n+    Test::method(&t,      3456);\n+               //^^ self  ^^^^ param\n+    Test::from_syntax(\n+        FileId {},\n+      //^^^^^^^^^ file_id\n+        \"impl\".into(),\n+      //^^^^^^^^^^^^^ name\n+        None,\n+      //^^^^ focus_range\n+        TextRange {},\n+      //^^^^^^^^^^^^ full_range\n+        SyntaxKind {},\n+      //^^^^^^^^^^^^^ kind\n+        None,\n+      //^^^^ docs\n+    );\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn parameter_hint_heuristics() {\n+        check_params(\n+            r#\"\n+fn check(ra_fixture_thing: &str) {}\n+\n+fn map(f: i32) {}\n+fn filter(predicate: i32) {}\n+\n+fn strip_suffix(suffix: &str) {}\n+fn stripsuffix(suffix: &str) {}\n+fn same(same: u32) {}\n+fn same2(_same2: u32) {}\n+\n+fn enum_matches_param_name(completion_kind: CompletionKind) {}\n+\n+fn foo(param: u32) {}\n+fn bar(param_eter: u32) {}\n+\n+enum CompletionKind {\n+    Keyword,\n+}\n+\n+fn non_ident_pat((a, b): (u32, u32)) {}\n+\n+fn main() {\n+    check(\"\");\n+\n+    map(0);\n+    filter(0);\n+\n+    strip_suffix(\"\");\n+    stripsuffix(\"\");\n+              //^^ suffix\n+    same(0);\n+    same2(0);\n+\n+    enum_matches_param_name(CompletionKind::Keyword);\n+\n+    let param = 0;\n+    foo(param);\n+    let param_end = 0;\n+    foo(param_end);\n+    let start_param = 0;\n+    foo(start_param);\n+    let param2 = 0;\n+    foo(param2);\n+      //^^^^^^ param\n+\n+    let param_eter = 0;\n+    bar(param_eter);\n+    let param_eter_end = 0;\n+    bar(param_eter_end);\n+    let start_param_eter = 0;\n+    bar(start_param_eter);\n+    let param_eter2 = 0;\n+    bar(param_eter2);\n+      //^^^^^^^^^^^ param_eter\n+\n+    non_ident_pat((0, 0));\n }\"#,\n         );\n     }\n \n+    // Type-Hint tests\n+\n     #[test]\n     fn type_hints_only() {\n-        check_with_config(\n-            InlayHintsConfig {\n-                type_hints: true,\n-                parameter_hints: false,\n-                chaining_hints: false,\n-                max_length: None,\n-            },\n+        check_types(\n             r#\"\n fn foo(a: i32, b: i32) -> i32 { a + b }\n fn main() {\n@@ -627,70 +820,151 @@ fn main() {\n     }\n \n     #[test]\n-    fn let_statement() {\n-        check(\n+    fn shorten_iterators_in_associated_params() {\n+        check_types(\n             r#\"\n-#[derive(PartialEq)]\n-enum Option<T> { None, Some(T) }\n-\n-#[derive(PartialEq)]\n-struct Test { a: Option<u32>, b: u8 }\n+use core::iter;\n \n-fn main() {\n-    struct InnerStruct {}\n+pub struct SomeIter<T> {}\n \n-    let test = 54;\n-      //^^^^ i32\n-    let test: i32 = 33;\n-    let mut test = 33;\n-      //^^^^^^^^ i32\n-    let _ = 22;\n-    let test = \"test\";\n-      //^^^^ &str\n-    let test = InnerStruct {};\n-      //^^^^ InnerStruct\n+impl<T> SomeIter<T> {\n+    pub fn new() -> Self { SomeIter {} }\n+    pub fn push(&mut self, t: T) {}\n+}\n \n-    let test = unresolved();\n+impl<T> Iterator for SomeIter<T> {\n+    type Item = T;\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+}\n \n-    let test = (42, 'a');\n-      //^^^^ (i32, char)\n-    let (a,    (b,     (c,)) = (2, (3, (9.2,));\n-       //^ i32  ^ i32   ^ f64\n-    let &x = &92;\n-       //^ i32\n+fn main() {\n+    let mut some_iter = SomeIter::new();\n+      //^^^^^^^^^^^^^ SomeIter<Take<Repeat<i32>>>\n+      some_iter.push(iter::repeat(2).take(2));\n+    let iter_of_iters = some_iter.take(2);\n+      //^^^^^^^^^^^^^ impl Iterator<Item = impl Iterator<Item = i32>>\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn infer_call_method_return_associated_types_with_generic() {\n+        check_types(\n+            r#\"\n+            pub trait Default {\n+                fn default() -> Self;\n+            }\n+            pub trait Foo {\n+                type Bar: Default;\n+            }\n+\n+            pub fn quux<T: Foo>() -> T::Bar {\n+                let y = Default::default();\n+                  //^ <T as Foo>::Bar\n+\n+                y\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn fn_hints() {\n+        check_types(\n+            r#\"\n+trait Sized {}\n+\n+fn foo() -> impl Fn() { loop {} }\n+fn foo1() -> impl Fn(f64) { loop {} }\n+fn foo2() -> impl Fn(f64, f64) { loop {} }\n+fn foo3() -> impl Fn(f64, f64) -> u32 { loop {} }\n+fn foo4() -> &'static dyn Fn(f64, f64) -> u32 { loop {} }\n+fn foo5() -> &'static dyn Fn(&'static dyn Fn(f64, f64) -> u32, f64) -> u32 { loop {} }\n+fn foo6() -> impl Fn(f64, f64) -> u32 + Sized { loop {} }\n+fn foo7() -> *const (impl Fn(f64, f64) -> u32 + Sized) { loop {} }\n+\n+fn main() {\n+    let foo = foo();\n+     // ^^^ impl Fn()\n+    let foo = foo1();\n+     // ^^^ impl Fn(f64)\n+    let foo = foo2();\n+     // ^^^ impl Fn(f64, f64)\n+    let foo = foo3();\n+     // ^^^ impl Fn(f64, f64) -> u32\n+    let foo = foo4();\n+     // ^^^ &dyn Fn(f64, f64) -> u32\n+    let foo = foo5();\n+     // ^^^ &dyn Fn(&dyn Fn(f64, f64) -> u32, f64) -> u32\n+    let foo = foo6();\n+     // ^^^ impl Fn(f64, f64) -> u32 + Sized\n+    let foo = foo7();\n+     // ^^^ *const (impl Fn(f64, f64) -> u32 + Sized)\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn unit_structs_have_no_type_hints() {\n+        check_types(\n+            r#\"\n+enum Result<T, E> { Ok(T), Err(E) }\n+use Result::*;\n+\n+struct SyntheticSyntax;\n+\n+fn main() {\n+    match Ok(()) {\n+        Ok(_) => (),\n+        Err(SyntheticSyntax) => (),\n+    }\n }\"#,\n         );\n     }\n \n     #[test]\n-    fn closure_parameters() {\n-        check(\n+    fn let_statement() {\n+        check_types(\n             r#\"\n+#[derive(PartialEq)]\n+enum Option<T> { None, Some(T) }\n+\n+#[derive(PartialEq)]\n+struct Test { a: Option<u32>, b: u8 }\n+\n fn main() {\n-    let mut start = 0;\n-      //^^^^^^^^^ i32\n-    (0..2).for_each(|increment| { start += increment; });\n-                   //^^^^^^^^^ i32\n+    struct InnerStruct {}\n \n-    let multiply =\n-      //^^^^^^^^ |\u2026| -> i32\n-      | a,     b| a * b\n-      //^ i32  ^ i32\n-    ;\n+    let test = 54;\n+      //^^^^ i32\n+    let test: i32 = 33;\n+    let mut test = 33;\n+      //^^^^^^^^ i32\n+    let _ = 22;\n+    let test = \"test\";\n+      //^^^^ &str\n+    let test = InnerStruct {};\n+      //^^^^ InnerStruct\n \n-    let _: i32 = multiply(1, 2);\n-    let multiply_ref = &multiply;\n-      //^^^^^^^^^^^^ &|\u2026| -> i32\n+    let test = unresolved();\n \n-    let return_42 = || 42;\n-      //^^^^^^^^^ || -> i32\n+    let test = (42, 'a');\n+      //^^^^ (i32, char)\n+    let (a,    (b,     (c,)) = (2, (3, (9.2,));\n+       //^ i32  ^ i32   ^ f64\n+    let &x = &92;\n+       //^ i32\n }\"#,\n         );\n     }\n \n     #[test]\n     fn if_expr() {\n-        check(\n+        check_types(\n             r#\"\n enum Option<T> { None, Some(T) }\n use Option::*;\n@@ -722,7 +996,7 @@ fn main() {\n \n     #[test]\n     fn while_expr() {\n-        check(\n+        check_types(\n             r#\"\n enum Option<T> { None, Some(T) }\n use Option::*;\n@@ -740,7 +1014,7 @@ fn main() {\n \n     #[test]\n     fn match_arm_list() {\n-        check(\n+        check_types(\n             r#\"\n enum Option<T> { None, Some(T) }\n use Option::*;\n@@ -761,203 +1035,175 @@ fn main() {\n     }\n \n     #[test]\n-    fn hint_truncation() {\n-        check_with_config(\n-            InlayHintsConfig { max_length: Some(8), ..TEST_CONFIG },\n+    fn incomplete_for_no_hint() {\n+        check_types(\n             r#\"\n-struct Smol<T>(T);\n-\n-struct VeryLongOuterName<T>(T);\n-\n fn main() {\n-    let a = Smol(0u32);\n-      //^ Smol<u32>\n-    let b = VeryLongOuterName(0usize);\n-      //^ VeryLongOuterName<\u2026>\n-    let c = Smol(Smol(0u32))\n-      //^ Smol<Smol<\u2026>>\n+    let data = &[1i32, 2, 3];\n+      //^^^^ &[i32; 3]\n+    for i\n }\"#,\n         );\n-    }\n-\n-    #[test]\n-    fn function_call_parameter_hint() {\n         check(\n             r#\"\n-enum Option<T> { None, Some(T) }\n-use Option::*;\n-\n-struct FileId {}\n-struct SmolStr {}\n-\n-struct TextRange {}\n-struct SyntaxKind {}\n-struct NavigationTarget {}\n-\n-struct Test {}\n-\n-impl Test {\n-    fn method(&self, mut param: i32) -> i32 { param * 2 }\n+pub struct Vec<T> {}\n \n-    fn from_syntax(\n-        file_id: FileId,\n-        name: SmolStr,\n-        focus_range: Option<TextRange>,\n-        full_range: TextRange,\n-        kind: SyntaxKind,\n-        docs: Option<String>,\n-    ) -> NavigationTarget {\n-        NavigationTarget {}\n-    }\n+impl<T> Vec<T> {\n+    pub fn new() -> Self { Vec {} }\n+    pub fn push(&mut self, t: T) {}\n }\n \n-fn test_func(mut foo: i32, bar: i32, msg: &str, _: i32, last: i32) -> i32 {\n-    foo + bar\n+impl<T> IntoIterator for Vec<T> {\n+    type Item=T;\n }\n \n fn main() {\n-    let not_literal = 1;\n-      //^^^^^^^^^^^ i32\n-    let _: i32 = test_func(1,    2,      \"hello\", 3,  not_literal);\n-                         //^ foo ^ bar   ^^^^^^^ msg  ^^^^^^^^^^^ last\n-    let t: Test = Test {};\n-    t.method(123);\n-           //^^^ param\n-    Test::method(&t,      3456);\n-               //^^ self  ^^^^ param\n-    Test::from_syntax(\n-        FileId {},\n-      //^^^^^^^^^ file_id\n-        \"impl\".into(),\n-      //^^^^^^^^^^^^^ name\n-        None,\n-      //^^^^ focus_range\n-        TextRange {},\n-      //^^^^^^^^^^^^ full_range\n-        SyntaxKind {},\n-      //^^^^^^^^^^^^^ kind\n-        None,\n-      //^^^^ docs\n-    );\n-}\"#,\n+    let mut data = Vec::new();\n+      //^^^^^^^^ Vec<&str>\n+    data.push(\"foo\");\n+    for i in\n+\n+    println!(\"Unit expr\");\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n-    fn omitted_parameters_hints_heuristics() {\n-        check_with_config(\n-            InlayHintsConfig { max_length: Some(8), ..TEST_CONFIG },\n+    fn complete_for_hint() {\n+        check_types(\n             r#\"\n-fn map(f: i32) {}\n-fn filter(predicate: i32) {}\n+pub struct Vec<T> {}\n \n-struct TestVarContainer {\n-    test_var: i32,\n+impl<T> Vec<T> {\n+    pub fn new() -> Self { Vec {} }\n+    pub fn push(&mut self, t: T) {}\n }\n \n-impl TestVarContainer {\n-    fn test_var(&self) -> i32 {\n-        self.test_var\n-    }\n+impl<T> IntoIterator for Vec<T> {\n+    type Item=T;\n }\n \n-struct Test {}\n-\n-impl Test {\n-    fn map(self, f: i32) -> Self {\n-        self\n-    }\n-\n-    fn filter(self, predicate: i32) -> Self {\n-        self\n+fn main() {\n+    let mut data = Vec::new();\n+      //^^^^^^^^ Vec<&str>\n+    data.push(\"foo\");\n+    for i in data {\n+      //^ &str\n+      let z = i;\n+        //^ &str\n     }\n-\n-    fn field(self, value: i32) -> Self {\n-        self\n+}\n+\"#,\n+        );\n     }\n \n-    fn no_hints_expected(&self, _: i32, test_var: i32) {}\n+    #[test]\n+    fn multi_dyn_trait_bounds() {\n+        check_types(\n+            r#\"\n+pub struct Vec<T> {}\n \n-    fn frob(&self, frob: bool) {}\n+impl<T> Vec<T> {\n+    pub fn new() -> Self { Vec {} }\n }\n \n-struct Param {}\n+pub struct Box<T> {}\n \n-fn different_order(param: &Param) {}\n-fn different_order_mut(param: &mut Param) {}\n-fn has_underscore(_param: bool) {}\n-fn enum_matches_param_name(completion_kind: CompletionKind) {}\n-fn param_destructuring_omitted_1((a, b): (u32, u32)) {}\n-fn param_destructuring_omitted_2(TestVarContainer { test_var: _ }: TestVarContainer) {}\n-\n-fn twiddle(twiddle: bool) {}\n-fn doo(_doo: bool) {}\n-\n-enum CompletionKind {\n-    Keyword,\n-}\n+trait Display {}\n+trait Sync {}\n \n fn main() {\n-    let container: TestVarContainer = TestVarContainer { test_var: 42 };\n-    let test: Test = Test {};\n-\n-    map(22);\n-    filter(33);\n-\n-    let test_processed: Test = test.map(1).filter(2).field(3);\n+    let _v = Vec::<Box<&(dyn Display + Sync)>>::new();\n+      //^^ Vec<Box<&(dyn Display + Sync)>>\n+    let _v = Vec::<Box<*const (dyn Display + Sync)>>::new();\n+      //^^ Vec<Box<*const (dyn Display + Sync)>>\n+    let _v = Vec::<Box<dyn Display + Sync>>::new();\n+      //^^ Vec<Box<dyn Display + Sync>>\n+}\n+\"#,\n+        );\n+    }\n \n-    let test_var: i32 = 55;\n-    test_processed.no_hints_expected(22, test_var);\n-    test_processed.no_hints_expected(33, container.test_var);\n-    test_processed.no_hints_expected(44, container.test_var());\n-    test_processed.frob(false);\n+    #[test]\n+    fn shorten_iterator_hints() {\n+        check_types(\n+            r#\"\n+use core::iter;\n \n-    twiddle(true);\n-    doo(true);\n+struct MyIter;\n \n-    const TWIDDLE_UPPERCASE: bool = true;\n-    twiddle(TWIDDLE_UPPERCASE);\n+impl Iterator for MyIter {\n+    type Item = ();\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+}\n \n-    let mut param_begin: Param = Param {};\n-    different_order(&param_begin);\n-    different_order(&mut param_begin);\n+fn main() {\n+    let _x = MyIter;\n+      //^^ MyIter\n+    let _x = iter::repeat(0);\n+      //^^ impl Iterator<Item = i32>\n+    fn generic<T: Clone>(t: T) {\n+        let _x = iter::repeat(t);\n+          //^^ impl Iterator<Item = T>\n+        let _chained = iter::repeat(t).take(10);\n+          //^^^^^^^^ impl Iterator<Item = T>\n+    }\n+}\n+\"#,\n+        );\n+    }\n \n-    let param: bool = true;\n-    has_underscore(param);\n+    #[test]\n+    fn closures() {\n+        check(\n+            r#\"\n+fn main() {\n+    let mut start = 0;\n+      //^^^^^^^^^ i32\n+    (0..2).for_each(|increment| { start += increment; });\n+                   //^^^^^^^^^ i32\n \n-    enum_matches_param_name(CompletionKind::Keyword);\n+    let multiply =\n+      //^^^^^^^^ |\u2026| -> i32\n+      | a,     b| a * b\n+      //^ i32  ^ i32\n+    ;\n \n-    let a: f64 = 7.0;\n-    let b: f64 = 4.0;\n-    let _: f64 = a.div_euclid(b);\n-    let _: f64 = a.abs_sub(b);\n+    let _: i32 = multiply(1, 2);\n+    let multiply_ref = &multiply;\n+      //^^^^^^^^^^^^ &|\u2026| -> i32\n \n-    let range: (u32, u32) = (3, 5);\n-    param_destructuring_omitted_1(range);\n-    param_destructuring_omitted_2(container);\n+    let return_42 = || 42;\n+      //^^^^^^^^^ || -> i32\n }\"#,\n         );\n     }\n \n     #[test]\n-    fn unit_structs_have_no_type_hints() {\n+    fn hint_truncation() {\n         check_with_config(\n             InlayHintsConfig { max_length: Some(8), ..TEST_CONFIG },\n             r#\"\n-enum Result<T, E> { Ok(T), Err(E) }\n-use Result::*;\n+struct Smol<T>(T);\n \n-struct SyntheticSyntax;\n+struct VeryLongOuterName<T>(T);\n \n fn main() {\n-    match Ok(()) {\n-        Ok(_) => (),\n-        Err(SyntheticSyntax) => (),\n-    }\n+    let a = Smol(0u32);\n+      //^ Smol<u32>\n+    let b = VeryLongOuterName(0usize);\n+      //^ VeryLongOuterName<\u2026>\n+    let c = Smol(Smol(0u32))\n+      //^ Smol<Smol<\u2026>>\n }\"#,\n         );\n     }\n \n+    // Chaining hint tests\n+\n     #[test]\n     fn chaining_hints_ignore_comments() {\n         check_expect(\n@@ -1000,13 +1246,7 @@ fn main() {\n \n     #[test]\n     fn chaining_hints_without_newlines() {\n-        check_with_config(\n-            InlayHintsConfig {\n-                parameter_hints: false,\n-                type_hints: false,\n-                chaining_hints: true,\n-                max_length: None,\n-            },\n+        check_chains(\n             r#\"\n struct A(B);\n impl A { fn into_b(self) -> B { self.0 } }\n@@ -1109,140 +1349,6 @@ fn main() {\n         );\n     }\n \n-    #[test]\n-    fn incomplete_for_no_hint() {\n-        check(\n-            r#\"\n-fn main() {\n-    let data = &[1i32, 2, 3];\n-      //^^^^ &[i32; 3]\n-    for i\n-}\"#,\n-        );\n-        check(\n-            r#\"\n-pub struct Vec<T> {}\n-\n-impl<T> Vec<T> {\n-    pub fn new() -> Self { Vec {} }\n-    pub fn push(&mut self, t: T) {}\n-}\n-\n-impl<T> IntoIterator for Vec<T> {\n-    type Item=T;\n-}\n-\n-fn main() {\n-    let mut data = Vec::new();\n-      //^^^^^^^^ Vec<&str>\n-    data.push(\"foo\");\n-    for i in\n-\n-    println!(\"Unit expr\");\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn complete_for_hint() {\n-        check(\n-            r#\"\n-pub struct Vec<T> {}\n-\n-impl<T> Vec<T> {\n-    pub fn new() -> Self { Vec {} }\n-    pub fn push(&mut self, t: T) {}\n-}\n-\n-impl<T> IntoIterator for Vec<T> {\n-    type Item=T;\n-}\n-\n-fn main() {\n-    let mut data = Vec::new();\n-      //^^^^^^^^ Vec<&str>\n-    data.push(\"foo\");\n-    for i in data {\n-      //^ &str\n-      let z = i;\n-        //^ &str\n-    }\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn multi_dyn_trait_bounds() {\n-        check_with_config(\n-            InlayHintsConfig {\n-                type_hints: true,\n-                parameter_hints: false,\n-                chaining_hints: false,\n-                max_length: None,\n-            },\n-            r#\"\n-pub struct Vec<T> {}\n-\n-impl<T> Vec<T> {\n-    pub fn new() -> Self { Vec {} }\n-}\n-\n-pub struct Box<T> {}\n-\n-trait Display {}\n-trait Sync {}\n-\n-fn main() {\n-    let _v = Vec::<Box<&(dyn Display + Sync)>>::new();\n-      //^^ Vec<Box<&(dyn Display + Sync)>>\n-    let _v = Vec::<Box<*const (dyn Display + Sync)>>::new();\n-      //^^ Vec<Box<*const (dyn Display + Sync)>>\n-    let _v = Vec::<Box<dyn Display + Sync>>::new();\n-      //^^ Vec<Box<dyn Display + Sync>>\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn shorten_iterator_hints() {\n-        check_with_config(\n-            InlayHintsConfig {\n-                parameter_hints: false,\n-                type_hints: true,\n-                chaining_hints: false,\n-                max_length: None,\n-            },\n-            r#\"\n-use core::iter;\n-\n-struct MyIter;\n-\n-impl Iterator for MyIter {\n-    type Item = ();\n-    fn next(&mut self) -> Option<Self::Item> {\n-        None\n-    }\n-}\n-\n-fn main() {\n-    let _x = MyIter;\n-      //^^ MyIter\n-    let _x = iter::repeat(0);\n-      //^^ impl Iterator<Item = i32>\n-    fn generic<T: Clone>(t: T) {\n-        let _x = iter::repeat(t);\n-          //^^ impl Iterator<Item = T>\n-        let _chained = iter::repeat(t).take(10);\n-          //^^^^^^^^ impl Iterator<Item = T>\n-    }\n-}\n-\"#,\n-        );\n-    }\n-\n     #[test]\n     fn shorten_iterator_chaining_hints() {\n         check_expect(\n@@ -1298,158 +1404,4 @@ fn main() {\n             \"#]],\n         );\n     }\n-\n-    #[test]\n-    fn shorten_iterators_in_associated_params() {\n-        check_with_config(\n-            InlayHintsConfig {\n-                parameter_hints: false,\n-                type_hints: true,\n-                chaining_hints: false,\n-                max_length: None,\n-            },\n-            r#\"\n-use core::iter;\n-\n-pub struct SomeIter<T> {}\n-\n-impl<T> SomeIter<T> {\n-    pub fn new() -> Self { SomeIter {} }\n-    pub fn push(&mut self, t: T) {}\n-}\n-\n-impl<T> Iterator for SomeIter<T> {\n-    type Item = T;\n-    fn next(&mut self) -> Option<Self::Item> {\n-        None\n-    }\n-}\n-\n-fn main() {\n-    let mut some_iter = SomeIter::new();\n-      //^^^^^^^^^^^^^ SomeIter<Take<Repeat<i32>>>\n-      some_iter.push(iter::repeat(2).take(2));\n-    let iter_of_iters = some_iter.take(2);\n-      //^^^^^^^^^^^^^ impl Iterator<Item = impl Iterator<Item = i32>>\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn hide_param_hints_for_clones() {\n-        check_with_config(\n-            InlayHintsConfig {\n-                parameter_hints: true,\n-                type_hints: false,\n-                chaining_hints: false,\n-                max_length: None,\n-            },\n-            r#\"\n-fn foo(bar: i32, baz: String, qux: f32) {}\n-\n-fn main() {\n-    let bar = 3;\n-    let baz = &\"baz\";\n-    let fez = 1.0;\n-    foo(bar.clone(), baz.clone(), fez.clone());\n-                                //^^^^^^^^^^^ qux\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn infer_call_method_return_associated_types_with_generic() {\n-        check(\n-            r#\"\n-            pub trait Default {\n-                fn default() -> Self;\n-            }\n-            pub trait Foo {\n-                type Bar: Default;\n-            }\n-\n-            pub fn quux<T: Foo>() -> T::Bar {\n-                let y = Default::default();\n-                  //^ <T as Foo>::Bar\n-\n-                y\n-            }\n-            \"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn self_param_hints() {\n-        check(\n-            r#\"\n-struct Foo;\n-\n-impl Foo {\n-    fn foo(self: Self) {}\n-    fn bar(self: &Self) {}\n-}\n-\n-fn main() {\n-    Foo::foo(Foo);\n-           //^^^ self\n-    Foo::bar(&Foo);\n-           //^^^^ self\n-}\n-\"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn fn_hints() {\n-        check(\n-            r#\"\n-trait Sized {}\n-\n-fn foo() -> impl Fn() { loop {} }\n-fn foo1() -> impl Fn(f64) { loop {} }\n-fn foo2() -> impl Fn(f64, f64) { loop {} }\n-fn foo3() -> impl Fn(f64, f64) -> u32 { loop {} }\n-fn foo4() -> &'static dyn Fn(f64, f64) -> u32 { loop {} }\n-fn foo5() -> &'static dyn Fn(&'static dyn Fn(f64, f64) -> u32, f64) -> u32 { loop {} }\n-fn foo6() -> impl Fn(f64, f64) -> u32 + Sized { loop {} }\n-fn foo7() -> *const (impl Fn(f64, f64) -> u32 + Sized) { loop {} }\n-\n-fn main() {\n-    let foo = foo();\n-     // ^^^ impl Fn()\n-    let foo = foo1();\n-     // ^^^ impl Fn(f64)\n-    let foo = foo2();\n-     // ^^^ impl Fn(f64, f64)\n-    let foo = foo3();\n-     // ^^^ impl Fn(f64, f64) -> u32\n-    let foo = foo4();\n-     // ^^^ &dyn Fn(f64, f64) -> u32\n-    let foo = foo5();\n-     // ^^^ &dyn Fn(&dyn Fn(f64, f64) -> u32, f64) -> u32\n-    let foo = foo6();\n-     // ^^^ impl Fn(f64, f64) -> u32 + Sized\n-    let foo = foo7();\n-     // ^^^ *const (impl Fn(f64, f64) -> u32 + Sized)\n-}\n-\"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn param_name_hints_show_for_literals() {\n-        check(\n-            r#\"pub fn test(a: i32, b: i32) -> [i32; 2] { [a, b] }\n-fn main() {\n-    test(\n-        0x0fab272b,\n-      //^^^^^^^^^^ a\n-        0x0fab272b\n-      //^^^^^^^^^^ b\n-    );\n-}\"#,\n-        )\n-    }\n }"}]}