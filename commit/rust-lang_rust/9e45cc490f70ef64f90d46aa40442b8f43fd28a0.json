{"sha": "9e45cc490f70ef64f90d46aa40442b8f43fd28a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNDVjYzQ5MGY3MGVmNjRmOTBkNDZhYTQwNDQyYjhmNDNmZDI4YTA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-18T11:46:56Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-18T11:46:56Z"}, "message": "Monomorphize type of constant", "tree": {"sha": "eda962aa636f70da6d070cdc08e1a0e19bf17d59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eda962aa636f70da6d070cdc08e1a0e19bf17d59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e45cc490f70ef64f90d46aa40442b8f43fd28a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e45cc490f70ef64f90d46aa40442b8f43fd28a0", "html_url": "https://github.com/rust-lang/rust/commit/9e45cc490f70ef64f90d46aa40442b8f43fd28a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e45cc490f70ef64f90d46aa40442b8f43fd28a0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a9054ad236a47c082e289ead24dec801084a66f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a9054ad236a47c082e289ead24dec801084a66f", "html_url": "https://github.com/rust-lang/rust/commit/9a9054ad236a47c082e289ead24dec801084a66f"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "33f7e7443f02b254948c823a93fa18401e30e48a", "filename": "src/constant.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9e45cc490f70ef64f90d46aa40442b8f43fd28a0/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e45cc490f70ef64f90d46aa40442b8f43fd28a0/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=9e45cc490f70ef64f90d46aa40442b8f43fd28a0", "patch": "@@ -15,23 +15,24 @@ pub fn trans_constant<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, const_: &Cons\n             .unwrap(),\n     };\n \n-    let layout = fx.layout_of(const_.ty);\n-    match const_.ty.sty {\n+    let ty = fx.monomorphize(&const_.ty);\n+    let layout = fx.layout_of(ty);\n+    match ty.sty {\n         TypeVariants::TyBool => {\n             let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n-            CValue::const_val(fx, const_.ty, bits as u64 as i64)\n+            CValue::const_val(fx, ty, bits as u64 as i64)\n         }\n         TypeVariants::TyUint(_) => {\n             let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n-            CValue::const_val(fx, const_.ty, bits as u64 as i64)\n+            CValue::const_val(fx, ty, bits as u64 as i64)\n         }\n         TypeVariants::TyInt(_) => {\n             let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n-            CValue::const_val(fx, const_.ty, bits as i128 as i64)\n+            CValue::const_val(fx, ty, bits as i128 as i64)\n         }\n         TypeVariants::TyFnDef(def_id, substs) => {\n             let func_ref = fx.get_function_ref(Instance::new(def_id, substs));\n-            CValue::Func(func_ref, fx.layout_of(const_.ty))\n+            CValue::Func(func_ref, layout)\n         }\n         _ => {\n             let mut memory = Memory::<CompileTimeEvaluator>::new(fx.tcx.at(DUMMY_SP), ());"}]}