{"sha": "97f3ecda016ca7ab3edf64e11901466f879d4483", "node_id": "C_kwDOAAsO6NoAKDk3ZjNlY2RhMDE2Y2E3YWIzZWRmNjRlMTE5MDE0NjZmODc5ZDQ0ODM", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-06-07T11:15:41Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-06-09T17:43:06Z"}, "message": "load configuration for downloading artifacts from stage0.json", "tree": {"sha": "ef6186372b1107ab072820db8f791b3cd7fa79d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef6186372b1107ab072820db8f791b3cd7fa79d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97f3ecda016ca7ab3edf64e11901466f879d4483", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmKiMSsACgkQzXazX3c0\ndp5gjQ//a613cL3BOzjrv2mQiEoZK0+bl3Py0CRkKmcOlPHWn2j9p1XkFS0hBjsq\nzO1iRQzqyXtx9Ev0MPxMChqrBz75GNMWfiLiZ6LKL79/RQDm6s2OiuE2mwbBwTSe\nOoFx5PKpd4ehcHvw8qQOUR7RBuBK1HlESExjfpWJKies4//hfRjF9dM63VhOAGvY\n5p5WPIcRUJL8MhTnNR6lfNsTfznUdJOSP6/470NZQVcdhYt5TZwmXXJm8aSKKxEY\nlPatO7yM8YJzQ+Xohod8zWuOgelqR9TfwOK+wGHt3rO1famXK66UC5JmsYaLKu4i\nikvXCZwIfjqWsr7EY61lX/9yKDxEqZ2sx0+P8xsN3OODlMTZaAtmT941VPZTkdDn\n6uIcIhp4BhJLXTe5QEfdyUYx6VLFw2kfHhpc/c51owvUavfL8XM+/1Pa9inex5iP\nZv+XXcy9LSiY+diEu2OT8nAaukH1mmZGFG8EQfYGaAn2UIwr5WhB8eqXLee/8xxE\nr31bLJHLzKRcT/Azl74EyVqGyulMGBfbJvfKIgCTuRiPHaYW4H8fKIYvgamkLRv8\nJJxbpcsVRsr01mVb08SbFG15wJktRytFhUcLxUD9EtKyIZX4hQ1MMNOvrQ3hGlus\n6LOnHD8iiB63z3cMZhh/qCuBsWznJ9zkGKc/VxIfjV/Xz4M67Ak=\n=pCaO\n-----END PGP SIGNATURE-----", "payload": "tree ef6186372b1107ab072820db8f791b3cd7fa79d3\nparent c1a0f49e9f92ce7ebb8c9f2a3baefce779bb5950\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1654600541 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1654796586 +0200\n\nload configuration for downloading artifacts from stage0.json\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97f3ecda016ca7ab3edf64e11901466f879d4483", "html_url": "https://github.com/rust-lang/rust/commit/97f3ecda016ca7ab3edf64e11901466f879d4483", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97f3ecda016ca7ab3edf64e11901466f879d4483/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1a0f49e9f92ce7ebb8c9f2a3baefce779bb5950", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a0f49e9f92ce7ebb8c9f2a3baefce779bb5950", "html_url": "https://github.com/rust-lang/rust/commit/c1a0f49e9f92ce7ebb8c9f2a3baefce779bb5950"}], "stats": {"total": 112, "additions": 62, "deletions": 50}, "files": [{"sha": "abd99233e0c7b254122e53a9e21a1dfff146a352", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97f3ecda016ca7ab3edf64e11901466f879d4483/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f3ecda016ca7ab3edf64e11901466f879d4483/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=97f3ecda016ca7ab3edf64e11901466f879d4483", "patch": "@@ -870,16 +870,10 @@ impl<'a> Builder<'a> {\n         self.try_run(patchelf.arg(fname));\n     }\n \n-    pub(crate) fn download_component(\n-        &self,\n-        base: &str,\n-        url: &str,\n-        dest_path: &Path,\n-        help_on_error: &str,\n-    ) {\n+    pub(crate) fn download_component(&self, url: &str, dest_path: &Path, help_on_error: &str) {\n         // Use a temporary file in case we crash while downloading, to avoid a corrupt download in cache/.\n         let tempfile = self.tempdir().join(dest_path.file_name().unwrap());\n-        self.download_with_retries(&tempfile, &format!(\"{}/{}\", base, url), help_on_error);\n+        self.download_with_retries(&tempfile, url, help_on_error);\n         t!(std::fs::rename(&tempfile, dest_path));\n     }\n "}, {"sha": "76d95851d3fa69ebf2803a3a3c00e0fdd6e80b70", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 44, "deletions": 16, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/97f3ecda016ca7ab3edf64e11901466f879d4483/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f3ecda016ca7ab3edf64e11901466f879d4483/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=97f3ecda016ca7ab3edf64e11901466f879d4483", "patch": "@@ -20,7 +20,6 @@ use crate::channel::GitInfo;\n pub use crate::flags::Subcommand;\n use crate::flags::{Color, Flags};\n use crate::util::{exe, output, program_out_of_date, t};\n-use crate::RustfmtMetadata;\n use once_cell::sync::OnceCell;\n use serde::{Deserialize, Deserializer};\n \n@@ -73,6 +72,7 @@ pub struct Config {\n     pub test_compare_mode: bool,\n     pub color: Color,\n     pub patch_binaries_for_nix: bool,\n+    pub stage0_metadata: Stage0Metadata,\n \n     pub on_fail: Option<String>,\n     pub stage: u32,\n@@ -720,6 +720,25 @@ define_config! {\n     }\n }\n \n+#[derive(Default, Deserialize)]\n+pub struct Stage0Metadata {\n+    pub config: Stage0Config,\n+    pub checksums_sha256: HashMap<String, String>,\n+    pub rustfmt: Option<RustfmtMetadata>,\n+}\n+#[derive(Default, Deserialize)]\n+pub struct Stage0Config {\n+    pub dist_server: String,\n+    pub artifacts_server: String,\n+    pub artifacts_with_llvm_assertions_server: String,\n+    pub git_merge_commit_email: String,\n+}\n+#[derive(Default, Deserialize)]\n+pub struct RustfmtMetadata {\n+    pub date: String,\n+    pub version: String,\n+}\n+\n impl Config {\n     pub fn default_opts() -> Config {\n         let mut config = Config::default();\n@@ -776,6 +795,9 @@ impl Config {\n         config.llvm_profile_use = flags.llvm_profile_use;\n         config.llvm_profile_generate = flags.llvm_profile_generate;\n \n+        let stage0_json = t!(std::fs::read(&config.src.join(\"src\").join(\"stage0.json\")));\n+        config.stage0_metadata = t!(serde_json::from_slice::<Stage0Metadata>(&stage0_json));\n+\n         #[cfg(test)]\n         let get_toml = |_| TomlConfig::default();\n         #[cfg(not(test))]\n@@ -1103,8 +1125,11 @@ impl Config {\n             config.rust_codegen_units_std = rust.codegen_units_std.map(threads_from_config);\n             config.rust_profile_use = flags.rust_profile_use.or(rust.profile_use);\n             config.rust_profile_generate = flags.rust_profile_generate.or(rust.profile_generate);\n-            config.download_rustc_commit =\n-                download_ci_rustc_commit(rust.download_rustc, config.verbose > 0);\n+            config.download_rustc_commit = download_ci_rustc_commit(\n+                &config.stage0_metadata,\n+                rust.download_rustc,\n+                config.verbose > 0,\n+            );\n         } else {\n             config.rust_profile_use = flags.rust_profile_use;\n             config.rust_profile_generate = flags.rust_profile_generate;\n@@ -1424,7 +1449,11 @@ fn threads_from_config(v: u32) -> u32 {\n }\n \n /// Returns the commit to download, or `None` if we shouldn't download CI artifacts.\n-fn download_ci_rustc_commit(download_rustc: Option<StringOrBool>, verbose: bool) -> Option<String> {\n+fn download_ci_rustc_commit(\n+    stage0_metadata: &Stage0Metadata,\n+    download_rustc: Option<StringOrBool>,\n+    verbose: bool,\n+) -> Option<String> {\n     // If `download-rustc` is not set, default to rebuilding.\n     let if_unchanged = match download_rustc {\n         None | Some(StringOrBool::Bool(false)) => return None,\n@@ -1443,13 +1472,12 @@ fn download_ci_rustc_commit(download_rustc: Option<StringOrBool>, verbose: bool)\n \n     // Look for a version to compare to based on the current commit.\n     // Only commits merged by bors will have CI artifacts.\n-    let merge_base = output(Command::new(\"git\").args(&[\n-        \"rev-list\",\n-        \"--author=bors@rust-lang.org\",\n-        \"-n1\",\n-        \"--first-parent\",\n-        \"HEAD\",\n-    ]));\n+    let merge_base = output(\n+        Command::new(\"git\")\n+            .arg(\"rev-list\")\n+            .arg(format!(\"--author={}\", stage0_metadata.config.git_merge_commit_email))\n+            .args(&[\"-n1\", \"--first-parent\", \"HEAD\"]),\n+    );\n     let commit = merge_base.trim_end();\n     if commit.is_empty() {\n         println!(\"error: could not find commit hash for downloading rustc\");\n@@ -1484,7 +1512,7 @@ fn download_ci_rustc_commit(download_rustc: Option<StringOrBool>, verbose: bool)\n }\n \n fn maybe_download_rustfmt(builder: &Builder<'_>) -> Option<PathBuf> {\n-    let RustfmtMetadata { date, version } = builder.stage0_metadata.rustfmt.as_ref()?;\n+    let RustfmtMetadata { date, version } = builder.config.stage0_metadata.rustfmt.as_ref()?;\n     let channel = format!(\"{version}-{date}\");\n \n     let host = builder.config.build;\n@@ -1568,13 +1596,13 @@ fn download_component(\n     let tarball = cache_dir.join(&filename);\n     let (base_url, url, should_verify) = match mode {\n         DownloadSource::CI => (\n-            \"https://ci-artifacts.rust-lang.org/rustc-builds\".to_string(),\n+            builder.config.stage0_metadata.config.artifacts_server.clone(),\n             format!(\"{key}/{filename}\"),\n             false,\n         ),\n         DownloadSource::Dist => {\n             let dist_server = env::var(\"RUSTUP_DIST_SERVER\")\n-                .unwrap_or(builder.stage0_metadata.dist_server.to_string());\n+                .unwrap_or(builder.config.stage0_metadata.config.dist_server.to_string());\n             // NOTE: make `dist` part of the URL because that's how it's stored in src/stage0.json\n             (dist_server, format!(\"dist/{key}/{filename}\"), true)\n         }\n@@ -1590,7 +1618,7 @@ fn download_component(\n             target at this time, see https://doc.rust-lang.org/nightly\\\n             /rustc/platform-support.html for more information.\"\n         );\n-        let sha256 = builder.stage0_metadata.checksums_sha256.get(&url).expect(&error);\n+        let sha256 = builder.config.stage0_metadata.checksums_sha256.get(&url).expect(&error);\n         if tarball.exists() {\n             if builder.verify(&tarball, sha256) {\n                 builder.unpack(&tarball, &bin_root, prefix);\n@@ -1610,7 +1638,7 @@ fn download_component(\n         None\n     };\n \n-    builder.download_component(&base_url, &url, &tarball, \"\");\n+    builder.download_component(&format!(\"{base_url}/{url}\"), &tarball, \"\");\n     if let Some(sha256) = checksum {\n         if !builder.verify(&tarball, sha256) {\n             panic!(\"failed to verify {}\", tarball.display());"}, {"sha": "c4a1d603b67ef2215b6f59708ce5fbe0f04dfd6b", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/97f3ecda016ca7ab3edf64e11901466f879d4483/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f3ecda016ca7ab3edf64e11901466f879d4483/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=97f3ecda016ca7ab3edf64e11901466f879d4483", "patch": "@@ -118,7 +118,6 @@ use std::os::windows::fs::symlink_file;\n \n use filetime::FileTime;\n use once_cell::sync::OnceCell;\n-use serde::Deserialize;\n \n use crate::builder::Kind;\n use crate::config::{LlvmLibunwind, TargetSelection};\n@@ -294,8 +293,6 @@ pub struct Build {\n     hosts: Vec<TargetSelection>,\n     targets: Vec<TargetSelection>,\n \n-    // Stage 0 (downloaded) compiler, lld and cargo or their local rust equivalents\n-    stage0_metadata: Stage0Metadata,\n     initial_rustc: PathBuf,\n     initial_cargo: PathBuf,\n     initial_lld: PathBuf,\n@@ -322,18 +319,6 @@ pub struct Build {\n     metrics: metrics::BuildMetrics,\n }\n \n-#[derive(Deserialize)]\n-struct Stage0Metadata {\n-    dist_server: String,\n-    checksums_sha256: HashMap<String, String>,\n-    rustfmt: Option<RustfmtMetadata>,\n-}\n-#[derive(Deserialize)]\n-struct RustfmtMetadata {\n-    date: String,\n-    version: String,\n-}\n-\n #[derive(Debug)]\n struct Crate {\n     name: Interned<String>,\n@@ -482,11 +467,7 @@ impl Build {\n             bootstrap_out\n         };\n \n-        let stage0_json = t!(std::fs::read_to_string(&src.join(\"src\").join(\"stage0.json\")));\n-        let stage0_metadata = t!(serde_json::from_str::<Stage0Metadata>(&stage0_json));\n-\n         let mut build = Build {\n-            stage0_metadata,\n             initial_rustc: config.initial_rustc.clone(),\n             initial_cargo: config.initial_cargo.clone(),\n             initial_lld,"}, {"sha": "e21aa65618b054272a2b69b07833378a979e19c1", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/97f3ecda016ca7ab3edf64e11901466f879d4483/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f3ecda016ca7ab3edf64e11901466f879d4483/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=97f3ecda016ca7ab3edf64e11901466f879d4483", "patch": "@@ -121,7 +121,7 @@ pub(crate) fn maybe_download_ci_llvm(builder: &Builder<'_>) {\n     let mut rev_list = Command::new(\"git\");\n     rev_list.args(&[\n         PathBuf::from(\"rev-list\"),\n-        \"--author=bors@rust-lang.org\".into(),\n+        format!(\"--author={}\", builder.config.stage0_metadata.config.git_merge_commit_email).into(),\n         \"-n1\".into(),\n         \"--first-parent\".into(),\n         \"HEAD\".into(),\n@@ -170,11 +170,10 @@ fn download_ci_llvm(builder: &Builder<'_>, llvm_sha: &str) {\n     if !rustc_cache.exists() {\n         t!(fs::create_dir_all(&rustc_cache));\n     }\n-    let base = \"https://ci-artifacts.rust-lang.org\";\n-    let url = if llvm_assertions {\n-        format!(\"rustc-builds-alt/{}\", llvm_sha)\n+    let base = if llvm_assertions {\n+        &builder.config.stage0_metadata.config.artifacts_with_llvm_assertions_server\n     } else {\n-        format!(\"rustc-builds/{}\", llvm_sha)\n+        &builder.config.stage0_metadata.config.artifacts_server\n     };\n     let filename = format!(\"rust-dev-nightly-{}.tar.xz\", builder.build.build.triple);\n     let tarball = rustc_cache.join(&filename);\n@@ -187,7 +186,11 @@ fn download_ci_llvm(builder: &Builder<'_>, llvm_sha: &str) {\n \\ndownload-ci-llvm = false\n \\n\n \";\n-        builder.download_component(base, &format!(\"{}/{}\", url, filename), &tarball, help_on_error);\n+        builder.download_component(\n+            &format!(\"{base}/{llvm_sha}/{filename}\"),\n+            &tarball,\n+            help_on_error,\n+        );\n     }\n     let llvm_root = builder.config.ci_llvm_root();\n     builder.unpack(&tarball, &llvm_root, \"rust-dev\");"}, {"sha": "b1782955283392e4143a1c05f500cd76b5f0578b", "filename": "src/stage0.json", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97f3ecda016ca7ab3edf64e11901466f879d4483/src%2Fstage0.json", "raw_url": "https://github.com/rust-lang/rust/raw/97f3ecda016ca7ab3edf64e11901466f879d4483/src%2Fstage0.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.json?ref=97f3ecda016ca7ab3edf64e11901466f879d4483", "patch": "@@ -1,7 +1,10 @@\n {\n   \"__comment\": \"Generated by `./x.py run src/tools/bump-stage0`. Run that command again to update the bootstrap compiler.\",\n   \"config\": {\n-    \"dist_server\": \"https://static.rust-lang.org\"\n+    \"dist_server\": \"https://static.rust-lang.org\",\n+    \"artifacts_server\": \"https://ci-artifacts.rust-lang.org/rustc-builds\",\n+    \"artifacts_with_llvm_assertions_server\": \"https://ci-artifacts.rust-lang.org/rustc-builds-alt\",\n+    \"git_merge_commit_email\": \"bors@rust-lang.org\"\n   },\n   \"compiler\": {\n     \"date\": \"2022-05-20\","}, {"sha": "b40fd66e08eb885240b8b9e836c0f2e13211fd37", "filename": "src/tools/bump-stage0/src/main.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97f3ecda016ca7ab3edf64e11901466f879d4483/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97f3ecda016ca7ab3edf64e11901466f879d4483/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs?ref=97f3ecda016ca7ab3edf64e11901466f879d4483", "patch": "@@ -183,6 +183,9 @@ struct Stage0 {\n #[derive(Debug, serde::Serialize, serde::Deserialize)]\n struct Config {\n     dist_server: String,\n+    artifacts_server: String,\n+    artifacts_with_llvm_assertions_server: String,\n+    git_merge_commit_email: String,\n }\n \n #[derive(Debug, serde::Serialize, serde::Deserialize)]"}]}