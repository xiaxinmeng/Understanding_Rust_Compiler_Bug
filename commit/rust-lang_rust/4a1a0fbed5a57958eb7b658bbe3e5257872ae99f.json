{"sha": "4a1a0fbed5a57958eb7b658bbe3e5257872ae99f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMWEwZmJlZDVhNTc5NThlYjdiNjU4YmJlM2U1MjU3ODcyYWU5OWY=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2013-07-28T07:48:16Z"}, "committer": {"name": "James Miller", "email": "james@aatch.net", "date": "2013-07-28T08:26:49Z"}, "message": "Add an atomic fence intrinsic", "tree": {"sha": "fa6f345707b41d6928fc48d30bec705c559c0736", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa6f345707b41d6928fc48d30bec705c559c0736"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f", "html_url": "https://github.com/rust-lang/rust/commit/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9325535b41fa5a7cfac697e86ae86bd1384542e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9325535b41fa5a7cfac697e86ae86bd1384542e6", "html_url": "https://github.com/rust-lang/rust/commit/9325535b41fa5a7cfac697e86ae86bd1384542e6"}], "stats": {"total": 64, "additions": 62, "deletions": 2}, "files": [{"sha": "57563948b0fade37857ae704c3d349da36f9d27a", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=4a1a0fbed5a57958eb7b658bbe3e5257872ae99f", "patch": "@@ -1594,6 +1594,9 @@ pub mod llvm {\n                                          Order: AtomicOrdering)\n                                          -> ValueRef;\n \n+        pub unsafe fn LLVMBuildAtomicFence(B: BuilderRef, Order: AtomicOrdering);\n+\n+\n         /* Selected entries from the downcasts. */\n         #[fast_ffi]\n         pub unsafe fn LLVMIsATerminatorInst(Inst: ValueRef) -> ValueRef;"}, {"sha": "07b774105bbde7b8cbf021b65dd9afc37d4e2d16", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=4a1a0fbed5a57958eb7b658bbe3e5257872ae99f", "patch": "@@ -660,6 +660,11 @@ pub fn CallWithConv(cx: @mut Block, Fn: ValueRef, Args: &[ValueRef],\n     B(cx).call_with_conv(Fn, Args, Conv)\n }\n \n+pub fn AtomicFence(cx: @mut Block, order: AtomicOrdering) {\n+    if cx.unreachable { return; }\n+    B(cx).atomic_fence(order)\n+}\n+\n pub fn Select(cx: @mut Block, If: ValueRef, Then: ValueRef, Else: ValueRef) -> ValueRef {\n     if cx.unreachable { return _Undef(Then); }\n     B(cx).select(If, Then, Else)"}, {"sha": "be9d5a6c118b8b2cd8337e45ac01e5d45d05ac42", "filename": "src/librustc/middle/trans/builder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuilder.rs?ref=4a1a0fbed5a57958eb7b658bbe3e5257872ae99f", "patch": "@@ -943,4 +943,10 @@ impl Builder {\n             llvm::LLVMBuildAtomicRMW(self.llbuilder, op, dst, src, order)\n         }\n     }\n+\n+    pub fn atomic_fence(&self, order: AtomicOrdering) {\n+        unsafe {\n+            llvm::LLVMBuildAtomicFence(self.llbuilder, order);\n+        }\n+    }\n }"}, {"sha": "080d1f2adb573916d4eedd929337adead0b95326", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=4a1a0fbed5a57958eb7b658bbe3e5257872ae99f", "patch": "@@ -661,6 +661,10 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n                             order);\n                 RetVoid(bcx);\n             }\n+            \"fence\" => {\n+                AtomicFence(bcx, order);\n+                RetVoid(bcx);\n+            }\n             op => {\n                 // These are all AtomicRMW ops\n                 let atom_op = match op {"}, {"sha": "cffceee88d3e71a0bb0cd391893b7934c5c6056e", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=4a1a0fbed5a57958eb7b658bbe3e5257872ae99f", "patch": "@@ -3521,7 +3521,9 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n                                       ty::re_bound(ty::br_anon(0)),\n                                       ty::mk_int()), ty::mk_int() ], ty::mk_int())\n             }\n-\n+            \"fence\" => {\n+                (0, ~[], ty::mk_nil())\n+            }\n             op => {\n                 tcx.sess.span_err(it.span,\n                                   fmt!(\"unrecognized atomic operation function: `%s`\","}, {"sha": "8b57da32bbd0c7acbf1e73485aecacd78e6bfc20", "filename": "src/libstd/unstable/atomics.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f/src%2Flibstd%2Funstable%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f/src%2Flibstd%2Funstable%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fatomics.rs?ref=4a1a0fbed5a57958eb7b658bbe3e5257872ae99f", "patch": "@@ -569,6 +569,33 @@ pub unsafe fn atomic_umin<T>(dst: &mut T, val: T, order: Ordering) -> T {\n     })\n }\n \n+/**\n+ * An atomic fence.\n+ *\n+ * A fence 'A' which has `Release` ordering semantics, synchronizes with a\n+ * fence 'B' with (at least) `Aquire` semantics, if and only if there exists\n+ * atomic operations X and Y, bother operating on some atomic object 'M' such\n+ * that A is sequenced before X, Y is synchronized before B and Y obsevers\n+ * the change to M. This provides a happens-before dependence between A and B.\n+ *\n+ * Atomic operations with `Release` or `Acquire` semantics can also synchronize\n+ * with a fence.\n+ *\n+ * A fence with has `SeqCst` ordering, in addition to having both `Acquire` and\n+ * `Release` semantics, participates in the global program order of the other\n+ * `SeqCst` operations and/or fences.\n+ *\n+ * Accepts `Acquire`, `Release`, `AcqRel` and `SeqCst` orderings.\n+ */\n+#[inline] #[cfg(not(stage0))]\n+pub fn fence(order: Ordering) {\n+    match order {\n+        Acquire => intrinsics::atomic_fence_acq(),\n+        Release => intrinsics::atomic_fence_rel(),\n+        AcqRel  => intrinsics::atomic_fence_rel(),\n+        _       => intrinsics::atomic_fence(),\n+    }\n+}\n \n #[cfg(test)]\n mod test {"}, {"sha": "655ede6b4eb9386bc5998433c793444a4058e9db", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=4a1a0fbed5a57958eb7b658bbe3e5257872ae99f", "patch": "@@ -256,6 +256,15 @@ extern \"rust-intrinsic\" {\n     pub fn atomic_umax_acqrel(dst: &mut int, src: int) -> int;\n     pub fn atomic_umax_relaxed(dst: &mut int, src: int) -> int;\n \n+    #[cfg(not(stage0))]\n+    pub fn atomic_fence();\n+    #[cfg(not(stage0))]\n+    pub fn atomic_fence_acq();\n+    #[cfg(not(stage0))]\n+    pub fn atomic_fence_rel();\n+    #[cfg(not(stage0))]\n+    pub fn atomic_fence_acqrel();\n+\n     /// The size of a type in bytes.\n     ///\n     /// This is the exact number of bytes in memory taken up by a"}, {"sha": "beaa7e1daef9c1101ec19c93a56941684607b13d", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=4a1a0fbed5a57958eb7b658bbe3e5257872ae99f", "patch": "@@ -513,6 +513,9 @@ extern \"C\" LLVMValueRef LLVMBuildAtomicCmpXchg(LLVMBuilderRef B,\n     return wrap(unwrap(B)->CreateAtomicCmpXchg(unwrap(target), unwrap(old),\n                                                unwrap(source), order));\n }\n+extern \"C\" LLVMValueRef LLVMBuildAtomicFence(LLVMBuilderRef B, AtomicOrdering order) {\n+    return wrap(unwrap(B)->CreateFence(order));\n+}\n extern \"C\" LLVMValueRef LLVMBuildAtomicRMW(LLVMBuilderRef B,\n                                            AtomicRMWInst::BinOp op,\n                                            LLVMValueRef target,\n@@ -838,4 +841,4 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateUnionType(\n         Flags,\n         unwrapDI<DIArray>(Elements),\n         RunTimeLang));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "260a16dab9845b089a8c01f756dd2d7225aaf275", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/4a1a0fbed5a57958eb7b658bbe3e5257872ae99f/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=4a1a0fbed5a57958eb7b658bbe3e5257872ae99f", "patch": "@@ -90,6 +90,7 @@ LLVMBuildAtomicLoad\n LLVMBuildAtomicStore\n LLVMBuildAtomicCmpXchg\n LLVMBuildAtomicRMW\n+LLVMBuildAtomicFence\n LLVMBuildAdd\n LLVMBuildAggregateRet\n LLVMBuildAlloca"}]}