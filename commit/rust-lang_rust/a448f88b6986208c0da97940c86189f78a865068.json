{"sha": "a448f88b6986208c0da97940c86189f78a865068", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NDhmODhiNjk4NjIwOGMwZGE5Nzk0MGM4NjE4OWY3OGE4NjUwNjg=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-12-14T18:50:59Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-12-22T17:23:37Z"}, "message": "Utilize PGO for rustc linux dist builds\n\nThis implements support for applying PGO to the rustc compilation step (not\nstandard library or any tooling, including rustdoc). Expanding PGO to more tools\nis not terribly difficult but will involve more work and greater CI time\ncommitment.\n\nFor the same reason of avoiding greater time commitment, this currently avoids\nimplementing for platforms outside of x86_64-unknown-linux-gnu, though in\npractice it should be quite simple to extend over time to more platforms. The\ninitial implementation is intentionally minimal here to avoid too much work\ninvestment before we start seeing wins for a subset of Rust users.\n\nThe choice of workloads to profile here is somewhat arbitrary, but the general\nrationale was to aim for a small set that largely avoided time regressions on\nperf.rust-lang.org's full suite of crates. The set chosen is libcore, cargo (and\nits dependencies), and a few ad-hoc stress tests from perf.rlo. The stress tests\nare arguably the most controversial, but they benefit those cases (avoiding\nregressions) and do not really remove wins from other benchmarks.\n\nThe primary next step after this PR lands is to implement support for PGO in\nLLVM. It is unclear whether we can afford a full LLVM rebuild in CI, though, so\nthe approach taken there may need to be more staggered. rustc-only PGO seems\nwell affordable on linux at least, giving us up to 20% wall time wins on some\ncrates for 15 minutes of extra CI time (1 hour up from 45 minutes).\n\nThe PGO data is uploaded to allow others to reuse it if attempting to reproduce\nthe CI build or potentially, in the future, on other platforms where an\noff-by-one strategy is used for dist builds at minimal performance cost.", "tree": {"sha": "e2ebc14fc68513e9f081031a578c32770edaa6f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2ebc14fc68513e9f081031a578c32770edaa6f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a448f88b6986208c0da97940c86189f78a865068", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a448f88b6986208c0da97940c86189f78a865068", "html_url": "https://github.com/rust-lang/rust/commit/a448f88b6986208c0da97940c86189f78a865068", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a448f88b6986208c0da97940c86189f78a865068/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b32e6e6ac8921035177256ab6806e6ab0d4b9b94", "url": "https://api.github.com/repos/rust-lang/rust/commits/b32e6e6ac8921035177256ab6806e6ab0d4b9b94", "html_url": "https://github.com/rust-lang/rust/commit/b32e6e6ac8921035177256ab6806e6ab0d4b9b94"}], "stats": {"total": 180, "additions": 176, "deletions": 4}, "files": [{"sha": "05b1035d843f10238ff06c3fc80565f5a49af909", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a448f88b6986208c0da97940c86189f78a865068/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a448f88b6986208c0da97940c86189f78a865068/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=a448f88b6986208c0da97940c86189f78a865068", "patch": "@@ -471,6 +471,7 @@ impl<'a> Builder<'a> {\n                 dist::RustDev,\n                 dist::Extended,\n                 dist::BuildManifest,\n+                dist::ReproducibleArtifacts,\n             ),\n             Kind::Install => describe!(\n                 install::Docs,"}, {"sha": "091bd2a1c5a160b8903e9bea4c64644d91e3a7f5", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a448f88b6986208c0da97940c86189f78a865068/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a448f88b6986208c0da97940c86189f78a865068/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=a448f88b6986208c0da97940c86189f78a865068", "patch": "@@ -501,6 +501,41 @@ impl Step for Rustc {\n         let mut cargo = builder.cargo(compiler, Mode::Rustc, SourceType::InTree, target, \"build\");\n         rustc_cargo(builder, &mut cargo, target);\n \n+        if builder.config.rust_profile_use.is_some()\n+            && builder.config.rust_profile_generate.is_some()\n+        {\n+            panic!(\"Cannot use and generate PGO profiles at the same time\");\n+        }\n+\n+        let is_collecting = if let Some(path) = &builder.config.rust_profile_generate {\n+            if compiler.stage == 1 {\n+                cargo.rustflag(&format!(\"-Cprofile-generate={}\", path));\n+                // Apparently necessary to avoid overflowing the counters during\n+                // a Cargo build profile\n+                cargo.rustflag(\"-Cllvm-args=-vp-counters-per-site=4\");\n+                true\n+            } else {\n+                false\n+            }\n+        } else if let Some(path) = &builder.config.rust_profile_use {\n+            if compiler.stage == 1 {\n+                cargo.rustflag(&format!(\"-Cprofile-use={}\", path));\n+                cargo.rustflag(\"-Cllvm-args=-pgo-warn-missing-function\");\n+                true\n+            } else {\n+                false\n+            }\n+        } else {\n+            false\n+        };\n+        if is_collecting {\n+            // Ensure paths to Rust sources are relative, not absolute.\n+            cargo.rustflag(&format!(\n+                \"-Cllvm-args=-static-func-strip-dirname-prefix={}\",\n+                builder.config.src.components().count()\n+            ));\n+        }\n+\n         builder.info(&format!(\n             \"Building stage{} compiler artifacts ({} -> {})\",\n             compiler.stage, &compiler.host, target\n@@ -752,7 +787,7 @@ fn copy_codegen_backends_to_sysroot(\n     // Here we're looking for the output dylib of the `CodegenBackend` step and\n     // we're copying that into the `codegen-backends` folder.\n     let dst = builder.sysroot_codegen_backends(target_compiler);\n-    t!(fs::create_dir_all(&dst));\n+    t!(fs::create_dir_all(&dst), dst);\n \n     if builder.config.dry_run {\n         return;"}, {"sha": "58dc5f7af791d1d578f330362663b860b73d2430", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a448f88b6986208c0da97940c86189f78a865068/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a448f88b6986208c0da97940c86189f78a865068/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=a448f88b6986208c0da97940c86189f78a865068", "patch": "@@ -133,6 +133,8 @@ pub struct Config {\n     pub rust_thin_lto_import_instr_limit: Option<u32>,\n     pub rust_remap_debuginfo: bool,\n     pub rust_new_symbol_mangling: bool,\n+    pub rust_profile_use: Option<String>,\n+    pub rust_profile_generate: Option<String>,\n \n     pub build: TargetSelection,\n     pub hosts: Vec<TargetSelection>,\n@@ -494,6 +496,8 @@ struct Rust {\n     llvm_libunwind: Option<String>,\n     control_flow_guard: Option<bool>,\n     new_symbol_mangling: Option<bool>,\n+    profile_generate: Option<String>,\n+    profile_use: Option<String>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -871,6 +875,11 @@ impl Config {\n \n             config.rust_codegen_units = rust.codegen_units.map(threads_from_config);\n             config.rust_codegen_units_std = rust.codegen_units_std.map(threads_from_config);\n+            config.rust_profile_use = flags.rust_profile_use.or(rust.profile_use);\n+            config.rust_profile_generate = flags.rust_profile_generate.or(rust.profile_generate);\n+        } else {\n+            config.rust_profile_use = flags.rust_profile_use;\n+            config.rust_profile_generate = flags.rust_profile_generate;\n         }\n \n         if let Some(t) = toml.target {"}, {"sha": "823f62fa4a3918e029de3f01e95dda957fa292ff", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/a448f88b6986208c0da97940c86189f78a865068/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a448f88b6986208c0da97940c86189f78a865068/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=a448f88b6986208c0da97940c86189f78a865068", "patch": "@@ -2664,3 +2664,72 @@ impl Step for BuildManifest {\n         distdir(builder).join(format!(\"{}-{}.tar.gz\", name, self.target.triple))\n     }\n }\n+\n+/// Tarball containing artifacts necessary to reproduce the build of rustc.\n+///\n+/// Currently this is the PGO profile data.\n+///\n+/// Should not be considered stable by end users.\n+#[derive(Clone, Debug, Eq, Hash, PartialEq)]\n+pub struct ReproducibleArtifacts {\n+    pub target: TargetSelection,\n+}\n+\n+impl Step for ReproducibleArtifacts {\n+    type Output = Option<PathBuf>;\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"reproducible\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(ReproducibleArtifacts { target: run.target });\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) -> Self::Output {\n+        let name = pkgname(builder, \"reproducible-artifacts\");\n+        let tmp = tmpdir(builder);\n+\n+        // Prepare the image.\n+        let image = tmp.join(\"reproducible-artifacts-image\");\n+        let _ = fs::remove_dir_all(&image);\n+\n+        if let Some(path) = &builder.config.rust_profile_use {\n+            builder.install(std::path::Path::new(path), &image, 0o644);\n+        } else {\n+            return None;\n+        }\n+\n+        // Prepare the overlay.\n+        let overlay = tmp.join(\"reproducible-artifacts-overlay\");\n+        let _ = fs::remove_dir_all(&overlay);\n+        builder.create_dir(&overlay);\n+        builder.create(&overlay.join(\"version\"), &builder.rust_version());\n+        for file in &[\"COPYRIGHT\", \"LICENSE-APACHE\", \"LICENSE-MIT\", \"README.md\"] {\n+            builder.install(&builder.src.join(file), &overlay, 0o644);\n+        }\n+\n+        // Create the final tarball.\n+        let mut cmd = rust_installer(builder);\n+        cmd.arg(\"generate\")\n+            .arg(\"--product-name=Rust\")\n+            .arg(\"--rel-manifest-dir=rustlib\")\n+            .arg(\"--success-message=reproducible-artifacts installed.\")\n+            .arg(\"--image-dir\")\n+            .arg(&image)\n+            .arg(\"--work-dir\")\n+            .arg(&tmpdir(builder))\n+            .arg(\"--output-dir\")\n+            .arg(&distdir(builder))\n+            .arg(\"--non-installed-overlay\")\n+            .arg(&overlay)\n+            .arg(format!(\"--package-name={}-{}\", name, self.target.triple))\n+            .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n+            .arg(\"--component-name=reproducible-artifacts\");\n+\n+        builder.run(&mut cmd);\n+        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, self.target.triple)))\n+    }\n+}"}, {"sha": "d6a45f1c17076f48ffb01412126f24c63583e967", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a448f88b6986208c0da97940c86189f78a865068/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a448f88b6986208c0da97940c86189f78a865068/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=a448f88b6986208c0da97940c86189f78a865068", "patch": "@@ -68,6 +68,9 @@ pub struct Flags {\n     pub deny_warnings: Option<bool>,\n \n     pub llvm_skip_rebuild: Option<bool>,\n+\n+    pub rust_profile_use: Option<String>,\n+    pub rust_profile_generate: Option<String>,\n }\n \n pub enum Subcommand {\n@@ -219,6 +222,8 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n              VALUE overrides the skip-rebuild option in config.toml.\",\n             \"VALUE\",\n         );\n+        opts.optopt(\"\", \"rust-profile-generate\", \"rustc error format\", \"FORMAT\");\n+        opts.optopt(\"\", \"rust-profile-use\", \"rustc error format\", \"FORMAT\");\n \n         // We can't use getopt to parse the options until we have completed specifying which\n         // options are valid, but under the current implementation, some options are conditional on\n@@ -674,6 +679,8 @@ Arguments:\n             color: matches\n                 .opt_get_default(\"color\", Color::Auto)\n                 .expect(\"`color` should be `always`, `never`, or `auto`\"),\n+            rust_profile_use: matches.opt_str(\"rust-profile-use\"),\n+            rust_profile_generate: matches.opt_str(\"rust-profile-generate\"),\n         }\n     }\n }"}, {"sha": "d1b4bbf7fffef374431494c36411b9e102763543", "filename": "src/ci/docker/host-x86_64/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a448f88b6986208c0da97940c86189f78a865068/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/a448f88b6986208c0da97940c86189f78a865068/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-linux%2FDockerfile?ref=a448f88b6986208c0da97940c86189f78a865068", "patch": "@@ -85,6 +85,8 @@ ENV CC=clang CXX=clang++\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n+ENV PGO_HOST=x86_64-unknown-linux-gnu\n+\n ENV HOSTS=x86_64-unknown-linux-gnu\n \n ENV RUST_CONFIGURE_ARGS \\\n@@ -98,9 +100,10 @@ ENV RUST_CONFIGURE_ARGS \\\n       --set llvm.thin-lto=true \\\n       --set llvm.ninja=false \\\n       --set rust.jemalloc\n-ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS \\\n-        --include-default-paths \\\n-        src/tools/build-manifest\n+ENV SCRIPT ../src/ci/pgo.sh python2.7 ../x.py dist \\\n+    --host $HOSTS --target $HOSTS \\\n+    --include-default-paths \\\n+    src/tools/build-manifest\n ENV CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=clang\n \n # This is the only builder which will create source tarballs"}, {"sha": "13b8ca91f890f55640af49b2573ef6e459244e9a", "filename": "src/ci/pgo.sh", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a448f88b6986208c0da97940c86189f78a865068/src%2Fci%2Fpgo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a448f88b6986208c0da97940c86189f78a865068/src%2Fci%2Fpgo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fpgo.sh?ref=a448f88b6986208c0da97940c86189f78a865068", "patch": "@@ -0,0 +1,47 @@\n+#!/bin/bash\n+\n+set -euxo pipefail\n+\n+rm -rf /tmp/rustc-pgo\n+\n+python2.7 ../x.py build --target=$PGO_HOST --host=$PGO_HOST \\\n+    --stage 2 library/std --rust-profile-generate=/tmp/rustc-pgo\n+\n+./build/$PGO_HOST/stage2/bin/rustc --edition=2018 \\\n+    --crate-type=lib ../library/core/src/lib.rs\n+\n+# Download and build a single-file stress test benchmark on perf.rust-lang.org.\n+function pgo_perf_benchmark {\n+    local PERF=e095f5021bf01cf3800f50b3a9f14a9683eb3e4e\n+    local github_prefix=https://raw.githubusercontent.com/rust-lang/rustc-perf/$PERF\n+    local name=$1\n+    curl -o /tmp/$name.rs $github_prefix/collector/benchmarks/$name/src/lib.rs\n+    ./build/$PGO_HOST/stage2/bin/rustc --edition=2018 --crate-type=lib /tmp/$name.rs\n+}\n+\n+pgo_perf_benchmark externs\n+pgo_perf_benchmark ctfe-stress-4\n+\n+cp -pri ../src/tools/cargo /tmp/cargo\n+\n+# Build cargo (with some flags)\n+function pgo_cargo {\n+    RUSTC=./build/$PGO_HOST/stage2/bin/rustc \\\n+        ./build/$PGO_HOST/stage0/bin/cargo $@ \\\n+        --manifest-path /tmp/cargo/Cargo.toml\n+}\n+\n+# Build a couple different variants of Cargo\n+CARGO_INCREMENTAL=1 pgo_cargo check\n+echo 'pub fn barbarbar() {}' >> /tmp/cargo/src/cargo/lib.rs\n+CARGO_INCREMENTAL=1 pgo_cargo check\n+touch /tmp/cargo/src/cargo/lib.rs\n+CARGO_INCREMENTAL=1 pgo_cargo check\n+pgo_cargo build --release\n+\n+# Merge the profile data we gathered\n+./build/$PGO_HOST/llvm/bin/llvm-profdata \\\n+    merge -o /tmp/rustc-pgo.profdata /tmp/rustc-pgo\n+\n+# This produces the actual final set of artifacts.\n+$@ --rust-profile-use=/tmp/rustc-pgo.profdata"}, {"sha": "73a4cbd07924f4eec588ac496d00ad7620f753f1", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a448f88b6986208c0da97940c86189f78a865068/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a448f88b6986208c0da97940c86189f78a865068/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=a448f88b6986208c0da97940c86189f78a865068", "patch": "@@ -299,6 +299,7 @@ impl Builder {\n         let mut package = |name, targets| self.package(name, &mut manifest.pkg, targets);\n         package(\"rustc\", HOSTS);\n         package(\"rustc-dev\", HOSTS);\n+        package(\"reproducible-artifacts\", HOSTS);\n         package(\"rustc-docs\", HOSTS);\n         package(\"cargo\", HOSTS);\n         package(\"rust-mingw\", MINGW);"}]}