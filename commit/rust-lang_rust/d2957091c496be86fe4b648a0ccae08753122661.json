{"sha": "d2957091c496be86fe4b648a0ccae08753122661", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyOTU3MDkxYzQ5NmJlODZmZTRiNjQ4YTBjY2FlMDg3NTMxMjI2NjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-29T19:13:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-29T19:13:49Z"}, "message": "auto merge of #6733 : alexcrichton/rust/issue-2400, r=brson\n\nMost of the relevant information can be found in the commit messages.\r\n\r\nr? @brson - I just wanted to make sure the make changes aren't completely bogus\r\n\r\nThis would close #2400, #6517, and #6489 (although a run through incoming-full on linux would have to confirm the latter two)", "tree": {"sha": "5436f3595c68fc59ccc1494a9a812308d433664c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5436f3595c68fc59ccc1494a9a812308d433664c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2957091c496be86fe4b648a0ccae08753122661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2957091c496be86fe4b648a0ccae08753122661", "html_url": "https://github.com/rust-lang/rust/commit/d2957091c496be86fe4b648a0ccae08753122661", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2957091c496be86fe4b648a0ccae08753122661/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "562069c12f4229d57ef31f559a40a64627bde782", "url": "https://api.github.com/repos/rust-lang/rust/commits/562069c12f4229d57ef31f559a40a64627bde782", "html_url": "https://github.com/rust-lang/rust/commit/562069c12f4229d57ef31f559a40a64627bde782"}, {"sha": "ba33472f9f74c508b9f028703aa6f226b7dfd7c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba33472f9f74c508b9f028703aa6f226b7dfd7c2", "html_url": "https://github.com/rust-lang/rust/commit/ba33472f9f74c508b9f028703aa6f226b7dfd7c2"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "737b3b82c00dedefbd70368b6fc56f2740db5183", "filename": "mk/target.mk", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2957091c496be86fe4b648a0ccae08753122661/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d2957091c496be86fe4b648a0ccae08753122661/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=d2957091c496be86fe4b648a0ccae08753122661", "patch": "@@ -8,6 +8,11 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n+# This is the compile-time target-triple for the compiler. For the compiler at\n+# runtime, this should be considered the host-triple. More explanation for why\n+# this exists can be found on issue #2400\n+export CFG_COMPILER_TRIPLE\n+\n # TARGET_STAGE_N template: This defines how target artifacts are built\n # for all stage/target architecture combinations. The arguments:\n # $(1) is the stage\n@@ -62,6 +67,7 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUSTLLVM_$(3)): \\\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n+$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(3)): CFG_COMPILER_TRIPLE = $(2)\n $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(3)):\t\t\\\n \t\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS)\t\t\\\n                 $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(3)) \\"}, {"sha": "d998a8f433897145aa9de7a12851374270e21cef", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2957091c496be86fe4b648a0ccae08753122661/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/d2957091c496be86fe4b648a0ccae08753122661/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=d2957091c496be86fe4b648a0ccae08753122661", "patch": "@@ -307,6 +307,7 @@ $(3)/stage$(1)/test/syntaxtest-$(2)$$(X_$(2)):\t\t\t\\\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n \n+$(3)/stage$(1)/test/rustctest-$(2)$$(X_$(2)): CFG_COMPILER_TRIPLE = $(2)\n $(3)/stage$(1)/test/rustctest-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \t\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM_$(2)) \\"}, {"sha": "a210234adb1ab8837e1c098f5d9e25a8c0f9b0c7", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d2957091c496be86fe4b648a0ccae08753122661/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2957091c496be86fe4b648a0ccae08753122661/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=d2957091c496be86fe4b648a0ccae08753122661", "patch": "@@ -518,15 +518,15 @@ pub fn host_triple() -> ~str {\n     // idea of the host triple is the same as for the set of libraries we've\n     // actually built.  We can't just take LLVM's host triple because they\n     // normalize all ix86 architectures to i386.\n-\n-    // FIXME (#2400): Instead of grabbing the host triple we really should\n-    // be grabbing (at compile time) the target triple that this rustc is\n-    // built with and calling that (at runtime) the host triple.\n-    let ht = env!(\"CFG_BUILD_TRIPLE\");\n+    //\n+    // Instead of grabbing the host triple (for the current host), we grab (at\n+    // compile time) the target triple that this rustc is built with and\n+    // calling that (at runtime) the host triple.\n+    let ht = env!(\"CFG_COMPILER_TRIPLE\");\n     return if ht != ~\"\" {\n             ht\n         } else {\n-            fail!(\"rustc built without CFG_BUILD_TRIPLE\")\n+            fail!(\"rustc built without CFG_COMPILER_TRIPLE\")\n         };\n }\n \n@@ -536,15 +536,15 @@ pub fn host_triple() -> ~str {\n     // idea of the host triple is the same as for the set of libraries we've\n     // actually built.  We can't just take LLVM's host triple because they\n     // normalize all ix86 architectures to i386.\n-\n-    // FIXME (#2400): Instead of grabbing the host triple we really should\n-    // be grabbing (at compile time) the target triple that this rustc is\n-    // built with and calling that (at runtime) the host triple.\n-    let ht = env!(\"CFG_BUILD_TRIPLE\");\n+    //\n+    // Instead of grabbing the host triple (for the current host), we grab (at\n+    // compile time) the target triple that this rustc is built with and\n+    // calling that (at runtime) the host triple.\n+    let ht = env!(\"CFG_COMPILER_TRIPLE\");\n     return if ht != \"\" {\n             ht.to_owned()\n         } else {\n-            fail!(\"rustc built without CFG_BUILD_TRIPLE\")\n+            fail!(\"rustc built without CFG_COMPILER_TRIPLE\")\n         };\n }\n "}, {"sha": "9486d9d1ffcd309ecdb01793e2ea35b317921272", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2957091c496be86fe4b648a0ccae08753122661/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/d2957091c496be86fe4b648a0ccae08753122661/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=d2957091c496be86fe4b648a0ccae08753122661", "patch": "@@ -454,8 +454,9 @@ mod tests {\n         }\n     }\n \n-    #[test] #[ignore]\n+    #[test]\n     fn run_all() {\n+        // FIXME(#6511):\n         // By default, unit tests are run in parallel. Rusti, on the other hand,\n         // does not enjoy doing this. I suspect that it is because the LLVM\n         // bindings are not thread-safe (when running parallel tests, some tests\n@@ -468,7 +469,7 @@ mod tests {\n         run_cmds([\"\"]);\n \n         debug!(\"regression test for #5937\");\n-        run_cmds([\"use core;\", \"\"]);\n+        run_cmds([\"use std;\", \"\"]);\n \n         debug!(\"regression test for #5784\");\n         run_cmds([\"let a = 1;\"]);"}, {"sha": "6a69eb71eaf7f2c2648be227738b680ba3796dd2", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2957091c496be86fe4b648a0ccae08753122661/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2957091c496be86fe4b648a0ccae08753122661/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=d2957091c496be86fe4b648a0ccae08753122661", "patch": "@@ -93,9 +93,7 @@ fn test_sysroot() -> Path {\n     self_path.pop()\n }\n \n-// Ignored on i686 -- see #6517\n #[test]\n-#[ignore(cfg(target_arch = \"x86\"))]\n fn test_make_dir_rwx() {\n     let temp = &os::tmpdir();\n     let dir = temp.push(\"quux\");\n@@ -109,7 +107,6 @@ fn test_make_dir_rwx() {\n }\n \n #[test]\n-#[ignore(cfg(target_arch = \"x86\"))]\n fn test_install_valid() {\n     let sysroot = test_sysroot();\n     debug!(\"sysroot = %s\", sysroot.to_str());\n@@ -135,7 +132,6 @@ fn test_install_valid() {\n }\n \n #[test]\n-#[ignore(cfg(target_arch = \"x86\"))]\n fn test_install_invalid() {\n     use conditions::nonexistent_package::cond;\n     use cond1 = conditions::missing_pkg_files::cond;\n@@ -158,7 +154,6 @@ fn test_install_invalid() {\n }\n \n #[test]\n-#[ignore(cfg(target_arch = \"x86\"))]\n fn test_install_url() {\n     let workspace = mkdtemp(&os::tmpdir(), \"test\").expect(\"couldn't create temp dir\");\n     let sysroot = test_sysroot();"}]}