{"sha": "d9761daa575a202c3d119eb3a74632412bef37f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NzYxZGFhNTc1YTIwMmMzZDExOWViM2E3NDYzMjQxMmJlZjM3Zjc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-29T17:39:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-29T17:39:28Z"}, "message": "Rollup merge of #71507 - CohenArthur:document-unsafe-libcore-ptr, r=Mark-Simulacrum\n\nDocument unsafety in core::ptr\n\nContributes to #66219\n\nI have yet to document all the `unsafe` blocks in the lib and would like to know if I'm headed in the right direction\n\nr? @steveklabnik", "tree": {"sha": "c4e29851e33e46213856eb1079c08c7079554aa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4e29851e33e46213856eb1079c08c7079554aa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9761daa575a202c3d119eb3a74632412bef37f7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeqbvRCRBK7hj4Ov3rIwAAdHIIABHU/KpGfPA2xKVAM8rvYUyZ\ngp7P3Ns1RDxn1mzumt0bwhtZlNUGnm5LyJ9vYw3NJt3/dl1vCwVQcyRBR9mbKTIU\n/NbLvkybj3IDXFUXR5L0QeX7T9rjnMqwReIoFMBJXnG8UIv+V1EmkBRbeXwlt5eb\nXFBQnUj3nz0xu8GcBUz1tx/d44L8DMqyJ/a7dJcUmeK+RTL1fgFjIYJAy2Z5lcFe\nqM/KOJeDaIjFtYHNreMU7+2kqQgtFIYJUQNrgjJJsblWQYeeTTde9K1/iFm0GOE4\n6CwFh/YXFn/m9iGExwd7ZeIUuTBUkVDG6vG8BHHU1viu4y/KmmKD6/i5T7nhBPg=\n=BMP0\n-----END PGP SIGNATURE-----\n", "payload": "tree c4e29851e33e46213856eb1079c08c7079554aa5\nparent 36d13cb01ba6a0a9b7c13ca2b9461a111cb3e395\nparent 8558ccd5c4d3d7ca78aaff4a81c48f7a04b0f1f2\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588181968 +0200\ncommitter GitHub <noreply@github.com> 1588181968 +0200\n\nRollup merge of #71507 - CohenArthur:document-unsafe-libcore-ptr, r=Mark-Simulacrum\n\nDocument unsafety in core::ptr\n\nContributes to #66219\n\nI have yet to document all the `unsafe` blocks in the lib and would like to know if I'm headed in the right direction\n\nr? @steveklabnik\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9761daa575a202c3d119eb3a74632412bef37f7", "html_url": "https://github.com/rust-lang/rust/commit/d9761daa575a202c3d119eb3a74632412bef37f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9761daa575a202c3d119eb3a74632412bef37f7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d13cb01ba6a0a9b7c13ca2b9461a111cb3e395", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d13cb01ba6a0a9b7c13ca2b9461a111cb3e395", "html_url": "https://github.com/rust-lang/rust/commit/36d13cb01ba6a0a9b7c13ca2b9461a111cb3e395"}, {"sha": "8558ccd5c4d3d7ca78aaff4a81c48f7a04b0f1f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8558ccd5c4d3d7ca78aaff4a81c48f7a04b0f1f2", "html_url": "https://github.com/rust-lang/rust/commit/8558ccd5c4d3d7ca78aaff4a81c48f7a04b0f1f2"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "58f779106f716547b1cddb43e46c4a3f82fc7bd0", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d9761daa575a202c3d119eb3a74632412bef37f7/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9761daa575a202c3d119eb3a74632412bef37f7/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=d9761daa575a202c3d119eb3a74632412bef37f7", "patch": "@@ -65,8 +65,6 @@\n //! [`write_volatile`]: ./fn.write_volatile.html\n //! [`NonNull::dangling`]: ./struct.NonNull.html#method.dangling\n \n-// ignore-tidy-undocumented-unsafe\n-\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::cmp::Ordering;\n@@ -248,14 +246,17 @@ pub(crate) struct FatPtr<T> {\n ///\n /// // create a slice pointer when starting out with a pointer to the first element\n /// let x = [5, 6, 7];\n-/// let ptr = x.as_ptr();\n-/// let slice = ptr::slice_from_raw_parts(ptr, 3);\n+/// let raw_pointer = x.as_ptr();\n+/// let slice = ptr::slice_from_raw_parts(raw_pointer, 3);\n /// assert_eq!(unsafe { &*slice }[2], 7);\n /// ```\n #[inline]\n #[stable(feature = \"slice_from_raw_parts\", since = \"1.42.0\")]\n #[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n+    // SAFETY: Accessing the value from the `Repr` union is safe since *const [T]\n+    // and FatPtr have the same memory layouts. Only std can make this\n+    // guarantee.\n     unsafe { Repr { raw: FatPtr { data, len } }.rust }\n }\n \n@@ -269,10 +270,28 @@ pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n ///\n /// [`slice_from_raw_parts`]: fn.slice_from_raw_parts.html\n /// [`from_raw_parts_mut`]: ../../std/slice/fn.from_raw_parts_mut.html\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// use std::ptr;\n+///\n+/// let x = &mut [5, 6, 7];\n+/// let raw_pointer = x.as_mut_ptr();\n+/// let slice = ptr::slice_from_raw_parts_mut(raw_pointer, 3);\n+///\n+/// unsafe {\n+///     (*slice)[2] = 99; // assign a value at an index in the slice\n+/// };\n+///\n+/// assert_eq!(unsafe { &*slice }[2], 99);\n+/// ```\n #[inline]\n #[stable(feature = \"slice_from_raw_parts\", since = \"1.42.0\")]\n #[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {\n+    // SAFETY: Accessing the value from the `Repr` union is safe since *mut [T]\n+    // and FatPtr have the same memory layouts\n     unsafe { Repr { raw: FatPtr { data, len } }.rust_mut }\n }\n "}, {"sha": "7d08503215ed022bfb1920d791d9855ac1665d79", "filename": "src/libcore/ptr/non_null.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d9761daa575a202c3d119eb3a74632412bef37f7/src%2Flibcore%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9761daa575a202c3d119eb3a74632412bef37f7/src%2Flibcore%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fnon_null.rs?ref=d9761daa575a202c3d119eb3a74632412bef37f7", "patch": "@@ -7,8 +7,6 @@ use crate::mem;\n use crate::ops::{CoerceUnsized, DispatchFromDyn};\n use crate::ptr::Unique;\n \n-// ignore-tidy-undocumented-unsafe\n-\n /// `*mut T` but non-zero and covariant.\n ///\n /// This is often the correct thing to use when building data structures using\n@@ -69,6 +67,9 @@ impl<T: Sized> NonNull<T> {\n     #[rustc_const_stable(feature = \"const_nonnull_dangling\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn dangling() -> Self {\n+        // SAFETY: mem::align_of() returns a non-zero usize which is then casted\n+        // to a *mut T. Therefore, `ptr` is not null and the conditions for\n+        // calling new_unchecked() are respected.\n         unsafe {\n             let ptr = mem::align_of::<T>() as *mut T;\n             NonNull::new_unchecked(ptr)\n@@ -93,7 +94,12 @@ impl<T: ?Sized> NonNull<T> {\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n     pub fn new(ptr: *mut T) -> Option<Self> {\n-        if !ptr.is_null() { Some(unsafe { Self::new_unchecked(ptr) }) } else { None }\n+        if !ptr.is_null() {\n+            // SAFETY: The pointer is already checked and is not null\n+            Some(unsafe { Self::new_unchecked(ptr) })\n+        } else {\n+            None\n+        }\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n@@ -131,6 +137,7 @@ impl<T: ?Sized> NonNull<T> {\n     #[rustc_const_stable(feature = \"const_nonnull_cast\", since = \"1.32.0\")]\n     #[inline]\n     pub const fn cast<U>(self) -> NonNull<U> {\n+        // SAFETY: `self` is a `NonNull` pointer which is necessarily non-null\n         unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }\n     }\n }\n@@ -205,6 +212,8 @@ impl<T: ?Sized> hash::Hash for NonNull<T> {\n impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n     #[inline]\n     fn from(unique: Unique<T>) -> Self {\n+        // SAFETY: A Unique pointer cannot be null, so the conditions for\n+        // new_unchecked() are respected.\n         unsafe { NonNull::new_unchecked(unique.as_ptr()) }\n     }\n }\n@@ -213,6 +222,7 @@ impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n impl<T: ?Sized> From<&mut T> for NonNull<T> {\n     #[inline]\n     fn from(reference: &mut T) -> Self {\n+        // SAFETY: A mutable reference cannot be null.\n         unsafe { NonNull { pointer: reference as *mut T } }\n     }\n }\n@@ -221,6 +231,8 @@ impl<T: ?Sized> From<&mut T> for NonNull<T> {\n impl<T: ?Sized> From<&T> for NonNull<T> {\n     #[inline]\n     fn from(reference: &T) -> Self {\n+        // SAFETY: A reference cannot be null, so the conditions for\n+        // new_unchecked() are respected.\n         unsafe { NonNull { pointer: reference as *const T } }\n     }\n }"}, {"sha": "f5a5baceacce875ae56099629418d364888cf844", "filename": "src/libcore/ptr/unique.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d9761daa575a202c3d119eb3a74632412bef37f7/src%2Flibcore%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9761daa575a202c3d119eb3a74632412bef37f7/src%2Flibcore%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Funique.rs?ref=d9761daa575a202c3d119eb3a74632412bef37f7", "patch": "@@ -73,6 +73,8 @@ impl<T: Sized> Unique<T> {\n     // FIXME: rename to dangling() to match NonNull?\n     #[inline]\n     pub const fn empty() -> Self {\n+        // SAFETY: mem::align_of() returns a valid, non-null pointer. The\n+        // conditions to call new_unchecked() are thus respected.\n         unsafe { Unique::new_unchecked(mem::align_of::<T>() as *mut T) }\n     }\n }\n@@ -93,6 +95,7 @@ impl<T: ?Sized> Unique<T> {\n     #[inline]\n     pub fn new(ptr: *mut T) -> Option<Self> {\n         if !ptr.is_null() {\n+            // SAFETY: The pointer has already been checked and is not null.\n             Some(unsafe { Unique { pointer: ptr as _, _marker: PhantomData } })\n         } else {\n             None\n@@ -128,6 +131,9 @@ impl<T: ?Sized> Unique<T> {\n     /// Casts to a pointer of another type.\n     #[inline]\n     pub const fn cast<U>(self) -> Unique<U> {\n+        // SAFETY: Unique::new_unchecked() creates a new unique and needs\n+        // the given pointer to not be null.\n+        // Since we are passing self as a pointer, it cannot be null.\n         unsafe { Unique::new_unchecked(self.as_ptr() as *mut U) }\n     }\n }\n@@ -167,6 +173,7 @@ impl<T: ?Sized> fmt::Pointer for Unique<T> {\n impl<T: ?Sized> From<&mut T> for Unique<T> {\n     #[inline]\n     fn from(reference: &mut T) -> Self {\n+        // SAFETY: A mutable reference cannot be null\n         unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }\n     }\n }"}]}