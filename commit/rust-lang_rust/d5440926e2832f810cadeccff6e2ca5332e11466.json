{"sha": "d5440926e2832f810cadeccff6e2ca5332e11466", "node_id": "C_kwDOAAsO6NoAKGQ1NDQwOTI2ZTI4MzJmODEwY2FkZWNjZmY2ZTJjYTUzMzJlMTE0NjY", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-04-07T18:46:53Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-04-07T19:40:32Z"}, "message": "Suggest replacing typeof(...) with an actual type\n\nThis commit suggests replacing typeof(...) with an actual type of \"...\",\nfor example in case of `typeof(1)` we suggest replacing it with `i32`.\n\nIf the expression\n- Is not const (`{ let a = 1; let _: typeof(a); }`)\n- Can't be found (`let _: typeof(this_variable_does_not_exist)`)\n- Or has non-suggestable type (closure, generator, error, etc)\nwe don't suggest anything.", "tree": {"sha": "4a3c6a522601fa3a82a38f05382a3d8361661232", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a3c6a522601fa3a82a38f05382a3d8361661232"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5440926e2832f810cadeccff6e2ca5332e11466", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5440926e2832f810cadeccff6e2ca5332e11466", "html_url": "https://github.com/rust-lang/rust/commit/d5440926e2832f810cadeccff6e2ca5332e11466", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5440926e2832f810cadeccff6e2ca5332e11466/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa723160318fac5f3fa6f4141cfc41c0606a3008", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa723160318fac5f3fa6f4141cfc41c0606a3008", "html_url": "https://github.com/rust-lang/rust/commit/fa723160318fac5f3fa6f4141cfc41c0606a3008"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "2b1deb3430456ff737f0e5d2b1b1e7a13afedb35", "filename": "compiler/rustc_error_messages/locales/en-US/diagnostics.ftl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5440926e2832f810cadeccff6e2ca5332e11466/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fdiagnostics.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d5440926e2832f810cadeccff6e2ca5332e11466/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fdiagnostics.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fdiagnostics.ftl?ref=d5440926e2832f810cadeccff6e2ca5332e11466", "patch": "@@ -62,6 +62,7 @@ typeck-functional-record-update-on-non-struct =\n \n typeck-typeof-reserved-keyword-used =\n     `typeof` is a reserved keyword but unimplemented\n+    .suggestion = consider replacing `typeof(...)` with an actual type\n     .label = reserved keyword\n \n typeck-return-stmt-outside-of-fn-body ="}, {"sha": "42379055fffd03648d8abce856fe17d7ca2f55db", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5440926e2832f810cadeccff6e2ca5332e11466/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5440926e2832f810cadeccff6e2ca5332e11466/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=d5440926e2832f810cadeccff6e2ca5332e11466", "patch": "@@ -2462,8 +2462,16 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 self.normalize_ty(ast_ty.span, array_ty)\n             }\n             hir::TyKind::Typeof(ref e) => {\n-                tcx.sess.emit_err(TypeofReservedKeywordUsed { span: ast_ty.span });\n-                tcx.type_of(tcx.hir().local_def_id(e.hir_id))\n+                let ty = tcx.type_of(tcx.hir().local_def_id(e.hir_id));\n+                let span = ast_ty.span;\n+                tcx.sess.emit_err(TypeofReservedKeywordUsed {\n+                    span,\n+                    ty,\n+                    opt_sugg: Some((span, Applicability::MachineApplicable))\n+                        .filter(|_| ty.is_suggestable()),\n+                });\n+\n+                ty\n             }\n             hir::TyKind::Infer => {\n                 // Infer also appears as the type of arguments or return"}, {"sha": "1088be5f566571d2ff7039c47a40b04012519dee", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5440926e2832f810cadeccff6e2ca5332e11466/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5440926e2832f810cadeccff6e2ca5332e11466/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=d5440926e2832f810cadeccff6e2ca5332e11466", "patch": "@@ -1,5 +1,7 @@\n //! Errors emitted by typeck.\n+use rustc_errors::Applicability;\n use rustc_macros::SessionDiagnostic;\n+use rustc_middle::ty::Ty;\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n #[derive(SessionDiagnostic)]\n@@ -127,10 +129,13 @@ pub struct FunctionalRecordUpdateOnNonStruct {\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0516\", slug = \"typeck-typeof-reserved-keyword-used\")]\n-pub struct TypeofReservedKeywordUsed {\n+pub struct TypeofReservedKeywordUsed<'tcx> {\n+    pub ty: Ty<'tcx>,\n     #[primary_span]\n     #[label]\n     pub span: Span,\n+    #[suggestion_verbose(message = \"suggestion\", code = \"{ty}\")]\n+    pub opt_sugg: Option<(Span, Applicability)>,\n }\n \n #[derive(SessionDiagnostic)]"}]}