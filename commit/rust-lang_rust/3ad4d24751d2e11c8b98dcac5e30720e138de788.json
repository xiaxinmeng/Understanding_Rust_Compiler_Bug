{"sha": "3ad4d24751d2e11c8b98dcac5e30720e138de788", "node_id": "C_kwDOAAsO6NoAKDNhZDRkMjQ3NTFkMmUxMWM4Yjk4ZGNhYzVlMzA3MjBlMTM4ZGU3ODg", "commit": {"author": {"name": "Neutron3529", "email": "qweytr_1@163.com", "date": "2022-11-03T08:35:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-03T08:35:37Z"}, "message": "Optimize the code to run faster.\n\nsuch code is copy from\r\nhttps://github.com/rust-lang/rust/blob/master/library/std/src/f32.rs\r\nand\r\nhttps://github.com/rust-lang/rust/blob/master/library/std/src/f64.rs\r\nusing r+rhs.abs() is faster than calc it directly.\r\nBench result:\r\n```\r\n$ cargo bench\r\n   Compiling div-euclid v0.1.0 (/me/div-euclid)\r\n    Finished bench [optimized] target(s) in 1.01s\r\n     Running unittests src/lib.rs (target/release/deps/div_euclid-7a4530ca7817d1ef)\r\n\r\nrunning 7 tests\r\ntest tests::it_works ... ignored\r\ntest tests::bench_aaabs     ... bench:  10,498,793 ns/iter (+/- 104,360)\r\ntest tests::bench_aadefault ... bench:  11,061,862 ns/iter (+/- 94,107)\r\ntest tests::bench_abs       ... bench:  10,477,193 ns/iter (+/- 81,942)\r\ntest tests::bench_default   ... bench:  10,622,983 ns/iter (+/- 25,119)\r\ntest tests::bench_zzabs     ... bench:  10,481,971 ns/iter (+/- 43,787)\r\ntest tests::bench_zzdefault ... bench:  11,074,976 ns/iter (+/- 29,633)\r\n\r\ntest result: ok. 0 passed; 0 failed; 1 ignored; 6 measured; 0 filtered out; finished in 19.35s\r\n```\r\nbench code:\r\n```\r\n#![feature(test)]\r\nextern crate test;\r\n\r\nfn rem_euclid(a:i32,rhs:i32)->i32{\r\n    let r = a % rhs;\r\n    if r < 0 { r + rhs.abs() } else { r }\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n    use test::Bencher;\r\n    use rand::prelude::*;\r\n    use rand::rngs::SmallRng;\r\n    const N:i32=1000;\r\n    #[test]\r\n    fn it_works() {\r\n        let a: i32 = 7; // or any other integer type\r\n        let b = 4;\r\n\r\n        let d:Vec<i32>=(-N..=N).collect();\r\n        let n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n\r\n        for i in &d {\r\n            for j in &n {\r\n                assert_eq!(i.rem_euclid(*j),rem_euclid(*i,*j));\r\n            }\r\n        }\r\n\r\n        assert_eq!(rem_euclid(a,b), 3);\r\n        assert_eq!(rem_euclid(-a,b), 1);\r\n        assert_eq!(rem_euclid(a,-b), 3);\r\n        assert_eq!(rem_euclid(-a,-b), 1);\r\n    }\r\n\r\n\r\n    #[bench]\r\n    fn bench_aaabs(b: &mut Bencher) {\r\n        let mut d:Vec<i32>=(-N..=N).collect();\r\n        let mut n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        let mut rng=SmallRng::from_seed([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,21]);\r\n        n.shuffle(&mut rng);\r\n        d.shuffle(&mut rng);\r\n        n.shuffle(&mut rng);\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=rem_euclid(*i,*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n    #[bench]\r\n    fn bench_aadefault(b: &mut Bencher) {\r\n        let mut d:Vec<i32>=(-N..=N).collect();\r\n        let mut n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        let mut rng=SmallRng::from_seed([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,21]);\r\n        n.shuffle(&mut rng);\r\n        d.shuffle(&mut rng);\r\n        n.shuffle(&mut rng);\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=i.rem_euclid(*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n\r\n    #[bench]\r\n    fn bench_abs(b: &mut Bencher) {\r\n        let d:Vec<i32>=(-N..=N).collect();\r\n        let n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=rem_euclid(*i,*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n    #[bench]\r\n    fn bench_default(b: &mut Bencher) {\r\n        let d:Vec<i32>=(-N..=N).collect();\r\n        let n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=i.rem_euclid(*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n\r\n    #[bench]\r\n    fn bench_zzabs(b: &mut Bencher) {\r\n        let mut d:Vec<i32>=(-N..=N).collect();\r\n        let mut n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        let mut rng=SmallRng::from_seed([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,21]);\r\n        d.shuffle(&mut rng);\r\n        n.shuffle(&mut rng);\r\n        d.shuffle(&mut rng);\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=rem_euclid(*i,*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n    #[bench]\r\n    fn bench_zzdefault(b: &mut Bencher) {\r\n        let mut d:Vec<i32>=(-N..=N).collect();\r\n        let mut n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        let mut rng=SmallRng::from_seed([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,21]);\r\n        d.shuffle(&mut rng);\r\n        n.shuffle(&mut rng);\r\n        d.shuffle(&mut rng);\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=i.rem_euclid(*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n}\r\n```", "tree": {"sha": "fbde1c41eaa4e430965aee3f6254b7b104048eb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbde1c41eaa4e430965aee3f6254b7b104048eb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ad4d24751d2e11c8b98dcac5e30720e138de788", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjY31ZCRBK7hj4Ov3rIwAAsRUIABjYudwFoY9FueEVjQvwnG3O\noEykASij//rfaW7sQB0cuhJfZqZpAIjEqasi1pDqOU65iia2wiJTwhujbPOEWgT1\nn5f/hl/hMDeKNbwdXbT95mBICiDIAu/AWp8HqZZVCXcRF0BRKBc+ye0nm3VM4m3s\n13XBIsPUcxRKxTTZ3SBQf7wVgp8PjvsEUBn8/3flqEnX2MOsgowPOnlv5IzrkbzV\nVWlKjoGUw3fRVpy2hGDgi5SyGboZSfGQvYw7LIZA3aqVihRPKk6d3xZbao+B5hCD\nzrzioPigfdMHGSbOtCE1fnKCdRXH/C1j12unWFzVb3Dn/MuAO1ylS4pGA9W0ldY=\n=Mx28\n-----END PGP SIGNATURE-----\n", "payload": "tree fbde1c41eaa4e430965aee3f6254b7b104048eb5\nparent ce1a7e41f96be27103b6e3ba09dcefbf5bd320bd\nauthor Neutron3529 <qweytr_1@163.com> 1667464537 +0800\ncommitter GitHub <noreply@github.com> 1667464537 +0800\n\nOptimize the code to run faster.\n\nsuch code is copy from\r\nhttps://github.com/rust-lang/rust/blob/master/library/std/src/f32.rs\r\nand\r\nhttps://github.com/rust-lang/rust/blob/master/library/std/src/f64.rs\r\nusing r+rhs.abs() is faster than calc it directly.\r\nBench result:\r\n```\r\n$ cargo bench\r\n   Compiling div-euclid v0.1.0 (/me/div-euclid)\r\n    Finished bench [optimized] target(s) in 1.01s\r\n     Running unittests src/lib.rs (target/release/deps/div_euclid-7a4530ca7817d1ef)\r\n\r\nrunning 7 tests\r\ntest tests::it_works ... ignored\r\ntest tests::bench_aaabs     ... bench:  10,498,793 ns/iter (+/- 104,360)\r\ntest tests::bench_aadefault ... bench:  11,061,862 ns/iter (+/- 94,107)\r\ntest tests::bench_abs       ... bench:  10,477,193 ns/iter (+/- 81,942)\r\ntest tests::bench_default   ... bench:  10,622,983 ns/iter (+/- 25,119)\r\ntest tests::bench_zzabs     ... bench:  10,481,971 ns/iter (+/- 43,787)\r\ntest tests::bench_zzdefault ... bench:  11,074,976 ns/iter (+/- 29,633)\r\n\r\ntest result: ok. 0 passed; 0 failed; 1 ignored; 6 measured; 0 filtered out; finished in 19.35s\r\n```\r\nbench code:\r\n```\r\n#![feature(test)]\r\nextern crate test;\r\n\r\nfn rem_euclid(a:i32,rhs:i32)->i32{\r\n    let r = a % rhs;\r\n    if r < 0 { r + rhs.abs() } else { r }\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n    use test::Bencher;\r\n    use rand::prelude::*;\r\n    use rand::rngs::SmallRng;\r\n    const N:i32=1000;\r\n    #[test]\r\n    fn it_works() {\r\n        let a: i32 = 7; // or any other integer type\r\n        let b = 4;\r\n\r\n        let d:Vec<i32>=(-N..=N).collect();\r\n        let n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n\r\n        for i in &d {\r\n            for j in &n {\r\n                assert_eq!(i.rem_euclid(*j),rem_euclid(*i,*j));\r\n            }\r\n        }\r\n\r\n        assert_eq!(rem_euclid(a,b), 3);\r\n        assert_eq!(rem_euclid(-a,b), 1);\r\n        assert_eq!(rem_euclid(a,-b), 3);\r\n        assert_eq!(rem_euclid(-a,-b), 1);\r\n    }\r\n\r\n\r\n    #[bench]\r\n    fn bench_aaabs(b: &mut Bencher) {\r\n        let mut d:Vec<i32>=(-N..=N).collect();\r\n        let mut n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        let mut rng=SmallRng::from_seed([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,21]);\r\n        n.shuffle(&mut rng);\r\n        d.shuffle(&mut rng);\r\n        n.shuffle(&mut rng);\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=rem_euclid(*i,*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n    #[bench]\r\n    fn bench_aadefault(b: &mut Bencher) {\r\n        let mut d:Vec<i32>=(-N..=N).collect();\r\n        let mut n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        let mut rng=SmallRng::from_seed([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,21]);\r\n        n.shuffle(&mut rng);\r\n        d.shuffle(&mut rng);\r\n        n.shuffle(&mut rng);\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=i.rem_euclid(*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n\r\n    #[bench]\r\n    fn bench_abs(b: &mut Bencher) {\r\n        let d:Vec<i32>=(-N..=N).collect();\r\n        let n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=rem_euclid(*i,*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n    #[bench]\r\n    fn bench_default(b: &mut Bencher) {\r\n        let d:Vec<i32>=(-N..=N).collect();\r\n        let n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=i.rem_euclid(*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n\r\n    #[bench]\r\n    fn bench_zzabs(b: &mut Bencher) {\r\n        let mut d:Vec<i32>=(-N..=N).collect();\r\n        let mut n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        let mut rng=SmallRng::from_seed([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,21]);\r\n        d.shuffle(&mut rng);\r\n        n.shuffle(&mut rng);\r\n        d.shuffle(&mut rng);\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=rem_euclid(*i,*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n    #[bench]\r\n    fn bench_zzdefault(b: &mut Bencher) {\r\n        let mut d:Vec<i32>=(-N..=N).collect();\r\n        let mut n:Vec<i32>=(-N..0).chain(1..=N).collect();\r\n        let mut rng=SmallRng::from_seed([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,21]);\r\n        d.shuffle(&mut rng);\r\n        n.shuffle(&mut rng);\r\n        d.shuffle(&mut rng);\r\n        b.iter(||{\r\n            let mut res=0;\r\n            for i in &d {\r\n                for j in &n {\r\n                    res+=i.rem_euclid(*j);\r\n                }\r\n            }\r\n            res\r\n        });\r\n    }\r\n}\r\n```"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ad4d24751d2e11c8b98dcac5e30720e138de788", "html_url": "https://github.com/rust-lang/rust/commit/3ad4d24751d2e11c8b98dcac5e30720e138de788", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ad4d24751d2e11c8b98dcac5e30720e138de788/comments", "author": {"login": "Neutron3529", "id": 26130174, "node_id": "MDQ6VXNlcjI2MTMwMTc0", "avatar_url": "https://avatars.githubusercontent.com/u/26130174?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Neutron3529", "html_url": "https://github.com/Neutron3529", "followers_url": "https://api.github.com/users/Neutron3529/followers", "following_url": "https://api.github.com/users/Neutron3529/following{/other_user}", "gists_url": "https://api.github.com/users/Neutron3529/gists{/gist_id}", "starred_url": "https://api.github.com/users/Neutron3529/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Neutron3529/subscriptions", "organizations_url": "https://api.github.com/users/Neutron3529/orgs", "repos_url": "https://api.github.com/users/Neutron3529/repos", "events_url": "https://api.github.com/users/Neutron3529/events{/privacy}", "received_events_url": "https://api.github.com/users/Neutron3529/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce1a7e41f96be27103b6e3ba09dcefbf5bd320bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce1a7e41f96be27103b6e3ba09dcefbf5bd320bd", "html_url": "https://github.com/rust-lang/rust/commit/ce1a7e41f96be27103b6e3ba09dcefbf5bd320bd"}], "stats": {"total": 10, "additions": 1, "deletions": 9}, "files": [{"sha": "812deebce7a5e728fe2a0dd3db14e791c38fbb99", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ad4d24751d2e11c8b98dcac5e30720e138de788/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad4d24751d2e11c8b98dcac5e30720e138de788/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=3ad4d24751d2e11c8b98dcac5e30720e138de788", "patch": "@@ -2067,15 +2067,7 @@ macro_rules! int_impl {\n         #[rustc_inherit_overflow_checks]\n         pub const fn rem_euclid(self, rhs: Self) -> Self {\n             let r = self % rhs;\n-            if r < 0 {\n-                if rhs < 0 {\n-                    r - rhs\n-                } else {\n-                    r + rhs\n-                }\n-            } else {\n-                r\n-            }\n+            if r < 0 { r + rhs.abs() } else { r }\n         }\n \n         /// Calculates the quotient of `self` and `rhs`, rounding the result towards negative infinity."}]}