{"sha": "fc06ea5f9c904df1325b9e886353e561ea2ba385", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMDZlYTVmOWM5MDRkZjEzMjViOWU4ODYzNTNlNTYxZWEyYmEzODU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-17T01:13:31Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-27T03:53:23Z"}, "message": "Add a type parameter to ImportDirective", "tree": {"sha": "3799cb89e0ec2bc86e189c96528d609307b8297a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3799cb89e0ec2bc86e189c96528d609307b8297a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc06ea5f9c904df1325b9e886353e561ea2ba385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc06ea5f9c904df1325b9e886353e561ea2ba385", "html_url": "https://github.com/rust-lang/rust/commit/fc06ea5f9c904df1325b9e886353e561ea2ba385", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc06ea5f9c904df1325b9e886353e561ea2ba385/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5a91e69582b63f19192ad860df0f7a9a8530f56", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a91e69582b63f19192ad860df0f7a9a8530f56", "html_url": "https://github.com/rust-lang/rust/commit/d5a91e69582b63f19192ad860df0f7a9a8530f56"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "be01880e2a91509c3234de59ed9b07bfacbda7d0", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fc06ea5f9c904df1325b9e886353e561ea2ba385/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc06ea5f9c904df1325b9e886353e561ea2ba385/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=fc06ea5f9c904df1325b9e886353e561ea2ba385", "patch": "@@ -828,7 +828,7 @@ pub struct ModuleS<'a> {\n     extern_crate_id: Option<NodeId>,\n \n     resolutions: RefCell<HashMap<(Name, Namespace), NameResolution<'a>>>,\n-    unresolved_imports: RefCell<Vec<&'a ImportDirective>>,\n+    unresolved_imports: RefCell<Vec<&'a ImportDirective<'a>>>,\n \n     // The module children of this node, including normal modules and anonymous modules.\n     // Anonymous children are pseudo-modules that are implicitly created around items\n@@ -848,7 +848,7 @@ pub struct ModuleS<'a> {\n \n     prelude: RefCell<Option<Module<'a>>>,\n \n-    glob_importers: RefCell<Vec<(Module<'a>, &'a ImportDirective)>>,\n+    glob_importers: RefCell<Vec<(Module<'a>, &'a ImportDirective<'a>)>>,\n     resolved_globs: RefCell<(Vec<Module<'a>> /* public */, Vec<Module<'a>> /* private */)>,\n \n     // The number of public glob imports in this module.\n@@ -891,7 +891,7 @@ impl<'a> ModuleS<'a> {\n         }\n     }\n \n-    fn add_import_directive(&self, import_directive: ImportDirective) {\n+    fn add_import_directive(&self, import_directive: ImportDirective<'a>) {\n         let import_directive = self.arenas.alloc_import_directive(import_directive);\n         self.unresolved_imports.borrow_mut().push(import_directive);\n     }\n@@ -1134,7 +1134,7 @@ pub struct Resolver<'a, 'tcx: 'a> {\n struct ResolverArenas<'a> {\n     modules: arena::TypedArena<ModuleS<'a>>,\n     name_bindings: arena::TypedArena<NameBinding<'a>>,\n-    import_directives: arena::TypedArena<ImportDirective>,\n+    import_directives: arena::TypedArena<ImportDirective<'a>>,\n }\n \n impl<'a> ResolverArenas<'a> {\n@@ -1144,7 +1144,8 @@ impl<'a> ResolverArenas<'a> {\n     fn alloc_name_binding(&'a self, name_binding: NameBinding<'a>) -> &'a NameBinding<'a> {\n         self.name_bindings.alloc(name_binding)\n     }\n-    fn alloc_import_directive(&'a self, import_directive: ImportDirective) -> &'a ImportDirective {\n+    fn alloc_import_directive(&'a self, import_directive: ImportDirective<'a>)\n+                              -> &'a ImportDirective {\n         self.import_directives.alloc(import_directive)\n     }\n }"}, {"sha": "b446fa6430e8b8047af6661c01f51a58cf27fd81", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fc06ea5f9c904df1325b9e886353e561ea2ba385/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc06ea5f9c904df1325b9e886353e561ea2ba385/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=fc06ea5f9c904df1325b9e886353e561ea2ba385", "patch": "@@ -57,7 +57,7 @@ impl ImportDirectiveSubclass {\n \n /// One import directive.\n #[derive(Debug,Clone)]\n-pub struct ImportDirective {\n+pub struct ImportDirective<'a> {\n     module_path: Vec<Name>,\n     subclass: ImportDirectiveSubclass,\n     span: Span,\n@@ -66,14 +66,14 @@ pub struct ImportDirective {\n     is_prelude: bool,\n }\n \n-impl ImportDirective {\n+impl<'a> ImportDirective<'a> {\n     pub fn new(module_path: Vec<Name>,\n                subclass: ImportDirectiveSubclass,\n                span: Span,\n                id: NodeId,\n                is_public: bool,\n                is_prelude: bool)\n-               -> ImportDirective {\n+               -> Self {\n         ImportDirective {\n             module_path: module_path,\n             subclass: subclass,\n@@ -86,9 +86,8 @@ impl ImportDirective {\n \n     // Given the binding to which this directive resolves in a particular namespace,\n     // this returns the binding for the name this directive defines in that namespace.\n-    fn import<'a>(&self,\n-                  binding: &'a NameBinding<'a>,\n-                  privacy_error: Option<Box<PrivacyError<'a>>>) -> NameBinding<'a> {\n+    fn import(&self, binding: &'a NameBinding<'a>, privacy_error: Option<Box<PrivacyError<'a>>>)\n+              -> NameBinding<'a> {\n         let mut modifiers = match self.is_public {\n             true => DefModifiers::PUBLIC | DefModifiers::IMPORTABLE,\n             false => DefModifiers::empty(),\n@@ -292,7 +291,7 @@ impl<'a> ::ModuleS<'a> {\n struct ImportResolvingError<'a> {\n     /// Module where the error happened\n     source_module: Module<'a>,\n-    import_directive: &'a ImportDirective,\n+    import_directive: &'a ImportDirective<'a>,\n     span: Span,\n     help: String,\n }\n@@ -424,7 +423,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n     /// don't know whether the name exists at the moment due to other\n     /// currently-unresolved imports, or success if we know the name exists.\n     /// If successful, the resolved bindings are written into the module.\n-    fn resolve_import(&mut self, directive: &'b ImportDirective) -> ResolveResult<()> {\n+    fn resolve_import(&mut self, directive: &'b ImportDirective<'b>) -> ResolveResult<()> {\n         debug!(\"(resolving import for module) resolving import `{}::...` in `{}`\",\n                names_to_string(&directive.module_path),\n                module_to_string(self.resolver.current_module));\n@@ -579,7 +578,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n     // succeeds or bails out (as importing * from an empty module or a module\n     // that exports nothing is valid). target_module is the module we are\n     // actually importing, i.e., `foo` in `use foo::*`.\n-    fn resolve_glob_import(&mut self, target_module: Module<'b>, directive: &'b ImportDirective)\n+    fn resolve_glob_import(&mut self, target_module: Module<'b>, directive: &'b ImportDirective<'b>)\n                            -> ResolveResult<()> {\n         if let Some(Def::Trait(_)) = target_module.def {\n             self.resolver.session.span_err(directive.span, \"items in traits are not importable.\");"}]}