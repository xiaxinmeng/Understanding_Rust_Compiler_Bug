{"sha": "18883fea3a5c3c1a9af5c8a29464b83c0c81757b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ODgzZmVhM2E1YzNjMWE5YWY1YzhhMjk0NjRiODNjMGM4MTc1N2I=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-05-28T03:41:48Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-05-28T03:43:51Z"}, "message": "In pre/postcondition computation, failing calls should set the postcondition\n\nA non-returning call should have a postcondition in which all predicates\nare true -- not just a poststate. Otherwise, alt expressions where\none or more branches terminate in a non-returning call and others\ninitialize a variable get rejected.\n\nIncludes a test case.", "tree": {"sha": "355d1b0e7abcc71db42767832f43edcbe3f833b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/355d1b0e7abcc71db42767832f43edcbe3f833b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18883fea3a5c3c1a9af5c8a29464b83c0c81757b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18883fea3a5c3c1a9af5c8a29464b83c0c81757b", "html_url": "https://github.com/rust-lang/rust/commit/18883fea3a5c3c1a9af5c8a29464b83c0c81757b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18883fea3a5c3c1a9af5c8a29464b83c0c81757b/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95e1aa18c1290d087516bd417590a181300cfc6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/95e1aa18c1290d087516bd417590a181300cfc6b", "html_url": "https://github.com/rust-lang/rust/commit/95e1aa18c1290d087516bd417590a181300cfc6b"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "892b9d6aadbce9c93f0509abe7ca50540b5316d1", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/18883fea3a5c3c1a9af5c8a29464b83c0c81757b/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18883fea3a5c3c1a9af5c8a29464b83c0c81757b/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=18883fea3a5c3c1a9af5c8a29464b83c0c81757b", "patch": "@@ -39,6 +39,7 @@ import aux::ann_to_def;\n import aux::ann_to_def_strict;\n import aux::ann_to_ts_ann;\n import aux::set_postcond_false;\n+import aux::controlflow_expr;\n \n import bitvectors::seq_preconds;\n import bitvectors::union_postconds;\n@@ -78,6 +79,7 @@ import front::ast::def;\n import front::ast::lit;\n import front::ast::init_op;\n import front::ast::controlflow;\n+import front::ast::noreturn;\n import front::ast::return;\n import front::ast::_fn;\n import front::ast::_obj;\n@@ -294,6 +296,13 @@ fn find_pre_post_expr(&fn_ctxt fcx, @expr e) -> () {\n             auto args = vec::clone[@expr](operands);\n             vec::push[@expr](args, operator);\n             find_pre_post_exprs(fcx, args, a);\n+            /* if this is a failing call, its postcondition sets everything */\n+            alt (controlflow_expr(fcx.ccx, operator)) {\n+                case (noreturn) {\n+                    set_postcond_false(fcx.ccx, a);\n+                }\n+                case (_) { }\n+            }\n         }\n         case (expr_spawn(_, _, ?operator, ?operands, ?a)) {\n             auto args = vec::clone[@expr](operands);\n@@ -495,8 +504,8 @@ fn find_pre_post_expr(&fn_ctxt fcx, @expr e) -> () {\n         case (expr_index(?e, ?sub, ?a)) {\n             find_pre_post_exprs(fcx, [e, sub], a);\n         }\n-        case (expr_alt(?e, ?alts, ?a)) {\n-            find_pre_post_expr(fcx, e);\n+        case (expr_alt(?ex, ?alts, ?a)) {\n+            find_pre_post_expr(fcx, ex);\n             fn do_an_alt(&fn_ctxt fcx, &arm an_alt) -> pre_and_post {\n                 find_pre_post_block(fcx, an_alt.block);\n                 ret block_pp(fcx.ccx, an_alt.block);\n@@ -510,7 +519,7 @@ fn find_pre_post_expr(&fn_ctxt fcx, @expr e) -> () {\n                 intersect(pp.postcondition, next.postcondition);\n                 ret pp;\n             }\n-            auto antec_pp = pp_clone(expr_pp(fcx.ccx, e)); \n+            auto antec_pp = pp_clone(expr_pp(fcx.ccx, ex)); \n             auto e_pp  = @rec(precondition=empty_prestate(num_local_vars),\n                              postcondition=false_postcond(num_local_vars));\n             auto g = bind combine_pp(antec_pp, fcx, _, _);"}, {"sha": "31eb0e4beae35028310d914927eb2f4704292b26", "filename": "src/test/run-pass/nested-alts.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/18883fea3a5c3c1a9af5c8a29464b83c0c81757b/src%2Ftest%2Frun-pass%2Fnested-alts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18883fea3a5c3c1a9af5c8a29464b83c0c81757b/src%2Ftest%2Frun-pass%2Fnested-alts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-alts.rs?ref=18883fea3a5c3c1a9af5c8a29464b83c0c81757b", "patch": "@@ -0,0 +1,30 @@\n+use std;\n+import std::option::*;\n+\n+fn baz() -> ! {\n+  fail;\n+}\n+\n+fn foo() {\n+   alt (some[int](5)) {\n+     case (some[int](?x)) {\n+       auto bar;\n+       alt (none[int]) {\n+         case (none[int]) {\n+           bar = 5;\n+         }\n+         case (_) {\n+           baz();\n+         }\n+       }\n+       log bar;\n+     }\n+     case (none[int]) {\n+       log \"hello\";\n+     }\n+   }\n+}\n+\n+fn main() {\n+  foo();\n+}"}]}