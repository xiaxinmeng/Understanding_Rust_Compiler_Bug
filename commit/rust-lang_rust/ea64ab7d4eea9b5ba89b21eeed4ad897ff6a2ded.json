{"sha": "ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNjRhYjdkNGVlYTliNWJhODliMjFlZWVkNGFkODk3ZmY2YTJkZWQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-12-18T07:46:55Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-12-18T07:46:55Z"}, "message": "Use def span for conflicting impls and recursive fn", "tree": {"sha": "0cafc309cbf87d13ddd3ddbd842a4ce4f0db231a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cafc309cbf87d13ddd3ddbd842a4ce4f0db231a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded", "html_url": "https://github.com/rust-lang/rust/commit/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cc68bac7c89a81ec83cbd8f0aff9db001425c50", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cc68bac7c89a81ec83cbd8f0aff9db001425c50", "html_url": "https://github.com/rust-lang/rust/commit/3cc68bac7c89a81ec83cbd8f0aff9db001425c50"}], "stats": {"total": 332, "additions": 111, "deletions": 221}, "files": [{"sha": "afe29cc0e7baf0b11de869e40644663cf7ce6d14", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded", "patch": "@@ -341,24 +341,28 @@ pub(super) fn specialization_graph_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx\n                         }),\n                     if used_to_be_allowed { \" (E0119)\" } else { \"\" }\n                 );\n+                let impl_span = tcx.sess.codemap().def_span(\n+                    tcx.span_of_impl(impl_def_id).unwrap()\n+                );\n                 let mut err = if used_to_be_allowed {\n                     tcx.struct_span_lint_node(\n                         lint::builtin::INCOHERENT_FUNDAMENTAL_IMPLS,\n                         tcx.hir.as_local_node_id(impl_def_id).unwrap(),\n-                        tcx.span_of_impl(impl_def_id).unwrap(),\n+                        impl_span,\n                         &msg)\n                 } else {\n                     struct_span_err!(tcx.sess,\n-                                     tcx.span_of_impl(impl_def_id).unwrap(),\n+                                     impl_span,\n                                      E0119,\n                                      \"{}\",\n                                      msg)\n                 };\n \n                 match tcx.span_of_impl(overlap.with_impl) {\n                     Ok(span) => {\n-                        err.span_label(span, format!(\"first implementation here\"));\n-                        err.span_label(tcx.span_of_impl(impl_def_id).unwrap(),\n+                        err.span_label(tcx.sess.codemap().def_span(span),\n+                                       format!(\"first implementation here\"));\n+                        err.span_label(impl_span,\n                                        format!(\"conflicting implementation{}\",\n                                                 overlap.self_desc\n                                                     .map_or(String::new(),"}, {"sha": "5417634144bb3fadb8428932b9b1dd56ed1c8a4f", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded", "patch": "@@ -352,7 +352,7 @@ impl MissingDoc {\n         let has_doc = attrs.iter().any(|a| a.is_value_str() && a.check_name(\"doc\"));\n         if !has_doc {\n             cx.span_lint(MISSING_DOCS,\n-                         sp,\n+                         cx.tcx.sess.codemap().def_span(sp),\n                          &format!(\"missing documentation for {}\", desc));\n         }\n     }\n@@ -914,15 +914,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n         // no break */ }`) shouldn't be linted unless it actually\n         // recurs.\n         if !reached_exit_without_self_call && !self_call_spans.is_empty() {\n+            let sp = cx.tcx.sess.codemap().def_span(sp);\n             let mut db = cx.struct_span_lint(UNCONDITIONAL_RECURSION,\n                                              sp,\n                                              \"function cannot return without recurring\");\n+            db.span_label(sp, \"cannot return without recurring\");\n             // offer some help to the programmer.\n             for call in &self_call_spans {\n-                db.span_note(*call, \"recursive call site\");\n+                db.span_label(*call, \"recursive call site\");\n             }\n-            db.help(\"a `loop` may express intention \\\n-                     better if this is on purpose\");\n+            db.help(\"a `loop` may express intention better if this is on purpose\");\n             db.emit();\n         }\n "}, {"sha": "c94ffd60d261feb2d901f8c10c8ae45eb296fb33", "filename": "src/test/ui/coherence-overlap-downstream.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-downstream.stderr?ref=ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded", "patch": "@@ -2,17 +2,17 @@ error[E0119]: conflicting implementations of trait `Sweet`:\n   --> $DIR/coherence-overlap-downstream.rs:18:1\n    |\n 17 | impl<T:Sugar> Sweet for T { }\n-   | ----------------------------- first implementation here\n+   | ------------------------- first implementation here\n 18 | impl<T:Fruit> Sweet for T { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error[E0119]: conflicting implementations of trait `Foo<_>` for type `i32`:\n   --> $DIR/coherence-overlap-downstream.rs:24:1\n    |\n 23 | impl<X, T> Foo<X> for T where T: Bar<X> {}\n-   | ------------------------------------------ first implementation here\n+   | --------------------------------------- first implementation here\n 24 | impl<X> Foo<X> for i32 {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n+   | ^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n    |\n    = note: downstream crates may implement trait `Bar<_>` for type `i32`\n "}, {"sha": "c27e1ad76200c750cbd686e3085099b1e2fc70d3", "filename": "src/test/ui/coherence-overlap-issue-23516.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-issue-23516.stderr?ref=ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded", "patch": "@@ -2,9 +2,9 @@ error[E0119]: conflicting implementations of trait `Sweet` for type `std::boxed:\n   --> $DIR/coherence-overlap-issue-23516.rs:18:1\n    |\n 17 | impl<T:Sugar> Sweet for T { }\n-   | ----------------------------- first implementation here\n+   | ------------------------- first implementation here\n 18 | impl<U:Sugar> Sweet for Box<U> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::boxed::Box<_>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::boxed::Box<_>`\n    |\n    = note: downstream crates may implement trait `Sugar` for type `std::boxed::Box<_>`\n "}, {"sha": "9b5b67fe9c7dd3ae24cc845167b9a7f088bff083", "filename": "src/test/ui/coherence-overlap-upstream.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-overlap-upstream.stderr?ref=ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded", "patch": "@@ -2,9 +2,9 @@ error[E0119]: conflicting implementations of trait `Foo` for type `i16`:\n   --> $DIR/coherence-overlap-upstream.rs:22:1\n    |\n 21 | impl<T> Foo for T where T: Remote {}\n-   | ------------------------------------ first implementation here\n+   | --------------------------------- first implementation here\n 22 | impl Foo for i16 {}\n-   | ^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i16`\n+   | ^^^^^^^^^^^^^^^^ conflicting implementation for `i16`\n    |\n    = note: upstream crates may add new impl of trait `coherence_lib::Remote` for type `i16` in future versions\n "}, {"sha": "926dac3f9b132a21d143647a069f74344a42bb7a", "filename": "src/test/ui/e0119/complex-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr?ref=ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded", "patch": "@@ -2,7 +2,7 @@ error[E0119]: conflicting implementations of trait `complex_impl_support::Extern\n   --> $DIR/complex-impl.rs:19:1\n    |\n 19 | impl<R> External for (Q, R) {} //~ ERROR must be used\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `complex_impl_support`:\n            - impl<'a, 'b, 'c, T, U, V, W> complex_impl_support::External for (T, complex_impl_support::M<'a, 'b, 'c, std::boxed::Box<U>, V, W>)"}, {"sha": "4c1f9405fb96203b67f66b44a40f2c763b4b6389", "filename": "src/test/ui/e0119/conflict-with-std.stderr", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr?ref=ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded", "patch": "@@ -1,12 +1,8 @@\n error[E0119]: conflicting implementations of trait `std::convert::AsRef<Q>` for type `std::boxed::Box<Q>`:\n   --> $DIR/conflict-with-std.rs:17:1\n    |\n-17 | / impl AsRef<Q> for Box<Q> { //~ ERROR conflicting implementations\n-18 | |     fn as_ref(&self) -> &Q {\n-19 | |         &**self\n-20 | |     }\n-21 | | }\n-   | |_^\n+17 | impl AsRef<Q> for Box<Q> { //~ ERROR conflicting implementations\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `alloc`:\n            - impl<T> std::convert::AsRef<T> for std::boxed::Box<T>\n@@ -15,26 +11,17 @@ error[E0119]: conflicting implementations of trait `std::convert::AsRef<Q>` for\n error[E0119]: conflicting implementations of trait `std::convert::From<S>` for type `S`:\n   --> $DIR/conflict-with-std.rs:24:1\n    |\n-24 | / impl From<S> for S { //~ ERROR conflicting implementations\n-25 | |     fn from(s: S) -> S {\n-26 | |         s\n-27 | |     }\n-28 | | }\n-   | |_^\n+24 | impl From<S> for S { //~ ERROR conflicting implementations\n+   | ^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n            - impl<T> std::convert::From<T> for T;\n \n error[E0119]: conflicting implementations of trait `std::convert::TryFrom<X>` for type `X`:\n   --> $DIR/conflict-with-std.rs:31:1\n    |\n-31 | / impl TryFrom<X> for X { //~ ERROR conflicting implementations\n-32 | |     type Error = ();\n-33 | |     fn try_from(u: X) -> Result<X, ()> {\n-34 | |         Ok(u)\n-35 | |     }\n-36 | | }\n-   | |_^\n+31 | impl TryFrom<X> for X { //~ ERROR conflicting implementations\n+   | ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n            - impl<T, U> std::convert::TryFrom<U> for T"}, {"sha": "8bbae56d8436de5eece5d8fb1b459b5fcddfb787", "filename": "src/test/ui/e0119/issue-23563.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-23563.stderr?ref=ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded", "patch": "@@ -1,10 +1,8 @@\n error[E0119]: conflicting implementations of trait `a::LolFrom<&[_]>` for type `LocalType<_>`:\n   --> $DIR/issue-23563.rs:23:1\n    |\n-23 | / impl<'a, T> LolFrom<&'a [T]> for LocalType<T> { //~ ERROR conflicting implementations of trait\n-24 | |     fn from(_: &'a [T]) -> LocalType<T> { LocalType(None) }\n-25 | | }\n-   | |_^\n+23 | impl<'a, T> LolFrom<&'a [T]> for LocalType<T> { //~ ERROR conflicting implementations of trait\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `issue_23563_a`:\n            - impl<T, U> a::LolFrom<T> for U"}, {"sha": "4417ea9099fa8b6c3250270562a5ae76ed44a074", "filename": "src/test/ui/e0119/issue-27403.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-27403.stderr?ref=ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded", "patch": "@@ -1,12 +1,8 @@\n error[E0119]: conflicting implementations of trait `std::convert::Into<_>` for type `GenX<_>`:\n   --> $DIR/issue-27403.rs:15:1\n    |\n-15 | / impl<S> Into<S> for GenX<S> { //~ ERROR conflicting implementations\n-16 | |     fn into(self) -> S {\n-17 | |         self.inner\n-18 | |     }\n-19 | | }\n-   | |_^\n+15 | impl<S> Into<S> for GenX<S> { //~ ERROR conflicting implementations\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n            - impl<T, U> std::convert::Into<U> for T"}, {"sha": "3ea1c9adc9b46cd9c8f806e8b0f288dcdf6e66c4", "filename": "src/test/ui/e0119/issue-28981.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr?ref=ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded", "patch": "@@ -2,7 +2,7 @@ error[E0119]: conflicting implementations of trait `std::ops::Deref` for type `&\n   --> $DIR/issue-28981.rs:15:1\n    |\n 15 | impl<Foo> Deref for Foo { } //~ ERROR must be used\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n            - impl<'a, T> std::ops::Deref for &'a T"}, {"sha": "84fb049df357d286b30fef65ef448af9be3a7b6a", "filename": "src/test/ui/e0119/so-37347311.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fso-37347311.stderr?ref=ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded", "patch": "@@ -1,12 +1,8 @@\n error[E0119]: conflicting implementations of trait `std::convert::From<MyError<_>>` for type `MyError<_>`:\n   --> $DIR/so-37347311.rs:21:1\n    |\n-21 | / impl<S: Storage> From<S::Error> for MyError<S> { //~ ERROR conflicting implementations\n-22 | |     fn from(error: S::Error) -> MyError<S> {\n-23 | |         MyError::StorageProblem(error)\n-24 | |     }\n-25 | | }\n-   | |_^\n+21 | impl<S: Storage> From<S::Error> for MyError<S> { //~ ERROR conflicting implementations\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: conflicting implementation in crate `core`:\n            - impl<T> std::convert::From<T> for T;"}, {"sha": "c1725a62adaf49944590ec4a2c871c11c804e70e", "filename": "src/test/ui/feature-gate-overlapping_marker_traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Ffeature-gate-overlapping_marker_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Ffeature-gate-overlapping_marker_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-overlapping_marker_traits.stderr?ref=ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded", "patch": "@@ -2,9 +2,9 @@ error[E0119]: conflicting implementations of trait `MyMarker`:\n   --> $DIR/feature-gate-overlapping_marker_traits.rs:16:1\n    |\n 15 | impl<T: Display> MyMarker for T {}\n-   | ---------------------------------- first implementation here\n+   | ------------------------------- first implementation here\n 16 | impl<T: Debug> MyMarker for T {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error: aborting due to previous error\n "}, {"sha": "61717ee60ff309a8d31a1c4902ef54d988d230ab", "filename": "src/test/ui/issue-28568.stderr", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fissue-28568.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fissue-28568.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-28568.stderr?ref=ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded", "patch": "@@ -1,16 +1,11 @@\n error[E0119]: conflicting implementations of trait `std::ops::Drop` for type `MyStruct`:\n   --> $DIR/issue-28568.rs:17:1\n    |\n-13 | / impl Drop for MyStruct {\n-14 | |     fn drop(&mut self) { }\n-15 | | }\n-   | |_- first implementation here\n-16 | \n-17 | / impl Drop for MyStruct {\n-18 | | //~^ ERROR conflicting implementations of trait\n-19 | |     fn drop(&mut self) { }\n-20 | | }\n-   | |_^ conflicting implementation for `MyStruct`\n+13 | impl Drop for MyStruct {\n+   | ---------------------- first implementation here\n+...\n+17 | impl Drop for MyStruct {\n+   | ^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyStruct`\n \n error: aborting due to previous error\n "}, {"sha": "f6f97654b57fd5709b9c764fa27ebb18bd4909ed", "filename": "src/test/ui/lint-unconditional-recursion.stderr", "status": "modified", "additions": 64, "deletions": 147, "changes": 211, "blob_url": "https://github.com/rust-lang/rust/blob/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Flint-unconditional-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Flint-unconditional-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-unconditional-recursion.stderr?ref=ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded", "patch": "@@ -1,239 +1,156 @@\n error: function cannot return without recurring\n   --> $DIR/lint-unconditional-recursion.rs:14:1\n    |\n-14 | / fn foo() { //~ ERROR function cannot return without recurring\n-15 | |     foo();\n-16 | | }\n-   | |_^\n+14 | fn foo() { //~ ERROR function cannot return without recurring\n+   | ^^^^^^^^ cannot return without recurring\n+15 |     foo();\n+   |     ----- recursive call site\n    |\n note: lint level defined here\n   --> $DIR/lint-unconditional-recursion.rs:11:9\n    |\n 11 | #![deny(unconditional_recursion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:15:5\n-   |\n-15 |     foo();\n-   |     ^^^^^\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n   --> $DIR/lint-unconditional-recursion.rs:24:1\n    |\n-24 | / fn baz() { //~ ERROR function cannot return without recurring\n-25 | |     if true {\n-26 | |         baz()\n-27 | |     } else {\n-28 | |         baz()\n-29 | |     }\n-30 | | }\n-   | |_^\n-   |\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:26:9\n-   |\n+24 | fn baz() { //~ ERROR function cannot return without recurring\n+   | ^^^^^^^^ cannot return without recurring\n+25 |     if true {\n 26 |         baz()\n-   |         ^^^^^\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:28:9\n-   |\n+   |         ----- recursive call site\n+27 |     } else {\n 28 |         baz()\n-   |         ^^^^^\n+   |         ----- recursive call site\n+   |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n   --> $DIR/lint-unconditional-recursion.rs:36:1\n    |\n-36 | / fn quz() -> bool { //~ ERROR function cannot return without recurring\n-37 | |     if true {\n-38 | |         while quz() {}\n-39 | |         true\n-...  |\n-42 | |     }\n-43 | | }\n-   | |_^\n-   |\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:38:15\n-   |\n+36 | fn quz() -> bool { //~ ERROR function cannot return without recurring\n+   | ^^^^^^^^^^^^^^^^ cannot return without recurring\n+37 |     if true {\n 38 |         while quz() {}\n-   |               ^^^^^\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:41:16\n-   |\n+   |               ----- recursive call site\n+...\n 41 |         loop { quz(); }\n-   |                ^^^^^\n+   |                ----- recursive call site\n+   |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n   --> $DIR/lint-unconditional-recursion.rs:47:5\n    |\n-47 | /     fn bar(&self) { //~ ERROR function cannot return without recurring\n-48 | |         self.bar()\n-49 | |     }\n-   | |_____^\n-   |\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:48:9\n-   |\n+47 |     fn bar(&self) { //~ ERROR function cannot return without recurring\n+   |     ^^^^^^^^^^^^^ cannot return without recurring\n 48 |         self.bar()\n-   |         ^^^^^^^^^^\n+   |         ---------- recursive call site\n+   |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n   --> $DIR/lint-unconditional-recursion.rs:53:5\n    |\n-53 | /     fn bar(&self) { //~ ERROR function cannot return without recurring\n-54 | |         loop {\n-55 | |             self.bar()\n-56 | |         }\n-57 | |     }\n-   | |_____^\n-   |\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:55:13\n-   |\n+53 |     fn bar(&self) { //~ ERROR function cannot return without recurring\n+   |     ^^^^^^^^^^^^^ cannot return without recurring\n+54 |         loop {\n 55 |             self.bar()\n-   |             ^^^^^^^^^^\n+   |             ---------- recursive call site\n+   |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n   --> $DIR/lint-unconditional-recursion.rs:62:5\n    |\n-62 | /     fn bar(&self) { //~ ERROR function cannot return without recurring\n-63 | |         0.bar()\n-64 | |     }\n-   | |_____^\n-   |\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:63:9\n-   |\n+62 |     fn bar(&self) { //~ ERROR function cannot return without recurring\n+   |     ^^^^^^^^^^^^^ cannot return without recurring\n 63 |         0.bar()\n-   |         ^^^^^^^\n+   |         ------- recursive call site\n+   |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n   --> $DIR/lint-unconditional-recursion.rs:75:5\n    |\n-75 | /     fn bar(&self) { //~ ERROR function cannot return without recurring\n-76 | |         Foo2::bar(self)\n-77 | |     }\n-   | |_____^\n-   |\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:76:9\n-   |\n+75 |     fn bar(&self) { //~ ERROR function cannot return without recurring\n+   |     ^^^^^^^^^^^^^ cannot return without recurring\n 76 |         Foo2::bar(self)\n-   |         ^^^^^^^^^^^^^^^\n+   |         --------------- recursive call site\n+   |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n   --> $DIR/lint-unconditional-recursion.rs:81:5\n    |\n-81 | /     fn bar(&self) { //~ ERROR function cannot return without recurring\n-82 | |         loop {\n-83 | |             Foo2::bar(self)\n-84 | |         }\n-85 | |     }\n-   | |_____^\n-   |\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:83:13\n-   |\n+81 |     fn bar(&self) { //~ ERROR function cannot return without recurring\n+   |     ^^^^^^^^^^^^^ cannot return without recurring\n+82 |         loop {\n 83 |             Foo2::bar(self)\n-   |             ^^^^^^^^^^^^^^^\n+   |             --------------- recursive call site\n+   |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n   --> $DIR/lint-unconditional-recursion.rs:91:5\n    |\n-91 | /     fn qux(&self) { //~ ERROR function cannot return without recurring\n-92 | |         self.qux();\n-93 | |     }\n-   | |_____^\n-   |\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:92:9\n-   |\n+91 |     fn qux(&self) { //~ ERROR function cannot return without recurring\n+   |     ^^^^^^^^^^^^^ cannot return without recurring\n 92 |         self.qux();\n-   |         ^^^^^^^^^^\n+   |         ---------- recursive call site\n+   |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n   --> $DIR/lint-unconditional-recursion.rs:96:5\n    |\n-96 | /     fn as_ref(&self) -> &Self { //~ ERROR function cannot return without recurring\n-97 | |         Baz::as_ref(self)\n-98 | |     }\n-   | |_____^\n-   |\n-note: recursive call site\n-  --> $DIR/lint-unconditional-recursion.rs:97:9\n-   |\n+96 |     fn as_ref(&self) -> &Self { //~ ERROR function cannot return without recurring\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recurring\n 97 |         Baz::as_ref(self)\n-   |         ^^^^^^^^^^^^^^^^^\n+   |         ----------------- recursive call site\n+   |\n    = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n    --> $DIR/lint-unconditional-recursion.rs:103:5\n     |\n-103 | /     fn default() -> Baz { //~ ERROR function cannot return without recurring\n-104 | |         let x = Default::default();\n-105 | |         x\n-106 | |     }\n-    | |_____^\n-    |\n-note: recursive call site\n-   --> $DIR/lint-unconditional-recursion.rs:104:17\n-    |\n+103 |     fn default() -> Baz { //~ ERROR function cannot return without recurring\n+    |     ^^^^^^^^^^^^^^^^^^^ cannot return without recurring\n 104 |         let x = Default::default();\n-    |                 ^^^^^^^^^^^^^^^^^^\n+    |                 ------------------ recursive call site\n+    |\n     = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n    --> $DIR/lint-unconditional-recursion.rs:112:5\n     |\n-112 | /     fn deref(&self) -> &() { //~ ERROR function cannot return without recurring\n-113 | |         &**self\n-114 | |     }\n-    | |_____^\n-    |\n-note: recursive call site\n-   --> $DIR/lint-unconditional-recursion.rs:113:10\n-    |\n+112 |     fn deref(&self) -> &() { //~ ERROR function cannot return without recurring\n+    |     ^^^^^^^^^^^^^^^^^^^^^^ cannot return without recurring\n 113 |         &**self\n-    |          ^^^^^^\n+    |          ------ recursive call site\n+    |\n     = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n    --> $DIR/lint-unconditional-recursion.rs:119:5\n     |\n-119 | /     fn index(&self, x: usize) -> &Baz { //~ ERROR function cannot return without recurring\n-120 | |         &self[x]\n-121 | |     }\n-    | |_____^\n-    |\n-note: recursive call site\n-   --> $DIR/lint-unconditional-recursion.rs:120:10\n-    |\n+119 |     fn index(&self, x: usize) -> &Baz { //~ ERROR function cannot return without recurring\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recurring\n 120 |         &self[x]\n-    |          ^^^^^^^\n+    |          ------- recursive call site\n+    |\n     = help: a `loop` may express intention better if this is on purpose\n \n error: function cannot return without recurring\n    --> $DIR/lint-unconditional-recursion.rs:128:5\n     |\n-128 | /     fn deref(&self) -> &Baz { //~ ERROR function cannot return without recurring\n-129 | |         self.as_ref()\n-130 | |     }\n-    | |_____^\n-    |\n-note: recursive call site\n-   --> $DIR/lint-unconditional-recursion.rs:129:9\n-    |\n+128 |     fn deref(&self) -> &Baz { //~ ERROR function cannot return without recurring\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recurring\n 129 |         self.as_ref()\n-    |         ^^^^\n+    |         ---- recursive call site\n+    |\n     = help: a `loop` may express intention better if this is on purpose\n \n error: aborting due to 14 previous errors"}, {"sha": "6ff261c696d30fab7bdcdee9e179da566cea1113", "filename": "src/test/ui/specialization-feature-gate-overlap.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fspecialization-feature-gate-overlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded/src%2Ftest%2Fui%2Fspecialization-feature-gate-overlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization-feature-gate-overlap.stderr?ref=ea64ab7d4eea9b5ba89b21eeed4ad897ff6a2ded", "patch": "@@ -1,15 +1,11 @@\n error[E0119]: conflicting implementations of trait `Foo` for type `u8`:\n   --> $DIR/specialization-feature-gate-overlap.rs:23:1\n    |\n-19 | / impl<T> Foo for T {\n-20 | |     fn foo(&self) {}\n-21 | | }\n-   | |_- first implementation here\n-22 | \n-23 | / impl Foo for u8 { //~ ERROR E0119\n-24 | |     fn foo(&self) {}\n-25 | | }\n-   | |_^ conflicting implementation for `u8`\n+19 | impl<T> Foo for T {\n+   | ----------------- first implementation here\n+...\n+23 | impl Foo for u8 { //~ ERROR E0119\n+   | ^^^^^^^^^^^^^^^ conflicting implementation for `u8`\n \n error: aborting due to previous error\n "}]}