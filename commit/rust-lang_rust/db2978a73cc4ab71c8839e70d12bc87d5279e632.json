{"sha": "db2978a73cc4ab71c8839e70d12bc87d5279e632", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMjk3OGE3M2NjNGFiNzFjODgzOWU3MGQxMmJjODdkNTI3OWU2MzI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-14T16:54:35Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-22T16:22:29Z"}, "message": "Bail out on overly generic substitutions", "tree": {"sha": "ef89e7169d2b1015c694d941125beeeee230cb5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef89e7169d2b1015c694d941125beeeee230cb5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db2978a73cc4ab71c8839e70d12bc87d5279e632", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db2978a73cc4ab71c8839e70d12bc87d5279e632", "html_url": "https://github.com/rust-lang/rust/commit/db2978a73cc4ab71c8839e70d12bc87d5279e632", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db2978a73cc4ab71c8839e70d12bc87d5279e632/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a59eabbc36d7b96bb9e42d9bc6691d28b62c4187", "url": "https://api.github.com/repos/rust-lang/rust/commits/a59eabbc36d7b96bb9e42d9bc6691d28b62c4187", "html_url": "https://github.com/rust-lang/rust/commit/a59eabbc36d7b96bb9e42d9bc6691d28b62c4187"}], "stats": {"total": 59, "additions": 38, "deletions": 21}, "files": [{"sha": "c3b71be8354daabcb1c6c1b6c0ce952876f740cd", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db2978a73cc4ab71c8839e70d12bc87d5279e632/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db2978a73cc4ab71c8839e70d12bc87d5279e632/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=db2978a73cc4ab71c8839e70d12bc87d5279e632", "patch": "@@ -109,11 +109,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                 // The src operand does not matter, just its type\n                 match src.layout.ty.sty {\n                     ty::Closure(def_id, substs) => {\n-                        let substs = self.tcx.subst_and_normalize_erasing_regions(\n-                            self.substs(),\n-                            ty::ParamEnv::reveal_all(),\n-                            &substs,\n-                        );\n+                        let substs = self.subst_and_normalize_erasing_regions(substs)?;\n                         let instance = ty::Instance::resolve_closure(\n                             *self.tcx,\n                             def_id,"}, {"sha": "b2db0fea3d09a7afdb7ff1c85edebe080963e65c", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/db2978a73cc4ab71c8839e70d12bc87d5279e632/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db2978a73cc4ab71c8839e70d12bc87d5279e632/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=db2978a73cc4ab71c8839e70d12bc87d5279e632", "patch": "@@ -216,11 +216,21 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         self.frame().mir\n     }\n \n-    pub fn substs(&self) -> &'tcx Substs<'tcx> {\n-        if let Some(frame) = self.stack.last() {\n-            frame.instance.substs\n-        } else {\n-            Substs::empty()\n+    pub(super) fn subst_and_normalize_erasing_regions<T: TypeFoldable<'tcx>>(\n+        &self,\n+        substs: T,\n+    ) -> EvalResult<'tcx, T> {\n+        match self.stack.last() {\n+            Some(frame) => Ok(self.tcx.subst_and_normalize_erasing_regions(\n+                frame.instance.substs,\n+                self.param_env,\n+                &substs,\n+            )),\n+            None => if substs.needs_subst() {\n+                err!(TooGeneric).into()\n+            } else {\n+                Ok(substs)\n+            },\n         }\n     }\n \n@@ -230,13 +240,9 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         substs: &'tcx Substs<'tcx>\n     ) -> EvalResult<'tcx, ty::Instance<'tcx>> {\n         trace!(\"resolve: {:?}, {:#?}\", def_id, substs);\n-        trace!(\"substs: {:#?}\", self.substs());\n         trace!(\"param_env: {:#?}\", self.param_env);\n-        let substs = self.tcx.subst_and_normalize_erasing_regions(\n-            self.substs(),\n-            self.param_env,\n-            &substs,\n-        );\n+        let substs = self.subst_and_normalize_erasing_regions(substs)?;\n+        trace!(\"substs: {:#?}\", substs);\n         ty::Instance::resolve(\n             *self.tcx,\n             self.param_env,\n@@ -276,6 +282,20 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         }\n     }\n \n+    pub fn monomorphize_in_frame<T: TypeFoldable<'tcx> + Subst<'tcx>>(\n+        &self,\n+        t: T,\n+    ) -> EvalResult<'tcx, T> {\n+        match self.stack.last() {\n+            Some(frame) => Ok(self.monomorphize(t, frame.instance.substs)),\n+            None => if t.needs_subst() {\n+                err!(TooGeneric).into()\n+            } else {\n+                Ok(t)\n+            },\n+        }\n+    }\n+\n     pub fn monomorphize<T: TypeFoldable<'tcx> + Subst<'tcx>>(\n         &self,\n         t: T,"}, {"sha": "8995d091aaab65132ba27971c05e7f8c04051a50", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db2978a73cc4ab71c8839e70d12bc87d5279e632/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db2978a73cc4ab71c8839e70d12bc87d5279e632/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=db2978a73cc4ab71c8839e70d12bc87d5279e632", "patch": "@@ -508,7 +508,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n \n             Constant(ref constant) => {\n                 let layout = from_known_layout(layout, || {\n-                    let ty = self.monomorphize(mir_op.ty(self.mir(), *self.tcx), self.substs());\n+                    let ty = self.monomorphize_in_frame(mir_op.ty(self.mir(), *self.tcx))?;\n                     self.layout_of(ty)\n                 })?;\n                 let op = self.const_value_to_op(*constant.literal)?;"}, {"sha": "f3a948a6ca3e70dbff560c86e5fa5db5f5a6a19f", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db2978a73cc4ab71c8839e70d12bc87d5279e632/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db2978a73cc4ab71c8839e70d12bc87d5279e632/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=db2978a73cc4ab71c8839e70d12bc87d5279e632", "patch": "@@ -9,6 +9,7 @@ use rustc::hir;\n use rustc::mir;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{self, Size, Align, LayoutOf, TyLayout, HasDataLayout, VariantIdx};\n+use rustc::ty::TypeFoldable;\n \n use super::{\n     GlobalId, AllocId, Allocation, Scalar, EvalResult, Pointer, PointerArithmetic,\n@@ -583,8 +584,8 @@ where\n             }\n \n             Static(ref static_) => {\n-                let ty = self.monomorphize(static_.ty, self.substs());\n-                let layout = self.layout_of(ty)?;\n+                assert!(!static_.ty.needs_subst());\n+                let layout = self.layout_of(static_.ty)?;\n                 let instance = ty::Instance::mono(*self.tcx, static_.def_id);\n                 let cid = GlobalId {\n                     instance,"}, {"sha": "f1b4e6a5055b631c3d9a9d7de5f9f2bd6fff0678", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db2978a73cc4ab71c8839e70d12bc87d5279e632/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db2978a73cc4ab71c8839e70d12bc87d5279e632/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=db2978a73cc4ab71c8839e70d12bc87d5279e632", "patch": "@@ -248,7 +248,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             }\n \n             NullaryOp(mir::NullOp::SizeOf, ty) => {\n-                let ty = self.monomorphize(ty, self.substs());\n+                let ty = self.monomorphize_in_frame(ty)?;\n                 let layout = self.layout_of(ty)?;\n                 assert!(!layout.is_unsized(),\n                         \"SizeOf nullary MIR operator called for unsized type\");\n@@ -260,7 +260,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             }\n \n             Cast(kind, ref operand, cast_ty) => {\n-                debug_assert_eq!(self.monomorphize(cast_ty, self.substs()), dest.layout.ty);\n+                debug_assert_eq!(self.monomorphize_in_frame(cast_ty)?, dest.layout.ty);\n                 let src = self.eval_operand(operand, None)?;\n                 self.cast(src, kind, dest)?;\n             }"}]}