{"sha": "fda4c8d5c188da56d8f25b562a4a25d422179a87", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkYTRjOGQ1YzE4OGRhNTZkOGYyNWI1NjJhNGEyNWQ0MjIxNzlhODc=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-12-04T17:28:22Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-12-04T17:28:22Z"}, "message": "Update documentation to review comments", "tree": {"sha": "7a94d5af0fa06e8cf0408998480fa42aa399810d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a94d5af0fa06e8cf0408998480fa42aa399810d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fda4c8d5c188da56d8f25b562a4a25d422179a87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fda4c8d5c188da56d8f25b562a4a25d422179a87", "html_url": "https://github.com/rust-lang/rust/commit/fda4c8d5c188da56d8f25b562a4a25d422179a87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fda4c8d5c188da56d8f25b562a4a25d422179a87/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58d62b83711b5f1401509b97a1340495f9907134", "url": "https://api.github.com/repos/rust-lang/rust/commits/58d62b83711b5f1401509b97a1340495f9907134", "html_url": "https://github.com/rust-lang/rust/commit/58d62b83711b5f1401509b97a1340495f9907134"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "6549ea1a124119d208f0195291395a69ec69f027", "filename": "library/core/src/alloc/global.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fda4c8d5c188da56d8f25b562a4a25d422179a87/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda4c8d5c188da56d8f25b562a4a25d422179a87/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs?ref=fda4c8d5c188da56d8f25b562a4a25d422179a87", "patch": "@@ -55,9 +55,12 @@ use crate::ptr;\n ///   and implementors must ensure such contracts remain true.\n ///\n /// * You may not rely on allocations actually happening, even if there are explicit\n-///   heap allocations in the source. The optimizer may detect allocation/deallocation\n-///   pairs that it can instead move to stack allocations/deallocations and thus never\n-///   invoke the allocator here.\n+///   heap allocations in the source.\n+///   The optimizer may detect unused allocations that it can either\n+///   eliminate entirely or move to the stack and thus never invoke the allocator here. The\n+///   optimizer may further assume that allocation is infallible, so code that used to fail due\n+///   to allocator failures may now suddenly work because the optimizer worked around the\n+///   need for an allocation.\n ///   More concretely, the following code example is unsound, irrespective of whether your\n ///   custom allocator allows counting how many allocations have happened.\n ///\n@@ -67,10 +70,10 @@ use crate::ptr;\n ///   unsafe { std::intrinsics::assume(number_of_heap_allocs > 0); }\n ///   ```\n ///\n-///   Note that allocation/deallocation pairs being moved to the stack is not the only\n+///   Note that the optimizations mentioned above are not the only\n ///   optimization that can be applied. You may generally not rely on heap allocations\n-///   happening, if they can be removed without changing program behaviour.\n-///   Whether allocations happen or not is not part of the program behaviour, even if it\n+///   happening if they can be removed without changing program behavior.\n+///   Whether allocations happen or not is not part of the program behavior, even if it\n ///   could be detected via an allocator that tracks allocations by printing or otherwise\n ///   having side effects.\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]"}, {"sha": "fc89046bc427b6676dde6276d5439e05f1372bec", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fda4c8d5c188da56d8f25b562a4a25d422179a87/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda4c8d5c188da56d8f25b562a4a25d422179a87/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=fda4c8d5c188da56d8f25b562a4a25d422179a87", "patch": "@@ -95,8 +95,11 @@ pub unsafe trait AllocRef {\n     /// not have its contents initialized.\n     ///\n     /// Note that you may not rely on this method actually getting called, even if there are calls\n-    /// to it in the source. The optimizer may detect allocation/deallocation pairs that it can\n-    /// instead move to stack allocations/deallocations and thus never invoke the allocator here.\n+    /// to it in the source. The optimizer may detect unused allocations that it can either\n+    /// eliminate entirely or move to the stack and thus never invoke the allocator here. The\n+    /// optimizer may further assume that allocation is infallible, so code that used to fail due\n+    /// to allocator failures may now suddenly work because the optimizer worked around the\n+    /// need for an allocation.\n     /// More concretely, the following code example is unsound, irrespective of whether your\n     /// custom allocator allows counting how many allocations have happened.\n     ///\n@@ -106,6 +109,13 @@ pub unsafe trait AllocRef {\n     /// unsafe { std::intrinsics::assume(number_of_heap_allocs > 0); }\n     /// ```\n     ///\n+    /// Note that the optimizations mentioned above are not the only\n+    /// optimization that can be applied. You may generally not rely on heap allocations\n+    /// happening if they can be removed without changing program behavior.\n+    /// Whether allocations happen or not is not part of the program behavior, even if it\n+    /// could be detected via an allocator that tracks allocations by printing or otherwise\n+    /// having side effects.\n+    ///\n     /// # Errors\n     ///\n     /// Returning `Err` indicates that either memory is exhausted or `layout` does not meet"}]}