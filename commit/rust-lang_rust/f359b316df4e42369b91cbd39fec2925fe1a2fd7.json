{"sha": "f359b316df4e42369b91cbd39fec2925fe1a2fd7", "node_id": "C_kwDOAAsO6NoAKGYzNTliMzE2ZGY0ZTQyMzY5YjkxY2JkMzlmZWMyOTI1ZmUxYTJmZDc", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-03T19:29:17Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-03T19:29:17Z"}, "message": "Fix a place that used the old `Path` representation", "tree": {"sha": "f08ad99dbefbe8c547d08d1f911f550a9a41ec3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f08ad99dbefbe8c547d08d1f911f550a9a41ec3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f359b316df4e42369b91cbd39fec2925fe1a2fd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f359b316df4e42369b91cbd39fec2925fe1a2fd7", "html_url": "https://github.com/rust-lang/rust/commit/f359b316df4e42369b91cbd39fec2925fe1a2fd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f359b316df4e42369b91cbd39fec2925fe1a2fd7/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9f3c9feb49172ce4015f6e81815b70051ba683c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9f3c9feb49172ce4015f6e81815b70051ba683c", "html_url": "https://github.com/rust-lang/rust/commit/f9f3c9feb49172ce4015f6e81815b70051ba683c"}], "stats": {"total": 3, "additions": 1, "deletions": 2}, "files": [{"sha": "668088bb0a59a23a8d3cac016dc2513b30816cae", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f359b316df4e42369b91cbd39fec2925fe1a2fd7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f359b316df4e42369b91cbd39fec2925fe1a2fd7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f359b316df4e42369b91cbd39fec2925fe1a2fd7", "patch": "@@ -1267,8 +1267,7 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n                 return normalized_value.clean(cx);\n             }\n \n-            let segments = if p.is_global() { &p.segments[1..] } else { &p.segments };\n-            let trait_segments = &segments[..segments.len() - 1];\n+            let trait_segments = &p.segments[..p.segments.len() - 1];\n             let trait_def = cx.tcx.associated_item(p.res.def_id()).container.id();\n             let trait_ = self::Path {\n                 res: Res::Def(DefKind::Trait, trait_def),"}]}