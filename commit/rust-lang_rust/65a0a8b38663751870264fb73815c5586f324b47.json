{"sha": "65a0a8b38663751870264fb73815c5586f324b47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YTBhOGIzODY2Mzc1MTg3MDI2NGZiNzM4MTVjNTU4NmYzMjRiNDc=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-05-23T17:21:25Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-05-23T20:20:05Z"}, "message": "Stabilize ops::ControlFlow (just the type)", "tree": {"sha": "d4c81ad952a3a4f526f5ed6f76843d77989987c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4c81ad952a3a4f526f5ed6f76843d77989987c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65a0a8b38663751870264fb73815c5586f324b47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65a0a8b38663751870264fb73815c5586f324b47", "html_url": "https://github.com/rust-lang/rust/commit/65a0a8b38663751870264fb73815c5586f324b47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65a0a8b38663751870264fb73815c5586f324b47/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bcaeb0bf9e1c29d18abc32928fd2f23d1bed0bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bcaeb0bf9e1c29d18abc32928fd2f23d1bed0bd", "html_url": "https://github.com/rust-lang/rust/commit/3bcaeb0bf9e1c29d18abc32928fd2f23d1bed0bd"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "7e1761ea868cfd98414ddf5a89fc1e3c22f2cd09", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65a0a8b38663751870264fb73815c5586f324b47/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a0a8b38663751870264fb73815c5586f324b47/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=65a0a8b38663751870264fb73815c5586f324b47", "patch": "@@ -332,7 +332,7 @@ pub fn lower_crate<'a, 'hir>(\n         lifetimes_to_define: Vec::new(),\n         is_collecting_in_band_lifetimes: false,\n         in_scope_lifetimes: Vec::new(),\n-        allow_try_trait: Some([sym::control_flow_enum, sym::try_trait_v2][..].into()),\n+        allow_try_trait: Some([sym::try_trait_v2][..].into()),\n         allow_gen_future: Some([sym::gen_future][..].into()),\n     }\n     .lower_crate(krate)"}, {"sha": "b1dd942719820b6431f3c4ec2d48de6b56651523", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65a0a8b38663751870264fb73815c5586f324b47/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a0a8b38663751870264fb73815c5586f324b47/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=65a0a8b38663751870264fb73815c5586f324b47", "patch": "@@ -11,7 +11,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(box_patterns)]\n #![feature(bool_to_option)]\n-#![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]\n #![feature(format_args_capture)]\n #![feature(iter_zip)]"}, {"sha": "8b682d068c07142f9863acb7b8095cdd95a71c8d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65a0a8b38663751870264fb73815c5586f324b47/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a0a8b38663751870264fb73815c5586f324b47/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=65a0a8b38663751870264fb73815c5586f324b47", "patch": "@@ -414,7 +414,6 @@ symbols! {\n         constructor,\n         contents,\n         context,\n-        control_flow_enum,\n         convert,\n         copy,\n         copy_closures,"}, {"sha": "d0b05beb4e63c86ee9ea23d25931a4a5c715acfc", "filename": "compiler/rustc_traits/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65a0a8b38663751870264fb73815c5586f324b47/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a0a8b38663751870264fb73815c5586f324b47/compiler%2Frustc_traits%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Flib.rs?ref=65a0a8b38663751870264fb73815c5586f324b47", "patch": "@@ -4,7 +4,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![feature(control_flow_enum)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "922133fa6994f97cef7e0f320198d0738909a099", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/65a0a8b38663751870264fb73815c5586f324b47/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a0a8b38663751870264fb73815c5586f324b47/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=65a0a8b38663751870264fb73815c5586f324b47", "patch": "@@ -1993,6 +1993,31 @@ pub trait Iterator {\n     /// assert_eq!(it.len(), 2);\n     /// assert_eq!(it.next(), Some(&40));\n     /// ```\n+    ///\n+    /// While you cannot `break` from a closure, the [`crate::ops::ControlFlow`]\n+    /// type allows a similar idea:\n+    ///\n+    /// ```\n+    /// use std::ops::ControlFlow;\n+    ///\n+    /// let triangular = (1..30).try_fold(0_i8, |prev, x| {\n+    ///     if let Some(next) = prev.checked_add(x) {\n+    ///         ControlFlow::Continue(next)\n+    ///     } else {\n+    ///         ControlFlow::Break(prev)\n+    ///     }\n+    /// });\n+    /// assert_eq!(triangular, ControlFlow::Break(120));\n+    ///\n+    /// let triangular = (1..30).try_fold(0_u64, |prev, x| {\n+    ///     if let Some(next) = prev.checked_add(x) {\n+    ///         ControlFlow::Continue(next)\n+    ///     } else {\n+    ///         ControlFlow::Break(prev)\n+    ///     }\n+    /// });\n+    /// assert_eq!(triangular, ControlFlow::Continue(435));\n+    /// ```\n     #[inline]\n     #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n     fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R\n@@ -2035,6 +2060,22 @@ pub trait Iterator {\n     /// // It short-circuited, so the remaining items are still in the iterator:\n     /// assert_eq!(it.next(), Some(\"stale_bread.json\"));\n     /// ```\n+    ///\n+    /// The [`crate::ops::ControlFlow`] type can be used with this method for the\n+    /// situations in which you'd use `break` and `continue` in a normal loop:\n+    ///\n+    /// ```\n+    /// use std::ops::ControlFlow;\n+    ///\n+    /// let r = (2..100).try_for_each(|x| {\n+    ///     if 323 % x == 0 {\n+    ///         return ControlFlow::Break(x)\n+    ///     }\n+    ///\n+    ///     ControlFlow::Continue(())\n+    /// });\n+    /// assert_eq!(r, ControlFlow::Break(17));\n+    /// ```\n     #[inline]\n     #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n     fn try_for_each<F, R>(&mut self, f: F) -> R"}, {"sha": "4a7da1c3cac99c685232b3c49ccdc55fa4e4a043", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65a0a8b38663751870264fb73815c5586f324b47/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a0a8b38663751870264fb73815c5586f324b47/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=65a0a8b38663751870264fb73815c5586f324b47", "patch": "@@ -11,7 +11,6 @@ use crate::{convert, ops};\n ///\n /// Early-exiting from [`Iterator::try_for_each`]:\n /// ```\n-/// #![feature(control_flow_enum)]\n /// use std::ops::ControlFlow;\n ///\n /// let r = (2..100).try_for_each(|x| {\n@@ -26,7 +25,6 @@ use crate::{convert, ops};\n ///\n /// A basic tree traversal:\n /// ```no_run\n-/// #![feature(control_flow_enum)]\n /// use std::ops::ControlFlow;\n ///\n /// pub struct TreeNode<T> {\n@@ -48,13 +46,15 @@ use crate::{convert, ops};\n ///     }\n /// }\n /// ```\n-#[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n+#[stable(feature = \"control_flow_enum_type\", since = \"1.54.0\")]\n #[derive(Debug, Clone, Copy, PartialEq)]\n pub enum ControlFlow<B, C = ()> {\n     /// Move on to the next phase of the operation as normal.\n+    #[stable(feature = \"control_flow_enum_type\", since = \"1.54.0\")]\n     #[cfg_attr(not(bootstrap), lang = \"Continue\")]\n     Continue(C),\n     /// Exit the operation without running subsequent phases.\n+    #[stable(feature = \"control_flow_enum_type\", since = \"1.54.0\")]\n     #[cfg_attr(not(bootstrap), lang = \"Break\")]\n     Break(B),\n     // Yes, the order of the variants doesn't match the type parameters."}, {"sha": "8628db13ed5fb2b79fdec591b103225f7a11d1d4", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65a0a8b38663751870264fb73815c5586f324b47/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a0a8b38663751870264fb73815c5586f324b47/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=65a0a8b38663751870264fb73815c5586f324b47", "patch": "@@ -55,7 +55,6 @@ use crate::ops::ControlFlow;\n /// into the return type using [`Try::from_output`]:\n /// ```\n /// # #![feature(try_trait_v2)]\n-/// # #![feature(control_flow_enum)]\n /// # use std::ops::{ControlFlow, Try};\n /// fn simple_try_fold_2<A, T, R: Try<Output = A>>(\n ///     iter: impl Iterator<Item = T>,\n@@ -79,7 +78,6 @@ use crate::ops::ControlFlow;\n /// recreated from their corresponding residual, so we'll just call it:\n /// ```\n /// # #![feature(try_trait_v2)]\n-/// # #![feature(control_flow_enum)]\n /// # use std::ops::{ControlFlow, Try};\n /// pub fn simple_try_fold_3<A, T, R: Try<Output = A>>(\n ///     iter: impl Iterator<Item = T>,\n@@ -170,7 +168,6 @@ pub trait Try: FromResidual {\n     ///\n     /// ```\n     /// #![feature(try_trait_v2)]\n-    /// #![feature(control_flow_enum)]\n     /// use std::ops::Try;\n     ///\n     /// assert_eq!(<Result<_, String> as Try>::from_output(3), Ok(3));\n@@ -202,7 +199,6 @@ pub trait Try: FromResidual {\n     ///\n     /// ```\n     /// #![feature(try_trait_v2)]\n-    /// #![feature(control_flow_enum)]\n     /// use std::ops::{ControlFlow, Try};\n     ///\n     /// assert_eq!(Ok::<_, String>(3).branch(), ControlFlow::Continue(3));\n@@ -304,7 +300,6 @@ pub trait FromResidual<R = <Self as Try>::Residual> {\n     ///\n     /// ```\n     /// #![feature(try_trait_v2)]\n-    /// #![feature(control_flow_enum)]\n     /// use std::ops::{ControlFlow, FromResidual};\n     ///\n     /// assert_eq!(Result::<String, i64>::from_residual(Err(3_u8)), Err(3));"}, {"sha": "4cc2765dc7d95c52ba769193e0009e93d509c481", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65a0a8b38663751870264fb73815c5586f324b47/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a0a8b38663751870264fb73815c5586f324b47/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=65a0a8b38663751870264fb73815c5586f324b47", "patch": "@@ -15,7 +15,6 @@\n #![feature(const_ptr_read)]\n #![feature(const_ptr_write)]\n #![feature(const_ptr_offset)]\n-#![feature(control_flow_enum)]\n #![feature(core_intrinsics)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]"}]}