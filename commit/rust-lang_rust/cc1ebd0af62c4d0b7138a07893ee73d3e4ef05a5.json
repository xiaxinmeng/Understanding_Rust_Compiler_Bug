{"sha": "cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMWViZDBhZjYyYzRkMGI3MTM4YTA3ODkzZWU3M2QzZTRlZjA1YTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-01T09:26:24Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-01T09:29:05Z"}, "message": "some formatting", "tree": {"sha": "eae8946db866f3041e5790dcaa3841542c7ccc6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eae8946db866f3041e5790dcaa3841542c7ccc6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5", "html_url": "https://github.com/rust-lang/rust/commit/cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea5aa19487a28246c2fa29155c4f7be21b4cdfd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea5aa19487a28246c2fa29155c4f7be21b4cdfd0", "html_url": "https://github.com/rust-lang/rust/commit/ea5aa19487a28246c2fa29155c4f7be21b4cdfd0"}], "stats": {"total": 114, "additions": 57, "deletions": 57}, "files": [{"sha": "cc02100dd3b3e55e9885d8cb10a69fbea43c688b", "filename": "src/eval.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5", "patch": "@@ -5,9 +5,9 @@ use std::ffi::OsStr;\n use rand::rngs::StdRng;\n use rand::SeedableRng;\n \n-use rustc_hir::def_id::DefId;\n use rustc::ty::layout::{LayoutOf, Size};\n use rustc::ty::{self, TyCtxt};\n+use rustc_hir::def_id::DefId;\n \n use crate::*;\n \n@@ -50,10 +50,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     let mut ecx = InterpCx::new(\n         tcx.at(rustc_span::source_map::DUMMY_SP),\n         ty::ParamEnv::reveal_all(),\n-        Evaluator::new(\n-            config.communicate,\n-            config.validate,\n-        ),\n+        Evaluator::new(config.communicate, config.validate),\n         MemoryExtra::new(\n             StdRng::seed_from_u64(config.seed.unwrap_or(0)),\n             config.stacked_borrows,"}, {"sha": "19db6852c56a7be66475281641153c12bfddba96", "filename": "src/helpers.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5", "patch": "@@ -1,13 +1,13 @@\n use std::ffi::OsStr;\n use std::{iter, mem};\n \n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc::mir;\n use rustc::ty::{\n     self,\n     layout::{self, LayoutOf, Size, TyLayout},\n     List, TyCtxt,\n };\n+use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_span::source_map::DUMMY_SP;\n \n use rand::RngCore;\n@@ -515,7 +515,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn alloc_os_str_as_c_str(\n         &mut self,\n         os_str: &OsStr,\n-        memkind: MemoryKind<MiriMemoryKind>\n+        memkind: MemoryKind<MiriMemoryKind>,\n     ) -> Pointer<Tag> {\n         let size = os_str.len() as u64 + 1; // Make space for `0` terminator.\n         let this = self.eval_context_mut();\n@@ -532,17 +532,17 @@ pub fn immty_from_int_checked<'tcx>(\n     layout: TyLayout<'tcx>,\n ) -> InterpResult<'tcx, ImmTy<'tcx, Tag>> {\n     let int = int.into();\n-    Ok(ImmTy::try_from_int(int, layout).ok_or_else(||\n+    Ok(ImmTy::try_from_int(int, layout).ok_or_else(|| {\n         err_unsup_format!(\"Signed value {:#x} does not fit in {} bits\", int, layout.size.bits())\n-    )?)\n+    })?)\n }\n \n pub fn immty_from_uint_checked<'tcx>(\n     int: impl Into<u128>,\n     layout: TyLayout<'tcx>,\n ) -> InterpResult<'tcx, ImmTy<'tcx, Tag>> {\n     let int = int.into();\n-    Ok(ImmTy::try_from_uint(int, layout).ok_or_else(||\n+    Ok(ImmTy::try_from_uint(int, layout).ok_or_else(|| {\n         err_unsup_format!(\"Signed value {:#x} does not fit in {} bits\", int, layout.size.bits())\n-    )?)\n+    })?)\n }"}, {"sha": "2a805f85557904f79c61d8a7ca0dec4e8d6ceb11", "filename": "src/lib.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5", "patch": "@@ -11,10 +11,10 @@ extern crate rustc_apfloat;\n extern crate rustc_ast;\n #[macro_use]\n extern crate rustc;\n-extern crate rustc_hir;\n-extern crate rustc_span;\n extern crate rustc_data_structures;\n+extern crate rustc_hir;\n extern crate rustc_mir;\n+extern crate rustc_span;\n extern crate rustc_target;\n \n mod diagnostics;\n@@ -44,7 +44,8 @@ pub use crate::shims::tls::{EvalContextExt as TlsEvalContextExt, TlsData};\n pub use crate::shims::EvalContextExt as ShimsEvalContextExt;\n \n pub use crate::diagnostics::{\n-    register_diagnostic, report_diagnostic, EvalContextExt as DiagnosticsEvalContextExt, NonHaltingDiagnostic,\n+    register_diagnostic, report_diagnostic, EvalContextExt as DiagnosticsEvalContextExt,\n+    NonHaltingDiagnostic,\n };\n pub use crate::eval::{create_ecx, eval_main, MiriConfig, TerminationInfo};\n pub use crate::helpers::EvalContextExt as HelpersEvalContextExt;\n@@ -56,12 +57,17 @@ pub use crate::mono_hash_map::MonoHashMap;\n pub use crate::operator::EvalContextExt as OperatorEvalContextExt;\n pub use crate::range_map::RangeMap;\n pub use crate::stacked_borrows::{\n-    EvalContextExt as StackedBorEvalContextExt, Item, Permission, PtrId, Stack,\n-    Stacks, Tag,\n+    EvalContextExt as StackedBorEvalContextExt, Item, Permission, PtrId, Stack, Stacks, Tag,\n };\n \n /// Insert rustc arguments at the beginning of the argument list that Miri wants to be\n /// set per default, for maximal validation power.\n pub fn miri_default_args() -> &'static [&'static str] {\n-    &[\"-Zalways-encode-mir\", \"-Zmir-emit-retag\", \"-Zmir-opt-level=0\", \"--cfg=miri\", \"-Cdebug-assertions=on\"]\n+    &[\n+        \"-Zalways-encode-mir\",\n+        \"-Zmir-emit-retag\",\n+        \"-Zmir-opt-level=0\",\n+        \"--cfg=miri\",\n+        \"-Cdebug-assertions=on\",\n+    ]\n }"}, {"sha": "b5c76070ae30bf6270f28a1ff417dd5734ae3d27", "filename": "src/machine.rs", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5", "patch": "@@ -3,20 +3,20 @@\n \n use std::borrow::Cow;\n use std::cell::RefCell;\n-use std::rc::Rc;\n use std::num::NonZeroU64;\n+use std::rc::Rc;\n \n use rand::rngs::StdRng;\n \n-use rustc_hir::def_id::DefId;\n use rustc::mir;\n use rustc::ty::{\n     self,\n     layout::{LayoutOf, Size},\n     Ty, TyCtxt,\n };\n-use rustc_span::{source_map::Span, symbol::sym};\n use rustc_ast::attr;\n+use rustc_hir::def_id::DefId;\n+use rustc_span::{source_map::Span, symbol::sym};\n \n use crate::*;\n \n@@ -85,11 +85,7 @@ impl MemoryExtra {\n         } else {\n             None\n         };\n-        MemoryExtra {\n-            stacked_borrows,\n-            intptrcast: Default::default(),\n-            rng: RefCell::new(rng),\n-        }\n+        MemoryExtra { stacked_borrows, intptrcast: Default::default(), rng: RefCell::new(rng) }\n     }\n }\n \n@@ -307,18 +303,15 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     ) -> (Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>, Self::PointerTag) {\n         let kind = kind.expect(\"we set our STATIC_KIND so this cannot be None\");\n         let alloc = alloc.into_owned();\n-        let (stacks, base_tag) = if let Some(stacked_borrows) = memory_extra.stacked_borrows.as_ref() {\n-            let (stacks, base_tag) = Stacks::new_allocation(\n-                id,\n-                alloc.size,\n-                Rc::clone(stacked_borrows),\n-                kind,\n-            );\n-            (Some(stacks), base_tag)\n-        } else {\n-            // No stacks, no tag.\n-            (None, Tag::Untagged)\n-        };\n+        let (stacks, base_tag) =\n+            if let Some(stacked_borrows) = memory_extra.stacked_borrows.as_ref() {\n+                let (stacks, base_tag) =\n+                    Stacks::new_allocation(id, alloc.size, Rc::clone(stacked_borrows), kind);\n+                (Some(stacks), base_tag)\n+            } else {\n+                // No stacks, no tag.\n+                (None, Tag::Untagged)\n+            };\n         let mut stacked_borrows = memory_extra.stacked_borrows.as_ref().map(|sb| sb.borrow_mut());\n         let alloc: Allocation<Tag, Self::AllocExtra> = alloc.with_tags_and_extra(\n             |alloc| {\n@@ -360,14 +353,11 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn stack_push(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx, FrameData<'tcx>> {\n-        let call_id = ecx.memory.extra.stacked_borrows.as_ref().map_or(\n-            NonZeroU64::new(1).unwrap(),\n-            |stacked_borrows| stacked_borrows.borrow_mut().new_call(),\n-        );\n-        Ok(FrameData {\n-            call_id,\n-            catch_panic: None,\n-        })\n+        let stacked_borrows = ecx.memory.extra.stacked_borrows.as_ref();\n+        let call_id = stacked_borrows.map_or(NonZeroU64::new(1).unwrap(), |stacked_borrows| {\n+            stacked_borrows.borrow_mut().new_call()\n+        });\n+        Ok(FrameData { call_id, catch_panic: None })\n     }\n \n     #[inline(always)]"}, {"sha": "c494e4ff8c72484acdae7168383980fb30b6de65", "filename": "src/operator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5", "patch": "@@ -103,9 +103,9 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n         offset: i64,\n     ) -> InterpResult<'tcx, Scalar<Tag>> {\n         let pointee_size = i64::try_from(self.layout_of(pointee_ty)?.size.bytes()).unwrap();\n-        let offset = offset\n-            .checked_mul(pointee_size)\n-            .ok_or_else(|| err_ub_format!(\"overflow during offset comutation for inbounds pointer arithmetic\"))?;\n+        let offset = offset.checked_mul(pointee_size).ok_or_else(|| {\n+            err_ub_format!(\"overflow during offset comutation for inbounds pointer arithmetic\")\n+        })?;\n         // We do this first, to rule out overflows.\n         let offset_ptr = ptr.ptr_signed_offset(offset, self)?;\n         // What we need to check is that starting at `min(ptr, offset_ptr)`,"}, {"sha": "a51f8c457143ad0eb7aa74e1b1ce0a0799884c42", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=cc1ebd0af62c4d0b7138a07893ee73d3e4ef05a5", "patch": "@@ -7,9 +7,9 @@ use std::fmt;\n use std::num::NonZeroU64;\n use std::rc::Rc;\n \n-use rustc_hir::Mutability;\n use rustc::mir::RetagKind;\n use rustc::ty::{self, layout::Size};\n+use rustc_hir::Mutability;\n \n use crate::*;\n \n@@ -293,9 +293,12 @@ impl<'tcx> Stack {\n         // Two main steps: Find granting item, remove incompatible items above.\n \n         // Step 1: Find granting item.\n-        let granting_idx = self.find_granting(access, tag).ok_or_else(|| err_ub!(UbExperimental(\n-            format!(\"no item granting {} to tag {:?} found in borrow stack.\", access, tag),\n-        )))?;\n+        let granting_idx = self.find_granting(access, tag).ok_or_else(|| {\n+            err_ub!(UbExperimental(format!(\n+                \"no item granting {} to tag {:?} found in borrow stack.\",\n+                access, tag\n+            ),))\n+        })?;\n \n         // Step 2: Remove incompatible items above them.  Make sure we do not remove protected\n         // items.  Behavior differs for reads and writes.\n@@ -334,10 +337,12 @@ impl<'tcx> Stack {\n     /// active protectors at all because we will remove all items.\n     fn dealloc(&mut self, tag: Tag, global: &GlobalState) -> InterpResult<'tcx> {\n         // Step 1: Find granting item.\n-        self.find_granting(AccessKind::Write, tag).ok_or_else(|| err_ub!(UbExperimental(format!(\n-            \"no item granting write access for deallocation to tag {:?} found in borrow stack\",\n-            tag,\n-        ))))?;\n+        self.find_granting(AccessKind::Write, tag).ok_or_else(|| {\n+            err_ub!(UbExperimental(format!(\n+                \"no item granting write access for deallocation to tag {:?} found in borrow stack\",\n+                tag,\n+            )))\n+        })?;\n \n         // Step 2: Remove all items.  Also checks for protectors.\n         for item in self.borrows.drain(..).rev() {\n@@ -575,7 +580,9 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // breaking `Rc::from_raw`.\n             RefKind::Raw { .. } => Tag::Untagged,\n             // All other pointesr are properly tracked.\n-            _ => Tag::Tagged(this.memory.extra.stacked_borrows.as_ref().unwrap().borrow_mut().new_ptr()),\n+            _ => Tag::Tagged(\n+                this.memory.extra.stacked_borrows.as_ref().unwrap().borrow_mut().new_ptr(),\n+            ),\n         };\n \n         // Reborrow."}]}