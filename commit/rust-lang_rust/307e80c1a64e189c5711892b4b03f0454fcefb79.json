{"sha": "307e80c1a64e189c5711892b4b03f0454fcefb79", "node_id": "C_kwDOAAsO6NoAKDMwN2U4MGMxYTY0ZTE4OWM1NzExODkyYjRiMDNmMDQ1NGZjZWZiNzk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-12T06:20:00Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-22T18:22:05Z"}, "message": "rename PointerKind::Shared \u2192 SharedMutable to indicate this is NOT the usual shared reference", "tree": {"sha": "c1f47c286a9bfaf8d795d2b27a3bf2a7fc389d36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1f47c286a9bfaf8d795d2b27a3bf2a7fc389d36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/307e80c1a64e189c5711892b4b03f0454fcefb79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/307e80c1a64e189c5711892b4b03f0454fcefb79", "html_url": "https://github.com/rust-lang/rust/commit/307e80c1a64e189c5711892b4b03f0454fcefb79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/307e80c1a64e189c5711892b4b03f0454fcefb79/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22d25f21dc008785f52e7c2833de4f4236b1066b", "url": "https://api.github.com/repos/rust-lang/rust/commits/22d25f21dc008785f52e7c2833de4f4236b1066b", "html_url": "https://github.com/rust-lang/rust/commit/22d25f21dc008785f52e7c2833de4f4236b1066b"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "3c27e36795e1d4517aaa9a3a6ddc8215e3d3a738", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/307e80c1a64e189c5711892b4b03f0454fcefb79/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307e80c1a64e189c5711892b4b03f0454fcefb79/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=307e80c1a64e189c5711892b4b03f0454fcefb79", "patch": "@@ -2618,14 +2618,14 @@ where\n                     // Use conservative pointer kind if not optimizing. This saves us the\n                     // Freeze/Unpin queries, and can save time in the codegen backend (noalias\n                     // attributes in LLVM have compile-time cost even in unoptimized builds).\n-                    PointerKind::Shared\n+                    PointerKind::SharedMutable\n                 } else {\n                     match mt {\n                         hir::Mutability::Not => {\n                             if ty.is_freeze(tcx.at(DUMMY_SP), cx.param_env()) {\n                                 PointerKind::Frozen\n                             } else {\n-                                PointerKind::Shared\n+                                PointerKind::SharedMutable\n                             }\n                         }\n                         hir::Mutability::Mut => {\n@@ -2636,7 +2636,7 @@ where\n                             if ty.is_unpin(tcx.at(DUMMY_SP), cx.param_env()) {\n                                 PointerKind::UniqueBorrowed\n                             } else {\n-                                PointerKind::Shared\n+                                PointerKind::SharedMutable\n                             }\n                         }\n                     }\n@@ -3285,7 +3285,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     // or not to actually emit the attribute. It can also be controlled with the\n                     // `-Zmutable-noalias` debugging option.\n                     let no_alias = match kind {\n-                        PointerKind::Shared | PointerKind::UniqueBorrowed => false,\n+                        PointerKind::SharedMutable | PointerKind::UniqueBorrowed => false,\n                         PointerKind::UniqueOwned => noalias_for_box,\n                         PointerKind::Frozen => !is_return,\n                     };"}, {"sha": "b8398daadf1474674bbf3689cffa79db030b9309", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/307e80c1a64e189c5711892b4b03f0454fcefb79/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/307e80c1a64e189c5711892b4b03f0454fcefb79/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=307e80c1a64e189c5711892b4b03f0454fcefb79", "patch": "@@ -1350,7 +1350,7 @@ impl<'a, Ty> Deref for TyAndLayout<'a, Ty> {\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum PointerKind {\n     /// Most general case, we know no restrictions to tell LLVM.\n-    Shared,\n+    SharedMutable,\n \n     /// `&T` where `T` contains no `UnsafeCell`, is `noalias` and `readonly`.\n     Frozen,"}]}