{"sha": "512135920d6f904b316cfa5d508cf830db0d6461", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMjEzNTkyMGQ2ZjkwNGIzMTZjZmE1ZDUwOGNmODMwZGIwZDY0NjE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-28T19:37:27Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-28T22:49:57Z"}, "message": "Highlight all related tokens in macro inputs", "tree": {"sha": "ffcceee87c9d5bf2c7591593c4d172dd280e4d09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffcceee87c9d5bf2c7591593c4d172dd280e4d09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/512135920d6f904b316cfa5d508cf830db0d6461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/512135920d6f904b316cfa5d508cf830db0d6461", "html_url": "https://github.com/rust-lang/rust/commit/512135920d6f904b316cfa5d508cf830db0d6461", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/512135920d6f904b316cfa5d508cf830db0d6461/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5059e06231a76be32e46f1b9aa06fb67b77db4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5059e06231a76be32e46f1b9aa06fb67b77db4c", "html_url": "https://github.com/rust-lang/rust/commit/c5059e06231a76be32e46f1b9aa06fb67b77db4c"}], "stats": {"total": 126, "additions": 99, "deletions": 27}, "files": [{"sha": "3d3ef92fff355e435d5e657ddfda794e7771c752", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/512135920d6f904b316cfa5d508cf830db0d6461/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/512135920d6f904b316cfa5d508cf830db0d6461/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=512135920d6f904b316cfa5d508cf830db0d6461", "patch": "@@ -166,10 +166,12 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.speculative_expand(actual_macro_call, speculative_args, token_to_map)\n     }\n \n+    // FIXME: Rename to descend_into_macros_single\n     pub fn descend_into_macros(&self, token: SyntaxToken) -> SyntaxToken {\n         self.imp.descend_into_macros(token).pop().unwrap()\n     }\n \n+    // FIXME: Rename to descend_into_macros\n     pub fn descend_into_macros_many(&self, token: SyntaxToken) -> SmallVec<[SyntaxToken; 1]> {\n         self.imp.descend_into_macros(token)\n     }\n@@ -236,6 +238,16 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.descend_node_at_offset(node, offset).find_map(N::cast)\n     }\n \n+    /// Find an AstNode by offset inside SyntaxNode, if it is inside *MacroCall*,\n+    /// descend it and find again\n+    pub fn find_nodes_at_offset_with_descend<'slf, N: AstNode + 'slf>(\n+        &'slf self,\n+        node: &SyntaxNode,\n+        offset: TextSize,\n+    ) -> impl Iterator<Item = N> + 'slf {\n+        self.imp.descend_node_at_offset(node, offset).flat_map(N::cast)\n+    }\n+\n     pub fn resolve_lifetime_param(&self, lifetime: &ast::Lifetime) -> Option<LifetimeParam> {\n         self.imp.resolve_lifetime_param(lifetime)\n     }\n@@ -482,12 +494,13 @@ impl<'db> SemanticsImpl<'db> {\n                                     .as_ref()?\n                                     .map_token_down(self.db.upcast(), None, token.as_ref())?;\n \n+                                let len = queue.len();\n                                 queue.extend(tokens.inspect(|token| {\n                                     if let Some(parent) = token.value.parent() {\n                                         self.cache(find_root(&parent), token.file_id);\n                                     }\n                                 }));\n-                                return Some(());\n+                                return (queue.len() != len).then(|| ());\n                             },\n                             ast::Item(item) => {\n                                 match self.with_ctx(|ctx| ctx.item_to_macro_call(token.with_value(item))) {\n@@ -500,12 +513,13 @@ impl<'db> SemanticsImpl<'db> {\n                                             .as_ref()?\n                                             .map_token_down(self.db.upcast(), None, token.as_ref())?;\n \n+                                        let len = queue.len();\n                                         queue.extend(tokens.inspect(|token| {\n                                             if let Some(parent) = token.value.parent() {\n                                                 self.cache(find_root(&parent), token.file_id);\n                                             }\n                                         }));\n-                                        return Some(());\n+                                        return (queue.len() != len).then(|| ());\n                                     }\n                                     None => {}\n                                 }"}, {"sha": "71e7a8544e62c0b37d4a2650e561b8c185676e86", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 82, "deletions": 24, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/512135920d6f904b316cfa5d508cf830db0d6461/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/512135920d6f904b316cfa5d508cf830db0d6461/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=512135920d6f904b316cfa5d508cf830db0d6461", "patch": "@@ -6,6 +6,7 @@ use ide_db::{\n     search::{FileReference, ReferenceAccess, SearchScope},\n     RootDatabase,\n };\n+use itertools::Itertools;\n use syntax::{\n     ast::{self, LoopBodyOwner},\n     match_ast, AstNode, SyntaxNode, SyntaxToken, TextRange, TextSize, T,\n@@ -70,7 +71,7 @@ fn highlight_references(\n     syntax: &SyntaxNode,\n     FilePosition { offset, file_id }: FilePosition,\n ) -> Option<Vec<HighlightedRange>> {\n-    let defs = find_defs(sema, syntax, offset)?;\n+    let defs = find_defs(sema, syntax, offset);\n     let usages = defs\n         .iter()\n         .flat_map(|&d| {\n@@ -99,7 +100,12 @@ fn highlight_references(\n         })\n     });\n \n-    Some(declarations.chain(usages).collect())\n+    let res: Vec<_> = declarations.chain(usages).collect();\n+    if res.is_empty() {\n+        None\n+    } else {\n+        Some(res)\n+    }\n }\n \n fn highlight_exit_points(\n@@ -270,29 +276,41 @@ fn find_defs(\n     sema: &Semantics<RootDatabase>,\n     syntax: &SyntaxNode,\n     offset: TextSize,\n-) -> Option<Vec<Definition>> {\n-    let defs = match sema.find_node_at_offset_with_descend(syntax, offset)? {\n-        ast::NameLike::NameRef(name_ref) => match NameRefClass::classify(sema, &name_ref)? {\n-            NameRefClass::Definition(def) => vec![def],\n-            NameRefClass::FieldShorthand { local_ref, field_ref } => {\n-                vec![Definition::Local(local_ref), Definition::Field(field_ref)]\n-            }\n-        },\n-        ast::NameLike::Name(name) => match NameClass::classify(sema, &name)? {\n-            NameClass::Definition(it) | NameClass::ConstReference(it) => vec![it],\n-            NameClass::PatFieldShorthand { local_def, field_ref } => {\n-                vec![Definition::Local(local_def), Definition::Field(field_ref)]\n-            }\n-        },\n-        ast::NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, &lifetime)\n-            .and_then(|class| match class {\n-                NameRefClass::Definition(it) => Some(it),\n-                _ => None,\n+) -> Vec<Definition> {\n+    sema.find_nodes_at_offset_with_descend(syntax, offset)\n+        .flat_map(|name_like| {\n+            Some(match name_like {\n+                ast::NameLike::NameRef(name_ref) => {\n+                    match NameRefClass::classify(sema, &name_ref)? {\n+                        NameRefClass::Definition(def) => vec![def],\n+                        NameRefClass::FieldShorthand { local_ref, field_ref } => {\n+                            vec![Definition::Local(local_ref), Definition::Field(field_ref)]\n+                        }\n+                    }\n+                }\n+                ast::NameLike::Name(name) => match NameClass::classify(sema, &name)? {\n+                    NameClass::Definition(it) | NameClass::ConstReference(it) => vec![it],\n+                    NameClass::PatFieldShorthand { local_def, field_ref } => {\n+                        vec![Definition::Local(local_def), Definition::Field(field_ref)]\n+                    }\n+                },\n+                ast::NameLike::Lifetime(lifetime) => {\n+                    NameRefClass::classify_lifetime(sema, &lifetime)\n+                        .and_then(|class| match class {\n+                            NameRefClass::Definition(it) => Some(it),\n+                            _ => None,\n+                        })\n+                        .or_else(|| {\n+                            NameClass::classify_lifetime(sema, &lifetime)\n+                                .and_then(NameClass::defined)\n+                        })\n+                        .map(|it| vec![it])?\n+                }\n             })\n-            .or_else(|| NameClass::classify_lifetime(sema, &lifetime).and_then(NameClass::defined))\n-            .map(|it| vec![it])?,\n-    };\n-    Some(defs)\n+        })\n+        .flatten()\n+        .unique()\n+        .collect()\n }\n \n #[cfg(test)]\n@@ -392,6 +410,46 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn test_multi_macro_usage() {\n+        check(\n+            r#\"\n+macro_rules! foo {\n+    ($ident:ident) => {\n+        fn $ident() -> $ident { loop {} }\n+        struct $ident;\n+    }\n+}\n+\n+foo!(bar$0);\n+  // ^^^\n+  // ^^^\n+fn foo() {\n+    let bar: bar = bar();\n+          // ^^^\n+                // ^^^\n+}\n+\"#,\n+        );\n+        check(\n+            r#\"\n+macro_rules! foo {\n+    ($ident:ident) => {\n+        fn $ident() -> $ident { loop {} }\n+        struct $ident;\n+    }\n+}\n+\n+foo!(bar);\n+  // ^^^\n+fn foo() {\n+    let bar: bar$0 = bar();\n+          // ^^^\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_hl_yield_points() {\n         check("}, {"sha": "719f424fd2dc0c9d23e1704ee544664f3c2ad765", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/512135920d6f904b316cfa5d508cf830db0d6461/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/512135920d6f904b316cfa5d508cf830db0d6461/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=512135920d6f904b316cfa5d508cf830db0d6461", "patch": "@@ -17,7 +17,7 @@ use syntax::{\n use crate::RootDatabase;\n \n // FIXME: a more precise name would probably be `Symbol`?\n-#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n+#[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n pub enum Definition {\n     Macro(MacroDef),\n     Field(Field),"}]}