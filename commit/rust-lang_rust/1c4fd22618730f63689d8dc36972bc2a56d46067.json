{"sha": "1c4fd22618730f63689d8dc36972bc2a56d46067", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNGZkMjI2MTg3MzBmNjM2ODlkOGRjMzY5NzJiYzJhNTZkNDYwNjc=", "commit": {"author": {"name": "Nathan Corbyn", "email": "me@nathancorbyn.com", "date": "2020-06-08T15:04:41Z"}, "committer": {"name": "Nathan Corbyn", "email": "me@nathancorbyn.com", "date": "2020-06-08T15:04:41Z"}, "message": "Strengthen cleanup to cleanup check", "tree": {"sha": "0f59eedbf3014ef336f1accbed103494096ef331", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f59eedbf3014ef336f1accbed103494096ef331"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c4fd22618730f63689d8dc36972bc2a56d46067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c4fd22618730f63689d8dc36972bc2a56d46067", "html_url": "https://github.com/rust-lang/rust/commit/1c4fd22618730f63689d8dc36972bc2a56d46067", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c4fd22618730f63689d8dc36972bc2a56d46067/comments", "author": {"login": "doctorn", "id": 6421560, "node_id": "MDQ6VXNlcjY0MjE1NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6421560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doctorn", "html_url": "https://github.com/doctorn", "followers_url": "https://api.github.com/users/doctorn/followers", "following_url": "https://api.github.com/users/doctorn/following{/other_user}", "gists_url": "https://api.github.com/users/doctorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/doctorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doctorn/subscriptions", "organizations_url": "https://api.github.com/users/doctorn/orgs", "repos_url": "https://api.github.com/users/doctorn/repos", "events_url": "https://api.github.com/users/doctorn/events{/privacy}", "received_events_url": "https://api.github.com/users/doctorn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "doctorn", "id": 6421560, "node_id": "MDQ6VXNlcjY0MjE1NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6421560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doctorn", "html_url": "https://github.com/doctorn", "followers_url": "https://api.github.com/users/doctorn/followers", "following_url": "https://api.github.com/users/doctorn/following{/other_user}", "gists_url": "https://api.github.com/users/doctorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/doctorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doctorn/subscriptions", "organizations_url": "https://api.github.com/users/doctorn/orgs", "repos_url": "https://api.github.com/users/doctorn/repos", "events_url": "https://api.github.com/users/doctorn/events{/privacy}", "received_events_url": "https://api.github.com/users/doctorn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4158bb0f0b06a3a47042ab5e5cbc70075bec8805", "url": "https://api.github.com/repos/rust-lang/rust/commits/4158bb0f0b06a3a47042ab5e5cbc70075bec8805", "html_url": "https://github.com/rust-lang/rust/commit/4158bb0f0b06a3a47042ab5e5cbc70075bec8805"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "dda416b01a21f7dde6da6b1e92c8b97ffe1bfd58", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1c4fd22618730f63689d8dc36972bc2a56d46067/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c4fd22618730f63689d8dc36972bc2a56d46067/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=1c4fd22618730f63689d8dc36972bc2a56d46067", "patch": "@@ -13,7 +13,7 @@ use rustc_span::def_id::DefId;\n \n enum EdgeKind {\n     Unwind,\n-    Other,\n+    Normal,\n }\n \n pub struct Validator {\n@@ -59,11 +59,11 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             let src = self.body.basic_blocks().get(location.block).unwrap();\n             match (src.is_cleanup, bb.is_cleanup, edge_kind) {\n                 // Non-cleanup blocks can jump to non-cleanup blocks along non-unwind edges\n-                (false, false, EdgeKind::Other)\n+                (false, false, EdgeKind::Normal)\n                 // Non-cleanup blocks can jump to cleanup blocks along unwind edges\n                 | (false, true, EdgeKind::Unwind)\n-                // Cleanup blocks can jump to cleanup blocks along any edges\n-                | (true, true, _) => {}\n+                // Cleanup blocks can jump to cleanup blocks along non-unwind edges\n+                | (true, true, EdgeKind::Normal) => {}\n                 // All other jumps are invalid\n                 _ => {\n                     self.fail(\n@@ -114,7 +114,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         match &terminator.kind {\n             TerminatorKind::Goto { target } => {\n-                self.check_bb(location, *target, EdgeKind::Other);\n+                self.check_bb(location, *target, EdgeKind::Normal);\n             }\n             TerminatorKind::SwitchInt { targets, values, .. } => {\n                 if targets.len() != values.len() + 1 {\n@@ -128,17 +128,17 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n                 for target in targets {\n-                    self.check_bb(location, *target, EdgeKind::Other);\n+                    self.check_bb(location, *target, EdgeKind::Normal);\n                 }\n             }\n             TerminatorKind::Drop { target, unwind, .. } => {\n-                self.check_bb(location, *target, EdgeKind::Other);\n+                self.check_bb(location, *target, EdgeKind::Normal);\n                 if let Some(unwind) = unwind {\n                     self.check_bb(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::DropAndReplace { target, unwind, .. } => {\n-                self.check_bb(location, *target, EdgeKind::Other);\n+                self.check_bb(location, *target, EdgeKind::Normal);\n                 if let Some(unwind) = unwind {\n                     self.check_bb(location, *unwind, EdgeKind::Unwind);\n                 }\n@@ -153,7 +153,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     ),\n                 }\n                 if let Some((_, target)) = destination {\n-                    self.check_bb(location, *target, EdgeKind::Other);\n+                    self.check_bb(location, *target, EdgeKind::Normal);\n                 }\n                 if let Some(cleanup) = cleanup {\n                     self.check_bb(location, *cleanup, EdgeKind::Unwind);\n@@ -170,30 +170,30 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                         ),\n                     );\n                 }\n-                self.check_bb(location, *target, EdgeKind::Other);\n+                self.check_bb(location, *target, EdgeKind::Normal);\n                 if let Some(cleanup) = cleanup {\n                     self.check_bb(location, *cleanup, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::Yield { resume, drop, .. } => {\n-                self.check_bb(location, *resume, EdgeKind::Other);\n+                self.check_bb(location, *resume, EdgeKind::Normal);\n                 if let Some(drop) = drop {\n-                    self.check_bb(location, *drop, EdgeKind::Other);\n+                    self.check_bb(location, *drop, EdgeKind::Normal);\n                 }\n             }\n             TerminatorKind::FalseEdge { real_target, imaginary_target } => {\n-                self.check_bb(location, *real_target, EdgeKind::Other);\n-                self.check_bb(location, *imaginary_target, EdgeKind::Other);\n+                self.check_bb(location, *real_target, EdgeKind::Normal);\n+                self.check_bb(location, *imaginary_target, EdgeKind::Normal);\n             }\n             TerminatorKind::FalseUnwind { real_target, unwind } => {\n-                self.check_bb(location, *real_target, EdgeKind::Other);\n+                self.check_bb(location, *real_target, EdgeKind::Normal);\n                 if let Some(unwind) = unwind {\n                     self.check_bb(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::InlineAsm { destination, .. } => {\n                 if let Some(destination) = destination {\n-                    self.check_bb(location, *destination, EdgeKind::Other);\n+                    self.check_bb(location, *destination, EdgeKind::Normal);\n                 }\n             }\n             // Nothing to validate for these."}]}