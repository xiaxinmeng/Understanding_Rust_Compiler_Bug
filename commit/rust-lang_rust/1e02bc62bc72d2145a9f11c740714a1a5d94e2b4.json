{"sha": "1e02bc62bc72d2145a9f11c740714a1a5d94e2b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMDJiYzYyYmM3MmQyMTQ1YTlmMTFjNzQwNzE0YTFhNWQ5NGUyYjQ=", "commit": {"author": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2019-08-17T11:17:02Z"}, "committer": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2019-08-18T09:39:15Z"}, "message": "Better error message for break in async blocks.", "tree": {"sha": "a09fbbacca3e52602129f20383991b80707bdd52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a09fbbacca3e52602129f20383991b80707bdd52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e02bc62bc72d2145a9f11c740714a1a5d94e2b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e02bc62bc72d2145a9f11c740714a1a5d94e2b4", "html_url": "https://github.com/rust-lang/rust/commit/1e02bc62bc72d2145a9f11c740714a1a5d94e2b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e02bc62bc72d2145a9f11c740714a1a5d94e2b4/comments", "author": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dd5c191993aab6c2f1538eb8ab69afdc4b6e67a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dd5c191993aab6c2f1538eb8ab69afdc4b6e67a", "html_url": "https://github.com/rust-lang/rust/commit/9dd5c191993aab6c2f1538eb8ab69afdc4b6e67a"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "1547e607b9c61a2842471530b9025d72e2195023", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1e02bc62bc72d2145a9f11c740714a1a5d94e2b4/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e02bc62bc72d2145a9f11c740714a1a5d94e2b4/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=1e02bc62bc72d2145a9f11c740714a1a5d94e2b4", "patch": "@@ -7,7 +7,7 @@ use rustc::ty::TyCtxt;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::Map;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use rustc::hir::{self, Node, Destination};\n+use rustc::hir::{self, Node, Destination, GeneratorMovability};\n use syntax::struct_span_err;\n use syntax_pos::Span;\n use errors::Applicability;\n@@ -17,6 +17,7 @@ enum Context {\n     Normal,\n     Loop(hir::LoopSource),\n     Closure,\n+    AsyncClosure,\n     LabeledBlock,\n     AnonConst,\n }\n@@ -57,9 +58,14 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n             hir::ExprKind::Loop(ref b, _, source) => {\n                 self.with_context(Loop(source), |v| v.visit_block(&b));\n             }\n-            hir::ExprKind::Closure(_, ref function_decl, b, _, _) => {\n+            hir::ExprKind::Closure(_, ref function_decl, b, _, movability) => {\n+                let cx = if let Some(GeneratorMovability::Static) = movability {\n+                    AsyncClosure\n+                } else {\n+                    Closure\n+                };\n                 self.visit_fn_decl(&function_decl);\n-                self.with_context(Closure, |v| v.visit_nested_body(b));\n+                self.with_context(cx, |v| v.visit_nested_body(b));\n             }\n             hir::ExprKind::Block(ref b, Some(_label)) => {\n                 self.with_context(LabeledBlock, |v| v.visit_block(&b));\n@@ -171,6 +177,11 @@ impl<'a, 'hir> CheckLoopVisitor<'a, 'hir> {\n                 .span_label(span, \"cannot break inside of a closure\")\n                 .emit();\n             }\n+            AsyncClosure => {\n+                struct_span_err!(self.sess, span, E0267, \"`{}` inside of an async block\", name)\n+                    .span_label(span, \"cannot break inside of an async block\")\n+                    .emit();\n+            }\n             Normal | AnonConst => {\n                 struct_span_err!(self.sess, span, E0268, \"`{}` outside of loop\", name)\n                 .span_label(span, \"cannot break outside of a loop\")"}, {"sha": "4ddcdcac822823f6a701d605e78f5d161ded3add", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e02bc62bc72d2145a9f11c740714a1a5d94e2b4/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e02bc62bc72d2145a9f11c740714a1a5d94e2b4/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs?ref=1e02bc62bc72d2145a9f11c740714a1a5d94e2b4", "patch": "@@ -32,15 +32,14 @@ async fn return_targets_async_block_not_async_fn() -> u8 {\n \n fn no_break_in_async_block() {\n     async {\n-        break 0u8; //~ ERROR `break` inside of a closure\n-        // FIXME: This diagnostic is pretty bad.\n+        break 0u8; //~ ERROR `break` inside of an async block\n     };\n }\n \n fn no_break_in_async_block_even_with_outer_loop() {\n     loop {\n         async {\n-            break 0u8; //~ ERROR `break` inside of a closure\n+            break 0u8; //~ ERROR `break` inside of an async block\n         };\n     }\n }"}, {"sha": "a0a5ac63d84270204d1c2c54c84ae6261bb1fb02", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1e02bc62bc72d2145a9f11c740714a1a5d94e2b4/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e02bc62bc72d2145a9f11c740714a1a5d94e2b4/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=1e02bc62bc72d2145a9f11c740714a1a5d94e2b4", "patch": "@@ -1,14 +1,14 @@\n-error[E0267]: `break` inside of a closure\n+error[E0267]: `break` inside of an async block\n   --> $DIR/async-block-control-flow-static-semantics.rs:35:9\n    |\n LL |         break 0u8;\n-   |         ^^^^^^^^^ cannot break inside of a closure\n+   |         ^^^^^^^^^ cannot break inside of an async block\n \n-error[E0267]: `break` inside of a closure\n-  --> $DIR/async-block-control-flow-static-semantics.rs:43:13\n+error[E0267]: `break` inside of an async block\n+  --> $DIR/async-block-control-flow-static-semantics.rs:42:13\n    |\n LL |             break 0u8;\n-   |             ^^^^^^^^^ cannot break inside of a closure\n+   |             ^^^^^^^^^ cannot break inside of an async block\n \n error[E0308]: mismatched types\n   --> $DIR/async-block-control-flow-static-semantics.rs:15:43\n@@ -52,7 +52,7 @@ LL | async fn return_targets_async_block_not_async_fn() -> u8 {\n    = note: the return type of a function must have a statically known size\n \n error[E0308]: mismatched types\n-  --> $DIR/async-block-control-flow-static-semantics.rs:51:44\n+  --> $DIR/async-block-control-flow-static-semantics.rs:50:44\n    |\n LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n    |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n@@ -63,7 +63,7 @@ LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/async-block-control-flow-static-semantics.rs:60:50\n+  --> $DIR/async-block-control-flow-static-semantics.rs:59:50\n    |\n LL | fn rethrow_targets_async_block_not_async_fn() -> Result<u8, MyErr> {\n    |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()"}]}