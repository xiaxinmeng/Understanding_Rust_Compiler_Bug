{"sha": "84365fff0a99fbf6deab383bd9a8152202b6779b", "node_id": "C_kwDOAAsO6NoAKDg0MzY1ZmZmMGE5OWZiZjZkZWFiMzgzYmQ5YTgxNTIyMDJiNjc3OWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-19T05:41:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-19T05:41:14Z"}, "message": "Auto merge of #103225 - matthiaskrgr:rollup-1zkv87y, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #103166 (Optimize `slice_iter.copied().next_chunk()`)\n - #103176 (Fix `TyKind::is_simple_path`)\n - #103178 (Partially fix `src/test/run-make/coverage-reports` when cross-compiling)\n - #103198 (Update cargo)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "50167b05aa1db7550eecc0ba99466e1ac650f52f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50167b05aa1db7550eecc0ba99466e1ac650f52f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84365fff0a99fbf6deab383bd9a8152202b6779b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84365fff0a99fbf6deab383bd9a8152202b6779b", "html_url": "https://github.com/rust-lang/rust/commit/84365fff0a99fbf6deab383bd9a8152202b6779b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84365fff0a99fbf6deab383bd9a8152202b6779b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e", "url": "https://api.github.com/repos/rust-lang/rust/commits/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e", "html_url": "https://github.com/rust-lang/rust/commit/415d8fcc3e17f8c1324a81cf2aa7127b4fcfa32e"}, {"sha": "7f6b5819b54457a10e08f67bf9b67672f037bd68", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f6b5819b54457a10e08f67bf9b67672f037bd68", "html_url": "https://github.com/rust-lang/rust/commit/7f6b5819b54457a10e08f67bf9b67672f037bd68"}], "stats": {"total": 165, "additions": 157, "deletions": 8}, "files": [{"sha": "7112c26757717c1044f63a2d21e571a0cbea3e9a", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/84365fff0a99fbf6deab383bd9a8152202b6779b/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84365fff0a99fbf6deab383bd9a8152202b6779b/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=84365fff0a99fbf6deab383bd9a8152202b6779b", "patch": "@@ -2060,8 +2060,11 @@ impl TyKind {\n     }\n \n     pub fn is_simple_path(&self) -> Option<Symbol> {\n-        if let TyKind::Path(None, Path { segments, .. }) = &self && segments.len() == 1 {\n-            Some(segments[0].ident.name)\n+        if let TyKind::Path(None, Path { segments, .. }) = &self\n+            && let [segment] = &segments[..]\n+            && segment.args.is_none()\n+        {\n+            Some(segment.ident.name)\n         } else {\n             None\n         }"}, {"sha": "38887f29af1537733249ec7a3da964a6c0b25ed4", "filename": "library/core/benches/iter.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/84365fff0a99fbf6deab383bd9a8152202b6779b/library%2Fcore%2Fbenches%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84365fff0a99fbf6deab383bd9a8152202b6779b/library%2Fcore%2Fbenches%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fiter.rs?ref=84365fff0a99fbf6deab383bd9a8152202b6779b", "patch": "@@ -1,4 +1,6 @@\n use core::iter::*;\n+use core::mem;\n+use core::num::Wrapping;\n use test::{black_box, Bencher};\n \n #[bench]\n@@ -398,3 +400,21 @@ fn bench_trusted_random_access_adapters(b: &mut Bencher) {\n         acc\n     })\n }\n+\n+/// Exercises the iter::Copied specialization for slice::Iter\n+#[bench]\n+fn bench_copied_array_chunks(b: &mut Bencher) {\n+    let v = vec![1u8; 1024];\n+\n+    b.iter(|| {\n+        black_box(&v)\n+            .iter()\n+            .copied()\n+            .array_chunks::<{ mem::size_of::<u64>() }>()\n+            .map(|ary| {\n+                let d = u64::from_ne_bytes(ary);\n+                Wrapping(d.rotate_left(7).wrapping_add(1))\n+            })\n+            .sum::<Wrapping<u64>>()\n+    })\n+}"}, {"sha": "1e462e3fc3f8c4e2f8bb73f10c21f92db19fc822", "filename": "library/core/benches/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84365fff0a99fbf6deab383bd9a8152202b6779b/library%2Fcore%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84365fff0a99fbf6deab383bd9a8152202b6779b/library%2Fcore%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Flib.rs?ref=84365fff0a99fbf6deab383bd9a8152202b6779b", "patch": "@@ -4,6 +4,7 @@\n #![feature(int_log)]\n #![feature(test)]\n #![feature(trusted_random_access)]\n+#![feature(iter_array_chunks)]\n \n extern crate test;\n "}, {"sha": "62d3afb81603dc19d1090a12d818361f201a0a42", "filename": "library/core/src/iter/adapters/copied.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/84365fff0a99fbf6deab383bd9a8152202b6779b/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84365fff0a99fbf6deab383bd9a8152202b6779b/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs?ref=84365fff0a99fbf6deab383bd9a8152202b6779b", "patch": "@@ -2,7 +2,10 @@ use crate::iter::adapters::{\n     zip::try_get_unchecked, TrustedRandomAccess, TrustedRandomAccessNoCoerce,\n };\n use crate::iter::{FusedIterator, TrustedLen};\n+use crate::mem::MaybeUninit;\n+use crate::mem::SizedTypeProperties;\n use crate::ops::Try;\n+use crate::{array, ptr};\n \n /// An iterator that copies the elements of an underlying iterator.\n ///\n@@ -44,6 +47,15 @@ where\n         self.it.next().copied()\n     }\n \n+    fn next_chunk<const N: usize>(\n+        &mut self,\n+    ) -> Result<[Self::Item; N], array::IntoIter<Self::Item, N>>\n+    where\n+        Self: Sized,\n+    {\n+        <I as SpecNextChunk<'_, N, T>>::spec_next_chunk(&mut self.it)\n+    }\n+\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.it.size_hint()\n     }\n@@ -166,3 +178,65 @@ where\n     T: Copy,\n {\n }\n+\n+trait SpecNextChunk<'a, const N: usize, T: 'a>: Iterator<Item = &'a T>\n+where\n+    T: Copy,\n+{\n+    fn spec_next_chunk(&mut self) -> Result<[T; N], array::IntoIter<T, N>>;\n+}\n+\n+impl<'a, const N: usize, I, T: 'a> SpecNextChunk<'a, N, T> for I\n+where\n+    I: Iterator<Item = &'a T>,\n+    T: Copy,\n+{\n+    default fn spec_next_chunk(&mut self) -> Result<[T; N], array::IntoIter<T, N>> {\n+        array::iter_next_chunk(&mut self.map(|e| *e))\n+    }\n+}\n+\n+impl<'a, const N: usize, T: 'a> SpecNextChunk<'a, N, T> for crate::slice::Iter<'a, T>\n+where\n+    T: Copy,\n+{\n+    fn spec_next_chunk(&mut self) -> Result<[T; N], array::IntoIter<T, N>> {\n+        let mut raw_array = MaybeUninit::uninit_array();\n+\n+        let len = self.len();\n+\n+        if T::IS_ZST {\n+            if len < N {\n+                let _ = self.advance_by(len);\n+                // SAFETY: ZSTs can be conjured ex nihilo; only the amount has to be correct\n+                return Err(unsafe { array::IntoIter::new_unchecked(raw_array, 0..len) });\n+            }\n+\n+            let _ = self.advance_by(N);\n+            // SAFETY: ditto\n+            return Ok(unsafe { MaybeUninit::array_assume_init(raw_array) });\n+        }\n+\n+        if len < N {\n+            // SAFETY: `len` indicates that this many elements are available and we just checked that\n+            // it fits into the array.\n+            unsafe {\n+                ptr::copy_nonoverlapping(\n+                    self.as_ref().as_ptr(),\n+                    raw_array.as_mut_ptr() as *mut T,\n+                    len,\n+                );\n+                let _ = self.advance_by(len);\n+                return Err(array::IntoIter::new_unchecked(raw_array, 0..len));\n+            }\n+        }\n+\n+        // SAFETY: `len` is larger than the array size. Copy a fixed amount here to fully initialize\n+        // the array.\n+        unsafe {\n+            ptr::copy_nonoverlapping(self.as_ref().as_ptr(), raw_array.as_mut_ptr() as *mut T, N);\n+            let _ = self.advance_by(N);\n+            Ok(MaybeUninit::array_assume_init(raw_array))\n+        }\n+    }\n+}"}, {"sha": "407992c9f43d89eef7941cdf14436f7632a24f8a", "filename": "src/test/run-make/coverage-reports/Makefile", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/84365fff0a99fbf6deab383bd9a8152202b6779b/src%2Ftest%2Frun-make%2Fcoverage-reports%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/84365fff0a99fbf6deab383bd9a8152202b6779b/src%2Ftest%2Frun-make%2Fcoverage-reports%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcoverage-reports%2FMakefile?ref=84365fff0a99fbf6deab383bd9a8152202b6779b", "patch": "@@ -1,6 +1,11 @@\n # needs-profiler-support\n # ignore-windows-gnu\n \n+# FIXME(pietroalbini): this test currently does not work on cross-compiled\n+# targets because remote-test is not capable of sending back the *.profraw\n+# files generated by the LLVM instrumentation.\n+# ignore-cross-compile\n+\n # Rust coverage maps support LLVM Coverage Mapping Format versions 5 and 6,\n # corresponding with LLVM versions 12 and 13, respectively.\n # When upgrading LLVM versions, consider whether to enforce a minimum LLVM\n@@ -81,13 +86,13 @@ include clear_expected_if_blessed\n \t# Compile the test library with coverage instrumentation\n \t$(RUSTC) $(SOURCEDIR)/lib/$@.rs \\\n \t\t\t$$( sed -n 's/^\\/\\/ compile-flags: \\([^#]*\\).*/\\1/p' $(SOURCEDIR)/lib/$@.rs ) \\\n-\t\t\t--crate-type rlib -Cinstrument-coverage\n+\t\t\t--crate-type rlib -Cinstrument-coverage --target $(TARGET)\n \n %: $(SOURCEDIR)/%.rs\n \t# Compile the test program with coverage instrumentation\n \t$(RUSTC) $(SOURCEDIR)/$@.rs \\\n \t\t\t$$( sed -n 's/^\\/\\/ compile-flags: \\([^#]*\\).*/\\1/p' $(SOURCEDIR)/$@.rs ) \\\n-\t\t\t-L \"$(TMPDIR)\" -Cinstrument-coverage\n+\t\t\t-L \"$(TMPDIR)\" -Cinstrument-coverage --target $(TARGET)\n \n \t# Run it in order to generate some profiling data,\n \t# with `LLVM_PROFILE_FILE=<profdata_file>` environment variable set to"}, {"sha": "ba7809413bd804bc2b7ffa828c12b733abed418b", "filename": "src/test/ui/deriving/deriving-all-codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84365fff0a99fbf6deab383bd9a8152202b6779b/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84365fff0a99fbf6deab383bd9a8152202b6779b/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs?ref=84365fff0a99fbf6deab383bd9a8152202b6779b", "patch": "@@ -85,7 +85,7 @@ enum Mixed {\n     P,\n     Q,\n     R(u32),\n-    S { d1: u32, d2: u32 },\n+    S { d1: Option<u32>, d2: Option<i32> },\n }\n \n // An enum with no fieldless variants. Note that `Default` cannot be derived"}, {"sha": "92fce6888c089767d68f64ab4e9d6691d054e63d", "filename": "src/test/ui/deriving/deriving-all-codegen.stdout", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84365fff0a99fbf6deab383bd9a8152202b6779b/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/84365fff0a99fbf6deab383bd9a8152202b6779b/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout?ref=84365fff0a99fbf6deab383bd9a8152202b6779b", "patch": "@@ -809,15 +809,17 @@ enum Mixed {\n     Q,\n     R(u32),\n     S {\n-        d1: u32,\n-        d2: u32,\n+        d1: Option<u32>,\n+        d2: Option<i32>,\n     },\n }\n #[automatically_derived]\n impl ::core::clone::Clone for Mixed {\n     #[inline]\n     fn clone(&self) -> Mixed {\n         let _: ::core::clone::AssertParamIsClone<u32>;\n+        let _: ::core::clone::AssertParamIsClone<Option<u32>>;\n+        let _: ::core::clone::AssertParamIsClone<Option<i32>>;\n         *self\n     }\n }\n@@ -886,6 +888,8 @@ impl ::core::cmp::Eq for Mixed {\n     #[no_coverage]\n     fn assert_receiver_is_total_eq(&self) -> () {\n         let _: ::core::cmp::AssertParamIsEq<u32>;\n+        let _: ::core::cmp::AssertParamIsEq<Option<u32>>;\n+        let _: ::core::cmp::AssertParamIsEq<Option<i32>>;\n     }\n }\n #[automatically_derived]"}, {"sha": "52b4c7898d87bae0e2262ff36f3e330c5d23cdf1", "filename": "src/test/ui/deriving/issue-103157.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/84365fff0a99fbf6deab383bd9a8152202b6779b/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84365fff0a99fbf6deab383bd9a8152202b6779b/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.rs?ref=84365fff0a99fbf6deab383bd9a8152202b6779b", "patch": "@@ -0,0 +1,12 @@\n+// check-fail\n+\n+#[derive(PartialEq, Eq)]\n+pub enum Value {\n+    Boolean(Option<bool>),\n+    Float(Option<f64>), //~ ERROR the trait bound `f64: Eq` is not satisfied\n+}\n+\n+fn main() {\n+    let a = Value::Float(Some(f64::NAN));\n+    assert!(a == a);\n+}"}, {"sha": "ee3528fe1062ddd7f418667689da0e7376c0c352", "filename": "src/test/ui/deriving/issue-103157.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/84365fff0a99fbf6deab383bd9a8152202b6779b/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84365fff0a99fbf6deab383bd9a8152202b6779b/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fissue-103157.stderr?ref=84365fff0a99fbf6deab383bd9a8152202b6779b", "patch": "@@ -0,0 +1,30 @@\n+error[E0277]: the trait bound `f64: Eq` is not satisfied\n+  --> $DIR/issue-103157.rs:6:11\n+   |\n+LL | #[derive(PartialEq, Eq)]\n+   |                     -- in this derive macro expansion\n+...\n+LL |     Float(Option<f64>),\n+   |           ^^^^^^^^^^^ the trait `Eq` is not implemented for `f64`\n+   |\n+   = help: the following other types implement trait `Eq`:\n+             i128\n+             i16\n+             i32\n+             i64\n+             i8\n+             isize\n+             u128\n+             u16\n+           and 4 others\n+   = note: required for `Option<f64>` to implement `Eq`\n+note: required by a bound in `AssertParamIsEq`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+   |\n+LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n+   |                               ^^ required by this bound in `AssertParamIsEq`\n+   = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "3ff044334f0567ce1481c78603aeee7211b91623", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=84365fff0a99fbf6deab383bd9a8152202b6779b", "patch": "@@ -1 +1 @@\n-Subproject commit b332991a57c9d055f1864de1eed93e2178d49440\n+Subproject commit 3ff044334f0567ce1481c78603aeee7211b91623"}]}