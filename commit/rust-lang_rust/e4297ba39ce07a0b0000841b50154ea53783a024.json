{"sha": "e4297ba39ce07a0b0000841b50154ea53783a024", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0Mjk3YmEzOWNlMDdhMGIwMDAwODQxYjUwMTU0ZWE1Mzc4M2EwMjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-18T16:17:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-18T16:17:23Z"}, "message": "Auto merge of #80156 - RalfJung:rollup-m3poz8z, r=RalfJung\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #80121 (Change the message for `if_let_guard` feature gate)\n - #80130 (docs: Edit rustc_span::symbol::Symbol method)\n - #80135 (Don't allow `const` to begin a nonterminal)\n - #80145 (Fix typo in rustc_typeck docs)\n - #80146 (Edit formatting in Rust Prelude docs)\n - #80147 (Add missing punctuation to std::alloc docs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f4dcb5224492beb60c03024ce6e1e95b2be5278e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4dcb5224492beb60c03024ce6e1e95b2be5278e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4297ba39ce07a0b0000841b50154ea53783a024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4297ba39ce07a0b0000841b50154ea53783a024", "html_url": "https://github.com/rust-lang/rust/commit/e4297ba39ce07a0b0000841b50154ea53783a024", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4297ba39ce07a0b0000841b50154ea53783a024/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6340607acaab10eed3cf11ef7ad3564db58ec981", "url": "https://api.github.com/repos/rust-lang/rust/commits/6340607acaab10eed3cf11ef7ad3564db58ec981", "html_url": "https://github.com/rust-lang/rust/commit/6340607acaab10eed3cf11ef7ad3564db58ec981"}, {"sha": "441a33e81bf0351c5f91fb06232514c077cccffc", "url": "https://api.github.com/repos/rust-lang/rust/commits/441a33e81bf0351c5f91fb06232514c077cccffc", "html_url": "https://github.com/rust-lang/rust/commit/441a33e81bf0351c5f91fb06232514c077cccffc"}], "stats": {"total": 63, "additions": 42, "deletions": 21}, "files": [{"sha": "bb222675239aa82c524bdcc8a3410f5287846645", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4297ba39ce07a0b0000841b50154ea53783a024/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4297ba39ce07a0b0000841b50154ea53783a024/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=e4297ba39ce07a0b0000841b50154ea53783a024", "patch": "@@ -620,7 +620,7 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n             }\n         };\n     }\n-    gate_all!(if_let_guard, \"`if let` guard is not implemented\");\n+    gate_all!(if_let_guard, \"`if let` guards are experimental\");\n     gate_all!(let_chains, \"`let` expressions in this position are experimental\");\n     gate_all!(async_closure, \"async closures are unstable\");\n     gate_all!(generators, \"yield syntax is experimental\");"}, {"sha": "76ad5acd5303eb4a8212fcf0ddaed5922e2e88d4", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4297ba39ce07a0b0000841b50154ea53783a024/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4297ba39ce07a0b0000841b50154ea53783a024/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=e4297ba39ce07a0b0000841b50154ea53783a024", "patch": "@@ -27,6 +27,8 @@ impl<'a> Parser<'a> {\n                 token.can_begin_expr()\n                 // This exception is here for backwards compatibility.\n                 && !token.is_keyword(kw::Let)\n+                // This exception is here for backwards compatibility.\n+                && !token.is_keyword(kw::Const)\n             }\n             NonterminalKind::Ty => token.can_begin_type(),\n             NonterminalKind::Ident => get_macro_ident(token).is_some(),"}, {"sha": "4d14763825caa5b58b1b3fcb823ee5b60d72e6d1", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4297ba39ce07a0b0000841b50154ea53783a024/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4297ba39ce07a0b0000841b50154ea53783a024/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=e4297ba39ce07a0b0000841b50154ea53783a024", "patch": "@@ -1632,7 +1632,7 @@ impl Symbol {\n         self == kw::True || self == kw::False\n     }\n \n-    /// This symbol can be a raw identifier.\n+    /// Returns `true` if this symbol can be a raw identifier.\n     pub fn can_be_raw(self) -> bool {\n         self != kw::Invalid && self != kw::Underscore && !self.is_path_segment_keyword()\n     }"}, {"sha": "8177b363a5a5bda8a5e6e3222184e52f995e229b", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4297ba39ce07a0b0000841b50154ea53783a024/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4297ba39ce07a0b0000841b50154ea53783a024/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=e4297ba39ce07a0b0000841b50154ea53783a024", "patch": "@@ -270,7 +270,7 @@ fn adt_destructor(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::Destructor> {\n \n /// If this `DefId` is a \"primary tables entry\", returns\n /// `Some((body_id, header, decl))` with information about\n-/// it's body-id, fn-header and fn-decl (if any). Otherwise,\n+/// its body-id, fn-header and fn-decl (if any). Otherwise,\n /// returns `None`.\n ///\n /// If this function returns `Some`, then `typeck_results(def_id)` will"}, {"sha": "8491ff400335c0efda2f4920e46d7839e322f944", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4297ba39ce07a0b0000841b50154ea53783a024/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4297ba39ce07a0b0000841b50154ea53783a024/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=e4297ba39ce07a0b0000841b50154ea53783a024", "patch": "@@ -1,4 +1,4 @@\n-//! Memory allocation APIs\n+//! Memory allocation APIs.\n //!\n //! In a given program, the standard library has one \u201cglobal\u201d memory allocator\n //! that is used for example by `Box<T>` and `Vec<T>`."}, {"sha": "a3776681d03494dc10698756b4ed1a6a276aa642", "filename": "library/std/src/prelude/mod.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e4297ba39ce07a0b0000841b50154ea53783a024/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4297ba39ce07a0b0000841b50154ea53783a024/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs?ref=e4297ba39ce07a0b0000841b50154ea53783a024", "patch": "@@ -26,38 +26,37 @@\n //! # Prelude contents\n //!\n //! The current version of the prelude (version 1) lives in\n-//! [`std::prelude::v1`], and re-exports the following.\n+//! [`std::prelude::v1`], and re-exports the following:\n //!\n-//! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`], [`Unpin`]}. The\n-//!   marker traits indicate fundamental properties of types.\n-//! * [`std::ops`]::{[`Drop`], [`Fn`], [`FnMut`], [`FnOnce`]}. Various\n+//! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`], [`Unpin`]},\n+//!   marker traits that indicate fundamental properties of types.\n+//! * [`std::ops`]::{[`Drop`], [`Fn`], [`FnMut`], [`FnOnce`]}, various\n //!   operations for both destructors and overloading `()`.\n //! * [`std::mem`]::[`drop`][`mem::drop`], a convenience function for explicitly\n //!   dropping a value.\n //! * [`std::boxed`]::[`Box`], a way to allocate values on the heap.\n-//! * [`std::borrow`]::[`ToOwned`], The conversion trait that defines\n+//! * [`std::borrow`]::[`ToOwned`], the conversion trait that defines\n //!   [`to_owned`], the generic method for creating an owned type from a\n //!   borrowed type.\n //! * [`std::clone`]::[`Clone`], the ubiquitous trait that defines\n //!   [`clone`][`Clone::clone`], the method for producing a copy of a value.\n-//! * [`std::cmp`]::{[`PartialEq`], [`PartialOrd`], [`Eq`], [`Ord`] }. The\n+//! * [`std::cmp`]::{[`PartialEq`], [`PartialOrd`], [`Eq`], [`Ord`] }, the\n //!   comparison traits, which implement the comparison operators and are often\n //!   seen in trait bounds.\n-//! * [`std::convert`]::{[`AsRef`], [`AsMut`], [`Into`], [`From`]}. Generic\n+//! * [`std::convert`]::{[`AsRef`], [`AsMut`], [`Into`], [`From`]}, generic\n //!   conversions, used by savvy API authors to create overloaded methods.\n //! * [`std::default`]::[`Default`], types that have default values.\n-//! * [`std::iter`]::{[`Iterator`], [`Extend`], [`IntoIterator`],\n-//!   [`DoubleEndedIterator`], [`ExactSizeIterator`]}. Iterators of various\n+//! * [`std::iter`]::{[`Iterator`], [`Extend`], [`IntoIterator`]\n+//!   [`DoubleEndedIterator`], [`ExactSizeIterator`]}, iterators of various\n //!   kinds.\n-//! * [`std::option`]::[`Option`]::{[`self`][`Option`], [`Some`], [`None`]}. A\n+//! * [`std::option`]::[`Option`]::{[`self`][`Option`], [`Some`], [`None`]}, a\n //!   type which expresses the presence or absence of a value. This type is so\n //!   commonly used, its variants are also exported.\n-//! * [`std::result`]::[`Result`]::{[`self`][`Result`], [`Ok`], [`Err`]}. A type\n+//! * [`std::result`]::[`Result`]::{[`self`][`Result`], [`Ok`], [`Err`]}, a type\n //!   for functions that may succeed or fail. Like [`Option`], its variants are\n //!   exported as well.\n //! * [`std::string`]::{[`String`], [`ToString`]}, heap allocated strings.\n-//! * [`std::vec`]::[`Vec`], a growable, heap-allocated\n-//!   vector.\n+//! * [`std::vec`]::[`Vec`], a growable, heap-allocated vector.\n //!\n //! [`mem::drop`]: crate::mem::drop\n //! [`std::borrow`]: crate::borrow"}, {"sha": "e7393166d8df3bdf32ed698c3e5ea3a752ce3c8a", "filename": "src/test/ui/inline-const/macro-with-const.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e4297ba39ce07a0b0000841b50154ea53783a024/src%2Ftest%2Fui%2Finline-const%2Fmacro-with-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4297ba39ce07a0b0000841b50154ea53783a024/src%2Ftest%2Fui%2Finline-const%2Fmacro-with-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fmacro-with-const.rs?ref=e4297ba39ce07a0b0000841b50154ea53783a024", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+\n+macro_rules! exp {\n+    (const $n:expr) => {\n+        $n\n+    };\n+}\n+\n+macro_rules! stmt {\n+    (exp $e:expr) => {\n+        $e\n+    };\n+    (exp $($t:tt)+) => {\n+        exp!($($t)+)\n+    };\n+}\n+\n+fn main() {\n+    stmt!(exp const 1);\n+}"}, {"sha": "4ba7e1eeefaa6bc00e4f59d119c00e5395bb7bed", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4297ba39ce07a0b0000841b50154ea53783a024/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4297ba39ce07a0b0000841b50154ea53783a024/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.rs?ref=e4297ba39ce07a0b0000841b50154ea53783a024", "patch": "@@ -5,7 +5,7 @@ use std::ops::Range;\n fn _if_let_guard() {\n     match () {\n         () if let 0 = 1 => {}\n-        //~^ ERROR `if let` guard is not implemented\n+        //~^ ERROR `if let` guards are experimental\n \n         () if (let 0 = 1) => {}\n         //~^ ERROR `let` expressions in this position are experimental\n@@ -74,7 +74,7 @@ fn _macros() {\n     match () {\n         #[cfg(FALSE)]\n         () if let 0 = 1 => {}\n-        //~^ ERROR `if let` guard is not implemented\n+        //~^ ERROR `if let` guards are experimental\n         _ => {}\n     }\n     use_expr!(let 0 = 1);"}, {"sha": "113870c19f5d5a95fbfd79961763eae6e4b0b61b", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4297ba39ce07a0b0000841b50154ea53783a024/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4297ba39ce07a0b0000841b50154ea53783a024/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr?ref=e4297ba39ce07a0b0000841b50154ea53783a024", "patch": "@@ -7,7 +7,7 @@ LL |     macro_rules! use_expr {\n LL |     use_expr!(let 0 = 1);\n    |               ^^^ no rules expected this token in macro call\n \n-error[E0658]: `if let` guard is not implemented\n+error[E0658]: `if let` guards are experimental\n   --> $DIR/feature-gate.rs:7:12\n    |\n LL |         () if let 0 = 1 => {}\n@@ -16,7 +16,7 @@ LL |         () if let 0 = 1 => {}\n    = note: see issue #51114 <https://github.com/rust-lang/rust/issues/51114> for more information\n    = help: add `#![feature(if_let_guard)]` to the crate attributes to enable\n \n-error[E0658]: `if let` guard is not implemented\n+error[E0658]: `if let` guards are experimental\n   --> $DIR/feature-gate.rs:76:12\n    |\n LL |         () if let 0 = 1 => {}"}]}