{"sha": "1993a5f7a866f174aa50329a03b2f8b2f589221c", "node_id": "C_kwDOAAsO6NoAKDE5OTNhNWY3YTg2NmYxNzRhYTUwMzI5YTAzYjJmOGIyZjU4OTIyMWM", "commit": {"author": {"name": "benluelo", "email": "benluelo@hotmail.com", "date": "2022-07-19T07:16:07Z"}, "committer": {"name": "benluelo", "email": "benluelo@hotmail.com", "date": "2022-07-20T20:32:09Z"}, "message": "Add map_continue and continue_value combinators to ControlFlow\n\nFix type error\n\nFix continue_value doc comment", "tree": {"sha": "4e8e930bc71aa18f64c5ba8b3ffe88f8a181ae4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e8e930bc71aa18f64c5ba8b3ffe88f8a181ae4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1993a5f7a866f174aa50329a03b2f8b2f589221c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEQTeSkvrW2h/u6uNEFEhdBkj/VRYFAmLYZlMACgkQFEhdBkj/\nVRbwdRAAm9c3+f1TPIPDe5P7LZeDhXcj9E+XLEQWZ+Wpnni10oCJjE0KqQSIQwal\nXQ6ynzFKl+A3tNyGJ7MFeZc9kLo0vvduuol7Rjr6qoOP59u54osGVvABYpgmmRzE\nuEPx9gIcac7NFLGrbc0nCfJIxhQajRhBc4ybhkea0zn9vaOEW+EcHJ5TylqKAo/w\nWxVa5BciUOi/16NjSEsrBYqEVOLA7sRfSOs7zIqf2+jXApYkVir98QYMp4HZ6t09\nleO051oyjkRZa/SxerWgm6X2t4mVhKQEsfxKZ0Qiy6YszpERr/E6pcWaIsVxH3yb\ngV6KwvHe7hUqzCMksCFgT8uUF1Op6NxEmYlqzemqtB+F2j4GmWqrCViiLWw38NV6\nGJ+myRoQt/KcHXtAIpBhbsXzXC0fvS0ktmP4RvJcr8X4DpJlLCeLq9QtEtL/BS+r\nnbzB24gIoSQBhjc5jZj2lnogHH1cjJwj5zRCoDVQMniSfWIwjIluJdDwVqfIBsOu\ndp1LEbZHZqYPo5FotiJlgR+HzGMHyLgWIXHT0AynB0LYJsAcXKojvkI763w4Bvzm\nNnqvfRo7dGB+W+xbUgcCE4+eUhXhZiGOHPHAEKrHUXlsN5ShLK90M6DaiZFeH2j0\nZFeUHZWKoYosAKXWxpwx85XXVL/JHwSf8JDf4Mx13A2lPk5uYuM=\n=ZkeW\n-----END PGP SIGNATURE-----", "payload": "tree 4e8e930bc71aa18f64c5ba8b3ffe88f8a181ae4d\nparent 96c2df810b0b681fee63cae11ca63844792b6190\nauthor benluelo <benluelo@hotmail.com> 1658214967 -0400\ncommitter benluelo <benluelo@hotmail.com> 1658349129 -0400\n\nAdd map_continue and continue_value combinators to ControlFlow\n\nFix type error\n\nFix continue_value doc comment\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1993a5f7a866f174aa50329a03b2f8b2f589221c", "html_url": "https://github.com/rust-lang/rust/commit/1993a5f7a866f174aa50329a03b2f8b2f589221c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1993a5f7a866f174aa50329a03b2f8b2f589221c/comments", "author": {"login": "benluelo", "id": 57334811, "node_id": "MDQ6VXNlcjU3MzM0ODEx", "avatar_url": "https://avatars.githubusercontent.com/u/57334811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benluelo", "html_url": "https://github.com/benluelo", "followers_url": "https://api.github.com/users/benluelo/followers", "following_url": "https://api.github.com/users/benluelo/following{/other_user}", "gists_url": "https://api.github.com/users/benluelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/benluelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benluelo/subscriptions", "organizations_url": "https://api.github.com/users/benluelo/orgs", "repos_url": "https://api.github.com/users/benluelo/repos", "events_url": "https://api.github.com/users/benluelo/events{/privacy}", "received_events_url": "https://api.github.com/users/benluelo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "benluelo", "id": 57334811, "node_id": "MDQ6VXNlcjU3MzM0ODEx", "avatar_url": "https://avatars.githubusercontent.com/u/57334811?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benluelo", "html_url": "https://github.com/benluelo", "followers_url": "https://api.github.com/users/benluelo/followers", "following_url": "https://api.github.com/users/benluelo/following{/other_user}", "gists_url": "https://api.github.com/users/benluelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/benluelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benluelo/subscriptions", "organizations_url": "https://api.github.com/users/benluelo/orgs", "repos_url": "https://api.github.com/users/benluelo/repos", "events_url": "https://api.github.com/users/benluelo/events{/privacy}", "received_events_url": "https://api.github.com/users/benluelo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96c2df810b0b681fee63cae11ca63844792b6190", "url": "https://api.github.com/repos/rust-lang/rust/commits/96c2df810b0b681fee63cae11ca63844792b6190", "html_url": "https://github.com/rust-lang/rust/commit/96c2df810b0b681fee63cae11ca63844792b6190"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "b1f5559dcfc17e63161cacaa7b42c7426730536b", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1993a5f7a866f174aa50329a03b2f8b2f589221c/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1993a5f7a866f174aa50329a03b2f8b2f589221c/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=1993a5f7a866f174aa50329a03b2f8b2f589221c", "patch": "@@ -195,6 +195,41 @@ impl<B, C> ControlFlow<B, C> {\n             ControlFlow::Break(x) => ControlFlow::Break(f(x)),\n         }\n     }\n+\n+    /// Converts the `ControlFlow` into an `Option` which is `Some` if the\n+    /// `ControlFlow` was `Continue` and `None` otherwise.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(control_flow_enum)]\n+    /// use std::ops::ControlFlow;\n+    ///\n+    /// assert_eq!(ControlFlow::<i32, String>::Break(3).continue_value(), None);\n+    /// assert_eq!(ControlFlow::<String, i32>::Continue(3).continue_value(), Some(3));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n+    pub fn continue_value(self) -> Option<C> {\n+        match self {\n+            ControlFlow::Continue(x) => Some(x),\n+            ControlFlow::Break(..) => None,\n+        }\n+    }\n+\n+    /// Maps `ControlFlow<B, C>` to `ControlFlow<B, T>` by applying a function\n+    /// to the continue value in case it exists.\n+    #[inline]\n+    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n+    pub fn map_continue<T, F>(self, f: F) -> ControlFlow<B, T>\n+    where\n+        F: FnOnce(C) -> T,\n+    {\n+        match self {\n+            ControlFlow::Continue(x) => ControlFlow::Continue(f(x)),\n+            ControlFlow::Break(x) => ControlFlow::Break(x),\n+        }\n+    }\n }\n \n /// These are used only as part of implementing the iterator adapters."}]}