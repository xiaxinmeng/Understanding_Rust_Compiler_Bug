{"sha": "ce45663e14dac3f0f58be698cc530bc2e6e21682", "node_id": "C_kwDOAAsO6NoAKGNlNDU2NjNlMTRkYWMzZjBmNThiZTY5OGNjNTMwYmMyZTZlMjE2ODI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-22T06:43:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-22T06:43:33Z"}, "message": "Auto merge of #88865 - guswynn:must_not_suspend, r=oli-obk\n\nImplement `#[must_not_suspend]`\n\nimplements #83310\n\nSome notes on the impl:\n\n1. The code that searches for the attribute on the ADT is basically copied from the `must_use` lint. It's not shared, as the logic did diverge\n2. The RFC does specify that the attribute can be placed on fn's (and fn-like objects), like `must_use`. I think this is a direct copy from the `must_use` reference definition. This implementation does NOT support this, as I felt that ADT's (+ `impl Trait` + `dyn Trait`) cover the usecase's people actually want on the RFC, and adding an imp for the fn call case would be significantly harder. The `must_use` impl can do a single check at fn call stmt time, but `must_not_suspend` would need to answer the question: \"for some value X with type T, find any fn call that COULD have produced this value\". That would require significant changes to `generator_interior.rs`, and I would need mentorship on that. `@eholk` and I are discussing it.\n3. `@estebank` do you know a way I can make the user-provided `reason` note pop out? right now it seems quite hidden\n\nAlso, I am not sure if we should run perf on this\n\nr? `@nikomatsakis`", "tree": {"sha": "df12c759560d579029acad20d2df9bbf94178ede", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df12c759560d579029acad20d2df9bbf94178ede"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce45663e14dac3f0f58be698cc530bc2e6e21682", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce45663e14dac3f0f58be698cc530bc2e6e21682", "html_url": "https://github.com/rust-lang/rust/commit/ce45663e14dac3f0f58be698cc530bc2e6e21682", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce45663e14dac3f0f58be698cc530bc2e6e21682/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77f4143fa26a1434088f532d2ba7ec51e0a392fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/77f4143fa26a1434088f532d2ba7ec51e0a392fd", "html_url": "https://github.com/rust-lang/rust/commit/77f4143fa26a1434088f532d2ba7ec51e0a392fd"}, {"sha": "08e026675ee38bb4ca81106e766a6456c8b7382e", "url": "https://api.github.com/repos/rust-lang/rust/commits/08e026675ee38bb4ca81106e766a6456c8b7382e", "html_url": "https://github.com/rust-lang/rust/commit/08e026675ee38bb4ca81106e766a6456c8b7382e"}], "stats": {"total": 706, "additions": 701, "deletions": 5}, "files": [{"sha": "2baf70197dc1ae0a2308a112b78bbd7f8b4a0485", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -675,6 +675,10 @@ declare_features! (\n     /// Allows `let...else` statements.\n     (active, let_else, \"1.56.0\", Some(87335), None),\n \n+    /// Allows the `#[must_not_suspend]` attribute.\n+    (active, must_not_suspend, \"1.57.0\", Some(83310), None),\n+\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "f3eaf2645f50acd7db135ac70f767ff90b3d155f", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -202,6 +202,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ungated!(forbid, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n     ungated!(deny, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n     ungated!(must_use, Normal, template!(Word, NameValueStr: \"reason\")),\n+    gated!(\n+        must_not_suspend, Normal, template!(Word, NameValueStr: \"reason\"), must_not_suspend,\n+        experimental!(must_not_suspend)\n+    ),\n     // FIXME(#14407)\n     ungated!(\n         deprecated, Normal,"}, {"sha": "10285272130cc2626ae7a53537a6a1d9858b9083", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -298,6 +298,7 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n         UNUSED_LABELS,\n         UNUSED_PARENS,\n         UNUSED_BRACES,\n+        MUST_NOT_SUSPEND,\n         REDUNDANT_SEMICOLONS\n     );\n "}, {"sha": "5830ce26fea3ff224d65dae692ed2c2febdff0e6", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -314,6 +314,44 @@ declare_lint! {\n     \"imports that are never used\"\n }\n \n+declare_lint! {\n+    /// The `must_not_suspend` lint guards against values that shouldn't be held across suspend points\n+    /// (`.await`)\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// #![feature(must_not_suspend)]\n+    ///\n+    /// #[must_not_suspend]\n+    /// struct SyncThing {}\n+    ///\n+    /// async fn yield_now() {}\n+    ///\n+    /// pub async fn uhoh() {\n+    ///     let guard = SyncThing {};\n+    ///     yield_now().await;\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// The `must_not_suspend` lint detects values that are marked with the `#[must_not_suspend]`\n+    /// attribute being held across suspend points. A \"suspend\" point is usually a `.await` in an async\n+    /// function.\n+    ///\n+    /// This attribute can be used to mark values that are semantically incorrect across suspends\n+    /// (like certain types of timers), values that have async alternatives, and values that\n+    /// regularly cause problems with the `Send`-ness of async fn's returned futures (like\n+    /// `MutexGuard`'s)\n+    ///\n+    pub MUST_NOT_SUSPEND,\n+    Warn,\n+    \"use of a `#[must_not_suspend]` value across a yield point\",\n+}\n+\n declare_lint! {\n     /// The `unused_extern_crates` lint guards against `extern crate` items\n     /// that are never used.\n@@ -2993,6 +3031,7 @@ declare_lint_pass! {\n         CENUM_IMPL_DROP_CAST,\n         CONST_EVALUATABLE_UNCHECKED,\n         INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n+        MUST_NOT_SUSPEND,\n         UNINHABITED_STATIC,\n         FUNCTION_ITEM_REFERENCES,\n         USELESS_DEPRECATED,"}, {"sha": "3e59fc4f551594ec22b7725e5efc9b6c628b8ae1", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -104,6 +104,7 @@ impl CheckAttrVisitor<'tcx> {\n                 sym::default_method_body_is_const => {\n                     self.check_default_method_body_is_const(attr, span, target)\n                 }\n+                sym::must_not_suspend => self.check_must_not_suspend(&attr, span, target),\n                 sym::rustc_const_unstable\n                 | sym::rustc_const_stable\n                 | sym::unstable\n@@ -1014,6 +1015,21 @@ impl CheckAttrVisitor<'tcx> {\n         is_valid\n     }\n \n+    /// Checks if `#[must_not_suspend]` is applied to a function. Returns `true` if valid.\n+    fn check_must_not_suspend(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+        match target {\n+            Target::Struct | Target::Enum | Target::Union | Target::Trait => true,\n+            _ => {\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(attr.span, \"`must_not_suspend` attribute should be applied to a struct, enum, or trait\")\n+                        .span_label(*span, \"is not a struct, enum, or trait\")\n+                        .emit();\n+                false\n+            }\n+        }\n+    }\n+\n     /// Checks if `#[cold]` is applied to a non-function. Returns `true` if valid.\n     fn check_cold(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n         match target {"}, {"sha": "7c2a09e0a32e0d2c0e4cf0a9a3a6c2e6487a6a1e", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -837,6 +837,7 @@ symbols! {\n         mul,\n         mul_assign,\n         mul_with_overflow,\n+        must_not_suspend,\n         must_use,\n         mut_ptr,\n         mut_slice_ptr,"}, {"sha": "2910ce6de689965c4adcde2668aedab785443790", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 219, "deletions": 5, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -5,16 +5,19 @@\n \n use super::FnCtxt;\n use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n+use rustc_errors::pluralize;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::HirIdSet;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{Arm, Expr, ExprKind, Guard, HirId, Pat, PatKind};\n use rustc_middle::middle::region::{self, YieldData};\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_span::symbol::sym;\n use rustc_span::Span;\n use smallvec::SmallVec;\n+use tracing::debug;\n \n struct InteriorVisitor<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n@@ -30,12 +33,14 @@ struct InteriorVisitor<'a, 'tcx> {\n     /// that they may succeed the said yield point in the post-order.\n     guard_bindings: SmallVec<[SmallVec<[HirId; 4]>; 1]>,\n     guard_bindings_set: HirIdSet,\n+    linted_values: HirIdSet,\n }\n \n impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n     fn record(\n         &mut self,\n         ty: Ty<'tcx>,\n+        hir_id: HirId,\n         scope: Option<region::Scope>,\n         expr: Option<&'tcx Expr<'tcx>>,\n         source_span: Span,\n@@ -117,6 +122,23 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n             } else {\n                 // Insert the type into the ordered set.\n                 let scope_span = scope.map(|s| s.span(self.fcx.tcx, self.region_scope_tree));\n+\n+                if !self.linted_values.contains(&hir_id) {\n+                    check_must_not_suspend_ty(\n+                        self.fcx,\n+                        ty,\n+                        hir_id,\n+                        SuspendCheckData {\n+                            expr,\n+                            source_span,\n+                            yield_span: yield_data.span,\n+                            plural_len: 1,\n+                            ..Default::default()\n+                        },\n+                    );\n+                    self.linted_values.insert(hir_id);\n+                }\n+\n                 self.types.insert(ty::GeneratorInteriorTypeCause {\n                     span: source_span,\n                     ty: &ty,\n@@ -163,6 +185,7 @@ pub fn resolve_interior<'a, 'tcx>(\n         prev_unresolved_span: None,\n         guard_bindings: <_>::default(),\n         guard_bindings_set: <_>::default(),\n+        linted_values: <_>::default(),\n     };\n     intravisit::walk_body(&mut visitor, body);\n \n@@ -290,7 +313,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n         if let PatKind::Binding(..) = pat.kind {\n             let scope = self.region_scope_tree.var_scope(pat.hir_id.local_id);\n             let ty = self.fcx.typeck_results.borrow().pat_ty(pat);\n-            self.record(ty, Some(scope), None, pat.span, false);\n+            self.record(ty, pat.hir_id, Some(scope), None, pat.span, false);\n         }\n     }\n \n@@ -342,7 +365,14 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n         // If there are adjustments, then record the final type --\n         // this is the actual value that is being produced.\n         if let Some(adjusted_ty) = self.fcx.typeck_results.borrow().expr_ty_adjusted_opt(expr) {\n-            self.record(adjusted_ty, scope, Some(expr), expr.span, guard_borrowing_from_pattern);\n+            self.record(\n+                adjusted_ty,\n+                expr.hir_id,\n+                scope,\n+                Some(expr),\n+                expr.span,\n+                guard_borrowing_from_pattern,\n+            );\n         }\n \n         // Also record the unadjusted type (which is the only type if\n@@ -380,9 +410,23 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n                     tcx.mk_region(ty::RegionKind::ReErased),\n                     ty::TypeAndMut { ty, mutbl: hir::Mutability::Not },\n                 );\n-                self.record(ref_ty, scope, Some(expr), expr.span, guard_borrowing_from_pattern);\n+                self.record(\n+                    ref_ty,\n+                    expr.hir_id,\n+                    scope,\n+                    Some(expr),\n+                    expr.span,\n+                    guard_borrowing_from_pattern,\n+                );\n             }\n-            self.record(ty, scope, Some(expr), expr.span, guard_borrowing_from_pattern);\n+            self.record(\n+                ty,\n+                expr.hir_id,\n+                scope,\n+                Some(expr),\n+                expr.span,\n+                guard_borrowing_from_pattern,\n+            );\n         } else {\n             self.fcx.tcx.sess.delay_span_bug(expr.span, \"no type for node\");\n         }\n@@ -409,3 +453,173 @@ impl<'a, 'tcx> Visitor<'tcx> for ArmPatCollector<'a> {\n         }\n     }\n }\n+\n+#[derive(Default)]\n+pub struct SuspendCheckData<'a, 'tcx> {\n+    expr: Option<&'tcx Expr<'tcx>>,\n+    source_span: Span,\n+    yield_span: Span,\n+    descr_pre: &'a str,\n+    descr_post: &'a str,\n+    plural_len: usize,\n+}\n+\n+// Returns whether it emitted a diagnostic or not\n+// Note that this fn and the proceding one are based on the code\n+// for creating must_use diagnostics\n+//\n+// Note that this technique was chosen over things like a `Suspend` marker trait\n+// as it is simpler and has precendent in the compiler\n+pub fn check_must_not_suspend_ty<'tcx>(\n+    fcx: &FnCtxt<'_, 'tcx>,\n+    ty: Ty<'tcx>,\n+    hir_id: HirId,\n+    data: SuspendCheckData<'_, 'tcx>,\n+) -> bool {\n+    if ty.is_unit()\n+    // FIXME: should this check `is_ty_uninhabited_from`. This query is not available in this stage\n+    // of typeck (before ReVar and RePlaceholder are removed), but may remove noise, like in\n+    // `must_use`\n+    // || fcx.tcx.is_ty_uninhabited_from(fcx.tcx.parent_module(hir_id).to_def_id(), ty, fcx.param_env)\n+    {\n+        return false;\n+    }\n+\n+    let plural_suffix = pluralize!(data.plural_len);\n+\n+    match *ty.kind() {\n+        ty::Adt(..) if ty.is_box() => {\n+            let boxed_ty = ty.boxed_ty();\n+            let descr_pre = &format!(\"{}boxed \", data.descr_pre);\n+            check_must_not_suspend_ty(fcx, boxed_ty, hir_id, SuspendCheckData { descr_pre, ..data })\n+        }\n+        ty::Adt(def, _) => check_must_not_suspend_def(fcx.tcx, def.did, hir_id, data),\n+        // FIXME: support adding the attribute to TAITs\n+        ty::Opaque(def, _) => {\n+            let mut has_emitted = false;\n+            for &(predicate, _) in fcx.tcx.explicit_item_bounds(def) {\n+                // We only look at the `DefId`, so it is safe to skip the binder here.\n+                if let ty::PredicateKind::Trait(ref poly_trait_predicate) =\n+                    predicate.kind().skip_binder()\n+                {\n+                    let def_id = poly_trait_predicate.trait_ref.def_id;\n+                    let descr_pre = &format!(\"{}implementer{} of \", data.descr_pre, plural_suffix);\n+                    if check_must_not_suspend_def(\n+                        fcx.tcx,\n+                        def_id,\n+                        hir_id,\n+                        SuspendCheckData { descr_pre, ..data },\n+                    ) {\n+                        has_emitted = true;\n+                        break;\n+                    }\n+                }\n+            }\n+            has_emitted\n+        }\n+        ty::Dynamic(binder, _) => {\n+            let mut has_emitted = false;\n+            for predicate in binder.iter() {\n+                if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate.skip_binder() {\n+                    let def_id = trait_ref.def_id;\n+                    let descr_post = &format!(\" trait object{}{}\", plural_suffix, data.descr_post);\n+                    if check_must_not_suspend_def(\n+                        fcx.tcx,\n+                        def_id,\n+                        hir_id,\n+                        SuspendCheckData { descr_post, ..data },\n+                    ) {\n+                        has_emitted = true;\n+                        break;\n+                    }\n+                }\n+            }\n+            has_emitted\n+        }\n+        ty::Tuple(ref tys) => {\n+            let mut has_emitted = false;\n+            let spans = if let Some(hir::ExprKind::Tup(comps)) = data.expr.map(|e| &e.kind) {\n+                debug_assert_eq!(comps.len(), tys.len());\n+                comps.iter().map(|e| e.span).collect()\n+            } else {\n+                vec![]\n+            };\n+            for (i, ty) in tys.iter().map(|k| k.expect_ty()).enumerate() {\n+                let descr_post = &format!(\" in tuple element {}\", i);\n+                let span = *spans.get(i).unwrap_or(&data.source_span);\n+                if check_must_not_suspend_ty(\n+                    fcx,\n+                    ty,\n+                    hir_id,\n+                    SuspendCheckData { descr_post, source_span: span, ..data },\n+                ) {\n+                    has_emitted = true;\n+                }\n+            }\n+            has_emitted\n+        }\n+        ty::Array(ty, len) => {\n+            let descr_pre = &format!(\"{}array{} of \", data.descr_pre, plural_suffix);\n+            check_must_not_suspend_ty(\n+                fcx,\n+                ty,\n+                hir_id,\n+                SuspendCheckData {\n+                    descr_pre,\n+                    plural_len: len.try_eval_usize(fcx.tcx, fcx.param_env).unwrap_or(0) as usize\n+                        + 1,\n+                    ..data\n+                },\n+            )\n+        }\n+        _ => false,\n+    }\n+}\n+\n+fn check_must_not_suspend_def(\n+    tcx: TyCtxt<'_>,\n+    def_id: DefId,\n+    hir_id: HirId,\n+    data: SuspendCheckData<'_, '_>,\n+) -> bool {\n+    for attr in tcx.get_attrs(def_id).iter() {\n+        if attr.has_name(sym::must_not_suspend) {\n+            tcx.struct_span_lint_hir(\n+                rustc_session::lint::builtin::MUST_NOT_SUSPEND,\n+                hir_id,\n+                data.source_span,\n+                |lint| {\n+                    let msg = format!(\n+                        \"{}`{}`{} held across a suspend point, but should not be\",\n+                        data.descr_pre,\n+                        tcx.def_path_str(def_id),\n+                        data.descr_post,\n+                    );\n+                    let mut err = lint.build(&msg);\n+\n+                    // add span pointing to the offending yield/await\n+                    err.span_label(data.yield_span, \"the value is held across this suspend point\");\n+\n+                    // Add optional reason note\n+                    if let Some(note) = attr.value_str() {\n+                        // FIXME(guswynn): consider formatting this better\n+                        err.span_note(data.source_span, &note.as_str());\n+                    }\n+\n+                    // Add some quick suggestions on what to do\n+                    // FIXME: can `drop` work as a suggestion here as well?\n+                    err.span_help(\n+                        data.source_span,\n+                        \"consider using a block (`{ ... }`) \\\n+                        to shrink the value's scope, ending before the suspend point\",\n+                    );\n+\n+                    err.emit();\n+                },\n+            );\n+\n+            return true;\n+        }\n+    }\n+    false\n+}"}, {"sha": "1f823fc559d40b4fd99f2c854805391f296b00f9", "filename": "src/test/ui/lint/must_not_suspend/boxed.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.rs?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -0,0 +1,25 @@\n+// edition:2018\n+#![feature(must_not_suspend)]\n+#![deny(must_not_suspend)]\n+\n+#[must_not_suspend = \"You gotta use Umm's, ya know?\"]\n+struct Umm {\n+    i: i64\n+}\n+\n+\n+fn bar() -> Box<Umm> {\n+    Box::new(Umm {\n+        i: 1\n+    })\n+}\n+\n+async fn other() {}\n+\n+pub async fn uhoh() {\n+    let _guard = bar(); //~ ERROR boxed `Umm` held across\n+    other().await;\n+}\n+\n+fn main() {\n+}"}, {"sha": "edc62b6d687ad32fb12135cc0b176d688daadea0", "filename": "src/test/ui/lint/must_not_suspend/boxed.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -0,0 +1,26 @@\n+error: boxed `Umm` held across a suspend point, but should not be\n+  --> $DIR/boxed.rs:20:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |     ------------- the value is held across this suspend point\n+   |\n+note: the lint level is defined here\n+  --> $DIR/boxed.rs:3:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+note: You gotta use Umm's, ya know?\n+  --> $DIR/boxed.rs:20:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/boxed.rs:20:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "040fff5a5a5a8d8219ee1aa4e11a91946d68aae3", "filename": "src/test/ui/lint/must_not_suspend/dedup.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.rs?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -0,0 +1,20 @@\n+// edition:2018\n+#![feature(must_not_suspend)]\n+#![deny(must_not_suspend)]\n+\n+#[must_not_suspend]\n+struct No {}\n+\n+async fn shushspend() {}\n+\n+async fn wheeee<T>(t: T) {\n+    shushspend().await;\n+    drop(t);\n+}\n+\n+async fn yes() {\n+    wheeee(No {}).await; //~ ERROR `No` held across\n+}\n+\n+fn main() {\n+}"}, {"sha": "542b7a3bc7e98c3e02657d979c588d8abc9ab100", "filename": "src/test/ui/lint/must_not_suspend/dedup.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fdedup.stderr?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -0,0 +1,19 @@\n+error: `No` held across a suspend point, but should not be\n+  --> $DIR/dedup.rs:16:12\n+   |\n+LL |     wheeee(No {}).await;\n+   |     -------^^^^^------- the value is held across this suspend point\n+   |\n+note: the lint level is defined here\n+  --> $DIR/dedup.rs:3:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/dedup.rs:16:12\n+   |\n+LL |     wheeee(No {}).await;\n+   |            ^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "1554408c174ce92350685bab1f0c54ccfaa4c6fd", "filename": "src/test/ui/lint/must_not_suspend/feature-gate-must_not_suspend.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ffeature-gate-must_not_suspend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ffeature-gate-must_not_suspend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ffeature-gate-must_not_suspend.rs?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -0,0 +1,9 @@\n+// edition:2018\n+\n+#[must_not_suspend = \"You gotta use Umm's, ya know?\"] //~ ERROR the `#[must_not_suspend]`\n+struct Umm {\n+    _i: i64\n+}\n+\n+fn main() {\n+}"}, {"sha": "ab20a8be8747dc438702c10a52d45bb06f7d8ad8", "filename": "src/test/ui/lint/must_not_suspend/feature-gate-must_not_suspend.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ffeature-gate-must_not_suspend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ffeature-gate-must_not_suspend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ffeature-gate-must_not_suspend.stderr?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[must_not_suspend]` attribute is an experimental feature\n+  --> $DIR/feature-gate-must_not_suspend.rs:3:1\n+   |\n+LL | #[must_not_suspend = \"You gotta use Umm's, ya know?\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #83310 <https://github.com/rust-lang/rust/issues/83310> for more information\n+   = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "b3effa020c48fa9b2e1ee1cc98a06869199d5773", "filename": "src/test/ui/lint/must_not_suspend/generic.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fgeneric.rs?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -0,0 +1,20 @@\n+// edition:2018\n+// run-pass\n+//\n+// this test shows a case where the lint doesn't fire in generic code\n+#![feature(must_not_suspend)]\n+#![deny(must_not_suspend)]\n+\n+#[must_not_suspend]\n+struct No {}\n+\n+async fn shushspend() {}\n+\n+async fn wheeee<T>(t: T) {\n+    shushspend().await;\n+    drop(t);\n+}\n+\n+fn main() {\n+    let _fut = wheeee(No {});\n+}"}, {"sha": "8714be6449f92019f9e5bebed4a342bbd9ad3832", "filename": "src/test/ui/lint/must_not_suspend/handled.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fhandled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fhandled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fhandled.rs?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -0,0 +1,28 @@\n+// edition:2018\n+// run-pass\n+#![feature(must_not_suspend)]\n+#![deny(must_not_suspend)]\n+\n+#[must_not_suspend = \"You gotta use Umm's, ya know?\"]\n+struct Umm {\n+    _i: i64\n+}\n+\n+\n+fn bar() -> Umm {\n+    Umm {\n+        _i: 1\n+    }\n+}\n+\n+async fn other() {}\n+\n+pub async fn uhoh() {\n+    {\n+        let _guard = bar();\n+    }\n+    other().await;\n+}\n+\n+fn main() {\n+}"}, {"sha": "5aa1abb14d3fa1e35b89b5d38aa541f01f77ea34", "filename": "src/test/ui/lint/must_not_suspend/other_items.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fother_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fother_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fother_items.rs?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -0,0 +1,8 @@\n+// edition:2018\n+#![feature(must_not_suspend)]\n+#![deny(must_not_suspend)]\n+\n+#[must_not_suspend] //~ ERROR attribute should be\n+mod inner {}\n+\n+fn main() {}"}, {"sha": "41c8896921b0f35bf34e1cacdf6d3633500a6503", "filename": "src/test/ui/lint/must_not_suspend/other_items.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fother_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fother_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fother_items.stderr?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -0,0 +1,10 @@\n+error: `must_not_suspend` attribute should be applied to a struct, enum, or trait\n+  --> $DIR/other_items.rs:5:1\n+   |\n+LL | #[must_not_suspend]\n+   | ^^^^^^^^^^^^^^^^^^^\n+LL | mod inner {}\n+   | ------------ is not a struct, enum, or trait\n+\n+error: aborting due to previous error\n+"}, {"sha": "738dd9e04655ced2a1a106d30ebaadb9c9f80d15", "filename": "src/test/ui/lint/must_not_suspend/ref.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.rs?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -0,0 +1,29 @@\n+// edition:2018\n+#![feature(must_not_suspend)]\n+#![deny(must_not_suspend)]\n+\n+#[must_not_suspend = \"You gotta use Umm's, ya know?\"]\n+struct Umm {\n+    i: i64\n+}\n+\n+struct Bar {\n+    u: Umm,\n+}\n+\n+async fn other() {}\n+\n+impl Bar {\n+    async fn uhoh(&mut self) {\n+        let guard = &mut self.u; //~ ERROR `Umm` held across\n+\n+        other().await;\n+\n+        *guard = Umm {\n+            i: 2\n+        }\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "78b44b00625d1cdf2809fc0628e3b78eb4e40cde", "filename": "src/test/ui/lint/must_not_suspend/ref.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -0,0 +1,27 @@\n+error: `Umm` held across a suspend point, but should not be\n+  --> $DIR/ref.rs:18:26\n+   |\n+LL |         let guard = &mut self.u;\n+   |                          ^^^^^^\n+LL | \n+LL |         other().await;\n+   |         ------------- the value is held across this suspend point\n+   |\n+note: the lint level is defined here\n+  --> $DIR/ref.rs:3:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+note: You gotta use Umm's, ya know?\n+  --> $DIR/ref.rs:18:26\n+   |\n+LL |         let guard = &mut self.u;\n+   |                          ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/ref.rs:18:26\n+   |\n+LL |         let guard = &mut self.u;\n+   |                          ^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "5b1fa5e272118470b48831153aa6ce091b1a37e0", "filename": "src/test/ui/lint/must_not_suspend/return.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Freturn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Freturn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Freturn.rs?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -0,0 +1,9 @@\n+// edition:2018\n+#![feature(must_not_suspend)]\n+#![deny(must_not_suspend)]\n+\n+#[must_not_suspend] //~ ERROR attribute should be\n+fn foo() -> i32 {\n+    0\n+}\n+fn main() {}"}, {"sha": "fdada85eb4d1caf761044bc01ee7872a4cc07034", "filename": "src/test/ui/lint/must_not_suspend/return.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Freturn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Freturn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Freturn.stderr?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -0,0 +1,12 @@\n+error: `must_not_suspend` attribute should be applied to a struct, enum, or trait\n+  --> $DIR/return.rs:5:1\n+   |\n+LL |   #[must_not_suspend]\n+   |   ^^^^^^^^^^^^^^^^^^^\n+LL | / fn foo() -> i32 {\n+LL | |     0\n+LL | | }\n+   | |_- is not a struct, enum, or trait\n+\n+error: aborting due to previous error\n+"}, {"sha": "6c911cb4b0f09d03cd7cfef2d38558519affb7fd", "filename": "src/test/ui/lint/must_not_suspend/trait.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.rs?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -0,0 +1,28 @@\n+// edition:2018\n+#![feature(must_not_suspend)]\n+#![deny(must_not_suspend)]\n+\n+#[must_not_suspend]\n+trait Wow {}\n+\n+impl Wow for i32 {}\n+\n+fn r#impl() -> impl Wow {\n+    1\n+}\n+\n+fn r#dyn() -> Box<dyn Wow> {\n+    Box::new(1)\n+}\n+\n+async fn other() {}\n+\n+pub async fn uhoh() {\n+    let _guard1 = r#impl(); //~ ERROR implementer of `Wow` held across\n+    let _guard2 = r#dyn(); //~ ERROR boxed `Wow` trait object held across\n+\n+    other().await;\n+}\n+\n+fn main() {\n+}"}, {"sha": "d19ffddd482e0ab851b0bfc37b84d9831653556b", "filename": "src/test/ui/lint/must_not_suspend/trait.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -0,0 +1,37 @@\n+error: implementer of `Wow` held across a suspend point, but should not be\n+  --> $DIR/trait.rs:21:9\n+   |\n+LL |     let _guard1 = r#impl();\n+   |         ^^^^^^^\n+...\n+LL |     other().await;\n+   |     ------------- the value is held across this suspend point\n+   |\n+note: the lint level is defined here\n+  --> $DIR/trait.rs:3:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/trait.rs:21:9\n+   |\n+LL |     let _guard1 = r#impl();\n+   |         ^^^^^^^\n+\n+error: boxed `Wow` trait object held across a suspend point, but should not be\n+  --> $DIR/trait.rs:22:9\n+   |\n+LL |     let _guard2 = r#dyn();\n+   |         ^^^^^^^\n+LL | \n+LL |     other().await;\n+   |     ------------- the value is held across this suspend point\n+   |\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/trait.rs:22:9\n+   |\n+LL |     let _guard2 = r#dyn();\n+   |         ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d3a19f704324ddefa3d910a5d788d5bbb53233fa", "filename": "src/test/ui/lint/must_not_suspend/unit.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.rs?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -0,0 +1,25 @@\n+// edition:2018\n+#![feature(must_not_suspend)]\n+#![deny(must_not_suspend)]\n+\n+#[must_not_suspend = \"You gotta use Umm's, ya know?\"]\n+struct Umm {\n+    i: i64\n+}\n+\n+\n+fn bar() -> Umm {\n+    Umm {\n+        i: 1\n+    }\n+}\n+\n+async fn other() {}\n+\n+pub async fn uhoh() {\n+    let _guard = bar(); //~ ERROR `Umm` held across\n+    other().await;\n+}\n+\n+fn main() {\n+}"}, {"sha": "425c076823d2f30b23d3ad047142bb1a78c6efc8", "filename": "src/test/ui/lint/must_not_suspend/unit.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -0,0 +1,26 @@\n+error: `Umm` held across a suspend point, but should not be\n+  --> $DIR/unit.rs:20:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |     ------------- the value is held across this suspend point\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unit.rs:3:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+note: You gotta use Umm's, ya know?\n+  --> $DIR/unit.rs:20:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/unit.rs:20:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "50a696ba52322adb11dab5942328ae665f85fb2d", "filename": "src/test/ui/lint/must_not_suspend/warn.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -0,0 +1,25 @@\n+// edition:2018\n+// run-pass\n+#![feature(must_not_suspend)]\n+\n+#[must_not_suspend = \"You gotta use Umm's, ya know?\"]\n+struct Umm {\n+    _i: i64\n+}\n+\n+\n+fn bar() -> Umm {\n+    Umm {\n+        _i: 1\n+    }\n+}\n+\n+async fn other() {}\n+\n+pub async fn uhoh() {\n+    let _guard = bar(); //~ WARNING `Umm` held across\n+    other().await;\n+}\n+\n+fn main() {\n+}"}, {"sha": "24f52275b430afe1114bc69926318f92970e8335", "filename": "src/test/ui/lint/must_not_suspend/warn.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce45663e14dac3f0f58be698cc530bc2e6e21682/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr?ref=ce45663e14dac3f0f58be698cc530bc2e6e21682", "patch": "@@ -0,0 +1,22 @@\n+warning: `Umm` held across a suspend point, but should not be\n+  --> $DIR/warn.rs:20:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |     ------------- the value is held across this suspend point\n+   |\n+   = note: `#[warn(must_not_suspend)]` on by default\n+note: You gotta use Umm's, ya know?\n+  --> $DIR/warn.rs:20:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n+  --> $DIR/warn.rs:20:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+\n+warning: 1 warning emitted\n+"}]}