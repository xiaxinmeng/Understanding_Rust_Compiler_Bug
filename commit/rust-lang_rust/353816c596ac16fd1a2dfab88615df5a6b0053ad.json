{"sha": "353816c596ac16fd1a2dfab88615df5a6b0053ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MzgxNmM1OTZhYzE2ZmQxYTJkZmFiODg2MTVkZjVhNmIwMDUzYWQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-05-23T08:10:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-23T08:10:49Z"}, "message": "Merge pull request #2730 from topecongiro/issue-2704\n\nDisallow combining a method call with prefix or suffix", "tree": {"sha": "23207ab6ab90554984313298cb03f7e86ef81495", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23207ab6ab90554984313298cb03f7e86ef81495"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/353816c596ac16fd1a2dfab88615df5a6b0053ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbBSIJCRBK7hj4Ov3rIwAAdHIIACfSzXlDGBJuLmCiw80kkAlE\nHdj4pO15kMr/vNbqVCNSXEVroezY62RFBUVm7ZVmHlNz8ckHcG5Vm+dAHO3CeGz8\niBqSs79yBDAnCIJl7KgPzYfZnyQW6VwGffzfweIhwPc0rm1qzje8XhocaAkUXXuG\nlmrs9zeSEJM6xwjysJZOn1O/sLawj/iSxwpuwL6rUjzu1KgATQ/wHZIXaryAoMmd\nvA40IEXNgdEqED6ChDFEG4lCfQveotjLxnubb5nJLry/GrzmGVcfeMIFiwP57M2n\nI+BYGMf+T5cWictGAUYHV0SzyrgB8nimumsMrMqNCFk+H/opGepWynFe9e+RaEI=\n=vCdW\n-----END PGP SIGNATURE-----\n", "payload": "tree 23207ab6ab90554984313298cb03f7e86ef81495\nparent 9f00199a56b4c3293463a8778784f31d579ee684\nparent 8cb2b8e909455f74e1afa3417743d9d87bbb92ca\nauthor Nick Cameron <nrc@ncameron.org> 1527063049 +1200\ncommitter GitHub <noreply@github.com> 1527063049 +1200\n\nMerge pull request #2730 from topecongiro/issue-2704\n\nDisallow combining a method call with prefix or suffix "}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/353816c596ac16fd1a2dfab88615df5a6b0053ad", "html_url": "https://github.com/rust-lang/rust/commit/353816c596ac16fd1a2dfab88615df5a6b0053ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/353816c596ac16fd1a2dfab88615df5a6b0053ad/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f00199a56b4c3293463a8778784f31d579ee684", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f00199a56b4c3293463a8778784f31d579ee684", "html_url": "https://github.com/rust-lang/rust/commit/9f00199a56b4c3293463a8778784f31d579ee684"}, {"sha": "8cb2b8e909455f74e1afa3417743d9d87bbb92ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cb2b8e909455f74e1afa3417743d9d87bbb92ca", "html_url": "https://github.com/rust-lang/rust/commit/8cb2b8e909455f74e1afa3417743d9d87bbb92ca"}], "stats": {"total": 114, "additions": 107, "deletions": 7}, "files": [{"sha": "4a877ad2487d451c0d527db263ed365555de1008", "filename": "src/expr.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/353816c596ac16fd1a2dfab88615df5a6b0053ad/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353816c596ac16fd1a2dfab88615df5a6b0053ad/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=353816c596ac16fd1a2dfab88615df5a6b0053ad", "patch": "@@ -2173,3 +2173,15 @@ impl ToExpr for ast::GenericParam {\n         false\n     }\n }\n+\n+pub fn is_method_call(expr: &ast::Expr) -> bool {\n+    match expr.node {\n+        ast::ExprKind::MethodCall(..) => true,\n+        ast::ExprKind::AddrOf(_, ref expr)\n+        | ast::ExprKind::Box(ref expr)\n+        | ast::ExprKind::Cast(ref expr, _)\n+        | ast::ExprKind::Try(ref expr)\n+        | ast::ExprKind::Unary(_, ref expr) => is_method_call(expr),\n+        _ => false,\n+    }\n+}"}, {"sha": "60673d4ebdee0262bb7d0f1cf731a4b578bd4f5b", "filename": "src/items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/353816c596ac16fd1a2dfab88615df5a6b0053ad/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353816c596ac16fd1a2dfab88615df5a6b0053ad/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=353816c596ac16fd1a2dfab88615df5a6b0053ad", "patch": "@@ -1380,9 +1380,9 @@ fn format_tuple_struct(\n         // We need to put the where clause on a new line, but we didn't\n         // know that earlier, so the where clause will not be indented properly.\n         result.push('\\n');\n-        result\n-            .push_str(&(offset.block_only() + (context.config.tab_spaces() - 1))\n-                .to_string(context.config));\n+        result.push_str(\n+            &(offset.block_only() + (context.config.tab_spaces() - 1)).to_string(context.config),\n+        );\n     }\n     result.push_str(&where_clause_str);\n "}, {"sha": "f2f05d835ff0b6eed2571a453ba6491b4a23f074", "filename": "src/overflow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/353816c596ac16fd1a2dfab88615df5a6b0053ad/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353816c596ac16fd1a2dfab88615df5a6b0053ad/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=353816c596ac16fd1a2dfab88615df5a6b0053ad", "patch": "@@ -18,7 +18,7 @@ use syntax::parse::token::DelimToken;\n \n use closures;\n use codemap::SpanUtils;\n-use expr::{is_every_expr_simple, is_nested_call, maybe_get_args_offset, ToExpr};\n+use expr::{is_every_expr_simple, is_method_call, is_nested_call, maybe_get_args_offset, ToExpr};\n use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator};\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n@@ -231,8 +231,8 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n         let placeholder = if overflow_last {\n             let old_value = *self.context.force_one_line_chain.borrow();\n             if !combine_arg_with_callee {\n-                if let Some(expr) = self.last_item().and_then(|item| item.to_expr()) {\n-                    if let ast::ExprKind::MethodCall(..) = expr.node {\n+                if let Some(ref expr) = self.last_item().and_then(|item| item.to_expr()) {\n+                    if is_method_call(expr) {\n                         self.context.force_one_line_chain.replace(true);\n                     }\n                 }"}, {"sha": "80e46c235f47d46e43a8f424b3658690e9990b11", "filename": "tests/source/expr.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/353816c596ac16fd1a2dfab88615df5a6b0053ad/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353816c596ac16fd1a2dfab88615df5a6b0053ad/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=353816c596ac16fd1a2dfab88615df5a6b0053ad", "patch": "@@ -398,3 +398,41 @@ fn foo() {\n     let my_var =\n         Mutex::new(RpcClientType::connect(server_iddd).chain_err(|| \"Unable to create RPC client\")?);\n }\n+\n+// #2704\n+// Method call with prefix and suffix.\n+fn issue2704() {\n+    // We should not combine the callee with a multi-lined method call.\n+    let requires = requires.set(&requires0\n+                                .concat(&requires1)\n+                                .concat(&requires2)\n+                                .distinct_total());\n+    let requires = requires.set(box requires0\n+                                .concat(&requires1)\n+                                .concat(&requires2)\n+                                .distinct_total());\n+    let requires = requires.set(requires0\n+                                .concat(&requires1)\n+                                .concat(&requires2)\n+                                .distinct_total() as u32);\n+    let requires = requires.set(requires0\n+                                .concat(&requires1)\n+                                .concat(&requires2)\n+                                .distinct_total()?);\n+    let requires = requires.set(!requires0\n+                                .concat(&requires1)\n+                                .concat(&requires2)\n+                                .distinct_total());\n+    // We should combine a small callee with an argument.\n+    bar(vec![22]\n+        .into_iter()\n+        .map(|x| x * 2)\n+        .filter(|_| true)\n+        .collect());\n+    // But we should not combine a long callee with an argument.\n+    barrrr(vec![22]\n+        .into_iter()\n+        .map(|x| x * 2)\n+        .filter(|_| true)\n+        .collect());\n+}"}, {"sha": "45ac1f5caada844d93c802bfbdad646129abda16", "filename": "tests/target/expr.rs", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/353816c596ac16fd1a2dfab88615df5a6b0053ad/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/353816c596ac16fd1a2dfab88615df5a6b0053ad/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=353816c596ac16fd1a2dfab88615df5a6b0053ad", "patch": "@@ -424,6 +424,56 @@ fn dots() {\n // A function call with a large single argument.\n fn foo() {\n     let my_var = Mutex::new(\n-        RpcClientType::connect(server_iddd).chain_err(|| \"Unable to create RPC client\")?\n+        RpcClientType::connect(server_iddd).chain_err(|| \"Unable to create RPC client\")?,\n+    );\n+}\n+\n+// #2704\n+// Method call with prefix and suffix.\n+fn issue2704() {\n+    // We should not combine the callee with a multi-lined method call.\n+    let requires = requires.set(\n+        &requires0\n+            .concat(&requires1)\n+            .concat(&requires2)\n+            .distinct_total(),\n+    );\n+    let requires = requires.set(\n+        box requires0\n+            .concat(&requires1)\n+            .concat(&requires2)\n+            .distinct_total(),\n+    );\n+    let requires = requires.set(\n+        requires0\n+            .concat(&requires1)\n+            .concat(&requires2)\n+            .distinct_total() as u32,\n+    );\n+    let requires = requires.set(\n+        requires0\n+            .concat(&requires1)\n+            .concat(&requires2)\n+            .distinct_total()?,\n+    );\n+    let requires = requires.set(\n+        !requires0\n+            .concat(&requires1)\n+            .concat(&requires2)\n+            .distinct_total(),\n+    );\n+    // We should combine a small callee with an argument.\n+    bar(vec![22]\n+        .into_iter()\n+        .map(|x| x * 2)\n+        .filter(|_| true)\n+        .collect());\n+    // But we should not combine a long callee with an argument.\n+    barrrr(\n+        vec![22]\n+            .into_iter()\n+            .map(|x| x * 2)\n+            .filter(|_| true)\n+            .collect(),\n     );\n }"}]}