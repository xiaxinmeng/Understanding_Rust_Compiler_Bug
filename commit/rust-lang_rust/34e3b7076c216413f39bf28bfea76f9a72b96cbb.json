{"sha": "34e3b7076c216413f39bf28bfea76f9a72b96cbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZTNiNzA3NmMyMTY0MTNmMzliZjI4YmZlYTc2ZjlhNzJiOTZjYmI=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-19T17:55:49Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-20T03:08:39Z"}, "message": "Avoid cloning Place in append_place_to_string", "tree": {"sha": "4b813bd068b5c4c2ba763d9485842df9602fa4f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b813bd068b5c4c2ba763d9485842df9602fa4f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34e3b7076c216413f39bf28bfea76f9a72b96cbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34e3b7076c216413f39bf28bfea76f9a72b96cbb", "html_url": "https://github.com/rust-lang/rust/commit/34e3b7076c216413f39bf28bfea76f9a72b96cbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34e3b7076c216413f39bf28bfea76f9a72b96cbb/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72251d5595ca4f5e7a57ab6f0db0d0a498d5b737", "url": "https://api.github.com/repos/rust-lang/rust/commits/72251d5595ca4f5e7a57ab6f0db0d0a498d5b737", "html_url": "https://github.com/rust-lang/rust/commit/72251d5595ca4f5e7a57ab6f0db0d0a498d5b737"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "10b283b16bf14ebd48cac0c0395bc78a8281e635", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/34e3b7076c216413f39bf28bfea76f9a72b96cbb/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e3b7076c216413f39bf28bfea76f9a72b96cbb/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=34e3b7076c216413f39bf28bfea76f9a72b96cbb", "patch": "@@ -272,9 +272,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             let name = self.upvars[var_index].name.to_string();\n                             buf.push_str(&name);\n                         } else {\n-                            let field_name = self.describe_field(&Place {\n-                                base: (*base).clone(),\n-                                projection: proj.base.clone(),\n+                            let field_name = self.describe_field(PlaceRef {\n+                                base: base,\n+                                projection: &proj.base,\n                             }, field);\n                             self.append_place_to_string(\n                                 PlaceRef {\n@@ -343,31 +343,32 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     }\n \n     /// End-user visible description of the `field`nth field of `base`\n-    fn describe_field(&self, place: &Place<'tcx>, field: Field) -> String {\n+    fn describe_field(&self, place: PlaceRef<'cx, 'tcx>, field: Field) -> String {\n         // FIXME Place2 Make this work iteratively\n         match place {\n-            Place {\n+            PlaceRef {\n                 base: PlaceBase::Local(local),\n                 projection: None,\n             } => {\n                 let local = &self.body.local_decls[*local];\n                 self.describe_field_from_ty(&local.ty, field, None)\n             }\n-            Place {\n+            PlaceRef {\n                 base: PlaceBase::Static(static_),\n                 projection: None,\n             } =>\n                 self.describe_field_from_ty(&static_.ty, field, None),\n-            Place {\n+            PlaceRef {\n                 base,\n                 projection: Some(proj),\n             } => match proj.elem {\n-                ProjectionElem::Deref => self.describe_field(&Place {\n-                    base: base.clone(),\n-                    projection: proj.base.clone(),\n+                ProjectionElem::Deref => self.describe_field(PlaceRef {\n+                    base,\n+                    projection: &proj.base,\n                 }, field),\n                 ProjectionElem::Downcast(_, variant_index) => {\n-                    let base_ty = place.ty(self.body, self.infcx.tcx).ty;\n+                    let base_ty =\n+                        Place::ty_from(place.base, place.projection, self.body, self.infcx.tcx).ty;\n                     self.describe_field_from_ty(&base_ty, field, Some(variant_index))\n                 }\n                 ProjectionElem::Field(_, field_type) => {\n@@ -376,9 +377,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 ProjectionElem::Index(..)\n                 | ProjectionElem::ConstantIndex { .. }\n                 | ProjectionElem::Subslice { .. } => {\n-                    self.describe_field(&Place {\n-                        base: base.clone(),\n-                        projection: proj.base.clone(),\n+                    self.describe_field(PlaceRef {\n+                        base,\n+                        projection: &proj.base,\n                     }, field)\n                 }\n             },"}]}