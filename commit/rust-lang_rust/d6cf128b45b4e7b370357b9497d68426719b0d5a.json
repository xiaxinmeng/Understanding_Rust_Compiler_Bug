{"sha": "d6cf128b45b4e7b370357b9497d68426719b0d5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2Y2YxMjhiNDViNGU3YjM3MDM1N2I5NDk3ZDY4NDI2NzE5YjBkNWE=", "commit": {"author": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2020-07-22T07:16:16Z"}, "committer": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2020-07-22T08:07:20Z"}, "message": "mark methods as constant since 1.47.0 instead of 1.46.0", "tree": {"sha": "68deec38c6d1dbedfcd68317b449ca26c1b14e7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68deec38c6d1dbedfcd68317b449ca26c1b14e7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6cf128b45b4e7b370357b9497d68426719b0d5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6cf128b45b4e7b370357b9497d68426719b0d5a", "html_url": "https://github.com/rust-lang/rust/commit/d6cf128b45b4e7b370357b9497d68426719b0d5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6cf128b45b4e7b370357b9497d68426719b0d5a/comments", "author": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a84e313df095fd0e81b9348b68bd9b1d1caa551", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a84e313df095fd0e81b9348b68bd9b1d1caa551", "html_url": "https://github.com/rust-lang/rust/commit/2a84e313df095fd0e81b9348b68bd9b1d1caa551"}], "stats": {"total": 124, "additions": 43, "deletions": 81}, "files": [{"sha": "11c9ee495a5705b38142e34187f1c29beb4ad4de", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d6cf128b45b4e7b370357b9497d68426719b0d5a/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6cf128b45b4e7b370357b9497d68426719b0d5a/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=d6cf128b45b4e7b370357b9497d68426719b0d5a", "patch": "@@ -1225,8 +1225,7 @@ impl char {\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_alphabetic(&self) -> bool {\n         match *self {\n@@ -1262,8 +1261,7 @@ impl char {\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_uppercase(&self) -> bool {\n         match *self {\n@@ -1299,8 +1297,7 @@ impl char {\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_lowercase(&self) -> bool {\n         match *self {\n@@ -1339,8 +1336,7 @@ impl char {\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_alphanumeric(&self) -> bool {\n         match *self {\n@@ -1376,8 +1372,7 @@ impl char {\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_digit(&self) -> bool {\n         match *self {\n@@ -1416,8 +1411,7 @@ impl char {\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_hexdigit(&self) -> bool {\n         match *self {\n@@ -1457,8 +1451,7 @@ impl char {\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_punctuation(&self) -> bool {\n         match *self {\n@@ -1494,8 +1487,7 @@ impl char {\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_graphic(&self) -> bool {\n         match *self {\n@@ -1548,8 +1540,7 @@ impl char {\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_whitespace(&self) -> bool {\n         match *self {\n@@ -1587,8 +1578,7 @@ impl char {\n     /// assert!(esc.is_ascii_control());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_control(&self) -> bool {\n         match *self {"}, {"sha": "2c3fee39e1afa501a6eb9ca5aa9524e8c63a1bc1", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 33, "deletions": 61, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/d6cf128b45b4e7b370357b9497d68426719b0d5a/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6cf128b45b4e7b370357b9497d68426719b0d5a/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=d6cf128b45b4e7b370357b9497d68426719b0d5a", "patch": "@@ -79,8 +79,7 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n \n                 /// Creates a non-zero if the given value is not zero.\n                 #[$stability]\n-                #[rustc_const_stable(feature = \"const_nonzero_int_methods\", since = \"1.46.0\")]\n-                #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+                #[rustc_const_stable(feature = \"const_nonzero_int_methods\", since = \"1.47.0\")]\n                 #[inline]\n                 pub const fn new(n: $Int) -> Option<Self> {\n                     if n != 0 {\n@@ -740,10 +739,9 @@ assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add(3), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_add(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_add(rhs);\n@@ -783,10 +781,9 @@ assert_eq!((\", stringify!($SelfT), \"::MIN + 2).checked_sub(3), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_sub(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_sub(rhs);\n@@ -826,10 +823,9 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.checked_mul(2), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_mul(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_mul(rhs);\n@@ -983,8 +979,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_neg(), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn checked_neg(self) -> Option<Self> {\n                 let (a, b) = self.overflowing_neg();\n@@ -1006,10 +1001,9 @@ assert_eq!(0x1\", stringify!($SelfT), \".checked_shl(129), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_shl(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shl(rhs);\n@@ -1031,10 +1025,9 @@ assert_eq!(0x10\", stringify!($SelfT), \".checked_shr(128), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_shr(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shr(rhs);\n@@ -1057,8 +1050,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_abs(), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n-            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn checked_abs(self) -> Option<Self> {\n                 if self.is_negative() {\n@@ -1129,7 +1121,7 @@ $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.46.0\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1155,7 +1147,7 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_sub(-1), \", stringify!($Self\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.46.0\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1183,7 +1175,7 @@ $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"saturating_neg\", since = \"1.45.0\")]\n-            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.46.0\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn saturating_neg(self) -> Self {\n                 intrinsics::saturating_sub(0, self)\n@@ -1209,8 +1201,7 @@ $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"saturating_neg\", since = \"1.45.0\")]\n-            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.46.0\")]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn saturating_abs(self) -> Self {\n                 if self.is_negative() {\n@@ -1237,10 +1228,9 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_mul(10), \", stringify!($Self\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.46.0\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn saturating_mul(self, rhs: Self) -> Self {\n                 match self.checked_mul(rhs) {\n@@ -2203,8 +2193,7 @@ assert_eq!((-10\", stringify!($SelfT), \").signum(), -1);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_stable(feature = \"const_int_sign\", since = \"1.46.0\")]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+            #[rustc_const_stable(feature = \"const_int_sign\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn signum(self) -> Self {\n                 match self {\n@@ -2986,10 +2975,9 @@ Basic usage:\n assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add(3), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_add(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_add(rhs);\n@@ -3027,10 +3015,9 @@ Basic usage:\n assert_eq!(0\", stringify!($SelfT), \".checked_sub(1), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_sub(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_sub(rhs);\n@@ -3068,10 +3055,9 @@ Basic usage:\n assert_eq!(\", stringify!($SelfT), \"::MAX.checked_mul(2), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_mul(self, rhs: Self) -> Option<Self> {\n                 let (a, b) = self.overflowing_mul(rhs);\n@@ -3219,8 +3205,7 @@ Basic usage:\n assert_eq!(1\", stringify!($SelfT), \".checked_neg(), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn checked_neg(self) -> Option<Self> {\n                 let (a, b) = self.overflowing_neg();\n@@ -3241,10 +3226,9 @@ Basic usage:\n assert_eq!(0x10\", stringify!($SelfT), \".checked_shl(129), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_shl(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shl(rhs);\n@@ -3265,10 +3249,9 @@ Basic usage:\n assert_eq!(0x10\", stringify!($SelfT), \".checked_shr(129), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.46.0\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn checked_shr(self, rhs: u32) -> Option<Self> {\n                 let (a, b) = self.overflowing_shr(rhs);\n@@ -3333,7 +3316,7 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.46.0\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn saturating_add(self, rhs: Self) -> Self {\n                 intrinsics::saturating_add(self, rhs)\n@@ -3355,7 +3338,7 @@ assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.46.0\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn saturating_sub(self, rhs: Self) -> Self {\n                 intrinsics::saturating_sub(self, rhs)\n@@ -3377,10 +3360,9 @@ assert_eq!((\", stringify!($SelfT), \"::MAX).saturating_mul(10), \", stringify!($Se\n \"::MAX);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.46.0\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n             #[inline]\n             pub const fn saturating_mul(self, rhs: Self) -> Self {\n                 match self.checked_mul(rhs) {\n@@ -4671,8 +4653,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_alphabetic(&self) -> bool {\n         matches!(*self, b'A'..=b'Z' | b'a'..=b'z')\n@@ -4705,8 +4686,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_uppercase(&self) -> bool {\n         matches!(*self, b'A'..=b'Z')\n@@ -4739,8 +4719,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_lowercase(&self) -> bool {\n         matches!(*self, b'a'..=b'z')\n@@ -4776,8 +4755,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_alphanumeric(&self) -> bool {\n         matches!(*self, b'0'..=b'9' | b'A'..=b'Z' | b'a'..=b'z')\n@@ -4810,8 +4788,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_digit(&self) -> bool {\n         matches!(*self, b'0'..=b'9')\n@@ -4847,8 +4824,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_hexdigit(&self) -> bool {\n         matches!(*self, b'0'..=b'9' | b'A'..=b'F' | b'a'..=b'f')\n@@ -4885,8 +4861,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_punctuation(&self) -> bool {\n         matches!(*self, b'!'..=b'/' | b':'..=b'@' | b'['..=b'`' | b'{'..=b'~')\n@@ -4919,8 +4894,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_graphic(&self) -> bool {\n         matches!(*self, b'!'..=b'~')\n@@ -4970,8 +4944,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_whitespace(&self) -> bool {\n         matches!(*self, b'\\t' | b'\\n' | b'\\x0C' | b'\\r' | b' ')\n@@ -5006,8 +4979,7 @@ impl u8 {\n     /// assert!(esc.is_ascii_control());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_control(&self) -> bool {\n         matches!(*self, b'\\0'..=b'\\x1F' | b'\\x7F')"}]}