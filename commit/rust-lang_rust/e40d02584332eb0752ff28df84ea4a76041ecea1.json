{"sha": "e40d02584332eb0752ff28df84ea4a76041ecea1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MGQwMjU4NDMzMmViMDc1MmZmMjhkZjg0ZWE0YTc2MDQxZWNlYTE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-21T16:44:34Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-22T16:30:53Z"}, "message": "Eval const values", "tree": {"sha": "6e9f57c540ac99cab8777c4714f6f92bfb7eb411", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e9f57c540ac99cab8777c4714f6f92bfb7eb411"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e40d02584332eb0752ff28df84ea4a76041ecea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e40d02584332eb0752ff28df84ea4a76041ecea1", "html_url": "https://github.com/rust-lang/rust/commit/e40d02584332eb0752ff28df84ea4a76041ecea1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e40d02584332eb0752ff28df84ea4a76041ecea1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fad0f714f3561ecaddd5ee81a497b2613049729", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fad0f714f3561ecaddd5ee81a497b2613049729", "html_url": "https://github.com/rust-lang/rust/commit/4fad0f714f3561ecaddd5ee81a497b2613049729"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "a1dbe0b872e1b0ec5953f0c6d0dbee1b8ddf68a1", "filename": "example.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e40d02584332eb0752ff28df84ea4a76041ecea1/example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40d02584332eb0752ff28df84ea4a76041ecea1/example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example.rs?ref=e40d02584332eb0752ff28df84ea4a76041ecea1", "patch": "@@ -170,3 +170,9 @@ fn use_size_of() -> usize {\n     let copy2 = &copy::<u8>;\n     copy2(src, dst, 1);\n }*/\n+\n+const Abc: u8 = 6 * 7;\n+\n+fn use_const() -> u8 {\n+    Abc\n+}"}, {"sha": "60fe341927135570842ac365cd088ead4b7b954f", "filename": "src/constant.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e40d02584332eb0752ff28df84ea4a76041ecea1/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40d02584332eb0752ff28df84ea4a76041ecea1/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=e40d02584332eb0752ff28df84ea4a76041ecea1", "patch": "@@ -1,11 +1,11 @@\n use prelude::*;\n-use rustc::mir::interpret::{GlobalId, AllocId, read_target_uint};\n+use rustc::mir::interpret::{ConstValue, GlobalId, AllocId, read_target_uint};\n use rustc_mir::interpret::{CompileTimeEvaluator, Memory, MemoryKind};\n use cranelift_module::*;\n \n pub fn trans_constant<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, const_: &Constant<'tcx>) -> CValue<'tcx> {\n-    let value = match const_.literal {\n-        Literal::Value { value } => value,\n+    let const_val = match const_.literal {\n+        Literal::Value { value } => fx.monomorphize(&value),\n         Literal::Promoted { index } => fx\n             .tcx\n             .const_eval(ParamEnv::reveal_all().and(GlobalId {\n@@ -14,21 +14,35 @@ pub fn trans_constant<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, const_: &Cons\n             }))\n             .unwrap(),\n     };\n-    fx.tcx.sess.warn(&format!(\"const: {:?}\", value));\n+\n+    let const_ = match const_val.val {\n+        ConstValue::Unevaluated(def_id, ref substs) => {\n+            let param_env = ParamEnv::reveal_all();\n+            let instance = Instance::resolve(fx.tcx, param_env, def_id, substs).unwrap();\n+            let cid = GlobalId {\n+                instance,\n+                promoted: None,\n+            };\n+            fx.tcx.const_eval(param_env.and(cid)).unwrap()\n+        },\n+        _ => const_val,\n+    };\n+\n+    fx.tcx.sess.warn(&format!(\"const_val: {:?} const_: {:?}\", const_val, const_));\n \n     let ty = fx.monomorphize(&const_.ty);\n     let layout = fx.layout_of(ty);\n     match ty.sty {\n         TypeVariants::TyBool => {\n-            let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n+            let bits = const_.val.to_bits(layout.size).unwrap();\n             CValue::const_val(fx, ty, bits as u64 as i64)\n         }\n         TypeVariants::TyUint(_) => {\n-            let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n+            let bits = const_.val.to_bits(layout.size).unwrap();\n             CValue::const_val(fx, ty, bits as u64 as i64)\n         }\n         TypeVariants::TyInt(_) => {\n-            let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n+            let bits = const_.val.to_bits(layout.size).unwrap();\n             CValue::const_val(fx, ty, bits as i128 as i64)\n         }\n         TypeVariants::TyFnDef(def_id, substs) => {\n@@ -42,7 +56,7 @@ pub fn trans_constant<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, const_: &Cons\n                 return CValue::ByRef(fx.bcx.ins().iconst(types::I64, 0), layout);\n             }\n             let mut memory = Memory::<CompileTimeEvaluator>::new(fx.tcx.at(DUMMY_SP), ());\n-            let alloc = fx.tcx.const_value_to_allocation(value);\n+            let alloc = fx.tcx.const_value_to_allocation(const_);\n             //println!(\"const value: {:?} allocation: {:?}\", value, alloc);\n             let alloc_id = memory.allocate_value(alloc.clone(), MemoryKind::Stack).unwrap();\n             let data_id = get_global_for_alloc_id(fx, &memory, alloc_id);"}]}