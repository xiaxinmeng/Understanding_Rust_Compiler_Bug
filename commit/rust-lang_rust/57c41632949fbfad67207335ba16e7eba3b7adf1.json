{"sha": "57c41632949fbfad67207335ba16e7eba3b7adf1", "node_id": "C_kwDOAAsO6NoAKDU3YzQxNjMyOTQ5ZmJmYWQ2NzIwNzMzNWJhMTZlN2ViYTNiN2FkZjE", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-02-24T14:47:13Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-02-24T14:47:13Z"}, "message": "Remove an unnecessary restriction in `dest_prop`", "tree": {"sha": "1ef999c5518fb15340a54643a9bd73cf2c52fd8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ef999c5518fb15340a54643a9bd73cf2c52fd8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57c41632949fbfad67207335ba16e7eba3b7adf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57c41632949fbfad67207335ba16e7eba3b7adf1", "html_url": "https://github.com/rust-lang/rust/commit/57c41632949fbfad67207335ba16e7eba3b7adf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57c41632949fbfad67207335ba16e7eba3b7adf1/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e", "html_url": "https://github.com/rust-lang/rust/commit/9ecd75b831f744b9bdfb5ec4d435fa20c65e074e"}], "stats": {"total": 53, "additions": 20, "deletions": 33}, "files": [{"sha": "7878d6eaab1232cabc15bd023c1735d92cf432fe", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/57c41632949fbfad67207335ba16e7eba3b7adf1/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c41632949fbfad67207335ba16e7eba3b7adf1/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=57c41632949fbfad67207335ba16e7eba3b7adf1", "patch": "@@ -38,12 +38,6 @@\n //!   It must also not contain any indexing projections, since those take an arbitrary `Local` as\n //!   the index, and that local might only be initialized shortly before `dest` is used.\n //!\n-//!   Subtle case: If `dest` is a, or projects through a union, then we have to make sure that there\n-//!   remains an assignment to it, since that sets the \"active field\" of the union. But if `src` is\n-//!   a ZST, it might not be initialized, so there might not be any use of it before the assignment,\n-//!   and performing the optimization would simply delete the assignment, leaving `dest`\n-//!   uninitialized.\n-//!\n //! * `src` must be a bare `Local` without any indirections or field projections (FIXME: Is this a\n //!   fundamental restriction or just current impl state?). It can be copied or moved by the\n //!   assignment.\n@@ -103,7 +97,6 @@ use rustc_index::{\n     bit_set::{BitMatrix, BitSet},\n     vec::IndexVec,\n };\n-use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::visit::{MutVisitor, PlaceContext, Visitor};\n use rustc_middle::mir::{dump_mir, PassWhere};\n use rustc_middle::mir::{\n@@ -135,7 +128,7 @@ impl<'tcx> MirPass<'tcx> for DestinationPropagation {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         let def_id = body.source.def_id();\n \n-        let candidates = find_candidates(tcx, body);\n+        let candidates = find_candidates(body);\n         if candidates.is_empty() {\n             debug!(\"{:?}: no dest prop candidates, done\", def_id);\n             return;\n@@ -803,9 +796,8 @@ struct CandidateAssignment<'tcx> {\n /// comment) and also throw out assignments that involve a local that has its address taken or is\n /// otherwise ineligible (eg. locals used as array indices are ignored because we cannot propagate\n /// arbitrary places into array indices).\n-fn find_candidates<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> Vec<CandidateAssignment<'tcx>> {\n+fn find_candidates<'tcx>(body: &Body<'tcx>) -> Vec<CandidateAssignment<'tcx>> {\n     let mut visitor = FindAssignments {\n-        tcx,\n         body,\n         candidates: Vec::new(),\n         ever_borrowed_locals: ever_borrowed_locals(body),\n@@ -816,7 +808,6 @@ fn find_candidates<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> Vec<CandidateA\n }\n \n struct FindAssignments<'a, 'tcx> {\n-    tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n     candidates: Vec<CandidateAssignment<'tcx>>,\n     ever_borrowed_locals: BitSet<Local>,\n@@ -845,10 +836,11 @@ impl<'tcx> Visitor<'tcx> for FindAssignments<'_, 'tcx> {\n                 return;\n             }\n \n-            // Can't optimize if both locals ever have their address taken (can introduce\n-            // aliasing).\n-            // FIXME: This can be smarter and take `StorageDead` into account (which\n-            // invalidates borrows).\n+            // Can't optimize if either local ever has their address taken. This optimization does\n+            // liveness analysis only based on assignments, and a local can be live even if its\n+            // never assigned to again, because a reference to it might be live.\n+            // FIXME: This can be smarter and take `StorageDead` into  account (which invalidates\n+            // borrows).\n             if self.ever_borrowed_locals.contains(dest.local)\n                 || self.ever_borrowed_locals.contains(src.local)\n             {\n@@ -862,22 +854,11 @@ impl<'tcx> Visitor<'tcx> for FindAssignments<'_, 'tcx> {\n                 return;\n             }\n \n-            // Handle the \"subtle case\" described above by rejecting any `dest` that is or\n-            // projects through a union.\n-            let mut place_ty = PlaceTy::from_ty(self.body.local_decls[dest.local].ty);\n-            if place_ty.ty.is_union() {\n-                return;\n-            }\n             for elem in dest.projection {\n                 if let PlaceElem::Index(_) = elem {\n                     // `dest` contains an indexing projection.\n                     return;\n                 }\n-\n-                place_ty = place_ty.projection_ty(self.tcx, elem);\n-                if place_ty.ty.is_union() {\n-                    return;\n-                }\n             }\n \n             self.candidates.push(CandidateAssignment {"}, {"sha": "11776ed21e1586b9ae92675c926ecd5a58970a36", "filename": "src/test/mir-opt/dest-prop/union.main.DestinationPropagation.diff", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/57c41632949fbfad67207335ba16e7eba3b7adf1/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/57c41632949fbfad67207335ba16e7eba3b7adf1/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff?ref=57c41632949fbfad67207335ba16e7eba3b7adf1", "patch": "@@ -17,23 +17,29 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/union.rs:13:9: 13:11\n-          StorageLive(_2);                 // scope 0 at $DIR/union.rs:13:23: 13:28\n-          _2 = val() -> bb1;               // scope 0 at $DIR/union.rs:13:23: 13:28\n+-         StorageLive(_1);                 // scope 0 at $DIR/union.rs:13:9: 13:11\n+-         StorageLive(_2);                 // scope 0 at $DIR/union.rs:13:23: 13:28\n+-         _2 = val() -> bb1;               // scope 0 at $DIR/union.rs:13:23: 13:28\n++         nop;                             // scope 0 at $DIR/union.rs:13:9: 13:11\n++         nop;                             // scope 0 at $DIR/union.rs:13:23: 13:28\n++         (_1.0: u32) = val() -> bb1;      // scope 0 at $DIR/union.rs:13:23: 13:28\n                                            // mir::Constant\n                                            // + span: $DIR/union.rs:13:23: 13:26\n                                            // + literal: Const { ty: fn() -> u32 {val}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb1: {\n-          (_1.0: u32) = move _2;           // scope 0 at $DIR/union.rs:13:14: 13:30\n-          StorageDead(_2);                 // scope 0 at $DIR/union.rs:13:29: 13:30\n+-         (_1.0: u32) = move _2;           // scope 0 at $DIR/union.rs:13:14: 13:30\n+-         StorageDead(_2);                 // scope 0 at $DIR/union.rs:13:29: 13:30\n++         nop;                             // scope 0 at $DIR/union.rs:13:14: 13:30\n++         nop;                             // scope 0 at $DIR/union.rs:13:29: 13:30\n           StorageLive(_3);                 // scope 1 at $DIR/union.rs:15:5: 15:27\n           StorageLive(_4);                 // scope 1 at $DIR/union.rs:15:10: 15:26\n           _4 = (_1.0: u32);                // scope 2 at $DIR/union.rs:15:19: 15:24\n           StorageDead(_4);                 // scope 1 at $DIR/union.rs:15:26: 15:27\n           StorageDead(_3);                 // scope 1 at $DIR/union.rs:15:27: 15:28\n-          StorageDead(_1);                 // scope 0 at $DIR/union.rs:16:1: 16:2\n+-         StorageDead(_1);                 // scope 0 at $DIR/union.rs:16:1: 16:2\n++         nop;                             // scope 0 at $DIR/union.rs:16:1: 16:2\n           return;                          // scope 0 at $DIR/union.rs:16:2: 16:2\n       }\n   }"}, {"sha": "68c834dfbbf27bb491e76f51e1369074848ee83b", "filename": "src/test/mir-opt/dest-prop/union.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c41632949fbfad67207335ba16e7eba3b7adf1/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c41632949fbfad67207335ba16e7eba3b7adf1/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.rs?ref=57c41632949fbfad67207335ba16e7eba3b7adf1", "patch": "@@ -1,4 +1,4 @@\n-//! Tests that projections through unions cancel `DestinationPropagation`.\n+//! Tests that we can propogate into places that are projections into unions\n // compile-flags: -Zunsound-mir-opts\n fn val() -> u32 {\n     1"}]}