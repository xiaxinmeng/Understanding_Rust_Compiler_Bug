{"sha": "792f6aa4259b438aee1633d495d01d909bfb6ea9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MmY2YWE0MjU5YjQzOGFlZTE2MzNkNDk1ZDAxZDkwOWJmYjZlYTk=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-31T15:55:28Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-01T00:55:13Z"}, "message": "Fix #23890: const-eval `_ as usize`, `_ as isize` must dispatch to target type.", "tree": {"sha": "c55e9e312b339682d193ecb8432b8c9bfbd00670", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c55e9e312b339682d193ecb8432b8c9bfbd00670"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/792f6aa4259b438aee1633d495d01d909bfb6ea9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/792f6aa4259b438aee1633d495d01d909bfb6ea9", "html_url": "https://github.com/rust-lang/rust/commit/792f6aa4259b438aee1633d495d01d909bfb6ea9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/792f6aa4259b438aee1633d495d01d909bfb6ea9/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b57df77b3f7181a4dfb282dc8c4526846a9dddd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b57df77b3f7181a4dfb282dc8c4526846a9dddd", "html_url": "https://github.com/rust-lang/rust/commit/0b57df77b3f7181a4dfb282dc8c4526846a9dddd"}], "stats": {"total": 74, "additions": 42, "deletions": 32}, "files": [{"sha": "173358d336b42b6e0b2c925e187e477472706d49", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 42, "deletions": 32, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/792f6aa4259b438aee1633d495d01d909bfb6ea9/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/792f6aa4259b438aee1633d495d01d909bfb6ea9/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=792f6aa4259b438aee1633d495d01d909bfb6ea9", "patch": "@@ -509,7 +509,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n         // Prefer known type to noop, but always have a type hint.\n         let base_hint = ty::expr_ty_opt(tcx, &**base).unwrap_or(ety);\n         let val = try!(eval_const_expr_partial(tcx, &**base, Some(base_hint)));\n-        match cast_const(val, ety) {\n+        match cast_const(tcx, val, ety) {\n             Ok(val) => val,\n             Err(kind) => return Err(ConstEvalErr { span: e.span, kind: kind }),\n         }\n@@ -607,39 +607,49 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n     Ok(result)\n }\n \n-fn cast_const(val: const_val, ty: Ty) -> Result<const_val, ErrKind> {\n-    macro_rules! define_casts {\n-        ($($ty_pat:pat => (\n-            $intermediate_ty:ty,\n-            $const_type:ident,\n-            $target_ty:ty\n-        )),*) => (match ty.sty {\n-            $($ty_pat => {\n-                match val {\n-                    const_bool(b) => Ok($const_type(b as $intermediate_ty as $target_ty)),\n-                    const_uint(u) => Ok($const_type(u as $intermediate_ty as $target_ty)),\n-                    const_int(i) => Ok($const_type(i as $intermediate_ty as $target_ty)),\n-                    const_float(f) => Ok($const_type(f as $intermediate_ty as $target_ty)),\n-                    _ => Err(ErrKind::CannotCastTo(stringify!($const_type))),\n-                }\n-            },)*\n-            _ => Err(ErrKind::CannotCast),\n-        })\n+fn cast_const<'tcx>(tcx: &ty::ctxt<'tcx>, val: const_val, ty: Ty) -> Result<const_val, ErrKind> {\n+    macro_rules! convert_val {\n+        ($intermediate_ty:ty, $const_type:ident, $target_ty:ty) => {\n+            match val {\n+                const_bool(b) => Ok($const_type(b as $intermediate_ty as $target_ty)),\n+                const_uint(u) => Ok($const_type(u as $intermediate_ty as $target_ty)),\n+                const_int(i) => Ok($const_type(i as $intermediate_ty as $target_ty)),\n+                const_float(f) => Ok($const_type(f as $intermediate_ty as $target_ty)),\n+                _ => Err(ErrKind::CannotCastTo(stringify!($const_type))),\n+            }\n+        }\n+    }\n+\n+    // Issue #23890: If isize/usize, then dispatch to appropriate target representation type\n+    match (&ty.sty, tcx.sess.target.int_type, tcx.sess.target.uint_type) {\n+        (&ty::ty_int(ast::TyIs), ast::TyI32, _) => return convert_val!(i32, const_int, i64),\n+        (&ty::ty_int(ast::TyIs), ast::TyI64, _) => return convert_val!(i64, const_int, i64),\n+        (&ty::ty_int(ast::TyIs), _, _) => panic!(\"unexpected target.int_type\"),\n+\n+        (&ty::ty_uint(ast::TyUs), _, ast::TyU32) => return convert_val!(u32, const_uint, u64),\n+        (&ty::ty_uint(ast::TyUs), _, ast::TyU64) => return convert_val!(u64, const_uint, u64),\n+        (&ty::ty_uint(ast::TyUs), _, _) => panic!(\"unexpected target.uint_type\"),\n+\n+        _ => {}\n     }\n \n-    define_casts!{\n-        ty::ty_int(ast::TyIs) => (isize, const_int, i64),\n-        ty::ty_int(ast::TyI8) => (i8, const_int, i64),\n-        ty::ty_int(ast::TyI16) => (i16, const_int, i64),\n-        ty::ty_int(ast::TyI32) => (i32, const_int, i64),\n-        ty::ty_int(ast::TyI64) => (i64, const_int, i64),\n-        ty::ty_uint(ast::TyUs) => (usize, const_uint, u64),\n-        ty::ty_uint(ast::TyU8) => (u8, const_uint, u64),\n-        ty::ty_uint(ast::TyU16) => (u16, const_uint, u64),\n-        ty::ty_uint(ast::TyU32) => (u32, const_uint, u64),\n-        ty::ty_uint(ast::TyU64) => (u64, const_uint, u64),\n-        ty::ty_float(ast::TyF32) => (f32, const_float, f64),\n-        ty::ty_float(ast::TyF64) => (f64, const_float, f64)\n+    match ty.sty {\n+        ty::ty_int(ast::TyIs) => unreachable!(),\n+        ty::ty_uint(ast::TyUs) => unreachable!(),\n+\n+        ty::ty_int(ast::TyI8) => convert_val!(i8, const_int, i64),\n+        ty::ty_int(ast::TyI16) => convert_val!(i16, const_int, i64),\n+        ty::ty_int(ast::TyI32) => convert_val!(i32, const_int, i64),\n+        ty::ty_int(ast::TyI64) => convert_val!(i64, const_int, i64),\n+\n+        ty::ty_uint(ast::TyU8) => convert_val!(u8, const_uint, u64),\n+        ty::ty_uint(ast::TyU16) => convert_val!(u16, const_uint, u64),\n+        ty::ty_uint(ast::TyU32) => convert_val!(u32, const_uint, u64),\n+        ty::ty_uint(ast::TyU64) => convert_val!(u64, const_uint, u64),\n+\n+        ty::ty_float(ast::TyF32) => convert_val!(f32, const_float, f64),\n+        ty::ty_float(ast::TyF64) => convert_val!(f64, const_float, f64),\n+        _ => Err(ErrKind::CannotCast),\n     }\n }\n "}]}