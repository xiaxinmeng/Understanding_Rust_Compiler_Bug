{"sha": "36a4af49e0d66026e8ee7d156b2631208c4de2e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YTRhZjQ5ZTBkNjYwMjZlOGVlN2QxNTZiMjYzMTIwOGM0ZGUyZTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-30T07:47:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-03T06:12:41Z"}, "message": "Remove __extensions__ in names for a \"pretty name\"\n\nAs with the previous commit, this is targeted at removing the possibility of\ncollisions between statics. The main use case here is when there's a\ntype-parametric function with an inner static that's compiled as a library.\nBefore this commit, any impl would generate a path item of \"__extensions__\".\nThis changes this identifier to be a \"pretty name\", which is either the last\nelement of the path of the trait implemented or the last element of the type's\npath that's being implemented.  That doesn't quite cut it though, so the (trait,\ntype) pair is hashed and again used to append information to the symbol.\n\nEssentially, __extensions__ was removed for something nicer for debugging, and\nthen some more information was added to symbol name by including a hash of the\ntrait being implemented and type it's being implemented for. This should prevent\ncolliding names for inner statics in regular functions with similar names.", "tree": {"sha": "669d42fe25c44bcfb30d7a1b1b723556c661967e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/669d42fe25c44bcfb30d7a1b1b723556c661967e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36a4af49e0d66026e8ee7d156b2631208c4de2e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36a4af49e0d66026e8ee7d156b2631208c4de2e5", "html_url": "https://github.com/rust-lang/rust/commit/36a4af49e0d66026e8ee7d156b2631208c4de2e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36a4af49e0d66026e8ee7d156b2631208c4de2e5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4600212a385b41f0c718b6b07dbb6c2c4531314a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4600212a385b41f0c718b6b07dbb6c2c4531314a", "html_url": "https://github.com/rust-lang/rust/commit/4600212a385b41f0c718b6b07dbb6c2c4531314a"}], "stats": {"total": 157, "additions": 135, "deletions": 22}, "files": [{"sha": "170f38f3342898aff2acc45f90d245cd880498f3", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/36a4af49e0d66026e8ee7d156b2631208c4de2e5/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a4af49e0d66026e8ee7d156b2631208c4de2e5/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=36a4af49e0d66026e8ee7d156b2631208c4de2e5", "patch": "@@ -35,7 +35,7 @@ use std::run;\n use std::str;\n use std::vec;\n use syntax::ast;\n-use syntax::ast_map::{path, path_mod, path_name};\n+use syntax::ast_map::{path, path_mod, path_name, path_pretty_name};\n use syntax::attr;\n use syntax::attr::{AttrMetaMethods};\n use syntax::print::pprust;\n@@ -741,19 +741,40 @@ pub fn sanitize(s: &str) -> ~str {\n }\n \n pub fn mangle(sess: Session, ss: path) -> ~str {\n-    // Follow C++ namespace-mangling style\n+    // Follow C++ namespace-mangling style, see\n+    // http://en.wikipedia.org/wiki/Name_mangling for more info.\n \n-    let mut n = ~\"_ZN\"; // Begin name-sequence.\n+    let mut n = ~\"_ZN\"; // _Z == Begin name-sequence, N == nested\n \n+    // First, connect each component with <len, name> pairs.\n     for s in ss.iter() {\n         match *s {\n-            path_name(s) | path_mod(s) => {\n+            path_name(s) | path_mod(s) | path_pretty_name(s, _) => {\n                 let sani = sanitize(sess.str_of(s));\n                 n.push_str(fmt!(\"%u%s\", sani.len(), sani));\n             }\n         }\n     }\n     n.push_char('E'); // End name-sequence.\n+\n+    // next, if any identifiers are \"pretty\" and need extra information tacked\n+    // on, then use the hash to generate two unique characters. For now\n+    // hopefully 2 characters is enough to avoid collisions.\n+    static EXTRA_CHARS: &'static str =\n+        \"abcdefghijklmnopqrstuvwxyz\\\n+         ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\n+         0123456789\";\n+    for s in ss.iter() {\n+        match *s {\n+            path_pretty_name(_, extra) => {\n+                let hi = (extra >> 32) as u32 as uint;\n+                let lo = extra as u32 as uint;\n+                n.push_char(EXTRA_CHARS[hi % EXTRA_CHARS.len()] as char);\n+                n.push_char(EXTRA_CHARS[lo % EXTRA_CHARS.len()] as char);\n+            }\n+            _ => {}\n+        }\n+    }\n     n\n }\n "}, {"sha": "c3bc3e0fe25c1e7ffba2f6fcdd61877f2cf7bda9", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36a4af49e0d66026e8ee7d156b2631208c4de2e5/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a4af49e0d66026e8ee7d156b2631208c4de2e5/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=36a4af49e0d66026e8ee7d156b2631208c4de2e5", "patch": "@@ -188,6 +188,10 @@ pub static tag_impls_impl: uint = 0x84;\n pub static tag_items_data_item_inherent_impl: uint = 0x85;\n pub static tag_items_data_item_extension_impl: uint = 0x86;\n \n+pub static tag_path_elt_pretty_name: uint = 0x87;\n+pub static tag_path_elt_pretty_name_ident: uint = 0x88;\n+pub static tag_path_elt_pretty_name_extra: uint = 0x89;\n+\n pub struct LinkMeta {\n     name: @str,\n     vers: @str,"}, {"sha": "f7f8a17e0a9b864f2f606aae8c8b7a39db9ca8bb", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/36a4af49e0d66026e8ee7d156b2631208c4de2e5/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a4af49e0d66026e8ee7d156b2631208c4de2e5/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=36a4af49e0d66026e8ee7d156b2631208c4de2e5", "patch": "@@ -303,6 +303,15 @@ fn item_path(item_doc: ebml::Doc) -> ast_map::path {\n         } else if tag == tag_path_elt_name {\n             let str = elt_doc.as_str_slice();\n             result.push(ast_map::path_name(token::str_to_ident(str)));\n+        } else if tag == tag_path_elt_pretty_name {\n+            let name_doc = reader::get_doc(elt_doc,\n+                                           tag_path_elt_pretty_name_ident);\n+            let extra_doc = reader::get_doc(elt_doc,\n+                                            tag_path_elt_pretty_name_extra);\n+            let str = name_doc.as_str_slice();\n+            let extra = reader::doc_as_u64(extra_doc);\n+            result.push(ast_map::path_pretty_name(token::str_to_ident(str),\n+                                                  extra));\n         } else {\n             // ignore tag_path_len element\n         }"}, {"sha": "82f744930c0225fad94a55ef3427fc912f98fb56", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/36a4af49e0d66026e8ee7d156b2631208c4de2e5/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a4af49e0d66026e8ee7d156b2631208c4de2e5/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=36a4af49e0d66026e8ee7d156b2631208c4de2e5", "patch": "@@ -358,12 +358,21 @@ fn encode_path(ecx: &EncodeContext,\n     fn encode_path_elt(ecx: &EncodeContext,\n                        ebml_w: &mut writer::Encoder,\n                        elt: ast_map::path_elt) {\n-        let (tag, name) = match elt {\n-          ast_map::path_mod(name) => (tag_path_elt_mod, name),\n-          ast_map::path_name(name) => (tag_path_elt_name, name)\n-        };\n-\n-        ebml_w.wr_tagged_str(tag, ecx.tcx.sess.str_of(name));\n+        match elt {\n+            ast_map::path_mod(n) => {\n+                ebml_w.wr_tagged_str(tag_path_elt_mod, ecx.tcx.sess.str_of(n));\n+            }\n+            ast_map::path_name(n) => {\n+                ebml_w.wr_tagged_str(tag_path_elt_name, ecx.tcx.sess.str_of(n));\n+            }\n+            ast_map::path_pretty_name(n, extra) => {\n+                ebml_w.start_tag(tag_path_elt_pretty_name);\n+                ebml_w.wr_tagged_str(tag_path_elt_pretty_name_ident,\n+                                     ecx.tcx.sess.str_of(n));\n+                ebml_w.wr_tagged_u64(tag_path_elt_pretty_name_extra, extra);\n+                ebml_w.end_tag();\n+            }\n+        }\n     }\n \n     ebml_w.start_tag(tag_path);"}, {"sha": "2080554001f092f91ed00d76e1103da838ab3c8e", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36a4af49e0d66026e8ee7d156b2631208c4de2e5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a4af49e0d66026e8ee7d156b2631208c4de2e5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=36a4af49e0d66026e8ee7d156b2631208c4de2e5", "patch": "@@ -947,7 +947,8 @@ pub fn path_str(sess: session::Session, p: &[path_elt]) -> ~str {\n     let mut first = true;\n     for e in p.iter() {\n         match *e {\n-            ast_map::path_name(s) | ast_map::path_mod(s) => {\n+            ast_map::path_name(s) | ast_map::path_mod(s) |\n+            ast_map::path_pretty_name(s, _) => {\n                 if first {\n                     first = false\n                 } else {"}, {"sha": "3719562739f9b4650305778d0aaf95a672f37f86", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36a4af49e0d66026e8ee7d156b2631208c4de2e5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a4af49e0d66026e8ee7d156b2631208c4de2e5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=36a4af49e0d66026e8ee7d156b2631208c4de2e5", "patch": "@@ -34,7 +34,7 @@ use middle::trans::type_::Type;\n \n use std::c_str::ToCStr;\n use std::vec;\n-use syntax::ast_map::{path, path_mod, path_name};\n+use syntax::ast_map::{path, path_mod, path_name, path_pretty_name};\n use syntax::ast_util;\n use syntax::{ast, ast_map};\n use syntax::visit;\n@@ -254,7 +254,7 @@ pub fn trans_static_method_callee(bcx: @mut Block,\n     } else {\n         let path = csearch::get_item_path(bcx.tcx(), method_id);\n         match path[path.len()-1] {\n-            path_name(s) => { s }\n+            path_pretty_name(s, _) | path_name(s) => { s }\n             path_mod(_) => { fail!(\"path doesn't have a name?\") }\n         }\n     };"}, {"sha": "cf7eea31a61ef981e2af29869822f40f4763d15c", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36a4af49e0d66026e8ee7d156b2631208c4de2e5/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a4af49e0d66026e8ee7d156b2631208c4de2e5/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=36a4af49e0d66026e8ee7d156b2631208c4de2e5", "patch": "@@ -799,7 +799,8 @@ impl Repr for ast_map::path_elt {\n     fn repr(&self, tcx: ctxt) -> ~str {\n         match *self {\n             ast_map::path_mod(id) => id.repr(tcx),\n-            ast_map::path_name(id) => id.repr(tcx)\n+            ast_map::path_name(id) => id.repr(tcx),\n+            ast_map::path_pretty_name(id, _) => id.repr(tcx),\n         }\n     }\n }"}, {"sha": "cb1c0eab720046b8717a602e3ef74f24d02a1263", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/36a4af49e0d66026e8ee7d156b2631208c4de2e5/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a4af49e0d66026e8ee7d156b2631208c4de2e5/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=36a4af49e0d66026e8ee7d156b2631208c4de2e5", "patch": "@@ -22,13 +22,20 @@ use print::pprust;\n use visit::{Visitor, fn_kind};\n use visit;\n \n+use std::hash;\n use std::hashmap::HashMap;\n use std::vec;\n \n #[deriving(Clone, Eq)]\n pub enum path_elt {\n     path_mod(Ident),\n     path_name(Ident)\n+\n+    // A pretty name can come from an `impl` block. We attempt to select a\n+    // reasonable name for debuggers to see, but to guarantee uniqueness with\n+    // other paths the hash should also be taken into account during symbol\n+    // generation.\n+    path_pretty_name(Ident, u64),\n }\n \n pub type path = ~[path_elt];\n@@ -37,8 +44,9 @@ pub fn path_to_str_with_sep(p: &[path_elt], sep: &str, itr: @ident_interner)\n                          -> ~str {\n     let strs = do p.map |e| {\n         match *e {\n-          path_mod(s) => itr.get(s.name),\n-          path_name(s) => itr.get(s.name)\n+            path_mod(s) | path_name(s) | path_pretty_name(s, _) => {\n+                itr.get(s.name)\n+            }\n         }\n     };\n     strs.connect(sep)\n@@ -58,8 +66,9 @@ pub fn path_to_str(p: &[path_elt], itr: @ident_interner) -> ~str {\n \n pub fn path_elt_to_str(pe: path_elt, itr: @ident_interner) -> ~str {\n     match pe {\n-        path_mod(s) => itr.get(s.name).to_owned(),\n-        path_name(s) => itr.get(s.name).to_owned()\n+        path_mod(s) | path_name(s) | path_pretty_name(s, _) => {\n+            itr.get(s.name).to_owned()\n+        }\n     }\n }\n \n@@ -195,12 +204,33 @@ impl Visitor<()> for Ctx {\n         let item_path = @self.path.clone();\n         self.map.insert(i.id, node_item(i, item_path));\n         match i.node {\n-            item_impl(_, _, _, ref ms) => {\n+            item_impl(_, ref maybe_trait, ref ty, ref ms) => {\n                 let impl_did = ast_util::local_def(i.id);\n                 for m in ms.iter() {\n                     let extended = { self.extend(i.ident) };\n                     self.map_method(impl_did, extended, *m, false)\n                 }\n+\n+                // Right now the ident on impls is __extensions__ which isn't\n+                // very pretty when debugging, so attempt to select a better\n+                // name to use.\n+                let name = match *maybe_trait {\n+                    Some(ref trait_ref) => {\n+                        trait_ref.path.segments.last().identifier\n+                    }\n+                    None => {\n+                        match ty.node {\n+                            ty_path(ref p, _, _) => {\n+                                p.segments.last().identifier\n+                            }\n+                            // oh well, just give up for now\n+                            _ => { i.ident }\n+                        }\n+                    }\n+                };\n+\n+                let hash = hash::hash_keyed_2(maybe_trait, ty, 0, 0);\n+                self.path.push(path_pretty_name(name, hash));\n             }\n             item_enum(ref enum_definition, _) => {\n                 for v in (*enum_definition).variants.iter() {\n@@ -267,6 +297,7 @@ impl Visitor<()> for Ctx {\n             item_mod(_) | item_foreign_mod(_) => {\n                 self.path.push(path_mod(i.ident));\n             }\n+            item_impl(*) => {} // this was guessed above.\n             _ => self.path.push(path_name(i.ident))\n         }\n         visit::walk_item(self, i, ());"}, {"sha": "841da21c5e8459c546cae4a3367036d78d5decc3", "filename": "src/test/auxiliary/inner_static.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/36a4af49e0d66026e8ee7d156b2631208c4de2e5/src%2Ftest%2Fauxiliary%2Finner_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a4af49e0d66026e8ee7d156b2631208c4de2e5/src%2Ftest%2Fauxiliary%2Finner_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Finner_static.rs?ref=36a4af49e0d66026e8ee7d156b2631208c4de2e5", "patch": "@@ -9,20 +9,53 @@\n // except according to those terms.\n \n pub struct A<T>;\n+pub struct B<T>;\n+\n+pub mod test {\n+    pub struct A<T>;\n+}\n \n impl<T> A<T> {\n     pub fn foo(&self) -> int {\n-        static a: int = 5;\n+        static a: int = 1;\n         return a\n     }\n \n     pub fn bar(&self) -> int {\n+        static a: int = 2;\n+        return a;\n+    }\n+}\n+\n+impl<T> B<T> {\n+    pub fn foo(&self) -> int {\n         static a: int = 3;\n+        return a\n+    }\n+\n+    pub fn bar(&self) -> int {\n+        static a: int = 4;\n+        return a;\n+    }\n+}\n+\n+impl<T> test::A<T> {\n+    pub fn foo(&self) -> int {\n+        static a: int = 5;\n+        return a\n+    }\n+\n+    pub fn bar(&self) -> int {\n+        static a: int = 6;\n         return a;\n     }\n }\n \n pub fn foo() -> int {\n     let a = A::<()>;\n-    return a.foo() + a.bar();\n+    let b = B::<()>;\n+    let c = test::A::<()>;\n+    return a.foo() + a.bar() +\n+           b.foo() + b.bar() +\n+           c.foo() + c.bar();\n }"}, {"sha": "3bd806aeef3e5df06666458f84f74faee54e3ee7", "filename": "src/test/run-pass/inner-static.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36a4af49e0d66026e8ee7d156b2631208c4de2e5/src%2Ftest%2Frun-pass%2Finner-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a4af49e0d66026e8ee7d156b2631208c4de2e5/src%2Ftest%2Frun-pass%2Finner-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finner-static.rs?ref=36a4af49e0d66026e8ee7d156b2631208c4de2e5", "patch": "@@ -15,5 +15,9 @@ extern mod inner_static;\n \n pub fn main() {\n     let a = inner_static::A::<()>;\n-    assert_eq!(a.bar(), 3);\n+    let b = inner_static::B::<()>;\n+    let c = inner_static::test::A::<()>;\n+    assert_eq!(a.bar(), 2);\n+    assert_eq!(b.bar(), 4);\n+    assert_eq!(c.bar(), 6);\n }"}]}