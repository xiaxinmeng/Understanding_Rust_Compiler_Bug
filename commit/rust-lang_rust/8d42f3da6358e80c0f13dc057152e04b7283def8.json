{"sha": "8d42f3da6358e80c0f13dc057152e04b7283def8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNDJmM2RhNjM1OGU4MGMwZjEzZGMwNTcxNTJlMDRiNzI4M2RlZjg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-06-14T17:17:15Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-06-14T17:27:25Z"}, "message": "don't warn for fully qual inherent methods\n\nBut do continue to warn for trait methods.", "tree": {"sha": "9fc638ea529ba92102fb970bb9f4de98d3916c7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fc638ea529ba92102fb970bb9f4de98d3916c7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d42f3da6358e80c0f13dc057152e04b7283def8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d42f3da6358e80c0f13dc057152e04b7283def8", "html_url": "https://github.com/rust-lang/rust/commit/8d42f3da6358e80c0f13dc057152e04b7283def8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d42f3da6358e80c0f13dc057152e04b7283def8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19ba219e99f2f78fea290716759aa1856172332f", "url": "https://api.github.com/repos/rust-lang/rust/commits/19ba219e99f2f78fea290716759aa1856172332f", "html_url": "https://github.com/rust-lang/rust/commit/19ba219e99f2f78fea290716759aa1856172332f"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "f321d62edf6db7aa969872b773adb0e0acc6a160", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d42f3da6358e80c0f13dc057152e04b7283def8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d42f3da6358e80c0f13dc057152e04b7283def8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=8d42f3da6358e80c0f13dc057152e04b7283def8", "patch": "@@ -10,6 +10,7 @@ pub use self::suggest::{SelfSource, TraitInfo};\n pub use self::CandidateSource::*;\n pub use self::MethodError::*;\n \n+use crate::check::method::probe::PickKind;\n use crate::check::FnCtxt;\n use rustc_ast::ast::Mutability;\n use rustc_data_structures::sync::Lrc;\n@@ -552,7 +553,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if span.edition() < Edition::Edition2021 {\n             if let sym::try_into | sym::try_from | sym::from_iter = method_name.name {\n-                if !matches!(tcx.crate_name(pick.item.def_id.krate), sym::std | sym::core) {\n+                // No need to warn if either:\n+                //\n+                // * The method comes from std/core, since ten it's the built-in trait.\n+                // * This is an inherent method called on a specific type, like `Vec::foo(...)`,\n+                //   since such methods take precedence over trait methods.\n+                if !matches!(tcx.crate_name(pick.item.def_id.krate), sym::std | sym::core)\n+                    && !matches!(pick.kind, PickKind::InherentImplPick)\n+                {\n                     tcx.struct_span_lint_hir(FUTURE_PRELUDE_COLLISION, expr_id, span, |lint| {\n                         // \"type\" refers to either a type or, more likely, a trait from which\n                         // the associated function or method is from."}, {"sha": "1ae2b95d515d820efcaa56475c9d9db192d15aad", "filename": "src/test/ui/rust-2021/generic-type-collision.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8d42f3da6358e80c0f13dc057152e04b7283def8/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8d42f3da6358e80c0f13dc057152e04b7283def8/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.fixed?ref=8d42f3da6358e80c0f13dc057152e04b7283def8", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+// run-rustfix\n+// edition 2018\n+\n+trait MyTrait<A> {\n+    fn from_iter(x: Option<A>);\n+}\n+\n+impl<T> MyTrait<()> for Vec<T> {\n+    fn from_iter(_: Option<()>) {}\n+}\n+\n+fn main() {\n+    <Vec<i32> as MyTrait<_>>::from_iter(None);\n+    //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n+}"}, {"sha": "e203656163c619d60b0c921ba8b94196cee8fbce", "filename": "src/test/ui/rust-2021/generic-type-collision.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8d42f3da6358e80c0f13dc057152e04b7283def8/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d42f3da6358e80c0f13dc057152e04b7283def8/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.rs?ref=8d42f3da6358e80c0f13dc057152e04b7283def8", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+// run-rustfix\n+// edition 2018\n+\n+trait MyTrait<A> {\n+    fn from_iter(x: Option<A>);\n+}\n+\n+impl<T> MyTrait<()> for Vec<T> {\n+    fn from_iter(_: Option<()>) {}\n+}\n+\n+fn main() {\n+    <Vec<i32>>::from_iter(None);\n+    //~^ WARNING trait-associated function `from_iter` will become ambiguous in Rust 2021\n+}"}, {"sha": "3acc6185a61b3107147a1380448303d169a2f401", "filename": "src/test/ui/rust-2021/generic-type-collision.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d42f3da6358e80c0f13dc057152e04b7283def8/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d42f3da6358e80c0f13dc057152e04b7283def8/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.stderr?ref=8d42f3da6358e80c0f13dc057152e04b7283def8", "patch": "@@ -0,0 +1,10 @@\n+warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n+  --> $DIR/generic-type-collision.rs:14:5\n+   |\n+LL |     <Vec<i32>>::from_iter(None);\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Vec<i32> as MyTrait<_>>::from_iter`\n+   |\n+   = note: `#[warn(future_prelude_collision)]` on by default\n+\n+warning: 1 warning emitted\n+"}]}