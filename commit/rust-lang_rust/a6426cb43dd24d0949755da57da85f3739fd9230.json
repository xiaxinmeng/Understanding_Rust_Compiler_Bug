{"sha": "a6426cb43dd24d0949755da57da85f3739fd9230", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NDI2Y2I0M2RkMjRkMDk0OTc1NWRhNTdkYTg1ZjM3MzlmZDkyMzA=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-10-24T23:58:26Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-10-25T18:12:21Z"}, "message": "return the new usable size from reallocate_inplace\n\nThe real size is also more useful than just a boolean, and the caller\ncan easily determine if the operation failed from the real size. In most\ncases, the caller is only going to be growing the allocation so a branch\ncan be avoided.\n\n[breaking-change]", "tree": {"sha": "0fffafd9b8657171044833e4d4c636d4b6dd350c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fffafd9b8657171044833e4d4c636d4b6dd350c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6426cb43dd24d0949755da57da85f3739fd9230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6426cb43dd24d0949755da57da85f3739fd9230", "html_url": "https://github.com/rust-lang/rust/commit/a6426cb43dd24d0949755da57da85f3739fd9230", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6426cb43dd24d0949755da57da85f3739fd9230/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bc4d3ec23cc88155173729e60df54c8aa4949a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc4d3ec23cc88155173729e60df54c8aa4949a6", "html_url": "https://github.com/rust-lang/rust/commit/2bc4d3ec23cc88155173729e60df54c8aa4949a6"}], "stats": {"total": 32, "additions": 13, "deletions": 19}, "files": [{"sha": "6827ea1479d8ac86125db24286f0d8020bea3d3f", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a6426cb43dd24d0949755da57da85f3739fd9230/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6426cb43dd24d0949755da57da85f3739fd9230/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=a6426cb43dd24d0949755da57da85f3739fd9230", "patch": "@@ -38,8 +38,8 @@ pub unsafe fn reallocate(ptr: *mut u8, old_size: uint, size: uint, align: uint)\n /// Extends or shrinks the allocation referenced by `ptr` to `size` bytes of\n /// memory in-place.\n ///\n-/// Returns true if successful, otherwise false if the allocation was not\n-/// altered.\n+/// If the operation succeeds, it returns `usable_size(size, align)` and if it\n+/// fails (or is a no-op) it returns `usable_size(old_size, align)`.\n ///\n /// Behavior is undefined if the requested size is 0 or the alignment is not a\n /// power of 2. The alignment must be no larger than the largest supported page\n@@ -49,7 +49,7 @@ pub unsafe fn reallocate(ptr: *mut u8, old_size: uint, size: uint, align: uint)\n /// create the allocation referenced by `ptr`. The `old_size` parameter may be\n /// any value in range_inclusive(requested_size, usable_size).\n #[inline]\n-pub unsafe fn reallocate_inplace(ptr: *mut u8, old_size: uint, size: uint, align: uint) -> bool {\n+pub unsafe fn reallocate_inplace(ptr: *mut u8, old_size: uint, size: uint, align: uint) -> uint {\n     imp::reallocate_inplace(ptr, old_size, size, align)\n }\n \n@@ -178,16 +178,10 @@ mod imp {\n     }\n \n     #[inline]\n-    pub unsafe fn reallocate_inplace(ptr: *mut u8, old_size: uint, size: uint,\n-                                     align: uint) -> bool {\n+    pub unsafe fn reallocate_inplace(ptr: *mut u8, _old_size: uint, size: uint,\n+                                     align: uint) -> uint {\n         let flags = align_to_flags(align);\n-        let new_size = je_xallocx(ptr as *mut c_void, size as size_t, 0, flags) as uint;\n-        // checking for failure to shrink is tricky\n-        if size < old_size {\n-            usable_size(size, align) == new_size as uint\n-        } else {\n-            new_size >= size\n-        }\n+        je_xallocx(ptr as *mut c_void, size as size_t, 0, flags) as uint\n     }\n \n     #[inline]\n@@ -260,9 +254,9 @@ mod imp {\n     }\n \n     #[inline]\n-    pub unsafe fn reallocate_inplace(_ptr: *mut u8, old_size: uint, size: uint,\n-                                     _align: uint) -> bool {\n-        size == old_size\n+    pub unsafe fn reallocate_inplace(_ptr: *mut u8, old_size: uint, _size: uint,\n+                                     _align: uint) -> uint {\n+        old_size\n     }\n \n     #[inline]\n@@ -328,9 +322,9 @@ mod imp {\n     }\n \n     #[inline]\n-    pub unsafe fn reallocate_inplace(_ptr: *mut u8, old_size: uint, size: uint,\n-                                     _align: uint) -> bool {\n-        size == old_size\n+    pub unsafe fn reallocate_inplace(_ptr: *mut u8, old_size: uint, _size: uint,\n+                                     _align: uint) -> uint {\n+        old_size\n     }\n \n     #[inline]\n@@ -363,7 +357,7 @@ mod test {\n             let ptr = heap::allocate(size, 8);\n             let ret = heap::reallocate_inplace(ptr, size, size, 8);\n             heap::deallocate(ptr, size, 8);\n-            assert!(ret);\n+            assert_eq!(ret, heap::usable_size(size, 8));\n         }\n     }\n "}]}