{"sha": "7683180be5b51bb626e0cf372a3dee31cab8b61c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ODMxODBiZTViNTFiYjYyNmUwY2YzNzJhM2RlZTMxY2FiOGI2MWM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-07-25T12:44:06Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-21T06:11:50Z"}, "message": "rustc: implement and use Default on more types.", "tree": {"sha": "396a19da6a63f8549da45238f134c3433dde7b44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/396a19da6a63f8549da45238f134c3433dde7b44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7683180be5b51bb626e0cf372a3dee31cab8b61c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7683180be5b51bb626e0cf372a3dee31cab8b61c", "html_url": "https://github.com/rust-lang/rust/commit/7683180be5b51bb626e0cf372a3dee31cab8b61c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7683180be5b51bb626e0cf372a3dee31cab8b61c/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da622a3796f5488d89daaf3b32ceb509ce4d669b", "url": "https://api.github.com/repos/rust-lang/rust/commits/da622a3796f5488d89daaf3b32ceb509ce4d669b", "html_url": "https://github.com/rust-lang/rust/commit/da622a3796f5488d89daaf3b32ceb509ce4d669b"}], "stats": {"total": 134, "additions": 61, "deletions": 73}, "files": [{"sha": "0dd693e7217e768af59c17ec1cfd2dd90c72d2ee", "filename": "src/Cargo.lock", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=7683180be5b51bb626e0cf372a3dee31cab8b61c", "patch": "@@ -659,6 +659,14 @@ dependencies = [\n  \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"ena\"\n+version = \"0.10.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"env_logger\"\n version = \"0.5.12\"\n@@ -2196,7 +2204,7 @@ name = \"rustc_data_structures\"\n version = \"0.0.0\"\n dependencies = [\n  \"cfg-if 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ena 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ena 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n  \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3261,6 +3269,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198\"\n \"checksum either 1.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3be565ca5c557d7f59e7cfcf1844f9e3033650c929c6566f511e8005f205c1d0\"\n \"checksum elasticlunr-rs 2.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4837d77a1e157489a3933b743fd774ae75074e0e390b2b7f071530048a0d87ee\"\n+\"checksum ena 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"25b4e5febb25f08c49f1b07dc33a182729a6b21edfb562b5aef95f78e0dbe5bb\"\n \"checksum ena 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"88dc8393b3c7352f94092497f6b52019643e493b6b890eb417cdb7c46117e621\"\n \"checksum env_logger 0.5.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f4d7e69c283751083d53d01eac767407343b8b69c4bd70058e08adc2637cb257\"\n \"checksum env_logger 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"afb070faf94c85d17d50ca44f6ad076bce18ae92f0037d350947240a36e9d42e\""}, {"sha": "63b749c548e2419157f53b19d5b6d5819c09f56c", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=7683180be5b51bb626e0cf372a3dee31cab8b61c", "patch": "@@ -101,11 +101,11 @@ impl DepGraph {\n         DepGraph {\n             data: Some(Lrc::new(DepGraphData {\n                 previous_work_products: prev_work_products,\n-                dep_node_debug: Lock::new(Default::default()),\n+                dep_node_debug: Default::default(),\n                 current: Lock::new(CurrentDepGraph::new()),\n                 previous: prev_graph,\n                 colors: Lock::new(DepNodeColorMap::new(prev_graph_node_count)),\n-                loaded_from_cache: Lock::new(Default::default()),\n+                loaded_from_cache: Default::default(),\n             })),\n             fingerprints: Lrc::new(Lock::new(fingerprints)),\n         }"}, {"sha": "eb9bd183fd939a12d8defaa5240d64f4f3d716eb", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=7683180be5b51bb626e0cf372a3dee31cab8b61c", "patch": "@@ -36,6 +36,7 @@ use util::nodemap::NodeMap;\n /// Internally the DefPathTable holds a tree of DefKeys, where each DefKey\n /// stores the DefIndex of its parent.\n /// There is one DefPathTable for each crate.\n+#[derive(Default)]\n pub struct DefPathTable {\n     index_to_key: [Vec<DefKey>; 2],\n     def_path_hashes: [Vec<DefPathHash>; 2],\n@@ -153,7 +154,7 @@ impl Decodable for DefPathTable {\n /// The definition table containing node definitions.\n /// It holds the DefPathTable for local DefIds/DefPaths and it also stores a\n /// mapping from NodeIds to local DefIds.\n-#[derive(Clone)]\n+#[derive(Clone, Default)]\n pub struct Definitions {\n     table: DefPathTable,\n     node_to_def_index: NodeMap<DefIndex>,\n@@ -412,20 +413,8 @@ impl Definitions {\n     ///     ascending order.\n     ///\n     /// FIXME: there is probably a better place to put this comment.\n-    pub fn new() -> Definitions {\n-        Definitions {\n-            table: DefPathTable {\n-                index_to_key: [vec![], vec![]],\n-                def_path_hashes: [vec![], vec![]],\n-            },\n-            node_to_def_index: Default::default(),\n-            def_index_to_node: [vec![], vec![]],\n-            node_to_hir_id: IndexVec::new(),\n-            parent_modules_of_macro_defs: Default::default(),\n-            expansions_that_defined: Default::default(),\n-            next_disambiguator: Default::default(),\n-            def_index_to_span: Default::default(),\n-        }\n+    pub fn new() -> Self {\n+        Self::default()\n     }\n \n     pub fn def_path_table(&self) -> &DefPathTable {"}, {"sha": "7c623a1874e7b4cc7bbf51b05d19eab57294652c", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=7683180be5b51bb626e0cf372a3dee31cab8b61c", "patch": "@@ -369,8 +369,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for Span {\n             // times, we cache a stable hash of it and hash that instead of\n             // recursing every time.\n             thread_local! {\n-                static CACHE: RefCell<FxHashMap<hygiene::Mark, u64>> =\n-                    RefCell::new(Default::default());\n+                static CACHE: RefCell<FxHashMap<hygiene::Mark, u64>> = Default::default();\n             }\n \n             let sub_hash: u64 = CACHE.with(|cache| {"}, {"sha": "391bfc428c3bb49696f288a30456ee7a1e1627f6", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=7683180be5b51bb626e0cf372a3dee31cab8b61c", "patch": "@@ -29,6 +29,7 @@ use std::{cmp, fmt, mem, u32};\n \n mod taint;\n \n+#[derive(Default)]\n pub struct RegionConstraintCollector<'tcx> {\n     /// For each `RegionVid`, the corresponding `RegionVariableOrigin`.\n     var_infos: IndexVec<RegionVid, RegionVariableInfo>,\n@@ -341,17 +342,8 @@ impl TaintDirections {\n }\n \n impl<'tcx> RegionConstraintCollector<'tcx> {\n-    pub fn new() -> RegionConstraintCollector<'tcx> {\n-        RegionConstraintCollector {\n-            var_infos: VarInfos::default(),\n-            data: RegionConstraintData::default(),\n-            lubs: Default::default(),\n-            glbs: Default::default(),\n-            bound_count: 0,\n-            undo_log: Vec::new(),\n-            unification_table: ut::UnificationTable::new(),\n-            any_unifications: false,\n-        }\n+    pub fn new() -> Self {\n+        Self::default()\n     }\n \n     pub fn num_region_vars(&self) -> usize {"}, {"sha": "469d77403a3d82ae45faf16115eea847b7422bce", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=7683180be5b51bb626e0cf372a3dee31cab8b61c", "patch": "@@ -1233,7 +1233,7 @@ pub fn check_ast_crate(\n     let (passes, buffered) = if pre_expansion {\n         (\n             sess.lint_store.borrow_mut().pre_expansion_passes.take(),\n-            LintBuffer::new(),\n+            LintBuffer::default(),\n         )\n     } else {\n         ("}, {"sha": "4b878b862526bde194af600cec2bfacc542cbcf7", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=7683180be5b51bb626e0cf372a3dee31cab8b61c", "patch": "@@ -490,15 +490,12 @@ mod levels;\n \n pub use self::levels::{LintLevelSets, LintLevelMap};\n \n+#[derive(Default)]\n pub struct LintBuffer {\n     map: NodeMap<Vec<BufferedEarlyLint>>,\n }\n \n impl LintBuffer {\n-    pub fn new() -> LintBuffer {\n-        LintBuffer { map: ::std::default::Default::default() }\n-    }\n-\n     pub fn add_lint(&mut self,\n                     lint: &'static Lint,\n                     id: ast::NodeId,"}, {"sha": "633c58413780644ddf52d90ba6b7e55759cc5480", "filename": "src/librustc/middle/borrowck.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck.rs?ref=7683180be5b51bb626e0cf372a3dee31cab8b61c", "patch": "@@ -18,9 +18,15 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n #[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum SignalledError { SawSomeError, NoErrorsSeen }\n \n+impl Default for SignalledError {\n+    fn default() -> SignalledError {\n+        SignalledError::NoErrorsSeen\n+    }\n+}\n+\n impl_stable_hash_for!(enum self::SignalledError { SawSomeError, NoErrorsSeen });\n \n-#[derive(Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Debug, Default, RustcEncodable, RustcDecodable)]\n pub struct BorrowCheckResult {\n     pub used_mut_nodes: FxHashSet<HirId>,\n     pub signalled_any_error: SignalledError,"}, {"sha": "6ff450508d13641a36d9de750e882e3de55c83ba", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=7683180be5b51bb626e0cf372a3dee31cab8b61c", "patch": "@@ -2741,9 +2741,7 @@ fn insert_late_bound_lifetimes(\n         constrained_by_input.visit_ty(arg_ty);\n     }\n \n-    let mut appears_in_output = AllCollector {\n-        regions: Default::default(),\n-    };\n+    let mut appears_in_output = AllCollector::default();\n     intravisit::walk_fn_ret_ty(&mut appears_in_output, &decl.output);\n \n     debug!(\n@@ -2755,9 +2753,7 @@ fn insert_late_bound_lifetimes(\n     //\n     // Subtle point: because we disallow nested bindings, we can just\n     // ignore binders here and scrape up all names we see.\n-    let mut appears_in_where_clause = AllCollector {\n-        regions: Default::default(),\n-    };\n+    let mut appears_in_where_clause = AllCollector::default();\n     appears_in_where_clause.visit_generics(generics);\n \n     for param in &generics.params {\n@@ -2854,6 +2850,7 @@ fn insert_late_bound_lifetimes(\n         }\n     }\n \n+    #[derive(Default)]\n     struct AllCollector {\n         regions: FxHashSet<hir::LifetimeName>,\n     }"}, {"sha": "d688d93b80842c6734841c7b4951b2bb7db6460a", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=7683180be5b51bb626e0cf372a3dee31cab8b61c", "patch": "@@ -1149,7 +1149,7 @@ pub fn build_session_(\n         local_crate_source_file,\n         working_dir,\n         lint_store: RwLock::new(lint::LintStore::new()),\n-        buffered_lints: Lock::new(Some(lint::LintBuffer::new())),\n+        buffered_lints: Lock::new(Some(Default::default())),\n         one_time_diagnostics: Default::default(),\n         plugin_llvm_passes: OneThread::new(RefCell::new(Vec::new())),\n         plugin_attributes: OneThread::new(RefCell::new(Vec::new())),"}, {"sha": "ad200449f8907dda9adb00be03bb31e0b7044499", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=7683180be5b51bb626e0cf372a3dee31cab8b61c", "patch": "@@ -3183,7 +3183,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n /// rather, you should request the vector for a specific type via\n /// `tcx.inherent_impls(def_id)` so as to minimize your dependencies\n /// (constructing this map requires touching the entire crate).\n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, Default)]\n pub struct CrateInherentImpls {\n     pub inherent_impls: DefIdMap<Lrc<Vec<DefId>>>,\n }"}, {"sha": "0463da00c89d98d9134952f7bd560c427ee58001", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=7683180be5b51bb626e0cf372a3dee31cab8b61c", "patch": "@@ -64,7 +64,7 @@ fn reachable_non_generics_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     if !tcx.sess.opts.output_types.should_codegen() {\n-        return Lrc::new(Default::default())\n+        return Default::default();\n     }\n \n     // Check to see if this crate is a \"special runtime crate\". These"}, {"sha": "5b3dd38adf23f98a8eb8eb16a3f2e84e89d3bc8f", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=7683180be5b51bb626e0cf372a3dee31cab8b61c", "patch": "@@ -9,7 +9,7 @@ path = \"lib.rs\"\n crate-type = [\"dylib\"]\n \n [dependencies]\n-ena = \"0.9.3\"\n+ena = \"0.10.1\"\n log = \"0.4\"\n rustc_cratesio_shim = { path = \"../librustc_cratesio_shim\" }\n serialize = { path = \"../libserialize\" }"}, {"sha": "0b42cb1edddecc23eb9fde51fa32ec09e940f1f8", "filename": "src/librustc_data_structures/snapshot_map/mod.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsnapshot_map%2Fmod.rs?ref=7683180be5b51bb626e0cf372a3dee31cab8b61c", "patch": "@@ -23,6 +23,18 @@ pub struct SnapshotMap<K, V>\n     undo_log: Vec<UndoLog<K, V>>,\n }\n \n+// HACK(eddyb) manual impl avoids `Default` bounds on `K` and `V`.\n+impl<K, V> Default for SnapshotMap<K, V>\n+    where K: Hash + Clone + Eq\n+{\n+    fn default() -> Self {\n+        SnapshotMap {\n+            map: Default::default(),\n+            undo_log: Default::default(),\n+        }\n+    }\n+}\n+\n pub struct Snapshot {\n     len: usize,\n }\n@@ -35,17 +47,6 @@ enum UndoLog<K, V> {\n     Noop,\n }\n \n-impl<K, V> Default for SnapshotMap<K, V>\n-    where K: Hash + Clone + Eq\n-{\n-    fn default() -> Self {\n-        SnapshotMap {\n-            map: FxHashMap::default(),\n-            undo_log: vec![],\n-        }\n-    }\n-}\n-\n impl<K, V> SnapshotMap<K, V>\n     where K: Hash + Clone + Eq\n {"}, {"sha": "fd5dfab9e61be6702d36a264810f8657e41cbe04", "filename": "src/librustc_data_structures/transitive_relation.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftransitive_relation.rs?ref=7683180be5b51bb626e0cf372a3dee31cab8b61c", "patch": "@@ -42,6 +42,18 @@ pub struct TransitiveRelation<T: Clone + Debug + Eq + Hash> {\n     closure: Lock<Option<BitMatrix<usize, usize>>>,\n }\n \n+// HACK(eddyb) manual impl avoids `Default` bound on `T`.\n+impl<T: Clone + Debug + Eq + Hash> Default for TransitiveRelation<T> {\n+    fn default() -> Self {\n+        TransitiveRelation {\n+            elements: Default::default(),\n+            map: Default::default(),\n+            edges: Default::default(),\n+            closure: Default::default(),\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n struct Index(usize);\n \n@@ -51,17 +63,6 @@ struct Edge {\n     target: Index,\n }\n \n-impl<T: Clone + Debug + Eq + Hash> Default for TransitiveRelation<T> {\n-    fn default() -> TransitiveRelation<T> {\n-        TransitiveRelation {\n-            elements: vec![],\n-            map: FxHashMap::default(),\n-            edges: vec![],\n-            closure: Lock::new(None),\n-        }\n-    }\n-}\n-\n impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n     pub fn is_empty(&self) -> bool {\n         self.edges.is_empty()"}, {"sha": "d9dff1441296d210d4b0a9bbb0990085fb53a772", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7683180be5b51bb626e0cf372a3dee31cab8b61c/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=7683180be5b51bb626e0cf372a3dee31cab8b61c", "patch": "@@ -22,7 +22,6 @@ use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::{self, CrateInherentImpls, TyCtxt};\n-use rustc::util::nodemap::DefIdMap;\n \n use rustc_data_structures::sync::Lrc;\n use syntax::ast;\n@@ -37,9 +36,7 @@ pub fn crate_inherent_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let krate = tcx.hir.krate();\n     let mut collect = InherentCollect {\n         tcx,\n-        impls_map: CrateInherentImpls {\n-            inherent_impls: DefIdMap::default()\n-        }\n+        impls_map: Default::default(),\n     };\n     krate.visit_all_item_likes(&mut collect);\n     Lrc::new(collect.impls_map)"}]}