{"sha": "b03f1e7357d84667973b5a549388edbf35c7196b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwM2YxZTczNTdkODQ2Njc5NzNiNWE1NDkzODhlZGJmMzVjNzE5NmI=", "commit": {"author": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-07-19T20:00:57Z"}, "committer": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-07-19T20:04:03Z"}, "message": "Missed the methods of UdpWatcher.", "tree": {"sha": "a236b7464683178574828b6ad650ab6c7cafac03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a236b7464683178574828b6ad650ab6c7cafac03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b03f1e7357d84667973b5a549388edbf35c7196b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b03f1e7357d84667973b5a549388edbf35c7196b", "html_url": "https://github.com/rust-lang/rust/commit/b03f1e7357d84667973b5a549388edbf35c7196b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b03f1e7357d84667973b5a549388edbf35c7196b/comments", "author": null, "committer": null, "parents": [{"sha": "968f7f5d3d64b481fb68651d9274768fe5e98853", "url": "https://api.github.com/repos/rust-lang/rust/commits/968f7f5d3d64b481fb68651d9274768fe5e98853", "html_url": "https://github.com/rust-lang/rust/commit/968f7f5d3d64b481fb68651d9274768fe5e98853"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "86891a9df8aded4b75cc8c7b86ec96057397a6f9", "filename": "src/libstd/rt/uv/net.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b03f1e7357d84667973b5a549388edbf35c7196b/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03f1e7357d84667973b5a549388edbf35c7196b/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fnet.rs?ref=b03f1e7357d84667973b5a549388edbf35c7196b", "patch": "@@ -359,7 +359,7 @@ impl UdpWatcher {\n         }\n     }\n \n-    pub fn bind(&self, address: IpAddr) -> Result<(), UvError> {\n+    pub fn bind(&mut self, address: IpAddr) -> Result<(), UvError> {\n         do ip_as_uv_ip(address) |addr| {\n             let result = unsafe {\n                 match addr {\n@@ -374,10 +374,9 @@ impl UdpWatcher {\n         }\n     }\n \n-    pub fn recv_start(&self, alloc: AllocCallback, cb: UdpReceiveCallback) {\n+    pub fn recv_start(&mut self, alloc: AllocCallback, cb: UdpReceiveCallback) {\n         {\n-            let mut this = *self;\n-            let data = this.get_watcher_data();\n+            let data = self.get_watcher_data();\n             data.alloc_cb = Some(alloc);\n             data.udp_recv_cb = Some(cb);\n         }\n@@ -409,14 +408,13 @@ impl UdpWatcher {\n         }\n     }\n \n-    pub fn recv_stop(&self) {\n+    pub fn recv_stop(&mut self) {\n         unsafe { uvll::udp_recv_stop(self.native_handle()); }\n     }\n \n-    pub fn send(&self, buf: Buf, address: IpAddr, cb: UdpSendCallback) {\n+    pub fn send(&mut self, buf: Buf, address: IpAddr, cb: UdpSendCallback) {\n         {\n-            let mut this = *self;\n-            let data = this.get_watcher_data();\n+            let data = self.get_watcher_data();\n             assert!(data.udp_send_cb.is_none());\n             data.udp_send_cb = Some(cb);\n         }\n@@ -620,7 +618,7 @@ mod test {\n     fn udp_bind_close_ip4() {\n         do run_in_bare_thread() {\n             let mut loop_ = Loop::new();\n-            let udp_watcher = { UdpWatcher::new(&mut loop_) };\n+            let mut udp_watcher = { UdpWatcher::new(&mut loop_) };\n             let addr = next_test_ip4();\n             udp_watcher.bind(addr);\n             udp_watcher.close(||());\n@@ -633,7 +631,7 @@ mod test {\n     fn udp_bind_close_ip6() {\n         do run_in_bare_thread() {\n             let mut loop_ = Loop::new();\n-            let udp_watcher = { UdpWatcher::new(&mut loop_) };\n+            let mut udp_watcher = { UdpWatcher::new(&mut loop_) };\n             let addr = next_test_ip6();\n             udp_watcher.bind(addr);\n             udp_watcher.close(||());\n@@ -798,15 +796,15 @@ mod test {\n             let server_addr = next_test_ip4();\n             let client_addr = next_test_ip4();\n \n-            let server = UdpWatcher::new(&loop_);\n+            let mut server = UdpWatcher::new(&loop_);\n             assert!(server.bind(server_addr).is_ok());\n \n             rtdebug!(\"starting read\");\n             let alloc: AllocCallback = |size| {\n                 vec_to_uv_buf(vec::from_elem(size, 0u8))\n             };\n \n-            do server.recv_start(alloc) |server, nread, buf, src, flags, status| {\n+            do server.recv_start(alloc) |mut server, nread, buf, src, flags, status| {\n                 server.recv_stop();\n                 rtdebug!(\"i'm reading!\");\n                 assert!(status.is_none());\n@@ -830,7 +828,7 @@ mod test {\n \n             do Thread::start {\n                 let mut loop_ = Loop::new();\n-                let client = UdpWatcher::new(&loop_);\n+                let mut client = UdpWatcher::new(&loop_);\n                 assert!(client.bind(client_addr).is_ok());\n                 let msg = ~[0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n                 let buf = slice_to_uv_buf(msg);\n@@ -857,15 +855,15 @@ mod test {\n             let server_addr = next_test_ip6();\n             let client_addr = next_test_ip6();\n \n-            let server = UdpWatcher::new(&loop_);\n+            let mut server = UdpWatcher::new(&loop_);\n             assert!(server.bind(server_addr).is_ok());\n \n             rtdebug!(\"starting read\");\n             let alloc: AllocCallback = |size| {\n                 vec_to_uv_buf(vec::from_elem(size, 0u8))\n             };\n \n-            do server.recv_start(alloc) |server, nread, buf, src, flags, status| {\n+            do server.recv_start(alloc) |mut server, nread, buf, src, flags, status| {\n                 server.recv_stop();\n                 rtdebug!(\"i'm reading!\");\n                 assert!(status.is_none());\n@@ -889,7 +887,7 @@ mod test {\n \n             do Thread::start {\n                 let mut loop_ = Loop::new();\n-                let client = UdpWatcher::new(&loop_);\n+                let mut client = UdpWatcher::new(&loop_);\n                 assert!(client.bind(client_addr).is_ok());\n                 let msg = ~[0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n                 let buf = slice_to_uv_buf(msg);"}, {"sha": "3bb38c0cf79ad8380c6c65efffefe2a45468e1dc", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b03f1e7357d84667973b5a549388edbf35c7196b/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b03f1e7357d84667973b5a549388edbf35c7196b/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=b03f1e7357d84667973b5a549388edbf35c7196b", "patch": "@@ -264,7 +264,7 @@ impl IoFactory for UvIoFactory {\n     }\n \n     fn udp_bind(&mut self, addr: IpAddr) -> Result<~RtioUdpSocketObject, IoError> {\n-        let /*mut*/ watcher = UdpWatcher::new(self.uv_loop());\n+        let mut watcher = UdpWatcher::new(self.uv_loop());\n         match watcher.bind(addr) {\n             Ok(_) => Ok(~UvUdpSocket(watcher)),\n             Err(uverr) => {\n@@ -497,7 +497,7 @@ impl RtioUdpSocket for UvUdpSocket {\n             assert!(!sched.in_task_context());\n             let task_cell = Cell::new(task);\n             let alloc: AllocCallback = |_| unsafe { slice_to_uv_buf(*buf_ptr) };\n-            do self.recv_start(alloc) |watcher, nread, _buf, addr, flags, status| {\n+            do self.recv_start(alloc) |mut watcher, nread, _buf, addr, flags, status| {\n                 let _ = flags; // XXX add handling for partials?\n \n                 watcher.recv_stop();"}]}