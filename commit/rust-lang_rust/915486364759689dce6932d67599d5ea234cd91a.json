{"sha": "915486364759689dce6932d67599d5ea234cd91a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNTQ4NjM2NDc1OTY4OWRjZTY5MzJkNjc1OTlkNWVhMjM0Y2Q5MWE=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-06-28T18:55:50Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-06-30T05:35:02Z"}, "message": "Compile rustdoc less often.", "tree": {"sha": "31cf63112737fc6de204cb8912306379965ae3f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31cf63112737fc6de204cb8912306379965ae3f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/915486364759689dce6932d67599d5ea234cd91a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/915486364759689dce6932d67599d5ea234cd91a", "html_url": "https://github.com/rust-lang/rust/commit/915486364759689dce6932d67599d5ea234cd91a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/915486364759689dce6932d67599d5ea234cd91a/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ca7f74dbd23a3e8ec491cd3438f490a3ac22741", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ca7f74dbd23a3e8ec491cd3438f490a3ac22741", "html_url": "https://github.com/rust-lang/rust/commit/0ca7f74dbd23a3e8ec491cd3438f490a3ac22741"}], "stats": {"total": 80, "additions": 56, "deletions": 24}, "files": [{"sha": "6d781c8e45607a48aea5642e36a7fc50a5fdfe32", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/915486364759689dce6932d67599d5ea234cd91a/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915486364759689dce6932d67599d5ea234cd91a/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=915486364759689dce6932d67599d5ea234cd91a", "patch": "@@ -518,8 +518,7 @@ impl Step for Rustc {\n         let out = builder.compiler_doc_out(target);\n         t!(fs::create_dir_all(&out));\n \n-        // Get the correct compiler for this stage.\n-        let compiler = builder.compiler_for(stage, builder.config.build, target);\n+        let compiler = builder.compiler(stage, builder.config.build);\n \n         if !builder.config.compiler_docs {\n             builder.info(\"\\tskipping - compiler/librustdoc docs disabled\");\n@@ -599,8 +598,7 @@ impl Step for Rustdoc {\n         let out = builder.compiler_doc_out(target);\n         t!(fs::create_dir_all(&out));\n \n-        // Get the correct compiler for this stage.\n-        let compiler = builder.compiler_for(stage, builder.config.build, target);\n+        let compiler = builder.compiler(stage, builder.config.build);\n \n         if !builder.config.compiler_docs {\n             builder.info(\"\\tskipping - compiler/librustdoc docs disabled\");\n@@ -666,15 +664,15 @@ impl Step for ErrorIndex {\n         builder.info(&format!(\"Documenting error index ({})\", target));\n         let out = builder.doc_out(target);\n         t!(fs::create_dir_all(&out));\n-        let compiler = builder.compiler(2, builder.config.build);\n+        // error_index_generator depends on librustdoc. Use the compiler that\n+        // is normally used to build rustdoc for other documentation so that\n+        // it shares the same artifacts.\n+        let compiler = builder.compiler_for(builder.top_stage, builder.config.build, target);\n         let mut index = tool::ErrorIndex::command(builder, compiler);\n         index.arg(\"html\");\n         index.arg(out.join(\"error-index.html\"));\n         index.arg(crate::channel::CFG_RELEASE_NUM);\n \n-        // FIXME: shouldn't have to pass this env var\n-        index.env(\"CFG_BUILD\", &builder.config.build);\n-\n         builder.run(&mut index);\n     }\n }"}, {"sha": "77bcc00d75b2b68c8ab14e7b42bc7f34bd54c0cf", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 47, "deletions": 13, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/915486364759689dce6932d67599d5ea234cd91a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915486364759689dce6932d67599d5ea234cd91a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=915486364759689dce6932d67599d5ea234cd91a", "patch": "@@ -1454,8 +1454,11 @@ impl Step for ErrorIndex {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder\n-            .ensure(ErrorIndex { compiler: run.builder.compiler(run.builder.top_stage, run.host) });\n+        // error_index_generator depends on librustdoc. Use the compiler that\n+        // is normally used to build rustdoc for other tests (like compiletest\n+        // tests in src/test/rustdoc) so that it shares the same artifacts.\n+        let compiler = run.builder.compiler_for(run.builder.top_stage, run.host, run.host);\n+        run.builder.ensure(ErrorIndex { compiler });\n     }\n \n     /// Runs the error index generator tool to execute the tests located in the error\n@@ -1467,22 +1470,23 @@ impl Step for ErrorIndex {\n     fn run(self, builder: &Builder<'_>) {\n         let compiler = self.compiler;\n \n-        builder.ensure(compile::Std { compiler, target: compiler.host });\n-\n         let dir = testdir(builder, compiler.host);\n         t!(fs::create_dir_all(&dir));\n         let output = dir.join(\"error-index.md\");\n \n-        let mut tool = tool::ErrorIndex::command(\n-            builder,\n-            builder.compiler(compiler.stage, builder.config.build),\n-        );\n-        tool.arg(\"markdown\").arg(&output).env(\"CFG_BUILD\", &builder.config.build);\n+        let mut tool = tool::ErrorIndex::command(builder, compiler);\n+        tool.arg(\"markdown\").arg(&output);\n \n-        builder.info(&format!(\"Testing error-index stage{}\", compiler.stage));\n+        // Use the rustdoc that was built by self.compiler. This copy of\n+        // rustdoc is shared with other tests (like compiletest tests in\n+        // src/test/rustdoc). This helps avoid building rustdoc multiple\n+        // times.\n+        let rustdoc_compiler = builder.compiler(builder.top_stage, builder.config.build);\n+        builder.info(&format!(\"Testing error-index stage{}\", rustdoc_compiler.stage));\n         let _time = util::timeit(&builder);\n         builder.run_quiet(&mut tool);\n-        markdown_test(builder, compiler, &output);\n+        builder.ensure(compile::Std { compiler: rustdoc_compiler, target: rustdoc_compiler.host });\n+        markdown_test(builder, rustdoc_compiler, &output);\n     }\n }\n \n@@ -1797,9 +1801,13 @@ impl Step for CrateRustdoc {\n \n     fn run(self, builder: &Builder<'_>) {\n         let test_kind = self.test_kind;\n+        let target = self.host;\n \n-        let compiler = builder.compiler(builder.top_stage, self.host);\n-        let target = compiler.host;\n+        // Use the previous stage compiler to reuse the artifacts that are\n+        // created when running compiletest for src/test/rustdoc. If this used\n+        // `compiler`, then it would cause rustdoc to be built *again*, which\n+        // isn't really necessary.\n+        let compiler = builder.compiler_for(builder.top_stage, target, target);\n         builder.ensure(compile::Rustc { compiler, target });\n \n         let mut cargo = tool::prepare_tool_cargo(\n@@ -1825,6 +1833,32 @@ impl Step for CrateRustdoc {\n             cargo.arg(\"'-Ctarget-feature=-crt-static'\");\n         }\n \n+        // This is needed for running doctests on librustdoc. This is a bit of\n+        // an unfortunate interaction with how bootstrap works and how cargo\n+        // sets up the dylib path, and the fact that the doctest (in\n+        // html/markdown.rs) links to rustc-private libs. For stage1, the\n+        // compiler host dylibs (in stage1/lib) are not the same as the target\n+        // dylibs (in stage1/lib/rustlib/...). This is different from a normal\n+        // rust distribution where they are the same.\n+        //\n+        // On the cargo side, normal tests use `target_process` which handles\n+        // setting up the dylib for a *target* (stage1/lib/rustlib/... in this\n+        // case). However, for doctests it uses `rustdoc_process` which only\n+        // sets up the dylib path for the *host* (stage1/lib), which is the\n+        // wrong directory.\n+        //\n+        // It should be considered to just stop running doctests on\n+        // librustdoc. There is only one test, and it doesn't look too\n+        // important. There might be other ways to avoid this, but it seems\n+        // pretty convoluted.\n+        //\n+        // See also https://github.com/rust-lang/rust/issues/13983 where the\n+        // host vs target dylibs for rustdoc are consistently tricky to deal\n+        // with.\n+        let mut dylib_path = dylib_path();\n+        dylib_path.insert(0, PathBuf::from(&*builder.sysroot_libdir(compiler, target)));\n+        cargo.env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n+\n         if !builder.config.verbose_tests {\n             cargo.arg(\"--quiet\");\n         }"}, {"sha": "b3fa3b49855fdf1dcaf778dbee67ae35fffb6f67", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/915486364759689dce6932d67599d5ea234cd91a/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/915486364759689dce6932d67599d5ea234cd91a/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=915486364759689dce6932d67599d5ea234cd91a", "patch": "@@ -392,9 +392,9 @@ impl Step for ErrorIndex {\n     fn make_run(run: RunConfig<'_>) {\n         // Compile the error-index in the same stage as rustdoc to avoid\n         // recompiling rustdoc twice if we can.\n-        let stage = if run.builder.top_stage >= 2 { run.builder.top_stage } else { 0 };\n-        run.builder\n-            .ensure(ErrorIndex { compiler: run.builder.compiler(stage, run.builder.config.build) });\n+        let host = run.builder.config.build;\n+        let compiler = run.builder.compiler_for(run.builder.top_stage, host, host);\n+        run.builder.ensure(ErrorIndex { compiler });\n     }\n \n     fn run(self, builder: &Builder<'_>) -> PathBuf {"}]}