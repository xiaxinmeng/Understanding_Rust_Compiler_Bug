{"sha": "b779277daecb81efc0d6b0d9920c35d283e10530", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NzkyNzdkYWVjYjgxZWZjMGQ2YjBkOTkyMGMzNWQyODNlMTA1MzA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-25T06:02:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-25T07:24:54Z"}, "message": "rustdoc: Add a pass to normalize indentation levels in doc comments", "tree": {"sha": "bcb07595afe2f097bba3b085f1dee1e4fb10c2ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcb07595afe2f097bba3b085f1dee1e4fb10c2ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b779277daecb81efc0d6b0d9920c35d283e10530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b779277daecb81efc0d6b0d9920c35d283e10530", "html_url": "https://github.com/rust-lang/rust/commit/b779277daecb81efc0d6b0d9920c35d283e10530", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b779277daecb81efc0d6b0d9920c35d283e10530/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8694589143830f1eff367016a3bb72c124345a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8694589143830f1eff367016a3bb72c124345a5", "html_url": "https://github.com/rust-lang/rust/commit/e8694589143830f1eff367016a3bb72c124345a5"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "055ce07209fa5fe04fbfab3bc14295bcd58eb98f", "filename": "src/rustdoc/rustdoc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b779277daecb81efc0d6b0d9920c35d283e10530/src%2Frustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b779277daecb81efc0d6b0d9920c35d283e10530/src%2Frustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rc?ref=b779277daecb81efc0d6b0d9920c35d283e10530", "patch": "@@ -25,6 +25,7 @@ mod prune_undoc_pass;\n mod prune_unexported_pass;\n mod desc_to_brief_pass;\n mod desc_pass;\n+mod unindent_pass;\n mod trim_pass;\n mod astsrv;\n mod demo;"}, {"sha": "45b20aefc6cf6bda03d52804039ea2cb3434cec4", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b779277daecb81efc0d6b0d9920c35d283e10530/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b779277daecb81efc0d6b0d9920c35d283e10530/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=b779277daecb81efc0d6b0d9920c35d283e10530", "patch": "@@ -102,6 +102,7 @@ fn run(source_file: str) {\n         prune_undoc_pass::mk_pass(),\n         desc_to_brief_pass::mk_pass(),\n         trim_pass::mk_pass(),\n+        unindent_pass::mk_pass(),\n         markdown_pass::mk_pass {|| std::io:: stdout()}\n     ]);\n }\n\\ No newline at end of file"}, {"sha": "ea439fd94c47029a3578d274292a7b80376852b7", "filename": "src/rustdoc/unindent_pass.rs", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/b779277daecb81efc0d6b0d9920c35d283e10530/src%2Frustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b779277daecb81efc0d6b0d9920c35d283e10530/src%2Frustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Funindent_pass.rs?ref=b779277daecb81efc0d6b0d9920c35d283e10530", "patch": "@@ -0,0 +1,120 @@\n+#[doc = \"\n+\n+Removes the common level of indention from description strings. For\n+instance, if an entire doc comment is indented 8 spaces we want to\n+remove those 8 spaces from every line.\n+\n+The first line of a string is allowed to be intend less than\n+subsequent lines in the same paragraph in order to account for\n+instances where the string containing the doc comment is opened in the\n+middle of a line, and each of the following lines is indented.\n+\n+\"];\n+\n+export mk_pass;\n+\n+fn mk_pass() -> pass {\n+    desc_pass::mk_pass(unindent)\n+}\n+\n+fn unindent(s: str) -> str {\n+    let lines = str::lines_any(s);\n+    let saw_first_line = false;\n+    let saw_second_line = false;\n+    let min_indent = vec::foldl(uint::max_value, lines) {|min_indent, line|\n+\n+        // After we see the first non-whitespace line, look at\n+        // the line we have. If it is not whitespace, and therefore\n+        // part of the first paragraph, then ignore the indentation\n+        // level of the first line\n+        let ignore_previous_indents =\n+            saw_first_line &&\n+            !saw_second_line &&\n+            !str::is_whitespace(line);\n+\n+        let min_indent = if ignore_previous_indents {\n+            uint::max_value\n+        } else {\n+            min_indent\n+        };\n+\n+        if saw_first_line {\n+            saw_second_line = true;\n+        }\n+\n+        if str::is_whitespace(line) {\n+            min_indent\n+        } else {\n+            saw_first_line = true;\n+            let spaces = 0u;\n+            str::loop_chars(line) {|char|\n+                // Only comparing against space because I wouldn't\n+                // know what to do with mixed whitespace chars\n+                if char == ' ' {\n+                    spaces += 1u;\n+                    true\n+                } else {\n+                    false\n+                }\n+            };\n+            math::min(min_indent, spaces)\n+        }\n+    };\n+\n+    if check vec::is_not_empty(lines) {\n+        let unindented = [str::trim(vec::head(lines))]\n+            + vec::map(vec::tail(lines)) {|line|\n+            if str::is_whitespace(line) {\n+                line\n+            } else {\n+                assert str::byte_len(line) >= min_indent;\n+                str::char_slice(line, min_indent, str::char_len(line))\n+            }\n+        };\n+        str::connect(unindented, \"\\n\")\n+    } else {\n+        s\n+    }\n+}\n+\n+#[test]\n+fn should_unindent() {\n+    let s = \"    line1\\n    line2\";\n+    let r = unindent(s);\n+    assert r == \"line1\\nline2\";\n+}\n+\n+#[test]\n+fn should_unindent_multiple_paragraphs() {\n+    let s = \"    line1\\n\\n    line2\";\n+    let r = unindent(s);\n+    assert r == \"line1\\n\\nline2\";\n+}\n+\n+#[test]\n+fn should_leave_multiple_indent_levels() {\n+    // Line 2 is indented another level beyond the\n+    // base indentation and should be preserved\n+    let s = \"    line1\\n\\n        line2\";\n+    let r = unindent(s);\n+    assert r == \"line1\\n\\n    line2\";\n+}\n+\n+#[test]\n+fn should_ignore_first_line_indent() {\n+    // Thi first line of the first paragraph may not be indented as\n+    // far due to the way the doc string was written:\n+    //\n+    // #[doc = \"Start way over here\n+    //          and continue here\"]\n+    let s = \"line1\\n    line2\";\n+    let r = unindent(s);\n+    assert r == \"line1\\nline2\";\n+}\n+\n+#[test]\n+fn should_not_ignore_first_line_indent_in_a_single_line_para() {\n+    let s = \"line1\\n\\n    line2\";\n+    let r = unindent(s);\n+    assert r == \"line1\\n\\n    line2\";\n+}\n\\ No newline at end of file"}]}