{"sha": "0dd0cc1941d5ef8222e36d54b0efd38628d589ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZDBjYzE5NDFkNWVmODIyMmUzNmQ1NGIwZWZkMzg2MjhkNTg5ZWU=", "commit": {"author": {"name": "Aaron Lobb", "email": "alobb@hmc.edu", "date": "2017-03-26T05:21:43Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-03-26T05:21:43Z"}, "message": "Break `use` statements into multiple lines (#1407)\n\nThis fixes how line lengths for use statements with multiple\r\nitems don't extend beyond the maximum line length.\r\n\r\nFixes #1400", "tree": {"sha": "6a28b1b5b3080d9b77fe626f0f1aed9570caab2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a28b1b5b3080d9b77fe626f0f1aed9570caab2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dd0cc1941d5ef8222e36d54b0efd38628d589ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd0cc1941d5ef8222e36d54b0efd38628d589ee", "html_url": "https://github.com/rust-lang/rust/commit/0dd0cc1941d5ef8222e36d54b0efd38628d589ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dd0cc1941d5ef8222e36d54b0efd38628d589ee/comments", "author": {"login": "alobb", "id": 5897943, "node_id": "MDQ6VXNlcjU4OTc5NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5897943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alobb", "html_url": "https://github.com/alobb", "followers_url": "https://api.github.com/users/alobb/followers", "following_url": "https://api.github.com/users/alobb/following{/other_user}", "gists_url": "https://api.github.com/users/alobb/gists{/gist_id}", "starred_url": "https://api.github.com/users/alobb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alobb/subscriptions", "organizations_url": "https://api.github.com/users/alobb/orgs", "repos_url": "https://api.github.com/users/alobb/repos", "events_url": "https://api.github.com/users/alobb/events{/privacy}", "received_events_url": "https://api.github.com/users/alobb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f96e56c3a024fd6b8e5545e21299cdefe17c5965", "url": "https://api.github.com/repos/rust-lang/rust/commits/f96e56c3a024fd6b8e5545e21299cdefe17c5965", "html_url": "https://github.com/rust-lang/rust/commit/f96e56c3a024fd6b8e5545e21299cdefe17c5965"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "c83f821d4a8143cf5ab8876a20ee860249c862d3", "filename": "src/imports.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0dd0cc1941d5ef8222e36d54b0efd38628d589ee/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd0cc1941d5ef8222e36d54b0efd38628d589ee/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=0dd0cc1941d5ef8222e36d54b0efd38628d589ee", "patch": "@@ -323,8 +323,10 @@ pub fn rewrite_use_list(shape: Shape,\n         _ => (),\n     }\n \n-    // 2 = {}\n-    let remaining_width = shape.width.checked_sub(path_str.len() + 2).unwrap_or(0);\n+    let colons_offset = if path_str.is_empty() { 0 } else { 2 };\n+\n+    // 2 = \"{}\"\n+    let remaining_width = shape.width.checked_sub(path_str.len() + 2 + colons_offset).unwrap_or(0);\n \n     let mut items = {\n         // Dummy value, see explanation below.\n@@ -351,20 +353,18 @@ pub fn rewrite_use_list(shape: Shape,\n         items[1..].sort_by(|a, b| a.item.cmp(&b.item));\n     }\n \n-    let colons_offset = if path_str.is_empty() { 0 } else { 2 };\n \n     let tactic = definitive_tactic(&items[first_index..],\n                                    ::lists::ListTactic::Mixed,\n                                    remaining_width);\n+\n     let fmt = ListFormatting {\n         tactic: tactic,\n         separator: \",\",\n         trailing_separator: SeparatorTactic::Never,\n-        // FIXME This is too conservative, and will not use all width\n-        // available\n-        // (loose 1 column (\";\"))\n+        // Add one to the indent to account for \"{\"\n         shape: Shape::legacy(remaining_width,\n-                             shape.indent + path_str.len() + 1 + colons_offset),\n+                             shape.indent + path_str.len() + colons_offset + 1),\n         ends_with_newline: false,\n         config: context.config,\n     };"}, {"sha": "e4f885c09b1f049d505b5887abb5913d73fcc282", "filename": "tests/target/import-fencepost-length.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd0cc1941d5ef8222e36d54b0efd38628d589ee/tests%2Ftarget%2Fimport-fencepost-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd0cc1941d5ef8222e36d54b0efd38628d589ee/tests%2Ftarget%2Fimport-fencepost-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimport-fencepost-length.rs?ref=0dd0cc1941d5ef8222e36d54b0efd38628d589ee", "patch": "@@ -0,0 +1,4 @@\n+use aaaaaaaaaaaaaaa::bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n+use aaaaaaaaaaaaaaa::{bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, ccccccccccccccccccccccccccccccc, dddddddd};\n+use aaaaaaaaaaaaaaa::{bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, ccccccccccccccccccccccccccccccc,\n+                      ddddddddd};"}]}