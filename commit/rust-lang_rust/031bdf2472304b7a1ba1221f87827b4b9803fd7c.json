{"sha": "031bdf2472304b7a1ba1221f87827b4b9803fd7c", "node_id": "C_kwDOAAsO6NoAKDAzMWJkZjI0NzIzMDRiN2ExYmExMjIxZjg3ODI3YjRiOTgwM2ZkN2M", "commit": {"author": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-03-28T14:10:13Z"}, "committer": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-04-09T11:52:53Z"}, "message": "Refactor `extract_module`", "tree": {"sha": "ac6893b30765c6fa5d3eaaf1461f427622289356", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac6893b30765c6fa5d3eaaf1461f427622289356"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/031bdf2472304b7a1ba1221f87827b4b9803fd7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/031bdf2472304b7a1ba1221f87827b4b9803fd7c", "html_url": "https://github.com/rust-lang/rust/commit/031bdf2472304b7a1ba1221f87827b4b9803fd7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/031bdf2472304b7a1ba1221f87827b4b9803fd7c/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2d12906b0d6d8527ae03de279f8f1f1f3ce1ef4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d12906b0d6d8527ae03de279f8f1f1f3ce1ef4", "html_url": "https://github.com/rust-lang/rust/commit/c2d12906b0d6d8527ae03de279f8f1f1f3ce1ef4"}], "stats": {"total": 55, "additions": 20, "deletions": 35}, "files": [{"sha": "4855ff793f94a2f838819fe44c87c19a015fa930", "filename": "crates/ide_assists/src/handlers/extract_module.rs", "status": "modified", "additions": 20, "deletions": 35, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/031bdf2472304b7a1ba1221f87827b4b9803fd7c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/031bdf2472304b7a1ba1221f87827b4b9803fd7c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=031bdf2472304b7a1ba1221f87827b4b9803fd7c", "patch": "@@ -104,7 +104,6 @@ pub(crate) fn extract_module(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n     let (usages_to_be_processed, record_fields) = module.get_usages_and_record_fields(ctx);\n \n     let import_paths_to_be_removed = module.resolve_imports(curr_parent_module, ctx);\n-    module.body_items = module.change_visibility(record_fields);\n     if module.body_items.len() == 0 {\n         return None;\n     }\n@@ -114,7 +113,7 @@ pub(crate) fn extract_module(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n         \"Extract Module\",\n         module.text_range,\n         |builder| {\n-            module.body_items = module.change_visibility(record_fields);\n+            module.change_visibility(record_fields);\n \n             let mut body_items: Vec<String> = Vec::new();\n             let mut items_to_be_processed: Vec<ast::Item> = module.body_items.clone();\n@@ -151,17 +150,11 @@ pub(crate) fn extract_module(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n                     body = impl_body_def;\n \n                     // Add the import for enum/struct corresponding to given impl block\n-                    if let Some(_) = module.make_use_stmt_of_node_with_super(self_ty.syntax()) {\n-                        for item in module.use_items {\n-                            let mut indented_item = String::new();\n-                            format_to!(\n-                                indented_item,\n-                                \"{}{}\",\n-                                old_item_indent + 1,\n-                                item.to_string()\n-                            );\n-                            body = format!(\"{}\\n\\n{}\", indented_item, body);\n-                        }\n+                    module.make_use_stmt_of_node_with_super(self_ty.syntax());\n+                    for item in module.use_items {\n+                        let mut indented_item = String::new();\n+                        format_to!(indented_item, \"{}{}\", old_item_indent + 1, item.to_string());\n+                        body = format!(\"{}\\n\\n{}\", indented_item, body);\n                     }\n                 }\n             }\n@@ -395,9 +388,9 @@ impl Module {\n         None\n     }\n \n-    fn change_visibility(&self, record_fields: Vec<SyntaxNode>) -> Vec<ast::Item> {\n-        let (body_items, mut replacements, record_field_parents, impls) =\n-            get_replacements_for_visibilty_change(self.body_items.clone(), false);\n+    fn change_visibility(&mut self, record_fields: Vec<SyntaxNode>) {\n+        let (mut replacements, record_field_parents, impls) =\n+            get_replacements_for_visibilty_change(&mut self.body_items, false);\n \n         let mut impl_items = Vec::new();\n         for impl_ in impls {\n@@ -411,8 +404,8 @@ impl Module {\n             impl_items.append(&mut this_impl_items);\n         }\n \n-        let (_, mut impl_item_replacements, _, _) =\n-            get_replacements_for_visibilty_change(impl_items, true);\n+        let (mut impl_item_replacements, _, _) =\n+            get_replacements_for_visibilty_change(&mut impl_items, true);\n \n         replacements.append(&mut impl_item_replacements);\n \n@@ -429,8 +422,6 @@ impl Module {\n         replacements.into_iter().for_each(|(vis, syntax)| {\n             add_change_vis(vis, syntax.first_child_or_token());\n         });\n-\n-        body_items\n     }\n \n     fn resolve_imports(\n@@ -626,20 +617,17 @@ impl Module {\n         import_path_to_be_removed\n     }\n \n-    fn make_use_stmt_of_node_with_super(&mut self, node_syntax: &SyntaxNode) -> Option<ast::Item> {\n+    fn make_use_stmt_of_node_with_super(&mut self, node_syntax: &SyntaxNode) -> ast::Item {\n         let super_path = make::ext::ident_path(\"super\");\n         let node_path = make::ext::ident_path(&node_syntax.to_string());\n         let use_ = make::use_(\n             None,\n             make::use_tree(make::join_paths(vec![super_path, node_path]), None, None, false),\n         );\n \n-        if let Some(item) = ast::Item::cast(use_.syntax().clone()) {\n-            self.use_items.insert(0, item.clone());\n-            return Some(item);\n-        }\n-\n-        None\n+        let item = ast::Item::from(use_);\n+        self.use_items.insert(0, item.clone());\n+        item\n     }\n \n     fn process_use_stmt_for_import_resolve(\n@@ -825,33 +813,30 @@ fn does_source_exists_outside_sel_in_same_mod(\n }\n \n fn get_replacements_for_visibilty_change(\n-    items: Vec<ast::Item>,\n+    items: &mut [ast::Item],\n     is_clone_for_updated: bool,\n ) -> (\n-    Vec<ast::Item>,\n     Vec<(Option<ast::Visibility>, SyntaxNode)>,\n     Vec<(Option<ast::Visibility>, SyntaxNode)>,\n     Vec<ast::Impl>,\n ) {\n     let mut replacements = Vec::new();\n     let mut record_field_parents = Vec::new();\n     let mut impls = Vec::new();\n-    let mut body_items = Vec::new();\n \n     items.into_iter().for_each(|item| {\n-        let mut item = item;\n+        let item = item;\n         if !is_clone_for_updated {\n-            item = item.clone_for_update();\n+            *item = item.clone_for_update();\n         }\n-        body_items.push(item.clone());\n         //Use stmts are ignored\n         match item {\n             ast::Item::Const(it) => replacements.push((it.visibility(), it.syntax().clone())),\n             ast::Item::Enum(it) => replacements.push((it.visibility(), it.syntax().clone())),\n             ast::Item::ExternCrate(it) => replacements.push((it.visibility(), it.syntax().clone())),\n             ast::Item::Fn(it) => replacements.push((it.visibility(), it.syntax().clone())),\n             //Associated item's visibility should not be changed\n-            ast::Item::Impl(it) if it.for_token().is_none() => impls.push(it),\n+            ast::Item::Impl(it) if it.for_token().is_none() => impls.push(it.clone()),\n             ast::Item::MacroDef(it) => replacements.push((it.visibility(), it.syntax().clone())),\n             ast::Item::Module(it) => replacements.push((it.visibility(), it.syntax().clone())),\n             ast::Item::Static(it) => replacements.push((it.visibility(), it.syntax().clone())),\n@@ -869,7 +854,7 @@ fn get_replacements_for_visibilty_change(\n         }\n     });\n \n-    (body_items, replacements, record_field_parents, impls)\n+    (replacements, record_field_parents, impls)\n }\n \n fn get_use_tree_paths_from_path("}]}