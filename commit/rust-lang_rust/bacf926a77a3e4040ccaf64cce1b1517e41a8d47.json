{"sha": "bacf926a77a3e4040ccaf64cce1b1517e41a8d47", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhY2Y5MjZhNzdhM2U0MDQwY2NhZjY0Y2NlMWIxNTE3ZTQxYThkNDc=", "commit": {"author": {"name": "Unreal Hoang", "email": "unrealhoang@gmail.com", "date": "2019-07-20T11:11:18Z"}, "committer": {"name": "Unreal Hoang", "email": "unrealhoang@gmail.com", "date": "2019-07-20T11:12:19Z"}, "message": "infer type for await\n\nby projecting inner_ty to Future::Output alias", "tree": {"sha": "0b979a84ccd68739dab8cc6d2aa1294611a1d7de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b979a84ccd68739dab8cc6d2aa1294611a1d7de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bacf926a77a3e4040ccaf64cce1b1517e41a8d47", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE5FNMeJ7UuhhqQiT99mIXvcbzfPoFAl0y9yEACgkQ9mIXvcbz\nfPr9cxAAiz9rPURsd2oPFedu80N6QLDaIdkLmVeUimMwFrge9rfQXDTxgVbgnmx+\n8KgtwKqp6eMMNjjWBGVrwnioAm2BKZSBOSd/Xn4trGVN6CybTPQDzAh9oHbudavJ\nQnGfIhYSZ2F7Kc80UXyYXgZnpVqknlru/k20yub68w+CH0gbBvIlHN/uaUbwpw/2\nuhJOlCF1foesiD2dpuKEJRMll+iRlh11h+B4kYnmSqGR/xEz8Gxb8pXlXDg9NhJc\neEFUCBD26zXLaJ9zEdgkydmT7Q3iDx5aoZwKDvWNJKCGyl6Wo8TelOnAkZzkJVkJ\n+dzGfq/wSlCoY/XZ4HO2thpez1XE6KaQAbEm83z9LlwoDCC4mlizgEqI5SkmkHeN\nfhE6pDrhqqAZNWg5IMSqXU6MhTVkAq4DDKEv1IkgCF6JpyFeb0CYfKLWTI43vV+Y\nKVh63LwgmV08Mb58AHx/pLTwJjUr86V5l+sv0qEuNcygM6jQr9MUVdgVL1+l+hQ4\nfJxeTp51bHjLoH/H10JJUmt7YOcSPMXgVY2LuJTZeymaq5hAZIfs3M4WkUt5zHs7\nIHCosHINAl9l4ZUMu/Z1C+vI6tUp2Tzit7QttlkuS4lsIA9tKAA4TZxsqvHddj3V\nKTIbQ67FUHyM7Wc2m/uJWxUfiDdZGWHJwX0dV0uZGGAixfDL1KA=\n=C4S1\n-----END PGP SIGNATURE-----", "payload": "tree 0b979a84ccd68739dab8cc6d2aa1294611a1d7de\nparent 5ac9f5cdc7a88dcb9545d2e150780c8edee83b06\nauthor Unreal Hoang <unrealhoang@gmail.com> 1563621078 +0900\ncommitter Unreal Hoang <unrealhoang@gmail.com> 1563621139 +0900\n\ninfer type for await\n\nby projecting inner_ty to Future::Output alias\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bacf926a77a3e4040ccaf64cce1b1517e41a8d47", "html_url": "https://github.com/rust-lang/rust/commit/bacf926a77a3e4040ccaf64cce1b1517e41a8d47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bacf926a77a3e4040ccaf64cce1b1517e41a8d47/comments", "author": {"login": "unrealhoang", "id": 1218094, "node_id": "MDQ6VXNlcjEyMTgwOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1218094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unrealhoang", "html_url": "https://github.com/unrealhoang", "followers_url": "https://api.github.com/users/unrealhoang/followers", "following_url": "https://api.github.com/users/unrealhoang/following{/other_user}", "gists_url": "https://api.github.com/users/unrealhoang/gists{/gist_id}", "starred_url": "https://api.github.com/users/unrealhoang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unrealhoang/subscriptions", "organizations_url": "https://api.github.com/users/unrealhoang/orgs", "repos_url": "https://api.github.com/users/unrealhoang/repos", "events_url": "https://api.github.com/users/unrealhoang/events{/privacy}", "received_events_url": "https://api.github.com/users/unrealhoang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unrealhoang", "id": 1218094, "node_id": "MDQ6VXNlcjEyMTgwOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1218094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unrealhoang", "html_url": "https://github.com/unrealhoang", "followers_url": "https://api.github.com/users/unrealhoang/followers", "following_url": "https://api.github.com/users/unrealhoang/following{/other_user}", "gists_url": "https://api.github.com/users/unrealhoang/gists{/gist_id}", "starred_url": "https://api.github.com/users/unrealhoang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unrealhoang/subscriptions", "organizations_url": "https://api.github.com/users/unrealhoang/orgs", "repos_url": "https://api.github.com/users/unrealhoang/repos", "events_url": "https://api.github.com/users/unrealhoang/events{/privacy}", "received_events_url": "https://api.github.com/users/unrealhoang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ac9f5cdc7a88dcb9545d2e150780c8edee83b06", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ac9f5cdc7a88dcb9545d2e150780c8edee83b06", "html_url": "https://github.com/rust-lang/rust/commit/5ac9f5cdc7a88dcb9545d2e150780c8edee83b06"}], "stats": {"total": 80, "additions": 78, "deletions": 2}, "files": [{"sha": "6d14eea8ecf43817142df2240c60c046cde5dee7", "filename": "crates/ra_hir/src/name.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bacf926a77a3e4040ccaf64cce1b1517e41a8d47/crates%2Fra_hir%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacf926a77a3e4040ccaf64cce1b1517e41a8d47/crates%2Fra_hir%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fname.rs?ref=bacf926a77a3e4040ccaf64cce1b1517e41a8d47", "patch": "@@ -118,6 +118,9 @@ pub(crate) const ITEM: Name = Name::new(SmolStr::new_inline_from_ascii(4, b\"Item\n pub(crate) const OPS: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"ops\"));\n pub(crate) const TRY: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"Try\"));\n pub(crate) const OK: Name = Name::new(SmolStr::new_inline_from_ascii(2, b\"Ok\"));\n+pub(crate) const FUTURE_MOD: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"future\"));\n+pub(crate) const FUTURE_TYPE: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"Future\"));\n+pub(crate) const OUTPUT: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"Output\"));\n \n fn resolve_name(text: &SmolStr) -> SmolStr {\n     let raw_start = \"r#\";"}, {"sha": "a82dff711db0eae41aa695b95d48d5d8411fecee", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bacf926a77a3e4040ccaf64cce1b1517e41a8d47/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacf926a77a3e4040ccaf64cce1b1517e41a8d47/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=bacf926a77a3e4040ccaf64cce1b1517e41a8d47", "patch": "@@ -1114,8 +1114,24 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 .unwrap_or(Ty::Unknown);\n                 self.insert_type_vars(ty)\n             }\n-            Expr::Await { .. } => {\n-                Ty::Unknown\n+            Expr::Await { expr } => {\n+                let inner_ty = self.infer_expr(*expr, &Expectation::none());\n+                let ty = match self.resolve_future_future_output() {\n+                    Some(future_future_output_alias) => {\n+                        let ty = self.new_type_var();\n+                        let projection = ProjectionPredicate {\n+                            ty: ty.clone(),\n+                            projection_ty: ProjectionTy {\n+                                associated_ty: future_future_output_alias,\n+                                parameters: vec![inner_ty].into(),\n+                            },\n+                        };\n+                        self.obligations.push(Obligation::Projection(projection));\n+                        self.resolve_ty_as_possible(&mut vec![], ty)\n+                    }\n+                    None => Ty::Unknown,\n+                };\n+                ty\n             }\n             Expr::Try { expr } => {\n                 let inner_ty = self.infer_expr(*expr, &Expectation::none());\n@@ -1371,6 +1387,28 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             _ => None,\n         }\n     }\n+\n+    fn resolve_future_future_output(&self) -> Option<TypeAlias> {\n+        let future_future_path = Path {\n+            kind: PathKind::Abs,\n+            segments: vec![\n+                PathSegment { name: name::STD, args_and_bindings: None },\n+                PathSegment { name: name::FUTURE_MOD, args_and_bindings: None },\n+                PathSegment { name: name::FUTURE_TYPE, args_and_bindings: None },\n+            ],\n+        };\n+\n+        match self\n+            .resolver\n+            .resolve_path_segments(self.db, &future_future_path)\n+            .into_fully_resolved()\n+        {\n+            PerNs { types: Some(Def(Trait(trait_))), .. } => {\n+                Some(trait_.associated_type_by_name(self.db, name::OUTPUT)?)\n+            }\n+            _ => None,\n+        }\n+    }\n }\n \n /// The ID of a type variable."}, {"sha": "d4bfcb888fa1780190c1ef3cce2bee9778ea080f", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bacf926a77a3e4040ccaf64cce1b1517e41a8d47/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacf926a77a3e4040ccaf64cce1b1517e41a8d47/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=bacf926a77a3e4040ccaf64cce1b1517e41a8d47", "patch": "@@ -20,6 +20,41 @@ use crate::{\n // against snapshots of the expected results using insta. Use cargo-insta to\n // update the snapshots.\n \n+#[test]\n+fn infer_await() {\n+    let (mut db, pos) = MockDatabase::with_position(\n+        r#\"\n+//- /main.rs\n+\n+struct IntFuture;\n+\n+impl Future for IntFuture {\n+    type Output = u64;\n+}\n+\n+fn test() {\n+    let r = IntFuture;\n+    let v = r.await;\n+    v<|>;\n+}\n+\n+//- /std.rs\n+#[prelude_import] use future::*;\n+mod future {\n+    trait Future {\n+        type Output;\n+    }\n+}\n+\n+\"#,\n+    );\n+    db.set_crate_graph_from_fixture(crate_graph! {\n+        \"main\": (\"/main.rs\", [\"std\"]),\n+        \"std\": (\"/std.rs\", []),\n+    });\n+    assert_eq!(\"u64\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn infer_try() {\n     let (mut db, pos) = MockDatabase::with_position("}]}