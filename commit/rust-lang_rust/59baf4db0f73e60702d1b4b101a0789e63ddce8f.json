{"sha": "59baf4db0f73e60702d1b4b101a0789e63ddce8f", "node_id": "C_kwDOAAsO6NoAKDU5YmFmNGRiMGY3M2U2MDcwMmQxYjRiMTAxYTA3ODllNjNkZGNlOGY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-06T03:13:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-06T03:13:32Z"}, "message": "Rollup merge of #93556 - dtolnay:trailingcomma, r=cjgillot\n\nChange struct expr pretty printing to match rustfmt style\n\nThis PR backports trailing comma support from https://github.com/dtolnay/prettyplease into rustc_ast_pretty and uses it to improve the formatting of struct expressions.\n\nExample:\n\n```rust\nmacro_rules! stringify_expr {\n    ($expr:expr) => {\n        stringify!($expr)\n    };\n}\n\nfn main() {\n    println!(\"{}\", stringify_expr!(Struct {\n        a: Struct { b, c },\n    }));\n    println!(\"{}\", stringify_expr!(Struct {\n        aaaaaaaaaa: AAAAAAAAAA,\n        bbbbbbbbbb: Struct {\n            cccccccccc: CCCCCCCCCC,\n            dddddddddd: DDDDDDDDDD,\n            eeeeeeeeee: EEEEEEEEEE,\n        },\n    }));\n}\n```\n\n\ud83e\udd2e Before:\n\n```console\nStruct{a: Struct{b, c,},}\nStruct{aaaaaaaaaa: AAAAAAAAAA,\n    bbbbbbbbbb:\n        Struct{cccccccccc: CCCCCCCCCC,\n            dddddddddd: DDDDDDDDDD,\n            eeeeeeeeee: EEEEEEEEEE,},}\n```\n\nAfter:\n\n```console\nStruct { a: Struct { b, c } }\nStruct {\n    aaaaaaaaaa: AAAAAAAAAA,\n    bbbbbbbbbb: Struct {\n        cccccccccc: CCCCCCCCCC,\n        dddddddddd: DDDDDDDDDD,\n        eeeeeeeeee: EEEEEEEEEE,\n    },\n}\n```", "tree": {"sha": "bb4fa7ca30779a6f0a74145cfc2906c4647605e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb4fa7ca30779a6f0a74145cfc2906c4647605e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59baf4db0f73e60702d1b4b101a0789e63ddce8f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh/zzcCRBK7hj4Ov3rIwAA9GgIAAEk+a58I99i1CFtOk0y8p+v\nsvfB5m2XHgPuUijcxp4vMz9AUz9zgU43cRDIVrZC2iJI6YWin1ZkNAK0vmpA4vpx\ndPwLzKVRyQcawI67z5M+2v/UUjOUBlYf573LpVyw7BMtUn1g++aviMI4Swrhm1iW\nTUjhRA0RBl7aJsX+xS9lrrXAMjQWSPPzZfh+iz9Ux7j7+JtJ5c4kJnnk/qw3R7l7\n17yIM75QOeE4PgBBeZbsFl/9cMI3iCvn6Oyzi+lYlS0IC7m7HDxGv1wO2lvDjZdw\nlv72ze4Ljn7XW2WVeaXoD+UwGAbDjbozozJ2jLFtwNl+nj14nKRVIfvYFAXgWIQ=\n=NBDR\n-----END PGP SIGNATURE-----\n", "payload": "tree bb4fa7ca30779a6f0a74145cfc2906c4647605e0\nparent 05bb32dde2289b5385373af2faaabc4b8498aa50\nparent ca3057fd5595667d6eeb703b9ab80dbe73e8841c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644117212 +0100\ncommitter GitHub <noreply@github.com> 1644117212 +0100\n\nRollup merge of #93556 - dtolnay:trailingcomma, r=cjgillot\n\nChange struct expr pretty printing to match rustfmt style\n\nThis PR backports trailing comma support from https://github.com/dtolnay/prettyplease into rustc_ast_pretty and uses it to improve the formatting of struct expressions.\n\nExample:\n\n```rust\nmacro_rules! stringify_expr {\n    ($expr:expr) => {\n        stringify!($expr)\n    };\n}\n\nfn main() {\n    println!(\"{}\", stringify_expr!(Struct {\n        a: Struct { b, c },\n    }));\n    println!(\"{}\", stringify_expr!(Struct {\n        aaaaaaaaaa: AAAAAAAAAA,\n        bbbbbbbbbb: Struct {\n            cccccccccc: CCCCCCCCCC,\n            dddddddddd: DDDDDDDDDD,\n            eeeeeeeeee: EEEEEEEEEE,\n        },\n    }));\n}\n```\n\n\ud83e\udd2e Before:\n\n```console\nStruct{a: Struct{b, c,},}\nStruct{aaaaaaaaaa: AAAAAAAAAA,\n    bbbbbbbbbb:\n        Struct{cccccccccc: CCCCCCCCCC,\n            dddddddddd: DDDDDDDDDD,\n            eeeeeeeeee: EEEEEEEEEE,},}\n```\n\nAfter:\n\n```console\nStruct { a: Struct { b, c } }\nStruct {\n    aaaaaaaaaa: AAAAAAAAAA,\n    bbbbbbbbbb: Struct {\n        cccccccccc: CCCCCCCCCC,\n        dddddddddd: DDDDDDDDDD,\n        eeeeeeeeee: EEEEEEEEEE,\n    },\n}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59baf4db0f73e60702d1b4b101a0789e63ddce8f", "html_url": "https://github.com/rust-lang/rust/commit/59baf4db0f73e60702d1b4b101a0789e63ddce8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59baf4db0f73e60702d1b4b101a0789e63ddce8f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05bb32dde2289b5385373af2faaabc4b8498aa50", "url": "https://api.github.com/repos/rust-lang/rust/commits/05bb32dde2289b5385373af2faaabc4b8498aa50", "html_url": "https://github.com/rust-lang/rust/commit/05bb32dde2289b5385373af2faaabc4b8498aa50"}, {"sha": "ca3057fd5595667d6eeb703b9ab80dbe73e8841c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca3057fd5595667d6eeb703b9ab80dbe73e8841c", "html_url": "https://github.com/rust-lang/rust/commit/ca3057fd5595667d6eeb703b9ab80dbe73e8841c"}], "stats": {"total": 218, "additions": 148, "deletions": 70}, "files": [{"sha": "ddce86f216538fc0732ae216bfadccf336e65889", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/59baf4db0f73e60702d1b4b101a0789e63ddce8f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59baf4db0f73e60702d1b4b101a0789e63ddce8f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=59baf4db0f73e60702d1b4b101a0789e63ddce8f", "patch": "@@ -148,7 +148,7 @@ pub enum Breaks {\n     Inconsistent,\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, PartialEq)]\n enum IndentStyle {\n     /// Vertically aligned under whatever column this block begins at.\n     ///\n@@ -164,19 +164,20 @@ enum IndentStyle {\n     Block { offset: isize },\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Default, PartialEq)]\n pub struct BreakToken {\n     offset: isize,\n     blank_space: isize,\n+    pre_break: Option<char>,\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, PartialEq)]\n pub struct BeginToken {\n     indent: IndentStyle,\n     breaks: Breaks,\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, PartialEq)]\n pub enum Token {\n     // In practice a string token contains either a `&'static str` or a\n     // `String`. `Cow` is overkill for this because we never modify the data,\n@@ -313,6 +314,12 @@ impl Printer {\n         }\n     }\n \n+    pub fn offset(&mut self, offset: isize) {\n+        if let Some(BufEntry { token: Token::Break(token), .. }) = &mut self.buf.last_mut() {\n+            token.offset += offset;\n+        }\n+    }\n+\n     fn check_stream(&mut self) {\n         while self.right_total - self.left_total > self.space {\n             if *self.scan_stack.front().unwrap() == self.buf.index_of_first() {\n@@ -391,7 +398,9 @@ impl Printer {\n         if size > self.space {\n             self.print_stack.push(PrintFrame::Broken { indent: self.indent, breaks: token.breaks });\n             self.indent = match token.indent {\n-                IndentStyle::Block { offset } => (self.indent as isize + offset) as usize,\n+                IndentStyle::Block { offset } => {\n+                    usize::try_from(self.indent as isize + offset).unwrap()\n+                }\n                 IndentStyle::Visual => (MARGIN - self.space) as usize,\n             };\n         } else {\n@@ -415,6 +424,9 @@ impl Printer {\n             self.pending_indentation += token.blank_space;\n             self.space -= token.blank_space;\n         } else {\n+            if let Some(pre_break) = token.pre_break {\n+                self.out.push(pre_break);\n+            }\n             self.out.push('\\n');\n             let indent = self.indent as isize + token.offset;\n             self.pending_indentation = indent;"}, {"sha": "785e6886d8a3841ecac46ee1eeed4a9e033eeaa8", "filename": "compiler/rustc_ast_pretty/src/pp/convenience.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/59baf4db0f73e60702d1b4b101a0789e63ddce8f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59baf4db0f73e60702d1b4b101a0789e63ddce8f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp%2Fconvenience.rs?ref=59baf4db0f73e60702d1b4b101a0789e63ddce8f", "patch": "@@ -3,20 +3,17 @@ use std::borrow::Cow;\n \n impl Printer {\n     /// \"raw box\"\n-    pub fn rbox(&mut self, indent: usize, breaks: Breaks) {\n-        self.scan_begin(BeginToken {\n-            indent: IndentStyle::Block { offset: indent as isize },\n-            breaks,\n-        })\n+    pub fn rbox(&mut self, indent: isize, breaks: Breaks) {\n+        self.scan_begin(BeginToken { indent: IndentStyle::Block { offset: indent }, breaks })\n     }\n \n     /// Inconsistent breaking box\n-    pub fn ibox(&mut self, indent: usize) {\n+    pub fn ibox(&mut self, indent: isize) {\n         self.rbox(indent, Breaks::Inconsistent)\n     }\n \n     /// Consistent breaking box\n-    pub fn cbox(&mut self, indent: usize) {\n+    pub fn cbox(&mut self, indent: isize) {\n         self.rbox(indent, Breaks::Consistent)\n     }\n \n@@ -25,7 +22,11 @@ impl Printer {\n     }\n \n     pub fn break_offset(&mut self, n: usize, off: isize) {\n-        self.scan_break(BreakToken { offset: off, blank_space: n as isize })\n+        self.scan_break(BreakToken {\n+            offset: off,\n+            blank_space: n as isize,\n+            ..BreakToken::default()\n+        });\n     }\n \n     pub fn end(&mut self) {\n@@ -66,12 +67,24 @@ impl Printer {\n     }\n \n     pub fn hardbreak_tok_offset(off: isize) -> Token {\n-        Token::Break(BreakToken { offset: off, blank_space: SIZE_INFINITY })\n+        Token::Break(BreakToken {\n+            offset: off,\n+            blank_space: SIZE_INFINITY,\n+            ..BreakToken::default()\n+        })\n+    }\n+\n+    pub fn trailing_comma(&mut self) {\n+        self.scan_break(BreakToken {\n+            blank_space: 1,\n+            pre_break: Some(','),\n+            ..BreakToken::default()\n+        });\n     }\n }\n \n impl Token {\n     pub fn is_hardbreak_tok(&self) -> bool {\n-        matches!(self, Token::Break(BreakToken { offset: 0, blank_space: SIZE_INFINITY }))\n+        *self == Printer::hardbreak_tok_offset(0)\n     }\n }"}, {"sha": "b2c62383fb69af5600a325f4223d730c3b5d590b", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59baf4db0f73e60702d1b4b101a0789e63ddce8f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59baf4db0f73e60702d1b4b101a0789e63ddce8f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=59baf4db0f73e60702d1b4b101a0789e63ddce8f", "patch": "@@ -1,3 +1,4 @@\n+mod delimited;\n mod expr;\n mod item;\n \n@@ -23,6 +24,8 @@ use rustc_span::{BytePos, FileName, Span};\n \n use std::borrow::Cow;\n \n+pub use self::delimited::IterDelimited;\n+\n pub enum MacHeader<'a> {\n     Path(&'a ast::Path),\n     Keyword(&'static str),\n@@ -92,7 +95,7 @@ pub struct State<'a> {\n     ann: &'a (dyn PpAnn + 'a),\n }\n \n-crate const INDENT_UNIT: usize = 4;\n+crate const INDENT_UNIT: isize = 4;\n \n /// Requires you to pass an input filename and reader so that\n /// it can scan the input text for comments to copy forward."}, {"sha": "fe0640baaa1b0a0890cb485da741e0b0e5cf83af", "filename": "compiler/rustc_ast_pretty/src/pprust/state/delimited.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/59baf4db0f73e60702d1b4b101a0789e63ddce8f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fdelimited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59baf4db0f73e60702d1b4b101a0789e63ddce8f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fdelimited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fdelimited.rs?ref=59baf4db0f73e60702d1b4b101a0789e63ddce8f", "patch": "@@ -0,0 +1,41 @@\n+use std::iter::Peekable;\n+use std::mem;\n+use std::ops::Deref;\n+\n+pub struct Delimited<I: Iterator> {\n+    is_first: bool,\n+    iter: Peekable<I>,\n+}\n+\n+pub trait IterDelimited: Iterator + Sized {\n+    fn delimited(self) -> Delimited<Self> {\n+        Delimited { is_first: true, iter: self.peekable() }\n+    }\n+}\n+\n+impl<I: Iterator> IterDelimited for I {}\n+\n+pub struct IteratorItem<T> {\n+    value: T,\n+    pub is_first: bool,\n+    pub is_last: bool,\n+}\n+\n+impl<I: Iterator> Iterator for Delimited<I> {\n+    type Item = IteratorItem<I::Item>;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        let value = self.iter.next()?;\n+        let is_first = mem::replace(&mut self.is_first, false);\n+        let is_last = self.iter.peek().is_none();\n+        Some(IteratorItem { value, is_first, is_last })\n+    }\n+}\n+\n+impl<T> Deref for IteratorItem<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.value\n+    }\n+}"}, {"sha": "44116fa76a0c1e0265d39cd8217cf5a1022644bf", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/59baf4db0f73e60702d1b4b101a0789e63ddce8f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59baf4db0f73e60702d1b4b101a0789e63ddce8f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=59baf4db0f73e60702d1b4b101a0789e63ddce8f", "patch": "@@ -1,5 +1,5 @@\n-use crate::pp::Breaks::{Consistent, Inconsistent};\n-use crate::pprust::state::{AnnNode, PrintState, State, INDENT_UNIT};\n+use crate::pp::Breaks::Inconsistent;\n+use crate::pprust::state::{AnnNode, IterDelimited, PrintState, State, INDENT_UNIT};\n \n use rustc_ast::ptr::P;\n use rustc_ast::util::parser::{self, AssocOp, Fixity};\n@@ -117,38 +117,46 @@ impl<'a> State<'a> {\n         } else {\n             self.print_path(path, true, 0);\n         }\n+        self.nbsp();\n         self.word(\"{\");\n-        self.commasep_cmnt(\n-            Consistent,\n-            fields,\n-            |s, field| {\n-                s.print_outer_attributes(&field.attrs);\n-                s.ibox(INDENT_UNIT);\n-                if !field.is_shorthand {\n-                    s.print_ident(field.ident);\n-                    s.word_space(\":\");\n-                }\n-                s.print_expr(&field.expr);\n-                s.end();\n-            },\n-            |f| f.span,\n-        );\n-        match rest {\n-            ast::StructRest::Base(_) | ast::StructRest::Rest(_) => {\n-                self.ibox(INDENT_UNIT);\n-                if !fields.is_empty() {\n-                    self.word(\",\");\n-                    self.space();\n-                }\n-                self.word(\"..\");\n-                if let ast::StructRest::Base(ref expr) = *rest {\n-                    self.print_expr(expr);\n-                }\n-                self.end();\n+        let has_rest = match rest {\n+            ast::StructRest::Base(_) | ast::StructRest::Rest(_) => true,\n+            ast::StructRest::None => false,\n+        };\n+        if fields.is_empty() && !has_rest {\n+            self.word(\"}\");\n+            return;\n+        }\n+        self.cbox(0);\n+        for field in fields.iter().delimited() {\n+            self.maybe_print_comment(field.span.hi());\n+            self.print_outer_attributes(&field.attrs);\n+            if field.is_first {\n+                self.space_if_not_bol();\n+            }\n+            if !field.is_shorthand {\n+                self.print_ident(field.ident);\n+                self.word_nbsp(\":\");\n+            }\n+            self.print_expr(&field.expr);\n+            if !field.is_last || has_rest {\n+                self.word_space(\",\");\n+            } else {\n+                self.trailing_comma();\n             }\n-            ast::StructRest::None if !fields.is_empty() => self.word(\",\"),\n-            _ => {}\n         }\n+        if has_rest {\n+            if fields.is_empty() {\n+                self.space();\n+            }\n+            self.word(\"..\");\n+            if let ast::StructRest::Base(expr) = rest {\n+                self.print_expr(expr);\n+            }\n+            self.space();\n+        }\n+        self.offset(-INDENT_UNIT);\n+        self.end();\n         self.word(\"}\");\n     }\n "}, {"sha": "13008a8337979dca2dc39f0640d436bb45c23dc0", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59baf4db0f73e60702d1b4b101a0789e63ddce8f/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59baf4db0f73e60702d1b4b101a0789e63ddce8f/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=59baf4db0f73e60702d1b4b101a0789e63ddce8f", "patch": "@@ -139,7 +139,7 @@ impl<'a> PrintState<'a> for State<'a> {\n     }\n }\n \n-pub const INDENT_UNIT: usize = 4;\n+pub const INDENT_UNIT: isize = 4;\n \n /// Requires you to pass an input filename and reader so that\n /// it can scan the input text for comments to copy forward."}, {"sha": "27c86ec22b84ef1f52c9428debee24246c7d4511", "filename": "src/test/pretty/ast-stmt-expr-attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59baf4db0f73e60702d1b4b101a0789e63ddce8f/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59baf4db0f73e60702d1b4b101a0789e63ddce8f/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs?ref=59baf4db0f73e60702d1b4b101a0789e63ddce8f", "patch": "@@ -119,9 +119,9 @@ fn syntax() {\n     let _ = #[attr] foo![#! [attr]];\n     let _ = #[attr] foo! {};\n     let _ = #[attr] foo! { #! [attr] };\n-    let _ = #[attr] Foo{bar: baz,};\n-    let _ = #[attr] Foo{..foo};\n-    let _ = #[attr] Foo{bar: baz, ..foo};\n+    let _ = #[attr] Foo { bar: baz };\n+    let _ = #[attr] Foo { ..foo };\n+    let _ = #[attr] Foo { bar: baz, ..foo };\n     let _ = #[attr] (0);\n \n     {"}, {"sha": "80f739f4f9e1aa196be31d9ed4339a137caef71b", "filename": "src/test/pretty/issue-68710-field-attr-proc-mac-lost.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59baf4db0f73e60702d1b4b101a0789e63ddce8f/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59baf4db0f73e60702d1b4b101a0789e63ddce8f/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs?ref=59baf4db0f73e60702d1b4b101a0789e63ddce8f", "patch": "@@ -8,9 +8,10 @@ struct C {\n \n #[allow()]\n const C: C =\n-    C{\n+    C {\n         #[cfg(debug_assertions)]\n         field: 0,\n \n         #[cfg(not(debug_assertions))]\n-        field: 1,};\n+        field: 1,\n+    };"}, {"sha": "7ab22f1960c2d8fbc8daf2f8c5d253b97104135d", "filename": "src/test/pretty/stmt_expr_attributes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/59baf4db0f73e60702d1b4b101a0789e63ddce8f/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59baf4db0f73e60702d1b4b101a0789e63ddce8f/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs?ref=59baf4db0f73e60702d1b4b101a0789e63ddce8f", "patch": "@@ -90,9 +90,9 @@ struct Bar(());\n fn _7() {\n \n     #[rustc_dummy]\n-    Foo{data: (),};\n+    Foo { data: () };\n \n-    let _ = #[rustc_dummy] Foo{data: (),};\n+    let _ = #[rustc_dummy] Foo { data: () };\n }\n \n fn _8() {\n@@ -209,7 +209,7 @@ fn _11() {\n     let mut x = 0;\n     let _ = #[rustc_dummy] x = 15;\n     let _ = #[rustc_dummy] x += 15;\n-    let s = Foo{data: (),};\n+    let s = Foo { data: () };\n     let _ = #[rustc_dummy] s.data;\n     let _ = (#[rustc_dummy] s).data;\n     let t = Bar(());\n@@ -235,9 +235,9 @@ fn _11() {\n     let _ = #[rustc_dummy] expr_mac!();\n     let _ = #[rustc_dummy] expr_mac![];\n     let _ = #[rustc_dummy] expr_mac! {};\n-    let _ = #[rustc_dummy] Foo{data: (),};\n-    let _ = #[rustc_dummy] Foo{..s};\n-    let _ = #[rustc_dummy] Foo{data: (), ..s};\n+    let _ = #[rustc_dummy] Foo { data: () };\n+    let _ = #[rustc_dummy] Foo { ..s };\n+    let _ = #[rustc_dummy] Foo { data: (), ..s };\n     let _ = #[rustc_dummy] (0);\n }\n "}, {"sha": "57e5ab42f79d3a641d1406e9ccc9239aff81c003", "filename": "src/test/ui/macros/stringify.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/59baf4db0f73e60702d1b4b101a0789e63ddce8f/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59baf4db0f73e60702d1b4b101a0789e63ddce8f/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs?ref=59baf4db0f73e60702d1b4b101a0789e63ddce8f", "patch": "@@ -315,17 +315,17 @@ fn test_expr() {\n     assert_eq!(stringify_expr!(mac! { ... }), \"mac! { ... }\");\n \n     // ExprKind::Struct\n-    assert_eq!(stringify_expr!(Struct {}), \"Struct{}\"); // FIXME\n+    assert_eq!(stringify_expr!(Struct {}), \"Struct {}\");\n     #[rustfmt::skip] // https://github.com/rust-lang/rustfmt/issues/5151\n-    assert_eq!(stringify_expr!(<Struct as Trait>::Type {}), \"<Struct as Trait>::Type{}\");\n-    assert_eq!(stringify_expr!(Struct { .. }), \"Struct{..}\"); // FIXME\n-    assert_eq!(stringify_expr!(Struct { ..base }), \"Struct{..base}\"); // FIXME\n-    assert_eq!(stringify_expr!(Struct { x }), \"Struct{x,}\");\n-    assert_eq!(stringify_expr!(Struct { x, .. }), \"Struct{x, ..}\");\n-    assert_eq!(stringify_expr!(Struct { x, ..base }), \"Struct{x, ..base}\");\n-    assert_eq!(stringify_expr!(Struct { x: true }), \"Struct{x: true,}\");\n-    assert_eq!(stringify_expr!(Struct { x: true, .. }), \"Struct{x: true, ..}\");\n-    assert_eq!(stringify_expr!(Struct { x: true, ..base }), \"Struct{x: true, ..base}\");\n+    assert_eq!(stringify_expr!(<Struct as Trait>::Type {}), \"<Struct as Trait>::Type {}\");\n+    assert_eq!(stringify_expr!(Struct { .. }), \"Struct { .. }\");\n+    assert_eq!(stringify_expr!(Struct { ..base }), \"Struct { ..base }\");\n+    assert_eq!(stringify_expr!(Struct { x }), \"Struct { x }\");\n+    assert_eq!(stringify_expr!(Struct { x, .. }), \"Struct { x, .. }\");\n+    assert_eq!(stringify_expr!(Struct { x, ..base }), \"Struct { x, ..base }\");\n+    assert_eq!(stringify_expr!(Struct { x: true }), \"Struct { x: true }\");\n+    assert_eq!(stringify_expr!(Struct { x: true, .. }), \"Struct { x: true, .. }\");\n+    assert_eq!(stringify_expr!(Struct { x: true, ..base }), \"Struct { x: true, ..base }\");\n \n     // ExprKind::Repeat\n     assert_eq!(stringify_expr!([(); 0]), \"[(); 0]\");"}, {"sha": "49d72158e92ba8a813d451b2f29937b764edd16c", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.run.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59baf4db0f73e60702d1b4b101a0789e63ddce8f/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59baf4db0f73e60702d1b4b101a0789e63ddce8f/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr?ref=59baf4db0f73e60702d1b4b101a0789e63ddce8f", "patch": "@@ -1,6 +1,6 @@\n [$DIR/dbg-macro-expected-behavior.rs:20] Unit = Unit\n [$DIR/dbg-macro-expected-behavior.rs:21] a = Unit\n-[$DIR/dbg-macro-expected-behavior.rs:27] Point{x: 42, y: 24,} = Point {\n+[$DIR/dbg-macro-expected-behavior.rs:27] Point { x: 42, y: 24 } = Point {\n     x: 42,\n     y: 24,\n }"}]}