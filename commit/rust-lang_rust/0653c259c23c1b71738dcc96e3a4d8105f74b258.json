{"sha": "0653c259c23c1b71738dcc96e3a4d8105f74b258", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NTNjMjU5YzIzYzFiNzE3MzhkY2M5NmUzYTRkODEwNWY3NGIyNTg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-08-12T21:26:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-12T21:26:48Z"}, "message": "Rollup merge of #52955 - tromey:compiler-test-docs, r=nikomatsakis\n\nUpdate compiler test documentation\n\nUpdate the compiler test documentation to document ignore-gdb-version\nand min-system-llvm-version; and expand the min-gdb-version,\nmin-lldb-version, and min-llvm-version documentation a little.", "tree": {"sha": "692ae5be18a7950ae73571bcc991fd97afc27832", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/692ae5be18a7950ae73571bcc991fd97afc27832"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0653c259c23c1b71738dcc96e3a4d8105f74b258", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbcKYYCRBK7hj4Ov3rIwAAdHIIAE7PxLa1OFnEt+y3mVhkQWo0\nwBd+ePtsUgjcChlroyyGaoc0TUVibqos8u20Q3PkwRdfH59T5ohtzlSS/kw1PPLi\nnmFNCnqgLlXHasJwUS8ONExBJ6SnZf2UuXOk1IS9Gpzgorz0VsZKa4nVhd4sTbek\nndvKOCw4Wu484LshUHqxVPjhIcvmB6TtPhvW7khrHJsjvmoe5Zvr6ezi4+pYn3Uk\nT8iDO/PHHBAzDzEVOIje5za1NPlOrC7eEfVV2rAB0ORj+CF2XSn3XMyDwILyyzuz\nD6lrCs5I2puA4U/bSXALlMX8rP63oXTgvzeCCSXNDGgaFO0VJsOtKT/kKtntKkU=\n=/umE\n-----END PGP SIGNATURE-----\n", "payload": "tree 692ae5be18a7950ae73571bcc991fd97afc27832\nparent 0aa8d0320266b5579428312095fe49af05ada972\nparent 8a766564351cf9a2305269aeb28e2db658d701cf\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1534109208 +0200\ncommitter GitHub <noreply@github.com> 1534109208 +0200\n\nRollup merge of #52955 - tromey:compiler-test-docs, r=nikomatsakis\n\nUpdate compiler test documentation\n\nUpdate the compiler test documentation to document ignore-gdb-version\nand min-system-llvm-version; and expand the min-gdb-version,\nmin-lldb-version, and min-llvm-version documentation a little.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0653c259c23c1b71738dcc96e3a4d8105f74b258", "html_url": "https://github.com/rust-lang/rust/commit/0653c259c23c1b71738dcc96e3a4d8105f74b258", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0653c259c23c1b71738dcc96e3a4d8105f74b258/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aa8d0320266b5579428312095fe49af05ada972", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa8d0320266b5579428312095fe49af05ada972", "html_url": "https://github.com/rust-lang/rust/commit/0aa8d0320266b5579428312095fe49af05ada972"}, {"sha": "8a766564351cf9a2305269aeb28e2db658d701cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a766564351cf9a2305269aeb28e2db658d701cf", "html_url": "https://github.com/rust-lang/rust/commit/8a766564351cf9a2305269aeb28e2db658d701cf"}], "stats": {"total": 186, "additions": 2, "deletions": 184}, "files": [{"sha": "81a46ea0fe718b1ff5e90b4a06422dcb49091afe", "filename": "src/test/COMPILER_TESTS.md", "status": "modified", "additions": 2, "deletions": 184, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/0653c259c23c1b71738dcc96e3a4d8105f74b258/src%2Ftest%2FCOMPILER_TESTS.md", "raw_url": "https://github.com/rust-lang/rust/raw/0653c259c23c1b71738dcc96e3a4d8105f74b258/src%2Ftest%2FCOMPILER_TESTS.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2FCOMPILER_TESTS.md?ref=0653c259c23c1b71738dcc96e3a4d8105f74b258", "patch": "@@ -1,186 +1,4 @@\n # Compiler Test Documentation\n \n-In the Rust project, we use a special set of commands embedded in\n-comments to test the Rust compiler. There are two groups of commands:\n-\n-1. Header commands\n-2. Error info commands\n-\n-Both types of commands are inside comments, but header commands should\n-be in a comment before any code.\n-\n-## Summary of Error Info Commands\n-\n-Error commands specify something about certain lines of the\n-program. They tell the test what kind of error and what message you\n-are expecting.\n-\n-* `~`: Associates the following error level and message with the\n-  current line\n-* `~|`: Associates the following error level and message with the same\n-  line as the previous comment\n-* `~^`: Associates the following error level and message with the\n-  previous line. Each caret (`^`) that you add adds a line to this, so\n-  `~^^^^^^^` is seven lines up.\n-\n-The error levels that you can have are:\n-\n-1. `ERROR`\n-2. `WARNING`\n-3. `NOTE`\n-4. `HELP` and `SUGGESTION`*\n-\n-\\* **Note**: `SUGGESTION` must follow immediately after `HELP`.\n-\n-## Summary of Header Commands\n-\n-Header commands specify something about the entire test file as a\n-whole. They are normally put right after the copyright comment, e.g.:\n-\n-```Rust\n-// Copyright blah blah blah\n-// except according to those terms.\n-\n-// ignore-test This doesn't actually work\n-```\n-\n-### Ignoring tests\n-\n-These are used to ignore the test in some situations, which means the test won't\n-be compiled or run.\n-\n-* `ignore-X` where `X` is a target detail or stage will ignore the test accordingly (see below)\n-* `ignore-pretty` will not compile the pretty-printed test (this is done to test the pretty-printer, but might not always work)\n-* `ignore-test` always ignores the test\n-* `ignore-lldb` and `ignore-gdb` will skip a debuginfo test on that debugger.\n-\n-`only-X` is the opposite. The test will run only when `X` matches.\n-\n-Some examples of `X` in `ignore-X`:\n-\n-* Architecture: `aarch64`, `arm`, `asmjs`, `mips`, `wasm32`, `x86_64`, `x86`, ...\n-* OS: `android`, `emscripten`, `freebsd`, `ios`, `linux`, `macos`, `windows`, ...\n-* Environment (fourth word of the target triple): `gnu`, `msvc`, `musl`.\n-* Pointer width: `32bit`, `64bit`.\n-* Stage: `stage0`, `stage1`, `stage2`.\n-\n-### Other Header Commands\n-\n-* `min-{gdb,lldb}-version`\n-* `min-llvm-version`\n-* `compile-pass` for UI tests, indicates that the test is supposed\n-  to compile, as opposed to the default where the test is supposed to error out.\n-* `compile-flags` passes extra command-line args to the compiler,\n-  e.g. `compile-flags -g` which forces debuginfo to be enabled.\n-* `should-fail` indicates that the test should fail; used for \"meta testing\",\n-  where we test the compiletest program itself to check that it will generate\n-  errors in appropriate scenarios. This header is ignored for pretty-printer tests.\n-* `gate-test-X` where `X` is a feature marks the test as \"gate test\" for feature X.\n-  Such tests are supposed to ensure that the compiler errors when usage of a gated\n-  feature is attempted without the proper `#![feature(X)]` tag.\n-  Each unstable lang feature is required to have a gate test.\n-\n-## Revisions\n-\n-Certain classes of tests support \"revisions\" (as of the time of this\n-writing, this includes run-pass, compile-fail, run-fail, and\n-incremental, though incremental tests are somewhat\n-different). Revisions allow a single test file to be used for multiple\n-tests. This is done by adding a special header at the top of the file:\n-\n-```\n-// revisions: foo bar baz\n-```\n-\n-This will result in the test being compiled (and tested) three times,\n-once with `--cfg foo`, once with `--cfg bar`, and once with `--cfg\n-baz`. You can therefore use `#[cfg(foo)]` etc within the test to tweak\n-each of these results.\n-\n-You can also customize headers and expected error messages to a particular\n-revision. To do this, add `[foo]` (or `bar`, `baz`, etc) after the `//`\n-comment, like so:\n-\n-```\n-// A flag to pass in only for cfg `foo`:\n-//[foo]compile-flags: -Z verbose\n-\n-#[cfg(foo)]\n-fn test_foo() {\n-    let x: usize = 32_u32; //[foo]~ ERROR mismatched types\n-}\n-```\n-\n-Note that not all headers have meaning when customized to a revision.\n-For example, the `ignore-test` header (and all \"ignore\" headers)\n-currently only apply to the test as a whole, not to particular\n-revisions. The only headers that are intended to really work when\n-customized to a revision are error patterns and compiler flags.\n-\n-## Guide to the UI Tests\n-\n-The UI tests are intended to capture the compiler's complete output,\n-so that we can test all aspects of the presentation. They work by\n-compiling a file (e.g., `ui/hello_world/main.rs`), capturing the output,\n-and then applying some normalization (see below). This normalized\n-result is then compared against reference files named\n-`ui/hello_world/main.stderr` and `ui/hello_world/main.stdout`. If either of\n-those files doesn't exist, the output must be empty. If the test run\n-fails, we will print out the current output, but it is also saved in\n-`build/<target-triple>/test/ui/hello_world/main.stdout` (this path is\n-printed as part of the test failure message), so you can run `diff` and\n-so forth.\n-\n-Normally, the test-runner checks that UI tests fail compilation. If you want\n-to do a UI test for code that *compiles* (e.g. to test warnings, or if you\n-have a collection of tests, only some of which error out), you can use the\n-`// compile-pass` header command to have the test runner instead\n-check that the test compiles successfully.\n-\n-### Editing and updating the reference files\n-\n-If you have changed the compiler's output intentionally, or you are\n-making a new test, you can pass `--bless` to the command you used to\n-run the tests. This will then copy over the files\n-from the build directory and use them as the new reference.\n-\n-### Normalization\n-\n-The normalization applied is aimed at eliminating output difference\n-between platforms, mainly about filenames:\n-\n-- the test directory is replaced with `$DIR`\n-- all backslashes (`\\`) are converted to forward slashes (`/`) (for Windows)\n-- all CR LF newlines are converted to LF\n-\n-Sometimes these built-in normalizations are not enough. In such cases, you\n-may provide custom normalization rules using the header commands, e.g.\n-\n-```\n-// normalize-stdout-test: \"foo\" -> \"bar\"\n-// normalize-stderr-32bit: \"fn\\(\\) \\(32 bits\\)\" -> \"fn\\(\\) \\($$PTR bits\\)\"\n-// normalize-stderr-64bit: \"fn\\(\\) \\(64 bits\\)\" -> \"fn\\(\\) \\($$PTR bits\\)\"\n-```\n-\n-This tells the test, on 32-bit platforms, whenever the compiler writes\n-`fn() (32 bits)` to stderr, it should be normalized to read `fn() ($PTR bits)`\n-instead. Similar for 64-bit. The replacement is performed by regexes using\n-default regex flavor provided by `regex` crate.\n-\n-The corresponding reference file will use the normalized output to test both\n-32-bit and 64-bit platforms:\n-\n-```\n-...\n-   |\n-   = note: source type: fn() ($PTR bits)\n-   = note: target type: u16 (16 bits)\n-...\n-```\n-\n-Please see `ui/transmute/main.rs` and `.stderr` for a concrete usage example.\n-\n-Besides `normalize-stderr-32bit` and `-64bit`, one may use any target\n-information or stage supported by `ignore-X` here as well (e.g.\n-`normalize-stderr-windows` or simply `normalize-stderr-test` for unconditional\n-replacement).\n+Documentation the compiler testing framework has moved to\n+[the rustc guide](https://rust-lang-nursery.github.io/rustc-guide/tests/intro.html)."}]}