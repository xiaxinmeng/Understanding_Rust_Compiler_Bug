{"sha": "8d0243a01ed1aaca220407fba0c761c9ef8d217a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMDI0M2EwMWVkMWFhY2EyMjA0MDdmYmEwYzc2MWM5ZWY4ZDIxN2E=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-09T19:01:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-09T19:01:56Z"}, "message": "Rollup merge of #62527 - matklad:debug-assert, r=Centril\n\nclarify that debug_assert does not completely omits the code\n\nTIL that debug_assert is implemented using `if cfg!(debug_assertions)`\nrather than `#[cfg(debug_assertions)]`. This means one can not use API\ngated with `#[cfg(debug_assertions)]` in `debug_assert` family of\nmacros.", "tree": {"sha": "1cd125c779225744991fa56e306f7e13689f0f1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cd125c779225744991fa56e306f7e13689f0f1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d0243a01ed1aaca220407fba0c761c9ef8d217a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdJOSlCRBK7hj4Ov3rIwAAdHIIAEc3Lm3zZcait4BbQmPwV3xh\n2OmFj2pkSBAZkiQc2AogTSgJZPn1itZDRXwk+dl6hVCjrJdR/Tku9lX5I9QC8iau\ny+wV229WX1WgzApoRJ/leQvEo9ao3JyM2hwHzbQUgUrPkSqs1WlCfIqPtep0DOfg\nzL3zJA2OBWS6qpTunVfl23s+EOi7OOXu4ZFnBCY+h9ZF+5vHj4FqjXpmpCB9io5+\nVqFhBJRvDklpyLPL9MEW4mYCChpXz8hPBCSAc0vYnvFCFetzW84/UffqqPOsoYqj\nJAX0TxRSQ699blXDK9Zj4IUNpDUg2qIRqJofheuRzoaDC1MWDJUBfLwvHAuB+Fs=\n=MCeu\n-----END PGP SIGNATURE-----\n", "payload": "tree 1cd125c779225744991fa56e306f7e13689f0f1f\nparent c57a223f15af31e5c11cfe7102e617510e204904\nparent b052fbb54b09f4bf5e428929758671419de87a63\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562698916 +0200\ncommitter GitHub <noreply@github.com> 1562698916 +0200\n\nRollup merge of #62527 - matklad:debug-assert, r=Centril\n\nclarify that debug_assert does not completely omits the code\n\nTIL that debug_assert is implemented using `if cfg!(debug_assertions)`\nrather than `#[cfg(debug_assertions)]`. This means one can not use API\ngated with `#[cfg(debug_assertions)]` in `debug_assert` family of\nmacros.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d0243a01ed1aaca220407fba0c761c9ef8d217a", "html_url": "https://github.com/rust-lang/rust/commit/8d0243a01ed1aaca220407fba0c761c9ef8d217a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d0243a01ed1aaca220407fba0c761c9ef8d217a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c57a223f15af31e5c11cfe7102e617510e204904", "url": "https://api.github.com/repos/rust-lang/rust/commits/c57a223f15af31e5c11cfe7102e617510e204904", "html_url": "https://github.com/rust-lang/rust/commit/c57a223f15af31e5c11cfe7102e617510e204904"}, {"sha": "b052fbb54b09f4bf5e428929758671419de87a63", "url": "https://api.github.com/repos/rust-lang/rust/commits/b052fbb54b09f4bf5e428929758671419de87a63", "html_url": "https://github.com/rust-lang/rust/commit/b052fbb54b09f4bf5e428929758671419de87a63"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "2e999a0682b402d04002111bd0be5adb13aaf9cf", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d0243a01ed1aaca220407fba0c761c9ef8d217a/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d0243a01ed1aaca220407fba0c761c9ef8d217a/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=8d0243a01ed1aaca220407fba0c761c9ef8d217a", "patch": "@@ -145,11 +145,11 @@ macro_rules! assert_ne {\n /// # Uses\n ///\n /// Unlike [`assert!`], `debug_assert!` statements are only enabled in non\n-/// optimized builds by default. An optimized build will omit all\n+/// optimized builds by default. An optimized build will not execute\n /// `debug_assert!` statements unless `-C debug-assertions` is passed to the\n /// compiler. This makes `debug_assert!` useful for checks that are too\n /// expensive to be present in a release build but may be helpful during\n-/// development.\n+/// development. The result of expanding `debug_assert!` is always type checked.\n ///\n /// An unchecked assertion allows a program in an inconsistent state to keep\n /// running, which might have unexpected consequences but does not introduce\n@@ -190,11 +190,11 @@ macro_rules! debug_assert {\n /// debug representations.\n ///\n /// Unlike [`assert_eq!`], `debug_assert_eq!` statements are only enabled in non\n-/// optimized builds by default. An optimized build will omit all\n+/// optimized builds by default. An optimized build will not execute\n /// `debug_assert_eq!` statements unless `-C debug-assertions` is passed to the\n /// compiler. This makes `debug_assert_eq!` useful for checks that are too\n /// expensive to be present in a release build but may be helpful during\n-/// development.\n+/// development. The result of expanding `debug_assert_eq!` is always type checked.\n ///\n /// [`assert_eq!`]: ../std/macro.assert_eq.html\n ///\n@@ -217,11 +217,11 @@ macro_rules! debug_assert_eq {\n /// debug representations.\n ///\n /// Unlike [`assert_ne!`], `debug_assert_ne!` statements are only enabled in non\n-/// optimized builds by default. An optimized build will omit all\n+/// optimized builds by default. An optimized build will not execute\n /// `debug_assert_ne!` statements unless `-C debug-assertions` is passed to the\n /// compiler. This makes `debug_assert_ne!` useful for checks that are too\n /// expensive to be present in a release build but may be helpful during\n-/// development.\n+/// development. The result of expanding `debug_assert_ne!` is always type checked.\n ///\n /// [`assert_ne!`]: ../std/macro.assert_ne.html\n ///"}]}