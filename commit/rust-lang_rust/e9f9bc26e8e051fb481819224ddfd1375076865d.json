{"sha": "e9f9bc26e8e051fb481819224ddfd1375076865d", "node_id": "C_kwDOAAsO6NoAKGU5ZjliYzI2ZThlMDUxZmI0ODE4MTkyMjRkZGZkMTM3NTA3Njg2NWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-13T09:44:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-13T09:44:41Z"}, "message": "Auto merge of #14795 - Veykril:hl-macros, r=Veykril\n\nfix: Add macro modifier for highlighting tokens in macro calls\n\nFollowup to https://github.com/rust-lang/rust-analyzer/pull/14777 we have to tell the client about the semantic tokens inside macro calls as those can be remapped. Adding a modifier will force this behavior.", "tree": {"sha": "ec63a8907fd8bfb2f4ac4b3491c29ec6baf9e97c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec63a8907fd8bfb2f4ac4b3491c29ec6baf9e97c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9f9bc26e8e051fb481819224ddfd1375076865d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9f9bc26e8e051fb481819224ddfd1375076865d", "html_url": "https://github.com/rust-lang/rust/commit/e9f9bc26e8e051fb481819224ddfd1375076865d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9f9bc26e8e051fb481819224ddfd1375076865d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "884dd8c966e29d48bd9f8e5f22440cd238aa7cf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/884dd8c966e29d48bd9f8e5f22440cd238aa7cf1", "html_url": "https://github.com/rust-lang/rust/commit/884dd8c966e29d48bd9f8e5f22440cd238aa7cf1"}, {"sha": "8e116855f5326ea5bda7181857400c2e27831259", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e116855f5326ea5bda7181857400c2e27831259", "html_url": "https://github.com/rust-lang/rust/commit/8e116855f5326ea5bda7181857400c2e27831259"}], "stats": {"total": 303, "additions": 172, "deletions": 131}, "files": [{"sha": "751e51da0d28947d4b6621626b83968068976c0e", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 45, "deletions": 33, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=e9f9bc26e8e051fb481819224ddfd1375076865d", "patch": "@@ -166,6 +166,7 @@ pub struct HighlightConfig {\n // injected:: Emitted for doc-string injected highlighting like rust source blocks in documentation.\n // intraDocLink:: Emitted for intra doc links in doc-strings.\n // library:: Emitted for items that are defined outside of the current crate.\n+// macro::  Emitted for tokens inside macro calls.\n // mutable:: Emitted for mutable locals and statics as well as functions taking `&mut self`.\n // public:: Emitted for items that are from the current crate and are `pub`.\n // reference:: Emitted for locals behind a reference and functions taking `self` by reference.\n@@ -240,6 +241,7 @@ fn traverse(\n     let mut current_macro: Option<ast::Macro> = None;\n     let mut macro_highlighter = MacroHighlighter::default();\n     let mut inside_attribute = false;\n+    let mut inside_macro_call = false;\n \n     // Walk all nodes, keeping track of whether we are inside a macro or not.\n     // If in macro, expand it first and highlight the expanded code.\n@@ -270,46 +272,50 @@ fn traverse(\n                 inside_attribute = false\n             }\n \n-            Enter(NodeOrToken::Node(node)) if ast::Item::can_cast(node.kind()) => {\n-                match ast::Item::cast(node.clone()) {\n-                    Some(ast::Item::MacroRules(mac)) => {\n-                        macro_highlighter.init();\n-                        current_macro = Some(mac.into());\n-                        continue;\n-                    }\n-                    Some(ast::Item::MacroDef(mac)) => {\n-                        macro_highlighter.init();\n-                        current_macro = Some(mac.into());\n-                        continue;\n-                    }\n-                    Some(item) => {\n-                        if matches!(node.kind(), FN | CONST | STATIC) {\n-                            bindings_shadow_count.clear();\n+            Enter(NodeOrToken::Node(node)) => match ast::Item::cast(node.clone()) {\n+                Some(item) => {\n+                    match item {\n+                        ast::Item::MacroRules(mac) => {\n+                            macro_highlighter.init();\n+                            current_macro = Some(mac.into());\n+                            continue;\n+                        }\n+                        ast::Item::MacroDef(mac) => {\n+                            macro_highlighter.init();\n+                            current_macro = Some(mac.into());\n+                            continue;\n                         }\n+                        ast::Item::Fn(_) | ast::Item::Const(_) | ast::Item::Static(_) => {\n+                            bindings_shadow_count.clear()\n+                        }\n+                        ast::Item::MacroCall(_) => {\n+                            inside_macro_call = true;\n+                        }\n+                        _ => (),\n+                    }\n \n-                        if attr_or_derive_item.is_none() {\n-                            if sema.is_attr_macro_call(&item) {\n-                                attr_or_derive_item = Some(AttrOrDerive::Attr(item));\n-                            } else {\n-                                let adt = match item {\n-                                    ast::Item::Enum(it) => Some(ast::Adt::Enum(it)),\n-                                    ast::Item::Struct(it) => Some(ast::Adt::Struct(it)),\n-                                    ast::Item::Union(it) => Some(ast::Adt::Union(it)),\n-                                    _ => None,\n-                                };\n-                                match adt {\n-                                    Some(adt) if sema.is_derive_annotated(&adt) => {\n-                                        attr_or_derive_item =\n-                                            Some(AttrOrDerive::Derive(ast::Item::from(adt)));\n-                                    }\n-                                    _ => (),\n+                    if attr_or_derive_item.is_none() {\n+                        if sema.is_attr_macro_call(&item) {\n+                            attr_or_derive_item = Some(AttrOrDerive::Attr(item));\n+                        } else {\n+                            let adt = match item {\n+                                ast::Item::Enum(it) => Some(ast::Adt::Enum(it)),\n+                                ast::Item::Struct(it) => Some(ast::Adt::Struct(it)),\n+                                ast::Item::Union(it) => Some(ast::Adt::Union(it)),\n+                                _ => None,\n+                            };\n+                            match adt {\n+                                Some(adt) if sema.is_derive_annotated(&adt) => {\n+                                    attr_or_derive_item =\n+                                        Some(AttrOrDerive::Derive(ast::Item::from(adt)));\n                                 }\n+                                _ => (),\n                             }\n                         }\n                     }\n-                    _ => (),\n                 }\n-            }\n+                _ => (),\n+            },\n             Leave(NodeOrToken::Node(node)) if ast::Item::can_cast(node.kind()) => {\n                 match ast::Item::cast(node.clone()) {\n                     Some(ast::Item::MacroRules(mac)) => {\n@@ -327,6 +333,9 @@ fn traverse(\n                     {\n                         attr_or_derive_item = None;\n                     }\n+                    Some(ast::Item::MacroCall(_)) => {\n+                        inside_macro_call = false;\n+                    }\n                     _ => (),\n                 }\n             }\n@@ -476,6 +485,9 @@ fn traverse(\n             if inside_attribute {\n                 highlight |= HlMod::Attribute\n             }\n+            if inside_macro_call && tt_level > 0 {\n+                highlight |= HlMod::Macro\n+            }\n \n             hl.add(HlRange { range, highlight, binding_hash });\n         }"}, {"sha": "901df147d32c0f93d36eabd2f58ec6ff18193553", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=e9f9bc26e8e051fb481819224ddfd1375076865d", "patch": "@@ -52,7 +52,11 @@ pub(super) fn ra_fixture(\n \n         if let Some(next) = text.strip_prefix(marker) {\n             if let Some(range) = literal.map_range_up(TextRange::at(offset, TextSize::of(marker))) {\n-                hl.add(HlRange { range, highlight: HlTag::Keyword.into(), binding_hash: None });\n+                hl.add(HlRange {\n+                    range,\n+                    highlight: HlTag::Keyword | HlMod::Injected,\n+                    binding_hash: None,\n+                });\n             }\n \n             text = next;\n@@ -66,14 +70,24 @@ pub(super) fn ra_fixture(\n \n     for mut hl_range in analysis\n         .highlight(\n-            HighlightConfig { syntactic_name_ref_highlighting: false, ..config },\n+            HighlightConfig {\n+                syntactic_name_ref_highlighting: false,\n+                punctuation: true,\n+                operator: true,\n+                strings: true,\n+                specialize_punctuation: config.specialize_punctuation,\n+                specialize_operator: config.operator,\n+                inject_doc_comment: config.inject_doc_comment,\n+                macro_bang: config.macro_bang,\n+            },\n             tmp_file_id,\n         )\n         .unwrap()\n     {\n         for range in inj.map_range_up(hl_range.range) {\n             if let Some(range) = literal.map_range_up(range) {\n                 hl_range.range = range;\n+                hl_range.highlight |= HlMod::Injected;\n                 hl.add(hl_range);\n             }\n         }\n@@ -217,7 +231,16 @@ pub(super) fn doc_comment(\n     if let Ok(ranges) = analysis.with_db(|db| {\n         super::highlight(\n             db,\n-            HighlightConfig { syntactic_name_ref_highlighting: true, ..config },\n+            HighlightConfig {\n+                syntactic_name_ref_highlighting: true,\n+                punctuation: true,\n+                operator: true,\n+                strings: true,\n+                specialize_punctuation: config.specialize_punctuation,\n+                specialize_operator: config.operator,\n+                inject_doc_comment: config.inject_doc_comment,\n+                macro_bang: config.macro_bang,\n+            },\n             tmp_file_id,\n             None,\n         )"}, {"sha": "f983109115f6c06faa28f644153a5dfa88c35da2", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=e9f9bc26e8e051fb481819224ddfd1375076865d", "patch": "@@ -49,7 +49,7 @@ pub enum HlMod {\n     Associated = 0,\n     /// Used with keywords like `async` and `await`.\n     Async,\n-    /// Used to differentiate individual elements within attributes.\n+    /// Used to differentiate individual elements within attribute calls.\n     Attribute,\n     /// Callable item or value.\n     Callable,\n@@ -72,6 +72,8 @@ pub enum HlMod {\n     IntraDocLink,\n     /// Used for items from other crates.\n     Library,\n+    /// Used to differentiate individual elements within macro calls.\n+    Macro,\n     /// Mutable binding.\n     Mutable,\n     /// Used for public items.\n@@ -200,7 +202,7 @@ impl fmt::Display for HlTag {\n }\n \n impl HlMod {\n-    const ALL: &'static [HlMod; 19] = &[\n+    const ALL: &'static [HlMod; HlMod::Unsafe as usize + 1] = &[\n         HlMod::Associated,\n         HlMod::Async,\n         HlMod::Attribute,\n@@ -214,6 +216,7 @@ impl HlMod {\n         HlMod::Injected,\n         HlMod::IntraDocLink,\n         HlMod::Library,\n+        HlMod::Macro,\n         HlMod::Mutable,\n         HlMod::Public,\n         HlMod::Reference,\n@@ -237,6 +240,7 @@ impl HlMod {\n             HlMod::Injected => \"injected\",\n             HlMod::IntraDocLink => \"intra_doc_link\",\n             HlMod::Library => \"library\",\n+            HlMod::Macro => \"macro\",\n             HlMod::Mutable => \"mutable\",\n             HlMod::Public => \"public\",\n             HlMod::Reference => \"reference\","}, {"sha": "35f240d4284719dec5d4472def30fd20cdd6ae2e", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=e9f9bc26e8e051fb481819224ddfd1375076865d", "patch": "@@ -93,7 +93,7 @@\n     <span class=\"comment documentation\">///</span><span class=\"comment documentation\"> </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"variable declaration injected\">foo</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">///</span><span class=\"comment documentation\"> </span><span class=\"comment injected\">// calls bar on foo</span>\n-    <span class=\"comment documentation\">///</span><span class=\"comment documentation\"> </span><span class=\"macro injected\">assert</span><span class=\"macro_bang injected\">!</span><span class=\"parenthesis injected\">(</span><span class=\"none injected\">foo</span><span class=\"operator injected\">.</span><span class=\"none injected\">bar</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n+    <span class=\"comment documentation\">///</span><span class=\"comment documentation\"> </span><span class=\"macro injected\">assert</span><span class=\"macro_bang injected\">!</span><span class=\"parenthesis injected macro\">(</span><span class=\"none injected macro\">foo</span><span class=\"operator injected macro\">.</span><span class=\"none injected macro\">bar</span><span class=\"parenthesis injected macro\">(</span><span class=\"parenthesis injected macro\">)</span><span class=\"parenthesis injected macro\">)</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">///</span><span class=\"comment documentation\"> </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"variable declaration injected\">bar</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"variable injected\">foo</span><span class=\"operator injected\">.</span><span class=\"field injected\">bar</span><span class=\"none injected\"> </span><span class=\"logical injected\">||</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"constant injected\">bar</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n@@ -145,7 +145,7 @@\n \n <span class=\"comment documentation\">/// ```</span>\n <span class=\"comment documentation\">///</span><span class=\"comment documentation\"> </span><span class=\"keyword injected\">macro_rules</span><span class=\"macro_bang injected\">!</span><span class=\"none injected\"> </span><span class=\"macro declaration injected\">noop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"none injected\"> </span><span class=\"parenthesis injected\">(</span><span class=\"punctuation injected\">$</span><span class=\"none injected\">expr</span><span class=\"colon injected\">:</span><span class=\"none injected\">expr</span><span class=\"parenthesis injected\">)</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"angle injected\">&gt;</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">$</span><span class=\"none injected\">expr </span><span class=\"brace injected\">}</span><span class=\"brace injected\">}</span>\n-<span class=\"comment documentation\">///</span><span class=\"comment documentation\"> </span><span class=\"macro injected\">noop</span><span class=\"macro_bang injected\">!</span><span class=\"parenthesis injected\">(</span><span class=\"numeric_literal injected\">1</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n+<span class=\"comment documentation\">///</span><span class=\"comment documentation\"> </span><span class=\"macro injected\">noop</span><span class=\"macro_bang injected\">!</span><span class=\"parenthesis injected macro\">(</span><span class=\"numeric_literal injected macro\">1</span><span class=\"parenthesis injected macro\">)</span><span class=\"semicolon injected\">;</span>\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"keyword\">macro_rules</span><span class=\"macro_bang\">!</span> <span class=\"macro declaration\">noop</span> <span class=\"brace\">{</span>\n     <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>expr<span class=\"colon\">:</span>expr<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n@@ -165,7 +165,7 @@\n <span class=\"comment documentation\">///</span>\n <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">feature</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"alloc\"</span><span class=\"comma attribute\">,</span> <span class=\"none attribute\">doc</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"```rust\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n <span class=\"attribute_bracket attribute\">#</span><span class=\"attribute_bracket attribute\">[</span><span class=\"builtin_attr attribute library\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">not</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">feature</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"alloc\"</span><span class=\"parenthesis attribute\">)</span><span class=\"comma attribute\">,</span> <span class=\"none attribute\">doc</span> <span class=\"operator attribute\">=</span> <span class=\"string_literal attribute\">\"```ignore\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute_bracket attribute\">]</span>\n-<span class=\"comment documentation\">///</span><span class=\"comment documentation\"> </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"function injected\">example</span><span class=\"parenthesis injected\">(</span><span class=\"operator injected\">&</span><span class=\"module injected\">alloc</span><span class=\"operator injected\">::</span><span class=\"macro injected\">vec</span><span class=\"macro_bang injected\">!</span><span class=\"bracket injected\">[</span><span class=\"numeric_literal injected\">1</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">2</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">3</span><span class=\"bracket injected\">]</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n+<span class=\"comment documentation\">///</span><span class=\"comment documentation\"> </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"function injected\">example</span><span class=\"parenthesis injected\">(</span><span class=\"operator injected\">&</span><span class=\"module injected\">alloc</span><span class=\"operator injected\">::</span><span class=\"macro injected\">vec</span><span class=\"macro_bang injected\">!</span><span class=\"bracket injected macro\">[</span><span class=\"numeric_literal injected macro\">1</span><span class=\"comma injected macro\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected macro\">2</span><span class=\"comma injected macro\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected macro\">3</span><span class=\"bracket injected macro\">]</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration public\">mix_and_match</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n "}, {"sha": "6b049f379ac1d1254ba4c30d5b24b758fd4aff2c", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_general.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html", "raw_url": "https://github.com/rust-lang/rust/raw/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_general.html?ref=e9f9bc26e8e051fb481819224ddfd1375076865d", "patch": "@@ -178,7 +178,7 @@\n <span class=\"keyword\">impl</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">T</span><span class=\"angle\">&gt;</span> <span class=\"enum\">Option</span><span class=\"angle\">&lt;</span><span class=\"type_param\">T</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">fn</span> <span class=\"function associated consuming declaration\">and</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">U</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">(</span><span class=\"self_keyword declaration\">self</span><span class=\"comma\">,</span> <span class=\"value_param declaration\">other</span><span class=\"colon\">:</span> <span class=\"enum\">Option</span><span class=\"angle\">&lt;</span><span class=\"type_param\">U</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"enum\">Option</span><span class=\"angle\">&lt;</span><span class=\"parenthesis\">(</span><span class=\"type_param\">T</span><span class=\"comma\">,</span> <span class=\"type_param\">U</span><span class=\"parenthesis\">)</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n         <span class=\"keyword control\">match</span> <span class=\"value_param\">other</span> <span class=\"brace\">{</span>\n-            <span class=\"enum_variant\">None</span> <span class=\"operator\">=&gt;</span> <span class=\"unresolved_reference\">unimplemented</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n+            <span class=\"enum_variant\">None</span> <span class=\"operator\">=&gt;</span> <span class=\"unresolved_reference\">unimplemented</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"parenthesis macro\">)</span><span class=\"comma\">,</span>\n             <span class=\"variable declaration\">Nope</span> <span class=\"operator\">=&gt;</span> <span class=\"variable\">Nope</span><span class=\"comma\">,</span>\n         <span class=\"brace\">}</span>\n     <span class=\"brace\">}</span>\n@@ -192,7 +192,7 @@\n <span class=\"keyword async\">async</span> <span class=\"keyword\">fn</span> <span class=\"function async declaration\">async_main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">f1</span> <span class=\"operator\">=</span> <span class=\"function async\">learn_and_sing</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">f2</span> <span class=\"operator\">=</span> <span class=\"unresolved_reference\">dance</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"unresolved_reference\">futures</span><span class=\"operator\">::</span><span class=\"unresolved_reference\">join</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span>f1<span class=\"comma\">,</span> f2<span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"unresolved_reference\">futures</span><span class=\"operator\">::</span><span class=\"unresolved_reference\">join</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"none macro\">f1</span><span class=\"comma macro\">,</span> <span class=\"none macro\">f2</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">use_foo_items</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n@@ -204,7 +204,7 @@\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">control_flow</span> <span class=\"operator\">=</span> <span class=\"module crate_root library\">foo</span><span class=\"operator\">::</span><span class=\"function library\">identity</span><span class=\"parenthesis\">(</span><span class=\"module crate_root library\">foo</span><span class=\"operator\">::</span><span class=\"enum library\">ControlFlow</span><span class=\"operator\">::</span><span class=\"enum_variant library\">Continue</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n     <span class=\"keyword control\">if</span> <span class=\"variable\">control_flow</span><span class=\"operator\">.</span><span class=\"function associated consuming library\">should_die</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-        <span class=\"module crate_root library\">foo</span><span class=\"operator\">::</span><span class=\"unresolved_reference\">die</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+        <span class=\"module crate_root library\">foo</span><span class=\"operator\">::</span><span class=\"unresolved_reference\">die</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n "}, {"sha": "d9c3db6fbb510125e3ce0f63c792bcfb19e31ba7", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_injection.html", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html?ref=e9f9bc26e8e051fb481819224ddfd1375076865d", "patch": "@@ -45,18 +45,18 @@\n <pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">fixture</span><span class=\"parenthesis\">(</span><span class=\"value_param declaration reference\">ra_fixture</span><span class=\"colon\">:</span> <span class=\"punctuation\">&</span><span class=\"builtin_type\">str</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-    <span class=\"function\">fixture</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">r#\"</span>\n-<span class=\"keyword\">trait</span> <span class=\"trait declaration\">Foo</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function associated declaration static trait\">foo</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-        <span class=\"unresolved_reference\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"2 + 2 = {}\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">4</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"brace\">}</span>\n-<span class=\"brace\">}</span><span class=\"string_literal\">\"#</span>\n+    <span class=\"function\">fixture</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">r#\"</span><span class=\"none injected\">\n+</span><span class=\"keyword injected\">trait</span><span class=\"none injected\"> </span><span class=\"trait declaration injected\">Foo</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"none injected\">\n+    </span><span class=\"keyword injected\">fn</span><span class=\"none injected\"> </span><span class=\"function associated declaration injected static trait\">foo</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"none injected\">\n+        </span><span class=\"unresolved_reference injected\">println</span><span class=\"macro_bang injected\">!</span><span class=\"parenthesis injected macro\">(</span><span class=\"string_literal injected macro\">\"2 + 2 = {}\"</span><span class=\"comma injected macro\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected macro\">4</span><span class=\"parenthesis injected macro\">)</span><span class=\"semicolon injected\">;</span><span class=\"none injected\">\n+    </span><span class=\"brace injected\">}</span><span class=\"none injected\">\n+</span><span class=\"brace injected\">}</span><span class=\"string_literal\">\"#</span>\n     <span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"function\">fixture</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">r\"</span>\n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-    <span class=\"function\">foo</span><span class=\"parenthesis\">(</span><span class=\"keyword\">$0</span><span class=\"brace\">{</span>\n-        <span class=\"numeric_literal\">92</span>\n-    <span class=\"brace\">}</span><span class=\"keyword\">$0</span><span class=\"parenthesis\">)</span>\n-<span class=\"brace\">}</span><span class=\"string_literal\">\"</span>\n+    <span class=\"function\">fixture</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">r\"</span><span class=\"none injected\">\n+</span><span class=\"keyword injected\">fn</span><span class=\"none injected\"> </span><span class=\"function declaration injected\">foo</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"none injected\">\n+    </span><span class=\"function injected\">foo</span><span class=\"parenthesis injected\">(</span><span class=\"keyword injected\">$0</span><span class=\"brace injected\">{</span><span class=\"none injected\">\n+        </span><span class=\"numeric_literal injected\">92</span><span class=\"none injected\">\n+    </span><span class=\"brace injected\">}</span><span class=\"keyword injected\">$0</span><span class=\"parenthesis injected\">)</span><span class=\"none injected\">\n+</span><span class=\"brace injected\">}</span><span class=\"string_literal\">\"</span>\n     <span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "3900959bedf8d7be3b6ee74bf2808a88a084046f", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_keywords.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_keywords.html", "raw_url": "https://github.com/rust-lang/rust/raw/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_keywords.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_keywords.html?ref=e9f9bc26e8e051fb481819224ddfd1375076865d", "patch": "@@ -53,6 +53,6 @@\n <span class=\"keyword\">macro_rules</span><span class=\"macro_bang\">!</span> <span class=\"macro declaration\">void</span> <span class=\"brace\">{</span>\n     <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>tt<span class=\"colon\">:</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">*</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n-<span class=\"macro\">void</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"keyword\">Self</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+<span class=\"macro\">void</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"keyword macro\">Self</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">__</span> <span class=\"keyword\">where</span> <span class=\"self_type_keyword\">Self</span><span class=\"colon\">:</span><span class=\"semicolon\">;</span>\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">__</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">_</span><span class=\"colon\">:</span> <span class=\"unresolved_reference\">Self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "2cbbf69641525e6552eb9a8302f612ab2aa53af1", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_macros.html", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_macros.html", "raw_url": "https://github.com/rust-lang/rust/raw/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_macros.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_macros.html?ref=e9f9bc26e8e051fb481819224ddfd1375076865d", "patch": "@@ -42,21 +42,21 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"module crate_root library\">proc_macros</span><span class=\"operator\">::</span><span class=\"macro library\">mirror</span><span class=\"macro_bang\">!</span> <span class=\"brace\">{</span>\n-    <span class=\"brace\">{</span>\n-        <span class=\"comma\">,</span><span class=\"builtin_type\">i32</span> <span class=\"colon\">:</span><span class=\"field declaration public\">x</span> <span class=\"keyword\">pub</span>\n-        <span class=\"comma\">,</span><span class=\"builtin_type\">i32</span> <span class=\"colon\">:</span><span class=\"field declaration public\">y</span> <span class=\"keyword\">pub</span>\n-    <span class=\"brace\">}</span> <span class=\"struct declaration\">Foo</span> <span class=\"keyword\">struct</span>\n-<span class=\"brace\">}</span>\n+<pre><code><span class=\"module crate_root library\">proc_macros</span><span class=\"operator\">::</span><span class=\"macro library\">mirror</span><span class=\"macro_bang\">!</span> <span class=\"brace macro\">{</span>\n+    <span class=\"brace macro\">{</span>\n+        <span class=\"comma macro\">,</span><span class=\"builtin_type macro\">i32</span> <span class=\"colon macro\">:</span><span class=\"field declaration macro public\">x</span> <span class=\"keyword macro\">pub</span>\n+        <span class=\"comma macro\">,</span><span class=\"builtin_type macro\">i32</span> <span class=\"colon macro\">:</span><span class=\"field declaration macro public\">y</span> <span class=\"keyword macro\">pub</span>\n+    <span class=\"brace macro\">}</span> <span class=\"struct declaration macro\">Foo</span> <span class=\"keyword macro\">struct</span>\n+<span class=\"brace macro\">}</span>\n <span class=\"keyword\">macro_rules</span><span class=\"macro_bang\">!</span> <span class=\"macro declaration\">def_fn</span> <span class=\"brace\">{</span>\n     <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>tt<span class=\"colon\">:</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">*</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">*</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"macro\">def_fn</span><span class=\"macro_bang\">!</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"brace\">{</span>\n-        <span class=\"numeric_literal\">100</span>\n-    <span class=\"brace\">}</span>\n-<span class=\"brace\">}</span>\n+<span class=\"macro\">def_fn</span><span class=\"macro_bang\">!</span> <span class=\"brace macro\">{</span>\n+    <span class=\"keyword macro\">fn</span> <span class=\"function declaration macro\">bar</span><span class=\"parenthesis macro\">(</span><span class=\"parenthesis macro\">)</span> <span class=\"operator macro\">-</span><span class=\"operator macro\">&gt;</span> <span class=\"builtin_type macro\">u32</span> <span class=\"brace macro\">{</span>\n+        <span class=\"numeric_literal macro\">100</span>\n+    <span class=\"brace macro\">}</span>\n+<span class=\"brace macro\">}</span>\n \n <span class=\"keyword\">macro_rules</span><span class=\"macro_bang\">!</span> <span class=\"macro declaration\">dont_color_me_braces</span> <span class=\"brace\">{</span>\n     <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"numeric_literal\">0</span><span class=\"brace\">}</span>\n@@ -90,7 +90,7 @@\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-    <span class=\"unresolved_reference\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello, {}!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">dont_color_me_braces</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">noop</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"macro\">noop</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"unresolved_reference\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello, {}!\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">92</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">dont_color_me_braces</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">noop</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"macro macro\">noop</span><span class=\"macro_bang macro\">!</span><span class=\"parenthesis macro\">(</span><span class=\"numeric_literal macro\">1</span><span class=\"parenthesis macro\">)</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "6acc62e0f1eb4e2ca618c5caa902e6cb2d0949aa", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=e9f9bc26e8e051fb481819224ddfd1375076865d", "patch": "@@ -103,73 +103,73 @@\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">a</span> <span class=\"operator\">=</span> <span class=\"char_literal\">'</span><span class=\"escape_sequence\">\\x65</span><span class=\"char_literal\">'</span><span class=\"semicolon\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">a</span> <span class=\"operator\">=</span> <span class=\"char_literal\">'</span><span class=\"escape_sequence\">\\x00</span><span class=\"char_literal\">'</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"escape_sequence\">{{</span><span class=\"string_literal\">Hello</span><span class=\"escape_sequence\">}}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello </span><span class=\"escape_sequence\">{{</span><span class=\"string_literal macro\">Hello</span><span class=\"escape_sequence\">}}</span><span class=\"string_literal macro\">\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"comment\">// from https://doc.rust-lang.org/std/fmt/index.html</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>                 <span class=\"comment\">// =&gt; \"Hello\"</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"world\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"Hello, world!\"</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"The number is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"The number is 1\"</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"parenthesis\">(</span><span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">4</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>          <span class=\"comment\">// =&gt; \"(3, 4)\"</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">value</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> value<span class=\"operator\">=</span><span class=\"numeric_literal\">4</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>      <span class=\"comment\">// =&gt; \"4\"</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>           <span class=\"comment\">// =&gt; \"1 2\"</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">4</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">42</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>             <span class=\"comment\">// =&gt; \"0042\" with leading zerosV</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"2 1 1 2\"</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">argument</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> argument <span class=\"operator\">=</span> <span class=\"string_literal\">\"test\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"test\"</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"comma\">,</span> name <span class=\"operator\">=</span> <span class=\"numeric_literal\">2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>          <span class=\"comment\">// =&gt; \"2 1\"</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">a</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">c</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">b</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> a<span class=\"operator\">=</span><span class=\"string_literal\">\"a\"</span><span class=\"comma\">,</span> b<span class=\"operator\">=</span><span class=\"char_literal\">'b'</span><span class=\"comma\">,</span> c<span class=\"operator\">=</span><span class=\"numeric_literal\">3</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>  <span class=\"comment\">// =&gt; \"a 3 b\"</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"escape_sequence\">{{</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"escape_sequence\">}}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>                       <span class=\"comment\">// =&gt; \"{2}\"</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">width</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> width <span class=\"operator\">=</span> <span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&lt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">-</span><span class=\"format_specifier\">&lt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">^</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">+</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">27</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">-</span><span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">10</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">27</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span>    <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span>   <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"variable\">number</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"variable\">prec</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> prec <span class=\"operator\">=</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> number <span class=\"operator\">=</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 fractional digits\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"numeric_literal\">1234.56</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 characters\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">8</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 right-aligned characters\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>                 <span class=\"comment\">// =&gt; \"Hello\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">!\"</span><span class=\"comma macro\">,</span> <span class=\"string_literal macro\">\"world\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"Hello, world!\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"The number is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">1</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"The number is 1\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span> <span class=\"parenthesis macro\">(</span><span class=\"numeric_literal macro\">3</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">4</span><span class=\"parenthesis macro\">)</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>          <span class=\"comment\">// =&gt; \"(3, 4)\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">value</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span> <span class=\"none macro\">value</span><span class=\"operator macro\">=</span><span class=\"numeric_literal macro\">4</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>      <span class=\"comment\">// =&gt; \"4\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">1</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">2</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>           <span class=\"comment\">// =&gt; \"1 2\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">4</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">42</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>             <span class=\"comment\">// =&gt; \"0042\" with leading zerosV</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\"> </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">1</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">2</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"2 1 1 2\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">argument</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span> <span class=\"none macro\">argument</span> <span class=\"operator macro\">=</span> <span class=\"string_literal macro\">\"test\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"test\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">1</span><span class=\"comma macro\">,</span> <span class=\"none macro\">name</span> <span class=\"operator macro\">=</span> <span class=\"numeric_literal macro\">2</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>          <span class=\"comment\">// =&gt; \"2 1\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">a</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">c</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">b</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span> <span class=\"none macro\">a</span><span class=\"operator macro\">=</span><span class=\"string_literal macro\">\"a\"</span><span class=\"comma macro\">,</span> <span class=\"none macro\">b</span><span class=\"operator macro\">=</span><span class=\"char_literal macro\">'b'</span><span class=\"comma macro\">,</span> <span class=\"none macro\">c</span><span class=\"operator macro\">=</span><span class=\"numeric_literal macro\">3</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>  <span class=\"comment\">// =&gt; \"a 3 b\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"escape_sequence\">{{</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"escape_sequence\">}}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">2</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>                       <span class=\"comment\">// =&gt; \"{2}\"</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">!\"</span><span class=\"comma macro\">,</span> <span class=\"string_literal macro\">\"x\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">!\"</span><span class=\"comma macro\">,</span> <span class=\"string_literal macro\">\"x\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">5</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">!\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">5</span><span class=\"comma macro\">,</span> <span class=\"string_literal macro\">\"x\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">width</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">!\"</span><span class=\"comma macro\">,</span> <span class=\"string_literal macro\">\"x\"</span><span class=\"comma macro\">,</span> <span class=\"none macro\">width</span> <span class=\"operator macro\">=</span> <span class=\"numeric_literal macro\">5</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&lt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">!\"</span><span class=\"comma macro\">,</span> <span class=\"string_literal macro\">\"x\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">-</span><span class=\"format_specifier\">&lt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">!\"</span><span class=\"comma macro\">,</span> <span class=\"string_literal macro\">\"x\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">^</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">!\"</span><span class=\"comma macro\">,</span> <span class=\"string_literal macro\">\"x\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">!\"</span><span class=\"comma macro\">,</span> <span class=\"string_literal macro\">\"x\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">+</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">!\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">5</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">!\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">27</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">!\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">5</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">!\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">-</span><span class=\"numeric_literal macro\">5</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">10</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">!\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">27</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span> <span class=\"string_literal macro\">\"x\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">0.01</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">5</span><span class=\"comma macro\">,</span> <span class=\"string_literal macro\">\"x\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">0.01</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span> <span class=\"string_literal macro\">\"x\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">5</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">0.01</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\"> is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span>    <span class=\"string_literal macro\">\"x\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">5</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">0.01</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span>   <span class=\"string_literal macro\">\"x\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">5</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">0.01</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\"> is </span><span class=\"format_specifier\">{</span><span class=\"variable\">number</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"variable\">prec</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span> <span class=\"string_literal macro\">\"x\"</span><span class=\"comma macro\">,</span> <span class=\"none macro\">prec</span> <span class=\"operator macro\">=</span> <span class=\"numeric_literal macro\">5</span><span class=\"comma macro\">,</span> <span class=\"none macro\">number</span> <span class=\"operator macro\">=</span> <span class=\"numeric_literal macro\">0.01</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">` has 3 fractional digits\"</span><span class=\"comma macro\">,</span> <span class=\"string_literal macro\">\"Hello\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">3</span><span class=\"comma macro\">,</span> <span class=\"none macro\">name</span><span class=\"operator macro\">=</span><span class=\"numeric_literal macro\">1234.56</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">` has 3 characters\"</span><span class=\"comma macro\">,</span> <span class=\"string_literal macro\">\"Hello\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">3</span><span class=\"comma macro\">,</span> <span class=\"none macro\">name</span><span class=\"operator macro\">=</span><span class=\"string_literal macro\">\"1234.56\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">8</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">` has 3 right-aligned characters\"</span><span class=\"comma macro\">,</span> <span class=\"string_literal macro\">\"Hello\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">3</span><span class=\"comma macro\">,</span> <span class=\"none macro\">name</span><span class=\"operator macro\">=</span><span class=\"string_literal macro\">\"1234.56\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n \n     <span class=\"keyword\">let</span> <span class=\"punctuation\">_</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"{}\"</span>\n     <span class=\"keyword\">let</span> <span class=\"punctuation\">_</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"{{}}\"</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"escape_sequence\">{{</span><span class=\"escape_sequence\">}}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"escape_sequence\">{{</span><span class=\"string_literal\"> Hello\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"escape_sequence\">}}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"escape_sequence\">{{</span><span class=\"string_literal\">Hello</span><span class=\"escape_sequence\">}}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"escape_sequence\">{{</span><span class=\"string_literal\"> Hello </span><span class=\"escape_sequence\">}}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"escape_sequence\">{{</span><span class=\"string_literal\">Hello </span><span class=\"escape_sequence\">}}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"escape_sequence\">{{</span><span class=\"string_literal\"> Hello</span><span class=\"escape_sequence\">}}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello </span><span class=\"escape_sequence\">{{</span><span class=\"escape_sequence\">}}</span><span class=\"string_literal macro\">\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"escape_sequence\">{{</span><span class=\"string_literal macro\"> Hello\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello </span><span class=\"escape_sequence\">}}</span><span class=\"string_literal macro\">\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"escape_sequence\">{{</span><span class=\"string_literal macro\">Hello</span><span class=\"escape_sequence\">}}</span><span class=\"string_literal macro\">\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"escape_sequence\">{{</span><span class=\"string_literal macro\"> Hello </span><span class=\"escape_sequence\">}}</span><span class=\"string_literal macro\">\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"escape_sequence\">{{</span><span class=\"string_literal macro\">Hello </span><span class=\"escape_sequence\">}}</span><span class=\"string_literal macro\">\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"escape_sequence\">{{</span><span class=\"string_literal macro\"> Hello</span><span class=\"escape_sequence\">}}</span><span class=\"string_literal macro\">\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">r\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"world\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">r\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">!\"</span><span class=\"comma macro\">,</span> <span class=\"string_literal macro\">\"world\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n \n     <span class=\"comment\">// escape sequences</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello</span><span class=\"escape_sequence\">\\n</span><span class=\"string_literal\">World\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"escape_sequence\">\\u{48}</span><span class=\"escape_sequence\">\\x65</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6F</span><span class=\"string_literal\"> World\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"Hello</span><span class=\"escape_sequence\">\\n</span><span class=\"string_literal macro\">World\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"escape_sequence\">\\u{48}</span><span class=\"escape_sequence\">\\x65</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6F</span><span class=\"string_literal macro\"> World\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n \n     <span class=\"keyword\">let</span> <span class=\"punctuation\">_</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"</span><span class=\"escape_sequence\">\\x28</span><span class=\"escape_sequence\">\\x28</span><span class=\"escape_sequence\">\\x00</span><span class=\"escape_sequence\">\\x63</span><span class=\"escape_sequence\">\\n</span><span class=\"string_literal\">\"</span><span class=\"semicolon\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"punctuation\">_</span> <span class=\"operator\">=</span> <span class=\"string_literal\">b\"</span><span class=\"escape_sequence\">\\x28</span><span class=\"escape_sequence\">\\x28</span><span class=\"escape_sequence\">\\x00</span><span class=\"escape_sequence\">\\x63</span><span class=\"escape_sequence\">\\n</span><span class=\"string_literal\">\"</span><span class=\"semicolon\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"punctuation\">_</span> <span class=\"operator\">=</span> <span class=\"string_literal\">r\"\\\\\"</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"escape_sequence\">\\x41</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> A <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">\u043d\u0438\u0447\u043e\u0441\u0438</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> \u043d\u0438\u0447\u043e\u0441\u0438 <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"escape_sequence\">\\x41</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span> <span class=\"none macro\">A</span> <span class=\"operator macro\">=</span> <span class=\"numeric_literal macro\">92</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">\u043d\u0438\u0447\u043e\u0441\u0438</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span> <span class=\"none macro\">\u043d\u0438\u0447\u043e\u0441\u0438</span> <span class=\"operator macro\">=</span> <span class=\"numeric_literal macro\">92</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">x</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> \"</span><span class=\"comma\">,</span> <span class=\"unresolved_reference\">thingy</span><span class=\"comma\">,</span> <span class=\"unresolved_reference\">n2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">panic</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">panic</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"more </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">assert</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"bool_literal\">true</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">assert</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"bool_literal\">true</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> asdasd\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">toho</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">fmt\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro unsafe\">asm</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"mov eax, </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">format_args</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span>concat<span class=\"punctuation\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"parenthesis\">)</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"{}\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">x</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\"> \"</span><span class=\"comma macro\">,</span> <span class=\"unresolved_reference macro\">thingy</span><span class=\"comma macro\">,</span> <span class=\"unresolved_reference macro\">n2</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">panic</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">0</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">panic</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"more </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">1</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">assert</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"bool_literal macro\">true</span><span class=\"comma macro\">,</span> <span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">1</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">assert</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"bool_literal macro\">true</span><span class=\"comma macro\">,</span> <span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\"> asdasd\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">1</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">toho</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">fmt\"</span><span class=\"comma macro\">,</span> <span class=\"numeric_literal macro\">0</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro unsafe\">asm</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"mov eax, </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">format_args</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"none macro\">concat</span><span class=\"punctuation macro\">!</span><span class=\"parenthesis macro\">(</span><span class=\"string_literal macro\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal macro\">\"</span><span class=\"parenthesis macro\">)</span><span class=\"comma macro\">,</span> <span class=\"string_literal macro\">\"{}\"</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "654d51b8a43d9444bd5e6343454391a3d22f5e76", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_unsafe.html", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html?ref=e9f9bc26e8e051fb481819224ddfd1375076865d", "patch": "@@ -89,13 +89,13 @@\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"numeric_literal\">5</span> <span class=\"keyword\">as</span> <span class=\"keyword\">*</span><span class=\"keyword\">const</span> <span class=\"punctuation\">_</span> <span class=\"keyword\">as</span> <span class=\"keyword\">*</span><span class=\"keyword\">const</span> <span class=\"builtin_type\">usize</span><span class=\"semicolon\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">u</span> <span class=\"operator\">=</span> <span class=\"union\">Union</span> <span class=\"brace\">{</span> <span class=\"field\">b</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"macro\">id</span><span class=\"macro_bang\">!</span> <span class=\"brace\">{</span>\n-        <span class=\"keyword unsafe\">unsafe</span> <span class=\"brace\">{</span> <span class=\"macro unsafe\">unsafe_deref</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">}</span>\n-    <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">id</span><span class=\"macro_bang\">!</span> <span class=\"brace macro\">{</span>\n+        <span class=\"keyword macro unsafe\">unsafe</span> <span class=\"brace macro\">{</span> <span class=\"macro macro unsafe\">unsafe_deref</span><span class=\"macro_bang macro\">!</span><span class=\"parenthesis macro\">(</span><span class=\"parenthesis macro\">)</span> <span class=\"brace macro\">}</span>\n+    <span class=\"brace macro\">}</span><span class=\"semicolon\">;</span>\n \n     <span class=\"keyword unsafe\">unsafe</span> <span class=\"brace\">{</span>\n-        <span class=\"macro unsafe\">unsafe_deref</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-        <span class=\"macro unsafe\">id</span><span class=\"macro_bang\">!</span> <span class=\"brace\">{</span> <span class=\"macro unsafe\">unsafe_deref</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+        <span class=\"macro unsafe\">unsafe_deref</span><span class=\"macro_bang\">!</span><span class=\"parenthesis macro\">(</span><span class=\"parenthesis macro\">)</span><span class=\"semicolon\">;</span>\n+        <span class=\"macro unsafe\">id</span><span class=\"macro_bang\">!</span> <span class=\"brace macro\">{</span> <span class=\"macro macro unsafe\">unsafe_deref</span><span class=\"macro_bang macro\">!</span><span class=\"parenthesis macro\">(</span><span class=\"parenthesis macro\">)</span> <span class=\"brace macro\">}</span><span class=\"semicolon\">;</span>\n \n         <span class=\"comment\">// unsafe fn and method calls</span>\n         <span class=\"function unsafe\">unsafe_fn</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>"}, {"sha": "d4bb20c8f448eb8191cd17f451069dbc8b76fb78", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=e9f9bc26e8e051fb481819224ddfd1375076865d", "patch": "@@ -141,6 +141,7 @@ define_semantic_token_modifiers![\n         (INJECTED, \"injected\"),\n         (INTRA_DOC_LINK, \"intraDocLink\"),\n         (LIBRARY, \"library\"),\n+        (MACRO_MODIFIER, \"macro\"),\n         (MUTABLE, \"mutable\"),\n         (PUBLIC, \"public\"),\n         (REFERENCE, \"reference\"),"}, {"sha": "3428f7eba30a6739d3d9b48fe2a8f58546e23c66", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f9bc26e8e051fb481819224ddfd1375076865d/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=e9f9bc26e8e051fb481819224ddfd1375076865d", "patch": "@@ -746,6 +746,7 @@ fn semantic_token_type_and_modifiers(\n             HlMod::Injected => semantic_tokens::INJECTED,\n             HlMod::IntraDocLink => semantic_tokens::INTRA_DOC_LINK,\n             HlMod::Library => semantic_tokens::LIBRARY,\n+            HlMod::Macro => semantic_tokens::MACRO_MODIFIER,\n             HlMod::Mutable => semantic_tokens::MUTABLE,\n             HlMod::Public => semantic_tokens::PUBLIC,\n             HlMod::Reference => semantic_tokens::REFERENCE,"}]}