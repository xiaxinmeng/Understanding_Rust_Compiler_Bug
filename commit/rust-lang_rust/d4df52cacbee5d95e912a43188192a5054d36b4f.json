{"sha": "d4df52cacbee5d95e912a43188192a5054d36b4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZGY1MmNhY2JlZTVkOTVlOTEyYTQzMTg4MTkyYTUwNTRkMzZiNGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-07-15T11:23:28Z"}, "committer": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-03-01T15:04:26Z"}, "message": "introduce `UniverseIndex` into `ParamEnv`\n\nAlways using root environment for now.", "tree": {"sha": "cb60854e691ae24e589b56834ac4cba8b38b92e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb60854e691ae24e589b56834ac4cba8b38b92e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4df52cacbee5d95e912a43188192a5054d36b4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4df52cacbee5d95e912a43188192a5054d36b4f", "html_url": "https://github.com/rust-lang/rust/commit/d4df52cacbee5d95e912a43188192a5054d36b4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4df52cacbee5d95e912a43188192a5054d36b4f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7efce23618adcc9c960e1518d00883da8a8c444", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7efce23618adcc9c960e1518d00883da8a8c444", "html_url": "https://github.com/rust-lang/rust/commit/e7efce23618adcc9c960e1518d00883da8a8c444"}], "stats": {"total": 78, "additions": 66, "deletions": 12}, "files": [{"sha": "7b2cfa0a3ffecb2dd3ab3afed077d6ae5f88c9ce", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4df52cacbee5d95e912a43188192a5054d36b4f/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4df52cacbee5d95e912a43188192a5054d36b4f/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=d4df52cacbee5d95e912a43188192a5054d36b4f", "patch": "@@ -870,6 +870,7 @@ for ty::steal::Steal<T>\n \n impl_stable_hash_for!(struct ty::ParamEnv<'tcx> {\n     caller_bounds,\n+    universe,\n     reveal\n });\n \n@@ -1039,3 +1040,12 @@ for traits::VtableGeneratorData<'gcx, N> where N: HashStable<StableHashingContex\n         nested.hash_stable(hcx, hasher);\n     }\n }\n+\n+impl<'gcx> HashStable<StableHashingContext<'gcx>>\n+for ty::UniverseIndex {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'gcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+        self.depth().hash_stable(hcx, hasher);\n+    }\n+}"}, {"sha": "76d3c7f150670605e073a76cb3160bf5a338d361", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d4df52cacbee5d95e912a43188192a5054d36b4f/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4df52cacbee5d95e912a43188192a5054d36b4f/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=d4df52cacbee5d95e912a43188192a5054d36b4f", "patch": "@@ -546,7 +546,8 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n            predicates);\n \n     let elaborated_env = ty::ParamEnv::new(tcx.intern_predicates(&predicates),\n-                                           unnormalized_env.reveal);\n+                                           unnormalized_env.reveal,\n+                                           unnormalized_env.universe);\n \n     tcx.infer_ctxt().enter(|infcx| {\n         // FIXME. We should really... do something with these region\n@@ -620,7 +621,9 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         debug!(\"normalize_param_env_or_error: resolved predicates={:?}\",\n                predicates);\n \n-        ty::ParamEnv::new(tcx.intern_predicates(&predicates), unnormalized_env.reveal)\n+        ty::ParamEnv::new(tcx.intern_predicates(&predicates),\n+                          unnormalized_env.reveal,\n+                          unnormalized_env.universe)\n     })\n }\n "}, {"sha": "856c53d19c98c354a03a3f5616cf688b686df16d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d4df52cacbee5d95e912a43188192a5054d36b4f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4df52cacbee5d95e912a43188192a5054d36b4f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d4df52cacbee5d95e912a43188192a5054d36b4f", "patch": "@@ -1348,9 +1348,7 @@ pub struct UniverseIndex(u32);\n impl UniverseIndex {\n     /// The root universe, where things that the user defined are\n     /// visible.\n-    pub fn root() -> UniverseIndex {\n-        UniverseIndex(0)\n-    }\n+    pub const ROOT: UniverseIndex = UniverseIndex(0);\n \n     /// A \"subuniverse\" corresponds to being inside a `forall` quantifier.\n     /// So, for example, suppose we have this type in universe `U`:\n@@ -1366,6 +1364,13 @@ impl UniverseIndex {\n     pub fn subuniverse(self) -> UniverseIndex {\n         UniverseIndex(self.0 + 1)\n     }\n+\n+    /// Gets the \"depth\" of this universe in the universe tree. This\n+    /// is not really useful except for e.g. the `HashStable`\n+    /// implementation\n+    pub fn depth(&self) -> u32 {\n+        self.0\n+    }\n }\n \n /// When type checking, we use the `ParamEnv` to track\n@@ -1382,6 +1387,17 @@ pub struct ParamEnv<'tcx> {\n     /// want `Reveal::All` -- note that this is always paired with an\n     /// empty environment. To get that, use `ParamEnv::reveal()`.\n     pub reveal: traits::Reveal,\n+\n+    /// What is the innermost universe we have created? Starts out as\n+    /// `UniverseIndex::root()` but grows from there as we enter\n+    /// universal quantifiers.\n+    ///\n+    /// NB: At present, we exclude the universal quantifiers on the\n+    /// item we are type-checking, and just consider those names as\n+    /// part of the root universe. So this would only get incremented\n+    /// when we enter into a higher-ranked (`for<..>`) type or trait\n+    /// bound.\n+    pub universe: UniverseIndex,\n }\n \n impl<'tcx> ParamEnv<'tcx> {\n@@ -2657,7 +2673,8 @@ fn param_env<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // sure that this will succeed without errors anyway.\n \n     let unnormalized_env = ty::ParamEnv::new(tcx.intern_predicates(&predicates),\n-                                             traits::Reveal::UserFacing);\n+                                             traits::Reveal::UserFacing,\n+                                             ty::UniverseIndex::ROOT);\n \n     let body_id = tcx.hir.as_local_node_id(def_id).map_or(DUMMY_NODE_ID, |id| {\n         tcx.hir.maybe_body_owned_by(id).map_or(id, |body| body.node_id)"}, {"sha": "3a1ad8db9c20a3f1e7c5ecd839c14b7f07728f78", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d4df52cacbee5d95e912a43188192a5054d36b4f/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4df52cacbee5d95e912a43188192a5054d36b4f/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=d4df52cacbee5d95e912a43188192a5054d36b4f", "patch": "@@ -405,6 +405,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ParamEnv<'a> {\n         tcx.lift(&self.caller_bounds).map(|caller_bounds| {\n             ty::ParamEnv {\n                 reveal: self.reveal,\n+                universe: self.universe,\n                 caller_bounds,\n             }\n         })\n@@ -733,8 +734,29 @@ impl<'tcx, T:TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n     }\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::ParamEnv<'tcx> { reveal, caller_bounds }\n+impl<'tcx> TypeFoldable<'tcx> for ty::ParamEnv<'tcx> {\n+    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n+        ty::ParamEnv {\n+            reveal: self.reveal,\n+            caller_bounds: self.caller_bounds.fold_with(folder),\n+            universe: self.universe.fold_with(folder),\n+        }\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        let &ty::ParamEnv { reveal: _, ref universe, ref caller_bounds } = self;\n+        universe.super_visit_with(visitor) || caller_bounds.super_visit_with(visitor)\n+    }\n+}\n+\n+impl<'tcx> TypeFoldable<'tcx> for ty::UniverseIndex {\n+    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, _folder: &mut F) -> Self {\n+        *self\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> bool {\n+        false\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Slice<ty::ExistentialPredicate<'tcx>> {"}, {"sha": "44771444c8aa85ea0346e5e1c77a3f386143bab0", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d4df52cacbee5d95e912a43188192a5054d36b4f/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4df52cacbee5d95e912a43188192a5054d36b4f/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=d4df52cacbee5d95e912a43188192a5054d36b4f", "patch": "@@ -153,14 +153,15 @@ impl<'tcx> ty::ParamEnv<'tcx> {\n     /// Construct a trait environment suitable for contexts where\n     /// there are no where clauses in scope.\n     pub fn empty(reveal: Reveal) -> Self {\n-        Self::new(ty::Slice::empty(), reveal)\n+        Self::new(ty::Slice::empty(), reveal, ty::UniverseIndex::ROOT)\n     }\n \n     /// Construct a trait environment with the given set of predicates.\n     pub fn new(caller_bounds: &'tcx ty::Slice<ty::Predicate<'tcx>>,\n-               reveal: Reveal)\n+               reveal: Reveal,\n+               universe: ty::UniverseIndex)\n                -> Self {\n-        ty::ParamEnv { caller_bounds, reveal }\n+        ty::ParamEnv { caller_bounds, reveal, universe }\n     }\n \n     /// Returns a new parameter environment with the same clauses, but"}, {"sha": "d0419382bc3123ed94d863c8df9526fe5add5ad2", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4df52cacbee5d95e912a43188192a5054d36b4f/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4df52cacbee5d95e912a43188192a5054d36b4f/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=d4df52cacbee5d95e912a43188192a5054d36b4f", "patch": "@@ -218,7 +218,8 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // the new hybrid bounds we computed.\n     let normalize_cause = traits::ObligationCause::misc(impl_m_span, impl_m_node_id);\n     let param_env = ty::ParamEnv::new(tcx.intern_predicates(&hybrid_preds.predicates),\n-                                      Reveal::UserFacing);\n+                                      Reveal::UserFacing,\n+                                      ty::UniverseIndex::ROOT);\n     let param_env = traits::normalize_param_env_or_error(tcx,\n                                                          impl_m.def_id,\n                                                          param_env,"}]}