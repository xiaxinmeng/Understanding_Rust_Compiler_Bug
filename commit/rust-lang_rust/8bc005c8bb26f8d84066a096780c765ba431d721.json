{"sha": "8bc005c8bb26f8d84066a096780c765ba431d721", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYzAwNWM4YmIyNmY4ZDg0MDY2YTA5Njc4MGM3NjViYTQzMWQ3MjE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-02-27T18:28:21Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-03-06T08:58:47Z"}, "message": "Don't recompute SymbolExportLevel for upstream crates.", "tree": {"sha": "e580f9a7fb68df63feaa78bf83ac09cabf634e6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e580f9a7fb68df63feaa78bf83ac09cabf634e6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bc005c8bb26f8d84066a096780c765ba431d721", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bc005c8bb26f8d84066a096780c765ba431d721", "html_url": "https://github.com/rust-lang/rust/commit/8bc005c8bb26f8d84066a096780c765ba431d721", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bc005c8bb26f8d84066a096780c765ba431d721/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aec6c85b0c6281d938bdd80e98fa9473d8b27780", "url": "https://api.github.com/repos/rust-lang/rust/commits/aec6c85b0c6281d938bdd80e98fa9473d8b27780", "html_url": "https://github.com/rust-lang/rust/commit/aec6c85b0c6281d938bdd80e98fa9473d8b27780"}], "stats": {"total": 181, "additions": 91, "deletions": 90}, "files": [{"sha": "fb971dd2515cdffd008a401b73e18feb3fb9b82b", "filename": "src/librustc/middle/exported_symbols.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bc005c8bb26f8d84066a096780c765ba431d721/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc005c8bb26f8d84066a096780c765ba431d721/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs?ref=8bc005c8bb26f8d84066a096780c765ba431d721", "patch": "@@ -17,7 +17,7 @@ use ty;\n /// kind of crate, including cdylibs which export very few things.\n /// `Rust` will only be exported if the crate produced is a Rust\n /// dylib.\n-#[derive(Eq, PartialEq, Debug, Copy, Clone)]\n+#[derive(Eq, PartialEq, Debug, Copy, Clone, RustcEncodable, RustcDecodable)]\n pub enum SymbolExportLevel {\n     C,\n     Rust,\n@@ -39,7 +39,7 @@ impl SymbolExportLevel {\n     }\n }\n \n-#[derive(Eq, PartialEq, Debug, Copy, Clone)]\n+#[derive(Eq, PartialEq, Debug, Copy, Clone, RustcEncodable, RustcDecodable)]\n pub enum ExportedSymbol {\n     NonGeneric(DefId),\n     NoDefId(ty::SymbolName),"}, {"sha": "47a3580e8676974f80c03b809ab5ddddbb21118a", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8bc005c8bb26f8d84066a096780c765ba431d721/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc005c8bb26f8d84066a096780c765ba431d721/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=8bc005c8bb26f8d84066a096780c765ba431d721", "patch": "@@ -2460,4 +2460,12 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n         assert_eq!(cnum, LOCAL_CRATE);\n         Lrc::new(tcx.sess.features_untracked().clone())\n     };\n+    providers.is_panic_runtime = |tcx, cnum| {\n+        assert_eq!(cnum, LOCAL_CRATE);\n+        attr::contains_name(tcx.hir.krate_attrs(), \"panic_runtime\")\n+    };\n+    providers.is_compiler_builtins = |tcx, cnum| {\n+        assert_eq!(cnum, LOCAL_CRATE);\n+        attr::contains_name(tcx.hir.krate_attrs(), \"compiler_builtins\")\n+    };\n }"}, {"sha": "0a2270571f3fcb15aa97dc681cbe4e730d492512", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8bc005c8bb26f8d84066a096780c765ba431d721/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc005c8bb26f8d84066a096780c765ba431d721/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=8bc005c8bb26f8d84066a096780c765ba431d721", "patch": "@@ -18,6 +18,7 @@ use rustc::ty::maps::QueryConfig;\n use rustc::middle::cstore::{CrateStore, DepKind,\n                             MetadataLoader, LinkMeta,\n                             LoadedMacro, EncodedMetadata, NativeLibraryKind};\n+use rustc::middle::exported_symbols::ExportedSymbol;\n use rustc::middle::stability::DeprecationEntry;\n use rustc::hir::def;\n use rustc::session::{CrateDisambiguator, Session};\n@@ -31,6 +32,7 @@ use rustc::util::nodemap::DefIdMap;\n \n use std::any::Any;\n use rustc_data_structures::sync::Lrc;\n+use std::sync::Arc;\n \n use syntax::ast;\n use syntax::attr;\n@@ -176,7 +178,21 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     extern_crate => { Lrc::new(cdata.extern_crate.get()) }\n     is_no_builtins => { cdata.is_no_builtins(tcx.sess) }\n     impl_defaultness => { cdata.get_impl_defaultness(def_id.index) }\n-    reachable_non_generics => { Lrc::new(cdata.reachable_non_generics()) }\n+    reachable_non_generics => {\n+        let reachable_non_generics = tcx\n+            .exported_symbols(cdata.cnum)\n+            .iter()\n+            .filter_map(|&(exported_symbol, _)| {\n+                if let ExportedSymbol::NonGeneric(def_id) = exported_symbol {\n+                    return Some(def_id)\n+                } else {\n+                    None\n+                }\n+            })\n+            .collect();\n+\n+        Lrc::new(reachable_non_generics)\n+    }\n     native_libraries => { Lrc::new(cdata.get_native_libraries(tcx.sess)) }\n     plugin_registrar_fn => {\n         cdata.root.plugin_registrar_fn.map(|index| {\n@@ -235,6 +251,20 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n \n     has_copy_closures => { cdata.has_copy_closures(tcx.sess) }\n     has_clone_closures => { cdata.has_clone_closures(tcx.sess) }\n+\n+    exported_symbols => {\n+        let cnum = cdata.cnum;\n+        assert!(cnum != LOCAL_CRATE);\n+\n+        // If this crate is a plugin and/or a custom derive crate, then\n+        // we're not even going to link those in so we skip those crates.\n+        if cdata.root.plugin_registrar_fn.is_some() ||\n+           cdata.root.macro_derive_registrar.is_some() {\n+            return Arc::new(Vec::new())\n+        }\n+\n+        Arc::new(cdata.exported_symbols())\n+    }\n }\n \n pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {"}, {"sha": "60a0d4e03b54a549371cced1ed272efaef180e2b", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8bc005c8bb26f8d84066a096780c765ba431d721/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc005c8bb26f8d84066a096780c765ba431d721/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=8bc005c8bb26f8d84066a096780c765ba431d721", "patch": "@@ -18,6 +18,7 @@ use rustc::hir::map::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc::hir;\n use rustc::middle::cstore::{LinkagePreference, ExternConstBody,\n                             ExternBodyNestedBodies};\n+use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc::hir::def::{self, Def, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex,\n                          CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -27,7 +28,6 @@ use rustc::mir;\n use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::codec::TyDecoder;\n-use rustc::util::nodemap::DefIdSet;\n use rustc::mir::Mir;\n \n use std::cell::Ref;\n@@ -1006,11 +1006,10 @@ impl<'a, 'tcx> CrateMetadata {\n         arg_names.decode(self).collect()\n     }\n \n-    pub fn reachable_non_generics(&self) -> DefIdSet {\n+    pub fn exported_symbols(&self) -> Vec<(ExportedSymbol, SymbolExportLevel)> {\n         self.root\n-            .reachable_non_generics\n+            .exported_symbols\n             .decode(self)\n-            .map(|index| self.local_def_id(index))\n             .collect()\n     }\n "}, {"sha": "1c54b7aa1333b98365398c92d08d5a91a0998dad", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8bc005c8bb26f8d84066a096780c765ba431d721/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc005c8bb26f8d84066a096780c765ba431d721/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=8bc005c8bb26f8d84066a096780c765ba431d721", "patch": "@@ -20,14 +20,15 @@ use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId, LOCAL_CRATE\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::ich::Fingerprint;\n use rustc::middle::dependency_format::Linkage;\n+use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc::middle::lang_items;\n use rustc::mir;\n use rustc::traits::specialization_graph;\n use rustc::ty::{self, Ty, TyCtxt, ReprOptions};\n use rustc::ty::codec::{self as ty_codec, TyEncoder};\n \n use rustc::session::config::{self, CrateTypeProcMacro};\n-use rustc::util::nodemap::{FxHashMap, DefIdSet};\n+use rustc::util::nodemap::FxHashMap;\n \n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_serialize::{Encodable, Encoder, SpecializedEncoder, opaque};\n@@ -394,11 +395,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         // Encode exported symbols info.\n         i = self.position();\n-        let reachable_non_generics = self.tcx.reachable_non_generics(LOCAL_CRATE);\n-        let reachable_non_generics = self.tracked(\n-            IsolatedEncoder::encode_reachable_non_generics,\n-            &reachable_non_generics);\n-        let reachable_non_generics_bytes = self.position() - i;\n+        let exported_symbols = self.tcx.exported_symbols(LOCAL_CRATE);\n+        let exported_symbols = self.tracked(\n+            IsolatedEncoder::encode_exported_symbols,\n+            &exported_symbols);\n+        let exported_symbols_bytes = self.position() - i;\n \n         // Encode and index the items.\n         i = self.position();\n@@ -442,7 +443,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             codemap,\n             def_path_table,\n             impls,\n-            reachable_non_generics,\n+            exported_symbols,\n             index,\n         });\n \n@@ -462,7 +463,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             println!(\"          native bytes: {}\", native_lib_bytes);\n             println!(\"         codemap bytes: {}\", codemap_bytes);\n             println!(\"            impl bytes: {}\", impl_bytes);\n-            println!(\"    exp. symbols bytes: {}\", reachable_non_generics_bytes);\n+            println!(\"    exp. symbols bytes: {}\", exported_symbols_bytes);\n             println!(\"  def-path table bytes: {}\", def_path_table_bytes);\n             println!(\"            item bytes: {}\", item_bytes);\n             println!(\"           index bytes: {}\", index_bytes);\n@@ -1388,13 +1389,10 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n     // middle::reachable module but filters out items that either don't have a\n     // symbol associated with them (they weren't translated) or if they're an FFI\n     // definition (as that's not defined in this crate).\n-    fn encode_reachable_non_generics(&mut self,\n-                                     reachable_non_generics: &DefIdSet)\n-                                     -> LazySeq<DefIndex> {\n-        self.lazy_seq(reachable_non_generics.iter().map(|def_id| {\n-            debug_assert!(def_id.is_local());\n-            def_id.index\n-        }))\n+    fn encode_exported_symbols(&mut self,\n+                               exported_symbols: &[(ExportedSymbol, SymbolExportLevel)])\n+                               -> LazySeq<(ExportedSymbol, SymbolExportLevel)> {\n+        self.lazy_seq(exported_symbols.iter().cloned())\n     }\n \n     fn encode_dylib_dependency_formats(&mut self, _: ()) -> LazySeq<Option<LinkagePreference>> {"}, {"sha": "ce94e4f912f4f9e1012fd729ea967f222503163f", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bc005c8bb26f8d84066a096780c765ba431d721/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc005c8bb26f8d84066a096780c765ba431d721/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=8bc005c8bb26f8d84066a096780c765ba431d721", "patch": "@@ -16,6 +16,7 @@ use rustc::hir::def::{self, CtorKind};\n use rustc::hir::def_id::{DefIndex, DefId, CrateNum};\n use rustc::ich::StableHashingContext;\n use rustc::middle::cstore::{DepKind, LinkagePreference, NativeLibrary};\n+use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc::middle::lang_items;\n use rustc::mir;\n use rustc::session::CrateDisambiguator;\n@@ -202,7 +203,8 @@ pub struct CrateRoot {\n     pub codemap: LazySeq<syntax_pos::FileMap>,\n     pub def_path_table: Lazy<hir::map::definitions::DefPathTable>,\n     pub impls: LazySeq<TraitImpls>,\n-    pub reachable_non_generics: LazySeq<DefIndex>,\n+    pub exported_symbols: LazySeq<(ExportedSymbol, SymbolExportLevel)>,\n+\n     pub index: LazySeq<index::Index>,\n }\n "}, {"sha": "0873c1632f58ffa4d539cf50348cc6f67cdad0d4", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 31, "deletions": 67, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/8bc005c8bb26f8d84066a096780c765ba431d721/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc005c8bb26f8d84066a096780c765ba431d721/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=8bc005c8bb26f8d84066a096780c765ba431d721", "patch": "@@ -78,10 +78,9 @@ fn reachable_non_generics_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let reachable_non_generics = tcx\n         .exported_symbols(LOCAL_CRATE)\n         .iter()\n-        .filter_map(|&(exported_symbol, _)| {\n+        .filter_map(|&(exported_symbol, level)| {\n             if let ExportedSymbol::NonGeneric(def_id) = exported_symbol {\n-                if tcx.symbol_export_level(def_id)\n-                      .is_below_threshold(export_threshold) {\n+                if level.is_below_threshold(export_threshold) {\n                     return Some(def_id)\n                 }\n             }\n@@ -110,6 +109,16 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         return Arc::new(vec![])\n     }\n \n+    // Check to see if this crate is a \"special runtime crate\". These\n+    // crates, implementation details of the standard library, typically\n+    // have a bunch of `pub extern` and `#[no_mangle]` functions as the\n+    // ABI between them. We don't want their symbols to have a `C`\n+    // export level, however, as they're just implementation details.\n+    // Down below we'll hardwire all of the symbols to the `Rust` export\n+    // level instead.\n+    let special_runtime_crate = tcx.is_panic_runtime(LOCAL_CRATE) ||\n+        tcx.is_compiler_builtins(LOCAL_CRATE);\n+\n     let mut reachable_non_generics: DefIdSet = tcx.reachable_set(LOCAL_CRATE).0\n         .iter()\n         .filter_map(|&node_id| {\n@@ -176,7 +185,25 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut symbols: Vec<_> = reachable_non_generics\n         .iter()\n         .map(|&def_id| {\n-            let export_level = tcx.symbol_export_level(def_id);\n+            let export_level = if special_runtime_crate {\n+                let name = tcx.symbol_name(Instance::mono(tcx, def_id));\n+                // We can probably do better here by just ensuring that\n+                // it has hidden visibility rather than public\n+                // visibility, as this is primarily here to ensure it's\n+                // not stripped during LTO.\n+                //\n+                // In general though we won't link right if these\n+                // symbols are stripped, and LTO currently strips them.\n+                if &*name == \"rust_eh_personality\" ||\n+                   &*name == \"rust_eh_register_frames\" ||\n+                   &*name == \"rust_eh_unregister_frames\" {\n+                    SymbolExportLevel::C\n+                } else {\n+                    SymbolExportLevel::Rust\n+                }\n+            } else {\n+                tcx.symbol_export_level(def_id)\n+            };\n             debug!(\"EXPORTED SYMBOL (local): {} ({:?})\",\n                    tcx.symbol_name(Instance::mono(tcx, def_id)),\n                    export_level);\n@@ -222,70 +249,7 @@ pub fn provide(providers: &mut Providers) {\n     providers.symbol_export_level = symbol_export_level_provider;\n }\n \n-fn exported_symbols_provider_extern<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                              cnum: CrateNum)\n-                                              -> Arc<Vec<(ExportedSymbol,\n-                                                          SymbolExportLevel)>>\n-{\n-    // If this crate is a plugin and/or a custom derive crate, then\n-    // we're not even going to link those in so we skip those crates.\n-    if tcx.plugin_registrar_fn(cnum).is_some() ||\n-       tcx.derive_registrar_fn(cnum).is_some() {\n-        return Arc::new(Vec::new())\n-    }\n-\n-    // Check to see if this crate is a \"special runtime crate\". These\n-    // crates, implementation details of the standard library, typically\n-    // have a bunch of `pub extern` and `#[no_mangle]` functions as the\n-    // ABI between them. We don't want their symbols to have a `C`\n-    // export level, however, as they're just implementation details.\n-    // Down below we'll hardwire all of the symbols to the `Rust` export\n-    // level instead.\n-    let special_runtime_crate =\n-        tcx.is_panic_runtime(cnum) || tcx.is_compiler_builtins(cnum);\n-\n-    let mut crate_exports: Vec<_> = tcx\n-        .reachable_non_generics(cnum)\n-        .iter()\n-        .map(|&def_id| {\n-            let export_level = if special_runtime_crate {\n-                let name = tcx.symbol_name(Instance::mono(tcx, def_id));\n-                // We can probably do better here by just ensuring that\n-                // it has hidden visibility rather than public\n-                // visibility, as this is primarily here to ensure it's\n-                // not stripped during LTO.\n-                //\n-                // In general though we won't link right if these\n-                // symbols are stripped, and LTO currently strips them.\n-                if &*name == \"rust_eh_personality\" ||\n-                   &*name == \"rust_eh_register_frames\" ||\n-                   &*name == \"rust_eh_unregister_frames\" {\n-                    SymbolExportLevel::C\n-                } else {\n-                    SymbolExportLevel::Rust\n-                }\n-            } else {\n-                tcx.symbol_export_level(def_id)\n-            };\n-\n-            debug!(\"EXPORTED SYMBOL (re-export): {} ({:?})\",\n-                   tcx.symbol_name(Instance::mono(tcx, def_id)),\n-                   export_level);\n-\n-            (ExportedSymbol::NonGeneric(def_id), export_level)\n-        })\n-        .collect();\n-\n-    // Sort so we get a stable incr. comp. hash.\n-    crate_exports.sort_unstable_by(|&(ref symbol1, ..), &(ref symbol2, ..)| {\n-        symbol1.compare_stable(tcx, symbol2)\n-    });\n-\n-    Arc::new(crate_exports)\n-}\n-\n pub fn provide_extern(providers: &mut Providers) {\n-    providers.exported_symbols = exported_symbols_provider_extern;\n     providers.is_reachable_non_generic = is_reachable_non_generic_provider;\n     providers.symbol_export_level = symbol_export_level_provider;\n }"}]}