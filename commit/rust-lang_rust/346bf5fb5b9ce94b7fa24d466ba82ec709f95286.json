{"sha": "346bf5fb5b9ce94b7fa24d466ba82ec709f95286", "node_id": "C_kwDOAAsO6NoAKDM0NmJmNWZiNWI5Y2U5NGI3ZmEyNGQ0NjZiYTgyZWM3MDlmOTUyODY", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-28T23:17:13Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-28T23:17:13Z"}, "message": "Implement `do yeet` expression", "tree": {"sha": "0ed4f3279e25a803520b751c7a2a4bfedfa7143f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ed4f3279e25a803520b751c7a2a4bfedfa7143f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/346bf5fb5b9ce94b7fa24d466ba82ec709f95286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/346bf5fb5b9ce94b7fa24d466ba82ec709f95286", "html_url": "https://github.com/rust-lang/rust/commit/346bf5fb5b9ce94b7fa24d466ba82ec709f95286", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/346bf5fb5b9ce94b7fa24d466ba82ec709f95286/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a16afa264b294b42509660eb7423a8efeaf6787", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a16afa264b294b42509660eb7423a8efeaf6787", "html_url": "https://github.com/rust-lang/rust/commit/4a16afa264b294b42509660eb7423a8efeaf6787"}], "stats": {"total": 76, "additions": 72, "deletions": 4}, "files": [{"sha": "e8da24e3addaa535748931aa642eda49cbe67e35", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/346bf5fb5b9ce94b7fa24d466ba82ec709f95286/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346bf5fb5b9ce94b7fa24d466ba82ec709f95286/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=346bf5fb5b9ce94b7fa24d466ba82ec709f95286", "patch": "@@ -371,6 +371,10 @@ impl ExprCollector<'_> {\n                 let expr = e.expr().map(|e| self.collect_expr(e));\n                 self.alloc_expr(Expr::Yield { expr }, syntax_ptr)\n             }\n+            ast::Expr::YeetExpr(e) => {\n+                let expr = e.expr().map(|e| self.collect_expr(e));\n+                self.alloc_expr(Expr::Yeet { expr }, syntax_ptr)\n+            }\n             ast::Expr::RecordExpr(e) => {\n                 let path =\n                     e.path().and_then(|path| self.expander.parse_path(self.db, path)).map(Box::new);"}, {"sha": "10b9b26bbeaa1bb84dea58feb611034d0df9af2b", "filename": "crates/hir-def/src/body/pretty.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/346bf5fb5b9ce94b7fa24d466ba82ec709f95286/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346bf5fb5b9ce94b7fa24d466ba82ec709f95286/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs?ref=346bf5fb5b9ce94b7fa24d466ba82ec709f95286", "patch": "@@ -247,6 +247,15 @@ impl<'a> Printer<'a> {\n                     self.print_expr(*expr);\n                 }\n             }\n+            Expr::Yeet { expr } => {\n+                w!(self, \"do\");\n+                self.whitespace();\n+                w!(self, \"yeet\");\n+                if let Some(expr) = expr {\n+                    self.whitespace();\n+                    self.print_expr(*expr);\n+                }\n+            }\n             Expr::RecordLit { path, fields, spread, ellipsis, is_assignee_expr: _ } => {\n                 match path {\n                     Some(path) => self.print_path(path),"}, {"sha": "3066213ace8e71f196b49f4fdf70924d18c648d0", "filename": "crates/hir-def/src/expr.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/346bf5fb5b9ce94b7fa24d466ba82ec709f95286/crates%2Fhir-def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346bf5fb5b9ce94b7fa24d466ba82ec709f95286/crates%2Fhir-def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fexpr.rs?ref=346bf5fb5b9ce94b7fa24d466ba82ec709f95286", "patch": "@@ -137,6 +137,9 @@ pub enum Expr {\n     Yield {\n         expr: Option<ExprId>,\n     },\n+    Yeet {\n+        expr: Option<ExprId>,\n+    },\n     RecordLit {\n         path: Option<Box<Path>>,\n         fields: Box<[RecordLitField]>,\n@@ -313,7 +316,10 @@ impl Expr {\n                 arms.iter().map(|arm| arm.expr).for_each(f);\n             }\n             Expr::Continue { .. } => {}\n-            Expr::Break { expr, .. } | Expr::Return { expr } | Expr::Yield { expr } => {\n+            Expr::Break { expr, .. }\n+            | Expr::Return { expr }\n+            | Expr::Yield { expr }\n+            | Expr::Yeet { expr } => {\n                 if let &Some(expr) = expr {\n                     f(expr);\n                 }"}, {"sha": "8070655cab5c7a4b144636731be9eb8c7384917c", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/346bf5fb5b9ce94b7fa24d466ba82ec709f95286/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346bf5fb5b9ce94b7fa24d466ba82ec709f95286/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=346bf5fb5b9ce94b7fa24d466ba82ec709f95286", "patch": "@@ -465,6 +465,12 @@ impl<'a> InferenceContext<'a> {\n                     TyKind::Error.intern(Interner)\n                 }\n             }\n+            Expr::Yeet { expr } => {\n+                if let &Some(expr) = expr {\n+                    self.infer_expr_inner(expr, &Expectation::None);\n+                }\n+                TyKind::Never.intern(Interner)\n+            }\n             Expr::RecordLit { path, fields, spread, .. } => {\n                 let (ty, def_id) = self.resolve_variant(path.as_deref(), false);\n                 if let Some(variant) = def_id {"}, {"sha": "347e87ce9720cafe9e1ab8693e8cf02c3a6ea9cd", "filename": "crates/ide-db/src/syntax_helpers/node_ext.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/346bf5fb5b9ce94b7fa24d466ba82ec709f95286/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346bf5fb5b9ce94b7fa24d466ba82ec709f95286/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs?ref=346bf5fb5b9ce94b7fa24d466ba82ec709f95286", "patch": "@@ -328,7 +328,8 @@ pub fn for_each_tail_expr(expr: &ast::Expr, cb: &mut dyn FnMut(&ast::Expr)) {\n         | ast::Expr::WhileExpr(_)\n         | ast::Expr::LetExpr(_)\n         | ast::Expr::UnderscoreExpr(_)\n-        | ast::Expr::YieldExpr(_) => cb(expr),\n+        | ast::Expr::YieldExpr(_)\n+        | ast::Expr::YeetExpr(_) => cb(expr),\n     }\n }\n "}, {"sha": "a06c6abf286e2dfa14344b368055f2bcc9fd813e", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/346bf5fb5b9ce94b7fa24d466ba82ec709f95286/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346bf5fb5b9ce94b7fa24d466ba82ec709f95286/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=346bf5fb5b9ce94b7fa24d466ba82ec709f95286", "patch": "@@ -174,6 +174,7 @@ fn keyword(\n         | T![return]\n         | T![while]\n         | T![yield] => h | HlMod::ControlFlow,\n+        T![do] | T![yeet] if parent_matches::<ast::YeetExpr>(&token) => h | HlMod::ControlFlow,\n         T![for] if parent_matches::<ast::ForExpr>(&token) => h | HlMod::ControlFlow,\n         T![unsafe] => h | HlMod::Unsafe,\n         T![true] | T![false] => HlTag::BoolLiteral.into(),"}, {"sha": "2c67586a3905da43c02cdb4bea90cad620ae0680", "filename": "crates/syntax/rust.ungram", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/346bf5fb5b9ce94b7fa24d466ba82ec709f95286/crates%2Fsyntax%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/346bf5fb5b9ce94b7fa24d466ba82ec709f95286/crates%2Fsyntax%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Frust.ungram?ref=346bf5fb5b9ce94b7fa24d466ba82ec709f95286", "patch": "@@ -359,6 +359,7 @@ Expr =\n | TupleExpr\n | WhileExpr\n | YieldExpr\n+| YeetExpr\n | LetExpr\n | UnderscoreExpr\n \n@@ -503,6 +504,9 @@ ReturnExpr =\n YieldExpr =\n   Attr* 'yield' Expr?\n \n+YeetExpr =\n+  Attr* 'do' 'yeet' Expr?\n+\n LetExpr =\n   Attr* 'let' Pat '=' Expr\n "}, {"sha": "86d222723d50bdd40b7a0a4cf39c8f4326266e39", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/346bf5fb5b9ce94b7fa24d466ba82ec709f95286/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346bf5fb5b9ce94b7fa24d466ba82ec709f95286/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=346bf5fb5b9ce94b7fa24d466ba82ec709f95286", "patch": "@@ -1063,6 +1063,17 @@ impl YieldExpr {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct YeetExpr {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::HasAttrs for YeetExpr {}\n+impl YeetExpr {\n+    pub fn do_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![do]) }\n+    pub fn yeet_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![yeet]) }\n+    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LetExpr {\n     pub(crate) syntax: SyntaxNode,\n@@ -1541,6 +1552,7 @@ pub enum Expr {\n     TupleExpr(TupleExpr),\n     WhileExpr(WhileExpr),\n     YieldExpr(YieldExpr),\n+    YeetExpr(YeetExpr),\n     LetExpr(LetExpr),\n     UnderscoreExpr(UnderscoreExpr),\n }\n@@ -2694,6 +2706,17 @@ impl AstNode for YieldExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for YeetExpr {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == YEET_EXPR }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for LetExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == LET_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3382,6 +3405,9 @@ impl From<WhileExpr> for Expr {\n impl From<YieldExpr> for Expr {\n     fn from(node: YieldExpr) -> Expr { Expr::YieldExpr(node) }\n }\n+impl From<YeetExpr> for Expr {\n+    fn from(node: YeetExpr) -> Expr { Expr::YeetExpr(node) }\n+}\n impl From<LetExpr> for Expr {\n     fn from(node: LetExpr) -> Expr { Expr::LetExpr(node) }\n }\n@@ -3422,6 +3448,7 @@ impl AstNode for Expr {\n                 | TUPLE_EXPR\n                 | WHILE_EXPR\n                 | YIELD_EXPR\n+                | YEET_EXPR\n                 | LET_EXPR\n                 | UNDERSCORE_EXPR\n         )\n@@ -3458,6 +3485,7 @@ impl AstNode for Expr {\n             TUPLE_EXPR => Expr::TupleExpr(TupleExpr { syntax }),\n             WHILE_EXPR => Expr::WhileExpr(WhileExpr { syntax }),\n             YIELD_EXPR => Expr::YieldExpr(YieldExpr { syntax }),\n+            YEET_EXPR => Expr::YeetExpr(YeetExpr { syntax }),\n             LET_EXPR => Expr::LetExpr(LetExpr { syntax }),\n             UNDERSCORE_EXPR => Expr::UnderscoreExpr(UnderscoreExpr { syntax }),\n             _ => return None,\n@@ -3496,6 +3524,7 @@ impl AstNode for Expr {\n             Expr::TupleExpr(it) => &it.syntax,\n             Expr::WhileExpr(it) => &it.syntax,\n             Expr::YieldExpr(it) => &it.syntax,\n+            Expr::YeetExpr(it) => &it.syntax,\n             Expr::LetExpr(it) => &it.syntax,\n             Expr::UnderscoreExpr(it) => &it.syntax,\n         }\n@@ -3963,6 +3992,7 @@ impl AstNode for AnyHasAttrs {\n                 | TUPLE_EXPR\n                 | WHILE_EXPR\n                 | YIELD_EXPR\n+                | YEET_EXPR\n                 | LET_EXPR\n                 | UNDERSCORE_EXPR\n                 | STMT_LIST\n@@ -4655,6 +4685,11 @@ impl std::fmt::Display for YieldExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for YeetExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for LetExpr {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "4ec388914e604d8aa4d71092557784681a3034a5", "filename": "crates/syntax/src/ast/prec.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/346bf5fb5b9ce94b7fa24d466ba82ec709f95286/crates%2Fsyntax%2Fsrc%2Fast%2Fprec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/346bf5fb5b9ce94b7fa24d466ba82ec709f95286/crates%2Fsyntax%2Fsrc%2Fast%2Fprec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fprec.rs?ref=346bf5fb5b9ce94b7fa24d466ba82ec709f95286", "patch": "@@ -130,7 +130,7 @@ impl Expr {\n             //\n             ContinueExpr(_) => (0, 0),\n \n-            ClosureExpr(_) | ReturnExpr(_) | YieldExpr(_) | BreakExpr(_) => (0, 1),\n+            ClosureExpr(_) | ReturnExpr(_) | YieldExpr(_) | YeetExpr(_) | BreakExpr(_) => (0, 1),\n \n             RangeExpr(_) => (5, 5),\n \n@@ -291,6 +291,7 @@ impl Expr {\n                 ReturnExpr(e) => e.return_token(),\n                 TryExpr(e) => e.question_mark_token(),\n                 YieldExpr(e) => e.yield_token(),\n+                YeetExpr(e) => e.do_token(),\n                 LetExpr(e) => e.let_token(),\n \n                 ArrayExpr(_) | TupleExpr(_) | Literal(_) | PathExpr(_) | ParenExpr(_)\n@@ -313,7 +314,8 @@ impl Expr {\n \n             // For BinExpr and RangeExpr this is technically wrong -- the child can be on the left...\n             BinExpr(_) | RangeExpr(_) | BoxExpr(_) | BreakExpr(_) | ContinueExpr(_)\n-            | PrefixExpr(_) | RefExpr(_) | ReturnExpr(_) | YieldExpr(_) | LetExpr(_) => self\n+            | PrefixExpr(_) | RefExpr(_) | ReturnExpr(_) | YieldExpr(_) | YeetExpr(_)\n+            | LetExpr(_) => self\n                 .syntax()\n                 .parent()\n                 .and_then(Expr::cast)"}]}