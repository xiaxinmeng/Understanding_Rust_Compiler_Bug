{"sha": "54595ecb60e681ecf682af7e76289ef695b23ebc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NTk1ZWNiNjBlNjgxZWNmNjgyYWY3ZTc2Mjg5ZWY2OTViMjNlYmM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-02T23:12:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-02T23:31:25Z"}, "message": "use memoized pattern for SizedConstraint\n\nI cannot figure out how to write a test for this, but I observed\nincorrect edges as a result of not using memoized pattern here\n(e.g., LateLintCheck -> SizedConstraint).", "tree": {"sha": "a908df53449c343ce13898431af355c2987df740", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a908df53449c343ce13898431af355c2987df740"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54595ecb60e681ecf682af7e76289ef695b23ebc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54595ecb60e681ecf682af7e76289ef695b23ebc", "html_url": "https://github.com/rust-lang/rust/commit/54595ecb60e681ecf682af7e76289ef695b23ebc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54595ecb60e681ecf682af7e76289ef695b23ebc/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b13d5041f65df03bd3a34070cb08d339fa629f18", "url": "https://api.github.com/repos/rust-lang/rust/commits/b13d5041f65df03bd3a34070cb08d339fa629f18", "html_url": "https://github.com/rust-lang/rust/commit/b13d5041f65df03bd3a34070cb08d339fa629f18"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "634599406afb2fc49627a734559fccb5e0c4abc1", "filename": "src/librustc/ty/ivar.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54595ecb60e681ecf682af7e76289ef695b23ebc/src%2Flibrustc%2Fty%2Fivar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54595ecb60e681ecf682af7e76289ef695b23ebc/src%2Flibrustc%2Fty%2Fivar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fivar.rs?ref=54595ecb60e681ecf682af7e76289ef695b23ebc", "patch": "@@ -52,8 +52,10 @@ impl<'tcx, 'lt> TyIVar<'tcx, 'lt> {\n         self.untracked_get()\n     }\n \n+    /// Reads the ivar without registered a dep-graph read. Use with\n+    /// caution.\n     #[inline]\n-    fn untracked_get(&self) -> Option<Ty<'tcx>> {\n+    pub fn untracked_get(&self) -> Option<Ty<'tcx>> {\n         match self.0.get() {\n             None => None,\n             // valid because of invariant (A)"}, {"sha": "a7c534198923b7a1183bb7f9b7f0a0d65dcd24bf", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/54595ecb60e681ecf682af7e76289ef695b23ebc/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54595ecb60e681ecf682af7e76289ef695b23ebc/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=54595ecb60e681ecf682af7e76289ef695b23ebc", "patch": "@@ -1757,8 +1757,7 @@ impl<'a, 'gcx, 'tcx, 'container> AdtDefData<'tcx, 'container> {\n     /// Due to normalization being eager, this applies even if\n     /// the associated type is behind a pointer, e.g. issue #31299.\n     pub fn sized_constraint(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {\n-        let dep_node = DepNode::SizedConstraint(self.did);\n-        match self.sized_constraint.get(dep_node) {\n+        match self.sized_constraint.get(DepNode::SizedConstraint(self.did)) {\n             None => {\n                 let global_tcx = tcx.global_tcx();\n                 let this = global_tcx.lookup_adt_def_master(self.did);\n@@ -1786,12 +1785,18 @@ impl<'a, 'tcx> AdtDefData<'tcx, 'tcx> {\n     ///       such.\n     ///     - a TyError, if a type contained itself. The representability\n     ///       check should catch this case.\n-    fn calculate_sized_constraint_inner(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    fn calculate_sized_constraint_inner(&'tcx self,\n+                                        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         stack: &mut Vec<AdtDefMaster<'tcx>>)\n     {\n-\n         let dep_node = || DepNode::SizedConstraint(self.did);\n-        if self.sized_constraint.get(dep_node()).is_some() {\n+\n+        // Follow the memoization pattern: push the computation of\n+        // DepNode::SizedConstraint as our current task.\n+        let _task = tcx.dep_graph.in_task(dep_node());\n+        if self.sized_constraint.untracked_get().is_some() {\n+            //                   ---------------\n+            // can skip the dep-graph read since we just pushed the task\n             return;\n         }\n "}]}