{"sha": "a13809ae51bbe0c4c203ad17e533a083af8e15b9", "node_id": "C_kwDOAAsO6NoAKGExMzgwOWFlNTFiYmUwYzRjMjAzYWQxN2U1MzNhMDgzYWY4ZTE1Yjk", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-11T17:12:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-11T17:12:30Z"}, "message": "Rollup merge of #103960 - AndyJado:var_path_only_diag, r=davidtwco\n\npiece of diagnostic migrate\n\nr? `@davidtwco`", "tree": {"sha": "4a7b0d498efae74d9c2c4ecf0290036e6d510fbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a7b0d498efae74d9c2c4ecf0290036e6d510fbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a13809ae51bbe0c4c203ad17e533a083af8e15b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjboJ+CRBK7hj4Ov3rIwAALvcIAES7wgimLW3ae16E6QGlIpjk\nlqI6KaUQRtdVIm475vzOX0uS/B09ntfvr8NCgzdxysTFCT7P/eqb+2v7o4Rx6ywg\nJPFuaH0IekzLxeBeI+8ZFy2vZzW+mbF1q3Dln4fiphDUYsYzv6Z1FFh+ZOWNus6k\nBdWeOv2PuHYo1rqy5V7JO4rz2T+O1sTW3QuKVKcC0xq30TbfHAq9RVtRjH/BHngL\nmptdc9mgUZ4xD4VrLP6le71ZMH2MsVne6CI3lqvj4kjQDyb2V9dOPrzneGf3tk6D\nYl3SibkljVNXaslHz00YNRLWbZB1RoJIpK+nsn/f19k+G2FLNHG4fFXlQ8qH/Gw=\n=Oi+p\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a7b0d498efae74d9c2c4ecf0290036e6d510fbd\nparent f00897e2f4a411b0fa8ffb403a114bca007f0601\nparent 057d8e5c43eb63691c5c6fbae8e67070150190f4\nauthor Manish Goregaokar <manishsmail@gmail.com> 1668186750 -0500\ncommitter GitHub <noreply@github.com> 1668186750 -0500\n\nRollup merge of #103960 - AndyJado:var_path_only_diag, r=davidtwco\n\npiece of diagnostic migrate\n\nr? `@davidtwco`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a13809ae51bbe0c4c203ad17e533a083af8e15b9", "html_url": "https://github.com/rust-lang/rust/commit/a13809ae51bbe0c4c203ad17e533a083af8e15b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a13809ae51bbe0c4c203ad17e533a083af8e15b9/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f00897e2f4a411b0fa8ffb403a114bca007f0601", "url": "https://api.github.com/repos/rust-lang/rust/commits/f00897e2f4a411b0fa8ffb403a114bca007f0601", "html_url": "https://github.com/rust-lang/rust/commit/f00897e2f4a411b0fa8ffb403a114bca007f0601"}, {"sha": "057d8e5c43eb63691c5c6fbae8e67070150190f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/057d8e5c43eb63691c5c6fbae8e67070150190f4", "html_url": "https://github.com/rust-lang/rust/commit/057d8e5c43eb63691c5c6fbae8e67070150190f4"}], "stats": {"total": 321, "additions": 261, "deletions": 60}, "files": [{"sha": "563ff056ae467245b67f5bacee32f7c2b5817ff0", "filename": "compiler/rustc_borrowck/src/borrow_set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n use crate::nll::ToRegionVid;\n use crate::path_utils::allow_two_phase_borrow;\n use crate::place_ext::PlaceExt;"}, {"sha": "01be379120dc7483c088daa4005b744bb386dfb8", "filename": "compiler/rustc_borrowck/src/borrowck_errors.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -8,9 +8,18 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n     pub(crate) fn cannot_move_when_borrowed(\n         &self,\n         span: Span,\n-        desc: &str,\n+        borrow_span: Span,\n+        place: &str,\n+        borrow_place: &str,\n+        value_place: &str,\n     ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n-        struct_span_err!(self, span, E0505, \"cannot move out of {} because it is borrowed\", desc,)\n+        self.infcx.tcx.sess.create_err(crate::session_diagnostics::MoveBorrow {\n+            place,\n+            span,\n+            borrow_place,\n+            value_place,\n+            borrow_span,\n+        })\n     }\n \n     pub(crate) fn cannot_use_when_mutably_borrowed("}, {"sha": "11b31c3f14028e72dbe20df6d6e3db3a6ec21f1a", "filename": "compiler/rustc_borrowck/src/constraint_generation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::visit::TyContext;\n use rustc_middle::mir::visit::Visitor;"}, {"sha": "84a93e5f72e9dd3b508782306ea15fc46d653995", "filename": "compiler/rustc_borrowck/src/constraints/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,6 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n+\n use rustc_data_structures::graph::scc::Sccs;\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::ConstraintCategory;"}, {"sha": "86da767f322738fae52365b52cc0366d1b6fe311", "filename": "compiler/rustc_borrowck/src/consumers.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n //! This file provides API for compiler consumers.\n \n use rustc_hir::def_id::LocalDefId;"}, {"sha": "8070c0e6710ee0e1288cb9a0284fab5d47f8617f", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::{self, BasicBlock, Body, Location, Place};"}, {"sha": "8e62a0198be46987733c4ad7c0608aff65cc84bf", "filename": "compiler/rustc_borrowck/src/def_use.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdef_use.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n use rustc_middle::mir::visit::{\n     MutatingUseContext, NonMutatingUseContext, NonUseContext, PlaceContext,\n };"}, {"sha": "b99bfda1a51fe661c6366505486bca5d9c8f76b8", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,6 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n+\n use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed};\n use rustc_infer::infer::canonical::Canonical;\n use rustc_infer::infer::error_reporting::nice_region_error::NiceRegionError;"}, {"sha": "9e0aa57b2553fba87dfbab9ef2f19689da0a12ce", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 19, "deletions": 32, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -224,10 +224,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }\n             }\n \n-            use_spans.var_span_label_path_only(\n-                &mut err,\n-                format!(\"{} occurs due to use{}\", desired_action.as_noun(), use_spans.describe()),\n-            );\n+            use_spans.var_path_only_subdiag(&mut err, desired_action);\n \n             if !is_loop_move {\n                 err.span_label(\n@@ -404,10 +401,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let used = desired_action.as_general_verb_in_past_tense();\n         let mut err =\n             struct_span_err!(self, span, E0381, \"{used} binding {desc}{isnt_initialized}\");\n-        use_spans.var_span_label_path_only(\n-            &mut err,\n-            format!(\"{} occurs due to use{}\", desired_action.as_noun(), use_spans.describe()),\n-        );\n+        use_spans.var_path_only_subdiag(&mut err, desired_action);\n \n         if let InitializationRequiringAction::PartialAssignment\n         | InitializationRequiringAction::Assignment = desired_action\n@@ -673,16 +667,16 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let move_spans = self.move_spans(place.as_ref(), location);\n         let span = move_spans.args_or_use();\n \n-        let mut err =\n-            self.cannot_move_when_borrowed(span, &self.describe_any_place(place.as_ref()));\n-        err.span_label(borrow_span, format!(\"borrow of {} occurs here\", borrow_msg));\n-        err.span_label(span, format!(\"move out of {} occurs here\", value_msg));\n-\n-        borrow_spans.var_span_label_path_only(\n-            &mut err,\n-            format!(\"borrow occurs due to use{}\", borrow_spans.describe()),\n+        let mut err = self.cannot_move_when_borrowed(\n+            span,\n+            borrow_span,\n+            &self.describe_any_place(place.as_ref()),\n+            &borrow_msg,\n+            &value_msg,\n         );\n \n+        borrow_spans.var_path_only_subdiag(&mut err, crate::InitializationRequiringAction::Borrow);\n+\n         move_spans.var_span_label(\n             &mut err,\n             format!(\"move occurs due to use{}\", move_spans.describe()),\n@@ -724,22 +718,15 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             borrow_span,\n             &self.describe_any_place(borrow.borrowed_place.as_ref()),\n         );\n-        borrow_spans.var_subdiag(\n-            &mut err,\n-            |var_span| {\n-                use crate::session_diagnostics::CaptureVarCause::*;\n-                let place = &borrow.borrowed_place;\n-                let desc_place = self.describe_any_place(place.as_ref());\n-                match borrow_spans {\n-                    UseSpans::ClosureUse { generator_kind, .. } => match generator_kind {\n-                        Some(_) => BorrowUsePlaceGenerator { place: desc_place, var_span },\n-                        None => BorrowUsePlaceClosure { place: desc_place, var_span },\n-                    },\n-                    _ => BorrowUsePlace { place: desc_place, var_span },\n-                }\n-            },\n-            \"mutable\",\n-        );\n+        borrow_spans.var_subdiag(&mut err, Some(borrow.kind), |kind, var_span| {\n+            use crate::session_diagnostics::CaptureVarCause::*;\n+            let place = &borrow.borrowed_place;\n+            let desc_place = self.describe_any_place(place.as_ref());\n+            match kind {\n+                Some(_) => BorrowUsePlaceGenerator { place: desc_place, var_span },\n+                None => BorrowUsePlaceClosure { place: desc_place, var_span },\n+            }\n+        });\n \n         self.explain_why_borrow_contains_point(location, borrow, None)\n             .add_explanation_to_diagnostic("}, {"sha": "498e9834354b7ff851da549230f7b2707ef43c28", "filename": "compiler/rustc_borrowck/src/diagnostics/find_all_local_uses.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_all_local_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_all_local_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_all_local_uses.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,6 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n+\n use std::collections::BTreeSet;\n \n use rustc_middle::mir::visit::{PlaceContext, Visitor};"}, {"sha": "15f42e26cbf4a7aeca1bac947ac0b58b4836c3aa", "filename": "compiler/rustc_borrowck/src/diagnostics/find_use.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,6 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n+\n use std::collections::VecDeque;\n use std::rc::Rc;\n "}, {"sha": "7f26af67c71b214485777b90ea0e97029650bafb", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 48, "deletions": 16, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -595,11 +595,34 @@ impl UseSpans<'_> {\n         }\n     }\n \n-    // Add a span label to the use of the captured variable, if it exists.\n-    // only adds label to the `path_span`\n-    pub(super) fn var_span_label_path_only(self, err: &mut Diagnostic, message: impl Into<String>) {\n-        if let UseSpans::ClosureUse { path_span, .. } = self {\n-            err.span_label(path_span, message);\n+    /// Add a span label to the use of the captured variable, if it exists.\n+    /// only adds label to the `path_span`\n+    pub(super) fn var_path_only_subdiag(\n+        self,\n+        err: &mut Diagnostic,\n+        action: crate::InitializationRequiringAction,\n+    ) {\n+        use crate::session_diagnostics::CaptureVarPathUseCause::*;\n+        use crate::InitializationRequiringAction::*;\n+        if let UseSpans::ClosureUse { generator_kind, path_span, .. } = self {\n+            match generator_kind {\n+                Some(_) => {\n+                    err.subdiagnostic(match action {\n+                        Borrow => BorrowInGenerator { path_span },\n+                        MatchOn | Use => UseInGenerator { path_span },\n+                        Assignment => AssignInGenerator { path_span },\n+                        PartialAssignment => AssignPartInGenerator { path_span },\n+                    });\n+                }\n+                None => {\n+                    err.subdiagnostic(match action {\n+                        Borrow => BorrowInClosure { path_span },\n+                        MatchOn | Use => UseInClosure { path_span },\n+                        Assignment => AssignInClosure { path_span },\n+                        PartialAssignment => AssignPartInClosure { path_span },\n+                    });\n+                }\n+            }\n         }\n     }\n \n@@ -627,19 +650,28 @@ impl UseSpans<'_> {\n     pub(super) fn var_subdiag(\n         self,\n         err: &mut Diagnostic,\n-        f: impl Fn(Span) -> crate::session_diagnostics::CaptureVarCause,\n-        kind_desc: impl Into<String>,\n+        kind: Option<rustc_middle::mir::BorrowKind>,\n+        f: impl Fn(Option<GeneratorKind>, Span) -> crate::session_diagnostics::CaptureVarCause,\n     ) {\n-        if let UseSpans::ClosureUse { capture_kind_span, path_span, .. } = self {\n-            if capture_kind_span == path_span {\n-                err.subdiagnostic(f(capture_kind_span));\n-            } else {\n-                err.subdiagnostic(crate::session_diagnostics::CaptureVarKind {\n-                    kind_desc: kind_desc.into(),\n-                    kind_span: capture_kind_span,\n+        use crate::session_diagnostics::CaptureVarKind::*;\n+        if let UseSpans::ClosureUse { generator_kind, capture_kind_span, path_span, .. } = self {\n+            if capture_kind_span != path_span {\n+                err.subdiagnostic(match kind {\n+                    Some(kd) => match kd {\n+                        rustc_middle::mir::BorrowKind::Shared\n+                        | rustc_middle::mir::BorrowKind::Shallow\n+                        | rustc_middle::mir::BorrowKind::Unique => {\n+                            Immute { kind_span: capture_kind_span }\n+                        }\n+\n+                        rustc_middle::mir::BorrowKind::Mut { .. } => {\n+                            Mut { kind_span: capture_kind_span }\n+                        }\n+                    },\n+                    None => Move { kind_span: capture_kind_span },\n                 });\n-                err.subdiagnostic(f(path_span));\n-            }\n+            };\n+            err.subdiagnostic(f(generator_kind, path_span));\n         }\n     }\n "}, {"sha": "b385f95b67c6f992a12841c02b77b7bed01b8f35", "filename": "compiler/rustc_borrowck/src/diagnostics/var_name.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,6 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n+\n use crate::Upvar;\n use crate::{nll::ToRegionVid, region_infer::RegionInferenceContext};\n use rustc_index::vec::{Idx, IndexVec};"}, {"sha": "51ed27c167d3844971e445036bb0a4584524e210", "filename": "compiler/rustc_borrowck/src/facts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n use crate::location::{LocationIndex, LocationTable};\n use crate::BorrowIndex;\n use polonius_engine::AllFacts as PoloniusFacts;"}, {"sha": "f5317a143aed7157d0801da0e688c7bd7a090246", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::{self, BasicBlock, Body, Location, NonDivergingIntrinsic, Place, Rvalue};"}, {"sha": "9fa7e218b1b6f65ceb09a92420043f5f823f41f1", "filename": "compiler/rustc_borrowck/src/location.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flocation.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::{BasicBlock, Body, Location};\n "}, {"sha": "b48f9f97daad8d76dc07b541f445206f55fa7e8c", "filename": "compiler/rustc_borrowck/src/member_constraints.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::vec::IndexVec;"}, {"sha": "f8856b56d140bae139a7d069159b8bb813b28dd6", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n //! The entry point of the NLL borrow checker.\n \n use rustc_data_structures::vec_map::VecMap;"}, {"sha": "f8a99a2699e6ff0cf3c89c3c62ab576f6278e72c", "filename": "compiler/rustc_borrowck/src/path_utils.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fpath_utils.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n use crate::borrow_set::{BorrowData, BorrowSet, TwoPhaseActivation};\n use crate::places_conflict;\n use crate::AccessDepth;"}, {"sha": "9f6b1fdfcb54085853bb49c34a070b95c3358ec7", "filename": "compiler/rustc_borrowck/src/place_ext.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fplace_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fplace_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fplace_ext.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n use crate::borrow_set::LocalsStateAtExit;\n use rustc_hir as hir;\n use rustc_middle::mir::ProjectionElem;"}, {"sha": "8a87d1972ebf35613c8673285a0e43880112a666", "filename": "compiler/rustc_borrowck/src/places_conflict.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n use crate::ArtificialField;\n use crate::Overlap;\n use crate::{AccessDepth, Deep, Shallow};"}, {"sha": "6f281349863763f0cbb578f0a93102ef6ec19b81", "filename": "compiler/rustc_borrowck/src/prefixes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fprefixes.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n //! From the NLL RFC: \"The deep [aka 'supporting'] prefixes for an\n //! place are formed by stripping away fields and derefs, except that\n //! we stop when we reach the deref of a shared reference. [...] \""}, {"sha": "6524b594e44dc02083d629688966c151ae0965c5", "filename": "compiler/rustc_borrowck/src/region_infer/dump_mir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fdump_mir.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n //! As part of generating the regions, if you enable `-Zdump-mir=nll`,\n //! we will generate an annotated copy of the MIR that includes the\n //! state of region inference. This code handles emitting the region"}, {"sha": "2e15586e03b3bb49ec35331d11cdeaa9d9026b25", "filename": "compiler/rustc_borrowck/src/region_infer/graphviz.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fgraphviz.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n //! This module provides linkage between RegionInferenceContext and\n //! `rustc_graphviz` traits, specialized to attaching borrowck analysis\n //! data to rendered labels."}, {"sha": "167f664609698e8b26011e134c887d85855f7e79", "filename": "compiler/rustc_borrowck/src/region_infer/reverse_sccs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Freverse_sccs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Freverse_sccs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Freverse_sccs.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n use crate::constraints::ConstraintSccIndex;\n use crate::RegionInferenceContext;\n use itertools::Itertools;"}, {"sha": "7498ddccf196a1fc136f07cac6e20768c606ce60", "filename": "compiler/rustc_borrowck/src/region_infer/values.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_index::bit_set::SparseBitMatrix;\n use rustc_index::interval::IntervalSet;"}, {"sha": "084754830bdbfa8dda894e2f0621e6dd7ebe575d", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin};\n use rustc_middle::mir::visit::{MutVisitor, TyContext};"}, {"sha": "577332c0744b84dd8447af7ab3519a33ef18abe0", "filename": "compiler/rustc_borrowck/src/session_diagnostics.rs", "status": "modified", "additions": 72, "deletions": 10, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -150,21 +150,70 @@ pub(crate) enum RequireStaticErr {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(borrowck_capture_kind_label)]\n-pub(crate) struct CaptureVarKind {\n-    pub kind_desc: String,\n-    #[primary_span]\n-    pub kind_span: Span,\n+pub(crate) enum CaptureVarPathUseCause {\n+    #[label(borrowck_borrow_due_to_use_generator)]\n+    BorrowInGenerator {\n+        #[primary_span]\n+        path_span: Span,\n+    },\n+    #[label(borrowck_use_due_to_use_generator)]\n+    UseInGenerator {\n+        #[primary_span]\n+        path_span: Span,\n+    },\n+    #[label(borrowck_assign_due_to_use_generator)]\n+    AssignInGenerator {\n+        #[primary_span]\n+        path_span: Span,\n+    },\n+    #[label(borrowck_assign_part_due_to_use_generator)]\n+    AssignPartInGenerator {\n+        #[primary_span]\n+        path_span: Span,\n+    },\n+    #[label(borrowck_borrow_due_to_use_closure)]\n+    BorrowInClosure {\n+        #[primary_span]\n+        path_span: Span,\n+    },\n+    #[label(borrowck_use_due_to_use_closure)]\n+    UseInClosure {\n+        #[primary_span]\n+        path_span: Span,\n+    },\n+    #[label(borrowck_assign_due_to_use_closure)]\n+    AssignInClosure {\n+        #[primary_span]\n+        path_span: Span,\n+    },\n+    #[label(borrowck_assign_part_due_to_use_closure)]\n+    AssignPartInClosure {\n+        #[primary_span]\n+        path_span: Span,\n+    },\n }\n \n #[derive(Subdiagnostic)]\n-pub(crate) enum CaptureVarCause {\n-    #[label(borrowck_var_borrow_by_use_place)]\n-    BorrowUsePlace {\n-        place: String,\n+pub(crate) enum CaptureVarKind {\n+    #[label(borrowck_capture_immute)]\n+    Immute {\n         #[primary_span]\n-        var_span: Span,\n+        kind_span: Span,\n+    },\n+    #[label(borrowck_capture_mut)]\n+    Mut {\n+        #[primary_span]\n+        kind_span: Span,\n     },\n+    #[label(borrowck_capture_move)]\n+    Move {\n+        #[primary_span]\n+        kind_span: Span,\n+    },\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub(crate) enum CaptureVarCause {\n     #[label(borrowck_var_borrow_by_use_place_in_generator)]\n     BorrowUsePlaceGenerator {\n         place: String,\n@@ -178,3 +227,16 @@ pub(crate) enum CaptureVarCause {\n         var_span: Span,\n     },\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(borrowck_cannot_move_when_borrowed, code = \"E0505\")]\n+pub(crate) struct MoveBorrow<'a> {\n+    pub place: &'a str,\n+    pub borrow_place: &'a str,\n+    pub value_place: &'a str,\n+    #[primary_span]\n+    #[label(move_label)]\n+    pub span: Span,\n+    #[label]\n+    pub borrow_span: Span,\n+}"}, {"sha": "6ccc29b09c0a5d9646acb03f130f29ec579530a0", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n //! This pass type-checks the MIR to ensure it is not broken.\n \n use std::rc::Rc;"}, {"sha": "e297b1230ea0c58b2bf273cc8dbf886c9e495cb4", "filename": "compiler/rustc_borrowck/src/used_muts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1,3 +1,5 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n use rustc_data_structures::fx::FxHashSet;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::{"}, {"sha": "de47ada826444e00644e0edfc357973969a21f20", "filename": "compiler/rustc_error_messages/locales/en-US/borrowck.ftl", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -70,3 +70,56 @@ borrowck_var_borrow_by_use_place_in_closure =\n \n borrowck_var_borrow_by_use_place =\n     borrow occurs due to use of {$place}\n+\n+borrowck_borrow_due_to_use_generator =\n+    borrow occurs due to use in generator\n+\n+borrowck_use_due_to_use_generator =\n+    use occurs due to use in generator\n+\n+borrowck_assign_due_to_use_generator =\n+    assign occurs due to use in generator\n+\n+borrowck_assign_part_due_to_use_generator =\n+    assign to part occurs due to use in generator\n+\n+borrowck_borrow_due_to_use_closure =\n+    borrow occurs due to use in closure\n+\n+borrowck_use_due_to_use_closure =\n+    use occurs due to use in closure\n+\n+borrowck_assign_due_to_use_closure =\n+    assign occurs due to use in closure\n+\n+borrowck_assign_part_due_to_use_closure =\n+    assign to part occurs due to use in closure\n+\n+borrowck_capture_immute =\n+    capture is immutable because of use here\n+\n+borrowck_capture_mut =\n+    capture is mutable because of use here\n+\n+borrowck_capture_move =\n+    capture is moved because of use here\n+\n+borrowck_var_move_by_use_place_in_generator =\n+    move occurs due to use of {$place} in generator\n+\n+borrowck_var_move_by_use_place_in_closure =\n+    move occurs due to use of {$place} in closure\n+\n+borrowck_cannot_move_when_borrowed =\n+    cannot move out of {$place ->\n+        [value] value\n+        *[other] {$place}\n+    } because it is borrowed\n+    .label = borrow of {$borrow_place ->\n+        [value] value\n+        *[other] {$borrow_place}\n+    } occurs here\n+    .move_label = move out of {$value_place ->\n+        [value] value\n+        *[other] {$value_place}\n+    } occurs here"}, {"sha": "a4495d2934df3b58318a4340912357f0a1432446", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13809ae51bbe0c4c203ad17e533a083af8e15b9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a13809ae51bbe0c4c203ad17e533a083af8e15b9", "patch": "@@ -1957,6 +1957,7 @@ impl BorrowKind {\n         }\n     }\n \n+    // FIXME: won't be used after diagnostic migration\n     pub fn describe_mutability(&self) -> &str {\n         match *self {\n             BorrowKind::Shared | BorrowKind::Shallow | BorrowKind::Unique => \"immutable\","}]}