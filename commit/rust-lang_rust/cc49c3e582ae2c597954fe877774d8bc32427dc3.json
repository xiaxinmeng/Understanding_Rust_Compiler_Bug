{"sha": "cc49c3e582ae2c597954fe877774d8bc32427dc3", "node_id": "C_kwDOAAsO6NoAKGNjNDljM2U1ODJhZTJjNTk3OTU0ZmU4Nzc3NzRkOGJjMzI0MjdkYzM", "commit": {"author": {"name": "Daniel Paoliello", "email": "danpao@microsoft.com", "date": "2022-07-12T20:52:35Z"}, "committer": {"name": "Daniel Paoliello", "email": "danpao@microsoft.com", "date": "2022-08-26T16:15:35Z"}, "message": "Implementation of import_name_type", "tree": {"sha": "5355f87181e53086a4c4f13588e96a30693a57dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5355f87181e53086a4c4f13588e96a30693a57dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc49c3e582ae2c597954fe877774d8bc32427dc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc49c3e582ae2c597954fe877774d8bc32427dc3", "html_url": "https://github.com/rust-lang/rust/commit/cc49c3e582ae2c597954fe877774d8bc32427dc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc49c3e582ae2c597954fe877774d8bc32427dc3/comments", "author": {"login": "dpaoliello", "id": 10580822, "node_id": "MDQ6VXNlcjEwNTgwODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10580822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpaoliello", "html_url": "https://github.com/dpaoliello", "followers_url": "https://api.github.com/users/dpaoliello/followers", "following_url": "https://api.github.com/users/dpaoliello/following{/other_user}", "gists_url": "https://api.github.com/users/dpaoliello/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpaoliello/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpaoliello/subscriptions", "organizations_url": "https://api.github.com/users/dpaoliello/orgs", "repos_url": "https://api.github.com/users/dpaoliello/repos", "events_url": "https://api.github.com/users/dpaoliello/events{/privacy}", "received_events_url": "https://api.github.com/users/dpaoliello/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dpaoliello", "id": 10580822, "node_id": "MDQ6VXNlcjEwNTgwODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10580822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpaoliello", "html_url": "https://github.com/dpaoliello", "followers_url": "https://api.github.com/users/dpaoliello/followers", "following_url": "https://api.github.com/users/dpaoliello/following{/other_user}", "gists_url": "https://api.github.com/users/dpaoliello/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpaoliello/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpaoliello/subscriptions", "organizations_url": "https://api.github.com/users/dpaoliello/orgs", "repos_url": "https://api.github.com/users/dpaoliello/repos", "events_url": "https://api.github.com/users/dpaoliello/events{/privacy}", "received_events_url": "https://api.github.com/users/dpaoliello/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/42fa8ac7236f4f78a82aeea543bdd445a59f02e0", "html_url": "https://github.com/rust-lang/rust/commit/42fa8ac7236f4f78a82aeea543bdd445a59f02e0"}], "stats": {"total": 660, "additions": 614, "deletions": 46}, "files": [{"sha": "2e614e5dd88e7fc18068974f22e1e7a3a8a34df7", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -8,10 +8,11 @@ use std::path::{Path, PathBuf};\n use std::ptr;\n use std::str;\n \n+use crate::common;\n use crate::llvm::archive_ro::{ArchiveRO, Child};\n use crate::llvm::{self, ArchiveKind, LLVMMachineType, LLVMRustCOFFShortExport};\n use rustc_codegen_ssa::back::archive::{ArchiveBuilder, ArchiveBuilderBuilder};\n-use rustc_session::cstore::{DllCallingConvention, DllImport};\n+use rustc_session::cstore::DllImport;\n use rustc_session::Session;\n \n /// Helper for adding many files to an archive.\n@@ -111,21 +112,18 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n         };\n \n         let target = &sess.target;\n-        let mingw_gnu_toolchain = target.vendor == \"pc\"\n-            && target.os == \"windows\"\n-            && target.env == \"gnu\"\n-            && target.abi.is_empty();\n+        let mingw_gnu_toolchain = common::is_mingw_gnu_toolchain(target);\n \n         let import_name_and_ordinal_vector: Vec<(String, Option<u16>)> = dll_imports\n             .iter()\n             .map(|import: &DllImport| {\n                 if sess.target.arch == \"x86\" {\n                     (\n-                        LlvmArchiveBuilder::i686_decorated_name(import, mingw_gnu_toolchain),\n-                        import.ordinal,\n+                        common::i686_decorated_name(import, mingw_gnu_toolchain, false),\n+                        import.ordinal(),\n                     )\n                 } else {\n-                    (import.name.to_string(), import.ordinal)\n+                    (import.name.to_string(), import.ordinal())\n                 }\n             })\n             .collect();\n@@ -159,6 +157,9 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n                 }\n             };\n \n+            // --no-leading-underscore: For the `import_name_type` feature to work, we need to be\n+            // able to control the *exact* spelling of each of the symbols that are being imported:\n+            // hence we don't want `dlltool` adding leading underscores automatically.\n             let dlltool = find_binutils_dlltool(sess);\n             let result = std::process::Command::new(dlltool)\n                 .args([\n@@ -168,6 +169,7 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n                     lib_name,\n                     \"-l\",\n                     output_path.to_str().unwrap(),\n+                    \"--no-leading-underscore\",\n                 ])\n                 .output();\n \n@@ -322,22 +324,6 @@ impl<'a> LlvmArchiveBuilder<'a> {\n             ret\n         }\n     }\n-\n-    fn i686_decorated_name(import: &DllImport, mingw: bool) -> String {\n-        let name = import.name;\n-        let prefix = if mingw { \"\" } else { \"_\" };\n-\n-        match import.calling_convention {\n-            DllCallingConvention::C => format!(\"{}{}\", prefix, name),\n-            DllCallingConvention::Stdcall(arg_list_size) => {\n-                format!(\"{}{}@{}\", prefix, name, arg_list_size)\n-            }\n-            DllCallingConvention::Fastcall(arg_list_size) => format!(\"@{}@{}\", name, arg_list_size),\n-            DllCallingConvention::Vectorcall(arg_list_size) => {\n-                format!(\"{}@@{}\", name, arg_list_size)\n-            }\n-        }\n-    }\n }\n \n fn string_to_io_error(s: String) -> io::Error {"}, {"sha": "d55f995b933a6f6ec4935c8bf712247a0fcd9762", "filename": "compiler/rustc_codegen_llvm/src/callee.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -6,6 +6,7 @@\n \n use crate::abi::FnAbiLlvmExt;\n use crate::attributes;\n+use crate::common;\n use crate::context::CodegenCx;\n use crate::llvm;\n use crate::value::Value;\n@@ -79,13 +80,18 @@ pub fn get_fn<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) ->\n             llfn\n         }\n     } else {\n-        let llfn = cx.declare_fn(sym, fn_abi);\n+        let instance_def_id = instance.def_id();\n+        let llfn = if tcx.sess.target.arch == \"x86\" &&\n+            let Some(dllimport) = common::get_dllimport(tcx, instance_def_id, sym)\n+        {\n+            cx.declare_fn(&common::i686_decorated_name(&dllimport, common::is_mingw_gnu_toolchain(&tcx.sess.target), true), fn_abi)\n+        } else {\n+            cx.declare_fn(sym, fn_abi)\n+        };\n         debug!(\"get_fn: not casting pointer!\");\n \n         attributes::from_fn_attrs(cx, llfn, instance);\n \n-        let instance_def_id = instance.def_id();\n-\n         // Apply an appropriate linkage/visibility value to our item that we\n         // just declared.\n         //"}, {"sha": "63d3bb40a3fe0c448463f9d32253b984b7476424", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -10,12 +10,17 @@ use crate::value::Value;\n use rustc_ast::Mutability;\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::*;\n+use rustc_hir::def_id::DefId;\n use rustc_middle::bug;\n use rustc_middle::mir::interpret::{ConstAllocation, GlobalAlloc, Scalar};\n use rustc_middle::ty::layout::{LayoutOf, TyAndLayout};\n+use rustc_middle::ty::TyCtxt;\n+use rustc_session::cstore::{DllCallingConvention, DllImport, PeImportNameType};\n use rustc_target::abi::{self, AddressSpace, HasDataLayout, Pointer, Size};\n+use rustc_target::spec::Target;\n \n use libc::{c_char, c_uint};\n+use std::fmt::Write;\n use tracing::debug;\n \n /*\n@@ -357,3 +362,74 @@ fn hi_lo_to_u128(lo: u64, hi: u64) -> u128 {\n fn try_as_const_integral(v: &Value) -> Option<&ConstantInt> {\n     unsafe { llvm::LLVMIsAConstantInt(v) }\n }\n+\n+pub(crate) fn get_dllimport<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    id: DefId,\n+    name: &str,\n+) -> Option<&'tcx DllImport> {\n+    tcx.native_library(id)\n+        .map(|lib| lib.dll_imports.iter().find(|di| di.name.as_str() == name))\n+        .flatten()\n+}\n+\n+pub(crate) fn is_mingw_gnu_toolchain(target: &Target) -> bool {\n+    target.vendor == \"pc\" && target.os == \"windows\" && target.env == \"gnu\" && target.abi.is_empty()\n+}\n+\n+pub(crate) fn i686_decorated_name(\n+    dll_import: &DllImport,\n+    mingw: bool,\n+    disable_name_mangling: bool,\n+) -> String {\n+    let name = dll_import.name.as_str();\n+\n+    let (add_prefix, add_suffix) = match dll_import.import_name_type {\n+        Some(PeImportNameType::NoPrefix) => (false, true),\n+        Some(PeImportNameType::Undecorated) => (false, false),\n+        _ => (true, true),\n+    };\n+\n+    // Worst case: +1 for disable name mangling, +1 for prefix, +4 for suffix (@@__).\n+    let mut decorated_name = String::with_capacity(name.len() + 6);\n+\n+    if disable_name_mangling {\n+        // LLVM uses a binary 1 ('\\x01') prefix to a name to indicate that mangling needs to be disabled.\n+        decorated_name.push('\\x01');\n+    }\n+\n+    let prefix = if add_prefix && dll_import.is_fn {\n+        match dll_import.calling_convention {\n+            DllCallingConvention::C | DllCallingConvention::Vectorcall(_) => None,\n+            DllCallingConvention::Stdcall(_) => (!mingw\n+                || dll_import.import_name_type == Some(PeImportNameType::Decorated))\n+            .then_some('_'),\n+            DllCallingConvention::Fastcall(_) => Some('@'),\n+        }\n+    } else if !dll_import.is_fn && !mingw {\n+        // For static variables, prefix with '_' on MSVC.\n+        Some('_')\n+    } else {\n+        None\n+    };\n+    if let Some(prefix) = prefix {\n+        decorated_name.push(prefix);\n+    }\n+\n+    decorated_name.push_str(name);\n+\n+    if add_suffix && dll_import.is_fn {\n+        match dll_import.calling_convention {\n+            DllCallingConvention::C => {}\n+            DllCallingConvention::Stdcall(arg_list_size)\n+            | DllCallingConvention::Fastcall(arg_list_size) => {\n+                write!(&mut decorated_name, \"@{}\", arg_list_size).unwrap();\n+            }\n+            DllCallingConvention::Vectorcall(arg_list_size) => {\n+                write!(&mut decorated_name, \"@@{}\", arg_list_size).unwrap();\n+            }\n+        }\n+    }\n+\n+    decorated_name\n+}"}, {"sha": "f41ff325590afc4c0d7afab71a5c2cbf1e723e82", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -1,5 +1,5 @@\n use crate::base;\n-use crate::common::CodegenCx;\n+use crate::common::{self, CodegenCx};\n use crate::debuginfo;\n use crate::llvm::{self, True};\n use crate::llvm_util;\n@@ -160,7 +160,7 @@ fn check_and_apply_linkage<'ll, 'tcx>(\n     attrs: &CodegenFnAttrs,\n     ty: Ty<'tcx>,\n     sym: &str,\n-    span_def_id: DefId,\n+    def_id: DefId,\n ) -> &'ll Value {\n     let llty = cx.layout_of(ty).llvm_type(cx);\n     if let Some(linkage) = attrs.linkage {\n@@ -175,7 +175,7 @@ fn check_and_apply_linkage<'ll, 'tcx>(\n             cx.layout_of(mt.ty).llvm_type(cx)\n         } else {\n             cx.sess().span_fatal(\n-                cx.tcx.def_span(span_def_id),\n+                cx.tcx.def_span(def_id),\n                 \"must have type `*const T` or `*mut T` due to `#[linkage]` attribute\",\n             )\n         };\n@@ -194,14 +194,18 @@ fn check_and_apply_linkage<'ll, 'tcx>(\n             real_name.push_str(sym);\n             let g2 = cx.define_global(&real_name, llty).unwrap_or_else(|| {\n                 cx.sess().span_fatal(\n-                    cx.tcx.def_span(span_def_id),\n+                    cx.tcx.def_span(def_id),\n                     &format!(\"symbol `{}` is already defined\", &sym),\n                 )\n             });\n             llvm::LLVMRustSetLinkage(g2, llvm::Linkage::InternalLinkage);\n             llvm::LLVMSetInitializer(g2, g1);\n             g2\n         }\n+    } else if cx.tcx.sess.target.arch == \"x86\" &&\n+        let Some(dllimport) = common::get_dllimport(cx.tcx, def_id, sym)\n+    {\n+        cx.declare_global(&common::i686_decorated_name(&dllimport, common::is_mingw_gnu_toolchain(&cx.tcx.sess.target), true), llty)\n     } else {\n         // Generate an external declaration.\n         // FIXME(nagisa): investigate whether it can be changed into define_global"}, {"sha": "d520efed9b8b8768c33090c579d9e7d6cec33e30", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -335,7 +335,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // ABI, linking, symbols, and FFI\n     ungated!(\n         link, Normal,\n-        template!(List: r#\"name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ wasm_import_module = \"...\"\"#),\n+        template!(List: r#\"name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ wasm_import_module = \"...\", /*opt*/ import_name_type = \"decorated|noprefix|undecorated\"\"#),\n         DuplicatesOk,\n     ),\n     ungated!(link_name, Normal, template!(NameValueStr: \"name\"), FutureWarnPreceding),"}, {"sha": "8bafe203748f37784dc703b62d22d601ad07e6f1", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 74, "deletions": 5, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -5,7 +5,7 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_middle::ty::{List, ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n-use rustc_session::cstore::{DllCallingConvention, DllImport, NativeLib};\n+use rustc_session::cstore::{DllCallingConvention, DllImport, NativeLib, PeImportNameType};\n use rustc_session::parse::feature_err;\n use rustc_session::utils::NativeLibKind;\n use rustc_session::Session;\n@@ -61,6 +61,7 @@ impl<'tcx> Collector<'tcx> {\n             let mut modifiers = None;\n             let mut cfg = None;\n             let mut wasm_import_module = None;\n+            let mut import_name_type = None;\n             for item in items.iter() {\n                 match item.name_or_empty() {\n                     sym::name => {\n@@ -199,9 +200,51 @@ impl<'tcx> Collector<'tcx> {\n                         };\n                         wasm_import_module = Some((link_wasm_import_module, item.span()));\n                     }\n+                    sym::import_name_type => {\n+                        if import_name_type.is_some() {\n+                            let msg = \"multiple `import_name_type` arguments in a single `#[link]` attribute\";\n+                            sess.span_err(item.span(), msg);\n+                            continue;\n+                        }\n+                        let Some(link_import_name_type) = item.value_str() else {\n+                            let msg = \"import name type must be of the form `import_name_type = \\\"string\\\"`\";\n+                            sess.span_err(item.span(), msg);\n+                            continue;\n+                        };\n+                        if self.tcx.sess.target.arch != \"x86\" {\n+                            let msg = \"import name type is only supported on x86\";\n+                            sess.span_err(item.span(), msg);\n+                            continue;\n+                        }\n+\n+                        let link_import_name_type = match link_import_name_type.as_str() {\n+                            \"decorated\" => PeImportNameType::Decorated,\n+                            \"noprefix\" => PeImportNameType::NoPrefix,\n+                            \"undecorated\" => PeImportNameType::Undecorated,\n+                            import_name_type => {\n+                                let msg = format!(\n+                                    \"unknown import name type `{import_name_type}`, expected one of: \\\n+                                     decorated, noprefix, undecorated\"\n+                                );\n+                                sess.span_err(item.span(), msg);\n+                                continue;\n+                            }\n+                        };\n+                        if !features.raw_dylib {\n+                            let span = item.name_value_literal_span().unwrap();\n+                            feature_err(\n+                                &sess.parse_sess,\n+                                sym::raw_dylib,\n+                                span,\n+                                \"import name type is unstable\",\n+                            )\n+                            .emit();\n+                        }\n+                        import_name_type = Some((link_import_name_type, item.span()));\n+                    }\n                     _ => {\n                         let msg = \"unexpected `#[link]` argument, expected one of: \\\n-                                   name, kind, modifiers, cfg, wasm_import_module\";\n+                                   name, kind, modifiers, cfg, wasm_import_module, import_name_type\";\n                         sess.span_err(item.span(), msg);\n                     }\n                 }\n@@ -315,6 +358,14 @@ impl<'tcx> Collector<'tcx> {\n                 .emit();\n             }\n \n+            // Do this outside of the loop so that `import_name_type` can be specified before `kind`.\n+            if let Some((_, span)) = import_name_type {\n+                if kind != Some(NativeLibKind::RawDylib) {\n+                    let msg = \"import name type can only be used with link kind `raw-dylib`\";\n+                    sess.span_err(span, msg);\n+                }\n+            }\n+\n             let dll_imports = match kind {\n                 Some(NativeLibKind::RawDylib) => {\n                     if let Some((name, span)) = name && name.as_str().contains('\\0') {\n@@ -325,7 +376,13 @@ impl<'tcx> Collector<'tcx> {\n                     }\n                     foreign_mod_items\n                         .iter()\n-                        .map(|child_item| self.build_dll_import(abi, child_item))\n+                        .map(|child_item| {\n+                            self.build_dll_import(\n+                                abi,\n+                                import_name_type.map(|(import_name_type, _)| import_name_type),\n+                                child_item,\n+                            )\n+                        })\n                         .collect()\n                 }\n                 _ => {\n@@ -486,7 +543,12 @@ impl<'tcx> Collector<'tcx> {\n             .sum()\n     }\n \n-    fn build_dll_import(&self, abi: Abi, item: &hir::ForeignItemRef) -> DllImport {\n+    fn build_dll_import(\n+        &self,\n+        abi: Abi,\n+        import_name_type: Option<PeImportNameType>,\n+        item: &hir::ForeignItemRef,\n+    ) -> DllImport {\n         let calling_convention = if self.tcx.sess.target.arch == \"x86\" {\n             match abi {\n                 Abi::C { .. } | Abi::Cdecl { .. } => DllCallingConvention::C,\n@@ -518,11 +580,18 @@ impl<'tcx> Collector<'tcx> {\n             }\n         };\n \n+        let import_name_type = self\n+            .tcx\n+            .codegen_fn_attrs(item.id.def_id)\n+            .link_ordinal\n+            .map_or(import_name_type, |ord| Some(PeImportNameType::Ordinal(ord)));\n+\n         DllImport {\n             name: item.ident.name,\n-            ordinal: self.tcx.codegen_fn_attrs(item.id.def_id).link_ordinal,\n+            import_name_type,\n             calling_convention,\n             span: item.span,\n+            is_fn: self.tcx.def_kind(item.id.def_id).is_fn_like(),\n         }\n     }\n }"}, {"sha": "643294cace43bd4f2fd53631a8c17e9c47ee04ba", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -341,7 +341,8 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n             assert_eq!(cnum, LOCAL_CRATE);\n             false\n         },\n-        native_library_kind: |tcx, id| {\n+        native_library_kind: |tcx, id| tcx.native_library(id).map(|l| l.kind),\n+        native_library: |tcx, id| {\n             tcx.native_libraries(id.krate)\n                 .iter()\n                 .filter(|lib| native_libs::relevant_lib(&tcx.sess, lib))\n@@ -355,7 +356,6 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n                         .foreign_items\n                         .contains(&id)\n                 })\n-                .map(|l| l.kind)\n         },\n         native_libraries: |tcx, cnum| {\n             assert_eq!(cnum, LOCAL_CRATE);"}, {"sha": "ecedbe8fc8eaaf0e5d74d1db0bbb82da6b4e7fd3", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -1566,6 +1566,9 @@ rustc_queries! {\n         -> Option<NativeLibKind> {\n         desc { |tcx| \"native_library_kind({})\", tcx.def_path_str(def_id) }\n     }\n+    query native_library(def_id: DefId) -> Option<&'tcx NativeLib> {\n+        desc { |tcx| \"native_library({})\", tcx.def_path_str(def_id) }\n+    }\n \n     /// Does lifetime resolution, but does not descend into trait items. This\n     /// should only be used for resolving lifetimes of on trait definitions,"}, {"sha": "11ef75bb2d4a7c79cde03fcb208d7727b4361488", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -81,17 +81,48 @@ impl NativeLib {\n     }\n }\n \n+/// Different ways that the PE Format can decorate a symbol name.\n+/// From <https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#import-name-type>\n+#[derive(Copy, Clone, Debug, Encodable, Decodable, HashStable_Generic, PartialEq, Eq)]\n+pub enum PeImportNameType {\n+    /// IMPORT_ORDINAL\n+    /// Uses the ordinal (i.e., a number) rather than the name.\n+    Ordinal(u16),\n+    /// Same as IMPORT_NAME\n+    /// Name is decorated with all prefixes and suffixes.\n+    Decorated,\n+    /// Same as IMPORT_NAME_NOPREFIX\n+    /// Prefix (e.g., the leading `_` or `@`) is skipped, but suffix is kept.\n+    NoPrefix,\n+    /// Same as IMPORT_NAME_UNDECORATE\n+    /// Prefix (e.g., the leading `_` or `@`) and suffix (the first `@` and all\n+    /// trailing characters) are skipped.\n+    Undecorated,\n+}\n+\n #[derive(Clone, Debug, Encodable, Decodable, HashStable_Generic)]\n pub struct DllImport {\n     pub name: Symbol,\n-    pub ordinal: Option<u16>,\n+    pub import_name_type: Option<PeImportNameType>,\n     /// Calling convention for the function.\n     ///\n     /// On x86_64, this is always `DllCallingConvention::C`; on i686, it can be any\n     /// of the values, and we use `DllCallingConvention::C` to represent `\"cdecl\"`.\n     pub calling_convention: DllCallingConvention,\n     /// Span of import's \"extern\" declaration; used for diagnostics.\n     pub span: Span,\n+    /// Is this for a function (rather than a static variable).\n+    pub is_fn: bool,\n+}\n+\n+impl DllImport {\n+    pub fn ordinal(&self) -> Option<u16> {\n+        if let Some(PeImportNameType::Ordinal(ordinal)) = self.import_name_type {\n+            Some(ordinal)\n+        } else {\n+            None\n+        }\n+    }\n }\n \n /// Calling convention for a function defined in an external library."}, {"sha": "ef8b6851e148b627c9cbac1201e131df866c3358", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -803,6 +803,7 @@ symbols! {\n         impl_trait_in_bindings,\n         implied_by,\n         import,\n+        import_name_type,\n         import_shadowing,\n         imported_main,\n         in_band_lifetimes,"}, {"sha": "fcc60e88e1a43b9db7fb543cb3c242c06296442e", "filename": "src/test/run-make/raw-dylib-import-name-type/Makefile", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2FMakefile?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -0,0 +1,22 @@\n+# Test the behavior of #[link(.., kind = \"raw-dylib\")] with alternative calling conventions.\n+\n+# only-x86\n+# only-windows\n+\n+-include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(RUSTC) --crate-type bin driver.rs -L \"$(TMPDIR)\"\n+\t$(call COMPILE_OBJ,\"$(TMPDIR)\"/extern.obj,extern.c)\n+ifdef IS_MSVC\n+\t$(CC) \"$(TMPDIR)\"/extern.obj extern.msvc.def -link -dll -out:\"$(TMPDIR)\"/extern.dll -noimplib\n+else\n+\t$(CC) \"$(TMPDIR)\"/extern.obj extern.gnu.def --no-leading-underscore -shared -o \"$(TMPDIR)\"/extern.dll\n+endif\n+\t\"$(TMPDIR)\"/driver > \"$(TMPDIR)\"/output.txt\n+\n+ifdef RUSTC_BLESS_TEST\n+\tcp \"$(TMPDIR)\"/output.txt output.txt\n+else\n+\t$(DIFF) output.txt \"$(TMPDIR)\"/output.txt\n+endif"}, {"sha": "74e9a89fbdf3274c413358eb93a8ed8ad4412609", "filename": "src/test/run-make/raw-dylib-import-name-type/driver.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fdriver.rs?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -0,0 +1,79 @@\n+#![feature(raw_dylib)]\n+\n+#[link(name = \"extern\", kind = \"raw-dylib\", import_name_type = \"undecorated\")]\n+extern \"C\" {\n+    fn cdecl_fn_undecorated(i: i32);\n+    static mut extern_variable_undecorated: i32;\n+}\n+\n+#[link(name = \"extern\", kind = \"raw-dylib\", import_name_type = \"noprefix\")]\n+extern \"C\" {\n+    fn cdecl_fn_noprefix(i: i32);\n+    static mut extern_variable_noprefix: i32;\n+}\n+\n+#[link(name = \"extern\", kind = \"raw-dylib\", import_name_type = \"decorated\")]\n+extern \"C\" {\n+    fn cdecl_fn_decorated(i: i32);\n+    static mut extern_variable_decorated: i32;\n+}\n+\n+#[link(name = \"extern\", kind = \"raw-dylib\", import_name_type = \"undecorated\")]\n+extern \"stdcall\" {\n+    fn stdcall_fn_undecorated(i: i32);\n+}\n+\n+#[link(name = \"extern\", kind = \"raw-dylib\", import_name_type = \"noprefix\")]\n+extern \"stdcall\" {\n+    fn stdcall_fn_noprefix(i: i32);\n+}\n+\n+#[link(name = \"extern\", kind = \"raw-dylib\", import_name_type = \"decorated\")]\n+extern \"stdcall\" {\n+    fn stdcall_fn_decorated(i: i32);\n+}\n+\n+#[link(name = \"extern\", kind = \"raw-dylib\", import_name_type = \"undecorated\")]\n+extern \"fastcall\" {\n+    fn fastcall_fn_undecorated(i: i32);\n+}\n+\n+#[link(name = \"extern\", kind = \"raw-dylib\", import_name_type = \"noprefix\")]\n+extern \"fastcall\" {\n+    fn fastcall_fn_noprefix(i: i32);\n+}\n+\n+#[link(name = \"extern\", kind = \"raw-dylib\", import_name_type = \"decorated\")]\n+extern \"fastcall\" {\n+    fn fastcall_fn_decorated(i: i32);\n+}\n+\n+#[link(name = \"extern\", kind = \"raw-dylib\")]\n+extern {\n+    fn print_extern_variable_undecorated();\n+    fn print_extern_variable_noprefix();\n+    fn print_extern_variable_decorated();\n+}\n+\n+pub fn main() {\n+    unsafe {\n+        cdecl_fn_undecorated(1);\n+        cdecl_fn_noprefix(2);\n+        cdecl_fn_decorated(3);\n+\n+        stdcall_fn_undecorated(4);\n+        stdcall_fn_noprefix(5);\n+        stdcall_fn_decorated(6);\n+\n+        fastcall_fn_undecorated(7);\n+        fastcall_fn_noprefix(8);\n+        fastcall_fn_decorated(9);\n+\n+        extern_variable_undecorated = 42;\n+        print_extern_variable_undecorated();\n+        extern_variable_noprefix = 43;\n+        print_extern_variable_noprefix();\n+        extern_variable_decorated = 44;\n+        print_extern_variable_decorated();\n+    }\n+}"}, {"sha": "1102158e2494eb1885bc26b0d4f2b9ca14955236", "filename": "src/test/run-make/raw-dylib-import-name-type/extern.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fextern.c", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fextern.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fextern.c?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -0,0 +1,65 @@\n+#include <stdio.h>\n+#include <stdint.h>\n+\n+void _cdecl cdecl_fn_undecorated(int i) {\n+    printf(\"cdecl_fn_undecorated(%d)\\n\", i);\n+    fflush(stdout);\n+}\n+\n+void _cdecl cdecl_fn_noprefix(int i) {\n+    printf(\"cdecl_fn_noprefix(%d)\\n\", i);\n+    fflush(stdout);\n+}\n+\n+void _cdecl cdecl_fn_decorated(int i) {\n+    printf(\"cdecl_fn_decorated(%d)\\n\", i);\n+    fflush(stdout);\n+}\n+\n+void __stdcall stdcall_fn_undecorated(int i) {\n+    printf(\"stdcall_fn_undecorated(%d)\\n\", i);\n+    fflush(stdout);\n+}\n+\n+void __stdcall stdcall_fn_noprefix(int i) {\n+    printf(\"stdcall_fn_noprefix(%d)\\n\", i);\n+    fflush(stdout);\n+}\n+\n+void __stdcall stdcall_fn_decorated(int i) {\n+    printf(\"stdcall_fn_decorated(%d)\\n\", i);\n+    fflush(stdout);\n+}\n+\n+void __fastcall fastcall_fn_undecorated(int i) {\n+    printf(\"fastcall_fn_undecorated(%d)\\n\", i);\n+    fflush(stdout);\n+}\n+\n+void __fastcall fastcall_fn_noprefix(int i) {\n+    printf(\"fastcall_fn_noprefix(%d)\\n\", i);\n+    fflush(stdout);\n+}\n+\n+void __fastcall fastcall_fn_decorated(int i) {\n+    printf(\"fastcall_fn_decorated(%d)\\n\", i);\n+    fflush(stdout);\n+}\n+\n+int extern_variable_undecorated = 0;\n+__declspec(dllexport) void print_extern_variable_undecorated() {\n+    printf(\"extern_variable_undecorated value: %d\\n\", extern_variable_undecorated);\n+    fflush(stdout);\n+}\n+\n+int extern_variable_noprefix = 0;\n+__declspec(dllexport) void print_extern_variable_noprefix() {\n+    printf(\"extern_variable_noprefix value: %d\\n\", extern_variable_noprefix);\n+    fflush(stdout);\n+}\n+\n+int extern_variable_decorated = 0;\n+__declspec(dllexport) void print_extern_variable_decorated() {\n+    printf(\"extern_variable_decorated value: %d\\n\", extern_variable_decorated);\n+    fflush(stdout);\n+}"}, {"sha": "f06ce67e0308b3e8e0bc3cb3baeaf1ece63bf4f4", "filename": "src/test/run-make/raw-dylib-import-name-type/extern.gnu.def", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fextern.gnu.def", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fextern.gnu.def", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fextern.gnu.def?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -0,0 +1,18 @@\n+LIBRARY extern\n+EXPORTS\n+    cdecl_fn_undecorated\n+    cdecl_fn_noprefix\n+    cdecl_fn_decorated\n+    stdcall_fn_undecorated\n+    stdcall_fn_noprefix@4\n+    fastcall_fn_undecorated\n+    @fastcall_fn_decorated@4\n+\n+    ;ld doesn't handle fully-decorated stdcall, or no-prefix fastcall\n+    _stdcall_fn_decorated@4=stdcall_fn_decorated@4\n+    fastcall_fn_noprefix@4=@fastcall_fn_noprefix@4\n+\n+    ;Variables are never decorated\n+    extern_variable_undecorated\n+    extern_variable_noprefix\n+    extern_variable_decorated"}, {"sha": "9dc333707cb0a7d49581b446e2f974dbc6aaecf0", "filename": "src/test/run-make/raw-dylib-import-name-type/extern.msvc.def", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fextern.msvc.def", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fextern.msvc.def", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Fextern.msvc.def?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -0,0 +1,18 @@\n+LIBRARY extern\n+EXPORTS\n+    cdecl_fn_undecorated\n+    cdecl_fn_noprefix\n+    cdecl_fn_decorated\n+    stdcall_fn_undecorated\n+    _stdcall_fn_decorated@4\n+    fastcall_fn_undecorated\n+    @fastcall_fn_decorated@4\n+\n+    ;MSVC doesn't seem to recognize the \"no prefix\" syntax.\n+    stdcall_fn_noprefix@4=_stdcall_fn_noprefix@4\n+    fastcall_fn_noprefix@4=@fastcall_fn_noprefix@4\n+\n+    ;Variables are never decorated\n+    extern_variable_undecorated\n+    extern_variable_noprefix\n+    extern_variable_decorated"}, {"sha": "855b20a86457500364994fa17506b21a733f69bb", "filename": "src/test/run-make/raw-dylib-import-name-type/output.txt", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Foutput.txt", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Foutput.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-import-name-type%2Foutput.txt?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -0,0 +1,12 @@\n+cdecl_fn_undecorated(1)\n+cdecl_fn_noprefix(2)\n+cdecl_fn_decorated(3)\n+stdcall_fn_undecorated(4)\n+stdcall_fn_noprefix(5)\n+stdcall_fn_decorated(6)\n+fastcall_fn_undecorated(7)\n+fastcall_fn_noprefix(8)\n+fastcall_fn_decorated(9)\n+extern_variable_undecorated value: 42\n+extern_variable_noprefix value: 43\n+extern_variable_decorated value: 44"}, {"sha": "33655cf8bdc7ebc64f377702d165c9bba5d55dc1", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib-import-name-type.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-import-name-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-import-name-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-import-name-type.rs?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -0,0 +1,8 @@\n+// only-windows\n+// only-x86\n+#[link(name = \"foo\", kind = \"raw-dylib\", import_name_type = \"decorated\")]\n+//~^ ERROR link kind `raw-dylib` is unstable\n+//~| ERROR import name type is unstable\n+extern \"C\" {}\n+\n+fn main() {}"}, {"sha": "be82dd119264f0e8e6c24d859baf5376b0e47bd8", "filename": "src/test/ui/feature-gates/feature-gate-raw-dylib-import-name-type.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-import-name-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-import-name-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-raw-dylib-import-name-type.stderr?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: link kind `raw-dylib` is unstable\n+  --> $DIR/feature-gate-raw-dylib-import-name-type.rs:3:29\n+   |\n+LL | #[link(name = \"foo\", kind = \"raw-dylib\", import_name_type = \"decorated\")]\n+   |                             ^^^^^^^^^^^\n+   |\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n+   = help: add `#![feature(raw_dylib)]` to the crate attributes to enable\n+\n+error[E0658]: import name type is unstable\n+  --> $DIR/feature-gate-raw-dylib-import-name-type.rs:3:61\n+   |\n+LL | #[link(name = \"foo\", kind = \"raw-dylib\", import_name_type = \"decorated\")]\n+   |                                                             ^^^^^^^^^^^\n+   |\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n+   = help: add `#![feature(raw_dylib)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "903141e439db3dbc9be4f31e86914556db2568da", "filename": "src/test/ui/linkage-attr/link-attr-validation-early.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-early.stderr?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -1,4 +1,4 @@\n-error: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ wasm_import_module = \"...\")]`\n+error: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ wasm_import_module = \"...\", /*opt*/ import_name_type = \"decorated|noprefix|undecorated\")]`\n   --> $DIR/link-attr-validation-early.rs:2:1\n    |\n LL | #[link]\n@@ -8,7 +8,7 @@ LL | #[link]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n \n-error: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ wasm_import_module = \"...\")]`\n+error: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ wasm_import_module = \"...\", /*opt*/ import_name_type = \"decorated|noprefix|undecorated\")]`\n   --> $DIR/link-attr-validation-early.rs:4:1\n    |\n LL | #[link = \"foo\"]"}, {"sha": "dd0f1dba2ecf7c0df2b51baea06fddfc09bef970", "filename": "src/test/ui/linkage-attr/link-attr-validation-late.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-late.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-late.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flink-attr-validation-late.stderr?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -1,10 +1,10 @@\n-error: unexpected `#[link]` argument, expected one of: name, kind, modifiers, cfg, wasm_import_module\n+error: unexpected `#[link]` argument, expected one of: name, kind, modifiers, cfg, wasm_import_module, import_name_type\n   --> $DIR/link-attr-validation-late.rs:5:22\n    |\n LL | #[link(name = \"...\", \"literal\")]\n    |                      ^^^^^^^^^\n \n-error: unexpected `#[link]` argument, expected one of: name, kind, modifiers, cfg, wasm_import_module\n+error: unexpected `#[link]` argument, expected one of: name, kind, modifiers, cfg, wasm_import_module, import_name_type\n   --> $DIR/link-attr-validation-late.rs:6:22\n    |\n LL | #[link(name = \"...\", unknown)]"}, {"sha": "8c2625bdf0d2cb963ec29eabcf55680ec10524c1", "filename": "src/test/ui/malformed/malformed-regressions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.stderr?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -26,7 +26,7 @@ LL | #[inline = \"\"]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n \n-error: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ wasm_import_module = \"...\")]`\n+error: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ wasm_import_module = \"...\", /*opt*/ import_name_type = \"decorated|noprefix|undecorated\")]`\n   --> $DIR/malformed-regressions.rs:7:1\n    |\n LL | #[link]\n@@ -35,7 +35,7 @@ LL | #[link]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n \n-error: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ wasm_import_module = \"...\")]`\n+error: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\", /*opt*/ wasm_import_module = \"...\", /*opt*/ import_name_type = \"decorated|noprefix|undecorated\")]`\n   --> $DIR/malformed-regressions.rs:9:1\n    |\n LL | #[link = \"\"]"}, {"sha": "9e739c02dc8e7c64139120bbd35d014e72eea853", "filename": "src/test/ui/rfc-2627-raw-dylib/import-name-type-invalid-format.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-invalid-format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-invalid-format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-invalid-format.rs?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -0,0 +1,10 @@\n+// only-windows\n+// only-x86\n+#![feature(raw_dylib)]\n+//~^ WARN the feature `raw_dylib` is incomplete\n+\n+#[link(name = \"foo\", kind = \"raw-dylib\", import_name_type = 6)]\n+//~^ ERROR import name type must be of the form `import_name_type = \"string\"`\n+extern \"C\" { }\n+\n+fn main() {}"}, {"sha": "ee10b0114a47822b18cbc2768e0e9454c90d8d74", "filename": "src/test/ui/rfc-2627-raw-dylib/import-name-type-invalid-format.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-invalid-format.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-invalid-format.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-invalid-format.stderr?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/import-name-type-invalid-format.rs:3:12\n+   |\n+LL | #![feature(raw_dylib)]\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n+\n+error: import name type must be of the form `import_name_type = \"string\"`\n+  --> $DIR/import-name-type-invalid-format.rs:6:42\n+   |\n+LL | #[link(name = \"foo\", kind = \"raw-dylib\", import_name_type = 6)]\n+   |                                          ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "c404dbae46866b8feab0d279a665efdedadae98b", "filename": "src/test/ui/rfc-2627-raw-dylib/import-name-type-multiple.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-multiple.rs?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -0,0 +1,11 @@\n+// ignore-tidy-linelength\n+// only-windows\n+// only-x86\n+#![feature(raw_dylib)]\n+//~^ WARN the feature `raw_dylib` is incomplete\n+\n+#[link(name = \"foo\", kind = \"raw-dylib\", import_name_type = \"decorated\", import_name_type = \"decorated\")]\n+//~^ ERROR multiple `import_name_type` arguments in a single `#[link]` attribute\n+extern \"C\" { }\n+\n+fn main() {}"}, {"sha": "936c8aa7359679ce3852ed5439f54734b7c5f444", "filename": "src/test/ui/rfc-2627-raw-dylib/import-name-type-multiple.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-multiple.stderr?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/import-name-type-multiple.rs:4:12\n+   |\n+LL | #![feature(raw_dylib)]\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n+\n+error: multiple `import_name_type` arguments in a single `#[link]` attribute\n+  --> $DIR/import-name-type-multiple.rs:7:74\n+   |\n+LL | #[link(name = \"foo\", kind = \"raw-dylib\", import_name_type = \"decorated\", import_name_type = \"decorated\")]\n+   |                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "350b0294641ab85c52f83c94f73c408528902da2", "filename": "src/test/ui/rfc-2627-raw-dylib/import-name-type-unknown-value.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unknown-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unknown-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unknown-value.rs?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -0,0 +1,10 @@\n+// only-windows\n+// only-x86\n+#![feature(raw_dylib)]\n+//~^ WARN the feature `raw_dylib` is incomplete\n+\n+#[link(name = \"foo\", kind = \"raw-dylib\", import_name_type = \"unknown\")]\n+//~^ ERROR unknown import name type `unknown`, expected one of: decorated, noprefix, undecorated\n+extern \"C\" { }\n+\n+fn main() {}"}, {"sha": "b6871a0d317025bd2e82e04bbfb7f38761458872", "filename": "src/test/ui/rfc-2627-raw-dylib/import-name-type-unknown-value.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unknown-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unknown-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unknown-value.stderr?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/import-name-type-unknown-value.rs:3:12\n+   |\n+LL | #![feature(raw_dylib)]\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n+\n+error: unknown import name type `unknown`, expected one of: decorated, noprefix, undecorated\n+  --> $DIR/import-name-type-unknown-value.rs:6:42\n+   |\n+LL | #[link(name = \"foo\", kind = \"raw-dylib\", import_name_type = \"unknown\")]\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "b467917bacc3a13eeae618dd4fffd9ba440cc081", "filename": "src/test/ui/rfc-2627-raw-dylib/import-name-type-unsupported-link-kind.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unsupported-link-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unsupported-link-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unsupported-link-kind.rs?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -0,0 +1,18 @@\n+// only-windows\n+// only-x86\n+#![feature(raw_dylib)]\n+//~^ WARN the feature `raw_dylib` is incomplete\n+\n+#[link(name = \"foo\", import_name_type = \"decorated\")]\n+//~^ ERROR import name type can only be used with link kind `raw-dylib`\n+extern \"C\" { }\n+\n+#[link(name = \"bar\", kind = \"static\", import_name_type = \"decorated\")]\n+//~^ ERROR import name type can only be used with link kind `raw-dylib`\n+extern \"C\" { }\n+\n+// Specifying `import_name_type` before `kind` shouldn't raise an error.\n+#[link(name = \"bar\", import_name_type = \"decorated\", kind = \"raw-dylib\")]\n+extern \"C\" { }\n+\n+fn main() {}"}, {"sha": "c35333fb88df89df9b196cba8daba516c9c5ace1", "filename": "src/test/ui/rfc-2627-raw-dylib/import-name-type-unsupported-link-kind.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unsupported-link-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unsupported-link-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-unsupported-link-kind.stderr?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/import-name-type-unsupported-link-kind.rs:3:12\n+   |\n+LL | #![feature(raw_dylib)]\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n+\n+error: import name type can only be used with link kind `raw-dylib`\n+  --> $DIR/import-name-type-unsupported-link-kind.rs:6:22\n+   |\n+LL | #[link(name = \"foo\", import_name_type = \"decorated\")]\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: import name type can only be used with link kind `raw-dylib`\n+  --> $DIR/import-name-type-unsupported-link-kind.rs:10:39\n+   |\n+LL | #[link(name = \"bar\", kind = \"static\", import_name_type = \"decorated\")]\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+"}, {"sha": "4e6de7d6ac37c1b9f17258bbeeb8908e6a170a61", "filename": "src/test/ui/rfc-2627-raw-dylib/import-name-type-x86-only.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-x86-only.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-x86-only.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-x86-only.rs?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -0,0 +1,9 @@\n+// only-windows\n+// ignore-x86\n+#![feature(raw_dylib)]\n+//~^ WARN the feature `raw_dylib` is incomplete\n+#[link(name = \"foo\", kind = \"raw-dylib\", import_name_type = \"decorated\")]\n+//~^ ERROR import name type is only supported on x86\n+extern \"C\" { }\n+\n+fn main() {}"}, {"sha": "d8a585145a73ebaf5a2e00c0e85cef00558d29fc", "filename": "src/test/ui/rfc-2627-raw-dylib/import-name-type-x86-only.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-x86-only.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc49c3e582ae2c597954fe877774d8bc32427dc3/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-x86-only.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fimport-name-type-x86-only.stderr?ref=cc49c3e582ae2c597954fe877774d8bc32427dc3", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/import-name-type-x86-only.rs:3:12\n+   |\n+LL | #![feature(raw_dylib)]\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n+\n+error: import name type is only supported on x86\n+  --> $DIR/import-name-type-x86-only.rs:5:42\n+   |\n+LL | #[link(name = \"foo\", kind = \"raw-dylib\", import_name_type = \"decorated\")]\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}]}