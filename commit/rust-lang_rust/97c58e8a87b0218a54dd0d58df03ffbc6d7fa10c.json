{"sha": "97c58e8a87b0218a54dd0d58df03ffbc6d7fa10c", "node_id": "C_kwDOAAsO6NoAKDk3YzU4ZThhODdiMDIxOGE1NGRkMGQ1OGRmMDNmZmJjNmQ3ZmExMGM", "commit": {"author": {"name": "Noa", "email": "coolreader18@gmail.com", "date": "2022-03-27T23:38:01Z"}, "committer": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2022-03-28T16:54:57Z"}, "message": "Touch up ExitCode docs", "tree": {"sha": "6788bc543e8f95540545003bb452af95f256b663", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6788bc543e8f95540545003bb452af95f256b663"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97c58e8a87b0218a54dd0d58df03ffbc6d7fa10c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97c58e8a87b0218a54dd0d58df03ffbc6d7fa10c", "html_url": "https://github.com/rust-lang/rust/commit/97c58e8a87b0218a54dd0d58df03ffbc6d7fa10c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97c58e8a87b0218a54dd0d58df03ffbc6d7fa10c/comments", "author": {"login": "coolreader18", "id": 33094578, "node_id": "MDQ6VXNlcjMzMDk0NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/33094578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/coolreader18", "html_url": "https://github.com/coolreader18", "followers_url": "https://api.github.com/users/coolreader18/followers", "following_url": "https://api.github.com/users/coolreader18/following{/other_user}", "gists_url": "https://api.github.com/users/coolreader18/gists{/gist_id}", "starred_url": "https://api.github.com/users/coolreader18/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/coolreader18/subscriptions", "organizations_url": "https://api.github.com/users/coolreader18/orgs", "repos_url": "https://api.github.com/users/coolreader18/repos", "events_url": "https://api.github.com/users/coolreader18/events{/privacy}", "received_events_url": "https://api.github.com/users/coolreader18/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bdad89f950d374c128edffacd9872f7dbc72f78", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bdad89f950d374c128edffacd9872f7dbc72f78", "html_url": "https://github.com/rust-lang/rust/commit/7bdad89f950d374c128edffacd9872f7dbc72f78"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "aea67873ed05f4d36ccfb3df5c537a1b5d4ee5d7", "filename": "library/std/src/process.rs", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/97c58e8a87b0218a54dd0d58df03ffbc6d7fa10c/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c58e8a87b0218a54dd0d58df03ffbc6d7fa10c/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=97c58e8a87b0218a54dd0d58df03ffbc6d7fa10c", "patch": "@@ -1648,8 +1648,8 @@ impl crate::error::Error for ExitStatusError {}\n /// This type represents the status code the current process can return\n /// to its parent under normal termination.\n ///\n-/// ExitCode is intended to be consumed only by the standard library (via\n-/// `Termination::report()`), and intentionally does not provide accessors like\n+/// `ExitCode` is intended to be consumed only by the standard library (via\n+/// [`Termination::report()`]), and intentionally does not provide accessors like\n /// `PartialEq`, `Eq`, or `Hash`. Instead the standard library provides the\n /// canonical `SUCCESS` and `FAILURE` exit codes as well as `From<u8> for\n /// ExitCode` for constructing other arbitrary exit codes.\n@@ -1673,21 +1673,39 @@ impl crate::error::Error for ExitStatusError {}\n /// compatibility differences and their expected usage; it is not generally\n /// possible to exactly reproduce an ExitStatus from a child for the current\n /// process after the fact.\n+///\n+/// # Examples\n+///\n+/// `ExitCode` can be returned from the `main` function of a crate, as it implements\n+/// [`Termination`]:\n+///\n+/// ```\n+/// use std::process::ExitCode;\n+/// # fn check_foo() -> bool { true }\n+///\n+/// fn main() -> ExitCode {\n+///     if !check_foo() {\n+///         return ExitCode::from(42);\n+///     }\n+///\n+///     ExitCode::SUCCESS\n+/// }\n+/// ```\n #[derive(Clone, Copy, Debug)]\n #[stable(feature = \"process_exitcode\", since = \"1.60.0\")]\n pub struct ExitCode(imp::ExitCode);\n \n #[stable(feature = \"process_exitcode\", since = \"1.60.0\")]\n impl ExitCode {\n-    /// The canonical ExitCode for successful termination on this platform.\n+    /// The canonical `ExitCode` for successful termination on this platform.\n     ///\n     /// Note that a `()`-returning `main` implicitly results in a successful\n     /// termination, so there's no need to return this from `main` unless\n     /// you're also returning other possible codes.\n     #[stable(feature = \"process_exitcode\", since = \"1.60.0\")]\n     pub const SUCCESS: ExitCode = ExitCode(imp::ExitCode::SUCCESS);\n \n-    /// The canonical ExitCode for unsuccessful termination on this platform.\n+    /// The canonical `ExitCode` for unsuccessful termination on this platform.\n     ///\n     /// If you're only returning this and `SUCCESS` from `main`, consider\n     /// instead returning `Err(_)` and `Ok(())` respectively, which will\n@@ -1697,27 +1715,28 @@ impl ExitCode {\n }\n \n impl ExitCode {\n-    // This should not be stabilized when stabilizing ExitCode, we don't know that i32 will serve\n+    // This is private/perma-unstable because ExitCode is opaque; we don't know that i32 will serve\n     // all usecases, for example windows seems to use u32, unix uses the 8-15th bits of an i32, we\n     // likely want to isolate users anything that could restrict the platform specific\n     // representation of an ExitCode\n     //\n     // More info: https://internals.rust-lang.org/t/mini-pre-rfc-redesigning-process-exitstatus/5426\n-    /// Convert an ExitCode into an i32\n+    /// Convert an `ExitCode` into an i32\n     #[unstable(\n         feature = \"process_exitcode_internals\",\n         reason = \"exposed only for libstd\",\n         issue = \"none\"\n     )]\n     #[inline]\n+    #[doc(hidden)]\n     pub fn to_i32(self) -> i32 {\n         self.0.as_i32()\n     }\n }\n \n #[stable(feature = \"process_exitcode\", since = \"1.60.0\")]\n impl From<u8> for ExitCode {\n-    /// Construct an exit code from an arbitrary u8 value.\n+    /// Construct an `ExitCode` from an arbitrary u8 value.\n     fn from(code: u8) -> Self {\n         ExitCode(imp::ExitCode::from(code))\n     }"}]}