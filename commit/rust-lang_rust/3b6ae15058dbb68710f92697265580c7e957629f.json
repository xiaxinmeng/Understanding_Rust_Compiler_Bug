{"sha": "3b6ae15058dbb68710f92697265580c7e957629f", "node_id": "C_kwDOAAsO6NoAKDNiNmFlMTUwNThkYmI2ODcxMGY5MjY5NzI2NTU4MGM3ZTk1NzYyOWY", "commit": {"author": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-05-19T12:37:29Z"}, "committer": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-05-19T12:37:29Z"}, "message": "std: fix deadlock in `Parker`", "tree": {"sha": "d6a507152d57078fe5faba9c8d40177dcc8467d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6a507152d57078fe5faba9c8d40177dcc8467d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b6ae15058dbb68710f92697265580c7e957629f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVuz3PwcqDyifNyYbcE4BSbAZSzwFAmKGOgkACgkQcE4BSbAZ\nSzz3DQ//Slzyx5pa8+J24PEu+QW6NlIrydzJJqnY2eg9ZMwr6B/ipN9YQTCGOwMO\nxwFadj+QdTsvIuyj53n6HNbIDajKJsF3MOERNz/xqIeZhPmU0pnc7SWB/UbN6LFD\nDnORytjc2mzaV6r4BUAr/mzYns0gaf1etA6AvxXvzsvXjBZ3SEMsbcVRQD4cQjpz\nfddAjgGVhf383l0xp1YRjfH6+qN6FEQ7Qaa2YPfSDcgPV9DuFI4cUsqnvbTkbLdn\n2PEK5O7MRQ4zRlNKOVp8w4bEJXUzBZltGKGSu2y4LotfRGcZ9n6ltYmEAxu585OH\n1jaFl3n+xIZ7NzUBfc11+YYLpfogmno3gLRu3pKmtXizFm679EyMP6PSWT8PQfcQ\nJL/ShRYJUjGdjAvSlLO1x8VeZ1iOWnF+mpShGKDO7cg61GgxVke1XT3nOIPFdSf1\nPTQn1V4vhdmU5Bbzp3/AL07wnvRPgLxHoWy6igAy1GqAg24uVqNjYb81WJ3R1U+b\nqL3nv8Y5wJH7iQUC1V/t3DjvnKiJz+OD/oqSH2bS2w3oHqIiabJySIDTuRBZNuuW\nHCxrEpCyk1r3o9xdpxGARM+3X35Tqvzol8/5CsEEwpGkRcNW8bpliaxHySmhntGQ\nmcmG4BTEAnVEN8xy1SQhJnqrBMieNJDi7mn1I/+UOsVnhrg3Fvw=\n=5rtq\n-----END PGP SIGNATURE-----", "payload": "tree d6a507152d57078fe5faba9c8d40177dcc8467d2\nparent fd76552a4b41d132701dc0857a9fee9a3850088e\nauthor joboet <jonasboettiger@icloud.com> 1652963849 +0200\ncommitter joboet <jonasboettiger@icloud.com> 1652963849 +0200\n\nstd: fix deadlock in `Parker`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b6ae15058dbb68710f92697265580c7e957629f", "html_url": "https://github.com/rust-lang/rust/commit/3b6ae15058dbb68710f92697265580c7e957629f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b6ae15058dbb68710f92697265580c7e957629f/comments", "author": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd76552a4b41d132701dc0857a9fee9a3850088e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd76552a4b41d132701dc0857a9fee9a3850088e", "html_url": "https://github.com/rust-lang/rust/commit/fd76552a4b41d132701dc0857a9fee9a3850088e"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "e432edd207754e5151252c136a0946d0821d1a6a", "filename": "library/std/src/sys/itron/wait_flag.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3b6ae15058dbb68710f92697265580c7e957629f/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fwait_flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6ae15058dbb68710f92697265580c7e957629f/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fwait_flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fwait_flag.rs?ref=3b6ae15058dbb68710f92697265580c7e957629f", "patch": "@@ -42,13 +42,18 @@ impl WaitFlag {\n     }\n \n     /// Wait for the wait flag to be raised or the timeout to occur.\n-    pub fn wait_timeout(&self, dur: Duration) {\n+    ///\n+    /// Returns whether the flag was raised (`true`) or the operation timed out (`false`).\n+    pub fn wait_timeout(&self, dur: Duration) -> bool {\n         let mut token = MaybeUninit::uninit();\n-        let er = with_tmos(dur, |tmout| unsafe {\n+        let res = with_tmos(dur, |tmout| unsafe {\n             abi::twai_flg(self.flag, RAISED, abi::TWF_ORW, token.as_mut_ptr(), tmout)\n         });\n-        if er != abi::E_OK && er != abi::E_TMOUT {\n-            fail(er, &\"twai_flg\");\n+\n+        match res {\n+            abi::E_OK => true,\n+            abi::E_TMOUT => false,\n+            error => fail(error, &\"twai_flg\"),\n         }\n     }\n "}, {"sha": "f9581ff5d57746f85897f3d07c629e8ede6b1526", "filename": "library/std/src/sys_common/thread_parker/wait_flag.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b6ae15058dbb68710f92697265580c7e957629f/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fwait_flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6ae15058dbb68710f92697265580c7e957629f/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fwait_flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parker%2Fwait_flag.rs?ref=3b6ae15058dbb68710f92697265580c7e957629f", "patch": "@@ -2,7 +2,7 @@\n //!\n //! Some operating systems provide low-level parking primitives like wait counts,\n //! event flags or semaphores which are not susceptible to race conditions (meaning\n-//! the wakeup can occure before the wait operation). To implement the `std` thread\n+//! the wakeup can occur before the wait operation). To implement the `std` thread\n //! parker on top of these primitives, we only have to ensure that parking is fast\n //! when the thread token is available, the atomic ordering guarantees are maintained\n //! and spurious wakeups are minimized.\n@@ -73,10 +73,10 @@ impl Parker {\n             _ => panic!(\"inconsistent park state\"),\n         }\n \n-        self.wait_flag.wait_timeout(dur);\n+        let wakeup = self.wait_flag.wait_timeout(dur);\n         let state = self.state.swap(EMPTY, SeqCst);\n-        if state == NOTIFIED {\n-            // The token was made available after the timeout occurred, but before\n+        if state == NOTIFIED && !wakeup {\n+            // The token was made available after the wait timed out, but before\n             // we reset the state, so we need to reset the wait flag to avoid\n             // spurious wakeups. This wait has no timeout, but we know it will\n             // return quickly, as the unparking thread will definitely raise the"}]}