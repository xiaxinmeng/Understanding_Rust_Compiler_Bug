{"sha": "05e734b5552ed1a04ab799f06a8dc7db2db73fe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZTczNGI1NTUyZWQxYTA0YWI3OTlmMDZhOGRjN2RiMmRiNzNmZTc=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2016-09-13T09:35:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-13T09:35:54Z"}, "message": "Merge pull request #1223 from oli-obk/use_your_token_to_figure_out_if_you_are_in_reality\n\nLet the submodule `#[allow]` in `module_inception`", "tree": {"sha": "bd92a6584683835dd31b6a4697d1ffb669775e8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd92a6584683835dd31b6a4697d1ffb669775e8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05e734b5552ed1a04ab799f06a8dc7db2db73fe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05e734b5552ed1a04ab799f06a8dc7db2db73fe7", "html_url": "https://github.com/rust-lang/rust/commit/05e734b5552ed1a04ab799f06a8dc7db2db73fe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05e734b5552ed1a04ab799f06a8dc7db2db73fe7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb49e4e21014c18cde6d90aaa21c936150b90a54", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb49e4e21014c18cde6d90aaa21c936150b90a54", "html_url": "https://github.com/rust-lang/rust/commit/cb49e4e21014c18cde6d90aaa21c936150b90a54"}, {"sha": "40ce3a8f1c62ec403ac9790c0d45f964efe2c504", "url": "https://api.github.com/repos/rust-lang/rust/commits/40ce3a8f1c62ec403ac9790c0d45f964efe2c504", "html_url": "https://github.com/rust-lang/rust/commit/40ce3a8f1c62ec403ac9790c0d45f964efe2c504"}], "stats": {"total": 130, "additions": 65, "deletions": 65}, "files": [{"sha": "69ec9911d99a20fccb5cd899ffaad829c9456ba8", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 43, "deletions": 12, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/05e734b5552ed1a04ab799f06a8dc7db2db73fe7/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e734b5552ed1a04ab799f06a8dc7db2db73fe7/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=05e734b5552ed1a04ab799f06a8dc7db2db73fe7", "patch": "@@ -47,8 +47,32 @@ declare_lint! {\n     \"type names prefixed/postfixed with their containing module's name\"\n }\n \n+/// **What it does:** Checks for modules that have the same name as their parent module\n+///\n+/// **Why is this bad?** A typical beginner mistake is to have `mod foo;` and again `mod foo { .. }` in `foo.rs`.\n+///                      The expectation is that items inside the inner `mod foo { .. }` are then available\n+///                      through `foo::x`, but they are only available through `foo::foo::x`.\n+///                      If this is done on purpose, it would be better to choose a more representative module name.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// // lib.rs\n+/// mod foo;\n+/// // foo.rs\n+/// mod foo {\n+///     ...\n+/// }\n+/// ```\n+declare_lint! {\n+    pub MODULE_INCEPTION,\n+    Warn,\n+    \"modules that have the same name as their parent module\"\n+}\n+\n pub struct EnumVariantNames {\n-    modules: Vec<String>,\n+    modules: Vec<(InternedString, String)>,\n     threshold: u64,\n }\n \n@@ -60,7 +84,7 @@ impl EnumVariantNames {\n \n impl LintPass for EnumVariantNames {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(ENUM_VARIANT_NAMES, STUTTER)\n+        lint_array!(ENUM_VARIANT_NAMES, STUTTER, MODULE_INCEPTION)\n     }\n }\n \n@@ -170,25 +194,32 @@ impl EarlyLintPass for EnumVariantNames {\n         let item_name = item.ident.name.as_str();\n         let item_name_chars = item_name.chars().count();\n         let item_camel = to_camel_case(&item_name);\n-        if item.vis == Visibility::Public && !in_macro(cx, item.span) {\n-            if let Some(mod_camel) = self.modules.last() {\n+        if !in_macro(cx, item.span) {\n+            if let Some(&(ref mod_name, ref mod_camel)) = self.modules.last() {\n                 // constants don't have surrounding modules\n                 if !mod_camel.is_empty() {\n-                    let matching = partial_match(mod_camel, &item_camel);\n-                    let rmatching = partial_rmatch(mod_camel, &item_camel);\n-                    let nchars = mod_camel.chars().count();\n-                    if matching == nchars {\n-                        span_lint(cx, STUTTER, item.span, &format!(\"Item name ({}) starts with its containing module's name ({})\", item_camel, mod_camel));\n+                    if mod_name == &item_name {\n+                        if let ItemKind::Mod(..) = item.node {\n+                            span_lint(cx, MODULE_INCEPTION, item.span, \"module has the same name as its containing module\");\n+                        }\n                     }\n-                    if rmatching == nchars {\n-                        span_lint(cx, STUTTER, item.span, &format!(\"Item name ({}) ends with its containing module's name ({})\", item_camel, mod_camel));\n+                    if item.vis == Visibility::Public {\n+                        let matching = partial_match(mod_camel, &item_camel);\n+                        let rmatching = partial_rmatch(mod_camel, &item_camel);\n+                        let nchars = mod_camel.chars().count();\n+                        if matching == nchars {\n+                            span_lint(cx, STUTTER, item.span, \"item name starts with its containing module's name\");\n+                        }\n+                        if rmatching == nchars {\n+                            span_lint(cx, STUTTER, item.span, \"item name ends with its containing module's name\");\n+                        }\n                     }\n                 }\n             }\n         }\n         if let ItemKind::Enum(ref def, _) = item.node {\n             check_variant(cx, self.threshold, def, &item_name, item_name_chars, item.span);\n         }\n-        self.modules.push(item_camel);\n+        self.modules.push((item_name, item_camel));\n     }\n }"}, {"sha": "46a2a737d7c1227a1114bbb1180b7fc3c1ee2090", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05e734b5552ed1a04ab799f06a8dc7db2db73fe7/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e734b5552ed1a04ab799f06a8dc7db2db73fe7/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=05e734b5552ed1a04ab799f06a8dc7db2db73fe7", "patch": "@@ -96,7 +96,6 @@ pub mod minmax;\n pub mod misc;\n pub mod misc_early;\n pub mod missing_doc;\n-pub mod module_inception;\n pub mod mut_mut;\n pub mod mut_reference;\n pub mod mutex_atomic;\n@@ -175,7 +174,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box utils::internal_lints::LintWithoutLintPass::default());\n     reg.register_late_lint_pass(box types::TypePass);\n     reg.register_late_lint_pass(box booleans::NonminimalBool);\n-    reg.register_early_lint_pass(box module_inception::Pass);\n     reg.register_late_lint_pass(box eq_op::EqOp);\n     reg.register_early_lint_pass(box enum_variants::EnumVariantNames::new(conf.enum_variant_name_threshold));\n     reg.register_late_lint_pass(box enum_glob_use::EnumGlobUse);\n@@ -329,6 +327,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         entry::MAP_ENTRY,\n         enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,\n         enum_variants::ENUM_VARIANT_NAMES,\n+        enum_variants::MODULE_INCEPTION,\n         eq_op::EQ_OP,\n         escape::BOXED_LOCAL,\n         eta_reduction::REDUNDANT_CLOSURE,\n@@ -391,7 +390,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         misc_early::REDUNDANT_CLOSURE_CALL,\n         misc_early::UNNEEDED_FIELD_PATTERN,\n         misc_early::ZERO_PREFIXED_LITERAL,\n-        module_inception::MODULE_INCEPTION,\n         mut_reference::UNNECESSARY_MUT_PASSED,\n         mutex_atomic::MUTEX_ATOMIC,\n         needless_bool::BOOL_COMPARISON,"}, {"sha": "10c8154d100e777d232ccb7139b2695d6c9fd757", "filename": "clippy_lints/src/module_inception.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/cb49e4e21014c18cde6d90aaa21c936150b90a54/clippy_lints%2Fsrc%2Fmodule_inception.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb49e4e21014c18cde6d90aaa21c936150b90a54/clippy_lints%2Fsrc%2Fmodule_inception.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodule_inception.rs?ref=cb49e4e21014c18cde6d90aaa21c936150b90a54", "patch": "@@ -1,50 +0,0 @@\n-use rustc::lint::*;\n-use syntax::ast::*;\n-use utils::span_lint;\n-\n-/// **What it does:** Checks for modules that have the same name as their parent module\n-///\n-/// **Why is this bad?** A typical beginner mistake is to have `mod foo;` and again `mod foo { .. }` in `foo.rs`.\n-///                      The expectation is that items inside the inner `mod foo { .. }` are then available\n-///                      through `foo::x`, but they are only available through `foo::foo::x`.\n-///                      If this is done on purpose, it would be better to choose a more representative module name.\n-///\n-/// **Known problems:** None.\n-///\n-/// **Example:**\n-/// ```rust\n-/// // lib.rs\n-/// mod foo;\n-/// // foo.rs\n-/// mod foo {\n-///     ...\n-/// }\n-/// ```\n-declare_lint! {\n-    pub MODULE_INCEPTION,\n-    Warn,\n-    \"modules that have the same name as their parent module\"\n-}\n-\n-pub struct Pass;\n-\n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array![MODULE_INCEPTION]\n-    }\n-}\n-\n-impl EarlyLintPass for Pass {\n-    fn check_item(&mut self, cx: &EarlyContext, item: &Item) {\n-        if let ItemKind::Mod(ref module) = item.node {\n-            for sub_item in &module.items {\n-                if let ItemKind::Mod(_) = sub_item.node {\n-                    if item.ident == sub_item.ident {\n-                        span_lint(cx, MODULE_INCEPTION, sub_item.span,\n-                                  \"module has the same name as its containing module\");\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}"}, {"sha": "861ed504c86ead1d1e22ac6dcba43964df7154d0", "filename": "tests/compile-fail/module_inception.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05e734b5552ed1a04ab799f06a8dc7db2db73fe7/tests%2Fcompile-fail%2Fmodule_inception.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e734b5552ed1a04ab799f06a8dc7db2db73fe7/tests%2Fcompile-fail%2Fmodule_inception.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmodule_inception.rs?ref=05e734b5552ed1a04ab799f06a8dc7db2db73fe7", "patch": "@@ -14,4 +14,11 @@ mod foo {\n     }\n }\n \n+// No warning. See <https://github.com/Manishearth/rust-clippy/issues/1220>.\n+mod bar {\n+    #[allow(module_inception)]\n+    mod bar {\n+    }\n+}\n+\n fn main() {}"}, {"sha": "0c99859c10d8c972b96250612eec2ea7ca25b1ad", "filename": "tests/compile-fail/stutter.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05e734b5552ed1a04ab799f06a8dc7db2db73fe7/tests%2Fcompile-fail%2Fstutter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e734b5552ed1a04ab799f06a8dc7db2db73fe7/tests%2Fcompile-fail%2Fstutter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstutter.rs?ref=05e734b5552ed1a04ab799f06a8dc7db2db73fe7", "patch": "@@ -0,0 +1,14 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(stutter)]\n+#![allow(dead_code)]\n+\n+mod foo {\n+    pub fn foo() {}\n+    pub fn foo_bar() {} //~ ERROR: item name starts with its containing module's name\n+    pub fn bar_foo() {} //~ ERROR: item name ends with its containing module's name\n+    pub struct FooCake {} //~ ERROR: item name starts with its containing module's name\n+    pub enum CakeFoo {} //~ ERROR: item name ends with its containing module's name\n+}\n+\n+fn main() {}"}]}