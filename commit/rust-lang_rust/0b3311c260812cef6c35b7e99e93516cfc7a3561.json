{"sha": "0b3311c260812cef6c35b7e99e93516cfc7a3561", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMzMxMWMyNjA4MTJjZWY2YzM1YjdlOTllOTM1MTZjZmM3YTM1NjE=", "commit": {"author": {"name": "Carl-Anton Ingmarsson", "email": "ca.ingmarsson@gmail.com", "date": "2014-01-09T09:35:36Z"}, "committer": {"name": "Carl-Anton Ingmarsson", "email": "ca.ingmarsson@gmail.com", "date": "2014-01-10T19:14:05Z"}, "message": "std::io: Optimize u64_from_be_bytes()\n\nInstead of reading a byte at a time in a loop we copy the relevant bytes into\na temporary vector of size eight. We can then read the value from the temporary\nvector using a single u64 read. LLVM seems to be able to optimize this\nalmost scarily good.", "tree": {"sha": "0a9176a9c9d93bd4b7bc273b1dc7c339b5c613e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a9176a9c9d93bd4b7bc273b1dc7c339b5c613e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b3311c260812cef6c35b7e99e93516cfc7a3561", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b3311c260812cef6c35b7e99e93516cfc7a3561", "html_url": "https://github.com/rust-lang/rust/commit/0b3311c260812cef6c35b7e99e93516cfc7a3561", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b3311c260812cef6c35b7e99e93516cfc7a3561/comments", "author": {"login": "c-a", "id": 804040, "node_id": "MDQ6VXNlcjgwNDA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/804040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c-a", "html_url": "https://github.com/c-a", "followers_url": "https://api.github.com/users/c-a/followers", "following_url": "https://api.github.com/users/c-a/following{/other_user}", "gists_url": "https://api.github.com/users/c-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/c-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c-a/subscriptions", "organizations_url": "https://api.github.com/users/c-a/orgs", "repos_url": "https://api.github.com/users/c-a/repos", "events_url": "https://api.github.com/users/c-a/events{/privacy}", "received_events_url": "https://api.github.com/users/c-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c-a", "id": 804040, "node_id": "MDQ6VXNlcjgwNDA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/804040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c-a", "html_url": "https://github.com/c-a", "followers_url": "https://api.github.com/users/c-a/followers", "following_url": "https://api.github.com/users/c-a/following{/other_user}", "gists_url": "https://api.github.com/users/c-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/c-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c-a/subscriptions", "organizations_url": "https://api.github.com/users/c-a/orgs", "repos_url": "https://api.github.com/users/c-a/repos", "events_url": "https://api.github.com/users/c-a/events{/privacy}", "received_events_url": "https://api.github.com/users/c-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "326e63187ff4490c30ed603158e00c0be58dd162", "url": "https://api.github.com/repos/rust-lang/rust/commits/326e63187ff4490c30ed603158e00c0be58dd162", "html_url": "https://github.com/rust-lang/rust/commit/326e63187ff4490c30ed603158e00c0be58dd162"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "066dc883597e82d98473ffac71eeba2a2cbd54be", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0b3311c260812cef6c35b7e99e93516cfc7a3561/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b3311c260812cef6c35b7e99e93516cfc7a3561/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=0b3311c260812cef6c35b7e99e93516cfc7a3561", "patch": "@@ -13,10 +13,11 @@\n // XXX: Not sure how this should be structured\n // XXX: Iteration should probably be considered separately\n \n+use container::Container;\n use iter::Iterator;\n use option::Option;\n use io::Reader;\n-use vec::OwnedVector;\n+use vec::{OwnedVector, ImmutableVector};\n \n /// An iterator that reads a single byte on each iteration,\n /// until `.read_byte()` returns `None`.\n@@ -117,16 +118,23 @@ pub fn u64_from_be_bytes(data: &[u8],\n                          start: uint,\n                          size: uint)\n                       -> u64 {\n-    let mut sz = size;\n-    assert!((sz <= 8u));\n-    let mut val = 0_u64;\n-    let mut pos = start;\n-    while sz > 0u {\n-        sz -= 1u;\n-        val += (data[pos] as u64) << ((sz * 8u) as u64);\n-        pos += 1u;\n-    }\n-    return val;\n+    use ptr::{copy_nonoverlapping_memory, offset, mut_offset};\n+    use unstable::intrinsics::from_be64;\n+    use vec::MutableVector;\n+\n+    assert!(size <= 8u);\n+\n+    if data.len() - start < size {\n+        fail!(\"index out of bounds\");\n+    }\n+\n+    let mut buf = [0u8, ..8];\n+    unsafe {\n+        let ptr = offset(data.as_ptr(), start as int);\n+        let out = buf.as_mut_ptr();\n+        copy_nonoverlapping_memory(mut_offset(out, (8 - size) as int), ptr, size);\n+        from_be64(*(out as *i64)) as u64\n+    }\n }\n \n #[cfg(test)]"}]}