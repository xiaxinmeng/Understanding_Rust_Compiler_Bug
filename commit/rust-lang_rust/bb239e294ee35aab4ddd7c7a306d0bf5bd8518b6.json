{"sha": "bb239e294ee35aab4ddd7c7a306d0bf5bd8518b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMjM5ZTI5NGVlMzVhYWI0ZGRkN2M3YTMwNmQwYmY1YmQ4NTE4YjY=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-12-06T14:35:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-06T14:35:41Z"}, "message": "Rollup merge of #46512 - Havvy:doc-compile_fail, r=kennytm\n\nGive compile_error macro examples\n\nI cannot get Rust to build at all with it complaining about GCC not being a valid C compiler or something, so letting TravisCI be my tester...\n\nFixes #46171", "tree": {"sha": "3bae34d8913ec84c8325bd31096b16368fcdca41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bae34d8913ec84c8325bd31096b16368fcdca41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb239e294ee35aab4ddd7c7a306d0bf5bd8518b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb239e294ee35aab4ddd7c7a306d0bf5bd8518b6", "html_url": "https://github.com/rust-lang/rust/commit/bb239e294ee35aab4ddd7c7a306d0bf5bd8518b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb239e294ee35aab4ddd7c7a306d0bf5bd8518b6/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "872c0259b698c7670d4087e414d6cfa9186981a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/872c0259b698c7670d4087e414d6cfa9186981a5", "html_url": "https://github.com/rust-lang/rust/commit/872c0259b698c7670d4087e414d6cfa9186981a5"}, {"sha": "aaaea2c562dc5638e8fcaa00371492ae71b07e46", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaaea2c562dc5638e8fcaa00371492ae71b07e46", "html_url": "https://github.com/rust-lang/rust/commit/aaaea2c562dc5638e8fcaa00371492ae71b07e46"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "fe2df2261156a6299aac3a8fe238c7e045cefca0", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb239e294ee35aab4ddd7c7a306d0bf5bd8518b6/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb239e294ee35aab4ddd7c7a306d0bf5bd8518b6/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=bb239e294ee35aab4ddd7c7a306d0bf5bd8518b6", "patch": "@@ -596,9 +596,9 @@ mod builtin {\n \n     /// Unconditionally causes compilation to fail with the given error message when encountered.\n     ///\n-    /// For more information, see the [RFC].\n+    /// For more information, see the documentation for [`std::compile_error!`].\n     ///\n-    /// [RFC]: https://github.com/rust-lang/rfcs/blob/master/text/1695-add-error-macro.md\n+    /// [`std::compile_error!`]: ../std/macro.compile_error.html\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n     #[macro_export]\n     #[cfg(dox)]"}, {"sha": "b36473d9b75f07906312a012e26d412ae7621288", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bb239e294ee35aab4ddd7c7a306d0bf5bd8518b6/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb239e294ee35aab4ddd7c7a306d0bf5bd8518b6/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=bb239e294ee35aab4ddd7c7a306d0bf5bd8518b6", "patch": "@@ -282,9 +282,34 @@ pub mod builtin {\n \n     /// Unconditionally causes compilation to fail with the given error message when encountered.\n     ///\n-    /// For more information, see the [RFC].\n+    /// This macro should be used when a crate uses a conditional compilation strategy to provide\n+    /// better error messages for errornous conditions.\n     ///\n-    /// [RFC]: https://github.com/rust-lang/rfcs/blob/master/text/1695-add-error-macro.md\n+    /// # Examples\n+    ///\n+    /// Two such examples are macros and `#[cfg]` environments.\n+    ///\n+    /// Emit better compiler error if a macro is passed invalid values.\n+    ///\n+    /// ```compile_fail\n+    /// macro_rules! give_me_foo_or_bar {\n+    ///     (foo) => {};\n+    ///     (bar) => {};\n+    ///     ($x:ident) => {\n+    ///         compile_error!(\"This macro only accepts `foo` or `bar`\");\n+    ///     }\n+    /// }\n+    ///\n+    /// give_me_foo_or_bar!(neither);\n+    /// // ^ will fail at compile time with message \"This macro only accepts `foo` or `bar`\"\n+    /// ```\n+    ///\n+    /// Emit compiler error if one of a number of features isn't available.\n+    ///\n+    /// ```compile_fail\n+    /// #[cfg(not(any(feature = \"foo\", feature = \"bar\")))]\n+    /// compile_error!(\"Either feature \\\"foo\\\" or \\\"bar\\\" must be enabled for this crate.\")\n+    /// ```\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n     #[macro_export]\n     macro_rules! compile_error { ($msg:expr) => ({ /* compiler built-in */ }) }"}]}