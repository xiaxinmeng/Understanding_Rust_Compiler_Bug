{"sha": "fa67abd12707c34a2def10247c22c336f82cd2c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNjdhYmQxMjcwN2MzNGEyZGVmMTAyNDdjMjJjMzM2ZjgyY2QyYzI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-10-10T17:55:21Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-19T00:43:55Z"}, "message": "rustc: don't special-case Box<T> as having a pointer layout.", "tree": {"sha": "64e70b9c296d09188d5628de3860cf9df4c94755", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64e70b9c296d09188d5628de3860cf9df4c94755"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa67abd12707c34a2def10247c22c336f82cd2c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa67abd12707c34a2def10247c22c336f82cd2c2", "html_url": "https://github.com/rust-lang/rust/commit/fa67abd12707c34a2def10247c22c336f82cd2c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa67abd12707c34a2def10247c22c336f82cd2c2/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18ecc564f2cee4da3ef9397ba58e19d3fd9be3de", "url": "https://api.github.com/repos/rust-lang/rust/commits/18ecc564f2cee4da3ef9397ba58e19d3fd9be3de", "html_url": "https://github.com/rust-lang/rust/commit/18ecc564f2cee4da3ef9397ba58e19d3fd9be3de"}], "stats": {"total": 207, "additions": 98, "deletions": 109}, "files": [{"sha": "2226cee6e3684c57048bdca16844d54c995e2030", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fa67abd12707c34a2def10247c22c336f82cd2c2/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa67abd12707c34a2def10247c22c336f82cd2c2/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=fa67abd12707c34a2def10247c22c336f82cd2c2", "patch": "@@ -151,7 +151,7 @@ impl<T> Place<T> for IntermediateBox<T> {\n unsafe fn finalize<T>(b: IntermediateBox<T>) -> Box<T> {\n     let p = b.ptr as *mut T;\n     mem::forget(b);\n-    mem::transmute(p)\n+    Box::from_raw(p)\n }\n \n fn make_place<T>() -> IntermediateBox<T> {\n@@ -300,7 +300,10 @@ impl<T: ?Sized> Box<T> {\n                issue = \"27730\")]\n     #[inline]\n     pub unsafe fn from_unique(u: Unique<T>) -> Self {\n-        mem::transmute(u)\n+        #[cfg(stage0)]\n+        return mem::transmute(u);\n+        #[cfg(not(stage0))]\n+        return Box(u);\n     }\n \n     /// Consumes the `Box`, returning the wrapped raw pointer.\n@@ -362,7 +365,14 @@ impl<T: ?Sized> Box<T> {\n                issue = \"27730\")]\n     #[inline]\n     pub fn into_unique(b: Box<T>) -> Unique<T> {\n-        unsafe { mem::transmute(b) }\n+        #[cfg(stage0)]\n+        return unsafe { mem::transmute(b) };\n+        #[cfg(not(stage0))]\n+        return {\n+            let unique = b.0;\n+            mem::forget(b);\n+            unique\n+        };\n     }\n }\n \n@@ -627,7 +637,7 @@ impl Box<Any + Send> {\n     pub fn downcast<T: Any>(self) -> Result<Box<T>, Box<Any + Send>> {\n         <Box<Any>>::downcast(self).map_err(|s| unsafe {\n             // reapply the Send marker\n-            mem::transmute::<Box<Any>, Box<Any + Send>>(s)\n+            Box::from_raw(Box::into_raw(s) as *mut (Any + Send))\n         })\n     }\n }"}, {"sha": "761897f6266607557903d9af01906c535b3621d9", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 73, "deletions": 95, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/fa67abd12707c34a2def10247c22c336f82cd2c2/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa67abd12707c34a2def10247c22c336f82cd2c2/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=fa67abd12707c34a2def10247c22c336f82cd2c2", "patch": "@@ -1152,37 +1152,6 @@ impl<'a, 'tcx> CachedLayout {\n         };\n         assert!(!ty.has_infer_types());\n \n-        let ptr_layout = |pointee: Ty<'tcx>| {\n-            let mut data_ptr = scalar_unit(Pointer);\n-            if !ty.is_unsafe_ptr() {\n-                data_ptr.valid_range.start = 1;\n-            }\n-\n-            let pointee = tcx.normalize_associated_type_in_env(&pointee, param_env);\n-            if pointee.is_sized(tcx, param_env, DUMMY_SP) {\n-                return Ok(tcx.intern_layout(CachedLayout::scalar(cx, data_ptr)));\n-            }\n-\n-            let unsized_part = tcx.struct_tail(pointee);\n-            let metadata = match unsized_part.sty {\n-                ty::TyForeign(..) => {\n-                    return Ok(tcx.intern_layout(CachedLayout::scalar(cx, data_ptr)));\n-                }\n-                ty::TySlice(_) | ty::TyStr => {\n-                    scalar_unit(Int(dl.ptr_sized_integer(), false))\n-                }\n-                ty::TyDynamic(..) => {\n-                    let mut vtable = scalar_unit(Pointer);\n-                    vtable.valid_range.start = 1;\n-                    vtable\n-                }\n-                _ => return Err(LayoutError::Unknown(unsized_part))\n-            };\n-\n-            // Effectively a (ptr, meta) tuple.\n-            Ok(tcx.intern_layout(scalar_pair(data_ptr, metadata)))\n-        };\n-\n         Ok(match ty.sty {\n             // Basic scalars.\n             ty::TyBool => {\n@@ -1219,10 +1188,34 @@ impl<'a, 'tcx> CachedLayout {\n             // Potentially-fat pointers.\n             ty::TyRef(_, ty::TypeAndMut { ty: pointee, .. }) |\n             ty::TyRawPtr(ty::TypeAndMut { ty: pointee, .. }) => {\n-                ptr_layout(pointee)?\n-            }\n-            ty::TyAdt(def, _) if def.is_box() => {\n-                ptr_layout(ty.boxed_ty())?\n+                let mut data_ptr = scalar_unit(Pointer);\n+                if !ty.is_unsafe_ptr() {\n+                    data_ptr.valid_range.start = 1;\n+                }\n+\n+                let pointee = tcx.normalize_associated_type_in_env(&pointee, param_env);\n+                if pointee.is_sized(tcx, param_env, DUMMY_SP) {\n+                    return Ok(tcx.intern_layout(CachedLayout::scalar(cx, data_ptr)));\n+                }\n+\n+                let unsized_part = tcx.struct_tail(pointee);\n+                let metadata = match unsized_part.sty {\n+                    ty::TyForeign(..) => {\n+                        return Ok(tcx.intern_layout(CachedLayout::scalar(cx, data_ptr)));\n+                    }\n+                    ty::TySlice(_) | ty::TyStr => {\n+                        scalar_unit(Int(dl.ptr_sized_integer(), false))\n+                    }\n+                    ty::TyDynamic(..) => {\n+                        let mut vtable = scalar_unit(Pointer);\n+                        vtable.valid_range.start = 1;\n+                        vtable\n+                    }\n+                    _ => return Err(LayoutError::Unknown(unsized_part))\n+                };\n+\n+                // Effectively a (ptr, meta) tuple.\n+                tcx.intern_layout(scalar_pair(data_ptr, metadata))\n             }\n \n             // Arrays and slices.\n@@ -1861,32 +1854,25 @@ impl<'a, 'tcx> SizeSkeleton<'tcx> {\n             Err(err) => err\n         };\n \n-        let ptr_skeleton = |pointee: Ty<'tcx>| {\n-            let non_zero = !ty.is_unsafe_ptr();\n-            let tail = tcx.struct_tail(pointee);\n-            match tail.sty {\n-                ty::TyParam(_) | ty::TyProjection(_) => {\n-                    assert!(tail.has_param_types() || tail.has_self_ty());\n-                    Ok(SizeSkeleton::Pointer {\n-                        non_zero,\n-                        tail: tcx.erase_regions(&tail)\n-                    })\n-                }\n-                _ => {\n-                    bug!(\"SizeSkeleton::compute({}): layout errored ({}), yet \\\n-                            tail `{}` is not a type parameter or a projection\",\n-                            ty, err, tail)\n-                }\n-            }\n-        };\n-\n         match ty.sty {\n             ty::TyRef(_, ty::TypeAndMut { ty: pointee, .. }) |\n             ty::TyRawPtr(ty::TypeAndMut { ty: pointee, .. }) => {\n-                ptr_skeleton(pointee)\n-            }\n-            ty::TyAdt(def, _) if def.is_box() => {\n-                ptr_skeleton(ty.boxed_ty())\n+                let non_zero = !ty.is_unsafe_ptr();\n+                let tail = tcx.struct_tail(pointee);\n+                match tail.sty {\n+                    ty::TyParam(_) | ty::TyProjection(_) => {\n+                        assert!(tail.has_param_types() || tail.has_self_ty());\n+                        Ok(SizeSkeleton::Pointer {\n+                            non_zero,\n+                            tail: tcx.erase_regions(&tail)\n+                        })\n+                    }\n+                    _ => {\n+                        bug!(\"SizeSkeleton::compute({}): layout errored ({}), yet \\\n+                              tail `{}` is not a type parameter or a projection\",\n+                             ty, err, tail)\n+                    }\n+                }\n             }\n \n             ty::TyAdt(def, substs) => {\n@@ -2148,39 +2134,6 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n               C::TyLayout: MaybeResult<TyLayout<'tcx>>\n     {\n         let tcx = cx.tcx();\n-        let ptr_field_layout = |pointee: Ty<'tcx>| {\n-            assert!(i < 2);\n-\n-            // Reuse the fat *T type as its own thin pointer data field.\n-            // This provides information about e.g. DST struct pointees\n-            // (which may have no non-DST form), and will work as long\n-            // as the `Abi` or `FieldPlacement` is checked by users.\n-            if i == 0 {\n-                let nil = tcx.mk_nil();\n-                let ptr_ty = if self.ty.is_unsafe_ptr() {\n-                    tcx.mk_mut_ptr(nil)\n-                } else {\n-                    tcx.mk_mut_ref(tcx.types.re_static, nil)\n-                };\n-                return cx.layout_of(ptr_ty).map_same(|mut ptr_layout| {\n-                    ptr_layout.ty = self.ty;\n-                    ptr_layout\n-                });\n-            }\n-\n-            let meta_ty = match tcx.struct_tail(pointee).sty {\n-                ty::TySlice(_) |\n-                ty::TyStr => tcx.types.usize,\n-                ty::TyDynamic(..) => {\n-                    // FIXME(eddyb) use an usize/fn() array with\n-                    // the correct number of vtables slots.\n-                    tcx.mk_imm_ref(tcx.types.re_static, tcx.mk_nil())\n-                }\n-                _ => bug!(\"TyLayout::field_type({:?}): not applicable\", self)\n-            };\n-            cx.layout_of(meta_ty)\n-        };\n-\n         cx.layout_of(match self.ty.sty {\n             ty::TyBool |\n             ty::TyChar |\n@@ -2198,10 +2151,35 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n             // Potentially-fat pointers.\n             ty::TyRef(_, ty::TypeAndMut { ty: pointee, .. }) |\n             ty::TyRawPtr(ty::TypeAndMut { ty: pointee, .. }) => {\n-                return ptr_field_layout(pointee);\n-            }\n-            ty::TyAdt(def, _) if def.is_box() => {\n-                return ptr_field_layout(self.ty.boxed_ty());\n+                assert!(i < 2);\n+\n+                // Reuse the fat *T type as its own thin pointer data field.\n+                // This provides information about e.g. DST struct pointees\n+                // (which may have no non-DST form), and will work as long\n+                // as the `Abi` or `FieldPlacement` is checked by users.\n+                if i == 0 {\n+                    let nil = tcx.mk_nil();\n+                    let ptr_ty = if self.ty.is_unsafe_ptr() {\n+                        tcx.mk_mut_ptr(nil)\n+                    } else {\n+                        tcx.mk_mut_ref(tcx.types.re_static, nil)\n+                    };\n+                    return cx.layout_of(ptr_ty).map_same(|mut ptr_layout| {\n+                        ptr_layout.ty = self.ty;\n+                        ptr_layout\n+                    });\n+                }\n+\n+                match tcx.struct_tail(pointee).sty {\n+                    ty::TySlice(_) |\n+                    ty::TyStr => tcx.types.usize,\n+                    ty::TyDynamic(..) => {\n+                        // FIXME(eddyb) use an usize/fn() array with\n+                        // the correct number of vtables slots.\n+                        tcx.mk_imm_ref(tcx.types.re_static, tcx.mk_nil())\n+                    }\n+                    _ => bug!(\"TyLayout::field_type({:?}): not applicable\", self)\n+                }\n             }\n \n             // Arrays and slices."}, {"sha": "60e5e4ced2c30fae9a4f95cfd574c035078d5f9a", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fa67abd12707c34a2def10247c22c336f82cd2c2/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa67abd12707c34a2def10247c22c336f82cd2c2/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=fa67abd12707c34a2def10247c22c336f82cd2c2", "patch": "@@ -321,7 +321,8 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyLayout<'tcx> {\n                 return self.field(ccx, index).llvm_type(ccx);\n             }\n             ty::TyAdt(def, _) if def.is_box() => {\n-                return self.field(ccx, index).llvm_type(ccx);\n+                let ptr_ty = ccx.tcx().mk_mut_ptr(self.ty.boxed_ty());\n+                return ccx.layout_of(ptr_ty).scalar_pair_element_llvm_type(ccx, index);\n             }\n             _ => {}\n         }\n@@ -438,15 +439,6 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyLayout<'tcx> {\n                 });\n             }\n \n-            ty::TyAdt(def, _) if def.is_box() && offset.bytes() == 0 => {\n-                let (size, align) = ccx.size_and_align_of(self.ty.boxed_ty());\n-                result = Some(PointeeInfo {\n-                    size,\n-                    align,\n-                    safe: Some(PointerKind::UniqueOwned)\n-                });\n-            }\n-\n             _ => {\n                 let mut data_variant = match self.variants {\n                     layout::Variants::NicheFilling { dataful_variant, .. } => {\n@@ -491,6 +483,15 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyLayout<'tcx> {\n                         }\n                     }\n                 }\n+\n+                // FIXME(eddyb) This should be for `ptr::Unique<T>`, not `Box<T>`.\n+                if let Some(ref mut pointee) = result {\n+                    if let ty::TyAdt(def, _) = self.ty.sty {\n+                        if def.is_box() && offset.bytes() == 0 {\n+                            pointee.safe = Some(PointerKind::UniqueOwned);\n+                        }\n+                    }\n+                }\n             }\n         }\n "}]}