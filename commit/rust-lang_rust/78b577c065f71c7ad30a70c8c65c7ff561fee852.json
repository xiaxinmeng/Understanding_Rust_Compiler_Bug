{"sha": "78b577c065f71c7ad30a70c8c65c7ff561fee852", "node_id": "C_kwDOAAsO6NoAKDc4YjU3N2MwNjVmNzFjN2FkMzBhNzBjOGM2NWM3ZmY1NjFmZWU4NTI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-02T16:30:55Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-03T13:35:29Z"}, "message": "scoped threads: pass closure through MaybeUninit to avoid invalid dangling references", "tree": {"sha": "00519b5044814e1093aa910e99c657325e6fe237", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00519b5044814e1093aa910e99c657325e6fe237"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78b577c065f71c7ad30a70c8c65c7ff561fee852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78b577c065f71c7ad30a70c8c65c7ff561fee852", "html_url": "https://github.com/rust-lang/rust/commit/78b577c065f71c7ad30a70c8c65c7ff561fee852", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78b577c065f71c7ad30a70c8c65c7ff561fee852/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "url": "https://api.github.com/repos/rust-lang/rust/commits/acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "html_url": "https://github.com/rust-lang/rust/commit/acb8934fd57b3c2740c4abac0a5728c2c9b1423b"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "809b835345f705dd6761e9cf27e5353beed68621", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/78b577c065f71c7ad30a70c8c65c7ff561fee852/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b577c065f71c7ad30a70c8c65c7ff561fee852/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=78b577c065f71c7ad30a70c8c65c7ff561fee852", "patch": "@@ -499,13 +499,40 @@ impl Builder {\n         let output_capture = crate::io::set_output_capture(None);\n         crate::io::set_output_capture(output_capture.clone());\n \n+        // Pass `f` in `MaybeUninit` because actually that closure might *run longer than the lifetime of `F`*.\n+        // See <https://github.com/rust-lang/rust/issues/101983> for more details.\n+        // To prevent leaks we use a wrapper that drops its contents.\n+        #[repr(transparent)]\n+        struct MaybeDangling<T>(mem::MaybeUninit<T>);\n+        impl<T> MaybeDangling<T> {\n+            fn new(x: T) -> Self {\n+                MaybeDangling(mem::MaybeUninit::new(x))\n+            }\n+            fn into_inner(self) -> T {\n+                // SAFETY: we are always initiailized.\n+                let ret = unsafe { self.0.assume_init_read() };\n+                // Make sure we don't drop.\n+                mem::forget(self);\n+                ret\n+            }\n+        }\n+        impl<T> Drop for MaybeDangling<T> {\n+            fn drop(&mut self) {\n+                // SAFETY: we are always initiailized.\n+                unsafe { self.0.assume_init_drop() };\n+            }\n+        }\n+\n+        let f = MaybeDangling::new(f);\n         let main = move || {\n             if let Some(name) = their_thread.cname() {\n                 imp::Thread::set_name(name);\n             }\n \n             crate::io::set_output_capture(output_capture);\n \n+            // SAFETY: we constructed `f` initialized.\n+            let f = f.into_inner();\n             // SAFETY: the stack guard passed is the one for the current thread.\n             // This means the current thread's stack and the new thread's stack\n             // are properly set and protected from each other.\n@@ -518,6 +545,12 @@ impl Builder {\n             // same `JoinInner` as this closure meaning the mutation will be\n             // safe (not modify it and affect a value far away).\n             unsafe { *their_packet.result.get() = Some(try_result) };\n+            // Here `their_packet` gets dropped, and if this is the last `Arc` for that packet that\n+            // will call `decrement_num_running_threads` and therefore signal that this thread is\n+            // done.\n+            drop(their_packet);\n+            // Here, the lifetime `'a` and even `'scope` can end. `main` keeps running for a bit\n+            // after that before returning itself.\n         };\n \n         if let Some(scope_data) = &my_packet.scope {"}]}