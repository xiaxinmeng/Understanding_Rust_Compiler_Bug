{"sha": "a3888fd601ad33d1689e41e4f150c882e10e2243", "node_id": "C_kwDOAAsO6NoAKGEzODg4ZmQ2MDFhZDMzZDE2ODllNDFlNGYxNTBjODgyZTEwZTIyNDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-16T10:36:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-16T10:36:51Z"}, "message": "Auto merge of #14579 - KatKlo:initialization-bug, r=Veykril\n\nFix bug with notifications during initialization", "tree": {"sha": "d2a33f4e796b3de85fd230d13e4a2f547ac402a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2a33f4e796b3de85fd230d13e4a2f547ac402a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3888fd601ad33d1689e41e4f150c882e10e2243", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3888fd601ad33d1689e41e4f150c882e10e2243", "html_url": "https://github.com/rust-lang/rust/commit/a3888fd601ad33d1689e41e4f150c882e10e2243", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3888fd601ad33d1689e41e4f150c882e10e2243/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0889589d17dec1d4ed93c9927edc205653abee0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0889589d17dec1d4ed93c9927edc205653abee0", "html_url": "https://github.com/rust-lang/rust/commit/c0889589d17dec1d4ed93c9927edc205653abee0"}, {"sha": "1db2a2536cb196eabb79a15ffa78288602b40a79", "url": "https://api.github.com/repos/rust-lang/rust/commits/1db2a2536cb196eabb79a15ffa78288602b40a79", "html_url": "https://github.com/rust-lang/rust/commit/1db2a2536cb196eabb79a15ffa78288602b40a79"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "755b3fd9596240b7660bd38b9053f4387f68d218", "filename": "lib/lsp-server/src/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3888fd601ad33d1689e41e4f150c882e10e2243/lib%2Flsp-server%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3888fd601ad33d1689e41e4f150c882e10e2243/lib%2Flsp-server%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Flsp-server%2Fsrc%2Ferror.rs?ref=a3888fd601ad33d1689e41e4f150c882e10e2243", "patch": "@@ -2,7 +2,7 @@ use std::fmt;\n \n use crate::{Notification, Request};\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, PartialEq)]\n pub struct ProtocolError(pub(crate) String);\n \n impl std::error::Error for ProtocolError {}"}, {"sha": "affab60a22783acc7e1a67fa21a8c631cf04eb7b", "filename": "lib/lsp-server/src/lib.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a3888fd601ad33d1689e41e4f150c882e10e2243/lib%2Flsp-server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3888fd601ad33d1689e41e4f150c882e10e2243/lib%2Flsp-server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Flsp-server%2Fsrc%2Flib.rs?ref=a3888fd601ad33d1689e41e4f150c882e10e2243", "patch": "@@ -126,6 +126,9 @@ impl Connection {\n                     self.sender.send(resp.into()).unwrap();\n                     continue;\n                 }\n+                Ok(Message::Notification(n)) if !n.is_exit() => {\n+                    continue;\n+                }\n                 Ok(msg) => Err(ProtocolError(format!(\"expected initialize request, got {msg:?}\"))),\n                 Err(e) => {\n                     Err(ProtocolError(format!(\"expected initialize request, got error: {e}\")))\n@@ -212,3 +215,70 @@ impl Connection {\n         Ok(true)\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use crossbeam_channel::unbounded;\n+    use lsp_types::notification::{Exit, Initialized, Notification};\n+    use lsp_types::request::{Initialize, Request};\n+    use lsp_types::{InitializeParams, InitializedParams};\n+    use serde_json::to_value;\n+\n+    use crate::{Connection, Message, ProtocolError, RequestId};\n+\n+    struct TestCase {\n+        test_messages: Vec<Message>,\n+        expected_resp: Result<(RequestId, serde_json::Value), ProtocolError>,\n+    }\n+\n+    fn initialize_start_test(test_case: TestCase) {\n+        let (reader_sender, reader_receiver) = unbounded::<Message>();\n+        let (writer_sender, writer_receiver) = unbounded::<Message>();\n+        let conn = Connection { sender: writer_sender, receiver: reader_receiver };\n+\n+        for msg in test_case.test_messages {\n+            assert!(reader_sender.send(msg).is_ok());\n+        }\n+\n+        let resp = conn.initialize_start();\n+        assert_eq!(test_case.expected_resp, resp);\n+\n+        assert!(writer_receiver.recv_timeout(std::time::Duration::from_secs(1)).is_err());\n+    }\n+\n+    #[test]\n+    fn not_exit_notification() {\n+        let notification = crate::Notification {\n+            method: Initialized::METHOD.to_string(),\n+            params: to_value(InitializedParams {}).unwrap(),\n+        };\n+\n+        let params_as_value = to_value(InitializeParams::default()).unwrap();\n+        let req_id = RequestId::from(234);\n+        let request = crate::Request {\n+            id: req_id.clone(),\n+            method: Initialize::METHOD.to_string(),\n+            params: params_as_value.clone(),\n+        };\n+\n+        initialize_start_test(TestCase {\n+            test_messages: vec![notification.into(), request.into()],\n+            expected_resp: Ok((req_id, params_as_value)),\n+        });\n+    }\n+\n+    #[test]\n+    fn exit_notification() {\n+        let notification =\n+            crate::Notification { method: Exit::METHOD.to_string(), params: to_value(()).unwrap() };\n+        let notification_msg = Message::from(notification);\n+\n+        initialize_start_test(TestCase {\n+            test_messages: vec![notification_msg.clone()],\n+            expected_resp: Err(ProtocolError(format!(\n+                \"expected initialize request, got {:?}\",\n+                notification_msg\n+            ))),\n+        });\n+    }\n+}"}]}