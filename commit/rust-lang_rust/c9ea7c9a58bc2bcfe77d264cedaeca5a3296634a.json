{"sha": "c9ea7c9a58bc2bcfe77d264cedaeca5a3296634a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZWE3YzlhNThiYzJiY2ZlNzdkMjY0Y2VkYWVjYTVhMzI5NjYzNGE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-15T17:06:06Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-15T20:20:47Z"}, "message": "serialize: Change some FnOnce bounds to FnMut\n\nRelax some of the bounds on the decoder methods back to FnMut to help accomodate\nsome more flavorful variants of decoders which may need to run the closure more\nthan once when it, for example, attempts to find the first successful enum to\ndecode.\n\nThis a breaking change due to the bounds for the trait switching, and clients\nwill need to update from `FnOnce` to `FnMut` as well as likely making the local\nfunction binding mutable in order to call the function.\n\n[breaking-change]", "tree": {"sha": "31c2d7bf5821f59511938a9080fab250fe5c59d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31c2d7bf5821f59511938a9080fab250fe5c59d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9ea7c9a58bc2bcfe77d264cedaeca5a3296634a", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ea7c9a58bc2bcfe77d264cedaeca5a3296634a", "html_url": "https://github.com/rust-lang/rust/commit/c9ea7c9a58bc2bcfe77d264cedaeca5a3296634a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9ea7c9a58bc2bcfe77d264cedaeca5a3296634a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef0bc464af110d24d4663fbe51eca3646a897308", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef0bc464af110d24d4663fbe51eca3646a897308", "html_url": "https://github.com/rust-lang/rust/commit/ef0bc464af110d24d4663fbe51eca3646a897308"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "bbedbc75395d63151ae0eeb95094d6c232ec1dab", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c9ea7c9a58bc2bcfe77d264cedaeca5a3296634a/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ea7c9a58bc2bcfe77d264cedaeca5a3296634a/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=c9ea7c9a58bc2bcfe77d264cedaeca5a3296634a", "patch": "@@ -499,8 +499,9 @@ pub mod reader {\n             Ok(result)\n         }\n \n-        fn read_enum_variant<T, F>(&mut self, _: &[&str], f: F) -> DecodeResult<T> where\n-            F: FnOnce(&mut Decoder<'doc>, uint) -> DecodeResult<T>,\n+        fn read_enum_variant<T, F>(&mut self, _: &[&str],\n+                                   mut f: F) -> DecodeResult<T>\n+            where F: FnMut(&mut Decoder<'doc>, uint) -> DecodeResult<T>,\n         {\n             debug!(\"read_enum_variant()\");\n             let idx = try!(self._next_uint(EsEnumVid));\n@@ -526,8 +527,9 @@ pub mod reader {\n             f(self)\n         }\n \n-        fn read_enum_struct_variant<T, F>(&mut self, _: &[&str], f: F) -> DecodeResult<T> where\n-            F: FnOnce(&mut Decoder<'doc>, uint) -> DecodeResult<T>,\n+        fn read_enum_struct_variant<T, F>(&mut self, _: &[&str],\n+                                          mut f: F) -> DecodeResult<T>\n+            where F: FnMut(&mut Decoder<'doc>, uint) -> DecodeResult<T>,\n         {\n             debug!(\"read_enum_struct_variant()\");\n             let idx = try!(self._next_uint(EsEnumVid));\n@@ -610,8 +612,8 @@ pub mod reader {\n             self.read_tuple_arg(idx, f)\n         }\n \n-        fn read_option<T, F>(&mut self, f: F) -> DecodeResult<T> where\n-            F: FnOnce(&mut Decoder<'doc>, bool) -> DecodeResult<T>,\n+        fn read_option<T, F>(&mut self, mut f: F) -> DecodeResult<T> where\n+            F: FnMut(&mut Decoder<'doc>, bool) -> DecodeResult<T>,\n         {\n             debug!(\"read_option()\");\n             self.read_enum(\"Option\", move |this| {"}, {"sha": "6047c76d093eb241c6bf13e8a87a57b9e2ab66b6", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c9ea7c9a58bc2bcfe77d264cedaeca5a3296634a/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ea7c9a58bc2bcfe77d264cedaeca5a3296634a/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=c9ea7c9a58bc2bcfe77d264cedaeca5a3296634a", "patch": "@@ -2082,8 +2082,9 @@ impl ::Decoder<DecoderError> for Decoder {\n         f(self)\n     }\n \n-    fn read_enum_variant<T, F>(&mut self, names: &[&str], f: F) -> DecodeResult<T> where\n-        F: FnOnce(&mut Decoder, uint) -> DecodeResult<T>,\n+    fn read_enum_variant<T, F>(&mut self, names: &[&str],\n+                               mut f: F) -> DecodeResult<T>\n+        where F: FnMut(&mut Decoder, uint) -> DecodeResult<T>,\n     {\n         debug!(\"read_enum_variant(names={})\", names);\n         let name = match self.pop() {\n@@ -2133,7 +2134,7 @@ impl ::Decoder<DecoderError> for Decoder {\n     }\n \n     fn read_enum_struct_variant<T, F>(&mut self, names: &[&str], f: F) -> DecodeResult<T> where\n-        F: FnOnce(&mut Decoder, uint) -> DecodeResult<T>,\n+        F: FnMut(&mut Decoder, uint) -> DecodeResult<T>,\n     {\n         debug!(\"read_enum_struct_variant(names={})\", names);\n         self.read_enum_variant(names, f)\n@@ -2230,8 +2231,8 @@ impl ::Decoder<DecoderError> for Decoder {\n         self.read_tuple_arg(idx, f)\n     }\n \n-    fn read_option<T, F>(&mut self, f: F) -> DecodeResult<T> where\n-        F: FnOnce(&mut Decoder, bool) -> DecodeResult<T>,\n+    fn read_option<T, F>(&mut self, mut f: F) -> DecodeResult<T> where\n+        F: FnMut(&mut Decoder, bool) -> DecodeResult<T>,\n     {\n         debug!(\"read_option()\");\n         match self.pop() {"}, {"sha": "0e0d3b4115bd76e52fc11b16b46f9554f935c94c", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9ea7c9a58bc2bcfe77d264cedaeca5a3296634a/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9ea7c9a58bc2bcfe77d264cedaeca5a3296634a/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=c9ea7c9a58bc2bcfe77d264cedaeca5a3296634a", "patch": "@@ -120,12 +120,12 @@ pub trait Decoder<E> {\n         F: FnOnce(&mut Self) -> Result<T, E>;\n \n     fn read_enum_variant<T, F>(&mut self, names: &[&str], f: F) -> Result<T, E> where\n-        F: FnOnce(&mut Self, uint) -> Result<T, E>;\n+        F: FnMut(&mut Self, uint) -> Result<T, E>;\n     fn read_enum_variant_arg<T, F>(&mut self, a_idx: uint, f: F) -> Result<T, E> where\n         F: FnOnce(&mut Self) -> Result<T, E>;\n \n     fn read_enum_struct_variant<T, F>(&mut self, names: &[&str], f: F) -> Result<T, E> where\n-        F: FnOnce(&mut Self, uint) -> Result<T, E>;\n+        F: FnMut(&mut Self, uint) -> Result<T, E>;\n     fn read_enum_struct_variant_field<T, F>(&mut self,\n                                             &f_name: &str,\n                                             f_idx: uint,\n@@ -154,7 +154,7 @@ pub trait Decoder<E> {\n \n     // Specialized types:\n     fn read_option<T, F>(&mut self, f: F) -> Result<T, E> where\n-        F: FnOnce(&mut Self, bool) -> Result<T, E>;\n+        F: FnMut(&mut Self, bool) -> Result<T, E>;\n \n     fn read_seq<T, F>(&mut self, f: F) -> Result<T, E> where\n         F: FnOnce(&mut Self, uint) -> Result<T, E>;"}]}