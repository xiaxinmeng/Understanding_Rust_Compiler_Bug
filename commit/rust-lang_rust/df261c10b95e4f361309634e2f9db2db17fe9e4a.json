{"sha": "df261c10b95e4f361309634e2f9db2db17fe9e4a", "node_id": "C_kwDOAAsO6NoAKGRmMjYxYzEwYjk1ZTRmMzYxMzA5NjM0ZTJmOWRiMmRiMTdmZTllNGE", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2021-11-29T07:40:39Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2021-11-29T07:40:39Z"}, "message": "remove duplicate data from CrateOrigin", "tree": {"sha": "223869807bb5ac5265ba90e7973841831a07431b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/223869807bb5ac5265ba90e7973841831a07431b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df261c10b95e4f361309634e2f9db2db17fe9e4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df261c10b95e4f361309634e2f9db2db17fe9e4a", "html_url": "https://github.com/rust-lang/rust/commit/df261c10b95e4f361309634e2f9db2db17fe9e4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df261c10b95e4f361309634e2f9db2db17fe9e4a/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6549551593cdf5fa9f966e9010a9290afa5a830", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6549551593cdf5fa9f966e9010a9290afa5a830", "html_url": "https://github.com/rust-lang/rust/commit/a6549551593cdf5fa9f966e9010a9290afa5a830"}], "stats": {"total": 65, "additions": 26, "deletions": 39}, "files": [{"sha": "9baae9214458f5050ea7b7b36735020eeb7cba41", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/df261c10b95e4f361309634e2f9db2db17fe9e4a/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df261c10b95e4f361309634e2f9db2db17fe9e4a/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=df261c10b95e4f361309634e2f9db2db17fe9e4a", "patch": "@@ -131,13 +131,13 @@ impl ChangeFixture {\n                 current_source_root_kind = *kind;\n             }\n \n-            if let Some((krate, origin)) = meta.krate {\n+            if let Some((krate, origin, version)) = meta.krate {\n                 let crate_name = CrateName::normalize_dashes(&krate);\n                 let crate_id = crate_graph.add_crate_root(\n                     file_id,\n                     meta.edition,\n                     Some(crate_name.clone().into()),\n-                    None,\n+                    version,\n                     meta.cfg.clone(),\n                     meta.cfg,\n                     meta.env,\n@@ -212,7 +212,7 @@ impl ChangeFixture {\n                 CfgOptions::default(),\n                 Env::default(),\n                 Vec::new(),\n-                CrateOrigin::Lang(\"core\".to_string()),\n+                CrateOrigin::Lang,\n             );\n \n             for krate in all_crates {\n@@ -247,7 +247,7 @@ impl ChangeFixture {\n                 CfgOptions::default(),\n                 Env::default(),\n                 proc_macro,\n-                CrateOrigin::Lang(\"proc-macro\".to_string()),\n+                CrateOrigin::Lang,\n             );\n \n             for krate in all_crates {\n@@ -329,7 +329,7 @@ enum SourceRootKind {\n #[derive(Debug)]\n struct FileMeta {\n     path: String,\n-    krate: Option<(String, CrateOrigin)>,\n+    krate: Option<(String, CrateOrigin, Option<String>)>,\n     deps: Vec<String>,\n     extern_prelude: Vec<String>,\n     cfg: CfgOptions,\n@@ -338,24 +338,20 @@ struct FileMeta {\n     introduce_new_source_root: Option<SourceRootKind>,\n }\n \n-fn parse_crate(crate_str: String) -> (String, CrateOrigin) {\n+fn parse_crate(crate_str: String) -> (String, CrateOrigin, Option<String>) {\n     if let Some((a, b)) = crate_str.split_once(\"@\") {\n-        (\n-            a.to_owned(),\n-            match b.split_once(\":\") {\n-                Some((\"CratesIo\", data)) => match data.split_once(\",\") {\n-                    Some((version, url)) => CrateOrigin::CratesIo {\n-                        name: a.to_owned(),\n-                        repo: Some(url.to_owned()),\n-                        version: version.to_owned(),\n-                    },\n-                    _ => panic!(\"Bad crates.io parameter: {}\", data),\n-                },\n-                _ => panic!(\"Bad string for crate origin: {}\", b),\n+        let (version, origin) = match b.split_once(\":\") {\n+            Some((\"CratesIo\", data)) => match data.split_once(\",\") {\n+                Some((version, url)) => {\n+                    (version, CrateOrigin::CratesIo { repo: Some(url.to_owned()) })\n+                }\n+                _ => panic!(\"Bad crates.io parameter: {}\", data),\n             },\n-        )\n+            _ => panic!(\"Bad string for crate origin: {}\", b),\n+        };\n+        (a.to_owned(), origin, Some(version.to_string()))\n     } else {\n-        (crate_str, CrateOrigin::Unknown)\n+        (crate_str, CrateOrigin::Unknown, None)\n     }\n }\n "}, {"sha": "f182427e478dd00a7304a4d73fe9484e1643b624", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df261c10b95e4f361309634e2f9db2db17fe9e4a/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df261c10b95e4f361309634e2f9db2db17fe9e4a/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=df261c10b95e4f361309634e2f9db2db17fe9e4a", "patch": "@@ -116,9 +116,9 @@ impl ops::Deref for CrateName {\n #[derive(Debug, Clone)]\n pub enum CrateOrigin {\n     /// Crates that are from crates.io official registry,\n-    CratesIo { name: String, version: String, repo: Option<String> },\n+    CratesIo { repo: Option<String> },\n     /// Crates that are provided by the language, like std, core, proc-macro, ...\n-    Lang(String),\n+    Lang,\n     /// Crates that we don't know their origin.\n     // Idealy this enum should cover all cases, and then we remove this variant.\n     Unknown,"}, {"sha": "9d8c742fc466cc605afffac074a23faa15ac27af", "filename": "crates/ide/src/moniker.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df261c10b95e4f361309634e2f9db2db17fe9e4a/crates%2Fide%2Fsrc%2Fmoniker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df261c10b95e4f361309634e2f9db2db17fe9e4a/crates%2Fide%2Fsrc%2Fmoniker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmoniker.rs?ref=df261c10b95e4f361309634e2f9db2db17fe9e4a", "patch": "@@ -117,10 +117,10 @@ pub(crate) fn def_to_moniker(\n         },\n         kind: if krate == from_crate { MonikerKind::Export } else { MonikerKind::Import },\n         package_information: {\n-            let (name, repo, version) = match krate.origin(db) {\n-                CrateOrigin::CratesIo { repo, name, version } => (name, repo?, version),\n-                CrateOrigin::Lang(name) => (\n-                    name,\n+            let name = krate.display_name(db)?.to_string();\n+            let (repo, version) = match krate.origin(db) {\n+                CrateOrigin::CratesIo { repo } => (repo?, krate.version(db)?),\n+                CrateOrigin::Lang => (\n                     \"https://github.com/rust-lang/rust/\".to_string(),\n                     \"compiler_version\".to_string(),\n                 ),"}, {"sha": "0335f8b1746247c6ca7a13d7040ba358ca03f0b8", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/df261c10b95e4f361309634e2f9db2db17fe9e4a/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df261c10b95e4f361309634e2f9db2db17fe9e4a/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=df261c10b95e4f361309634e2f9db2db17fe9e4a", "patch": "@@ -474,12 +474,8 @@ fn project_json_to_crate_graph(\n                     cfg_options,\n                     env,\n                     proc_macro.unwrap_or_default(),\n-                    if let Some(name) = &krate.display_name {\n-                        CrateOrigin::CratesIo {\n-                            repo: krate.repository.clone(),\n-                            name: name.crate_name().to_string(),\n-                            version: krate.version.clone().unwrap_or_default(),\n-                        }\n+                    if krate.display_name.is_some() {\n+                        CrateOrigin::CratesIo { repo: krate.repository.clone() }\n                     } else {\n                         CrateOrigin::Unknown\n                     },\n@@ -832,7 +828,6 @@ fn add_target_crate_root(\n             .iter()\n             .map(|feat| CfgFlag::KeyValue { key: \"feature\".into(), value: feat.0.into() }),\n     );\n-    let crate_name = display_name.crate_name().to_string();\n     crate_graph.add_crate_root(\n         file_id,\n         edition,\n@@ -842,11 +837,7 @@ fn add_target_crate_root(\n         potential_cfg_options,\n         env,\n         proc_macro,\n-        CrateOrigin::CratesIo {\n-            name: crate_name,\n-            repo: pkg.repository.clone(),\n-            version: pkg.version.to_string(),\n-        },\n+        CrateOrigin::CratesIo { repo: pkg.repository.clone() },\n     )\n }\n \n@@ -890,7 +881,7 @@ fn sysroot_to_crate_graph(\n                 cfg_options.clone(),\n                 env,\n                 proc_macro,\n-                CrateOrigin::Lang(sysroot[krate].name.clone()),\n+                CrateOrigin::Lang,\n             );\n             Some((krate, crate_id))\n         })"}]}