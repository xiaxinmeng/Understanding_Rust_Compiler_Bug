{"sha": "da5a0cd69c64e0772960caee32f36b11bca1b498", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNWEwY2Q2OWM2NGUwNzcyOTYwY2FlZTMyZjM2YjExYmNhMWI0OTg=", "commit": {"author": {"name": "Nick Fitzgerald", "email": "fitzgen@gmail.com", "date": "2019-02-07T11:33:27Z"}, "committer": {"name": "Nick Fitzgerald", "email": "fitzgen@gmail.com", "date": "2019-02-07T11:33:27Z"}, "message": "De-duplicate number formatting implementations for smaller code size\n\nInstead of inlining the same logic into every number formatting implementation,\npull it out into a function that each of the number formatting impls call into.", "tree": {"sha": "74704446928891915dfe26e858da056d63552946", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74704446928891915dfe26e858da056d63552946"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da5a0cd69c64e0772960caee32f36b11bca1b498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da5a0cd69c64e0772960caee32f36b11bca1b498", "html_url": "https://github.com/rust-lang/rust/commit/da5a0cd69c64e0772960caee32f36b11bca1b498", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da5a0cd69c64e0772960caee32f36b11bca1b498/comments", "author": {"login": "fitzgen", "id": 74571, "node_id": "MDQ6VXNlcjc0NTcx", "avatar_url": "https://avatars.githubusercontent.com/u/74571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fitzgen", "html_url": "https://github.com/fitzgen", "followers_url": "https://api.github.com/users/fitzgen/followers", "following_url": "https://api.github.com/users/fitzgen/following{/other_user}", "gists_url": "https://api.github.com/users/fitzgen/gists{/gist_id}", "starred_url": "https://api.github.com/users/fitzgen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fitzgen/subscriptions", "organizations_url": "https://api.github.com/users/fitzgen/orgs", "repos_url": "https://api.github.com/users/fitzgen/repos", "events_url": "https://api.github.com/users/fitzgen/events{/privacy}", "received_events_url": "https://api.github.com/users/fitzgen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fitzgen", "id": 74571, "node_id": "MDQ6VXNlcjc0NTcx", "avatar_url": "https://avatars.githubusercontent.com/u/74571?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fitzgen", "html_url": "https://github.com/fitzgen", "followers_url": "https://api.github.com/users/fitzgen/followers", "following_url": "https://api.github.com/users/fitzgen/following{/other_user}", "gists_url": "https://api.github.com/users/fitzgen/gists{/gist_id}", "starred_url": "https://api.github.com/users/fitzgen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fitzgen/subscriptions", "organizations_url": "https://api.github.com/users/fitzgen/orgs", "repos_url": "https://api.github.com/users/fitzgen/repos", "events_url": "https://api.github.com/users/fitzgen/events{/privacy}", "received_events_url": "https://api.github.com/users/fitzgen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2c6b8c29f13f8d1f242da89e587960b95337819", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c6b8c29f13f8d1f242da89e587960b95337819", "html_url": "https://github.com/rust-lang/rust/commit/b2c6b8c29f13f8d1f242da89e587960b95337819"}], "stats": {"total": 69, "additions": 38, "deletions": 31}, "files": [{"sha": "31886748fa6c10e44c57e5f3aa362ddc51dffc2f", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 38, "deletions": 31, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/da5a0cd69c64e0772960caee32f36b11bca1b498/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da5a0cd69c64e0772960caee32f36b11bca1b498/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=da5a0cd69c64e0772960caee32f36b11bca1b498", "patch": "@@ -178,45 +178,36 @@ integer! { i32, u32 }\n integer! { i64, u64 }\n integer! { i128, u128 }\n \n-const DEC_DIGITS_LUT: &'static[u8] =\n+\n+static DEC_DIGITS_LUT: &[u8; 200] =\n     b\"0001020304050607080910111213141516171819\\\n       2021222324252627282930313233343536373839\\\n       4041424344454647484950515253545556575859\\\n       6061626364656667686970717273747576777879\\\n       8081828384858687888990919293949596979899\";\n \n macro_rules! impl_Display {\n-    ($($t:ident),*: $conv_fn:ident) => ($(\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    impl fmt::Display for $t {\n-        #[allow(unused_comparisons)]\n-        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-            let is_nonnegative = *self >= 0;\n-            let mut n = if is_nonnegative {\n-                self.$conv_fn()\n-            } else {\n-                // convert the negative num to positive by summing 1 to it's 2 complement\n-                (!self.$conv_fn()).wrapping_add(1)\n-            };\n+    ($($t:ident),* as $u:ident via $conv_fn:ident named $name:ident) => {\n+        fn $name(mut n: $u, is_nonnegative: bool, f: &mut fmt::Formatter) -> fmt::Result {\n             let mut buf = uninitialized_array![u8; 39];\n             let mut curr = buf.len() as isize;\n             let buf_ptr = MaybeUninit::first_ptr_mut(&mut buf);\n             let lut_ptr = DEC_DIGITS_LUT.as_ptr();\n \n             unsafe {\n                 // need at least 16 bits for the 4-characters-at-a-time to work.\n-                if ::mem::size_of::<$t>() >= 2 {\n-                    // eagerly decode 4 characters at a time\n-                    while n >= 10000 {\n-                        let rem = (n % 10000) as isize;\n-                        n /= 10000;\n+                assert!(::mem::size_of::<$u>() >= 2);\n+\n+                // eagerly decode 4 characters at a time\n+                while n >= 10000 {\n+                    let rem = (n % 10000) as isize;\n+                    n /= 10000;\n \n-                        let d1 = (rem / 100) << 1;\n-                        let d2 = (rem % 100) << 1;\n-                        curr -= 4;\n-                        ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);\n-                        ptr::copy_nonoverlapping(lut_ptr.offset(d2), buf_ptr.offset(curr + 2), 2);\n-                    }\n+                    let d1 = (rem / 100) << 1;\n+                    let d2 = (rem % 100) << 1;\n+                    curr -= 4;\n+                    ptr::copy_nonoverlapping(lut_ptr.offset(d1), buf_ptr.offset(curr), 2);\n+                    ptr::copy_nonoverlapping(lut_ptr.offset(d2), buf_ptr.offset(curr + 2), 2);\n                 }\n \n                 // if we reach here numbers are <= 9999, so at most 4 chars long\n@@ -247,15 +238,31 @@ macro_rules! impl_Display {\n             };\n             f.pad_integral(is_nonnegative, \"\", buf_slice)\n         }\n-    })*);\n+\n+        $(\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            impl fmt::Display for $t {\n+                #[allow(unused_comparisons)]\n+                fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+                    let is_nonnegative = *self >= 0;\n+                    let n = if is_nonnegative {\n+                        self.$conv_fn()\n+                    } else {\n+                        // convert the negative num to positive by summing 1 to it's 2 complement\n+                        (!self.$conv_fn()).wrapping_add(1)\n+                    };\n+                    $name(n, is_nonnegative, f)\n+                }\n+            })*\n+    };\n }\n \n-impl_Display!(i8, u8, i16, u16, i32, u32: to_u32);\n-impl_Display!(i64, u64: to_u64);\n-impl_Display!(i128, u128: to_u128);\n+impl_Display!(i8, u8, i16, u16, i32, u32 as u32 via to_u32 named fmt_u32);\n+impl_Display!(i64, u64 as u64 via to_u64 named fmt_u64);\n+impl_Display!(i128, u128 as u128 via to_u128 named fmt_u128);\n #[cfg(target_pointer_width = \"16\")]\n-impl_Display!(isize, usize: to_u16);\n+impl_Display!(isize, usize as u16 via to_u16 named fmt_usize);\n #[cfg(target_pointer_width = \"32\")]\n-impl_Display!(isize, usize: to_u32);\n+impl_Display!(isize, usize as u32 via to_u32 named fmt_usize);\n #[cfg(target_pointer_width = \"64\")]\n-impl_Display!(isize, usize: to_u64);\n+impl_Display!(isize, usize as u64 via to_u64 named fmt_usize);"}]}