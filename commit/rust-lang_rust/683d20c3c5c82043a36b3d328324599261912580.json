{"sha": "683d20c3c5c82043a36b3d328324599261912580", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4M2QyMGMzYzVjODIwNDNhMzZiM2QzMjgzMjQ1OTkyNjE5MTI1ODA=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-07T18:26:51Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-01-16T07:18:55Z"}, "message": "Record negative trait_impls separatedly", "tree": {"sha": "bc1ecb53a7085f844d9960fce2d08adbd2b93bae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc1ecb53a7085f844d9960fce2d08adbd2b93bae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/683d20c3c5c82043a36b3d328324599261912580", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/683d20c3c5c82043a36b3d328324599261912580", "html_url": "https://github.com/rust-lang/rust/commit/683d20c3c5c82043a36b3d328324599261912580", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/683d20c3c5c82043a36b3d328324599261912580/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b565501ad8b4e371e0aca0069c3f4781bd209254", "url": "https://api.github.com/repos/rust-lang/rust/commits/b565501ad8b4e371e0aca0069c3f4781bd209254", "html_url": "https://github.com/rust-lang/rust/commit/b565501ad8b4e371e0aca0069c3f4781bd209254"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "e34fb37e1c5551b499270a49387b193550fc07b7", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/683d20c3c5c82043a36b3d328324599261912580/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/683d20c3c5c82043a36b3d328324599261912580/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=683d20c3c5c82043a36b3d328324599261912580", "patch": "@@ -262,6 +262,15 @@ pub fn get_field_type<'tcx>(tcx: &ty::ctxt<'tcx>, class_id: ast::DefId,\n     }\n }\n \n+pub fn get_impl_polarity<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                               def: ast::DefId)\n+                               -> Option<ast::ImplPolarity>\n+{\n+    let cstore = &tcx.sess.cstore;\n+    let cdata = cstore.get_crate_data(def.krate);\n+    decoder::get_impl_polarity(&*cdata, def.node)\n+}\n+\n // Given a def_id for an impl, return the trait it implements,\n // if there is one.\n pub fn get_impl_trait<'tcx>(tcx: &ty::ctxt<'tcx>,"}, {"sha": "6bf1798d246a409e5b36e7d0531380e6e965c54d", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/683d20c3c5c82043a36b3d328324599261912580/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/683d20c3c5c82043a36b3d328324599261912580/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=683d20c3c5c82043a36b3d328324599261912580", "patch": "@@ -371,6 +371,15 @@ fn parse_unsafety(item_doc: rbml::Doc) -> ast::Unsafety {\n     }\n }\n \n+fn parse_polarity(item_doc: rbml::Doc) -> ast::ImplPolarity {\n+    let polarity_doc = reader::get_doc(item_doc, tag_polarity);\n+    if reader::doc_as_u8(polarity_doc) != 0 {\n+        ast::ImplPolarity::Negative\n+    } else {\n+        ast::ImplPolarity::Positive\n+    }\n+}\n+\n fn parse_associated_type_names(item_doc: rbml::Doc) -> Vec<ast::Name> {\n     let names_doc = reader::get_doc(item_doc, tag_associated_type_names);\n     let mut names = Vec::new();\n@@ -436,6 +445,20 @@ pub fn get_repr_attrs(cdata: Cmd, id: ast::NodeId) -> Vec<attr::ReprAttr> {\n     }\n }\n \n+pub fn get_impl_polarity<'tcx>(cdata: Cmd,\n+                               id: ast::NodeId)\n+                               -> Option<ast::ImplPolarity>\n+{\n+    let item_doc = lookup_item(id, cdata.data());\n+    let fam = item_family(item_doc);\n+    match fam {\n+        Family::Impl => {\n+            Some(parse_polarity(item_doc))\n+        }\n+        _ => None\n+    }\n+}\n+\n pub fn get_impl_trait<'tcx>(cdata: Cmd,\n                             id: ast::NodeId,\n                             tcx: &ty::ctxt<'tcx>)"}, {"sha": "fdd4b975caa234a9e6521adc3e2312a4075e394b", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/683d20c3c5c82043a36b3d328324599261912580/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/683d20c3c5c82043a36b3d328324599261912580/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=683d20c3c5c82043a36b3d328324599261912580", "patch": "@@ -750,6 +750,9 @@ pub struct ctxt<'tcx> {\n     /// Maps a trait onto a list of impls of that trait.\n     pub trait_impls: RefCell<DefIdMap<Rc<RefCell<Vec<ast::DefId>>>>>,\n \n+    /// Maps a trait onto a list of negative impls of that trait.\n+    pub trait_negative_impls: RefCell<DefIdMap<Rc<RefCell<Vec<ast::DefId>>>>>,\n+\n     /// Maps a DefId of a type to a list of its inherent impls.\n     /// Contains implementations of methods that are inherent to a type.\n     /// Methods in these implementations don't need to be exported.\n@@ -2412,6 +2415,7 @@ pub fn mk_ctxt<'tcx>(s: Session,\n         destructor_for_type: RefCell::new(DefIdMap::new()),\n         destructors: RefCell::new(DefIdSet::new()),\n         trait_impls: RefCell::new(DefIdMap::new()),\n+        trait_negative_impls: RefCell::new(DefIdMap::new()),\n         inherent_impls: RefCell::new(DefIdMap::new()),\n         impl_items: RefCell::new(DefIdMap::new()),\n         used_unsafe: RefCell::new(NodeSet::new()),\n@@ -5035,6 +5039,23 @@ pub fn trait_items<'tcx>(cx: &ctxt<'tcx>, trait_did: ast::DefId)\n     }\n }\n \n+pub fn trait_impl_polarity<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)\n+                            -> Option<ast::ImplPolarity> {\n+     if id.krate == ast::LOCAL_CRATE {\n+         match cx.map.find(id.node) {\n+             Some(ast_map::NodeItem(item)) => {\n+                 match item.node {\n+                     ast::ItemImpl(_, polarity, _, _, _, _) => Some(polarity),\n+                     _ => None\n+                 }\n+             }\n+             _ => None\n+         }\n+     } else {\n+         csearch::get_impl_polarity(cx, id)\n+     }\n+}\n+\n pub fn impl_or_trait_item<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)\n                                 -> ImplOrTraitItem<'tcx> {\n     lookup_locally_or_in_crate_store(\"impl_or_trait_items\",\n@@ -5984,14 +6005,23 @@ pub fn item_variances(tcx: &ctxt, item_id: ast::DefId) -> Rc<ItemVariances> {\n pub fn record_trait_implementation(tcx: &ctxt,\n                                    trait_def_id: DefId,\n                                    impl_def_id: DefId) {\n-    match tcx.trait_impls.borrow().get(&trait_def_id) {\n+\n+    let trait_impls = match trait_impl_polarity(tcx, impl_def_id)  {\n+        Some(ast::ImplPolarity::Positive) => &tcx.trait_impls,\n+        Some(ast::ImplPolarity::Negative) => &tcx.trait_negative_impls,\n+        _ => tcx.sess.bug(&format!(\"tried to record a non-impl item with id {:?}\",\n+                                  impl_def_id)[])\n+    };\n+\n+    match trait_impls.borrow().get(&trait_def_id) {\n         Some(impls_for_trait) => {\n             impls_for_trait.borrow_mut().push(impl_def_id);\n             return;\n         }\n         None => {}\n     }\n-    tcx.trait_impls.borrow_mut().insert(trait_def_id, Rc::new(RefCell::new(vec!(impl_def_id))));\n+\n+    trait_impls.borrow_mut().insert(trait_def_id, Rc::new(RefCell::new(vec!(impl_def_id))));\n }\n \n /// Populates the type context with all the implementations for the given type"}]}