{"sha": "1893ac6db3b20d9fdd777ec28b286987a13b543d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4OTNhYzZkYjNiMjBkOWZkZDc3N2VjMjhiMjg2OTg3YTEzYjU0M2Q=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-26T16:56:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-26T16:56:53Z"}, "message": "Rollup merge of #62963 - estebank:homoglyph-recovery, r=petrochenkov\n\nAllow lexer to recover from some homoglyphs", "tree": {"sha": "e167edaed7ff2996dea7e311094e3b27987c000b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e167edaed7ff2996dea7e311094e3b27987c000b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1893ac6db3b20d9fdd777ec28b286987a13b543d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdOzDVCRBK7hj4Ov3rIwAAdHIIACEcLV2zPi/W24MqjHO2ElZn\ngG3yFIB5wRTT3AY/xjK/95HENCsNL4PJ2vcIHxRrCsQUqdGs8hUq4YAqjEksECZo\na/CfMa9LJaDbL9WCCwrim+yBR7TDs1mnyGXZ0BG1FwzRxhS4hqqzqPNFbeo1Ieb4\ndftjgbi+mhQonn58gVBSlgCZ1GCHpgwxP4zIrP4z8Ld/TSaE/0IVlahQQagcvRxT\nr1yE84v9rp+KhGvHvnSPr0WO+109/NYOPTZ5CH00XNgt2GmbBT9gXjb1OGApqn1Z\nfzp1m6z8ZwH2o1xBKXmmca5+XG96w71YaYzrVdXE3A2HmRudeEkFq+6oPeln8XE=\n=32BP\n-----END PGP SIGNATURE-----\n", "payload": "tree e167edaed7ff2996dea7e311094e3b27987c000b\nparent c6c8693b4c2c6a63a86478112ff617a67e1f6bf6\nparent 684497648ae22a69df80d410de643385c2cc86d4\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564160213 +0200\ncommitter GitHub <noreply@github.com> 1564160213 +0200\n\nRollup merge of #62963 - estebank:homoglyph-recovery, r=petrochenkov\n\nAllow lexer to recover from some homoglyphs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1893ac6db3b20d9fdd777ec28b286987a13b543d", "html_url": "https://github.com/rust-lang/rust/commit/1893ac6db3b20d9fdd777ec28b286987a13b543d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1893ac6db3b20d9fdd777ec28b286987a13b543d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6c8693b4c2c6a63a86478112ff617a67e1f6bf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6c8693b4c2c6a63a86478112ff617a67e1f6bf6", "html_url": "https://github.com/rust-lang/rust/commit/c6c8693b4c2c6a63a86478112ff617a67e1f6bf6"}, {"sha": "684497648ae22a69df80d410de643385c2cc86d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/684497648ae22a69df80d410de643385c2cc86d4", "html_url": "https://github.com/rust-lang/rust/commit/684497648ae22a69df80d410de643385c2cc86d4"}], "stats": {"total": 125, "additions": 89, "deletions": 36}, "files": [{"sha": "52f65e1b474754b5927eb12c59136fefd4bf03f8", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1893ac6db3b20d9fdd777ec28b286987a13b543d/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1893ac6db3b20d9fdd777ec28b286987a13b543d/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=1893ac6db3b20d9fdd777ec28b286987a13b543d", "patch": "@@ -389,8 +389,18 @@ impl<'a> StringReader<'a> {\n                                                           self.pos,\n                                                           \"unknown start of token\",\n                                                           c);\n-                unicode_chars::check_for_substitution(self, start, c, &mut err);\n-                return Err(err)\n+                // FIXME: the lexer could be used to turn the ASCII version of unicode homoglyphs,\n+                // instead of keeping a table in `check_for_substitution`into the token. Ideally,\n+                // this should be inside `rustc_lexer`. However, we should first remove compound\n+                // tokens like `<<` from `rustc_lexer`, and then add fancier error recovery to it,\n+                // as there will be less overall work to do this way.\n+                return match unicode_chars::check_for_substitution(self, start, c, &mut err) {\n+                    Some(token) => {\n+                        err.emit();\n+                        Ok(token)\n+                    }\n+                    None => Err(err),\n+                }\n             }\n         };\n         Ok(kind)"}, {"sha": "eaa736c6a351741a71ee29675592695bbb92dc67", "filename": "src/libsyntax/parse/lexer/unicode_chars.rs", "status": "modified", "additions": 40, "deletions": 33, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/1893ac6db3b20d9fdd777ec28b286987a13b543d/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1893ac6db3b20d9fdd777ec28b286987a13b543d/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs?ref=1893ac6db3b20d9fdd777ec28b286987a13b543d", "patch": "@@ -3,7 +3,8 @@\n \n use super::StringReader;\n use errors::{Applicability, DiagnosticBuilder};\n-use syntax_pos::{BytePos, Pos, Span, NO_EXPANSION};\n+use syntax_pos::{BytePos, Pos, Span, NO_EXPANSION, symbol::kw};\n+use crate::parse::token;\n \n #[rustfmt::skip] // for line breaks\n const UNICODE_ARRAY: &[(char, &str, char)] = &[\n@@ -297,53 +298,59 @@ const UNICODE_ARRAY: &[(char, &str, char)] = &[\n     ('\uff1e', \"Fullwidth Greater-Than Sign\", '>'),\n ];\n \n-const ASCII_ARRAY: &[(char, &str)] = &[\n-    (' ', \"Space\"),\n-    ('_', \"Underscore\"),\n-    ('-', \"Minus/Hyphen\"),\n-    (',', \"Comma\"),\n-    (';', \"Semicolon\"),\n-    (':', \"Colon\"),\n-    ('!', \"Exclamation Mark\"),\n-    ('?', \"Question Mark\"),\n-    ('.', \"Period\"),\n-    ('\\'', \"Single Quote\"),\n-    ('\"', \"Quotation Mark\"),\n-    ('(', \"Left Parenthesis\"),\n-    (')', \"Right Parenthesis\"),\n-    ('[', \"Left Square Bracket\"),\n-    (']', \"Right Square Bracket\"),\n-    ('{', \"Left Curly Brace\"),\n-    ('}', \"Right Curly Brace\"),\n-    ('*', \"Asterisk\"),\n-    ('/', \"Slash\"),\n-    ('\\\\', \"Backslash\"),\n-    ('&', \"Ampersand\"),\n-    ('+', \"Plus Sign\"),\n-    ('<', \"Less-Than Sign\"),\n-    ('=', \"Equals Sign\"),\n-    ('>', \"Greater-Than Sign\"),\n+// FIXME: the lexer could be used to turn the ASCII version of unicode homoglyphs, instead of\n+// keeping the substitution token in this table. Ideally, this should be inside `rustc_lexer`.\n+// However, we should first remove compound tokens like `<<` from `rustc_lexer`, and then add\n+// fancier error recovery to it, as there will be less overall work to do this way.\n+const ASCII_ARRAY: &[(char, &str, Option<token::TokenKind>)] = &[\n+    (' ', \"Space\", Some(token::Whitespace)),\n+    ('_', \"Underscore\", Some(token::Ident(kw::Underscore, false))),\n+    ('-', \"Minus/Hyphen\", Some(token::BinOp(token::Minus))),\n+    (',', \"Comma\", Some(token::Comma)),\n+    (';', \"Semicolon\", Some(token::Semi)),\n+    (':', \"Colon\", Some(token::Colon)),\n+    ('!', \"Exclamation Mark\", Some(token::Not)),\n+    ('?', \"Question Mark\", Some(token::Question)),\n+    ('.', \"Period\", Some(token::Dot)),\n+    ('(', \"Left Parenthesis\", Some(token::OpenDelim(token::Paren))),\n+    (')', \"Right Parenthesis\", Some(token::CloseDelim(token::Paren))),\n+    ('[', \"Left Square Bracket\", Some(token::OpenDelim(token::Bracket))),\n+    (']', \"Right Square Bracket\", Some(token::CloseDelim(token::Bracket))),\n+    ('{', \"Left Curly Brace\", Some(token::OpenDelim(token::Brace))),\n+    ('}', \"Right Curly Brace\", Some(token::CloseDelim(token::Brace))),\n+    ('*', \"Asterisk\", Some(token::BinOp(token::Star))),\n+    ('/', \"Slash\", Some(token::BinOp(token::Slash))),\n+    ('\\\\', \"Backslash\", None),\n+    ('&', \"Ampersand\", Some(token::BinOp(token::And))),\n+    ('+', \"Plus Sign\", Some(token::BinOp(token::Plus))),\n+    ('<', \"Less-Than Sign\", Some(token::Lt)),\n+    ('=', \"Equals Sign\", Some(token::Eq)),\n+    ('>', \"Greater-Than Sign\", Some(token::Gt)),\n+    // FIXME: Literals are already lexed by this point, so we can't recover gracefully just by\n+    // spitting the correct token out.\n+    ('\\'', \"Single Quote\", None),\n+    ('\"', \"Quotation Mark\", None),\n ];\n \n crate fn check_for_substitution<'a>(\n     reader: &StringReader<'a>,\n     pos: BytePos,\n     ch: char,\n     err: &mut DiagnosticBuilder<'a>,\n-) -> bool {\n+) -> Option<token::TokenKind> {\n     let (u_name, ascii_char) = match UNICODE_ARRAY.iter().find(|&&(c, _, _)| c == ch) {\n         Some(&(_u_char, u_name, ascii_char)) => (u_name, ascii_char),\n-        None => return false,\n+        None => return None,\n     };\n \n     let span = Span::new(pos, pos + Pos::from_usize(ch.len_utf8()), NO_EXPANSION);\n \n-    let ascii_name = match ASCII_ARRAY.iter().find(|&&(c, _)| c == ascii_char) {\n-        Some((_ascii_char, ascii_name)) => ascii_name,\n+    let (ascii_name, token) = match ASCII_ARRAY.iter().find(|&&(c, _, _)| c == ascii_char) {\n+        Some((_ascii_char, ascii_name, token)) => (ascii_name, token),\n         None => {\n             let msg = format!(\"substitution character not found for '{}'\", ch);\n             reader.sess.span_diagnostic.span_bug_no_panic(span, &msg);\n-            return false;\n+            return None;\n         }\n     };\n \n@@ -371,7 +378,7 @@ crate fn check_for_substitution<'a>(\n         );\n         err.span_suggestion(span, &msg, ascii_char.to_string(), Applicability::MaybeIncorrect);\n     }\n-    true\n+    token.clone()\n }\n \n /// Extract string if found at current position with given delimiters"}, {"sha": "66d562d2eb51985020bf9721a3551eafff28ca58", "filename": "src/test/ui/did_you_mean/issue-49746-unicode-confusable-in-float-literal-expt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1893ac6db3b20d9fdd777ec28b286987a13b543d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1893ac6db3b20d9fdd777ec28b286987a13b543d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.rs?ref=1893ac6db3b20d9fdd777ec28b286987a13b543d", "patch": "@@ -1,5 +1,6 @@\n const UNIVERSAL_GRAVITATIONAL_CONSTANT: f64 = 6.674e\u221211; // m\u00b3\u22c5kg\u207b\u00b9\u22c5s\u207b\u00b2\n //~^ ERROR expected at least one digit in exponent\n //~| ERROR unknown start of token: \\u{2212}\n+//~| ERROR cannot subtract `{integer}` from `{float}`\n \n fn main() {}"}, {"sha": "9ee86adec52d9b27f92426fb6e238e526ffb0497", "filename": "src/test/ui/did_you_mean/issue-49746-unicode-confusable-in-float-literal-expt.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1893ac6db3b20d9fdd777ec28b286987a13b543d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1893ac6db3b20d9fdd777ec28b286987a13b543d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-49746-unicode-confusable-in-float-literal-expt.stderr?ref=1893ac6db3b20d9fdd777ec28b286987a13b543d", "patch": "@@ -14,5 +14,14 @@ help: Unicode character '\u2212' (Minus Sign) looks like '-' (Minus/Hyphen), but it\n LL | const UNIVERSAL_GRAVITATIONAL_CONSTANT: f64 = 6.674e-11; // m\u00b3\u22c5kg\u207b\u00b9\u22c5s\u207b\u00b2\n    |                                                     ^\n \n-error: aborting due to 2 previous errors\n+error[E0277]: cannot subtract `{integer}` from `{float}`\n+  --> $DIR/issue-49746-unicode-confusable-in-float-literal-expt.rs:1:53\n+   |\n+LL | const UNIVERSAL_GRAVITATIONAL_CONSTANT: f64 = 6.674e\u221211; // m\u00b3\u22c5kg\u207b\u00b9\u22c5s\u207b\u00b2\n+   |                                                     ^ no implementation for `{float} - {integer}`\n+   |\n+   = help: the trait `std::ops::Sub<{integer}>` is not implemented for `{float}`\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "99ce0d1a630df73ba67259e60aa862f0d3f9585d", "filename": "src/test/ui/parser/recover-from-homoglyph.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1893ac6db3b20d9fdd777ec28b286987a13b543d/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1893ac6db3b20d9fdd777ec28b286987a13b543d/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.rs?ref=1893ac6db3b20d9fdd777ec28b286987a13b543d", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    println!(\"\")\u037e //~ ERROR unknown start of token: \\u{37e}\n+    let x: usize = (); //~ ERROR mismatched types\n+}"}, {"sha": "424d492b7ba649523efc607377934862ef0e7b04", "filename": "src/test/ui/parser/recover-from-homoglyph.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1893ac6db3b20d9fdd777ec28b286987a13b543d/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1893ac6db3b20d9fdd777ec28b286987a13b543d/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-homoglyph.stderr?ref=1893ac6db3b20d9fdd777ec28b286987a13b543d", "patch": "@@ -0,0 +1,22 @@\n+error: unknown start of token: \\u{37e}\n+  --> $DIR/recover-from-homoglyph.rs:2:17\n+   |\n+LL |     println!(\"\")\u037e\n+   |                 ^\n+help: Unicode character '\u037e' (Greek Question Mark) looks like ';' (Semicolon), but it is not\n+   |\n+LL |     println!(\"\");\n+   |                 ^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/recover-from-homoglyph.rs:3:20\n+   |\n+LL |     let x: usize = ();\n+   |                    ^^ expected usize, found ()\n+   |\n+   = note: expected type `usize`\n+              found type `()`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}