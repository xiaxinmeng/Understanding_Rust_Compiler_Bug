{"sha": "d09f569aac99a4ef2f577d288d547504e3dcf588", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwOWY1NjlhYWM5OWE0ZWYyZjU3N2QyODhkNTQ3NTA0ZTNkY2Y1ODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-09T07:26:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-09T07:26:07Z"}, "message": "auto merge of #9065 : thestinger/rust/iter, r=alexcrichton\n\nThe trait will keep the `Iterator` naming, but a more concise module\r\nname makes using the free functions less verbose. The module will define\r\niterables in addition to iterators, as it deals with iteration in\r\ngeneral.", "tree": {"sha": "339ac953153d71da8730569b8bd26b41dc081539", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/339ac953153d71da8730569b8bd26b41dc081539"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d09f569aac99a4ef2f577d288d547504e3dcf588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d09f569aac99a4ef2f577d288d547504e3dcf588", "html_url": "https://github.com/rust-lang/rust/commit/d09f569aac99a4ef2f577d288d547504e3dcf588", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d09f569aac99a4ef2f577d288d547504e3dcf588/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eae327032c775813eeb101233a4f7df24eab0a6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eae327032c775813eeb101233a4f7df24eab0a6a", "html_url": "https://github.com/rust-lang/rust/commit/eae327032c775813eeb101233a4f7df24eab0a6a"}, {"sha": "6919cf5fe14701621437fcb57f3a0c38fb394c65", "url": "https://api.github.com/repos/rust-lang/rust/commits/6919cf5fe14701621437fcb57f3a0c38fb394c65", "html_url": "https://github.com/rust-lang/rust/commit/6919cf5fe14701621437fcb57f3a0c38fb394c65"}], "stats": {"total": 184, "additions": 89, "deletions": 95}, "files": [{"sha": "4ec9ac4b45aabcfede22aafe986333e8350f2638", "filename": "doc/tutorial-container.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/doc%2Ftutorial-container.md", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/doc%2Ftutorial-container.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-container.md?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -200,7 +200,7 @@ for i in range(0, 5) {\n   printf!(\"%d \", i) // prints \"0 1 2 3 4\"\n }\n \n-for i in std::iterator::range_inclusive(0, 5) { // needs explicit import\n+for i in std::iter::range_inclusive(0, 5) { // needs explicit import\n   printf!(\"%d \", i) // prints \"0 1 2 3 4 5\"\n }\n ~~~"}, {"sha": "a58c5767ead15d38b75bbe36c44d6812eddcad18", "filename": "src/etc/unicode.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -310,7 +310,7 @@ def emit_decomp_module(f, canon, compat, combine):\n         + \"        bsearch_range_value_table(c, combining_class_table)\\n\"\n         + \"    }\\n\\n\")\n     f.write(\"    fn d(c: char, i: &fn(char), k: bool) {\\n\")\n-    f.write(\"        use iterator::Iterator;\\n\");\n+    f.write(\"        use iter::Iterator;\\n\");\n \n     f.write(\"        if c <= '\\\\x7f' { i(c); return; }\\n\")\n "}, {"sha": "780527e4532cce04a2c849c81b2c7a36ffebd3c5", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -12,8 +12,8 @@\n \n \n use std::cmp;\n-use std::iterator::RandomAccessIterator;\n-use std::iterator::{Invert, Enumerate, Repeat, Map, Zip};\n+use std::iter::RandomAccessIterator;\n+use std::iter::{Invert, Enumerate, Repeat, Map, Zip};\n use std::num;\n use std::ops;\n use std::uint;"}, {"sha": "ac296ad527ee5f973f26e5a979e8f4de1a86b2d1", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -25,8 +25,8 @@\n use std::cast;\n use std::ptr;\n use std::util;\n-use std::iterator::{FromIterator, Extendable, Invert};\n-use std::iterator;\n+use std::iter::Invert;\n+use std::iter;\n \n use container::Deque;\n \n@@ -593,27 +593,27 @@ impl<A> Extendable<A> for DList<A> {\n impl<A: Eq> Eq for DList<A> {\n     fn eq(&self, other: &DList<A>) -> bool {\n         self.len() == other.len() &&\n-            iterator::order::eq(self.iter(), other.iter())\n+            iter::order::eq(self.iter(), other.iter())\n     }\n \n     fn ne(&self, other: &DList<A>) -> bool {\n         self.len() != other.len() ||\n-            iterator::order::ne(self.iter(), other.iter())\n+            iter::order::ne(self.iter(), other.iter())\n     }\n }\n \n impl<A: Eq + Ord> Ord for DList<A> {\n     fn lt(&self, other: &DList<A>) -> bool {\n-        iterator::order::lt(self.iter(), other.iter())\n+        iter::order::lt(self.iter(), other.iter())\n     }\n     fn le(&self, other: &DList<A>) -> bool {\n-        iterator::order::le(self.iter(), other.iter())\n+        iter::order::le(self.iter(), other.iter())\n     }\n     fn gt(&self, other: &DList<A>) -> bool {\n-        iterator::order::gt(self.iter(), other.iter())\n+        iter::order::gt(self.iter(), other.iter())\n     }\n     fn ge(&self, other: &DList<A>) -> bool {\n-        iterator::order::ge(self.iter(), other.iter())\n+        iter::order::ge(self.iter(), other.iter())\n     }\n }\n "}, {"sha": "242faa2b4da20081a577c4ebf48b1a9227ebe1fd", "filename": "src/libextra/enum_set.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibextra%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibextra%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fenum_set.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::iterator::Iterator;\n-\n #[deriving(Clone, Eq, IterBytes, ToStr)]\n /// A specialized Set implementation to use enum types.\n pub struct EnumSet<E> {"}, {"sha": "f76dc05b2773d9e9b738f02e34dd06f5ae0c06f4", "filename": "src/libextra/json.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -18,7 +18,6 @@\n \n use std::char;\n use std::cast::transmute;\n-use std::iterator;\n use std::float;\n use std::hashmap::HashMap;\n use std::io::WriterUtil;\n@@ -489,7 +488,7 @@ pub struct Parser<T> {\n }\n \n /// Decode a json value from an Iterator<char>\n-pub fn Parser<T : iterator::Iterator<char>>(rdr: ~T) -> Parser<T> {\n+pub fn Parser<T : Iterator<char>>(rdr: ~T) -> Parser<T> {\n     let mut p = Parser {\n         rdr: rdr,\n         ch: '\\x00',\n@@ -500,7 +499,7 @@ pub fn Parser<T : iterator::Iterator<char>>(rdr: ~T) -> Parser<T> {\n     p\n }\n \n-impl<T: iterator::Iterator<char>> Parser<T> {\n+impl<T: Iterator<char>> Parser<T> {\n     pub fn parse(&mut self) -> Result<Json, Error> {\n         match self.parse_value() {\n           Ok(value) => {\n@@ -518,7 +517,7 @@ impl<T: iterator::Iterator<char>> Parser<T> {\n     }\n }\n \n-impl<T : iterator::Iterator<char>> Parser<T> {\n+impl<T : Iterator<char>> Parser<T> {\n     // FIXME: #8971: unsound\n     fn eof(&self) -> bool { self.ch == unsafe { transmute(-1u32) } }\n "}, {"sha": "2e61b7fdbdc68e4ffc91b4f99426ab06ace13241", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -2011,13 +2011,13 @@ mod bigint_tests {\n #[cfg(test)]\n mod bench {\n     use super::*;\n-    use std::{iterator, util};\n+    use std::{iter, util};\n     use std::num::{Zero, One};\n     use extra::test::BenchHarness;\n \n     fn factorial(n: uint) -> BigUint {\n         let mut f: BigUint = One::one();\n-        for i in iterator::range_inclusive(1, n) {\n+        for i in iter::range_inclusive(1, n) {\n             f = f * BigUint::from_uint(i);\n         }\n         f"}, {"sha": "6dd4759d92778c8b1e58940bedd5191aae1d44ad", "filename": "src/libextra/priority_queue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -16,7 +16,6 @@ use std::clone::Clone;\n use std::unstable::intrinsics::{move_val_init, init};\n use std::util::{replace, swap};\n use std::vec;\n-use std::iterator::{FromIterator, Extendable};\n \n /// A priority queue implemented with a binary heap\n #[deriving(Clone)]"}, {"sha": "ea8537caeb5a19f0ba6d57f5814de380dce1b3f8", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -15,7 +15,7 @@\n \n use std::num;\n use std::vec;\n-use std::iterator::{FromIterator, Invert, RandomAccessIterator, Extendable};\n+use std::iter::{Invert, RandomAccessIterator};\n \n use container::Deque;\n \n@@ -694,13 +694,13 @@ mod tests {\n \n     #[test]\n     fn test_from_iterator() {\n-        use std::iterator;\n+        use std::iter;\n         let v = ~[1,2,3,4,5,6,7];\n         let deq: RingBuf<int> = v.iter().map(|&x| x).collect();\n         let u: ~[int] = deq.iter().map(|&x| x).collect();\n         assert_eq!(u, v);\n \n-        let mut seq = iterator::count(0u, 2).take(256);\n+        let mut seq = iter::count(0u, 2).take(256);\n         let deq: RingBuf<uint> = seq.collect();\n         for (i, &x) in deq.iter().enumerate() {\n             assert_eq!(2*i, x);"}, {"sha": "983247971d30d78054ddd216085fc6949215c081", "filename": "src/libextra/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibextra%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibextra%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsmallintmap.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -15,7 +15,7 @@\n \n #[allow(missing_doc)];\n \n-use std::iterator::{Iterator, Enumerate, FilterMap, Invert};\n+use std::iter::{Enumerate, FilterMap, Invert};\n use std::util::replace;\n use std::vec::{VecIterator, VecMutIterator};\n use std::vec;"}, {"sha": "99643e643b7bb480ec6579765581629a516ee5f1", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -14,7 +14,7 @@\n \n \n use std::util::{swap, replace};\n-use std::iterator::{FromIterator, Extendable, Peekable};\n+use std::iter::{Peekable};\n use std::cmp::Ordering;\n \n // This is implemented as an AA tree, which is a simplified variation of"}, {"sha": "581e203ae9ad10d5daca0a197f3a46a3945a267f", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -18,7 +18,7 @@ use middle::typeck::method_map;\n use middle::moves;\n use util::ppaux::ty_to_str;\n \n-use std::iterator;\n+use std::iter;\n use std::num;\n use std::vec;\n use extra::sort;\n@@ -282,7 +282,7 @@ pub fn is_useful(cx: &MatchCheckCtxt, m: &matrix, v: &[@Pat]) -> useful {\n                     _ => max_len\n                   }\n                 };\n-                for n in iterator::range(0u, max_len + 1) {\n+                for n in iter::range(0u, max_len + 1) {\n                   match is_useful_specialized(cx, m, v, vec(n), n, left_ty) {\n                     not_useful => (),\n                     ref u => return *u,"}, {"sha": "14ba9244260f4d79de0e2c9b981fb6d2211895f3", "filename": "src/librustc/middle/trans/basic_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbasic_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbasic_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbasic_block.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -10,7 +10,7 @@\n \n use lib::llvm::{llvm, BasicBlockRef};\n use middle::trans::value::{UserIterator, Value};\n-use std::iterator::{Filter, Map};\n+use std::iter::{Filter, Map};\n \n pub struct BasicBlock(BasicBlockRef);\n "}, {"sha": "d69ed5d9102894561cc5bc3f1e6baba029b8b885", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -12,7 +12,7 @@\n \n use clone::Clone;\n use container::Container;\n-use iterator::Iterator;\n+use iter::Iterator;\n use option::{Option, Some, None};\n use sys;\n use unstable::raw::Repr;"}, {"sha": "51b70a07be8c66cf9f9bc06a244225bca8e5a9b7", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -9,14 +9,14 @@\n // except according to those terms.\n \n use cast;\n-use iterator::{Iterator,range};\n+use iter::{Iterator, range};\n use libc;\n use ops::Drop;\n use option::{Option, Some, None};\n use ptr::RawPtr;\n use ptr;\n use str::StrSlice;\n-use vec::{ImmutableVector,CopyableVector};\n+use vec::{ImmutableVector, CopyableVector};\n use container::Container;\n \n /// Resolution options for the `null_byte` condition"}, {"sha": "ec9e6d1ca4bc47ee3fc82a991da182027258f8e2", "filename": "src/libstd/either.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Feither.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -16,7 +16,7 @@ use option::{Some, None};\n use clone::Clone;\n use container::Container;\n use cmp::Eq;\n-use iterator::{Iterator, FilterMap};\n+use iter::{Iterator, FilterMap};\n use result::Result;\n use result;\n use str::StrSlice;"}, {"sha": "7d5033e3a6ad1579339ffe7077db16d8c0c3cc52", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -812,7 +812,7 @@ macro_rules! upper_hex(($ty:ident, $into:ident) => {\n #[doc(hidden)]\n pub fn upperhex(buf: &[u8], f: &mut Formatter) {\n     let mut local = [0u8, ..16];\n-    for i in ::iterator::range(0, buf.len()) {\n+    for i in ::iter::range(0, buf.len()) {\n         local[i] = match buf[i] as char {\n             'a' .. 'f' => (buf[i] - 'a' as u8) + 'A' as u8,\n             c => c as u8,"}, {"sha": "fd0e86d7a3177b0ef92c77245f45d1ee82d0213d", "filename": "src/libstd/fmt/parse.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Ffmt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Ffmt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fparse.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -12,7 +12,6 @@ use prelude::*;\n \n use char;\n use str;\n-use iterator;\n \n condition! { pub parse_error: ~str -> (); }\n \n@@ -152,7 +151,7 @@ pub struct Parser<'self> {\n     priv depth: uint,\n }\n \n-impl<'self> iterator::Iterator<Piece<'self>> for Parser<'self> {\n+impl<'self> Iterator<Piece<'self>> for Parser<'self> {\n     fn next(&mut self) -> Option<Piece<'self>> {\n         match self.cur.clone().next() {\n             Some((_, '#')) => { self.cur.next(); Some(CurrentArgument) }"}, {"sha": "4cce999532887b2ac4f3103418e58bf74c977af2", "filename": "src/libstd/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -22,7 +22,7 @@\n #[allow(missing_doc)];\n \n use container::Container;\n-use iterator::Iterator;\n+use iter::Iterator;\n use option::{Some, None};\n use rt::io::Writer;\n use str::OwnedStr;"}, {"sha": "fab8299f7a75ded2ab35946c36413d88621ccf0b", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -19,8 +19,8 @@ use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n use clone::Clone;\n use cmp::{Eq, Equiv};\n use hash::Hash;\n-use iterator::{Iterator, FromIterator, Extendable};\n-use iterator::{FilterMap, Chain, Repeat, Zip};\n+use iter::{Iterator, FromIterator, Extendable};\n+use iter::{FilterMap, Chain, Repeat, Zip};\n use num;\n use option::{None, Option, Some};\n use rand::RngUtil;"}, {"sha": "9919cca6729521e761ba9e3ca0b183917365104a", "filename": "src/libstd/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -52,7 +52,7 @@ use clone::Clone;\n use c_str::ToCStr;\n use container::Container;\n use int;\n-use iterator::Iterator;\n+use iter::Iterator;\n use libc::consts::os::posix88::*;\n use libc::{c_int, c_void, size_t};\n use libc;"}, {"sha": "5ca827350d01eb4fccd0a0fb572742a02bd6a8f4", "filename": "src/libstd/iter.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -363,7 +363,7 @@ pub trait Iterator<A> {\n     /// # Example\n     ///\n     /// ~~~ {.rust}\n-    /// use std::iterator::Counter;\n+    /// use std::iter::count;\n     ///\n     /// for i in count(0, 10) {\n     ///     printfln!(\"%d\", i);\n@@ -754,7 +754,7 @@ pub trait MultiplicativeIterator<A> {\n     /// # Example\n     ///\n     /// ~~~ {.rust}\n-    /// use std::iterator::Counter;\n+    /// use std::iter::count;\n     ///\n     /// fn factorial(n: uint) -> uint {\n     ///     count(1u, 1).take_while(|&i| i <= n).product()", "previous_filename": "src/libstd/iterator.rs"}, {"sha": "b72046cce72173c5317ad28c394b10f6a23f4fcc", "filename": "src/libstd/option.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -45,8 +45,8 @@ use clone::Clone;\n use cmp::{Eq,Ord};\n use util;\n use num::Zero;\n-use iterator;\n-use iterator::{Iterator, DoubleEndedIterator, ExactSize};\n+use iter;\n+use iter::{Iterator, DoubleEndedIterator, ExactSize};\n use str::{StrSlice, OwnedStr};\n use to_str::ToStr;\n use clone::DeepClone;\n@@ -60,19 +60,19 @@ pub enum Option<T> {\n \n impl<T: Eq + Ord> Ord for Option<T> {\n     fn lt(&self, other: &Option<T>) -> bool {\n-        iterator::order::lt(self.iter(), other.iter())\n+        iter::order::lt(self.iter(), other.iter())\n     }\n \n     fn le(&self, other: &Option<T>) -> bool {\n-        iterator::order::le(self.iter(), other.iter())\n+        iter::order::le(self.iter(), other.iter())\n     }\n \n     fn ge(&self, other: &Option<T>) -> bool {\n-        iterator::order::ge(self.iter(), other.iter())\n+        iter::order::ge(self.iter(), other.iter())\n     }\n \n     fn gt(&self, other: &Option<T>) -> bool {\n-        iterator::order::gt(self.iter(), other.iter())\n+        iter::order::gt(self.iter(), other.iter())\n     }\n }\n "}, {"sha": "ab1210aabadc69451fa4bdefb49b287e113d75b0", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -32,7 +32,7 @@ use c_str::ToCStr;\n use clone::Clone;\n use container::Container;\n use io;\n-use iterator::range;\n+use iter::range;\n use libc;\n use libc::{c_char, c_void, c_int, size_t};\n use libc::FILE;"}, {"sha": "336284963a25668ce723779dcf36b4049e779b78", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -21,7 +21,7 @@ use c_str;\n use clone::Clone;\n use cmp::Eq;\n use container::Container;\n-use iterator::{Iterator, range};\n+use iter::{Iterator, range};\n use libc;\n use num;\n use option::{None, Option, Some};"}, {"sha": "818b0562955bd165322622c6799a8e2d708c6194", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -40,7 +40,7 @@ pub use result::{Result, Ok, Err};\n \n // Reexported functions\n pub use io::{print, println};\n-pub use iterator::range;\n+pub use iter::range;\n pub use from_str::from_str;\n \n // Reexported types and traits\n@@ -51,9 +51,9 @@ pub use char::Char;\n pub use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n pub use hash::Hash;\n pub use num::Times;\n-pub use iterator::{FromIterator, Extendable};\n-pub use iterator::{Iterator, DoubleEndedIterator, RandomAccessIterator, ClonableIterator};\n-pub use iterator::{OrdIterator, MutableDoubleEndedIterator, ExactSize};\n+pub use iter::{FromIterator, Extendable};\n+pub use iter::{Iterator, DoubleEndedIterator, RandomAccessIterator, ClonableIterator};\n+pub use iter::{OrdIterator, MutableDoubleEndedIterator, ExactSize};\n pub use num::{Num, NumCast, CheckedAdd, CheckedSub, CheckedMul};\n pub use num::{Orderable, Signed, Unsigned, Round};\n pub use num::{Algebraic, Trigonometric, Exponential, Hyperbolic};"}, {"sha": "fafb15119738a55ad9d6f271122b6f2e41046ee0", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -14,7 +14,7 @@ use cast;\n use clone::Clone;\n #[cfg(not(test))]\n use cmp::Equiv;\n-use iterator::{range, Iterator};\n+use iter::{range, Iterator};\n use option::{Option, Some, None};\n #[cfg(stage0)]\n use sys;"}, {"sha": "813901207bb2dcca86d6b83393c44acb78478561", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -48,7 +48,7 @@ use clone::Clone;\n use cmp;\n use container::Container;\n use int;\n-use iterator::{Iterator, range};\n+use iter::{Iterator, range};\n use local_data;\n use num;\n use prelude::*;\n@@ -957,7 +957,7 @@ pub fn random<T: Rand>() -> T {\n \n #[cfg(test)]\n mod test {\n-    use iterator::{Iterator, range};\n+    use iter::{Iterator, range};\n     use option::{Option, Some};\n     use super::*;\n "}, {"sha": "e3a6e4b5f85ac09d68925358509b954234e5b8f0", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -20,7 +20,7 @@ use cast::transmute;\n use char;\n use container::Container;\n use rt::io;\n-use iterator::Iterator;\n+use iter::Iterator;\n use libc::c_void;\n use option::{Some, None};\n use ptr;"}, {"sha": "cbce2005141b75cfb1b1fc7d536cb96814235275", "filename": "src/libstd/repr_stage0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Frepr_stage0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Frepr_stage0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr_stage0.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -20,7 +20,7 @@ use cast::transmute;\n use char;\n use container::Container;\n use io::{Writer, WriterUtil};\n-use iterator::Iterator;\n+use iter::Iterator;\n use libc::c_void;\n use option::{Some, None};\n use ptr;"}, {"sha": "793086dca78dc044785fcea2faa1bf24ddb747cb", "filename": "src/libstd/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -15,7 +15,7 @@\n use clone::Clone;\n use cmp::Eq;\n use either;\n-use iterator::Iterator;\n+use iter::Iterator;\n use option::{None, Option, Some, OptionIterator};\n use vec;\n use vec::OwnedVector;\n@@ -335,7 +335,7 @@ mod tests {\n     use super::*;\n \n     use either;\n-    use iterator::range;\n+    use iter::range;\n     use str::OwnedStr;\n     use vec::ImmutableVector;\n "}, {"sha": "afa8d3261fc46ec32b08ebc6bb4a1ebb9078e4da", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -55,7 +55,7 @@ pub fn clone() -> Option<~[~str]> {\n mod imp {\n     use libc;\n     use option::{Option, Some, None};\n-    use iterator::Iterator;\n+    use iter::Iterator;\n     use str;\n     use unstable::finally::Finally;\n     use util;"}, {"sha": "e221f0ee94de72b10047cb1a686d59772358627b", "filename": "src/libstd/rt/io/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fextensions.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -15,7 +15,7 @@\n \n use uint;\n use int;\n-use iterator::Iterator;\n+use iter::Iterator;\n use vec;\n use rt::io::{Reader, Writer, Decorator};\n use rt::io::{read_error, standard_error, EndOfFile, DEFAULT_BUF_SIZE};"}, {"sha": "c9c3c4ec6daf328ca012b090f4252e9819be22de", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -59,7 +59,7 @@ Several modules in `core` are clients of `rt`:\n use cell::Cell;\n use clone::Clone;\n use container::Container;\n-use iterator::Iterator;\n+use iter::Iterator;\n use option::{Option, None, Some};\n use ptr::RawPtr;\n use rt::local::Local;"}, {"sha": "bcf9ae4a2a8410037d2f0e80ec48e8e4b62c3dba", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -27,7 +27,7 @@ use rt::rtio::{RemoteCallback, PausibleIdleCallback};\n use borrow::{to_uint};\n use cell::Cell;\n use rand::{XorShiftRng, RngUtil};\n-use iterator::{range};\n+use iter::range;\n use vec::{OwnedVector};\n \n /// A scheduler is responsible for coordinating the execution of Tasks"}, {"sha": "f35fe1a1d04abe8dc004c9e13db3da1bad5ca652", "filename": "src/libstd/rt/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -14,7 +14,7 @@ use option::{Some, None};\n use cell::Cell;\n use clone::Clone;\n use container::Container;\n-use iterator::{Iterator, range};\n+use iter::{Iterator, range};\n use super::io::net::ip::{SocketAddr, Ipv4Addr, Ipv6Addr};\n use vec::{OwnedVector, MutableVector, ImmutableVector};\n use rt::sched::Scheduler;"}, {"sha": "65910e5ad086c36b7e79934c23532cadc7f95633", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -44,7 +44,7 @@ use task;\n #[cfg(test)] use rt::test::{spawntask,\n                             next_test_ip4,\n                             run_in_newsched_task};\n-#[cfg(test)] use iterator::{Iterator, range};\n+#[cfg(test)] use iter::{Iterator, range};\n \n // XXX we should not be calling uvll functions in here.\n "}, {"sha": "94db609e9c7da46e4a1b26c855240d8824f15631", "filename": "src/libstd/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fselect.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -11,7 +11,7 @@\n use cell::Cell;\n use comm;\n use container::Container;\n-use iterator::{Iterator, DoubleEndedIterator};\n+use iter::{Iterator, DoubleEndedIterator};\n use option::*;\n // use either::{Either, Left, Right};\n // use rt::kill::BlockedTask;\n@@ -134,7 +134,7 @@ mod test {\n     use comm::GenericChan;\n     use task;\n     use cell::Cell;\n-    use iterator::{Iterator, range};\n+    use iter::{Iterator, range};\n \n     #[test] #[should_fail]\n     fn select_doesnt_get_trolled() {"}, {"sha": "65fd24b7219803bbecfd9644665c17b01b19d62c", "filename": "src/libstd/std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fstd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fstd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -140,7 +140,7 @@ pub mod borrow;\n pub mod from_str;\n #[path = \"num/num.rs\"]\n pub mod num;\n-pub mod iterator;\n+pub mod iter;\n pub mod to_str;\n pub mod to_bytes;\n pub mod clone;"}, {"sha": "0f125280c2da8ec2c789af780457ffb70e3bdffd", "filename": "src/libstd/str.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -23,9 +23,9 @@ use char::Char;\n use clone::{Clone, DeepClone};\n use container::{Container, Mutable};\n use num::Times;\n-use iterator::{Iterator, FromIterator, Extendable};\n-use iterator::{Filter, AdditiveIterator, Map};\n-use iterator::{Invert, DoubleEndedIterator, ExactSize};\n+use iter::{Iterator, FromIterator, Extendable};\n+use iter::{Filter, AdditiveIterator, Map};\n+use iter::{Invert, DoubleEndedIterator, ExactSize};\n use libc;\n use num::{Saturating};\n use option::{None, Option, Some};\n@@ -592,7 +592,7 @@ impl<'self> Iterator<&'self str> for StrSplitIterator<'self> {\n \n // Helper functions used for Unicode normalization\n fn canonical_sort(comb: &mut [(char, u8)]) {\n-    use iterator::range;\n+    use iter::range;\n     use tuple::CopyableTuple;\n \n     let len = comb.len();\n@@ -3325,7 +3325,7 @@ mod tests {\n \n     #[test]\n     fn test_iterator() {\n-        use iterator::*;\n+        use iter::*;\n         let s = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n         let v = ~['\u0e28','\u0e44','\u0e17','\u0e22','\u4e2d','\u534e','V','i','\u1ec7','t',' ','N','a','m'];\n \n@@ -3341,7 +3341,7 @@ mod tests {\n \n     #[test]\n     fn test_rev_iterator() {\n-        use iterator::*;\n+        use iter::*;\n         let s = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n         let v = ~['m', 'a', 'N', ' ', 't', '\u1ec7','i','V','\u534e','\u4e2d','\u0e22','\u0e17','\u0e44','\u0e28'];\n \n@@ -3397,7 +3397,7 @@ mod tests {\n \n     #[test]\n     fn test_char_offset_iterator() {\n-        use iterator::*;\n+        use iter::*;\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n         let p = [0, 3, 6, 9, 12, 15, 18, 19, 20, 23, 24, 25, 26, 27];\n         let v = ['\u0e28','\u0e44','\u0e17','\u0e22','\u4e2d','\u534e','V','i','\u1ec7','t',' ','N','a','m'];\n@@ -3415,7 +3415,7 @@ mod tests {\n \n     #[test]\n     fn test_char_offset_rev_iterator() {\n-        use iterator::*;\n+        use iter::*;\n         let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n         let p = [27, 26, 25, 24, 23, 20, 19, 18, 15, 12, 9, 6, 3, 0];\n         let v = ['m', 'a', 'N', ' ', 't', '\u1ec7','i','V','\u534e','\u4e2d','\u0e22','\u0e17','\u0e44','\u0e28'];"}, {"sha": "2dd93feef052eeadd816b002f4115a4cf026cc8e", "filename": "src/libstd/str/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fstr%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fstr%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr%2Fascii.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -17,7 +17,7 @@ use str::OwnedStr;\n use container::Container;\n use cast;\n use ptr;\n-use iterator::Iterator;\n+use iter::Iterator;\n use vec::{CopyableVector, ImmutableVector};\n use to_bytes::IterBytes;\n use option::{Some, None};"}, {"sha": "855cdfcb8517bbb3eeb4e4868603d2d2a24409f9", "filename": "src/libstd/to_bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_bytes.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -18,7 +18,7 @@ use cast;\n use container::Container;\n use io;\n use io::Writer;\n-use iterator::Iterator;\n+use iter::Iterator;\n use option::{None, Option, Some};\n use str::{Str, StrSlice};\n use vec::{Vector, ImmutableVector};"}, {"sha": "ff701267189eeca60d4268959ba7d4b12a75ac94", "filename": "src/libstd/to_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_str.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -19,7 +19,7 @@ use str::OwnedStr;\n use hashmap::HashMap;\n use hashmap::HashSet;\n use hash::Hash;\n-use iterator::Iterator;\n+use iter::Iterator;\n use cmp::Eq;\n use vec::ImmutableVector;\n "}, {"sha": "32797216376bef0e6d6b8d67b1317b737fdd3df0", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -11,7 +11,6 @@\n //! An ordered map and set for integer keys implemented as a radix trie\n \n use prelude::*;\n-use iterator::{FromIterator, Extendable};\n use uint;\n use util::{swap, replace};\n use vec;"}, {"sha": "d7f84a6abfbf3deaa6add1674893bb4ec11ce666", "filename": "src/libstd/unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funicode.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -3628,7 +3628,7 @@ pub mod decompose {\n     }\n \n     fn d(c: char, i: &fn(char), k: bool) {\n-        use iterator::Iterator;\n+        use iter::Iterator;\n         if c <= '\\x7f' { i(c); return; }\n \n         match bsearch_table(c, canonical_table) {"}, {"sha": "138a1cab5a0f428360672cae99c82474212a538e", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -63,7 +63,7 @@ use clone::{Clone, DeepClone};\n use container::{Container, Mutable};\n use cmp::{Eq, TotalOrd, Ordering, Less, Equal, Greater};\n use cmp;\n-use iterator::*;\n+use iter::*;\n use libc::c_void;\n use num::{Integer, Zero, CheckedAdd, Saturating};\n use option::{None, Option, Some};\n@@ -592,7 +592,7 @@ pub mod traits {\n \n     use clone::Clone;\n     use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Equiv};\n-    use iterator::order;\n+    use iter::order;\n     use ops::Add;\n \n     impl<'self,T:Eq> Eq for &'self [T] {\n@@ -3241,7 +3241,7 @@ mod tests {\n \n     #[test]\n     fn test_iterator() {\n-        use iterator::*;\n+        use iter::*;\n         let xs = [1, 2, 5, 10, 11];\n         let mut it = xs.iter();\n         assert_eq!(it.size_hint(), (5, Some(5)));\n@@ -3260,7 +3260,7 @@ mod tests {\n \n     #[test]\n     fn test_random_access_iterator() {\n-        use iterator::*;\n+        use iter::*;\n         let xs = [1, 2, 5, 10, 11];\n         let mut it = xs.iter();\n \n@@ -3299,7 +3299,7 @@ mod tests {\n \n     #[test]\n     fn test_iter_size_hints() {\n-        use iterator::*;\n+        use iter::*;\n         let mut xs = [1, 2, 5, 10, 11];\n         assert_eq!(xs.iter().size_hint(), (5, Some(5)));\n         assert_eq!(xs.rev_iter().size_hint(), (5, Some(5)));\n@@ -3320,7 +3320,7 @@ mod tests {\n \n     #[test]\n     fn test_mut_iterator() {\n-        use iterator::*;\n+        use iter::*;\n         let mut xs = [1, 2, 3, 4, 5];\n         for x in xs.mut_iter() {\n             *x += 1;\n@@ -3330,7 +3330,7 @@ mod tests {\n \n     #[test]\n     fn test_rev_iterator() {\n-        use iterator::*;\n+        use iter::*;\n \n         let xs = [1, 2, 5, 10, 11];\n         let ys = [11, 10, 5, 2, 1];\n@@ -3344,7 +3344,7 @@ mod tests {\n \n     #[test]\n     fn test_mut_rev_iterator() {\n-        use iterator::*;\n+        use iter::*;\n         let mut xs = [1u, 2, 3, 4, 5];\n         for (i,x) in xs.mut_rev_iter().enumerate() {\n             *x += i;\n@@ -3354,14 +3354,14 @@ mod tests {\n \n     #[test]\n     fn test_move_iterator() {\n-        use iterator::*;\n+        use iter::*;\n         let xs = ~[1u,2,3,4,5];\n         assert_eq!(xs.move_iter().fold(0, |a: uint, b: uint| 10*a + b), 12345);\n     }\n \n     #[test]\n     fn test_move_rev_iterator() {\n-        use iterator::*;\n+        use iter::*;\n         let xs = ~[1u,2,3,4,5];\n         assert_eq!(xs.move_rev_iter().fold(0, |a: uint, b: uint| 10*a + b), 54321);\n     }"}, {"sha": "c2f38134d1ee93c37348b5b6ca9895099c550ce4", "filename": "src/test/auxiliary/nested_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Ftest%2Fauxiliary%2Fnested_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Ftest%2Fauxiliary%2Fnested_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fnested_item.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -26,7 +26,7 @@ impl<T> Foo {\n \n // issue 8134\n pub struct Parser<T>;\n-impl<T: std::iterator::Iterator<char>> Parser<T> {\n+impl<T: std::iter::Iterator<char>> Parser<T> {\n     fn in_doctype(&mut self) {\n         static DOCTYPEPattern: [char, ..6] = ['O', 'C', 'T', 'Y', 'P', 'E'];\n     }"}, {"sha": "42e680d95e19cb0e676d5234d788b3f69617f666", "filename": "src/test/run-pass/unfold-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d09f569aac99a4ef2f577d288d547504e3dcf588/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs?ref=d09f569aac99a4ef2f577d288d547504e3dcf588", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::iterator::*;\n+use std::iter::*;\n \n // Unfold had a bug with 'self that mean it didn't work\n // cross-crate"}]}