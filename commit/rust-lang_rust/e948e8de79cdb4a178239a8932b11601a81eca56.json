{"sha": "e948e8de79cdb4a178239a8932b11601a81eca56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NDhlOGRlNzljZGI0YTE3ODIzOWE4OTMyYjExNjAxYTgxZWNhNTY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-07-06T12:43:03Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-07-07T09:30:08Z"}, "message": "Fix reexports visibility", "tree": {"sha": "c9ada6b4e12e7b22545ac7a5d5e7abe6784ef5ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9ada6b4e12e7b22545ac7a5d5e7abe6784ef5ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e948e8de79cdb4a178239a8932b11601a81eca56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e948e8de79cdb4a178239a8932b11601a81eca56", "html_url": "https://github.com/rust-lang/rust/commit/e948e8de79cdb4a178239a8932b11601a81eca56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e948e8de79cdb4a178239a8932b11601a81eca56/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84f259e44c97f787fc3dc5f5c596644b75f32e69", "url": "https://api.github.com/repos/rust-lang/rust/commits/84f259e44c97f787fc3dc5f5c596644b75f32e69", "html_url": "https://github.com/rust-lang/rust/commit/84f259e44c97f787fc3dc5f5c596644b75f32e69"}], "stats": {"total": 63, "additions": 30, "deletions": 33}, "files": [{"sha": "b3b89e6e673a29f1a438e3ce3d6d9ebaeab5e17b", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e948e8de79cdb4a178239a8932b11601a81eca56/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e948e8de79cdb4a178239a8932b11601a81eca56/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=e948e8de79cdb4a178239a8932b11601a81eca56", "patch": "@@ -41,6 +41,7 @@ type Attrs<'hir> = rustc_middle::ty::Attributes<'hir>;\n crate fn try_inline(\n     cx: &mut DocContext<'_>,\n     parent_module: DefId,\n+    import_def_id: Option<DefId>,\n     res: Res,\n     name: Symbol,\n     attrs: Option<Attrs<'_>>,\n@@ -108,7 +109,7 @@ crate fn try_inline(\n             clean::ConstantItem(build_const(cx, did))\n         }\n         Res::Def(DefKind::Macro(kind), did) => {\n-            let mac = build_macro(cx, did, name);\n+            let mac = build_macro(cx, did, name, import_def_id);\n \n             let type_kind = match kind {\n                 MacroKind::Bang => ItemType::Macro,\n@@ -123,14 +124,13 @@ crate fn try_inline(\n \n     let (attrs, cfg) = merge_attrs(cx, Some(parent_module), load_attrs(cx, did), attrs_clone);\n     cx.inlined.insert(did.into());\n-    ret.push(clean::Item::from_def_id_and_attrs_and_parts(\n-        did,\n-        Some(name),\n-        kind,\n-        box attrs,\n-        cx,\n-        cfg,\n-    ));\n+    let mut item =\n+        clean::Item::from_def_id_and_attrs_and_parts(did, Some(name), kind, box attrs, cx, cfg);\n+    if let Some(import_def_id) = import_def_id {\n+        // The visibility needs to reflect the one from the reexport and not from the \"source\" DefId.\n+        item.visibility = cx.tcx.visibility(import_def_id).clean(cx);\n+    }\n+    ret.push(item);\n     Some(ret)\n }\n \n@@ -509,7 +509,9 @@ fn build_module(\n                     )),\n                     cfg: None,\n                 });\n-            } else if let Some(i) = try_inline(cx, did, item.res, item.ident.name, None, visited) {\n+            } else if let Some(i) =\n+                try_inline(cx, did, None, item.res, item.ident.name, None, visited)\n+            {\n                 items.extend(i)\n             }\n         }\n@@ -543,13 +545,24 @@ fn build_static(cx: &mut DocContext<'_>, did: DefId, mutable: bool) -> clean::St\n     }\n }\n \n-fn build_macro(cx: &mut DocContext<'_>, def_id: DefId, name: Symbol) -> clean::ItemKind {\n+fn build_macro(\n+    cx: &mut DocContext<'_>,\n+    def_id: DefId,\n+    name: Symbol,\n+    import_def_id: Option<DefId>,\n+) -> clean::ItemKind {\n     let imported_from = cx.tcx.crate_name(def_id.krate);\n     match cx.enter_resolver(|r| r.cstore().load_macro_untracked(def_id, cx.sess())) {\n         LoadedMacro::MacroDef(item_def, _) => {\n             if let ast::ItemKind::MacroDef(ref def) = item_def.kind {\n                 clean::MacroItem(clean::Macro {\n-                    source: utils::display_macro_source(cx, name, def, def_id, item_def.vis),\n+                    source: utils::display_macro_source(\n+                        cx,\n+                        name,\n+                        def,\n+                        def_id,\n+                        cx.tcx.visibility(import_def_id.unwrap_or(def_id)),\n+                    ),\n                     imported_from: Some(imported_from),\n                 })\n             } else {"}, {"sha": "15fe840d65f6d1cacc1cde0a0e5a4a2dd0decca3", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e948e8de79cdb4a178239a8932b11601a81eca56/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e948e8de79cdb4a178239a8932b11601a81eca56/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e948e8de79cdb4a178239a8932b11601a81eca56", "patch": "@@ -10,7 +10,6 @@ crate mod types;\n crate mod utils;\n \n use rustc_ast as ast;\n-use rustc_ast_lowering::ResolverAstLowering;\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n@@ -1697,23 +1696,6 @@ impl Clean<Visibility> for hir::Visibility<'_> {\n     }\n }\n \n-impl Clean<Visibility> for ast::Visibility {\n-    fn clean(&self, cx: &mut DocContext<'_>) -> Visibility {\n-        match self.kind {\n-            ast::VisibilityKind::Public => Visibility::Public,\n-            ast::VisibilityKind::Inherited => Visibility::Inherited,\n-            ast::VisibilityKind::Crate(_) => {\n-                let krate = DefId::local(CRATE_DEF_INDEX);\n-                Visibility::Restricted(krate)\n-            }\n-            ast::VisibilityKind::Restricted { id, .. } => {\n-                let did = cx.enter_resolver(|r| r.local_def_id(id)).to_def_id();\n-                Visibility::Restricted(did)\n-            }\n-        }\n-    }\n-}\n-\n impl Clean<Visibility> for ty::Visibility {\n     fn clean(&self, _cx: &mut DocContext<'_>) -> Visibility {\n         match *self {\n@@ -2015,6 +1997,7 @@ fn clean_extern_crate(\n         if let Some(items) = inline::try_inline(\n             cx,\n             cx.tcx.parent_module(krate.hir_id()).to_def_id(),\n+            Some(krate.def_id.to_def_id()),\n             res,\n             name,\n             Some(attrs),\n@@ -2070,7 +2053,7 @@ fn clean_use_statement(\n     // forcefully don't inline if this is not public or if the\n     // #[doc(no_inline)] attribute is present.\n     // Don't inline doc(hidden) imports so they can be stripped at a later stage.\n-    let mut denied = !import.vis.node.is_pub()\n+    let mut denied = (!import.vis.node.is_pub() && !cx.render_options.document_private)\n         || pub_underscore\n         || attrs.iter().any(|a| {\n             a.has_name(sym::doc)\n@@ -2106,17 +2089,19 @@ fn clean_use_statement(\n         }\n         if !denied {\n             let mut visited = FxHashSet::default();\n+            let import_def_id = import.def_id.to_def_id();\n \n             if let Some(mut items) = inline::try_inline(\n                 cx,\n                 cx.tcx.parent_module(import.hir_id()).to_def_id(),\n+                Some(import_def_id),\n                 path.res,\n                 name,\n                 Some(attrs),\n                 &mut visited,\n             ) {\n                 items.push(Item::from_def_id_and_parts(\n-                    import.def_id.to_def_id(),\n+                    import_def_id,\n                     None,\n                     ImportItem(Import::new_simple(name, resolve_use_source(cx, path), false)),\n                     cx,"}, {"sha": "64a9905b33f155406839e3ca9a640e9643a975fc", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e948e8de79cdb4a178239a8932b11601a81eca56/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e948e8de79cdb4a178239a8932b11601a81eca56/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e948e8de79cdb4a178239a8932b11601a81eca56", "patch": "@@ -31,7 +31,6 @@ extern crate tracing;\n // Dependencies listed in Cargo.toml do not need `extern crate`.\n \n extern crate rustc_ast;\n-extern crate rustc_ast_lowering;\n extern crate rustc_ast_pretty;\n extern crate rustc_attr;\n extern crate rustc_data_structures;"}]}