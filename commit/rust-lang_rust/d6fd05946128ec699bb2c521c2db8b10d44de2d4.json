{"sha": "d6fd05946128ec699bb2c521c2db8b10d44de2d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZmQwNTk0NjEyOGVjNjk5YmIyYzUyMWMyZGI4YjEwZDQ0ZGUyZDQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-27T21:01:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-27T21:01:18Z"}, "message": "Rollup merge of #62171 - alexcrichton:more-restarts, r=eddyb\n\nrustc: Retry SIGILL linker invocations\n\nWe've seen quite a few issues with spurious illegal instructions getting\nexecuted on OSX on CI recently. For whatever reason `cc` itself is\nexecuting an illegal instruction and we're not really getting any other\ninformation about what's happening. Since we're already retrying the\nlinker when it segfaults, let's just continue to retry everything and\nautomatically reinvoke the linker when it fails with an illegal instruction.", "tree": {"sha": "f12eefc10830ac416c3e7dc3c37ef1e238756569", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f12eefc10830ac416c3e7dc3c37ef1e238756569"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6fd05946128ec699bb2c521c2db8b10d44de2d4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdFS6eCRBK7hj4Ov3rIwAAdHIIAKYLydSU3Bj3+JU/o4OBzhj/\nXH/UEa1jmlDFAkhy/HKnF+MxTU8VNmLuOlGuJGYF8KfVKnCX4yGjLtCgqueJGEpx\nBz5WSrwM+W3NZOW2AWq9a9DOXqpMLZe46ypEOfGIl6OsQyFOjXMP6NKr2Wcjf8Au\nif2lTDatT4Hobe2ieoFN2on7CPIvSOZAOl9bxcQRcCx4DVJkxYEikk0UqUcMBtym\nlw/hnYvUQ5Zcdcz6F5X8U85Rn9fiUWucgi2buc/73k/LhVKoEDUlL3iFD7lxKQot\nM3AwPqFuN/RyleG+/wm6wVZo5iuvNx/7Ci5rJELQzK/T8VLlSMgmFBiEz3Cnirs=\n=ubxn\n-----END PGP SIGNATURE-----\n", "payload": "tree f12eefc10830ac416c3e7dc3c37ef1e238756569\nparent dec2c8bd16b8a525a24260f03da1d131f659ce94\nparent b6087492ed7b78096adbdba1e086cc987f46b32d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1561669278 +0200\ncommitter GitHub <noreply@github.com> 1561669278 +0200\n\nRollup merge of #62171 - alexcrichton:more-restarts, r=eddyb\n\nrustc: Retry SIGILL linker invocations\n\nWe've seen quite a few issues with spurious illegal instructions getting\nexecuted on OSX on CI recently. For whatever reason `cc` itself is\nexecuting an illegal instruction and we're not really getting any other\ninformation about what's happening. Since we're already retrying the\nlinker when it segfaults, let's just continue to retry everything and\nautomatically reinvoke the linker when it fails with an illegal instruction.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6fd05946128ec699bb2c521c2db8b10d44de2d4", "html_url": "https://github.com/rust-lang/rust/commit/d6fd05946128ec699bb2c521c2db8b10d44de2d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6fd05946128ec699bb2c521c2db8b10d44de2d4/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dec2c8bd16b8a525a24260f03da1d131f659ce94", "url": "https://api.github.com/repos/rust-lang/rust/commits/dec2c8bd16b8a525a24260f03da1d131f659ce94", "html_url": "https://github.com/rust-lang/rust/commit/dec2c8bd16b8a525a24260f03da1d131f659ce94"}, {"sha": "b6087492ed7b78096adbdba1e086cc987f46b32d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6087492ed7b78096adbdba1e086cc987f46b32d", "html_url": "https://github.com/rust-lang/rust/commit/b6087492ed7b78096adbdba1e086cc987f46b32d"}], "stats": {"total": 71, "additions": 47, "deletions": 24}, "files": [{"sha": "618e8b8699fcc9713cd1ad550353ed71160f5341", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 47, "deletions": 24, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d6fd05946128ec699bb2c521c2db8b10d44de2d4/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6fd05946128ec699bb2c521c2db8b10d44de2d4/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=d6fd05946128ec699bb2c521c2db8b10d44de2d4", "patch": "@@ -29,7 +29,7 @@ use std::fmt;\n use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n-use std::process::{Output, Stdio};\n+use std::process::{Output, Stdio, ExitStatus};\n use std::str;\n use std::env;\n \n@@ -510,21 +510,6 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n     sess.abort_if_errors();\n \n     // Invoke the system linker\n-    //\n-    // Note that there's a terribly awful hack that really shouldn't be present\n-    // in any compiler. Here an environment variable is supported to\n-    // automatically retry the linker invocation if the linker looks like it\n-    // segfaulted.\n-    //\n-    // Gee that seems odd, normally segfaults are things we want to know about!\n-    // Unfortunately though in rust-lang/rust#38878 we're experiencing the\n-    // linker segfaulting on Travis quite a bit which is causing quite a bit of\n-    // pain to land PRs when they spuriously fail due to a segfault.\n-    //\n-    // The issue #38878 has some more debugging information on it as well, but\n-    // this unfortunately looks like it's just a race condition in macOS's linker\n-    // with some thread pool working in the background. It seems that no one\n-    // currently knows a fix for this so in the meantime we're left with this...\n     info!(\"{:?}\", &cmd);\n     let retry_on_segfault = env::var(\"RUSTC_RETRY_LINKER_ON_SEGFAULT\").is_ok();\n     let mut prog;\n@@ -567,21 +552,59 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n             info!(\"{:?}\", &cmd);\n             continue;\n         }\n+\n+        // Here's a terribly awful hack that really shouldn't be present in any\n+        // compiler. Here an environment variable is supported to automatically\n+        // retry the linker invocation if the linker looks like it segfaulted.\n+        //\n+        // Gee that seems odd, normally segfaults are things we want to know\n+        // about!  Unfortunately though in rust-lang/rust#38878 we're\n+        // experiencing the linker segfaulting on Travis quite a bit which is\n+        // causing quite a bit of pain to land PRs when they spuriously fail\n+        // due to a segfault.\n+        //\n+        // The issue #38878 has some more debugging information on it as well,\n+        // but this unfortunately looks like it's just a race condition in\n+        // macOS's linker with some thread pool working in the background. It\n+        // seems that no one currently knows a fix for this so in the meantime\n+        // we're left with this...\n         if !retry_on_segfault || i > 3 {\n             break\n         }\n         let msg_segv = \"clang: error: unable to execute command: Segmentation fault: 11\";\n         let msg_bus  = \"clang: error: unable to execute command: Bus error: 10\";\n-        if !(out.contains(msg_segv) || out.contains(msg_bus)) {\n-            break\n+        if out.contains(msg_segv) || out.contains(msg_bus) {\n+            warn!(\n+                \"looks like the linker segfaulted when we tried to call it, \\\n+                 automatically retrying again. cmd = {:?}, out = {}.\",\n+                cmd,\n+                out,\n+            );\n+            continue;\n         }\n \n-        warn!(\n-            \"looks like the linker segfaulted when we tried to call it, \\\n-             automatically retrying again. cmd = {:?}, out = {}.\",\n-            cmd,\n-            out,\n-        );\n+        if is_illegal_instruction(&output.status) {\n+            warn!(\n+                \"looks like the linker hit an illegal instruction when we \\\n+                 tried to call it, automatically retrying again. cmd = {:?}, ]\\\n+                 out = {}, status = {}.\",\n+                cmd,\n+                out,\n+                output.status,\n+            );\n+            continue;\n+        }\n+\n+        #[cfg(unix)]\n+        fn is_illegal_instruction(status: &ExitStatus) -> bool {\n+            use std::os::unix::prelude::*;\n+            status.signal() == Some(libc::SIGILL)\n+        }\n+\n+        #[cfg(windows)]\n+        fn is_illegal_instruction(_status: &ExitStatus) -> bool {\n+            false\n+        }\n     }\n \n     match prog {"}]}