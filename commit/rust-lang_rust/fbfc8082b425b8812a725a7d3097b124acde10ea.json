{"sha": "fbfc8082b425b8812a725a7d3097b124acde10ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZmM4MDgyYjQyNWI4ODEyYTcyNWE3ZDMwOTdiMTI0YWNkZTEwZWE=", "commit": {"author": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-03-25T21:19:47Z"}, "committer": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-03-25T21:20:54Z"}, "message": "Rework documentation into examples", "tree": {"sha": "c79b54e403e6199840132df3b1601b10c55958cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c79b54e403e6199840132df3b1601b10c55958cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbfc8082b425b8812a725a7d3097b124acde10ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbfc8082b425b8812a725a7d3097b124acde10ea", "html_url": "https://github.com/rust-lang/rust/commit/fbfc8082b425b8812a725a7d3097b124acde10ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbfc8082b425b8812a725a7d3097b124acde10ea/comments", "author": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e91689cd97657ae2db5e716a5178ea4f5779570a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e91689cd97657ae2db5e716a5178ea4f5779570a", "html_url": "https://github.com/rust-lang/rust/commit/e91689cd97657ae2db5e716a5178ea4f5779570a"}], "stats": {"total": 54, "additions": 46, "deletions": 8}, "files": [{"sha": "55af518b886b0acd748ff902b58c4f15a1f374a5", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 46, "deletions": 8, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/fbfc8082b425b8812a725a7d3097b124acde10ea/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbfc8082b425b8812a725a7d3097b124acde10ea/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=fbfc8082b425b8812a725a7d3097b124acde10ea", "patch": "@@ -2483,14 +2483,6 @@ impl<T: ?Sized> Eq for *mut T {}\n /// by their address rather than comparing the values they point to\n /// (which is what the `PartialEq for &T` implementation does).\n ///\n-/// A reference in Rust is sometimes stored different than a raw\n-/// memory address.  These cases are called fat pointers.  A reference\n-/// to a slice must store both the address of the slice and the length\n-/// of the slice.  A reference to an object satisfying a trait must\n-/// also point to the vtable for the trait's methods.  Since this\n-/// function compares pointers in totality, careful consideration to\n-/// the type of the variable must be made.\n-///\n /// # Examples\n ///\n /// ```\n@@ -2508,6 +2500,52 @@ impl<T: ?Sized> Eq for *mut T {}\n /// assert!(five_ref == other_five_ref);\n /// assert!(!ptr::eq(five_ref, other_five_ref));\n /// ```\n+///\n+/// Slices are also compared by their length (fat pointers):\n+///\n+/// ```\n+/// let a = [1, 2, 3];\n+/// assert!(std::ptr::eq(&a[..3], &a[..3]));\n+/// assert!(!std::ptr::eq(&a[..2], &a[..3]));\n+/// assert!(!std::ptr::eq(&a[0..2], &a[1..3]));\n+/// ```\n+///\n+/// Traits are also compared by their implementation:\n+///\n+/// ```\n+/// #[repr(transparent)]\n+/// struct Wrapper { member: i32 }\n+///\n+/// trait Trait {}\n+/// impl Trait for Wrapper {}\n+/// impl Trait for i32 {}\n+///\n+/// fn main() {\n+///     let wrapper = Wrapper { member: 10 };\n+///\n+///     // Pointers are equal address\n+///     assert!(std::ptr::eq(\n+///         &wrapper as *const Wrapper as *const u8,\n+///         &wrapper.member as *const i32 as *const u8\n+///     ));\n+///\n+///     // Objects have equal addresses, but `Trait` has different implementations\n+///     assert!(!std::ptr::eq(\n+///         &wrapper as &Trait,\n+///         &wrapper.member as &Trait,\n+///     ));\n+///     assert!(!std::ptr::eq(\n+///         &wrapper as &Trait as *const Trait,\n+///         &wrapper.member as &Trait as *const Trait,\n+///     ));\n+///\n+///     // Converting the reference to a `*const u8` compares by address\n+///     assert!(std::ptr::eq(\n+///         &wrapper as &Trait as *const Trait as *const u8,\n+///         &wrapper.member as &Trait as *const Trait as *const u8,\n+///     ));\n+/// }\n+/// ```\n #[stable(feature = \"ptr_eq\", since = \"1.17.0\")]\n #[inline]\n pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {"}]}