{"sha": "d9a5490646f68efdb70f84713d3a418a2b2a0b00", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YTU0OTA2NDZmNjhlZmRiNzBmODQ3MTNkM2E0MThhMmIyYTBiMDA=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-15T22:19:04Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-05-23T19:46:20Z"}, "message": "Start rust-analyzer server for arbitrary rust files", "tree": {"sha": "2cad71ad7056d07c3e06c6566bd5b74a6cae5054", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cad71ad7056d07c3e06c6566bd5b74a6cae5054"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9a5490646f68efdb70f84713d3a418a2b2a0b00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a5490646f68efdb70f84713d3a418a2b2a0b00", "html_url": "https://github.com/rust-lang/rust/commit/d9a5490646f68efdb70f84713d3a418a2b2a0b00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9a5490646f68efdb70f84713d3a418a2b2a0b00/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16054887102104208f4a0fc0e75e702b85a2eae8", "url": "https://api.github.com/repos/rust-lang/rust/commits/16054887102104208f4a0fc0e75e702b85a2eae8", "html_url": "https://github.com/rust-lang/rust/commit/16054887102104208f4a0fc0e75e702b85a2eae8"}], "stats": {"total": 85, "additions": 46, "deletions": 39}, "files": [{"sha": "131a2f19a779aafa930d0584d66f32e4e1152098", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9a5490646f68efdb70f84713d3a418a2b2a0b00/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d9a5490646f68efdb70f84713d3a418a2b2a0b00/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=d9a5490646f68efdb70f84713d3a418a2b2a0b00", "patch": "@@ -23,7 +23,7 @@ function renderHoverActions(actions: ra.CommandLinkGroup[]): vscode.MarkdownStri\n     return result;\n }\n \n-export function createClient(serverPath: string, cwd: string, extraEnv: Env): lc.LanguageClient {\n+export function createClient(serverPath: string, cwd: string | undefined, extraEnv: Env): lc.LanguageClient {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n     // It might be a good idea to test if the uri points to a file."}, {"sha": "9d8620823ddf8d05946f2d4192bcb02363be908c", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9a5490646f68efdb70f84713d3a418a2b2a0b00/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d9a5490646f68efdb70f84713d3a418a2b2a0b00/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=d9a5490646f68efdb70f84713d3a418a2b2a0b00", "patch": "@@ -22,7 +22,7 @@ export class Ctx {\n         config: Config,\n         extCtx: vscode.ExtensionContext,\n         serverPath: string,\n-        cwd: string,\n+        cwd?: string,\n     ): Promise<Ctx> {\n         const client = createClient(serverPath, cwd, config.serverExtraEnv);\n "}, {"sha": "f0f47a75b64df484fab4115aa869edfea3256403", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 44, "deletions": 37, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/d9a5490646f68efdb70f84713d3a418a2b2a0b00/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d9a5490646f68efdb70f84713d3a418a2b2a0b00/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=d9a5490646f68efdb70f84713d3a418a2b2a0b00", "patch": "@@ -7,7 +7,7 @@ import * as commands from './commands';\n import { activateInlayHints } from './inlay_hints';\n import { Ctx } from './ctx';\n import { Config } from './config';\n-import { log, assert, isValidExecutable } from './util';\n+import { log, assert, isValidExecutable, isRustDocument } from './util';\n import { PersistentState } from './persistent_state';\n import { fetchRelease, download } from './net';\n import { activateTaskProvider } from './tasks';\n@@ -28,26 +28,6 @@ export async function activate(context: vscode.ExtensionContext) {\n }\n \n async function tryActivate(context: vscode.ExtensionContext) {\n-    // Register a \"dumb\" onEnter command for the case where server fails to\n-    // start.\n-    //\n-    // FIXME: refactor command registration code such that commands are\n-    // **always** registered, even if the server does not start. Use API like\n-    // this perhaps?\n-    //\n-    // ```TypeScript\n-    // registerCommand(\n-    //    factory: (Ctx) => ((Ctx) => any),\n-    //    fallback: () => any = () => vscode.window.showErrorMessage(\n-    //        \"rust-analyzer is not available\"\n-    //    ),\n-    // )\n-    const defaultOnEnter = vscode.commands.registerCommand(\n-        'rust-analyzer.onEnter',\n-        () => vscode.commands.executeCommand('default:type', { text: '\\n' }),\n-    );\n-    context.subscriptions.push(defaultOnEnter);\n-\n     const config = new Config(context);\n     const state = new PersistentState(context.globalState);\n     const serverPath = await bootstrap(config, state).catch(err => {\n@@ -67,14 +47,52 @@ async function tryActivate(context: vscode.ExtensionContext) {\n \n     const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n     if (workspaceFolder === undefined) {\n-        throw new Error(\"no folder is opened\");\n+        let rustDocuments = vscode.workspace.textDocuments.filter(document => isRustDocument(document));\n+        if (rustDocuments.length > 0) {\n+            ctx = await Ctx.create(config, context, serverPath);\n+        } else {\n+            throw new Error(\"no rust files are opened\");\n+        }\n+    } else {\n+        // Note: we try to start the server before we activate type hints so that it\n+        // registers its `onDidChangeDocument` handler before us.\n+        //\n+        // This a horribly, horribly wrong way to deal with this problem.\n+        ctx = await Ctx.create(config, context, serverPath, workspaceFolder.uri.fsPath);\n+        ctx.pushCleanup(activateTaskProvider(workspaceFolder, ctx.config));\n     }\n+    await initCommonContext(context, ctx);\n+\n+    activateInlayHints(ctx);\n+    warnAboutExtensionConflicts();\n+\n+    vscode.workspace.onDidChangeConfiguration(\n+        _ => ctx?.client?.sendNotification('workspace/didChangeConfiguration', { settings: \"\" }),\n+        null,\n+        ctx.subscriptions,\n+    );\n+}\n \n-    // Note: we try to start the server before we activate type hints so that it\n-    // registers its `onDidChangeDocument` handler before us.\n+async function initCommonContext(context: vscode.ExtensionContext, ctx: Ctx) {\n+    // Register a \"dumb\" onEnter command for the case where server fails to\n+    // start.\n+    //\n+    // FIXME: refactor command registration code such that commands are\n+    // **always** registered, even if the server does not start. Use API like\n+    // this perhaps?\n     //\n-    // This a horribly, horribly wrong way to deal with this problem.\n-    ctx = await Ctx.create(config, context, serverPath, workspaceFolder.uri.fsPath);\n+    // ```TypeScript\n+    // registerCommand(\n+    //    factory: (Ctx) => ((Ctx) => any),\n+    //    fallback: () => any = () => vscode.window.showErrorMessage(\n+    //        \"rust-analyzer is not available\"\n+    //    ),\n+    // )\n+    const defaultOnEnter = vscode.commands.registerCommand(\n+        'rust-analyzer.onEnter',\n+        () => vscode.commands.executeCommand('default:type', { text: '\\n' }),\n+    );\n+    context.subscriptions.push(defaultOnEnter);\n \n     await setContextValue(RUST_PROJECT_CONTEXT_NAME, true);\n \n@@ -134,17 +152,6 @@ async function tryActivate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('resolveCodeAction', commands.resolveCodeAction);\n     ctx.registerCommand('applyActionGroup', commands.applyActionGroup);\n     ctx.registerCommand('gotoLocation', commands.gotoLocation);\n-\n-    ctx.pushCleanup(activateTaskProvider(workspaceFolder, ctx.config));\n-\n-    activateInlayHints(ctx);\n-    warnAboutExtensionConflicts();\n-\n-    vscode.workspace.onDidChangeConfiguration(\n-        _ => ctx?.client?.sendNotification('workspace/didChangeConfiguration', { settings: \"\" }),\n-        null,\n-        ctx.subscriptions,\n-    );\n }\n \n export async function deactivate() {"}]}