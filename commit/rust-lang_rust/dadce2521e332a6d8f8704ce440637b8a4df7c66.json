{"sha": "dadce2521e332a6d8f8704ce440637b8a4df7c66", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZGNlMjUyMWUzMzJhNmQ4Zjg3MDRjZTQ0MDYzN2I4YTRkZjdjNjY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-09-02T22:38:54Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-09-06T15:18:10Z"}, "message": "always print def-path in Debug impl for DefId\n\nI also added an `opt_def_path` so that we can deal with DefIds that are\nmissing a `DefPath` entry.", "tree": {"sha": "a4e464536f5919f7d8ab9287a0f49b9926d1c1d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4e464536f5919f7d8ab9287a0f49b9926d1c1d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dadce2521e332a6d8f8704ce440637b8a4df7c66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dadce2521e332a6d8f8704ce440637b8a4df7c66", "html_url": "https://github.com/rust-lang/rust/commit/dadce2521e332a6d8f8704ce440637b8a4df7c66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dadce2521e332a6d8f8704ce440637b8a4df7c66/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2446e258fcc0f5554f91e54d2f849da4dd69a026", "url": "https://api.github.com/repos/rust-lang/rust/commits/2446e258fcc0f5554f91e54d2f849da4dd69a026", "html_url": "https://github.com/rust-lang/rust/commit/2446e258fcc0f5554f91e54d2f849da4dd69a026"}], "stats": {"total": 75, "additions": 53, "deletions": 22}, "files": [{"sha": "16afa705e39198d145fb5f38caab9c3ac2c7d497", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dadce2521e332a6d8f8704ce440637b8a4df7c66/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadce2521e332a6d8f8704ce440637b8a4df7c66/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=dadce2521e332a6d8f8704ce440637b8a4df7c66", "patch": "@@ -58,19 +58,14 @@ impl fmt::Debug for DefId {\n         write!(f, \"DefId {{ krate: {:?}, node: {:?}\",\n                self.krate, self.index)?;\n \n-        // Unfortunately, there seems to be no way to attempt to print\n-        // a path for a def-id, so I'll just make a best effort for now\n-        // and otherwise fallback to just printing the crate/node pair\n-        if self.is_local() { // (1)\n-            // (1) side-step fact that not all external things have paths at\n-            // the moment, such as type parameters\n-            ty::tls::with_opt(|opt_tcx| {\n-                if let Some(tcx) = opt_tcx {\n-                    write!(f, \" => {}\", tcx.item_path_str(*self))?;\n+        ty::tls::with_opt(|opt_tcx| {\n+            if let Some(tcx) = opt_tcx {\n+                if let Some(def_path) = tcx.opt_def_path(*self) {\n+                    write!(f, \" => {}\", def_path.to_string(tcx))?;\n                 }\n-                Ok(())\n-            })?;\n-        }\n+            }\n+            Ok(())\n+        })?;\n \n         write!(f, \" }}\")\n     }"}, {"sha": "52645883a8be95468fe3cee61edee9af3b780f80", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dadce2521e332a6d8f8704ce440637b8a4df7c66/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadce2521e332a6d8f8704ce440637b8a4df7c66/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=dadce2521e332a6d8f8704ce440637b8a4df7c66", "patch": "@@ -233,7 +233,7 @@ pub trait CrateStore<'tcx> {\n                              def: DefKey)\n                              -> Option<DefIndex>;\n     fn def_key(&self, def: DefId) -> hir_map::DefKey;\n-    fn relative_def_path(&self, def: DefId) -> hir_map::DefPath;\n+    fn relative_def_path(&self, def: DefId) -> Option<hir_map::DefPath>;\n     fn variant_kind(&self, def_id: DefId) -> Option<VariantKind>;\n     fn struct_ctor_def_id(&self, struct_def_id: DefId) -> Option<DefId>;\n     fn tuple_struct_definition_if_ctor(&self, did: DefId) -> Option<DefId>;\n@@ -430,7 +430,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n \n     // resolve\n     fn def_key(&self, def: DefId) -> hir_map::DefKey { bug!(\"def_key\") }\n-    fn relative_def_path(&self, def: DefId) -> hir_map::DefPath { bug!(\"relative_def_path\") }\n+    fn relative_def_path(&self, def: DefId) -> Option<hir_map::DefPath> { bug!(\"relative_def_path\") }\n     fn variant_kind(&self, def_id: DefId) -> Option<VariantKind> { bug!(\"variant_kind\") }\n     fn struct_ctor_def_id(&self, struct_def_id: DefId) -> Option<DefId>\n         { bug!(\"struct_ctor_def_id\") }"}, {"sha": "53838b0760a79d79fa334a6a260d61bc793bea50", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/dadce2521e332a6d8f8704ce440637b8a4df7c66/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadce2521e332a6d8f8704ce440637b8a4df7c66/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=dadce2521e332a6d8f8704ce440637b8a4df7c66", "patch": "@@ -2437,12 +2437,41 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// Returns the `DefPath` of an item. Note that if `id` is not\n-    /// local to this crate -- or is inlined into this crate -- the\n-    /// result will be a non-local `DefPath`.\n+    /// Convert a `DefId` into its fully expanded `DefPath` (every\n+    /// `DefId` is really just an interned def-path).\n+    ///\n+    /// Note that if `id` is not local to this crate -- or is\n+    /// inlined into this crate -- the result will be a non-local\n+    /// `DefPath`.\n+    ///\n+    /// This function is only safe to use when you are sure that the\n+    /// full def-path is accessible. Examples that are known to be\n+    /// safe are local def-ids or items; see `opt_def_path` for more\n+    /// details.\n     pub fn def_path(self, id: DefId) -> ast_map::DefPath {\n+        self.opt_def_path(id).unwrap_or_else(|| {\n+            bug!(\"could not load def-path for {:?}\", id)\n+        })\n+    }\n+\n+    /// Convert a `DefId` into its fully expanded `DefPath` (every\n+    /// `DefId` is really just an interned def-path).\n+    ///\n+    /// When going across crates, we do not save the full info for\n+    /// every cross-crate def-id, and hence we may not always be able\n+    /// to create a def-path. Therefore, this returns\n+    /// `Option<DefPath>` to cover that possibility. It will always\n+    /// return `Some` for local def-ids, however, as well as for\n+    /// items. The problems arise with \"minor\" def-ids like those\n+    /// associated with a pattern, `impl Trait`, or other internal\n+    /// detail to a fn.\n+    ///\n+    /// Note that if `id` is not local to this crate -- or is\n+    /// inlined into this crate -- the result will be a non-local\n+    /// `DefPath`.\n+    pub fn opt_def_path(self, id: DefId) -> Option<ast_map::DefPath> {\n         if id.is_local() {\n-            self.map.def_path(id)\n+            Some(self.map.def_path(id))\n         } else {\n             self.sess.cstore.relative_def_path(id)\n         }"}, {"sha": "d7ca93235fddbe81c584326f92f5a55ec138a9ca", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dadce2521e332a6d8f8704ce440637b8a4df7c66/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadce2521e332a6d8f8704ce440637b8a4df7c66/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=dadce2521e332a6d8f8704ce440637b8a4df7c66", "patch": "@@ -435,7 +435,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         decoder::def_key(&cdata, def.index)\n     }\n \n-    fn relative_def_path(&self, def: DefId) -> hir_map::DefPath {\n+    fn relative_def_path(&self, def: DefId) -> Option<hir_map::DefPath> {\n         // See `Note` above in `def_key()` for why this read is\n         // commented out:\n         //"}, {"sha": "5bad89f1a593f2c6a280e34e6410dba4d9cbd78d", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dadce2521e332a6d8f8704ce440637b8a4df7c66/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadce2521e332a6d8f8704ce440637b8a4df7c66/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=dadce2521e332a6d8f8704ce440637b8a4df7c66", "patch": "@@ -759,7 +759,7 @@ pub fn maybe_get_item_ast<'a, 'tcx>(cdata: Cmd, tcx: TyCtxt<'a, 'tcx, 'tcx>, id:\n         krate: cdata.cnum,\n         index: def_key(cdata, id).parent.unwrap()\n     };\n-    let mut parent_def_path = def_path(cdata, id);\n+    let mut parent_def_path = def_path(cdata, id).unwrap();\n     parent_def_path.data.pop();\n     if let Some(ast_doc) = reader::maybe_get_doc(item_doc, tag_ast as usize) {\n         let ii = decode_inlined_item(cdata,\n@@ -1626,9 +1626,16 @@ fn item_def_key(item_doc: rbml::Doc) -> hir_map::DefKey {\n     }\n }\n \n-pub fn def_path(cdata: Cmd, id: DefIndex) -> hir_map::DefPath {\n+// Returns the path leading to the thing with this `id`. Note that\n+// some def-ids don't wind up in the metadata, so `def_path` sometimes\n+// returns `None`\n+pub fn def_path(cdata: Cmd, id: DefIndex) -> Option<hir_map::DefPath> {\n     debug!(\"def_path(id={:?})\", id);\n-    hir_map::DefPath::make(cdata.cnum, id, |parent| def_key(cdata, parent))\n+    if cdata.get_item(id).is_some() {\n+        Some(hir_map::DefPath::make(cdata.cnum, id, |parent| def_key(cdata, parent)))\n+    } else {\n+        None\n+    }\n }\n \n pub fn get_panic_strategy(data: &[u8]) -> PanicStrategy {"}]}