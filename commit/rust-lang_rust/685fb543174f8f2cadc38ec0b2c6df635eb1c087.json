{"sha": "685fb543174f8f2cadc38ec0b2c6df635eb1c087", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NWZiNTQzMTc0ZjhmMmNhZGMzOGVjMGIyYzZkZjYzNWViMWMwODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-30T14:18:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-30T14:18:22Z"}, "message": "Auto merge of #53535 - TheDarkula:master, r=oli-obk\n\nMade std::intrinsics::transmute() const fn.\n\nr? @oli-obk\n\ntracking issue: #53605", "tree": {"sha": "14b56d05da6f414bde31e349077c0a1114db16a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14b56d05da6f414bde31e349077c0a1114db16a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/685fb543174f8f2cadc38ec0b2c6df635eb1c087", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/685fb543174f8f2cadc38ec0b2c6df635eb1c087", "html_url": "https://github.com/rust-lang/rust/commit/685fb543174f8f2cadc38ec0b2c6df635eb1c087", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/685fb543174f8f2cadc38ec0b2c6df635eb1c087/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e98621e69890d67d906a436a68436d03a3edb89", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e98621e69890d67d906a436a68436d03a3edb89", "html_url": "https://github.com/rust-lang/rust/commit/0e98621e69890d67d906a436a68436d03a3edb89"}, {"sha": "c5cae7935b2ca1c482cd1c8542bd33e5fc3d888c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5cae7935b2ca1c482cd1c8542bd33e5fc3d888c", "html_url": "https://github.com/rust-lang/rust/commit/c5cae7935b2ca1c482cd1c8542bd33e5fc3d888c"}], "stats": {"total": 148, "additions": 139, "deletions": 9}, "files": [{"sha": "e809830fad1cf8c0d1d6301c8e98c6ecf6aec728", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=685fb543174f8f2cadc38ec0b2c6df635eb1c087", "patch": "@@ -103,6 +103,13 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 };\n                 self.write_scalar(out_val, dest)?;\n             }\n+            \"transmute\" => {\n+                // Go through an allocation, to make sure the completely different layouts\n+                // do not pose a problem.  (When the user transmutes through a union,\n+                // there will not be a layout mismatch.)\n+                let dest = self.force_allocation(dest)?;\n+                self.copy_op(args[0], dest.into())?;\n+            }\n \n             _ => return Ok(false),\n         }"}, {"sha": "36dcd1714716cdd67a2df18b64e017ae5c7c1a43", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=685fb543174f8f2cadc38ec0b2c6df635eb1c087", "patch": "@@ -830,6 +830,18 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                             | \"cttz_nonzero\"\n                             | \"ctlz\"\n                             | \"ctlz_nonzero\" => is_const_fn = Some(def_id),\n+                            \"transmute\" => {\n+                                if self.mode != Mode::Fn {\n+                                    is_const_fn = Some(def_id);\n+                                    if !self.tcx.sess.features_untracked().const_transmute {\n+                                        emit_feature_err(\n+                                            &self.tcx.sess.parse_sess, \"const_transmute\",\n+                                            self.span, GateIssue::Language,\n+                                            &format!(\"The use of std::mem::transmute() \\\n+                                            is gated in {}s\", self.mode));\n+                                    }\n+                                }\n+                            }\n \n                             name if name.starts_with(\"simd_shuffle\") => {\n                                 is_shuffle = true;"}, {"sha": "bb5d929a3234573493d8158a259c91b1a68ced3d", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=685fb543174f8f2cadc38ec0b2c6df635eb1c087", "patch": "@@ -221,6 +221,9 @@ declare_features! (\n     // Allows dereferencing raw pointers during const eval\n     (active, const_raw_ptr_deref, \"1.27.0\", Some(51911), None),\n \n+    // Allows reinterpretation of the bits of a value of one type as another type during const eval\n+    (active, const_transmute, \"1.29.0\", Some(53605), None),\n+\n     // Allows comparing raw pointers during const eval\n     (active, const_compare_raw_pointers, \"1.27.0\", Some(53020), None),\n "}, {"sha": "bf9459a67c45376cef92b6b847c16a8cc4069632", "filename": "src/test/run-pass/ctfe/transmute-const.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Ftest%2Frun-pass%2Fctfe%2Ftransmute-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Ftest%2Frun-pass%2Fctfe%2Ftransmute-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Ftransmute-const.rs?ref=685fb543174f8f2cadc38ec0b2c6df635eb1c087", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_transmute)]\n+\n+use std::mem;\n+\n+#[repr(transparent)]\n+struct Foo(u32);\n+\n+const TRANSMUTED_U32: u32 = unsafe { mem::transmute(Foo(3)) };\n+\n+fn main() {\n+    assert_eq!(TRANSMUTED_U32, 3);\n+}"}, {"sha": "ea55584f240642bb65a54d926a0a4de3a6af6a04", "filename": "src/test/ui/consts/const-eval/transmute-const-promotion.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.rs?ref=685fb543174f8f2cadc38ec0b2c6df635eb1c087", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_transmute)]\n+\n+use std::mem;\n+\n+fn main() {\n+    let x: &'static u32 = unsafe { &mem::transmute(3.0f32) };\n+    //~^ ERROR value does not live long enough\n+}"}, {"sha": "2f46684b4466d19b55baa360d6b83b88050fa885", "filename": "src/test/ui/consts/const-eval/transmute-const-promotion.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const-promotion.stderr?ref=685fb543174f8f2cadc38ec0b2c6df635eb1c087", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/transmute-const-promotion.rs:16:37\n+   |\n+LL |     let x: &'static u32 = unsafe { &mem::transmute(3.0f32) };\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+LL |     //~^ ERROR value does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "a585a4404adf6487a65d98f095a99ae39a449d5c", "filename": "src/test/ui/consts/const-eval/transmute-const.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.rs?ref=685fb543174f8f2cadc38ec0b2c6df635eb1c087", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_transmute)]\n+\n+use std::mem;\n+\n+static FOO: bool = unsafe { mem::transmute(3u8) };\n+//~^ ERROR this static likely exhibits undefined behavior\n+//~^^ type validation failed: encountered 3, but expected something in the range 0..=1\n+\n+fn main() {}"}, {"sha": "c9beca7aa30ac6aef684485cc9d983e55158cb92", "filename": "src/test/ui/consts/const-eval/transmute-const.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.stderr?ref=685fb543174f8f2cadc38ec0b2c6df635eb1c087", "patch": "@@ -0,0 +1,11 @@\n+error[E0080]: this static likely exhibits undefined behavior\n+  --> $DIR/transmute-const.rs:15:1\n+   |\n+LL | static FOO: bool = unsafe { mem::transmute(3u8) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3, but expected something in the range 0..=1\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "30a738a83a3b67d2b769f8be34840c1c3cb02464", "filename": "src/test/ui/consts/const-fn-not-safe-for-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs?ref=685fb543174f8f2cadc38ec0b2c6df635eb1c087", "patch": "@@ -10,14 +10,14 @@\n \n // Test that we can't call random fns in a const fn or do other bad things.\n \n-#![feature(const_fn)]\n+#![feature(const_fn, const_transmute)]\n \n use std::mem::transmute;\n \n fn random() -> u32 { 0 }\n \n const fn sub(x: &u32) -> usize {\n-    unsafe { transmute(x) } //~ ERROR E0015\n+    unsafe { transmute(x) }\n }\n \n const fn sub1() -> u32 {"}, {"sha": "613670acc93264ede0300a5364baacd94f7fe917", "filename": "src/test/ui/consts/const-fn-not-safe-for-const.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.stderr?ref=685fb543174f8f2cadc38ec0b2c6df635eb1c087", "patch": "@@ -1,9 +1,3 @@\n-error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/const-fn-not-safe-for-const.rs:20:14\n-   |\n-LL |     unsafe { transmute(x) } //~ ERROR E0015\n-   |              ^^^^^^^^^^^^\n-\n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/const-fn-not-safe-for-const.rs:24:5\n    |\n@@ -70,7 +64,7 @@ LL |     x + y\n    |\n    = help: add #![feature(const_let)] to the crate attributes to enable\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 9 previous errors\n \n Some errors occurred: E0013, E0015, E0658.\n For more information about an error, try `rustc --explain E0013`."}, {"sha": "c879ab52a3f202ca6998340405660972582726de", "filename": "src/test/ui/feature-gates/feature-gate-const_transmute.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.rs?ref=685fb543174f8f2cadc38ec0b2c6df635eb1c087", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem;\n+\n+#[repr(transparent)]\n+struct Foo(u32);\n+\n+const TRANSMUTED_U32: u32 = unsafe { mem::transmute(Foo(3)) };\n+//~^ ERROR The use of std::mem::transmute() is gated in constants (see issue #53605)\n+\n+fn main() {}"}, {"sha": "bb09b933d2ebbb8644d770af2b7ecdba560b6c1a", "filename": "src/test/ui/feature-gates/feature-gate-const_transmute.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/685fb543174f8f2cadc38ec0b2c6df635eb1c087/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_transmute.stderr?ref=685fb543174f8f2cadc38ec0b2c6df635eb1c087", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: The use of std::mem::transmute() is gated in constants (see issue #53605)\n+  --> $DIR/feature-gate-const_transmute.rs:16:38\n+   |\n+LL | const TRANSMUTED_U32: u32 = unsafe { mem::transmute(Foo(3)) };\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_transmute)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}