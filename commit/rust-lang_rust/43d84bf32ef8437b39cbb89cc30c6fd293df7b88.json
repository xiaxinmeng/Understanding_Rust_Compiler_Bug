{"sha": "43d84bf32ef8437b39cbb89cc30c6fd293df7b88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZDg0YmYzMmVmODQzN2IzOWNiYjg5Y2MzMGM2ZmQyOTNkZjdiODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-22T21:26:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-22T21:26:14Z"}, "message": "auto merge of #15894 : treeman/rust/vec-doc, r=alexcrichton\n\nFill in examples for missing methods. Opt for `vec![]` instead of `vec!()`.", "tree": {"sha": "d93c2320764d8a652d4bce80ece1bce2f431e5f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d93c2320764d8a652d4bce80ece1bce2f431e5f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43d84bf32ef8437b39cbb89cc30c6fd293df7b88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43d84bf32ef8437b39cbb89cc30c6fd293df7b88", "html_url": "https://github.com/rust-lang/rust/commit/43d84bf32ef8437b39cbb89cc30c6fd293df7b88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43d84bf32ef8437b39cbb89cc30c6fd293df7b88/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc6bbc3db16f78dc49e7311a4d0d0668f6cb801e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6bbc3db16f78dc49e7311a4d0d0668f6cb801e", "html_url": "https://github.com/rust-lang/rust/commit/bc6bbc3db16f78dc49e7311a4d0d0668f6cb801e"}, {"sha": "8d54ec8f4bdd88fe35911aa236ed67deef6bd521", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d54ec8f4bdd88fe35911aa236ed67deef6bd521", "html_url": "https://github.com/rust-lang/rust/commit/8d54ec8f4bdd88fe35911aa236ed67deef6bd521"}], "stats": {"total": 372, "additions": 233, "deletions": 139}, "files": [{"sha": "0002867495c78b9825263c08a24da25be3f0a05d", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 233, "deletions": 139, "changes": 372, "blob_url": "https://github.com/rust-lang/rust/blob/43d84bf32ef8437b39cbb89cc30c6fd293df7b88/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43d84bf32ef8437b39cbb89cc30c6fd293df7b88/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=43d84bf32ef8437b39cbb89cc30c6fd293df7b88", "patch": "@@ -35,8 +35,7 @@ pub static PTR_MARKER: u8 = 0;\n ///\n /// # Examples\n ///\n-/// ```rust\n-/// # use std::vec::Vec;\n+/// ```\n /// let mut vec = Vec::new();\n /// vec.push(1i);\n /// vec.push(2i);\n@@ -46,16 +45,45 @@ pub static PTR_MARKER: u8 = 0;\n ///\n /// assert_eq!(vec.pop(), Some(2));\n /// assert_eq!(vec.len(), 1);\n+///\n+/// *vec.get_mut(0) = 7i;\n+/// assert_eq!(vec[0], 7);\n+///\n+/// vec.push_all([1, 2, 3]);\n+///\n+/// for x in vec.iter() {\n+///     println!(\"{}\", x);\n+/// }\n+/// assert_eq!(vec, vec![7i, 1, 2, 3]);\n /// ```\n ///\n /// The `vec!` macro is provided to make initialization more convenient:\n ///\n-/// ```rust\n+/// ```\n /// let mut vec = vec![1i, 2i, 3i];\n /// vec.push(4);\n /// assert_eq!(vec, vec![1, 2, 3, 4]);\n /// ```\n ///\n+/// Use a `Vec` as an efficient stack:\n+///\n+/// ```\n+/// let mut stack = Vec::new();\n+///\n+/// stack.push(1i);\n+/// stack.push(2i);\n+/// stack.push(3i);\n+///\n+/// loop {\n+///     let top = match stack.pop() {\n+///         None => break, // empty\n+///         Some(x) => x,\n+///     };\n+///     // Prints 3, 2, 1\n+///     println!(\"{}\", top);\n+/// }\n+/// ```\n+///\n /// # Capacity and reallocation\n ///\n /// The capacity of a vector is the amount of space allocated for any future\n@@ -86,8 +114,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::vec::Vec;\n+    /// ```\n     /// let mut vec: Vec<int> = Vec::new();\n     /// ```\n     #[inline]\n@@ -112,8 +139,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::vec::Vec;\n+    /// ```\n     /// let mut vec: Vec<int> = Vec::with_capacity(10);\n     ///\n     /// // The vector contains no items, even though it has capacity for more\n@@ -148,10 +174,9 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::vec::Vec;\n+    /// ```\n     /// let vec = Vec::from_fn(3, |idx| idx * 2);\n-    /// assert_eq!(vec, vec!(0, 2, 4));\n+    /// assert_eq!(vec, vec![0, 2, 4]);\n     /// ```\n     #[inline]\n     pub fn from_fn(length: uint, op: |uint| -> T) -> Vec<T> {\n@@ -175,6 +200,37 @@ impl<T> Vec<T> {\n     /// - there must be `length` valid instances of type `T` at the\n     ///   beginning of that allocation\n     /// - `ptr` must be allocated by the default `Vec` allocator\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::ptr;\n+    /// use std::mem;\n+    ///\n+    /// fn main() {\n+    ///     let mut v = vec![1i, 2, 3];\n+    ///\n+    ///     // Pull out the various important pieces of information about `v`\n+    ///     let p = v.as_mut_ptr();\n+    ///     let len = v.len();\n+    ///     let cap = v.capacity();\n+    ///\n+    ///     unsafe {\n+    ///         // Cast `v` into the void: no destructor run, so we are in\n+    ///         // complete control of the allocation to which `p` points.\n+    ///         mem::forget(v);\n+    ///\n+    ///         // Overwrite memory with 4, 5, 6\n+    ///         for i in range(0, len as int) {\n+    ///             ptr::write(p.offset(i), 4 + i);\n+    ///         }\n+    ///\n+    ///         // Put everything back together into a Vec\n+    ///         let rebuilt = Vec::from_raw_parts(len, cap, p);\n+    ///         assert_eq!(rebuilt, vec![4i, 5i, 6i]);\n+    ///     }\n+    /// }\n+    /// ```\n     pub unsafe fn from_raw_parts(length: uint, capacity: uint,\n                                  ptr: *mut T) -> Vec<T> {\n         Vec { len: length, cap: capacity, ptr: ptr }\n@@ -188,11 +244,11 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let vec = vec!(1i, 2i, 3i, 4i);\n+    /// ```\n+    /// let vec = vec![1i, 2i, 3i, 4i];\n     /// let (even, odd) = vec.partition(|&n| n % 2 == 0);\n-    /// assert_eq!(even, vec!(2, 4));\n-    /// assert_eq!(odd, vec!(1, 3));\n+    /// assert_eq!(even, vec![2, 4]);\n+    /// assert_eq!(odd, vec![1, 3]);\n     /// ```\n     #[inline]\n     pub fn partition(self, f: |&T| -> bool) -> (Vec<T>, Vec<T>) {\n@@ -217,10 +273,10 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let vec = vec!(1i, 2i);\n+    /// ```\n+    /// let vec = vec![1i, 2i];\n     /// let vec = vec.append([3i, 4i]);\n-    /// assert_eq!(vec, vec!(1, 2, 3, 4));\n+    /// assert_eq!(vec, vec![1, 2, 3, 4]);\n     /// ```\n     #[inline]\n     pub fn append(mut self, second: &[T]) -> Vec<T> {\n@@ -232,8 +288,7 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::vec::Vec;\n+    /// ```\n     /// let slice = [1i, 2, 3];\n     /// let vec = Vec::from_slice(slice);\n     /// ```\n@@ -249,8 +304,7 @@ impl<T: Clone> Vec<T> {\n     /// Creates a `Vec` with `length` copies of `value`.\n     ///\n     /// # Example\n-    /// ```rust\n-    /// # use std::vec::Vec;\n+    /// ```\n     /// let vec = Vec::from_elem(3, \"hi\");\n     /// println!(\"{}\", vec); // prints [hi, hi, hi]\n     /// ```\n@@ -275,10 +329,10 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(1i);\n+    /// ```\n+    /// let mut vec = vec![1i];\n     /// vec.push_all([2i, 3, 4]);\n-    /// assert_eq!(vec, vec!(1, 2, 3, 4));\n+    /// assert_eq!(vec, vec![1, 2, 3, 4]);\n     /// ```\n     #[inline]\n     pub fn push_all(&mut self, other: &[T]) {\n@@ -305,10 +359,10 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(\"hello\");\n+    /// ```\n+    /// let mut vec = vec![\"hello\"];\n     /// vec.grow(2, &(\"world\"));\n-    /// assert_eq!(vec, vec!(\"hello\", \"world\", \"world\"));\n+    /// assert_eq!(vec, vec![\"hello\", \"world\", \"world\"]);\n     /// ```\n     pub fn grow(&mut self, n: uint, value: &T) {\n         self.reserve_additional(n);\n@@ -329,11 +383,11 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(\"a\", \"b\", \"c\");\n+    /// ```\n+    /// let mut vec = vec![\"a\", \"b\", \"c\"];\n     /// vec.grow_set(1, &(\"fill\"), \"d\");\n     /// vec.grow_set(4, &(\"fill\"), \"e\");\n-    /// assert_eq!(vec, vec!(\"a\", \"d\", \"c\", \"fill\", \"e\"));\n+    /// assert_eq!(vec, vec![\"a\", \"d\", \"c\", \"fill\", \"e\"]);\n     /// ```\n     pub fn grow_set(&mut self, index: uint, initval: &T, value: T) {\n         let l = self.len();\n@@ -351,11 +405,11 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let vec = vec!(1i, 2, 3, 4);\n+    /// ```\n+    /// let vec = vec![1i, 2, 3, 4];\n     /// let (even, odd) = vec.partitioned(|&n| n % 2 == 0);\n-    /// assert_eq!(even, vec!(2i, 4));\n-    /// assert_eq!(odd, vec!(1i, 3));\n+    /// assert_eq!(even, vec![2i, 4]);\n+    /// assert_eq!(odd, vec![1i, 3]);\n     /// ```\n     pub fn partitioned(&self, f: |&T| -> bool) -> (Vec<T>, Vec<T>) {\n         let mut lefts = Vec::new();\n@@ -501,8 +555,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::vec::Vec;\n+    /// ```\n     /// let vec: Vec<int> = Vec::with_capacity(10);\n     /// assert_eq!(vec.capacity(), 10);\n     /// ```\n@@ -520,9 +573,8 @@ impl<T> Vec<T> {\n      ///\n      /// # Example\n      ///\n-     /// ```rust\n-     /// # use std::vec::Vec;\n-     /// let mut vec: Vec<int> = vec!(1i);\n+     /// ```\n+     /// let mut vec: Vec<int> = vec![1i];\n      /// vec.reserve_additional(10);\n      /// assert!(vec.capacity() >= 11);\n      /// ```\n@@ -546,8 +598,8 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3);\n+    /// ```\n+    /// let mut vec = vec![1i, 2, 3];\n     /// vec.reserve(10);\n     /// assert!(vec.capacity() >= 10);\n     /// ```\n@@ -564,8 +616,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// # use std::vec::Vec;\n+    /// ```\n     /// let mut vec: Vec<int> = Vec::with_capacity(10);\n     /// vec.reserve_exact(11);\n     /// assert_eq!(vec.capacity(), 11);\n@@ -588,8 +639,8 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3);\n+    /// ```\n+    /// let mut vec = vec![1i, 2, 3];\n     /// vec.shrink_to_fit();\n     /// ```\n     pub fn shrink_to_fit(&mut self) {\n@@ -620,10 +671,10 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3);\n+    /// ```\n+    /// let mut vec = vec![1i, 2, 3];\n     /// assert_eq!(vec.pop(), Some(3));\n-    /// assert_eq!(vec, vec!(1, 2));\n+    /// assert_eq!(vec, vec![1, 2]);\n     /// ```\n     #[inline]\n     pub fn pop(&mut self) -> Option<T> {\n@@ -645,10 +696,10 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(1i, 2);\n+    /// ```\n+    /// let mut vec = vec![1i, 2];\n     /// vec.push(3);\n-    /// assert_eq!(vec, vec!(1, 2, 3));\n+    /// assert_eq!(vec, vec![1, 2, 3]);\n     /// ```\n     #[inline]\n     pub fn push(&mut self, value: T) {\n@@ -681,10 +732,10 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let vec = vec!(1i, 2);\n+    /// ```\n+    /// let vec = vec![1i, 2];\n     /// let vec = vec.append_one(3);\n-    /// assert_eq!(vec, vec!(1, 2, 3));\n+    /// assert_eq!(vec, vec![1, 2, 3]);\n     /// ```\n     #[inline]\n     pub fn append_one(mut self, x: T) -> Vec<T> {\n@@ -699,10 +750,10 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3, 4);\n+    /// ```\n+    /// let mut vec = vec![1i, 2, 3, 4];\n     /// vec.truncate(2);\n-    /// assert_eq!(vec, vec!(1, 2));\n+    /// assert_eq!(vec, vec![1, 2]);\n     /// ```\n     pub fn truncate(&mut self, len: uint) {\n         unsafe {\n@@ -720,10 +771,10 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// fn foo(slice: &mut [int]) {}\n     ///\n-    /// let mut vec = vec!(1i, 2);\n+    /// let mut vec = vec![1i, 2];\n     /// foo(vec.as_mut_slice());\n     /// ```\n     #[inline]\n@@ -742,8 +793,8 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let v = vec!(\"a\".to_string(), \"b\".to_string());\n+    /// ```\n+    /// let v = vec![\"a\".to_string(), \"b\".to_string()];\n     /// for s in v.move_iter() {\n     ///     // s has type String, not &String\n     ///     println!(\"{}\", s);\n@@ -766,6 +817,15 @@ impl<T> Vec<T> {\n     /// This will explicitly set the size of the vector, without actually\n     /// modifying its buffers, so it is up to the caller to ensure that the\n     /// vector is actually the specified size.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let mut v = vec![1u, 2, 3, 4];\n+    /// unsafe {\n+    ///     v.set_len(1);\n+    /// }\n+    /// ```\n     #[inline]\n     pub unsafe fn set_len(&mut self, len: uint) {\n         self.len = len;\n@@ -779,10 +839,10 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// #![allow(deprecated)]\n     ///\n-    /// let vec = vec!(1i, 2, 3);\n+    /// let vec = vec![1i, 2, 3];\n     /// assert!(vec.get(1) == &2);\n     /// ```\n     #[deprecated=\"prefer using indexing, e.g., vec[0]\"]\n@@ -799,10 +859,10 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3);\n+    /// ```\n+    /// let mut vec = vec![1i, 2, 3];\n     /// *vec.get_mut(1) = 4;\n-    /// assert_eq!(vec, vec!(1i, 4, 3));\n+    /// assert_eq!(vec, vec![1i, 4, 3]);\n     /// ```\n     #[inline]\n     pub fn get_mut<'a>(&'a mut self, index: uint) -> &'a mut T {\n@@ -814,8 +874,8 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let vec = vec!(1i, 2, 3);\n+    /// ```\n+    /// let vec = vec![1i, 2, 3];\n     /// for num in vec.iter() {\n     ///     println!(\"{}\", *num);\n     /// }\n@@ -831,8 +891,8 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3);\n+    /// ```\n+    /// let mut vec = vec![1i, 2, 3];\n     /// for num in vec.mut_iter() {\n     ///     *num = 0;\n     /// }\n@@ -849,14 +909,14 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut v = vec!(5i, 4, 1, 3, 2);\n+    /// ```\n+    /// let mut v = vec![5i, 4, 1, 3, 2];\n     /// v.sort_by(|a, b| a.cmp(b));\n-    /// assert_eq!(v, vec!(1i, 2, 3, 4, 5));\n+    /// assert_eq!(v, vec![1i, 2, 3, 4, 5]);\n     ///\n     /// // reverse sorting\n     /// v.sort_by(|a, b| b.cmp(a));\n-    /// assert_eq!(v, vec!(5i, 4, 3, 2, 1));\n+    /// assert_eq!(v, vec![5i, 4, 3, 2, 1]);\n     /// ```\n     #[inline]\n     pub fn sort_by(&mut self, compare: |&T, &T| -> Ordering) {\n@@ -872,8 +932,8 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let vec = vec!(1i, 2, 3, 4);\n+    /// ```\n+    /// let vec = vec![1i, 2, 3, 4];\n     /// assert!(vec.slice(0, 2) == [1, 2]);\n     /// ```\n     #[inline]\n@@ -889,8 +949,8 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let vec = vec!(1i, 2, 3);\n+    /// ```\n+    /// let vec = vec![1i, 2, 3];\n     /// assert!(vec.tail() == [2, 3]);\n     /// ```\n     #[inline]\n@@ -906,8 +966,8 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let vec = vec!(1i, 2, 3, 4);\n+    /// ```\n+    /// let vec = vec![1i, 2, 3, 4];\n     /// assert!(vec.tailn(2) == [3, 4]);\n     /// ```\n     #[inline]\n@@ -920,8 +980,8 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let vec = vec!(1i, 2, 3);\n+    /// ```\n+    /// let vec = vec![1i, 2, 3];\n     /// assert!(vec.last() == Some(&3));\n     /// ```\n     #[inline]\n@@ -934,10 +994,10 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3);\n+    /// ```\n+    /// let mut vec = vec![1i, 2, 3];\n     /// *vec.mut_last().unwrap() = 4;\n-    /// assert_eq!(vec, vec!(1i, 2, 4));\n+    /// assert_eq!(vec, vec![1i, 2, 4]);\n     /// ```\n     #[inline]\n     pub fn mut_last<'a>(&'a mut self) -> Option<&'a mut T> {\n@@ -950,15 +1010,15 @@ impl<T> Vec<T> {\n     /// Returns `None` if `index` is out of bounds.\n     ///\n     /// # Example\n-    /// ```rust\n-    /// let mut v = vec!(\"foo\".to_string(), \"bar\".to_string(),\n-    ///                  \"baz\".to_string(), \"qux\".to_string());\n+    /// ```\n+    /// let mut v = vec![\"foo\".to_string(), \"bar\".to_string(),\n+    ///                  \"baz\".to_string(), \"qux\".to_string()];\n     ///\n     /// assert_eq!(v.swap_remove(1), Some(\"bar\".to_string()));\n-    /// assert_eq!(v, vec!(\"foo\".to_string(), \"qux\".to_string(), \"baz\".to_string()));\n+    /// assert_eq!(v, vec![\"foo\".to_string(), \"qux\".to_string(), \"baz\".to_string()]);\n     ///\n     /// assert_eq!(v.swap_remove(0), Some(\"foo\".to_string()));\n-    /// assert_eq!(v, vec!(\"baz\".to_string(), \"qux\".to_string()));\n+    /// assert_eq!(v, vec![\"baz\".to_string(), \"qux\".to_string()]);\n     ///\n     /// assert_eq!(v.swap_remove(2), None);\n     /// ```\n@@ -982,10 +1042,10 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3);\n+    /// ```\n+    /// let mut vec = vec![1i, 2, 3];\n     /// vec.unshift(4);\n-    /// assert_eq!(vec, vec!(4, 1, 2, 3));\n+    /// assert_eq!(vec, vec![4, 1, 2, 3]);\n     /// ```\n     #[inline]\n     pub fn unshift(&mut self, element: T) {\n@@ -1002,10 +1062,10 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3);\n+    /// ```\n+    /// let mut vec = vec![1i, 2, 3];\n     /// assert!(vec.shift() == Some(1));\n-    /// assert_eq!(vec, vec!(2, 3));\n+    /// assert_eq!(vec, vec![2, 3]);\n     /// ```\n     #[inline]\n     pub fn shift(&mut self) -> Option<T> {\n@@ -1022,12 +1082,12 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3);\n+    /// ```\n+    /// let mut vec = vec![1i, 2, 3];\n     /// vec.insert(1, 4);\n-    /// assert_eq!(vec, vec!(1, 4, 2, 3));\n+    /// assert_eq!(vec, vec![1, 4, 2, 3]);\n     /// vec.insert(4, 5);\n-    /// assert_eq!(vec, vec!(1, 4, 2, 3, 5));\n+    /// assert_eq!(vec, vec![1, 4, 2, 3, 5]);\n     /// ```\n     pub fn insert(&mut self, index: uint, element: T) {\n         let len = self.len();\n@@ -1056,14 +1116,14 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut v = vec!(1i, 2, 3);\n+    /// ```\n+    /// let mut v = vec![1i, 2, 3];\n     /// assert_eq!(v.remove(1), Some(2));\n-    /// assert_eq!(v, vec!(1, 3));\n+    /// assert_eq!(v, vec![1, 3]);\n     ///\n     /// assert_eq!(v.remove(4), None);\n     /// // v is unchanged:\n-    /// assert_eq!(v, vec!(1, 3));\n+    /// assert_eq!(v, vec![1, 3]);\n     /// ```\n     pub fn remove(&mut self, index: uint) -> Option<T> {\n         let len = self.len();\n@@ -1095,10 +1155,10 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(box 1i);\n-    /// vec.push_all_move(vec!(box 2, box 3, box 4));\n-    /// assert_eq!(vec, vec!(box 1, box 2, box 3, box 4));\n+    /// ```\n+    /// let mut vec = vec![box 1i];\n+    /// vec.push_all_move(vec![box 2, box 3, box 4]);\n+    /// assert_eq!(vec, vec![box 1, box 2, box 3, box 4]);\n     /// ```\n     #[inline]\n     pub fn push_all_move(&mut self, other: Vec<T>) {\n@@ -1114,8 +1174,8 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3, 4);\n+    /// ```\n+    /// let mut vec = vec![1i, 2, 3, 4];\n     /// assert!(vec.mut_slice(0, 2) == [1, 2]);\n     /// ```\n     #[inline]\n@@ -1132,8 +1192,8 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3, 4);\n+    /// ```\n+    /// let mut vec = vec![1i, 2, 3, 4];\n     /// assert!(vec.mut_slice_from(2) == [3, 4]);\n     /// ```\n     #[inline]\n@@ -1149,8 +1209,8 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3, 4);\n+    /// ```\n+    /// let mut vec = vec![1i, 2, 3, 4];\n     /// assert!(vec.mut_slice_to(2) == [1, 2]);\n     /// ```\n     #[inline]\n@@ -1170,8 +1230,8 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3, 4, 5, 6);\n+    /// ```\n+    /// let mut vec = vec![1i, 2, 3, 4, 5, 6];\n     ///\n     /// // scoped to restrict the lifetime of the borrows\n     /// {\n@@ -1201,10 +1261,10 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut v = vec!(1i, 2, 3);\n+    /// ```\n+    /// let mut v = vec![1i, 2, 3];\n     /// v.reverse();\n-    /// assert_eq!(v, vec!(3i, 2, 1));\n+    /// assert_eq!(v, vec![3i, 2, 1]);\n     /// ```\n     #[inline]\n     pub fn reverse(&mut self) {\n@@ -1219,8 +1279,8 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let vec = vec!(1i, 2, 3);\n+    /// ```\n+    /// let vec = vec![1i, 2, 3];\n     /// assert!(vec.slice_from(1) == [2, 3]);\n     /// ```\n     #[inline]\n@@ -1236,8 +1296,8 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let vec = vec!(1i, 2, 3);\n+    /// ```\n+    /// let vec = vec![1i, 2, 3, 4];\n     /// assert!(vec.slice_to(2) == [1, 2]);\n     /// ```\n     #[inline]\n@@ -1250,6 +1310,13 @@ impl<T> Vec<T> {\n     /// # Failure\n     ///\n     /// Fails if the vector is empty\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let vec = vec![1i, 2, 3];\n+    /// assert!(vec.init() == [1, 2]);\n+    /// ```\n     #[inline]\n     pub fn init<'a>(&'a self) -> &'a [T] {\n         self.slice(0, self.len() - 1)\n@@ -1263,6 +1330,19 @@ impl<T> Vec<T> {\n     ///\n     /// Modifying the vector may cause its buffer to be reallocated, which\n     /// would also make any pointers to it invalid.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// let v = vec![1i, 2, 3];\n+    /// let p = v.as_ptr();\n+    /// unsafe {\n+    ///     // Examine each element manually\n+    ///     assert_eq!(*p, 1i);\n+    ///     assert_eq!(*p.offset(1), 2i);\n+    ///     assert_eq!(*p.offset(2), 3i);\n+    /// }\n+    /// ```\n     #[inline]\n     pub fn as_ptr(&self) -> *const T {\n         self.ptr as *const T\n@@ -1275,6 +1355,20 @@ impl<T> Vec<T> {\n     ///\n     /// Modifying the vector may cause its buffer to be reallocated, which\n     /// would also make any pointers to it invalid.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::ptr;\n+    ///\n+    /// let mut v = vec![1i, 2, 3];\n+    /// let p = v.as_mut_ptr();\n+    /// unsafe {\n+    ///     ptr::write(p, 9i);\n+    ///     ptr::write(p.offset(2), 5i);\n+    /// }\n+    /// assert_eq!(v, vec![9i, 2, 5]);\n+    /// ```\n     #[inline]\n     pub fn as_mut_ptr(&mut self) -> *mut T {\n         self.ptr\n@@ -1287,10 +1381,10 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(1i, 2, 3, 4);\n+    /// ```\n+    /// let mut vec = vec![1i, 2, 3, 4];\n     /// vec.retain(|x| x%2 == 0);\n-    /// assert_eq!(vec, vec!(2, 4));\n+    /// assert_eq!(vec, vec![2, 4]);\n     /// ```\n     pub fn retain(&mut self, f: |&T| -> bool) {\n         let len = self.len();\n@@ -1318,10 +1412,10 @@ impl<T> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(0u, 1);\n+    /// ```\n+    /// let mut vec = vec![0u, 1];\n     /// vec.grow_fn(3, |i| i);\n-    /// assert_eq!(vec, vec!(0, 1, 0, 1, 2));\n+    /// assert_eq!(vec, vec![0, 1, 0, 1, 2]);\n     /// ```\n     pub fn grow_fn(&mut self, n: uint, f: |uint| -> T) {\n         self.reserve_additional(n);\n@@ -1339,10 +1433,10 @@ impl<T:Ord> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(3i, 1, 2);\n+    /// ```\n+    /// let mut vec = vec![3i, 1, 2];\n     /// vec.sort();\n-    /// assert_eq!(vec, vec!(1, 2, 3));\n+    /// assert_eq!(vec, vec![1, 2, 3]);\n     /// ```\n     pub fn sort(&mut self) {\n         self.as_mut_slice().sort()\n@@ -1361,8 +1455,8 @@ impl<T:PartialEq> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let vec = vec!(1i, 2, 3);\n+    /// ```\n+    /// let vec = vec![1i, 2, 3];\n     /// assert!(vec.contains(&1));\n     /// ```\n     #[inline]\n@@ -1376,10 +1470,10 @@ impl<T:PartialEq> Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// let mut vec = vec!(1i, 2, 2, 3, 2);\n+    /// ```\n+    /// let mut vec = vec![1i, 2, 2, 3, 2];\n     /// vec.dedup();\n-    /// assert_eq!(vec, vec!(1i, 2, 3, 2));\n+    /// assert_eq!(vec, vec![1i, 2, 3, 2]);\n     /// ```\n     pub fn dedup(&mut self) {\n         unsafe {\n@@ -1471,10 +1565,10 @@ impl<T> Vector<T> for Vec<T> {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// fn foo(slice: &[int]) {}\n     ///\n-    /// let vec = vec!(1i, 2);\n+    /// let vec = vec![1i, 2];\n     /// foo(vec.as_slice());\n     /// ```\n     #[inline]"}]}