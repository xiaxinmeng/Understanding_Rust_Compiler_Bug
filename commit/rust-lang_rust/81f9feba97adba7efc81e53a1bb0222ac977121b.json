{"sha": "81f9feba97adba7efc81e53a1bb0222ac977121b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZjlmZWJhOTdhZGJhN2VmYzgxZTUzYTFiYjAyMjJhYzk3NzEyMWI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-17T15:13:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-17T15:13:46Z"}, "message": "Rollup merge of #74293 - GuillaumeGomez:rustdoc-test-compiler-output-color, r=jyn514\n\nRustdoc test compiler output color\n\nFixes #72915\n\nWe just need to be sure it doesn't break rustdoc doctests' compilation checks. Maybe some other unforeseen consequences too?\n\nr? `@ehuss`\ncc `@rust-lang/rustdoc`", "tree": {"sha": "0e2ac5e29e5f7fc05be06f4ea4f36431fa6a99ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e2ac5e29e5f7fc05be06f4ea4f36431fa6a99ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81f9feba97adba7efc81e53a1bb0222ac977121b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfs+irCRBK7hj4Ov3rIwAAdHIIAERrO9f++W4gt2zllPQ1O36c\nuk/d2qCm9cfSe38BqRT0aRK2oK2ewdcPRWdyJ+KkhWLDfDvl2CaQh0AuZud6yOm7\nmqlsXzqnLV5T/ITb5FfGtJMsbM3/lbF5PYAIMtUwZCQh4n2xsWoA240wxmVfpHRZ\nUYWPJ834RmDp8FkmIRTSqSJYZsYPvUWFjJ3iJ67LQa8xjuwxYiAhhDDjzQFNPFxL\n1vINeJVu0ck318Ct9yasNOx6DLbavVEj2Ck/8NTdTvHoS+C7RYZvLgWAZmID4A8c\n+kig+eVsytL1BN66fyosYaP+YjoswmjXCYARRJyGueHQCICyyF/OdODDvuFUdD4=\n=bwBC\n-----END PGP SIGNATURE-----\n", "payload": "tree 0e2ac5e29e5f7fc05be06f4ea4f36431fa6a99ea\nparent e0ef0fc392963438af5f0343bf7caa46fb9c3ec3\nparent ec10824e2d2407e3addcd9877be923cc52399511\nauthor Mara Bos <m-ou.se@m-ou.se> 1605626026 +0100\ncommitter GitHub <noreply@github.com> 1605626026 +0100\n\nRollup merge of #74293 - GuillaumeGomez:rustdoc-test-compiler-output-color, r=jyn514\n\nRustdoc test compiler output color\n\nFixes #72915\n\nWe just need to be sure it doesn't break rustdoc doctests' compilation checks. Maybe some other unforeseen consequences too?\n\nr? `@ehuss`\ncc `@rust-lang/rustdoc`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81f9feba97adba7efc81e53a1bb0222ac977121b", "html_url": "https://github.com/rust-lang/rust/commit/81f9feba97adba7efc81e53a1bb0222ac977121b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81f9feba97adba7efc81e53a1bb0222ac977121b/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3", "html_url": "https://github.com/rust-lang/rust/commit/e0ef0fc392963438af5f0343bf7caa46fb9c3ec3"}, {"sha": "ec10824e2d2407e3addcd9877be923cc52399511", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec10824e2d2407e3addcd9877be923cc52399511", "html_url": "https://github.com/rust-lang/rust/commit/ec10824e2d2407e3addcd9877be923cc52399511"}], "stats": {"total": 130, "additions": 86, "deletions": 44}, "files": [{"sha": "32104e6f00d44f5471c7b99f74ee4087f0cbfbbc", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/81f9feba97adba7efc81e53a1bb0222ac977121b/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f9feba97adba7efc81e53a1bb0222ac977121b/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=81f9feba97adba7efc81e53a1bb0222ac977121b", "patch": "@@ -200,6 +200,11 @@ pub trait Emitter {\n         true\n     }\n \n+    /// Checks if we can use colors in the current output stream.\n+    fn supports_color(&self) -> bool {\n+        false\n+    }\n+\n     fn source_map(&self) -> Option<&Lrc<SourceMap>>;\n \n     /// Formats the substitutions of the primary_span\n@@ -504,6 +509,10 @@ impl Emitter for EmitterWriter {\n     fn should_show_explain(&self) -> bool {\n         !self.short_message\n     }\n+\n+    fn supports_color(&self) -> bool {\n+        self.dst.supports_color()\n+    }\n }\n \n /// An emitter that does nothing when emitting a diagnostic.\n@@ -2057,6 +2066,14 @@ impl Destination {\n             Destination::Raw(ref mut t, true) => WritableDst::ColoredRaw(Ansi::new(t)),\n         }\n     }\n+\n+    fn supports_color(&self) -> bool {\n+        match *self {\n+            Self::Terminal(ref stream) => stream.supports_color(),\n+            Self::Buffered(ref buffer) => buffer.buffer().supports_color(),\n+            Self::Raw(_, supports_color) => supports_color,\n+        }\n+    }\n }\n \n impl<'a> WritableDst<'a> {"}, {"sha": "9f35e57df418b36f7cf6b5f287eca9c5a83f4f97", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/81f9feba97adba7efc81e53a1bb0222ac977121b/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f9feba97adba7efc81e53a1bb0222ac977121b/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=81f9feba97adba7efc81e53a1bb0222ac977121b", "patch": "@@ -1,13 +1,13 @@\n use rustc_ast as ast;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::ErrorReported;\n+use rustc_errors::{ColorConfig, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::intravisit;\n use rustc_hir::{HirId, CRATE_HIR_ID};\n use rustc_interface::interface;\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::{self, CrateType};\n+use rustc_session::config::{self, CrateType, ErrorOutputType};\n use rustc_session::{lint, DiagnosticOutput, Session};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::SourceMap;\n@@ -248,7 +248,8 @@ fn run_test(\n     outdir: DirState,\n     path: PathBuf,\n ) -> Result<(), TestFailure> {\n-    let (test, line_offset) = make_test(test, Some(cratename), as_test_harness, opts, edition);\n+    let (test, line_offset, supports_color) =\n+        make_test(test, Some(cratename), as_test_harness, opts, edition);\n \n     let output_file = outdir.path().join(\"rust_out\");\n \n@@ -293,6 +294,20 @@ fn run_test(\n             path.to_str().expect(\"target path must be valid unicode\").to_string()\n         }\n     });\n+    if let ErrorOutputType::HumanReadable(kind) = options.error_format {\n+        let (_, color_config) = kind.unzip();\n+        match color_config {\n+            ColorConfig::Never => {\n+                compiler.arg(\"--color\").arg(\"never\");\n+            }\n+            ColorConfig::Always => {\n+                compiler.arg(\"--color\").arg(\"always\");\n+            }\n+            ColorConfig::Auto => {\n+                compiler.arg(\"--color\").arg(if supports_color { \"always\" } else { \"never\" });\n+            }\n+        }\n+    }\n \n     compiler.arg(\"-\");\n     compiler.stdin(Stdio::piped());\n@@ -320,7 +335,10 @@ fn run_test(\n         (true, false) => {}\n         (false, true) => {\n             if !error_codes.is_empty() {\n-                error_codes.retain(|err| !out.contains(&format!(\"error[{}]: \", err)));\n+                // We used to check if the output contained \"error[{}]: \" but since we added the\n+                // colored output, we can't anymore because of the color escape characters before\n+                // the \":\".\n+                error_codes.retain(|err| !out.contains(&format!(\"error[{}]\", err)));\n \n                 if !error_codes.is_empty() {\n                     return Err(TestFailure::MissingErrorCodes(error_codes));\n@@ -362,18 +380,19 @@ fn run_test(\n }\n \n /// Transforms a test into code that can be compiled into a Rust binary, and returns the number of\n-/// lines before the test code begins.\n+/// lines before the test code begins as well as if the output stream supports colors or not.\n crate fn make_test(\n     s: &str,\n     cratename: Option<&str>,\n     dont_insert_main: bool,\n     opts: &TestOptions,\n     edition: Edition,\n-) -> (String, usize) {\n+) -> (String, usize, bool) {\n     let (crate_attrs, everything_else, crates) = partition_source(s);\n     let everything_else = everything_else.trim();\n     let mut line_offset = 0;\n     let mut prog = String::new();\n+    let mut supports_color = false;\n \n     if opts.attrs.is_empty() && !opts.display_warnings {\n         // If there aren't any attributes supplied by #![doc(test(attr(...)))], then allow some\n@@ -399,7 +418,7 @@ crate fn make_test(\n     // crate already is included.\n     let result = rustc_driver::catch_fatal_errors(|| {\n         rustc_span::with_session_globals(edition, || {\n-            use rustc_errors::emitter::EmitterWriter;\n+            use rustc_errors::emitter::{Emitter, EmitterWriter};\n             use rustc_errors::Handler;\n             use rustc_parse::maybe_new_parser_from_source_str;\n             use rustc_session::parse::ParseSess;\n@@ -411,8 +430,13 @@ crate fn make_test(\n             // Any errors in parsing should also appear when the doctest is compiled for real, so just\n             // send all the errors that librustc_ast emits directly into a `Sink` instead of stderr.\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n+            supports_color =\n+                EmitterWriter::stderr(ColorConfig::Auto, None, false, false, Some(80), false)\n+                    .supports_color();\n+\n             let emitter =\n                 EmitterWriter::new(box io::sink(), None, false, false, false, None, false);\n+\n             // FIXME(misdreavus): pass `-Z treat-err-as-bug` to the doctest parser\n             let handler = Handler::with_emitter(false, None, box emitter);\n             let sess = ParseSess::with_span_handler(handler, sm);\n@@ -482,7 +506,7 @@ crate fn make_test(\n         Err(ErrorReported) => {\n             // If the parser panicked due to a fatal error, pass the test code through unchanged.\n             // The error will be reported during compilation.\n-            return (s.to_owned(), 0);\n+            return (s.to_owned(), 0, false);\n         }\n     };\n \n@@ -532,7 +556,7 @@ crate fn make_test(\n \n     debug!(\"final doctest:\\n{}\", prog);\n \n-    (prog, line_offset)\n+    (prog, line_offset, supports_color)\n }\n \n // FIXME(aburka): use a real parser to deal with multiline attributes"}, {"sha": "a024e9c72a43e01969a2523dfca486cc115a7b67", "filename": "src/librustdoc/doctest/tests.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/81f9feba97adba7efc81e53a1bb0222ac977121b/src%2Flibrustdoc%2Fdoctest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f9feba97adba7efc81e53a1bb0222ac977121b/src%2Flibrustdoc%2Fdoctest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest%2Ftests.rs?ref=81f9feba97adba7efc81e53a1bb0222ac977121b", "patch": "@@ -11,8 +11,8 @@ fn main() {\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let output = make_test(input, None, false, &opts, DEFAULT_EDITION);\n-    assert_eq!(output, (expected, 2));\n+    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION);\n+    assert_eq!((output, len), (expected, 2));\n }\n \n #[test]\n@@ -26,8 +26,8 @@ fn main() {\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let output = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n-    assert_eq!(output, (expected, 2));\n+    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n+    assert_eq!((output, len), (expected, 2));\n }\n \n #[test]\n@@ -44,8 +44,8 @@ use asdf::qwop;\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let output = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n-    assert_eq!(output, (expected, 3));\n+    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n+    assert_eq!((output, len), (expected, 3));\n }\n \n #[test]\n@@ -61,8 +61,8 @@ use asdf::qwop;\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let output = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n-    assert_eq!(output, (expected, 2));\n+    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n+    assert_eq!((output, len), (expected, 2));\n }\n \n #[test]\n@@ -79,8 +79,8 @@ use std::*;\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let output = make_test(input, Some(\"std\"), false, &opts, DEFAULT_EDITION);\n-    assert_eq!(output, (expected, 2));\n+    let (output, len, _) = make_test(input, Some(\"std\"), false, &opts, DEFAULT_EDITION);\n+    assert_eq!((output, len), (expected, 2));\n }\n \n #[test]\n@@ -98,8 +98,8 @@ use asdf::qwop;\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let output = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n-    assert_eq!(output, (expected, 2));\n+    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n+    assert_eq!((output, len), (expected, 2));\n }\n \n #[test]\n@@ -115,8 +115,8 @@ use asdf::qwop;\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let output = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n-    assert_eq!(output, (expected, 2));\n+    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n+    assert_eq!((output, len), (expected, 2));\n }\n \n #[test]\n@@ -134,8 +134,8 @@ use asdf::qwop;\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let output = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n-    assert_eq!(output, (expected, 3));\n+    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n+    assert_eq!((output, len), (expected, 3));\n \n     // Adding more will also bump the returned line offset.\n     opts.attrs.push(\"feature(hella_dope)\".to_string());\n@@ -147,8 +147,8 @@ use asdf::qwop;\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let output = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n-    assert_eq!(output, (expected, 4));\n+    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n+    assert_eq!((output, len), (expected, 4));\n }\n \n #[test]\n@@ -164,8 +164,8 @@ fn main() {\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let output = make_test(input, None, false, &opts, DEFAULT_EDITION);\n-    assert_eq!(output, (expected, 2));\n+    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION);\n+    assert_eq!((output, len), (expected, 2));\n }\n \n #[test]\n@@ -180,8 +180,8 @@ fn main() {\n     assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let output = make_test(input, None, false, &opts, DEFAULT_EDITION);\n-    assert_eq!(output, (expected, 1));\n+    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION);\n+    assert_eq!((output, len), (expected, 1));\n }\n \n #[test]\n@@ -196,8 +196,8 @@ fn main() {\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let output = make_test(input, None, false, &opts, DEFAULT_EDITION);\n-    assert_eq!(output, (expected, 2));\n+    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION);\n+    assert_eq!((output, len), (expected, 2));\n }\n \n #[test]\n@@ -210,8 +210,8 @@ assert_eq!(2+2, 4);\";\n //Ceci n'est pas une `fn main`\n assert_eq!(2+2, 4);\"\n         .to_string();\n-    let output = make_test(input, None, true, &opts, DEFAULT_EDITION);\n-    assert_eq!(output, (expected, 1));\n+    let (output, len, _) = make_test(input, None, true, &opts, DEFAULT_EDITION);\n+    assert_eq!((output, len), (expected, 1));\n }\n \n #[test]\n@@ -224,8 +224,8 @@ fn make_test_display_warnings() {\n assert_eq!(2+2, 4);\n }\"\n     .to_string();\n-    let output = make_test(input, None, false, &opts, DEFAULT_EDITION);\n-    assert_eq!(output, (expected, 1));\n+    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION);\n+    assert_eq!((output, len), (expected, 1));\n }\n \n #[test]\n@@ -242,8 +242,8 @@ assert_eq!(2+2, 4);\n }\"\n     .to_string();\n \n-    let output = make_test(input, None, false, &opts, DEFAULT_EDITION);\n-    assert_eq!(output, (expected, 2));\n+    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION);\n+    assert_eq!((output, len), (expected, 2));\n \n     let input = \"extern crate hella_qwop;\n assert_eq!(asdf::foo, 4);\";\n@@ -256,8 +256,8 @@ assert_eq!(asdf::foo, 4);\n }\"\n     .to_string();\n \n-    let output = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n-    assert_eq!(output, (expected, 3));\n+    let (output, len, _) = make_test(input, Some(\"asdf\"), false, &opts, DEFAULT_EDITION);\n+    assert_eq!((output, len), (expected, 3));\n }\n \n #[test]\n@@ -274,6 +274,6 @@ test_wrapper! {\n }\"\n     .to_string();\n \n-    let output = make_test(input, Some(\"my_crate\"), false, &opts, DEFAULT_EDITION);\n-    assert_eq!(output, (expected, 1));\n+    let (output, len, _) = make_test(input, Some(\"my_crate\"), false, &opts, DEFAULT_EDITION);\n+    assert_eq!((output, len), (expected, 1));\n }"}, {"sha": "880c859dd1b23e8fd5642bd38e23cf0bb374bad2", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81f9feba97adba7efc81e53a1bb0222ac977121b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f9feba97adba7efc81e53a1bb0222ac977121b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=81f9feba97adba7efc81e53a1bb0222ac977121b", "patch": "@@ -243,7 +243,8 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n                 .collect::<Vec<Cow<'_, str>>>()\n                 .join(\"\\n\");\n             let krate = krate.as_ref().map(|s| &**s);\n-            let (test, _) = doctest::make_test(&test, krate, false, &Default::default(), edition);\n+            let (test, _, _) =\n+                doctest::make_test(&test, krate, false, &Default::default(), edition);\n             let channel = if test.contains(\"#![feature(\") { \"&amp;version=nightly\" } else { \"\" };\n \n             let edition_string = format!(\"&amp;edition={}\", edition);"}]}