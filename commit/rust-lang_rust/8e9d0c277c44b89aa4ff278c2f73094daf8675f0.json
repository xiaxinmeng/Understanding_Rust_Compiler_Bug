{"sha": "8e9d0c277c44b89aa4ff278c2f73094daf8675f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOWQwYzI3N2M0NGI4OWFhNGZmMjc4YzJmNzMwOTRkYWY4Njc1ZjA=", "commit": {"author": {"name": "laurent", "email": "laurent.mazare@gmail.com", "date": "2017-11-17T21:42:25Z"}, "committer": {"name": "laurent", "email": "laurent.mazare@gmail.com", "date": "2017-11-19T11:29:25Z"}, "message": "Remove the brackets argument.", "tree": {"sha": "cb628b4679249e2f4ba7da16726dcaf02d3164e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb628b4679249e2f4ba7da16726dcaf02d3164e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e9d0c277c44b89aa4ff278c2f73094daf8675f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9d0c277c44b89aa4ff278c2f73094daf8675f0", "html_url": "https://github.com/rust-lang/rust/commit/8e9d0c277c44b89aa4ff278c2f73094daf8675f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e9d0c277c44b89aa4ff278c2f73094daf8675f0/comments", "author": {"login": "LaurentMazare", "id": 1041292, "node_id": "MDQ6VXNlcjEwNDEyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1041292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaurentMazare", "html_url": "https://github.com/LaurentMazare", "followers_url": "https://api.github.com/users/LaurentMazare/followers", "following_url": "https://api.github.com/users/LaurentMazare/following{/other_user}", "gists_url": "https://api.github.com/users/LaurentMazare/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaurentMazare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaurentMazare/subscriptions", "organizations_url": "https://api.github.com/users/LaurentMazare/orgs", "repos_url": "https://api.github.com/users/LaurentMazare/repos", "events_url": "https://api.github.com/users/LaurentMazare/events{/privacy}", "received_events_url": "https://api.github.com/users/LaurentMazare/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LaurentMazare", "id": 1041292, "node_id": "MDQ6VXNlcjEwNDEyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1041292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaurentMazare", "html_url": "https://github.com/LaurentMazare", "followers_url": "https://api.github.com/users/LaurentMazare/followers", "following_url": "https://api.github.com/users/LaurentMazare/following{/other_user}", "gists_url": "https://api.github.com/users/LaurentMazare/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaurentMazare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaurentMazare/subscriptions", "organizations_url": "https://api.github.com/users/LaurentMazare/orgs", "repos_url": "https://api.github.com/users/LaurentMazare/repos", "events_url": "https://api.github.com/users/LaurentMazare/events{/privacy}", "received_events_url": "https://api.github.com/users/LaurentMazare/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b74ed09d42b258c2ac0244d7d6ed78dfd08585f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b74ed09d42b258c2ac0244d7d6ed78dfd08585f3", "html_url": "https://github.com/rust-lang/rust/commit/b74ed09d42b258c2ac0244d7d6ed78dfd08585f3"}], "stats": {"total": 51, "additions": 20, "deletions": 31}, "files": [{"sha": "b0969f36378953dd50bca7be70229385788774f1", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 20, "deletions": 31, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8e9d0c277c44b89aa4ff278c2f73094daf8675f0/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9d0c277c44b89aa4ff278c2f73094daf8675f0/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=8e9d0c277c44b89aa4ff278c2f73094daf8675f0", "patch": "@@ -195,7 +195,7 @@ impl<'a, 'tcx, 'v> SuggestContext<'a, 'tcx, 'v> {\n         }\n     }\n \n-    fn recurse(&mut self, brackets: bool, suggestion: &Bool) {\n+    fn recurse(&mut self, suggestion: &Bool) {\n         use quine_mc_cluskey::Bool::*;\n         match *suggestion {\n             True => {\n@@ -207,67 +207,56 @@ impl<'a, 'tcx, 'v> SuggestContext<'a, 'tcx, 'v> {\n             Not(ref inner) => match **inner {\n                 And(_) | Or(_) => {\n                     self.output.push('!');\n-                    self.recurse(true, inner)\n+                    self.output.push('(');\n+                    self.recurse(inner);\n+                    self.output.push(')');\n                 },\n                 Term(n) => {\n-                    if let Some(str) = self.simplify_not(self.terminals[n as usize]) {\n+                    let terminal = self.terminals[n as usize];\n+                    if let Some(str) = self.simplify_not(terminal) {\n                         self.simplified = true;\n                         self.output.push_str(&str)\n                     } else {\n                         self.output.push('!');\n-                        self.recurse(false, inner)\n+                        if let ExprBinary(..) = terminal.node {\n+                            self.output.push('(');\n+                        }\n+                        self.recurse(inner);\n+                        if let ExprBinary(..) = terminal.node {\n+                            self.output.push(';');\n+                        }\n                     }\n                 },\n                 True | False | Not(_) => {\n                     self.output.push('!');\n-                    self.recurse(false, inner)\n+                    self.recurse(inner)\n                 },\n             },\n             And(ref v) => {\n-                if brackets {\n-                    self.output.push('(');\n-                }\n                 for (index, inner) in v.iter().enumerate() {\n                     if index > 0 {\n                         self.output.push_str(\" && \");\n                     }\n                     if let Or(_) = *inner {\n-                        self.recurse(true, inner);\n+                        self.output.push('(');\n+                        self.recurse(inner);\n+                        self.output.push(')');\n                     } else {\n-                        self.recurse(false, inner);\n+                        self.recurse(inner);\n                     }\n                 }\n-                if brackets {\n-                    self.output.push(')');\n-                }\n             },\n             Or(ref v) => {\n-                if brackets {\n-                    self.output.push('(');\n-                }\n                 for (index, inner) in v.iter().enumerate() {\n                     if index > 0 {\n                         self.output.push_str(\" || \");\n                     }\n-                    self.recurse(false, inner);\n-                }\n-                if brackets {\n-                    self.output.push(')');\n+                    self.recurse(inner);\n                 }\n             },\n             Term(n) => {\n-                let brackets = brackets && match self.terminals[n as usize].node {\n-                    ExprBinary(..) => true,\n-                    _ => false,\n-                };\n-                if brackets {\n-                    self.output.push('(');\n-                }\n                 let snip = self.snip(self.terminals[n as usize]);\n                 self.output.push_str(&snip);\n-                if brackets {\n-                    self.output.push(')');\n-                }\n             },\n         }\n     }\n@@ -281,7 +270,7 @@ fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> (String,\n         output: String::new(),\n         simplified: false,\n     };\n-    suggest_context.recurse(false, suggestion);\n+    suggest_context.recurse(suggestion);\n     (suggest_context.output, suggest_context.simplified)\n }\n "}]}