{"sha": "34dc8d25c1e461cc311d6d4404f74502513cd3ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZGM4ZDI1YzFlNDYxY2MzMTFkNmQ0NDA0Zjc0NTAyNTEzY2QzYWU=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-18T09:47:59Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-25T11:50:12Z"}, "message": "Add basic custom derive lowering", "tree": {"sha": "00aab26b07c1cd42dfa350eeddc6c41e5bea178b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00aab26b07c1cd42dfa350eeddc6c41e5bea178b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34dc8d25c1e461cc311d6d4404f74502513cd3ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34dc8d25c1e461cc311d6d4404f74502513cd3ae", "html_url": "https://github.com/rust-lang/rust/commit/34dc8d25c1e461cc311d6d4404f74502513cd3ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34dc8d25c1e461cc311d6d4404f74502513cd3ae/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2dd17f75b1bb5e1185acff66211e74430177592", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2dd17f75b1bb5e1185acff66211e74430177592", "html_url": "https://github.com/rust-lang/rust/commit/e2dd17f75b1bb5e1185acff66211e74430177592"}], "stats": {"total": 180, "additions": 152, "deletions": 28}, "files": [{"sha": "d61343657c4f40119f49acb9e656280348b5ac2f", "filename": "Cargo.lock", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34dc8d25c1e461cc311d6d4404f74502513cd3ae/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/34dc8d25c1e461cc311d6d4404f74502513cd3ae/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=34dc8d25c1e461cc311d6d4404f74502513cd3ae", "patch": "@@ -1081,6 +1081,14 @@ dependencies = [\n  \"drop_bomb\",\n ]\n \n+[[package]]\n+name = \"ra_proc_macro\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"ra_mbe\",\n+ \"ra_tt\",\n+]\n+\n [[package]]\n name = \"ra_prof\"\n version = \"0.1.0\""}, {"sha": "b3e8116719bc60d2cf5bbd1dd8f6ab8d6cdb5fa3", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/34dc8d25c1e461cc311d6d4404f74502513cd3ae/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34dc8d25c1e461cc311d6d4404f74502513cd3ae/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=34dc8d25c1e461cc311d6d4404f74502513cd3ae", "patch": "@@ -475,6 +475,9 @@ impl AsMacroCall for AstIdWithPath<ast::ModuleItem> {\n         resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n     ) -> Option<MacroCallId> {\n         let def = resolver(self.path.clone())?;\n-        Some(def.as_lazy_macro(db.upcast(), MacroCallKind::Attr(self.ast_id)).into())\n+        Some(\n+            def.as_lazy_macro(db.upcast(), MacroCallKind::Attr(self.ast_id, self.path.to_string()))\n+                .into(),\n+        )\n     }\n }"}, {"sha": "76be71a30f1a1479e0afe4e0e40cebe58e0f333f", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 53, "deletions": 7, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/34dc8d25c1e461cc311d6d4404f74502513cd3ae/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34dc8d25c1e461cc311d6d4404f74502513cd3ae/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=34dc8d25c1e461cc311d6d4404f74502513cd3ae", "patch": "@@ -7,6 +7,7 @@ use hir_expand::{\n     builtin_derive::find_builtin_derive,\n     builtin_macro::find_builtin_macro,\n     name::{name, AsName, Name},\n+    proc_macro::ProcMacroExpander,\n     HirFileId, MacroCallId, MacroDefId, MacroDefKind,\n };\n use ra_cfg::CfgOptions;\n@@ -238,6 +239,18 @@ impl DefCollector<'_> {\n         self.def_map.modules[module_id].scope.define_legacy_macro(name, mac);\n     }\n \n+    /// Define a proc macro\n+    ///\n+    /// A proc macro is similar to normal macro scope, but it would not visiable in legacy textual scoped.\n+    /// And unconditionally exported.\n+    fn define_proc_macro(&mut self, name: Name, macro_: MacroDefId) {\n+        self.update(\n+            self.def_map.root,\n+            &[(name, PerNs::macros(macro_, Visibility::Public))],\n+            Visibility::Public,\n+        );\n+    }\n+\n     /// Import macros from `#[macro_use] extern crate`.\n     fn import_macros_from_extern_crate(\n         &mut self,\n@@ -537,8 +550,9 @@ impl DefCollector<'_> {\n             true\n         });\n         attribute_macros.retain(|directive| {\n-            if let Some(call_id) =\n-                directive.ast_id.as_call_id(self.db, |path| self.resolve_attribute_macro(&path))\n+            if let Some(call_id) = directive\n+                .ast_id\n+                .as_call_id(self.db, |path| self.resolve_attribute_macro(&directive, &path))\n             {\n                 resolved.push((directive.module_id, call_id, 0));\n                 res = ReachedFixedPoint::No;\n@@ -562,9 +576,11 @@ impl DefCollector<'_> {\n         res\n     }\n \n-    fn resolve_attribute_macro(&self, path: &ModPath) -> Option<MacroDefId> {\n-        // FIXME this is currently super hacky, just enough to support the\n-        // built-in derives\n+    fn resolve_attribute_macro(\n+        &self,\n+        directive: &DeriveDirective,\n+        path: &ModPath,\n+    ) -> Option<MacroDefId> {\n         if let Some(name) = path.as_ident() {\n             // FIXME this should actually be handled with the normal name\n             // resolution; the std lib defines built-in stubs for the derives,\n@@ -573,7 +589,15 @@ impl DefCollector<'_> {\n                 return Some(def_id);\n             }\n         }\n-        None\n+        let resolved_res = self.def_map.resolve_path_fp_with_macro(\n+            self.db,\n+            ResolveMode::Other,\n+            directive.module_id,\n+            &path,\n+            BuiltinShadowMode::Module,\n+        );\n+\n+        resolved_res.resolved_def.take_macros()\n     }\n \n     fn collect_macro_expansion(\n@@ -776,8 +800,8 @@ impl ModCollector<'_, '_> {\n         // FIXME: check attrs to see if this is an attribute macro invocation;\n         // in which case we don't add the invocation, just a single attribute\n         // macro invocation\n-\n         self.collect_derives(attrs, def);\n+        self.collect_proc_macro(attrs);\n \n         let name = def.name.clone();\n         let container = ContainerId::ModuleId(module);\n@@ -854,6 +878,28 @@ impl ModCollector<'_, '_> {\n         }\n     }\n \n+    fn collect_proc_macro(&mut self, attrs: &Attrs) {\n+        if let Some(derive_subtree) = attrs.by_key(\"proc_macro_derive\").tt_values().next() {\n+            if let Some(tt) = derive_subtree.token_trees.get(0) {\n+                let ident = match &tt {\n+                    tt::TokenTree::Leaf(tt::Leaf::Ident(ident)) => ident,\n+                    _ => return, // anything else would be an error (which we currently ignore)\n+                };\n+                let name = ident.as_name();\n+                let krate = self.def_collector.def_map.krate;\n+                let expander = ProcMacroExpander::new(krate);\n+\n+                let macro_id = MacroDefId {\n+                    ast_id: None,\n+                    krate: Some(krate),\n+                    kind: MacroDefKind::ProcMacro(expander),\n+                };\n+\n+                self.def_collector.define_proc_macro(name.clone(), macro_id);\n+            }\n+        }\n+    }\n+\n     fn collect_macro(&mut self, mac: &raw::MacroData) {\n         let mut ast_id = AstIdWithPath::new(self.file_id, mac.ast_id, mac.path.clone());\n "}, {"sha": "7f753bbca146f38ee033779d32fcd8ec32af2c9a", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34dc8d25c1e461cc311d6d4404f74502513cd3ae/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34dc8d25c1e461cc311d6d4404f74502513cd3ae/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=34dc8d25c1e461cc311d6d4404f74502513cd3ae", "patch": "@@ -229,24 +229,22 @@ fn partial_ord_expand(\n mod tests {\n     use super::*;\n     use crate::{test_db::TestDB, AstId, MacroCallId, MacroCallKind, MacroCallLoc};\n+    use name::Name;\n     use ra_db::{fixture::WithFixture, SourceDatabase};\n \n-    fn expand_builtin_derive(s: &str, expander: BuiltinDeriveExpander) -> String {\n+    fn expand_builtin_derive(s: &str, name: Name) -> String {\n+        let def = find_builtin_derive(&name).unwrap();\n+\n         let (db, file_id) = TestDB::with_single_file(&s);\n         let parsed = db.parse(file_id);\n         let items: Vec<_> =\n             parsed.syntax_node().descendants().filter_map(ast::ModuleItem::cast).collect();\n \n         let ast_id_map = db.ast_id_map(file_id.into());\n \n-        // the first one should be a macro_rules\n-        let def =\n-            MacroDefId { krate: None, ast_id: None, kind: MacroDefKind::BuiltInDerive(expander) };\n+        let attr_id = AstId::new(file_id.into(), ast_id_map.ast_id(&items[0]));\n \n-        let loc = MacroCallLoc {\n-            def,\n-            kind: MacroCallKind::Attr(AstId::new(file_id.into(), ast_id_map.ast_id(&items[0]))),\n-        };\n+        let loc = MacroCallLoc { def, kind: MacroCallKind::Attr(attr_id, name.to_string()) };\n \n         let id: MacroCallId = db.intern_macro(loc).into();\n         let parsed = db.parse_or_expand(id.as_file()).unwrap();\n@@ -263,7 +261,7 @@ mod tests {\n         #[derive(Copy)]\n         struct Foo;\n \"#,\n-            BuiltinDeriveExpander::Copy,\n+            name::known::Copy,\n         );\n \n         assert_eq!(expanded, \"impl< >std::marker::CopyforFoo< >{}\");\n@@ -276,7 +274,7 @@ mod tests {\n         #[derive(Copy)]\n         struct Foo<A, B>;\n \"#,\n-            BuiltinDeriveExpander::Copy,\n+            name::known::Copy,\n         );\n \n         assert_eq!(\n@@ -292,7 +290,7 @@ mod tests {\n         #[derive(Copy)]\n         struct Foo<A, B, 'a, 'b>;\n \"#,\n-            BuiltinDeriveExpander::Copy,\n+            name::known::Copy,\n         );\n \n         // We currently just ignore lifetimes\n@@ -310,7 +308,7 @@ mod tests {\n         #[derive(Clone)]\n         struct Foo<A, B>;\n \"#,\n-            BuiltinDeriveExpander::Clone,\n+            name::known::Clone,\n         );\n \n         assert_eq!("}, {"sha": "c2eb75ee522e02bcc3e33e33882f22b12c12484b", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/34dc8d25c1e461cc311d6d4404f74502513cd3ae/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34dc8d25c1e461cc311d6d4404f74502513cd3ae/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=34dc8d25c1e461cc311d6d4404f74502513cd3ae", "patch": "@@ -11,14 +11,15 @@ use ra_syntax::{algo::diff, AstNode, Parse, SyntaxKind::*, SyntaxNode};\n use crate::{\n     ast_id_map::AstIdMap, BuiltinDeriveExpander, BuiltinFnLikeExpander, EagerCallLoc, EagerMacroId,\n     HirFileId, HirFileIdRepr, LazyMacroId, MacroCallId, MacroCallLoc, MacroDefId, MacroDefKind,\n-    MacroFile,\n+    MacroFile, ProcMacroExpander,\n };\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum TokenExpander {\n     MacroRules(mbe::MacroRules),\n     Builtin(BuiltinFnLikeExpander),\n     BuiltinDerive(BuiltinDeriveExpander),\n+    ProcMacro(ProcMacroExpander),\n }\n \n impl TokenExpander {\n@@ -33,6 +34,7 @@ impl TokenExpander {\n             // FIXME switch these to ExpandResult as well\n             TokenExpander::Builtin(it) => it.expand(db, id, tt).into(),\n             TokenExpander::BuiltinDerive(it) => it.expand(db, id, tt).into(),\n+            TokenExpander::ProcMacro(it) => it.expand(db, id, tt).into(),\n         }\n     }\n \n@@ -41,6 +43,7 @@ impl TokenExpander {\n             TokenExpander::MacroRules(it) => it.map_id_down(id),\n             TokenExpander::Builtin(..) => id,\n             TokenExpander::BuiltinDerive(..) => id,\n+            TokenExpander::ProcMacro(..) => id,\n         }\n     }\n \n@@ -49,6 +52,7 @@ impl TokenExpander {\n             TokenExpander::MacroRules(it) => it.map_id_up(id),\n             TokenExpander::Builtin(..) => (id, mbe::Origin::Call),\n             TokenExpander::BuiltinDerive(..) => (id, mbe::Origin::Call),\n+            TokenExpander::ProcMacro(..) => (id, mbe::Origin::Call),\n         }\n     }\n }\n@@ -130,7 +134,10 @@ pub(crate) fn macro_def(\n         MacroDefKind::BuiltInDerive(expander) => {\n             Some(Arc::new((TokenExpander::BuiltinDerive(expander), mbe::TokenMap::default())))\n         }\n-        MacroDefKind::BuiltInEager(_expander) => None,\n+        MacroDefKind::BuiltInEager(_) => None,\n+        MacroDefKind::ProcMacro(expander) => {\n+            Some(Arc::new((TokenExpander::ProcMacro(expander), mbe::TokenMap::default())))\n+        }\n     }\n }\n "}, {"sha": "9ff743b9ea3e53077850276e283e1d8a04ebab84", "filename": "crates/ra_hir_expand/src/eager.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/34dc8d25c1e461cc311d6d4404f74502513cd3ae/crates%2Fra_hir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34dc8d25c1e461cc311d6d4404f74502513cd3ae/crates%2Fra_hir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Feager.rs?ref=34dc8d25c1e461cc311d6d4404f74502513cd3ae", "patch": "@@ -112,7 +112,8 @@ fn eager_macro_recur(\n             }\n             MacroDefKind::Declarative\n             | MacroDefKind::BuiltIn(_)\n-            | MacroDefKind::BuiltInDerive(_) => {\n+            | MacroDefKind::BuiltInDerive(_)\n+            | MacroDefKind::ProcMacro(_) => {\n                 let expanded = lazy_expand(db, &def, curr.with_value(child.clone()))?;\n                 // replace macro inside\n                 eager_macro_recur(db, expanded, macro_resolver)?"}, {"sha": "182c08eb34d3337f852b0be632e4be5333a7f111", "filename": "crates/ra_hir_expand/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34dc8d25c1e461cc311d6d4404f74502513cd3ae/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34dc8d25c1e461cc311d6d4404f74502513cd3ae/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs?ref=34dc8d25c1e461cc311d6d4404f74502513cd3ae", "patch": "@@ -30,6 +30,7 @@ impl Hygiene {\n                         MacroDefKind::BuiltIn(_) => None,\n                         MacroDefKind::BuiltInDerive(_) => None,\n                         MacroDefKind::BuiltInEager(_) => None,\n+                        MacroDefKind::ProcMacro(_) => None,\n                     }\n                 }\n                 MacroCallId::EagerMacro(_id) => None,"}, {"sha": "ac1d12252234cbbd26b111b1c10035c8db073e16", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/34dc8d25c1e461cc311d6d4404f74502513cd3ae/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34dc8d25c1e461cc311d6d4404f74502513cd3ae/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=34dc8d25c1e461cc311d6d4404f74502513cd3ae", "patch": "@@ -11,6 +11,7 @@ pub mod hygiene;\n pub mod diagnostics;\n pub mod builtin_derive;\n pub mod builtin_macro;\n+pub mod proc_macro;\n pub mod quote;\n pub mod eager;\n \n@@ -27,6 +28,7 @@ use ra_syntax::{\n use crate::ast_id_map::FileAstId;\n use crate::builtin_derive::BuiltinDeriveExpander;\n use crate::builtin_macro::{BuiltinFnLikeExpander, EagerExpander};\n+use crate::proc_macro::ProcMacroExpander;\n \n #[cfg(test)]\n mod test_db;\n@@ -217,6 +219,7 @@ pub enum MacroDefKind {\n     // FIXME: maybe just Builtin and rename BuiltinFnLikeExpander to BuiltinExpander\n     BuiltInDerive(BuiltinDeriveExpander),\n     BuiltInEager(EagerExpander),\n+    ProcMacro(ProcMacroExpander),\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -228,21 +231,23 @@ pub struct MacroCallLoc {\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum MacroCallKind {\n     FnLike(AstId<ast::MacroCall>),\n-    Attr(AstId<ast::ModuleItem>),\n+    Attr(AstId<ast::ModuleItem>, String),\n }\n \n impl MacroCallKind {\n     pub fn file_id(&self) -> HirFileId {\n         match self {\n             MacroCallKind::FnLike(ast_id) => ast_id.file_id,\n-            MacroCallKind::Attr(ast_id) => ast_id.file_id,\n+            MacroCallKind::Attr(ast_id, _) => ast_id.file_id,\n         }\n     }\n \n     pub fn node(&self, db: &dyn db::AstDatabase) -> InFile<SyntaxNode> {\n         match self {\n             MacroCallKind::FnLike(ast_id) => ast_id.with_value(ast_id.to_node(db).syntax().clone()),\n-            MacroCallKind::Attr(ast_id) => ast_id.with_value(ast_id.to_node(db).syntax().clone()),\n+            MacroCallKind::Attr(ast_id, _) => {\n+                ast_id.with_value(ast_id.to_node(db).syntax().clone())\n+            }\n         }\n     }\n \n@@ -251,7 +256,7 @@ impl MacroCallKind {\n             MacroCallKind::FnLike(ast_id) => {\n                 Some(ast_id.to_node(db).token_tree()?.syntax().clone())\n             }\n-            MacroCallKind::Attr(ast_id) => Some(ast_id.to_node(db).syntax().clone()),\n+            MacroCallKind::Attr(ast_id, _) => Some(ast_id.to_node(db).syntax().clone()),\n         }\n     }\n }"}, {"sha": "68c82879084022c8306cba83d4bdb88eb35a79de", "filename": "crates/ra_hir_expand/src/proc_macro.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/34dc8d25c1e461cc311d6d4404f74502513cd3ae/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34dc8d25c1e461cc311d6d4404f74502513cd3ae/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fproc_macro.rs?ref=34dc8d25c1e461cc311d6d4404f74502513cd3ae", "patch": "@@ -0,0 +1,32 @@\n+//! Proc Macro Expander stub\n+\n+use crate::{db::AstDatabase, LazyMacroId, MacroCallKind, MacroCallLoc};\n+use ra_db::CrateId;\n+\n+#[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]\n+pub struct ProcMacroExpander {\n+    krate: CrateId,\n+}\n+\n+impl ProcMacroExpander {\n+    pub fn new(krate: CrateId) -> ProcMacroExpander {\n+        ProcMacroExpander { krate }\n+    }\n+\n+    pub fn expand(\n+        &self,\n+        db: &dyn AstDatabase,\n+        id: LazyMacroId,\n+        _tt: &tt::Subtree,\n+    ) -> Result<tt::Subtree, mbe::ExpandError> {\n+        let loc: MacroCallLoc = db.lookup_intern_macro(id);\n+        let name = match loc.kind {\n+            MacroCallKind::FnLike(_) => return Err(mbe::ExpandError::ConversionError),\n+            MacroCallKind::Attr(_, name) => name,\n+        };\n+\n+        dbg!(name);\n+\n+        unimplemented!()\n+    }\n+}"}, {"sha": "d59e4eea6008ca41694bfc56d0fece2d9f8b3927", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/34dc8d25c1e461cc311d6d4404f74502513cd3ae/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34dc8d25c1e461cc311d6d4404f74502513cd3ae/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=34dc8d25c1e461cc311d6d4404f74502513cd3ae", "patch": "@@ -639,3 +639,26 @@ mod clone {\n     );\n     assert_eq!(\"(Wrapper<S>, {unknown})\", type_at_pos(&db, pos));\n }\n+\n+#[test]\n+fn infer_custom_derive_simple() {\n+    let (db, pos) = TestDB::with_position(\n+        r#\"\n+//- /main.rs crate:main deps:foo\n+use foo::Foo;\n+\n+#[derive(Foo)]\n+struct S{}\n+\n+fn test() {\n+    S{}<|>;\n+}\n+\n+//- /lib.rs crate:foo\n+#[proc_macro_derive(Foo)]\n+pub fn derive_foo(_item: TokenStream) -> TokenStream {    \n+}\n+\"#,\n+    );\n+    assert_eq!(\"S\", type_at_pos(&db, pos));\n+}"}, {"sha": "8e8ae2b294e65dff06dd9fba21c4ba9c57a45b42", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34dc8d25c1e461cc311d6d4404f74502513cd3ae/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34dc8d25c1e461cc311d6d4404f74502513cd3ae/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=34dc8d25c1e461cc311d6d4404f74502513cd3ae", "patch": "@@ -33,7 +33,7 @@ impl TokenTextRange {\n }\n \n /// Maps `tt::TokenId` to the relative range of the original token.\n-#[derive(Debug, PartialEq, Eq, Default)]\n+#[derive(Debug, PartialEq, Eq, Clone, Default)]\n pub struct TokenMap {\n     /// Maps `tt::TokenId` to the *relative* source range.\n     entries: Vec<(tt::TokenId, TokenTextRange)>,"}]}