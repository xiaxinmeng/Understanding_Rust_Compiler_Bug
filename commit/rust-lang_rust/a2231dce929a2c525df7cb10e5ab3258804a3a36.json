{"sha": "a2231dce929a2c525df7cb10e5ab3258804a3a36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMjMxZGNlOTI5YTJjNTI1ZGY3Y2IxMGU1YWIzMjU4ODA0YTNhMzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-15T01:25:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-15T01:25:49Z"}, "message": "auto merge of #9200 : lkuper/rust/libsyntax-cleanup, r=luqmana", "tree": {"sha": "4ee4df348e8ba53c69364e44024b75c990eeb9bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ee4df348e8ba53c69364e44024b75c990eeb9bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2231dce929a2c525df7cb10e5ab3258804a3a36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2231dce929a2c525df7cb10e5ab3258804a3a36", "html_url": "https://github.com/rust-lang/rust/commit/a2231dce929a2c525df7cb10e5ab3258804a3a36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2231dce929a2c525df7cb10e5ab3258804a3a36/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dbd509e0f90bc13f7b49c24e48a281928b2ee9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dbd509e0f90bc13f7b49c24e48a281928b2ee9c", "html_url": "https://github.com/rust-lang/rust/commit/0dbd509e0f90bc13f7b49c24e48a281928b2ee9c"}, {"sha": "6ba2cb88a6866f96f26f2906654f03f97dd8e53b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba2cb88a6866f96f26f2906654f03f97dd8e53b", "html_url": "https://github.com/rust-lang/rust/commit/6ba2cb88a6866f96f26f2906654f03f97dd8e53b"}], "stats": {"total": 57, "additions": 2, "deletions": 55}, "files": [{"sha": "67c47093ff62ca04794a12743bf7057b50dcdc1e", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a2231dce929a2c525df7cb10e5ab3258804a3a36/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2231dce929a2c525df7cb10e5ab3258804a3a36/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=a2231dce929a2c525df7cb10e5ab3258804a3a36", "patch": "@@ -519,20 +519,11 @@ impl Visitor<()> for IdVisitor {\n         visit::walk_stmt(self, statement, env)\n     }\n \n-    // XXX: Default\n-    fn visit_arm(&mut self, arm: &Arm, env: ()) {\n-        visit::walk_arm(self, arm, env)\n-    }\n-\n     fn visit_pat(&mut self, pattern: @Pat, env: ()) {\n         (self.visit_callback)(pattern.id);\n         visit::walk_pat(self, pattern, env)\n     }\n \n-    // XXX: Default\n-    fn visit_decl(&mut self, declaration: @Decl, env: ()) {\n-        visit::walk_decl(self, declaration, env)\n-    }\n \n     fn visit_expr(&mut self, expression: @Expr, env: ()) {\n         {\n@@ -545,11 +536,6 @@ impl Visitor<()> for IdVisitor {\n         visit::walk_expr(self, expression, env)\n     }\n \n-    // XXX: Default\n-    fn visit_expr_post(&mut self, _: @Expr, _: ()) {\n-        // Empty!\n-    }\n-\n     fn visit_ty(&mut self, typ: &Ty, env: ()) {\n         (self.visit_callback)(typ.id);\n         match typ.node {\n@@ -612,31 +598,6 @@ impl Visitor<()> for IdVisitor {\n         }\n     }\n \n-    // XXX: Default\n-    fn visit_ty_method(&mut self, type_method: &TypeMethod, env: ()) {\n-        visit::walk_ty_method(self, type_method, env)\n-    }\n-\n-    // XXX: Default\n-    fn visit_trait_method(&mut self, trait_method: &trait_method, env: ()) {\n-        visit::walk_trait_method(self, trait_method, env)\n-    }\n-\n-    // XXX: Default\n-    fn visit_struct_def(&mut self,\n-                        struct_definition: @struct_def,\n-                        identifier: Ident,\n-                        generics: &Generics,\n-                        node_id: NodeId,\n-                        env: ()) {\n-        visit::walk_struct_def(self,\n-                                struct_definition,\n-                                identifier,\n-                                generics,\n-                                node_id,\n-                                env)\n-    }\n-\n     fn visit_struct_field(&mut self, struct_field: @struct_field, env: ()) {\n         (self.visit_callback)(struct_field.node.id);\n         visit::walk_struct_field(self, struct_field, env)"}, {"sha": "c8e40b82e0c30b914d97efbb5575b48293f47891", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a2231dce929a2c525df7cb10e5ab3258804a3a36/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2231dce929a2c525df7cb10e5ab3258804a3a36/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=a2231dce929a2c525df7cb10e5ab3258804a3a36", "patch": "@@ -30,12 +30,12 @@ pub trait Pos {\n }\n \n /// A byte offset\n-#[deriving(Clone, Eq, IterBytes)]\n+#[deriving(Clone, Eq, IterBytes, Ord)]\n pub struct BytePos(uint);\n /// A character offset. Because of multibyte utf8 characters, a byte offset\n /// is not equivalent to a character offset. The CodeMap will convert BytePos\n /// values to CharPos values as necessary.\n-#[deriving(Eq,IterBytes)]\n+#[deriving(Eq,IterBytes, Ord)]\n pub struct CharPos(uint);\n \n // XXX: Lots of boilerplate in these impls, but so far my attempts to fix\n@@ -46,13 +46,6 @@ impl Pos for BytePos {\n     fn to_uint(&self) -> uint { **self }\n }\n \n-impl cmp::Ord for BytePos {\n-    fn lt(&self, other: &BytePos) -> bool { **self < **other }\n-    fn le(&self, other: &BytePos) -> bool { **self <= **other }\n-    fn ge(&self, other: &BytePos) -> bool { **self >= **other }\n-    fn gt(&self, other: &BytePos) -> bool { **self > **other }\n-}\n-\n impl Add<BytePos, BytePos> for BytePos {\n     fn add(&self, rhs: &BytePos) -> BytePos {\n         BytePos(**self + **rhs)\n@@ -70,13 +63,6 @@ impl Pos for CharPos {\n     fn to_uint(&self) -> uint { **self }\n }\n \n-impl cmp::Ord for CharPos {\n-    fn lt(&self, other: &CharPos) -> bool { **self < **other }\n-    fn le(&self, other: &CharPos) -> bool { **self <= **other }\n-    fn ge(&self, other: &CharPos) -> bool { **self >= **other }\n-    fn gt(&self, other: &CharPos) -> bool { **self > **other }\n-}\n-\n impl Add<CharPos,CharPos> for CharPos {\n     fn add(&self, rhs: &CharPos) -> CharPos {\n         CharPos(**self + **rhs)"}]}