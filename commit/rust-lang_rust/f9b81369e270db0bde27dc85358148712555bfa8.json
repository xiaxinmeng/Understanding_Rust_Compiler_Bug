{"sha": "f9b81369e270db0bde27dc85358148712555bfa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YjgxMzY5ZTI3MGRiMGJkZTI3ZGM4NTM1ODE0ODcxMjU1NWJmYTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-23T21:41:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-23T21:41:47Z"}, "message": "Complete variants when only enun name is typed\n\nThis allows the client to filter `Foo::Bar` when *either* `Foo` or\n`Bar` is typed.", "tree": {"sha": "63ec848fc2b6ea91627b7b963b33bf10cb8a20f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63ec848fc2b6ea91627b7b963b33bf10cb8a20f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9b81369e270db0bde27dc85358148712555bfa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9b81369e270db0bde27dc85358148712555bfa8", "html_url": "https://github.com/rust-lang/rust/commit/f9b81369e270db0bde27dc85358148712555bfa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9b81369e270db0bde27dc85358148712555bfa8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd8a75b2cf46a967b3449652fe17c19a8fcc4e41", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd8a75b2cf46a967b3449652fe17c19a8fcc4e41", "html_url": "https://github.com/rust-lang/rust/commit/dd8a75b2cf46a967b3449652fe17c19a8fcc4e41"}], "stats": {"total": 70, "additions": 62, "deletions": 8}, "files": [{"sha": "0a6f5a1ea789bbd896ca5b4e497e21f187473ff3", "filename": "crates/completion/src/presentation.rs", "status": "modified", "additions": 62, "deletions": 8, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/f9b81369e270db0bde27dc85358148712555bfa8/crates%2Fcompletion%2Fsrc%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b81369e270db0bde27dc85358148712555bfa8/crates%2Fcompletion%2Fsrc%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fpresentation.rs?ref=f9b81369e270db0bde27dc85358148712555bfa8", "patch": "@@ -304,9 +304,14 @@ impl Completions {\n     ) {\n         let is_deprecated = is_deprecated(variant, ctx.db);\n         let name = local_name.unwrap_or_else(|| variant.name(ctx.db).to_string());\n-        let qualified_name = match &path {\n-            Some(it) => it.to_string(),\n-            None => name.to_string(),\n+        let (qualified_name, short_qualified_name) = match &path {\n+            Some(path) => {\n+                let full = path.to_string();\n+                let short =\n+                    path.segments[path.segments.len().saturating_sub(2)..].iter().join(\"::\");\n+                (full, short)\n+            }\n+            None => (name.to_string(), name.to_string()),\n         };\n         let detail_types = variant\n             .fields(ctx.db)\n@@ -335,14 +340,12 @@ impl Completions {\n         .set_deprecated(is_deprecated)\n         .detail(detail);\n \n-        if path.is_some() {\n-            res = res.lookup_by(name);\n-        }\n-\n         if variant_kind == StructKind::Tuple {\n             mark::hit!(inserts_parens_for_tuple_enums);\n             let params = Params::Anonymous(variant.fields(ctx.db).len());\n-            res = res.add_call_parens(ctx, qualified_name, params)\n+            res = res.add_call_parens(ctx, short_qualified_name, params)\n+        } else if path.is_some() {\n+            res = res.lookup_by(short_qualified_name);\n         }\n \n         res.add_to(self);\n@@ -606,6 +609,57 @@ fn main() { Foo::Fo<|> }\n         );\n     }\n \n+    #[test]\n+    fn lookup_enums_by_two_qualifiers() {\n+        check(\n+            r#\"\n+mod m {\n+    pub enum Spam { Foo, Bar(i32) }\n+}\n+fn main() { let _: m::Spam = S<|> }\n+\"#,\n+            expect![[r#\"\n+                [\n+                    CompletionItem {\n+                        label: \"Spam::Bar(\u2026)\",\n+                        source_range: 75..76,\n+                        delete: 75..76,\n+                        insert: \"Spam::Bar($0)\",\n+                        kind: EnumVariant,\n+                        lookup: \"Spam::Bar\",\n+                        detail: \"(i32)\",\n+                        trigger_call_info: true,\n+                    },\n+                    CompletionItem {\n+                        label: \"m\",\n+                        source_range: 75..76,\n+                        delete: 75..76,\n+                        insert: \"m\",\n+                        kind: Module,\n+                    },\n+                    CompletionItem {\n+                        label: \"m::Spam::Foo\",\n+                        source_range: 75..76,\n+                        delete: 75..76,\n+                        insert: \"m::Spam::Foo\",\n+                        kind: EnumVariant,\n+                        lookup: \"Spam::Foo\",\n+                        detail: \"()\",\n+                    },\n+                    CompletionItem {\n+                        label: \"main()\",\n+                        source_range: 75..76,\n+                        delete: 75..76,\n+                        insert: \"main()$0\",\n+                        kind: Function,\n+                        lookup: \"main\",\n+                        detail: \"fn main()\",\n+                    },\n+                ]\n+            \"#]],\n+        )\n+    }\n+\n     #[test]\n     fn sets_deprecated_flag_in_completion_items() {\n         check("}]}