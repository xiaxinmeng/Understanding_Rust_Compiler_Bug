{"sha": "3e475e9588bbd0235a85b2b30b42e34b0bbdf36a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNDc1ZTk1ODhiYmQwMjM1YTg1YjJiMzBiNDJlMzRiMGJiZGYzNmE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-06T22:48:02Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-10-06T22:48:02Z"}, "message": "Merge pull request #354 from Pyriphlegethon/master\n\nAdd \"unnecessary mut passed\" lint", "tree": {"sha": "db60278edd730eed5ae031be115b5f7ce40602d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db60278edd730eed5ae031be115b5f7ce40602d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e475e9588bbd0235a85b2b30b42e34b0bbdf36a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e475e9588bbd0235a85b2b30b42e34b0bbdf36a", "html_url": "https://github.com/rust-lang/rust/commit/3e475e9588bbd0235a85b2b30b42e34b0bbdf36a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e475e9588bbd0235a85b2b30b42e34b0bbdf36a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85ac8343431ef693ca07dcbce1e73f17f4c5ec7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/85ac8343431ef693ca07dcbce1e73f17f4c5ec7d", "html_url": "https://github.com/rust-lang/rust/commit/85ac8343431ef693ca07dcbce1e73f17f4c5ec7d"}, {"sha": "390168cc0f8eae3f30a49decd690f667ff211773", "url": "https://api.github.com/repos/rust-lang/rust/commits/390168cc0f8eae3f30a49decd690f667ff211773", "html_url": "https://github.com/rust-lang/rust/commit/390168cc0f8eae3f30a49decd690f667ff211773"}], "stats": {"total": 128, "additions": 126, "deletions": 2}, "files": [{"sha": "a5ab856fc21150c666fe28444cd3e1ad45ab39e5", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e475e9588bbd0235a85b2b30b42e34b0bbdf36a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e475e9588bbd0235a85b2b30b42e34b0bbdf36a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=3e475e9588bbd0235a85b2b30b42e34b0bbdf36a", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 58 lints included in this crate:\n+There are 59 lints included in this crate:\n \n name                                                                                                   | default | meaning\n -------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -63,6 +63,7 @@ name\n [type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                     | warn    | usage of very complex types; recommends factoring out parts into `type` definitions\n [unicode_not_nfc](https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc)                     | allow   | using a unicode literal not in NFC normal form (see http://www.unicode.org/reports/tr15/ for further information)\n [unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                   | warn    | comparing unit values (which is always `true` or `false`, respectively)\n+[unnecessary_mut_passed](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_mut_passed)       | warn    | an argument is passed as a mutable reference although the function/method only demands an immutable reference\n [unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                       | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop\n [while_let_loop](https://github.com/Manishearth/rust-clippy/wiki#while_let_loop)                       | warn    | `loop { if let { ... } else break }` can be written as a `while let` loop\n [wrong_pub_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_pub_self_convention) | allow   | defining a public method named with an established prefix (like \"into_\") that takes `self` with the wrong convention"}, {"sha": "2f71d8cc9df7e8db19d33e3654610f078a1f2594", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e475e9588bbd0235a85b2b30b42e34b0bbdf36a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e475e9588bbd0235a85b2b30b42e34b0bbdf36a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=3e475e9588bbd0235a85b2b30b42e34b0bbdf36a", "patch": "@@ -33,6 +33,7 @@ pub mod eta_reduction;\n pub mod identity_op;\n pub mod minmax;\n pub mod mut_mut;\n+pub mod mut_reference;\n pub mod len_zero;\n pub mod attrs;\n pub mod collapsible_if;\n@@ -66,6 +67,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box eta_reduction::EtaPass);\n     reg.register_late_lint_pass(box identity_op::IdentityOp);\n     reg.register_late_lint_pass(box mut_mut::MutMut);\n+    reg.register_late_lint_pass(box mut_reference::UnnecessaryMutPassed);\n     reg.register_late_lint_pass(box len_zero::LenZero);\n     reg.register_late_lint_pass(box misc::CmpOwned);\n     reg.register_late_lint_pass(box attrs::AttrPass);\n@@ -138,6 +140,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         misc::MODULO_ONE,\n         misc::REDUNDANT_PATTERN,\n         misc::TOPLEVEL_REF_ARG,\n+        mut_reference::UNNECESSARY_MUT_PASSED,\n         needless_bool::NEEDLESS_BOOL,\n         precedence::PRECEDENCE,\n         ranges::RANGE_STEP_BY_ZERO,"}, {"sha": "1cc04e096baa2c78972ae109f1d45443c07c9e9a", "filename": "src/mut_reference.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/3e475e9588bbd0235a85b2b30b42e34b0bbdf36a/src%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e475e9588bbd0235a85b2b30b42e34b0bbdf36a/src%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_reference.rs?ref=3e475e9588bbd0235a85b2b30b42e34b0bbdf36a", "patch": "@@ -0,0 +1,74 @@\n+use rustc::lint::*;\n+use rustc_front::hir::*;\n+use utils::span_lint;\n+use rustc::middle::ty::{TypeAndMut, TypeVariants, MethodCall, TyS};\n+use syntax::ptr::P;\n+\n+declare_lint! {\n+    pub UNNECESSARY_MUT_PASSED,\n+    Warn,\n+    \"an argument is passed as a mutable reference although the function/method only demands an \\\n+     immutable reference\"\n+}\n+\n+\n+#[derive(Copy,Clone)]\n+pub struct UnnecessaryMutPassed;\n+\n+impl LintPass for UnnecessaryMutPassed {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(UNNECESSARY_MUT_PASSED)\n+    }\n+}\n+\n+impl LateLintPass for UnnecessaryMutPassed {\n+    fn check_expr(&mut self, cx: &LateContext, e: &Expr) {\n+        let borrowed_table = cx.tcx.tables.borrow();\n+        match e.node {\n+            ExprCall(ref fn_expr, ref arguments) => {\n+                match borrowed_table.node_types.get(&fn_expr.id) {\n+                    Some(function_type) => {\n+                        if let ExprPath(_, ref path) = fn_expr.node {\n+                            check_arguments(cx, &arguments, function_type, \n+                                            &format!(\"{}\", path));\n+                        }\n+                    },\n+                    None => unreachable!(), // A function with unknown type is called.\n+                                            // If this happened the compiler would have aborted the\n+                                            // compilation long ago.\n+                };\n+\n+\n+            },\n+            ExprMethodCall(ref name, _, ref arguments) => {\n+                let method_call = MethodCall::expr(e.id);\n+                match borrowed_table.method_map.get(&method_call) {\n+                    Some(method_type) => check_arguments(cx, &arguments, method_type.ty, \n+                                                         &format!(\"{}\", name.node.as_str())),\n+                    None => unreachable!(), // Just like above, this should never happen.\n+                };\n+            },\n+            _ => {}\n+        }\n+    }\n+}\n+\n+fn check_arguments(cx: &LateContext, arguments: &[P<Expr>], type_definition: &TyS, name: &str) {\n+    if let TypeVariants::TyBareFn(_, ref fn_type) = type_definition.sty {\n+        let parameters = &fn_type.sig.skip_binder().inputs;\n+        for (argument, parameter) in arguments.iter().zip(parameters.iter()) {\n+            match parameter.sty {\n+                TypeVariants::TyRef(_, TypeAndMut {ty: _, mutbl: MutImmutable}) |\n+                TypeVariants::TyRawPtr(TypeAndMut {ty: _, mutbl: MutImmutable}) => {\n+                    if let Expr_::ExprAddrOf(MutMutable, _) = argument.node {\n+                        span_lint(cx, UNNECESSARY_MUT_PASSED, \n+                                  argument.span, &format!(\"The function/method \\\"{}\\\" \\\n+                                  doesn't need a mutable reference\", \n+                                  name));\n+                    }\n+                },\n+                _ => {}\n+            }\n+        }\n+    }\n+}"}, {"sha": "11810242a886d94d7649d0b5780b468f257bb7f2", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e475e9588bbd0235a85b2b30b42e34b0bbdf36a/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e475e9588bbd0235a85b2b30b42e34b0bbdf36a/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=3e475e9588bbd0235a85b2b30b42e34b0bbdf36a", "patch": "@@ -16,7 +16,7 @@ impl Unrelated {\n \n #[deny(needless_range_loop, explicit_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop)]\n #[deny(unused_collect)]\n-#[allow(linkedlist,shadow_unrelated)]\n+#[allow(linkedlist,shadow_unrelated,unnecessary_mut_passed)]\n fn main() {\n     let mut vec = vec![1, 2, 3, 4];\n     let vec2 = vec![1, 2, 3, 4];"}, {"sha": "7480add8e68b86a5a6e5b8318ff775b33fb451b1", "filename": "tests/compile-fail/mut_reference.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3e475e9588bbd0235a85b2b30b42e34b0bbdf36a/tests%2Fcompile-fail%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e475e9588bbd0235a85b2b30b42e34b0bbdf36a/tests%2Fcompile-fail%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmut_reference.rs?ref=3e475e9588bbd0235a85b2b30b42e34b0bbdf36a", "patch": "@@ -0,0 +1,46 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![allow(unused_variables)]\n+\n+fn takes_an_immutable_reference(a: &i32) {\n+}\n+\n+\n+fn takes_a_mutable_reference(a: &mut i32) {\n+}\n+\n+struct MyStruct;\n+\n+impl MyStruct {\n+    fn takes_an_immutable_reference(&self, a: &i32) {\n+    }\n+\n+    fn takes_a_mutable_reference(&self, a: &mut i32) {\n+    }\n+}\n+\n+#[deny(unnecessary_mut_passed)]\n+fn main() {\n+    // Functions\n+    takes_an_immutable_reference(&mut 42); //~ERROR The function/method \"takes_an_immutable_reference\" doesn't need a mutable reference\n+    \n+    // Methods\n+    let my_struct = MyStruct;\n+    my_struct.takes_an_immutable_reference(&mut 42); //~ERROR The function/method \"takes_an_immutable_reference\" doesn't need a mutable reference\n+    \n+\n+    // No error\n+    \n+    // Functions\n+    takes_an_immutable_reference(&42);\n+    takes_a_mutable_reference(&mut 42);\n+    let a = &mut 42;\n+    takes_an_immutable_reference(a);\n+    \n+    // Methods\n+    my_struct.takes_an_immutable_reference(&42);\n+    my_struct.takes_a_mutable_reference(&mut 42);\n+    my_struct.takes_an_immutable_reference(a);\n+    \n+}"}]}